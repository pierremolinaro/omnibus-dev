target "teensy-3-1-tp"

//-----------------------------------------------------------------------------*

struct $rendezVous {
  var inputWaitList = $taskList ()
  var outputWaitList = $taskList ()
  var inputGuardList = $guardList ()
  var outputGuardList = $guardList ()

  public primitive input () {
    makeTaskReady (!?list:self.outputWaitList ?found:let found)
    if not found {
      guardDidChange (!?guard:self.outputGuardList)
      blockInList (!?list:self.inputWaitList)
    }
  }

  public primitive output () {
    makeTaskReady (!?list:self.inputWaitList ?found:let found)
    if not found {
      guardDidChange (!?guard:self.inputGuardList)
      blockInList (!?list:self.outputWaitList)
    }
  }

  public primitive inputUntil @noWarningIfUnused (?deadline:inDeadline $uint32) -> $bool {
    makeTaskReady (!?list:self.outputWaitList ?found:result)
    if (not result) and (inDeadline > time.millis ()) { 
      blockInListAndOnDeadline (!?list:self.inputWaitList !deadline:inDeadline)
    }
  }

  public primitive outputUntil @noWarningIfUnused (?deadline:inDeadline $uint32) -> $bool {
    makeTaskReady (!?list:self.inputWaitList ?found:result)
    if (not result) and (inDeadline > time.millis ()) { 
      blockInListAndOnDeadline (!?list:self.outputWaitList !deadline:inDeadline)
    }
  }

  public guard input @noWarningIfUnused () {
    makeTaskReady (!?list:self.outputWaitList ?found:accept)
    if not accept {
      handleGuardedCommand (!?guard:self.inputGuardList)
    }
  }

  guard output @noWarningIfUnused () {
    makeTaskReady (!?list:self.inputWaitList ?found:accept)
    if not accept {
      handleGuardedCommand (!?guard:self.outputGuardList)
    }
  }

}

//-----------------------------------------------------------------------------*

var rdvs = $rendezVous ()

//-----------------------------------------------------------------------------*

task T0 priority 0 stackSize 512 {
  var top $uint32 = 0

  while time.waitUntilMS (!deadline:self.top) {
    rdvs.output ()
    self.top += 250
    leds.write (!on:LED_L0)
    time.waitUntilMS (!deadline:self.top)
    rdvs.output ()
    self.top += 250
    leds.write (!off:LED_L0)
  }
}

//-----------------------------------------------------------------------------*

task T1 priority 1 stackSize 512 {

  while rdvs.input () {
    leds.write (!on:LED_L1)
    rdvs.input ()
    leds.write (!off:LED_L1)
  }
}

//-----------------------------------------------------------------------------*
