target "teensy-3-1-tp"

//-----------------------------------------------------------------------------*

struct $monSemaphore {
  var value $uint32
  var list = $taskList ()
  var guardList = $guardList ()

  primitive P @noWarningIfUnused () {
    if self.value > 0 then
      self.value -= 1
    else
      blockInList (!?list:self.list)
    end
  }

  service V () {
    let found = makeTaskReady (!?list:self.list)
    if not found then
      self.value += 1
      guardDidChange (!?guard:self.guardList)
    end
  }

  guard P () {
    accept = self.value > 0
    if accept then
      self.value -= 1
    else
      handleGuardedCommand (!?guard:self.guardList)
    end
  }
  
  guard PP () : self.P () {
  }
}

//-----------------------------------------------------------------------------*

var s0 = $monSemaphore (!value:0) {
  func $T0.loop
}

//-----------------------------------------------------------------------------*

var s1 = $monSemaphore (!value:0) {
  func $T1.loop
}

//-----------------------------------------------------------------------------*

task T0 priority 0 stackSize 512 {
  var top $uint32 = 0

  func loop () {
    waitUntilMS (!deadline:self.top)
    s0.V ()
    self.top += 250
    ledOn (!LED_L0)
    waitUntilMS (!deadline:self.top)
    s0.V ()
    self.top += 250
    ledOff (!LED_L0)
  }
}

//-----------------------------------------------------------------------------*

task T1 priority 1 stackSize 512 {
  var top $uint32 = 0

  func loop () {
    waitUntilMS (!deadline:self.top)
    s1.V ()
    self.top += 249
    ledOn (!LED_L4)
    waitUntilMS (!deadline:self.top)
    s1.V ()
    self.top += 249
    ledOff (!LED_L4)
  }
}

//-----------------------------------------------------------------------------*

task T2 priority 2 stackSize 512 {
  var deadline $uint32 = 0
  
  func loop () {
    select
    on s0.PP () :
      ledToggle  (!LED_L1)
    on s1.P () :
      ledToggle  (!LED_L3)
    on waitUntilMS (!deadline:self.deadline) :
      self.deadline += 200
      ledToggle  (!LED_L2)
    end
  }
}

//-----------------------------------------------------------------------------*
