target "teensy-3-6/xtr32"
let F_CPU_MHZ = 180

import "carte-tp-teensy-3-6.plm-import"

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sync SynchronizationGate {
  var isOpen : $Bool
  var taskList = $TaskList ()
  var guardList = $GuardList ()

  //············································································

  public service close @noUnusedWarning @mutating () {
    self.isOpen = no
  }

  //············································································

  public service open @noUnusedWarning @mutating () {
    if not self.isOpen {
      var continue = yes
      while continue {
        makeTaskReady (!?fromList:self.taskList ?found:continue)
      }
      notifyChange (!?forGuard:self.guardList)
      self.isOpen = yes
    }
  }

  //············································································

  public primitive wait @noUnusedWarning @mutating () {
    if not self.isOpen {
      block (!?inList:self.taskList)
    }
  }

   //············································································

  public guard wait @noUnusedWarning () {
    accept = self.isOpen
    if not accept {
      handle (!?guard:self.guardList)
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sync s1 = $Semaphore (!value:0)
sync s2 = $Semaphore (!value:0)
sync gate = SynchronizationGate (!isOpen:no)

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

task Tâche1 @stacksize 512 @activate {
  var compteur : $UInt32 = 0

  event @setup first {
    digital.set (!mode:.OUTPUT !toPort:.D13) // Led Teensy
    digital.set (!mode:.OUTPUT !toPort:LED_L0)
    digital.set (!mode:.OUTPUT !toPort:LED_L1)
    digital.set (!mode:.OUTPUT !toPort:LED_L2)
  }

  event time.wait (!until:self.compteur) {
    digital.toggle (!port:LED_L0)
    self.compteur +%= 500
    gate.open ()
    s1.wait ()
    s1.wait ()
    gate.open ()
    s2.signal ()
    s2.signal ()
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

task Tâche2 @stacksize 512 @activate {

  event gate.wait () {
    digital.toggle (!port:LED_L1)
    s1.signal ()
    s2.wait ()
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

task Tâche3 @stacksize 512 @activate {

  event gate.wait () {
    digital.toggle (!port:LED_L2)
    s1.signal ()
    s2.wait ()
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
