target "teensy-3-6/privileged"
let F_CPU_MHZ = 180

driver lcd (!DB4:.D16 !DB5:.D15 !DB6:.D14 !DB7:.D19 !RS:.D18 !ENABLE:.D17)

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   ACTIVITY LED                                                                                                       
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func safe activityLedOn @exported () {
  digital.write (!yes !toPort:.D13)
}

func safe activityLedOff @exported () {
  digital.write (!no !toPort:.D13)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let LED_L0 = $digitalPort.D3
let LED_L1 = $digitalPort.D4
let LED_L2 = $digitalPort.D5

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct $synchronizationGate {
  var isOpen $bool
  var taskList = $taskList ()
  var guardList = $guardList ()

  //············································································
  
  public system service close @noUnusedWarning @mutating () {
    self.isOpen = no
  }

  //············································································
  
  public system service open @noUnusedWarning @mutating () {
    if not self.isOpen {
      var continue = yes
      while continue {
        makeTaskReady (!?fromList:self.taskList ?found:continue)
      }
      notifyChange (!?forGuard:self.guardList)
      self.isOpen = yes
    }
  }

  //············································································
  
  public system primitive wait @noUnusedWarning @mutating () {
    if not self.isOpen {
      block (!?inList:self.taskList)
    }
  }

  //············································································
  
  public system primitive wait @noUnusedWarning @mutating (?untilDeadline:deadline $uint32
                                                           !result: result $bool) {
    result = self.isOpen
    if result {
    }else if deadline > time.now () {
      block (!?inList:self.taskList !onDeadline:deadline !?result:result)
    }
  }

  //············································································

  public guard wait @noUnusedWarning () {
    accept = self.isOpen
    if not accept {
      handle (!?guard:self.guardList)
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

task Tâche1 priority 1 stackSize 512 {
  entry signal : self.s1.signal ()
  entry wait : self.s2.wait ()

  var s1 = $semaphore (!value:0)
  var s2 = $semaphore (!value:0)
  var compteur $uint32 = 0

  setup 1000 {
    digital.set (!mode:.OUTPUT !toPort:.D13) // Led Teensy
    digital.set (!mode:.OUTPUT !toPort:LED_L0)
    digital.set (!mode:.OUTPUT !toPort:LED_L1)
    digital.set (!mode:.OUTPUT !toPort:LED_L2)
  }
   
  on time.wait (!untilDeadline:self.compteur) {
    digital.toggle (!port:LED_L0)
    self.compteur +%= 500
    Tâche2.openGate ()
    self.s1.wait ()
    self.s1.wait ()
    Tâche2.openGate ()
    self.s2.signal ()
    self.s2.signal ()
  }
}

task Tâche2 priority 2 stackSize 512 {
  var gate = $synchronizationGate (!isOpen:no)
  entry openGate : self.gate.open ()
  guard waitOnGate : self.gate.wait ()
 
  on self.gate.wait () {
    digital.toggle (!port:LED_L1)
    Tâche1.signal ()
    Tâche1.wait ()
  }
}

task Tâche3 priority 3 stackSize 512 {
   
  on Tâche2.waitOnGate () {
    digital.toggle (!port:LED_L2)
    Tâche1.signal ()
    Tâche1.wait ()
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
