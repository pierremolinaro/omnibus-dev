target "teensy-3-6/unprivileged"
let F_CPU_MHZ = 180

driver lcd (!DB4:.D16 !DB5:.D15 !DB6:.D14 !DB7:.D19 !RS:.D18 !ENABLE:.D17)

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   ACTIVITY LED                                                                                                       
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func section activityLedOn @safe @exported () {
  digital.write (!yes !toPort:.D13)
}

func section activityLedOff @safe @exported () {
  digital.write (!no !toPort:.D13)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let LED_L4 = $digitalPort.D7
let LED_L3 = $digitalPort.D6
let LED_L0 = $digitalPort.D3
let PUSH_P0 = $digitalPort.D8

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

driver project > digital {
  init {
    digital.set (!mode:.OUTPUT !toPort:.D13) // Led Teensy
    digital.set (!mode:.OUTPUT !toPort:LED_L4)
    digital.set (!mode:.OUTPUT !toPort:LED_L3)
    digital.set (!mode:.OUTPUT !toPort:LED_L0)
    digital.set (!mode:.OUTPUT !toPort:LED_L0)
    digital.set (!mode:.INPUT_PULLUP !toPort:PUSH_P0)
  }
}

driver project ()

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct $structWithARC {
  public var unEntierQuelconque $uint32 = 0
  public var donnée = $dynamicBuffer ()
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct $autreStructWithARC {
  public var autreEntierQuelconque $uint32 = 0
  public var structure = $structWithARC ()
  public var autreDonnée = $dynamicBuffer ()
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

task T1 priority 10 stackSize 512 {
  var échéance $uint32 = 0
  var freeRam $uint32 = 0 
  var start $uint32 = 0 
  var end $uint32 = 0 
  var alloc $uint32 = .max 
  var current $uint32 = .max 

  setup 1000 {
    lcd.print (!string:"Free:")
    lcd.goto (!line:1 !column:0)
    lcd.print (!string:"Start:")
    lcd.goto (!line:2 !column:0)
    lcd.print (!string:"Addr:")
  }

  on time.wait (!untilDeadline:self.échéance) {
    self.échéance +%= 500
    digital.toggle (!port:LED_L3)
    let freeRam = freeByteCount ()
    if self.freeRam ≠ freeRam {
      self.freeRam = freeRam
      lcd.goto (!line:0 !column:6)
      lcd.print (!spaces:6)
      lcd.goto (!line:0 !column:6)
      lcd.print (!unsigned:freeRam)
    }
    let start = heapStartAddress ()
    if self.start ≠ start {
      self.start = start
      lcd.goto (!line:1 !column:6)
      lcd.print (!spaces:6)
      lcd.goto (!line:1 !column:6)
      lcd.print (!hex8:start)
    }
    let end = heapAllocAddress ()
    if self.end ≠ end {
      self.end = end
      lcd.goto (!line:2 !column:6)
      lcd.print (!spaces:6)
      lcd.goto (!line:2 !column:6)
      lcd.print (!hex8:end)
    }
    let alloc = totalAllocationObjectCount ()
    if self.alloc ≠ alloc {
      self.alloc = alloc
      lcd.goto (!line:3 !column:0)
      lcd.print (!spaces:6)
      lcd.goto (!line:3 !column:0)
      lcd.print (!unsigned:alloc)
    }
    let current = currentlyAllocatedObjectCount ()
    if self.current ≠ current {
      self.current = current
      lcd.goto (!line:3 !column:17)
      lcd.print (!spaces:2)
      lcd.goto (!line:3 !column:17)
      lcd.print (!unsigned:current)
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

task T2 priority 5 stackSize 512 {
  var échéance1 $uint32 = 2001
  var échéance2 $uint32 = 2001
  var échéance3 $uint32 = 2001
  var data1 = $dynamicBuffer ()
  var data2 = $dynamicBuffer ()
  var structure = $autreStructWithARC ()
  var b $uint8 = 0

  on time.wait (!untilDeadline:self.échéance1) {
    self.échéance1 +%= 71
    digital.toggle (!port:LED_L4)
    if digital.read (!port:PUSH_P0) {
      if lengthOf (!buffer:self.data1) < 500 {
        append (!byte:self.b !?toBuffer:self.data1)
        self.b +%= 1
        // assert (self.b < 25) // For checking assert instruction
      }else{
        removeAll (!?fromBuffer:self.data1)
      }
    }else{
      removeAll (!?fromBuffer:self.data1)
    }
  }

  on time.wait (!untilDeadline:self.échéance2) {
    self.échéance2 +%= 97
    self.data2 = self.data1
  }

  on time.wait (!untilDeadline:self.échéance3) {
    self.échéance3 +%= 511
    self.structure.structure.donnée = self.data2
    self.testReleaseLocalVar (!in:self.structure.structure.donnée)
  }
  
  func testReleaseLocalVar (?in: inData $dynamicBuffer) {
    var d = $structWithARC ()
    d.donnée = inData
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

task T3 priority 100 stackSize 512 {
  var data = $dynamicBuffer ()
 
  on time.wait (!untilDeadline:0) {
    digital.toggle (!port:LED_L0)
    if digital.read (!port:PUSH_P0) {
      if lengthOf (!buffer:self.data) == 0 {
        append (!byte:0 !?toBuffer:self.data)
        self.testReleaseLocalVar (!in:self.data)
      }else{
        removeAll (!?fromBuffer:self.data)
      }
    }else{
      removeAll (!?fromBuffer:self.data)
    }
  }

  func testReleaseLocalVar (?in: inData $dynamicBuffer) {
    externalSection (!in:inData)
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

system section externalSection (?in: inData $dynamicBuffer) {
  var d = inData
  append (!byte:0 !?toBuffer:d)
  var xxxx = [$bool] ()
  xxxx.append (!yes)
  var lg = xxxx.length ()
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
