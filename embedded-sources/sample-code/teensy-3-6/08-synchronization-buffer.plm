target "teensy-3-6/xtr32"
let F_CPU_MHZ = 180

import "carte-tp-teensy-3-6.plm-import"

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let SIZE = 10

sync SynchronizationBuffer {
  var data = [SIZE @x $UInt32] (!repeated:$UInt32 ())
  var readIndex : $UInt32 = 0
  var writeIndex : $UInt32 = 0
  var readSemaphore = $Semaphore (!value:0)
  var writeSemaphore = $Semaphore (!value:SIZE)

  //············································································

  public func write user @mutating @noUnusedWarning (? value : $UInt32) {
    self.writeSemaphore.wait ()
    self.data [self.writeIndex] = value
    self.writeIndex += 1
    if self.writeIndex == SIZE {
      self.writeIndex = 0
    }
    self.readSemaphore.signal ()
  }

  //············································································

  public func read user @mutating @noUnusedWarning (! value : $UInt32) {
    self.readSemaphore.wait ()
    value = self.data [self.readIndex]
    self.readIndex += 1
    if self.readIndex == SIZE {
      self.readIndex = 0
    }
    self.writeSemaphore.signal ()
  }

  //············································································

  public guard read @noUnusedWarning (! value : $UInt32) : self.readSemaphore.wait () {
    value = self.data [self.readIndex]
    self.readIndex += 1
    if self.readIndex == SIZE {
      self.readIndex = 0
    }
    self.writeSemaphore.signal ()
  }

  //············································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sync buffer = SynchronizationBuffer ()

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

task Tâche1 @stacksize 512 {
  var compteur : $UInt32 = 0
  var index : $UInt32 = 0

  event @setup first {
    digital.set (!mode:.OUTPUT !toPort:LED_L0)
    digital.set (!mode:.OUTPUT !toPort:LED_L1)
    digital.set (!mode:.OUTPUT !toPort:LED_L2)
  }

  event time.wait (!until:self.compteur) {
    digital.toggle (!port:LED_L0)
    self.compteur +%= 500
    self.index += 1
    buffer.write (!self.index)
  }
}

task Tâche2 @stacksize 512 @activate {

  event buffer.read (?var value $UInt32) {
    lcd.goto (!line:0 !column:0)
    lcd.print (!u32:value)
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
