//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  This eDMA demo shows how using DMA for outputing periodic signal
//  The output port is D13 (LED_BUILTIN), i.e. PTC5
//  Port D3 is toggled at #PIT0 frequency
//  Port D4 is toggled at the end of PATTERN_LENGTH (major loop count) transfers
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// This code works on Teensy 3.6
// It has not been tested on Teensy 3.5
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// IT DOES NOT WORK ON TEENSY 3.1, THE MICRO-CONTROLLER IS BUGGY
//    The symptom is D4 blinks at 150 kHz, independantly from PATTERN_FREQUENCY
//    See Mask Set Errata for Mask 1N36B: https://www.nxp.com/docs/en/errata/KINETIS_K_1N36B.pdf
//    Erratum ID e4588: Instead of sending a single DMA request every time the PIT expires, the first
//    time the PIT triggers a DMA transfer the “always enabled” source will not negate its request.
//    This results in the DMA request remaining asserted continuously after the first trigger.
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

target "teensy-3-6/xtr32"
let F_CPU_MHZ = 180

import "carte-tp-teensy-3-6.plm-import"

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let PATTERN_FREQUENCY = 5 // In Hertz
// So LED_L3 frequency is PATTERN_FREQUENCY / 2
// So D4 frequency is PATTERN_FREQUENCY / 2 / PATTERN_LENGTH

staticArray kPATTERN { let x : Bool }

extend staticArray kPATTERN ( // Morse code example: output "S S S ..."
  yes :: no :: yes :: no :: yes :: // 3 dots : letter S
  no :: no :: no :: no :: no :: no :: no // Medium gap betwween words
)

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————
// eDMA module cannot access GPIO from aliased bit-band regions.
// eDMA module can access:
//    - GPIOx_PDOR (but it changes all bits of the given GPIO x)
//    - GPIOx_PSOR (it sets selected bits of the given GPIO x, but cannot reset them)
//    - GPIOx_PCOR (it resets selected bits of the given GPIO x, but cannot set them)
//    - GPIOx_PTOR (it toggles selected bits of the given GPIO x)
// So we use GPIOx_PTOR

// The output port is D7: PTD2
// For toggling D7, without any change on other GPIOC bits: "GPIOD_PTOR = (1 << 2)"
// "GPIOD_PTOR = 0  ::" is a nop
// So we need to transform the kPATTERN boolean array to the gOutputPattern uint32_t array, that will
// contains (1 << 2) for toggling PTD2 port, and 0 for not changing it: the values
// are not the kPATTERN values, but the toggles we need to output the given pattern.
// Building the gOutputPattern array is done at the beginning of the setup function.

let PATTERN_LENGTH = kPATTERN.count

typealias PatternArray = [PATTERN_LENGTH • UInt32]

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

driver pit > root {
  interrupt section PITChannel3 {
  //--- Acquitter l'interruption
    $(PIT:TFLG [3]) = $(PIT.TFLG !TIF:1)
  //--- Toggle LED_L3
    digital.toggle (!port:LED_L3)
  }

  interrupt section DMAChannel0TransferComplete {
  //--- Acquitter l'interruption
    $(DMA:CINT) = 0
  //--- Toggle LED_L2
    digital.toggle (!port:LED_L2)
  }
}

driver pit ()

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

section initializeDMA (?!pattern : PatternArray) {
//--- Transform pattern for encoding level changes
  var current = no
  var index : UInt32 = 0
  for élément in kPATTERN {
    let b = élément.x
    pattern [index] = if current ≠ b { 0 } else { 1 << 2 }
    index += 1
    current = b
  }
//--- Set up LED_BUILTIN digital output at LOW level
  digital.set (!mode:.OUTPUT !toPort:LED_L4)
  digital.write (!no !toPort:LED_L4)

//--- Power on DMA:MUX, PIT, DMA
  $(SIM:SCGC6) |= $(SIM.SCGC6 !DMAMUX:1 !PIT:1)
  $(SIM:SCGC7) |= $(SIM.SCGC7 !DMA:1)

//--- Unmask PIT0 interrupt
  enable (!interrupt:.PITChannel3)

//--- Unmask DMAChannel0TransferComplete interrupt
  enable (!interrupt:.DMAChannel0TransferComplete)

//--- Enable PIT module
  $(PIT:MCR) = 0

//--- Disable #PIT3
  $(PIT:TCTRL [3]) = 0

//--- #PIT0 clock frequency is BUS (in Hertz): #PIT:LDVAL3 sets the request period of DMA 0
  $(PIT:LDVAL [3]) = ((BUS_MHZ * 1_000_000) / PATTERN_FREQUENCY) - 1

//--- Clear #PIT3 interrupt flag
  $(PIT:TFLG [3]) = 1

//--- Disable DMA Channel 0: it is required for configuring it
  $(DMAMUX:CHCFG [3]) = 0

//--- Initial source address: the pattern array address
  $(DMA:TCD_SADDR [3]) = addressof (pattern)

//--- After every request, source address is incremented by 4
  $(DMA:TCD_SOFF [3]) = 4

//--- At the end of a major loop, source address is decremented to pattern array address
  $(DMA:TCD_SLAST [3]) = - 4 * PATTERN_LENGTH // - transfert_size * major_loop_count

//--- Destination address: the address of the GPIOC_PTOR control register
  $(DMA:TCD_DADDR [3]) = addressof $(GPIOD:PTOR)

//--- After every request, destination address is not modified
  $(DMA:TCD_DOFF [3]) = 0

//--- At the end of a major loop, destination address is not modified
  $(DMA:TCD_DLASTSGA [3]) = 0

//--- Set major loop count
  $(DMA:TCD_CITER_ELINKNO [3]) = PATTERN_LENGTH
  $(DMA:TCD_BITER_ELINKNO [3]) = PATTERN_LENGTH

//--- Source and destination are 32-bit
  $(DMA:TCD_ATTR [3]) = $(DMA.TCD_ATTR
    !SSIZE: DMA_TCD_ATTR_SIZE_32BIT // Transfer source size is 32-bit
    !DSIZE: DMA_TCD_ATTR_SIZE_32BIT // Transfer destination size is 32-bit
  )

//--- Number of bytes to transfer per request: 4
  $(DMA:TCD_NBYTES_MLNO [3]) = 4

//--- Set repetition and DMA interrupt
// if DREQ bit is set, the DMA performs PATTERN_LENGTH transfers and stops)
// Otherwise, the DMA performs PATTERN_LENGTH transfers repetitively
  $(DMA:TCD_CSR [3]) = $(DMA.TCD_CSR
    !INTMAJOR:1 // Generate an interrupt at the end of major loop count transfert (for toggling D4)
  )

//--- Configure DMA Channel
  $(DMAMUX:CHCFG [3]) = $(DMAMUX.CHCFG
    !ENABLE:1 // DMA Channel 0 is enabled
    !TRIG:1   // DMA Channel 0 is triggered by #PIT 0
    !SOURCE:DMAMUX_SOURCE_ALWAYS0 // Trigger is always active
  )

//--- Start DMA Channel 0
  $(DMA:SERQ) = 3

//--- Enable #PIT 0 : it starts counting, enable interrupt
  $(PIT:TCTRL [3]) = $(PIT.TCTRL !TEN:1 !TIE:1)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

task Tâche @stacksize 512 @activate {
  var compteur : UInt32 = 0
  var pattern = PatternArray (!repeated:0)

  on @setup first {
    initializeDMA (!?self.pattern)
    digital.set (!mode:.OUTPUT !toPort:LED_L0)
    digital.set (!mode:.OUTPUT !toPort:LED_L3)
    digital.set (!mode:.OUTPUT !toPort:LED_L2)
  }

  on time.wait (!until:self.compteur) {
    digital.write (!yes !toPort:LED_L0)
    self.compteur +%= 500
    time.wait (!until: self.compteur)
    digital.write (!no !toPort:LED_L0)
    self.compteur +%= 500
    lcd.goto (!line:0 !column:0)
    lcd.print (!u32:self.pattern.count)
    lcd.print (!string:" ")
    let cc = ISRSlot.PITChannel3.uint7
    lcd.print (!u32:extend (cc))
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
