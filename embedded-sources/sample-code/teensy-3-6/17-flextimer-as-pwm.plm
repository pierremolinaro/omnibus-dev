target "teensy-3-6/xtr32"
let F_CPU_MHZ = 24
//let myBUS_MHZ @display = BUS_MHZ
//let myFLEXBUS_MHZ @display = FLEXBUS_MHZ
//let myFLASH_KHZ @display = FLASH_KHZ

import "carte-tp-teensy-3-6.plm-import"

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

driver myDriver > digital {

  //····················································································································
  //--- Clock source is set by the CLKS field of FTM0:SC :
  //   00  No clock selected. This in effect disables the FTM counter.    //   01  System clock, frequency given by BUS_MHZ   //   10  Fixed frequency clock, is MCGFFCLK ?????   //   11  External clock    //--- Clock prescaler is set by the PS field of FTM0:SC :
  //   000  Divide by 1    //   001  Divide by 2    //   010  Divide by 4    //   011  Divide by 8    //   100  Divide by 16    //   101  Divide by 32    //   110  Divide by 64    //   111  Divide by 128
  //  The overflow frequency is : BUS_MHZ / (prescaler * (FTM0:MOD - FTM0:CNTIN + 1))
  //---- Examples for BUS_MHZ = 60 MHz (F_CPU_MHZ = 240)
  //    prescaler   FTM0:CNTIN   FTM0:MOD   Resulting frequency
  //      /16                0     0xFFFF   57,22 Hz
  //      /1                 0         14   4 MHz
  //····················································································································

  startup {
    digital.set (!mode:.OUTPUT !toPort:.D13) // Led Teensy
    digital.set (!mode:.OUTPUT !toPort:.D3) // Led L0
    digital.set (!mode:.OUTPUT !toPort:.D8) // Led L0
  //--- Enable clock
    $(SIM:SCGC6) |= ${SIM:SCGC6 !FTM0:1}
  //--- Set counter min value
    $(FTM[0]:CNTIN) = ${FTM:CNTIN !INIT:0}
  //--- Set counter max value
    $(FTM[0]:MOD) = ${FTM:MOD !MOD:0xFFFF}
  //--- Set prescaler
    $(FTM[0]:SC) = ${FTM:SC !CLKS:1 !PS:4}
  //--- Enable NVIC interrupt
    enable (!interrupt:.FTM0)
  //--- Enable FTM interrupt
    $(FTM[0]:SC) |= ${FTM:SC !TOIE:1}
  }

  //····················································································································

  interrupt section FTM0 {
  //--- Set by hardware when the FTM counter passes the value in the MOD register.
  //    The TOF bit is cleared by reading the SC register while TOF is set and then writing a 0 to TOF bit
    $(FTM[0]:SC) &= ~ ${FTM:SC !TOF:1}
    digital.toggle (!port:.D3)
    digital.toggle (!port:.D8)
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

driver myDriver ()

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
