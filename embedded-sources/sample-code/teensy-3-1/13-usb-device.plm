target "teensy-3-1/unprivileged"

import "carte-tp-teensy-3-1.plm-import"

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// USB DEVICE DRIVER
// Kevin Cuzner wrote a simpler version, and a great blog article:
//   http://kevincuzner.com/2014/12/12/teensy-3-1-bare-metal-writing-a-usb-driver/
//   https://github.com/kcuzner/teensy-oscilloscope/blob/master/scope-teensy/src/usb.c
//---
//   https://github.com/prof7bit/frdm-kl25z-minimal-usb-hid
//   http://www.beyondlogic.org/usbnutshell/usb1.shtml
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let NUM_ENDPOINTS = 4

//······················································································································

struct $BDT @copyable {
 var desc : $UInt32 = 0
 var addr : $UInt32 = 0
}


let BDT_OWN   = 0x80
let BDT_DATA1 = 0x40
let BDT_DATA0 = 0x00
let BDT_DTS   = 0x08
let BDT_STALL = 0x04
//let BDT_PID(n) (((n) >> 2) & 15)

let EP0_SIZE = 64

func BDT_DESC section (?count : $UInt32 ?data : $UInt1) -> $UInt32 {
  result = BDT_OWN | BDT_DTS | (count << 16) | if data ≠ 0 {BDT_DATA1} else {BDT_DATA0}
}

let TX   = 1
let RX   = 0
let ODD  = 1
let EVEN = 0
let DATA0 = 0
let DATA1 = 1

func index section (? endpoint : $UInt32 ?tx : $UInt32 ?odd : $UInt32) -> $UInt32 {
  result = (endpoint << 2) | (tx << 1) | odd
}

let TRACE_SIZE = 10

//······················································································································

driver usb_device > digital {
// Descriptor table should be aligned on a 512 byte-boudary
  var descriptorTable @align 512 =  [(NUM_ENDPOINTS+1)*4 @x $BDT] (!repeated: $BDT ())

  var ep0_rx0_buf @align 4 = [EP0_SIZE @x $UInt8] (!repeated:0)
  var ep0_rx1_buf @align 4 = [EP0_SIZE @x $UInt8] (!repeated:0)
  var ep0_tx_bdt_bank : $UInt32 = 0

  var état = [TRACE_SIZE @x $UInt4] (!repeated:0)
  var indexÉtat : $UInt32 = 0

  public section lireÉtat (?index : $UInt32) -> $UInt32 {
    result = extend (self.état [index])
  }

  var trace : $UInt32 = 0

  public section lireAddresseUSB () -> $UInt32 {
    result = extend ($(USB0:ADDR))
  }

  //····················································································································

  startup {
    digital.set (!mode:.OUTPUT !toPort:LED_L1)
    digital.set (!mode:.OUTPUT !toPort:LED_L2)
    digital.set (!mode:.OUTPUT !toPort:LED_L3)
    digital.set (!mode:.OUTPUT !toPort:LED_L4)
  // This basically follows the flowchart in the Kinetis Quick Reference User Guide, Rev. 3, 05/2014, page 134
  //-- Assume 48 MHz clock already running
    $(SIM:SCGC4) |= ${SIM:SCGC4 !USBOTG:1} // SIM - enable clock
//    MPU:RGDAAC [0] |= {MPU:RGDAAC !M4RE:1 !M4WE:1}
  //--- If using IRC48M, turn on the USB clock recovery hardware
//    if @static (F_CPU_MHZ == 180) or (F_CPU_MHZ == 216) {
//      USB0:CLK_RECOVER_IRC_EN = {USB0:CLK_RECOVER_IRC_EN !IRC_EN:1 !REG_EN:1}
//      USB0:CLK_RECOVER_CTRL = {USB0:CLK_RECOVER_CTRL !CLOCK_RECOVER_EN:1 !RESTART_IFRTRIM_EN:1}
//    }
  //--- Reset USB module (SB0:USBTRC0:USBRESET is always read as 0. Wait 2 USB clock cycles after setting this bit)
    $(USB0:USBTRC0) |= ${USB0:USBTRC0 !USBRESET:1} // Page 1516
    while $(USB0:USBTRC0:USBRESET) ≠ 0 {} // wait for reset to end
  //-- Set descriptor table base address
    let descriptorTableBaseAddress = addressof (self.descriptorTable)
    $(USB0:BDTPAGE1) = descriptorTableBaseAddress [08...15]
    $(USB0:BDTPAGE2) = descriptorTableBaseAddress [16...23]
    $(USB0:BDTPAGE3) = descriptorTableBaseAddress [24...31]
  //--- Clear all ISR flags
    $(USB0:ISTAT) = 0xFF
    $(USB0:ERRSTAT) = 0xFF
    $(USB0:OTGISTAT) = 0xFF
    $(USB0:INTEN) = ${USB0:INTEN !USBRSTEN:1} // | 0x40
  //-- Enable USB
    $(USB0:CTL) = ${USB0:CTL !USBENOFEN:1}
    $(USB0:USBCTRL) = 0
  //-- Enable reset interrupt
    $(USB0:INTEN) = ${USB0:INTEN !USBRSTEN:1}
  //-- Enable interrupt in NVIC
    enable (!interrupt: .USBOTG)
  //--- Enable d+ pullup
    $(USB0:CONTROL) = ${USB0:CONTROL !DPPULLNONOTG:1} // Page 1515
  }

  //····················································································································

  interrupt section USBOTG {
    let status = $(USB0:ISTAT)

  //-------------------- RESET: configure Endpoint 0
    if (status & ${USB0:ISTAT !USBRST:1}) ≠ 0 {
//      self.état [self.indexÉtat] = 1
//      self.indexÉtat = (self.indexÉtat + 1) % TRACE_SIZE
      self.configureEndPoint0OnReset ()
  //    USB0:ISTAT = {USB0:ISTAT !USBRST:1} // Ack
    }else{
    //-------------------- START OF FRAME
      if (status & ${USB0:ISTAT !SOFTOK:1}) ≠ 0 {
  //        self.état [self.indexÉtat] = 2
  //        self.indexÉtat = (self.indexÉtat + 1) % TRACE_SIZE
        $(USB0:ISTAT) = ${USB0:ISTAT !SOFTOK:1} // Ack
      }

    //-------------------- TOKEN COMPLETED
      if (status & ${USB0:ISTAT !TOKDNE:1}) ≠ 0 { // Page 1502
  //        digital.write (!yes !toPort:LED_L2)
  //        self.état [self.indexÉtat] = 3
  //        self.indexÉtat = (self.indexÉtat + 1) % TRACE_SIZE
        self.tokenCompleted ()
        $(USB0:ISTAT) = ${USB0:ISTAT !TOKDNE:1} // Ack
      }

    //-------------------- STALL
      if (status & ${USB0:ISTAT !STALL:1}) ≠ 0 {
        self.état [self.indexÉtat] = 4
        self.indexÉtat = (self.indexÉtat + 1) % TRACE_SIZE
        $(USB0:ISTAT) = ${USB0:ISTAT !STALL:1} // Ack
      }

    //-------------------- ERROR
      if (status & ${USB0:ISTAT !ERROR:1}) ≠ 0 {
        self.état [self.indexÉtat] = 5
        self.indexÉtat = (self.indexÉtat + 1) % TRACE_SIZE
        let err = $(USB0:ERRSTAT)
        $(USB0:ERRSTAT) = err
        $(USB0:ISTAT) = ${USB0:ISTAT !ERROR:1} // Ack
      }

    //-------------------- SLEEP
      if (status & ${USB0:ISTAT !SLEEP:1}) ≠ 0 {
        self.état [self.indexÉtat] = 6
        self.indexÉtat = (self.indexÉtat + 1) % TRACE_SIZE
        $(USB0:ISTAT) = ${USB0:ISTAT !SLEEP:1} // Ack
      }
    }
  }

  //····················································································································

  func  configureEndPoint0OnReset section @mutating () {
//      self.état [self.indexÉtat] = 1
//      self.indexÉtat = (self.indexÉtat + 1) % TRACE_SIZE
      $(USB0:CTL) |= ${USB0:CTL !ODDRST:1}
      self.ep0_tx_bdt_bank = 0
   //--- Set up buffers to receive Setup and OUT packets
      self.descriptorTable [index(!0 !RX !EVEN)].desc = BDT_DESC (!EP0_SIZE  !0)
      self.descriptorTable [index(!0 !RX !EVEN)].addr = addressof (self.ep0_rx0_buf)
      self.descriptorTable [index(!0 !RX !ODD) ].desc = BDT_DESC (!EP0_SIZE !0)
      self.descriptorTable [index(!0 !RX !ODD) ].addr = addressof (self.ep0_rx1_buf)
      self.descriptorTable [index(!0 !TX !EVEN)].desc = 0
      self.descriptorTable [index(!0 !TX !ODD) ].desc = 0
    //--- Activate endpoint 0
      $(USB0:ENDPT [0]) = ${USB0:ENDPT !EPRXEN:1 !EPTXEN:1 !EPHSHK:1}
    //--- Clear all ending interrupts
      $(USB0:ERRSTAT) = 0xFF
      $(USB0:ISTAT) = 0xFF
    //--- Set the address to zero during enumeration
      $(USB0:ADDR) = 0
    //--- Enable other interrupts
      $(USB0:ERREN) = 0xFF
      $(USB0:INTEN) = ${USB0:INTEN !STALLEN:1 !SLEEPEN:1 !TOKDNEEN:1 !SOFTOKEN:1 !ERROREN:1 !USBRSTEN:1}
    //--- is this necessary?
   //   USB0:CTL = {USB0:CTL !USBENOFEN:1} // Page 1507
  }

  //····················································································································
  // This means a transaction has completed, we receive this interrupt
  // after data was transferred and the handshake has been completed:
  //
  //   host:TOK_IN    -> device:DATA ->   host:ACK/NAK -> $Interrupt
  //   host:TOK_OUT   ->   host:DATA -> device:ACK/NAK -> $Interrupt
  //   host:TOK_SETUP ->   host:DATA -> device:ACK/NAK -> $Interrupt
  //
  // The handler can then process the received data or queue more
  // data to be sent during the next transaction. When there is a
  // TOK_IN transaction and no data has been placed in the TX buffer
  // then the hardware will automatically send a NAK:
  //
  //   host:TOK_IN -> device:NAK -> NO $Interrupt!
  //
  // There will be no interrupt in this case! This means as long
  // as there is no data to be sent there will also be no TOK_IN
  // calls to the handler anymore. Something else has to prepare
  // a new TX buffer for that endpoint when data becomes available
  // again, the handler will only be called AFTER the transmission!

  func tokenCompleted section @mutating () {
    let transactionStatus = $(USB0:STAT)
    let endPoint $UInt4 = transactionStatus [4...7]
//    let TX_transitionStatus = transactionStatus [3...3]
//    let ODD_transitionStatus = transactionStatus [2...2]
//    let index = index (!extend (endPoint) !extend (TX_transitionStatus) !extend (ODD_transitionStatus))
    if endPoint == 0 {
      self.endpoint_0_handler (!transactionStatus: transactionStatus)
    }else{

    }
//    let index = transactionStatus >> 2
//    let pid = (self.descriptorTable [index].desc >> 2) & 15
//    if pid == 0x0D { // Setup received from host
//      self.usb_setup ()
//    //--- Unfreeze the USB, now that we're ready
//      USB0:CTL = {USB0:CTL !USBENOFEN:1}// clear TXSUSPENDTOKENBUSY bit
//    }else if pid == 0x09 { // IN transaction completed to host
//    }else if (pid == 0x01) or (pid == 0x02) { // OUT transaction received from host
//
//    }

//    if endPoint == 0 {
//      self.configure
//    }else{
//
//    }
  }

  //····················································································································

  func endpoint_0_handler section @mutating (?transactionStatus: _ : $UInt8) {
  }

  //····················································································································

//  func section usb_setup @mutating () {
//  //---
//    let index $UInt32 = 0
//    self.descriptorTable [index].desc = BDT_DESC (!EP0_SIZE !DATA1)
//    self.descriptorTable [index(!0 !TX !EVEN)].desc = 0
//    self.descriptorTable [index(!0 !TX !ODD) ].desc = 0
//  //--- Grab the 8 byte setup info
//    let bmRequestType = self.ep0_rx0_buf [0] & 0x1F
//    let bRequest = self.ep0_rx0_buf [1]
//    if bmRequestType == 0 { // Setup device
//      digital.write (!yes !toPort:LED_L2)
//      self.usb_setup_device (!bRequest)
//    }else if bmRequestType == 1 { // Setup interface
//      digital.write (!yes !toPort:LED_L3)
//
//    }else if bmRequestType == 2 { // Setup endpoint
//      digital.write (!yes !toPort:LED_L4)
//
//    }
//////    let wValue  = {UInt16 !8:self.ep0_rx0_buf [3] !8:self.ep0_rx0_buf [2]}
//////    let wIndex  = {UInt16 !8:self.ep0_rx0_buf [5] !8:self.ep0_rx0_buf [4]}
//////    let wLength = {UInt16 !8:self.ep0_rx0_buf [7] !8:self.ep0_rx0_buf [6]}
////  //--- Build uint16 requestAndType
////    let requestAndType = {UInt16 !8:bRequest !8:bmRequestType}
////  //---
////    if requestAndType == 0x0500 { // Set address, nothing to do
////        digital.write (!yes !toPort:LED_L2)
////    }else if requestAndType == 0x0900 { // Set configuration
////        digital.write (!yes !toPort:LED_L1)
////
////
////    }else if requestAndType == 0x0880 { // Get configuration
////    }else if requestAndType == 0x0080 { // Get status (device)
////    }else if requestAndType == 0x0082 { // Get status (endpoint)
////    }else if requestAndType == 0x0102 { // Clear feature (device)
////    }else if requestAndType == 0x0302 { // Clear feature (endpoint)
////    }else if (requestAndType == 0x0680) or (requestAndType == 0x0681) { // Get descriptor
////        digital.write (!yes !toPort:LED_L3)
////    }
//  }
//
////$(define mGET_STATUS           0
////#define mCLR_FEATURE          1
////#define mSET_FEATURE          3
////#define mSET_ADDRESS          5
////#define mGET_DESC             6
////#define mSET_DESC             7
////#define mGET_CONFIG           8
////#define mSET_CONFIG           9
////#define mGET_INTF             10
////#define mSET_INTF             11
////#define mSYNC_FRAME           12
//
//  func section usb_setup_device @mutating (?bRequest $UInt8) {
//    self.trace = extend (bRequest)
////    const usb_descriptor_list_t *p;
////    int len;
////
////    switch (setup->bRequest) {
////        case mGET_DESC:
////            p = usb_descriptor_list;                    // Find entry in table
////            while(p->wValue) {
////                if(p->wValue == setup->wValue) {
////                    if(p->length == 0)
////                        len = p->addr[0];               // Use structure length
////                    else
////                        len = p->length;
////
////                    iprintf("sending 0x%04x %d\r\n",setup->wValue, len);
////                    usb_queue_tx(ep, p->addr, min(len, setup->wLength));
////                    return;
////                }
////                p++;
////            }
////            iprintf("NOT IMPLEMENTED! 0x%04x\r\n", setup->wValue);
////            break;
////
////        case mSET_ADDRESS:
////            device_state = ADDRESS;
////            device_address = setup->wValue & 0x7f;
////            usb_tx(ep,0,0);                         // Send handshake
////            break;
////
////        case mSET_CONFIG:
////            iprintf("setconfig: %d\r\n", setup->wValue);
////            device_state = ENUMERATED;
////            usb_set_config(setup->wValue);
////            usb_tx(ep,0,0);                         // Send handshake
////            break;
////
////        default:
////            iprintf("NOT IMPLEMENTED! %d\r\n", setup->bRequest);
////            break;
////      }
//  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

driver usb_device ()

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// TASK
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

task T @stacksize 512 @activate {
  var tick : $UInt32 = 0
  var état : $UInt32 = 0

  //····················································································································

  event @setup first {
    digital.set (!mode:.OUTPUT !toPort:.D13) // Led Teensy
    digital.set (!mode:.OUTPUT !toPort:LED_L0)
  }

  //····················································································································

  event time.wait (!until:self.tick) {
    digital.toggle (!port:LED_L0)
    self.tick +%= 500
    lcd.goto (!line:0 !column:0)
    for i : $UInt32 in 0 ..< TRACE_SIZE {
      let e = usb_device.lireÉtat (!i)
      lcd.print (!hex2:e)
    }
    lcd.goto (!line:1 !column:0)
    lcd.print (!hex8:usb_device.lireAddresseUSB ())

  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
