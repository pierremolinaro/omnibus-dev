target "teensy-3-1/unprivileged"

module lcd (!DB4:.D16 !DB5:.D15 !DB6:.D14 !DB7:.D19 !RS:.D18 !ENABLE:.D17)

//——————————————————————————————————————————————————————————————————————————————
//   ACTIVITY LED                                                               
//——————————————————————————————————————————————————————————————————————————————

func safe activityLedOn @exported () {
  digitalWrite (!port:.D13 !yes)
}

func safe activityLedOff @exported () {
  digitalWrite (!port:.D13 !no)
}

//-----------------------------------------------------------------------------*

init 100 {
  pinMode (!port:.D13 !mode:.OUTPUT)
}

//-----------------------------------------------------------------------------*

let LED_L0 = $digitalPort.D3
let LED_L1 = $digitalPort.D4
let LED_L2 = $digitalPort.D5
let LED_L3 = $digitalPort.D6
let LED_L4 = $digitalPort.D7

//-----------------------------------------------------------------------------*

init 1000 {
  pinMode (!port:LED_L0 !mode:.OUTPUT)
  pinMode (!port:LED_L1 !mode:.OUTPUT)
  pinMode (!port:LED_L2 !mode:.OUTPUT)
  pinMode (!port:LED_L3 !mode:.OUTPUT)
  pinMode (!port:LED_L4 !mode:.OUTPUT)
}

//-----------------------------------------------------------------------------*

struct $rendezVous {
  var inputWaitList = $taskList ()
  var outputWaitList = $taskList ()
  var inputGuardList = $guardList ()
  var outputGuardList = $guardList ()

  public system primitive input @mutating () {
    makeTaskReady (!?fromList:self.outputWaitList ?found:let found)
    if not found {
      notifyChange (!?forGuard:self.outputGuardList)
      block (!?inList:self.inputWaitList)
    }
  }

  public system primitive output @mutating () {
    makeTaskReady (!?fromList:self.inputWaitList ?found:let found)
    if not found {
      notifyChange (!?forGuard:self.inputGuardList)
      block (!?inList:self.outputWaitList)
    }
  }

  public system primitive inputUntil @noUnusedWarning @mutating (?deadline:inDeadline $uint32) -> $bool {
    makeTaskReady (!?fromList:self.outputWaitList ?found:result)
    if (not result) and (inDeadline > time.millis ()) { 
      block (!?inList:self.inputWaitList !onDeadline:inDeadline)
    }
  }

  public system primitive outputUntil @noUnusedWarning @mutating (?deadline:inDeadline $uint32) -> $bool {
    makeTaskReady (!?fromList:self.inputWaitList ?found:result)
    if (not result) and (inDeadline > time.millis ()) { 
      block (!?inList:self.outputWaitList !onDeadline:inDeadline)
    }
  }

  public guard input @noUnusedWarning () {
    makeTaskReady (!?fromList:self.outputWaitList ?found:accept)
    if not accept {
      handle (!?guard:self.inputGuardList)
    }
  }

  guard output @noUnusedWarning () {
    makeTaskReady (!?fromList:self.inputWaitList ?found:accept)
    if not accept {
      handle (!?guard:self.outputGuardList)
    }
  }

}

//-----------------------------------------------------------------------------*

var rdvs = $rendezVous ()

//-----------------------------------------------------------------------------*

task T0 priority 0 stackSize 512 {
  var top $uint32 = 0

  on time.waitUntilMS (!deadline:self.top) {
    rdvs.output ()
    self.top += 250
    digitalWrite (!port:LED_L0 !yes)
    time.waitUntilMS (!deadline:self.top)
    rdvs.output ()
    self.top += 250
    digitalWrite (!port:LED_L0 !no)
  }
}

//-----------------------------------------------------------------------------*

task T1 priority 1 stackSize 512 {

  on rdvs.input () {
    digitalWrite (!port:LED_L1 !yes)
    rdvs.input ()
    digitalWrite (!port:LED_L1 !no)
  }
}

//-----------------------------------------------------------------------------*
