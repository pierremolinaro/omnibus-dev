target "teensy-3-1"

//——————————————————————————————————————————————————————————————————————————————
//   ACTIVITY LED                                                               
//——————————————————————————————————————————————————————————————————————————————

func safe activityLedOn @global () {
  digitalWrite (!port:.D13 !true)
}

func safe activityLedOff @global () {
  digitalWrite (!port:.D13 !false)
}

//-----------------------------------------------------------------------------*

init 100 {
  pinMode (!port:.D13 !mode:.OUTPUT)
}

let LED_L0 = $digitalPort.D3
let LED_L1 = $digitalPort.D4

init 1000 {
  pinMode (!port:LED_L0 !mode:.OUTPUT)
  pinMode (!port:LED_L1 !mode:.OUTPUT)
}

//-----------------------------------------------------------------------------*

struct $monSemaphore {
  var value $uint32
  var list = $taskList ()

  public svc service V @mutating () {
    makeTaskReady (!?fromList:self.list ?found:let found)
    if not found {
      self.value += 1
    }
  }

  public svc primitive P_until @mutating (?deadline:inDeadline $uint32) -> $bool {
    result = self.value > 0
    if result {
      self.value -= 1
    }else if inDeadline > time.millis () {
      block (!?inList:self.list !onDeadline:inDeadline)
    }
  }

}

//-----------------------------------------------------------------------------*

var s = $monSemaphore (!value:0)

//-----------------------------------------------------------------------------*

task T1 priority 1 stackSize 512 {
  var top $uint32 = 0

  setup 123 {
    self.top = 1
  }
  
  setup 256 {
    self.top += 2
  }
  
  while time.waitUntilMS (!deadline:self.top) {
    s.V ()
    self.top += 300
    digitalWrite (!port:LED_L0 !true)
    time.waitUntilMS (!deadline:self.top)
    s.V ()
    self.top += 700
    digitalWrite (!port:LED_L0 !false)
  }
}

//-----------------------------------------------------------------------------*

task T2 priority 2 stackSize 512 {
  var top $uint32 = 0

  while time.waitUntilMS (!deadline:0) { // no wait...
    let r = s.P_until (!deadline:self.top)
    if r {
      toggle (!port:LED_L1)
    }else{
      self.top += 400
      toggle (!port:LED_L1)
    }
  }
}

//-----------------------------------------------------------------------------*
