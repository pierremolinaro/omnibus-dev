target "teensy-3-1/unprivileged"

driver lcd (!DB4:.D16 !DB5:.D15 !DB6:.D14 !DB7:.D19 !RS:.D18 !ENABLE:.D17)

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   ACTIVITY LED                                                                                                       
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func safe activityLedOn @exported () {
  digital.write (!yes !toPort:.D13)
}

func safe activityLedOff @exported () {
  digital.write (!no !toPort:.D13)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let LED_L4 = $digitalPort.D7
let LED_L3 = $digitalPort.D6

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

task Tâche1 priority 1 stackSize 512 {
  var compteur $uint32 = 0
  var freeRam $uint32 = 0 
  var start $uint32 = 0 
  var end $uint32 = 0 
  var alloc $uint32 = 0 

  setup 1000 {
    digital.set (!mode:.OUTPUT !toPort:.D13) // Led Teensy
    digital.set (!mode:.OUTPUT !toPort:LED_L4)
    digital.set (!mode:.OUTPUT !toPort:LED_L3)
    lcd.print (!string:"Free:")
    lcd.goto (!line:1 !column:0)
    lcd.print (!string:"Start:")
    lcd.goto (!line:2 !column:0)
    lcd.print (!string:"End:")
    lcd.goto (!line:3 !column:0)
    lcd.print (!string:"Addr:")
  }

  on time.wait (!untilDeadline:self.compteur) {
    self.compteur +%= 500
    digital.toggle (!port:LED_L3)
    let freeRam = freeByteCount ()
    if self.freeRam ≠ freeRam {
      self.freeRam = freeRam
      lcd.goto (!line:0 !column:6)
      lcd.print (!spaces:6)
      lcd.goto (!line:0 !column:6)
      lcd.print (!unsigned:freeRam)
    }
    let start = heapStartAddress ()
    if self.start ≠ start {
      self.start = start
      lcd.goto (!line:1 !column:6)
      lcd.print (!spaces:6)
      lcd.goto (!line:1 !column:6)
      lcd.print (!hex8:start)
    }
    let end = heapEndAddress ()
    if self.end ≠ end {
      self.end = end
      lcd.goto (!line:2 !column:6)
      lcd.print (!spaces:6)
      lcd.goto (!line:2 !column:6)
      lcd.print (!hex8:end)
    }
    let alloc = heapAllocAddress ()
    if self.alloc ≠ alloc {
      self.alloc = alloc
      lcd.goto (!line:3 !column:6)
      lcd.print (!spaces:6)
      lcd.goto (!line:3 !column:6)
      lcd.print (!hex8:alloc)
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

task Tâche2 priority 2 stackSize 512 {
  var compteur $uint32 = 2000
  var data $uint32 = 0
  
  func toto () {
    if allocatedByteSize (!self.data) == 0 {
      let size = self.compteur % 977
      self.data = memoryAlloc (!size:size)
    }else{
      memoryFree (!?self.data)
    }
  }
  
  on time.wait (!untilDeadline:self.compteur) {
    self.compteur +%= 70
    digital.toggle (!port:LED_L4)
    self.toto ()
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
