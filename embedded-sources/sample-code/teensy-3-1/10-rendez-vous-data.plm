target "teensy-3-1/unprivileged"

module lcd (!DB4:.D16 !DB5:.D15 !DB6:.D14 !DB7:.D19 !RS:.D18 !ENABLE:.D17)

//——————————————————————————————————————————————————————————————————————————————
//   ACTIVITY LED                                                               
//——————————————————————————————————————————————————————————————————————————————

func safe activityLedOn @exported () {
  digitalWrite (!port:.D13 !yes)
}

func safe activityLedOff @exported () {
  digitalWrite (!port:.D13 !no)
}

//-----------------------------------------------------------------------------*

init 100 {
  pinMode (!port:.D13 !mode:.OUTPUT)
}

//-----------------------------------------------------------------------------*

let LED_L0 = $digitalPort.D3
let LED_L1 = $digitalPort.D4
let LED_L2 = $digitalPort.D5
let LED_L4 = $digitalPort.D7

//-----------------------------------------------------------------------------*

init 1000 {
  pinMode (!port:LED_L0 !mode:.OUTPUT)
  pinMode (!port:LED_L1 !mode:.OUTPUT)
  pinMode (!port:LED_L2 !mode:.OUTPUT)
  pinMode (!port:LED_L4 !mode:.OUTPUT)
}

//-----------------------------------------------------------------------------*

struct $rendezVousData {
  var readBarrier  = $semaphore (!value:0)
  var writeBarrier = $semaphore (!value:1)
  var data $uint32 = 0

  public func user output @mutating @noUnusedWarning (?data:inData $uint32) {
    self.writeBarrier.wait ()
    self.data = inData
    self.readBarrier.signal ()
  }

  public func user input @mutating @noUnusedWarning (!data:outData $uint32) {
    self.readBarrier.wait ()
    outData = self.data
    self.writeBarrier.signal ()
  }

  public guard input @noUnusedWarning (!data:outData $uint32) : self.readBarrier.wait () {
    outData = self.data
    self.writeBarrier.signal ()
  }

}

//-----------------------------------------------------------------------------*

var rdvs = $rendezVousData ()

//-----------------------------------------------------------------------------*

var rdvs2 = $rendezVousData ()

//-----------------------------------------------------------------------------*

var s = $semaphore (!value:1)

//-----------------------------------------------------------------------------*

task T0 priority 0 stackSize 512 {
  var top $uint32 = 0
  var n $uint32 = 0

  on time.wait (!untilDeadline:self.top) {
    rdvs.output (!data:self.n)
    rdvs2.output (!data:self.n)
    toggle (!port:LED_L0)
    self.top += 500
    self.n += 1
  }
}

//-----------------------------------------------------------------------------*

task T1 priority 1 stackSize 1024 {

  on rdvs.input (?data:let x) {
    toggle (!port:LED_L1)
    s.wait ()
      lcd.goto (!line:0 !column:0)
      lcd.print (!unsigned:x)
    s.signal ()
  }
}

//-----------------------------------------------------------------------------*

task T2 priority 2 stackSize 1024 {
  var deadline $uint32 = 0

  on rdvs2.input (?data:let x) {
    toggle (!port:LED_L2)
    s.wait ()
      lcd.goto (!line:1 !column:0)
      lcd.print (!unsigned:x)
    s.signal ()
  }
  
  on time.wait (!untilDeadline:self.deadline) {
    self.deadline += 200
    toggle (!port:LED_L4)
  }
}

//-----------------------------------------------------------------------------*
