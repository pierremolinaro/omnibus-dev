target "teensy-3-1/unprivileged"

import "carte-tp-teensy-3-1.plm-import"

//-----------------------------------------------------------------------------*

sync $rendezVousData {
  var readBarrier  = $semaphore (!value:0)
  var writeBarrier = $semaphore (!value:1)
  var data $uint32 = 0

  public func output user @mutating @noUnusedWarning (?data:inData $uint32) {
    self.writeBarrier.wait ()
    self.data = inData
    self.readBarrier.signal ()
  }

  public guard output @noUnusedWarning (?data:inData $uint32) : self.writeBarrier.wait () {
    self.data = inData
    self.readBarrier.signal ()
  }

  public func input user @mutating @noUnusedWarning (!data:outData $uint32) {
    self.readBarrier.wait ()
    outData = self.data
    self.writeBarrier.signal ()
  }

  public guard input @noUnusedWarning (!data:outData $uint32) : self.readBarrier.wait () {
    outData = self.data
    self.writeBarrier.signal ()
  }

}

//-----------------------------------------------------------------------------*

sync s = $semaphore (!value:1)
sync rdvs = $rendezVousData ()
sync rdvs2 = $rendezVousData ()

//-----------------------------------------------------------------------------*

task T0 @stacksize 512 @activate {
  var top $uint32 = 0

  on @setup first {
    digital.set (!mode:.OUTPUT !toPort:.D13)
    digital.set (!mode:.OUTPUT !toPort:LED_L0)
    digital.set (!mode:.OUTPUT !toPort:LED_L1)
    digital.set (!mode:.OUTPUT !toPort:LED_L2)
    digital.set (!mode:.OUTPUT !toPort:LED_L4)
  }

  on time.wait (!until:self.top) {
    rdvs2.input (?data:let n)
    rdvs.output (!data:n)
    digital.toggle (!port:LED_L0)
    self.top += 500
  }
}

//-----------------------------------------------------------------------------*

task T1 @stacksize 1024 @activate {
  on rdvs.input (?data:let x) {
    digital.toggle (!port:LED_L1)
    s.wait ()
      lcd.goto (!line:0 !column:0)
      lcd.print (!u32:x)
    s.signal ()
  }
}

//-----------------------------------------------------------------------------*

task T2 @stacksize 1024 @activate {
  var deadline $uint32 = 0
  var n $uint32 = 0

  on rdvs2.output (!data:self.n) {
    digital.toggle (!port:LED_L2)
    s.wait ()
      lcd.goto (!line:1 !column:0)
      lcd.print (!u32:self.n)
    s.signal ()
    self.n += 1
  }
  
  on time.wait (!until:self.deadline) {
    self.deadline += 200
    digital.toggle (!port:LED_L4)
  }
}

//-----------------------------------------------------------------------------*
