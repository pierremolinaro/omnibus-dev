target "teensy-3-1/unprivileged"

driver lcd (!DB4:.D16 !DB5:.D15 !DB6:.D14 !DB7:.D19 !RS:.D18 !ENABLE:.D17)

//——————————————————————————————————————————————————————————————————————————————
//   ACTIVITY LED                                                               
//——————————————————————————————————————————————————————————————————————————————

func section activityLedOn @safe @exported () {
  digital.write (!yes !toPort:.D13)
}

func section activityLedOff @safe @exported () {
  digital.write (!no !toPort:.D13)
}

//——————————————————————————————————————————————————————————————————————————————

let LED_L1 = $digitalPort.D4

//-----------------------------------------------------------------------------*

let SIZE = 9

newtype $A : $uint32 [SIZE]

struct $B {
  var a $uint32 = 0
  var b $uint32 = 0
}

struct $C {
  var c = $B ()
}

//------------------------------------------------*

task T priority 12 stackSize 512 {
  var deadline $uint32 = 0
  var array = $A (!repeated:0)
  var array2 = $A (!repeated:1)
  var index $int32 = 0

  setup 1000 {
    digital.set (!mode:.OUTPUT !toPort:.D13)
    digital.set (!mode:.OUTPUT !toPort:LED_L1)
  }

  on time.wait (!untilDeadline:self.deadline) {
    self.deadline +%= 1000
//    digital.toggle (!port:LED_L1)
    self.array [self.index] = 0
    self.index +%= 1
    if self.index == SIZE {
      self.index = 0
    }
    for i $uint32 in 0 ..< $A.count {
      self.array [i] +%= 1
    }
    self.array2 = self.array 
    lcd.goto (!line:0 !column:0)
    for i $uint32 in 0 ..< $A.count {
      lcd.print (!u32:self.array2 [i])
      lcd.print (!spaces:1)
    }
    
    var a = $A (!repeated:2)
    var x $uint32 = 0
    for i $uint32 in 0 ..< $A.count {
      a [i] = 9
      a [i] += 9
      x += a [i]
    }
    
    var s = $B ()
    var aa = s.a
    var bb = s.b
    s.a = aa
    var s2 = $C ()
    s2.c.a = aa
  }
}

//------------------------------------------------*
