
check target "teensy-3-6/xtr32", "teensy-3-6/xtr64"

//——————————————————————————————————————————————————————————————————————————————

// http://esd.cs.ucr.edu/labs/interface/interface.html

let LCD_BUFFER_SIZE = 20

//——————————————————————————————————————————————————————————————————————————————

driver lcd > digital {
  let DB4 $DigitalPort
  let DB5 $DigitalPort
  let DB6 $DigitalPort
  let DB7 $DigitalPort

  let RS $DigitalPort
  let ENABLE $DigitalPort

  var buffer = [LCD_BUFFER_SIZE : $uint8] (!repeated:0)
  var sEntree = $Semaphore (!value:0)
  var sSortie = $Semaphore (!value:LCD_BUFFER_SIZE)

  //····················································································································

  func configurePorts startup @noUnusedWarning () {
    digital.set (!mode:.OUTPUT !toPort:self.DB4)
    digital.set (!mode:.OUTPUT !toPort:self.DB5)
    digital.set (!mode:.OUTPUT !toPort:self.DB6)
    digital.set (!mode:.OUTPUT !toPort:self.DB7)
    digital.set (!mode:.OUTPUT !toPort:self.RS)
    digital.set (!mode:.OUTPUT !toPort:self.ENABLE)
  }

  //····················································································································

  func driveHighE safe @noUnusedWarning () {
    digital.write (!yes !toPort:self.ENABLE)
  }

  //····················································································································

  func driveLowE safe @noUnusedWarning () {
    digital.write (!no !toPort:self.ENABLE)
  }

  //····················································································································


  func driveHighRS safe @noUnusedWarning () {
   digital.write (!yes !toPort:self.RS)
  }

  //····················································································································

  func driveLowRS safe @noUnusedWarning () {
    digital.write (!no !toPort:self.RS)
  }

  //····················································································································

  func setD4 safe @noUnusedWarning (?inValue $bool) {
    digital.write (!inValue !toPort:self.DB4)
  }

  //····················································································································

  func setD5 safe @noUnusedWarning (?inValue $bool) {
    digital.write (!inValue !toPort:self.DB5)
  }

  //····················································································································

  func setD6 safe @noUnusedWarning (?inValue $bool) {
    digital.write (!inValue !toPort:self.DB6)
  }

  //····················································································································

  func setD7 safe @noUnusedWarning (?inValue $bool) {
    digital.write (!inValue !toPort:self.DB7)
  }

  //····················································································································
  //   UTILITY ROUTINES
  //····················································································································

  func programLcd4BitDataBusOutput safe @noUnusedWarning (?inValue $uint8) {
    self.setD4 (!(inValue & 0x01) ≠ 0)
    self.setD5 (!(inValue & 0x02) ≠ 0)
    self.setD6 (!(inValue & 0x04) ≠ 0)
    self.setD7 (!(inValue & 0x08) ≠ 0)
  }

  //····················································································································

  func writeFirstNibbleOf8bitCommand safe @noUnusedWarning (?inValue $uint8) {
    self.driveLowRS ()
    self.programLcd4BitDataBusOutput (!inValue)
    self.driveHighE ()
  }

  //····················································································································

  func writeFirstNibbleOf8bitData safe @noUnusedWarning (?inValue $uint8) {
    self.driveHighRS ()
    self.programLcd4BitDataBusOutput (!inValue)
    self.driveHighE ()
  }

   //····················································································································

  func writeSecondNibble safe @noUnusedWarning (?inValue $uint8) {
    self.programLcd4BitDataBusOutput (!inValue)
    self.driveHighE ()
  }

  //····················································································································

  func write4BitCommand startup @noUnusedWarning (?inValue $uint8) {
    time.busyWaitingDuringMS (!1)
    self.writeFirstNibbleOf8bitCommand (!inValue)
    time.busyWaitingDuringMS (!1)
    self.driveLowE ()
  }

  //····················································································································

  func write8bitCommand startup @noUnusedWarning (?inCommand $uint8) {
    time.busyWaitingDuringMS (!1)
    self.writeFirstNibbleOf8bitCommand (!inCommand >> 4)
    time.busyWaitingDuringMS (!1)
    self.driveLowE ()
    time.busyWaitingDuringMS (!1)
    self.writeSecondNibble (!inCommand)
    time.busyWaitingDuringMS (!1)
    self.driveLowE ()
  }

  //····················································································································
  //   LCD INIT
  //····················································································································

  startup {
    self.configurePorts ()
  //--- Étape 1 : attendre 15 ms
    time.busyWaitingDuringMS (!15)
  //--- Étape 2 : écrire la commande 0x30
    self.write4BitCommand (!0x3)
  //--- Étape 3 : attendre 4,1 ms (en fait 5 ms)
    time.busyWaitingDuringMS (!5)
  //--- Étape 4 : écrire la commande 0x30 une 2e fois
    self.write4BitCommand (!0x3)
  //--- Étape 5 : attendre 100 µs
    time.busyWaitingDuringMS (!1)
  //--- Étape 6 : écrire la commande 0x30 une 3e fois
    self.write4BitCommand (!0x3)
  //--- Étape 7 : écrire la commande 0x20 pour passer en 4 bits
    self.write4BitCommand (!0x2)
  //--- Étape 8 : écrire la commande 'Set $interface Length' : 0 0 1 DL N F * *
  //    DL : Data interface length : 0 (4 bits)
  //    N : Number of Display lines : 1 (2 lignes)
  //    F : Character Font : 0 (5x7)
    self.write8bitCommand (!0x28)
  //--- Étape 9 : écrire la commande 'Display Off'
    self.write8bitCommand (!0x08)
  //--- Étape 10 : écrire la commande 'Clear Display'
    self.write8bitCommand (!0x01)
  //--- Étape 11 : écrire la commande 'Set Cursor Move Direction' : 0 0 0 0 0 1 ID S
  //    ID : Increment Cursor after Each Byte Written to Display : 1 (oui)
  //    S : Shift Display When Byte Written : 0 (non)
    self.write8bitCommand (!0x06)
  //--- Étape 12 : écrire la commande 'Move Cursor / Shift Display' : 0 0 0 1 SC RL * *
  //    SC : Display Shift On : 1 (oui)
  //    RL : Direction of Shift : 1 (vers la droite)
    self.write8bitCommand (!0x1C)
  //--- Étape 13 : écrire la commande 'Return Cursor and LCD to Home Position'
    self.write8bitCommand (!0x02)
  //--- Étape 14 : écrire la commande 'Enable Display / Cursor' : 0 0 0 0 1 D C B
  //    D : Turn Display On : 1 (oui)
  //    C : Turn Cursor On : 0 (non)
  //    B : Cursor Blink On : 0 (non)
    self.write8bitCommand (!0x0C)
  }

  //····················································································································
  //   PRINT ROUTINES IN USER MODE
  //····················································································································

  func write8bitCommand_inUserMode user @noUnusedWarning (?inCommand $uint8) {
    time.wait (!during:1)
    self.writeFirstNibbleOf8bitCommand (!inCommand >> 4)
    time.wait (!during:1)
    self.driveLowE ()
    time.wait (!during:1)
    self.writeSecondNibble (!inCommand)
    time.wait (!during:1)
    self.driveLowE ()
  }

  //····················································································································

  func writeData_inUserMode user @noUnusedWarning (?inData $uint8) {
    time.wait (!during:1)
    self.writeFirstNibbleOf8bitData (!inData >> 4)
    time.wait (!during:1)
    self.driveLowE ()
    time.wait (!during:1)
    self.writeSecondNibble (!inData)
    time.wait (!during:1)
    self.driveLowE ()
  }

  //····················································································································

  public func clearScreen user @noUnusedWarning () {
    self.write8bitCommand_inUserMode (!0x01)
  }

  //····················································································································

  // Line 0 : 00 -> 19
  // Line 1 : 64 -> 83
  // Line 2 : 20 -> 39
  // Line 3 : 84 -> 103

  public func goto user @noUnusedWarning (?line:inLine $uint2 ?column:inColumn $uint8) {
    if inColumn < 20 {
      if inLine == 0 {
        self.write8bitCommand_inUserMode (!0x80 + 0 + inColumn)
      }else if inLine == 1 {
        self.write8bitCommand_inUserMode (!0x80 + 64 + inColumn)
      }else if inLine == 2 {
        self.write8bitCommand_inUserMode (!0x80 + 20 + inColumn)
      }else{
        self.write8bitCommand_inUserMode (!0x80 + 84 + inColumn)
      }
    }
  }

  //····················································································································

  public func print user @noUnusedWarning (?spaces:inCount $uint32) {
    var count = inCount
    while (count > 0) {
      self.writeData_inUserMode (!0x20)
      count -= 1
    }
  }

  //····················································································································

  public func print user @noUnusedWarning (?u32:inValue $uint32) {
    var divisor $uint32 = 1_000_000_000
    var value = inValue
    var isPrinting = no
    while divisor > 0 {
      if isPrinting or (value ≥ divisor) {
        let quotient = value / divisor
        let remainder = value - quotient * divisor
        self.writeData_inUserMode (!convert (quotient) + 0x30)
        value = remainder
        isPrinting = yes
      }
      divisor = divisor / 10
    }
    if not isPrinting {
      self.writeData_inUserMode (!0x30)
    }
  }

  public func print user @noUnusedWarning (?u32:inValue $uint32 ?width: inWidth $uint32) {
    var divisor $uint32 = 1_000_000_000
    var value = inValue
    var isPrinting = no
    var count $uint32 = 0
    while divisor > 0 {
      if isPrinting or (value ≥ divisor) {
        let quotient = value / divisor
        let remainder = value - quotient * divisor
        self.writeData_inUserMode (!convert (quotient) + 0x30)
        count += 1
        value = remainder
        isPrinting = yes
      }
      divisor = divisor / 10
    }
    if not isPrinting {
      self.writeData_inUserMode (!0x30)
      count += 1
    }
    for _ $uint32 in count ..< inWidth {
      self.writeData_inUserMode (!0x20)
    }
  }

  //····················································································································

  public func print user @noUnusedWarning (?u64:inValue $uint64) {
    var divisor $uint64 = 1_0000__00000__00000__00000
    var value = inValue
    var isPrinting = no
    while divisor > 0 {
      if isPrinting or (value ≥ divisor) {
        let quotient = value / divisor
        let remainder = value - quotient * divisor
        self.writeData_inUserMode (!convert (quotient) + 0x30)
        value = remainder
        isPrinting = yes
      }
      divisor = divisor / 10
    }
    if not isPrinting {
      self.writeData_inUserMode (!0x30)
    }
  }

  //····················································································································

  public func print user @noUnusedWarning (?string:inValue $literalString) {
    for c in inValue {
      self.writeData_inUserMode (!c)
    }
  }

  //····················································································································

  public func print user @noUnusedWarning (?hex1:inValue $uint32) {
    let v = truncate $uint8 (inValue & 0xF)
    if v < 10 {
      self.writeData_inUserMode (!v + 0x30)
    }else{
      self.writeData_inUserMode (!v + 0x41 - 10)
    }
  }

  //····················································································································

  public func print user @noUnusedWarning (?hex2:inValue $uint32) {
    self.print (!hex1:inValue >> 4)
    self.print (!hex1:inValue)
  }

  //····················································································································

  public func print user @noUnusedWarning (?hex4:inValue $uint32) {
    self.print (!hex2:inValue >> 8)
    self.print (!hex2:inValue)
  }

  //····················································································································

  public func print user @noUnusedWarning (?hex8:inValue $uint32) {
    self.print (!hex4:inValue >> 16)
    self.print (!hex4:inValue)
  }

  //····················································································································

  public func print user @noUnusedWarning (?hex16:inValue $uint64) {
    self.print (!hex8:truncate (inValue >> 32))
    self.print (!hex8:truncate (inValue))
  }

  //····················································································································
  //   PANIC
  //····················································································································

  func writeDataInPanicMode panic @noUnusedWarning (?inData $uint8) {
    time.panicOneMillisecondBusyWait ()
    self.driveHighRS ()
    self.programLcd4BitDataBusOutput (!inData >> 4)
    self.driveHighE ()
    time.panicOneMillisecondBusyWait ()
    self.driveLowE ()
    time.panicOneMillisecondBusyWait ()
    self.programLcd4BitDataBusOutput (!inData)
    self.driveHighE ()
    time.panicOneMillisecondBusyWait ()
    self.driveLowE ()
  }

  //····················································································································

  public func printUnsignedInPanicMode panic @noUnusedWarning (?inValue $uint32) {
    time.panicOneMillisecondBusyWait ()
    var divisor $uint32 = 1_000_000_000
    var value = inValue
    var isPrinting = no
    while divisor > 0 {
      if isPrinting or (value ≥ divisor) {
        let quotient = value !/ divisor
        let remainder = value -% quotient *% divisor
        self.writeDataInPanicMode (!truncate (quotient) +% 0x30)
        value = remainder
        isPrinting = yes
      }
      divisor = divisor !/ 10
    }
    if not isPrinting {
      self.writeDataInPanicMode (!0x30)
    }
  }

  //····················································································································

  public func printSignedInPanicMode panic @noUnusedWarning (?inValue $int32) {
    time.panicOneMillisecondBusyWait ()
    if inValue ≥ 0 {
      self.printUnsignedInPanicMode (!truncate (inValue))
    }else{
      self.writeDataInPanicMode (!0x2D) // Signe -
      self.printUnsignedInPanicMode (!truncate (-% inValue))
    }
  }

  //····················································································································

  func write8bitCommandInPanicMode panic @noUnusedWarning (?inCommand $uint8) {
    time.panicOneMillisecondBusyWait ()
    self.driveLowRS ()
    self.programLcd4BitDataBusOutput (!inCommand >> 4)
    self.driveHighE ()
    time.panicOneMillisecondBusyWait ()
    self.driveLowE ()
    time.panicOneMillisecondBusyWait ()
    self.programLcd4BitDataBusOutput (!inCommand)
    self.driveHighE ()
    time.panicOneMillisecondBusyWait ()
    self.driveLowE ()
  }

  //····················································································································

  public func gotoInPanicMode panic @noUnusedWarning (?line:inLine $uint32 ?column:inColumn $uint8) {
   time.panicOneMillisecondBusyWait ()
   if inColumn < 20 {
      if inLine == 0 {
        self.write8bitCommandInPanicMode (!0x80 +% 0 +% inColumn)
      }else if inLine == 1 {
        self.write8bitCommandInPanicMode (!0x80 +% 64 +% inColumn)
      }else if inLine == 2 {
        self.write8bitCommandInPanicMode (!0x80 +% 20 +% inColumn)
      }else if inLine == 3 {
        self.write8bitCommandInPanicMode (!0x80 +% 84 +% inColumn)
      }
    }
  }

  //····················································································································

  public func clearScreenInPanicMode panic @noUnusedWarning () {
    time.panicOneMillisecondBusyWait ()
    self.write8bitCommandInPanicMode (!0x01)
    time.panicBusyWaitingDuringMS (!4)
  }

  //····················································································································

  public func printStringInPanicMode panic @noUnusedWarning (?inString $literalString) {
    time.panicOneMillisecondBusyWait ()
    for c in inString {
      self.writeDataInPanicMode (!c)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————
