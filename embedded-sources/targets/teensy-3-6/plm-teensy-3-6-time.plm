
check target "teensy-3-6/unprivileged", "teensy-3-6/privileged"

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

module time ()

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   TIME (for Cortex M4)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

module time {
  var mUptimeMS $uint32 = 0

  //····················································································································

  init 0 { // Configure Systick interrupt every ms
    SYST_RVR = F_CPU_MHZ * 1000 - 1 // Interrupt every ms
    SYST_CVR = 0
    SYST_CSR = $SYST_CSR {CLKSOURCE, ENABLE, TICKINT}
  }

  //····················································································································

  public func init oneMillisecondBusyWait @noUnusedWarning () {
    loop while not SYST_CSR.COUNTFLAG.bool {}
  }

  //····················································································································

  public func panic panicOneMillisecondBusyWait @noUnusedWarning () {
    loop while not SYST_CSR.COUNTFLAG.bool {}
  }

  //····················································································································

  public system safe millis @noUnusedWarning () -> $uint32 {
    result = self.mUptimeMS
  }

  //····················································································································

  public func init busyWaitingDuringMS @noUnusedWarning (?inDelay $uint32) {
    for _ $uint32 in 0 ..< inDelay {
      self.oneMillisecondBusyWait ()
    }
  }

  //····················································································································

  public func panic panicBusyWaitingDuringMS @noUnusedWarning (?inDelay $uint32) {
    for _ $uint32 in 0 ..< inDelay {
      self.panicOneMillisecondBusyWait ()
    }
  }

  //····················································································································

  isr service systick {
    let now = self.mUptimeMS +% 1
    self.mUptimeMS = now
    makeTasksReady (!fromCurrentDate:now)
    notifyChangeForGuardedWaitUntil (!withCurrentDate:now)
  }

  //····················································································································

  public system primitive waitUntilMS @noUnusedWarning (?deadline: inDate $uint32) {
    if inDate > self.mUptimeMS {
      block (!onDeadline:inDate)
    }
  }

  //····················································································································

  public system primitive waitDuringMS @noUnusedWarning (?delay: inDelay $uint32) {
    if inDelay > 0 {
      block (!onDeadline:self.mUptimeMS +% inDelay)
    }
  }

  //····················································································································

  public guard waitUntilMS @noUnusedWarning (?deadline:inDeadline $uint32) {
    accept = (inDeadline) <= self.mUptimeMS
    if not accept {
      handle (!guardedDeadline:inDeadline)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
