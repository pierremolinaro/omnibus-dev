#! /usr/bin/env python
# -*- coding: UTF-8 -*-

#----------------------------------------------------------------------------------------------------------------------*

import sys, os

#----------------------------------------------------------------------------------------------------------------------*

sys.path.append (os.path.dirname (os.path.abspath (sys.argv [0])) + "/sources")
import plm
import toolpath

#----------------------------------------------------------------------------------------------------------------------*

def archiveBaseURL ():
  return "http://crossgcc.rts-software.org/downloads/plm-tools/"

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   LLVM optimizer invocation                                                                                          *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def llvmOptimizerCompiler ():
  return [toolpath.toolDir () + "/bin/opt", "-Oz", "-S"]

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   LLC Compiler invocation                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def LLCcompiler ():
  return [toolpath.toolDir () + "/bin/llc", "-function-sections", "-data-sections", "-O2"]

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   LLVM Linker invocation                                                                                             *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def LLVMLinkercompiler ():
  return [toolpath.toolDir () + "/bin/llvm-link", "-S"]

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   CLANG Compiler invocation                                                                                          *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def CLANGcompiler ():
  result = [toolpath.toolDir () + "/bin/clang"]
  result.append ("--target=armv7-none--eabi")
  result.append ("-mcpu=cortex-m4")
  result.append ("-Oz")
  result.append ("-fomit-frame-pointer")
  result.append ("-fshort-enums")
  result.append ("-Wall")
  result.append ("-fno-rtti")
  result.append ("-fno-exceptions")
  return result

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   AS assembler invocation                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def asAssembler ():
  return [toolpath.toolDir () + "/bin/arm-eabi-as", "-mthumb", "-mcpu=cortex-m4"]

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   Display object size invocation                                                                                     *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def displayObjectSize ():
  return [toolpath.toolDir () + "/bin/arm-eabi-size", "-t"]

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   Object Dump invocation                                                                                             *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def dumpObjectCode ():
  return [toolpath.toolDir () + "/bin/arm-eabi-objdump", "-Sdh", "-Mforce-thumb"]

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   Linker invocation                                                                                                  *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def linker ():
  result = [toolpath.toolDir () + "/bin/arm-eabi-ld"]
  result.append ("-nostartfiles")
  result.append ("--fatal-warnings")
  result.append ("--warn-common")
  result.append ("--no-undefined")
  result.append ("--cref")
  result.append ("-static")
  result.append ("--gc-sections")
  result.append ("--sort-common=descending")
  result.append ("--sort-section=alignment")
  return result

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   Linker scripts                                                                                                     *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def linkerScripts ():
  result = ["linker"] # Linker script is linker.ld
  return result

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   Linker libraries                                                                                                   *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def linkerLibraries ():
  result = ["libgcc-armv7e-m.a"]
  return result

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   objcopy invocation                                                                                                 *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def objcopy ():
  return [toolpath.toolDir () + "/bin/arm-eabi-objcopy"]

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   C Source files                                                                                                     *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def CsourceList ():
  return ["src.cpp"]

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   LLVM Source files                                                                                                  *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def LLVMsourceList ():
  return ["src.ll"]

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   Assembler Source files                                                                                             *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def assemblerSourceList ():
  return ["src.s"]

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   Product directory                                                                                                  *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def productDir ():
  return "product"

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#                         Object files directories                                                                     *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def objectDir ():
  return "objects"

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   Run executable                                                                                                      *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def runExecutableOnTarget ():
  return [toolpath.toolDir () + "/bin/teensy-loader-cli", "-w", "-v", "-mmcu=mk20dx256"]

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   ARM stack computations utility                                                                                     *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def arm_stack_computations ():
  return [toolpath.toolDir () + "/bin/arm-stack-computations"]

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   check stack utility                                                                                                *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

def check_stack_utility ():
  return ["sources/check-stacks.py"]

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   MAIN                                                                                                               *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

currentFile = os.path.abspath (sys.argv [0])
plm.runMakefile (toolpath.toolDir (), archiveBaseURL (), LLVMsourceList (), assemblerSourceList (), objectDir (), \
                 LLCcompiler (), llvmOptimizerCompiler (), \
                 asAssembler (), productDir (), \
                 linker (), linkerScripts (), linkerLibraries (), \
                 objcopy (), dumpObjectCode (), displayObjectSize (), runExecutableOnTarget (), \
                 CLANGcompiler (), CsourceList (), LLVMLinkercompiler (), \
                 currentFile, arm_stack_computations (), check_stack_utility ())

#----------------------------------------------------------------------------------------------------------------------*
