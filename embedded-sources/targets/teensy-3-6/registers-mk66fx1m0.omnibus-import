ctAssert target "teensy-3-6/xtr32", "teensy-3-6/xtr64"

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 12: Port control and interrupts (PORT) Pin Control registers n
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers
  ©PORTA @at 0x4004_9000,
  ©PORTB @at 0x4004_A000,
  ©PORTC @at 0x4004_B000,
  ©PORTD @at 0x4004_C000,
  ©PORTE @at 0x4004_D000 {
    PCR [32 @offset 0x00 @inc 4] $uint32 {
    7, ISF, 4, IRQC:4, LK, 4, MUX:3, 1, DSE, ODE, PFE, 1, SRE, PE, PS
  }

  GPCLR @offset 0x80 $uint32 // Global Pin Control Low Register
  GPCHR @offset 0x84 $uint32 // Global Pin Control High Register
  ISFR  @offset 0xA0 $uint32 // $interrupt Status Flag Register
  DFER  @offset 0xC0 $uint32 // Digital Filter Enable Register
  DFCR  @offset 0xC4 $uint32 {31, CS} // Digital Filter Clock Register
  DFWR  @offset 0xC8 $uint32 {27, FILT:5} // Digital Filter Width Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 13: System $integration Module (SIM)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©SIM @at 0x4004_7000 {
//--- System Options registers 1
  SOPT1 @offset 0x00 $uint32 {USBREGEN, USBSSTBY, USBVSTBY, 9, OSC32KSEL:2, 2, RAMSIZE:4, 12}

//--- SOPT1 Configuration Register
  SOPT1CFG @offset 0x04 $uint32 {5, USSWE, UVSWE, URWE, 24}

//--- USB PHY Control Register
  USBPHYCTL @offset 0x08 $uint32 {8, USBDISILIM, USB3VOUTTRG:3, 10, USBVREGPD, USBVREGSEL, 8}

//--- System Options registers 2
  SOPT2 @offset 0x1004 $uint32 {
    2,
    SDHCSRC:2,     // SDHC Clock, 0=system, 1=FLL/PLL, 2=OSCERCLK, 3=external
    LPUARTSRC:2,     // LPUART Clock, 0=off, 1=FLL/PLL, 2=OSCERCLK, 3=MCGIRCLK
    TPMSRC:2,    // TPM Clock, 0=off, 1=FLL/PLL, 2=OSCERCLK, 3=MCGIRCLK
    2,
    TIMESRC:2, // IEEE 1588 clock, 0=system, 1=FLL/PLL, 2=OSCERCLK, 3=external
    RMIISRC, // 0=external, 1=external 1588
    USBSRC, // 0=USB_CLKIN, 1=FFL/PLL
    PLLFLLSEL:2, // 0=FLL, 1=PLL
    3,
    TRACECLKSEL, // 0=MCGOUTCLK, 1=CPU
    2,
    FBSL:2, // FlexBus security level
    CLKOUTSEL:3, // Selects the clock to output on the CLKOUT pin.
    RTCCLKOUTSEL, // RTC clock out select
    2,
    USBREGEN, // USB PHY PLL Regulator Enable
    USBSLSRC // USB Slow Clock Source
  }

// System Options registers 4
  SOPT4 @offset 0x100C $uint32 {
    FTM3TRG1SRC, FTM3TRG0SRC, FTM0TRG1SRC, FTM0TRG0SRC, FTM3CLKSEL, FTM2CLKSEL, FTM1CLKSEL, FTM0CLKSEL,
    1, FTM2CH1SRC, FTM2CH0SRC:2, FTM1CH0SRC:2, 2,
    3, FTM3FLT0, 3, FTM2FLT0, 3, FTM1FLT0, FTM0FLT3, FTM0FLT2, FTM0FLT1, FTM0FLT0
  }

//--- System Options registers 5
  SOPT5 @offset 0x1010 $uint32 {
    12, LPUART0RXSRC:2, LPUART0TXSRC:2, 8,
    UART1RXSRC:2, UART1TXSRC:2, UART0RXSRC:2, UART0TXSRC:2
  }

//--- System Options registers 7
  SOPT7 @offset 0x1018 $uint32 {
    16, ADC1ALTTRGEN, 2, ADC1PRETRGSEL, ADC1TRGSEL:4,
    ADC0ALTTRGEN, 2, ADC0PRETRGSEL, ADC0TRGSEL:4
  }

//--- System Device Identification Register
  SDID @offset 0x1024 @ro $uint32 {FAMILYID:4, SUBFAMID:4, SERIESID:4, 4, REVID:4, DIEID:5, FAMID:3, PINID:4}

//--- System Clock Gating Control registers 2
  SCGC2 @offset 0x102C $uint32 {
    18,
    DAC1,
    DAC0,
    1,
    TPM2,
    TPM1,
    4,
    LPUART0,
    3,
    ENET
  }

//--- System Clock Gating Control registers 3
  SCGC3 @offset 0x1030 $uint32 {
    4,
    ADC1, // ADC1 Clock Gate Control
    1,
    FTM3, // FTM3 Clock Gate Control
    FTM2, // FTM2 Clock Gate Control
    6,
    SDHC,
    4,
    SPI2,
    7,
    FLEXCAN1,
    USBHSDCD,
    USBHSPHY,
    USBHS,
    RNGA
  }

//--- System Clock Gating Control registers 4
  SCGC4 @offset 0x1034 $uint32 {
    11,
    VREF,
    CMP,
    USBOTG,
    4,
    UART3,
    UART2,
    UART1,
    UART0,
    2,
    I2C1,
    I2C0,
    3,
    CMT,
    EWM,
    1
  }

//--- System Clock Gating Control registers 5
  SCGC5 @offset 0x1038 $uint32 {
    18,
    PORTE,
    PORTD,
    PORTC,
    PORTB,
    PORTA,
    3,
    TSI, // Touch Sense Input TSI Clock Gate Control
    4,
    LPTMR // Low Power Timer Access Control
  }

//--- System Clock Gating Control registers 6
  SCGC6 @offset 0x103C $uint32 {
    DAC0,
    1,
    RTC,
    1,
    ADC0,
    FTM2,
    FTM1,
    FTM0,
    PIT,
    PDB,
    USBDCD,
    2,
    CRC,
    2,
    I2S,
    1,
    SPI1,
    SPI0,
    2,
    RNGA,
    4,
    FLEXCAN0,
    2,
    DMAMUX,
    FTF
  }

//--- System Clock Gating Control registers 7
  SCGC7 @offset 0x1040 $uint32 {
    28,
    SDRAMMC,
    MPU,
    DMA,
    FLEXBUS
  }

//--- System Clock Divider registers 1
  CLKDIV1 @offset 0x1044 $uint32 {
    OUTDIV1:4, // Divide value for the core/system clock
    OUTDIV2:4, // Divide value for the peripheral clock
    OUTDIV3:4, // Divide value for flexbus
    OUTDIV4:4, // Divide value for the flash clock
    16
  }

//--- System Clock Divider registers 2
   CLKDIV2 @offset 0x1048 $uint32 {
    28,
    USBDIV:3,
    USBFRAC
  }

  FCFG1 @offset 0x104C @ro $uint32 // Flash Configuration registers 1
  FCFG2 @offset 0x1050 @ro $uint32 // Flash Configuration registers 2
  UIDH  @offset 0x1054 @ro $uint32 // Unique Identification registers High
  UIDMH @offset 0x1058 @ro $uint32 // Unique Identification registers Mid-High
  UIDML @offset 0x105C @ro $uint32 // Unique Identification registers Mid Low
  UIDL  @offset 0x1060 @ro $uint32 // Unique Identification registers Low
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 15: Reset Control Module (RCM)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©RCM @at 0x4007_F000 {
  SRS0 @offset 0x00 $uint8 // System Reset Status registers 0
  SRS1 @offset 0x01 $uint8 // System Reset Status registers 1
  RPFC @offset 0x04 $uint8 // Reset Pin Filter Control Register
  RPFW @offset 0x05 $uint8 // Reset Pin Filter Width Register
  MR   @offset 0x07 $uint8 // Mode Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 16: System Mode Controller
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©SMC @at 0x4007_E000 {
  PMPROT  @offset 0x00 $uint8 { // Power Mode Protection Register
    AHSRUN, // Allow high speed run mode
    1,
    AVLP, // Allow very low power modes
    1,
    ALLS, // Allow low leakage stop mode
    1,
    AVLLS, // Allow very low leakage stop mode
    1
  }


  PMCTRL @offset 0x01 $uint8 { // Power Mode Control Register
    LPWUI, // Low Power Wake Up on $interrupt
    RUNM:2, // Run Mode Control
    1,
    STOPA, // Stop Aborted
    STOPM:3 // Stop Mode Control
  }


  STOPCTRL @offset 0x02 $uint8 { // VLLS Control Register
    PSTOPO:2,
    PORPO,
    RAM2PO,
    1,
    LLSM:3
  }


  PMSTAT @offset 0x03 $uint8 { // Power Mode Status Register
    HSRUN, VLLS, LLS, VLPS, VLPW, VLPR, STOP, RUN
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 17: Power Management Controller
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©PMC @at 0x4007_D000 {
  LVDSC1 @offset 0x00 $uint8 { // Low Voltage Detect Status And Control 1 register
    LVDF,
    LVDACK,
    LVDIE,
    LVDRE,
    2,
    LVDV:2
  }

  LVDSC2 @offset 0x01 $uint8 { // Low Voltage Detect Status And Control 2 register
    LVWF, // Low-Voltage Warning Flag
    LVWACK, // Low-Voltage Warning Acknowledge
    LVWIE, // Low-Voltage Warning $interrupt Enable
    3,
    LVWV:2 // Low-Voltage Warning Voltage Select
  }

  REGSC @offset 0x02 $uint8 { // Regulator Status And Control register
    3, BGEN, ACKISO, REGONS, BGBE, 1
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 18: Low-Leakage Wakeup Unit (LLWU)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©LLWU @at 0x4007_C000 {
  PE1  @offset 0x00 $uint8 // LLWU Pin Enable 1 register
  PE2  @offset 0x01 $uint8 // LLWU Pin Enable 2 register
  PE3  @offset 0x02 $uint8 // LLWU Pin Enable 3 register
  PE4  @offset 0x03 $uint8 // LLWU Pin Enable 4 register
  ME   @offset 0x04 $uint8 // LLWU Module Enable register
  F1   @offset 0x05 $uint8 // LLWU Flag 1 register
  F2   @offset 0x06 $uint8 // LLWU Flag 2 register
  F3   @offset 0x07 $uint8 // LLWU Flag 3 register
  FILT1 @offset 0x08 $uint8 // LLWU Pin Filter 1 register
  FILT2 @offset 0x09 $uint8 // LLWU Pin Filter 2 register
  RST  @offset 0x0A $uint8 // LLWU Reset Enable register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 19: Miscellaneous Control Module (MCM)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©MCM @at 0xE008_0000 {
  PLASC @offset 0x08 $uint16 // Crossbar Switch (AXBS) Slave Configuration

  PLAMC @offset 0x0A $uint16 // Crossbar Switch (AXBS) Master Configuration

  CR @offset 0x0C $uint32 { // Crossbar Switch (AXBS) Control Register
    1,
    SRAMLWP, // SRAM_L write protect
    SRAMLAP:2, // SRAM_L priority, 0=RR, 1=favor DMA, 2=CPU, 3=DMA
    1,
    SRAMUWP, // SRAM_U write protect
    SRAMUAP:2,
    24
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 20: Crossbar Switch (AXBS)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©AXBS @at 0x4000_4000 {
  PRS0   @offset 0x000 $uint32 // Priority Registers Slave 0
  PRS1   @offset 0x100 $uint32 // Priority Registers Slave 1
  PRS2   @offset 0x200 $uint32 // Priority Registers Slave 2
  PRS3   @offset 0x300 $uint32 // Priority Registers Slave 3
  PRS4   @offset 0x400 $uint32 // Priority Registers Slave 4
  PRS5   @offset 0x500 $uint32 // Priority Registers Slave 5
  PRS6   @offset 0x600 $uint32 // Priority Registers Slave 6
  PRS7   @offset 0x700 $uint32 // Priority Registers Slave 7

  CRS0   @offset 0x010,        // Control registers 0
  CRS1   @offset 0x110,        // Control registers 1
  CRS2   @offset 0x210,        // Control registers 2
  CRS3   @offset 0x310,        // Control registers 3
  CRS4   @offset 0x410,        // Control registers 4
  CRS5   @offset 0x510,        // Control registers 5
  CRS6   @offset 0x610,        // Control registers 6
  CRS7   @offset 0x710 $uint32 { // Control registers 7
    READONLY,
    HLP,
    20,
    ARB:2,
    2,
    PCTL:2,
    1,
    PARK:3
  }


  MGPCR0 @offset 0x800, // Master 0 General Purpose Control Register
  MGPCR1 @offset 0x900, // Master 1 General Purpose Control Register
  MGPCR2 @offset 0xA00, // Master 2 General Purpose Control Register
  MGPCR3 @offset 0xB00, // Master 3 General Purpose Control Register
  MGPCR4 @offset 0xC00, // Master 4 General Purpose Control Register
  MGPCR5 @offset 0xD00, // Master 5 General Purpose Control Register
  MGPCR6 @offset 0xE00, // Master 6 General Purpose Control Register
  MGPCR7 @offset 0xF00 $uint32 { // Master 7 General Purpose Control Register
    29,
    AULB:3
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 21: Peripheral Bridge (AIPS-Lite)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©AIPS0 @at 0x_4000_0000 {
  MPRA @offset 0x00 $uint32

  //--- AICS0_PACR (§4.5.1 and §19.2, §19.2.2)
  // SPx: Determines whether the peripheral requires supervisor privilege level
  // for accesses. When this field is set, the master privilege level must indicate
  // the supervisor access attribute, and the MPR x [MPL n ] control field for the
  // master must be set. If not, access terminates with an error response and no
  // peripheral access initiates.
  // 0  This peripheral does not require supervisor privilege level for accesses.    // 1  This peripheral requires supervisor privilege level for accesses.    // WPx: Determines whether the peripheral allows write accessses. When this field
  // is set and a write access is attempted, access terminates with an error
  // response and no peripheral access initiates
  // 0  This peripheral allows write accesses.    // 1  This peripheral is write protected.    // TPx : Determines whether the peripheral allows accesses from an untrusted master.
  // When this bit is set and an access is attempted by an untrusted master, the
  // access terminates with an error response and no peripheral access initiates.
  // 0  Accesses from an untrusted master are allowed.    // 1  Accesses from an untrusted master are not allowed.  
  PACRA @offset 0x20,
  PACRB @offset 0x24,
  PACRC @offset 0x28,
  PACRD @offset 0x2C,
  PACRE @offset 0x40,
  PACRF @offset 0x44,
  PACRG @offset 0x48,
  PACRH @offset 0x4C,
  PACRI @offset 0x50,
  PACRJ @offset 0x54,
  PACRK @offset 0x58,
  PACRL @offset 0x5C,
  PACRM @offset 0x60,
  PACRN @offset 0x64,
  PACRO @offset 0x68,
  PACRP @offset 0x6C
  $uint32 {
   1, SP0, WP0, TP0,
   1, SP1, WP1, TP1,
   1, SP2, WP2, TP2,
   1, SP3, WP3, TP3,
   1, SP4, WP4, TP4,
   1, SP5, WP5, TP5,
   1, SP6, WP6, TP6,
   1, SP7, WP7, TP7
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 22: Memory Protection Unit
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©MPU @at 0x4000_0000 {

//--- Region Descriptor Alternate Access Control n (0 ... 11)
  RGDAAC [16 @offset 0xD800 @inc 4] $uint32 {
    M7RE, M7WE, M6RE, M6WE, M5RE, M5WE, M4RE, M4WE, M3PE, M3SM:2, M3UM:3, M2PE, M2SM:2,
    M2UM:3, M1PE, M1SM:2, M1UM:3, M0PE, M0SM:2, M0UM:3
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 23: Direct Memory Access Multiplexer (DMAMUX)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let DMA_CHANNEL_COUNT = 32

registers ©DMAMUX @at 0x4002_1000 {
  CHCFG [DMA_CHANNEL_COUNT @offset 0x00 @inc 1] $uint8 {
    ENABLE, TRIG, SOURCE:6
  }
}

let DMAMUX_SOURCE_TSI      $uint6 = 1
let DMAMUX_SOURCE_UART0_RX $uint6 = 2
let DMAMUX_SOURCE_UART0_TX $uint6 = 3
let DMAMUX_SOURCE_UART1_RX $uint6 = 4
let DMAMUX_SOURCE_UART1_TX $uint6 = 5
let DMAMUX_SOURCE_UART2_RX $uint6 = 6
let DMAMUX_SOURCE_UART2_TX $uint6 = 7
let DMAMUX_SOURCE_UART3_RX $uint6 = 8
let DMAMUX_SOURCE_UART3_TX $uint6 = 9
let DMAMUX_SOURCE_UART4_RXTX $uint6 = 10
let DMAMUX_SOURCE_I2S0_RX $uint6 = 12
let DMAMUX_SOURCE_I2S0_TX $uint6 = 13
let DMAMUX_SOURCE_SPI0_RX $uint6 = 14
let DMAMUX_SOURCE_SPI0_TX $uint6 = 15
let DMAMUX_SOURCE_SPI1_RX $uint6 = 16
let DMAMUX_SOURCE_SPI1_TX $uint6 = 17
let DMAMUX_SOURCE_I2C0 $uint6 = 18
let DMAMUX_SOURCE_I2C3 $uint6 = 18
let DMAMUX_SOURCE_I2C1 $uint6 = 19
let DMAMUX_SOURCE_I2C2 $uint6 = 19
let DMAMUX_SOURCE_FTM0_CH0 $uint6 = 20
let DMAMUX_SOURCE_FTM0_CH1 $uint6 = 21
let DMAMUX_SOURCE_FTM0_CH2 $uint6 = 22
let DMAMUX_SOURCE_FTM0_CH3 $uint6 = 23
let DMAMUX_SOURCE_FTM0_CH4 $uint6 = 24
let DMAMUX_SOURCE_FTM0_CH5 $uint6 = 25
let DMAMUX_SOURCE_FTM0_CH6 $uint6 = 26
let DMAMUX_SOURCE_FTM0_CH7 $uint6 = 27
let DMAMUX_SOURCE_FTM1_CH0 $uint6 = 28
let DMAMUX_SOURCE_TPM1_CH0 $uint6 = 28
let DMAMUX_SOURCE_FTM1_CH1 $uint6 = 29
let DMAMUX_SOURCE_TPM1_CH1 $uint6 = 29
let DMAMUX_SOURCE_FTM2_CH0 $uint6 = 30
let DMAMUX_SOURCE_TPM2_CH0 $uint6 = 30
let DMAMUX_SOURCE_FTM2_CH1 $uint6 = 31
let DMAMUX_SOURCE_TPM2_CH1 $uint6 = 31
let DMAMUX_SOURCE_FTM3_CH0 $uint6 = 32
let DMAMUX_SOURCE_FTM3_CH1 $uint6 = 33
let DMAMUX_SOURCE_FTM3_CH2 $uint6 = 34
let DMAMUX_SOURCE_FTM3_CH3 $uint6 = 35
let DMAMUX_SOURCE_FTM3_CH4 $uint6 = 36
let DMAMUX_SOURCE_FTM3_CH5 $uint6 = 37
let DMAMUX_SOURCE_FTM3_CH6 $uint6 = 38
let DMAMUX_SOURCE_SPI2_RX $uint6 = 38
let DMAMUX_SOURCE_FTM3_CH7 $uint6 = 39
let DMAMUX_SOURCE_SPI2_TX $uint6 = 39
let DMAMUX_SOURCE_ADC0 $uint6 = 40
let DMAMUX_SOURCE_ADC1 $uint6 = 41
let DMAMUX_SOURCE_CMP0 $uint6 = 42
let DMAMUX_SOURCE_CMP1 $uint6 = 43
let DMAMUX_SOURCE_CMP2 $uint6 = 44
let DMAMUX_SOURCE_CMP3 $uint6 = 44
let DMAMUX_SOURCE_DAC0 $uint6 = 45
let DMAMUX_SOURCE_DAC1 $uint6 = 46
let DMAMUX_SOURCE_CMT $uint6 = 47
let DMAMUX_SOURCE_PDB $uint6 = 48
let DMAMUX_SOURCE_PORTA $uint6 = 49
let DMAMUX_SOURCE_PORTB $uint6 = 50
let DMAMUX_SOURCE_PORTC $uint6 = 51
let DMAMUX_SOURCE_PORTD $uint6 = 52
let DMAMUX_SOURCE_PORTE $uint6 = 53
let DMAMUX_SOURCE_IEEE1588_T0 $uint6 = 54
let DMAMUX_SOURCE_IEEE1588_T1 $uint6 = 55
let DMAMUX_SOURCE_FTM1_OV $uint6 = 55
let DMAMUX_SOURCE_IEEE1588_T2 $uint6 = 56
let DMAMUX_SOURCE_FTM2_OV $uint6 = 56
let DMAMUX_SOURCE_IEEE1588_T3 $uint6 = 57
let DMAMUX_SOURCE_LPUART0_RX $uint6 = 58
let DMAMUX_SOURCE_LPUART0_TX $uint6 = 59
let DMAMUX_SOURCE_ALWAYS0 $uint6 = 60
let DMAMUX_SOURCE_ALWAYS1 $uint6 = 61
let DMAMUX_SOURCE_ALWAYS2 $uint6 = 62
let DMAMUX_SOURCE_ALWAYS3 $uint6 = 63

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 24: Direct Memory Access Controller (eDMA)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let DMA_TCD_ATTR_SIZE_8BIT   $uint4 = 0
let DMA_TCD_ATTR_SIZE_16BIT  $uint4 = 1
let DMA_TCD_ATTR_SIZE_32BIT  $uint4 = 2
let DMA_TCD_ATTR_SIZE_16BYTE $uint4 = 4
let DMA_TCD_ATTR_SIZE_32BYTE $uint4 = 5

registers ©DMA @at 0x4000_8000 {
  CR @offset 0x00 $uint32 {
    14,
    CX, // Cancel Transfer
    ECX, // Error Cancel Transfer
    5,
    GRP1PRI,
    1,
    GRP0PRI,
    EMLM, // Enable Minor Loop Mapping
    CLM, // Continuous Link Mode
    HALT, // Halt DMA Operations
    HOE, // Halt On Error
    ERGA, // Enable Round Robin Group Arbitration
    ERCA, // Enable Round Robin Channel Arbitration
    EDBG, // Enable Debug
    1
  }

  // Error Status Register
  ES  @offset 0x04 $uint32 {
    VLD, 14, ECX, GPE, CPE, 1, ERRCHN:5,
    SAE, SOE, DAE, DOE, NCE, SGE, SBE, DBE
  }

  ERQ @offset 0x0C $uint32 { // Enable Request Register
   ERQ31, ERQ30, ERQ29, ERQ28, ERQ27, ERQ26, ERQ25, ERQ24,
   ERQ23, ERQ22, ERQ21, ERQ20, ERQ19, ERQ18, ERQ17, ERQ16,
   ERQ15, ERQ14, ERQ13, ERQ12, ERQ11, ERQ10, INT9,  ERQ8,
   ERQ7,  ERQ6,  ERQ5,  ERQ4,  ERQ3,  ERQ2,  ERQ1,  ERQ0
  }

  EEI @offset 0x14 $uint32 { // Enable Error $interrupt Register
   EEI31, EEI30, EEI29, EEI28, EEI27, EEI26, EEI25, EEI24,
   EEI23, EEI22, EEI21, EEI20, EEI19, EEI18, EEI17, EEI16,
   EEI15, EEI14, EEI13, EEI12, EEI11, EEI10, INT9,  EEI8,
   EEI7,  EEI6,  EEI5,  EEI4,  EEI3,  EEI2,  EEI1,  EEI0
  }

  CEEI @offset 0x18 $uint8 { // Clear Enable Error $interrupt Register
   NOP, CAAE, 1, CEEI:5
  }

  SEEI @offset 0x19 $uint8 { // Set Enable Error $interrupt Register
   NOP, SAAE, 1, SEEI:5
  }

  CERQ @offset 0x1A $uint8 { // Clear Enable Request Register
   NOP, CAER, 1, CERQ:5
  }

  SERQ @offset 0x1B $uint8 { // Set Enable Request Register
   NOP, SAER, 1, SERQ:5
  }

  CDNE @offset 0x1C $uint8 { // Clear DONE Status Bit Register
   NOP, CADN, 1, CDNE:5
  }

  SSRT @offset 0x1D $uint8 { // Set START Bit Register
   NOP, SAST, 2, SSRT :4
  }

  CERR @offset 0x1E $uint8 { // Clear Error Register
   NOP, CAEI, 1, CERR:5
  }

  CINT @offset 0x1F $uint8 { // Clear $interrupt Request Register
   NOP, CAIR, 1, CINT:5
  }

  INT @offset 0x24 $uint32 { // $interrupt Request Register
   INT31, INT30, INT29, INT28, INT27, INT26, INT25, INT24,
   INT23, INT22, INT21, INT20, INT19, INT18, INT17, INT16,
   INT15, INT14, INT13, INT12, INT11, INT10, INT9,  INT8,
   INT7,  INT6,  INT5,  INT4,  INT3,  INT2,  INT1,  INT0
  }

  ERR @offset 0x2C $uint32 { // Error Register
   ERR31, ERR30, ERR29, ERR28, ERR27, ERR26, ERR25, ERR24,
   ERR23, ERR22, ERR21, ERR20, ERR19, ERR18, ERR17, ERR16,
   ERR15, ERR14, ERR13, ERR12, ERR11, ERR10, ERR9,  ERR8,
   ERR7,  ERR6,  ERR5,  ERR4,  ERR3,  ERR2,  ERR1,  ERR0
  }

  HRS @offset 0x34 $uint32 { // Hardware Request Status Register
   HRS31, HRS30, HRS29, HRS28, HRS27, HRS26, HRS25, HRS24,
   HRS23, HRS22, HRS21, HRS20, HRS19, HRS18, HRS17, HRS16,
   HRS15, HRS14, HRS13, HRS12, HRS11, HRS10, HRS9,  HRS8,
   HRS7,  HRS6,  HRS5,  HRS4,  HRS3,  HRS2,  HRS1,  HRS0
  }

  // Enable Asynchronous Request in Stop registers
  EARS @offset 0x44 $uint32 {
   EDREQ_31, EDREQ_30, EDREQ_29, EDREQ_28, EDREQ_27, EDREQ_26, EDREQ_25, EDREQ_24,
   EDREQ_23, EDREQ_22, EDREQ_21, EDREQ_20, EDREQ_19, EDREQ_18, EDREQ_17, EDREQ_16,
   EDREQ_15, EDREQ_14, EDREQ_13, EDREQ_12, EDREQ_11, EDREQ_10, EDREQ_9,  EDREQ_8,
   EDREQ_7,  EDREQ_6,  EDREQ_5,  EDREQ_4,  EDREQ_3,  EDREQ_2,  EDREQ_1,  EDREQ_0
  }

  // Channel n Priority Register
  DCHPRI [DMA_CHANNEL_COUNT @offset 0x100 @inc 1] $uint8 {
    ECP, DPA, 1, CHPRI:5
  }

  TCD_SADDR [DMA_CHANNEL_COUNT @offset 0x1000 @inc 32] $uint32 // TCD Source Address

  TCD_SOFF [DMA_CHANNEL_COUNT @offset 0x1004 @inc 32] $int16 // TCD Signed Source Address Offset

  TCD_ATTR [DMA_CHANNEL_COUNT @offset 0x1006 @inc 32] $uint16 { // TCD Transfer Attributes
    SMOD :4, SSIZE :4, DMOD :4, DSIZE :4
  }

  // TCD Minor Byte Count (Minor Loop Disabled)
  TCD_NBYTES_MLNO [DMA_CHANNEL_COUNT @offset 0x1008 @inc 32] $uint32

  // TCD Last Source Address Adjustment
  TCD_SLAST [DMA_CHANNEL_COUNT @offset 0x100C @inc 32] $int32

  // TCD Destination Address
  TCD_DADDR [DMA_CHANNEL_COUNT @offset 0x1010 @inc 32] $uint32

  // TCD Signed Destination Address Offset
  TCD_DOFF [DMA_CHANNEL_COUNT @offset 0x1014 @inc 32] $int16

  // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
  TCD_CITER_ELINKNO [DMA_CHANNEL_COUNT @offset 0x1016 @inc 32] $uint16 {
    ELINK, CITER:15
  }

  // TCD Last Destination Address Adjustment/Scatter Gather Address
  TCD_DLASTSGA [DMA_CHANNEL_COUNT @offset 0x1018 @inc 32] $int32

  // TCD Control and Status
  TCD_CSR [DMA_CHANNEL_COUNT @offset 0x101C @inc 32] $uint16 {
    BWC:2, 2, MAJORLINKCH :4,
    DONE, ACTIVE, MAJORLINK, ESG, DREQ, INTHALF, INTMAJOR, START
  }

  // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
  TCD_BITER_ELINKNO [DMA_CHANNEL_COUNT @offset 0x101E @inc 32] $uint16 {
    ELINK, BITER:15
  }
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 25: External Watchdog Monitor (EWM)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers EWM_CTRL  *(volatile $uint8_t  *)0x40061000 // Control Register
//registers EWM_SERV  *(volatile $uint8_t  *)0x40061001 // Service Register
//registers EWM_CMPL  *(volatile $uint8_t  *)0x40061002 // Compare Low Register
//registers EWM_CMPH  *(volatile $uint8_t  *)0x40061003 // Compare High Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 26: Watchdog Timer (WDOG)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©WDOG @at 0x4005_2000 {
  STCTRLH @offset 0x00 $uint16 { // Watchdog Status and Control registers High
    1,
    WDOG_STCTRLH_DISTESTWDOG,  // Allows the WDOG's functional test mode to be disabled permanently.
    BYTESEL:2, // selects the byte to be tested when the watchdog is in the byte test mode.
    TESTSEL,
    TESTWDOG,
    2,
    WAITEN,
    STOPEN,
    DBGEN,
    ALLOWUPDATE,
    WINEN,
    IRQRSTEN,
    CLKSRC,
    WDOGEN
  }


  STCTRLL  @offset 0x02 $uint16 // Watchdog Status and Control registers Low
  TOVALH   @offset 0x04 $uint16 // Watchdog Time-out Value registers High
  TOVALL   @offset 0x06 $uint16 // Watchdog Time-out Value registers Low
  WINH     @offset 0x08 $uint16 // Watchdog Window registers High
  WINL     @offset 0x0A $uint16 // Watchdog Window registers Low
  REFRESH  @offset 0x0C $uint16 // Watchdog Refresh register

  UNLOCK   @offset 0x0E $uint16 // Watchdog Unlock register

  TMROUTH  @offset 0x10 $uint16 // Watchdog Timer Output registers High
  TMROUTL  @offset 0x12 $uint16 // Watchdog Timer Output registers Low
  RSTCNT   @offset 0x14 $uint16 // Watchdog Reset Count register
  PRESC    @offset 0x16 $uint16 // Watchdog Prescaler register
}

let WDOG_UNLOCK_SEQ1 $uint16 = 0xC520
let WDOG_UNLOCK_SEQ2 $uint16 = 0xD928

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 27: Multipurpose Clock Generator (MCG)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©MCG @at 0x4006_4000 {
  C1 @offset 0x00 $uint8 { // MCG Control 1 Register
    CLKS:2, // Clock Source Select, Selects the clock source for MCGOUTCLK
    FRDIV:3, // FLL External Reference Divider, Selects the amount to divide down the external reference clock for the FLL
    IREFS, // $internal Reference Select, Selects the reference clock source for the FLL
    IRCLKEN, // $internal Reference Clock Enable, Enables the internal reference clock for use as MCGIRCLK
    IREFSTEN // $internal Reference Stop Enable, Controls whether or not the internal reference clock remains enabled when the MCG enters Stop mode
  }

  C2 @offset 0x01 $uint8 { // MCG Control 2 Register
    LOCRE0, // Loss of Clock Reset Enable, Determines whether an interrupt
            // or a reset request is made following a loss of OSC0
    1,
    RANGE0:2, // Frequency Range Select, Selects the frequency range
               // for the crystal oscillator
    HGO0, // High Gain Oscillator Select, Controls the crystal oscillator mode of operation
    EREFS, // External Reference Select, selects the source for the external reference clock
    LP, // Low Power Select, Controls whether the FLL or PLL is disabled in BLPI and BLPE modes.
    IRCS // $internal Reference Clock Select, Selects between the fast or slow internal reference clock source.
  }

  C3 @offset 0x02 $uint8 // MCG Control 3 Register
  //registers MCG_C3_SCTRIM(n)  (UInt8_t)(n)   // Slow $internal Reference Clock Trim Setting

  C4 @offset 0x03 $uint8 { // MCG Control 4 Register
    DMX32, // DCO Maximum Frequency with 32.768 kHz Reference, controls whether the DCO frequency range is narrowed
    DRST_DRS:2, // Fast $internal Reference Clock Trim Setting
    FCTRIM :4, // DCO Range Select
    SCFTRIM // Slow $internal Reference Clock Fine Trim
  }

//--- MCG Control 5 Register
  C5 @offset 0x04 $uint8 {
    1,
    PLLCLKEN, // PLL Clock Enable
    PLLSTEN,  // PLL Stop Enable
    2,
    PRDIV:3 // PLL External Reference Divider
  }

//--- MCG Control 6 Register
  C6 @offset 0x05 $uint8 {
    LOLIE0, // Loss of Lock $interrrupt Enable
    PLLS, // PLL Select, Controls whether the PLL or FLL output is selected as the MCG source when CLKS[1:0]=00
    CME0,   // Clock Monitor Enable
    VDIV:5 // VCO 0 Divider
  }

//--- MCG Status Register
  S @offset 0x06 @ro $uint8 {
    LOLS0, // Loss of Lock Status
    LOCK0, // Lock Status, 0=PLL Unlocked, 1=PLL Locked
    PLLST, // PLL Select Status
    IREFST, // $internal Reference Status
    CLKST:2, // Clock Mode Status, 0=FLL is selected, 1= $internal ref, 2=External ref, 3=PLL
    OSCINIT0, // OSC Initialization, resets to 0, is set to 1 after the initialization cycles of the crystal oscillator
    IRCST   // $internal Reference Clock Status
  }

  SC @offset 0x08 $uint8 { // MCG Status and Control Register
    ATME, // Automatic Trim Machine Enable
    ATMS, // Automatic Trim Machine Select
    ATMF, // Automatic Trim Machine Fail Flag
    FLTPRSRV, // FLL Filter Preserve Enable
    FCRDIV:3, // Fast Clock $internal Reference Divider
    LOCS0 // OSC0 Loss of Clock Status
  }

  ATCVH @offset 0x0A $uint8 // MCG Auto Trim Compare Value High Register
  ATCVL @offset 0x0B $uint8 // MCG Auto Trim Compare Value Low Register
  C7    @offset 0x0C $uint8 // MCG Control 7 Register
  C8    @offset 0x0D $uint8 // MCG Control 8 Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 28: Oscillator (OSC)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©OSC @at 0x4006_5000 {
  CR @offset 0x00 $uint8 {// OSC Control Register
    ERCLKEN, // External Reference Enable, Enables external reference clock (OSCERCLK)
    1,
    EREFSTEN, // External Reference Stop Enable, Controls whether or not
              // the external reference clock (OSCERCLK) remains enabled when
              // MCU enters Stop mode.
    1,
    SC2P, // Oscillator 2 pF Capacitor Load Configure
    SC4P, // Oscillator 4 pF Capacitor Load Configure
    SC8P, // Oscillator 8 pF Capacitor Load Configure
    SC16P // Oscillator 16 pF Capacitor Load Configure
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 30: Local Memory Controller
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©LMEM @at 0xE008_2000 {
  PCCCR @offset 0x00 $uint32 { // Cache control register
    GO,
    3,
    PUSHW1,
    INVW1,
    PUSHW0,
    INVW0,
    20,
    PCCR3,
    PCCR2,
    ENWRBUF,
    ENCACHE
  }

  PCCLCR @offset 0x04 $uint32 // Cache line control register
  PCCSAR @offset 0x08 $uint32 // Cache search address register
  PCCCVR @offset 0x0C $uint32 // Cache read/write value register
  PCCRMR @offset 0x20 $uint32 // Cache regions mode register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 31: Flash Memory Controller (FMC)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©FMC @at 0x4001_F000 {
  PFAPR     @offset 0x000 $uint32 // Flash Access Protection
  PFB0CR    @offset 0x004 $uint32 // Flash Control
  TAGVDW0S0 @offset 0x100 $uint32 // Cache Tag Storage
  TAGVDW0S1 @offset 0x104 $uint32 // Cache Tag Storage
  TAGVDW1S0 @offset 0x108 $uint32 // Cache Tag Storage
  TAGVDW1S1 @offset 0x10C $uint32 // Cache Tag Storage
  TAGVDW2S0 @offset 0x110 $uint32 // Cache Tag Storage
  TAGVDW2S1 @offset 0x114 $uint32 // Cache Tag Storage
  TAGVDW3S0 @offset 0x118 $uint32 // Cache Tag Storage
  TAGVDW3S1 @offset 0x11C $uint32 // Cache Tag Storage
  DATAW0S0  @offset 0x200 $uint32 // Cache Data Storage
  DATAW0S1  @offset 0x204 $uint32 // Cache Data Storage
  DATAW1S0  @offset 0x208 $uint32 // Cache Data Storage
  DATAW1S1  @offset 0x20C $uint32 // Cache Data Storage
  DATAW2S0  @offset 0x210 $uint32 // Cache Data Storage
  DATAW2S1  @offset 0x214 $uint32 // Cache Data Storage
  DATAW3S0  @offset 0x218 $uint32 // Cache Data Storage
  DATAW3S1  @offset 0x21C $uint32 // Cache Data Storage
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 32: Flash Memory Module (FTFL)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers FTFL_FST *(volatile $uint8_t  *)0x40020000      // Flash Status Register
//registers FTFL_FSTAT_CCIF   (UInt8_t)0x80   // Command Complete $interrupt Flag
//registers FTFL_FSTAT_RDCOLERR  (UInt8_t)0x40   // Flash Read Collision Error Flag
//registers FTFL_FSTAT_ACCERR  (UInt8_t)0x20   // Flash Access Error Flag
//registers FTFL_FSTAT_FPVIOL  (UInt8_t)0x10   // Flash Protection Violation Flag
//registers FTFL_FSTAT_MGSTAT0  (UInt8_t)0x01   // Memory Controller Command Completion Status Flag
//registers FTFL_FCNFG  *(volatile $uint8_t  *)0x40020001      // Flash Configuration Register
//registers FTFL_FCNFG_CCIE   (UInt8_t)0x80   // Command Complete $interrupt Enable
//registers FTFL_FCNFG_RDCOLLIE  (UInt8_t)0x40   // Read Collision Error $interrupt Enable
//registers FTFL_FCNFG_ERSAREQ  (UInt8_t)0x20   // Erase All Request
//registers FTFL_FCNFG_ERSSUSP  (UInt8_t)0x10   // Erase Suspend
//registers FTFL_FCNFG_PFLSH  (UInt8_t)0x04   // Flash memory configuration
//registers FTFL_FCNFG_RAMRDY  (UInt8_t)0x02   // RAM Ready
//registers FTFL_FCNFG_EEERDY  (UInt8_t)0x01   // EEPROM Ready
//registers FTFL_FSEC  *(const    $uint8_t  *)0x40020002      // Flash Security Register
//registers FTFL_FOPT  *(const    $uint8_t  *)0x40020003      // Flash Option Register
//registers FTFL_FCCOB3  *(volatile $uint8_t  *)0x40020004      // Flash Common Command Object Registers
//registers FTFL_FCCOB2  *(volatile $uint8_t  *)0x40020005
//registers FTFL_FCCOB1  *(volatile $uint8_t  *)0x40020006
//registers FTFL_FCCOB0  *(volatile $uint8_t  *)0x40020007
//registers FTFL_FCCOB7  *(volatile $uint8_t  *)0x40020008
//registers FTFL_FCCOB6  *(volatile $uint8_t  *)0x40020009
//registers FTFL_FCCOB5  *(volatile $uint8_t  *)0x4002000A
//registers FTFL_FCCOB4  *(volatile $uint8_t  *)0x4002000B
//registers FTFL_FCCOBB  *(volatile $uint8_t  *)0x4002000C
//registers FTFL_FCCOBA  *(volatile $uint8_t  *)0x4002000D
//registers FTFL_FCCOB9  *(volatile $uint8_t  *)0x4002000E
//registers FTFL_FCCOB8  *(volatile $uint8_t  *)0x4002000F
//registers FTFL_FPROT3  *(volatile $uint8_t  *)0x40020010      // Program Flash Protection Registers
//registers FTFL_FPROT2  *(volatile $uint8_t  *)0x40020011      // Program Flash Protection Registers
//registers FTFL_FPROT1  *(volatile $uint8_t  *)0x40020012      // Program Flash Protection Registers
//registers FTFL_FPROT0  *(volatile $uint8_t  *)0x40020013      // Program Flash Protection Registers
//registers FTFL_FEPROT  *(volatile $uint8_t  *)0x40020016      // EEPROM Protection Register
//registers FTFL_FDPROT  *(volatile $uint8_t  *)0x40020017      // Data Flash Protection Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 36: Cyclic Redundancy Check (CRC)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©CRC @at 0x4003_2000 {
  CRC   @offset 0x00 $uint32 // CRC Data register
  GPOLY @offset 0x04 $uint32 // CRC Polynomial register
  CTRL  @offset 0x08 $uint32 // CRC Control register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 39: Analog-to-Digital Converter (ADC)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©ADC0 @at 0x4003_B000 {
  SC1A @offset 0x00, SC1B @offset 0x04 $uint32  {// ADC status and control registers 1
    24,
    COCO, // Conversion complete flag
    AIEN, // $interrupt enable
    DIFF, // Differential mode enable
    ADCH:5 // Input channel select
  }

  CFG1 @offset 0x08 $uint32 { // ADC configuration registers 1
    24,
    ADLPC, // Low-power configuration
    ADIV:2, // Clock divide select, 0=direct, 1=div2, 2=div4, 3=div8
    ADLSMP, // Sample time configuration, 0=Short, 1=Long
    MODE:2, // Conversion mode, 0=8 bit, 1=12 bit, 2=10 bit, 3=16 bit
    ADICLK:2 // Input clock, 0=bus, 1=bus/2, 2=OSCERCLK, 3=async
  }

  CFG2  @offset 0x0C $uint32 { // Configuration registers 2
    27,
    MUXSEL,  // 0=a channels, 1=b channels
    ADACKEN,   // async clock enable
    ADHSC, // High speed configuration
    ADLSTS:2 // Sample time, 0=24 cycles, 1=12 cycles, 2=6 cycles, 3=2 cycles
  }

  RA    @offset 0x10 $uint32 // ADC data result register

  RB    @offset 0x14 $uint32 // ADC data result register

  CV1   @offset 0x18 $uint32 // Compare value registers

  CV2   @offset 0x1C $uint32 // Compare value registers

  SC2 @offset 0x20 $uint32 { // Status and control registers 2
    24,
    ADACT,  // Conversion active
    ADTRG,  // Conversion trigger select, 0=software, 1=hardware
    ACFE,   // Compare function enable
    ACFGT,  // Compare function greater than enable
    ACREN,  // Compare function range enable
    DMAEN,  // DMA enable
    REFSEL:2 // Voltage reference, 0=vcc/external, 1=1.2 volts
  }

  SC3 @offset 0x24 $uint32 { // Status and control registers 3
    24,
    CAL,   // Calibration, 1=begin, stays set while cal in progress
    CALF,  // Calibration failed flag
    2,
    ADCO,  // Continuous conversion enable
    AVGE,  // Hardware average enable
    AVGS:2 // avg select, 0=4 samples, 1=8 samples, 2=16 samples, 3=32 samples
  }

  OFS   @offset 0x28 $uint32 // ADC offset correction register

  PG    @offset 0x2C $uint32 // ADC plus-side gain register

  MG    @offset 0x30 $uint32 // ADC minus-side gain register

  CLPD  @offset 0x34 $uint32 // ADC plus-side general calibration value register

  CLPS  @offset 0x38 $uint32 // ADC plus-side general calibration value register

  CLP4  @offset 0x3C $uint32 // ADC plus-side general calibration value register

  CLP3  @offset 0x40 $uint32 // ADC plus-side general calibration value register

  CLP2  @offset 0x44 $uint32 // ADC plus-side general calibration value register

  CLP1  @offset 0x48 $uint32 // ADC plus-side general calibration value register

  CLP0  @offset 0x4C $uint32 // ADC plus-side general calibration value register

  CLMD   @offset 0x54 $uint32 // ADC minus-side general calibration value register

  CLMS   @offset 0x58 $uint32 // ADC minus-side general calibration value register

  CLM4   @offset 0x5C $uint32 // ADC minus-side general calibration value register

  CLM3   @offset 0x60 $uint32 // ADC minus-side general calibration value register

  CLM2   @offset 0x64 $uint32 // ADC minus-side general calibration value register

  CLM1   @offset 0x68 $uint32 // ADC minus-side general calibration value register

  CLM0   @offset 0x6C $uint32 // ADC minus-side general calibration value register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©ADC1 @at 0x400B_B000 {
  SC1A   @offset 0x00 $uint32 // ADC status and control registers 1

  SC1B   @offset 0x04 $uint32 // ADC status and control registers 1

  CFG1   @offset 0x08 $uint32 // ADC configuration registers 1

  CFG2   @offset 0x0C $uint32 // Configuration registers 2

  RA     @offset 0x10 $uint32 // ADC data result register

  RB     @offset 0x14 $uint32 // ADC data result register

  CV1    @offset 0x18 $uint32 // Compare value registers

  CV2    @offset 0x1C $uint32 // Compare value registers

  SC2    @offset 0x20 $uint32 // Status and control registers 2

  SC3    @offset 0x24 $uint32 // Status and control registers 3

  OFS    @offset 0x28 $uint32 // ADC offset correction register

  PG     @offset 0x2C $uint32 // ADC plus-side gain register

  MG     @offset 0x30 $uint32 // ADC minus-side gain register

  CLPD   @offset 0x34 $uint32 // ADC plus-side general calibration value register

  CLPS   @offset 0x38 $uint32 // ADC plus-side general calibration value register

  CLP4   @offset 0x3C $uint32 // ADC plus-side general calibration value register

  CLP3   @offset 0x40 $uint32 // ADC plus-side general calibration value register

  CLP2   @offset 0x44 $uint32 // ADC plus-side general calibration value register

  CLP1   @offset 0x48 $uint32 // ADC plus-side general calibration value register

  CLP0   @offset 0x4C $uint32 // ADC plus-side general calibration value register

  PGA    @offset 0x50 $uint32 // ADC Programmable Gain Amplifier

  CLMD   @offset 0x54 $uint32 // ADC minus-side general calibration value register

  CLMS   @offset 0x58 $uint32 // ADC minus-side general calibration value register

  CLM4   @offset 0x5C $uint32 // ADC minus-side general calibration value register

  CLM3   @offset 0x60 $uint32 // ADC minus-side general calibration value register

  CLM2   @offset 0x64 $uint32 // ADC minus-side general calibration value register

  CLM1   @offset 0x68 $uint32 // ADC minus-side general calibration value register

  CLM0   @offset 0x6C $uint32 // ADC minus-side general calibration value register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 40: Comparator (CMP)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©CMP0 @at 0x4007_3000 {
  CR0   @offset 0x00 $uint8 // CMP Control registers 0
  CR1   @offset 0x01 $uint8 // CMP Control registers 1
  FPR   @offset 0x02 $uint8 // CMP Filter Period Register
  SCR   @offset 0x03 $uint8 // CMP Status and Control Register
  DACCR @offset 0x04 $uint8 // DAC Control Register
  MUXCR @offset 0x05 $uint8 // MUX Control Register
}

registers ©CMP1 @at 0x4007_3000 {
  CR0   @offset 0x08 $uint8 // CMP Control registers 0
  CR1   @offset 0x09 $uint8 // CMP Control registers 1
  FPR   @offset 0x0A $uint8 // CMP Filter Period Register
  SCR   @offset 0x0B $uint8 // CMP Status and Control Register
  DACCR @offset 0x0C $uint8 // DAC Control Register
  MUXCR @offset 0x0D $uint8 // MUX Control Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 41: 12-bit Digital-to-Analog Converter (DAC)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©DAC0 @at 0x400C_C000 {
  DAT0L @offset 0x00 $uint8 // DAC Data Low registers

  DATH  @offset 0x01 $uint8 // DAC Data High registers

  DAT1L @offset 0x02 $uint8 // DAC Data Low registers

  DAT2L @offset 0x04 $uint8 // DAC Data Low registers

  DAT3L @offset 0x06 $uint8 // DAC Data Low registers

  DAT4L @offset 0x08 $uint8 // DAC Data Low registers

  DAT5L @offset 0x0A $uint8 // DAC Data Low registers

  DAT6L @offset 0x0C $uint8 // DAC Data Low registers

  DAT7L @offset 0x0E $uint8 // DAC Data Low registers

  DAT8L @offset 0x10 $uint8 // DAC Data Low registers

  DAT9L @offset 0x12 $uint8 // DAC Data Low registers

  DAT10L @offset 0x14 $uint8 // DAC Data Low registers

  DAT11L @offset 0x16 $uint8 // DAC Data Low registers

  DAT12L @offset 0x18 $uint8 // DAC Data Low registers

  DAT13L @offset 0x1A $uint8 // DAC Data Low registers

  DAT14L @offset 0x1C $uint8 // DAC Data Low registers

  DAT15L @offset 0x1E $uint8 // DAC Data Low registers

  SR     @offset 0x20 $uint8 // DAC Status registers

  C0     @offset 0x21 $uint8 { // DAC Control registers
    DACEN,    // DAC Enable
    DACRFS,   // DAC Reference Select
    DACTRGSEL,// DAC Trigger Select
    DACSWTRG, // DAC Software Trigger
    LPEN,     // DAC Low Power Control
    DACBWIEN, // DAC Buffer Watermark $interrupt Enable
    DACBTIEN, // DAC Buffer Read Pointer Top Flag $interrupt Enable
    DACBBIEN  // DAC Buffer Read Pointer Bottom Flag $interrupt Enable
  }

  C1  @offset 0x22 $uint8 { // DAC Control registers 1
    DMAEN,    // DMA Enable Select
    2,
    DACBFWM:2,  // DAC Buffer Watermark Select
    DACBFMD:2,  // DAC Buffer Work Mode Select
    DACBFEN // DAC Buffer Enable
  }

  C2  @offset 0x23 $uint8 // DAC Control registers 2
}
//registers DAC_C2_DACBFRP(n)  (((n) & 15) << 4)  // DAC Buffer Read Pointer
//registers DAC_C2_DACBFUP(n)  (((n) & 15) << 0)  // DAC Buffer Upper Limit
//
//
////registers MCG_C2_RANGE0(n)  (UInt8_t)(((n) & 0x03) << 4) // Frequency Range Select, Selects the frequency range for the crystal oscillator
////registers MCG_C2_LOCRE0   (UInt8_t)0x80   // Loss of Clock Reset Enable, Determines whether an interrupt or a reset request is made following a loss of OSC0

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 42: Voltage Reference (VREFV1)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©VREF @at 0x4007_4000 {
  TRM  @offset 0x00 $uint8 // VREF Trim Register
  SC   @offset 0x01 $uint8 // VREF Status and Control Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 43: Timer / PWM Module (TPM)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©TPM1 @at 0x400C_9000 {
  SC      @offset 0x00 $uint32 {23, DMA, TOF, TOIE, CPWMS, CMOD:2, PS:3}
  CNT     @offset 0x04 $uint32 {16, COUNT:16}
  MOD     @offset 0x08 $uint32 {16, MOD:16}
  C0SC    @offset 0x0C $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}
  C0V     @offset 0x10 $uint32 {16, VAL:16}
  C1SC    @offset 0x14 $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}
  C1V     @offset 0x18 $uint32 {16, VAL:16}
  STATUS  @offset 0x50 $uint32 {23, TOF, 6, CH1F, CH0F}
  COMBINE @offset 0x64 $uint32 {30, COMSWAP0, COMBINE0}
  POL     @offset 0x70 $uint32 {30, POL1, POL0}
  FILTER  @offset 0x78 $uint32 {24, CH1FVAL :4, CH0FVAL :4}
  QDCTRL  @offset 0x80 $uint32 {28, QUADMODE, QUADIR, TOFDIR, QUADEN}
  CONF    @offset 0x84 $uint32 {
    4, TRGSEL :4, TRGSRC, TRGPOL, 2, CPOT, CROT, CSOO,
    CSOT, 6, GTBEEN, GTBSYNC, DBGMODE:2, DOZEEN, 5
  }
}

//······················································································································

registers ©TPM2 @at 0x400C_A000 {
  SC      @offset 0x00 $uint32 {23, DMA, TOF, TOIE, CPWMS, CMOD:2, PS:3}
  CNT     @offset 0x04 $uint32 {16, COUNT:16}
  MOD     @offset 0x08 $uint32 {16, MOD:16}
  C0SC    @offset 0x0C $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}
  C0V     @offset 0x10 $uint32 {16, VAL:16}
  C1SC    @offset 0x14 $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}
  C1V     @offset 0x18 $uint32 {16, VAL:16}
  STATUS  @offset 0x50 $uint32 {23, TOF, 6, CH1F, CH0F}
  COMBINE @offset 0x64 $uint32 {30, COMSWAP0, COMBINE0}
  POL     @offset 0x70 $uint32 {30, POL1, POL0}
  FILTER  @offset 0x78 $uint32 {24, CH1FVAL :4, CH0FVAL :4}
  QDCTRL  @offset 0x80 $uint32 {28, QUADMODE, QUADIR, TOFDIR, QUADEN}
  CONF    @offset 0x84 $uint32 {
    4, TRGSEL :4, TRGSRC, TRGPOL, 2, CPOT, CROT, CSOO,
    CSOT, 6, GTBEEN, GTBSYNC, DBGMODE:2, DOZEEN, 5
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 44: Programmable Delay Block (PDB)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers PDB0_SC    0x40036000 // Status and Control Register
//registers PDB_SC_LDMOD(n)   (((n) & 3) << 18) // Load Mode Select
//registers PDB_SC_PDBEIE   0x00020000  // Sequence Error $interrupt Enable
//registers PDB_SC_SWTRIG   0x00010000  // Software Trigger
//registers PDB_SC_DMAEN   0x00008000  // DMA Enable
//registers PDB_SC_PRESCALER(n)  (((n) & 7) << 12) // Prescaler Divider Select
//registers PDB_SC_TRGSEL(n)  (((n) & 15) << 8) // Trigger Input Source Select
//registers PDB_SC_PDBEN   0x00000080  // PDB Enable
//registers PDB_SC_PDBIF   0x00000040  // PDB $interrupt Flag
//registers PDB_SC_PDBIE   0x00000020  // PDB $interrupt Enable.
//registers PDB_SC_MULT(n)   (((n) & 3) << 2) // Multiplication Factor
//registers PDB_SC_CONT   0x00000002  // Continuous Mode Enable
//registers PDB_SC_LDOK   0x00000001  // Load OK
//registers PDB0_MOD   0x40036004 // Modulus Register
//registers PDB0_CNT   0x40036008 // Counter Register
//registers PDB0_IDLY   0x4003600C // $interrupt Delay Register
//registers PDB0_CH0C1   0x40036010 // Channel n Control registers 1
//registers PDB0_CH0S   0x40036014 // Channel n Status Register
//registers PDB0_CH0DLY0   0x40036018 // Channel n Delay 0 Register
//registers PDB0_CH0DLY1   0x4003601C // Channel n Delay 1 Register
//registers PDB0_POEN   0x40036190 // Pulse-Out n Enable Register
//registers PDB0_PO0DLY   0x40036194 // Pulse-Out n Delay Register
//registers PDB0_PO1DLY   0x40036198 // Pulse-Out n Delay Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 45: FlexTimer Module (FTM)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Base address
//  FTM0: 0x4003_8000
//  FTM1: 0x4003_9000
//  FTM2: 0x4003_A000
//  FTM3: 0x400B_9000 <--- CAUTION

registers ©FTM [4 @at 0x4003_8000, 0x4003_9000, 0x4003_A000, 0x400B_9000] {
  SC @offset 0x00 $uint32 {24, TOF, TOIE, CPWMS, CLKS:2, PS:3}

  CNT @offset 0x04 $uint32 {16, COUNT:16}

  MOD @offset 0x08 $uint32 {16, MOD:16}

  C0SC @offset 0x0C $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C0V  @offset 0x10 $uint32 {16, VAL:16}

  C1SC @offset 0x14 $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C1V  @offset 0x18 $uint32 {16, VAL:16}

  C2SC @offset 0x1C $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C2V  @offset 0x20 $uint32 {16, VAL:16}

  C3SC @offset 0x24 $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C3V  @offset 0x28 $uint32 {16, VAL:16}

  C4SC @offset 0x2C $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C4V  @offset 0x30 $uint32 {16, VAL:16}

  C5SC @offset 0x34 $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C5V  @offset 0x38 $uint32 {16, VAL:16}

  C6SC @offset 0x3C $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C6V  @offset 0x40 $uint32 {16, VAL:16}

  C7SC @offset 0x44 $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C7V  @offset 0x48 $uint32 {16, VAL:16}

  CNTIN  @offset 0x4C $uint32 {16, INIT:16}

  STATUS @offset 0x50 $uint32 {24, CH7F, CH6F, CH5F, CH4F, CH3F, CH2F, CH1F, CH0F}

  MODE @offset 0x54 $uint32 {24, FAULTIE, FAULTM:2, CAPTEST, PWMSYNC, WPDIS, INIT, FTMEN}

  SYNC @offset 0x58 $uint32 {24, SWSYNC, TRIG2, TRG1, TRIG0, SYNCHOM, REINIT, CNTMAX, CNTMIN}

  OUTINIT @offset 0x5C $uint32 {24, CH7OI, CH6OI, CH5OI, CH4OI, CH3OI, CH2OI, CH1OI, CH0OI}

  MASK @offset 0x60 $uint32 {24, CH7OM, CH6OM, CH5OM, CH4OM, CH3OM, CH2OM, CH1OM, CH0OM}

  COMBINE @offset 0x64 $uint32 {
    1, FAULTEN3, SYNCEN3, DTEN3, DECAP3, DECAPEN3, COMP3, COMBINE3,
    1, FAULTEN2, SYNCEN2, DTEN2, DECAP2, DECAPEN2, COMP2, COMBINE2,
    1, FAULTEN1, SYNCEN1, DTEN1, DECAP1, DECAPEN1, COMP1, COMBINE1,
    1, FAULTEN0, SYNCEN0, DTEN0, DECAP0, DECAPEN0, COMP0, COMBINE0
  }

  DEADTIME @offset 0x68 $uint32 {24, DTPS:2, DTVAL:6}

  EXTTRIG @offset 0x6C $uint32 {
    24, TRIGF, INITTRIGEN, CH1TRIG, CH0TRIG, CH5TRIG, CH4TRIG, CH3TRIG, CH2TRIG
  }

  POL @offset 0x70 $uint32 {24, POL7, POL6, POL5, POL4, POL3, POL2, POL1, POL0}

  FMS @offset 0x74 $uint32 {24, FAULTF, WPEN, FAULTIN, 1, FAULTF3, FAULTF2, FAULTF1, FAULTF0}

  FILTER @offset 0x78 $uint32 {16, CH3FVAL:4, CH2FVAL:4, CH1FVAL:4, CH0FVAL:4}

  FLTCTRL @offset 0x7C $uint32 {
    20, FFVAL:4, FFLTR3EN, FFLTR2EN, FFLTR1EN, FFLTR0EN, FAULT3EN, FAULT2EN, FAULT1EN, FAULT0EN
  }

  QDCTRL @offset 0x80 $uint32 {24, PHALTREN, PHBFLTREN, PHAPOL, PHBPOL, QUADMODE, QUADIR, TOFDIR, QUADEN}

  CONF @offset 0x84 $uint32 {21, GTBEOUT, GTBEEN, 1, BDMMODE:2, 1, NUMTOF:5}

  FLTPOL @offset 0x88 $uint32 {28, FLT3POL, FLT2POL, FLT1POL, FLT0POL}

  SYNCCONF @offset 0x8C $uint32 {
    11, HWSOC, HWINVC, HWOM, HWWRBUF, HWRSTCNT,
    3, SWSOC, SWINVC, SWOM, SWWRBUF, SWRSTCNT, SYNCMODE, 1, SWOC, INVC, 1, CNTINC, 1, HWTRIGMODE
  }

  INVCTRL @offset 0x90 $uint32 {28, INV3EN, INV2EN, INV1EN, INV0EN}

  SWOCTRL @offset 0x94 $uint32 {
    16,
    CH7OCV, CH6OCV, CH5OCV, CH4OCV, CH3OCV, CH2OCV, CH1OCV, CH0OCV,
    CH7OC, CH6OC, CH5OC, CH4OC, CH3OC, CH2OC, CH1OC, CH0OC
  }

  PMWLOAD @offset 0x98 $uint32 {
    22, LDOK, 1, CH7SEL, CH6SEL, CH5SEL, CH4SEL, CH3SEL, CH2SEL, CH1SEL, CH0SEL
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 46: Periodic $interrupt Timer (PIT)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let PIT_COUNT = 4

registers ©PIT @at 0x4003_7000 {
  MCR @offset 0x00 $uint32 {30, MDIS, FRZ}

  // PIT Lifetime Timer Registers
  LTMR64H @offset 0xE0 @ro $uint32
  LTMR64L @offset 0xE4 @ro $uint32

  // Timer Load Value Register
  LDVAL [PIT_COUNT @offset 0x100 @inc 16] $uint32

  // Current Timer Value Register
  LCVAL [PIT_COUNT @offset 0x104 @inc 16] $uint32

  // Timer Control Register
  TCTRL [PIT_COUNT @offset 0x108 @inc 16] $uint32 {29, CHN, TIE, TEN}

  // Timer Flag Register
  TFLG [PIT_COUNT @offset 0x10C @inc 16] $uint32 {31, TIF}

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 47: Low-Power Timer (LPTMR)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers LPTMR0_CSR   0x40040000 // Low Power Timer Control Status Register
//registers LPTMR0_PSR   0x40040004 // Low Power Timer Prescale Register
//registers LPTMR0_CMR   0x40040008 // Low Power Timer Compare Register
//registers LPTMR0_CNR   0x4004000C // Low Power Timer Counter Register
//
////! Chapter 38: Carrier Modulator Transmitter (CMT)
//registers CMT_CGH1  *(volatile $uint8_t  *)0x40062000 // CMT Carrier Generator High Data registers 1
//registers CMT_CGL1  *(volatile $uint8_t  *)0x40062001 // CMT Carrier Generator Low Data registers 1
//registers CMT_CGH2  *(volatile $uint8_t  *)0x40062002 // CMT Carrier Generator High Data registers 2
//registers CMT_CGL2  *(volatile $uint8_t  *)0x40062003 // CMT Carrier Generator Low Data registers 2
//registers CMT_OC   *(volatile $uint8_t  *)0x40062004 // CMT Output Control Register
//registers CMT_MSC   *(volatile $uint8_t  *)0x40062005 // CMT Modulator Status and Control Register
//registers CMT_CMD1  *(volatile $uint8_t  *)0x40062006 // CMT Modulator Data registers Mark High
//registers CMT_CMD2  *(volatile $uint8_t  *)0x40062007 // CMT Modulator Data registers Mark Low
//registers CMT_CMD3  *(volatile $uint8_t  *)0x40062008 // CMT Modulator Data registers Space High
//registers CMT_CMD4  *(volatile $uint8_t  *)0x40062009 // CMT Modulator Data registers Space Low
//registers CMT_PPS   *(volatile $uint8_t  *)0x4006200A // CMT Primary Prescaler Register
//registers CMT_DMA   *(volatile $uint8_t  *)0x4006200B // CMT Direct Memory Access Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 49: Real Time Clock (RTC)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©RTC @at 0x4003_D000 {
  TSR  @offset 0x00 $uint32 // RTC Time Seconds Register
  TPR  @offset 0x04 $uint32 // RTC Time Prescaler Register
  TAR  @offset 0x08 $uint32 // RTC Time Alarm Register
  TCR  @offset 0x0C $uint32 // RTC Time Compensation Register
  //registers RTC_TCR_CIC(n)   (((n) & 255) << 24)  // Compensation $interval Counter
  //registers RTC_TCR_TCV(n)   (((n) & 255) << 16)  // Time Compensation Value
  //registers RTC_TCR_CIR(n)   (((n) & 255) << 8)  // Compensation $interval Register
  //registers RTC_TCR_TCR(n)   (((n) & 255) << 0)  // Time Compensation Register

  CR  @offset 0x10 $uint32 {// RTC Control Register
    18, SC2P, SC4P, SC8P, SC16P, CKLO, OSCE, 4, UM, SUP, WPE, SWR
  }

  SR  @offset 0x14 $uint32 { // RTC Status Register
    27,
    TCE,
    MOF,
    TAF,
    TOF,
    TIF
  }

  LR  @offset 0x18 $uint32 // RTC Lock Register
  IER @offset 0x1C $uint32 // RTC $interrupt Enable Register
  WAR @offset 0x800 $uint32 // RTC Write Access Register
  RAR @offset 0x804 $uint32 // RTC Read Access Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 51: Universal Serial Bus Full Speed OTG Controller (USBFSOTG)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©USB0 @at 0x4007_2000 {
//--- Peripheral ID Register
  PERID @offset 0x00 @ro $uint8 {2, ID:6}

//--- Peripheral ID Complement Register
  IDCOMP @offset 0x04 @ro $uint8 {2, NID:6}

//--- Peripheral Revision Register
  REV @offset 0x08 @ro $uint8

//--- Peripheral Additional Info Register
  ADDINFO @offset 0x0C @ro $uint8 {7, IEHOST}

//--- OTG $interrupt Status Register
  OTGISTAT @offset 0x10 $uint8 {IDCHG, ONEMSEC, LINE_STAT_CHG, 1, SESSVLDCHG, B_SESS_CHG, 1, AVBUSHG}

//--- OTG $interrupt Control Register
  OTGICR @offset 0x14 $uint8 {IDEN, ONEMSECEN, LINESTATEEN, 1, SESSVLDEN, BSESSEN, 1, AVBUSEN}

//--- OTG Status Register
  OTGSTAT @offset 0x18 $uint8 {ID, ONEMSECEN, LINESTATESTABLE, 1, SESS_VLD, BSESSEND, 1, AVBUSVLD}

//--- OTG Control Register
  OTGCTL @offset 0x1C $uint8 {DPHIGH, 1, DPLOW, DMLOW, 1, OTGEN, 2}

//--- $interrupt Status Register
  ISTAT @offset 0x80 $uint8 {STALL, ATTACH, RESUME, SLEEP, TOKDNE, SOFTOK, ERROR, USBRST}

//--- $interrupt Enable Register
  INTEN @offset 0x84 $uint8 {STALLEN, ATTACHEN, RESUMEEN, SLEEPEN, TOKDNEEN, SOFTOKEN, ERROREN, USBRSTEN}

//--- $interrupt Error Register
  ERRSTAT @offset 0x88 $uint8 {BSTERR, 1, DMAERR, BTOERR, DFN8, CRC16, CRC5EOF, PIDERR}

//--- Error $interrupt Enable Register
  ERREN @offset 0x8C $uint8 {BSTERREN, 1, DMAERREN, BTOERREN, DFN8EN, CRC16EN, CRC5EOFEN, PIDERREN}

//--- Status Register
  STAT @offset 0x90 $uint8 {ENDP:4, TX, ODD, 2}

//--- Control Register
  CTL @offset 0x94 $uint8 {JSTATE, SE0, TXSUSPENDTOKENBUSY, RESET, HOSTMODEEN, RESUME, ODDRST, USBENOFEN}

//--- Address Register
  ADDR @offset 0x98 $uint8 {LSEN, ADDR:7}

//--- BDT Page Register 1
  BDTPAGE1 @offset 0x9C $uint8 {BDTBA:7, 1}

//--- Frame Number Register Low
  FRMNUML @offset 0xA0 $uint8

//--- Frame Number Register High
  FRMNUMH @offset 0xA4 $uint8 {5, FRM:3}

//--- Token Register
  TOKEN @offset 0xA8 $uint8 {TOKENPID:4, TOKENDPT:4}

//--- SOF Threshold Register
  SOFTHLD @offset 0xAC $uint8

//--- BDT Page Register 2
  BDTPAGE2 @offset 0xB0 $uint8

//--- BDT Page Register 3
  BDTPAGE3 @offset 0xB4 $uint8

//--- Endpoint Control
  ENDPT [16 @offset 0xC0 @inc 4] $uint8 {HOSTWCHUB, RETRYDIS, 1, EPCTLDIS, EPRXEN, EPTXEN, EPSTALL, EPHSHK}

//--- USB Control Register
  USBCTRL @offset 0x100 $uint8 {SUSP, PDE, 6}

//--- USB OTG Observe Register
  OBSERVE @offset 0x104 @ro $uint8 {DPPU, DPPD, 1, DMPD, 4}

//--- USB OTG Control Register
  CONTROL @offset 0x108 $uint8 {3, DPPULLNONOTG, 4}

//--- USB Transceiver Control Register 0
  USBTRC0 @offset 0x10C $uint8 {USBRESET, 1, USBRESMEM, 2, USB_CLK_RECOVERY_INT, SYNC_DET, USB_RESUME_INT}

//--- Frame Adjust Register
  USBFRMADJUST @offset 0x114 $uint8

//--- USB Clock Recovery Control Register
  CLK_RECOVER_CTRL @offset 0x140 $uint8 {CLOCK_RECOVER_EN, RESET_RESUME_ROUGH_EN, RESTART_IFRTRIM_EN, 5}

//--- ICR48 Oscillator Enable Register
  CLK_RECOVER_IRC_EN @offset 0x144 $uint8 {6, IRC_EN, REG_EN}

//--- Clock recovery combined Enable Register
  CLK_RECOVER_INT_EN @offset 0x154 $uint8 {3, OVF_ERROR_EN, 4}

//--- Clock recovery separated interrupt status Register
  CLK_RECOVER_INT_STATUS @offset 0x15C $uint8 {3, OVF_ERROR, 4}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 54: Universal Serial Bus OTG Controller (USBOTG)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©USBHS @at 0x400A_1000 {
//--- Identification register
  ID @offset 0x00 @ro $uint32 {
    VERSIONID:3, VERSION:4, REVISION:4, TAG:5, 2, NID:6, 2, ID:6
  }

//--- General Hardware Parameters Register
  HWGENERAL @offset 0x04 @ro $uint32 {21, SM:2, PHYM:3, PHYW:2, 4}

//--- Host Hardware Parameters Register
  HWHOST @offset 0x08 @ro $uint32 {TIPER:8, TTASY:8, 12, NPORT:3, HC}

//--- Device Hardware Parameters Register
  HWDEVICE @offset 0x0C @ro $uint32 {26, DEVEP:5, DC}

//--- Transmit Buffer Hardware Parameters Register
  HWTXBUF @offset 0x10 @ro $uint32 {TXLC, 7, TXCHANADD:8, TXADD:8, TXBURST:8}

//--- Receive Buffer Hardware Parameters Register
  HWRXBUF @offset 0x14 @ro $uint32 {16, RXADD:8, RXBURST:8}

//--- General Purpose Timer n Load Register
  GPTIMERnLD [2 @offset 0x80 @inc 8] $uint32 {8, GPTLD:24}

//--- General Purpose Timer n Control Register
  GPTIMERnCTL [2 @offset 0x84 @inc 8] $uint32 {RUN, RST, 5, MODE, GPTCNT:24}

//--- General Purpose Timer n Control Register
  USB_SBUSCFG @offset 0x90 $uint32 {29, BURSTMODE:3}

//--- Host Controller $interface Version and Capability Register
  HCIVERSION @offset 0x100 $uint32 {HCIVERSION:16, 8, CAPLENGTH:8}

//--- Host Controller Structural Parameters Register
  HCSPARAMS @offset 0x104 $uint32 {4, N_TT:4, N_PTT:4, 3, PI, N_CC:4, N_PCC:4, 3, PCC, N_PORTS:4}

//--- Host Controller Capability Parameter Register
  HCCPARAMS @offset 0x108 $uint32 {16, EECP:8, IST:4, 1, ASP, PFL, ADC}

//--- Device Controller $interface Version Register
  DCIVERSION @offset 0x122 $uint16

//--- Device Controller Capability Parameters Register
  DCCPARAMS @offset 0x124 $uint32 {23, HC, DC, 2, DEN:5}

//--- USB Command Register
  USBCMD @offset 0x140 $uint32 {8, ITC:8, FS2, ATDTW, SUTW, 1, ASPE, 1, ASP:2, 1, IAA, ASE, PSE, FS:2, RST, RS}

//--- USB Status Register
  USBSTS @offset 0x144 $uint32 {
    6, TI1, TI0, 4, UPI, UAI, 1, NAKI,
    AS, PS, RCL, HCH, 3, SLI, SRI, URI, AAI, SEI, FRI, PCI, UEI, UI
  }

//--- USB $interrupt Enable Register
  USBINTR @offset 0x148 $uint32 {
    6, TIE1, TI40, 4, UPIE, UAIE, 1, NAKIE,
    7, SLE, SRE, URE, AAE, SEE, FRE, PCE, UEE, UE
  }

//--- Frame Index Register
  FRINDEX @offset 0x14C $uint32 {18, FRINDEX:14}

//--- Periodic Frame List Base Address Register
  PERIODICLISTBASE @offset 0x154 $uint32 {PERBASE:20, 12}

//--- Device Address Register
  DEVICEADDR @offset 0x154 $uint32 {USBADDR:7, USBADRA, 24}

//--- Current Asynchronous List Address Register
  ASYNCLISTADDR @offset 0x158 $uint32 {ASYBASE:27, 5}

//--- Endpoint List Address Register
  EPLISTADDR @offset 0x158 $uint32 {EPBASE:21, 11}

//--- Host TT Asynchronous Buffer Control Register
  TCCTRL @offset 0x15C $uint32 {1, TTHA:7, 24}

//--- Master $interface Data Burst Size Register
  BURSTSIZE @offset 0x160 $uint32 {16, TXPBURST:8, RXPBURST:8}

//--- Transmit FIFO Tuning Control Register
  TXFILLTUNING @offset 0x164 $uint32 {10, TXFIFOTHRES:6, 3, TXSCHHEALTH:5, 1, TXCHOH:7}

//--- Endpoint NAK Register
  ENDPTNAK @offset 0x178 $uint32 {12, EPTN:4, 12, EPRN:4}

//--- Endpoint NAK Enable Register
  ENDPTNAKEN @offset 0x17C $uint32 {12, EPTNE:4, 12, EPRNE:4}

//--- Configure Flag Register
  CONFIGFLAG @offset 0x180 @ro $uint32

//--- Port Status and Control Register
  PORTSC1 @offset 0x184 $uint32 {
    PTS:2, 2, PSPD:2, PTS2, PFSC, PHCD, WKOC, WKDS, WKCN, PTC:4,
    PIC:2, PO, PP, LS:2, HSP, PR, SUSP, FPR, OCC, OCA, PEC, PE, CSC, CCS
  }

//--- On-the-Go Status and Control Register
  OTGSC @offset 0x1A4 $uint32 {
    1, DPIE, MSE, BSEIE, BSVIE, ASVIE, AVVIE, IDIE, 1, DPIS, MSS, BSEIS, BSVIS, ASVIS, AVVIS, IDIS,
    1, DPS, MST, BSE, BSV, ASV, AVV, ID, HABA, 1, IDPU, DP, OT, HAAR, VC, VD
  }

//--- USB Mode Register
  USBMODE @offset 0x1A8 $uint32 {17, TXHSD:3, 7, SDIS, SLOM, ES, CM:2}

//--- Endpoint Setup Status Register
  EPSETUPSR @offset 0x1AC $uint32 {27, EPSETUPSTAT:5}

//--- Endpoint Initialization Register
  EPPRIME @offset 0x1B0 $uint32 {12, PETB:4, 12, PERB:4}

//--- Endpoint Flush Register
  EPFLUSH @offset 0x1B4 $uint32 {12, FETB:4, 12, FERB:4}

//--- Endpoint Status Register
  EPSR @offset 0x1B8 $uint32 {12, ETBR:4, 12, ERBR:4}

//--- Endpoint Status Register
  EPCOMPLETE @offset 0x1BC $uint32 {12, ETCE:4, 12, ERCE:4}

//--- Endpoint Control Register 0
  EPCR0 @offset 0x1C0 $uint32 {8, TXE, 3, TXT:2, 1, TXS, 8, RXE, 3, RXT:2, 1, RXS}

//--- Endpoint Control Register n (0 < n < 8)
  EPCR [8 @offset 0x1C0 @inc 4] $uint32 {8, TXE, TXR, TXI, 1, TXT:2, TXD, TXS, 8, RXE, RXR, RXI, 1, RXT:2, RXD, RXS}

//--- USB General Control Register
  USBGENCTRL @offset 0x200 $uint32 {26, WU_INT_CLR, 4, WU_IE}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 55: Universal Serial Bus 2.0 $integrated PHY
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©USBPHY @at 0x400A_2000 {
//--- USB PHY Power-Down Register
  PWD     @offset 0x000,
  PWD_SET @offset 0x004,
  PWD_CLR @offset 0x008,
  PWD_TOG @offset 0x00C $uint32 {11, RXPWDRX, RXPWDDIFF, RXPWD1PT1, RXPWDENV, 4, TXPWDV2I, TXPWDBIAS, TXPWDFS, 10}

//--- USB PHY Transmitter Control Register
  TX     @offset 0x010,
  TX_SET @offset 0x014,
  TX_CLR @offset 0x018,
  TX_TOG @offset 0x01C $uint32 {3, USBPHY_TX_EDGECTRL:3, 6, TXCAL45DP:4, 4, TXCAL45DM:4, 4, D_CAL:4}

//--- USB PHY Receiver Control Register
  RX     @offset 0x020,
  RX_SET @offset 0x024,
  RX_CLR @offset 0x028,
  RX_TOG @offset 0x02C $uint32 {9, RXDBYPASS, 15, DISCONADJ:3, 1, ENVADJ:3}

//--- USB PHY General Control Register
  CTRL     @offset 0x030,
  CTRL_SET @offset 0x034,
  CTRL_CLR @offset 0x038,
  CTRL_TOG @offset 0x03C $uint32 {
    SFTRST, CLKGATE, UTMI_SUSPENDM, HOST_FORCE_LS_SEO, OTG_ID_VALUE, 2, FSDLL_RST_EN,
    3, ENAUTOCLR_PHY_PWD, ENAUTOCLR_CLKGATE, AUTORESUME_EN, 2,
    ENUTMILEVEL3, ENUTMILEVEL2, 1, DEVPLUGIN_IRQ, 4,
    3, ENDEVPLUGINDET, HOSTDISCONNECTDETECT_IRQ, 1, ENHOSTDISCONDETEXCT, 1
  }

//--- USB PHY Status Register
  STATUS @offset 0x040 $uint32 {
    21, RESUME_STATUS, 1, OTGID_STATUS, 1, DEVPLUGIN_STATUS, 2, HOST_DISCONNECTDETECT_STATUS, 3
  }

//--- USB PHY General Control Register
  DEBUG     @offset 0x050,
  DEBUG_SET @offset 0x054,
  DEBUG_CLR @offset 0x058,
  DEBUG_TOG @offset 0x05C $uint32 {
    1, CLKGATE, HOST_RESUME_DEBUG, SQUELCHRESETLENGTH:4, ENSQUELCHRESET, 3, SQUELCHRESETCOUNT:5,
    3, ENTX2RXCOUNT, TX2RXCOUNT:4, 2, ENHSTPULLDOWN:2, HSTPULLDOWN:2, DEBUG_INTERFACE_HOLD, OTGIDPIOLOCK
  }

//--- UTMI Debug Status Register 0
  DEBUG0_STATUS @offset 0x060 $uint32 {SQUEL_COUNT:6, UTMI_RXERROR_FAIL_COUNT:10, LOOP_BACK_FAIL_COUNT:16}

//--- UTMI Debug Status Register 1
  DEBUG1     @offset 0x070,
  DEBUG1_SET @offset 0x074,
  DEBUG1_CLR @offset 0x078,
  DEBUG1_TOG @offset 0x07C $uint32 {17, ENTAILADJVD:2, 13}

//--- UTMI RTL Version Register
  VERSION @offset 0x080 @ro $uint32 {MAJOR:8, MINOR:8, STEP:16}

//--- USB PHY PLL Control / Status Register
  PLL_SIC     @offset 0x0A0,
  PLL_SIC_SET @offset 0x0A4,
  PLL_SIC_CLR @offset 0x0A8,
  PLL_SIC_TOG @offset 0x0AC
  $uint32 {
    PLL_LOCK, 14, PLL_BYPASS,
    2, PLL_ENABLE, PLL_POWER, PLL_HOLD_RING_OFF, 4, PLL_EN_USB_CLKS, 4, PLL_DIV_SEL:2
  }

//--- USB PHY VBUS Detect Control Register
  USB1_VBUS_DETECT     @offset 0x0C0,
  USB1_VBUS_DETECT_SET @offset 0x0C4,
  USB1_VBUS_DETECT_CLR @offset 0x0C8,
  USB1_VBUS_DETECT_TOG @offset 0x0CC
  $uint32 {
    EN_CHARGER_RESISTOR, 4, DISCHARGE_VBUS, 5, PWRUP_CMPS, 1, VBUSVALID_TO_SESSVALID, 2,
    5, VBUS_SOURCE_SEL:2, VBUSVALID_SEL,
    VBUSVALID_OVERRIDE, AVALID_OVERRIDE, BVALID_OVERRIDE, SESSEND_OVERRIDE, VBUS_OVERRIDE_EN, VBUSVALID_THRESH:3
  }

//--- USB PHY VBUS Detector Status Register
  USB1_VBUS_DET_STAT @offset 0x0D0 $uint32 {27, VBUS_VALID_3V, VBUS_VALID, AVALID, BVALID, SESSEND}

//--- USB PHY Charger Detect Status Register
  USB1_VBUS__CHRG_DET_STAT @offset 0x0F0 $uint32 {27, SECDET_DCP, DP_STATE, DM_STATE, CHRG_DETECTED, PLUG_CONTACT}

//--- USB PHY Analog Control Register
  ANACTRL     @offset 0x100,
  ANACTRL_SET @offset 0x104,
  ANACTRL_CLR @offset 0x108,
  ANACTRL_TOG @offset 0x10C $uint32 {
    PFD_STABLE, 15,
    EMPH_CUR_CTRL:2, EMPH_EN, EMPH_PULSE_CTRL:2, DEV_PULLDOWN, PFD_FRAC:6, PFD_CLK_SEL:2, PFD_CLKGATE, TESTCLK_SEL
  }

//--- USB PHY Loopback Control/Status Register
  USB1_LOOPBACK     @offset 0x110,
  USB1_LOOPBACK_SET @offset 0x114,
  USB1_LOOPBACK_CLR @offset 0x118,
  USB1_LOOPBACK_TOG @offset 0x11C $uint32 {
    8, TSTPKT:8, TSTL_HSFS_MODE_EN, 6, UTM0_DIG_TST1,
    UTM0_DIG_TST0, TSTL_TX_HIZ, TSTI_TX_EN, TSTI_TX_LS_MODE,
    TSTI_TX_HS_MODE, UTMI_DIG_TST1, UTMI_DIG_TST0, UTMI_TESTSTART
  }

//--- USB PHY Loopback Packet Number Select Register
  USB1_LOOPBACK_HSFSCNT     @offset 0x120,
  USB1_LOOPBACK_HSFSCNT_SET @offset 0x124,
  USB1_LOOPBACK_HSFSCNT_CLR @offset 0x128,
  USB1_LOOPBACK_HSFSCNT_TOG @offset 0x12C $uint32 {TSTL_FS_NUMBER:16, TSTL_HS_NUMBER:16}

//--- USB PHY Trim Override Enable Register
  TRIM_OVERRIDE_EN     @offset 0x130,
  TRIM_OVERRIDE_EN_SET @offset 0x134,
  TRIM_OVERRIDE_EN_CLR @offset 0x138,
  TRIM_OVERRIDE_EN_TOG @offset 0x13C $uint32 {
    TRIM_USBPHY_TX_CAL45DM:4, TRIM_USBPHY_TX_CAL45CP:4,
    TRIM_USBPHY_TX_DCAL:4, TRIM_USB_REG_ENV_TAIL_ADJ_VD:2, TRIM_PLL_CTRL0_DIV_SEL:2,
    11, TRIM_TX_CAL45DM_OVERRIDE, TRIM_TX_CAL45DP_OVERRIDE,
    TRIM_TX_D_CAL_OVERRIDE, TRIM_ENV_TAIL_ADJ_VD_OVERRIDE, TRIM_DEV_SEL_OVERRIDE
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 56: FlexCAN
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©CAN [2 @at 0x4002_4000, 0x400A_4000] {
  MCR @offset 0x00 $uint32 {
    MDIS, FRZ, RFEN, HALT, NOTRDY, WAKMSK, SOFTRST, FRZACK,
    SUPV, SLFWAK, WRNEN, LPMACK, WAKSRC, 1, SFRXDIS, IRMQ,
    2, LPRIOEN, AEN, 2, IDAM:2, 1, MAXMB:7
  }

  CTRL1 @offset 0x04 $uint32 {
    PRESDIV:8, RJW:2, PSEG1:3, PSEG2:3,
    BOFFMSK, ERRMSK, CLKSRC, LPB, TWRNMSK, RWRNMSK, 2, SMP, BOFFREC, TSYN, LBUF, LOM, PROPSEG:3
  }

  TIMER @offset 0x08 $uint32 {16, TIMER:16}

  RXMGMASK @offset 0x10 $uint32

  RX14MASK @offset 0x14 $uint32

  RX15MASK @offset 0x18 $uint32

  ECR @offset 0x1C $uint32 {16, RXERRCNT:8, TXERRCNT:8}

  ESR1 @offset 0x20 $uint32 {
    13, SYNCH, TWRNINT, RWRNINT,
    BIT1ERR, BIT0ERR, ACKERR, CRCERR, FRMERR, STFERR, TXWRN, RXWRN, IDLE, TX, FLTCONF:2, RX, BOFFINT, ERRINT, WAKINT
  }

  IMASK1 @offset 0x28 $uint32

  IFLAG1 @offset 0x30 $uint32 {BUF31TO8I:24, BUF7I, BUF6I, BUF5I, BUF4TO1I:4, BUF0I}

  CTRL2 @offset 0x34 $uint32 {3, WRMFRZ, RFFN:4, TASD:5, MRP, RRS, EACEN, 16}

  ESR2 @offset 0x38 @ro $uint32 {9, LPTM:7, 1, VPS, IMB, 13}

  CRCR @offset 0x44 @ro $uint32 {9, MBCRC:7, 1, TXCRC:15}

  RXFGMASK @offset 0x48 $uint32

  RXFIR @offset 0x4C @ro $uint32 {24, IDHIT:8}

  RXIMR [16 @offset 0x880 @inc 4] $uint32
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 57: Serial Peripheral $interface (SPI)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©SPI [3 @at 0x4002_C000, 0x4002_D000, 0x400A_C000] {

  MCR @offset 0x0 $uint32 {
    MSTR, CONT_SCKE, DCONF:2, FRZ, MTFE, PCSSE, ROOE, 2, PCSIS:6,
    DOZE, MDIS, DIS_TXF, DID_RXF, CLR_TXF, CLR_RXF, SMPL_PT:2, 5, 2, HALT
  }

  TCR @offset 0x8 $uint32 {SPT_TCNT:16, 16}

  CTAR [2 @offset 0xC @inc 4] $uint32 {
    DBR, FMSZ:4, CPOL, CPHA, LSBFE, PCSSCK:2, PASC:2, PDT:2, PBR:2,
    CSSCK:4, ASC:4, DT:4, BR:4
  }

  CTAR0_SLAVE @offset 0xC $uint32 {1, FMSZ:4, CPOL, CPHA, 25}

  SR @offset 0x2C $uint32 {
    TCF, TXRXS, 1, EOQF, TFUF, 1, TFFF, 5, RFOF, 1, RFDF, 1,
    TXCTR:4, TXNXTPTR:4, RXCTR:4, POPNXTPTR:4
  }

  RSER @offset 0x30 $uint32 {TCF_RE, 2, EOQF_RE, TFUF_RE, 1, TFFF_RE, TFFF_DIRS, 4, RFOF_RE, 1, RFDF_RE, RFDF_DIRS, 16}

  PUSHR @offset 0x34 $uint32 {CONT, CTAS:3, EOQ, CTCNT, 4, PCS:6, TXDATA:16}

  PUSHR_SLAVE @offset 0x34 $uint32

  POPR @offset 0x38 @ro $uint32

  TXFR [4 @offset 0x3C @inc 4] $uint32 {TXCMD_DATA:16, TXDATA:16}

  RXFR [4 @offset 0x7C @inc 4] $uint32
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 58: $inter-Integrated Circuit (I2C)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 59: Universal Asynchronous Receiver/Transmitter (UART)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers UART0_BDH  *(volatile $uint8_t  *)0x4006A000 // UART Baud Rate Registers: High
//registers UART0_BDL  *(volatile $uint8_t  *)0x4006A001 // UART Baud Rate Registers: Low
//registers UART0_C1  *(volatile $uint8_t  *)0x4006A002 // UART Control registers 1
//registers UART_C1_LOOPS   (UInt8_t)0x80   // When LOOPS is set, the RxD pin is disconnected from the UART and the transmitter output is internally connected to the receiver input
//registers UART_C1_UARTSWAI  (UInt8_t)0x40   // UART Stops in Wait Mode
//registers UART_C1_RSRC   (UInt8_t)0x20   // When LOOPS is set, the RSRC field determines the source for the receiver shift registers input
//registers UART_C1_M   (UInt8_t)0x10   // 9-bit or 8-bit Mode Select
//registers UART_C1_WAKE   (UInt8_t)0x08   // Determines which condition wakes the UART
//registers UART_C1_ILT   (UInt8_t)0x04   // Idle Line Type Select
//registers UART_C1_PE   (UInt8_t)0x02   // Parity Enable
//registers UART_C1_PT   (UInt8_t)0x01   // Parity Type, 0=even, 1=odd
//registers UART0_C2  *(volatile $uint8_t  *)0x4006A003 // UART Control registers 2
//registers UART_C2_TIE   (UInt8_t)0x80   // Transmitter $interrupt or DMA Transfer Enable.
//registers UART_C2_TCIE   (UInt8_t)0x40   // Transmission Complete $interrupt Enable
//registers UART_C2_RIE   (UInt8_t)0x20   // Receiver Full $interrupt or DMA Transfer Enable
//registers UART_C2_ILIE   (UInt8_t)0x10   // Idle Line $interrupt Enable
//registers UART_C2_TE   (UInt8_t)0x08   // Transmitter Enable
//registers UART_C2_RE   (UInt8_t)0x04   // Receiver Enable
//registers UART_C2_RWU   (UInt8_t)0x02   // Receiver Wakeup Control
//registers UART_C2_SBK   (UInt8_t)0x01   // Send Break
//registers UART0_S1  *(volatile $uint8_t  *)0x4006A004 // UART Status registers 1
//registers UART_S1_TDRE   (UInt8_t)0x80   // Transmit Data registers Empty Flag
//registers UART_S1_TC   (UInt8_t)0x40   // Transmit Complete Flag
//registers UART_S1_RDRF   (UInt8_t)0x20   // Receive Data registers Full Flag
//registers UART_S1_IDLE   (UInt8_t)0x10   // Idle Line Flag
//registers UART_S1_OR   (UInt8_t)0x08   // Receiver Overrun Flag
//registers UART_S1_NF   (UInt8_t)0x04   // Noise Flag
//registers UART_S1_FE   (UInt8_t)0x02   // Framing Error Flag
//registers UART_S1_PF   (UInt8_t)0x01   // Parity Error Flag
//registers UART0_S2  *(volatile $uint8_t  *)0x4006A005 // UART Status registers 2
//registers UART0_C3  *(volatile $uint8_t  *)0x4006A006 // UART Control registers 3
//registers UART0_D   *(volatile $uint8_t  *)0x4006A007 // UART Data Register
//registers UART0_MA1  *(volatile $uint8_t  *)0x4006A008 // UART Match Address Registers 1
//registers UART0_MA2  *(volatile $uint8_t  *)0x4006A009 // UART Match Address Registers 2
//registers UART0_C4  *(volatile $uint8_t  *)0x4006A00A // UART Control registers 4
//registers UART0_C5  *(volatile $uint8_t  *)0x4006A00B // UART Control registers 5
//registers UART0_ED  *(volatile $uint8_t  *)0x4006A00C // UART Extended Data Register
//registers UART0_MODEM  *(volatile $uint8_t  *)0x4006A00D // UART Modem Register
//registers UART0_IR  *(volatile $uint8_t  *)0x4006A00E // UART Infrared Register
//registers UART0_PFIFO  *(volatile $uint8_t  *)0x4006A010 // UART FIFO Parameters
//registers UART_PFIFO_TXFE   (UInt8_t)0x80
//registers UART_PFIFO_RXFE   (UInt8_t)0x08
//registers UART0_CFIFO  *(volatile $uint8_t  *)0x4006A011 // UART FIFO Control Register
//registers UART_CFIFO_TXFLUSH  (UInt8_t)0x80   //
//registers UART_CFIFO_RXFLUSH  (UInt8_t)0x40   //
//registers UART_CFIFO_RXOFE  (UInt8_t)0x04   //
//registers UART_CFIFO_TXOFE  (UInt8_t)0x02   //
//registers UART_CFIFO_RXUFE  (UInt8_t)0x01   //
//registers UART0_SFIFO  *(volatile $uint8_t  *)0x4006A012 // UART FIFO Status Register
//registers UART_SFIFO_TXEMPT  (UInt8_t)0x80
//registers UART_SFIFO_RXEMPT  (UInt8_t)0x40
//registers UART_SFIFO_RXOF   (UInt8_t)0x04
//registers UART_SFIFO_TXOF   (UInt8_t)0x02
//registers UART_SFIFO_RXUF   (UInt8_t)0x01
//registers UART0_TWFIFO  *(volatile $uint8_t  *)0x4006A013 // UART FIFO Transmit Watermark
//registers UART0_TCFIFO  *(volatile $uint8_t  *)0x4006A014 // UART FIFO Transmit Count
//registers UART0_RWFIFO  *(volatile $uint8_t  *)0x4006A015 // UART FIFO Receive Watermark
//registers UART0_RCFIFO  *(volatile $uint8_t  *)0x4006A016 // UART FIFO Receive Count
//registers UART0_C7816  *(volatile $uint8_t  *)0x4006A018 // UART 7816 Control Register
//registers UART0_IE7816  *(volatile $uint8_t  *)0x4006A019 // UART 7816 $interrupt Enable Register
//registers UART0_IS7816  *(volatile $uint8_t  *)0x4006A01A // UART 7816 $interrupt Status Register
//registers UART0_WP7816T0  *(volatile $uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register
//registers UART0_WP7816T1  *(volatile $uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register
//registers UART0_WN7816  *(volatile $uint8_t  *)0x4006A01C // UART 7816 Wait N Register
//registers UART0_WF7816  *(volatile $uint8_t  *)0x4006A01D // UART 7816 Wait FD Register
//registers UART0_ET7816  *(volatile $uint8_t  *)0x4006A01E // UART 7816 Error Threshold Register
//registers UART0_TL7816  *(volatile $uint8_t  *)0x4006A01F // UART 7816 Transmit Length Register
//registers UART0_C6  *(volatile $uint8_t  *)0x4006A021 // UART CEA709.1-B Control registers 6
//registers UART0_PCTH  *(volatile $uint8_t  *)0x4006A022 // UART CEA709.1-B Packet Cycle Time Counter High
//registers UART0_PCTL  *(volatile $uint8_t  *)0x4006A023 // UART CEA709.1-B Packet Cycle Time Counter Low
//registers UART0_B1T  *(volatile $uint8_t  *)0x4006A024 // UART CEA709.1-B Beta1 Timer
//registers UART0_SDTH  *(volatile $uint8_t  *)0x4006A025 // UART CEA709.1-B Secondary Delay Timer High
//registers UART0_SDTL  *(volatile $uint8_t  *)0x4006A026 // UART CEA709.1-B Secondary Delay Timer Low
//registers UART0_PRE  *(volatile $uint8_t  *)0x4006A027 // UART CEA709.1-B Preamble
//registers UART0_TPL  *(volatile $uint8_t  *)0x4006A028 // UART CEA709.1-B Transmit Packet Length
//registers UART0_IE  *(volatile $uint8_t  *)0x4006A029 // UART CEA709.1-B $interrupt Enable Register
//registers UART0_WB  *(volatile $uint8_t  *)0x4006A02A // UART CEA709.1-B WBASE
//registers UART0_S3  *(volatile $uint8_t  *)0x4006A02B // UART CEA709.1-B Status Register
//registers UART0_S4  *(volatile $uint8_t  *)0x4006A02C // UART CEA709.1-B Status Register
//registers UART0_RPL  *(volatile $uint8_t  *)0x4006A02D // UART CEA709.1-B Received Packet Length
//registers UART0_RPREL  *(volatile $uint8_t  *)0x4006A02E // UART CEA709.1-B Received Preamble Length
//registers UART0_CPW  *(volatile $uint8_t  *)0x4006A02F // UART CEA709.1-B Collision Pulse Width
//registers UART0_RIDT  *(volatile $uint8_t  *)0x4006A030 // UART CEA709.1-B Receive Indeterminate Time
//registers UART0_TIDT  *(volatile $uint8_t  *)0x4006A031 // UART CEA709.1-B Transmit Indeterminate Time
//registers UART1_BDH  *(volatile $uint8_t  *)0x4006B000 // UART Baud Rate Registers: High
//registers UART1_BDL  *(volatile $uint8_t  *)0x4006B001 // UART Baud Rate Registers: Low
//registers UART1_C1  *(volatile $uint8_t  *)0x4006B002 // UART Control registers 1
//registers UART1_C2  *(volatile $uint8_t  *)0x4006B003 // UART Control registers 2
//registers UART1_S1  *(volatile $uint8_t  *)0x4006B004 // UART Status registers 1
//registers UART1_S2  *(volatile $uint8_t  *)0x4006B005 // UART Status registers 2
//registers UART1_C3  *(volatile $uint8_t  *)0x4006B006 // UART Control registers 3
//registers UART1_D   *(volatile $uint8_t  *)0x4006B007 // UART Data Register
//registers UART1_MA1  *(volatile $uint8_t  *)0x4006B008 // UART Match Address Registers 1
//registers UART1_MA2  *(volatile $uint8_t  *)0x4006B009 // UART Match Address Registers 2
//registers UART1_C4  *(volatile $uint8_t  *)0x4006B00A // UART Control registers 4
//registers UART1_C5  *(volatile $uint8_t  *)0x4006B00B // UART Control registers 5
//registers UART1_ED  *(volatile $uint8_t  *)0x4006B00C // UART Extended Data Register
//registers UART1_MODEM  *(volatile $uint8_t  *)0x4006B00D // UART Modem Register
//registers UART1_IR  *(volatile $uint8_t  *)0x4006B00E // UART Infrared Register
//registers UART1_PFIFO  *(volatile $uint8_t  *)0x4006B010 // UART FIFO Parameters
//registers UART1_CFIFO  *(volatile $uint8_t  *)0x4006B011 // UART FIFO Control Register
//registers UART1_SFIFO  *(volatile $uint8_t  *)0x4006B012 // UART FIFO Status Register
//registers UART1_TWFIFO  *(volatile $uint8_t  *)0x4006B013 // UART FIFO Transmit Watermark
//registers UART1_TCFIFO  *(volatile $uint8_t  *)0x4006B014 // UART FIFO Transmit Count
//registers UART1_RWFIFO  *(volatile $uint8_t  *)0x4006B015 // UART FIFO Receive Watermark
//registers UART1_RCFIFO  *(volatile $uint8_t  *)0x4006B016 // UART FIFO Receive Count
//registers UART1_C7816  *(volatile $uint8_t  *)0x4006B018 // UART 7816 Control Register
//registers UART1_IE7816  *(volatile $uint8_t  *)0x4006B019 // UART 7816 $interrupt Enable Register
//registers UART1_IS7816  *(volatile $uint8_t  *)0x4006B01A // UART 7816 $interrupt Status Register
//registers UART1_WP7816T0  *(volatile $uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register
//registers UART1_WP7816T1  *(volatile $uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register
//registers UART1_WN7816  *(volatile $uint8_t  *)0x4006B01C // UART 7816 Wait N Register
//registers UART1_WF7816  *(volatile $uint8_t  *)0x4006B01D // UART 7816 Wait FD Register
//registers UART1_ET7816  *(volatile $uint8_t  *)0x4006B01E // UART 7816 Error Threshold Register
//registers UART1_TL7816  *(volatile $uint8_t  *)0x4006B01F // UART 7816 Transmit Length Register
//registers UART1_C6  *(volatile $uint8_t  *)0x4006B021 // UART CEA709.1-B Control registers 6
//registers UART1_PCTH  *(volatile $uint8_t  *)0x4006B022 // UART CEA709.1-B Packet Cycle Time Counter High
//registers UART1_PCTL  *(volatile $uint8_t  *)0x4006B023 // UART CEA709.1-B Packet Cycle Time Counter Low
//registers UART1_B1T  *(volatile $uint8_t  *)0x4006B024 // UART CEA709.1-B Beta1 Timer
//registers UART1_SDTH  *(volatile $uint8_t  *)0x4006B025 // UART CEA709.1-B Secondary Delay Timer High
//registers UART1_SDTL  *(volatile $uint8_t  *)0x4006B026 // UART CEA709.1-B Secondary Delay Timer Low
//registers UART1_PRE  *(volatile $uint8_t  *)0x4006B027 // UART CEA709.1-B Preamble
//registers UART1_TPL  *(volatile $uint8_t  *)0x4006B028 // UART CEA709.1-B Transmit Packet Length
//registers UART1_IE  *(volatile $uint8_t  *)0x4006B029 // UART CEA709.1-B $interrupt Enable Register
//registers UART1_WB  *(volatile $uint8_t  *)0x4006B02A // UART CEA709.1-B WBASE
//registers UART1_S3  *(volatile $uint8_t  *)0x4006B02B // UART CEA709.1-B Status Register
//registers UART1_S4  *(volatile $uint8_t  *)0x4006B02C // UART CEA709.1-B Status Register
//registers UART1_RPL  *(volatile $uint8_t  *)0x4006B02D // UART CEA709.1-B Received Packet Length
//registers UART1_RPREL  *(volatile $uint8_t  *)0x4006B02E // UART CEA709.1-B Received Preamble Length
//registers UART1_CPW  *(volatile $uint8_t  *)0x4006B02F // UART CEA709.1-B Collision Pulse Width
//registers UART1_RIDT  *(volatile $uint8_t  *)0x4006B030 // UART CEA709.1-B Receive Indeterminate Time
//registers UART1_TIDT  *(volatile $uint8_t  *)0x4006B031 // UART CEA709.1-B Transmit Indeterminate Time
//registers UART2_BDH  *(volatile $uint8_t  *)0x4006C000 // UART Baud Rate Registers: High
//registers UART2_BDL  *(volatile $uint8_t  *)0x4006C001 // UART Baud Rate Registers: Low
//registers UART2_C1  *(volatile $uint8_t  *)0x4006C002 // UART Control registers 1
//registers UART2_C2  *(volatile $uint8_t  *)0x4006C003 // UART Control registers 2
//registers UART2_S1  *(volatile $uint8_t  *)0x4006C004 // UART Status registers 1
//registers UART2_S2  *(volatile $uint8_t  *)0x4006C005 // UART Status registers 2
//registers UART2_C3  *(volatile $uint8_t  *)0x4006C006 // UART Control registers 3
//registers UART2_D   *(volatile $uint8_t  *)0x4006C007 // UART Data Register
//registers UART2_MA1  *(volatile $uint8_t  *)0x4006C008 // UART Match Address Registers 1
//registers UART2_MA2  *(volatile $uint8_t  *)0x4006C009 // UART Match Address Registers 2
//registers UART2_C4  *(volatile $uint8_t  *)0x4006C00A // UART Control registers 4
//registers UART2_C5  *(volatile $uint8_t  *)0x4006C00B // UART Control registers 5
//registers UART2_ED  *(volatile $uint8_t  *)0x4006C00C // UART Extended Data Register
//registers UART2_MODEM  *(volatile $uint8_t  *)0x4006C00D // UART Modem Register
//registers UART2_IR  *(volatile $uint8_t  *)0x4006C00E // UART Infrared Register
//registers UART2_PFIFO  *(volatile $uint8_t  *)0x4006C010 // UART FIFO Parameters
//registers UART2_CFIFO  *(volatile $uint8_t  *)0x4006C011 // UART FIFO Control Register
//registers UART2_SFIFO  *(volatile $uint8_t  *)0x4006C012 // UART FIFO Status Register
//registers UART2_TWFIFO  *(volatile $uint8_t  *)0x4006C013 // UART FIFO Transmit Watermark
//registers UART2_TCFIFO  *(volatile $uint8_t  *)0x4006C014 // UART FIFO Transmit Count
//registers UART2_RWFIFO  *(volatile $uint8_t  *)0x4006C015 // UART FIFO Receive Watermark
//registers UART2_RCFIFO  *(volatile $uint8_t  *)0x4006C016 // UART FIFO Receive Count
//registers UART2_C7816  *(volatile $uint8_t  *)0x4006C018 // UART 7816 Control Register
//registers UART2_IE7816  *(volatile $uint8_t  *)0x4006C019 // UART 7816 $interrupt Enable Register
//registers UART2_IS7816  *(volatile $uint8_t  *)0x4006C01A // UART 7816 $interrupt Status Register
//registers UART2_WP7816T0  *(volatile $uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register
//registers UART2_WP7816T1  *(volatile $uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register
//registers UART2_WN7816  *(volatile $uint8_t  *)0x4006C01C // UART 7816 Wait N Register
//registers UART2_WF7816  *(volatile $uint8_t  *)0x4006C01D // UART 7816 Wait FD Register
//registers UART2_ET7816  *(volatile $uint8_t  *)0x4006C01E // UART 7816 Error Threshold Register
//registers UART2_TL7816  *(volatile $uint8_t  *)0x4006C01F // UART 7816 Transmit Length Register
//registers UART2_C6  *(volatile $uint8_t  *)0x4006C021 // UART CEA709.1-B Control registers 6
//registers UART2_PCTH  *(volatile $uint8_t  *)0x4006C022 // UART CEA709.1-B Packet Cycle Time Counter High
//registers UART2_PCTL  *(volatile $uint8_t  *)0x4006C023 // UART CEA709.1-B Packet Cycle Time Counter Low
//registers UART2_B1T  *(volatile $uint8_t  *)0x4006C024 // UART CEA709.1-B Beta1 Timer
//registers UART2_SDTH  *(volatile $uint8_t  *)0x4006C025 // UART CEA709.1-B Secondary Delay Timer High
//registers UART2_SDTL  *(volatile $uint8_t  *)0x4006C026 // UART CEA709.1-B Secondary Delay Timer Low
//registers UART2_PRE  *(volatile $uint8_t  *)0x4006C027 // UART CEA709.1-B Preamble
//registers UART2_TPL  *(volatile $uint8_t  *)0x4006C028 // UART CEA709.1-B Transmit Packet Length
//registers UART2_IE  *(volatile $uint8_t  *)0x4006C029 // UART CEA709.1-B $interrupt Enable Register
//registers UART2_WB  *(volatile $uint8_t  *)0x4006C02A // UART CEA709.1-B WBASE
//registers UART2_S3  *(volatile $uint8_t  *)0x4006C02B // UART CEA709.1-B Status Register
//registers UART2_S4  *(volatile $uint8_t  *)0x4006C02C // UART CEA709.1-B Status Register
//registers UART2_RPL  *(volatile $uint8_t  *)0x4006C02D // UART CEA709.1-B Received Packet Length
//registers UART2_RPREL  *(volatile $uint8_t  *)0x4006C02E // UART CEA709.1-B Received Preamble Length
//registers UART2_CPW  *(volatile $uint8_t  *)0x4006C02F // UART CEA709.1-B Collision Pulse Width
//registers UART2_RIDT  *(volatile $uint8_t  *)0x4006C030 // UART CEA709.1-B Receive Indeterminate Time
//registers UART2_TIDT  *(volatile $uint8_t  *)0x4006C031 // UART CEA709.1-B Transmit Indeterminate Time

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 61: $integrated $interchip Sound (I2S) / Synchronous Audio $interface (SAI)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers I2S0_TCSR   0x4002F000 // SAI Transmit Control Register
//registers I2S_TCSR_TE    0x80000000 // Transmitter Enable
//registers I2S_TCSR_STOPE    0x40000000 // Transmitter Enable in Stop mode
//registers I2S_TCSR_DBGE    0x20000000 // Transmitter Enable in Debug mode
//registers I2S_TCSR_BCE    0x10000000 // Bit Clock Enable
//registers I2S_TCSR_FR    0x02000000 // FIFO Reset
//registers I2S_TCSR_SR    0x01000000 // Software Reset
//registers I2S_TCSR_WSF    0x00100000 // Word Start Flag
//registers I2S_TCSR_SEF    0x00080000 // Sync Error Flag
//registers I2S_TCSR_FEF    0x00040000 // FIFO Error Flag (underrun)
//registers I2S_TCSR_FWF    0x00020000 // FIFO Warning Flag (empty)
//registers I2S_TCSR_FRF    0x00010000 // FIFO Request Flag (Data Ready)
//registers I2S_TCSR_WSIE    0x00001000 // Word Start $interrupt Enable
//registers I2S_TCSR_SEIE    0x00000800 // Sync Error $interrupt Enable
//registers I2S_TCSR_FEIE    0x00000400 // FIFO Error $interrupt Enable
//registers I2S_TCSR_FWIE    0x00000200 // FIFO Warning $interrupt Enable
//registers I2S_TCSR_FRIE    0x00000100 // FIFO Request $interrupt Enable
//registers I2S_TCSR_FWDE    0x00000002 // FIFO Warning DMA Enable
//registers I2S_TCSR_FRDE    0x00000001 // FIFO Request DMA Enable
//registers I2S0_TCR1   0x4002F004 // SAI Transmit Configuration 1 Register
//registers I2S_TCR1_TFW(n)   ( n & 0x03)       // Transmit FIFO watermark
//registers I2S0_TCR2   0x4002F008 // SAI Transmit Configuration 2 Register
//registers I2S_TCR2_DIV(n)   ( n & 0xff)       // Bit clock divide by (DIV+1)*2
//registers I2S_TCR2_BCD   ( 1<<24)       // Bit clock direction
//registers I2S_TCR2_BCP   ( 1<<25)       // Bit clock polarity
//registers I2S_TCR2_MSEL(n)  ( (n & 3)<<26)       // MCLK select, 0=bus clock, 1=I2S0_MCLK
//registers I2S_TCR2_BCI   ( 1<<28)       // Bit clock input
//registers I2S_TCR2_BCS   ( 1<<29)       // Bit clock swap
//registers I2S_TCR2_SYNC(n)  ( (n & 3)<<30)       // 0=async 1=sync with receiver
//registers I2S0_TCR3   0x4002F00C // SAI Transmit Configuration 3 Register
//registers I2S_TCR3_WDFL(n)  ( n & 0x0f)       // word flag configuration
//registers I2S_TCR3_TCE   ( 0x10000)       // transmit channel enable
//registers I2S0_TCR4   0x4002F010 // SAI Transmit Configuration 4 Register
//registers I2S_TCR4_FSD   ( 1)        // Frame Sync Direction
//registers I2S_TCR4_FSP   ( 2)        // Frame Sync Polarity
//registers I2S_TCR4_FSE   ( 8)        // Frame Sync Early
//registers I2S_TCR4_MF   ( 0x10)       // MSB First
//registers I2S_TCR4_SYWD(n)  ( (n & 0x1f)<<8)     // Sync Width
//registers I2S_TCR4_FRSZ(n)  ( (n & 0x0f)<<16)    // Frame Size
//registers I2S0_TCR5   0x4002F014 // SAI Transmit Configuration 5 Register
//registers I2S_TCR5_FBT(n)   ( (n & 0x1f)<<8)     // First Bit Shifted
//registers I2S_TCR5_W0W(n)   ( (n & 0x1f)<<16)    // Word 0 Width
//registers I2S_TCR5_WNW(n)   ( (n & 0x1f)<<24)    // Word N Width
//registers I2S0_TDR0   0x4002F020 // SAI Transmit Data Register
//registers I2S0_TDR1   0x4002F024 // SAI Transmit Data Register
//registers I2S0_TFR0   0x4002F040 // SAI Transmit FIFO Register
//registers I2S0_TFR1   0x4002F044 // SAI Transmit FIFO Register
//registers I2S_TFR_RFP(n)   ( n & 7)       // read FIFO pointer
//registers I2S_TFR_WFP(n)   ( (n & 7)<<16)       // write FIFO pointer
//registers I2S0_TMR   0x4002F060 // SAI Transmit Mask Register
//registers I2S_TMR_TWM(n)   ( n & 0xFFFFFFFF)
//registers I2S0_RCSR   0x4002F080 // SAI Receive Control Register
//registers I2S_RCSR_RE    0x80000000 // Receiver Enable
//registers I2S_RCSR_STOPE    0x40000000 // Receiver Enable in Stop mode
//registers I2S_RCSR_DBGE    0x20000000 // Receiver Enable in Debug mode
//registers I2S_RCSR_BCE    0x10000000 // Bit Clock Enable
//registers I2S_RCSR_FR    0x02000000 // FIFO Reset
//registers I2S_RCSR_SR    0x01000000 // Software Reset
//registers I2S_RCSR_WSF    0x00100000 // Word Start Flag
//registers I2S_RCSR_SEF    0x00080000 // Sync Error Flag
//registers I2S_RCSR_FEF    0x00040000 // FIFO Error Flag (underrun)
//registers I2S_RCSR_FWF    0x00020000 // FIFO Warning Flag (empty)
//registers I2S_RCSR_FRF    0x00010000 // FIFO Request Flag (Data Ready)
//registers I2S_RCSR_WSIE    0x00001000 // Word Start $interrupt Enable
//registers I2S_RCSR_SEIE    0x00000800 // Sync Error $interrupt Enable
//registers I2S_RCSR_FEIE    0x00000400 // FIFO Error $interrupt Enable
//registers I2S_RCSR_FWIE    0x00000200 // FIFO Warning $interrupt Enable
//registers I2S_RCSR_FRIE    0x00000100 // FIFO Request $interrupt Enable
//registers I2S_RCSR_FWDE    0x00000002 // FIFO Warning DMA Enable
//registers I2S_RCSR_FRDE    0x00000001 // FIFO Request DMA Enable
//registers I2S0_RCR1   0x4002F084 // SAI Receive Configuration 1 Register
//registers I2S_RCR1_RFW(n)   ( n & 0x03)       // Receive FIFO watermark
//registers I2S0_RCR2   0x4002F088 // SAI Receive Configuration 2 Register
//registers I2S_RCR2_DIV(n)   ( n & 0xff)       // Bit clock divide by (DIV+1)*2
//registers I2S_RCR2_BCD   ( 1<<24)       // Bit clock direction
//registers I2S_RCR2_BCP   ( 1<<25)       // Bit clock polarity
//registers I2S_RCR2_MSEL(n)  ( (n & 3)<<26)       // MCLK select, 0=bus clock, 1=I2S0_MCLK
//registers I2S_RCR2_BCI   ( 1<<28)       // Bit clock input
//registers I2S_RCR2_BCS   ( 1<<29)       // Bit clock swap
//registers I2S_RCR2_SYNC(n)  ( (n & 3)<<30)       // 0=async 1=sync with receiver
//registers I2S0_RCR3   0x4002F08C // SAI Receive Configuration 3 Register
//registers I2S_RCR3_WDFL(n)  ( n & 0x0f)       // word flag configuration
//registers I2S_RCR3_RCE   ( 0x10000)       // receive channel enable
//registers I2S0_RCR4   0x4002F090 // SAI Receive Configuration 4 Register
//registers I2S_RCR4_FSD   ( 1)        // Frame Sync Direction
//registers I2S_RCR4_FSP   ( 2)        // Frame Sync Polarity
//registers I2S_RCR4_FSE   ( 8)        // Frame Sync Early
//registers I2S_RCR4_MF   ( 0x10)       // MSB First
//registers I2S_RCR4_SYWD(n)  ( (n & 0x1f)<<8)     // Sync Width
//registers I2S_RCR4_FRSZ(n)  ( (n & 0x0f)<<16)    // Frame Size
//registers I2S0_RCR5   0x4002F094 // SAI Receive Configuration 5 Register
//registers I2S_RCR5_FBT(n)   ( (n & 0x1f)<<8)     // First Bit Shifted
//registers I2S_RCR5_W0W(n)   ( (n & 0x1f)<<16)    // Word 0 Width
//registers I2S_RCR5_WNW(n)   ( (n & 0x1f)<<24)    // Word N Width
//registers I2S0_RDR0   0x4002F0A0 // SAI Receive Data Register
//registers I2S0_RDR1   0x4002F0A4 // SAI Receive Data Register
//registers I2S0_RFR0   0x4002F0C0 // SAI Receive FIFO Register
//registers I2S0_RFR1   0x4002F0C4 // SAI Receive FIFO Register
//registers I2S_RFR_RFP(n)   ( n & 7)       // read FIFO pointer
//registers I2S_RFR_WFP(n)   ( (n & 7)<<16)       // write FIFO pointer
//registers I2S0_RMR   0x4002F0E0 // SAI Receive Mask Register
//registers I2S_RMR_RWM(n)   ( n & 0xFFFFFFFF)
//registers I2S0_MCR   0x4002F100 // SAI MCLK Control Register
//registers I2S_MCR_DUF   ( 1<<31)       // Divider Update Flag
//registers I2S_MCR_MOE   ( 1<<30)       // MCLK Output Enable
//registers I2S_MCR_MICS(n)   ( (n & 3)<<24)       // MCLK Input Clock Select
//registers I2S0_MDR   0x4002F104 // SAI MCLK Divide Register
//registers I2S_MDR_FRACT(n)  ( (n & 0xff)<<12)    // MCLK Fraction
//registers I2S_MDR_DIVIDE(n)  ( (n & 0xfff))       // MCLK Divide

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 63: General-Purpose Input/Output (GPIO)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers
  ©GPIOA @at 0x400F_F000,
  ©GPIOB @at 0x400F_F040,
  ©GPIOC @at 0x400F_F080,
  ©GPIOD @at 0x400F_F0C0,
  ©GPIOE @at 0x400F_F100
{
  PDOR @offset 0x00 $uint32 // Port Data Output Register
  PSOR @offset 0x04 $uint32 // Port Set Output Register
  PCOR @offset 0x08 $uint32 // Port Clear Output Register
  PTOR @offset 0x0C $uint32 // Port Toggle Output Register
  PDIR @offset 0x10 $uint32 // Port Data Input Register
  PDDR @offset 0x14 $uint32 // Port Data Direction Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 64: Touch sense input (TSI)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers TSI0_GENCS   0x40045000 // General Control and Status Register
//registers TSI_GENCS_LPCLKS   0x10000000  //
//registers TSI_GENCS_LPSCNITV(n)  (((n) & 15) << 24)  //
//registers TSI_GENCS_NSCN(n)  (((n) & 31) << 19)  //
//registers TSI_GENCS_PS(n)   (((n) & 7) << 16)  //
//registers TSI_GENCS_EOSF    0x00008000  //
//registers TSI_GENCS_OUTRGF   0x00004000  //
//registers TSI_GENCS_EXTERF   0x00002000  //
//registers TSI_GENCS_OVRF    0x00001000  //
//registers TSI_GENCS_SCNIP    0x00000200  //
//registers TSI_GENCS_SWTS    0x00000100  //
//registers TSI_GENCS_TSIEN    0x00000080  //
//registers TSI_GENCS_TSIIE    0x00000040  //
//registers TSI_GENCS_ERIE    0x00000020  //
//registers TSI_GENCS_ESOR    0x00000010  //
//registers TSI_GENCS_STM    0x00000002  //
//registers TSI_GENCS_STPE    0x00000001  //
//registers TSI0_SCANC   0x40045004 // SCAN Control Register
//registers TSI_SCANC_REFCHRG(n)  (((n) & 15) << 24)  //
//registers TSI_SCANC_EXTCHRG(n)  (((n) & 7) << 16)  //
//registers TSI_SCANC_SMOD(n)  (((n) & 255) << 8)  //
//registers TSI_SCANC_AMCLKS(n)  (((n) & 3) << 3)  //
//registers TSI_SCANC_AMPSC(n)  (((n) & 7) << 0)  //
//registers TSI0_PEN   0x40045008 // Pin Enable Register
//registers TSI0_WUCNTR   0x4004500C // Wake-Up Channel Counter Register
//registers TSI0_CNTR1   0x40045100 // Counter Register
//registers TSI0_CNTR3   0x40045104 // Counter Register
//registers TSI0_CNTR5   0x40045108 // Counter Register
//registers TSI0_CNTR7   0x4004510C // Counter Register
//registers TSI0_CNTR9   0x40045110 // Counter Register
//registers TSI0_CNTR11   0x40045114 // Counter Register
//registers TSI0_CNTR13   0x40045118 // Counter Register
//registers TSI0_CNTR15   0x4004511C // Counter Register
//registers TSI0_THRESHOLD   0x40045120 // Low Power Channel Threshold Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Nested Vectored $interrupt Controller, Table 3-4 & ARMv7 ref, appendix B3.4 (page 750)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©NVIC @at 0xE000_E000 {
  ISER [4 @offset 0x100 @inc 4] $uint32 // $interrupt Set-enable Registers

  ICER [4 @offset 0x180 @inc 4] $uint32 //Interrupt Clear-enable Registers

  // 0 = highest priority
  // Cortex-M4: 0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240
  IPR [128 @offset 0x400 @inc 1] $uint8 // $interrupt priority
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! SCB System Control Space (SCS), ARMv7 ref manual, B3.2, page 708
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©SCB @at 0xE000_E000 {
  CPUID @offset 0xD00 $uint32 // CPUID Base Register

  ICSR @offset 0xD04 $uint32 { // $interrupt Control and State
    NMIPENDSET, 2, PENDSVSET, PENDSVCLR, PENDSTSET, PENDSTCLR, 1, ISRPREEMPT,
    ISRPENDING, 1, VECTPENDING:9, RETTOBASE, 2, VECTACTIVE:9
  }

  VTOR @offset 0xD08 $uint32 // Vector Table Offset

  AIRCR @offset 0xD0C $uint32 { // Application $interrupt and Reset Control
    VECTKEY:16, ENDIANNESS, 4, PRIGROUP:3,
    5, SYSRESETREQ, VECTCLRACTIVE, VECTRESET
  }

  CPACR @offset 0xD88 $uint32 // Coprocessor Access Control

  FPCCR @offset 0xF34 $uint32 // FP Context Control

  SCR @offset 0xD10 $uint32 // System Control Register
  CCR @offset 0xD14 $uint32 // Configuration and Control
  SHPR1 @offset 0xD18 $uint32 // System Handler Priority registers 1
  SHPR2 @offset 0xD1C $uint32 // System Handler Priority registers 2
  SHPR3 @offset 0xD20 $uint32 // System Handler Priority registers 3
  SHCSR @offset 0xD24 $uint32 // System Handler Control and State
  CFSR @offset 0xD28 $uint32 // Configurable Fault Status Register
  HFSR @offset 0xD2C $uint32 // HardFault Status
  DFSR @offset 0xD30 $uint32 // Debug Fault Status
  MMFAR @offset 0xD34 $uint32 // MemManage Fault Address
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! SYSTICK
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ©SYST @at 0xE000_E000 {
//--- SysTick Control and Status Register
  CSR @offset 0x010 $uint32 {15, COUNTFLAG, 13, CLKSOURCE, TICKINT, ENABLE}

//--- SysTick Reload Value Register
  RVR @offset 0x014 $uint32

//--- SysTick Current Value Register
  CVR @offset 0x018 $uint32

//--- SysTick Calibration Value Register
  CALIB @offset 0x01C @ro $uint32
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers ARM_DEMCR   0xE000EDFC // Debug Exception and Monitor Control
//registers ARM_DEMCR_TRCENA  (1 << 24)  // Enable debugging & monitoring blocks
//registers ARM_DWT_CTRL   0xE0001000 // DWT control register
//registers ARM_DWT_CTRL_CYCCNTENA  (1 << 0)  // Enable cycle count
//registers ARM_DWT_CYCCNT   0xE0001004 // Cycle count register
