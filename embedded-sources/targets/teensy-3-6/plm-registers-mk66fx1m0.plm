check target "teensy-3-6/unprivileged", "teensy-3-6/privileged"

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// chapter 11: Port control and interrupts (PORT) Pin Control Register n
register PORTA {
    PCR @user [32] at 0x4004_9000 : 4 $uint32 {
    7, ISF, 4, IRQC[4], LK, 4, MUX[3], 1, DSE, ODE, PFE, 1, SRE, PE, PS
  }
  
  GPCLR @user  at 0x40049080 $uint32 // Global Pin Control Low Register
  GPCHR @user  at 0x40049084 $uint32 // Global Pin Control High Register
  ISFR  @user  at 0x400490A0 $uint32 // Interrupt Status Flag Register
}


register PORTB {
  PCR @user [32] at 0x4004_A000 : 4 $uint32 {
    7, ISF, 4, IRQC[4], LK, 4, MUX[3], 1, DSE, ODE, PFE, 1, SRE, PE, PS
  }
  
  GPCLR @user  at 0x4004A080 $uint32 // Global Pin Control Low Register
  GPCHR @user  at 0x4004A084 $uint32 // Global Pin Control High Register
  ISFR  @user  at 0x4004A0A0 $uint32 // Interrupt Status Flag Register
}


register PORTC {
  PCR @user [32] at 0x4004_B000 : 4 $uint32 {
    7, ISF, 4, IRQC[4], LK, 4, MUX[3], 1, DSE, ODE, PFE, 1, SRE, PE, PS
  }
  
  GPCLR @user  at 0x4004B080 $uint32 // Global Pin Control Low Register
  GPCHR @user  at 0x4004B084 $uint32 // Global Pin Control High Register
  ISFR  @user  at 0x4004B0A0 $uint32 // Interrupt Status Flag Register
}


register PORTD {
  PCR @user [32] at 0x4004_C000 : 4 $uint32 {
    7, ISF, 4, IRQC[4], LK, 4, MUX[3], 1, DSE, ODE, PFE, 1, SRE, PE, PS
  }
  
  GPCLR @user  at 0x4004C080 $uint32 // Global Pin Control Low Register
  GPCHR @user  at 0x4004C084 $uint32 // Global Pin Control High Register
  ISFR  @user  at 0x4004C0A0 $uint32 // Interrupt Status Flag Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 12: System Integration Module (SIM)
register SIM {
  SOPT1    at 0x40047000 $uint32 // System Options Register 1

  SOPT1CFG at 0x40047004 $uint32 // SOPT1 Configuration Register

  SOPT2    at 0x40048004 $uint32 { // System Options Register 2
    2,
    SDHCSRC [2],     // SDHC Clock, 0=system, 1=FLL/PLL, 2=OSCERCLK, 3=external
    LPUARTSRC [2],     // LPUART Clock, 0=off, 1=FLL/PLL, 2=OSCERCLK, 3=MCGIRCLK
    TPMSRC [2],    // TPM Clock, 0=off, 1=FLL/PLL, 2=OSCERCLK, 3=MCGIRCLK
    2,
    TIMESRC [2], // IEEE 1588 clock, 0=system, 1=FLL/PLL, 2=OSCERCLK, 3=external
    RMIISRC, // 0=external, 1=external 1588
    USBSRC, // 0=USB_CLKIN, 1=FFL/PLL
    PLLFLLSEL [2], // 0=FLL, 1=PLL
    3,
    TRACECLKSEL, // 0=MCGOUTCLK, 1=CPU
    2,
    FBSL[2], // FlexBus security level
    CLKOUTSEL[3], // Selects the clock to output on the CLKOUT pin.
    RTCCLKOUTSEL, // RTC clock out select
    2,
    USBREGEN, // USB PHY PLL Regulator Enable
    USBSLSRC // USB Slow Clock Source
  }

  SOPT4   at 0x4004800C $uint32 // System Options Register 4

  SOPT5   at 0x40048010 $uint32 // System Options Register 5

  SOPT7   at 0x40048018 $uint32 // System Options Register 7

  SDID @ro at 0x40048024 $uint32 // System Device Identification Register

  SCGC2  at 0x4004802C $uint32 { // System Clock Gating Control Register 2
    18,
    DAC1,
    DAC0,
    1,
    TPM2,
    TPM1,
    4,
    LPUART0,
    3,
    ENET
  }

  SCGC3  at 0x4004_8030 $uint32 {// System Clock Gating Control Register 3
    4,
    ADC1, // ADC1 Clock Gate Control
    1,
    FTM3, // FTM3 Clock Gate Control
    FTM2, // FTM2 Clock Gate Control
    6,
    SDHC,
    4,
    SPI2,
    7,
    FLEXCAN1,
    USBHSDCD,
    USBHSPHY,
    USBHS,
    RNGA
  }

  SCGC4 at 0x40048034 $uint32 { // System Clock Gating Control Register 4
    11,
    VREF,
    CMP,
    USBOTG,
    4,
    UART3,
    UART2,
    UART1,
    UART0,
    2,
    I2C1,
    I2C0,
    3,
    CMT,
    EWM,
    1
  }

  SCGC5 at 0x4004_8038 $uint32 { // System Clock Gating Control Register 5
    18,
    PORTE,
    PORTD,
    PORTC,
    PORTB,
    PORTA,
    3,
    TSI, // Touch Sense Input TSI Clock Gate Control
    4,
    LPTMR // Low Power Timer Access Control
  }

  SCGC6 at 0x4004803C $uint32 { // System Clock Gating Control Register 6
    DAC0,
    1,
    RTC,
    1,
    ADC0,
    FTM2,
    FTM1,
    FTM0,
    PIT,
    PDB,
    USBDCD,
    2,
    CRC,
    2,
    I2S,
    1,
    SPI1,
    SPI0,
    2,
    RNGA,
    4,
    FLEXCAN0,
    2,
    DMAMUX,
    FTF
  }

  SCGC7 at 0x40048040 $uint32 { // System Clock Gating Control Register 7
    28,
    SDRAMMC,
    MPU,
    DMA,
    FLEXBUS
  }

  CLKDIV1 at 0x4004_8044 $uint32 {// System Clock Divider Register 1
    OUTDIV1[4], // Divide value for the core/system clock
    OUTDIV2[4], // Divide value for the peripheral clock
    OUTDIV3[4], // Divide value for flexbus
    OUTDIV4[4], // Divide value for the flash clock
    16
  }

  CLKDIV2 at 0x40048048 $uint32 { // System Clock Divider Register 2
    28,
    USBDIV [3],
    USBFRAC
  }

  FCFG1 @ro at 0x4004804C $uint32 // Flash Configuration Register 1
  FCFG2 @ro at 0x40048050 $uint32 // Flash Configuration Register 2
  UIDH  @ro at 0x40048054 $uint32 // Unique Identification Register High
  UIDMH @ro at 0x40048058 $uint32 // Unique Identification Register Mid-High
  UIDML @ro at 0x4004805C $uint32 // Unique Identification Register Mid Low
  UIDL  @ro at 0x40048060 $uint32 // Unique Identification Register Low
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 13: Reset Control Module (RCM)
register RCM {
  SRS0 at 0x4007F000 $uint8 // System Reset Status Register 0
  SRS1 at 0x4007F001 $uint8 // System Reset Status Register 1
  RPFC at 0x4007F004 $uint8 // Reset Pin Filter Control Register
  RPFW at 0x4007F005 $uint8 // Reset Pin Filter Width Register
  MR   at 0x4007F007 $uint8 // Mode Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 14: System Mode Controller
register SMC {
  PMPROT  at 0x4007E000 $uint8 { // Power Mode Protection Register
    AHSRUN, // Allow high speed run mode
    1,
    AVLP, // Allow very low power modes
    1,
    ALLS, // Allow low leakage stop mode
    1,
    AVLLS, // Allow very low leakage stop mode
    1
  }


  PMCTRL at 0x4007_E001 $uint8 { // Power Mode Control Register
    LPWUI, // Low Power Wake Up on Interrupt
    RUNM[2], // Run Mode Control
    1,
    STOPA, // Stop Aborted
    STOPM [3] // Stop Mode Control
  }


  STOPCTRL at 0x4007E002 $uint8 { // VLLS Control Register
    PSTOPO [2],
    PORPO,
    RAM2PO,
    1,
    LLSM [3]
  }


  PMSTAT at 0x4007E003 $uint8 { // Power Mode Status Register
    HSRUN, VLLS, LLS, VLPS, VLPW, VLPR, STOP, RUN
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 15: Power Management Controller
register PMC {
  LVDSC1 at 0x4007D000 $uint8 { // Low Voltage Detect Status And Control 1 register
    LVDF,
    LVDACK,
    LVDIE,
    LVDRE,
    2,
    LVDV [2]
  }
  
  LVDSC2 at 0x4007D001 $uint8 { // Low Voltage Detect Status And Control 2 register
    LVWF, // Low-Voltage Warning Flag
    LVWACK, // Low-Voltage Warning Acknowledge
    LVWIE, // Low-Voltage Warning Interrupt Enable
    3,
    LVWV [2] // Low-Voltage Warning Voltage Select
  }
  
  REGSC at 0x4007D002 $uint8 { // Regulator Status And Control register
    3, BGEN, ACKISO, REGONS, BGBE, 1
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 16: Low-Leakage Wakeup Unit (LLWU)
register LLWU {
  PE1  at 0x4007C000 $uint8 // LLWU Pin Enable 1 register
  PE2  at 0x4007C001 $uint8 // LLWU Pin Enable 2 register
  PE3  at 0x4007C002 $uint8 // LLWU Pin Enable 3 register
  PE4  at 0x4007C003 $uint8 // LLWU Pin Enable 4 register
  ME   at 0x4007C004 $uint8 // LLWU Module Enable register
  F1   at 0x4007C005 $uint8 // LLWU Flag 1 register
  F2   at 0x4007C006 $uint8 // LLWU Flag 2 register
  F3   at 0x4007C007 $uint8 // LLWU Flag 3 register
  FILT1 at 0x4007C008 $uint8 // LLWU Pin Filter 1 register
  FILT2 at 0x4007C009 $uint8 // LLWU Pin Filter 2 register
  RST  at 0x4007C00A $uint8 // LLWU Reset Enable register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 17: Miscellaneous Control Module (MCM)
register MCM {
  PLASC at 0xE0080008 $uint16 // Crossbar Switch (AXBS) Slave Configuration
  
  PLAMC at 0xE008000A $uint16 // Crossbar Switch (AXBS) Master Configuration
  
  CR at 0xE008_000C $uint32 { // Crossbar Switch (AXBS) Control Register
    1,
    SRAMLWP, // SRAM_L write protect
    SRAMLAP [2], // SRAM_L priority, 0=RR, 1=favor DMA, 2=CPU, 3=DMA
    1,
    SRAMUWP, // SRAM_U write protect
    SRAMUAP [2],
    24
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Crossbar Switch (AXBS) - only programmable on MK20DX256
register AXBS{
  PRS0   at 0x40004000 $uint32 // Priority Registers Slave 0
  PRS1   at 0x40004100 $uint32 // Priority Registers Slave 1
  PRS2   at 0x40004200 $uint32 // Priority Registers Slave 2
  PRS3   at 0x40004300 $uint32 // Priority Registers Slave 3
  PRS4   at 0x40004400 $uint32 // Priority Registers Slave 4
  PRS5   at 0x40004500 $uint32 // Priority Registers Slave 5
  PRS6   at 0x40004600 $uint32 // Priority Registers Slave 6
  PRS7   at 0x40004700 $uint32 // Priority Registers Slave 7
  
  CRS0   at 0x40004010         // Control Register 0
  CRS1   at 0x40004110         // Control Register 1
  CRS2   at 0x40004210         // Control Register 2
  CRS3   at 0x40004310         // Control Register 3
  CRS4   at 0x40004410         // Control Register 4
  CRS5   at 0x40004510         // Control Register 5
  CRS6   at 0x40004610         // Control Register 6
  CRS7   at 0x40004710 $uint32 { // Control Register 7
    READONLY,
    HLP,
    20,
    ARB [2],
    2,
    PCTL [2],
    1,
    PARK [3]
  }
  
  
  MGPCR0 at 0x40004800 // Master 0 General Purpose Control Register
  MGPCR1 at 0x40004900 // Master 1 General Purpose Control Register
  MGPCR2 at 0x40004A00 // Master 2 General Purpose Control Register
  MGPCR3 at 0x40004B00 // Master 3 General Purpose Control Register
  MGPCR4 at 0x40004C00 // Master 4 General Purpose Control Register
  MGPCR5 at 0x40004D00 // Master 5 General Purpose Control Register
  MGPCR6 at 0x40004E00 // Master 6 General Purpose Control Register
  MGPCR7 at 0x40004F00 $uint32 { // Master 7 General Purpose Control Register
    29,
    AULB [3]
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 23: Direct Memory Access Multiplexer (DMAMUX)

let DMA_CHANNEL_COUNT = 32

register DMAMUX {
  CHCFG [DMA_CHANNEL_COUNT] at 0x4002_1000 : 1 $uint8 {
    ENABLE, TRIG, SOURCE [6]
  }
}

let DMAMUX_SOURCE_TSI      $uint6 = 1
let DMAMUX_SOURCE_UART0_RX $uint6 = 2
let DMAMUX_SOURCE_UART0_TX $uint6 = 3
let DMAMUX_SOURCE_UART1_RX $uint6 = 4
let DMAMUX_SOURCE_UART1_TX $uint6 = 5
let DMAMUX_SOURCE_UART2_RX $uint6 = 6
let DMAMUX_SOURCE_UART2_TX $uint6 = 7
let DMAMUX_SOURCE_UART3_RX $uint6 = 8
let DMAMUX_SOURCE_UART3_TX $uint6 = 9
let DMAMUX_SOURCE_UART4_RXTX $uint6 = 10
let DMAMUX_SOURCE_I2S0_RX $uint6 = 12
let DMAMUX_SOURCE_I2S0_TX $uint6 = 13
let DMAMUX_SOURCE_SPI0_RX $uint6 = 14
let DMAMUX_SOURCE_SPI0_TX $uint6 = 15
let DMAMUX_SOURCE_SPI1_RX $uint6 = 16
let DMAMUX_SOURCE_SPI1_TX $uint6 = 17
let DMAMUX_SOURCE_I2C0 $uint6 = 18
let DMAMUX_SOURCE_I2C3 $uint6 = 18
let DMAMUX_SOURCE_I2C1 $uint6 = 19
let DMAMUX_SOURCE_I2C2 $uint6 = 19
let DMAMUX_SOURCE_FTM0_CH0 $uint6 = 20
let DMAMUX_SOURCE_FTM0_CH1 $uint6 = 21
let DMAMUX_SOURCE_FTM0_CH2 $uint6 = 22
let DMAMUX_SOURCE_FTM0_CH3 $uint6 = 23
let DMAMUX_SOURCE_FTM0_CH4 $uint6 = 24
let DMAMUX_SOURCE_FTM0_CH5 $uint6 = 25
let DMAMUX_SOURCE_FTM0_CH6 $uint6 = 26
let DMAMUX_SOURCE_FTM0_CH7 $uint6 = 27
let DMAMUX_SOURCE_FTM1_CH0 $uint6 = 28
let DMAMUX_SOURCE_TPM1_CH0 $uint6 = 28
let DMAMUX_SOURCE_FTM1_CH1 $uint6 = 29
let DMAMUX_SOURCE_TPM1_CH1 $uint6 = 29
let DMAMUX_SOURCE_FTM2_CH0 $uint6 = 30
let DMAMUX_SOURCE_TPM2_CH0 $uint6 = 30
let DMAMUX_SOURCE_FTM2_CH1 $uint6 = 31
let DMAMUX_SOURCE_TPM2_CH1 $uint6 = 31
let DMAMUX_SOURCE_FTM3_CH0 $uint6 = 32
let DMAMUX_SOURCE_FTM3_CH1 $uint6 = 33
let DMAMUX_SOURCE_FTM3_CH2 $uint6 = 34
let DMAMUX_SOURCE_FTM3_CH3 $uint6 = 35
let DMAMUX_SOURCE_FTM3_CH4 $uint6 = 36
let DMAMUX_SOURCE_FTM3_CH5 $uint6 = 37
let DMAMUX_SOURCE_FTM3_CH6 $uint6 = 38
let DMAMUX_SOURCE_SPI2_RX $uint6 = 38
let DMAMUX_SOURCE_FTM3_CH7 $uint6 = 39
let DMAMUX_SOURCE_SPI2_TX $uint6 = 39
let DMAMUX_SOURCE_ADC0 $uint6 = 40
let DMAMUX_SOURCE_ADC1 $uint6 = 41
let DMAMUX_SOURCE_CMP0 $uint6 = 42
let DMAMUX_SOURCE_CMP1 $uint6 = 43
let DMAMUX_SOURCE_CMP2 $uint6 = 44
let DMAMUX_SOURCE_CMP3 $uint6 = 44
let DMAMUX_SOURCE_DAC0 $uint6 = 45
let DMAMUX_SOURCE_DAC1 $uint6 = 46
let DMAMUX_SOURCE_CMT $uint6 = 47
let DMAMUX_SOURCE_PDB $uint6 = 48
let DMAMUX_SOURCE_PORTA $uint6 = 49
let DMAMUX_SOURCE_PORTB $uint6 = 50
let DMAMUX_SOURCE_PORTC $uint6 = 51
let DMAMUX_SOURCE_PORTD $uint6 = 52
let DMAMUX_SOURCE_PORTE $uint6 = 53
let DMAMUX_SOURCE_IEEE1588_T0 $uint6 = 54
let DMAMUX_SOURCE_IEEE1588_T1 $uint6 = 55
let DMAMUX_SOURCE_FTM1_OV $uint6 = 55
let DMAMUX_SOURCE_IEEE1588_T2 $uint6 = 56
let DMAMUX_SOURCE_FTM2_OV $uint6 = 56
let DMAMUX_SOURCE_IEEE1588_T3 $uint6 = 57
let DMAMUX_SOURCE_LPUART0_RX $uint6 = 58
let DMAMUX_SOURCE_LPUART0_TX $uint6 = 59
let DMAMUX_SOURCE_ALWAYS0 $uint6 = 60
let DMAMUX_SOURCE_ALWAYS1 $uint6 = 61
let DMAMUX_SOURCE_ALWAYS2 $uint6 = 62
let DMAMUX_SOURCE_ALWAYS3 $uint6 = 63

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 21: Direct Memory Access Controller (eDMA)
  
let DMA_TCD_ATTR_SIZE_8BIT   $uint4 = 0
let DMA_TCD_ATTR_SIZE_16BIT  $uint4 = 1
let DMA_TCD_ATTR_SIZE_32BIT  $uint4 = 2
let DMA_TCD_ATTR_SIZE_16BYTE $uint4 = 4
let DMA_TCD_ATTR_SIZE_32BYTE $uint4 = 5

register DMA {
  CR at 0x4000_8000 $uint32 {
    14,
    CX, // Cancel Transfer
    ECX, // Error Cancel Transfer
    5,
    GRP1PRI,
    1,
    GRP0PRI,
    EMLM, // Enable Minor Loop Mapping
    CLM, // Continuous Link Mode
    HALT, // Halt DMA Operations
    HOE, // Halt On Error
    ERGA, // Enable Round Robin Group Arbitration
    ERCA, // Enable Round Robin Channel Arbitration 
    EDBG, // Enable Debug
    1
  }
  
  // Error Status Register
  ES  at 0x4000_8004 $uint32 {
    VLD, 14, ECX, GPE, CPE, 1, ERRCHN [5],
    SAE, SOE, DAE, DOE, NCE, SGE, SBE, DBE
  }
  
  ERQ at 0x4000_800C $uint32 { // Enable Request Register
   ERQ31, ERQ30, ERQ29, ERQ28, ERQ27, ERQ26, ERQ25, ERQ24,
   ERQ23, ERQ22, ERQ21, ERQ20, ERQ19, ERQ18, ERQ17, ERQ16,
   ERQ15, ERQ14, ERQ13, ERQ12, ERQ11, ERQ10, INT9,  ERQ8,
   ERQ7,  ERQ6,  ERQ5,  ERQ4,  ERQ3,  ERQ2,  ERQ1,  ERQ0
  }
  
  EEI at 0x4000_8014 $uint32 { // Enable Error Interrupt Register
   EEI31, EEI30, EEI29, EEI28, EEI27, EEI26, EEI25, EEI24,
   EEI23, EEI22, EEI21, EEI20, EEI19, EEI18, EEI17, EEI16,
   EEI15, EEI14, EEI13, EEI12, EEI11, EEI10, INT9,  EEI8,
   EEI7,  EEI6,  EEI5,  EEI4,  EEI3,  EEI2,  EEI1,  EEI0
  }
  
  CEEI at 0x4000_8018 $uint8 { // Clear Enable Error Interrupt Register
   NOP, CAAE, 1, CEEI [5]
  }
  
  SEEI at 0x4000_8019 $uint8 { // Set Enable Error Interrupt Register
   NOP, SAAE, 1, SEEI [5]
  }
  
  CERQ at 0x4000_801A $uint8 { // Clear Enable Request Register
   NOP, CAER, 1, CERQ [5]
  }
  
  SERQ at 0x4000_801B $uint8 { // Set Enable Request Register
   NOP, SAER, 1, SERQ [5]
  }
  
  CDNE at 0x4000_801C $uint8 { // Clear DONE Status Bit Register
   NOP, CADN, 1, CDNE [5]
  }
  
  SSRT at 0x4000_801D $uint8 { // Set START Bit Register
   NOP, SAST, 2, SSRT [4]
  }
  
  CERR at 0x4000_801E $uint8 { // Clear Error Register
   NOP, CAEI, 1, CERR [5]
  }
  
  CINT at 0x4000_801F $uint8 { // Clear Interrupt Request Register
   NOP, CAIR, 1, CINT [5]
  }
  
  INT at 0x4000_8024 $uint32 { // Interrupt Request Register
   INT31, INT30, INT29, INT28, INT27, INT26, INT25, INT24,
   INT23, INT22, INT21, INT20, INT19, INT18, INT17, INT16,
   INT15, INT14, INT13, INT12, INT11, INT10, INT9,  INT8,
   INT7,  INT6,  INT5,  INT4,  INT3,  INT2,  INT1,  INT0
  }
  
  ERR at 0x4000_802C $uint32 { // Error Register
   ERR31, ERR30, ERR29, ERR28, ERR27, ERR26, ERR25, ERR24,
   ERR23, ERR22, ERR21, ERR20, ERR19, ERR18, ERR17, ERR16,
   ERR15, ERR14, ERR13, ERR12, ERR11, ERR10, ERR9,  ERR8,
   ERR7,  ERR6,  ERR5,  ERR4,  ERR3,  ERR2,  ERR1,  ERR0
  }
  
  HRS at 0x4000_8034 $uint32 { // Hardware Request Status Register
   HRS31, HRS30, HRS29, HRS28, HRS27, HRS26, HRS25, HRS24,
   HRS23, HRS22, HRS21, HRS20, HRS19, HRS18, HRS17, HRS16,
   HRS15, HRS14, HRS13, HRS12, HRS11, HRS10, HRS9,  HRS8,
   HRS7,  HRS6,  HRS5,  HRS4,  HRS3,  HRS2,  HRS1,  HRS0
  }
  
  // Enable Asynchronous Request in Stop Register 
  EARS at 0x4000_8044 $uint32 {
   EDREQ_31, EDREQ_30, EDREQ_29, EDREQ_28, EDREQ_27, EDREQ_26, EDREQ_25, EDREQ_24,
   EDREQ_23, EDREQ_22, EDREQ_21, EDREQ_20, EDREQ_19, EDREQ_18, EDREQ_17, EDREQ_16,
   EDREQ_15, EDREQ_14, EDREQ_13, EDREQ_12, EDREQ_11, EDREQ_10, EDREQ_9,  EDREQ_8,
   EDREQ_7,  EDREQ_6,  EDREQ_5,  EDREQ_4,  EDREQ_3,  EDREQ_2,  EDREQ_1,  EDREQ_0
  }
  
  // Channel n Priority Register
  DCHPRI [DMA_CHANNEL_COUNT] at 0x4000_8100 : 1 $uint8 {
    ECP, DPA, 1, CHPRI [5]
  }
  
  TCD_SADDR [DMA_CHANNEL_COUNT] at 0x4000_9000 : 32 $uint32 // TCD Source Address
  
  TCD_SOFF [DMA_CHANNEL_COUNT] at 0x4000_9004 : 32 $int16 // TCD Signed Source Address Offset
  
  TCD_ATTR [DMA_CHANNEL_COUNT] at 0x4000_9006 : 32 $uint16 { // TCD Transfer Attributes
    SMOD [4], SSIZE [4], DMOD [4], DSIZE [4]
  }
  
  // TCD Minor Byte Count (Minor Loop Disabled)
  TCD_NBYTES_MLNO [DMA_CHANNEL_COUNT] at 0x4000_9008 : 32 $uint32
  
  // TCD Last Source Address Adjustment
  TCD_SLAST [DMA_CHANNEL_COUNT] at 0x4000_900C : 32 $int32
  
  // TCD Destination Address
  TCD_DADDR [DMA_CHANNEL_COUNT] at 0x4000_9010 : 32 $uint32
  
  // TCD Signed Destination Address Offset
  TCD_DOFF [DMA_CHANNEL_COUNT] at 0x4000_9014 : 32 $int16
  
  // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
  TCD_CITER_ELINKNO [DMA_CHANNEL_COUNT] at 0x4000_9016 : 32 $uint16 {
    ELINK, CITER [15]
  }
  
  // TCD Last Destination Address Adjustment/Scatter Gather Address
  TCD_DLASTSGA [DMA_CHANNEL_COUNT] at 0x4000_9018 : 32 $int32
  
  // TCD Control and Status 
  TCD_CSR [DMA_CHANNEL_COUNT] at 0x4000_901C : 32 $uint16 {
    BWC [2], 2, MAJORLINKCH [4],
    DONE, ACTIVE, MAJORLINK, ESG, DREQ, INTHALF, INTMAJOR, START
  }
  
  // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled) 
  TCD_BITER_ELINKNO [DMA_CHANNEL_COUNT] at 0x4000_901E : 32 $uint16 {
    ELINK, BITER [15]
  }
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//// Chapter 22: External Watchdog Monitor (EWM)
//register EWM_CTRL  *(volatile $uint8_t  *)0x40061000 // Control Register
//register EWM_SERV  *(volatile $uint8_t  *)0x40061001 // Service Register
//register EWM_CMPL  *(volatile $uint8_t  *)0x40061002 // Compare Low Register
//register EWM_CMPH  *(volatile $uint8_t  *)0x40061003 // Compare High Register


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 23: Watchdog Timer (WDOG)
register WDOG {
  STCTRLH at 0x40052000 $uint16 { // Watchdog Status and Control Register High
    1,
    WDOG_STCTRLH_DISTESTWDOG,  // Allows the WDOG's functional test mode to be disabled permanently.
    BYTESEL [2], // selects the byte to be tested when the watchdog is in the byte test mode.
    TESTSEL,
    TESTWDOG,
    2,
    WAITEN,
    STOPEN,
    DBGEN,
    ALLOWUPDATE,
    WINEN,
    IRQRSTEN,
    CLKSRC,
    WDOGEN
  }
  
  
  STCTRLL  at 0x40052002 $uint16 // Watchdog Status and Control Register Low
  TOVALH   at 0x40052004 $uint16 // Watchdog Time-out Value Register High
  TOVALL   at 0x40052006 $uint16 // Watchdog Time-out Value Register Low
  WINH     at 0x40052008 $uint16 // Watchdog Window Register High
  WINL     at 0x4005200A $uint16 // Watchdog Window Register Low
  REFRESH  at 0x4005200C $uint16 // Watchdog Refresh register
  
  UNLOCK   at 0x4005_200E $uint16 // Watchdog Unlock register
  
  TMROUTH  at 0x40052010 $uint16 // Watchdog Timer Output Register High
  TMROUTL  at 0x40052012 $uint16 // Watchdog Timer Output Register Low
  RSTCNT   at 0x40052014 $uint16 // Watchdog Reset Count register
  PRESC    at 0x40052016 $uint16 // Watchdog Prescaler register
}

let WDOG_UNLOCK_SEQ1 $uint16   = 0xC520
let WDOG_UNLOCK_SEQ2 $uint16   = 0xD928

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 24: Multipurpose Clock Generator (MCG)
register MCG {
  C1 at 0x40064000 $uint8 { // MCG Control 1 Register
    CLKS [2], // Clock Source Select, Selects the clock source for MCGOUTCLK
    FRDIV [3], // FLL External Reference Divider, Selects the amount to divide down the external reference clock for the FLL
    IREFS, // Internal Reference Select, Selects the reference clock source for the FLL
    IRCLKEN, // Internal Reference Clock Enable, Enables the internal reference clock for use as MCGIRCLK
    IREFSTEN // Internal Reference Stop Enable, Controls whether or not the internal reference clock remains enabled when the MCG enters Stop mode
  }
  
  C2 at 0x4006_4001 $uint8 { // MCG Control 2 Register
    LOCRE0, // Loss of Clock Reset Enable, Determines whether an interrupt 
            // or a reset request is made following a loss of OSC0
    1,
    RANGE0[2], // Frequency Range Select, Selects the frequency range
               // for the crystal oscillator
    HGO0, // High Gain Oscillator Select, Controls the crystal oscillator mode of operation  
    EREFS, // External Reference Select, selects the source for the external reference clock
    LP, // Low Power Select, Controls whether the FLL or PLL is disabled in BLPI and BLPE modes.
    IRCS // Internal Reference Clock Select, Selects between the fast or slow internal reference clock source.
  }
  
  C3 at 0x4006_4002 $uint8 // MCG Control 3 Register
  //register MCG_C3_SCTRIM(n)  ($uint8_t)(n)   // Slow Internal Reference Clock Trim Setting
  
  C4 at 0x40064003 $uint8 { // MCG Control 4 Register
    DMX32, // DCO Maximum Frequency with 32.768 kHz Reference, controls whether the DCO frequency range is narrowed
    DRST_DRS [2], // Fast Internal Reference Clock Trim Setting
    FCTRIM [4], // DCO Range Select
    SCFTRIM // Slow Internal Reference Clock Fine Trim
  }
  
  
  C5 at 0x4006_4004 $uint8 { // MCG Control 5 Register
   1,
   PLLCLKEN0, // PLL Clock Enable
   PLLSTEN0,  // PLL Stop Enable
   PRDIV0 [5] // PLL External Reference Divider
  }
  
  C6 at 0x4006_4005 $uint8 { // MCG Control 6 Register
   LOLIE0, // Loss of Lock Interrrupt Enable
   PLLS, // PLL Select, Controls whether the PLL or FLL output is selected as the MCG source when CLKS[1:0]=00
   CME0,   // Clock Monitor Enable
   VDIV0[5] // VCO 0 Divider
  }
  
  S @ro at 0x40064006 $uint8 { // MCG Status Register
   LOLS0, // Loss of Lock Status
   LOCK0, // Lock Status, 0=PLL Unlocked, 1=PLL Locked
   PLLST, // PLL Select Status
   IREFST, // Internal Reference Status
   CLKST [2], // Clock Mode Status, 0=FLL is selected, 1= Internal ref, 2=External ref, 3=PLL
   OSCINIT0, // OSC Initialization, resets to 0, is set to 1 after the initialization cycles of the crystal oscillator
   IRCST   // Internal Reference Clock Status
  }
  
  SC at 0x40064008 $uint8 { // MCG Status and Control Register
    ATME, // Automatic Trim Machine Enable
    ATMS, // Automatic Trim Machine Select
    ATMF, // Automatic Trim Machine Fail Flag
    FLTPRSRV, // FLL Filter Preserve Enable
    FCRDIV [3], // Fast Clock Internal Reference Divider
    LOCS0 // OSC0 Loss of Clock Status
  }
  
  
  
  ATCVH at 0x4006400A $uint8 // MCG Auto Trim Compare Value High Register
  ATCVL at 0x4006400B $uint8 // MCG Auto Trim Compare Value Low Register
  C7    at 0x4006400C $uint8 // MCG Control 7 Register
  C8    at 0x4006400D $uint8 // MCG Control 8 Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 25: Oscillator (OSC)
register OSC {
  CR at 0x40065000 $uint8 {// OSC Control Register
    ERCLKEN, // External Reference Enable, Enables external reference clock (OSCERCLK)
    1,
    EREFSTEN, // External Reference Stop Enable, Controls whether or not 
              // the external reference clock (OSCERCLK) remains enabled when
              // MCU enters Stop mode.
    1,
    SC2P, // Oscillator 2 pF Capacitor Load Configure
    SC4P, // Oscillator 4 pF Capacitor Load Configure
    SC8P, // Oscillator 8 pF Capacitor Load Configure
    SC16P // Oscillator 16 pF Capacitor Load Configure
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Local Memory Controller
register LMEM {
  PCCCR at 0xE008_2000 $uint32 { // Cache control register
    GO,
    3,
    PUSHW1,
    INVW1,
    PUSHW0,
    INVW0,
    20,
    PCCR3,
    PCCR2,
    ENWRBUF,
    ENCACHE
  }
  
  PCCLCR at 0xE0082004 $uint32 // Cache line control register
  PCCSAR at 0xE0082008 $uint32 // Cache search address register
  PCCCVR at 0xE008200C $uint32 // Cache read/write value register
  PCCRMR at 0xE0082020 $uint32 // Cache regions mode register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//// Chapter 27: Flash Memory Controller (FMC)
register FMC {
  PFAPR     at 0x4001F000 $uint32 // Flash Access Protection
  PFB0CR    at 0x4001F004 $uint32 // Flash Control
  TAGVDW0S0 at 0x4001F100 $uint32 // Cache Tag Storage
  TAGVDW0S1 at 0x4001F104 $uint32 // Cache Tag Storage
  TAGVDW1S0 at 0x4001F108 $uint32 // Cache Tag Storage
  TAGVDW1S1 at 0x4001F10C $uint32 // Cache Tag Storage
  TAGVDW2S0 at 0x4001F110 $uint32 // Cache Tag Storage
  TAGVDW2S1 at 0x4001F114 $uint32 // Cache Tag Storage
  TAGVDW3S0 at 0x4001F118 $uint32 // Cache Tag Storage
  TAGVDW3S1 at 0x4001F11C $uint32 // Cache Tag Storage
  DATAW0S0  at 0x4001F200 $uint32 // Cache Data Storage
  DATAW0S1  at 0x4001F204 $uint32 // Cache Data Storage
  DATAW1S0  at 0x4001F208 $uint32 // Cache Data Storage
  DATAW1S1  at 0x4001F20C $uint32 // Cache Data Storage
  DATAW2S0  at 0x4001F210 $uint32 // Cache Data Storage
  DATAW2S1  at 0x4001F214 $uint32 // Cache Data Storage
  DATAW3S0  at 0x4001F218 $uint32 // Cache Data Storage
  DATAW3S1  at 0x4001F21C $uint32 // Cache Data Storage
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//// Chapter 28: Flash Memory Module (FTFL)
//register FTFL_FST *(volatile $uint8_t  *)0x40020000      // Flash Status Register
//register FTFL_FSTAT_CCIF   ($uint8_t)0x80   // Command Complete Interrupt Flag
//register FTFL_FSTAT_RDCOLERR  ($uint8_t)0x40   // Flash Read Collision Error Flag
//register FTFL_FSTAT_ACCERR  ($uint8_t)0x20   // Flash Access Error Flag
//register FTFL_FSTAT_FPVIOL  ($uint8_t)0x10   // Flash Protection Violation Flag
//register FTFL_FSTAT_MGSTAT0  ($uint8_t)0x01   // Memory Controller Command Completion Status Flag
//register FTFL_FCNFG  *(volatile $uint8_t  *)0x40020001      // Flash Configuration Register
//register FTFL_FCNFG_CCIE   ($uint8_t)0x80   // Command Complete Interrupt Enable
//register FTFL_FCNFG_RDCOLLIE  ($uint8_t)0x40   // Read Collision Error Interrupt Enable
//register FTFL_FCNFG_ERSAREQ  ($uint8_t)0x20   // Erase All Request
//register FTFL_FCNFG_ERSSUSP  ($uint8_t)0x10   // Erase Suspend
//register FTFL_FCNFG_PFLSH  ($uint8_t)0x04   // Flash memory configuration
//register FTFL_FCNFG_RAMRDY  ($uint8_t)0x02   // RAM Ready
//register FTFL_FCNFG_EEERDY  ($uint8_t)0x01   // EEPROM Ready
//register FTFL_FSEC  *(const    $uint8_t  *)0x40020002      // Flash Security Register
//register FTFL_FOPT  *(const    $uint8_t  *)0x40020003      // Flash Option Register
//register FTFL_FCCOB3  *(volatile $uint8_t  *)0x40020004      // Flash Common Command Object Registers
//register FTFL_FCCOB2  *(volatile $uint8_t  *)0x40020005
//register FTFL_FCCOB1  *(volatile $uint8_t  *)0x40020006
//register FTFL_FCCOB0  *(volatile $uint8_t  *)0x40020007
//register FTFL_FCCOB7  *(volatile $uint8_t  *)0x40020008
//register FTFL_FCCOB6  *(volatile $uint8_t  *)0x40020009
//register FTFL_FCCOB5  *(volatile $uint8_t  *)0x4002000A
//register FTFL_FCCOB4  *(volatile $uint8_t  *)0x4002000B
//register FTFL_FCCOBB  *(volatile $uint8_t  *)0x4002000C
//register FTFL_FCCOBA  *(volatile $uint8_t  *)0x4002000D
//register FTFL_FCCOB9  *(volatile $uint8_t  *)0x4002000E
//register FTFL_FCCOB8  *(volatile $uint8_t  *)0x4002000F
//register FTFL_FPROT3  *(volatile $uint8_t  *)0x40020010      // Program Flash Protection Registers
//register FTFL_FPROT2  *(volatile $uint8_t  *)0x40020011      // Program Flash Protection Registers
//register FTFL_FPROT1  *(volatile $uint8_t  *)0x40020012      // Program Flash Protection Registers
//register FTFL_FPROT0  *(volatile $uint8_t  *)0x40020013      // Program Flash Protection Registers
//register FTFL_FEPROT  *(volatile $uint8_t  *)0x40020016      // EEPROM Protection Register
//register FTFL_FDPROT  *(volatile $uint8_t  *)0x40020017      // Data Flash Protection Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 30: Cyclic Redundancy Check (CRC)
register CRC {
  CRC   at 0x40032000 $uint32 // CRC Data register
  GPOLY at 0x40032004 $uint32 // CRC Polynomial register
  CTRL  at 0x40032008 $uint32 // CRC Control register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 31: Analog-to-Digital Converter (ADC)
register ADC0 {
  SC1A   at 0x4003B000
  SC1B   at 0x4003B004 $uint32  {// ADC status and control registers 1
    24,
    COCO, // Conversion complete flag
    AIEN, // Interrupt enable
    DIFF, // Differential mode enable
    ADCH [5] // Input channel select
  }
  
  CFG1 at 0x4003B008 $uint32 { // ADC configuration register 1
    24,
    ADLPC, // Low-power configuration
    ADIV [2], // Clock divide select, 0=direct, 1=div2, 2=div4, 3=div8
    ADLSMP, // Sample time configuration, 0=Short, 1=Long
    MODE [2], // Conversion mode, 0=8 bit, 1=12 bit, 2=10 bit, 3=16 bit
    ADICLK [2] // Input clock, 0=bus, 1=bus/2, 2=OSCERCLK, 3=async
  }
  
  CFG2  at 0x4003B00C $uint32 { // Configuration register 2
    27,
    MUXSEL,  // 0=a channels, 1=b channels
    ADACKEN,   // async clock enable
    ADHSC, // High speed configuration
    ADLSTS [2] // Sample time, 0=24 cycles, 1=12 cycles, 2=6 cycles, 3=2 cycles
  }
  
  RA    at 0x4003B010 $uint32 // ADC data result register
  
  RB    at 0x4003B014 $uint32 // ADC data result register
  
  CV1   at 0x4003B018 $uint32 // Compare value registers
  
  CV2   at 0x4003B01C $uint32 // Compare value registers
  
  SC2 at 0x4003B020 $uint32 { // Status and control register 2
    24,
    ADACT,  // Conversion active
    ADTRG,  // Conversion trigger select, 0=software, 1=hardware
    ACFE,   // Compare function enable
    ACFGT,  // Compare function greater than enable
    ACREN,  // Compare function range enable
    DMAEN,  // DMA enable
    REFSEL [2] // Voltage reference, 0=vcc/external, 1=1.2 volts
  }
  
  SC3 at 0x4003B024 $uint32 { // Status and control register 3
    24,
    CAL,   // Calibration, 1=begin, stays set while cal in progress
    CALF,  // Calibration failed flag
    2,
    ADCO,  // Continuous conversion enable
    AVGE,  // Hardware average enable
    AVGS [2] // avg select, 0=4 samples, 1=8 samples, 2=16 samples, 3=32 samples
  }
  
  OFS   at 0x4003B028 $uint32 // ADC offset correction register
  
  PG    at 0x4003B02C $uint32 // ADC plus-side gain register
  
  MG    at 0x4003B030 $uint32 // ADC minus-side gain register
  
  CLPD  at 0x4003B034 $uint32 // ADC plus-side general calibration value register
  
  CLPS  at 0x4003B038 $uint32 // ADC plus-side general calibration value register
  
  CLP4  at 0x4003B03C $uint32 // ADC plus-side general calibration value register
  
  CLP3  at 0x4003B040 $uint32 // ADC plus-side general calibration value register
  
  CLP2  at 0x4003B044 $uint32 // ADC plus-side general calibration value register
  
  CLP1  at 0x4003B048 $uint32 // ADC plus-side general calibration value register
  
  CLP0  at 0x4003B04C $uint32 // ADC plus-side general calibration value register
  
  CLMD   at 0x4003B054 $uint32 // ADC minus-side general calibration value register
  
  CLMS   at 0x4003B058 $uint32 // ADC minus-side general calibration value register
  
  CLM4   at 0x4003B05C $uint32 // ADC minus-side general calibration value register
  
  CLM3   at 0x4003B060 $uint32 // ADC minus-side general calibration value register
  
  CLM2   at 0x4003B064 $uint32 // ADC minus-side general calibration value register
  
  CLM1   at 0x4003B068 $uint32 // ADC minus-side general calibration value register
  
  CLM0   at 0x4003B06C $uint32 // ADC minus-side general calibration value register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

register ADC1 {
  SC1A   at 0x400BB000 $uint32 // ADC status and control registers 1
  
  SC1B   at 0x400BB004 $uint32 // ADC status and control registers 1
  
  CFG1   at 0x400BB008 $uint32 // ADC configuration register 1
  
  CFG2   at 0x400BB00C $uint32 // Configuration register 2
  
  RA     at 0x400BB010 $uint32 // ADC data result register
  
  RB     at 0x400BB014 $uint32 // ADC data result register
  
  CV1    at 0x400BB018 $uint32 // Compare value registers
  
  CV2    at 0x400BB01C $uint32 // Compare value registers
  
  SC2    at 0x400BB020 $uint32 // Status and control register 2
  
  SC3    at 0x400BB024 $uint32 // Status and control register 3
  
  OFS    at 0x400BB028 $uint32 // ADC offset correction register
  
  PG     at 0x400BB02C $uint32 // ADC plus-side gain register
  
  MG     at 0x400BB030 $uint32 // ADC minus-side gain register
  
  CLPD   at 0x400BB034 $uint32 // ADC plus-side general calibration value register
  
  CLPS   at 0x400BB038 $uint32 // ADC plus-side general calibration value register
  
  CLP4   at 0x400BB03C $uint32 // ADC plus-side general calibration value register
  
  CLP3   at 0x400BB040 $uint32 // ADC plus-side general calibration value register
  
  CLP2   at 0x400BB044 $uint32 // ADC plus-side general calibration value register
  
  CLP1   at 0x400BB048 $uint32 // ADC plus-side general calibration value register
  
  CLP0   at 0x400BB04C $uint32 // ADC plus-side general calibration value register
  
  PGA    at 0x400BB050 $uint32 // ADC Programmable Gain Amplifier
  
  CLMD   at 0x400BB054 $uint32 // ADC minus-side general calibration value register
  
  CLMS   at 0x400BB058 $uint32 // ADC minus-side general calibration value register
  
  CLM4   at 0x400BB05C $uint32 // ADC minus-side general calibration value register
  
  CLM3   at 0x400BB060 $uint32 // ADC minus-side general calibration value register
  
  CLM2   at 0x400BB064 $uint32 // ADC minus-side general calibration value register
  
  CLM1   at 0x400BB068 $uint32 // ADC minus-side general calibration value register
  
  CLM0   at 0x400BB06C $uint32 // ADC minus-side general calibration value register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

register DAC0 {
  DAT0L at 0x400CC000 $uint8 // DAC Data Low Register 
  
  DATH  at 0x400CC001 $uint8 // DAC Data High Register 
  
  DAT1L at 0x400CC002 $uint8 // DAC Data Low Register 
  
  DAT2L at 0x400CC004 $uint8 // DAC Data Low Register 
  
  DAT3L at 0x400CC006 $uint8 // DAC Data Low Register 
  
  DAT4L at 0x400CC008 $uint8 // DAC Data Low Register 
  
  DAT5L at 0x400CC00A $uint8 // DAC Data Low Register 
  
  DAT6L at 0x400CC00C $uint8 // DAC Data Low Register 
  
  DAT7L at 0x400CC00E $uint8 // DAC Data Low Register 
  
  DAT8L at 0x400CC010 $uint8 // DAC Data Low Register 
  
  DAT9L at 0x400CC012 $uint8 // DAC Data Low Register 
  
  DAT10L at 0x400CC014 $uint8 // DAC Data Low Register 
  
  DAT11L at 0x400CC016 $uint8 // DAC Data Low Register 
  
  DAT12L at 0x400CC018 $uint8 // DAC Data Low Register 
  
  DAT13L at 0x400CC01A $uint8 // DAC Data Low Register 
  
  DAT14L at 0x400CC01C $uint8 // DAC Data Low Register 
  
  DAT15L at 0x400CC01E $uint8 // DAC Data Low Register 
  
  SR     at 0x400CC020 $uint8 // DAC Status Register 
  
  C0     at 0x400CC021 $uint8 { // DAC Control Register 
    DACEN,    // DAC Enable
    DACRFS,   // DAC Reference Select
    DACTRGSEL,// DAC Trigger Select
    DACSWTRG, // DAC Software Trigger
    LPEN,     // DAC Low Power Control
    DACBWIEN, // DAC Buffer Watermark Interrupt Enable
    DACBTIEN, // DAC Buffer Read Pointer Top Flag Interrupt Enable
    DACBBIEN  // DAC Buffer Read Pointer Bottom Flag Interrupt Enable
  }
  
  C1  at 0x400CC022 $uint8 { // DAC Control Register 1 
    DMAEN,    // DMA Enable Select
    2,
    DACBFWM [2],  // DAC Buffer Watermark Select
    DACBFMD [2],  // DAC Buffer Work Mode Select
    DACBFEN // DAC Buffer Enable
  }
  
  C2  at 0x400CC023 $uint8 // DAC Control Register 2 
}
//register DAC_C2_DACBFRP(n)  (((n) & 15) << 4)  // DAC Buffer Read Pointer
//register DAC_C2_DACBFUP(n)  (((n) & 15) << 0)  // DAC Buffer Upper Limit
//
//
////register MCG_C2_RANGE0(n)  ($uint8_t)(((n) & 0x03) << 4) // Frequency Range Select, Selects the frequency range for the crystal oscillator
////register MCG_C2_LOCRE0   ($uint8_t)0x80   // Loss of Clock Reset Enable, Determines whether an interrupt or a reset request is made following a loss of OSC0 

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Chapter 32: Comparator (CMP)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

register CMP0 {
  CR0   at 0x40073000 $uint8 // CMP Control Register 0
  CR1   at 0x40073001 $uint8 // CMP Control Register 1
  FPR   at 0x40073002 $uint8 // CMP Filter Period Register
  SCR   at 0x40073003 $uint8 // CMP Status and Control Register
  DACCR at 0x40073004 $uint8 // DAC Control Register
  MUXCR at 0x40073005 $uint8 // MUX Control Register
}

register CMP1 {
  CR0   at 0x40073008 $uint8 // CMP Control Register 0
  CR1   at 0x40073009 $uint8 // CMP Control Register 1
  FPR   at 0x4007300A $uint8 // CMP Filter Period Register
  SCR   at 0x4007300B $uint8 // CMP Status and Control Register
  DACCR at 0x4007300C $uint8 // DAC Control Register
  MUXCR at 0x4007300D $uint8 // MUX Control Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Chapter 33: Voltage Reference (VREFV1)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

register VREF {
  TRM  at 0x40074000 $uint8 // VREF Trim Register
  SC   at 0x40074001 $uint8 // VREF Status and Control Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Chapter 34: Programmable Delay Block (PDB)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//register PDB0_SC    0x40036000 // Status and Control Register
//register PDB_SC_LDMOD(n)   (((n) & 3) << 18) // Load Mode Select
//register PDB_SC_PDBEIE   0x00020000  // Sequence Error Interrupt Enable
//register PDB_SC_SWTRIG   0x00010000  // Software Trigger
//register PDB_SC_DMAEN   0x00008000  // DMA Enable
//register PDB_SC_PRESCALER(n)  (((n) & 7) << 12) // Prescaler Divider Select
//register PDB_SC_TRGSEL(n)  (((n) & 15) << 8) // Trigger Input Source Select
//register PDB_SC_PDBEN   0x00000080  // PDB Enable
//register PDB_SC_PDBIF   0x00000040  // PDB Interrupt Flag
//register PDB_SC_PDBIE   0x00000020  // PDB Interrupt Enable.
//register PDB_SC_MULT(n)   (((n) & 3) << 2) // Multiplication Factor
//register PDB_SC_CONT   0x00000002  // Continuous Mode Enable
//register PDB_SC_LDOK   0x00000001  // Load OK
//register PDB0_MOD   0x40036004 // Modulus Register
//register PDB0_CNT   0x40036008 // Counter Register
//register PDB0_IDLY   0x4003600C // Interrupt Delay Register
//register PDB0_CH0C1   0x40036010 // Channel n Control Register 1
//register PDB0_CH0S   0x40036014 // Channel n Status Register
//register PDB0_CH0DLY0   0x40036018 // Channel n Delay 0 Register
//register PDB0_CH0DLY1   0x4003601C // Channel n Delay 1 Register
//register PDB0_POEN   0x40036190 // Pulse-Out n Enable Register
//register PDB0_PO0DLY   0x40036194 // Pulse-Out n Delay Register
//register PDB0_PO1DLY   0x40036198 // Pulse-Out n Delay Register
//
//// Chapter 35: FlexTimer Module (FTM)
//register FTM0_SC    0x40038000 // Status And Control
//register FTM_SC_TOF   0x80    // Timer Overflow Flag
//register FTM_SC_TOIE   0x40    // Timer Overflow Interrupt Enable
//register FTM_SC_CPWMS   0x20    // Center-Aligned PWM Select
//register FTM_SC_CLKS(n)   (((n) & 3) << 3)  // Clock Source Selection
//register FTM_SC_PS(n)   (((n) & 7) << 0)  // Prescale Factor Selection
//register FTM0_CNT   0x40038004 // Counter
//register FTM0_MOD   0x40038008 // Modulo
//register FTM0_C0SC   0x4003800C // Channel 0 Status And Control
//register FTM0_C0V   0x40038010 // Channel 0 Value
//register FTM0_C1SC   0x40038014 // Channel 1 Status And Control
//register FTM0_C1V   0x40038018 // Channel 1 Value
//register FTM0_C2SC   0x4003801C // Channel 2 Status And Control
//register FTM0_C2V   0x40038020 // Channel 2 Value
//register FTM0_C3SC   0x40038024 // Channel 3 Status And Control
//register FTM0_C3V   0x40038028 // Channel 3 Value
//register FTM0_C4SC   0x4003802C // Channel 4 Status And Control
//register FTM0_C4V   0x40038030 // Channel 4 Value
//register FTM0_C5SC   0x40038034 // Channel 5 Status And Control
//register FTM0_C5V   0x40038038 // Channel 5 Value
//register FTM0_C6SC   0x4003803C // Channel 6 Status And Control
//register FTM0_C6V   0x40038040 // Channel 6 Value
//register FTM0_C7SC   0x40038044 // Channel 7 Status And Control
//register FTM0_C7V   0x40038048 // Channel 7 Value
//register FTM0_CNTIN   0x4003804C // Counter Initial Value
//register FTM0_STATUS   0x40038050 // Capture And Compare Status
//register FTM0_MODE   0x40038054 // Features Mode Selection
//register FTM_MODE_FAULTIE  0x80    // Fault Interrupt Enable
//register FTM_MODE_FAULTM(n)  (((n) & 3) << 5)  // Fault Control Mode
//register FTM_MODE_CAPTEST  0x10    // Capture Test Mode Enable
//register FTM_MODE_PWMSYNC  0x08    // PWM Synchronization Mode
//register FTM_MODE_WPDIS   0x04    // Write Protection Disable
//register FTM_MODE_INIT   0x02    // Initialize The Channels Output
//register FTM_MODE_FTMEN   0x01    // FTM Enable
//register FTM0_SYNC   0x40038058 // Synchronization
//register FTM_SYNC_SWSYNC   0x80    // 
//register FTM_SYNC_TRIG2   0x40    // 
//register FTM_SYNC_TRIG1   0x20    // 
//register FTM_SYNC_TRIG0   0x10    // 
//register FTM_SYNC_SYNCHOM  0x08    // 
//register FTM_SYNC_REINIT   0x04    // 
//register FTM_SYNC_CNTMAX   0x02    // 
//register FTM_SYNC_CNTMIN   0x01    // 
//register FTM0_OUTINIT   0x4003805C // Initial State For Channels Output
//register FTM0_OUTMASK   0x40038060 // Output Mask
//register FTM0_COMBINE   0x40038064 // Function For Linked Channels
//register FTM0_DEADTIME   0x40038068 // Deadtime Insertion Control
//register FTM0_EXTTRIG   0x4003806C // FTM External Trigger
//register FTM0_POL   0x40038070 // Channels Polarity
//register FTM0_FMS   0x40038074 // Fault Mode Status
//register FTM0_FILTER   0x40038078 // Input Capture Filter Control
//register FTM0_FLTCTRL   0x4003807C // Fault Control
//register FTM0_QDCTRL   0x40038080 // Quadrature Decoder Control And Status
//register FTM0_CONF   0x40038084 // Configuration
//register FTM0_FLTPOL   0x40038088 // FTM Fault Input Polarity
//register FTM0_SYNCONF   0x4003808C // Synchronization Configuration
//register FTM0_INVCTRL   0x40038090 // FTM Inverting Control
//register FTM0_SWOCTRL   0x40038094 // FTM Software Output Control
//register FTM0_PWMLOAD   0x40038098 // FTM PWM Load
//register FTM1_SC    0x40039000 // Status And Control
//register FTM1_CNT   0x40039004 // Counter
//register FTM1_MOD   0x40039008 // Modulo
//register FTM1_C0SC   0x4003900C // Channel 0 Status And Control
//register FTM1_C0V   0x40039010 // Channel 0 Value
//register FTM1_C1SC   0x40039014 // Channel 1 Status And Control
//register FTM1_C1V   0x40039018 // Channel 1 Value
//register FTM1_CNTIN   0x4003904C // Counter Initial Value
//register FTM1_STATUS   0x40039050 // Capture And Compare Status
//register FTM1_MODE   0x40039054 // Features Mode Selection
//register FTM1_SYNC   0x40039058 // Synchronization
//register FTM1_OUTINIT   0x4003905C // Initial State For Channels Output
//register FTM1_OUTMASK   0x40039060 // Output Mask
//register FTM1_COMBINE   0x40039064 // Function For Linked Channels
//register FTM1_DEADTIME   0x40039068 // Deadtime Insertion Control
//register FTM1_EXTTRIG   0x4003906C // FTM External Trigger
//register FTM1_POL   0x40039070 // Channels Polarity
//register FTM1_FMS   0x40039074 // Fault Mode Status
//register FTM1_FILTER   0x40039078 // Input Capture Filter Control
//register FTM1_FLTCTRL   0x4003907C // Fault Control
//register FTM1_QDCTRL   0x40039080 // Quadrature Decoder Control And Status
//register FTM1_CONF   0x40039084 // Configuration
//register FTM1_FLTPOL   0x40039088 // FTM Fault Input Polarity
//register FTM1_SYNCONF   0x4003908C // Synchronization Configuration
//register FTM1_INVCTRL   0x40039090 // FTM Inverting Control
//register FTM1_SWOCTRL   0x40039094 // FTM Software Output Control
//register FTM1_PWMLOAD   0x40039098 // FTM PWM Load
//register FTM2_SC    0x400B8000 // Status And Control
//register FTM2_CNT   0x400B8004 // Counter
//register FTM2_MOD   0x400B8008 // Modulo
//register FTM2_C0SC   0x400B800C // Channel 0 Status And Control
//register FTM2_C0V   0x400B8010 // Channel 0 Value
//register FTM2_C1SC   0x400B8014 // Channel 1 Status And Control
//register FTM2_C1V   0x400B8018 // Channel 1 Value
//register FTM2_CNTIN   0x400B804C // Counter Initial Value
//register FTM2_STATUS   0x400B8050 // Capture And Compare Status
//register FTM2_MODE   0x400B8054 // Features Mode Selection
//register FTM2_SYNC   0x400B8058 // Synchronization
//register FTM2_OUTINIT   0x400B805C // Initial State For Channels Output
//register FTM2_OUTMASK   0x400B8060 // Output Mask
//register FTM2_COMBINE   0x400B8064 // Function For Linked Channels
//register FTM2_DEADTIME   0x400B8068 // Deadtime Insertion Control
//register FTM2_EXTTRIG   0x400B806C // FTM External Trigger
//register FTM2_POL   0x400B8070 // Channels Polarity
//register FTM2_FMS   0x400B8074 // Fault Mode Status
//register FTM2_FILTER   0x400B8078 // Input Capture Filter Control
//register FTM2_FLTCTRL   0x400B807C // Fault Control
//register FTM2_QDCTRL   0x400B8080 // Quadrature Decoder Control And Status
//register FTM2_CONF   0x400B8084 // Configuration
//register FTM2_FLTPOL   0x400B8088 // FTM Fault Input Polarity
//register FTM2_SYNCONF   0x400B808C // Synchronization Configuration
//register FTM2_INVCTRL   0x400B8090 // FTM Inverting Control
//register FTM2_SWOCTRL   0x400B8094 // FTM Software Output Control
//register FTM2_PWMLOAD   0x400B8098 // FTM PWM Load


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Chapter 43: Timer / PWM Module (TPM)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

register TPM1 {
  SC      at 0x400C_9000 $uint32 {23, DMA, TOF, TOIE, CPWMS, CMOD [2], PS[3]}
  CNT     at 0x400C_9004 $uint32 {16, COUNT [16]}
  MOD     at 0x400C_9008 $uint32 {16, MOD [16]}
  C0SC    at 0x400C_900C $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}
  C0V     at 0x400C_9010 $uint32 {16, VAL [16]}
  C1SC    at 0x400C_9014 $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}
  C1V     at 0x400C_9018 $uint32 {16, VAL [16]}
  STATUS  at 0x400C_9050 $uint32 {23, TOF, 6, CH1F, CH0F}
  COMBINE at 0x400C_9064 $uint32 {30, COMSWAP0, COMBINE0}
  POL     at 0x400C_9070 $uint32 {30, POL1, POL0}
  FILTER  at 0x400C_9078 $uint32 {24, CH1FVAL [4], CH0FVAL [4]}
  QDCTRL  at 0x400C_9080 $uint32 {28, QUADMODE, QUADIR, TOFDIR, QUADEN}
  CONF    at 0x400C_9084 $uint32 {
    4, TRGSEL [4], TRGSRC, TRGPOL, 2, CPOT, CROT, CSOO,
    CSOT, 6, GTBEEN, GTBSYNC, DBGMODE [2], DOZEEN, 5
  }
}

//······················································································································

register TPM2 {
  SC      at 0x400C_A000 $uint32 {23, DMA, TOF, TOIE, CPWMS, CMOD [2], PS[3]}
  CNT     at 0x400C_A004 $uint32 {16, COUNT [16]}
  MOD     at 0x400C_A008 $uint32 {16, MOD [16]}
  C0SC    at 0x400C_A00C $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}
  C0V     at 0x400C_A010 $uint32 {16, VAL [16]}
  C1SC    at 0x400C_A014 $uint32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}
  C1V     at 0x400C_A018 $uint32 {16, VAL [16]}
  STATUS  at 0x400C_A050 $uint32 {23, TOF, 6, CH1F, CH0F}
  COMBINE at 0x400C_A064 $uint32 {30, COMSWAP0, COMBINE0}
  POL     at 0x400C_A070 $uint32 {30, POL1, POL0}
  FILTER  at 0x400C_A078 $uint32 {24, CH1FVAL [4], CH0FVAL [4]}
  QDCTRL  at 0x400C_A080 $uint32 {28, QUADMODE, QUADIR, TOFDIR, QUADEN}
  CONF    at 0x400C_A084 $uint32 {
    4, TRGSEL [4], TRGSRC, TRGPOL, 2, CPOT, CROT, CSOO,
    CSOT, 6, GTBEEN, GTBSYNC, DBGMODE [2], DOZEEN, 5
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Chapter 46: Periodic Interrupt Timer (PIT)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let PIT_COUNT = 4

register PIT {
  MCR at 0x4003_7000 $uint32 {
    30, MDIS, FRZ
  }
  
  // PIT Lifetime Timer Registers
  LTMR64H @ro at 0x4003_70E0 $uint32
  LTMR64L @ro at 0x4003_70E4 $uint32
    
  // Timer Load Value Register
  LDVAL [PIT_COUNT] at 0x4003_7100 : 16 $uint32
  
  // Current Timer Value Register
  LCVAL [PIT_COUNT] at 0x4003_7104 : 16 $uint32
  
  // Timer Control Register
  TCTRL [PIT_COUNT] at 0x4003_7108 : 16 $uint32 {
    29, CHN, TIE, TEN
  }
  
  // Timer Flag Register
  TFLG [PIT_COUNT] at 0x4003_710C : 16 $uint32 {
    31, TIF
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//// Chapter 37: Low-Power Timer (LPTMR)
//register LPTMR0_CSR   0x40040000 // Low Power Timer Control Status Register
//register LPTMR0_PSR   0x40040004 // Low Power Timer Prescale Register
//register LPTMR0_CMR   0x40040008 // Low Power Timer Compare Register
//register LPTMR0_CNR   0x4004000C // Low Power Timer Counter Register
//
//// Chapter 38: Carrier Modulator Transmitter (CMT)
//register CMT_CGH1  *(volatile $uint8_t  *)0x40062000 // CMT Carrier Generator High Data Register 1
//register CMT_CGL1  *(volatile $uint8_t  *)0x40062001 // CMT Carrier Generator Low Data Register 1
//register CMT_CGH2  *(volatile $uint8_t  *)0x40062002 // CMT Carrier Generator High Data Register 2
//register CMT_CGL2  *(volatile $uint8_t  *)0x40062003 // CMT Carrier Generator Low Data Register 2
//register CMT_OC   *(volatile $uint8_t  *)0x40062004 // CMT Output Control Register
//register CMT_MSC   *(volatile $uint8_t  *)0x40062005 // CMT Modulator Status and Control Register
//register CMT_CMD1  *(volatile $uint8_t  *)0x40062006 // CMT Modulator Data Register Mark High
//register CMT_CMD2  *(volatile $uint8_t  *)0x40062007 // CMT Modulator Data Register Mark Low
//register CMT_CMD3  *(volatile $uint8_t  *)0x40062008 // CMT Modulator Data Register Space High
//register CMT_CMD4  *(volatile $uint8_t  *)0x40062009 // CMT Modulator Data Register Space Low
//register CMT_PPS   *(volatile $uint8_t  *)0x4006200A // CMT Primary Prescaler Register
//register CMT_DMA   *(volatile $uint8_t  *)0x4006200B // CMT Direct Memory Access Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Chapter 49: Real Time Clock (RTC)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

register RTC {
  TSR at  0x4003D000 $uint32 // RTC Time Seconds Register
  TPR at  0x4003D004 $uint32 // RTC Time Prescaler Register
  TAR at  0x4003D008 $uint32 // RTC Time Alarm Register
  TCR at  0x4003D00C $uint32 // RTC Time Compensation Register
  //register RTC_TCR_CIC(n)   (((n) & 255) << 24)  // Compensation Interval Counter
  //register RTC_TCR_TCV(n)   (((n) & 255) << 16)  // Time Compensation Value
  //register RTC_TCR_CIR(n)   (((n) & 255) << 8)  // Compensation Interval Register
  //register RTC_TCR_TCR(n)   (((n) & 255) << 0)  // Time Compensation Register
  
  CR at  0x4003_D010 $uint32 {// RTC Control Register
    18, SC2P, SC4P, SC8P, SC16P, CKLO, OSCE, 4, UM, SUP, WPE, SWR
  }
   
  SR at  0x4003D014 $uint32 { // RTC Status Register
    27,
    TCE,
    MOF, 
    TAF, 
    TOF,
    TIF
  }
  
  LR  at 0x4003D018 $uint32 // RTC Lock Register
  IER at 0x4003D01C $uint32 // RTC Interrupt Enable Register
  WAR at 0x4003D800 $uint32 // RTC Write Access Register
  RAR at 0x4003D804 $uint32 // RTC Read Access Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//// Chapter 40: Universal Serial Bus OTG Controller (USBOTG)
//register USB0_PERID  *(const    $uint8_t  *)0x40072000 // Peripheral ID register
//register USB0_IDCOMP  *(const    $uint8_t  *)0x40072004 // Peripheral ID Complement register
//register USB0_REV  *(const    $uint8_t  *)0x40072008 // Peripheral Revision register
//register USB0_ADDINFO  *(volatile $uint8_t  *)0x4007200C // Peripheral Additional Info register
//register USB0_OTGIST *(volatile $uint8_t  *)0x40072010 // OTG Interrupt Status register
//register USB_OTGISTAT_IDCHG  ($uint8_t)0x80   //
//register USB_OTGISTAT_ONEMSEC  ($uint8_t)0x40   //
//register USB_OTGISTAT_LINE_STATE_CHG ($uint8_t)0x20   //
//register USB_OTGISTAT_SESSVLDCHG  ($uint8_t)0x08   //
//register USB_OTGISTAT_B_SESS_CHG  ($uint8_t)0x04   //
//register USB_OTGISTAT_AVBUSCHG  ($uint8_t)0x01   //
//register USB0_OTGICR  *(volatile $uint8_t  *)0x40072014 // OTG Interrupt Control Register
//register USB_OTGICR_IDEN   ($uint8_t)0x80   // 
//register USB_OTGICR_ONEMSECEN  ($uint8_t)0x40   // 
//register USB_OTGICR_LINESTATEEN  ($uint8_t)0x20   // 
//register USB_OTGICR_SESSVLDEN  ($uint8_t)0x08   // 
//register USB_OTGICR_BSESSEN  ($uint8_t)0x04   // 
//register USB_OTGICR_AVBUSEN  ($uint8_t)0x01   // 
//register USB0_OTGST *(volatile $uint8_t  *)0x40072018 // OTG Status register
//register USB_OTGSTAT_ID   ($uint8_t)0x80   // 
//register USB_OTGSTAT_ONEMSECEN  ($uint8_t)0x40   // 
//register USB_OTGSTAT_LINESTATESTABLE ($uint8_t)0x20   // 
//register USB_OTGSTAT_SESS_VLD  ($uint8_t)0x08   // 
//register USB_OTGSTAT_BSESSEND  ($uint8_t)0x04   // 
//register USB_OTGSTAT_AVBUSVLD  ($uint8_t)0x01   // 
//register USB0_OTGCTL  *(volatile $uint8_t  *)0x4007201C // OTG Control Register
//register USB_OTGCTL_DPHIGH  ($uint8_t)0x80   // 
//register USB_OTGCTL_DPLOW  ($uint8_t)0x20   // 
//register USB_OTGCTL_DMLOW  ($uint8_t)0x10   // 
//register USB_OTGCTL_OTGEN  ($uint8_t)0x04   // 
//register USB0_IST *(volatile $uint8_t  *)0x40072080 // Interrupt Status Register
//register USB_ISTAT_STALL   ($uint8_t)0x80   // 
//register USB_ISTAT_ATTACH  ($uint8_t)0x40   // 
//register USB_ISTAT_RESUME  ($uint8_t)0x20   // 
//register USB_ISTAT_SLEEP   ($uint8_t)0x10   // 
//register USB_ISTAT_TOKDNE  ($uint8_t)0x08   // 
//register USB_ISTAT_SOFTOK  ($uint8_t)0x04   // 
//register USB_ISTAT_ERROR   ($uint8_t)0x02   // 
//register USB_ISTAT_USBRST  ($uint8_t)0x01   // 
//register USB0_INTEN  *(volatile $uint8_t  *)0x40072084 // Interrupt Enable Register
//register USB_INTEN_STALLEN  ($uint8_t)0x80   // 
//register USB_INTEN_ATTACHEN  ($uint8_t)0x40   // 
//register USB_INTEN_RESUMEEN  ($uint8_t)0x20   // 
//register USB_INTEN_SLEEPEN  ($uint8_t)0x10   // 
//register USB_INTEN_TOKDNEEN  ($uint8_t)0x08   // 
//register USB_INTEN_SOFTOKEN  ($uint8_t)0x04   // 
//register USB_INTEN_ERROREN  ($uint8_t)0x02   // 
//register USB_INTEN_USBRSTEN  ($uint8_t)0x01   // 
//register USB0_ERRST *(volatile $uint8_t  *)0x40072088 // Error Interrupt Status Register
//register USB_ERRSTAT_BTSERR  ($uint8_t)0x80   // 
//register USB_ERRSTAT_DMAERR  ($uint8_t)0x20   // 
//register USB_ERRSTAT_BTOERR  ($uint8_t)0x10   // 
//register USB_ERRSTAT_DFN8  ($uint8_t)0x08   // 
//register USB_ERRSTAT_CRC16  ($uint8_t)0x04   // 
//register USB_ERRSTAT_CRC5EOF  ($uint8_t)0x02   // 
//register USB_ERRSTAT_PIDERR  ($uint8_t)0x01   // 
//register USB0_ERREN  *(volatile $uint8_t  *)0x4007208C // Error Interrupt Enable Register
//register USB_ERREN_BTSERREN  ($uint8_t)0x80   // 
//register USB_ERREN_DMAERREN  ($uint8_t)0x20   // 
//register USB_ERREN_BTOERREN  ($uint8_t)0x10   // 
//register USB_ERREN_DFN8EN  ($uint8_t)0x08   // 
//register USB_ERREN_CRC16EN  ($uint8_t)0x04   // 
//register USB_ERREN_CRC5EOFEN  ($uint8_t)0x02   // 
//register USB_ERREN_PIDERREN  ($uint8_t)0x01   // 
//register USB0_ST *(volatile $uint8_t  *)0x40072090 // Status Register
//register USB_STAT_TX   ($uint8_t)0x08   // 
//register USB_STAT_ODD   ($uint8_t)0x04   // 
//register USB_STAT_ENDP(n)  ($uint8_t)((n) >> 4)  // 
//register USB0_CTL  *(volatile $uint8_t  *)0x40072094 // Control Register
//register USB_CTL_JSTATE   ($uint8_t)0x80   // 
//register USB_CTL_SE0   ($uint8_t)0x40   // 
//register USB_CTL_TXSUSPENDTOKENBUSY ($uint8_t)0x20   // 
//register USB_CTL_RESET   ($uint8_t)0x10   // 
//register USB_CTL_HOSTMODEEN  ($uint8_t)0x08   // 
//register USB_CTL_RESUME   ($uint8_t)0x04   // 
//register USB_CTL_ODDRST   ($uint8_t)0x02   // 
//register USB_CTL_USBENSOFEN  ($uint8_t)0x01   // 
//register USB0_ADDR  *(volatile $uint8_t  *)0x40072098 // Address Register
//register USB0_BDTPAGE1  *(volatile $uint8_t  *)0x4007209C // BDT Page Register 1
//register USB0_FRMNUML  *(volatile $uint8_t  *)0x400720A0 // Frame Number Register Low
//register USB0_FRMNUMH  *(volatile $uint8_t  *)0x400720A4 // Frame Number Register High
//register USB0_TOKEN  *(volatile $uint8_t  *)0x400720A8 // Token Register
//register USB0_SOFTHLD  *(volatile $uint8_t  *)0x400720AC // SOF Threshold Register
//register USB0_BDTPAGE2  *(volatile $uint8_t  *)0x400720B0 // BDT Page Register 2
//register USB0_BDTPAGE3  *(volatile $uint8_t  *)0x400720B4 // BDT Page Register 3
//register USB0_ENDPT0  *(volatile $uint8_t  *)0x400720C0 // Endpoint Control Register
//register USB_ENDPT_HOSTWOHUB  ($uint8_t)0x80   // host only, enable low speed
//register USB_ENDPT_RETRYDIS  ($uint8_t)0x40   // host only, set to disable NAK retry
//register USB_ENDPT_EPCTLDIS  ($uint8_t)0x10   // 0=control, 1=bulk, interrupt, isync
//register USB_ENDPT_EPRXEN  ($uint8_t)0x08   // enables the endpoint for RX transfers.
//register USB_ENDPT_EPTXEN  ($uint8_t)0x04   // enables the endpoint for TX transfers.
//register USB_ENDPT_EPSTALL  ($uint8_t)0x02   // set to stall endpoint
//register USB_ENDPT_EPHSHK  ($uint8_t)0x01   // enable handshaking during a transaction, generally set unless Isochronous
//register USB0_ENDPT1  *(volatile $uint8_t  *)0x400720C4 // Endpoint Control Register
//register USB0_ENDPT2  *(volatile $uint8_t  *)0x400720C8 // Endpoint Control Register
//register USB0_ENDPT3  *(volatile $uint8_t  *)0x400720CC // Endpoint Control Register
//register USB0_ENDPT4  *(volatile $uint8_t  *)0x400720D0 // Endpoint Control Register
//register USB0_ENDPT5  *(volatile $uint8_t  *)0x400720D4 // Endpoint Control Register
//register USB0_ENDPT6  *(volatile $uint8_t  *)0x400720D8 // Endpoint Control Register
//register USB0_ENDPT7  *(volatile $uint8_t  *)0x400720DC // Endpoint Control Register
//register USB0_ENDPT8  *(volatile $uint8_t  *)0x400720E0 // Endpoint Control Register
//register USB0_ENDPT9  *(volatile $uint8_t  *)0x400720E4 // Endpoint Control Register
//register USB0_ENDPT10  *(volatile $uint8_t  *)0x400720E8 // Endpoint Control Register
//register USB0_ENDPT11  *(volatile $uint8_t  *)0x400720EC // Endpoint Control Register
//register USB0_ENDPT12  *(volatile $uint8_t  *)0x400720F0 // Endpoint Control Register
//register USB0_ENDPT13  *(volatile $uint8_t  *)0x400720F4 // Endpoint Control Register
//register USB0_ENDPT14  *(volatile $uint8_t  *)0x400720F8 // Endpoint Control Register
//register USB0_ENDPT15  *(volatile $uint8_t  *)0x400720FC // Endpoint Control Register
//register USB0_USBCTRL  *(volatile $uint8_t  *)0x40072100 // USB Control Register
//register USB_USBCTRL_SUSP  ($uint8_t)0x80   // Places the USB transceiver into the suspend state.
//register USB_USBCTRL_PDE   ($uint8_t)0x40   // Enables the weak pulldowns on the USB transceiver.
//register USB0_OBSERVE  *(volatile $uint8_t  *)0x40072104 // USB OTG Observe Register
//register USB_OBSERVE_DPPU  ($uint8_t)0x80   // 
//register USB_OBSERVE_DPPD  ($uint8_t)0x40   // 
//register USB_OBSERVE_DMPD  ($uint8_t)0x10   // 
//register USB0_CONTROL  *(volatile $uint8_t  *)0x40072108 // USB OTG Control Register
//register USB_CONTROL_DPPULLUPNONOTG ($uint8_t)0x10   //  Provides control of the DP PULLUP in the USB OTG module, if USB is configured in non-OTG device mode.
//register USB0_USBTRC0  *(volatile $uint8_t  *)0x4007210C // USB Transceiver Control Register 0
//register USB_USBTRC_USBRESET  ($uint8_t)0x80   //
//register USB_USBTRC_USBRESMEN  ($uint8_t)0x20   //
//register USB_USBTRC_SYNC_DET  ($uint8_t)0x02   //
//register USB_USBTRC_USB_RESUME_INT ($uint8_t)0x01   //
//register USB0_USBFRMADJUST *(volatile $uint8_t  *)0x40072114 // Frame Adjust Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//// Chapter 41: USB Device Charger Detection Module (USBDCD)
//register USBDCD_CONTROL   0x40035000 // Control register
//register USBDCD_CLOCK   0x40035004 // Clock register
//register USBDCD_STATUS   0x40035008 // Status register
//register USBDCD_TIMER0   0x40035010 // TIMER0 register
//register USBDCD_TIMER1   0x40035014 // TIMER1 register
//register USBDCD_TIMER2   0x40035018 // TIMER2 register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//// Chapter 43: SPI (DSPI)
//register SPI0_MCR   0x4002C000 // DSPI Module Configuration Register
//register SPI_MCR_MSTR    0x80000000  // Master/Slave Mode Select
//register SPI_MCR_CONT_SCKE   0x40000000  // 
//register SPI_MCR_DCONF(n)  (((n) & 3) << 28)  // 
//register SPI_MCR_FRZ    0x08000000  // 
//register SPI_MCR_MTFE    0x04000000  // 
//register SPI_MCR_ROOE    0x01000000  // 
//register SPI_MCR_PCSIS(n)  (((n) & 0x1F) << 16)  //
//register SPI_MCR_DOZE    0x00008000  // 
//register SPI_MCR_MDIS    0x00004000  // 
//register SPI_MCR_DIS_TXF    0x00002000  // 
//register SPI_MCR_DIS_RXF    0x00001000  // 
//register SPI_MCR_CLR_TXF    0x00000800  // 
//register SPI_MCR_CLR_RXF    0x00000400  // 
//register SPI_MCR_SMPL_PT(n)  (((n) & 3) << 8)  //
//register SPI_MCR_HALT    0x00000001  // 
//register SPI0_TCR   0x4002C008 // DSPI Transfer Count Register
//register SPI0_CTAR0   0x4002C00C // DSPI Clock and Transfer Attributes Register, In Master Mode
//register SPI_CTAR_DBR    0x80000000  // Double Baud Rate
//register SPI_CTAR_FMSZ(n)  (((n) & 15) << 27)  // Frame Size (+1)
//register SPI_CTAR_CPOL    0x04000000  // Clock Polarity
//register SPI_CTAR_CPHA    0x02000000  // Clock Phase
//register SPI_CTAR_LSBFE    0x01000000  // LSB First
//register SPI_CTAR_PCSSCK(n)  (((n) & 3) << 22)  // PCS to SCK Delay Prescaler
//register SPI_CTAR_PASC(n)  (((n) & 3) << 20)  // After SCK Delay Prescaler
//register SPI_CTAR_PDT(n)   (((n) & 3) << 18)  // Delay after Transfer Prescaler
//register SPI_CTAR_PBR(n)   (((n) & 3) << 16)  // Baud Rate Prescaler
//register SPI_CTAR_CSSCK(n)  (((n) & 15) << 12)  // PCS to SCK Delay Scaler
//register SPI_CTAR_ASC(n)   (((n) & 15) << 8)  // After SCK Delay Scaler
//register SPI_CTAR_DT(n)   (((n) & 15) << 4)  // Delay After Transfer Scaler
//register SPI_CTAR_BR(n)   (((n) & 15) << 0)  // Baud Rate Scaler
//register SPI0_CTAR0_SLAVE  0x4002C00C // DSPI Clock and Transfer Attributes Register, In Slave Mode
//register SPI0_CTAR1   0x4002C010 // DSPI Clock and Transfer Attributes Register, In Master Mode
//register SPI0_SR    0x4002C02C // DSPI Status Register
//register SPI_SR_TCF    0x80000000  // Transfer Complete Flag
//register SPI_SR_TXRXS    0x40000000  // TX and RX Status
//register SPI_SR_EOQF    0x10000000  // End of Queue Flag
//register SPI_SR_TFUF    0x08000000  // Transmit FIFO Underflow Flag
//register SPI_SR_TFFF    0x02000000  // Transmit FIFO Fill Flag
//register SPI_SR_RFOF    0x00080000  // Receive FIFO Overflow Flag
//register SPI_SR_RFDF    0x00020000  // Receive FIFO Drain Flag
//register SPI0_RSER   0x4002C030 // DSPI DMA/Interrupt Request Select and Enable Register
//register SPI_RSER_TCF_RE    0x80000000  // Transmission Complete Request Enable
//register SPI_RSER_EOQF_RE   0x10000000  // DSPI Finished Request Request Enable
//register SPI_RSER_TFUF_RE   0x08000000  // Transmit FIFO Underflow Request Enable
//register SPI_RSER_TFFF_RE   0x02000000  // Transmit FIFO Fill Request Enable
//register SPI_RSER_TFFF_DIRS   0x01000000  // Transmit FIFO FIll Dma or Interrupt Request Select
//register SPI_RSER_RFOF_RE   0x00080000  // Receive FIFO Overflow Request Enable
//register SPI_RSER_RFDF_RE   0x00020000  // Receive FIFO Drain Request Enable
//register SPI_RSER_RFDF_DIRS   0x00010000  // Receive FIFO Drain DMA or Interrupt Request Select
//register SPI0_PUSHR   0x4002C034 // DSPI PUSH TX FIFO Register In Master Mode
//register SPI_PUSHR_CONT    0x80000000  // 
//register SPI_PUSHR_CTAS(n)  (((n) & 7) << 28)  // 
//register SPI_PUSHR_EOQ    0x08000000  // 
//register SPI_PUSHR_CTCNT    0x04000000  // 
//register SPI_PUSHR_PCS(n)  (((n) & 31) << 16)  //
//register SPI0_PUSHR_SLAVE  0x4002C034 // DSPI PUSH TX FIFO Register In Slave Mode
//register SPI0_POPR   0x4002C038 // DSPI POP RX FIFO Register
//register SPI0_TXFR0   0x4002C03C // DSPI Transmit FIFO Registers
//register SPI0_TXFR1   0x4002C040 // DSPI Transmit FIFO Registers
//register SPI0_TXFR2   0x4002C044 // DSPI Transmit FIFO Registers
//register SPI0_TXFR3   0x4002C048 // DSPI Transmit FIFO Registers
//register SPI0_RXFR0   0x4002C07C // DSPI Receive FIFO Registers
//register SPI0_RXFR1   0x4002C080 // DSPI Receive FIFO Registers
//register SPI0_RXFR2   0x4002C084 // DSPI Receive FIFO Registers
//register SPI0_RXFR3   0x4002C088 // DSPI Receive FIFO Registers
//typedef struct {
// volatile $uint32_t MCR; // 0
// volatile $uint32_t unused1;// 4
// volatile $uint32_t TCR; // 8
// volatile $uint32_t CTAR0; // c
// volatile $uint32_t CTAR1; // 10
// volatile $uint32_t CTAR2; // 14
// volatile $uint32_t CTAR3; // 18
// volatile $uint32_t CTAR4; // 1c
// volatile $uint32_t CTAR5; // 20
// volatile $uint32_t CTAR6; // 24
// volatile $uint32_t CTAR7; // 28
// volatile $uint32_t SR; // 2c
// volatile $uint32_t RSER; // 30
// volatile $uint32_t PUSHR; // 34
// volatile $uint32_t POPR; // 38
// volatile $uint32_t TXFR[16]; // 3c
// volatile $uint32_t RXFR[16]; // 7c
//} SPI_t;
//register SPI0  (*(SPI_t *)0x4002C000)

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//// Chapter 44: Inter-Integrated Circuit (I2C)
//register I2C0_A1   *(volatile $uint8_t  *)0x40066000 // I2C Address Register 1
//register I2C0_F   *(volatile $uint8_t  *)0x40066001 // I2C Frequency Divider register
//register I2C0_C1   *(volatile $uint8_t  *)0x40066002 // I2C Control Register 1
//register I2C_C1_IICEN   ($uint8_t)0x80   // I2C Enable
//register I2C_C1_IICIE   ($uint8_t)0x40   // I2C Interrupt Enable
//register I2C_C1_MST   ($uint8_t)0x20   // Master Mode Select
//register I2C_C1_TX   ($uint8_t)0x10   // Transmit Mode Select
//register I2C_C1_TXAK   ($uint8_t)0x08   // Transmit Acknowledge Enable
//register I2C_C1_RSTA   ($uint8_t)0x04   // RepeSTART
//register I2C_C1_WUEN   ($uint8_t)0x02   // Wakeup Enable
//register I2C_C1_DMAEN   ($uint8_t)0x01   // DMA Enable
//register I2C0_S   *(volatile $uint8_t  *)0x40066003 // I2C Status register
//register I2C_S_TCF   ($uint8_t)0x80   // Transfer Complete Flag
//register I2C_S_IAAS   ($uint8_t)0x40   // Addressed As A Slave
//register I2C_S_BUSY   ($uint8_t)0x20   // Bus Busy
//register I2C_S_ARBL   ($uint8_t)0x10   // Arbitration Lost
//register I2C_S_RAM   ($uint8_t)0x08   // Range Address Match
//register I2C_S_SRW   ($uint8_t)0x04   // Slave Read/Write
//register I2C_S_IICIF   ($uint8_t)0x02   // Interrupt Flag
//register I2C_S_RXAK   ($uint8_t)0x01   // Receive Acknowledge
//register I2C0_D   *(volatile $uint8_t  *)0x40066004 // I2C Data I/O register
//register I2C0_C2   *(volatile $uint8_t  *)0x40066005 // I2C Control Register 2
//register I2C_C2_GCAEN   ($uint8_t)0x80   // General Call Address Enable
//register I2C_C2_ADEXT   ($uint8_t)0x40   // Address Extension
//register I2C_C2_HDRS   ($uint8_t)0x20   // High Drive Select
//register I2C_C2_SBRC   ($uint8_t)0x10   // Slave Baud Rate Control
//register I2C_C2_RMEN   ($uint8_t)0x08   // Range Address Matching Enable
//register I2C_C2_AD(n)   ((n) & 7)   // Slave Address, upper 3 bits
//register I2C0_FLT  *(volatile $uint8_t  *)0x40066006 // I2C Programmable Input Glitch Filter register
//register I2C0_RA   *(volatile $uint8_t  *)0x40066007 // I2C Range Address register
//register I2C0_SMB  *(volatile $uint8_t  *)0x40066008 // I2C SMBus Control and Status register
//register I2C0_A2   *(volatile $uint8_t  *)0x40066009 // I2C Address Register 2
//register I2C0_SLTH  *(volatile $uint8_t  *)0x4006600A // I2C SCL Low Timeout Register High
//register I2C0_SLTL  *(volatile $uint8_t  *)0x4006600B // I2C SCL Low Timeout Register Low
//
//register I2C1_A1   *(volatile $uint8_t  *)0x40067000 // I2C Address Register 1
//register I2C1_F   *(volatile $uint8_t  *)0x40067001 // I2C Frequency Divider register
//register I2C1_C1   *(volatile $uint8_t  *)0x40067002 // I2C Control Register 1
//register I2C1_S   *(volatile $uint8_t  *)0x40067003 // I2C Status register
//register I2C1_D   *(volatile $uint8_t  *)0x40067004 // I2C Data I/O register
//register I2C1_C2   *(volatile $uint8_t  *)0x40067005 // I2C Control Register 2
//register I2C1_FLT  *(volatile $uint8_t  *)0x40067006 // I2C Programmable Input Glitch Filter register
//register I2C1_RA   *(volatile $uint8_t  *)0x40067007 // I2C Range Address register
//register I2C1_SMB  *(volatile $uint8_t  *)0x40067008 // I2C SMBus Control and Status register
//register I2C1_A2   *(volatile $uint8_t  *)0x40067009 // I2C Address Register 2
//register I2C1_SLTH  *(volatile $uint8_t  *)0x4006700A // I2C SCL Low Timeout Register High
//register I2C1_SLTL  *(volatile $uint8_t  *)0x4006700B // I2C SCL Low Timeout Register Low

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//// Chapter 45: Universal Asynchronous Receiver/Transmitter (UART)
//register UART0_BDH  *(volatile $uint8_t  *)0x4006A000 // UART Baud Rate Registers: High
//register UART0_BDL  *(volatile $uint8_t  *)0x4006A001 // UART Baud Rate Registers: Low
//register UART0_C1  *(volatile $uint8_t  *)0x4006A002 // UART Control Register 1
//register UART_C1_LOOPS   ($uint8_t)0x80   // When LOOPS is set, the RxD pin is disconnected from the UART and the transmitter output is internally connected to the receiver input
//register UART_C1_UARTSWAI  ($uint8_t)0x40   // UART Stops in Wait Mode
//register UART_C1_RSRC   ($uint8_t)0x20   // When LOOPS is set, the RSRC field determines the source for the receiver shift register input
//register UART_C1_M   ($uint8_t)0x10   // 9-bit or 8-bit Mode Select
//register UART_C1_WAKE   ($uint8_t)0x08   // Determines which condition wakes the UART
//register UART_C1_ILT   ($uint8_t)0x04   // Idle Line Type Select
//register UART_C1_PE   ($uint8_t)0x02   // Parity Enable
//register UART_C1_PT   ($uint8_t)0x01   // Parity Type, 0=even, 1=odd
//register UART0_C2  *(volatile $uint8_t  *)0x4006A003 // UART Control Register 2
//register UART_C2_TIE   ($uint8_t)0x80   // Transmitter Interrupt or DMA Transfer Enable.
//register UART_C2_TCIE   ($uint8_t)0x40   // Transmission Complete Interrupt Enable
//register UART_C2_RIE   ($uint8_t)0x20   // Receiver Full Interrupt or DMA Transfer Enable
//register UART_C2_ILIE   ($uint8_t)0x10   // Idle Line Interrupt Enable
//register UART_C2_TE   ($uint8_t)0x08   // Transmitter Enable
//register UART_C2_RE   ($uint8_t)0x04   // Receiver Enable
//register UART_C2_RWU   ($uint8_t)0x02   // Receiver Wakeup Control
//register UART_C2_SBK   ($uint8_t)0x01   // Send Break
//register UART0_S1  *(volatile $uint8_t  *)0x4006A004 // UART Status Register 1
//register UART_S1_TDRE   ($uint8_t)0x80   // Transmit Data Register Empty Flag
//register UART_S1_TC   ($uint8_t)0x40   // Transmit Complete Flag
//register UART_S1_RDRF   ($uint8_t)0x20   // Receive Data Register Full Flag
//register UART_S1_IDLE   ($uint8_t)0x10   // Idle Line Flag
//register UART_S1_OR   ($uint8_t)0x08   // Receiver Overrun Flag
//register UART_S1_NF   ($uint8_t)0x04   // Noise Flag
//register UART_S1_FE   ($uint8_t)0x02   // Framing Error Flag
//register UART_S1_PF   ($uint8_t)0x01   // Parity Error Flag
//register UART0_S2  *(volatile $uint8_t  *)0x4006A005 // UART Status Register 2
//register UART0_C3  *(volatile $uint8_t  *)0x4006A006 // UART Control Register 3
//register UART0_D   *(volatile $uint8_t  *)0x4006A007 // UART Data Register
//register UART0_MA1  *(volatile $uint8_t  *)0x4006A008 // UART Match Address Registers 1
//register UART0_MA2  *(volatile $uint8_t  *)0x4006A009 // UART Match Address Registers 2
//register UART0_C4  *(volatile $uint8_t  *)0x4006A00A // UART Control Register 4
//register UART0_C5  *(volatile $uint8_t  *)0x4006A00B // UART Control Register 5
//register UART0_ED  *(volatile $uint8_t  *)0x4006A00C // UART Extended Data Register
//register UART0_MODEM  *(volatile $uint8_t  *)0x4006A00D // UART Modem Register
//register UART0_IR  *(volatile $uint8_t  *)0x4006A00E // UART Infrared Register
//register UART0_PFIFO  *(volatile $uint8_t  *)0x4006A010 // UART FIFO Parameters
//register UART_PFIFO_TXFE   ($uint8_t)0x80
//register UART_PFIFO_RXFE   ($uint8_t)0x08
//register UART0_CFIFO  *(volatile $uint8_t  *)0x4006A011 // UART FIFO Control Register
//register UART_CFIFO_TXFLUSH  ($uint8_t)0x80   // 
//register UART_CFIFO_RXFLUSH  ($uint8_t)0x40   // 
//register UART_CFIFO_RXOFE  ($uint8_t)0x04   // 
//register UART_CFIFO_TXOFE  ($uint8_t)0x02   // 
//register UART_CFIFO_RXUFE  ($uint8_t)0x01   // 
//register UART0_SFIFO  *(volatile $uint8_t  *)0x4006A012 // UART FIFO Status Register
//register UART_SFIFO_TXEMPT  ($uint8_t)0x80
//register UART_SFIFO_RXEMPT  ($uint8_t)0x40
//register UART_SFIFO_RXOF   ($uint8_t)0x04
//register UART_SFIFO_TXOF   ($uint8_t)0x02
//register UART_SFIFO_RXUF   ($uint8_t)0x01
//register UART0_TWFIFO  *(volatile $uint8_t  *)0x4006A013 // UART FIFO Transmit Watermark
//register UART0_TCFIFO  *(volatile $uint8_t  *)0x4006A014 // UART FIFO Transmit Count
//register UART0_RWFIFO  *(volatile $uint8_t  *)0x4006A015 // UART FIFO Receive Watermark
//register UART0_RCFIFO  *(volatile $uint8_t  *)0x4006A016 // UART FIFO Receive Count
//register UART0_C7816  *(volatile $uint8_t  *)0x4006A018 // UART 7816 Control Register
//register UART0_IE7816  *(volatile $uint8_t  *)0x4006A019 // UART 7816 Interrupt Enable Register
//register UART0_IS7816  *(volatile $uint8_t  *)0x4006A01A // UART 7816 Interrupt Status Register
//register UART0_WP7816T0  *(volatile $uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register
//register UART0_WP7816T1  *(volatile $uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register
//register UART0_WN7816  *(volatile $uint8_t  *)0x4006A01C // UART 7816 Wait N Register
//register UART0_WF7816  *(volatile $uint8_t  *)0x4006A01D // UART 7816 Wait FD Register
//register UART0_ET7816  *(volatile $uint8_t  *)0x4006A01E // UART 7816 Error Threshold Register
//register UART0_TL7816  *(volatile $uint8_t  *)0x4006A01F // UART 7816 Transmit Length Register
//register UART0_C6  *(volatile $uint8_t  *)0x4006A021 // UART CEA709.1-B Control Register 6
//register UART0_PCTH  *(volatile $uint8_t  *)0x4006A022 // UART CEA709.1-B Packet Cycle Time Counter High
//register UART0_PCTL  *(volatile $uint8_t  *)0x4006A023 // UART CEA709.1-B Packet Cycle Time Counter Low
//register UART0_B1T  *(volatile $uint8_t  *)0x4006A024 // UART CEA709.1-B Beta1 Timer
//register UART0_SDTH  *(volatile $uint8_t  *)0x4006A025 // UART CEA709.1-B Secondary Delay Timer High
//register UART0_SDTL  *(volatile $uint8_t  *)0x4006A026 // UART CEA709.1-B Secondary Delay Timer Low
//register UART0_PRE  *(volatile $uint8_t  *)0x4006A027 // UART CEA709.1-B Preamble
//register UART0_TPL  *(volatile $uint8_t  *)0x4006A028 // UART CEA709.1-B Transmit Packet Length
//register UART0_IE  *(volatile $uint8_t  *)0x4006A029 // UART CEA709.1-B Interrupt Enable Register
//register UART0_WB  *(volatile $uint8_t  *)0x4006A02A // UART CEA709.1-B WBASE
//register UART0_S3  *(volatile $uint8_t  *)0x4006A02B // UART CEA709.1-B Status Register
//register UART0_S4  *(volatile $uint8_t  *)0x4006A02C // UART CEA709.1-B Status Register
//register UART0_RPL  *(volatile $uint8_t  *)0x4006A02D // UART CEA709.1-B Received Packet Length
//register UART0_RPREL  *(volatile $uint8_t  *)0x4006A02E // UART CEA709.1-B Received Preamble Length
//register UART0_CPW  *(volatile $uint8_t  *)0x4006A02F // UART CEA709.1-B Collision Pulse Width
//register UART0_RIDT  *(volatile $uint8_t  *)0x4006A030 // UART CEA709.1-B Receive Indeterminate Time
//register UART0_TIDT  *(volatile $uint8_t  *)0x4006A031 // UART CEA709.1-B Transmit Indeterminate Time
//register UART1_BDH  *(volatile $uint8_t  *)0x4006B000 // UART Baud Rate Registers: High
//register UART1_BDL  *(volatile $uint8_t  *)0x4006B001 // UART Baud Rate Registers: Low
//register UART1_C1  *(volatile $uint8_t  *)0x4006B002 // UART Control Register 1
//register UART1_C2  *(volatile $uint8_t  *)0x4006B003 // UART Control Register 2
//register UART1_S1  *(volatile $uint8_t  *)0x4006B004 // UART Status Register 1
//register UART1_S2  *(volatile $uint8_t  *)0x4006B005 // UART Status Register 2
//register UART1_C3  *(volatile $uint8_t  *)0x4006B006 // UART Control Register 3
//register UART1_D   *(volatile $uint8_t  *)0x4006B007 // UART Data Register
//register UART1_MA1  *(volatile $uint8_t  *)0x4006B008 // UART Match Address Registers 1
//register UART1_MA2  *(volatile $uint8_t  *)0x4006B009 // UART Match Address Registers 2
//register UART1_C4  *(volatile $uint8_t  *)0x4006B00A // UART Control Register 4
//register UART1_C5  *(volatile $uint8_t  *)0x4006B00B // UART Control Register 5
//register UART1_ED  *(volatile $uint8_t  *)0x4006B00C // UART Extended Data Register
//register UART1_MODEM  *(volatile $uint8_t  *)0x4006B00D // UART Modem Register
//register UART1_IR  *(volatile $uint8_t  *)0x4006B00E // UART Infrared Register
//register UART1_PFIFO  *(volatile $uint8_t  *)0x4006B010 // UART FIFO Parameters
//register UART1_CFIFO  *(volatile $uint8_t  *)0x4006B011 // UART FIFO Control Register
//register UART1_SFIFO  *(volatile $uint8_t  *)0x4006B012 // UART FIFO Status Register
//register UART1_TWFIFO  *(volatile $uint8_t  *)0x4006B013 // UART FIFO Transmit Watermark
//register UART1_TCFIFO  *(volatile $uint8_t  *)0x4006B014 // UART FIFO Transmit Count
//register UART1_RWFIFO  *(volatile $uint8_t  *)0x4006B015 // UART FIFO Receive Watermark
//register UART1_RCFIFO  *(volatile $uint8_t  *)0x4006B016 // UART FIFO Receive Count
//register UART1_C7816  *(volatile $uint8_t  *)0x4006B018 // UART 7816 Control Register
//register UART1_IE7816  *(volatile $uint8_t  *)0x4006B019 // UART 7816 Interrupt Enable Register
//register UART1_IS7816  *(volatile $uint8_t  *)0x4006B01A // UART 7816 Interrupt Status Register
//register UART1_WP7816T0  *(volatile $uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register
//register UART1_WP7816T1  *(volatile $uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register
//register UART1_WN7816  *(volatile $uint8_t  *)0x4006B01C // UART 7816 Wait N Register
//register UART1_WF7816  *(volatile $uint8_t  *)0x4006B01D // UART 7816 Wait FD Register
//register UART1_ET7816  *(volatile $uint8_t  *)0x4006B01E // UART 7816 Error Threshold Register
//register UART1_TL7816  *(volatile $uint8_t  *)0x4006B01F // UART 7816 Transmit Length Register
//register UART1_C6  *(volatile $uint8_t  *)0x4006B021 // UART CEA709.1-B Control Register 6
//register UART1_PCTH  *(volatile $uint8_t  *)0x4006B022 // UART CEA709.1-B Packet Cycle Time Counter High
//register UART1_PCTL  *(volatile $uint8_t  *)0x4006B023 // UART CEA709.1-B Packet Cycle Time Counter Low
//register UART1_B1T  *(volatile $uint8_t  *)0x4006B024 // UART CEA709.1-B Beta1 Timer
//register UART1_SDTH  *(volatile $uint8_t  *)0x4006B025 // UART CEA709.1-B Secondary Delay Timer High
//register UART1_SDTL  *(volatile $uint8_t  *)0x4006B026 // UART CEA709.1-B Secondary Delay Timer Low
//register UART1_PRE  *(volatile $uint8_t  *)0x4006B027 // UART CEA709.1-B Preamble
//register UART1_TPL  *(volatile $uint8_t  *)0x4006B028 // UART CEA709.1-B Transmit Packet Length
//register UART1_IE  *(volatile $uint8_t  *)0x4006B029 // UART CEA709.1-B Interrupt Enable Register
//register UART1_WB  *(volatile $uint8_t  *)0x4006B02A // UART CEA709.1-B WBASE
//register UART1_S3  *(volatile $uint8_t  *)0x4006B02B // UART CEA709.1-B Status Register
//register UART1_S4  *(volatile $uint8_t  *)0x4006B02C // UART CEA709.1-B Status Register
//register UART1_RPL  *(volatile $uint8_t  *)0x4006B02D // UART CEA709.1-B Received Packet Length
//register UART1_RPREL  *(volatile $uint8_t  *)0x4006B02E // UART CEA709.1-B Received Preamble Length
//register UART1_CPW  *(volatile $uint8_t  *)0x4006B02F // UART CEA709.1-B Collision Pulse Width
//register UART1_RIDT  *(volatile $uint8_t  *)0x4006B030 // UART CEA709.1-B Receive Indeterminate Time
//register UART1_TIDT  *(volatile $uint8_t  *)0x4006B031 // UART CEA709.1-B Transmit Indeterminate Time
//register UART2_BDH  *(volatile $uint8_t  *)0x4006C000 // UART Baud Rate Registers: High
//register UART2_BDL  *(volatile $uint8_t  *)0x4006C001 // UART Baud Rate Registers: Low
//register UART2_C1  *(volatile $uint8_t  *)0x4006C002 // UART Control Register 1
//register UART2_C2  *(volatile $uint8_t  *)0x4006C003 // UART Control Register 2
//register UART2_S1  *(volatile $uint8_t  *)0x4006C004 // UART Status Register 1
//register UART2_S2  *(volatile $uint8_t  *)0x4006C005 // UART Status Register 2
//register UART2_C3  *(volatile $uint8_t  *)0x4006C006 // UART Control Register 3
//register UART2_D   *(volatile $uint8_t  *)0x4006C007 // UART Data Register
//register UART2_MA1  *(volatile $uint8_t  *)0x4006C008 // UART Match Address Registers 1
//register UART2_MA2  *(volatile $uint8_t  *)0x4006C009 // UART Match Address Registers 2
//register UART2_C4  *(volatile $uint8_t  *)0x4006C00A // UART Control Register 4
//register UART2_C5  *(volatile $uint8_t  *)0x4006C00B // UART Control Register 5
//register UART2_ED  *(volatile $uint8_t  *)0x4006C00C // UART Extended Data Register
//register UART2_MODEM  *(volatile $uint8_t  *)0x4006C00D // UART Modem Register
//register UART2_IR  *(volatile $uint8_t  *)0x4006C00E // UART Infrared Register
//register UART2_PFIFO  *(volatile $uint8_t  *)0x4006C010 // UART FIFO Parameters
//register UART2_CFIFO  *(volatile $uint8_t  *)0x4006C011 // UART FIFO Control Register
//register UART2_SFIFO  *(volatile $uint8_t  *)0x4006C012 // UART FIFO Status Register
//register UART2_TWFIFO  *(volatile $uint8_t  *)0x4006C013 // UART FIFO Transmit Watermark
//register UART2_TCFIFO  *(volatile $uint8_t  *)0x4006C014 // UART FIFO Transmit Count
//register UART2_RWFIFO  *(volatile $uint8_t  *)0x4006C015 // UART FIFO Receive Watermark
//register UART2_RCFIFO  *(volatile $uint8_t  *)0x4006C016 // UART FIFO Receive Count
//register UART2_C7816  *(volatile $uint8_t  *)0x4006C018 // UART 7816 Control Register
//register UART2_IE7816  *(volatile $uint8_t  *)0x4006C019 // UART 7816 Interrupt Enable Register
//register UART2_IS7816  *(volatile $uint8_t  *)0x4006C01A // UART 7816 Interrupt Status Register
//register UART2_WP7816T0  *(volatile $uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register
//register UART2_WP7816T1  *(volatile $uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register
//register UART2_WN7816  *(volatile $uint8_t  *)0x4006C01C // UART 7816 Wait N Register
//register UART2_WF7816  *(volatile $uint8_t  *)0x4006C01D // UART 7816 Wait FD Register
//register UART2_ET7816  *(volatile $uint8_t  *)0x4006C01E // UART 7816 Error Threshold Register
//register UART2_TL7816  *(volatile $uint8_t  *)0x4006C01F // UART 7816 Transmit Length Register
//register UART2_C6  *(volatile $uint8_t  *)0x4006C021 // UART CEA709.1-B Control Register 6
//register UART2_PCTH  *(volatile $uint8_t  *)0x4006C022 // UART CEA709.1-B Packet Cycle Time Counter High
//register UART2_PCTL  *(volatile $uint8_t  *)0x4006C023 // UART CEA709.1-B Packet Cycle Time Counter Low
//register UART2_B1T  *(volatile $uint8_t  *)0x4006C024 // UART CEA709.1-B Beta1 Timer
//register UART2_SDTH  *(volatile $uint8_t  *)0x4006C025 // UART CEA709.1-B Secondary Delay Timer High
//register UART2_SDTL  *(volatile $uint8_t  *)0x4006C026 // UART CEA709.1-B Secondary Delay Timer Low
//register UART2_PRE  *(volatile $uint8_t  *)0x4006C027 // UART CEA709.1-B Preamble
//register UART2_TPL  *(volatile $uint8_t  *)0x4006C028 // UART CEA709.1-B Transmit Packet Length
//register UART2_IE  *(volatile $uint8_t  *)0x4006C029 // UART CEA709.1-B Interrupt Enable Register
//register UART2_WB  *(volatile $uint8_t  *)0x4006C02A // UART CEA709.1-B WBASE
//register UART2_S3  *(volatile $uint8_t  *)0x4006C02B // UART CEA709.1-B Status Register
//register UART2_S4  *(volatile $uint8_t  *)0x4006C02C // UART CEA709.1-B Status Register
//register UART2_RPL  *(volatile $uint8_t  *)0x4006C02D // UART CEA709.1-B Received Packet Length
//register UART2_RPREL  *(volatile $uint8_t  *)0x4006C02E // UART CEA709.1-B Received Preamble Length
//register UART2_CPW  *(volatile $uint8_t  *)0x4006C02F // UART CEA709.1-B Collision Pulse Width
//register UART2_RIDT  *(volatile $uint8_t  *)0x4006C030 // UART CEA709.1-B Receive Indeterminate Time
//register UART2_TIDT  *(volatile $uint8_t  *)0x4006C031 // UART CEA709.1-B Transmit Indeterminate Time

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//// Chapter 46: Synchronous Audio Interface (SAI)
//register I2S0_TCSR   0x4002F000 // SAI Transmit Control Register
//register I2S_TCSR_TE    0x80000000 // Transmitter Enable
//register I2S_TCSR_STOPE    0x40000000 // Transmitter Enable in Stop mode
//register I2S_TCSR_DBGE    0x20000000 // Transmitter Enable in Debug mode
//register I2S_TCSR_BCE    0x10000000 // Bit Clock Enable
//register I2S_TCSR_FR    0x02000000 // FIFO Reset
//register I2S_TCSR_SR    0x01000000 // Software Reset
//register I2S_TCSR_WSF    0x00100000 // Word Start Flag
//register I2S_TCSR_SEF    0x00080000 // Sync Error Flag
//register I2S_TCSR_FEF    0x00040000 // FIFO Error Flag (underrun)
//register I2S_TCSR_FWF    0x00020000 // FIFO Warning Flag (empty)
//register I2S_TCSR_FRF    0x00010000 // FIFO Request Flag (Data Ready)
//register I2S_TCSR_WSIE    0x00001000 // Word Start Interrupt Enable
//register I2S_TCSR_SEIE    0x00000800 // Sync Error Interrupt Enable
//register I2S_TCSR_FEIE    0x00000400 // FIFO Error Interrupt Enable
//register I2S_TCSR_FWIE    0x00000200 // FIFO Warning Interrupt Enable
//register I2S_TCSR_FRIE    0x00000100 // FIFO Request Interrupt Enable
//register I2S_TCSR_FWDE    0x00000002 // FIFO Warning DMA Enable
//register I2S_TCSR_FRDE    0x00000001 // FIFO Request DMA Enable
//register I2S0_TCR1   0x4002F004 // SAI Transmit Configuration 1 Register
//register I2S_TCR1_TFW(n)   ( n & 0x03)       // Transmit FIFO watermark
//register I2S0_TCR2   0x4002F008 // SAI Transmit Configuration 2 Register
//register I2S_TCR2_DIV(n)   ( n & 0xff)       // Bit clock divide by (DIV+1)*2
//register I2S_TCR2_BCD   ( 1<<24)       // Bit clock direction
//register I2S_TCR2_BCP   ( 1<<25)       // Bit clock polarity
//register I2S_TCR2_MSEL(n)  ( (n & 3)<<26)       // MCLK select, 0=bus clock, 1=I2S0_MCLK
//register I2S_TCR2_BCI   ( 1<<28)       // Bit clock input
//register I2S_TCR2_BCS   ( 1<<29)       // Bit clock swap
//register I2S_TCR2_SYNC(n)  ( (n & 3)<<30)       // 0=async 1=sync with receiver
//register I2S0_TCR3   0x4002F00C // SAI Transmit Configuration 3 Register
//register I2S_TCR3_WDFL(n)  ( n & 0x0f)       // word flag configuration
//register I2S_TCR3_TCE   ( 0x10000)       // transmit channel enable
//register I2S0_TCR4   0x4002F010 // SAI Transmit Configuration 4 Register
//register I2S_TCR4_FSD   ( 1)        // Frame Sync Direction
//register I2S_TCR4_FSP   ( 2)        // Frame Sync Polarity
//register I2S_TCR4_FSE   ( 8)        // Frame Sync Early
//register I2S_TCR4_MF   ( 0x10)       // MSB First
//register I2S_TCR4_SYWD(n)  ( (n & 0x1f)<<8)     // Sync Width
//register I2S_TCR4_FRSZ(n)  ( (n & 0x0f)<<16)    // Frame Size
//register I2S0_TCR5   0x4002F014 // SAI Transmit Configuration 5 Register
//register I2S_TCR5_FBT(n)   ( (n & 0x1f)<<8)     // First Bit Shifted
//register I2S_TCR5_W0W(n)   ( (n & 0x1f)<<16)    // Word 0 Width
//register I2S_TCR5_WNW(n)   ( (n & 0x1f)<<24)    // Word N Width
//register I2S0_TDR0   0x4002F020 // SAI Transmit Data Register
//register I2S0_TDR1   0x4002F024 // SAI Transmit Data Register
//register I2S0_TFR0   0x4002F040 // SAI Transmit FIFO Register
//register I2S0_TFR1   0x4002F044 // SAI Transmit FIFO Register
//register I2S_TFR_RFP(n)   ( n & 7)       // read FIFO pointer
//register I2S_TFR_WFP(n)   ( (n & 7)<<16)       // write FIFO pointer
//register I2S0_TMR   0x4002F060 // SAI Transmit Mask Register
//register I2S_TMR_TWM(n)   ( n & 0xFFFFFFFF)
//register I2S0_RCSR   0x4002F080 // SAI Receive Control Register
//register I2S_RCSR_RE    0x80000000 // Receiver Enable
//register I2S_RCSR_STOPE    0x40000000 // Receiver Enable in Stop mode
//register I2S_RCSR_DBGE    0x20000000 // Receiver Enable in Debug mode
//register I2S_RCSR_BCE    0x10000000 // Bit Clock Enable
//register I2S_RCSR_FR    0x02000000 // FIFO Reset
//register I2S_RCSR_SR    0x01000000 // Software Reset
//register I2S_RCSR_WSF    0x00100000 // Word Start Flag
//register I2S_RCSR_SEF    0x00080000 // Sync Error Flag
//register I2S_RCSR_FEF    0x00040000 // FIFO Error Flag (underrun)
//register I2S_RCSR_FWF    0x00020000 // FIFO Warning Flag (empty)
//register I2S_RCSR_FRF    0x00010000 // FIFO Request Flag (Data Ready)
//register I2S_RCSR_WSIE    0x00001000 // Word Start Interrupt Enable
//register I2S_RCSR_SEIE    0x00000800 // Sync Error Interrupt Enable
//register I2S_RCSR_FEIE    0x00000400 // FIFO Error Interrupt Enable
//register I2S_RCSR_FWIE    0x00000200 // FIFO Warning Interrupt Enable
//register I2S_RCSR_FRIE    0x00000100 // FIFO Request Interrupt Enable
//register I2S_RCSR_FWDE    0x00000002 // FIFO Warning DMA Enable
//register I2S_RCSR_FRDE    0x00000001 // FIFO Request DMA Enable
//register I2S0_RCR1   0x4002F084 // SAI Receive Configuration 1 Register
//register I2S_RCR1_RFW(n)   ( n & 0x03)       // Receive FIFO watermark
//register I2S0_RCR2   0x4002F088 // SAI Receive Configuration 2 Register
//register I2S_RCR2_DIV(n)   ( n & 0xff)       // Bit clock divide by (DIV+1)*2
//register I2S_RCR2_BCD   ( 1<<24)       // Bit clock direction
//register I2S_RCR2_BCP   ( 1<<25)       // Bit clock polarity
//register I2S_RCR2_MSEL(n)  ( (n & 3)<<26)       // MCLK select, 0=bus clock, 1=I2S0_MCLK
//register I2S_RCR2_BCI   ( 1<<28)       // Bit clock input
//register I2S_RCR2_BCS   ( 1<<29)       // Bit clock swap
//register I2S_RCR2_SYNC(n)  ( (n & 3)<<30)       // 0=async 1=sync with receiver
//register I2S0_RCR3   0x4002F08C // SAI Receive Configuration 3 Register
//register I2S_RCR3_WDFL(n)  ( n & 0x0f)       // word flag configuration
//register I2S_RCR3_RCE   ( 0x10000)       // receive channel enable
//register I2S0_RCR4   0x4002F090 // SAI Receive Configuration 4 Register
//register I2S_RCR4_FSD   ( 1)        // Frame Sync Direction
//register I2S_RCR4_FSP   ( 2)        // Frame Sync Polarity
//register I2S_RCR4_FSE   ( 8)        // Frame Sync Early
//register I2S_RCR4_MF   ( 0x10)       // MSB First
//register I2S_RCR4_SYWD(n)  ( (n & 0x1f)<<8)     // Sync Width
//register I2S_RCR4_FRSZ(n)  ( (n & 0x0f)<<16)    // Frame Size
//register I2S0_RCR5   0x4002F094 // SAI Receive Configuration 5 Register
//register I2S_RCR5_FBT(n)   ( (n & 0x1f)<<8)     // First Bit Shifted
//register I2S_RCR5_W0W(n)   ( (n & 0x1f)<<16)    // Word 0 Width
//register I2S_RCR5_WNW(n)   ( (n & 0x1f)<<24)    // Word N Width
//register I2S0_RDR0   0x4002F0A0 // SAI Receive Data Register
//register I2S0_RDR1   0x4002F0A4 // SAI Receive Data Register
//register I2S0_RFR0   0x4002F0C0 // SAI Receive FIFO Register
//register I2S0_RFR1   0x4002F0C4 // SAI Receive FIFO Register
//register I2S_RFR_RFP(n)   ( n & 7)       // read FIFO pointer
//register I2S_RFR_WFP(n)   ( (n & 7)<<16)       // write FIFO pointer
//register I2S0_RMR   0x4002F0E0 // SAI Receive Mask Register
//register I2S_RMR_RWM(n)   ( n & 0xFFFFFFFF)
//register I2S0_MCR   0x4002F100 // SAI MCLK Control Register
//register I2S_MCR_DUF   ( 1<<31)       // Divider Update Flag
//register I2S_MCR_MOE   ( 1<<30)       // MCLK Output Enable
//register I2S_MCR_MICS(n)   ( (n & 3)<<24)       // MCLK Input Clock Select
//register I2S0_MDR   0x4002F104 // SAI MCLK Divide Register
//register I2S_MDR_FRACT(n)  ( (n & 0xff)<<12)    // MCLK Fraction
//register I2S_MDR_DIVIDE(n)  ( (n & 0xfff))       // MCLK Divide

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Chapter 47: General-Purpose Input/Output (GPIO)
register GPIOA {
  PDOR @user at 0x400FF000 $uint32 // Port Data Output Register
  PSOR @user at 0x400FF004 $uint32 // Port Set Output Register
  PCOR @user at 0x400FF008 $uint32 // Port Clear Output Register
  PTOR @user at 0x400FF00C $uint32 // Port Toggle Output Register
  PDIR @user at 0x400FF010 $uint32 // Port Data Input Register
  PDDR @user at 0x400FF014 $uint32 // Port Data Direction Register
}

register GPIOB {
  PDOR @user at 0x400FF040 $uint32 // Port Data Output Register
  PSOR @user at 0x400FF044 $uint32 // Port Set Output Register
  PCOR @user at 0x400FF048 $uint32 // Port Clear Output Register
  PTOR @user at 0x400FF04C $uint32 // Port Toggle Output Register
  PDIR @user at 0x400FF050 $uint32 // Port Data Input Register
  PDDR @user at 0x400FF054 $uint32 // Port Data Direction Register
}

register GPIOC {
  PDOR @user at 0x400FF080 $uint32 // Port Data Output Register
  PSOR @user at 0x400FF084 $uint32 // Port Set Output Register
  PCOR @user at 0x400FF088 $uint32 // Port Clear Output Register
  PTOR @user at 0x400FF08C $uint32 // Port Toggle Output Register
  PDIR @user at 0x400FF090 $uint32 // Port Data Input Register
  PDDR @user at 0x400FF094 $uint32 // Port Data Direction Register
}

register GPIOD {
  PDOR @user at 0x400FF0C0 $uint32 // Port Data Output Register
  PSOR @user at 0x400FF0C4 $uint32 // Port Set Output Register
  PCOR @user at 0x400FF0C8 $uint32 // Port Clear Output Register
  PTOR @user at 0x400FF0CC $uint32 // Port Toggle Output Register
  PDIR @user at 0x400FF0D0 $uint32 // Port Data Input Register
  PDDR @user at 0x400FF0D4 $uint32 // Port Data Direction Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//// Chapter 48: Touch sense input (TSI)
//register TSI0_GENCS   0x40045000 // General Control and Status Register
//register TSI_GENCS_LPCLKS   0x10000000  // 
//register TSI_GENCS_LPSCNITV(n)  (((n) & 15) << 24)  // 
//register TSI_GENCS_NSCN(n)  (((n) & 31) << 19)  // 
//register TSI_GENCS_PS(n)   (((n) & 7) << 16)  // 
//register TSI_GENCS_EOSF    0x00008000  // 
//register TSI_GENCS_OUTRGF   0x00004000  // 
//register TSI_GENCS_EXTERF   0x00002000  // 
//register TSI_GENCS_OVRF    0x00001000  // 
//register TSI_GENCS_SCNIP    0x00000200  // 
//register TSI_GENCS_SWTS    0x00000100  // 
//register TSI_GENCS_TSIEN    0x00000080  // 
//register TSI_GENCS_TSIIE    0x00000040  // 
//register TSI_GENCS_ERIE    0x00000020  // 
//register TSI_GENCS_ESOR    0x00000010  // 
//register TSI_GENCS_STM    0x00000002  // 
//register TSI_GENCS_STPE    0x00000001  // 
//register TSI0_SCANC   0x40045004 // SCAN Control Register
//register TSI_SCANC_REFCHRG(n)  (((n) & 15) << 24)  // 
//register TSI_SCANC_EXTCHRG(n)  (((n) & 7) << 16)  // 
//register TSI_SCANC_SMOD(n)  (((n) & 255) << 8)  // 
//register TSI_SCANC_AMCLKS(n)  (((n) & 3) << 3)  // 
//register TSI_SCANC_AMPSC(n)  (((n) & 7) << 0)  // 
//register TSI0_PEN   0x40045008 // Pin Enable Register
//register TSI0_WUCNTR   0x4004500C // Wake-Up Channel Counter Register
//register TSI0_CNTR1   0x40045100 // Counter Register
//register TSI0_CNTR3   0x40045104 // Counter Register
//register TSI0_CNTR5   0x40045108 // Counter Register
//register TSI0_CNTR7   0x4004510C // Counter Register
//register TSI0_CNTR9   0x40045110 // Counter Register
//register TSI0_CNTR11   0x40045114 // Counter Register
//register TSI0_CNTR13   0x40045118 // Counter Register
//register TSI0_CNTR15   0x4004511C // Counter Register
//register TSI0_THRESHOLD   0x40045120 // Low Power Channel Threshold Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

// Nested Vectored Interrupt Controller, Table 3-4 & ARMv7 ref, appendix B3.4 (page 750)
 
register NVIC {
  ISER [4]  at 0xE000_E100 : 4 $uint32 // Interrupt Set-enable Registers
   
  ICER [4]  at 0xE000_E180 : 4 $uint32 //Interrupt Clear-enable Registers
  
  // 0 = highest priority
  // Cortex-M4: 0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240
  IPR [128] at 0xE000_E400 : 1 $uint8 // Interrupt priority
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//System Control Space (SCS), ARMv7 ref manual, B3.2, page 708
register SCB {
  CPUID at 0xE000_ED00 $uint32 // CPUID Base Register

  ICSR at 0xE000_ED04 $uint32 { // Interrupt Control and State
    NMIPENDSET, 2, PENDSVSET, PENDSVCLR, PENDSTSET, PENDSTCLR, 1, ISRPREEMPT,
    ISRPENDING, 1, VECTPENDING[9], RETTOBASE, 2, VECTACTIVE[9]
  }
  
  VTOR at 0xE000_ED08 $uint32 // Vector Table Offset
  
  AIRCR at 0xE000_ED0C $uint32 { // Application Interrupt and Reset Control
    VECTKEY[16], ENDIANNESS, 4, PRIGROUP[3],
    5, SYSRESETREQ, VECTCLRACTIVE, VECTRESET 
  }
  
  CPACR at 0xE000_ED88 $uint32 // Coprocessor Access Control
  
  FPCCR at 0xE000_EF34 $uint32 // FP Context Control
  
  SCR at 0xE000ED10 $uint32 // System Control Register
  CCR at 0xE000ED14 $uint32 // Configuration and Control
  SHPR1 at 0xE000ED18 $uint32 // System Handler Priority Register 1
  SHPR2 at 0xE000ED1C $uint32 // System Handler Priority Register 2
  SHPR3 at 0xE000ED20 $uint32 // System Handler Priority Register 3
  SHCSR at 0xE000ED24 $uint32 // System Handler Control and State
  CFSR at 0xE000ED28 $uint32 // Configurable Fault Status Register
  HFSR at 0xE000ED2C $uint32 // HardFault Status
  DFSR at 0xE000ED30 $uint32 // Debug Fault Status
  MMFAR at 0xE000ED34 $uint32 // MemManage Fault Address
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- SYSTICK
register SYST {
  CSR at 0xE000_E010 $uint32 { // SysTick Control and Status
    15, 
    COUNTFLAG,
    13,
    CLKSOURCE,
    TICKINT,
    ENABLE
  }
  
  RVR   at 0xE000_E014 $uint32 // SysTick Reload Value Register
  
  CVR   at 0xE000_E018 $uint32 // SysTick Current Value Register
  
  CALIB  @ro at 0xE000_E01C $uint32 // SysTick Calibration Value
}

register AIPS0 {
  MPRA at 0x_4000_0000 $uint32
  
  //--- AICS0_PACR (§4.5.1 and §19.2, §19.2.2)
  // SPx: Determines whether the peripheral requires supervisor privilege level
  // for accesses. When this field is set, the master privilege level must indicate
  // the supervisor access attribute, and the MPR x [MPL n ] control field for the
  // master must be set. If not, access terminates with an error response and no
  // peripheral access initiates. 
  // 0  This peripheral does not require supervisor privilege level for accesses.    // 1  This peripheral requires supervisor privilege level for accesses.    // WPx: Determines whether the peripheral allows write accessses. When this field
  // is set and a write access is attempted, access terminates with an error
  // response and no peripheral access initiates
  // 0  This peripheral allows write accesses.    // 1  This peripheral is write protected.    // TPx : Determines whether the peripheral allows accesses from an untrusted master.
  // When this bit is set and an access is attempted by an untrusted master, the 
  // access terminates with an error response and no peripheral access initiates.
  // 0  Accesses from an untrusted master are allowed.    // 1  Accesses from an untrusted master are not allowed.    
  PACRA at 0x_4000_0020
  PACRB at 0x_4000_0024
  PACRC at 0x_4000_0028
  PACRD at 0x_4000_002C
  PACRE at 0x_4000_0040
  PACRF at 0x_4000_0044
  PACRG at 0x_4000_0048
  PACRH at 0x_4000_004C
  PACRI at 0x_4000_0050
  PACRJ at 0x_4000_0054
  PACRK at 0x_4000_0058
  PACRL at 0x_4000_005C
  PACRM at 0x_4000_0060
  PACRN at 0x_4000_0064
  PACRO at 0x_4000_0068
  PACRP at 0x_4000_006C
  $uint32 {
   1, SP0, WP0, TP0,
   1, SP1, WP1, TP1,
   1, SP2, WP2, TP2,
   1, SP3, WP3, TP3,
   1, SP4, WP4, TP4,
   1, SP5, WP5, TP5,
   1, SP6, WP6, TP6,
   1, SP7, WP7, TP7
  }
}

//register ARM_DEMCR   0xE000EDFC // Debug Exception and Monitor Control
//register ARM_DEMCR_TRCENA  (1 << 24)  // Enable debugging & monitoring blocks
//register ARM_DWT_CTRL   0xE0001000 // DWT control register
//register ARM_DWT_CTRL_CYCCNTENA  (1 << 0)  // Enable cycle count
//register ARM_DWT_CYCCNT   0xE0001004 // Cycle count register
