check target "teensy-3-6/xtr32", "teensy-3-6/xtr64"

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 12: Port control and interrupts (PORT) Pin Control registers n
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers
  PORTA @at 0x4004_9000,
  PORTB @at 0x4004_A000,
  PORTC @at 0x4004_B000,
  PORTD @at 0x4004_C000,
  PORTE @at 0x4004_D000 {
    PCR [32] 0x00 @inc 4 : UInt32 {
    7, ISF, 4, IRQC:4, LK, 4, MUX:3, 1, DSE, ODE, PFE, 1, SRE, PE, PS
  }

  GPCLR 0x80 : UInt32 // Global Pin Control Low Register
  GPCHR 0x84 : UInt32 // Global Pin Control High Register
  ISFR  0xA0 : UInt32 // Interrupt Status Flag Register
  DFER  0xC0 : UInt32 // Digital Filter Enable Register
  DFCR  0xC4 : UInt32 {31, CS} // Digital Filter Clock Register
  DFWR  0xC8 : UInt32 {27, FILT:5} // Digital Filter Width Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 13: System Integration Module (SIM)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers SIM @at 0x4004_7000 {
//--- System Options registers 1
  SOPT1 0x00 : UInt32 {USBREGEN, USBSSTBY, USBVSTBY, 9, OSC32KSEL:2, 2, RAMSIZE:4, 12}

//--- SOPT1 Configuration Register
  SOPT1CFG 0x04 : UInt32 {5, USSWE, UVSWE, URWE, 24}

//--- USB PHY Control Register
  USBPHYCTL 0x08 : UInt32 {8, USBDISILIM, USB3VOUTTRG:3, 10, USBVREGPD, USBVREGSEL, 8}

//--- System Options registers 2
  SOPT2 0x1004 : UInt32 {
    2,
    SDHCSRC:2,     // SDHC Clock, 0=system, 1=FLL/PLL, 2=OSCERCLK, 3=external
    LPUARTSRC:2,     // LPUART Clock, 0=off, 1=FLL/PLL, 2=OSCERCLK, 3=MCGIRCLK
    TPMSRC:2,    // TPM Clock, 0=off, 1=FLL/PLL, 2=OSCERCLK, 3=MCGIRCLK
    2,
    TIMESRC:2, // IEEE 1588 clock, 0=system, 1=FLL/PLL, 2=OSCERCLK, 3=external
    RMIISRC, // 0=external, 1=external 1588
    USBSRC, // 0=USB_CLKIN, 1=FFL/PLL
    PLLFLLSEL:2, // 0=FLL, 1=PLL
    3,
    TRACECLKSEL, // 0=MCGOUTCLK, 1=CPU
    2,
    FBSL:2, // FlexBus security level
    CLKOUTSEL:3, // Selects the clock to output on the CLKOUT pin.
    RTCCLKOUTSEL, // RTC clock out select
    2,
    USBREGEN, // USB PHY PLL Regulator Enable
    USBSLSRC // USB Slow Clock Source
  }

// System Options registers 4
  SOPT4 0x100C : UInt32 {
    FTM3TRG1SRC, FTM3TRG0SRC, FTM0TRG1SRC, FTM0TRG0SRC, FTM3CLKSEL, FTM2CLKSEL, FTM1CLKSEL, FTM0CLKSEL,
    1, FTM2CH1SRC, FTM2CH0SRC:2, FTM1CH0SRC:2, 2,
    3, FTM3FLT0, 3, FTM2FLT0, 3, FTM1FLT0, FTM0FLT3, FTM0FLT2, FTM0FLT1, FTM0FLT0
  }

//--- System Options registers 5
  SOPT5 0x1010 : UInt32 {
    12, LPUART0RXSRC:2, LPUART0TXSRC:2, 8,
    UART1RXSRC:2, UART1TXSRC:2, UART0RXSRC:2, UART0TXSRC:2
  }

//--- System Options registers 7
  SOPT7 0x1018 : UInt32 {
    16, ADC1ALTTRGEN, 2, ADC1PRETRGSEL, ADC1TRGSEL:4,
    ADC0ALTTRGEN, 2, ADC0PRETRGSEL, ADC0TRGSEL:4
  }

//--- System Device Identification Register
  SDID @ro 0x1024 : UInt32 {FAMILYID:4, SUBFAMID:4, SERIESID:4, 4, REVID:4, DIEID:5, FAMID:3, PINID:4}

//--- System Clock Gating Control registers 2
  SCGC2 0x102C : UInt32 {
    18,
    DAC1,
    DAC0,
    1,
    TPM2,
    TPM1,
    4,
    LPUART0,
    3,
    ENET
  }

//--- System Clock Gating Control registers 3
  SCGC3 0x1030 : UInt32 {
    4,
    ADC1, // ADC1 Clock Gate Control
    1,
    FTM3, // FTM3 Clock Gate Control
    FTM2, // FTM2 Clock Gate Control
    6,
    SDHC,
    4,
    SPI2,
    7,
    FLEXCAN1,
    USBHSDCD,
    USBHSPHY,
    USBHS,
    RNGA
  }

//--- System Clock Gating Control registers 4
  SCGC4 0x1034 : UInt32 {
    11,
    VREF,
    CMP,
    USBOTG,
    4,
    UART3,
    UART2,
    UART1,
    UART0,
    2,
    I2C1,
    I2C0,
    3,
    CMT,
    EWM,
    1
  }

//--- System Clock Gating Control registers 5
  SCGC5 0x1038 : UInt32 {
    18,
    PORTE,
    PORTD,
    PORTC,
    PORTB,
    PORTA,
    3,
    TSI, // Touch Sense Input TSI Clock Gate Control
    4,
    LPTMR // Low Power Timer Access Control
  }

//--- System Clock Gating Control registers 6
  SCGC6 0x103C : UInt32 {
    DAC0,
    1,
    RTC,
    1,
    ADC0,
    FTM2,
    FTM1,
    FTM0,
    PIT,
    PDB,
    USBDCD,
    2,
    CRC,
    2,
    I2S,
    1,
    SPI1,
    SPI0,
    2,
    RNGA,
    4,
    FLEXCAN0,
    2,
    DMAMUX,
    FTF
  }

//--- System Clock Gating Control registers 7
  SCGC7 0x1040 : UInt32 {
    28,
    SDRAMMC,
    MPU,
    DMA,
    FLEXBUS
  }

//--- System Clock Divider registers 1
  CLKDIV1 0x1044 : UInt32 {
    OUTDIV1:4, // Divide value for the core/system clock
    OUTDIV2:4, // Divide value for the peripheral clock
    OUTDIV3:4, // Divide value for flexbus
    OUTDIV4:4, // Divide value for the flash clock
    16
  }

//--- System Clock Divider registers 2
   CLKDIV2 0x1048 : UInt32 {
    28,
    USBDIV:3,
    USBFRAC
  }

  FCFG1 @ro 0x104C : UInt32 // Flash Configuration registers 1
  FCFG2 @ro 0x1050 : UInt32 // Flash Configuration registers 2
  UIDH  @ro 0x1054 : UInt32 // Unique Identification registers High
  UIDMH @ro 0x1058 : UInt32 // Unique Identification registers Mid-High
  UIDML @ro 0x105C : UInt32 // Unique Identification registers Mid Low
  UIDL  @ro 0x1060 : UInt32 // Unique Identification registers Low
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 15: Reset Control Module (RCM)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers RCM @at 0x4007_F000 {
  SRS0 0x00 : UInt8 // System Reset Status registers 0
  SRS1 0x01 : UInt8 // System Reset Status registers 1
  RPFC 0x04 : UInt8 // Reset Pin Filter Control Register
  RPFW 0x05 : UInt8 // Reset Pin Filter Width Register
  MR   0x07 : UInt8 // Mode Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 16: System Mode Controller
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers SMC @at 0x4007_E000 {
  PMPROT  0x00 : UInt8 { // Power Mode Protection Register
    AHSRUN, // Allow high speed run mode
    1,
    AVLP, // Allow very low power modes
    1,
    ALLS, // Allow low leakage stop mode
    1,
    AVLLS, // Allow very low leakage stop mode
    1
  }


  PMCTRL 0x01 : UInt8 { // Power Mode Control Register
    LPWUI, // Low Power Wake Up on Interrupt
    RUNM:2, // Run Mode Control
    1,
    STOPA, // Stop Aborted
    STOPM:3 // Stop Mode Control
  }


  STOPCTRL 0x02 : UInt8 { // VLLS Control Register
    PSTOPO:2,
    PORPO,
    RAM2PO,
    1,
    LLSM:3
  }


  PMSTAT 0x03 : UInt8 { // Power Mode Status Register
    HSRUN, VLLS, LLS, VLPS, VLPW, VLPR, STOP, RUN
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 17: Power Management Controller
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers PMC @at 0x4007_D000 {
  LVDSC1 0x00 : UInt8 { // Low Voltage Detect Status And Control 1 register
    LVDF,
    LVDACK,
    LVDIE,
    LVDRE,
    2,
    LVDV:2
  }

  LVDSC2 0x01 : UInt8 { // Low Voltage Detect Status And Control 2 register
    LVWF, // Low-Voltage Warning Flag
    LVWACK, // Low-Voltage Warning Acknowledge
    LVWIE, // Low-Voltage Warning Interrupt Enable
    3,
    LVWV:2 // Low-Voltage Warning Voltage Select
  }

  REGSC 0x02 : UInt8 { // Regulator Status And Control register
    3, BGEN, ACKISO, REGONS, BGBE, 1
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 18: Low-Leakage Wakeup Unit (LLWU)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers LLWU @at 0x4007_C000 {
  PE1  0x00 : UInt8 // LLWU Pin Enable 1 register
  PE2  0x01 : UInt8 // LLWU Pin Enable 2 register
  PE3  0x02 : UInt8 // LLWU Pin Enable 3 register
  PE4  0x03 : UInt8 // LLWU Pin Enable 4 register
  ME   0x04 : UInt8 // LLWU Module Enable register
  F1   0x05 : UInt8 // LLWU Flag 1 register
  F2   0x06 : UInt8 // LLWU Flag 2 register
  F3   0x07 : UInt8 // LLWU Flag 3 register
  FILT1 0x08 : UInt8 // LLWU Pin Filter 1 register
  FILT2 0x09 : UInt8 // LLWU Pin Filter 2 register
  RST  0x0A : UInt8 // LLWU Reset Enable register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 19: Miscellaneous Control Module (MCM)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers MCM @at 0xE008_0000 {
  PLASC 0x08 : UInt16 // Crossbar Switch (AXBS) Slave Configuration

  PLAMC 0x0A : UInt16 // Crossbar Switch (AXBS) Master Configuration

  CR 0x0C : UInt32 { // Crossbar Switch (AXBS) Control Register
    1,
    SRAMLWP, // SRAM_L write protect
    SRAMLAP:2, // SRAM_L priority, 0=RR, 1=favor DMA, 2=CPU, 3=DMA
    1,
    SRAMUWP, // SRAM_U write protect
    SRAMUAP:2,
    24
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 20: Crossbar Switch (AXBS)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers AXBS @at 0x4000_4000 {
  PRS0   0x000 : UInt32 // Priority Registers Slave 0
  PRS1   0x100 : UInt32 // Priority Registers Slave 1
  PRS2   0x200 : UInt32 // Priority Registers Slave 2
  PRS3   0x300 : UInt32 // Priority Registers Slave 3
  PRS4   0x400 : UInt32 // Priority Registers Slave 4
  PRS5   0x500 : UInt32 // Priority Registers Slave 5
  PRS6   0x600 : UInt32 // Priority Registers Slave 6
  PRS7   0x700 : UInt32 // Priority Registers Slave 7

  CRS0   0x010,        // Control registers 0
  CRS1   0x110,        // Control registers 1
  CRS2   0x210,        // Control registers 2
  CRS3   0x310,        // Control registers 3
  CRS4   0x410,        // Control registers 4
  CRS5   0x510,        // Control registers 5
  CRS6   0x610,        // Control registers 6
  CRS7   0x710 : UInt32 { // Control registers 7
    READONLY,
    HLP,
    20,
    ARB:2,
    2,
    PCTL:2,
    1,
    PARK:3
  }


  MGPCR0 0x800, // Master 0 General Purpose Control Register
  MGPCR1 0x900, // Master 1 General Purpose Control Register
  MGPCR2 0xA00, // Master 2 General Purpose Control Register
  MGPCR3 0xB00, // Master 3 General Purpose Control Register
  MGPCR4 0xC00, // Master 4 General Purpose Control Register
  MGPCR5 0xD00, // Master 5 General Purpose Control Register
  MGPCR6 0xE00, // Master 6 General Purpose Control Register
  MGPCR7 0xF00 : UInt32 { // Master 7 General Purpose Control Register
    29,
    AULB:3
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 21: Peripheral Bridge (AIPS-Lite)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers AIPS0 @at 0x_4000_0000 {
  MPRA 0x00 : UInt32

  //--- AICS0_PACR (§4.5.1 and §19.2, §19.2.2)
  // SPx: Determines whether the peripheral requires supervisor privilege level
  // for accesses. When this field is set, the master privilege level must indicate
  // the supervisor access attribute, and the MPR x [MPL n ] control field for the
  // master must be set. If not, access terminates with an error response and no
  // peripheral access initiates.
  // 0  This peripheral does not require supervisor privilege level for accesses.    // 1  This peripheral requires supervisor privilege level for accesses.    // WPx: Determines whether the peripheral allows write accessses. When this field
  // is set and a write access is attempted, access terminates with an error
  // response and no peripheral access initiates
  // 0  This peripheral allows write accesses.    // 1  This peripheral is write protected.    // TPx : Determines whether the peripheral allows accesses from an untrusted master.
  // When this bit is set and an access is attempted by an untrusted master, the
  // access terminates with an error response and no peripheral access initiates.
  // 0  Accesses from an untrusted master are allowed.    // 1  Accesses from an untrusted master are not allowed.  
  PACRA 0x20,
  PACRB 0x24,
  PACRC 0x28,
  PACRD 0x2C,
  PACRE 0x40,
  PACRF 0x44,
  PACRG 0x48,
  PACRH 0x4C,
  PACRI 0x50,
  PACRJ 0x54,
  PACRK 0x58,
  PACRL 0x5C,
  PACRM 0x60,
  PACRN 0x64,
  PACRO 0x68,
  PACRP 0x6C
  : UInt32 {
   1, SP0, WP0, TP0,
   1, SP1, WP1, TP1,
   1, SP2, WP2, TP2,
   1, SP3, WP3, TP3,
   1, SP4, WP4, TP4,
   1, SP5, WP5, TP5,
   1, SP6, WP6, TP6,
   1, SP7, WP7, TP7
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 22: Memory Protection Unit
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers MPU @at 0x4000_0000 {

//--- Region Descriptor Alternate Access Control n (0 ... 11)
  RGDAAC [16] 0xD800 @inc 4 : UInt32 {
    M7RE, M7WE, M6RE, M6WE, M5RE, M5WE, M4RE, M4WE, M3PE, M3SM:2, M3UM:3, M2PE, M2SM:2,
    M2UM:3, M1PE, M1SM:2, M1UM:3, M0PE, M0SM:2, M0UM:3
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 23: Direct Memory Access Multiplexer (DMAMUX)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let DMA_CHANNEL_COUNT = 32

registers DMAMUX @at 0x4002_1000 {
  CHCFG [DMA_CHANNEL_COUNT] 0x00 @inc 1 : UInt8 {
    ENABLE, TRIG, SOURCE:6
  }
}

let DMAMUX_SOURCE_TSI      : UInt6 = 1
let DMAMUX_SOURCE_UART0_RX : UInt6 = 2
let DMAMUX_SOURCE_UART0_TX : UInt6 = 3
let DMAMUX_SOURCE_UART1_RX : UInt6 = 4
let DMAMUX_SOURCE_UART1_TX : UInt6 = 5
let DMAMUX_SOURCE_UART2_RX : UInt6 = 6
let DMAMUX_SOURCE_UART2_TX : UInt6 = 7
let DMAMUX_SOURCE_UART3_RX : UInt6 = 8
let DMAMUX_SOURCE_UART3_TX : UInt6 = 9
let DMAMUX_SOURCE_UART4_RXTX : UInt6 = 10
let DMAMUX_SOURCE_I2S0_RX : UInt6 = 12
let DMAMUX_SOURCE_I2S0_TX : UInt6 = 13
let DMAMUX_SOURCE_SPI0_RX : UInt6 = 14
let DMAMUX_SOURCE_SPI0_TX : UInt6 = 15
let DMAMUX_SOURCE_SPI1_RX : UInt6 = 16
let DMAMUX_SOURCE_SPI1_TX : UInt6 = 17
let DMAMUX_SOURCE_I2C0 : UInt6 = 18
let DMAMUX_SOURCE_I2C3 : UInt6 = 18
let DMAMUX_SOURCE_I2C1 : UInt6 = 19
let DMAMUX_SOURCE_I2C2 : UInt6 = 19
let DMAMUX_SOURCE_FTM0_CH0 : UInt6 = 20
let DMAMUX_SOURCE_FTM0_CH1 : UInt6 = 21
let DMAMUX_SOURCE_FTM0_CH2 : UInt6 = 22
let DMAMUX_SOURCE_FTM0_CH3 : UInt6 = 23
let DMAMUX_SOURCE_FTM0_CH4 : UInt6 = 24
let DMAMUX_SOURCE_FTM0_CH5 : UInt6 = 25
let DMAMUX_SOURCE_FTM0_CH6 : UInt6 = 26
let DMAMUX_SOURCE_FTM0_CH7 : UInt6 = 27
let DMAMUX_SOURCE_FTM1_CH0 : UInt6 = 28
let DMAMUX_SOURCE_TPM1_CH0 : UInt6 = 28
let DMAMUX_SOURCE_FTM1_CH1 : UInt6 = 29
let DMAMUX_SOURCE_TPM1_CH1 : UInt6 = 29
let DMAMUX_SOURCE_FTM2_CH0 : UInt6 = 30
let DMAMUX_SOURCE_TPM2_CH0 : UInt6 = 30
let DMAMUX_SOURCE_FTM2_CH1 : UInt6 = 31
let DMAMUX_SOURCE_TPM2_CH1 : UInt6 = 31
let DMAMUX_SOURCE_FTM3_CH0 : UInt6 = 32
let DMAMUX_SOURCE_FTM3_CH1 : UInt6 = 33
let DMAMUX_SOURCE_FTM3_CH2 : UInt6 = 34
let DMAMUX_SOURCE_FTM3_CH3 : UInt6 = 35
let DMAMUX_SOURCE_FTM3_CH4 : UInt6 = 36
let DMAMUX_SOURCE_FTM3_CH5 : UInt6 = 37
let DMAMUX_SOURCE_FTM3_CH6 : UInt6 = 38
let DMAMUX_SOURCE_SPI2_RX : UInt6 = 38
let DMAMUX_SOURCE_FTM3_CH7 : UInt6 = 39
let DMAMUX_SOURCE_SPI2_TX : UInt6 = 39
let DMAMUX_SOURCE_ADC0 : UInt6 = 40
let DMAMUX_SOURCE_ADC1 : UInt6 = 41
let DMAMUX_SOURCE_CMP0 : UInt6 = 42
let DMAMUX_SOURCE_CMP1 : UInt6 = 43
let DMAMUX_SOURCE_CMP2 : UInt6 = 44
let DMAMUX_SOURCE_CMP3 : UInt6 = 44
let DMAMUX_SOURCE_DAC0 : UInt6 = 45
let DMAMUX_SOURCE_DAC1 : UInt6 = 46
let DMAMUX_SOURCE_CMT : UInt6 = 47
let DMAMUX_SOURCE_PDB : UInt6 = 48
let DMAMUX_SOURCE_PORTA : UInt6 = 49
let DMAMUX_SOURCE_PORTB : UInt6 = 50
let DMAMUX_SOURCE_PORTC : UInt6 = 51
let DMAMUX_SOURCE_PORTD : UInt6 = 52
let DMAMUX_SOURCE_PORTE : UInt6 = 53
let DMAMUX_SOURCE_IEEE1588_T0 : UInt6 = 54
let DMAMUX_SOURCE_IEEE1588_T1 : UInt6 = 55
let DMAMUX_SOURCE_FTM1_OV : UInt6 = 55
let DMAMUX_SOURCE_IEEE1588_T2 : UInt6 = 56
let DMAMUX_SOURCE_FTM2_OV : UInt6 = 56
let DMAMUX_SOURCE_IEEE1588_T3 : UInt6 = 57
let DMAMUX_SOURCE_LPUART0_RX : UInt6 = 58
let DMAMUX_SOURCE_LPUART0_TX : UInt6 = 59
let DMAMUX_SOURCE_ALWAYS0 : UInt6 = 60
let DMAMUX_SOURCE_ALWAYS1 : UInt6 = 61
let DMAMUX_SOURCE_ALWAYS2 : UInt6 = 62
let DMAMUX_SOURCE_ALWAYS3 : UInt6 = 63

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 24: Direct Memory Access Controller (eDMA)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let DMA_TCD_ATTR_SIZE_8BIT   : UInt4 = 0
let DMA_TCD_ATTR_SIZE_16BIT  : UInt4 = 1
let DMA_TCD_ATTR_SIZE_32BIT  : UInt4 = 2
let DMA_TCD_ATTR_SIZE_16BYTE : UInt4 = 4
let DMA_TCD_ATTR_SIZE_32BYTE : UInt4 = 5

registers DMA @at 0x4000_8000 {
  CR 0x00 : UInt32 {
    14,
    CX, // Cancel Transfer
    ECX, // Error Cancel Transfer
    5,
    GRP1PRI,
    1,
    GRP0PRI,
    EMLM, // Enable Minor Loop Mapping
    CLM, // Continuous Link Mode
    HALT, // Halt DMA Operations
    HOE, // Halt On Error
    ERGA, // Enable Round Robin Group Arbitration
    ERCA, // Enable Round Robin Channel Arbitration
    EDBG, // Enable Debug
    1
  }

  // Error Status Register
  ES  0x04 : UInt32 {
    VLD, 14, ECX, GPE, CPE, 1, ERRCHN:5,
    SAE, SOE, DAE, DOE, NCE, SGE, SBE, DBE
  }

  ERQ 0x0C : UInt32 { // Enable Request Register
   ERQ31, ERQ30, ERQ29, ERQ28, ERQ27, ERQ26, ERQ25, ERQ24,
   ERQ23, ERQ22, ERQ21, ERQ20, ERQ19, ERQ18, ERQ17, ERQ16,
   ERQ15, ERQ14, ERQ13, ERQ12, ERQ11, ERQ10, INT9,  ERQ8,
   ERQ7,  ERQ6,  ERQ5,  ERQ4,  ERQ3,  ERQ2,  ERQ1,  ERQ0
  }

  EEI 0x14 : UInt32 { // Enable Error Interrupt Register
   EEI31, EEI30, EEI29, EEI28, EEI27, EEI26, EEI25, EEI24,
   EEI23, EEI22, EEI21, EEI20, EEI19, EEI18, EEI17, EEI16,
   EEI15, EEI14, EEI13, EEI12, EEI11, EEI10, INT9,  EEI8,
   EEI7,  EEI6,  EEI5,  EEI4,  EEI3,  EEI2,  EEI1,  EEI0
  }

  CEEI 0x18 : UInt8 { // Clear Enable Error Interrupt Register
   NOP, CAAE, 1, CEEI:5
  }

  SEEI 0x19 : UInt8 { // Set Enable Error Interrupt Register
   NOP, SAAE, 1, SEEI:5
  }

  CERQ 0x1A : UInt8 { // Clear Enable Request Register
   NOP, CAER, 1, CERQ:5
  }

  SERQ 0x1B : UInt8 { // Set Enable Request Register
   NOP, SAER, 1, SERQ:5
  }

  CDNE 0x1C : UInt8 { // Clear DONE Status Bit Register
   NOP, CADN, 1, CDNE:5
  }

  SSRT 0x1D : UInt8 { // Set START Bit Register
   NOP, SAST, 2, SSRT :4
  }

  CERR 0x1E : UInt8 { // Clear Error Register
   NOP, CAEI, 1, CERR:5
  }

  CINT 0x1F : UInt8 { // Clear Interrupt Request Register
   NOP, CAIR, 1, CINT:5
  }

  INT 0x24 : UInt32 { // Interrupt Request Register
   INT31, INT30, INT29, INT28, INT27, INT26, INT25, INT24,
   INT23, INT22, INT21, INT20, INT19, INT18, INT17, INT16,
   INT15, INT14, INT13, INT12, INT11, INT10, INT9,  INT8,
   INT7,  INT6,  INT5,  INT4,  INT3,  INT2,  INT1,  INT0
  }

  ERR 0x2C : UInt32 { // Error Register
   ERR31, ERR30, ERR29, ERR28, ERR27, ERR26, ERR25, ERR24,
   ERR23, ERR22, ERR21, ERR20, ERR19, ERR18, ERR17, ERR16,
   ERR15, ERR14, ERR13, ERR12, ERR11, ERR10, ERR9,  ERR8,
   ERR7,  ERR6,  ERR5,  ERR4,  ERR3,  ERR2,  ERR1,  ERR0
  }

  HRS 0x34 : UInt32 { // Hardware Request Status Register
   HRS31, HRS30, HRS29, HRS28, HRS27, HRS26, HRS25, HRS24,
   HRS23, HRS22, HRS21, HRS20, HRS19, HRS18, HRS17, HRS16,
   HRS15, HRS14, HRS13, HRS12, HRS11, HRS10, HRS9,  HRS8,
   HRS7,  HRS6,  HRS5,  HRS4,  HRS3,  HRS2,  HRS1,  HRS0
  }

  // Enable Asynchronous Request in Stop registers
  EARS 0x44 : UInt32 {
   EDREQ_31, EDREQ_30, EDREQ_29, EDREQ_28, EDREQ_27, EDREQ_26, EDREQ_25, EDREQ_24,
   EDREQ_23, EDREQ_22, EDREQ_21, EDREQ_20, EDREQ_19, EDREQ_18, EDREQ_17, EDREQ_16,
   EDREQ_15, EDREQ_14, EDREQ_13, EDREQ_12, EDREQ_11, EDREQ_10, EDREQ_9,  EDREQ_8,
   EDREQ_7,  EDREQ_6,  EDREQ_5,  EDREQ_4,  EDREQ_3,  EDREQ_2,  EDREQ_1,  EDREQ_0
  }

  // Channel n Priority Register
  DCHPRI [DMA_CHANNEL_COUNT] 0x100 @inc 1 : UInt8 {
    ECP, DPA, 1, CHPRI:5
  }

  TCD_SADDR [DMA_CHANNEL_COUNT] 0x1000 @inc 32 : UInt32 // TCD Source Address

  TCD_SOFF [DMA_CHANNEL_COUNT] 0x1004 @inc 32 : Int16 // TCD Signed Source Address Offset

  TCD_ATTR [DMA_CHANNEL_COUNT] 0x1006 @inc 32 : UInt16 { // TCD Transfer Attributes
    SMOD :4, SSIZE :4, DMOD :4, DSIZE :4
  }

  // TCD Minor Byte Count (Minor Loop Disabled)
  TCD_NBYTES_MLNO [DMA_CHANNEL_COUNT] 0x1008 @inc 32 : UInt32

  // TCD Last Source Address Adjustment
  TCD_SLAST [DMA_CHANNEL_COUNT] 0x100C @inc 32 : Int32

  // TCD Destination Address
  TCD_DADDR [DMA_CHANNEL_COUNT] 0x1010 @inc 32 : UInt32

  // TCD Signed Destination Address Offset
  TCD_DOFF [DMA_CHANNEL_COUNT] 0x1014 @inc 32 : Int16

  // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
  TCD_CITER_ELINKNO [DMA_CHANNEL_COUNT] 0x1016 @inc 32 : UInt16 {
    ELINK, CITER:15
  }

  // TCD Last Destination Address Adjustment/Scatter Gather Address
  TCD_DLASTSGA [DMA_CHANNEL_COUNT] 0x1018 @inc 32 : Int32

  // TCD Control and Status
  TCD_CSR [DMA_CHANNEL_COUNT] 0x101C @inc 32 : UInt16 {
    BWC:2, 2, MAJORLINKCH :4,
    DONE, ACTIVE, MAJORLINK, ESG, DREQ, INTHALF, INTMAJOR, START
  }

  // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
  TCD_BITER_ELINKNO [DMA_CHANNEL_COUNT] 0x101E @inc 32 : UInt16 {
    ELINK, BITER:15
  }
}
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 25: External Watchdog Monitor (EWM)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers EWM_CTRL  *(volatile UInt8_t  *)0x40061000 // Control Register
//registers EWM_SERV  *(volatile UInt8_t  *)0x40061001 // Service Register
//registers EWM_CMPL  *(volatile UInt8_t  *)0x40061002 // Compare Low Register
//registers EWM_CMPH  *(volatile UInt8_t  *)0x40061003 // Compare High Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 26: Watchdog Timer (WDOG)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers WDOG @at 0x4005_2000 {
  STCTRLH 0x00 : UInt16 { // Watchdog Status and Control registers High
    1,
    WDOG_STCTRLH_DISTESTWDOG,  // Allows the WDOG's functional test mode to be disabled permanently.
    BYTESEL:2, // selects the byte to be tested when the watchdog is in the byte test mode.
    TESTSEL,
    TESTWDOG,
    2,
    WAITEN,
    STOPEN,
    DBGEN,
    ALLOWUPDATE,
    WINEN,
    IRQRSTEN,
    CLKSRC,
    WDOGEN
  }


  STCTRLL  0x02 : UInt16 // Watchdog Status and Control registers Low
  TOVALH   0x04 : UInt16 // Watchdog Time-out Value registers High
  TOVALL   0x06 : UInt16 // Watchdog Time-out Value registers Low
  WINH     0x08 : UInt16 // Watchdog Window registers High
  WINL     0x0A : UInt16 // Watchdog Window registers Low
  REFRESH  0x0C : UInt16 // Watchdog Refresh register

  UNLOCK   0x0E : UInt16 // Watchdog Unlock register

  TMROUTH  0x10 : UInt16 // Watchdog Timer Output registers High
  TMROUTL  0x12 : UInt16 // Watchdog Timer Output registers Low
  RSTCNT   0x14 : UInt16 // Watchdog Reset Count register
  PRESC    0x16 : UInt16 // Watchdog Prescaler register
}

let WDOG_UNLOCK_SEQ1 : UInt16   = 0xC520
let WDOG_UNLOCK_SEQ2 : UInt16   = 0xD928

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 27: Multipurpose Clock Generator (MCG)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers MCG @at 0x4006_4000 {
  C1 0x00 : UInt8 { // MCG Control 1 Register
    CLKS:2, // Clock Source Select, Selects the clock source for MCGOUTCLK
    FRDIV:3, // FLL External Reference Divider, Selects the amount to divide down the external reference clock for the FLL
    IREFS, // Internal Reference Select, Selects the reference clock source for the FLL
    IRCLKEN, // Internal Reference Clock Enable, Enables the internal reference clock for use as MCGIRCLK
    IREFSTEN // Internal Reference Stop Enable, Controls whether or not the internal reference clock remains enabled when the MCG enters Stop mode
  }

  C2 0x01 : UInt8 { // MCG Control 2 Register
    LOCRE0, // Loss of Clock Reset Enable, Determines whether an interrupt
            // or a reset request is made following a loss of OSC0
    1,
    RANGE0:2, // Frequency Range Select, Selects the frequency range
               // for the crystal oscillator
    HGO0, // High Gain Oscillator Select, Controls the crystal oscillator mode of operation
    EREFS, // External Reference Select, selects the source for the external reference clock
    LP, // Low Power Select, Controls whether the FLL or PLL is disabled in BLPI and BLPE modes.
    IRCS // Internal Reference Clock Select, Selects between the fast or slow internal reference clock source.
  }

  C3 0x02 : UInt8 // MCG Control 3 Register
  //registers MCG_C3_SCTRIM(n)  (UInt8_t)(n)   // Slow Internal Reference Clock Trim Setting

  C4 0x03 : UInt8 { // MCG Control 4 Register
    DMX32, // DCO Maximum Frequency with 32.768 kHz Reference, controls whether the DCO frequency range is narrowed
    DRST_DRS:2, // Fast Internal Reference Clock Trim Setting
    FCTRIM :4, // DCO Range Select
    SCFTRIM // Slow Internal Reference Clock Fine Trim
  }

//--- MCG Control 5 Register
  C5 0x04 : UInt8 {
    1,
    PLLCLKEN, // PLL Clock Enable
    PLLSTEN,  // PLL Stop Enable
    2,
    PRDIV:3 // PLL External Reference Divider
  }

//--- MCG Control 6 Register
  C6 0x05 : UInt8 {
    LOLIE0, // Loss of Lock Interrrupt Enable
    PLLS, // PLL Select, Controls whether the PLL or FLL output is selected as the MCG source when CLKS[1:0]=00
    CME0,   // Clock Monitor Enable
    VDIV:5 // VCO 0 Divider
  }

//--- MCG Status Register
  S @ro 0x06 : UInt8 {
    LOLS0, // Loss of Lock Status
    LOCK0, // Lock Status, 0=PLL Unlocked, 1=PLL Locked
    PLLST, // PLL Select Status
    IREFST, // Internal Reference Status
    CLKST:2, // Clock Mode Status, 0=FLL is selected, 1= Internal ref, 2=External ref, 3=PLL
    OSCINIT0, // OSC Initialization, resets to 0, is set to 1 after the initialization cycles of the crystal oscillator
    IRCST   // Internal Reference Clock Status
  }

  SC 0x08 : UInt8 { // MCG Status and Control Register
    ATME, // Automatic Trim Machine Enable
    ATMS, // Automatic Trim Machine Select
    ATMF, // Automatic Trim Machine Fail Flag
    FLTPRSRV, // FLL Filter Preserve Enable
    FCRDIV:3, // Fast Clock Internal Reference Divider
    LOCS0 // OSC0 Loss of Clock Status
  }

  ATCVH 0x0A : UInt8 // MCG Auto Trim Compare Value High Register
  ATCVL 0x0B : UInt8 // MCG Auto Trim Compare Value Low Register
  C7    0x0C : UInt8 // MCG Control 7 Register
  C8    0x0D : UInt8 // MCG Control 8 Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 28: Oscillator (OSC)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers OSC @at 0x4006_5000 {
  CR 0x00 : UInt8 {// OSC Control Register
    ERCLKEN, // External Reference Enable, Enables external reference clock (OSCERCLK)
    1,
    EREFSTEN, // External Reference Stop Enable, Controls whether or not
              // the external reference clock (OSCERCLK) remains enabled when
              // MCU enters Stop mode.
    1,
    SC2P, // Oscillator 2 pF Capacitor Load Configure
    SC4P, // Oscillator 4 pF Capacitor Load Configure
    SC8P, // Oscillator 8 pF Capacitor Load Configure
    SC16P // Oscillator 16 pF Capacitor Load Configure
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 30: Local Memory Controller
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers LMEM @at 0xE008_2000 {
  PCCCR 0x00 : UInt32 { // Cache control register
    GO,
    3,
    PUSHW1,
    INVW1,
    PUSHW0,
    INVW0,
    20,
    PCCR3,
    PCCR2,
    ENWRBUF,
    ENCACHE
  }

  PCCLCR 0x04 : UInt32 // Cache line control register
  PCCSAR 0x08 : UInt32 // Cache search address register
  PCCCVR 0x0C : UInt32 // Cache read/write value register
  PCCRMR 0x20 : UInt32 // Cache regions mode register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 31: Flash Memory Controller (FMC)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers FMC @at 0x4001_F000 {
  PFAPR     0x000 : UInt32 // Flash Access Protection
  PFB0CR    0x004 : UInt32 // Flash Control
  TAGVDW0S0 0x100 : UInt32 // Cache Tag Storage
  TAGVDW0S1 0x104 : UInt32 // Cache Tag Storage
  TAGVDW1S0 0x108 : UInt32 // Cache Tag Storage
  TAGVDW1S1 0x10C : UInt32 // Cache Tag Storage
  TAGVDW2S0 0x110 : UInt32 // Cache Tag Storage
  TAGVDW2S1 0x114 : UInt32 // Cache Tag Storage
  TAGVDW3S0 0x118 : UInt32 // Cache Tag Storage
  TAGVDW3S1 0x11C : UInt32 // Cache Tag Storage
  DATAW0S0  0x200 : UInt32 // Cache Data Storage
  DATAW0S1  0x204 : UInt32 // Cache Data Storage
  DATAW1S0  0x208 : UInt32 // Cache Data Storage
  DATAW1S1  0x20C : UInt32 // Cache Data Storage
  DATAW2S0  0x210 : UInt32 // Cache Data Storage
  DATAW2S1  0x214 : UInt32 // Cache Data Storage
  DATAW3S0  0x218 : UInt32 // Cache Data Storage
  DATAW3S1  0x21C : UInt32 // Cache Data Storage
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 32: Flash Memory Module (FTFL)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers FTFL_FST *(volatile UInt8_t  *)0x40020000      // Flash Status Register
//registers FTFL_FSTAT_CCIF   (UInt8_t)0x80   // Command Complete Interrupt Flag
//registers FTFL_FSTAT_RDCOLERR  (UInt8_t)0x40   // Flash Read Collision Error Flag
//registers FTFL_FSTAT_ACCERR  (UInt8_t)0x20   // Flash Access Error Flag
//registers FTFL_FSTAT_FPVIOL  (UInt8_t)0x10   // Flash Protection Violation Flag
//registers FTFL_FSTAT_MGSTAT0  (UInt8_t)0x01   // Memory Controller Command Completion Status Flag
//registers FTFL_FCNFG  *(volatile UInt8_t  *)0x40020001      // Flash Configuration Register
//registers FTFL_FCNFG_CCIE   (UInt8_t)0x80   // Command Complete Interrupt Enable
//registers FTFL_FCNFG_RDCOLLIE  (UInt8_t)0x40   // Read Collision Error Interrupt Enable
//registers FTFL_FCNFG_ERSAREQ  (UInt8_t)0x20   // Erase All Request
//registers FTFL_FCNFG_ERSSUSP  (UInt8_t)0x10   // Erase Suspend
//registers FTFL_FCNFG_PFLSH  (UInt8_t)0x04   // Flash memory configuration
//registers FTFL_FCNFG_RAMRDY  (UInt8_t)0x02   // RAM Ready
//registers FTFL_FCNFG_EEERDY  (UInt8_t)0x01   // EEPROM Ready
//registers FTFL_FSEC  *(const    UInt8_t  *)0x40020002      // Flash Security Register
//registers FTFL_FOPT  *(const    UInt8_t  *)0x40020003      // Flash Option Register
//registers FTFL_FCCOB3  *(volatile UInt8_t  *)0x40020004      // Flash Common Command Object Registers
//registers FTFL_FCCOB2  *(volatile UInt8_t  *)0x40020005
//registers FTFL_FCCOB1  *(volatile UInt8_t  *)0x40020006
//registers FTFL_FCCOB0  *(volatile UInt8_t  *)0x40020007
//registers FTFL_FCCOB7  *(volatile UInt8_t  *)0x40020008
//registers FTFL_FCCOB6  *(volatile UInt8_t  *)0x40020009
//registers FTFL_FCCOB5  *(volatile UInt8_t  *)0x4002000A
//registers FTFL_FCCOB4  *(volatile UInt8_t  *)0x4002000B
//registers FTFL_FCCOBB  *(volatile UInt8_t  *)0x4002000C
//registers FTFL_FCCOBA  *(volatile UInt8_t  *)0x4002000D
//registers FTFL_FCCOB9  *(volatile UInt8_t  *)0x4002000E
//registers FTFL_FCCOB8  *(volatile UInt8_t  *)0x4002000F
//registers FTFL_FPROT3  *(volatile UInt8_t  *)0x40020010      // Program Flash Protection Registers
//registers FTFL_FPROT2  *(volatile UInt8_t  *)0x40020011      // Program Flash Protection Registers
//registers FTFL_FPROT1  *(volatile UInt8_t  *)0x40020012      // Program Flash Protection Registers
//registers FTFL_FPROT0  *(volatile UInt8_t  *)0x40020013      // Program Flash Protection Registers
//registers FTFL_FEPROT  *(volatile UInt8_t  *)0x40020016      // EEPROM Protection Register
//registers FTFL_FDPROT  *(volatile UInt8_t  *)0x40020017      // Data Flash Protection Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 36: Cyclic Redundancy Check (CRC)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers CRC @at 0x4003_2000 {
  CRC   0x00 : UInt32 // CRC Data register
  GPOLY 0x04 : UInt32 // CRC Polynomial register
  CTRL  0x08 : UInt32 // CRC Control register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 39: Analog-to-Digital Converter (ADC)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ADC0 @at 0x4003_B000 {
  SC1A 0x00, SC1B 0x04 : UInt32  {// ADC status and control registers 1
    24,
    COCO, // Conversion complete flag
    AIEN, // Interrupt enable
    DIFF, // Differential mode enable
    ADCH:5 // Input channel select
  }

  CFG1 0x08 : UInt32 { // ADC configuration registers 1
    24,
    ADLPC, // Low-power configuration
    ADIV:2, // Clock divide select, 0=direct, 1=div2, 2=div4, 3=div8
    ADLSMP, // Sample time configuration, 0=Short, 1=Long
    MODE:2, // Conversion mode, 0=8 bit, 1=12 bit, 2=10 bit, 3=16 bit
    ADICLK:2 // Input clock, 0=bus, 1=bus/2, 2=OSCERCLK, 3=async
  }

  CFG2  0x0C : UInt32 { // Configuration registers 2
    27,
    MUXSEL,  // 0=a channels, 1=b channels
    ADACKEN,   // async clock enable
    ADHSC, // High speed configuration
    ADLSTS:2 // Sample time, 0=24 cycles, 1=12 cycles, 2=6 cycles, 3=2 cycles
  }

  RA    0x10 : UInt32 // ADC data result register

  RB    0x14 : UInt32 // ADC data result register

  CV1   0x18 : UInt32 // Compare value registers

  CV2   0x1C : UInt32 // Compare value registers

  SC2 0x20 : UInt32 { // Status and control registers 2
    24,
    ADACT,  // Conversion active
    ADTRG,  // Conversion trigger select, 0=software, 1=hardware
    ACFE,   // Compare function enable
    ACFGT,  // Compare function greater than enable
    ACREN,  // Compare function range enable
    DMAEN,  // DMA enable
    REFSEL:2 // Voltage reference, 0=vcc/external, 1=1.2 volts
  }

  SC3 0x24 : UInt32 { // Status and control registers 3
    24,
    CAL,   // Calibration, 1=begin, stays set while cal in progress
    CALF,  // Calibration failed flag
    2,
    ADCO,  // Continuous conversion enable
    AVGE,  // Hardware average enable
    AVGS:2 // avg select, 0=4 samples, 1=8 samples, 2=16 samples, 3=32 samples
  }

  OFS   0x28 : UInt32 // ADC offset correction register

  PG    0x2C : UInt32 // ADC plus-side gain register

  MG    0x30 : UInt32 // ADC minus-side gain register

  CLPD  0x34 : UInt32 // ADC plus-side general calibration value register

  CLPS  0x38 : UInt32 // ADC plus-side general calibration value register

  CLP4  0x3C : UInt32 // ADC plus-side general calibration value register

  CLP3  0x40 : UInt32 // ADC plus-side general calibration value register

  CLP2  0x44 : UInt32 // ADC plus-side general calibration value register

  CLP1  0x48 : UInt32 // ADC plus-side general calibration value register

  CLP0  0x4C : UInt32 // ADC plus-side general calibration value register

  CLMD   0x54 : UInt32 // ADC minus-side general calibration value register

  CLMS   0x58 : UInt32 // ADC minus-side general calibration value register

  CLM4   0x5C : UInt32 // ADC minus-side general calibration value register

  CLM3   0x60 : UInt32 // ADC minus-side general calibration value register

  CLM2   0x64 : UInt32 // ADC minus-side general calibration value register

  CLM1   0x68 : UInt32 // ADC minus-side general calibration value register

  CLM0   0x6C : UInt32 // ADC minus-side general calibration value register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers ADC1 @at 0x400B_B000 {
  SC1A   0x00 : UInt32 // ADC status and control registers 1

  SC1B   0x04 : UInt32 // ADC status and control registers 1

  CFG1   0x08 : UInt32 // ADC configuration registers 1

  CFG2   0x0C : UInt32 // Configuration registers 2

  RA     0x10 : UInt32 // ADC data result register

  RB     0x14 : UInt32 // ADC data result register

  CV1    0x18 : UInt32 // Compare value registers

  CV2    0x1C : UInt32 // Compare value registers

  SC2    0x20 : UInt32 // Status and control registers 2

  SC3    0x24 : UInt32 // Status and control registers 3

  OFS    0x28 : UInt32 // ADC offset correction register

  PG     0x2C : UInt32 // ADC plus-side gain register

  MG     0x30 : UInt32 // ADC minus-side gain register

  CLPD   0x34 : UInt32 // ADC plus-side general calibration value register

  CLPS   0x38 : UInt32 // ADC plus-side general calibration value register

  CLP4   0x3C : UInt32 // ADC plus-side general calibration value register

  CLP3   0x40 : UInt32 // ADC plus-side general calibration value register

  CLP2   0x44 : UInt32 // ADC plus-side general calibration value register

  CLP1   0x48 : UInt32 // ADC plus-side general calibration value register

  CLP0   0x4C : UInt32 // ADC plus-side general calibration value register

  PGA    0x50 : UInt32 // ADC Programmable Gain Amplifier

  CLMD   0x54 : UInt32 // ADC minus-side general calibration value register

  CLMS   0x58 : UInt32 // ADC minus-side general calibration value register

  CLM4   0x5C : UInt32 // ADC minus-side general calibration value register

  CLM3   0x60 : UInt32 // ADC minus-side general calibration value register

  CLM2   0x64 : UInt32 // ADC minus-side general calibration value register

  CLM1   0x68 : UInt32 // ADC minus-side general calibration value register

  CLM0   0x6C : UInt32 // ADC minus-side general calibration value register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 40: Comparator (CMP)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers CMP0 @at 0x4007_3000 {
  CR0   0x00 : UInt8 // CMP Control registers 0
  CR1   0x01 : UInt8 // CMP Control registers 1
  FPR   0x02 : UInt8 // CMP Filter Period Register
  SCR   0x03 : UInt8 // CMP Status and Control Register
  DACCR 0x04 : UInt8 // DAC Control Register
  MUXCR 0x05 : UInt8 // MUX Control Register
}

registers CMP1 @at 0x4007_3000 {
  CR0   0x08 : UInt8 // CMP Control registers 0
  CR1   0x09 : UInt8 // CMP Control registers 1
  FPR   0x0A : UInt8 // CMP Filter Period Register
  SCR   0x0B : UInt8 // CMP Status and Control Register
  DACCR 0x0C : UInt8 // DAC Control Register
  MUXCR 0x0D : UInt8 // MUX Control Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 41: 12-bit Digital-to-Analog Converter (DAC)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers DAC0 @at 0x400C_C000 {
  DAT0L 0x00 : UInt8 // DAC Data Low registers

  DATH  0x01 : UInt8 // DAC Data High registers

  DAT1L 0x02 : UInt8 // DAC Data Low registers

  DAT2L 0x04 : UInt8 // DAC Data Low registers

  DAT3L 0x06 : UInt8 // DAC Data Low registers

  DAT4L 0x08 : UInt8 // DAC Data Low registers

  DAT5L 0x0A : UInt8 // DAC Data Low registers

  DAT6L 0x0C : UInt8 // DAC Data Low registers

  DAT7L 0x0E : UInt8 // DAC Data Low registers

  DAT8L 0x10 : UInt8 // DAC Data Low registers

  DAT9L 0x12 : UInt8 // DAC Data Low registers

  DAT10L 0x14 : UInt8 // DAC Data Low registers

  DAT11L 0x16 : UInt8 // DAC Data Low registers

  DAT12L 0x18 : UInt8 // DAC Data Low registers

  DAT13L 0x1A : UInt8 // DAC Data Low registers

  DAT14L 0x1C : UInt8 // DAC Data Low registers

  DAT15L 0x1E : UInt8 // DAC Data Low registers

  SR     0x20 : UInt8 // DAC Status registers

  C0     0x21 : UInt8 { // DAC Control registers
    DACEN,    // DAC Enable
    DACRFS,   // DAC Reference Select
    DACTRGSEL,// DAC Trigger Select
    DACSWTRG, // DAC Software Trigger
    LPEN,     // DAC Low Power Control
    DACBWIEN, // DAC Buffer Watermark Interrupt Enable
    DACBTIEN, // DAC Buffer Read Pointer Top Flag Interrupt Enable
    DACBBIEN  // DAC Buffer Read Pointer Bottom Flag Interrupt Enable
  }

  C1  0x22 : UInt8 { // DAC Control registers 1
    DMAEN,    // DMA Enable Select
    2,
    DACBFWM:2,  // DAC Buffer Watermark Select
    DACBFMD:2,  // DAC Buffer Work Mode Select
    DACBFEN // DAC Buffer Enable
  }

  C2  0x23 : UInt8 // DAC Control registers 2
}
//registers DAC_C2_DACBFRP(n)  (((n) & 15) << 4)  // DAC Buffer Read Pointer
//registers DAC_C2_DACBFUP(n)  (((n) & 15) << 0)  // DAC Buffer Upper Limit
//
//
////registers MCG_C2_RANGE0(n)  (UInt8_t)(((n) & 0x03) << 4) // Frequency Range Select, Selects the frequency range for the crystal oscillator
////registers MCG_C2_LOCRE0   (UInt8_t)0x80   // Loss of Clock Reset Enable, Determines whether an interrupt or a reset request is made following a loss of OSC0

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 42: Voltage Reference (VREFV1)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers VREF @at 0x4007_4000 {
  TRM  0x00 : UInt8 // VREF Trim Register
  SC   0x01 : UInt8 // VREF Status and Control Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 43: Timer / PWM Module (TPM)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers TPM1 @at 0x400C_9000 {
  SC      0x00 : UInt32 {23, DMA, TOF, TOIE, CPWMS, CMOD:2, PS:3}
  CNT     0x04 : UInt32 {16, COUNT:16}
  MOD     0x08 : UInt32 {16, MOD:16}
  C0SC    0x0C : UInt32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}
  C0V     0x10 : UInt32 {16, VAL:16}
  C1SC    0x14 : UInt32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}
  C1V     0x18 : UInt32 {16, VAL:16}
  STATUS  0x50 : UInt32 {23, TOF, 6, CH1F, CH0F}
  COMBINE 0x64 : UInt32 {30, COMSWAP0, COMBINE0}
  POL     0x70 : UInt32 {30, POL1, POL0}
  FILTER  0x78 : UInt32 {24, CH1FVAL :4, CH0FVAL :4}
  QDCTRL  0x80 : UInt32 {28, QUADMODE, QUADIR, TOFDIR, QUADEN}
  CONF    0x84 : UInt32 {
    4, TRGSEL :4, TRGSRC, TRGPOL, 2, CPOT, CROT, CSOO,
    CSOT, 6, GTBEEN, GTBSYNC, DBGMODE:2, DOZEEN, 5
  }
}

//······················································································································

registers TPM2 @at 0x400C_A000 {
  SC      0x00 : UInt32 {23, DMA, TOF, TOIE, CPWMS, CMOD:2, PS:3}
  CNT     0x04 : UInt32 {16, COUNT:16}
  MOD     0x08 : UInt32 {16, MOD:16}
  C0SC    0x0C : UInt32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}
  C0V     0x10 : UInt32 {16, VAL:16}
  C1SC    0x14 : UInt32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}
  C1V     0x18 : UInt32 {16, VAL:16}
  STATUS  0x50 : UInt32 {23, TOF, 6, CH1F, CH0F}
  COMBINE 0x64 : UInt32 {30, COMSWAP0, COMBINE0}
  POL     0x70 : UInt32 {30, POL1, POL0}
  FILTER  0x78 : UInt32 {24, CH1FVAL :4, CH0FVAL :4}
  QDCTRL  0x80 : UInt32 {28, QUADMODE, QUADIR, TOFDIR, QUADEN}
  CONF    0x84 : UInt32 {
    4, TRGSEL :4, TRGSRC, TRGPOL, 2, CPOT, CROT, CSOO,
    CSOT, 6, GTBEEN, GTBSYNC, DBGMODE:2, DOZEEN, 5
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 44: Programmable Delay Block (PDB)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers PDB0_SC    0x40036000 // Status and Control Register
//registers PDB_SC_LDMOD(n)   (((n) & 3) << 18) // Load Mode Select
//registers PDB_SC_PDBEIE   0x00020000  // Sequence Error Interrupt Enable
//registers PDB_SC_SWTRIG   0x00010000  // Software Trigger
//registers PDB_SC_DMAEN   0x00008000  // DMA Enable
//registers PDB_SC_PRESCALER(n)  (((n) & 7) << 12) // Prescaler Divider Select
//registers PDB_SC_TRGSEL(n)  (((n) & 15) << 8) // Trigger Input Source Select
//registers PDB_SC_PDBEN   0x00000080  // PDB Enable
//registers PDB_SC_PDBIF   0x00000040  // PDB Interrupt Flag
//registers PDB_SC_PDBIE   0x00000020  // PDB Interrupt Enable.
//registers PDB_SC_MULT(n)   (((n) & 3) << 2) // Multiplication Factor
//registers PDB_SC_CONT   0x00000002  // Continuous Mode Enable
//registers PDB_SC_LDOK   0x00000001  // Load OK
//registers PDB0_MOD   0x40036004 // Modulus Register
//registers PDB0_CNT   0x40036008 // Counter Register
//registers PDB0_IDLY   0x4003600C // Interrupt Delay Register
//registers PDB0_CH0C1   0x40036010 // Channel n Control registers 1
//registers PDB0_CH0S   0x40036014 // Channel n Status Register
//registers PDB0_CH0DLY0   0x40036018 // Channel n Delay 0 Register
//registers PDB0_CH0DLY1   0x4003601C // Channel n Delay 1 Register
//registers PDB0_POEN   0x40036190 // Pulse-Out n Enable Register
//registers PDB0_PO0DLY   0x40036194 // Pulse-Out n Delay Register
//registers PDB0_PO1DLY   0x40036198 // Pulse-Out n Delay Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 45: FlexTimer Module (FTM)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Base address
//  FTM0: 0x4003_8000
//  FTM1: 0x4003_9000
//  FTM2: 0x4003_A000
//  FTM3: 0x400B_9000 <--- CAUTION

registers FTM @at [0x4003_8000, 0x4003_9000, 0x4003_A000, 0x400B_9000] {
  SC 0x00 : UInt32 {24, TOF, TOIE, CPWMS, CLKS:2, PS:3}

  CNT 0x04 : UInt32 {16, COUNT:16}

  MOD 0x08 : UInt32 {16, MOD:16}

  C0SC 0x0C : UInt32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C0V  0x10 : UInt32 {16, VAL:16}

  C1SC 0x14 : UInt32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C1V  0x18 : UInt32 {16, VAL:16}

  C2SC 0x1C : UInt32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C2V  0x20 : UInt32 {16, VAL:16}

  C3SC 0x24 : UInt32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C3V  0x28 : UInt32 {16, VAL:16}

  C4SC 0x2C : UInt32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C4V  0x30 : UInt32 {16, VAL:16}

  C5SC 0x34 : UInt32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C5V  0x38 : UInt32 {16, VAL:16}

  C6SC 0x3C : UInt32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C6V  0x40 : UInt32 {16, VAL:16}

  C7SC 0x44 : UInt32 {24, CHF, CHIE, MSB, MSA, ELSB, ELSA, 1, DMA}

  C7V  0x48 : UInt32 {16, VAL:16}

  CNTIN  0x4C : UInt32 {16, INIT:16}

  STATUS 0x50 : UInt32 {24, CH7F, CH6F, CH5F, CH4F, CH3F, CH2F, CH1F, CH0F}

  MODE 0x54 : UInt32 {24, FAULTIE, FAULTM:2, CAPTEST, PWMSYNC, WPDIS, INIT, FTMEN}

  SYNC 0x58 : UInt32 {24, SWSYNC, TRIG2, TRG1, TRIG0, SYNCHOM, REINIT, CNTMAX, CNTMIN}

  OUTINIT 0x5C : UInt32 {24, CH7OI, CH6OI, CH5OI, CH4OI, CH3OI, CH2OI, CH1OI, CH0OI}

  MASK 0x60 : UInt32 {24, CH7OM, CH6OM, CH5OM, CH4OM, CH3OM, CH2OM, CH1OM, CH0OM}

  COMBINE 0x64 : UInt32 {
    1, FAULTEN3, SYNCEN3, DTEN3, DECAP3, DECAPEN3, COMP3, COMBINE3,
    1, FAULTEN2, SYNCEN2, DTEN2, DECAP2, DECAPEN2, COMP2, COMBINE2,
    1, FAULTEN1, SYNCEN1, DTEN1, DECAP1, DECAPEN1, COMP1, COMBINE1,
    1, FAULTEN0, SYNCEN0, DTEN0, DECAP0, DECAPEN0, COMP0, COMBINE0
  }

  DEADTIME 0x68 : UInt32 {24, DTPS:2, DTVAL:6}

  EXTTRIG 0x6C : UInt32 {
    24, TRIGF, INITTRIGEN, CH1TRIG, CH0TRIG, CH5TRIG, CH4TRIG, CH3TRIG, CH2TRIG
  }

  POL 0x70 : UInt32 {24, POL7, POL6, POL5, POL4, POL3, POL2, POL1, POL0}

  FMS 0x74 : UInt32 {24, FAULTF, WPEN, FAULTIN, 1, FAULTF3, FAULTF2, FAULTF1, FAULTF0}

  FILTER 0x78 : UInt32 {16, CH3FVAL:4, CH2FVAL:4, CH1FVAL:4, CH0FVAL:4}

  FLTCTRL 0x7C : UInt32 {
    20, FFVAL:4, FFLTR3EN, FFLTR2EN, FFLTR1EN, FFLTR0EN, FAULT3EN, FAULT2EN, FAULT1EN, FAULT0EN
  }

  QDCTRL 0x80 : UInt32 {24, PHALTREN, PHBFLTREN, PHAPOL, PHBPOL, QUADMODE, QUADIR, TOFDIR, QUADEN}

  CONF 0x84 : UInt32 {21, GTBEOUT, GTBEEN, 1, BDMMODE:2, 1, NUMTOF:5}

  FLTPOL 0x88 : UInt32 {28, FLT3POL, FLT2POL, FLT1POL, FLT0POL}

  SYNCCONF 0x8C : UInt32 {
    11, HWSOC, HWINVC, HWOM, HWWRBUF, HWRSTCNT,
    3, SWSOC, SWINVC, SWOM, SWWRBUF, SWRSTCNT, SYNCMODE, 1, SWOC, INVC, 1, CNTINC, 1, HWTRIGMODE
  }

  INVCTRL 0x90 : UInt32 {28, INV3EN, INV2EN, INV1EN, INV0EN}

  SWOCTRL 0x94 : UInt32 {
    16,
    CH7OCV, CH6OCV, CH5OCV, CH4OCV, CH3OCV, CH2OCV, CH1OCV, CH0OCV,
    CH7OC, CH6OC, CH5OC, CH4OC, CH3OC, CH2OC, CH1OC, CH0OC
  }

  PMWLOAD 0x98 : UInt32 {
    22, LDOK, 1, CH7SEL, CH6SEL, CH5SEL, CH4SEL, CH3SEL, CH2SEL, CH1SEL, CH0SEL
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 46: Periodic Interrupt Timer (PIT)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let PIT_COUNT = 4

registers PIT @at 0x4003_7000 {
  MCR 0x00 : UInt32 {30, MDIS, FRZ}

  // PIT Lifetime Timer Registers
  LTMR64H @ro 0xE0 : UInt32
  LTMR64L @ro 0xE4 : UInt32

  // Timer Load Value Register
  LDVAL [PIT_COUNT] 0x100 @inc 16 : UInt32

  // Current Timer Value Register
  LCVAL [PIT_COUNT] 0x104 @inc 16 : UInt32

  // Timer Control Register
  TCTRL [PIT_COUNT] 0x108 @inc 16 : UInt32 {29, CHN, TIE, TEN}

  // Timer Flag Register
  TFLG [PIT_COUNT] 0x10C @inc 16 : UInt32 {31, TIF}

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 47: Low-Power Timer (LPTMR)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers LPTMR0_CSR   0x40040000 // Low Power Timer Control Status Register
//registers LPTMR0_PSR   0x40040004 // Low Power Timer Prescale Register
//registers LPTMR0_CMR   0x40040008 // Low Power Timer Compare Register
//registers LPTMR0_CNR   0x4004000C // Low Power Timer Counter Register
//
////! Chapter 38: Carrier Modulator Transmitter (CMT)
//registers CMT_CGH1  *(volatile UInt8_t  *)0x40062000 // CMT Carrier Generator High Data registers 1
//registers CMT_CGL1  *(volatile UInt8_t  *)0x40062001 // CMT Carrier Generator Low Data registers 1
//registers CMT_CGH2  *(volatile UInt8_t  *)0x40062002 // CMT Carrier Generator High Data registers 2
//registers CMT_CGL2  *(volatile UInt8_t  *)0x40062003 // CMT Carrier Generator Low Data registers 2
//registers CMT_OC   *(volatile UInt8_t  *)0x40062004 // CMT Output Control Register
//registers CMT_MSC   *(volatile UInt8_t  *)0x40062005 // CMT Modulator Status and Control Register
//registers CMT_CMD1  *(volatile UInt8_t  *)0x40062006 // CMT Modulator Data registers Mark High
//registers CMT_CMD2  *(volatile UInt8_t  *)0x40062007 // CMT Modulator Data registers Mark Low
//registers CMT_CMD3  *(volatile UInt8_t  *)0x40062008 // CMT Modulator Data registers Space High
//registers CMT_CMD4  *(volatile UInt8_t  *)0x40062009 // CMT Modulator Data registers Space Low
//registers CMT_PPS   *(volatile UInt8_t  *)0x4006200A // CMT Primary Prescaler Register
//registers CMT_DMA   *(volatile UInt8_t  *)0x4006200B // CMT Direct Memory Access Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 49: Real Time Clock (RTC)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers RTC @at 0x4003_D000 {
  TSR  0x00 : UInt32 // RTC Time Seconds Register
  TPR  0x04 : UInt32 // RTC Time Prescaler Register
  TAR  0x08 : UInt32 // RTC Time Alarm Register
  TCR  0x0C : UInt32 // RTC Time Compensation Register
  //registers RTC_TCR_CIC(n)   (((n) & 255) << 24)  // Compensation Interval Counter
  //registers RTC_TCR_TCV(n)   (((n) & 255) << 16)  // Time Compensation Value
  //registers RTC_TCR_CIR(n)   (((n) & 255) << 8)  // Compensation Interval Register
  //registers RTC_TCR_TCR(n)   (((n) & 255) << 0)  // Time Compensation Register

  CR  0x10 : UInt32 {// RTC Control Register
    18, SC2P, SC4P, SC8P, SC16P, CKLO, OSCE, 4, UM, SUP, WPE, SWR
  }

  SR  0x14 : UInt32 { // RTC Status Register
    27,
    TCE,
    MOF,
    TAF,
    TOF,
    TIF
  }

  LR  0x18 : UInt32 // RTC Lock Register
  IER 0x1C : UInt32 // RTC Interrupt Enable Register
  WAR 0x800 : UInt32 // RTC Write Access Register
  RAR 0x804 : UInt32 // RTC Read Access Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 51: Universal Serial Bus Full Speed OTG Controller (USBFSOTG)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers USB0 @at 0x4007_2000 {
//--- Peripheral ID Register
  PERID @ro 0x00 : UInt8 {2, ID:6}

//--- Peripheral ID Complement Register
  IDCOMP @ro 0x04 : UInt8 {2, NID:6}

//--- Peripheral Revision Register
  REV @ro 0x08 : UInt8

//--- Peripheral Additional Info Register
  ADDINFO @ro 0x0C : UInt8 {7, IEHOST}

//--- OTG Interrupt Status Register
  OTGISTAT 0x10 : UInt8 {IDCHG, ONEMSEC, LINE_STAT_CHG, 1, SESSVLDCHG, B_SESS_CHG, 1, AVBUSHG}

//--- OTG Interrupt Control Register
  OTGICR 0x14 : UInt8 {IDEN, ONEMSECEN, LINESTATEEN, 1, SESSVLDEN, BSESSEN, 1, AVBUSEN}

//--- OTG Status Register
  OTGSTAT 0x18 : UInt8 {ID, ONEMSECEN, LINESTATESTABLE, 1, SESS_VLD, BSESSEND, 1, AVBUSVLD}

//--- OTG Control Register
  OTGCTL 0x1C : UInt8 {DPHIGH, 1, DPLOW, DMLOW, 1, OTGEN, 2}

//--- Interrupt Status Register
  ISTAT 0x80 : UInt8 {STALL, ATTACH, RESUME, SLEEP, TOKDNE, SOFTOK, ERROR, USBRST}

//--- Interrupt Enable Register
  INTEN 0x84 : UInt8 {STALLEN, ATTACHEN, RESUMEEN, SLEEPEN, TOKDNEEN, SOFTOKEN, ERROREN, USBRSTEN}

//--- Interrupt Error Register
  ERRSTAT 0x88 : UInt8 {BSTERR, 1, DMAERR, BTOERR, DFN8, CRC16, CRC5EOF, PIDERR}

//--- Error Interrupt Enable Register
  ERREN 0x8C : UInt8 {BSTERREN, 1, DMAERREN, BTOERREN, DFN8EN, CRC16EN, CRC5EOFEN, PIDERREN}

//--- Status Register
  STAT 0x90 : UInt8 {ENDP:4, TX, ODD, 2}

//--- Control Register
  CTL 0x94 : UInt8 {JSTATE, SE0, TXSUSPENDTOKENBUSY, RESET, HOSTMODEEN, RESUME, ODDRST, USBENOFEN}

//--- Address Register
  ADDR 0x98 : UInt8 {LSEN, ADDR:7}

//--- BDT Page Register 1
  BDTPAGE1 0x9C : UInt8 {BDTBA:7, 1}

//--- Frame Number Register Low
  FRMNUML 0xA0 : UInt8

//--- Frame Number Register High
  FRMNUMH 0xA4 : UInt8 {5, FRM:3}

//--- Token Register
  TOKEN 0xA8 : UInt8 {TOKENPID:4, TOKENDPT:4}

//--- SOF Threshold Register
  SOFTHLD 0xAC : UInt8

//--- BDT Page Register 2
  BDTPAGE2 0xB0 : UInt8

//--- BDT Page Register 3
  BDTPAGE3 0xB4 : UInt8

//--- Endpoint Control
  ENDPT [16] 0xC0 @inc 4 : UInt8 {HOSTWCHUB, RETRYDIS, 1, EPCTLDIS, EPRXEN, EPTXEN, EPSTALL, EPHSHK}

//--- USB Control Register
  USBCTRL 0x100 : UInt8 {SUSP, PDE, 6}

//--- USB OTG Observe Register
  OBSERVE @ro 0x104 : UInt8 {DPPU, DPPD, 1, DMPD, 4}

//--- USB OTG Control Register
  CONTROL 0x108 : UInt8 {3, DPPULLNONOTG, 4}

//--- USB Transceiver Control Register 0
  USBTRC0 0x10C : UInt8 {USBRESET, 1, USBRESMEM, 2, USB_CLK_RECOVERY_INT, SYNC_DET, USB_RESUME_INT}

//--- Frame Adjust Register
  USBFRMADJUST 0x114 : UInt8

//--- USB Clock Recovery Control Register
  CLK_RECOVER_CTRL 0x140 : UInt8 {CLOCK_RECOVER_EN, RESET_RESUME_ROUGH_EN, RESTART_IFRTRIM_EN, 5}

//--- ICR48 Oscillator Enable Register
  CLK_RECOVER_IRC_EN 0x144 : UInt8 {6, IRC_EN, REG_EN}

//--- Clock recovery combined Enable Register
  CLK_RECOVER_INT_EN 0x154 : UInt8 {3, OVF_ERROR_EN, 4}

//--- Clock recovery separated interrupt status Register
  CLK_RECOVER_INT_STATUS 0x15C : UInt8 {3, OVF_ERROR, 4}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 54: Universal Serial Bus OTG Controller (USBOTG)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers USBHS @at 0x400A_1000 {
//--- Identification register
  ID @ro 0x00 : UInt32 {
    VERSIONID:3, VERSION:4, REVISION:4, TAG:5, 2, NID:6, 2, ID:6
  }

//--- General Hardware Parameters Register
  HWGENERAL @ro 0x04 : UInt32 {21, SM:2, PHYM:3, PHYW:2, 4}

//--- Host Hardware Parameters Register
  HWHOST @ro 0x08 : UInt32 {TIPER:8, TTASY:8, 12, NPORT:3, HC}

//--- Device Hardware Parameters Register
  HWDEVICE @ro 0x0C : UInt32 {26, DEVEP:5, DC}

//--- Transmit Buffer Hardware Parameters Register
  HWTXBUF @ro 0x10 : UInt32 {TXLC, 7, TXCHANADD:8, TXADD:8, TXBURST:8}

//--- Receive Buffer Hardware Parameters Register
  HWRXBUF @ro 0x14 : UInt32 {16, RXADD:8, RXBURST:8}

//--- General Purpose Timer n Load Register
  GPTIMERnLD [2] 0x80 @inc 8 : UInt32 {8, GPTLD:24}

//--- General Purpose Timer n Control Register
  GPTIMERnCTL [2] 0x84 @inc 8 : UInt32 {RUN, RST, 5, MODE, GPTCNT:24}

//--- General Purpose Timer n Control Register
  USB_SBUSCFG 0x90 : UInt32 {29, BURSTMODE:3}

//--- Host Controller Interface Version and Capability Register
  HCIVERSION 0x100 : UInt32 {HCIVERSION:16, 8, CAPLENGTH:8}

//--- Host Controller Structural Parameters Register
  HCSPARAMS 0x104 : UInt32 {4, N_TT:4, N_PTT:4, 3, PI, N_CC:4, N_PCC:4, 3, PCC, N_PORTS:4}

//--- Host Controller Capability Parameter Register
  HCCPARAMS 0x108 : UInt32 {16, EECP:8, IST:4, 1, ASP, PFL, ADC}

//--- Device Controller Interface Version Register
  DCIVERSION 0x122 : UInt16

//--- Device Controller Capability Parameters Register
  DCCPARAMS 0x124 : UInt32 {23, HC, DC, 2, DEN:5}

//--- USB Command Register
  USBCMD 0x140 : UInt32 {8, ITC:8, FS2, ATDTW, SUTW, 1, ASPE, 1, ASP:2, 1, IAA, ASE, PSE, FS:2, RST, RS}

//--- USB Status Register
  USBSTS 0x144 : UInt32 {
    6, TI1, TI0, 4, UPI, UAI, 1, NAKI,
    AS, PS, RCL, HCH, 3, SLI, SRI, URI, AAI, SEI, FRI, PCI, UEI, UI
  }

//--- USB Interrupt Enable Register
  USBINTR 0x148 : UInt32 {
    6, TIE1, TI40, 4, UPIE, UAIE, 1, NAKIE,
    7, SLE, SRE, URE, AAE, SEE, FRE, PCE, UEE, UE
  }

//--- Frame Index Register
  FRINDEX 0x14C : UInt32 {18, FRINDEX:14}

//--- Periodic Frame List Base Address Register
  PERIODICLISTBASE 0x154 : UInt32 {PERBASE:20, 12}

//--- Device Address Register
  DEVICEADDR 0x154 : UInt32 {USBADDR:7, USBADRA, 24}

//--- Current Asynchronous List Address Register
  ASYNCLISTADDR 0x158 : UInt32 {ASYBASE:27, 5}

//--- Endpoint List Address Register
  EPLISTADDR 0x158 : UInt32 {EPBASE:21, 11}

//--- Host TT Asynchronous Buffer Control Register
  TCCTRL 0x15C : UInt32 {1, TTHA:7, 24}

//--- Master Interface Data Burst Size Register
  BURSTSIZE 0x160 : UInt32 {16, TXPBURST:8, RXPBURST:8}

//--- Transmit FIFO Tuning Control Register
  TXFILLTUNING 0x164 : UInt32 {10, TXFIFOTHRES:6, 3, TXSCHHEALTH:5, 1, TXCHOH:7}

//--- Endpoint NAK Register
  ENDPTNAK 0x178 : UInt32 {12, EPTN:4, 12, EPRN:4}

//--- Endpoint NAK Enable Register
  ENDPTNAKEN 0x17C : UInt32 {12, EPTNE:4, 12, EPRNE:4}

//--- Configure Flag Register
  CONFIGFLAG @ro 0x180 : UInt32

//--- Port Status and Control Register
  PORTSC1 0x184 : UInt32 {
    PTS:2, 2, PSPD:2, PTS2, PFSC, PHCD, WKOC, WKDS, WKCN, PTC:4,
    PIC:2, PO, PP, LS:2, HSP, PR, SUSP, FPR, OCC, OCA, PEC, PE, CSC, CCS
  }

//--- On-the-Go Status and Control Register
  OTGSC 0x1A4 : UInt32 {
    1, DPIE, MSE, BSEIE, BSVIE, ASVIE, AVVIE, IDIE, 1, DPIS, MSS, BSEIS, BSVIS, ASVIS, AVVIS, IDIS,
    1, DPS, MST, BSE, BSV, ASV, AVV, ID, HABA, 1, IDPU, DP, OT, HAAR, VC, VD
  }

//--- USB Mode Register
  USBMODE 0x1A8 : UInt32 {17, TXHSD:3, 7, SDIS, SLOM, ES, CM:2}

//--- Endpoint Setup Status Register
  EPSETUPSR 0x1AC : UInt32 {27, EPSETUPSTAT:5}

//--- Endpoint Initialization Register
  EPPRIME 0x1B0 : UInt32 {12, PETB:4, 12, PERB:4}

//--- Endpoint Flush Register
  EPFLUSH 0x1B4 : UInt32 {12, FETB:4, 12, FERB:4}

//--- Endpoint Status Register
  EPSR 0x1B8 : UInt32 {12, ETBR:4, 12, ERBR:4}

//--- Endpoint Status Register
  EPCOMPLETE 0x1BC : UInt32 {12, ETCE:4, 12, ERCE:4}

//--- Endpoint Control Register 0
  EPCR0 0x1C0 : UInt32 {8, TXE, 3, TXT:2, 1, TXS, 8, RXE, 3, RXT:2, 1, RXS}

//--- Endpoint Control Register n (0 < n < 8)
  EPCR [8] 0x1C0 @inc 4 : UInt32 {8, TXE, TXR, TXI, 1, TXT:2, TXD, TXS, 8, RXE, RXR, RXI, 1, RXT:2, RXD, RXS}

//--- USB General Control Register
  USBGENCTRL 0x200 : UInt32 {26, WU_INT_CLR, 4, WU_IE}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 55: Universal Serial Bus 2.0 Integrated PHY
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers USBPHY @at 0x400A_2000 {
//--- USB PHY Power-Down Register
  PWD     0x000,
  PWD_SET 0x004,
  PWD_CLR 0x008,
  PWD_TOG 0x00C : UInt32 {11, RXPWDRX, RXPWDDIFF, RXPWD1PT1, RXPWDENV, 4, TXPWDV2I, TXPWDBIAS, TXPWDFS, 10}

//--- USB PHY Transmitter Control Register
  TX     0x010,
  TX_SET 0x014,
  TX_CLR 0x018,
  TX_TOG 0x01C : UInt32 {3, USBPHY_TX_EDGECTRL:3, 6, TXCAL45DP:4, 4, TXCAL45DM:4, 4, D_CAL:4}

//--- USB PHY Receiver Control Register
  RX     0x020,
  RX_SET 0x024,
  RX_CLR 0x028,
  RX_TOG 0x02C : UInt32 {9, RXDBYPASS, 15, DISCONADJ:3, 1, ENVADJ:3}

//--- USB PHY General Control Register
  CTRL     0x030,
  CTRL_SET 0x034,
  CTRL_CLR 0x038,
  CTRL_TOG 0x03C : UInt32 {
    SFTRST, CLKGATE, UTMI_SUSPENDM, HOST_FORCE_LS_SEO, OTG_ID_VALUE, 2, FSDLL_RST_EN,
    3, ENAUTOCLR_PHY_PWD, ENAUTOCLR_CLKGATE, AUTORESUME_EN, 2,
    ENUTMILEVEL3, ENUTMILEVEL2, 1, DEVPLUGIN_IRQ, 4,
    3, ENDEVPLUGINDET, HOSTDISCONNECTDETECT_IRQ, 1, ENHOSTDISCONDETEXCT, 1
  }

//--- USB PHY Status Register
  STATUS 0x040 : UInt32 {
    21, RESUME_STATUS, 1, OTGID_STATUS, 1, DEVPLUGIN_STATUS, 2, HOST_DISCONNECTDETECT_STATUS, 3
  }

//--- USB PHY General Control Register
  DEBUG     0x050,
  DEBUG_SET 0x054,
  DEBUG_CLR 0x058,
  DEBUG_TOG 0x05C : UInt32 {
    1, CLKGATE, HOST_RESUME_DEBUG, SQUELCHRESETLENGTH:4, ENSQUELCHRESET, 3, SQUELCHRESETCOUNT:5,
    3, ENTX2RXCOUNT, TX2RXCOUNT:4, 2, ENHSTPULLDOWN:2, HSTPULLDOWN:2, DEBUG_INTERFACE_HOLD, OTGIDPIOLOCK
  }

//--- UTMI Debug Status Register 0
  DEBUG0_STATUS 0x060 : UInt32 {SQUEL_COUNT:6, UTMI_RXERROR_FAIL_COUNT:10, LOOP_BACK_FAIL_COUNT:16}

//--- UTMI Debug Status Register 1
  DEBUG1     0x070,
  DEBUG1_SET 0x074,
  DEBUG1_CLR 0x078,
  DEBUG1_TOG 0x07C : UInt32 {17, ENTAILADJVD:2, 13}

//--- UTMI RTL Version Register
  VERSION @ro 0x080 : UInt32 {MAJOR:8, MINOR:8, STEP:16}

//--- USB PHY PLL Control / Status Register
  PLL_SIC     0x0A0,
  PLL_SIC_SET 0x0A4,
  PLL_SIC_CLR 0x0A8,
  PLL_SIC_TOG 0x0AC
  : UInt32 {
    PLL_LOCK, 14, PLL_BYPASS,
    2, PLL_ENABLE, PLL_POWER, PLL_HOLD_RING_OFF, 4, PLL_EN_USB_CLKS, 4, PLL_DIV_SEL:2
  }

//--- USB PHY VBUS Detect Control Register
  USB1_VBUS_DETECT     0x0C0,
  USB1_VBUS_DETECT_SET 0x0C4,
  USB1_VBUS_DETECT_CLR 0x0C8,
  USB1_VBUS_DETECT_TOG 0x0CC
  : UInt32 {
    EN_CHARGER_RESISTOR, 4, DISCHARGE_VBUS, 5, PWRUP_CMPS, 1, VBUSVALID_TO_SESSVALID, 2,
    5, VBUS_SOURCE_SEL:2, VBUSVALID_SEL,
    VBUSVALID_OVERRIDE, AVALID_OVERRIDE, BVALID_OVERRIDE, SESSEND_OVERRIDE, VBUS_OVERRIDE_EN, VBUSVALID_THRESH:3
  }

//--- USB PHY VBUS Detector Status Register
  USB1_VBUS_DET_STAT 0x0D0 : UInt32 {27, VBUS_VALID_3V, VBUS_VALID, AVALID, BVALID, SESSEND}

//--- USB PHY Charger Detect Status Register
  USB1_VBUS__CHRG_DET_STAT 0x0F0 : UInt32 {27, SECDET_DCP, DP_STATE, DM_STATE, CHRG_DETECTED, PLUG_CONTACT}

//--- USB PHY Analog Control Register
  ANACTRL     0x100,
  ANACTRL_SET 0x104,
  ANACTRL_CLR 0x108,
  ANACTRL_TOG 0x10C : UInt32 {
    PFD_STABLE, 15,
    EMPH_CUR_CTRL:2, EMPH_EN, EMPH_PULSE_CTRL:2, DEV_PULLDOWN, PFD_FRAC:6, PFD_CLK_SEL:2, PFD_CLKGATE, TESTCLK_SEL
  }

//--- USB PHY Loopback Control/Status Register
  USB1_LOOPBACK     0x110,
  USB1_LOOPBACK_SET 0x114,
  USB1_LOOPBACK_CLR 0x118,
  USB1_LOOPBACK_TOG 0x11C : UInt32 {
    8, TSTPKT:8, TSTL_HSFS_MODE_EN, 6, UTM0_DIG_TST1,
    UTM0_DIG_TST0, TSTL_TX_HIZ, TSTI_TX_EN, TSTI_TX_LS_MODE,
    TSTI_TX_HS_MODE, UTMI_DIG_TST1, UTMI_DIG_TST0, UTMI_TESTSTART
  }

//--- USB PHY Loopback Packet Number Select Register
  USB1_LOOPBACK_HSFSCNT     0x120,
  USB1_LOOPBACK_HSFSCNT_SET 0x124,
  USB1_LOOPBACK_HSFSCNT_CLR 0x128,
  USB1_LOOPBACK_HSFSCNT_TOG 0x12C : UInt32 {TSTL_FS_NUMBER:16, TSTL_HS_NUMBER:16}

//--- USB PHY Trim Override Enable Register
  TRIM_OVERRIDE_EN     0x130,
  TRIM_OVERRIDE_EN_SET 0x134,
  TRIM_OVERRIDE_EN_CLR 0x138,
  TRIM_OVERRIDE_EN_TOG 0x13C : UInt32 {
    TRIM_USBPHY_TX_CAL45DM:4, TRIM_USBPHY_TX_CAL45CP:4,
    TRIM_USBPHY_TX_DCAL:4, TRIM_USB_REG_ENV_TAIL_ADJ_VD:2, TRIM_PLL_CTRL0_DIV_SEL:2,
    11, TRIM_TX_CAL45DM_OVERRIDE, TRIM_TX_CAL45DP_OVERRIDE,
    TRIM_TX_D_CAL_OVERRIDE, TRIM_ENV_TAIL_ADJ_VD_OVERRIDE, TRIM_DEV_SEL_OVERRIDE
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 56: FlexCAN
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers CAN @at [0x4002_4000, 0x400A_4000] {
  MCR 0x00 : UInt32 {
    MDIS, FRZ, RFEN, HALT, NOTRDY, WAKMSK, SOFTRST, FRZACK,
    SUPV, SLFWAK, WRNEN, LPMACK, WAKSRC, 1, SFRXDIS, IRMQ,
    2, LPRIOEN, AEN, 2, IDAM:2, 1, MAXMB:7
  }

  CTRL1 0x04 : UInt32 {
    PRESDIV:8, RJW:2, PSEG1:3, PSEG2:3,
    BOFFMSK, ERRMSK, CLKSRC, LPB, TWRNMSK, RWRNMSK, 2, SMP, BOFFREC, TSYN, LBUF, LOM, PROPSEG:3
  }

  TIMER 0x08 : UInt32 {16, TIMER:16}

  RXMGMASK 0x10 : UInt32

  RX14MASK 0x14 : UInt32

  RX15MASK 0x18 : UInt32

  ECR 0x1C : UInt32 {16, RXERRCNT:8, TXERRCNT:8}

  ESR1 0x20 : UInt32 {
    13, SYNCH, TWRNINT, RWRNINT,
    BIT1ERR, BIT0ERR, ACKERR, CRCERR, FRMERR, STFERR, TXWRN, RXWRN, IDLE, TX, FLTCONF:2, RX, BOFFINT, ERRINT, WAKINT
  }

  IMASK1 0x28 : UInt32

  IFLAG1 0x30 : UInt32 {BUF31TO8I:24, BUF7I, BUF6I, BUF5I, BUF4TO1I:4, BUF0I}

  CTRL2 0x34 : UInt32 {3, WRMFRZ, RFFN:4, TASD:5, MRP, RRS, EACEN, 16}

  ESR2 @ro 0x38 : UInt32 {9, LPTM:7, 1, VPS, IMB, 13}

  CRCR @ro 0x44 : UInt32 {9, MBCRC:7, 1, TXCRC:15}

  RXFGMASK 0x48 : UInt32

  RXFIR @ro 0x4C : UInt32 {24, IDHIT:8}

  RXIMR [16] 0x880 @inc 4 : UInt32
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 57: Serial Peripheral Interface (SPI)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers SPI @at [0x4002_C000, 0x4002_D000, 0x400A_C000] {

  MCR 0x0 : UInt32 {
    MSTR, CONT_SCKE, DCONF:2, FRZ, MTFE, PCSSE, ROOE, 2, PCSIS:6,
    DOZE, MDIS, DIS_TXF, DID_RXF, CLR_TXF, CLR_RXF, SMPL_PT:2, 5, 2, HALT
  }

  TCR 0x8 : UInt32 {SPT_TCNT:16, 16}

  CTAR [2] 0xC @inc 4 : UInt32 {
    DBR, FMSZ:4, CPOL, CPHA, LSBFE, PCSSCK:2, PASC:2, PDT:2, PBR:2,
    CSSCK:4, ASC:4, DT:4, BR:4
  }

  CTAR0_SLAVE 0xC : UInt32 {1, FMSZ:4, CPOL, CPHA, 25}

  SR 0x2C : UInt32 {
    TCF, TXRXS, 1, EOQF, TFUF, 1, TFFF, 5, RFOF, 1, RFDF, 1,
    TXCTR:4, TXNXTPTR:4, RXCTR:4, POPNXTPTR:4
  }

  RSER 0x30 : UInt32 {TCF_RE, 2, EOQF_RE, TFUF_RE, 1, TFFF_RE, TFFF_DIRS, 4, RFOF_RE, 1, RFDF_RE, RFDF_DIRS, 16}

  PUSHR 0x34 : UInt32 {CONT, CTAS:3, EOQ, CTCNT, 4, PCS:6, TXDATA:16}

  PUSHR_SLAVE 0x34 : UInt32

  POPR @ro 0x38 : UInt32

  TXFR [4] 0x3C @inc 4 : UInt32 {TXCMD_DATA:16, TXDATA:16}

  RXFR [4] 0x7C @inc 4 : UInt32
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 58: Inter-Integrated Circuit (I2C)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 59: Universal Asynchronous Receiver/Transmitter (UART)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers UART0_BDH  *(volatile UInt8_t  *)0x4006A000 // UART Baud Rate Registers: High
//registers UART0_BDL  *(volatile UInt8_t  *)0x4006A001 // UART Baud Rate Registers: Low
//registers UART0_C1  *(volatile UInt8_t  *)0x4006A002 // UART Control registers 1
//registers UART_C1_LOOPS   (UInt8_t)0x80   // When LOOPS is set, the RxD pin is disconnected from the UART and the transmitter output is internally connected to the receiver input
//registers UART_C1_UARTSWAI  (UInt8_t)0x40   // UART Stops in Wait Mode
//registers UART_C1_RSRC   (UInt8_t)0x20   // When LOOPS is set, the RSRC field determines the source for the receiver shift registers input
//registers UART_C1_M   (UInt8_t)0x10   // 9-bit or 8-bit Mode Select
//registers UART_C1_WAKE   (UInt8_t)0x08   // Determines which condition wakes the UART
//registers UART_C1_ILT   (UInt8_t)0x04   // Idle Line Type Select
//registers UART_C1_PE   (UInt8_t)0x02   // Parity Enable
//registers UART_C1_PT   (UInt8_t)0x01   // Parity Type, 0=even, 1=odd
//registers UART0_C2  *(volatile UInt8_t  *)0x4006A003 // UART Control registers 2
//registers UART_C2_TIE   (UInt8_t)0x80   // Transmitter Interrupt or DMA Transfer Enable.
//registers UART_C2_TCIE   (UInt8_t)0x40   // Transmission Complete Interrupt Enable
//registers UART_C2_RIE   (UInt8_t)0x20   // Receiver Full Interrupt or DMA Transfer Enable
//registers UART_C2_ILIE   (UInt8_t)0x10   // Idle Line Interrupt Enable
//registers UART_C2_TE   (UInt8_t)0x08   // Transmitter Enable
//registers UART_C2_RE   (UInt8_t)0x04   // Receiver Enable
//registers UART_C2_RWU   (UInt8_t)0x02   // Receiver Wakeup Control
//registers UART_C2_SBK   (UInt8_t)0x01   // Send Break
//registers UART0_S1  *(volatile UInt8_t  *)0x4006A004 // UART Status registers 1
//registers UART_S1_TDRE   (UInt8_t)0x80   // Transmit Data registers Empty Flag
//registers UART_S1_TC   (UInt8_t)0x40   // Transmit Complete Flag
//registers UART_S1_RDRF   (UInt8_t)0x20   // Receive Data registers Full Flag
//registers UART_S1_IDLE   (UInt8_t)0x10   // Idle Line Flag
//registers UART_S1_OR   (UInt8_t)0x08   // Receiver Overrun Flag
//registers UART_S1_NF   (UInt8_t)0x04   // Noise Flag
//registers UART_S1_FE   (UInt8_t)0x02   // Framing Error Flag
//registers UART_S1_PF   (UInt8_t)0x01   // Parity Error Flag
//registers UART0_S2  *(volatile UInt8_t  *)0x4006A005 // UART Status registers 2
//registers UART0_C3  *(volatile UInt8_t  *)0x4006A006 // UART Control registers 3
//registers UART0_D   *(volatile UInt8_t  *)0x4006A007 // UART Data Register
//registers UART0_MA1  *(volatile UInt8_t  *)0x4006A008 // UART Match Address Registers 1
//registers UART0_MA2  *(volatile UInt8_t  *)0x4006A009 // UART Match Address Registers 2
//registers UART0_C4  *(volatile UInt8_t  *)0x4006A00A // UART Control registers 4
//registers UART0_C5  *(volatile UInt8_t  *)0x4006A00B // UART Control registers 5
//registers UART0_ED  *(volatile UInt8_t  *)0x4006A00C // UART Extended Data Register
//registers UART0_MODEM  *(volatile UInt8_t  *)0x4006A00D // UART Modem Register
//registers UART0_IR  *(volatile UInt8_t  *)0x4006A00E // UART Infrared Register
//registers UART0_PFIFO  *(volatile UInt8_t  *)0x4006A010 // UART FIFO Parameters
//registers UART_PFIFO_TXFE   (UInt8_t)0x80
//registers UART_PFIFO_RXFE   (UInt8_t)0x08
//registers UART0_CFIFO  *(volatile UInt8_t  *)0x4006A011 // UART FIFO Control Register
//registers UART_CFIFO_TXFLUSH  (UInt8_t)0x80   //
//registers UART_CFIFO_RXFLUSH  (UInt8_t)0x40   //
//registers UART_CFIFO_RXOFE  (UInt8_t)0x04   //
//registers UART_CFIFO_TXOFE  (UInt8_t)0x02   //
//registers UART_CFIFO_RXUFE  (UInt8_t)0x01   //
//registers UART0_SFIFO  *(volatile UInt8_t  *)0x4006A012 // UART FIFO Status Register
//registers UART_SFIFO_TXEMPT  (UInt8_t)0x80
//registers UART_SFIFO_RXEMPT  (UInt8_t)0x40
//registers UART_SFIFO_RXOF   (UInt8_t)0x04
//registers UART_SFIFO_TXOF   (UInt8_t)0x02
//registers UART_SFIFO_RXUF   (UInt8_t)0x01
//registers UART0_TWFIFO  *(volatile UInt8_t  *)0x4006A013 // UART FIFO Transmit Watermark
//registers UART0_TCFIFO  *(volatile UInt8_t  *)0x4006A014 // UART FIFO Transmit Count
//registers UART0_RWFIFO  *(volatile UInt8_t  *)0x4006A015 // UART FIFO Receive Watermark
//registers UART0_RCFIFO  *(volatile UInt8_t  *)0x4006A016 // UART FIFO Receive Count
//registers UART0_C7816  *(volatile UInt8_t  *)0x4006A018 // UART 7816 Control Register
//registers UART0_IE7816  *(volatile UInt8_t  *)0x4006A019 // UART 7816 Interrupt Enable Register
//registers UART0_IS7816  *(volatile UInt8_t  *)0x4006A01A // UART 7816 Interrupt Status Register
//registers UART0_WP7816T0  *(volatile UInt8_t  *)0x4006A01B // UART 7816 Wait Parameter Register
//registers UART0_WP7816T1  *(volatile UInt8_t  *)0x4006A01B // UART 7816 Wait Parameter Register
//registers UART0_WN7816  *(volatile UInt8_t  *)0x4006A01C // UART 7816 Wait N Register
//registers UART0_WF7816  *(volatile UInt8_t  *)0x4006A01D // UART 7816 Wait FD Register
//registers UART0_ET7816  *(volatile UInt8_t  *)0x4006A01E // UART 7816 Error Threshold Register
//registers UART0_TL7816  *(volatile UInt8_t  *)0x4006A01F // UART 7816 Transmit Length Register
//registers UART0_C6  *(volatile UInt8_t  *)0x4006A021 // UART CEA709.1-B Control registers 6
//registers UART0_PCTH  *(volatile UInt8_t  *)0x4006A022 // UART CEA709.1-B Packet Cycle Time Counter High
//registers UART0_PCTL  *(volatile UInt8_t  *)0x4006A023 // UART CEA709.1-B Packet Cycle Time Counter Low
//registers UART0_B1T  *(volatile UInt8_t  *)0x4006A024 // UART CEA709.1-B Beta1 Timer
//registers UART0_SDTH  *(volatile UInt8_t  *)0x4006A025 // UART CEA709.1-B Secondary Delay Timer High
//registers UART0_SDTL  *(volatile UInt8_t  *)0x4006A026 // UART CEA709.1-B Secondary Delay Timer Low
//registers UART0_PRE  *(volatile UInt8_t  *)0x4006A027 // UART CEA709.1-B Preamble
//registers UART0_TPL  *(volatile UInt8_t  *)0x4006A028 // UART CEA709.1-B Transmit Packet Length
//registers UART0_IE  *(volatile UInt8_t  *)0x4006A029 // UART CEA709.1-B Interrupt Enable Register
//registers UART0_WB  *(volatile UInt8_t  *)0x4006A02A // UART CEA709.1-B WBASE
//registers UART0_S3  *(volatile UInt8_t  *)0x4006A02B // UART CEA709.1-B Status Register
//registers UART0_S4  *(volatile UInt8_t  *)0x4006A02C // UART CEA709.1-B Status Register
//registers UART0_RPL  *(volatile UInt8_t  *)0x4006A02D // UART CEA709.1-B Received Packet Length
//registers UART0_RPREL  *(volatile UInt8_t  *)0x4006A02E // UART CEA709.1-B Received Preamble Length
//registers UART0_CPW  *(volatile UInt8_t  *)0x4006A02F // UART CEA709.1-B Collision Pulse Width
//registers UART0_RIDT  *(volatile UInt8_t  *)0x4006A030 // UART CEA709.1-B Receive Indeterminate Time
//registers UART0_TIDT  *(volatile UInt8_t  *)0x4006A031 // UART CEA709.1-B Transmit Indeterminate Time
//registers UART1_BDH  *(volatile UInt8_t  *)0x4006B000 // UART Baud Rate Registers: High
//registers UART1_BDL  *(volatile UInt8_t  *)0x4006B001 // UART Baud Rate Registers: Low
//registers UART1_C1  *(volatile UInt8_t  *)0x4006B002 // UART Control registers 1
//registers UART1_C2  *(volatile UInt8_t  *)0x4006B003 // UART Control registers 2
//registers UART1_S1  *(volatile UInt8_t  *)0x4006B004 // UART Status registers 1
//registers UART1_S2  *(volatile UInt8_t  *)0x4006B005 // UART Status registers 2
//registers UART1_C3  *(volatile UInt8_t  *)0x4006B006 // UART Control registers 3
//registers UART1_D   *(volatile UInt8_t  *)0x4006B007 // UART Data Register
//registers UART1_MA1  *(volatile UInt8_t  *)0x4006B008 // UART Match Address Registers 1
//registers UART1_MA2  *(volatile UInt8_t  *)0x4006B009 // UART Match Address Registers 2
//registers UART1_C4  *(volatile UInt8_t  *)0x4006B00A // UART Control registers 4
//registers UART1_C5  *(volatile UInt8_t  *)0x4006B00B // UART Control registers 5
//registers UART1_ED  *(volatile UInt8_t  *)0x4006B00C // UART Extended Data Register
//registers UART1_MODEM  *(volatile UInt8_t  *)0x4006B00D // UART Modem Register
//registers UART1_IR  *(volatile UInt8_t  *)0x4006B00E // UART Infrared Register
//registers UART1_PFIFO  *(volatile UInt8_t  *)0x4006B010 // UART FIFO Parameters
//registers UART1_CFIFO  *(volatile UInt8_t  *)0x4006B011 // UART FIFO Control Register
//registers UART1_SFIFO  *(volatile UInt8_t  *)0x4006B012 // UART FIFO Status Register
//registers UART1_TWFIFO  *(volatile UInt8_t  *)0x4006B013 // UART FIFO Transmit Watermark
//registers UART1_TCFIFO  *(volatile UInt8_t  *)0x4006B014 // UART FIFO Transmit Count
//registers UART1_RWFIFO  *(volatile UInt8_t  *)0x4006B015 // UART FIFO Receive Watermark
//registers UART1_RCFIFO  *(volatile UInt8_t  *)0x4006B016 // UART FIFO Receive Count
//registers UART1_C7816  *(volatile UInt8_t  *)0x4006B018 // UART 7816 Control Register
//registers UART1_IE7816  *(volatile UInt8_t  *)0x4006B019 // UART 7816 Interrupt Enable Register
//registers UART1_IS7816  *(volatile UInt8_t  *)0x4006B01A // UART 7816 Interrupt Status Register
//registers UART1_WP7816T0  *(volatile UInt8_t  *)0x4006B01B // UART 7816 Wait Parameter Register
//registers UART1_WP7816T1  *(volatile UInt8_t  *)0x4006B01B // UART 7816 Wait Parameter Register
//registers UART1_WN7816  *(volatile UInt8_t  *)0x4006B01C // UART 7816 Wait N Register
//registers UART1_WF7816  *(volatile UInt8_t  *)0x4006B01D // UART 7816 Wait FD Register
//registers UART1_ET7816  *(volatile UInt8_t  *)0x4006B01E // UART 7816 Error Threshold Register
//registers UART1_TL7816  *(volatile UInt8_t  *)0x4006B01F // UART 7816 Transmit Length Register
//registers UART1_C6  *(volatile UInt8_t  *)0x4006B021 // UART CEA709.1-B Control registers 6
//registers UART1_PCTH  *(volatile UInt8_t  *)0x4006B022 // UART CEA709.1-B Packet Cycle Time Counter High
//registers UART1_PCTL  *(volatile UInt8_t  *)0x4006B023 // UART CEA709.1-B Packet Cycle Time Counter Low
//registers UART1_B1T  *(volatile UInt8_t  *)0x4006B024 // UART CEA709.1-B Beta1 Timer
//registers UART1_SDTH  *(volatile UInt8_t  *)0x4006B025 // UART CEA709.1-B Secondary Delay Timer High
//registers UART1_SDTL  *(volatile UInt8_t  *)0x4006B026 // UART CEA709.1-B Secondary Delay Timer Low
//registers UART1_PRE  *(volatile UInt8_t  *)0x4006B027 // UART CEA709.1-B Preamble
//registers UART1_TPL  *(volatile UInt8_t  *)0x4006B028 // UART CEA709.1-B Transmit Packet Length
//registers UART1_IE  *(volatile UInt8_t  *)0x4006B029 // UART CEA709.1-B Interrupt Enable Register
//registers UART1_WB  *(volatile UInt8_t  *)0x4006B02A // UART CEA709.1-B WBASE
//registers UART1_S3  *(volatile UInt8_t  *)0x4006B02B // UART CEA709.1-B Status Register
//registers UART1_S4  *(volatile UInt8_t  *)0x4006B02C // UART CEA709.1-B Status Register
//registers UART1_RPL  *(volatile UInt8_t  *)0x4006B02D // UART CEA709.1-B Received Packet Length
//registers UART1_RPREL  *(volatile UInt8_t  *)0x4006B02E // UART CEA709.1-B Received Preamble Length
//registers UART1_CPW  *(volatile UInt8_t  *)0x4006B02F // UART CEA709.1-B Collision Pulse Width
//registers UART1_RIDT  *(volatile UInt8_t  *)0x4006B030 // UART CEA709.1-B Receive Indeterminate Time
//registers UART1_TIDT  *(volatile UInt8_t  *)0x4006B031 // UART CEA709.1-B Transmit Indeterminate Time
//registers UART2_BDH  *(volatile UInt8_t  *)0x4006C000 // UART Baud Rate Registers: High
//registers UART2_BDL  *(volatile UInt8_t  *)0x4006C001 // UART Baud Rate Registers: Low
//registers UART2_C1  *(volatile UInt8_t  *)0x4006C002 // UART Control registers 1
//registers UART2_C2  *(volatile UInt8_t  *)0x4006C003 // UART Control registers 2
//registers UART2_S1  *(volatile UInt8_t  *)0x4006C004 // UART Status registers 1
//registers UART2_S2  *(volatile UInt8_t  *)0x4006C005 // UART Status registers 2
//registers UART2_C3  *(volatile UInt8_t  *)0x4006C006 // UART Control registers 3
//registers UART2_D   *(volatile UInt8_t  *)0x4006C007 // UART Data Register
//registers UART2_MA1  *(volatile UInt8_t  *)0x4006C008 // UART Match Address Registers 1
//registers UART2_MA2  *(volatile UInt8_t  *)0x4006C009 // UART Match Address Registers 2
//registers UART2_C4  *(volatile UInt8_t  *)0x4006C00A // UART Control registers 4
//registers UART2_C5  *(volatile UInt8_t  *)0x4006C00B // UART Control registers 5
//registers UART2_ED  *(volatile UInt8_t  *)0x4006C00C // UART Extended Data Register
//registers UART2_MODEM  *(volatile UInt8_t  *)0x4006C00D // UART Modem Register
//registers UART2_IR  *(volatile UInt8_t  *)0x4006C00E // UART Infrared Register
//registers UART2_PFIFO  *(volatile UInt8_t  *)0x4006C010 // UART FIFO Parameters
//registers UART2_CFIFO  *(volatile UInt8_t  *)0x4006C011 // UART FIFO Control Register
//registers UART2_SFIFO  *(volatile UInt8_t  *)0x4006C012 // UART FIFO Status Register
//registers UART2_TWFIFO  *(volatile UInt8_t  *)0x4006C013 // UART FIFO Transmit Watermark
//registers UART2_TCFIFO  *(volatile UInt8_t  *)0x4006C014 // UART FIFO Transmit Count
//registers UART2_RWFIFO  *(volatile UInt8_t  *)0x4006C015 // UART FIFO Receive Watermark
//registers UART2_RCFIFO  *(volatile UInt8_t  *)0x4006C016 // UART FIFO Receive Count
//registers UART2_C7816  *(volatile UInt8_t  *)0x4006C018 // UART 7816 Control Register
//registers UART2_IE7816  *(volatile UInt8_t  *)0x4006C019 // UART 7816 Interrupt Enable Register
//registers UART2_IS7816  *(volatile UInt8_t  *)0x4006C01A // UART 7816 Interrupt Status Register
//registers UART2_WP7816T0  *(volatile UInt8_t  *)0x4006C01B // UART 7816 Wait Parameter Register
//registers UART2_WP7816T1  *(volatile UInt8_t  *)0x4006C01B // UART 7816 Wait Parameter Register
//registers UART2_WN7816  *(volatile UInt8_t  *)0x4006C01C // UART 7816 Wait N Register
//registers UART2_WF7816  *(volatile UInt8_t  *)0x4006C01D // UART 7816 Wait FD Register
//registers UART2_ET7816  *(volatile UInt8_t  *)0x4006C01E // UART 7816 Error Threshold Register
//registers UART2_TL7816  *(volatile UInt8_t  *)0x4006C01F // UART 7816 Transmit Length Register
//registers UART2_C6  *(volatile UInt8_t  *)0x4006C021 // UART CEA709.1-B Control registers 6
//registers UART2_PCTH  *(volatile UInt8_t  *)0x4006C022 // UART CEA709.1-B Packet Cycle Time Counter High
//registers UART2_PCTL  *(volatile UInt8_t  *)0x4006C023 // UART CEA709.1-B Packet Cycle Time Counter Low
//registers UART2_B1T  *(volatile UInt8_t  *)0x4006C024 // UART CEA709.1-B Beta1 Timer
//registers UART2_SDTH  *(volatile UInt8_t  *)0x4006C025 // UART CEA709.1-B Secondary Delay Timer High
//registers UART2_SDTL  *(volatile UInt8_t  *)0x4006C026 // UART CEA709.1-B Secondary Delay Timer Low
//registers UART2_PRE  *(volatile UInt8_t  *)0x4006C027 // UART CEA709.1-B Preamble
//registers UART2_TPL  *(volatile UInt8_t  *)0x4006C028 // UART CEA709.1-B Transmit Packet Length
//registers UART2_IE  *(volatile UInt8_t  *)0x4006C029 // UART CEA709.1-B Interrupt Enable Register
//registers UART2_WB  *(volatile UInt8_t  *)0x4006C02A // UART CEA709.1-B WBASE
//registers UART2_S3  *(volatile UInt8_t  *)0x4006C02B // UART CEA709.1-B Status Register
//registers UART2_S4  *(volatile UInt8_t  *)0x4006C02C // UART CEA709.1-B Status Register
//registers UART2_RPL  *(volatile UInt8_t  *)0x4006C02D // UART CEA709.1-B Received Packet Length
//registers UART2_RPREL  *(volatile UInt8_t  *)0x4006C02E // UART CEA709.1-B Received Preamble Length
//registers UART2_CPW  *(volatile UInt8_t  *)0x4006C02F // UART CEA709.1-B Collision Pulse Width
//registers UART2_RIDT  *(volatile UInt8_t  *)0x4006C030 // UART CEA709.1-B Receive Indeterminate Time
//registers UART2_TIDT  *(volatile UInt8_t  *)0x4006C031 // UART CEA709.1-B Transmit Indeterminate Time

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 61: Integrated Interchip Sound (I2S) / Synchronous Audio Interface (SAI)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers I2S0_TCSR   0x4002F000 // SAI Transmit Control Register
//registers I2S_TCSR_TE    0x80000000 // Transmitter Enable
//registers I2S_TCSR_STOPE    0x40000000 // Transmitter Enable in Stop mode
//registers I2S_TCSR_DBGE    0x20000000 // Transmitter Enable in Debug mode
//registers I2S_TCSR_BCE    0x10000000 // Bit Clock Enable
//registers I2S_TCSR_FR    0x02000000 // FIFO Reset
//registers I2S_TCSR_SR    0x01000000 // Software Reset
//registers I2S_TCSR_WSF    0x00100000 // Word Start Flag
//registers I2S_TCSR_SEF    0x00080000 // Sync Error Flag
//registers I2S_TCSR_FEF    0x00040000 // FIFO Error Flag (underrun)
//registers I2S_TCSR_FWF    0x00020000 // FIFO Warning Flag (empty)
//registers I2S_TCSR_FRF    0x00010000 // FIFO Request Flag (Data Ready)
//registers I2S_TCSR_WSIE    0x00001000 // Word Start Interrupt Enable
//registers I2S_TCSR_SEIE    0x00000800 // Sync Error Interrupt Enable
//registers I2S_TCSR_FEIE    0x00000400 // FIFO Error Interrupt Enable
//registers I2S_TCSR_FWIE    0x00000200 // FIFO Warning Interrupt Enable
//registers I2S_TCSR_FRIE    0x00000100 // FIFO Request Interrupt Enable
//registers I2S_TCSR_FWDE    0x00000002 // FIFO Warning DMA Enable
//registers I2S_TCSR_FRDE    0x00000001 // FIFO Request DMA Enable
//registers I2S0_TCR1   0x4002F004 // SAI Transmit Configuration 1 Register
//registers I2S_TCR1_TFW(n)   ( n & 0x03)       // Transmit FIFO watermark
//registers I2S0_TCR2   0x4002F008 // SAI Transmit Configuration 2 Register
//registers I2S_TCR2_DIV(n)   ( n & 0xff)       // Bit clock divide by (DIV+1)*2
//registers I2S_TCR2_BCD   ( 1<<24)       // Bit clock direction
//registers I2S_TCR2_BCP   ( 1<<25)       // Bit clock polarity
//registers I2S_TCR2_MSEL(n)  ( (n & 3)<<26)       // MCLK select, 0=bus clock, 1=I2S0_MCLK
//registers I2S_TCR2_BCI   ( 1<<28)       // Bit clock input
//registers I2S_TCR2_BCS   ( 1<<29)       // Bit clock swap
//registers I2S_TCR2_SYNC(n)  ( (n & 3)<<30)       // 0=async 1=sync with receiver
//registers I2S0_TCR3   0x4002F00C // SAI Transmit Configuration 3 Register
//registers I2S_TCR3_WDFL(n)  ( n & 0x0f)       // word flag configuration
//registers I2S_TCR3_TCE   ( 0x10000)       // transmit channel enable
//registers I2S0_TCR4   0x4002F010 // SAI Transmit Configuration 4 Register
//registers I2S_TCR4_FSD   ( 1)        // Frame Sync Direction
//registers I2S_TCR4_FSP   ( 2)        // Frame Sync Polarity
//registers I2S_TCR4_FSE   ( 8)        // Frame Sync Early
//registers I2S_TCR4_MF   ( 0x10)       // MSB First
//registers I2S_TCR4_SYWD(n)  ( (n & 0x1f)<<8)     // Sync Width
//registers I2S_TCR4_FRSZ(n)  ( (n & 0x0f)<<16)    // Frame Size
//registers I2S0_TCR5   0x4002F014 // SAI Transmit Configuration 5 Register
//registers I2S_TCR5_FBT(n)   ( (n & 0x1f)<<8)     // First Bit Shifted
//registers I2S_TCR5_W0W(n)   ( (n & 0x1f)<<16)    // Word 0 Width
//registers I2S_TCR5_WNW(n)   ( (n & 0x1f)<<24)    // Word N Width
//registers I2S0_TDR0   0x4002F020 // SAI Transmit Data Register
//registers I2S0_TDR1   0x4002F024 // SAI Transmit Data Register
//registers I2S0_TFR0   0x4002F040 // SAI Transmit FIFO Register
//registers I2S0_TFR1   0x4002F044 // SAI Transmit FIFO Register
//registers I2S_TFR_RFP(n)   ( n & 7)       // read FIFO pointer
//registers I2S_TFR_WFP(n)   ( (n & 7)<<16)       // write FIFO pointer
//registers I2S0_TMR   0x4002F060 // SAI Transmit Mask Register
//registers I2S_TMR_TWM(n)   ( n & 0xFFFFFFFF)
//registers I2S0_RCSR   0x4002F080 // SAI Receive Control Register
//registers I2S_RCSR_RE    0x80000000 // Receiver Enable
//registers I2S_RCSR_STOPE    0x40000000 // Receiver Enable in Stop mode
//registers I2S_RCSR_DBGE    0x20000000 // Receiver Enable in Debug mode
//registers I2S_RCSR_BCE    0x10000000 // Bit Clock Enable
//registers I2S_RCSR_FR    0x02000000 // FIFO Reset
//registers I2S_RCSR_SR    0x01000000 // Software Reset
//registers I2S_RCSR_WSF    0x00100000 // Word Start Flag
//registers I2S_RCSR_SEF    0x00080000 // Sync Error Flag
//registers I2S_RCSR_FEF    0x00040000 // FIFO Error Flag (underrun)
//registers I2S_RCSR_FWF    0x00020000 // FIFO Warning Flag (empty)
//registers I2S_RCSR_FRF    0x00010000 // FIFO Request Flag (Data Ready)
//registers I2S_RCSR_WSIE    0x00001000 // Word Start Interrupt Enable
//registers I2S_RCSR_SEIE    0x00000800 // Sync Error Interrupt Enable
//registers I2S_RCSR_FEIE    0x00000400 // FIFO Error Interrupt Enable
//registers I2S_RCSR_FWIE    0x00000200 // FIFO Warning Interrupt Enable
//registers I2S_RCSR_FRIE    0x00000100 // FIFO Request Interrupt Enable
//registers I2S_RCSR_FWDE    0x00000002 // FIFO Warning DMA Enable
//registers I2S_RCSR_FRDE    0x00000001 // FIFO Request DMA Enable
//registers I2S0_RCR1   0x4002F084 // SAI Receive Configuration 1 Register
//registers I2S_RCR1_RFW(n)   ( n & 0x03)       // Receive FIFO watermark
//registers I2S0_RCR2   0x4002F088 // SAI Receive Configuration 2 Register
//registers I2S_RCR2_DIV(n)   ( n & 0xff)       // Bit clock divide by (DIV+1)*2
//registers I2S_RCR2_BCD   ( 1<<24)       // Bit clock direction
//registers I2S_RCR2_BCP   ( 1<<25)       // Bit clock polarity
//registers I2S_RCR2_MSEL(n)  ( (n & 3)<<26)       // MCLK select, 0=bus clock, 1=I2S0_MCLK
//registers I2S_RCR2_BCI   ( 1<<28)       // Bit clock input
//registers I2S_RCR2_BCS   ( 1<<29)       // Bit clock swap
//registers I2S_RCR2_SYNC(n)  ( (n & 3)<<30)       // 0=async 1=sync with receiver
//registers I2S0_RCR3   0x4002F08C // SAI Receive Configuration 3 Register
//registers I2S_RCR3_WDFL(n)  ( n & 0x0f)       // word flag configuration
//registers I2S_RCR3_RCE   ( 0x10000)       // receive channel enable
//registers I2S0_RCR4   0x4002F090 // SAI Receive Configuration 4 Register
//registers I2S_RCR4_FSD   ( 1)        // Frame Sync Direction
//registers I2S_RCR4_FSP   ( 2)        // Frame Sync Polarity
//registers I2S_RCR4_FSE   ( 8)        // Frame Sync Early
//registers I2S_RCR4_MF   ( 0x10)       // MSB First
//registers I2S_RCR4_SYWD(n)  ( (n & 0x1f)<<8)     // Sync Width
//registers I2S_RCR4_FRSZ(n)  ( (n & 0x0f)<<16)    // Frame Size
//registers I2S0_RCR5   0x4002F094 // SAI Receive Configuration 5 Register
//registers I2S_RCR5_FBT(n)   ( (n & 0x1f)<<8)     // First Bit Shifted
//registers I2S_RCR5_W0W(n)   ( (n & 0x1f)<<16)    // Word 0 Width
//registers I2S_RCR5_WNW(n)   ( (n & 0x1f)<<24)    // Word N Width
//registers I2S0_RDR0   0x4002F0A0 // SAI Receive Data Register
//registers I2S0_RDR1   0x4002F0A4 // SAI Receive Data Register
//registers I2S0_RFR0   0x4002F0C0 // SAI Receive FIFO Register
//registers I2S0_RFR1   0x4002F0C4 // SAI Receive FIFO Register
//registers I2S_RFR_RFP(n)   ( n & 7)       // read FIFO pointer
//registers I2S_RFR_WFP(n)   ( (n & 7)<<16)       // write FIFO pointer
//registers I2S0_RMR   0x4002F0E0 // SAI Receive Mask Register
//registers I2S_RMR_RWM(n)   ( n & 0xFFFFFFFF)
//registers I2S0_MCR   0x4002F100 // SAI MCLK Control Register
//registers I2S_MCR_DUF   ( 1<<31)       // Divider Update Flag
//registers I2S_MCR_MOE   ( 1<<30)       // MCLK Output Enable
//registers I2S_MCR_MICS(n)   ( (n & 3)<<24)       // MCLK Input Clock Select
//registers I2S0_MDR   0x4002F104 // SAI MCLK Divide Register
//registers I2S_MDR_FRACT(n)  ( (n & 0xff)<<12)    // MCLK Fraction
//registers I2S_MDR_DIVIDE(n)  ( (n & 0xfff))       // MCLK Divide

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 63: General-Purpose Input/Output (GPIO)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers
  GPIOA @at 0x400F_F000,
  GPIOB @at 0x400F_F040,
  GPIOC @at 0x400F_F080,
  GPIOD @at 0x400F_F0C0,
  GPIOE @at 0x400F_F100
{
  PDOR 0x00 : UInt32 // Port Data Output Register
  PSOR 0x04 : UInt32 // Port Set Output Register
  PCOR 0x08 : UInt32 // Port Clear Output Register
  PTOR 0x0C : UInt32 // Port Toggle Output Register
  PDIR 0x10 : UInt32 // Port Data Input Register
  PDDR 0x14 : UInt32 // Port Data Direction Register
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Chapter 64: Touch sense input (TSI)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers TSI0_GENCS   0x40045000 // General Control and Status Register
//registers TSI_GENCS_LPCLKS   0x10000000  //
//registers TSI_GENCS_LPSCNITV(n)  (((n) & 15) << 24)  //
//registers TSI_GENCS_NSCN(n)  (((n) & 31) << 19)  //
//registers TSI_GENCS_PS(n)   (((n) & 7) << 16)  //
//registers TSI_GENCS_EOSF    0x00008000  //
//registers TSI_GENCS_OUTRGF   0x00004000  //
//registers TSI_GENCS_EXTERF   0x00002000  //
//registers TSI_GENCS_OVRF    0x00001000  //
//registers TSI_GENCS_SCNIP    0x00000200  //
//registers TSI_GENCS_SWTS    0x00000100  //
//registers TSI_GENCS_TSIEN    0x00000080  //
//registers TSI_GENCS_TSIIE    0x00000040  //
//registers TSI_GENCS_ERIE    0x00000020  //
//registers TSI_GENCS_ESOR    0x00000010  //
//registers TSI_GENCS_STM    0x00000002  //
//registers TSI_GENCS_STPE    0x00000001  //
//registers TSI0_SCANC   0x40045004 // SCAN Control Register
//registers TSI_SCANC_REFCHRG(n)  (((n) & 15) << 24)  //
//registers TSI_SCANC_EXTCHRG(n)  (((n) & 7) << 16)  //
//registers TSI_SCANC_SMOD(n)  (((n) & 255) << 8)  //
//registers TSI_SCANC_AMCLKS(n)  (((n) & 3) << 3)  //
//registers TSI_SCANC_AMPSC(n)  (((n) & 7) << 0)  //
//registers TSI0_PEN   0x40045008 // Pin Enable Register
//registers TSI0_WUCNTR   0x4004500C // Wake-Up Channel Counter Register
//registers TSI0_CNTR1   0x40045100 // Counter Register
//registers TSI0_CNTR3   0x40045104 // Counter Register
//registers TSI0_CNTR5   0x40045108 // Counter Register
//registers TSI0_CNTR7   0x4004510C // Counter Register
//registers TSI0_CNTR9   0x40045110 // Counter Register
//registers TSI0_CNTR11   0x40045114 // Counter Register
//registers TSI0_CNTR13   0x40045118 // Counter Register
//registers TSI0_CNTR15   0x4004511C // Counter Register
//registers TSI0_THRESHOLD   0x40045120 // Low Power Channel Threshold Register

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! Nested Vectored Interrupt Controller, Table 3-4 & ARMv7 ref, appendix B3.4 (page 750)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers NVIC @at 0xE000_E000 {
  ISER [4]  0x100 @inc 4 : UInt32 // Interrupt Set-enable Registers

  ICER [4]  0x180 @inc 4 : UInt32 //Interrupt Clear-enable Registers

  // 0 = highest priority
  // Cortex-M4: 0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240
  IPR [128] 0x400 @inc 1 : UInt8 // Interrupt priority
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! SCB System Control Space (SCS), ARMv7 ref manual, B3.2, page 708
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers SCB @at 0xE000_E000 {
  CPUID 0xD00 : UInt32 // CPUID Base Register

  ICSR 0xD04 : UInt32 { // Interrupt Control and State
    NMIPENDSET, 2, PENDSVSET, PENDSVCLR, PENDSTSET, PENDSTCLR, 1, ISRPREEMPT,
    ISRPENDING, 1, VECTPENDING:9, RETTOBASE, 2, VECTACTIVE:9
  }

  VTOR 0xD08 : UInt32 // Vector Table Offset

  AIRCR 0xD0C : UInt32 { // Application Interrupt and Reset Control
    VECTKEY:16, ENDIANNESS, 4, PRIGROUP:3,
    5, SYSRESETREQ, VECTCLRACTIVE, VECTRESET
  }

  CPACR 0xD88 : UInt32 // Coprocessor Access Control

  FPCCR 0xF34 : UInt32 // FP Context Control

  SCR 0xD10 : UInt32 // System Control Register
  CCR 0xD14 : UInt32 // Configuration and Control
  SHPR1 0xD18 : UInt32 // System Handler Priority registers 1
  SHPR2 0xD1C : UInt32 // System Handler Priority registers 2
  SHPR3 0xD20 : UInt32 // System Handler Priority registers 3
  SHCSR 0xD24 : UInt32 // System Handler Control and State
  CFSR 0xD28 : UInt32 // Configurable Fault Status Register
  HFSR 0xD2C : UInt32 // HardFault Status
  DFSR 0xD30 : UInt32 // Debug Fault Status
  MMFAR 0xD34 : UInt32 // MemManage Fault Address
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//! SYSTICK
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

registers SYST @at 0xE000_E000 {
//--- SysTick Control and Status Register
  CSR 0x010 : UInt32 {15, COUNTFLAG, 13, CLKSOURCE, TICKINT, ENABLE}

//--- SysTick Reload Value Register
  RVR 0x014 : UInt32

//--- SysTick Current Value Register
  CVR 0x018 : UInt32

//--- SysTick Calibration Value Register
  CALIB @ro 0x01C : UInt32
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//registers ARM_DEMCR   0xE000EDFC // Debug Exception and Monitor Control
//registers ARM_DEMCR_TRCENA  (1 << 24)  // Enable debugging & monitoring blocks
//registers ARM_DWT_CTRL   0xE0001000 // DWT control register
//registers ARM_DWT_CTRL_CYCCNTENA  (1 << 0)  // Enable cycle count
//registers ARM_DWT_CYCCNT   0xE0001004 // Cycle count register
