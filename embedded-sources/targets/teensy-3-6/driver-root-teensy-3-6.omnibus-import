
ctAssert target "teensy-3-6/xtr32", "teensy-3-6/xtr64"

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// CLOCK SETTINGS
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// The MCGCLOCKOUT frequency is given by (the 16 MHz quartz frequency is divided by 2 for the PPL)
//  MCGCLOCKOUT = 16 MHz / 2 * (MCG:C6:VDIV + 16) / (MCG:C5:PRDIV + 1)
//
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// CPU CLOCK
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  The CPU Clock is given by: MCGCLOCKOUT / (SIM:CLKDIV1:OUTDIV1 + 1)
//
//  Here, F_CPU_MHZ is a given constant, so we only check that settings are correct by asserting:
//     F_CPU_MHZ * (MCG:C5:PRDIV + 1) * (SIM:CLKDIV1:OUTDIV1 + 1) = (16 MHz / 2) * (MCG:C6:VDIV + 16)
//
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// BUS (peripheral) CLOCK
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  The peripheral Clock is given by: MCGCLOCKOUT / (SIM:CLKDIV1:OUTDIV2 + 1)
//
//  Here, SIM:CLKDIV1:OUTDIV2 is a given constant, so we compute BUS_MHZ by:
//     BUS_MHZ = (16 MHz / 2) * (MCG:C6:VDIV + 16) / (MCG:C5:PRDIV + 1) / (SIM:CLKDIV1:OUTDIV2 + 1)
//
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Flexbus CLOCK
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  The Flexbus Clock is given by: MCGCLOCKOUT / (SIM:CLKDIV1:OUTDIV3 + 1)
//
//  Here, SIM:CLKDIV1:OUTDIV3 is a given constant, so we compute FLEXBUS_MHZ by:
//     FLEXBUS_MHZ = (16 MHz / 2) * (MCG:C6:VDIV + 16) /(MCG:C5:PRDIV + 1) / (SIM:CLKDIV1:OUTDIV3 + 1)
//
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Flash CLOCK
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  The FLASH Clock is given by: MCGCLOCKOUT / (SIM:CLKDIV1:OUTDIV3 + 1)
//
//  Here, SIM:CLKDIV1:OUTDIV4 is a given constant, so we compute Flash Clock in kHz (result may not be integer):
//     FLASH_KHZ = (16000 kHz / 2) * (MCG:C6:VDIV + 16) / (MCG:C5:PRDIV + 1) / (SIM:CLKDIV1:OUTDIV4 + 1)
//
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// MICRO CONTROLLER REQUIREMENTS
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// The clock dividers are programmed via the SIM module’s CLKDIV registers. Each divider is programmable from a
// divide-by-1 through divide-by-16 setting. The following requirements must be met when configuring the clocks
// for this device:
// 1. The core and system clock frequencies must be 180 MHz or slower in HSRUN, 120 MHz or slower in RUN.  //
// 2. The bus clock frequency must be programmed to 60 MHz or less in HSRUN or RUN, and an integer divide of the
//      core clock. The core clock to bus clock ratio is limited to a max value of 8.  //
// 3. The flash clock frequency must be programmed to 28 MHz or less, less than or equal to the bus clock, and an
//      integer divide of the core clock. The core clock to flash clock ratio is limited to a max value of 8.  //
// 4. The FlexBus clock frequency must be programmed to be less than or equal to the bus clock frequency. The
//      FlexBus also has pad interface restrictions that limits the maximum frequency. For this device the FlexBus
//      maximum frequency is 60 MHz. The core clock to FlexBus clock ratio is limited to a max value of 8.  //
// 5. Since SDRAMC and FlexBus both use CLKOUT, the same restrictions apply to the SDRAM controller as stated
//      for the FlexBus clock.  //
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// SETTING SUMMARY
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// F_CPU   MCG_C5   MCG_C6   SIM_CLKDIV1   SIM_CLKDIV1   SIM_CLKDIV1   SIM_CLKDIV1   BUS_MHZ   FLEXBUS    FLASH
// _MHZ    _PRDIV    _VDIV      _OUTDIV1      _OUTDIV2      _OUTDIV3      _OUTDIV4                _MHZ     _KHZ
//  240         0       14             0             3             0             7       60        240   30 000
//  216         0       11             0             1             0             7       54        216   27 000
//  192         0        8             0             1             0             6       28        192   27 428
//  180         1       29             0             1             0             6       60        180   25 714
//  168         0        5             0             2             0             5       56        168   28 000
//  144         0        2             0             1             0             4       28        144   28 800
//  120         1       14             0             1             0             4       60        120   24 000
//   96         1        8             0             1             0             2       24         96   24 000
//   72         1        2             0             0             0             2       36         72   24 000
//   48         1        8             1             1             1             3       48         48   24 000
//   24         1        8             3             3             3             3       24         24   24 000
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// PRDIV SETTINGS
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let MCG_C5_PRDIV =
  if F_CPU_MHZ == 240 {
    0
  }else if F_CPU_MHZ == 216 {
    0
  }else if F_CPU_MHZ == 192 {
    0
  }else if F_CPU_MHZ == 180 {
    1
  }else if F_CPU_MHZ == 168 {
    0
  }else if F_CPU_MHZ == 144 {
    0
  }else if F_CPU_MHZ == 120 {
    1
  }else if F_CPU_MHZ == 96 {
    1
  }else if F_CPU_MHZ == 72 {
    1
  }else if F_CPU_MHZ == 48 {
    1
  }else if F_CPU_MHZ == 24 {
    1
  }else{
    0 // Any value, an error is raised in "check" instruction below
  }

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// MCG:C6:VDIV SETTINGS
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let MCG_C6_VDIV =
  if F_CPU_MHZ == 240 {
    14
  }else if F_CPU_MHZ == 216 {
    11
  }else if F_CPU_MHZ == 192 {
    8
  }else if F_CPU_MHZ == 180 {
    29
  }else if F_CPU_MHZ == 168 {
    5
  }else if F_CPU_MHZ == 144 {
    2
  }else if F_CPU_MHZ == 120 {
    14
  }else if F_CPU_MHZ == 96 {
    8
  }else if F_CPU_MHZ == 72 {
    2
  }else if F_CPU_MHZ == 48 {
    8
  }else if F_CPU_MHZ == 24 {
    8
  }else{
    0 // Any value, an error is raised in "check" instruction below
  }

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// SIM:CLKDIV1:OUTDIV1 SETTINGS
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let SIM_CLKDIV1_OUTDIV1 =
  if F_CPU_MHZ == 48 {
    1
  }else if F_CPU_MHZ == 24 {
    3
  }else{
    0 // 0 for all other settings
  }

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// SIM:CLKDIV1:OUTDIV2 SETTINGS (divisor for bus)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let SIM_CLKDIV1_OUTDIV2 =
  if F_CPU_MHZ == 240 {
    3
  }else if F_CPU_MHZ == 216 {
    3
  }else if F_CPU_MHZ == 192 {
    3
  }else if F_CPU_MHZ == 180 {
    2
  }else if F_CPU_MHZ == 168 {
    2
  }else if F_CPU_MHZ == 144 {
    2
  }else if F_CPU_MHZ == 120 {
    1
  }else if F_CPU_MHZ == 96 {
    1
  }else if F_CPU_MHZ == 72 {
    1
  }else if F_CPU_MHZ == 48 {
    1
  }else if F_CPU_MHZ == 24 {
    3
  }else{
    0 // Any value, an error is raised in "check" instruction below
  }

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// BUS_MHZ
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let BUS_MHZ = (16 / 2) * (MCG_C6_VDIV + 16) /(MCG_C5_PRDIV + 1) / (SIM_CLKDIV1_OUTDIV2 + 1)

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// SIM:CLKDIV1:OUTDIV3 SETTINGS (divisor for Flexbus)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let SIM_CLKDIV1_OUTDIV3 =
  if F_CPU_MHZ == 48 {
    1
  }else if F_CPU_MHZ == 24 {
    3
  }else{
    0 // Zero for any other CPU frequency
  }

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// FLEXBUS_MHZ
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let FLEXBUS_MHZ = (16 / 2) * (MCG_C6_VDIV + 16) /(MCG_C5_PRDIV + 1) / (SIM_CLKDIV1_OUTDIV3 + 1)

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// SIM:CLKDIV1:OUTDIV4 SETTINGS (divisor for Flash)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let SIM_CLKDIV1_OUTDIV4 =
  if F_CPU_MHZ == 240 {
    7
  }else if F_CPU_MHZ == 216 {
    7
  }else if F_CPU_MHZ == 192 {
    6
  }else if F_CPU_MHZ == 180 {
    6
  }else if F_CPU_MHZ == 168 {
    5
  }else if F_CPU_MHZ == 144 {
    4
  }else if F_CPU_MHZ == 120 {
    4
  }else if F_CPU_MHZ == 96 {
    3
  }else if F_CPU_MHZ == 72 {
    2
  }else if F_CPU_MHZ == 48 {
    3
  }else if F_CPU_MHZ == 24 {
    3
  }else{
    0 // Any value, an error is raised in "check" instruction below
  }

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// FLASH CLOCK (in kHz)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let FLASH_KHZ = (16_000 / 2) * (MCG_C6_VDIV + 16) / (MCG_C5_PRDIV + 1) / (SIM_CLKDIV1_OUTDIV4 + 1)

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// USB CLOCK
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// The USB module SHOULD be driven by a 48 MHz clock.
//
// For all CPU frequencies (but 216 MHz and 180 MHz), this clock is derived from MCGPLLCLK; the MCGPLLCLK is
// identical to MCGCLOCKOUT (as SIM_CLKDIV2_PLL_FLL_SEL=1). So:
//   USB_CLOCK = MCGCLOCKOUT * (SIM_CLKDIV2_USBFRAC + 1) / (SIM_CLKDIV2_USBDIV + 1)
// We check :
//   48 MHz == 16 MHz / 2 * (MCG:C6:VDIV + 16) / (MCG:C5:PRDIV + 1) * (SIM_CLKDIV2_USBFRAC + 1) / (SIM_CLKDIV2_USBDIV + 1)
// So:
//   6 * (MCG:C5:PRDIV + 1) * (SIM_CLKDIV2_USBDIV + 1) == (MCG:C6:VDIV + 16) * (SIM_CLKDIV2_USBFRAC + 1)
//
// For 216 MHz and 180 MHz CPU frequencies, we use directly the built-in 48 MHz clock: SIM_CLKDIV2_PLL_FLL_SEL=3, with
// di divisor (SIM_CLKDIV2_USBFRAC=0 and SIM_CLKDIV2_USBDIV=0).
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// USB SETTING SUMMARY (for all CPU frequencies, but 216 MHz and 180 MHz)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// F_CPU   SIM_CLKDIV2   SIM_CLKDIV2   SIM_SOPT2_
// _MHZ        _USBDIV      _USBFRAC    PLLFLLSEL
//  240              4             0            1
//  216              0             0            3
//  192              3             0            1
//  180              0             0            3
//  168              6             1            1
//  144              2             0            1
//  120              4             1            1
//   96              1             0            1
//   72              2             1            1
//   48              1             0            1
//   24              1             0            1
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// SIM:SOPT2:PLLFLLSEL SETTINGS
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let SIM_SOPT2_PLLFLLSEL =
  if (F_CPU_MHZ == 216) || (F_CPU_MHZ == 180) {
    3
  }else{
    1
  }

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// SIM:CLKDIV2:USBFRAC SETTINGS
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let SIM_CLKDIV2_USBFRAC =
  if (F_CPU_MHZ == 168) || (F_CPU_MHZ == 120) || (F_CPU_MHZ == 72) {
    1
  }else{
    0
  }

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// SIM:CLKDIV2:USBDIV SETTINGS
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let SIM_CLKDIV2_USBDIV =
  if F_CPU_MHZ == 240 {
    4
  }else if F_CPU_MHZ == 216 {
    0
  }else if F_CPU_MHZ == 192 {
    3
  }else if F_CPU_MHZ == 180 {
    0
  }else if F_CPU_MHZ == 168 {
    6
  }else if F_CPU_MHZ == 144 {
    2
  }else if F_CPU_MHZ == 120 {
    4
  }else if F_CPU_MHZ == 96 {
    1
  }else if F_CPU_MHZ == 72 {
    2
  }else if F_CPU_MHZ == 48 {
    1
  }else if F_CPU_MHZ == 24 {
    1
  }else{
    0 // Any value, an error is raised in "check" instruction below
  }

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  DRIVER ROOT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let WDOG_UNLOCK_SEQ1 $u16 = 0xC520
let WDOG_UNLOCK_SEQ2 $u16 = 0xD928

driver root {
  boot {
  //--------------------------------------------------- Static checks
    ctAssert "F_CPU_MHZ valid values: 240, 216, 192, 180, 168, 144, 120, 96, 72, 48 or 24"
     (   (F_CPU_MHZ == 240) || (F_CPU_MHZ == 216) || (F_CPU_MHZ == 192) || (F_CPU_MHZ == 180) || (F_CPU_MHZ == 168)
      || (F_CPU_MHZ == 144) || (F_CPU_MHZ == 120) || (F_CPU_MHZ ==  96) || (F_CPU_MHZ ==  72) || (F_CPU_MHZ ==  48)
      || (F_CPU_MHZ == 24))
  //--- Check CPU clock setting is correct
    ctAssert "CPU clock setting" (F_CPU_MHZ * (MCG_C5_PRDIV + 1) * (SIM_CLKDIV1_OUTDIV1 + 1) == (16 / 2) * (MCG_C6_VDIV + 16))
  //--- (2) The bus clock frequency must be programmed to 60 MHz or less in HSRUN or RUN ...
    ctAssert "BUS_MHZ ≤ 60" (BUS_MHZ ≤ 60)
  //---  ... an integer divide of the core clock. ...
    ctAssert "bus clock frequency must be an integer divide of the core clock" (F_CPU_MHZ == (F_CPU_MHZ / BUS_MHZ) * BUS_MHZ)
  //--- ... The core clock to bus clock ratio is limited to a max value of 8.
    ctAssert "core clock to bus clock ratio is limited to a max value of 8" (F_CPU_MHZ / BUS_MHZ ≤ 8)
  //--- (3) The flash clock frequency must be programmed to 28 MHz or less [No! overclocking --> 30 MHz] ...
    ctAssert "flash clock frequency must be programmed to 30 MHz or less" (FLASH_KHZ ≤ 30_000)
  //--- ... less than or equal to the bus clock, ...
    ctAssert "flash clock frequency must be less than or equal to the bus clock" (FLASH_KHZ ≤ (BUS_MHZ * 1000))
  //    ... and an integer divide of the core clock. ...
    ctAssert "flash clock frequency must be an integer divide of the core clock" (
      (SIM_CLKDIV1_OUTDIV4 + 1) == ((SIM_CLKDIV1_OUTDIV4 + 1) / (SIM_CLKDIV1_OUTDIV1 + 1)) * (SIM_CLKDIV1_OUTDIV1 + 1)
    )
  //    ... The core clock to flash clock ratio is limited to a max value of 8.
    ctAssert "core clock to flash clock ratio is limited to a max value of 8" (F_CPU_MHZ * 1000 / FLASH_KHZ ≤ 8)
  //--- (4) The FlexBus clock frequency must be programmed to be less than or equal to the bus clock frequency. ...
//    check "flexBus clock frequency must be less than or equal to the bus clock" (FLEXBUS_MHZ ≤ BUS_MHZ)
  //--- ... For this device the FlexBus maximum frequency is 60 MHz. ...
//    check "flexBus maximum frequency is 60 MHz" (FLEXBUS_MHZ ≤ 60)
  //--- ... The core clock to FlexBus clock ratio is limited to a max value of 8
    ctAssert "core clock to FlexBus clock ratio is limited to a max value of 8" (F_CPU_MHZ / FLEXBUS_MHZ ≤ 8)
  //--- USB Clock
    ctAssert "USB Clock is 48 MHz" (
     (F_CPU_MHZ == 180) || (F_CPU_MHZ == 216) || // 180 MHz and 216 MHz use directly IRC48MHZ clock
     (6 * (MCG_C5_PRDIV + 1) * (SIM_CLKDIV2_USBDIV + 1) == (MCG_C6_VDIV + 16) * (SIM_CLKDIV2_USBFRAC + 1))
    )
    ctAssert "USB Clock is 48 MHz (for 180 MHz CPU clock)" (
     (F_CPU_MHZ ≠ 180) || // 180 MHz uses directly IRC48 clock
     ((SIM_CLKDIV2_USBDIV == 0) && (SIM_CLKDIV2_USBFRAC == 0))
    )
    ctAssert "USB Clock is 48 MHz (for 216 MHz CPU clock)" (
     (F_CPU_MHZ ≠ 216) || // 216 MHz uses directly IRC48 clock
     ((SIM_CLKDIV2_USBDIV == 0) && (SIM_CLKDIV2_USBFRAC == 0))
    )
  //--------------------------------------------------- Disable watchdog timer
  //--- These two instructions are required for unlocking watchdog timer
    ©WDOG.UNLOCK = WDOG_UNLOCK_SEQ1
    ©WDOG.UNLOCK = WDOG_UNLOCK_SEQ2
  //--- Disable watchdog timer
    ©WDOG.STCTRLH = 0
    nop ()
    nop ()
  //--------------------------------------------------- Enable clocks to always-used peripherals
    ©SIM.SCGC3 = {©SIM.SCGC3 !ADC1:1 !FTM2:1 !FTM3:1}
    ©SIM.SCGC5 = {©SIM.SCGC5 !PORTA:1 !PORTB:1 !PORTC:1 !PORTD:1 !PORTE:1}   // clocks active to all GPIO
    ©SIM.SCGC6 = {©SIM.SCGC6 !RTC:1 !FTM0:1 !FTM1:1 !ADC0:1 !FTF:1}
  //  ©SCB.CPACR = 0x00F0_0000; // Enable floating point unit
    ©LMEM.PCCCR = {©LMEM.PCCCR !GO:1 !INVW1:1 !INVW0:1 !ENWRBUF:1 !ENCACHE:1} // 0x8500_0003
  //--- If the RTC oscillator isn't enabled, get it started early
    if ©RTC.CR.OSCE == 0 {
      ©RTC.SR = 0
      ©RTC.CR = {©RTC.CR !SC16P:1 !SC4P:1 !OSCE:1}
    }
  //--- Release I/O pins hold, if we woke up from VLLS mode
    if ©PMC.REGSC.ACKISO ≠ 0 {
      ©PMC.REGSC |= {©PMC.REGSC !ACKISO:1}
    }
  //--- Since this is a write once register, make it visible to all F_CPU's
  //    so we can into other sleep modes in the future at any speed
    ©SMC.PMPROT = {©SMC.PMPROT !AHSRUN:1 !AVLP:1 !ALLS:1 !AVLLS:1}

    ©SCB.VTOR = 0  // use vector table in flash
  //---------2- Initialisation de la PLL
  // start in FEI mode
  //--- Enable capacitors for crystal
    ©OSC.CR = {©OSC.CR !SC8P:1 !SC2P:1 !ERCLKEN:1}
  //--- Enable osc, 8-32 MHz range, low power mode
    ©MCG.C2 = {©MCG.C2 !RANGE:2 !EREFS:1}
  //--- Switch to crystal as clock source, FLL input = 16 MHz / 512
    ©MCG.C1 = {©MCG.C1 !CLKS:2 !FRDIV:4}
  //--- Wait for crystal oscillator to begin
    while ©MCG.S.OSCINIT0 == 0 {}
  //--- Wait for FLL to use oscillator
    while ©MCG.S.IREFST ≠ 0 {}
  //--- Wait for MCGOUT to use oscillator
    while ©MCG.S.CLKST ≠ {©MCG.S !CLKST:2} {}
  //--- Now we're in FBE mode
  //--- If we need faster than crystal, turn on the PLL
    if @static F_CPU_MHZ > 120 {
      ©SMC.PMCTRL = {©SMC.PMCTRL !RUNM:3} // enter HSRUN mode
      let HSRUN $u8 = 0x80
      while ©SMC.PMSTAT ≠ HSRUN {}
    }
  //--- Configure CPU clock
    ©MCG.C5 = {©MCG.C5 !PRDIV:MCG_C5_PRDIV}
    ©MCG.C6 = {©MCG.C6 !PLLS:1 !VDIV:MCG_C6_VDIV}
  //--- Wait for PLL to start using xtal as its input
    while ©MCG.S.PLLST == 0 {}
  //--- Wait for PLL to lock
    while ©MCG.S.LOCK0 == 0 {}
  //------------------------------------ Now we're in PBE mode : now program the clock dividers
    ©SIM.CLKDIV1 = {©SIM.CLKDIV1
      !OUTDIV1:SIM_CLKDIV1_OUTDIV1 // Divisor for Core clock
      !OUTDIV2:SIM_CLKDIV1_OUTDIV2 // Divisor for Bus clock
      !OUTDIV3:SIM_CLKDIV1_OUTDIV3 // Divisor for Flexbus clock
      !OUTDIV4:SIM_CLKDIV1_OUTDIV4 // Divisor for Fash clock
    }
    ©SIM.CLKDIV2 = {©SIM.CLKDIV2 !USBDIV:SIM_CLKDIV2_USBDIV !USBFRAC:SIM_CLKDIV2_USBFRAC}
  //--- Switch to PLL as clock source
    ©MCG.C1 = {©MCG.C1 !CLKS:0 !FRDIV:4}
  //--- Wait for PLL clock to be used
    while ©MCG.S.CLKST ≠ {©MCG.S !CLKST:3} {}
  //--- USB clock
    ©SIM.SOPT2 = {©SIM.SOPT2
      !USBSRC:1
      !PLLFLLSEL:SIM_SOPT2_PLLFLLSEL
      !TRACECLKSEL:1
    }
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

driver root ()

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

