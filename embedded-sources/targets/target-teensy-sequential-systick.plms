newUnsignedRepresentation @unsigned8  "uint8_t"   8
newUnsignedRepresentation @unsigned16 "uint16_t" 16
newUnsignedRepresentation @unsigned32 "uint32_t" 32
newUnsignedRepresentation @unsigned64 "uint64_t" 64

newSignedRepresentation @signed8  "int8_t"   8
newSignedRepresentation @signed16 "int16_t" 16
newSignedRepresentation @signed32 "int32_t" 32
newSignedRepresentation @signed64 "int64_t" 64

newUnsignedRepresentation @size "uint32_t" 32

//-----------------------------------------------------------------------------*

booleanType Bool @unsigned8

newIntegerType UInt8  @unsigned8
newIntegerType UInt16 @unsigned16
newIntegerType UInt32 @unsigned32
newIntegerType UInt64 @unsigned64

newIntegerType Int8  @signed8
newIntegerType Int16 @signed16
newIntegerType Int32 @signed32
newIntegerType Int64 @signed64

//-----------------------------------------------------------------------------*

exception : Int32 UInt32

//-----------------------------------------------------------------------------*

mode $isr
mode $user
mode $init
mode $exception

//-----------------------------------------------------------------------------*

import "microcontrollers/mk20dx256.plm"
import "microcontrollers/lcd.plm"
import "microcontrollers/leds.plm"
import "microcontrollers/default-isr.plm"

//-----------------------------------------------------------------------------*

required proc setup $user ()
required proc loop $user ()

//-----------------------------------------------------------------------------*

proc waitMS $user $init  (?inDuration : UInt32) {
  let deadline = gCompteur + inDuration
  while gCompteur < deadline do
  end
}

//-----------------------------------------------------------------------------*

