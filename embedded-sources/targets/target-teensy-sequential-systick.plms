newUnsignedBaseType @unsigned8  "uint8_t"   8
newUnsignedBaseType @unsigned16 "uint16_t" 16
newUnsignedBaseType @unsigned32 "uint32_t" 32
newUnsignedBaseType @unsigned64 "uint64_t" 64

newSignedBaseType @signed8  "int8_t"   8
newSignedBaseType @signed16 "int16_t" 16
newSignedBaseType @signed32 "int32_t" 32
newSignedBaseType @signed64 "int64_t" 64

newUnsignedBaseType @size "uint32_t" 32

//-----------------------------------------------------------------------------*

newBooleanType Bool @unsigned8

newIntegerType UInt8  @unsigned8
newIntegerType UInt16 @unsigned16
newIntegerType UInt32 @unsigned32
newIntegerType UInt64 @unsigned64

newIntegerType Int8  @signed8
newIntegerType Int16 @signed16
newIntegerType Int32 @signed32
newIntegerType Int64 @signed64

//-----------------------------------------------------------------------------*

exception : Int32 UInt32

//-----------------------------------------------------------------------------*

mode $isr
mode $user
mode $init
mode $exception

//-----------------------------------------------------------------------------*

import "microcontrollers/mk20dx256.plm"
import "microcontrollers/lcd.plm"
import "microcontrollers/leds.plm"
import "microcontrollers/default-isr.plm"

//-----------------------------------------------------------------------------*

required proc $user setup ()
required proc $user loop ()

//-----------------------------------------------------------------------------*

proc $user $init waitMS (?inDuration : UInt32) {
  let deadline = gCompteur + inDuration
  while gCompteur < deadline do
  end
}

//-----------------------------------------------------------------------------*

