newUnsignedBaseType @unsigned8  "uint8_t"   8
newUnsignedBaseType @unsigned16 "uint16_t" 16
newUnsignedBaseType @unsigned32 "uint32_t" 32
newUnsignedBaseType @unsigned64 "uint64_t" 64

newSignedBaseType @signed8  "int8_t"   8
newSignedBaseType @signed16 "int16_t" 16
newSignedBaseType @signed32 "int32_t" 32
newSignedBaseType @signed64 "int64_t" 64

newUnsignedBaseType @size "uint32_t" 32

//-----------------------------------------------------------------------------*

newBooleanType Bool @unsigned8

newIntegerType UInt8  @unsigned8
newIntegerType UInt16 @unsigned16
newIntegerType UInt32 @unsigned32
newIntegerType UInt64 @unsigned64

newIntegerType Int8  @signed8
newIntegerType Int16 @signed16
newIntegerType Int32 @signed32
newIntegerType Int64 @signed64

//-----------------------------------------------------------------------------*

import "microcontrollers/mk20dx256.plm"

//-----------------------------------------------------------------------------*

mode $isr
mode $user

//-----------------------------------------------------------------------------*

required proc $user setup ()
required proc $user loop ()
required proc $isr systickHandler ()

//-----------------------------------------------------------------------------*

var $isr $user gUpTimeInMilliseconds : UInt32 = 0

//-----------------------------------------------------------------------------*

proc $isr systickHandler () {
  gUpTimeInMilliseconds ++
}

//-----------------------------------------------------------------------------*

func $user uptimeMS () ->UInt32 outUpTimeInMilliseconds {
  outUpTimeInMilliseconds = gUpTimeInMilliseconds
}

//-----------------------------------------------------------------------------*

proc $user busyWaitingDuringMS (?UInt32 inDurationInMS) {
  var deadline = uptimeMS () + inDurationInMS
  while (uptimeMS () < deadline) do
  end
}

//-----------------------------------------------------------------------------*

