ctAssert target "teensy-3-1/unprivileged"

//——————————————————————————————————————————————————————————————————————————————

driver time ()

//——————————————————————————————————————————————————————————————————————————————
//   TIME
//——————————————————————————————————————————————————————————————————————————————

driver time > root {
  var mUptime $u32 = 0

  //············································································

  startup { // Configure Systick interrupt every ms
    ©SYST.RVR = 96000 - 1 // $interrupt every 96000 core clocks, i.e. every ms
    ©SYST.CVR = 0
    ©SYST.CSR = {©SYST.CSR !CLKSOURCE:1 !ENABLE:1 !TICKINT:1}
  }

  //············································································

  public func oneMillisecondBusyWait startup @noUnusedWarning () {
    while ©SYST.CSR.COUNTFLAG == 0 {}
  }

  //············································································

  public func panicOneMillisecondBusyWait panic @noUnusedWarning () {
    while ©SYST.CSR.COUNTFLAG == 0 {}
  }

  //············································································

  public section now safe @noUnusedWarning () -> $u32 {
    result = self.mUptime
  }

  //············································································

  public func busyWaitingDuringMS startup @noUnusedWarning @mutating (?inDelay $u32) {
    for _ $u32 in 0 ..< inDelay {
      self.oneMillisecondBusyWait ()
    }
  }

  //············································································

  public func panicBusyWaitingDuringMS panic @noUnusedWarning @mutating (?inDelay $u32) {
    for _ $u32 in 0 ..< inDelay {
      self.panicOneMillisecondBusyWait ()
    }
  }

  //············································································

  interrupt service systick {
    let now = self.mUptime +% 1
    self.mUptime = now
    makeTasksReady (!fromCurrentDate:now)
    notifyChangeForGuardedWaitUntil (!withCurrentDate:now)
  }

  //············································································

  public primitive wait safe @noUnusedWarning (?until: inDate $u32) {
    if inDate > self.mUptime {
      block (!onDeadline:inDate)
    }
  }

  //············································································

  public primitive wait @noUnusedWarning (?during: inDelay $u32) {
    if inDelay > 0 {
      block (!onDeadline:self.mUptime +% inDelay)
    }
  }

  //············································································

  public guard wait @noUnusedWarning (?until:inDeadline $u32) {
    accept = (inDeadline) ≤ self.mUptime
    if not accept {
      handle (!guardedDeadline:inDeadline)
    }
  }

  //············································································

}

//——————————————————————————————————————————————————————————————————————————————
