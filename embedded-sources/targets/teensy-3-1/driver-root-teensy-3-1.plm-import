
check target "teensy-3-1/unprivileged"

//——————————————————————————————————————————————————————————————————————————————
driver root {
  boot {
  //---------1- Inhiber le chien de garde
    $(WDOG:UNLOCK) = WDOG_UNLOCK_SEQ1
    $(WDOG:UNLOCK) = WDOG_UNLOCK_SEQ2
    $(WDOG:STCTRLH) = 0x0010
  //--- Enable clocks to always-used peripherals
    $(SIM:SCGC3) = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2
    $(SIM:SCGC5) = 0x00043F82    // clocks active to all GPIO
    $(SIM:SCGC6) = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL
  //--- If the RTC oscillator isn't enabled, get it started early
    if $(RTC:CR:OSCE) == 0 {
      $(RTC:SR) = 0
      $(RTC:CR) = $(RTC.CR !SC16P:1 !SC4P:1 !OSCE:1)
    }
  //--- Release I/O pins hold, if we woke up from VLLS mode
    if $(PMC:REGSC:ACKISO) ≠ 0 {
      $(PMC:REGSC) |= $(PMC.REGSC !ACKISO:1)
    }
    $(NVIC:VTOR) = 0  // use vector table in flash
  //---------2- Initialisation de la PLL
  // start in FEI mode
  //--- Enable capacitors for crystal
    $(OSC:CR) = $(OSC.CR !SC8P:1 !SC2P:1)
  //--- Enable osc, 8-32 MHz range, low power mode
    $(MCG:C2) = $(MCG.C2 !RANGE0:2 !EREFS:1)
  //--- Switch to crystal as clock source, FLL input = 16 MHz / 512
    $(MCG:C1) = $(MCG.C1 !CLKS:2 !FRDIV:4)
  //--- Wait for crystal oscillator to begin
    while $(MCG:S:OSCINIT0) == 0 {}
  //--- Wait for FLL to use oscillator
    while $(MCG:S:IREFST) ≠ 0 {}
  //--- Wait for MCGOUT to use oscillator
    while $(MCG:S:CLKST) ≠ $(MCG.S !CLKST:2) {}
  //--- Now we're in FBE mode
  //    Config PLL input for 16 MHz Crystal / 4 = 4 MHz
    $(MCG:C5) = $(MCG.C5 !PRDIV0:3)
  //--- Config PLL for 96 MHz output
    $(MCG:C6) = $(MCG.C6 !PLLS:1 !VDIV0:1)
  //--- Wait for PLL to start using xtal as its input
    while $(MCG:S:PLLST) == 0 {}
  //--- Wait for PLL to lock
    while $(MCG:S:LOCK0) == 0 {}
  //--- Now we're in PBE mode
  //    Config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash
    $(SIM:CLKDIV1) = $(SIM.CLKDIV1 !OUTDIV1:0 !OUTDIV2:1 !OUTDIV4:3)
    $(SIM:CLKDIV2) = $(SIM.CLKDIV2 !USBDIV:1)
  //--- Switch to PLL as clock source, FLL input = 16 MHz / 512
    $(MCG:C1) = $(MCG.C1 !CLKS:0 !FRDIV:4)
  //--- Wait for PLL clock to be used
    while $(MCG:S:CLKST) ≠ $(MCG.S !CLKST:3) {}
  //--- USB clock
    $(SIM:SOPT2) = $(SIM.SOPT2
      !USBSRC:1
      !PLLFLLSEL:1
      !TRACECLKSEL:1
      !CLKOUTSEL:6 // Selects the clock to output on the CLKOUT pin: OSCERCLK0
    )
  }
}

//-----------------------------------------------------------------------------*

driver root ()

//-----------------------------------------------------------------------------*

