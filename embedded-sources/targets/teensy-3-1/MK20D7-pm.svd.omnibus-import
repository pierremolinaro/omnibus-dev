//------------------------------------------------------------------------------
// MK20D7: MK20D7 Freescale Microcontroller
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// PERIPHERAL GROUP: ©ADC [2]
//        ADC0 at 0x4003b000
//        ADC1 at 0x400bb000
//------------------------------------------------------------------------------

registers ©ADC [2 @at 0x4003b000 0x400bb000]
          ©ADC0 @at 0x4003b000
          ©ADC1 @at 0x400bb000 {
//---  Registers SC1(A,B): ADC status and control registers 1
  SC1 [2 @offset 0x0 @inc 0x4]
  SC1A @offset 0x0
  SC1B @offset 0x4 $u32 {
    24
    COCO // at 7: Conversion complete flag
    AIEN // at 6: Interrupt enable
    DIFF // at 5: Differential mode enable
    ADCH:5 // at 0: Input channel select
  }

//---  Register CFG1: ADC configuration register 1
  CFG1 @offset 0x8 $u32 {
    24
    ADLPC // at 7: Low-power configuration
    ADIV:2 // at 5: Clock divide select
    ADLSMP // at 4: Sample time configuration
    MODE:2 // at 2: Conversion mode selection
    ADICLK:2 // at 0: Input clock select
  }

//---  Register CFG2: Configuration register 2
  CFG2 @offset 0xc $u32 {
    27
    MUXSEL // at 4: ADC Mux select
    ADACKEN // at 3: Asynchronous clock output enable
    ADHSC // at 2: High speed configuration
    ADLSTS:2 // at 0: Long sample time select
  }

//---  Registers R(A,B): ADC data result register
  R [2 @offset 0x10 @inc 0x4]
  RA @offset 0x10
  RB @offset 0x14 $u32 {
    16
    D:16 // at 0: Data result
  }

//---  Registers CV(1,2): Compare value registers
  CV [2 @offset 0x18 @inc 0x4]
  CV1 @offset 0x18
  CV2 @offset 0x1c $u32 {
    16
    CV:16 // at 0: Compare value
  }

//---  Register SC2: Status and control register 2
  SC2 @offset 0x20 $u32 {
    24
    ADACT // at 7: Conversion active
    ADTRG // at 6: Conversion trigger select
    ACFE // at 5: Compare function enable
    ACFGT // at 4: Compare function greater than enable
    ACREN // at 3: Compare function range enable
    DMAEN // at 2: DMA enable
    REFSEL:2 // at 0: Voltage reference selection
  }

//---  Register SC3: Status and control register 3
  SC3 @offset 0x24 $u32 {
    24
    CAL // at 7: Calibration
    CALF // at 6: Calibration failed flag
    2
    ADCO // at 3: Continuous conversion enable
    AVGE // at 2: Hardware average enable
    AVGS:2 // at 0: Hardware average select
  }

//---  Register OFS: ADC offset correction register
  OFS @offset 0x28 $u32 {
    16
    OFS:16 // at 0: Offset error correction value
  }

//---  Register PG: ADC plus-side gain register
  PG @offset 0x2c $u32 {
    16
    PG:16 // at 0: Plus-side gain
  }

//---  Register MG: ADC minus-side gain register
  MG @offset 0x30 $u32 {
    16
    MG:16 // at 0: Minus-side gain
  }

//---  Register CLPD: ADC plus-side general calibration value register
  CLPD @offset 0x34 $u32 {
    26
    CLPD:6 // at 0: no description available
  }

//---  Register CLPS: ADC plus-side general calibration value register
  CLPS @offset 0x38 $u32 {
    26
    CLPS:6 // at 0: no description available
  }

//---  Register CLP4: ADC plus-side general calibration value register
  CLP4 @offset 0x3c $u32 {
    22
    CLP4:10 // at 0: no description available
  }

//---  Register CLP3: ADC plus-side general calibration value register
  CLP3 @offset 0x40 $u32 {
    23
    CLP3:9 // at 0: no description available
  }

//---  Register CLP2: ADC plus-side general calibration value register
  CLP2 @offset 0x44 $u32 {
    24
    CLP2:8 // at 0: no description available
  }

//---  Register CLP1: ADC plus-side general calibration value register
  CLP1 @offset 0x48 $u32 {
    25
    CLP1:7 // at 0: no description available
  }

//---  Register CLP0: ADC plus-side general calibration value register
  CLP0 @offset 0x4c $u32 {
    26
    CLP0:6 // at 0: no description available
  }

//---  Register PGA: ADC PGA register
  PGA @offset 0x50 $u32 {
    8
    PGAEN // at 23: PGA enable
    2
    PGALPb // at 20: PGA low-power mode control
    PGAG:4 // at 16: PGA gain setting
    16
  }

//---  Register CLMD: ADC minus-side general calibration value register
  CLMD @offset 0x54 $u32 {
    26
    CLMD:6 // at 0: no description available
  }

//---  Register CLMS: ADC minus-side general calibration value register
  CLMS @offset 0x58 $u32 {
    26
    CLMS:6 // at 0: no description available
  }

//---  Register CLM4: ADC minus-side general calibration value register
  CLM4 @offset 0x5c $u32 {
    22
    CLM4:10 // at 0: no description available
  }

//---  Register CLM3: ADC minus-side general calibration value register
  CLM3 @offset 0x60 $u32 {
    23
    CLM3:9 // at 0: no description available
  }

//---  Register CLM2: ADC minus-side general calibration value register
  CLM2 @offset 0x64 $u32 {
    24
    CLM2:8 // at 0: no description available
  }

//---  Register CLM1: ADC minus-side general calibration value register
  CLM1 @offset 0x68 $u32 {
    25
    CLM1:7 // at 0: no description available
  }

//---  Register CLM0: ADC minus-side general calibration value register
  CLM0 @offset 0x6c $u32 {
    26
    CLM0:6 // at 0: no description available
  }

}

//------------------------------------------------------------------------------
// PERIPHERAL GROUP: ©AIPS [2]
//        AIPS0 at 0x40000000
//        AIPS1 at 0x40080000
//------------------------------------------------------------------------------

registers ©AIPS [2 @at 0x40000000 0x40080000]
          ©AIPS0 @at 0x40000000
          ©AIPS1 @at 0x40080000 {
//---  Register MPRA: Master Privilege Register A
  MPRA @offset 0x0 $u32 {
    1
    MTR0 // at 30: Master trusted for read
    MTW0 // at 29: Master trusted for writes
    MPL0 // at 28: Master privilege level
    1
    MTR1 // at 26: Master trusted for read
    MTW1 // at 25: Master trusted for writes
    MPL1 // at 24: Master privilege level
    1
    MTR2 // at 22: Master trusted for read
    MTW2 // at 21: Master trusted for writes
    MPL2 // at 20: Master privilege level
    1
    MTR3 // at 18: Master trusted for read
    MTW3 // at 17: Master trusted for writes
    MPL3 // at 16: Master privilege level
    16
  }

//---  Register PACRA: Peripheral Access Control Register
  PACRA @offset 0x20 $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRB: Peripheral Access Control Register
  PACRB @offset 0x24 $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRC: Peripheral Access Control Register
  PACRC @offset 0x28 $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRD: Peripheral Access Control Register
  PACRD @offset 0x2c $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRE: Peripheral Access Control Register
  PACRE @offset 0x40 $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRF: Peripheral Access Control Register
  PACRF @offset 0x44 $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRG: Peripheral Access Control Register
  PACRG @offset 0x48 $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRH: Peripheral Access Control Register
  PACRH @offset 0x4c $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRI: Peripheral Access Control Register
  PACRI @offset 0x50 $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRJ: Peripheral Access Control Register
  PACRJ @offset 0x54 $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRK: Peripheral Access Control Register
  PACRK @offset 0x58 $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRL: Peripheral Access Control Register
  PACRL @offset 0x5c $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRM: Peripheral Access Control Register
  PACRM @offset 0x60 $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRN: Peripheral Access Control Register
  PACRN @offset 0x64 $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRO: Peripheral Access Control Register
  PACRO @offset 0x68 $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

//---  Register PACRP: Peripheral Access Control Register
  PACRP @offset 0x6c $u32 {
    1
    SP0 // at 30: Supervisor protect
    WP0 // at 29: Write protect
    TP0 // at 28: Trusted protect
    1
    SP1 // at 26: Supervisor protect
    WP1 // at 25: Write protect
    TP1 // at 24: Trusted protect
    1
    SP2 // at 22: Supervisor protect
    WP2 // at 21: Write protect
    TP2 // at 20: Trusted protect
    1
    SP3 // at 18: Supervisor protect
    WP3 // at 17: Write protect
    TP3 // at 16: Trusted protect
    1
    SP4 // at 14: Supervisor protect
    WP4 // at 13: Write protect
    TP4 // at 12: Trusted protect
    1
    SP5 // at 10: Supervisor protect
    WP5 // at 9: Write protect
    TP5 // at 8: Trusted protect
    1
    SP6 // at 6: Supervisor protect
    WP6 // at 5: Write protect
    TP6 // at 4: Trusted protect
    1
    SP7 // at 2: Supervisor protect
    WP7 // at 1: Write protect
    TP7 // at 0: Trusted protect
  }

}

//------------------------------------------------------------------------------
// Peripheral AXBS: Crossbar switch
//------------------------------------------------------------------------------

registers ©AXBS @at 0x40004000 {
//---  Registers PRS(0,1,2,3): Priority Registers Slave
  PRS [4 @offset 0x0 @inc 0x100]
  PRS0 @offset 0x0
  PRS1 @offset 0x100
  PRS2 @offset 0x200
  PRS3 @offset 0x300 $u32 {
    9
    M5:3 // at 20: Master 5 priority. Sets the arbitration priority for this port on the associated slave port.
    1
    M4:3 // at 16: Master 4 priority. Sets the arbitration priority for this port on the associated slave port.
    1
    M3:3 // at 12: Master 3 priority. Sets the arbitration priority for this port on the associated slave port.
    1
    M2:3 // at 8: Master 2 priority. Sets the arbitration priority for this port on the associated slave port.
    1
    M1:3 // at 4: Master 1 priority. Sets the arbitration priority for this port on the associated slave port.
    1
    M0:3 // at 0: Master 0 priority. Sets the arbitration priority for this port on the associated slave port.
  }

//---  Registers CRS(0,1,2,3): Control Register
  CRS [4 @offset 0x10 @inc 0x100]
  CRS0 @offset 0x10
  CRS1 @offset 0x110
  CRS2 @offset 0x210
  CRS3 @offset 0x310 $u32 {
    RO // at 31: Read only
    HLP // at 30: Halt low priority
    20
    ARB:2 // at 8: Arbitration mode
    2
    PCTL:2 // at 4: Parking control
    1
    PARK:3 // at 0: Park
  }

//---  Registers MGPCR(0,1,2,3): Master General Purpose Control Register
  MGPCR [4 @offset 0x800 @inc 0x100]
  MGPCR0 @offset 0x800
  MGPCR1 @offset 0x900
  MGPCR2 @offset 0xa00
  MGPCR3 @offset 0xb00 $u32 {
    29
    AULB:3 // at 0: Arbitrates on undefined length bursts
  }

}

//------------------------------------------------------------------------------
// Peripheral CAN0: Flex Controller Area Network module
//------------------------------------------------------------------------------

registers ©CAN0 @at 0x40024000 {
//---  Register MCR: Module Configuration Register
  MCR @offset 0x0 $u32 {
    MDIS // at 31: Module Disable
    FRZ // at 30: Freeze Enable
    RFEN // at 29: Rx FIFO Enable
    HALT // at 28: Halt FlexCAN
    NOTRDY // at 27: FlexCAN Not Ready
    WAKMSK // at 26: Wake Up Interrupt Mask
    SOFTRST // at 25: Soft Reset
    FRZACK // at 24: Freeze Mode Acknowledge
    SUPV // at 23: Supervisor Mode
    SLFWAK // at 22: Self Wake Up
    WRNEN // at 21: Warning Interrupt Enable
    LPMACK // at 20: Low Power Mode Acknowledge
    2
    SRXDIS // at 17: Self Reception Disable
    IRMQ // at 16: Individual Rx Masking and Queue Enable
    2
    LPRIOEN // at 13: Local Priority Enable
    AEN // at 12: Abort Enable
    2
    IDAM:2 // at 8: ID Acceptance Mode
    1
    MAXMB:7 // at 0: Number of the Last Message Buffer
  }

//---  Register CTRL1: Control 1 Register
  CTRL1 @offset 0x4 $u32 {
    PRESDIV:8 // at 24: Prescaler Division Factor
    RJW:2 // at 22: Resync Jump Width
    PSEG1:3 // at 19: Phase Segment 1
    PSEG2:3 // at 16: Phase Segment 2
    BOFFMSK // at 15: Bus Off Mask
    ERRMSK // at 14: Error Mask
    CLKSRC // at 13: CAN Engine Clock Source
    LPB // at 12: Loop Back Mode
    TWRNMSK // at 11: Tx Warning Interrupt Mask
    RWRNMSK // at 10: Rx Warning Interrupt Mask
    2
    SMP // at 7: CAN Bit Sampling
    BOFFREC // at 6: Bus Off Recovery
    TSYN // at 5: Timer Sync
    LBUF // at 4: Lowest Buffer Transmitted First
    LOM // at 3: Listen-Only Mode
    PROPSEG:3 // at 0: Propagation Segment
  }

//---  Register TIMER: Free Running Timer
  TIMER @offset 0x8 $u32 {
    16
    TIMER:16 // at 0: Timer value
  }

//---  Register RXMGMASK: Rx Mailboxes Global Mask Register
  RXMGMASK @offset 0x10 $u32 {
    MG:32 // at 0: Rx Mailboxes Global Mask Bits
  }

//---  Register RX14MASK: Rx 14 Mask Register
  RX14MASK @offset 0x14 $u32 {
    RX14M:32 // at 0: Rx Buffer 14 Mask Bits
  }

//---  Register RX15MASK: Rx 15 Mask Register
  RX15MASK @offset 0x18 $u32 {
    RX15M:32 // at 0: Rx Buffer 15 Mask Bits
  }

//---  Register ECR: Error Counter
  ECR @offset 0x1c $u32 {
    16
    RXERRCNT:8 // at 8: Receive Error Counter
    TXERRCNT:8 // at 0: Transmit Error Counter
  }

//---  Register ESR1: Error and Status 1 Register
  ESR1 @offset 0x20 $u32 {
    13
    SYNCH // at 18: CAN Synchronization Status
    TWRNINT // at 17: Tx Warning Interrupt Flag
    RWRNINT // at 16: Rx Warning Interrupt Flag
    BIT1ERR // at 15: Bit1 Error
    BIT0ERR // at 14: Bit0 Error
    ACKERR // at 13: Acknowledge Error
    CRCERR // at 12: Cyclic Redundancy Check Error
    FRMERR // at 11: Form Error
    STFERR // at 10: Stuffing Error
    TXWRN // at 9: TX Error Warning
    RXWRN // at 8: Rx Error Warning
    IDLE // at 7: no description available
    TX // at 6: FlexCAN in Transmission
    FLTCONF:2 // at 4: Fault Confinement State
    RX // at 3: FlexCAN in Reception
    BOFFINT // at 2: 'Bus Off' Interrupt
    ERRINT // at 1: Error Interrupt
    WAKINT // at 0: Wake-Up Interrupt
  }

//---  Register IMASK2: Interrupt Masks 2 Register
  IMASK2 @offset 0x24 $u32 {
    BUFHM:32 // at 0: Buffer MBi Mask
  }

//---  Register IMASK1: Interrupt Masks 1 Register
  IMASK1 @offset 0x28 $u32 {
    BUFLM:32 // at 0: Buffer MBi Mask
  }

//---  Register IFLAG2: Interrupt Flags 2 Register
  IFLAG2 @offset 0x2c $u32 {
    BUFHI:32 // at 0: Buffer MBi Interrupt
  }

//---  Register IFLAG1: Interrupt Flags 1 Register
  IFLAG1 @offset 0x30 $u32 {
    BUF31TO8I:24 // at 8: Buffer MBi Interrupt
    BUF7I // at 7: Buffer MB7 Interrupt or "Rx FIFO Overflow"
    BUF6I // at 6: Buffer MB6 Interrupt or "Rx FIFO Warning"
    BUF5I // at 5: Buffer MB5 Interrupt or "Frames available in Rx FIFO"
    BUF4TO0I:5 // at 0: Buffer MBi Interrupt or "reserved"
  }

//---  Register CTRL2: Control 2 Register
  CTRL2 @offset 0x34 $u32 {
    3
    WRMFRZ // at 28: Write-Access to Memory in Freeze mode
    RFFN:4 // at 24: Number of Rx FIFO Filters
    TASD:5 // at 19: Tx Arbitration Start Delay
    MRP // at 18: Mailboxes Reception Priority
    RRS // at 17: Remote Request Storing
    EACEN // at 16: Entire Frame Arbitration Field Comparison Enable for Rx Mailboxes
    16
  }

//---  Register ESR2: Error and Status 2 Register
  ESR2 @offset 0x38 $u32 {
    9
    LPTM:7 // at 16: Lowest Priority Tx Mailbox
    1
    VPS // at 14: Valid Priority Status
    IMB // at 13: Inactive Mailbox
    13
  }

//---  Register CRCR: CRC Register
  CRCR @offset 0x44 $u32 {
    9
    MBCRC:7 // at 16: CRC Mailbox
    1
    TXCRC:15 // at 0: CRC Transmitted
  }

//---  Register RXFGMASK: Rx FIFO Global Mask Register
  RXFGMASK @offset 0x48 $u32 {
    FGM:32 // at 0: Rx FIFO Global Mask Bits
  }

//---  Register RXFIR: Rx FIFO Information Register
  RXFIR @offset 0x4c $u32 {
    23
    IDHIT:9 // at 0: Identifier Acceptance Filter Hit Indicator
  }

//---  Register CS0: Message Buffer 0 CS Register
  CS0 @offset 0x80 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID0: Message Buffer 0 ID Register
  ID0 @offset 0x84 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD00: Message Buffer 0 WORD0 Register
  WORD00 @offset 0x88 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD10: Message Buffer 0 WORD1 Register
  WORD10 @offset 0x8c $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS1: Message Buffer 1 CS Register
  CS1 @offset 0x90 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID1: Message Buffer 1 ID Register
  ID1 @offset 0x94 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD01: Message Buffer 1 WORD0 Register
  WORD01 @offset 0x98 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD11: Message Buffer 1 WORD1 Register
  WORD11 @offset 0x9c $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS2: Message Buffer 2 CS Register
  CS2 @offset 0xa0 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID2: Message Buffer 2 ID Register
  ID2 @offset 0xa4 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD02: Message Buffer 2 WORD0 Register
  WORD02 @offset 0xa8 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD12: Message Buffer 2 WORD1 Register
  WORD12 @offset 0xac $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS3: Message Buffer 3 CS Register
  CS3 @offset 0xb0 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID3: Message Buffer 3 ID Register
  ID3 @offset 0xb4 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD03: Message Buffer 3 WORD0 Register
  WORD03 @offset 0xb8 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD13: Message Buffer 3 WORD1 Register
  WORD13 @offset 0xbc $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS4: Message Buffer 4 CS Register
  CS4 @offset 0xc0 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID4: Message Buffer 4 ID Register
  ID4 @offset 0xc4 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD04: Message Buffer 4 WORD0 Register
  WORD04 @offset 0xc8 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD14: Message Buffer 4 WORD1 Register
  WORD14 @offset 0xcc $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS5: Message Buffer 5 CS Register
  CS5 @offset 0xd0 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID5: Message Buffer 5 ID Register
  ID5 @offset 0xd4 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD05: Message Buffer 5 WORD0 Register
  WORD05 @offset 0xd8 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD15: Message Buffer 5 WORD1 Register
  WORD15 @offset 0xdc $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS6: Message Buffer 6 CS Register
  CS6 @offset 0xe0 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID6: Message Buffer 6 ID Register
  ID6 @offset 0xe4 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD06: Message Buffer 6 WORD0 Register
  WORD06 @offset 0xe8 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD16: Message Buffer 6 WORD1 Register
  WORD16 @offset 0xec $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS7: Message Buffer 7 CS Register
  CS7 @offset 0xf0 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID7: Message Buffer 7 ID Register
  ID7 @offset 0xf4 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD07: Message Buffer 7 WORD0 Register
  WORD07 @offset 0xf8 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD17: Message Buffer 7 WORD1 Register
  WORD17 @offset 0xfc $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS8: Message Buffer 8 CS Register
  CS8 @offset 0x100 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID8: Message Buffer 8 ID Register
  ID8 @offset 0x104 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD08: Message Buffer 8 WORD0 Register
  WORD08 @offset 0x108 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD18: Message Buffer 8 WORD1 Register
  WORD18 @offset 0x10c $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS9: Message Buffer 9 CS Register
  CS9 @offset 0x110 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID9: Message Buffer 9 ID Register
  ID9 @offset 0x114 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD09: Message Buffer 9 WORD0 Register
  WORD09 @offset 0x118 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD19: Message Buffer 9 WORD1 Register
  WORD19 @offset 0x11c $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS10: Message Buffer 10 CS Register
  CS10 @offset 0x120 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID10: Message Buffer 10 ID Register
  ID10 @offset 0x124 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD010: Message Buffer 10 WORD0 Register
  WORD010 @offset 0x128 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD110: Message Buffer 10 WORD1 Register
  WORD110 @offset 0x12c $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS11: Message Buffer 11 CS Register
  CS11 @offset 0x130 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID11: Message Buffer 11 ID Register
  ID11 @offset 0x134 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD011: Message Buffer 11 WORD0 Register
  WORD011 @offset 0x138 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD111: Message Buffer 11 WORD1 Register
  WORD111 @offset 0x13c $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS12: Message Buffer 12 CS Register
  CS12 @offset 0x140 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID12: Message Buffer 12 ID Register
  ID12 @offset 0x144 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD012: Message Buffer 12 WORD0 Register
  WORD012 @offset 0x148 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD112: Message Buffer 12 WORD1 Register
  WORD112 @offset 0x14c $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS13: Message Buffer 13 CS Register
  CS13 @offset 0x150 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID13: Message Buffer 13 ID Register
  ID13 @offset 0x154 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD013: Message Buffer 13 WORD0 Register
  WORD013 @offset 0x158 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD113: Message Buffer 13 WORD1 Register
  WORD113 @offset 0x15c $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS14: Message Buffer 14 CS Register
  CS14 @offset 0x160 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID14: Message Buffer 14 ID Register
  ID14 @offset 0x164 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD014: Message Buffer 14 WORD0 Register
  WORD014 @offset 0x168 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD114: Message Buffer 14 WORD1 Register
  WORD114 @offset 0x16c $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Register CS15: Message Buffer 15 CS Register
  CS15 @offset 0x170 $u32 {
    4
    CODE:4 // at 24: Reserved
    1
    SRR // at 22: Substitute Remote Request. Contains a fixed recessive bit.
    IDE // at 21: ID Extended. One/zero for extended/standard format frame.
    RTR // at 20: Remote Transmission Request. One/zero for remote/data frame.
    DLC:4 // at 16: Length of the data to be stored/transmitted.
    TIME_STAMP:16 // at 0: Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus.
  }

//---  Register ID15: Message Buffer 15 ID Register
  ID15 @offset 0x174 $u32 {
    PRIO:3 // at 29: Local priority. This 3-bit fieldis only used when LPRIO_EN bit is set in MCR and it only makes sense for Tx buffers. These bits are not transmitted. They are appended to the regular ID to define the transmission priority.
    STD:11 // at 18: Contains standard/extended (HIGH word) identifier of message buffer.
    EXT:18 // at 0: Contains extended (LOW word) identifier of message buffer.
  }

//---  Register WORD015: Message Buffer 15 WORD0 Register
  WORD015 @offset 0x178 $u32 {
    DATA_BYTE_0:8 // at 24: Data byte 0 of Rx/Tx frame.
    DATA_BYTE_1:8 // at 16: Data byte 1 of Rx/Tx frame.
    DATA_BYTE_2:8 // at 8: Data byte 2 of Rx/Tx frame.
    DATA_BYTE_3:8 // at 0: Data byte 3 of Rx/Tx frame.
  }

//---  Register WORD115: Message Buffer 15 WORD1 Register
  WORD115 @offset 0x17c $u32 {
    DATA_BYTE_4:8 // at 24: Data byte 4 of Rx/Tx frame.
    DATA_BYTE_5:8 // at 16: Data byte 5 of Rx/Tx frame.
    DATA_BYTE_6:8 // at 8: Data byte 6 of Rx/Tx frame.
    DATA_BYTE_7:8 // at 0: Data byte 7 of Rx/Tx frame.
  }

//---  Registers RXIMR(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): Rx Individual Mask Registers
  RXIMR [16 @offset 0x880 @inc 0x4]
  RXIMR0 @offset 0x880
  RXIMR1 @offset 0x884
  RXIMR2 @offset 0x888
  RXIMR3 @offset 0x88c
  RXIMR4 @offset 0x890
  RXIMR5 @offset 0x894
  RXIMR6 @offset 0x898
  RXIMR7 @offset 0x89c
  RXIMR8 @offset 0x8a0
  RXIMR9 @offset 0x8a4
  RXIMR10 @offset 0x8a8
  RXIMR11 @offset 0x8ac
  RXIMR12 @offset 0x8b0
  RXIMR13 @offset 0x8b4
  RXIMR14 @offset 0x8b8
  RXIMR15 @offset 0x8bc $u32 {
    MI:32 // at 0: Individual Mask Bits
  }

}

//------------------------------------------------------------------------------
// PERIPHERAL GROUP: ©CMP [3]
//        CMP0 at 0x40073000
//        CMP1 at 0x40073008
//        CMP2 at 0x40073010
//------------------------------------------------------------------------------

registers ©CMP [3 @at 0x40073000 0x40073008 0x40073010]
          ©CMP0 @at 0x40073000
          ©CMP1 @at 0x40073008
          ©CMP2 @at 0x40073010 {
//---  Register CR0: CMP Control Register 0
  CR0 @offset 0x0 $u8 {
    1
    FILTER_CNT:3 // at 4: Filter Sample Count
    2
    HYSTCTR:2 // at 0: Comparator hard block hysteresis control
  }

//---  Register CR1: CMP Control Register 1
  CR1 @offset 0x1 $u8 {
    SE // at 7: Sample Enable
    WE // at 6: Windowing Enable
    1
    PMODE // at 4: Power Mode Select
    INV // at 3: Comparator INVERT
    COS // at 2: Comparator Output Select
    OPE // at 1: Comparator Output Pin Enable
    EN // at 0: Comparator Module Enable
  }

//---  Register FPR: CMP Filter Period Register
  FPR @offset 0x2 $u8 {
    FILT_PER:8 // at 0: Filter Sample Period
  }

//---  Register SCR: CMP Status and Control Register
  SCR @offset 0x3 $u8 {
    1
    DMAEN // at 6: DMA Enable Control
    1
    IER // at 4: Comparator Interrupt Enable Rising
    IEF // at 3: Comparator Interrupt Enable Falling
    CFR // at 2: Analog Comparator Flag Rising
    CFF // at 1: Analog Comparator Flag Falling
    COUT // at 0: Analog Comparator Output
  }

//---  Register DACCR: DAC Control Register
  DACCR @offset 0x4 $u8 {
    DACEN // at 7: DAC Enable
    VRSEL // at 6: Supply Voltage Reference Source Select
    VOSEL:6 // at 0: DAC Output Voltage Select
  }

//---  Register MUXCR: MUX Control Register
  MUXCR @offset 0x5 $u8 {
    2
    PSEL:3 // at 3: Plus Input MUX Control
    MSEL:3 // at 0: Minus Input MUX Control
  }

}

//------------------------------------------------------------------------------
// Peripheral CMT: Carrier Modulator Transmitter
//------------------------------------------------------------------------------

registers ©CMT @at 0x40062000 {
//---  Register CGH1: CMT Carrier Generator High Data Register 1
  CGH1 @offset 0x0 $u8 {
    PH:8 // at 0: Primary Carrier High Time Data Value
  }

//---  Register CGL1: CMT Carrier Generator Low Data Register 1
  CGL1 @offset 0x1 $u8 {
    PL:8 // at 0: Primary Carrier Low Time Data Value
  }

//---  Register CGH2: CMT Carrier Generator High Data Register 2
  CGH2 @offset 0x2 $u8 {
    SH:8 // at 0: Secondary Carrier High Time Data Value
  }

//---  Register CGL2: CMT Carrier Generator Low Data Register 2
  CGL2 @offset 0x3 $u8 {
    SL:8 // at 0: Secondary Carrier Low Time Data Value
  }

//---  Register OC: CMT Output Control Register
  OC @offset 0x4 $u8 {
    IROL // at 7: IRO Latch Control
    CMTPOL // at 6: CMT Output Polarity
    IROPEN // at 5: IRO Pin Enable
    5
  }

//---  Register MSC: CMT Modulator Status and Control Register
  MSC @offset 0x5 $u8 {
    EOCF // at 7: End Of Cycle Status Flag
    CMTDIV:2 // at 5: CMT Clock Divide Prescaler
    EXSPC // at 4: Extended Space Enable
    BASE // at 3: Baseband Enable
    FSK // at 2: FSK Mode Select
    EOCIE // at 1: End of Cycle Interrupt Enable
    MCGEN // at 0: Modulator and Carrier Generator Enable
  }

//---  Register CMD1: CMT Modulator Data Register Mark High
  CMD1 @offset 0x6 $u8 {
    MB:8 // at 0: no description available
  }

//---  Register CMD2: CMT Modulator Data Register Mark Low
  CMD2 @offset 0x7 $u8 {
    MB:8 // at 0: no description available
  }

//---  Register CMD3: CMT Modulator Data Register Space High
  CMD3 @offset 0x8 $u8 {
    SB:8 // at 0: no description available
  }

//---  Register CMD4: CMT Modulator Data Register Space Low
  CMD4 @offset 0x9 $u8 {
    SB:8 // at 0: no description available
  }

//---  Register PPS: CMT Primary Prescaler Register
  PPS @offset 0xa $u8 {
    4
    PPSDIV:4 // at 0: Primary Prescaler Divider
  }

//---  Register DMA: CMT Direct Memory Access
  DMA @offset 0xb $u8 {
    7
    DMA // at 0: DMA Enable
  }

}

//------------------------------------------------------------------------------
// Peripheral CRC: Cyclic Redundancy Check
//------------------------------------------------------------------------------

registers ©CRC @at 0x40032000 {
//---  Register CRCLL: CRC_CRCLL register.
  CRCLL @offset 0x0 $u8 {
    CRCLL:8 // at 0: CRCLL stores the first 8 bits of the 32 bit CRC
  }

//---  Register CRC: CRC Data Register
  CRC @offset 0x0 $u32 {
    HU:8 // at 24: CRC High Upper Byte
    HL:8 // at 16: CRC High Lower Byte
    LU:8 // at 8: CRC Low Upper Byte
    LL:8 // at 0: CRC Low Lower Byte
  }

//---  Register CRCL: CRC_CRCL register.
  CRCL @offset 0x0 $u16 {
    CRCL:16 // at 0: CRCL stores the lower 16 bits of the 16/32 bit CRC
  }

//---  Register CRCLU: CRC_CRCLU register.
  CRCLU @offset 0x1 $u8 {
    CRCLU:8 // at 0: CRCLL stores the second 8 bits of the 32 bit CRC
  }

//---  Register CRCHL: CRC_CRCHL register.
  CRCHL @offset 0x2 $u8 {
    CRCHL:8 // at 0: CRCHL stores the third 8 bits of the 32 bit CRC
  }

//---  Register CRCH: CRC_CRCH register.
  CRCH @offset 0x2 $u16 {
    CRCH:16 // at 0: CRCL stores the high 16 bits of the 16/32 bit CRC
  }

//---  Register CRCHU: CRC_CRCHU register.
  CRCHU @offset 0x3 $u8 {
    CRCHU:8 // at 0: CRCHU stores the fourth 8 bits of the 32 bit CRC
  }

//---  Register GPOLY: CRC Polynomial Register
  GPOLY @offset 0x4 $u32 {
    HIGH:16 // at 16: High polynominal half-word
    LOW:16 // at 0: Low polynominal half-word
  }

//---  Register GPOLYLL: CRC_GPOLYLL register.
  GPOLYLL @offset 0x4 $u8 {
    GPOLYLL:8 // at 0: POLYLL stores the first 8 bits of the 32 bit CRC
  }

//---  Register GPOLYL: CRC_GPOLYL register.
  GPOLYL @offset 0x4 $u16 {
    GPOLYL:16 // at 0: POLYL stores the lower 16 bits of the 16/32 bit CRC polynomial value
  }

//---  Register GPOLYLU: CRC_GPOLYLU register.
  GPOLYLU @offset 0x5 $u8 {
    GPOLYLU:8 // at 0: POLYLL stores the second 8 bits of the 32 bit CRC
  }

//---  Register GPOLYH: CRC_GPOLYH register.
  GPOLYH @offset 0x6 $u16 {
    GPOLYH:16 // at 0: POLYH stores the high 16 bits of the 16/32 bit CRC polynomial value
  }

//---  Register GPOLYHL: CRC_GPOLYHL register.
  GPOLYHL @offset 0x6 $u8 {
    GPOLYHL:8 // at 0: POLYHL stores the third 8 bits of the 32 bit CRC
  }

//---  Register GPOLYHU: CRC_GPOLYHU register.
  GPOLYHU @offset 0x7 $u8 {
    GPOLYHU:8 // at 0: POLYHU stores the fourth 8 bits of the 32 bit CRC
  }

//---  Register CTRL: CRC Control Register
  CTRL @offset 0x8 $u32 {
    TOT:2 // at 30: Type of Transpose for Writes
    TOTR:2 // at 28: Type of Transpose for Read
    1
    FXOR // at 26: Complement Read of CRC data register
    WAS // at 25: Write CRC data register as seed
    TCRC // at 24: no description available
    24
  }

//---  Register CTRLHU: CRC_CTRLHU register.
  CTRLHU @offset 0xb $u8 {
    TOT:2 // at 6: no description available
    TOTR:2 // at 4: no description available
    1
    FXOR // at 2: no description available
    WAS // at 1: no description available
    TCRC // at 0: no description available
  }

}

//------------------------------------------------------------------------------
// Peripheral DAC0: 12-Bit Digital-to-Analog Converter
//------------------------------------------------------------------------------

registers ©DAC0 @at 0x400cc000 {
//---  Registers DATL(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): DAC Data Low Register
  DATL [16 @offset 0x0 @inc 0x2]
  DAT0L @offset 0x0
  DAT1L @offset 0x2
  DAT2L @offset 0x4
  DAT3L @offset 0x6
  DAT4L @offset 0x8
  DAT5L @offset 0xa
  DAT6L @offset 0xc
  DAT7L @offset 0xe
  DAT8L @offset 0x10
  DAT9L @offset 0x12
  DAT10L @offset 0x14
  DAT11L @offset 0x16
  DAT12L @offset 0x18
  DAT13L @offset 0x1a
  DAT14L @offset 0x1c
  DAT15L @offset 0x1e $u8 {
    DATA:8 // at 0: no description available
  }

//---  Registers DATH(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): DAC Data High Register
  DATH [16 @offset 0x1 @inc 0x2]
  DAT0H @offset 0x1
  DAT1H @offset 0x3
  DAT2H @offset 0x5
  DAT3H @offset 0x7
  DAT4H @offset 0x9
  DAT5H @offset 0xb
  DAT6H @offset 0xd
  DAT7H @offset 0xf
  DAT8H @offset 0x11
  DAT9H @offset 0x13
  DAT10H @offset 0x15
  DAT11H @offset 0x17
  DAT12H @offset 0x19
  DAT13H @offset 0x1b
  DAT14H @offset 0x1d
  DAT15H @offset 0x1f $u8 {
    4
    DATA:4 // at 0: no description available
  }

//---  Register SR: DAC Status Register
  SR @offset 0x20 $u8 {
    5
    DACBFWMF // at 2: DAC buffer watermark flag
    DACBFRPTF // at 1: DAC buffer read pointer top position flag
    DACBFRPBF // at 0: DAC buffer read pointer bottom position flag
  }

//---  Register C0: DAC Control Register
  C0 @offset 0x21 $u8 {
    DACEN // at 7: DAC enable
    DACRFS // at 6: DAC Reference Select
    DACTRGSEL // at 5: DAC trigger select
    DACSWTRG // at 4: DAC software trigger
    LPEN // at 3: DAC low power control
    DACBWIEN // at 2: DAC buffer watermark interrupt enable
    DACBTIEN // at 1: DAC buffer read pointer top flag interrupt enable
    DACBBIEN // at 0: DAC buffer read pointer bottom flag interrupt enable
  }

//---  Register C1: DAC Control Register 1
  C1 @offset 0x22 $u8 {
    DMAEN // at 7: DMA enable select
    2
    DACBFWM:2 // at 3: DAC buffer watermark select
    DACBFMD:2 // at 1: DAC buffer work mode select
    DACBFEN // at 0: DAC buffer enable
  }

//---  Register C2: DAC Control Register 2
  C2 @offset 0x23 $u8 {
    DACBFRP:4 // at 4: DAC buffer read pointer
    DACBFUP:4 // at 0: DAC buffer upper limit
  }

}

//------------------------------------------------------------------------------
// Peripheral DMA: Enhanced direct memory access controller
//------------------------------------------------------------------------------

registers ©DMA @at 0x40008000 {
//---  Register CR: Control Register
  CR @offset 0x0 $u32 {
    14
    CX // at 17: Cancel Transfer
    ECX // at 16: Error Cancel Transfer
    8
    EMLM // at 7: Enable Minor Loop Mapping
    CLM // at 6: Continuous Link Mode
    HALT // at 5: Halt DMA Operations
    HOE // at 4: Halt On Error
    1
    ERCA // at 2: Enable Round Robin Channel Arbitration
    EDBG // at 1: Enable Debug
    1
  }

//---  Register ES: Error Status Register
  ES @offset 0x4 $u32 {
    VLD // at 31: no description available
    14
    ECX // at 16: Transfer Cancelled
    1
    CPE // at 14: Channel Priority Error
    2
    ERRCHN:4 // at 8: Error Channel Number or Cancelled Channel Number
    SAE // at 7: Source Address Error
    SOE // at 6: Source Offset Error
    DAE // at 5: Destination Address Error
    DOE // at 4: Destination Offset Error
    NCE // at 3: NBYTES/CITER Configuration Error
    SGE // at 2: Scatter/Gather Configuration Error
    SBE // at 1: Source Bus Error
    DBE // at 0: Destination Bus Error
  }

//---  Register ERQ: Enable Request Register
  ERQ @offset 0xc $u32 {
    16
    ERQ15 // at 15: Enable DMA Request 15
    ERQ14 // at 14: Enable DMA Request 14
    ERQ13 // at 13: Enable DMA Request 13
    ERQ12 // at 12: Enable DMA Request 12
    ERQ11 // at 11: Enable DMA Request 11
    ERQ10 // at 10: Enable DMA Request 10
    ERQ9 // at 9: Enable DMA Request 9
    ERQ8 // at 8: Enable DMA Request 8
    ERQ7 // at 7: Enable DMA Request 7
    ERQ6 // at 6: Enable DMA Request 6
    ERQ5 // at 5: Enable DMA Request 5
    ERQ4 // at 4: Enable DMA Request 4
    ERQ3 // at 3: Enable DMA Request 3
    ERQ2 // at 2: Enable DMA Request 2
    ERQ1 // at 1: Enable DMA Request 1
    ERQ0 // at 0: Enable DMA Request 0
  }

//---  Register EEI: Enable Error Interrupt Register
  EEI @offset 0x14 $u32 {
    16
    EEI15 // at 15: Enable Error Interrupt 15
    EEI14 // at 14: Enable Error Interrupt 14
    EEI13 // at 13: Enable Error Interrupt 13
    EEI12 // at 12: Enable Error Interrupt 12
    EEI11 // at 11: Enable Error Interrupt 11
    EEI10 // at 10: Enable Error Interrupt 10
    EEI9 // at 9: Enable Error Interrupt 9
    EEI8 // at 8: Enable Error Interrupt 8
    EEI7 // at 7: Enable Error Interrupt 7
    EEI6 // at 6: Enable Error Interrupt 6
    EEI5 // at 5: Enable Error Interrupt 5
    EEI4 // at 4: Enable Error Interrupt 4
    EEI3 // at 3: Enable Error Interrupt 3
    EEI2 // at 2: Enable Error Interrupt 2
    EEI1 // at 1: Enable Error Interrupt 1
    EEI0 // at 0: Enable Error Interrupt 0
  }

//---  Register CEEI: Clear Enable Error Interrupt Register
  CEEI @offset 0x18 $u8 {
    NOP // at 7: no description available
    CAEE // at 6: Clear All Enable Error Interrupts
    2
    CEEI:4 // at 0: Clear Enable Error Interrupt
  }

//---  Register SEEI: Set Enable Error Interrupt Register
  SEEI @offset 0x19 $u8 {
    NOP // at 7: no description available
    SAEE // at 6: Sets All Enable Error Interrupts
    2
    SEEI:4 // at 0: Set Enable Error Interrupt
  }

//---  Register CERQ: Clear Enable Request Register
  CERQ @offset 0x1a $u8 {
    NOP // at 7: no description available
    CAER // at 6: Clear All Enable Requests
    2
    CERQ:4 // at 0: Clear Enable Request
  }

//---  Register SERQ: Set Enable Request Register
  SERQ @offset 0x1b $u8 {
    NOP // at 7: no description available
    SAER // at 6: Set All Enable Requests
    2
    SERQ:4 // at 0: Set enable request
  }

//---  Register CDNE: Clear DONE Status Bit Register
  CDNE @offset 0x1c $u8 {
    NOP // at 7: no description available
    CADN // at 6: Clears All DONE Bits
    2
    CDNE:4 // at 0: Clear DONE Bit
  }

//---  Register SSRT: Set START Bit Register
  SSRT @offset 0x1d $u8 {
    NOP // at 7: no description available
    SAST // at 6: Set All START Bits (activates all channels)
    2
    SSRT:4 // at 0: Set START Bit
  }

//---  Register CERR: Clear Error Register
  CERR @offset 0x1e $u8 {
    NOP // at 7: no description available
    CAEI // at 6: Clear All Error Indicators
    2
    CERR:4 // at 0: Clear Error Indicator
  }

//---  Register CINT: Clear Interrupt Request Register
  CINT @offset 0x1f $u8 {
    NOP // at 7: no description available
    CAIR // at 6: Clear All Interrupt Requests
    2
    CINT:4 // at 0: Clear Interrupt Request
  }

//---  Register INT: Interrupt Request Register
  INT @offset 0x24 $u32 {
    16
    INT15 // at 15: Interrupt Request 15
    INT14 // at 14: Interrupt Request 14
    INT13 // at 13: Interrupt Request 13
    INT12 // at 12: Interrupt Request 12
    INT11 // at 11: Interrupt Request 11
    INT10 // at 10: Interrupt Request 10
    INT9 // at 9: Interrupt Request 9
    INT8 // at 8: Interrupt Request 8
    INT7 // at 7: Interrupt Request 7
    INT6 // at 6: Interrupt Request 6
    INT5 // at 5: Interrupt Request 5
    INT4 // at 4: Interrupt Request 4
    INT3 // at 3: Interrupt Request 3
    INT2 // at 2: Interrupt Request 2
    INT1 // at 1: Interrupt Request 1
    INT0 // at 0: Interrupt Request 0
  }

//---  Register ERR: Error Register
  ERR @offset 0x2c $u32 {
    16
    ERR15 // at 15: Error In Channel 15
    ERR14 // at 14: Error In Channel 14
    ERR13 // at 13: Error In Channel 13
    ERR12 // at 12: Error In Channel 12
    ERR11 // at 11: Error In Channel 11
    ERR10 // at 10: Error In Channel 10
    ERR9 // at 9: Error In Channel 9
    ERR8 // at 8: Error In Channel 8
    ERR7 // at 7: Error In Channel 7
    ERR6 // at 6: Error In Channel 6
    ERR5 // at 5: Error In Channel 5
    ERR4 // at 4: Error In Channel 4
    ERR3 // at 3: Error In Channel 3
    ERR2 // at 2: Error In Channel 2
    ERR1 // at 1: Error In Channel 1
    ERR0 // at 0: Error In Channel 0
  }

//---  Register HRS: Hardware Request Status Register
  HRS @offset 0x34 $u32 {
    16
    HRS15 // at 15: Hardware Request Status Channel 15
    HRS14 // at 14: Hardware Request Status Channel 14
    HRS13 // at 13: Hardware Request Status Channel 13
    HRS12 // at 12: Hardware Request Status Channel 12
    HRS11 // at 11: Hardware Request Status Channel 11
    HRS10 // at 10: Hardware Request Status Channel 10
    HRS9 // at 9: Hardware Request Status Channel 9
    HRS8 // at 8: Hardware Request Status Channel 8
    HRS7 // at 7: Hardware Request Status Channel 7
    HRS6 // at 6: Hardware Request Status Channel 6
    HRS5 // at 5: Hardware Request Status Channel 5
    HRS4 // at 4: Hardware Request Status Channel 4
    HRS3 // at 3: Hardware Request Status Channel 3
    HRS2 // at 2: Hardware Request Status Channel 2
    HRS1 // at 1: Hardware Request Status Channel 1
    HRS0 // at 0: Hardware Request Status Channel 0
  }

//---  Registers DCHPRI(3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12): Channel n Priority Register
  DCHPRI [16 @offset 0x100 @inc 0x1]
  DCHPRI3 @offset 0x100
  DCHPRI2 @offset 0x101
  DCHPRI1 @offset 0x102
  DCHPRI0 @offset 0x103
  DCHPRI7 @offset 0x104
  DCHPRI6 @offset 0x105
  DCHPRI5 @offset 0x106
  DCHPRI4 @offset 0x107
  DCHPRI11 @offset 0x108
  DCHPRI10 @offset 0x109
  DCHPRI9 @offset 0x10a
  DCHPRI8 @offset 0x10b
  DCHPRI15 @offset 0x10c
  DCHPRI14 @offset 0x10d
  DCHPRI13 @offset 0x10e
  DCHPRI12 @offset 0x10f $u8 {
    ECP // at 7: Enable Channel Preemption
    DPA // at 6: Disable Preempt Ability
    2
    CHPRI:4 // at 0: Channel n Arbitration Priority
  }

//---  Registers TCD_SADDR(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Source Address
  TCD_SADDR [16 @offset 0x1000 @inc 0x20]
  TCD0_SADDR @offset 0x1000
  TCD1_SADDR @offset 0x1020
  TCD2_SADDR @offset 0x1040
  TCD3_SADDR @offset 0x1060
  TCD4_SADDR @offset 0x1080
  TCD5_SADDR @offset 0x10a0
  TCD6_SADDR @offset 0x10c0
  TCD7_SADDR @offset 0x10e0
  TCD8_SADDR @offset 0x1100
  TCD9_SADDR @offset 0x1120
  TCD10_SADDR @offset 0x1140
  TCD11_SADDR @offset 0x1160
  TCD12_SADDR @offset 0x1180
  TCD13_SADDR @offset 0x11a0
  TCD14_SADDR @offset 0x11c0
  TCD15_SADDR @offset 0x11e0 $u32 {
    SADDR:32 // at 0: Source Address
  }

//---  Registers TCD_SOFF(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Signed Source Address Offset
  TCD_SOFF [16 @offset 0x1004 @inc 0x20]
  TCD0_SOFF @offset 0x1004
  TCD1_SOFF @offset 0x1024
  TCD2_SOFF @offset 0x1044
  TCD3_SOFF @offset 0x1064
  TCD4_SOFF @offset 0x1084
  TCD5_SOFF @offset 0x10a4
  TCD6_SOFF @offset 0x10c4
  TCD7_SOFF @offset 0x10e4
  TCD8_SOFF @offset 0x1104
  TCD9_SOFF @offset 0x1124
  TCD10_SOFF @offset 0x1144
  TCD11_SOFF @offset 0x1164
  TCD12_SOFF @offset 0x1184
  TCD13_SOFF @offset 0x11a4
  TCD14_SOFF @offset 0x11c4
  TCD15_SOFF @offset 0x11e4 $u16 {
    SOFF:16 // at 0: Source address signed offset
  }

//---  Registers TCD_ATTR(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Transfer Attributes
  TCD_ATTR [16 @offset 0x1006 @inc 0x20]
  TCD0_ATTR @offset 0x1006
  TCD1_ATTR @offset 0x1026
  TCD2_ATTR @offset 0x1046
  TCD3_ATTR @offset 0x1066
  TCD4_ATTR @offset 0x1086
  TCD5_ATTR @offset 0x10a6
  TCD6_ATTR @offset 0x10c6
  TCD7_ATTR @offset 0x10e6
  TCD8_ATTR @offset 0x1106
  TCD9_ATTR @offset 0x1126
  TCD10_ATTR @offset 0x1146
  TCD11_ATTR @offset 0x1166
  TCD12_ATTR @offset 0x1186
  TCD13_ATTR @offset 0x11a6
  TCD14_ATTR @offset 0x11c6
  TCD15_ATTR @offset 0x11e6 $u16 {
    SMOD:5 // at 11: Source Address Modulo.
    SSIZE:3 // at 8: Source data transfer size
    DMOD:5 // at 3: Destination Address Modulo
    DSIZE:3 // at 0: Destination Data Transfer Size
  }

//---  Registers TCD_NBYTES_MLOFFYES(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Signed Minor Loop Offset (Minor Loop and Offset Enabled)
  TCD_NBYTES_MLOFFYES [16 @offset 0x1008 @inc 0x20]
  TCD0_NBYTES_MLOFFYES @offset 0x1008
  TCD1_NBYTES_MLOFFYES @offset 0x1028
  TCD2_NBYTES_MLOFFYES @offset 0x1048
  TCD3_NBYTES_MLOFFYES @offset 0x1068
  TCD4_NBYTES_MLOFFYES @offset 0x1088
  TCD5_NBYTES_MLOFFYES @offset 0x10a8
  TCD6_NBYTES_MLOFFYES @offset 0x10c8
  TCD7_NBYTES_MLOFFYES @offset 0x10e8
  TCD8_NBYTES_MLOFFYES @offset 0x1108
  TCD9_NBYTES_MLOFFYES @offset 0x1128
  TCD10_NBYTES_MLOFFYES @offset 0x1148
  TCD11_NBYTES_MLOFFYES @offset 0x1168
  TCD12_NBYTES_MLOFFYES @offset 0x1188
  TCD13_NBYTES_MLOFFYES @offset 0x11a8
  TCD14_NBYTES_MLOFFYES @offset 0x11c8
  TCD15_NBYTES_MLOFFYES @offset 0x11e8 $u32 {
    SMLOE // at 31: Source Minor Loop Offset Enable
    DMLOE // at 30: Destination Minor Loop Offset enable
    MLOFF:20 // at 10: If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
    NBYTES:10 // at 0: Minor Byte Transfer Count
  }

//---  Registers TCD_NBYTES_MLOFFNO(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Signed Minor Loop Offset (Minor Loop Enabled and Offset Disabled)
  TCD_NBYTES_MLOFFNO [16 @offset 0x1008 @inc 0x20]
  TCD0_NBYTES_MLOFFNO @offset 0x1008
  TCD1_NBYTES_MLOFFNO @offset 0x1028
  TCD2_NBYTES_MLOFFNO @offset 0x1048
  TCD3_NBYTES_MLOFFNO @offset 0x1068
  TCD4_NBYTES_MLOFFNO @offset 0x1088
  TCD5_NBYTES_MLOFFNO @offset 0x10a8
  TCD6_NBYTES_MLOFFNO @offset 0x10c8
  TCD7_NBYTES_MLOFFNO @offset 0x10e8
  TCD8_NBYTES_MLOFFNO @offset 0x1108
  TCD9_NBYTES_MLOFFNO @offset 0x1128
  TCD10_NBYTES_MLOFFNO @offset 0x1148
  TCD11_NBYTES_MLOFFNO @offset 0x1168
  TCD12_NBYTES_MLOFFNO @offset 0x1188
  TCD13_NBYTES_MLOFFNO @offset 0x11a8
  TCD14_NBYTES_MLOFFNO @offset 0x11c8
  TCD15_NBYTES_MLOFFNO @offset 0x11e8 $u32 {
    SMLOE // at 31: Source Minor Loop Offset Enable
    DMLOE // at 30: Destination Minor Loop Offset enable
    NBYTES:30 // at 0: Minor Byte Transfer Count
  }

//---  Registers TCD_NBYTES_MLNO(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Minor Byte Count (Minor Loop Disabled)
  TCD_NBYTES_MLNO [16 @offset 0x1008 @inc 0x20]
  TCD0_NBYTES_MLNO @offset 0x1008
  TCD1_NBYTES_MLNO @offset 0x1028
  TCD2_NBYTES_MLNO @offset 0x1048
  TCD3_NBYTES_MLNO @offset 0x1068
  TCD4_NBYTES_MLNO @offset 0x1088
  TCD5_NBYTES_MLNO @offset 0x10a8
  TCD6_NBYTES_MLNO @offset 0x10c8
  TCD7_NBYTES_MLNO @offset 0x10e8
  TCD8_NBYTES_MLNO @offset 0x1108
  TCD9_NBYTES_MLNO @offset 0x1128
  TCD10_NBYTES_MLNO @offset 0x1148
  TCD11_NBYTES_MLNO @offset 0x1168
  TCD12_NBYTES_MLNO @offset 0x1188
  TCD13_NBYTES_MLNO @offset 0x11a8
  TCD14_NBYTES_MLNO @offset 0x11c8
  TCD15_NBYTES_MLNO @offset 0x11e8 $u32 {
    NBYTES:32 // at 0: Minor Byte Transfer Count
  }

//---  Registers TCD_SLAST(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Last Source Address Adjustment
  TCD_SLAST [16 @offset 0x100c @inc 0x20]
  TCD0_SLAST @offset 0x100c
  TCD1_SLAST @offset 0x102c
  TCD2_SLAST @offset 0x104c
  TCD3_SLAST @offset 0x106c
  TCD4_SLAST @offset 0x108c
  TCD5_SLAST @offset 0x10ac
  TCD6_SLAST @offset 0x10cc
  TCD7_SLAST @offset 0x10ec
  TCD8_SLAST @offset 0x110c
  TCD9_SLAST @offset 0x112c
  TCD10_SLAST @offset 0x114c
  TCD11_SLAST @offset 0x116c
  TCD12_SLAST @offset 0x118c
  TCD13_SLAST @offset 0x11ac
  TCD14_SLAST @offset 0x11cc
  TCD15_SLAST @offset 0x11ec $u32 {
    SLAST:32 // at 0: Last source Address Adjustment
  }

//---  Registers TCD_DADDR(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Destination Address
  TCD_DADDR [16 @offset 0x1010 @inc 0x20]
  TCD0_DADDR @offset 0x1010
  TCD1_DADDR @offset 0x1030
  TCD2_DADDR @offset 0x1050
  TCD3_DADDR @offset 0x1070
  TCD4_DADDR @offset 0x1090
  TCD5_DADDR @offset 0x10b0
  TCD6_DADDR @offset 0x10d0
  TCD7_DADDR @offset 0x10f0
  TCD8_DADDR @offset 0x1110
  TCD9_DADDR @offset 0x1130
  TCD10_DADDR @offset 0x1150
  TCD11_DADDR @offset 0x1170
  TCD12_DADDR @offset 0x1190
  TCD13_DADDR @offset 0x11b0
  TCD14_DADDR @offset 0x11d0
  TCD15_DADDR @offset 0x11f0 $u32 {
    DADDR:32 // at 0: Destination Address
  }

//---  Registers TCD_DOFF(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Signed Destination Address Offset
  TCD_DOFF [16 @offset 0x1014 @inc 0x20]
  TCD0_DOFF @offset 0x1014
  TCD1_DOFF @offset 0x1034
  TCD2_DOFF @offset 0x1054
  TCD3_DOFF @offset 0x1074
  TCD4_DOFF @offset 0x1094
  TCD5_DOFF @offset 0x10b4
  TCD6_DOFF @offset 0x10d4
  TCD7_DOFF @offset 0x10f4
  TCD8_DOFF @offset 0x1114
  TCD9_DOFF @offset 0x1134
  TCD10_DOFF @offset 0x1154
  TCD11_DOFF @offset 0x1174
  TCD12_DOFF @offset 0x1194
  TCD13_DOFF @offset 0x11b4
  TCD14_DOFF @offset 0x11d4
  TCD15_DOFF @offset 0x11f4 $u16 {
    DOFF:16 // at 0: Destination Address Signed offset
  }

//---  Registers TCD_CITER_ELINKYES(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
  TCD_CITER_ELINKYES [16 @offset 0x1016 @inc 0x20]
  TCD0_CITER_ELINKYES @offset 0x1016
  TCD1_CITER_ELINKYES @offset 0x1036
  TCD2_CITER_ELINKYES @offset 0x1056
  TCD3_CITER_ELINKYES @offset 0x1076
  TCD4_CITER_ELINKYES @offset 0x1096
  TCD5_CITER_ELINKYES @offset 0x10b6
  TCD6_CITER_ELINKYES @offset 0x10d6
  TCD7_CITER_ELINKYES @offset 0x10f6
  TCD8_CITER_ELINKYES @offset 0x1116
  TCD9_CITER_ELINKYES @offset 0x1136
  TCD10_CITER_ELINKYES @offset 0x1156
  TCD11_CITER_ELINKYES @offset 0x1176
  TCD12_CITER_ELINKYES @offset 0x1196
  TCD13_CITER_ELINKYES @offset 0x11b6
  TCD14_CITER_ELINKYES @offset 0x11d6
  TCD15_CITER_ELINKYES @offset 0x11f6 $u16 {
    ELINK // at 15: Enable channel-to-channel linking on minor-loop complete
    2
    LINKCH:4 // at 9: Link Channel Number
    CITER:9 // at 0: Current Major Iteration Count
  }

//---  Registers TCD_CITER_ELINKNO(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
  TCD_CITER_ELINKNO [16 @offset 0x1016 @inc 0x20]
  TCD0_CITER_ELINKNO @offset 0x1016
  TCD1_CITER_ELINKNO @offset 0x1036
  TCD2_CITER_ELINKNO @offset 0x1056
  TCD3_CITER_ELINKNO @offset 0x1076
  TCD4_CITER_ELINKNO @offset 0x1096
  TCD5_CITER_ELINKNO @offset 0x10b6
  TCD6_CITER_ELINKNO @offset 0x10d6
  TCD7_CITER_ELINKNO @offset 0x10f6
  TCD8_CITER_ELINKNO @offset 0x1116
  TCD9_CITER_ELINKNO @offset 0x1136
  TCD10_CITER_ELINKNO @offset 0x1156
  TCD11_CITER_ELINKNO @offset 0x1176
  TCD12_CITER_ELINKNO @offset 0x1196
  TCD13_CITER_ELINKNO @offset 0x11b6
  TCD14_CITER_ELINKNO @offset 0x11d6
  TCD15_CITER_ELINKNO @offset 0x11f6 $u16 {
    ELINK // at 15: Enable channel-to-channel linking on minor-loop complete
    CITER:15 // at 0: Current Major Iteration Count
  }

//---  Registers TCD_DLASTSGA(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Last Destination Address Adjustment/Scatter Gather Address
  TCD_DLASTSGA [16 @offset 0x1018 @inc 0x20]
  TCD0_DLASTSGA @offset 0x1018
  TCD1_DLASTSGA @offset 0x1038
  TCD2_DLASTSGA @offset 0x1058
  TCD3_DLASTSGA @offset 0x1078
  TCD4_DLASTSGA @offset 0x1098
  TCD5_DLASTSGA @offset 0x10b8
  TCD6_DLASTSGA @offset 0x10d8
  TCD7_DLASTSGA @offset 0x10f8
  TCD8_DLASTSGA @offset 0x1118
  TCD9_DLASTSGA @offset 0x1138
  TCD10_DLASTSGA @offset 0x1158
  TCD11_DLASTSGA @offset 0x1178
  TCD12_DLASTSGA @offset 0x1198
  TCD13_DLASTSGA @offset 0x11b8
  TCD14_DLASTSGA @offset 0x11d8
  TCD15_DLASTSGA @offset 0x11f8 $u32 {
    DLASTSGA:32 // at 0: no description available
  }

//---  Registers TCD_CSR(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Control and Status
  TCD_CSR [16 @offset 0x101c @inc 0x20]
  TCD0_CSR @offset 0x101c
  TCD1_CSR @offset 0x103c
  TCD2_CSR @offset 0x105c
  TCD3_CSR @offset 0x107c
  TCD4_CSR @offset 0x109c
  TCD5_CSR @offset 0x10bc
  TCD6_CSR @offset 0x10dc
  TCD7_CSR @offset 0x10fc
  TCD8_CSR @offset 0x111c
  TCD9_CSR @offset 0x113c
  TCD10_CSR @offset 0x115c
  TCD11_CSR @offset 0x117c
  TCD12_CSR @offset 0x119c
  TCD13_CSR @offset 0x11bc
  TCD14_CSR @offset 0x11dc
  TCD15_CSR @offset 0x11fc $u16 {
    BWC:2 // at 14: Bandwidth Control
    2
    MAJORLINKCH:4 // at 8: Link Channel Number
    DONE // at 7: Channel Done
    ACTIVE // at 6: Channel Active
    MAJORELINK // at 5: Enable channel-to-channel linking on major loop complete
    ESG // at 4: Enable Scatter/Gather Processing
    DREQ // at 3: Disable Request
    INTHALF // at 2: Enable an interrupt when major counter is half complete.
    INTMAJOR // at 1: Enable an interrupt when major iteration count completes
    START // at 0: Channel Start
  }

//---  Registers TCD_BITER_ELINKYES(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
  TCD_BITER_ELINKYES [16 @offset 0x101e @inc 0x20]
  TCD0_BITER_ELINKYES @offset 0x101e
  TCD1_BITER_ELINKYES @offset 0x103e
  TCD2_BITER_ELINKYES @offset 0x105e
  TCD3_BITER_ELINKYES @offset 0x107e
  TCD4_BITER_ELINKYES @offset 0x109e
  TCD5_BITER_ELINKYES @offset 0x10be
  TCD6_BITER_ELINKYES @offset 0x10de
  TCD7_BITER_ELINKYES @offset 0x10fe
  TCD8_BITER_ELINKYES @offset 0x111e
  TCD9_BITER_ELINKYES @offset 0x113e
  TCD10_BITER_ELINKYES @offset 0x115e
  TCD11_BITER_ELINKYES @offset 0x117e
  TCD12_BITER_ELINKYES @offset 0x119e
  TCD13_BITER_ELINKYES @offset 0x11be
  TCD14_BITER_ELINKYES @offset 0x11de
  TCD15_BITER_ELINKYES @offset 0x11fe $u16 {
    ELINK // at 15: Enables channel-to-channel linking on minor loop complete
    2
    LINKCH:4 // at 9: Link Channel Number
    BITER:9 // at 0: Starting Major Iteration Count
  }

//---  Registers TCD_BITER_ELINKNO(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
  TCD_BITER_ELINKNO [16 @offset 0x101e @inc 0x20]
  TCD0_BITER_ELINKNO @offset 0x101e
  TCD1_BITER_ELINKNO @offset 0x103e
  TCD2_BITER_ELINKNO @offset 0x105e
  TCD3_BITER_ELINKNO @offset 0x107e
  TCD4_BITER_ELINKNO @offset 0x109e
  TCD5_BITER_ELINKNO @offset 0x10be
  TCD6_BITER_ELINKNO @offset 0x10de
  TCD7_BITER_ELINKNO @offset 0x10fe
  TCD8_BITER_ELINKNO @offset 0x111e
  TCD9_BITER_ELINKNO @offset 0x113e
  TCD10_BITER_ELINKNO @offset 0x115e
  TCD11_BITER_ELINKNO @offset 0x117e
  TCD12_BITER_ELINKNO @offset 0x119e
  TCD13_BITER_ELINKNO @offset 0x11be
  TCD14_BITER_ELINKNO @offset 0x11de
  TCD15_BITER_ELINKNO @offset 0x11fe $u16 {
    ELINK // at 15: Enables channel-to-channel linking on minor loop complete
    BITER:15 // at 0: Starting Major Iteration Count
  }

}

//------------------------------------------------------------------------------
// Peripheral DMAMUX: DMA channel multiplexor
//------------------------------------------------------------------------------

registers ©DMAMUX @at 0x40021000 {
//---  Registers CHCFG(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): Channel Configuration Register
  CHCFG [16 @offset 0x0 @inc 0x1]
  CHCFG0 @offset 0x0
  CHCFG1 @offset 0x1
  CHCFG2 @offset 0x2
  CHCFG3 @offset 0x3
  CHCFG4 @offset 0x4
  CHCFG5 @offset 0x5
  CHCFG6 @offset 0x6
  CHCFG7 @offset 0x7
  CHCFG8 @offset 0x8
  CHCFG9 @offset 0x9
  CHCFG10 @offset 0xa
  CHCFG11 @offset 0xb
  CHCFG12 @offset 0xc
  CHCFG13 @offset 0xd
  CHCFG14 @offset 0xe
  CHCFG15 @offset 0xf $u8 {
    ENBL // at 7: DMA Channel Enable
    TRIG // at 6: DMA Channel Trigger Enable
    SOURCE:6 // at 0: DMA Channel Source (slot)
  }

}

//------------------------------------------------------------------------------
// Peripheral EWM: External Watchdog Monitor
//------------------------------------------------------------------------------

registers ©EWM @at 0x40061000 {
//---  Register CTRL: Control Register
  CTRL @offset 0x0 $u8 {
    4
    INTEN // at 3: Interrupt Enable.
    INEN // at 2: Input Enable.
    ASSIN // at 1: EWM_in's Assertion State Select.
    EWMEN // at 0: EWM enable.
  }

//---  Register SERV: Service Register
  SERV @offset 0x1 $u8 {
    SERVICE:8 // at 0: no description available
  }

//---  Register CMPL: Compare Low Register
  CMPL @offset 0x2 $u8 {
    COMPAREL:8 // at 0: no description available
  }

//---  Register CMPH: Compare High Register
  CMPH @offset 0x3 $u8 {
    COMPAREH:8 // at 0: no description available
  }

}

//------------------------------------------------------------------------------
// Peripheral FB: FlexBus external bus interface
//------------------------------------------------------------------------------

registers ©FB @at 0x4000c000 {
//---  Registers CSAR(0,1,2,3,4,5): Chip select address register
  CSAR [6 @offset 0x0 @inc 0xc]
  CSAR0 @offset 0x0
  CSAR1 @offset 0xc
  CSAR2 @offset 0x18
  CSAR3 @offset 0x24
  CSAR4 @offset 0x30
  CSAR5 @offset 0x3c $u32 {
    BA:16 // at 16: Base address
    16
  }

//---  Registers CSMR(0,1,2,3,4,5): Chip select mask register
  CSMR [6 @offset 0x4 @inc 0xc]
  CSMR0 @offset 0x4
  CSMR1 @offset 0x10
  CSMR2 @offset 0x1c
  CSMR3 @offset 0x28
  CSMR4 @offset 0x34
  CSMR5 @offset 0x40 $u32 {
    BAM:16 // at 16: Base address mask
    7
    WP // at 8: Write protect
    7
    V // at 0: Valid
  }

//---  Registers CSCR(0,1,2,3,4,5): Chip select control register
  CSCR [6 @offset 0x8 @inc 0xc]
  CSCR0 @offset 0x8
  CSCR1 @offset 0x14
  CSCR2 @offset 0x20
  CSCR3 @offset 0x2c
  CSCR4 @offset 0x38
  CSCR5 @offset 0x44 $u32 {
    SWS:6 // at 26: Secondary wait states
    2
    SWSEN // at 23: Secondary wait state enable
    EXTS // at 22: no description available
    ASET:2 // at 20: Address setup
    RDAH:2 // at 18: Read address hold or deselect
    WRAH:2 // at 16: Write address hold or deselect
    WS:6 // at 10: Wait states
    BLS // at 9: Byte-lane shift
    AA // at 8: Auto-acknowledge enable
    PS:2 // at 6: Port size
    BEM // at 5: Byte-enable mode
    BSTR // at 4: Burst-read enable
    BSTW // at 3: Burst-write enable
    3
  }

//---  Register CSPMCR: Chip select port multiplexing control register
  CSPMCR @offset 0x60 $u32 {
    GROUP1:4 // at 28: FlexBus signal group 1 multiplex control
    GROUP2:4 // at 24: FlexBus signal group 2 multiplex control
    GROUP3:4 // at 20: FlexBus signal group 3 multiplex control
    GROUP4:4 // at 16: FlexBus signal group 4 multiplex control
    GROUP5:4 // at 12: FlexBus signal group 5 multiplex control
    12
  }

}

//------------------------------------------------------------------------------
// Peripheral FMC: Flash Memory Controller
//------------------------------------------------------------------------------

registers ©FMC @at 0x4001f000 {
//---  Register PFAPR: Flash Access Protection Register
  PFAPR @offset 0x0 $u32 {
    8
    M7PFD // at 23: Master 7 Prefetch Disable
    M6PFD // at 22: Master 6 Prefetch Disable
    M5PFD // at 21: Master 5 Prefetch Disable
    M4PFD // at 20: Master 4 Prefetch Disable
    M3PFD // at 19: Master 3 Prefetch Disable
    M2PFD // at 18: Master 2 Prefetch Disable
    M1PFD // at 17: Master 1 Prefetch Disable
    M0PFD // at 16: Master 0 Prefetch Disable
    M7AP:2 // at 14: Master 7 Access Protection
    M6AP:2 // at 12: Master 6 Access Protection
    M5AP:2 // at 10: Master 5 Access Protection
    M4AP:2 // at 8: Master 4 Access Protection
    M3AP:2 // at 6: Master 3 Access Protection
    M2AP:2 // at 4: Master 2 Access Protection
    M1AP:2 // at 2: Master 1 Access Protection
    M0AP:2 // at 0: Master 0 Access Protection
  }

//---  Register PFB0CR: Flash Bank 0 Control Register
  PFB0CR @offset 0x4 $u32 {
    B0RWSC:4 // at 28: Bank 0 Read Wait State Control
    CLCK_WAY:4 // at 24: Cache Lock Way x
    CINV_WAY:4 // at 20: Cache Invalidate Way x
    S_B_INV // at 19: Invalidate Prefetch Speculation Buffer
    B0MW:2 // at 17: Bank 0 Memory Width
    9
    CRC:3 // at 5: Cache Replacement Control
    B0DCE // at 4: Bank 0 Data Cache Enable
    B0ICE // at 3: Bank 0 Instruction Cache Enable
    B0DPE // at 2: Bank 0 Data Prefetch Enable
    B0IPE // at 1: Bank 0 Instruction Prefetch Enable
    B0SEBE // at 0: Bank 0 Single Entry Buffer Enable
  }

//---  Register PFB1CR: Flash Bank 1 Control Register
  PFB1CR @offset 0x8 $u32 {
    B1RWSC:4 // at 28: Bank 1 Read Wait State Control
    9
    B1MW:2 // at 17: Bank 1 Memory Width
    12
    B1DCE // at 4: Bank 1 Data Cache Enable
    B1ICE // at 3: Bank 1 Instruction Cache Enable
    B1DPE // at 2: Bank 1 Data Prefetch Enable
    B1IPE // at 1: Bank 1 Instruction Prefetch Enable
    B1SEBE // at 0: Bank 1 Single Entry Buffer Enable
  }

//---  Registers TAGVDW0S(0,1,2,3,4,5,6,7): Cache Tag Storage
  TAGVDW0S [8 @offset 0x100 @inc 0x4]
  TAGVDW0S0 @offset 0x100
  TAGVDW0S1 @offset 0x104
  TAGVDW0S2 @offset 0x108
  TAGVDW0S3 @offset 0x10c
  TAGVDW0S4 @offset 0x110
  TAGVDW0S5 @offset 0x114
  TAGVDW0S6 @offset 0x118
  TAGVDW0S7 @offset 0x11c $u32 {
    13
    tag:13 // at 6: 13-bit tag for cache entry
    5
    valid // at 0: 1-bit valid for cache entry
  }

//---  Registers TAGVDW1S(0,1,2,3,4,5,6,7): Cache Tag Storage
  TAGVDW1S [8 @offset 0x120 @inc 0x4]
  TAGVDW1S0 @offset 0x120
  TAGVDW1S1 @offset 0x124
  TAGVDW1S2 @offset 0x128
  TAGVDW1S3 @offset 0x12c
  TAGVDW1S4 @offset 0x130
  TAGVDW1S5 @offset 0x134
  TAGVDW1S6 @offset 0x138
  TAGVDW1S7 @offset 0x13c $u32 {
    13
    tag:13 // at 6: 13-bit tag for cache entry
    5
    valid // at 0: 1-bit valid for cache entry
  }

//---  Registers TAGVDW2S(0,1,2,3,4,5,6,7): Cache Tag Storage
  TAGVDW2S [8 @offset 0x140 @inc 0x4]
  TAGVDW2S0 @offset 0x140
  TAGVDW2S1 @offset 0x144
  TAGVDW2S2 @offset 0x148
  TAGVDW2S3 @offset 0x14c
  TAGVDW2S4 @offset 0x150
  TAGVDW2S5 @offset 0x154
  TAGVDW2S6 @offset 0x158
  TAGVDW2S7 @offset 0x15c $u32 {
    13
    tag:13 // at 6: 13-bit tag for cache entry
    5
    valid // at 0: 1-bit valid for cache entry
  }

//---  Registers TAGVDW3S(0,1,2,3,4,5,6,7): Cache Tag Storage
  TAGVDW3S [8 @offset 0x160 @inc 0x4]
  TAGVDW3S0 @offset 0x160
  TAGVDW3S1 @offset 0x164
  TAGVDW3S2 @offset 0x168
  TAGVDW3S3 @offset 0x16c
  TAGVDW3S4 @offset 0x170
  TAGVDW3S5 @offset 0x174
  TAGVDW3S6 @offset 0x178
  TAGVDW3S7 @offset 0x17c $u32 {
    13
    tag:13 // at 6: 13-bit tag for cache entry
    5
    valid // at 0: 1-bit valid for cache entry
  }

//---  Registers DATAW0SU(0,1,2,3,4,5,6,7): Cache Data Storage (upper word)
  DATAW0SU [8 @offset 0x200 @inc 0x8]
  DATAW0S0U @offset 0x200
  DATAW0S1U @offset 0x208
  DATAW0S2U @offset 0x210
  DATAW0S3U @offset 0x218
  DATAW0S4U @offset 0x220
  DATAW0S5U @offset 0x228
  DATAW0S6U @offset 0x230
  DATAW0S7U @offset 0x238 $u32 {
    data:32 // at 0: Bits [63:32] of data entry
  }

//---  Registers DATAW0SL(0,1,2,3,4,5,6,7): Cache Data Storage (lower word)
  DATAW0SL [8 @offset 0x204 @inc 0x8]
  DATAW0S0L @offset 0x204
  DATAW0S1L @offset 0x20c
  DATAW0S2L @offset 0x214
  DATAW0S3L @offset 0x21c
  DATAW0S4L @offset 0x224
  DATAW0S5L @offset 0x22c
  DATAW0S6L @offset 0x234
  DATAW0S7L @offset 0x23c $u32 {
    data:32 // at 0: Bits [31:0] of data entry
  }

//---  Registers DATAW1SU(0,1,2,3,4,5,6,7): Cache Data Storage (upper word)
  DATAW1SU [8 @offset 0x240 @inc 0x8]
  DATAW1S0U @offset 0x240
  DATAW1S1U @offset 0x248
  DATAW1S2U @offset 0x250
  DATAW1S3U @offset 0x258
  DATAW1S4U @offset 0x260
  DATAW1S5U @offset 0x268
  DATAW1S6U @offset 0x270
  DATAW1S7U @offset 0x278 $u32 {
    data:32 // at 0: Bits [63:32] of data entry
  }

//---  Registers DATAW1SL(0,1,2,3,4,5,6,7): Cache Data Storage (lower word)
  DATAW1SL [8 @offset 0x244 @inc 0x8]
  DATAW1S0L @offset 0x244
  DATAW1S1L @offset 0x24c
  DATAW1S2L @offset 0x254
  DATAW1S3L @offset 0x25c
  DATAW1S4L @offset 0x264
  DATAW1S5L @offset 0x26c
  DATAW1S6L @offset 0x274
  DATAW1S7L @offset 0x27c $u32 {
    data:32 // at 0: Bits [31:0] of data entry
  }

//---  Registers DATAW2SU(0,1,2,3,4,5,6,7): Cache Data Storage (upper word)
  DATAW2SU [8 @offset 0x280 @inc 0x8]
  DATAW2S0U @offset 0x280
  DATAW2S1U @offset 0x288
  DATAW2S2U @offset 0x290
  DATAW2S3U @offset 0x298
  DATAW2S4U @offset 0x2a0
  DATAW2S5U @offset 0x2a8
  DATAW2S6U @offset 0x2b0
  DATAW2S7U @offset 0x2b8 $u32 {
    data:32 // at 0: Bits [63:32] of data entry
  }

//---  Registers DATAW2SL(0,1,2,3,4,5,6,7): Cache Data Storage (lower word)
  DATAW2SL [8 @offset 0x284 @inc 0x8]
  DATAW2S0L @offset 0x284
  DATAW2S1L @offset 0x28c
  DATAW2S2L @offset 0x294
  DATAW2S3L @offset 0x29c
  DATAW2S4L @offset 0x2a4
  DATAW2S5L @offset 0x2ac
  DATAW2S6L @offset 0x2b4
  DATAW2S7L @offset 0x2bc $u32 {
    data:32 // at 0: Bits [31:0] of data entry
  }

//---  Registers DATAW3SU(0,1,2,3,4,5,6,7): Cache Data Storage (upper word)
  DATAW3SU [8 @offset 0x2c0 @inc 0x8]
  DATAW3S0U @offset 0x2c0
  DATAW3S1U @offset 0x2c8
  DATAW3S2U @offset 0x2d0
  DATAW3S3U @offset 0x2d8
  DATAW3S4U @offset 0x2e0
  DATAW3S5U @offset 0x2e8
  DATAW3S6U @offset 0x2f0
  DATAW3S7U @offset 0x2f8 $u32 {
    data:32 // at 0: Bits [63:32] of data entry
  }

//---  Registers DATAW3SL(0,1,2,3,4,5,6,7): Cache Data Storage (lower word)
  DATAW3SL [8 @offset 0x2c4 @inc 0x8]
  DATAW3S0L @offset 0x2c4
  DATAW3S1L @offset 0x2cc
  DATAW3S2L @offset 0x2d4
  DATAW3S3L @offset 0x2dc
  DATAW3S4L @offset 0x2e4
  DATAW3S5L @offset 0x2ec
  DATAW3S6L @offset 0x2f4
  DATAW3S7L @offset 0x2fc $u32 {
    data:32 // at 0: Bits [31:0] of data entry
  }

}

//------------------------------------------------------------------------------
// Peripheral FTFL: Flash Memory Interface
//------------------------------------------------------------------------------

registers ©FTFL @at 0x40020000 {
//---  Register FSTAT: Flash Status Register
  FSTAT @offset 0x0 $u8 {
    CCIF // at 7: Command Complete Interrupt Flag
    RDCOLERR // at 6: FTFL Read Collision Error Flag
    ACCERR // at 5: Flash Access Error Flag
    FPVIOL // at 4: Flash Protection Violation Flag
    3
    MGSTAT0 // at 0: Memory Controller Command Completion Status Flag
  }

//---  Register FCNFG: Flash Configuration Register
  FCNFG @offset 0x1 $u8 {
    CCIE // at 7: Command Complete Interrupt Enable
    RDCOLLIE // at 6: Read Collision Error Interrupt Enable
    ERSAREQ // at 5: Erase All Request
    ERSSUSP // at 4: Erase Suspend
    SWAP // at 3: Swap
    PFLSH // at 2: FTFL configuration
    RAMRDY // at 1: RAM Ready
    EEERDY // at 0: no description available
  }

//---  Register FSEC: Flash Security Register
  FSEC @offset 0x2 $u8 {
    KEYEN:2 // at 6: Backdoor Key Security Enable
    MEEN:2 // at 4: Mass Erase Enable Bits
    FSLACC:2 // at 2: Freescale Failure Analysis Access Code
    SEC:2 // at 0: Flash Security
  }

//---  Register FOPT: Flash Option Register
  FOPT @offset 0x3 $u8 {
    OPT:8 // at 0: Nonvolatile Option
  }

//---  Registers FCCOB(3,2,1,0,7,6,5,4,B,A,9,8): Flash Common Command Object Registers
  FCCOB [12 @offset 0x4 @inc 0x1]
  FCCOB3 @offset 0x4
  FCCOB2 @offset 0x5
  FCCOB1 @offset 0x6
  FCCOB0 @offset 0x7
  FCCOB7 @offset 0x8
  FCCOB6 @offset 0x9
  FCCOB5 @offset 0xa
  FCCOB4 @offset 0xb
  FCCOBB @offset 0xc
  FCCOBA @offset 0xd
  FCCOB9 @offset 0xe
  FCCOB8 @offset 0xf $u8 {
    CCOBn:8 // at 0: no description available
  }

//---  Registers FPROT(3,2,1,0): Program Flash Protection Registers
  FPROT [4 @offset 0x10 @inc 0x1]
  FPROT3 @offset 0x10
  FPROT2 @offset 0x11
  FPROT1 @offset 0x12
  FPROT0 @offset 0x13 $u8 {
    PROT:8 // at 0: Program Flash Region Protect
  }

//---  Register FEPROT: EEPROM Protection Register
  FEPROT @offset 0x16 $u8 {
    EPROT:8 // at 0: EEPROM Region Protect
  }

//---  Register FDPROT: Data Flash Protection Register
  FDPROT @offset 0x17 $u8 {
    DPROT:8 // at 0: Data Flash Region Protect
  }

}

//------------------------------------------------------------------------------
// Peripheral FTFL_FlashConfig: Flash Memory Interface
//------------------------------------------------------------------------------

registers ©FTFL_FlashConfig @at 0x400 {
//---  Register BACKKEY3: Backdoor Comparison Key 3.
  BACKKEY3 @offset 0x0 $u8 {
    KEY:8 // at 0: Backdoor Comparison Key.
  }

//---  Register BACKKEY2: Backdoor Comparison Key 2.
  BACKKEY2 @offset 0x1 $u8 {
    KEY:8 // at 0: Backdoor Comparison Key.
  }

//---  Register BACKKEY1: Backdoor Comparison Key 1.
  BACKKEY1 @offset 0x2 $u8 {
    KEY:8 // at 0: Backdoor Comparison Key.
  }

//---  Register BACKKEY0: Backdoor Comparison Key 0.
  BACKKEY0 @offset 0x3 $u8 {
    KEY:8 // at 0: Backdoor Comparison Key.
  }

//---  Register BACKKEY7: Backdoor Comparison Key 7.
  BACKKEY7 @offset 0x4 $u8 {
    KEY:8 // at 0: Backdoor Comparison Key.
  }

//---  Register BACKKEY6: Backdoor Comparison Key 6.
  BACKKEY6 @offset 0x5 $u8 {
    KEY:8 // at 0: Backdoor Comparison Key.
  }

//---  Register BACKKEY5: Backdoor Comparison Key 5.
  BACKKEY5 @offset 0x6 $u8 {
    KEY:8 // at 0: Backdoor Comparison Key.
  }

//---  Register BACKKEY4: Backdoor Comparison Key 4.
  BACKKEY4 @offset 0x7 $u8 {
    KEY:8 // at 0: Backdoor Comparison Key.
  }

//---  Register FPROT3: Non-volatile P-Flash Protection 1 - Low Register
  FPROT3 @offset 0x8 $u8 {
    PROT:8 // at 0: P-Flash Region Protect
  }

//---  Register FPROT2: Non-volatile P-Flash Protection 1 - High Register
  FPROT2 @offset 0x9 $u8 {
    PROT:8 // at 0: P-Flash Region Protect
  }

//---  Register FPROT1: Non-volatile P-Flash Protection 0 - Low Register
  FPROT1 @offset 0xa $u8 {
    PROT:8 // at 0: P-Flash Region Protect
  }

//---  Register FPROT0: Non-volatile P-Flash Protection 0 - High Register
  FPROT0 @offset 0xb $u8 {
    PROT:8 // at 0: P-Flash Region Protect
  }

//---  Register FSEC: Non-volatile Flash Security Register
  FSEC @offset 0xc $u8 {
    KEYEN:2 // at 6: Backdoor Key Security Enable
    MEEN:2 // at 4: no description available
    FSLACC:2 // at 2: Freescale Failure Analysis Access Code
    SEC:2 // at 0: Flash Security
  }

//---  Register FOPT: Non-volatile Flash Option Register
  FOPT @offset 0xd $u8 {
    6
    EZPORT_DIS // at 1: no description available
    LPBOOT // at 0: no description available
  }

//---  Register FEPROT: Non-volatile EERAM Protection Register
  FEPROT @offset 0xe $u8 {
    EPROT:8 // at 0: no description available
  }

//---  Register FDPROT: Non-volatile D-Flash Protection Register
  FDPROT @offset 0xf $u8 {
    DPROT:8 // at 0: D-Flash Region Protect
  }

}

//------------------------------------------------------------------------------
// PERIPHERAL GROUP: ©FTM [3]
//        FTM0 at 0x40038000
//        FTM1 at 0x40039000
//        FTM2 at 0x400b8000
//------------------------------------------------------------------------------

registers ©FTM [3 @at 0x40038000 0x40039000 0x400b8000]
          ©FTM0 @at 0x40038000
          ©FTM1 @at 0x40039000
          ©FTM2 @at 0x400b8000 {
//---  Register SC: Status and Control
  SC @offset 0x0 $u32 {
    24
    TOF // at 7: Timer Overflow Flag
    TOIE // at 6: Timer Overflow Interrupt Enable
    CPWMS // at 5: Center-aligned PWM Select
    CLKS:2 // at 3: Clock Source Selection
    PS:3 // at 0: Prescale Factor Selection
  }

//---  Register CNT: Counter
  CNT @offset 0x4 $u32 {
    16
    COUNT:16 // at 0: Counter value
  }

//---  Register MOD: Modulo
  MOD @offset 0x8 $u32 {
    16
    MOD:16 // at 0: no description available
  }

//---  Registers CSC(0,1,2,3,4,5,6,7): Channel (n) Status and Control
  CSC [8 @offset 0xc @inc 0x8]
  C0SC @offset 0xc
  C1SC @offset 0x14
  C2SC @offset 0x1c
  C3SC @offset 0x24
  C4SC @offset 0x2c
  C5SC @offset 0x34
  C6SC @offset 0x3c
  C7SC @offset 0x44 $u32 {
    24
    CHF // at 7: Channel Flag
    CHIE // at 6: Channel Interrupt Enable
    MSB // at 5: Channel Mode Select
    MSA // at 4: Channel Mode Select
    ELSB // at 3: Edge or Level Select
    ELSA // at 2: Edge or Level Select
    1
    DMA // at 0: DMA Enable
  }

//---  Registers CV(0,1,2,3,4,5,6,7): Channel (n) Value
  CV [8 @offset 0x10 @inc 0x8]
  C0V @offset 0x10
  C1V @offset 0x18
  C2V @offset 0x20
  C3V @offset 0x28
  C4V @offset 0x30
  C5V @offset 0x38
  C6V @offset 0x40
  C7V @offset 0x48 $u32 {
    16
    VAL:16 // at 0: Channel Value
  }

//---  Register CNTIN: Counter Initial Value
  CNTIN @offset 0x4c $u32 {
    16
    INIT:16 // at 0: no description available
  }

//---  Register STATUS: Capture and Compare Status
  STATUS @offset 0x50 $u32 {
    24
    CH7F // at 7: Channel 7 Flag
    CH6F // at 6: Channel 6 Flag
    CH5F // at 5: Channel 5 Flag
    CH4F // at 4: Channel 4 Flag
    CH3F // at 3: Channel 3 Flag
    CH2F // at 2: Channel 2 Flag
    CH1F // at 1: Channel 1 Flag
    CH0F // at 0: Channel 0 Flag
  }

//---  Register MODE: Features Mode Selection
  MODE @offset 0x54 $u32 {
    24
    FAULTIE // at 7: Fault Interrupt Enable
    FAULTM:2 // at 5: Fault Control Mode
    CAPTEST // at 4: Capture Test Mode Enable
    PWMSYNC // at 3: PWM Synchronization Mode
    WPDIS // at 2: Write Protection Disable
    INIT // at 1: Initialize the Channels Output
    FTMEN // at 0: FTM Enable
  }

//---  Register SYNC: Synchronization
  SYNC @offset 0x58 $u32 {
    24
    SWSYNC // at 7: PWM Synchronization Software Trigger
    TRIG2 // at 6: PWM Synchronization Hardware Trigger 2
    TRIG1 // at 5: PWM Synchronization Hardware Trigger 1
    TRIG0 // at 4: PWM Synchronization Hardware Trigger 0
    SYNCHOM // at 3: Output Mask Synchronization
    REINIT // at 2: FTM Counter Reinitialization by Synchronization (FTM Counter Synchronization)
    CNTMAX // at 1: Maximum loading point enable
    CNTMIN // at 0: Minimum loading point enable
  }

//---  Register OUTINIT: Initial State for Channels Output
  OUTINIT @offset 0x5c $u32 {
    24
    CH7OI // at 7: Channel 7 Output Initialization Value
    CH6OI // at 6: Channel 6 Output Initialization Value
    CH5OI // at 5: Channel 5 Output Initialization Value
    CH4OI // at 4: Channel 4 Output Initialization Value
    CH3OI // at 3: Channel 3 Output Initialization Value
    CH2OI // at 2: Channel 2 Output Initialization Value
    CH1OI // at 1: Channel 1 Output Initialization Value
    CH0OI // at 0: Channel 0 Output Initialization Value
  }

//---  Register OUTMASK: Output Mask
  OUTMASK @offset 0x60 $u32 {
    24
    CH7OM // at 7: Channel 7 Output Mask
    CH6OM // at 6: Channel 6 Output Mask
    CH5OM // at 5: Channel 5 Output Mask
    CH4OM // at 4: Channel 4 Output Mask
    CH3OM // at 3: Channel 3 Output Mask
    CH2OM // at 2: Channel 2 Output Mask
    CH1OM // at 1: Channel 1 Output Mask
    CH0OM // at 0: Channel 0 Output Mask
  }

//---  Register COMBINE: Function for Linked Channels
  COMBINE @offset 0x64 $u32 {
    1
    FAULTEN3 // at 30: Fault Control Enable for n = 6
    SYNCEN3 // at 29: Synchronization Enable for n = 6
    DTEN3 // at 28: Deadtime Enable for n = 6
    DECAP3 // at 27: Dual Edge Capture Mode Captures for n = 6
    DECAPEN3 // at 26: Dual Edge Capture Mode Enable for n = 6
    COMP3 // at 25: Complement of Channel (n) for n = 6
    COMBINE3 // at 24: Combine Channels for n = 6
    1
    FAULTEN2 // at 22: Fault Control Enable for n = 4
    SYNCEN2 // at 21: Synchronization Enable for n = 4
    DTEN2 // at 20: Deadtime Enable for n = 4
    DECAP2 // at 19: Dual Edge Capture Mode Captures for n = 4
    DECAPEN2 // at 18: Dual Edge Capture Mode Enable for n = 4
    COMP2 // at 17: Complement of Channel (n) for n = 4
    COMBINE2 // at 16: Combine Channels for n = 4
    1
    FAULTEN1 // at 14: Fault Control Enable for n = 2
    SYNCEN1 // at 13: Synchronization Enable for n = 2
    DTEN1 // at 12: Deadtime Enable for n = 2
    DECAP1 // at 11: Dual Edge Capture Mode Captures for n = 2
    DECAPEN1 // at 10: Dual Edge Capture Mode Enable for n = 2
    COMP1 // at 9: Complement of Channel (n) for n = 2
    COMBINE1 // at 8: Combine Channels for n = 2
    1
    FAULTEN0 // at 6: Fault Control Enable for n = 0
    SYNCEN0 // at 5: Synchronization Enable for n = 0
    DTEN0 // at 4: Deadtime Enable for n = 0
    DECAP0 // at 3: Dual Edge Capture Mode Captures for n = 0
    DECAPEN0 // at 2: Dual Edge Capture Mode Enable for n = 0
    COMP0 // at 1: Complement of Channel (n) for n = 0
    COMBINE0 // at 0: Combine Channels for n = 0
  }

//---  Register DEADTIME: Deadtime Insertion Control
  DEADTIME @offset 0x68 $u32 {
    24
    DTPS:2 // at 6: Deadtime Prescaler Value
    DTVAL:6 // at 0: Deadtime Value
  }

//---  Register EXTTRIG: FTM External Trigger
  EXTTRIG @offset 0x6c $u32 {
    24
    TRIGF // at 7: Channel Trigger Flag
    INITTRIGEN // at 6: Initialization Trigger Enable
    CH1TRIG // at 5: Channel 1 Trigger Enable
    CH0TRIG // at 4: Channel 0 Trigger Enable
    CH5TRIG // at 3: Channel 5 Trigger Enable
    CH4TRIG // at 2: Channel 4 Trigger Enable
    CH3TRIG // at 1: Channel 3 Trigger Enable
    CH2TRIG // at 0: Channel 2 Trigger Enable
  }

//---  Register POL: Channels Polarity
  POL @offset 0x70 $u32 {
    24
    POL7 // at 7: Channel 7 Polarity
    POL6 // at 6: Channel 6 Polarity
    POL5 // at 5: Channel 5 Polarity
    POL4 // at 4: Channel 4 Polarity
    POL3 // at 3: Channel 3 Polarity
    POL2 // at 2: Channel 2 Polarity
    POL1 // at 1: Channel 1 Polarity
    POL0 // at 0: Channel 0 Polarity
  }

//---  Register FMS: Fault Mode Status
  FMS @offset 0x74 $u32 {
    24
    FAULTF // at 7: Fault Detection Flag
    WPEN // at 6: Write Protection Enable
    FAULTIN // at 5: Fault Inputs
    1
    FAULTF3 // at 3: Fault Detection Flag 3
    FAULTF2 // at 2: Fault Detection Flag 2
    FAULTF1 // at 1: Fault Detection Flag 1
    FAULTF0 // at 0: Fault Detection Flag 0
  }

//---  Register FILTER: Input Capture Filter Control
  FILTER @offset 0x78 $u32 {
    16
    CH3FVAL:4 // at 12: Channel 3 Input Filter
    CH2FVAL:4 // at 8: Channel 2 Input Filter
    CH1FVAL:4 // at 4: Channel 1 Input Filter
    CH0FVAL:4 // at 0: Channel 0 Input Filter
  }

//---  Register FLTCTRL: Fault Control
  FLTCTRL @offset 0x7c $u32 {
    20
    FFVAL:4 // at 8: Fault Input Filter
    FFLTR3EN // at 7: Fault Input 3 Filter Enable
    FFLTR2EN // at 6: Fault Input 2 Filter Enable
    FFLTR1EN // at 5: Fault Input 1 Filter Enable
    FFLTR0EN // at 4: Fault Input 0 Filter Enable
    FAULT3EN // at 3: Fault Input 3 Enable
    FAULT2EN // at 2: Fault Input 2 Enable
    FAULT1EN // at 1: Fault Input 1 Enable
    FAULT0EN // at 0: Fault Input 0 Enable
  }

//---  Register QDCTRL: Quadrature Decoder Control and Status
  QDCTRL @offset 0x80 $u32 {
    24
    PHAFLTREN // at 7: Phase A Input Filter Enable
    PHBFLTREN // at 6: Phase B Input Filter Enable
    PHAPOL // at 5: Phase A Input Polarity
    PHBPOL // at 4: Phase B Input Polarity
    QUADMODE // at 3: Quadrature Decoder Mode
    QUADIR // at 2: FTM Counter Direction in Quadrature Decoder Mode
    TOFDIR // at 1: Timer Overflow Direction in Quadrature Decoder Mode
    QUADEN // at 0: Quadrature Decoder Mode Enable
  }

//---  Register CONF: Configuration
  CONF @offset 0x84 $u32 {
    21
    GTBEOUT // at 10: Global time base output
    GTBEEN // at 9: Global time base enable
    1
    BDMMODE:2 // at 6: BDM Mode
    1
    NUMTOF:5 // at 0: TOF Frequency
  }

//---  Register FLTPOL: FTM Fault Input Polarity
  FLTPOL @offset 0x88 $u32 {
    28
    FLT3POL // at 3: Fault Input 3 Polarity
    FLT2POL // at 2: Fault Input 2 Polarity
    FLT1POL // at 1: Fault Input 1 Polarity
    FLT0POL // at 0: Fault Input 0 Polarity
  }

//---  Register SYNCONF: Synchronization Configuration
  SYNCONF @offset 0x8c $u32 {
    11
    HWSOC // at 20: no description available
    HWINVC // at 19: no description available
    HWOM // at 18: no description available
    HWWRBUF // at 17: no description available
    HWRSTCNT // at 16: no description available
    3
    SWSOC // at 12: no description available
    SWINVC // at 11: no description available
    SWOM // at 10: no description available
    SWWRBUF // at 9: no description available
    SWRSTCNT // at 8: no description available
    SYNCMODE // at 7: Synchronization Mode
    1
    SWOC // at 5: SWOCTRL register synchronization
    INVC // at 4: INVCTRL register synchronization
    1
    CNTINC // at 2: CNTIN register synchronization
    1
    HWTRIGMODE // at 0: Hardware Trigger Mode
  }

//---  Register INVCTRL: FTM Inverting Control
  INVCTRL @offset 0x90 $u32 {
    28
    INV3EN // at 3: Pair Channels 3 Inverting Enable
    INV2EN // at 2: Pair Channels 2 Inverting Enable
    INV1EN // at 1: Pair Channels 1 Inverting Enable
    INV0EN // at 0: Pair Channels 0 Inverting Enable
  }

//---  Register SWOCTRL: FTM Software Output Control
  SWOCTRL @offset 0x94 $u32 {
    16
    CH7OCV // at 15: Channel 7 Software Output Control Value
    CH6OCV // at 14: Channel 6 Software Output Control Value
    CH5OCV // at 13: Channel 5 Software Output Control Value
    CH4OCV // at 12: Channel 4 Software Output Control Value
    CH3OCV // at 11: Channel 3 Software Output Control Value
    CH2OCV // at 10: Channel 2 Software Output Control Value
    CH1OCV // at 9: Channel 1 Software Output Control Value
    CH0OCV // at 8: Channel 0 Software Output Control Value
    CH7OC // at 7: Channel 7 Software Output Control Enable
    CH6OC // at 6: Channel 6 Software Output Control Enable
    CH5OC // at 5: Channel 5 Software Output Control Enable
    CH4OC // at 4: Channel 4 Software Output Control Enable
    CH3OC // at 3: Channel 3 Software Output Control Enable
    CH2OC // at 2: Channel 2 Software Output Control Enable
    CH1OC // at 1: Channel 1 Software Output Control Enable
    CH0OC // at 0: Channel 0 Software Output Control Enable
  }

//---  Register PWMLOAD: FTM PWM Load
  PWMLOAD @offset 0x98 $u32 {
    22
    LDOK // at 9: Load Enable
    1
    CH7SEL // at 7: Channel 7 Select
    CH6SEL // at 6: Channel 6 Select
    CH5SEL // at 5: Channel 5 Select
    CH4SEL // at 4: Channel 4 Select
    CH3SEL // at 3: Channel 3 Select
    CH2SEL // at 2: Channel 2 Select
    CH1SEL // at 1: Channel 1 Select
    CH0SEL // at 0: Channel 0 Select
  }

}

//------------------------------------------------------------------------------
// PERIPHERAL GROUP: ©GPIO [5]
//        GPIOA at 0x400ff000
//        GPIOB at 0x400ff040
//        GPIOC at 0x400ff080
//        GPIOD at 0x400ff0c0
//        GPIOE at 0x400ff100
//------------------------------------------------------------------------------

registers ©GPIO [5 @at 0x400ff000 0x400ff040 0x400ff080 0x400ff0c0 0x400ff100]
          ©GPIOA @at 0x400ff000
          ©GPIOB @at 0x400ff040
          ©GPIOC @at 0x400ff080
          ©GPIOD @at 0x400ff0c0
          ©GPIOE @at 0x400ff100 {
//---  Register PDOR: Port Data Output Register
  PDOR @offset 0x0 $u32 {
    PDO:32 // at 0: Port Data Output
  }

//---  Register PSOR: Port Set Output Register
  PSOR @offset 0x4 $u32 {
    PTSO:32 // at 0: Port Set Output
  }

//---  Register PCOR: Port Clear Output Register
  PCOR @offset 0x8 $u32 {
    PTCO:32 // at 0: Port Clear Output
  }

//---  Register PTOR: Port Toggle Output Register
  PTOR @offset 0xc $u32 {
    PTTO:32 // at 0: Port Toggle Output
  }

//---  Register PDIR: Port Data Input Register
  PDIR @offset 0x10 $u32 {
    PDI:32 // at 0: Port Data Input
  }

//---  Register PDDR: Port Data Direction Register
  PDDR @offset 0x14 $u32 {
    PDD:32 // at 0: Port data direction
  }

}

//------------------------------------------------------------------------------
// PERIPHERAL GROUP: ©I2C [2]
//        I2C0 at 0x40066000
//        I2C1 at 0x40067000
//------------------------------------------------------------------------------

registers ©I2C [2 @at 0x40066000 0x40067000]
          ©I2C0 @at 0x40066000
          ©I2C1 @at 0x40067000 {
//---  Register A1: I2C Address Register 1
  A1 @offset 0x0 $u8 {
    AD:7 // at 1: Address
    1
  }

//---  Register F: I2C Frequency Divider register
  F @offset 0x1 $u8 {
    MULT:2 // at 6: no description available
    ICR:6 // at 0: Clock rate
  }

//---  Register C1: I2C Control Register 1
  C1 @offset 0x2 $u8 {
    IICEN // at 7: I2C enable
    IICIE // at 6: I2C interrupt enable
    MST // at 5: Master mode select
    TX // at 4: Transmit mode select
    TXAK // at 3: Transmit acknowledge enable
    RSTA // at 2: Repeat START
    WUEN // at 1: Wakeup enable
    DMAEN // at 0: DMA enable
  }

//---  Register S: I2C Status Register
  S @offset 0x3 $u8 {
    TCF // at 7: Transfer complete flag
    IAAS // at 6: Addressed as a slave
    BUSY // at 5: Bus busy
    ARBL // at 4: Arbitration lost
    RAM // at 3: Range address match
    SRW // at 2: Slave read/write
    IICIF // at 1: Interrupt flag
    RXAK // at 0: Receive acknowledge
  }

//---  Register D: I2C Data I/O register
  D @offset 0x4 $u8 {
    DATA:8 // at 0: Data
  }

//---  Register C2: I2C Control Register 2
  C2 @offset 0x5 $u8 {
    GCAEN // at 7: General call address enable
    ADEXT // at 6: Address extension
    HDRS // at 5: High drive select
    SBRC // at 4: Slave baud rate control
    RMEN // at 3: Range address matching enable
    AD:3 // at 0: Slave address
  }

//---  Register FLT: I2C Programmable Input Glitch Filter register
  FLT @offset 0x6 $u8 {
    3
    FLT:5 // at 0: I2C programmable filter factor
  }

//---  Register RA: I2C Range Address register
  RA @offset 0x7 $u8 {
    RAD:7 // at 1: Range slave address
    1
  }

//---  Register SMB: I2C SMBus Control and Status register
  SMB @offset 0x8 $u8 {
    FACK // at 7: Fast NACK/ACK enable
    ALERTEN // at 6: SMBus alert response address enable
    SIICAEN // at 5: Second I2C address enable
    TCKSEL // at 4: Timeout counter clock select
    SLTF // at 3: SCL low timeout flag
    SHTF1 // at 2: SCL high timeout flag 1
    SHTF2 // at 1: SCL high timeout flag 2
    SHTF2IE // at 0: SHTF2 interrupt enable
  }

//---  Register A2: I2C Address Register 2
  A2 @offset 0x9 $u8 {
    SAD:7 // at 1: SMBus address
    1
  }

//---  Register SLTH: I2C SCL Low Timeout Register High
  SLTH @offset 0xa $u8 {
    SSLT:8 // at 0: no description available
  }

//---  Register SLTL: I2C SCL Low Timeout Register Low
  SLTL @offset 0xb $u8 {
    SSLT:8 // at 0: no description available
  }

}

//------------------------------------------------------------------------------
// Peripheral I2S0: Inter-IC Sound / Synchronous Audio Interface
//------------------------------------------------------------------------------

registers ©I2S0 @at 0x4002f000 {
//---  Register TCSR: SAI Transmit Control Register
  TCSR @offset 0x0 $u32 {
    TE // at 31: Transmitter enable
    STOPE // at 30: Stop enable
    DBGE // at 29: Debug enable
    BCE // at 28: Bit Clock Enable
    2
    FR // at 25: FIFO reset
    SR // at 24: Software reset
    3
    WSF // at 20: Word start flag
    SEF // at 19: Sync error flag
    FEF // at 18: FIFO error flag
    FWF // at 17: FIFO warning flag
    FRF // at 16: FIFO request flag
    3
    WSIE // at 12: Word start interrupt enable
    SEIE // at 11: Sync error interrupt enable
    FEIE // at 10: FIFO error interrupt enable
    FWIE // at 9: FIFO warning interrupt enable
    FRIE // at 8: FIFO request interrupt enable
    6
    FWDE // at 1: FIFO warning DMA enable
    FRDE // at 0: FIFO request DMA enable
  }

//---  Register TCR1: SAI Transmit Configuration 1 Register
  TCR1 @offset 0x4 $u32 {
    29
    TFW:3 // at 0: Transmit FIFO watermark
  }

//---  Register TCR2: SAI Transmit Configuration 2 Register
  TCR2 @offset 0x8 $u32 {
    SYNC:2 // at 30: Synchronous Mode
    BCS // at 29: Bit Clock Swap
    BCI // at 28: Bit Clock Input
    MSEL:2 // at 26: MCLK Select
    BCP // at 25: Bit clock polarity
    BCD // at 24: Bit clock direction
    16
    DIV:8 // at 0: Bit clock divide
  }

//---  Register TCR3: SAI Transmit Configuration 3 Register
  TCR3 @offset 0xc $u32 {
    14
    TCE:2 // at 16: Transmit channel enable
    11
    WDFL:5 // at 0: Word flag configuration
  }

//---  Register TCR4: SAI Transmit Configuration 4 Register
  TCR4 @offset 0x10 $u32 {
    11
    FRSZ:5 // at 16: Frame size
    3
    SYWD:5 // at 8: Sync width
    3
    MF // at 4: MSB first
    FSE // at 3: Frame sync early
    1
    FSP // at 1: Frame sync polarity
    FSD // at 0: Frame sync direction
  }

//---  Register TCR5: SAI Transmit Configuration 5 Register
  TCR5 @offset 0x14 $u32 {
    3
    WNW:5 // at 24: Word N width
    3
    W0W:5 // at 16: Word 0 width
    3
    FBT:5 // at 8: First bit shifted
    8
  }

//---  Registers TDR(0,1): SAI Transmit Data Register
  TDR [2 @offset 0x20 @inc 0x4]
  TDR0 @offset 0x20
  TDR1 @offset 0x24 $u32 {
    TDR:32 // at 0: Transmit data register
  }

//---  Registers TFR(0,1): SAI Transmit FIFO Register
  TFR [2 @offset 0x40 @inc 0x4]
  TFR0 @offset 0x40
  TFR1 @offset 0x44 $u32 {
    12
    WFP:4 // at 16: Write FIFO pointer
    12
    RFP:4 // at 0: Read FIFO pointer
  }

//---  Register TMR: SAI Transmit Mask Register
  TMR @offset 0x60 $u32 {
    TWM:32 // at 0: Transmit word mask
  }

//---  Register RCSR: SAI Receive Control Register
  RCSR @offset 0x80 $u32 {
    RE // at 31: Receiver enable
    STOPE // at 30: Stop enable
    DBGE // at 29: Debug enable
    BCE // at 28: Bit Clock enable
    2
    FR // at 25: FIFO reset
    SR // at 24: Software reset
    3
    WSF // at 20: Word start flag
    SEF // at 19: Sync error flag
    FEF // at 18: FIFO error flag
    FWF // at 17: FIFO warning flag
    FRF // at 16: FIFO request flag
    3
    WSIE // at 12: Word start interrupt enable
    SEIE // at 11: Sync error interrupt enable
    FEIE // at 10: FIFO error interrupt enable
    FWIE // at 9: FIFO warning interrupt enable
    FRIE // at 8: FIFO request interrupt enable
    6
    FWDE // at 1: FIFO warning DMA enable
    FRDE // at 0: FIFO request DMA enable
  }

//---  Register RCR1: SAI Receive Configuration 1 Register
  RCR1 @offset 0x84 $u32 {
    29
    RFW:3 // at 0: Receive FIFO watermark
  }

//---  Register RCR2: SAI Receive Configuration 2 Register
  RCR2 @offset 0x88 $u32 {
    SYNC:2 // at 30: Synchronous Mode
    BCS // at 29: Bit Clock Swap
    BCI // at 28: Bit Clock Input
    MSEL:2 // at 26: MCLK Select
    BCP // at 25: Bit clock polarity
    BCD // at 24: Bit clock direction
    16
    DIV:8 // at 0: Bit clock divide
  }

//---  Register RCR3: SAI Receive Configuration 3 Register
  RCR3 @offset 0x8c $u32 {
    14
    RCE:2 // at 16: Receive channel enable
    11
    WDFL:5 // at 0: Word flag configuration
  }

//---  Register RCR4: SAI Receive Configuration 4 Register
  RCR4 @offset 0x90 $u32 {
    11
    FRSZ:5 // at 16: Frame size
    3
    SYWD:5 // at 8: Sync width
    3
    MF // at 4: MSB first
    FSE // at 3: Frame sync early
    1
    FSP // at 1: Frame sync polarity
    FSD // at 0: Frame sync direction
  }

//---  Register RCR5: SAI Receive Configuration 5 Register
  RCR5 @offset 0x94 $u32 {
    3
    WNW:5 // at 24: Word N width
    3
    W0W:5 // at 16: Word 0 width
    3
    FBT:5 // at 8: First bit shifted
    8
  }

//---  Registers RDR(0,1): SAI Receive Data Register
  RDR [2 @offset 0xa0 @inc 0x4]
  RDR0 @offset 0xa0
  RDR1 @offset 0xa4 $u32 {
    RDR:32 // at 0: Receive data register
  }

//---  Registers RFR(0,1): SAI Receive FIFO Register
  RFR [2 @offset 0xc0 @inc 0x4]
  RFR0 @offset 0xc0
  RFR1 @offset 0xc4 $u32 {
    12
    WFP:4 // at 16: Write FIFO pointer
    12
    RFP:4 // at 0: Read FIFO pointer
  }

//---  Register RMR: SAI Receive Mask Register
  RMR @offset 0xe0 $u32 {
    RWM:32 // at 0: Receive word mask
  }

//---  Register MCR: SAI MCLK Control Register
  MCR @offset 0x100 $u32 {
    DUF // at 31: Divider Update Flag
    MOE // at 30: MCLK Output Enable
    4
    MICS:2 // at 24: MCLK Input Clock Select
    24
  }

//---  Register MDR: MCLK Divide Register
  MDR @offset 0x104 $u32 {
    12
    FRACT:8 // at 12: MCLK Fraction
    DIVIDE:12 // at 0: MCLK Divide
  }

}

//------------------------------------------------------------------------------
// Peripheral LLWU: Low leakage wakeup unit
//------------------------------------------------------------------------------

registers ©LLWU @at 0x4007c000 {
//---  Register PE1: LLWU Pin Enable 1 Register
  PE1 @offset 0x0 $u8 {
    WUPE3:2 // at 6: Wakeup Pin Enable for LLWU_P3
    WUPE2:2 // at 4: Wakeup Pin Enable for LLWU_P2
    WUPE1:2 // at 2: Wakeup Pin Enable for LLWU_P1
    WUPE0:2 // at 0: Wakeup Pin Enable for LLWU_P0
  }

//---  Register PE2: LLWU Pin Enable 2 Register
  PE2 @offset 0x1 $u8 {
    WUPE7:2 // at 6: Wakeup Pin Enable for LLWU_P7
    WUPE6:2 // at 4: Wakeup Pin Enable for LLWU_P6
    WUPE5:2 // at 2: Wakeup Pin Enable for LLWU_P5
    WUPE4:2 // at 0: Wakeup Pin Enable for LLWU_P4
  }

//---  Register PE3: LLWU Pin Enable 3 Register
  PE3 @offset 0x2 $u8 {
    WUPE11:2 // at 6: Wakeup Pin Enable for LLWU_P11
    WUPE10:2 // at 4: Wakeup Pin Enable for LLWU_P10
    WUPE9:2 // at 2: Wakeup Pin Enable for LLWU_P9
    WUPE8:2 // at 0: Wakeup Pin Enable for LLWU_P8
  }

//---  Register PE4: LLWU Pin Enable 4 Register
  PE4 @offset 0x3 $u8 {
    WUPE15:2 // at 6: Wakeup Pin Enable for LLWU_P15
    WUPE14:2 // at 4: Wakeup Pin Enable for LLWU_P14
    WUPE13:2 // at 2: Wakeup Pin Enable for LLWU_P13
    WUPE12:2 // at 0: Wakeup Pin Enable for LLWU_P12
  }

//---  Register ME: LLWU Module Enable Register
  ME @offset 0x4 $u8 {
    WUME7 // at 7: Wakeup Module Enable for Module 7
    WUME6 // at 6: Wakeup Module Enable for Module 6
    WUME5 // at 5: Wakeup Module Enable for Module 5
    WUME4 // at 4: Wakeup Module Enable for Module 4
    WUME3 // at 3: Wakeup Module Enable for Module 3
    WUME2 // at 2: Wakeup Module Enable for Module 2
    WUME1 // at 1: Wakeup Module Enable for Module 1
    WUME0 // at 0: Wakeup Module Enable for Module 0
  }

//---  Register F1: LLWU Flag 1 Register
  F1 @offset 0x5 $u8 {
    WUF7 // at 7: Wakeup Flag for LLWU_P7
    WUF6 // at 6: Wakeup Flag for LLWU_P6
    WUF5 // at 5: Wakeup Flag for LLWU_P5
    WUF4 // at 4: Wakeup Flag for LLWU_P4
    WUF3 // at 3: Wakeup Flag for LLWU_P3
    WUF2 // at 2: Wakeup Flag for LLWU_P2
    WUF1 // at 1: Wakeup Flag for LLWU_P1
    WUF0 // at 0: Wakeup Flag for LLWU_P0
  }

//---  Register F2: LLWU Flag 2 Register
  F2 @offset 0x6 $u8 {
    WUF15 // at 7: Wakeup Flag for LLWU_P15
    WUF14 // at 6: Wakeup Flag for LLWU_P14
    WUF13 // at 5: Wakeup Flag for LLWU_P13
    WUF12 // at 4: Wakeup Flag for LLWU_P12
    WUF11 // at 3: Wakeup Flag for LLWU_P11
    WUF10 // at 2: Wakeup Flag for LLWU_P10
    WUF9 // at 1: Wakeup Flag for LLWU_P9
    WUF8 // at 0: Wakeup Flag for LLWU_P8
  }

//---  Register F3: LLWU Flag 3 Register
  F3 @offset 0x7 $u8 {
    MWUF7 // at 7: Wakeup flag for module 7
    MWUF6 // at 6: Wakeup flag for module 6
    MWUF5 // at 5: Wakeup flag for module 5
    MWUF4 // at 4: Wakeup flag for module 4
    MWUF3 // at 3: Wakeup flag for module 3
    MWUF2 // at 2: Wakeup flag for module 2
    MWUF1 // at 1: Wakeup flag for module 1
    MWUF0 // at 0: Wakeup flag for module 0
  }

//---  Register FILT1: LLWU Pin Filter 1 Register
  FILT1 @offset 0x8 $u8 {
    FILTF // at 7: Filter Detect Flag
    FILTE:2 // at 5: Digital Filter on External Pin
    1
    FILTSEL:4 // at 0: Filter pin select
  }

//---  Register FILT2: LLWU Pin Filter 2 Register
  FILT2 @offset 0x9 $u8 {
    FILTF // at 7: Filter Detect Flag
    FILTE:2 // at 5: Digital Filter on External Pin
    1
    FILTSEL:4 // at 0: Filter pin select
  }

//---  Register RST: LLWU Reset Enable Register
  RST @offset 0xa $u8 {
    6
    LLRSTE // at 1: Low Leakage mode RESET enable
    RSTFILT // at 0: Digital Filter on RESET Pin
  }

}

//------------------------------------------------------------------------------
// Peripheral LPTMR0: Low Power Timer
//------------------------------------------------------------------------------

registers ©LPTMR0 @at 0x40040000 {
//---  Register CSR: Low Power Timer Control Status Register
  CSR @offset 0x0 $u32 {
    24
    TCF // at 7: Timer Compare Flag
    TIE // at 6: Timer Interrupt Enable
    TPS:2 // at 4: Timer Pin Select
    TPP // at 3: Timer Pin Polarity
    TFC // at 2: Timer Free Running Counter
    TMS // at 1: Timer Mode Select
    TEN // at 0: Timer Enable
  }

//---  Register PSR: Low Power Timer Prescale Register
  PSR @offset 0x4 $u32 {
    25
    PRESCALE:4 // at 3: Prescale Value
    PBYP // at 2: Prescaler Bypass
    PCS:2 // at 0: Prescaler Clock Select
  }

//---  Register CMR: Low Power Timer Compare Register
  CMR @offset 0x8 $u32 {
    16
    COMPARE:16 // at 0: Compare Value
  }

//---  Register CNR: Low Power Timer Counter Register
  CNR @offset 0xc $u32 {
    16
    COUNTER:16 // at 0: Counter Value
  }

}

//------------------------------------------------------------------------------
// Peripheral MCG: Multipurpose Clock Generator module
//------------------------------------------------------------------------------

registers ©MCG @at 0x40064000 {
//---  Register C1: MCG Control 1 Register
  C1 @offset 0x0 $u8 {
    CLKS:2 // at 6: Clock Source Select
    FRDIV:3 // at 3: FLL External Reference Divider
    IREFS // at 2: Internal Reference Select
    IRCLKEN // at 1: Internal Reference Clock Enable
    IREFSTEN // at 0: Internal Reference Stop Enable
  }

//---  Register C2: MCG Control 2 Register
  C2 @offset 0x1 $u8 {
    LOCRE0 // at 7: Loss of Clock Reset Enable
    1
    RANGE0:2 // at 4: Frequency Range Select
    HGO0 // at 3: High Gain Oscillator Select
    EREFS0 // at 2: External Reference Select
    LP // at 1: Low Power Select
    IRCS // at 0: Internal Reference Clock Select
  }

//---  Register C3: MCG Control 3 Register
  C3 @offset 0x2 $u8 {
    SCTRIM:8 // at 0: Slow Internal Reference Clock Trim Setting
  }

//---  Register C4: MCG Control 4 Register
  C4 @offset 0x3 $u8 {
    DMX32 // at 7: DCO Maximum Frequency with 32.768 kHz Reference
    DRST_DRS:2 // at 5: DCO Range Select
    FCTRIM:4 // at 1: Fast Internal Reference Clock Trim Setting
    SCFTRIM // at 0: Slow Internal Reference Clock Fine Trim
  }

//---  Register C5: MCG Control 5 Register
  C5 @offset 0x4 $u8 {
    1
    PLLCLKEN0 // at 6: PLL Clock Enable
    PLLSTEN0 // at 5: PLL Stop Enable
    PRDIV0:5 // at 0: PLL External Reference Divider
  }

//---  Register C6: MCG Control 6 Register
  C6 @offset 0x5 $u8 {
    LOLIE0 // at 7: Loss of Lock Interrrupt Enable
    PLLS // at 6: PLL Select
    CME0 // at 5: Clock Monitor Enable
    VDIV0:5 // at 0: VCO 0 Divider
  }

//---  Register S: MCG Status Register
  S @offset 0x6 $u8 {
    LOLS0 // at 7: Loss of Lock Status
    LOCK0 // at 6: Lock Status
    PLLST // at 5: PLL Select Status
    IREFST // at 4: Internal Reference Status
    CLKST:2 // at 2: Clock Mode Status
    OSCINIT0 // at 1: OSC Initialization
    IRCST // at 0: Internal Reference Clock Status
  }

//---  Register SC: MCG Status and Control Register
  SC @offset 0x8 $u8 {
    ATME // at 7: Automatic Trim Machine Enable
    ATMS // at 6: Automatic Trim Machine Select
    ATMF // at 5: Automatic Trim machine Fail Flag
    FLTPRSRV // at 4: FLL Filter Preserve Enable
    FCRDIV:3 // at 1: Fast Clock Internal Reference Divider
    LOCS0 // at 0: OSC0 Loss of Clock Status
  }

//---  Register ATCVH: MCG Auto Trim Compare Value High Register
  ATCVH @offset 0xa $u8 {
    ATCVH:8 // at 0: ATM Compare Value High
  }

//---  Register ATCVL: MCG Auto Trim Compare Value Low Register
  ATCVL @offset 0xb $u8 {
    ATCVL:8 // at 0: ATM Compare Value Low
  }

//---  Register C7: MCG Control 7 Register
  C7 @offset 0xc $u8 {
    7
    OSCSEL // at 0: MCG OSC Clock Select
  }

//---  Register C8: MCG Control 8 Register
  C8 @offset 0xd $u8 {
    LOCRE1 // at 7: Loss of Clock Reset Enable
    LOLRE // at 6: no description available
    CME1 // at 5: Clock Monitor Enable1
    4
    LOCS1 // at 0: RTC Loss of Clock Status
  }

}

//------------------------------------------------------------------------------
// Peripheral MCM: Core Platform Miscellaneous Control Module
//------------------------------------------------------------------------------

registers ©MCM @at 0xe0080000 {
//---  Register PLASC: Crossbar switch (AXBS) slave configuration
  PLASC @offset 0x8 $u16 {
    8
    ASC:8 // at 0: Each bit in the ASC field indicates if there is a corresponding connection to the crossbar switch's slave input port.
  }

//---  Register PLAMC: Crossbar switch (AXBS) master configuration
  PLAMC @offset 0xa $u16 {
    8
    AMC:8 // at 0: Each bit in the AMC field indicates if there is a corresponding connection to the AXBS master input port.
  }

//---  Register CR: Control register
  CR @offset 0xc $u32 {
    1
    SRAMLWP // at 30: SRAM_L write protect
    SRAMLAP:2 // at 28: SRAM_L arbitration priority
    1
    SRAMUWP // at 26: SRAM_U write protect
    SRAMUAP:2 // at 24: SRAM_U arbitration priority
    24
  }

}

//------------------------------------------------------------------------------
// Peripheral OSC: Oscillator
//------------------------------------------------------------------------------

registers ©OSC @at 0x40065000 {
//---  Register CR: OSC Control Register
  CR @offset 0x0 $u8 {
    ERCLKEN // at 7: External Reference Enable
    1
    EREFSTEN // at 5: External Reference Stop Enable
    1
    SC2P // at 3: Oscillator 2 pF Capacitor Load Configure
    SC4P // at 2: Oscillator 4 pF Capacitor Load Configure
    SC8P // at 1: Oscillator 8 pF Capacitor Load Configure
    SC16P // at 0: Oscillator 16 pF Capacitor Load Configure
  }

}

//------------------------------------------------------------------------------
// Peripheral PDB0: Programmable Delay Block
//------------------------------------------------------------------------------

registers ©PDB0 @at 0x40036000 {
//---  Register SC: Status and Control Register
  SC @offset 0x0 $u32 {
    12
    LDMOD:2 // at 18: Load Mode Select
    PDBEIE // at 17: PDB Sequence Error Interrupt Enable
    SWTRIG // at 16: Software Trigger
    DMAEN // at 15: DMA Enable
    PRESCALER:3 // at 12: Prescaler Divider Select
    TRGSEL:4 // at 8: Trigger Input Source Select
    PDBEN // at 7: PDB Enable
    PDBIF // at 6: PDB Interrupt Flag
    PDBIE // at 5: PDB Interrupt Enable.
    1
    MULT:2 // at 2: Multiplication Factor Select for Prescaler
    CONT // at 1: Continuous Mode Enable
    LDOK // at 0: Load OK
  }

//---  Register MOD: Modulus Register
  MOD @offset 0x4 $u32 {
    16
    MOD:16 // at 0: PDB Modulus.
  }

//---  Register CNT: Counter Register
  CNT @offset 0x8 $u32 {
    16
    CNT:16 // at 0: PDB Counter
  }

//---  Register IDLY: Interrupt Delay Register
  IDLY @offset 0xc $u32 {
    16
    IDLY:16 // at 0: PDB Interrupt Delay
  }

//---  Registers CHC1(0,1): Channel n Control Register 1
  CHC1 [2 @offset 0x10 @inc 0x28]
  CH0C1 @offset 0x10
  CH1C1 @offset 0x38 $u32 {
    8
    BB:8 // at 16: PDB Channel Pre-Trigger Back-to-Back Operation Enable
    TOS:8 // at 8: PDB Channel Pre-Trigger Output Select
    EN:8 // at 0: PDB Channel Pre-Trigger Enable
  }

//---  Registers CHS(0,1): Channel n Status Register
  CHS [2 @offset 0x14 @inc 0x28]
  CH0S @offset 0x14
  CH1S @offset 0x3c $u32 {
    8
    CF:8 // at 16: PDB Channel Flags
    8
    ERR:8 // at 0: PDB Channel Sequence Error Flags
  }

//---  Registers CHDLY0(0,1): Channel n Delay 0 Register
  CHDLY0 [2 @offset 0x18 @inc 0x28]
  CH0DLY0 @offset 0x18
  CH1DLY0 @offset 0x40 $u32 {
    16
    DLY:16 // at 0: PDB Channel Delay
  }

//---  Registers CHDLY1(0,1): Channel n Delay 1 Register
  CHDLY1 [2 @offset 0x1c @inc 0x28]
  CH0DLY1 @offset 0x1c
  CH1DLY1 @offset 0x44 $u32 {
    16
    DLY:16 // at 0: PDB Channel Delay
  }

//---  Register DACINTC: DAC Interval Trigger n Control Register
  DACINTC @offset 0x150 $u32 {
    30
    EXT // at 1: DAC External Trigger Input Enable
    TOE // at 0: DAC Interval Trigger Enable
  }

//---  Register DACINT: DAC Interval n Register
  DACINT @offset 0x154 $u32 {
    16
    INT:16 // at 0: DAC Interval
  }

//---  Register POEN: Pulse-Out n Enable Register
  POEN @offset 0x190 $u32 {
    24
    POEN:8 // at 0: PDB Pulse-Out Enable
  }

//---  Registers PODLY(0,1,2): Pulse-Out n Delay Register
  PODLY [3 @offset 0x194 @inc 0x4]
  PO0DLY @offset 0x194
  PO1DLY @offset 0x198
  PO2DLY @offset 0x19c $u32 {
    DLY1:16 // at 16: PDB Pulse-Out Delay 1
    DLY2:16 // at 0: PDB Pulse-Out Delay 2
  }

}

//------------------------------------------------------------------------------
// Peripheral PIT: Periodic Interrupt Timer
//------------------------------------------------------------------------------

registers ©PIT @at 0x40037000 {
//---  Register MCR: PIT Module Control Register
  MCR @offset 0x0 $u32 {
    30
    MDIS // at 1: Module Disable
    FRZ // at 0: Freeze
  }

//---  Registers LDVAL(0,1,2,3): Timer Load Value Register
  LDVAL [4 @offset 0x100 @inc 0x10]
  LDVAL0 @offset 0x100
  LDVAL1 @offset 0x110
  LDVAL2 @offset 0x120
  LDVAL3 @offset 0x130 $u32 {
    TSV:32 // at 0: Timer Start Value Bits
  }

//---  Registers CVAL(0,1,2,3): Current Timer Value Register
  CVAL [4 @offset 0x104 @inc 0x10]
  CVAL0 @offset 0x104
  CVAL1 @offset 0x114
  CVAL2 @offset 0x124
  CVAL3 @offset 0x134 $u32 {
    TVL:32 // at 0: Current Timer Value
  }

//---  Registers TCTRL(0,1,2,3): Timer Control Register
  TCTRL [4 @offset 0x108 @inc 0x10]
  TCTRL0 @offset 0x108
  TCTRL1 @offset 0x118
  TCTRL2 @offset 0x128
  TCTRL3 @offset 0x138 $u32 {
    30
    TIE // at 1: Timer Interrupt Enable Bit.
    TEN // at 0: Timer Enable Bit.
  }

//---  Registers TFLG(0,1,2,3): Timer Flag Register
  TFLG [4 @offset 0x10c @inc 0x10]
  TFLG0 @offset 0x10c
  TFLG1 @offset 0x11c
  TFLG2 @offset 0x12c
  TFLG3 @offset 0x13c $u32 {
    31
    TIF // at 0: Timer Interrupt Flag.
  }

}

//------------------------------------------------------------------------------
// Peripheral PMC: Power Management Controller
//------------------------------------------------------------------------------

registers ©PMC @at 0x4007d000 {
//---  Register LVDSC1: Low Voltage Detect Status and Control 1 Register
  LVDSC1 @offset 0x0 $u8 {
    LVDF // at 7: Low-Voltage Detect Flag
    LVDACK // at 6: Low-Voltage Detect Acknowledge
    LVDIE // at 5: Low-Voltage Detect Interrupt Enable
    LVDRE // at 4: Low-Voltage Detect Reset Enable
    2
    LVDV:2 // at 0: Low-Voltage Detect Voltage Select
  }

//---  Register LVDSC2: Low Voltage Detect Status and Control 2 Register
  LVDSC2 @offset 0x1 $u8 {
    LVWF // at 7: Low-Voltage Warning Flag
    LVWACK // at 6: Low-Voltage Warning Acknowledge
    LVWIE // at 5: Low-Voltage Warning Interrupt Enable
    3
    LVWV:2 // at 0: Low-Voltage Warning Voltage Select
  }

//---  Register REGSC: Regulator Status and Control Register
  REGSC @offset 0x2 $u8 {
    3
    BGEN // at 4: Bandgap enable in VLPx operation
    ACKISO // at 3: Acknowledge Isolation
    REGONS // at 2: Regulator in Run Regulation Status
    1
    BGBE // at 0: Bandgap Buffer Enable
  }

}

//------------------------------------------------------------------------------
// PERIPHERAL GROUP: ©PORT [5]
//        PORTA at 0x40049000
//        PORTB at 0x4004a000
//        PORTC at 0x4004b000
//        PORTD at 0x4004c000
//        PORTE at 0x4004d000
//------------------------------------------------------------------------------

registers ©PORT [5 @at 0x40049000 0x4004a000 0x4004b000 0x4004c000 0x4004d000]
          ©PORTA @at 0x40049000
          ©PORTB @at 0x4004a000
          ©PORTC @at 0x4004b000
          ©PORTD @at 0x4004c000
          ©PORTE @at 0x4004d000 {
//---  Registers PCR(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31): Pin Control Register n
  PCR [32 @offset 0x0 @inc 0x4]
  PCR0 @offset 0x0
  PCR1 @offset 0x4
  PCR2 @offset 0x8
  PCR3 @offset 0xc
  PCR4 @offset 0x10
  PCR5 @offset 0x14
  PCR6 @offset 0x18
  PCR7 @offset 0x1c
  PCR8 @offset 0x20
  PCR9 @offset 0x24
  PCR10 @offset 0x28
  PCR11 @offset 0x2c
  PCR12 @offset 0x30
  PCR13 @offset 0x34
  PCR14 @offset 0x38
  PCR15 @offset 0x3c
  PCR16 @offset 0x40
  PCR17 @offset 0x44
  PCR18 @offset 0x48
  PCR19 @offset 0x4c
  PCR20 @offset 0x50
  PCR21 @offset 0x54
  PCR22 @offset 0x58
  PCR23 @offset 0x5c
  PCR24 @offset 0x60
  PCR25 @offset 0x64
  PCR26 @offset 0x68
  PCR27 @offset 0x6c
  PCR28 @offset 0x70
  PCR29 @offset 0x74
  PCR30 @offset 0x78
  PCR31 @offset 0x7c $u32 {
    7
    ISF // at 24: Interrupt Status Flag
    4
    IRQC:4 // at 16: Interrupt Configuration
    LK // at 15: Lock Register
    4
    MUX:3 // at 8: Pin Mux Control
    1
    DSE // at 6: Drive Strength Enable
    ODE // at 5: Open Drain Enable
    PFE // at 4: Passive Filter Enable
    1
    SRE // at 2: Slew Rate Enable
    PE // at 1: Pull Enable
    PS // at 0: Pull Select
  }

//---  Register GPCLR: Global Pin Control Low Register
  GPCLR @offset 0x80 $u32 {
    GPWE:16 // at 16: Global Pin Write Enable
    GPWD:16 // at 0: Global Pin Write Data
  }

//---  Register GPCHR: Global Pin Control High Register
  GPCHR @offset 0x84 $u32 {
    GPWE:16 // at 16: Global Pin Write Enable
    GPWD:16 // at 0: Global Pin Write Data
  }

//---  Register ISFR: Interrupt Status Flag Register
  ISFR @offset 0xa0 $u32 {
    ISF:32 // at 0: Interrupt Status Flag
  }

//---  Register DFER: Digital Filter Enable Register
  DFER @offset 0xc0 $u32 {
    DFE:32 // at 0: Digital Filter Enable
  }

//---  Register DFCR: Digital Filter Clock Register
  DFCR @offset 0xc4 $u32 {
    31
    CS // at 0: Clock Source
  }

//---  Register DFWR: Digital Filter Width Register
  DFWR @offset 0xc8 $u32 {
    27
    FILT:5 // at 0: Filter Length
  }

}

//------------------------------------------------------------------------------
// Peripheral RCM: Reset Control Module
//------------------------------------------------------------------------------

registers ©RCM @at 0x4007f000 {
//---  Register SRS0: System Reset Status Register 0
  SRS0 @offset 0x0 $u8 {
    POR // at 7: Power-on reset
    PIN // at 6: External reset pin
    WDOG // at 5: Watchdog
    1
    LOL // at 3: Loss-of-lock reset
    LOC // at 2: Loss-of-clock reset
    LVD // at 1: Low-voltage detect reset
    WAKEUP // at 0: Low leakage wakeup reset
  }

//---  Register SRS1: System Reset Status Register 1
  SRS1 @offset 0x1 $u8 {
    2
    SACKERR // at 5: Stop Mode Acknowledge Error Reset
    EZPT // at 4: EzPort Reset
    MDM_AP // at 3: MDM-AP system reset request
    SW // at 2: Software
    LOCKUP // at 1: Core Lockup
    JTAG // at 0: JTAG generated reset
  }

//---  Register RPFC: Reset Pin Filter Control Register
  RPFC @offset 0x4 $u8 {
    5
    RSTFLTSS // at 2: Reset pin filter select in stop mode
    RSTFLTSRW:2 // at 0: Reset pin filter select in run and wait modes
  }

//---  Register RPFW: Reset Pin Filter Width Register
  RPFW @offset 0x5 $u8 {
    3
    RSTFLTSEL:5 // at 0: Reset pin filter bus clock select
  }

//---  Register MR: Mode Register
  MR @offset 0x7 $u8 {
    6
    EZP_MS // at 1: EZP_MS_B pin state
    1
  }

}

//------------------------------------------------------------------------------
// Peripheral RFSYS: System register file
//------------------------------------------------------------------------------

registers ©RFSYS @at 0x40041000 {
//---  Registers REG(0,1,2,3,4,5,6,7): Register file register
  REG [8 @offset 0x0 @inc 0x4]
  REG0 @offset 0x0
  REG1 @offset 0x4
  REG2 @offset 0x8
  REG3 @offset 0xc
  REG4 @offset 0x10
  REG5 @offset 0x14
  REG6 @offset 0x18
  REG7 @offset 0x1c $u32 {
    HH:8 // at 24: no description available
    HL:8 // at 16: no description available
    LH:8 // at 8: no description available
    LL:8 // at 0: no description available
  }

}

//------------------------------------------------------------------------------
// Peripheral RFVBAT: VBAT register file
//------------------------------------------------------------------------------

registers ©RFVBAT @at 0x4003e000 {
//---  Registers REG(0,1,2,3,4,5,6,7): VBAT register file register
  REG [8 @offset 0x0 @inc 0x4]
  REG0 @offset 0x0
  REG1 @offset 0x4
  REG2 @offset 0x8
  REG3 @offset 0xc
  REG4 @offset 0x10
  REG5 @offset 0x14
  REG6 @offset 0x18
  REG7 @offset 0x1c $u32 {
    HH:8 // at 24: no description available
    HL:8 // at 16: no description available
    LH:8 // at 8: no description available
    LL:8 // at 0: no description available
  }

}

//------------------------------------------------------------------------------
// Peripheral RTC: Secure Real Time Clock
//------------------------------------------------------------------------------

registers ©RTC @at 0x4003d000 {
//---  Register TSR: RTC Time Seconds Register
  TSR @offset 0x0 $u32 {
    TSR:32 // at 0: Time Seconds Register
  }

//---  Register TPR: RTC Time Prescaler Register
  TPR @offset 0x4 $u32 {
    16
    TPR:16 // at 0: Time Prescaler Register
  }

//---  Register TAR: RTC Time Alarm Register
  TAR @offset 0x8 $u32 {
    TAR:32 // at 0: Time Alarm Register
  }

//---  Register TCR: RTC Time Compensation Register
  TCR @offset 0xc $u32 {
    CIC:8 // at 24: Compensation Interval Counter
    TCV:8 // at 16: Time Compensation Value
    CIR:8 // at 8: Compensation Interval Register
    TCR:8 // at 0: Time Compensation Register
  }

//---  Register CR: RTC Control Register
  CR @offset 0x10 $u32 {
    18
    SC2P // at 13: Oscillator 2pF load configure
    SC4P // at 12: Oscillator 4pF load configure
    SC8P // at 11: Oscillator 8pF load configure
    SC16P // at 10: Oscillator 16pF load configure
    CLKO // at 9: Clock Output
    OSCE // at 8: Oscillator Enable
    4
    UM // at 3: Update Mode
    SUP // at 2: Supervisor Access
    WPE // at 1: Wakeup Pin Enable
    SWR // at 0: Software Reset
  }

//---  Register SR: RTC Status Register
  SR @offset 0x14 $u32 {
    27
    TCE // at 4: Time Counter Enable
    1
    TAF // at 2: Time Alarm Flag
    TOF // at 1: Time Overflow Flag
    TIF // at 0: Time Invalid Flag
  }

//---  Register LR: RTC Lock Register
  LR @offset 0x18 $u32 {
    25
    LRL // at 6: Lock Register Lock
    SRL // at 5: Status Register Lock
    CRL // at 4: Control Register Lock
    TCL // at 3: Time Compensation Lock
    3
  }

//---  Register IER: RTC Interrupt Enable Register
  IER @offset 0x1c $u32 {
    27
    TSIE // at 4: Time Seconds Interrupt Enable
    1
    TAIE // at 2: Time Alarm Interrupt Enable
    TOIE // at 1: Time Overflow Interrupt Enable
    TIIE // at 0: Time Invalid Interrupt Enable
  }

//---  Register WAR: RTC Write Access Register
  WAR @offset 0x800 $u32 {
    24
    IERW // at 7: Interrupt Enable Register Write
    LRW // at 6: Lock Register Write
    SRW // at 5: Status Register Write
    CRW // at 4: Control Register Write
    TCRW // at 3: Time Compensation Register Write
    TARW // at 2: Time Alarm Register Write
    TPRW // at 1: Time Prescaler Register Write
    TSRW // at 0: Time Seconds Register Write
  }

//---  Register RAR: RTC Read Access Register
  RAR @offset 0x804 $u32 {
    24
    IERR // at 7: Interrupt Enable Register Read
    LRR // at 6: Lock Register Read
    SRR // at 5: Status Register Read
    CRR // at 4: Control Register Read
    TCRR // at 3: Time Compensation Register Read
    TARR // at 2: Time Alarm Register Read
    TPRR // at 1: Time Prescaler Register Read
    TSRR // at 0: Time Seconds Register Read
  }

}

//------------------------------------------------------------------------------
// Peripheral SIM: System Integration Module
//------------------------------------------------------------------------------

registers ©SIM @at 0x40047000 {
//---  Register SOPT1: System Options Register 1
  SOPT1 @offset 0x0 $u32 {
    USBREGEN // at 31: USB voltage regulator enable
    USBSSTBY // at 30: USB voltage regulator in standby mode during Stop, VLPS, LLS and VLLS modes.
    USBVSTBY // at 29: USB voltage regulator in standby mode during VLPR and VLPW modes
    9
    OSC32KSEL:2 // at 18: 32K oscillator clock select
    2
    RAMSIZE:4 // at 12: RAM size
    12
  }

//---  Register SOPT1CFG: SOPT1 Configuration Register
  SOPT1CFG @offset 0x4 $u32 {
    5
    USSWE // at 26: USB voltage regulator stop standby write enable
    UVSWE // at 25: USB voltage regulator VLP standby write enable
    URWE // at 24: USB voltage regulator enable write enable
    24
  }

//---  Register SOPT2: System Options Register 2
  SOPT2 @offset 0x1004 $u32 {
    13
    USBSRC // at 18: USB clock source select
    1
    PLLFLLSEL // at 16: PLL/FLL clock select
    3
    TRACECLKSEL // at 12: Debug trace clock select
    PTD7PAD // at 11: PTD7 pad drive strength
    1
    FBSL:2 // at 8: FlexBus security level
    CLKOUTSEL:3 // at 5: CLKOUT select
    RTCCLKOUTSEL // at 4: RTC clock out select
    4
  }

//---  Register SOPT4: System Options Register 4
  SOPT4 @offset 0x100c $u32 {
    2
    FTM0TRG1SRC // at 29: FlexTimer 0 Hardware Trigger 1 Source Select
    FTM0TRG0SRC // at 28: FlexTimer 0 Hardware Trigger 0 Source Select
    1
    FTM2CLKSEL // at 26: FlexTimer 2 External Clock Pin Select
    FTM1CLKSEL // at 25: FTM1 External Clock Pin Select
    FTM0CLKSEL // at 24: FlexTimer 0 External Clock Pin Select
    2
    FTM2CH0SRC:2 // at 20: FTM2 channel 0 input capture source select
    FTM1CH0SRC:2 // at 18: FTM1 channel 0 input capture source select
    9
    FTM2FLT0 // at 8: FTM2 Fault 0 Select
    3
    FTM1FLT0 // at 4: FTM1 Fault 0 Select
    1
    FTM0FLT2 // at 2: FTM0 Fault 2 Select
    FTM0FLT1 // at 1: FTM0 Fault 1 Select
    FTM0FLT0 // at 0: FTM0 Fault 0 Select
  }

//---  Register SOPT5: System Options Register 5
  SOPT5 @offset 0x1010 $u32 {
    24
    UART1RXSRC:2 // at 6: UART 1 receive data source select
    UART1TXSRC:2 // at 4: UART 1 transmit data source select
    UART0RXSRC:2 // at 2: UART 0 receive data source select
    UART0TXSRC:2 // at 0: UART 0 transmit data source select
  }

//---  Register SOPT7: System Options Register 7
  SOPT7 @offset 0x1018 $u32 {
    16
    ADC1ALTTRGEN // at 15: ADC1 alternate trigger enable
    2
    ADC1PRETRGSEL // at 12: ADC1 pre-trigger select
    ADC1TRGSEL:4 // at 8: ADC1 trigger select
    ADC0ALTTRGEN // at 7: ADC0 alternate trigger enable
    2
    ADC0PRETRGSEL // at 4: ADC0 pretrigger select
    ADC0TRGSEL:4 // at 0: ADC0 trigger select
  }

//---  Register SDID: System Device Identification Register
  SDID @offset 0x1024 $u32 {
    16
    REVID:4 // at 12: Device revision number
    5
    FAMID:3 // at 4: Kinetis family identification
    PINID:4 // at 0: Pincount identification
  }

//---  Register SCGC1: System Clock Gating Control Register 1
  SCGC1 @offset 0x1028 $u32 {
    21
    UART4 // at 10: UART4 Clock Gate Control
    10
  }

//---  Register SCGC2: System Clock Gating Control Register 2
  SCGC2 @offset 0x102c $u32 {
    19
    DAC0 // at 12: DAC0 Clock Gate Control
    12
  }

//---  Register SCGC3: System Clock Gating Control Register 3
  SCGC3 @offset 0x1030 $u32 {
    4
    ADC1 // at 27: ADC1 Clock Gate Control
    2
    FTM2 // at 24: FTM2 Clock Gate Control
    24
  }

//---  Register SCGC4: System Clock Gating Control Register 4
  SCGC4 @offset 0x1034 $u32 {
    11
    VREF // at 20: VREF Clock Gate Control
    CMP // at 19: Comparator Clock Gate Control
    USBOTG // at 18: USB Clock Gate Control
    4
    UART3 // at 13: UART3 Clock Gate Control
    UART2 // at 12: UART2 Clock Gate Control
    UART1 // at 11: UART1 Clock Gate Control
    UART0 // at 10: UART0 Clock Gate Control
    2
    I2C1 // at 7: I2C1 Clock Gate Control
    I2C0 // at 6: I2C0 Clock Gate Control
    3
    CMT // at 2: CMT Clock Gate Control
    EWM // at 1: EWM Clock Gate Control
    1
  }

//---  Register SCGC5: System Clock Gating Control Register 5
  SCGC5 @offset 0x1038 $u32 {
    18
    PORTE // at 13: Port E Clock Gate Control
    PORTD // at 12: Port D Clock Gate Control
    PORTC // at 11: Port C Clock Gate Control
    PORTB // at 10: Port B Clock Gate Control
    PORTA // at 9: Port A Clock Gate Control
    3
    TSI // at 5: TSI Clock Gate Control
    4
    LPTIMER // at 0: Low Power Timer Access Control
  }

//---  Register SCGC6: System Clock Gating Control Register 6
  SCGC6 @offset 0x103c $u32 {
    2
    RTC // at 29: RTC Access Control
    1
    ADC0 // at 27: ADC0 Clock Gate Control
    1
    FTM1 // at 25: FTM1 Clock Gate Control
    FTM0 // at 24: FTM0 Clock Gate Control
    PIT // at 23: PIT Clock Gate Control
    PDB // at 22: PDB Clock Gate Control
    USBDCD // at 21: USB DCD Clock Gate Control
    2
    CRC // at 18: CRC Clock Gate Control
    2
    I2S // at 15: I2S Clock Gate Control
    1
    SPI1 // at 13: SPI1 Clock Gate Control
    SPI0 // at 12: SPI0 Clock Gate Control
    7
    FLEXCAN0 // at 4: FlexCAN0 Clock Gate Control
    2
    DMAMUX // at 1: DMA Mux Clock Gate Control
    FTFL // at 0: Flash Memory Clock Gate Control
  }

//---  Register SCGC7: System Clock Gating Control Register 7
  SCGC7 @offset 0x1040 $u32 {
    30
    DMA // at 1: DMA Clock Gate Control
    FLEXBUS // at 0: FlexBus Clock Gate Control
  }

//---  Register CLKDIV1: System Clock Divider Register 1
  CLKDIV1 @offset 0x1044 $u32 {
    OUTDIV1:4 // at 28: Clock 1 output divider value
    OUTDIV2:4 // at 24: Clock 2 output divider value
    OUTDIV3:4 // at 20: Clock 3 output divider value
    OUTDIV4:4 // at 16: Clock 4 output divider value
    16
  }

//---  Register CLKDIV2: System Clock Divider Register 2
  CLKDIV2 @offset 0x1048 $u32 {
    28
    USBDIV:3 // at 1: USB clock divider divisor
    USBFRAC // at 0: USB clock divider fraction
  }

//---  Register FCFG1: Flash Configuration Register 1
  FCFG1 @offset 0x104c $u32 {
    NVMSIZE:4 // at 28: FlexNVM size
    PFSIZE:4 // at 24: Program flash size
    4
    EESIZE:4 // at 16: EEPROM size
    4
    DEPART:4 // at 8: FlexNVM partition
    6
    FLASHDOZE // at 1: Flash Doze
    FLASHDIS // at 0: Flash Disable
  }

//---  Register FCFG2: Flash Configuration Register 2
  FCFG2 @offset 0x1050 $u32 {
    SWAPPFLSH // at 31: Swap program flash
    MAXADDR0:7 // at 24: Max address block 0
    PFLSH // at 23: Program flash
    MAXADDR1:7 // at 16: Max address block 1
    16
  }

//---  Register UIDH: Unique Identification Register High
  UIDH @offset 0x1054 $u32 {
    UID:32 // at 0: Unique Identification
  }

//---  Register UIDMH: Unique Identification Register Mid-High
  UIDMH @offset 0x1058 $u32 {
    UID:32 // at 0: Unique Identification
  }

//---  Register UIDML: Unique Identification Register Mid Low
  UIDML @offset 0x105c $u32 {
    UID:32 // at 0: Unique Identification
  }

//---  Register UIDL: Unique Identification Register Low
  UIDL @offset 0x1060 $u32 {
    UID:32 // at 0: Unique Identification
  }

}

//------------------------------------------------------------------------------
// Peripheral SMC: System Mode Controller
//------------------------------------------------------------------------------

registers ©SMC @at 0x4007e000 {
//---  Register PMPROT: Power Mode Protection Register
  PMPROT @offset 0x0 $u8 {
    2
    AVLP // at 5: Allow very low power modes
    1
    ALLS // at 3: Allow low leakage stop mode
    1
    AVLLS // at 1: Allow very low leakage stop mode
    1
  }

//---  Register PMCTRL: Power Mode Control Register
  PMCTRL @offset 0x1 $u8 {
    1
    RUNM:2 // at 5: Run Mode Control
    1
    STOPA // at 3: Stop Aborted
    STOPM:3 // at 0: Stop Mode Control
  }

//---  Register VLLSCTRL: VLLS Control Register
  VLLSCTRL @offset 0x2 $u8 {
    5
    VLLSM:3 // at 0: VLLS Mode Control
  }

//---  Register PMSTAT: Power Mode Status Register
  PMSTAT @offset 0x3 $u8 {
    1
    PMSTAT:7 // at 0: no description available
  }

}

//------------------------------------------------------------------------------
// PERIPHERAL GROUP: ©SPI [2]
//        SPI0 at 0x4002c000
//        SPI1 at 0x4002d000
//------------------------------------------------------------------------------

registers ©SPI [2 @at 0x4002c000 0x4002d000]
          ©SPI0 @at 0x4002c000
          ©SPI1 @at 0x4002d000 {
//---  Register MCR: DSPI Module Configuration Register
  MCR @offset 0x0 $u32 {
    MSTR // at 31: Master/Slave Mode Select
    CONT_SCKE // at 30: Continuous SCK Enable
    DCONF:2 // at 28: DSPI Configuration
    FRZ // at 27: Freeze
    MTFE // at 26: Modified Timing Format Enable
    PCSSE // at 25: Peripheral Chip Select Strobe Enable
    ROOE // at 24: Receive FIFO Overflow Overwrite Enable
    2
    PCSIS:6 // at 16: Peripheral Chip Select x Inactive State
    DOZE // at 15: Doze Enable
    MDIS // at 14: Module Disable
    DIS_TXF // at 13: Disable Transmit FIFO
    DIS_RXF // at 12: Disable Receive FIFO
    CLR_TXF // at 11: Clear TX FIFO
    CLR_RXF // at 10: no description available
    SMPL_PT:2 // at 8: Sample Point
    7
    HALT // at 0: Halt
  }

//---  Register TCR: DSPI Transfer Count Register
  TCR @offset 0x8 $u32 {
    SPI_TCNT:16 // at 16: SPI Transfer Counter
    16
  }

//---  Register CTAR_SLAVE: DSPI Clock and Transfer Attributes Register (In Slave Mode)
  CTAR_SLAVE @offset 0xc $u32 {
    FMSZ:5 // at 27: Frame Size
    CPOL // at 26: Clock Polarity
    CPHA // at 25: Clock Phase
    25
  }

//---  Registers CTAR(0,1): DSPI Clock and Transfer Attributes Register (In Master Mode)
  CTAR [2 @offset 0xc @inc 0x4]
  CTAR0 @offset 0xc
  CTAR1 @offset 0x10 $u32 {
    DBR // at 31: Double Baud Rate
    FMSZ:4 // at 27: Frame Size
    CPOL // at 26: Clock Polarity
    CPHA // at 25: Clock Phase
    LSBFE // at 24: LBS First
    PCSSCK:2 // at 22: PCS to SCK Delay Prescaler
    PASC:2 // at 20: After SCK Delay Prescaler
    PDT:2 // at 18: Delay after Transfer Prescaler
    PBR:2 // at 16: Baud Rate Prescaler
    CSSCK:4 // at 12: PCS to SCK Delay Scaler
    ASC:4 // at 8: After SCK Delay Scaler
    DT:4 // at 4: Delay After Transfer Scaler
    BR:4 // at 0: Baud Rate Scaler
  }

//---  Register SR: DSPI Status Register
  SR @offset 0x2c $u32 {
    TCF // at 31: Transfer Complete Flag
    TXRXS // at 30: TX and RX Status
    1
    EOQF // at 28: End of Queue Flag
    TFUF // at 27: Transmit FIFO Underflow Flag
    1
    TFFF // at 25: Transmit FIFO Fill Flag
    5
    RFOF // at 19: Receive FIFO Overflow Flag
    1
    RFDF // at 17: Receive FIFO Drain Flag
    1
    TXCTR:4 // at 12: TX FIFO Counter
    TXNXTPTR:4 // at 8: Transmit Next Pointer
    RXCTR:4 // at 4: RX FIFO Counter
    POPNXTPTR:4 // at 0: Pop Next Pointer
  }

//---  Register RSER: DSPI DMA/Interrupt Request Select and Enable Register
  RSER @offset 0x30 $u32 {
    TCF_RE // at 31: Transmission Complete Request Enable
    2
    EOQF_RE // at 28: DSPI Finished Request Enable
    TFUF_RE // at 27: Transmit FIFO Underflow Request Enable
    1
    TFFF_RE // at 25: Transmit FIFO Fill Request Enable
    TFFF_DIRS // at 24: Transmit FIFO Fill DMA or Interrupt Request Select
    4
    RFOF_RE // at 19: Receive FIFO Overflow Request Enable
    1
    RFDF_RE // at 17: Receive FIFO Drain Request Enable
    RFDF_DIRS // at 16: Receive FIFO Drain DMA or Interrupt Request Select.
    16
  }

//---  Register PUSHR: DSPI PUSH TX FIFO Register In Master Mode
  PUSHR @offset 0x34 $u32 {
    CONT // at 31: Continuous Peripheral Chip Select Enable
    CTAS:3 // at 28: Clock and Transfer Attributes Select.
    EOQ // at 27: End Of Queue
    CTCNT // at 26: Clear Transfer Counter.
    4
    PCS:6 // at 16: no description available
    TXDATA:16 // at 0: Transmit Data
  }

//---  Register PUSHR_SLAVE: DSPI PUSH TX FIFO Register In Slave Mode
  PUSHR_SLAVE @offset 0x34 $u32 {
    TXDATA:32 // at 0: Transmit Data
  }

//---  Register POPR: DSPI POP RX FIFO Register
  POPR @offset 0x38 $u32 {
    RXDATA:32 // at 0: Received Data
  }

//---  Registers TXFR(0,1,2,3): DSPI Transmit FIFO Registers
  TXFR [4 @offset 0x3c @inc 0x4]
  TXFR0 @offset 0x3c
  TXFR1 @offset 0x40
  TXFR2 @offset 0x44
  TXFR3 @offset 0x48 $u32 {
    TXCMD_TXDATA:16 // at 16: Transmit Command or Transmit Data
    TXDATA:16 // at 0: Transmit Data
  }

//---  Registers RXFR(0,1,2,3): DSPI Receive FIFO Registers
  RXFR [4 @offset 0x7c @inc 0x4]
  RXFR0 @offset 0x7c
  RXFR1 @offset 0x80
  RXFR2 @offset 0x84
  RXFR3 @offset 0x88 $u32 {
    RXDATA:32 // at 0: Receive Data
  }

}

//------------------------------------------------------------------------------
// Peripheral SysTick: System timer
//------------------------------------------------------------------------------

registers ©SysTick @at 0xe000e010 {
//---  Register CSR: SysTick Control and Status Register
  CSR @offset 0x0 $u32 {
    15
    COUNTFLAG // at 16: no description available
    13
    CLKSOURCE // at 2: no description available
    TICKINT // at 1: no description available
    ENABLE // at 0: no description available
  }

//---  Register RVR: SysTick Reload Value Register
  RVR @offset 0x4 $u32 {
    8
    RELOAD:24 // at 0: Value to load into the SysTick Current Value Register when the counter reaches 0
  }

//---  Register CVR: SysTick Current Value Register
  CVR @offset 0x8 $u32 {
    8
    CURRENT:24 // at 0: Current value at the time the register is accessed
  }

//---  Register CALIB: SysTick Calibration Value Register
  CALIB @offset 0xc $u32 {
    NOREF // at 31: no description available
    SKEW // at 30: no description available
    6
    TENMS:24 // at 0: Reload value to use for 10ms timing
  }

}

//------------------------------------------------------------------------------
// Peripheral SystemControl: System Control Registers
//------------------------------------------------------------------------------

registers ©SystemControl @at 0xe000e000 {
//---  Register ACTLR: Auxiliary Control Register,
  ACTLR @offset 0x8 $u32 {
    29
    DISFOLD // at 2: Disables folding of IT instructions.
    DISDEFWBUF // at 1: Disables write buffer use during default memory map accesses.
    DISMCYCINT // at 0: Disables interruption of multi-cycle instructions.
  }

//---  Register CPUID: CPUID Base Register
  CPUID @offset 0xd00 $u32 {
    IMPLEMENTER:8 // at 24: Implementer code
    VARIANT:4 // at 20: Indicates processor revision: 0x2 = Revision 2
    4
    PARTNO:12 // at 4: Indicates part number
    REVISION:4 // at 0: Indicates patch release: 0x0 = Patch 0
  }

//---  Register ICSR: Interrupt Control and State Register
  ICSR @offset 0xd04 $u32 {
    NMIPENDSET // at 31: no description available
    2
    PENDSVSET // at 28: no description available
    PENDSVCLR // at 27: no description available
    PENDSTSET // at 26: no description available
    PENDSTCLR // at 25: no description available
    1
    ISRPREEMPT // at 23: no description available
    ISRPENDING // at 22: no description available
    4
    VECTPENDING:6 // at 12: Exception number of the highest priority pending enabled exception
    RETTOBASE // at 11: no description available
    2
    VECTACTIVE:9 // at 0: Active exception number
  }

//---  Register VTOR: Vector Table Offset Register
  VTOR @offset 0xd08 $u32 {
    TBLOFF:25 // at 7: Vector table base offset
    7
  }

//---  Register AIRCR: Application Interrupt and Reset Control Register
  AIRCR @offset 0xd0c $u32 {
    VECTKEY:16 // at 16: Register key
    ENDIANNESS // at 15: no description available
    4
    PRIGROUP:3 // at 8: Interrupt priority grouping field. This field determines the split of group priority from subpriority.
    5
    SYSRESETREQ // at 2: no description available
    VECTCLRACTIVE // at 1: no description available
    VECTRESET // at 0: no description available
  }

//---  Register SCR: System Control Register
  SCR @offset 0xd10 $u32 {
    27
    SEVONPEND // at 4: no description available
    1
    SLEEPDEEP // at 2: no description available
    SLEEPONEXIT // at 1: no description available
    1
  }

//---  Register CCR: Configuration and Control Register
  CCR @offset 0xd14 $u32 {
    22
    STKALIGN // at 9: Indicates stack alignment on exception entry
    BFHFNMIGN // at 8: Enables handlers with priority -1 or -2 to ignore data BusFaults caused by load and store instructions.
    3
    DIV_0_TRP // at 4: Enables faulting or halting when the processor executes an SDIV or UDIV instruction with a divisor of 0
    UNALIGN_TRP // at 3: Enables unaligned access traps
    1
    USERSETMPEND // at 1: Enables unprivileged software access to the STIR
    NONBASETHRDENA // at 0: no description available
  }

//---  Register SHPR1: System Handler Priority Register 1
  SHPR1 @offset 0xd18 $u32 {
    8
    PRI_6:8 // at 16: Priority of system handler 6, UsageFault
    PRI_5:8 // at 8: Priority of system handler 5, BusFault
    PRI_4:8 // at 0: Priority of system handler 4, MemManage
  }

//---  Register SHPR2: System Handler Priority Register 2
  SHPR2 @offset 0xd1c $u32 {
    PRI_11:8 // at 24: Priority of system handler 11, SVCall
    24
  }

//---  Register SHPR3: System Handler Priority Register 3
  SHPR3 @offset 0xd20 $u32 {
    PRI_15:8 // at 24: Priority of system handler 15, SysTick exception
    PRI_14:8 // at 16: Priority of system handler 14, PendSV
    16
  }

//---  Register SHCSR: System Handler Control and State Register
  SHCSR @offset 0xd24 $u32 {
    13
    USGFAULTENA // at 18: no description available
    BUSFAULTENA // at 17: no description available
    MEMFAULTENA // at 16: no description available
    SVCALLPENDED // at 15: no description available
    BUSFAULTPENDED // at 14: no description available
    MEMFAULTPENDED // at 13: no description available
    USGFAULTPENDED // at 12: no description available
    SYSTICKACT // at 11: no description available
    PENDSVACT // at 10: no description available
    1
    MONITORACT // at 8: no description available
    SVCALLACT // at 7: no description available
    3
    USGFAULTACT // at 3: no description available
    1
    BUSFAULTACT // at 1: no description available
    MEMFAULTACT // at 0: no description available
  }

//---  Register CFSR: Configurable Fault Status Registers
  CFSR @offset 0xd28 $u32 {
    6
    DIVBYZERO // at 25: no description available
    UNALIGNED // at 24: no description available
    4
    NOCP // at 19: no description available
    INVPC // at 18: no description available
    INVSTATE // at 17: no description available
    UNDEFINSTR // at 16: no description available
    BFARVALID // at 15: no description available
    1
    LSPERR // at 13: no description available
    STKERR // at 12: no description available
    UNSTKERR // at 11: no description available
    IMPRECISERR // at 10: no description available
    PRECISERR // at 9: no description available
    IBUSERR // at 8: no description available
    MMARVALID // at 7: no description available
    1
    MLSPERR // at 5: no description available
    MSTKERR // at 4: no description available
    MUNSTKERR // at 3: no description available
    1
    DACCVIOL // at 1: no description available
    IACCVIOL // at 0: no description available
  }

//---  Register HFSR: HardFault Status register
  HFSR @offset 0xd2c $u32 {
    DEBUGEVT // at 31: no description available
    FORCED // at 30: no description available
    28
    VECTTBL // at 1: no description available
    1
  }

//---  Register DFSR: Debug Fault Status Register
  DFSR @offset 0xd30 $u32 {
    27
    EXTERNAL // at 4: no description available
    VCATCH // at 3: no description available
    DWTTRAP // at 2: no description available
    BKPT // at 1: no description available
    HALTED // at 0: no description available
  }

//---  Register MMFAR: MemManage Address Register
  MMFAR @offset 0xd34 $u32 {
    ADDRESS:32 // at 0: Address of MemManage fault location
  }

//---  Register BFAR: BusFault Address Register
  BFAR @offset 0xd38 $u32 {
    ADDRESS:32 // at 0: Address of the BusFault location
  }

//---  Register AFSR: Auxiliary Fault Status Register
  AFSR @offset 0xd3c $u32 {
    AUXFAULT:32 // at 0: Latched version of the AUXFAULT inputs
  }

}

//------------------------------------------------------------------------------
// Peripheral TSI0: Touch Sensing Input
//------------------------------------------------------------------------------

registers ©TSI0 @at 0x40045000 {
//---  Register GENCS: General Control and Status Register
  GENCS @offset 0x0 $u32 {
    3
    LPCLKS // at 28: Low Power Mode Clock Source Selection.
    LPSCNITV:4 // at 24: TSI Low Power Mode Scan Interval.
    NSCN:5 // at 19: Number of Consecutive Scans per Electrode electrode.
    PS:3 // at 16: Electrode Oscillator prescaler. .
    EOSF // at 15: End of Scan Flag.
    OUTRGF // at 14: Out of Range Flag.
    EXTERF // at 13: External Electrode error occurred
    OVRF // at 12: Overrun error Flag. This flag is set when a scan trigger occurs while a scan is still in progress. Write "1", when this flag is set, to clear it.
    2
    SCNIP // at 9: Scan In Progress status
    SWTS // at 8: Software Trigger Start
    TSIEN // at 7: Touch Sensing Input Module Enable
    TSIIE // at 6: Touch Sensing Input Interrupt Module Enable
    ERIE // at 5: Error Interrupt Enable
    ESOR // at 4: End-of-Scan or Out-of-Range Interrupt select
    2
    STM // at 1: Scan Trigger Mode. This bit-field can only be changed if the TSI module is disabled (TSIEN bit = 0).
    STPE // at 0: no description available
  }

//---  Register SCANC: SCAN Control Register
  SCANC @offset 0x4 $u32 {
    4
    REFCHRG:4 // at 24: Ref OSC Charge Current select
    4
    EXTCHRG:4 // at 16: External OSC Charge Current select
    SMOD:8 // at 8: Scan Module
    3
    AMCLKS:2 // at 3: Active Mode Clock Source
    AMPSC:3 // at 0: Active Mode Prescaler
  }

//---  Register PEN: Pin Enable Register
  PEN @offset 0x8 $u32 {
    12
    LPSP:4 // at 16: Low Power Scan Pin
    PEN15 // at 15: Touch Sensing Input Pin Enable Register 15
    PEN14 // at 14: Touch Sensing Input Pin Enable Register 14
    PEN13 // at 13: Touch Sensing Input Pin Enable Register 13
    PEN12 // at 12: Touch Sensing Input Pin Enable Register 12
    PEN11 // at 11: Touch Sensing Input Pin Enable Register 11
    PEN10 // at 10: Touch Sensing Input Pin Enable Register 10
    PEN9 // at 9: Touch Sensing Input Pin Enable Register 9
    PEN8 // at 8: Touch Sensing Input Pin Enable Register 8
    PEN7 // at 7: Touch Sensing Input Pin Enable Register 7
    PEN6 // at 6: Touch Sensing Input Pin Enable Register 6
    PEN5 // at 5: Touch Sensing Input Pin Enable Register 5
    PEN4 // at 4: Touch Sensing Input Pin Enable Register 4
    PEN3 // at 3: Touch Sensing Input Pin Enable Register 3
    PEN2 // at 2: Touch Sensing Input Pin Enable Register 2
    PEN1 // at 1: Touch Sensing Input Pin Enable Register 1
    PEN0 // at 0: Touch Sensing Input Pin Enable Register 0
  }

//---  Register WUCNTR: Wake-Up Channel Counter Register
  WUCNTR @offset 0xc $u32 {
    16
    WUCNT:16 // at 0: TouchSensing wake-up Channel 16bit counter value
  }

//---  Registers CNTR(1,3,5,7,9,11,13,15): Counter Register
  CNTR [8 @offset 0x100 @inc 0x4]
  CNTR1 @offset 0x100
  CNTR3 @offset 0x104
  CNTR5 @offset 0x108
  CNTR7 @offset 0x10c
  CNTR9 @offset 0x110
  CNTR11 @offset 0x114
  CNTR13 @offset 0x118
  CNTR15 @offset 0x11c $u32 {
    CTN:16 // at 16: TouchSensing Channel n 16-bit counter value
    CTN1:16 // at 0: TouchSensing Channel n-1 16-bit counter value
  }

//---  Register THRESHOLD: Low Power Channel Threshold Register
  THRESHOLD @offset 0x120 $u32 {
    LTHH:16 // at 16: Touch Sensing Channel Low Threshold value
    HTHH:16 // at 0: Touch Sensing Channel High Threshold value
  }

}

//------------------------------------------------------------------------------
// PERIPHERAL GROUP: ©UART [5]
//        UART0 at 0x4006a000
//        UART1 at 0x4006b000
//        UART2 at 0x4006c000
//        UART3 at 0x4006d000
//        UART4 at 0x400ea000
//------------------------------------------------------------------------------

registers ©UART [5 @at 0x4006a000 0x4006b000 0x4006c000 0x4006d000 0x400ea000]
          ©UART0 @at 0x4006a000
          ©UART1 @at 0x4006b000
          ©UART2 @at 0x4006c000
          ©UART3 @at 0x4006d000
          ©UART4 @at 0x400ea000 {
//---  Register BDH: UART Baud Rate Registers:High
  BDH @offset 0x0 $u8 {
    LBKDIE // at 7: LIN Break Detect Interrupt Enable
    RXEDGIE // at 6: RxD Input Active Edge Interrupt Enable
    1
    SBR:5 // at 0: UART Baud Rate Bits
  }

//---  Register BDL: UART Baud Rate Registers: Low
  BDL @offset 0x1 $u8 {
    SBR:8 // at 0: UART Baud Rate Bits
  }

//---  Register C1: UART Control Register 1
  C1 @offset 0x2 $u8 {
    LOOPS // at 7: Loop Mode Select
    UARTSWAI // at 6: UART Stops in Wait Mode
    RSRC // at 5: Receiver Source Select
    M // at 4: 9-bit or 8-bit Mode Select
    WAKE // at 3: Receiver Wakeup Method Select
    ILT // at 2: Idle Line Type Select
    PE // at 1: Parity Enable
    PT // at 0: Parity Type
  }

//---  Register C2: UART Control Register 2
  C2 @offset 0x3 $u8 {
    TIE // at 7: Transmitter Interrupt or DMA Transfer Enable.
    TCIE // at 6: Transmission Complete Interrupt Enable
    RIE // at 5: Receiver Full Interrupt or DMA Transfer Enable
    ILIE // at 4: Idle Line Interrupt Enable
    TE // at 3: Transmitter Enable
    RE // at 2: Receiver Enable
    RWU // at 1: Receiver Wakeup Control
    SBK // at 0: Send Break
  }

//---  Register S1: UART Status Register 1
  S1 @offset 0x4 $u8 {
    TDRE // at 7: Transmit Data Register Empty Flag
    TC // at 6: Transmit Complete Flag
    RDRF // at 5: Receive Data Register Full Flag
    IDLE // at 4: Idle Line Flag
    OR // at 3: Receiver Overrun Flag
    NF // at 2: Noise Flag
    FE // at 1: Framing Error Flag
    PF // at 0: Parity Error Flag
  }

//---  Register S2: UART Status Register 2
  S2 @offset 0x5 $u8 {
    LBKDIF // at 7: LIN Break Detect Interrupt Flag
    RXEDGIF // at 6: RxD Pin Active Edge Interrupt Flag
    MSBF // at 5: Most Significant Bit First
    RXINV // at 4: Receive Data Inversion
    RWUID // at 3: Receive Wakeup Idle Detect
    BRK13 // at 2: Break Transmit Character Length
    LBKDE // at 1: LIN Break Detection Enable
    RAF // at 0: Receiver Active Flag
  }

//---  Register C3: UART Control Register 3
  C3 @offset 0x6 $u8 {
    R8 // at 7: Received Bit 8
    T8 // at 6: Transmit Bit 8
    TXDIR // at 5: Transmitter Pin Data Direction in Single-Wire mode
    TXINV // at 4: Transmit Data Inversion.
    ORIE // at 3: Overrun Error Interrupt Enable
    NEIE // at 2: Noise Error Interrupt Enable
    FEIE // at 1: Framing Error Interrupt Enable
    PEIE // at 0: Parity Error Interrupt Enable
  }

//---  Register D: UART Data Register
  D @offset 0x7 $u8 {
    RT:8 // at 0: no description available
  }

//---  Register MA1: UART Match Address Registers 1
  MA1 @offset 0x8 $u8 {
    MA:8 // at 0: Match Address
  }

//---  Register MA2: UART Match Address Registers 2
  MA2 @offset 0x9 $u8 {
    MA:8 // at 0: Match Address
  }

//---  Register C4: UART Control Register 4
  C4 @offset 0xa $u8 {
    MAEN1 // at 7: Match Address Mode Enable 1
    MAEN2 // at 6: Match Address Mode Enable 2
    M10 // at 5: 10-bit Mode select
    BRFA:5 // at 0: Baud Rate Fine Adjust
  }

//---  Register C5: UART Control Register 5
  C5 @offset 0xb $u8 {
    TDMAS // at 7: Transmitter DMA Select
    1
    RDMAS // at 5: Receiver Full DMA Select
    5
  }

//---  Register ED: UART Extended Data Register
  ED @offset 0xc $u8 {
    NOISY // at 7: no description available
    PARITYE // at 6: no description available
    6
  }

//---  Register MODEM: UART Modem Register
  MODEM @offset 0xd $u8 {
    4
    RXRTSE // at 3: Receiver request-to-send enable
    TXRTSPOL // at 2: Transmitter request-to-send polarity
    TXRTSE // at 1: Transmitter request-to-send enable
    TXCTSE // at 0: Transmitter clear-to-send enable
  }

//---  Register IR: UART Infrared Register
  IR @offset 0xe $u8 {
    5
    IREN // at 2: Infrared enable
    TNP:2 // at 0: Transmitter narrow pulse
  }

//---  Register PFIFO: UART FIFO Parameters
  PFIFO @offset 0x10 $u8 {
    TXFE // at 7: Transmit FIFO Enable
    TXFIFOSIZE:3 // at 4: Transmit FIFO. Buffer Depth
    RXFE // at 3: Receive FIFO Enable
    RXFIFOSIZE:3 // at 0: Receive FIFO. Buffer Depth
  }

//---  Register CFIFO: UART FIFO Control Register
  CFIFO @offset 0x11 $u8 {
    TXFLUSH // at 7: Transmit FIFO/Buffer Flush
    RXFLUSH // at 6: Receive FIFO/Buffer Flush
    4
    TXOFE // at 1: Transmit FIFO Overflow Interrupt Enable
    RXUFE // at 0: Receive FIFO Underflow Interrupt Enable
  }

//---  Register SFIFO: UART FIFO Status Register
  SFIFO @offset 0x12 $u8 {
    TXEMPT // at 7: Transmit Buffer/FIFO Empty
    RXEMPT // at 6: Receive Buffer/FIFO Empty
    4
    TXOF // at 1: Transmitter Buffer Overflow Flag
    RXUF // at 0: Receiver Buffer Underflow Flag
  }

//---  Register TWFIFO: UART FIFO Transmit Watermark
  TWFIFO @offset 0x13 $u8 {
    TXWATER:8 // at 0: Transmit Watermark
  }

//---  Register TCFIFO: UART FIFO Transmit Count
  TCFIFO @offset 0x14 $u8 {
    TXCOUNT:8 // at 0: Transmit Counter
  }

//---  Register RWFIFO: UART FIFO Receive Watermark
  RWFIFO @offset 0x15 $u8 {
    RXWATER:8 // at 0: Receive Watermark
  }

//---  Register RCFIFO: UART FIFO Receive Count
  RCFIFO @offset 0x16 $u8 {
    RXCOUNT:8 // at 0: Receive Counter
  }

}

//------------------------------------------------------------------------------
// Peripheral USB0: Universal Serial Bus, OTG Capable Controller
//------------------------------------------------------------------------------

registers ©USB0 @at 0x40072000 {
//---  Register PERID: Peripheral ID Register
  PERID @offset 0x0 $u8 {
    2
    ID:6 // at 0: Peripheral identification bits
  }

//---  Register IDCOMP: Peripheral ID Complement Register
  IDCOMP @offset 0x4 $u8 {
    2
    NID:6 // at 0: no description available
  }

//---  Register REV: Peripheral Revision Register
  REV @offset 0x8 $u8 {
    REV:8 // at 0: Revision
  }

//---  Register ADDINFO: Peripheral Additional Info Register
  ADDINFO @offset 0xc $u8 {
    IRQNUM:5 // at 3: Assigned Interrupt Request Number
    2
    IEHOST // at 0: no description available
  }

//---  Register OTGISTAT: OTG Interrupt Status Register
  OTGISTAT @offset 0x10 $u8 {
    IDCHG // at 7: no description available
    ONEMSEC // at 6: no description available
    LINE_STATE_CHG // at 5: no description available
    1
    SESSVLDCHG // at 3: no description available
    B_SESS_CHG // at 2: no description available
    1
    AVBUSCHG // at 0: no description available
  }

//---  Register OTGICR: OTG Interrupt Control Register
  OTGICR @offset 0x14 $u8 {
    IDEN // at 7: ID interrupt enable
    ONEMSECEN // at 6: 1 millisecond interrupt enable
    LINESTATEEN // at 5: Line State change interrupt enable
    1
    SESSVLDEN // at 3: Session valid interrupt enable
    BSESSEN // at 2: B Session END interrupt enable
    1
    AVBUSEN // at 0: A VBUS Valid interrupt enable
  }

//---  Register OTGSTAT: OTG Status Register
  OTGSTAT @offset 0x18 $u8 {
    ID // at 7: no description available
    ONEMSECEN // at 6: no description available
    LINESTATESTABLE // at 5: no description available
    1
    SESS_VLD // at 3: Session valid
    BSESSEND // at 2: B Session END
    1
    AVBUSVLD // at 0: A VBUS Valid
  }

//---  Register OTGCTL: OTG Control Register
  OTGCTL @offset 0x1c $u8 {
    DPHIGH // at 7: D+ Data Line pullup resistor enable
    1
    DPLOW // at 5: D+ Data Line pull-down resistor enable
    DMLOW // at 4: D- Data Line pull-down resistor enable
    1
    OTGEN // at 2: On-The-Go pullup/pulldown resistor enable
    2
  }

//---  Register ISTAT: Interrupt Status Register
  ISTAT @offset 0x80 $u8 {
    STALL // at 7: Stall Interrupt
    ATTACH // at 6: Attach Interrupt
    RESUME // at 5: no description available
    SLEEP // at 4: no description available
    TOKDNE // at 3: no description available
    SOFTOK // at 2: no description available
    ERROR // at 1: no description available
    USBRST // at 0: no description available
  }

//---  Register INTEN: Interrupt Enable Register
  INTEN @offset 0x84 $u8 {
    STALLEN // at 7: STALL Interrupt Enable
    ATTACHEN // at 6: ATTACH Interrupt Enable
    RESUMEEN // at 5: RESUME Interrupt Enable
    SLEEPEN // at 4: SLEEP Interrupt Enable
    TOKDNEEN // at 3: TOKDNE Interrupt Enable
    SOFTOKEN // at 2: SOFTOK Interrupt Enable
    ERROREN // at 1: ERROR Interrupt Enable
    USBRSTEN // at 0: USBRST Interrupt Enable
  }

//---  Register ERRSTAT: Error Interrupt Status Register
  ERRSTAT @offset 0x88 $u8 {
    BTSERR // at 7: no description available
    1
    DMAERR // at 5: no description available
    BTOERR // at 4: no description available
    DFN8 // at 3: no description available
    CRC16 // at 2: no description available
    CRC5EOF // at 1: no description available
    PIDERR // at 0: no description available
  }

//---  Register ERREN: Error Interrupt Enable Register
  ERREN @offset 0x8c $u8 {
    BTSERREN // at 7: BTSERR Interrupt Enable
    1
    DMAERREN // at 5: DMAERR Interrupt Enable
    BTOERREN // at 4: BTOERR Interrupt Enable
    DFN8EN // at 3: DFN8 Interrupt Enable
    CRC16EN // at 2: CRC16 Interrupt Enable
    CRC5EOFEN // at 1: CRC5/EOF Interrupt Enable
    PIDERREN // at 0: PIDERR Interrupt Enable
  }

//---  Register STAT: Status Register
  STAT @offset 0x90 $u8 {
    ENDP:4 // at 4: no description available
    TX // at 3: Transmit Indicator
    ODD // at 2: no description available
    2
  }

//---  Register CTL: Control Register
  CTL @offset 0x94 $u8 {
    JSTATE // at 7: Live USB differential receiver JSTATE signal
    SE0 // at 6: Live USB Single Ended Zero signal
    TXSUSPENDTOKENBUSY // at 5: no description available
    RESET // at 4: no description available
    HOSTMODEEN // at 3: no description available
    RESUME // at 2: no description available
    ODDRST // at 1: no description available
    USBENSOFEN // at 0: USB Enable
  }

//---  Register ADDR: Address Register
  ADDR @offset 0x98 $u8 {
    LSEN // at 7: Low Speed Enable bit
    ADDR:7 // at 0: USB address
  }

//---  Register BDTPAGE1: BDT Page Register 1
  BDTPAGE1 @offset 0x9c $u8 {
    BDTBA:7 // at 1: no description available
    1
  }

//---  Register FRMNUML: Frame Number Register Low
  FRMNUML @offset 0xa0 $u8 {
    FRM:8 // at 0: no description available
  }

//---  Register FRMNUMH: Frame Number Register High
  FRMNUMH @offset 0xa4 $u8 {
    5
    FRM:3 // at 0: no description available
  }

//---  Register TOKEN: Token Register
  TOKEN @offset 0xa8 $u8 {
    TOKENPID:4 // at 4: no description available
    TOKENENDPT:4 // at 0: no description available
  }

//---  Register SOFTHLD: SOF Threshold Register
  SOFTHLD @offset 0xac $u8 {
    CNT:8 // at 0: no description available
  }

//---  Register BDTPAGE2: BDT Page Register 2
  BDTPAGE2 @offset 0xb0 $u8 {
    BDTBA:8 // at 0: no description available
  }

//---  Register BDTPAGE3: BDT Page Register 3
  BDTPAGE3 @offset 0xb4 $u8 {
    BDTBA:8 // at 0: no description available
  }

//---  Registers ENDPT(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15): Endpoint Control Register
  ENDPT [16 @offset 0xc0 @inc 0x4]
  ENDPT0 @offset 0xc0
  ENDPT1 @offset 0xc4
  ENDPT2 @offset 0xc8
  ENDPT3 @offset 0xcc
  ENDPT4 @offset 0xd0
  ENDPT5 @offset 0xd4
  ENDPT6 @offset 0xd8
  ENDPT7 @offset 0xdc
  ENDPT8 @offset 0xe0
  ENDPT9 @offset 0xe4
  ENDPT10 @offset 0xe8
  ENDPT11 @offset 0xec
  ENDPT12 @offset 0xf0
  ENDPT13 @offset 0xf4
  ENDPT14 @offset 0xf8
  ENDPT15 @offset 0xfc $u8 {
    HOSTWOHUB // at 7: no description available
    RETRYDIS // at 6: no description available
    1
    EPCTLDIS // at 4: no description available
    EPRXEN // at 3: no description available
    EPTXEN // at 2: no description available
    EPSTALL // at 1: no description available
    EPHSHK // at 0: no description available
  }

//---  Register USBCTRL: USB Control Register
  USBCTRL @offset 0x100 $u8 {
    SUSP // at 7: no description available
    PDE // at 6: no description available
    6
  }

//---  Register OBSERVE: USB OTG Observe Register
  OBSERVE @offset 0x104 $u8 {
    DPPU // at 7: no description available
    DPPD // at 6: no description available
    1
    DMPD // at 4: no description available
    4
  }

//---  Register CONTROL: USB OTG Control Register
  CONTROL @offset 0x108 $u8 {
    3
    DPPULLUPNONOTG // at 4: no description available
    4
  }

//---  Register USBTRC0: USB Transceiver Control Register 0
  USBTRC0 @offset 0x10c $u8 {
    USBRESET // at 7: USB reset
    1
    USBRESMEN // at 5: Asynchronous Resume Interrupt Enable
    3
    SYNC_DET // at 1: Synchronous USB Interrupt Detect
    USB_RESUME_INT // at 0: USB Asynchronous Interrupt
  }

//---  Register USBFRMADJUST: Frame Adjust Register
  USBFRMADJUST @offset 0x114 $u8 {
    ADJ:8 // at 0: Frame Adjustment
  }

}

//------------------------------------------------------------------------------
// Peripheral USBDCD: USB Device Charger Detection module
//------------------------------------------------------------------------------

registers ©USBDCD @at 0x40035000 {
//---  Register CONTROL: Control Register
  CONTROL @offset 0x0 $u32 {
    6
    SR // at 25: Software Reset
    START // at 24: Start Change Detection Sequence
    7
    IE // at 16: Interrupt Enable
    7
    IF // at 8: Interrupt Flag
    7
    IACK // at 0: Interrupt Acknowledge
  }

//---  Register CLOCK: Clock Register
  CLOCK @offset 0x4 $u32 {
    20
    CLOCK_SPEED:10 // at 2: Numerical Value of Clock Speed in Binary
    1
    CLOCK_UNIT // at 0: Unit of measurement encoding for Clock Speed
  }

//---  Register STATUS: Status Register
  STATUS @offset 0x8 $u32 {
    9
    ACTIVE // at 22: Active Status Indicator
    TO // at 21: Timeout Flag
    ERR // at 20: Error Flag
    SEQ_STAT:2 // at 18: Charger Detection Sequence Status
    SEQ_RES:2 // at 16: Charger Detection Sequence Results
    16
  }

//---  Register TIMER0: TIMER0 Register
  TIMER0 @offset 0x10 $u32 {
    6
    TSEQ_INIT:10 // at 16: Sequence Initiation Time
    4
    TUNITCON:12 // at 0: Unit Connection Timer Elapse (in ms)
  }

//---  Register TIMER1: no description available
  TIMER1 @offset 0x14 $u32 {
    6
    TDCD_DBNC:10 // at 16: Time Period to Debounce D+ Signal
    6
    TVDPSRC_ON:10 // at 0: Time Period Comparator Enabled
  }

//---  Register TIMER2: no description available
  TIMER2 @offset 0x18 $u32 {
    6
    TVDPSRC_CON:10 // at 16: Time Period Before Enabling D+ Pullup
    12
    CHECK_DM:4 // at 0: Time Before Check of D- Line
  }

}

//------------------------------------------------------------------------------
// Peripheral VREF: Voltage Reference
//------------------------------------------------------------------------------

registers ©VREF @at 0x40074000 {
//---  Register TRM: VREF Trim Register
  TRM @offset 0x0 $u8 {
    1
    CHOPEN // at 6: Chop oscillator enable. When set, internal chopping operation is enabled and the internal analog offset will be minimized.
    TRIM:6 // at 0: Trim bits
  }

//---  Register SC: VREF Status and Control Register
  SC @offset 0x1 $u8 {
    VREFEN // at 7: Internal Voltage Reference enable
    REGEN // at 6: Regulator enable
    3
    VREFST // at 2: Internal Voltage Reference stable
    MODE_LV:2 // at 0: Buffer Mode selection
  }

}

//------------------------------------------------------------------------------
// Peripheral WDOG: Generation 2008 Watchdog Timer
//------------------------------------------------------------------------------

registers ©WDOG @at 0x40052000 {
//---  Register STCTRLH: Watchdog Status and Control Register High
  STCTRLH @offset 0x0 $u16 {
    1
    DISTESTWDOG // at 14: no description available
    BYTESEL:2 // at 12: no description available
    TESTSEL // at 11: no description available
    TESTWDOG // at 10: no description available
    2
    WAITEN // at 7: no description available
    STOPEN // at 6: no description available
    DBGEN // at 5: no description available
    ALLOWUPDATE // at 4: no description available
    WINEN // at 3: no description available
    IRQRSTEN // at 2: no description available
    CLKSRC // at 1: no description available
    WDOGEN // at 0: no description available
  }

//---  Register STCTRLL: Watchdog Status and Control Register Low
  STCTRLL @offset 0x2 $u16 {
    INTFLG // at 15: no description available
    15
  }

//---  Register TOVALH: Watchdog Time-out Value Register High
  TOVALH @offset 0x4 $u16 {
    TOVALHIGH:16 // at 0: no description available
  }

//---  Register TOVALL: Watchdog Time-out Value Register Low
  TOVALL @offset 0x6 $u16 {
    TOVALLOW:16 // at 0: no description available
  }

//---  Register WINH: Watchdog Window Register High
  WINH @offset 0x8 $u16 {
    WINHIGH:16 // at 0: no description available
  }

//---  Register WINL: Watchdog Window Register Low
  WINL @offset 0xa $u16 {
    WINLOW:16 // at 0: no description available
  }

//---  Register REFRESH: Watchdog Refresh Register
  REFRESH @offset 0xc $u16 {
    WDOGREFRESH:16 // at 0: no description available
  }

//---  Register UNLOCK: Watchdog Unlock Register
  UNLOCK @offset 0xe $u16 {
    WDOGUNLOCK:16 // at 0: no description available
  }

//---  Register TMROUTH: Watchdog Timer Output Register High
  TMROUTH @offset 0x10 $u16 {
    TIMEROUTHIGH:16 // at 0: no description available
  }

//---  Register TMROUTL: Watchdog Timer Output Register Low
  TMROUTL @offset 0x12 $u16 {
    TIMEROUTLOW:16 // at 0: no description available
  }

//---  Register RSTCNT: Watchdog Reset Count Register
  RSTCNT @offset 0x14 $u16 {
    RSTCNT:16 // at 0: no description available
  }

//---  Register PRESC: Watchdog Prescaler Register
  PRESC @offset 0x16 $u16 {
    5
    PRESCVAL:3 // at 8: no description available
    8
  }

}

