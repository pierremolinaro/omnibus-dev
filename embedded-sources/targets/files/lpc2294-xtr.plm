//——————————————————————————————————————————————————————————————————————————————
//   SYNCHRONIZATION TOOLS ROUTINES                                             
//——————————————————————————————————————————————————————————————————————————————

opaqueType $taskList @instantiable : 32

//--- Block running task
extern func `kernel blockInList (?!list:ioWaitingList $taskList)

extern func `kernel blockOnDeadline (?deadline:inDeadline $uint32) 

extern func `kernel blockInListAndOnDeadline (?!list:ioWaitingList $taskList ?deadline:inDeadline $uint32) 

//--- Make task Ready
extern func `kernel `service `guard makeTaskReady (?!list:ioWaitingList $taskList) -> $bool

extern func `service makeTasksReadyFromCurrentDate (?currentDate:inCurrentDate $uint32)

//——————————————————————————————————————————————————————————————————————————————
//   GUARD                                                                      
//——————————————————————————————————————————————————————————————————————————————

opaqueType $guardList @instantiable : 32

extern func `guard handleGuardedCommand (?!guard:ioGuard $guardList)

extern func `guard handleGuardedWaitUntil (?deadline:inDeadlineMS $uint32)

extern func `kernel `service guardDidChange (?!guard:ioGuard $guardList)

extern func `service tickHandlerForGuardedWaitUntil (?currentDate:inCurrentDate $uint32)

//——————————————————————————————————————————————————————————————————————————————

let TIMER_PRESCALER = 6
let TICKS_PER_MILLISECONDS = 10000

//——————————————————————————————————————————————————————————————————————————————

init 100 {
//--- Program pin P1.23 as an output (STAT led)
  IO1DIR |= 1 << 23
  IO1CLR  = 1 << 23 // Led On
//-------------------------------- Timer 1
//--- 1. Set Prescaler
  TIMER1_PR = TIMER_PRESCALER - 1
//--- 2. Set Match Register 0
//    We want an interrupt every millisecond
  TIMER1_MR0 = TICKS_PER_MILLISECONDS - 1
//--- 2. Set Count control Register
//    Bits 1-0: 00 (timer mode)
//    Bits 3-2: XX (any value, because timer mode)
  TIMER1_CCR = 0
//--- 3. Match Control Register
//    Bit 0: 1 (interrupt on MR0 match)
//    Bit 1: 1 (reset on MR0 match)
//    Bit 2: 0 (do not stop on MR0 match)
//    Bit 5-3: 000 (MR1 not used)
//    Bit 8-6: 000 (MR2 not used)
//    Bit 11-9: 000 (MR3 not used)
  TIMER1_MCR = 3
//--- 4. Use vector 9 for TIMER1 interrupt
//  sys_installInterruptServiceRoutine (MODE_ TIMER1InterruptServiceRoutine, 5) ;
//  VICVectAddr9 = (uint32_t) TIMER1InterruptServiceRoutine ;
//  VICVectCntl9 = 0x20 | 5 ; // Timer interrupt number is #5
//--- 5. Use IRQ for tracking MR0 matches
//  TIMER1 gets interruption #5 (mask: 0x20)
//  VICIntEnClr   = 1 << 5 ; // Timer1 interrupt generates IRQ
//  VICIntEnable |= 1 << 5 ; // Enable Timer1 interrupt
//--- 6. Start Counter 0 (Timer Control Register)
// Bit 0 : 1 (Enables counting)
// Bit 1 : 0 (No reset)
  TIMER1_TCR = 1
}

//——————————————————————————————————————————————————————————————————————————————
  
public func `service userSystickHandler @weak () {
}
  
//——————————————————————————————————————————————————————————————————————————————

module time {

  //············································································

  var mUptimeMS $uint32 = 0
  
  //············································································
  
  public func `service `kernel `user `guard millis @noWarningIfUnused () -> $uint32 {
    result = self.mUptimeMS
  }
  
  //············································································
  
  isr TIMER1 @xtr {
    TIMER1_IR = 1 // Clears MR0 interrupt
    let now = self.mUptimeMS +% 1
    self.mUptimeMS = now
    makeTasksReadyFromCurrentDate (!currentDate:now)
    tickHandlerForGuardedWaitUntil (!currentDate:now)
    userSystickHandler ()
  }
  
  //············································································
  
  public primitive waitUntilMS @noWarningIfUnused (?deadline: inDate $uint32) {
    if inDate > self.millis () {
      blockOnDeadline (!deadline:inDate)
    }
  }
  
  //············································································
  
  public func `user waitDuringMS @noWarningIfUnused (?delay: inDelay $uint32) {
    self.waitUntilMS (!deadline:self.millis () + inDelay)
  }
  
  //············································································
  
  public guard waitUntilMS @noWarningIfUnused (?deadline:inDeadline $uint32) {
    accept = inDeadline <= self.millis ()
    if not accept {
      handleGuardedWaitUntil (!deadline:inDeadline)
    }
  }

  //············································································

}

//——————————————————————————————————————————————————————————————————————————————
