//-----------------------------------------------------------------------------*
//   SYNCHRONIZATION TOOLS ROUTINES                                            *
//-----------------------------------------------------------------------------*

opaqueType $taskList @instantiable : 32

//--- Block running task
extern func `kernel blockInList (?!list:ioWaitingList $taskList)

extern func `kernel blockOnDeadline (?deadline:inDeadline $uint32) 

extern func `kernel blockInListAndOnDeadline (?!list:ioWaitingList $taskList ?deadline:inDeadline $uint32) 

//--- Make task Ready
extern func `kernel `isr makeTaskReady (?!list:ioWaitingList $taskList) -> $bool

extern func `isr makeTasksReadyFromCurrentDate (?currentDate:inCurrentDate $uint32)

//-----------------------------------------------------------------------------*
//   GUARD                                                                     *
//-----------------------------------------------------------------------------*

opaqueType $guardList @instantiable : 32

extern func `isr tickHandlerForGuardedWaitUntil (?currentDate:inCurrentDate $uint32)

extern func `isr handleGuardedCommand (?!guard:ioGuard $guardList)

extern func `isr handleGuardedWaitUntil (?deadline:inDeadlineMS $uint32)

extern func `kernel `isr guardDidChange (?!guard:ioGuard $guardList)

//-----------------------------------------------------------------------------*

init 0 { // Configure Systick interrupt every ms
//  SYST_RVR = 96000 - 1 // Interrupt every 96000 core clocks, i.e. every ms
//  SYST_CVR = 0
//  SYST_CSR = SYST_CSR::CLKSOURCE | SYST_CSR::TICKINT | SYST_CSR::ENABLE
////--- Led Teensy
//  PORTC_PCR5 = (1 << 8)
//  GPIOC_PDDR |= (1 << 5)
}

//-----------------------------------------------------------------------------*

var gUptimeMS $uint32 = 0 {
  @rw func systickHandler
  func busyWaitingDuringMS
  func millis
}

//-----------------------------------------------------------------------------*

func `isr `kernel `user millis @noWarningIfUnused () -> $uint32 {
  result = gUptimeMS
}

//-----------------------------------------------------------------------------*

func `init busyWaitingDuringMS @noWarningIfUnused (?inDelay $uint32) {
  let deadline = gUptimeMS + inDelay
  while gUptimeMS < deadline do
  end
}

//-----------------------------------------------------------------------------*

required func `isr systickHandler ()

func `isr systickHandler @global () {
  let now = gUptimeMS +% 1
  gUptimeMS = now
  makeTasksReadyFromCurrentDate (!currentDate:now)
  tickHandlerForGuardedWaitUntil (!currentDate:now)
  userSystickHandler ()
}

func `isr userSystickHandler @weak () {
}

//-----------------------------------------------------------------------------*

primitive waitUntilMS @noWarningIfUnused (?deadline: inDate $uint32) {
  if inDate > millis () then
    blockOnDeadline (!deadline:inDate)
  end
}

//-----------------------------------------------------------------------------*

func `user waitDuringMS @noWarningIfUnused (?delay: inDelay $uint32) {
  waitUntilMS (!deadline:millis () + inDelay)
}

//-----------------------------------------------------------------------------*

guard waitUntilMS @noWarningIfUnused (?deadline:inDeadline $uint32) {
  accept = inDeadline <= millis ()
  if not accept then
    handleGuardedWaitUntil (!deadline:inDeadline)
  end
}

//-----------------------------------------------------------------------------*
