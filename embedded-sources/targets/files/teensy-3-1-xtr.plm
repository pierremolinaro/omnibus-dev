//-----------------------------------------------------------------------------*
//   SYNCHRONIZATION TOOLS ROUTINES                                            *
//-----------------------------------------------------------------------------*

opaqueType $taskList @instantiable : 32

//--- Block running task
extern func blockInList `kernel (?!list:ioWaitingList $taskList)

extern func blockOnDeadline `kernel (?deadline:inDeadline $uint32) 

extern func blockInListAndOnDeadline `kernel (?!list:ioWaitingList $taskList ?deadline:inDeadline $uint32) 

//--- Make task Ready
extern func makeTaskReady `kernel (
  ?!list:ioWaitingList $taskList
  !found:outFound $bool
)

extern func makeTasksReadyFromCurrentDate `isr (?currentDate:inCurrentDate $uint32)

//-----------------------------------------------------------------------------*
//   GUARD                                                                     *
//-----------------------------------------------------------------------------*

opaqueType $guardList @instantiable : 32

extern func tickHandlerForGuardedWaitUntil `isr (?currentDate:inCurrentDate $uint32)

extern func handleGuardedCommand `isr (?!guard:ioGuard $guardList)

extern func handleGuardedWaitUntil `isr (?deadline:inDeadlineMS $uint32)

extern func guardDidChange `kernel (?!guard:ioGuard $guardList)

//-----------------------------------------------------------------------------*

init 0 { // Configure Systick interrupt every ms
  SYST_RVR = 96000 - 1 // Interrupt every 96000 core clocks, i.e. every ms
  SYST_CVR = 0
  SYST_CSR = SYST_CSR::CLKSOURCE | SYST_CSR::TICKINT | SYST_CSR::ENABLE
}

//-----------------------------------------------------------------------------*

var gUptimeMS $uint32 = 0 {
  @rw func systickHandler
  func busyWaitingDuringMS
  func millis
}

//-----------------------------------------------------------------------------*

func millis `isr `kernel `user @noWarningIfUnused () -> $uint32 {
  result = gUptimeMS
}

//-----------------------------------------------------------------------------*

func busyWaitingDuringMS `init @noWarningIfUnused (?inDuration $uint32) {
  let deadline = gUptimeMS + inDuration
  while gUptimeMS < deadline do
  end
}

//-----------------------------------------------------------------------------*

required func systickHandler `isr ()

func systickHandler `isr @global () {
  gUptimeMS +%= 1
  makeTasksReadyFromCurrentDate (!currentDate:millis ())
  tickHandlerForGuardedWaitUntil (!currentDate:millis ())
  userSystickHandler ()
}

func userSystickHandler `isr @weak () {
}

//-----------------------------------------------------------------------------*

service waitUntilMS `kernel @noWarningIfUnused (?deadline: inDate $uint32) {
  if inDate > millis () then
    blockOnDeadline (!deadline:inDate)
  end
}

//-----------------------------------------------------------------------------*

func waitDuringMS `user @noWarningIfUnused (?delay: inDelay $uint32) {
  waitUntilMS (!deadline:millis () + inDelay)
}

//-----------------------------------------------------------------------------*

guard waitUntilMS @noWarningIfUnused (?deadline:inDeadline $uint32) {
  accept = inDeadline <= millis ()
  if not accept then
    handleGuardedWaitUntil (!deadline:inDeadline)
  end
}

//-----------------------------------------------------------------------------*
