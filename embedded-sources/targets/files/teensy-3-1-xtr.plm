//——————————————————————————————————————————————————————————————————————————————
//   SYNCHRONIZATION TOOLS ROUTINES                                             
//——————————————————————————————————————————————————————————————————————————————

type $taskList : ((32)) @instantiable

//--- Block running task
extern func `kernel
block (?!inList:ioWaitingList $taskList) : "blockInList"

extern func `kernel
block (?onDeadline:inDeadline $uint32) : "blockOnDeadline"

extern func `kernel
block (?!inList:ioWaitingList $taskList
       ?onDeadline:inDeadline $uint32) : "blockInListAndOnDeadline"

//--- Make task Ready
extern func `kernel `service `guard
makeTaskReady (?!fromList:ioWaitingList $taskList
               !found: outFound $bool) : "makeTaskReady"

extern func `service
makeTasksReady (?fromCurrentDate:inCurrentDate $uint32) : "makeTasksReadyFromCurrentDate"

//——————————————————————————————————————————————————————————————————————————————
//   GUARD                                                                      
//——————————————————————————————————————————————————————————————————————————————

type $guardList : ((32)) @instantiable

extern func `guard
handle (?!guard:ioGuard $guardList) : "handleGuardedCommand"

extern func `guard
handle (?guardedDeadline:inDeadlineMS $uint32) : "handleGuardedWaitUntil"

extern func `kernel `service
notifyChange (?!forGuard:ioGuard $guardList) : "guardDidChange"

extern func `service
notifyChangeForGuardedWaitUntil (?withCurrentDate:inCurrentDate $uint32) : "tickHandlerForGuardedWaitUntil"

//——————————————————————————————————————————————————————————————————————————————
//   INIT                                                                       
//——————————————————————————————————————————————————————————————————————————————

init 0 { // Configure Systick interrupt every ms
  SYST_RVR = 96000 - 1 // Interrupt every 96000 core clocks, i.e. every ms
  SYST_CVR = 0
  SYST_CSR = $SYST_CSR {CLKSOURCE, ENABLE, TICKINT}
//--- Led Teensy
  PORTC_PCR5 = (1 << 8)
  GPIOC_PDDR |= (1 << 5)
}

//——————————————————————————————————————————————————————————————————————————————
//   USER TICK HANDLER                                                          
//——————————————————————————————————————————————————————————————————————————————

public func `service userTickHandler @weak () {
}

//——————————————————————————————————————————————————————————————————————————————
//   TIME                                                                       
//——————————————————————————————————————————————————————————————————————————————

module time {
  var mUptimeMS $uint32 = 0 

  //············································································
  
  public func `panic `init oneMillisecondBusyWait @noUnusedWarning () {
    do while not SYST_CSR.COUNTFLAG.bool {}
  }

  //············································································
  
  public func `service `kernel `user `guard millis @noUnusedWarning @userAccess () -> $uint32 {
    result = self.mUptimeMS
  }
  
  //············································································
  
  public func `panic `init busyWaitingDuringMS @noUnusedWarning (?inDelay $uint32) {
    for delay $uint32 in 0 ..< inDelay {
      self.oneMillisecondBusyWait ()
    }
  }
  
  //············································································
  
  isr systick @xtr {
    let now = self.mUptimeMS +% 1
    self.mUptimeMS = now
    makeTasksReady (!fromCurrentDate:now)
    notifyChangeForGuardedWaitUntil (!withCurrentDate:now)
    userTickHandler ()
  }
  
  //············································································
  
  public primitive waitUntilMS @noUnusedWarning (?deadline: inDate $uint32) {
    if inDate > self.millis () {
      block (!onDeadline:inDate)
    }
  }
  
  //············································································
  
  public primitive waitDuringMS @noUnusedWarning (?delay: inDelay $uint32) {
    if inDelay > 0 {
      block (!onDeadline:self.millis () +% inDelay)
    }
  }
  
  //············································································
  
  public guard waitUntilMS @noUnusedWarning (?deadline:inDeadline $uint32) {
    accept = inDeadline <= self.millis ()
    if not accept {
      handle (!guardedDeadline:inDeadline)
    }
  }
  
  //············································································

}
 
//——————————————————————————————————————————————————————————————————————————————

