//——————————————————————————————————————————————————————————————————————————————
//   SYNCHRONIZATION TOOLS ROUTINES                                             
//——————————————————————————————————————————————————————————————————————————————

opaqueType $taskList @instantiable : 32

//--- Block running task
extern public func `kernel blockInList (?!list:ioWaitingList $taskList)

extern public func `kernel blockOnDeadline (?deadline:inDeadline $uint32) 

extern public func `kernel blockInListAndOnDeadline (?!list:ioWaitingList $taskList ?deadline:inDeadline $uint32) 

//--- Make task Ready
extern public func `kernel `service `guard makeTaskReady (?!list:ioWaitingList $taskList) -> $bool

extern public func `service makeTasksReadyFrom (?currentDate:inCurrentDate $uint32)

//——————————————————————————————————————————————————————————————————————————————
//   GUARD                                                                      
//——————————————————————————————————————————————————————————————————————————————

opaqueType $guardList @instantiable : 32

extern public func `guard handleGuardedCommand (?!guard:ioGuard $guardList)

extern public func `guard handleGuardedWaitUntil (?deadline:inDeadlineMS $uint32)

extern public func `kernel `service guardDidChange (?!guard:ioGuard $guardList)

extern public func `service tickHandlerForGuardedWaitUntil (?currentDate:inCurrentDate $uint32)

//——————————————————————————————————————————————————————————————————————————————
//   INIT                                                                       
//——————————————————————————————————————————————————————————————————————————————

init 0 { // Configure Systick interrupt every ms
  SYST_RVR = 96000 - 1 // Interrupt every 96000 core clocks, i.e. every ms
  SYST_CVR = 0
  SYST_CSR = SYST_CSR::CLKSOURCE | SYST_CSR::ENABLE | SYST_CSR::TICKINT
//--- Led Teensy
  PORTC_PCR5 = (1 << 8)
  GPIOC_PDDR |= (1 << 5)
}

//——————————————————————————————————————————————————————————————————————————————
//   USER TICK HANDLER                                                          
//——————————————————————————————————————————————————————————————————————————————

public func `service userTickHandler @weak () {
}

//——————————————————————————————————————————————————————————————————————————————
//   TIME                                                                       
//——————————————————————————————————————————————————————————————————————————————

module time {
  var mUptimeMS $uint32 = 0 

  //············································································
  
  public func `panic `init oneMillisecondBusyWait @noWarningIfUnused () {
    while not SYST_CSR.COUNTFLAG.bool do
    end
  }

  //············································································
  
  public func `service `kernel `user `guard millis @noWarningIfUnused () -> $uint32 {
    result = self.mUptimeMS
  }
  
  //············································································
  
  public func `panic `init busyWaitingDuringMS @noWarningIfUnused (?inDelay $uint32) {
    for delay $uint32 in 0 ..< inDelay do
      self.oneMillisecondBusyWait ()
    end
  }
  
  //············································································
  
  isr systick @xtr {
    let now = self.mUptimeMS +% 1
    self.mUptimeMS = now
    makeTasksReadyFrom (!currentDate:now)
    tickHandlerForGuardedWaitUntil (!currentDate:now)
    userTickHandler ()
  }
  
  //············································································
  
  public primitive waitUntilMS @noWarningIfUnused (?deadline: inDate $uint32) {
    if inDate > self.millis () then
      blockOnDeadline (!deadline:inDate)
    end
  }
  
  //············································································
  
  public primitive waitDuringMS @noWarningIfUnused (?delay: inDelay $uint32) {
    if inDelay > 0 then
      blockOnDeadline (!deadline:self.millis () +% inDelay)
    end
  }
  
  //············································································
  
  public guard waitUntilMS @noWarningIfUnused (?deadline:inDeadline $uint32) {
    accept = inDeadline <= self.millis ()
    if not accept then
      handleGuardedWaitUntil (!deadline:inDeadline)
    end
  }
  
  //············································································

}
 
//——————————————————————————————————————————————————————————————————————————————

