//——————————————————————————————————————————————————————————————————————————————
//   SYNCHRONIZATION TOOLS ROUTINES                                             
//——————————————————————————————————————————————————————————————————————————————

opaqueType $taskList @instantiable : 32

//--- Block running task
extern public func `kernel blockInList (?!list:ioWaitingList $taskList)

extern public func `kernel blockOnDeadline (?deadline:inDeadline $uint32) 

extern public func `kernel blockInListAndOnDeadline (?!list:ioWaitingList $taskList ?deadline:inDeadline $uint32) 

//--- Make task Ready
extern public func `kernel `service makeTaskReady (?!list:ioWaitingList $taskList) -> $bool

extern public func `service makeTasksReadyFromCurrentDate (?currentDate:inCurrentDate $uint32)

//——————————————————————————————————————————————————————————————————————————————
//   GUARD                                                                      
//——————————————————————————————————————————————————————————————————————————————

opaqueType $guardList @instantiable : 32

extern public func `service tickHandlerForGuardedWaitUntil (?currentDate:inCurrentDate $uint32)

extern public func `service handleGuardedCommand (?!guard:ioGuard $guardList)

extern public func `service handleGuardedWaitUntil (?deadline:inDeadlineMS $uint32)

extern public func `kernel `service guardDidChange (?!guard:ioGuard $guardList)

//——————————————————————————————————————————————————————————————————————————————
//   INIT                                                                       
//——————————————————————————————————————————————————————————————————————————————

init 0 { // Configure Systick interrupt every ms
  SYST_RVR = 96000 - 1 // Interrupt every 96000 core clocks, i.e. every ms
  SYST_CVR = 0
  SYST_CSR = SYST_CSR::CLKSOURCE | SYST_CSR::TICKINT | SYST_CSR::ENABLE
//--- Led Teensy
  PORTC_PCR5 = (1 << 8)
  GPIOC_PDDR |= (1 << 5)
}

//——————————————————————————————————————————————————————————————————————————————
//   USER TICK HANDLER                                                                       
//——————————————————————————————————————————————————————————————————————————————

public func `service userTickHandler @weak () {
}

//——————————————————————————————————————————————————————————————————————————————
//   TIME                                                                       
//——————————————————————————————————————————————————————————————————————————————

var gUptimeMS $uint32 = 0 {
  @rw isr systick
  func busyWaitingDuringMS
  func millis
}

//——————————————————————————————————————————————————————————————————————————————

func `service `kernel `user millis @noWarningIfUnused () -> $uint32 {
  result = gUptimeMS
}

//——————————————————————————————————————————————————————————————————————————————

func `init busyWaitingDuringMS @noWarningIfUnused (?inDelay $uint32) {
  let deadline = gUptimeMS + inDelay
  while gUptimeMS < deadline do
  end
}

//——————————————————————————————————————————————————————————————————————————————

isr systick @xtr {
  let now = gUptimeMS +% 1
  gUptimeMS = now
  makeTasksReadyFromCurrentDate (!currentDate:now)
  tickHandlerForGuardedWaitUntil (!currentDate:now)
  userTickHandler ()
}

//——————————————————————————————————————————————————————————————————————————————

primitive waitUntilMS @noWarningIfUnused (?deadline: inDate $uint32) {
  if inDate > millis () then
    blockOnDeadline (!deadline:inDate)
  end
}

//——————————————————————————————————————————————————————————————————————————————

func `user waitDuringMS @noWarningIfUnused (?delay: inDelay $uint32) {
  waitUntilMS (!deadline:millis () + inDelay)
}

//——————————————————————————————————————————————————————————————————————————————

guard waitUntilMS @noWarningIfUnused (?deadline:inDeadline $uint32) {
  accept = inDeadline <= millis ()
  if not accept then
    handleGuardedWaitUntil (!deadline:inDeadline)
  end
}

//——————————————————————————————————————————————————————————————————————————————

func `panic waitOneMillisecondInPanicMode @noWarningIfUnused () {
  while not SYST_CSR.COUNTFLAG.bool do
  end
}
  
//——————————————————————————————————————————————————————————————————————————————
