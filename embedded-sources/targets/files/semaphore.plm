//——————————————————————————————————————————————————————————————————————————————

struct $semaphore {
  var value $uint32
  var list = $taskList ()
  var guardList = $guardList ()

  //············································································
  
  public service V @noWarningIfUnused () {
    let found = makeTaskReady (!?list:self.list)
    if not found {
      self.value += 1
      guardDidChange (!?guard:self.guardList)
    }
  }

  //············································································

  public primitive P @noWarningIfUnused () {
    if self.value > 0 {
      self.value -= 1
    }else{
      blockInList (!?list:self.list)
    }
  }

  //············································································

  public primitive P_until @noWarningIfUnused (?deadline:inDeadline $uint32) -> $bool {
    result = self.value > 0
    if result {
      self.value -= 1
    }else if inDeadline > time.millis () { 
      blockInListAndOnDeadline (!?list:self.list !deadline:inDeadline)
    }
  }

  //············································································

  public guard P @noWarningIfUnused () {
    accept = self.value > 0
    if accept {
      self.value -= 1
    }else{
      handleGuardedCommand (!?guard:self.guardList)
    }
  }

  //············································································
}

//——————————————————————————————————————————————————————————————————————————————

