//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sync Semaphore {
  var value : UInt32
  var list = TaskList ()
  var guardList = GuardList ()

  //····················································································································

  public service signal @noUnusedWarning @mutating () {
    makeTaskReady (!?fromList:self.list ?found:let found)
    if not found {
      self.value += 1
      notifyChange (!?forGuard:self.guardList)
    }
  }

  //····················································································································

  public primitive wait @noUnusedWarning @mutating () {
    if self.value > 0 {
      self.value -= 1
    }else{
      block (!?inList:self.list)
    }
  }

  //····················································································································

  public func wait @noUnusedWarning @mutating (?until: inDeadline : UInt32) -> Bool {
     sync{
     event self.wait () exit : result = yes
     event time.wait (!until: inDeadline) exit : result = no
     }
   }

  //····················································································································

  public guard wait @noUnusedWarning () {
    accept = self.value > 0
    if accept {
      self.value -= 1
    }else{
      handle (!?guard:self.guardList)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

