//--- Python tool list
PYTHON_UTILITIES:
  "../py-toolpath.txt" -> "sources/toolpath.py",
  "../py-makefile.txt" -> "sources/makefile.py",
  "../py-check-stacks.txt" -> "sources/check-stacks.py",
  "../py-plm.txt" -> "sources/plm.py",
  "../py-build-verbose.txt" -> "build-verbose.py",
  "../py-clean.txt" -> "clean.py",
  "../py-objdump.txt" -> "objdump.py",
  "../py-objsize.txt" -> "objsize.py",
  "py-run.txt" -> "run.py"
//--- Python build script
PYTHON_BUILD:
  "py-build.txt"
//--- Linker script
LINKER_SCRIPT:
  "ld-linker.txt"
// Panic code type, panic line type, panic generation file
PANIC:
  $uint32 ; $uint32 ; "target-panic.ll"
// Pointer bit count
POINTER_BIT_COUNT:
  32
// NOP instruction in LLVM
NOP:
  "call void asm sideeffect \"nop\", \"\"() nounwind"
// System stack size
SYSTEM_STACK_SIZE:
  1024
// Service implementation
SERVICE:
  "service-handler.s" ;
  16 ; // as_swi_handler saves 4 32-bits registers on system stack
  "service-dispatcher-header.s" ;
  "service-dispatcher-entry.s" ;
  "service-entry.s"
// Section implementation
SECTION:
  "udfcoded-section-dispatcher-code.s" ;
  8 ; // saves 2 registers on system stack
  "udfcoded-section-dispatcher-header.s" ;
  "udfcoded-section-dispatcher-entry.s" ;
  "udfcoded-section-invocation.s"
//--- C Source files
C_FILES:
  "c-arm7tdmi-vectors.c",
  "c-arm7tdmi-context.c",
  "../c-real-time-kernel.c",
  "c-countTrainingZeros.c"
//--- Assembler Source files
S_FILES:
  "s-target.s"
//--- LLVM Source files
LL_FILES:
   "ll-arm7tdmi.ll",
   "../ll-clear-bss.ll",
   "../ll-copy-data-section.ll",
   "../ll-configuration-on-boot.ll",
   "../ll-create-task.ll",
   "ll-install-interrupts.ll"
//--- Included PLM sources
PLM_FILES:
  "plm-registers-lpc2294.plm",
  "plm-lpc2294-xtr.plm",
  "../plm-semaphore.plm"
//--- Interrupt handler
INTERRUPT_HANDLER:
  "xtr-interrupt-handler.s" ;
  0 ; // ARM7TDMI save no reg in user stack on interrupt
  "undefined-interrupt.s"
//--- Interrupt vectors
INTERRUPTS:
  WDT,
  ARMCore0,
  ARMCore1,
  TIMER0,
  TIMER1,
  UART0,
  UART1,
  PWM0,
  I2C,
  SPI0,
  SPI1_SSP,
  PLL,
  RTC,
  EINT0,
  EINT1,
  EINT2,
  EINT3,
  ADC,
  CAN_COMMON,
  CAN0_TX,
  CAN1_TX,
  CAN2_TX,
  CAN3_TX,
  FULLCAN,
  CAN0_RX,
  CAN1_RX,
  CAN2_RX,
  CAN3_RX,
  PAbort -> 40,
  DAbort -> 41,
  FIQ -> 42
