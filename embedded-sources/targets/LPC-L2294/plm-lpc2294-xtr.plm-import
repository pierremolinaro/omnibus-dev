//——————————————————————————————————————————————————————————————————————————————
//   SYNCHRONIZATION TOOLS ROUTINES
//——————————————————————————————————————————————————————————————————————————————

opaque $TaskList @instantiable {32}

//--- Block running task
extern func block primitive (?!inList:ioWaitingList $TaskList) : "blockInList"

extern func block primitive (?onDeadline:inDeadline $uint32) : "blockOnDeadline"

//--- Make task Ready
extern func
makeTaskReady service (?!fromList:ioWaitingList $TaskList
               !found: outFound $bool) : "makeTaskReady"

extern func makeTasksReady service (?fromCurrentDate:inCurrentDate $uint32) : "makeTasksReadyFromCurrentDate"

//——————————————————————————————————————————————————————————————————————————————
//   GUARD
//——————————————————————————————————————————————————————————————————————————————

opaque $GuardList @instantiable {32}

extern func handle guard (?!guard:ioGuard $GuardList) : "handleGuardedCommand"

extern func handle guard (?guardedDeadline:inDeadline $uint32) : "guard.handle.wait.until"

extern func notifyChange service (?!forGuard:ioGuard $GuardList) : "notify.change.from.guard.list"

extern func notifyChangeForGuardedWaitUntil service (?withCurrentDate:inCurrentDate $uint32) : "notify.change.for.guarded.wait.until"

//——————————————————————————————————————————————————————————————————————————————

let TIMER_PRESCALER = 6
let TICKS_PER_MILLISECONDS = 10000

//——————————————————————————————————————————————————————————————————————————————

driver time ()

//——————————————————————————————————————————————————————————————————————————————

driver time {

  //············································································

  startup {
  //--- Program pin P1.23 as an output (STAT led)
    ©(IO1.DIR) |= 1 << 23
    ©(IO1.CLR)  = 1 << 23 // Led On
  //-------------------------------- Timer 1
  //--- 1. Set Prescaler
    ©(TIMER1.PR) = TIMER_PRESCALER - 1
  //--- 2. Set Match Register 0
  //    We want an interrupt every millisecond
    ©(TIMER1.MR0) = TICKS_PER_MILLISECONDS - 1
  //--- 2. Set Count control Register
  //    Bits 1-0: 00 (timer mode)
  //    Bits 3-2: XX (any value, because timer mode)
    ©(TIMER1.CCR) = 0
  //--- 3. Match Control Register
  //    Bit 0: 1 (interrupt on MR0 match)
  //    Bit 1: 1 (reset on MR0 match)
  //    Bit 2: 0 (do not stop on MR0 match)
  //    Bit 5-3: 000 (MR1 not used)
  //    Bit 8-6: 000 (MR2 not used)
  //    Bit 11-9: 000 (MR3 not used)
    ©(TIMER1.MCR) = 3
  //--- 4. Use vector 9 for TIMER1 interrupt
  //  sys_installInterruptServiceRoutine (MODE_ TIMER1InterruptServiceRoutine, 5) ;
  //  VICVectAddr9 = (uint32_t) TIMER1InterruptServiceRoutine ;
  //  VICVectCntl9 = 0x20 | 5 ; // Timer interrupt number is #5
  //--- 5. Use IRQ for tracking MR0 matches
  //  TIMER1 gets interruption #5 (mask: 0x20)
  //  VICIntEnClr   = 1 << 5 ; // Timer1 interrupt generates IRQ
  //  VICIntEnable |= 1 << 5 ; // Enable Timer1 interrupt
  //--- 6. Start Counter 0 (Timer Control Register)
  // Bit 0 : 1 (Enables counting)
  // Bit 1 : 0 (No reset)
    ©(TIMER1.TCR) = 1
  }

  //············································································

  var mUptime $uint32 = 0

  //············································································

  public section now safe @noUnusedWarning () -> $uint32 {
    result = self.mUptime
  }

  //············································································

  interrupt service TIMER1 {
    ©(TIMER1.IR) = 1 // Clears MR0 interrupt
    let now = self.mUptime +% 1
    self.mUptime = now
    makeTasksReady (!fromCurrentDate:now)
    notifyChangeForGuardedWaitUntil (!withCurrentDate:now)
  }

  //············································································

  public primitive wait @noUnusedWarning (?until: inDate $uint32) {
    if inDate > self.now () {
      block (!onDeadline:inDate)
    }
  }

  //············································································

  public func wait user @noUnusedWarning @mutating (?during: inDelay $uint32) {
    self.wait (!until:self.now () + inDelay)
  }

  //············································································

  public guard wait @noUnusedWarning (?until:inDeadline $uint32) {
    accept = inDeadline ≤ self.now ()
    if not accept {
      handle (!guardedDeadline:inDeadline)
    }
  }

  //············································································

}

//——————————————————————————————————————————————————————————————————————————————
