//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sync $semaphore {
  var value $uint32
  var list = $taskList ()
  var guardList = $guardList ()

  //····················································································································
  
  public system service signal @noUnusedWarning @mutating () {
    makeTaskReady (!?fromList:self.list ?found:let found)
    if not found {
      self.value += 1
      notifyChange (!?forGuard:self.guardList)
    }
  }

  //····················································································································

  public system primitive wait @noUnusedWarning @mutating () {
    if self.value > 0 {
      self.value -= 1
    }else{
      block (!?inList:self.list)
    }
  }

  //····················································································································

  public func wait @user @noUnusedWarning @mutating (?until: inDeadline $uint32) -> $bool {
     sync{
     on self.wait () exit : result = yes
     on time.wait (!until: inDeadline) exit : result = no
     }
   }

  //····················································································································

  public guard wait @noUnusedWarning () {
    accept = self.value > 0
    if accept {
      self.value -= 1
    }else{
      handle (!?guard:self.guardList)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

