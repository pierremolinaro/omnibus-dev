// Teensyduino Core Library
// http://www.pjrc.com/teensy/
// Copyright (c) 2013 PJRC.COM, LLC.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// 1. The above copyright notice and this permission notice shall be 
// included in all copies or substantial portions of the Software.
//
// 2. If the Software is incorporated into a build system thallows 
// selection among a list of target devices, then similar target
// devices manufactured by PJRC.COM must be included in the list of
// target devices and selectable in the same manner.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

let f_cpu : UInt32 = 96_000_000

let f_bus : UInt32 = 48_000_000
let f_mem  : UInt32= 24_000_000

// chapter 11: Port control and interrupts (PORT)
 // Pin Control Register n
register
  PORTA_PCR0   at 0x40049000
  PORTA_PCR1   at 0x40049004
  PORTA_PCR2   at 0x40049008
  PORTA_PCR3   at 0x4004900C
  PORTA_PCR4   at 0x40049010
  PORTA_PCR5   at 0x40049014
  PORTA_PCR6   at 0x40049018
  PORTA_PCR7   at 0x4004901C
  PORTA_PCR8   at 0x40049020
  PORTA_PCR9   at 0x40049024
  PORTA_PCR10  at 0x40049028
  PORTA_PCR11  at 0x4004902C
  PORTA_PCR12  at 0x40049030
  PORTA_PCR13  at 0x40049034
  PORTA_PCR14  at 0x40049038
  PORTA_PCR15  at 0x4004903C
  PORTA_PCR16  at 0x40049040
  PORTA_PCR17  at 0x40049044
  PORTA_PCR18  at 0x40049048
  PORTA_PCR19  at 0x4004904C
  PORTA_PCR20  at 0x40049050
  PORTA_PCR21  at 0x40049054
  PORTA_PCR22  at 0x40049058
  PORTA_PCR23  at 0x4004905C
  PORTA_PCR24  at 0x40049060
  PORTA_PCR25  at 0x40049064
  PORTA_PCR26  at 0x40049068
  PORTA_PCR27  at 0x4004906C
  PORTA_PCR28  at 0x40049070
  PORTA_PCR29  at 0x40049074
  PORTA_PCR30  at 0x40049078
  PORTA_PCR31  at 0x4004907C
  PORTB_PCR0   at 0x4004A000
  PORTB_PCR1   at 0x4004A004
  PORTB_PCR2   at 0x4004A008
  PORTB_PCR3   at 0x4004A00C
  PORTB_PCR4   at 0x4004A010
  PORTB_PCR5   at 0x4004A014
  PORTB_PCR6   at 0x4004A018
  PORTB_PCR7   at 0x4004A01C
  PORTB_PCR8   at 0x4004A020
  PORTB_PCR9   at 0x4004A024
  PORTB_PCR10  at 0x4004A028
  PORTB_PCR11  at 0x4004A02C
  PORTB_PCR12  at 0x4004A030
  PORTB_PCR13  at 0x4004A034
  PORTB_PCR14  at 0x4004A038
  PORTB_PCR15  at 0x4004A03C
  PORTB_PCR16  at 0x4004A040
  PORTB_PCR17  at 0x4004A044
  PORTB_PCR18  at 0x4004A048
  PORTB_PCR19  at 0x4004A04C
  PORTB_PCR20  at 0x4004A050
  PORTB_PCR21  at 0x4004A054
  PORTB_PCR22  at 0x4004A058
  PORTB_PCR23  at 0x4004A05C
  PORTB_PCR24  at 0x4004A060
  PORTB_PCR25  at 0x4004A064
  PORTB_PCR26  at 0x4004A068
  PORTB_PCR27  at 0x4004A06C
  PORTB_PCR28  at 0x4004A070
  PORTB_PCR29  at 0x4004A074
  PORTB_PCR30  at 0x4004A078
  PORTB_PCR31  at 0x4004A07C
  PORTC_PCR0   at 0x4004B000
  PORTC_PCR1   at 0x4004B004
  PORTC_PCR2   at 0x4004B008
  PORTC_PCR3   at 0x4004B00C
  PORTC_PCR4   at 0x4004B010
  PORTC_PCR5   at 0x4004B014
  PORTC_PCR6   at 0x4004B018
  PORTC_PCR7   at 0x4004B01C
  PORTC_PCR8   at 0x4004B020
  PORTC_PCR9   at 0x4004B024
  PORTC_PCR10  at 0x4004B028
  PORTC_PCR11  at 0x4004B02C
  PORTC_PCR12  at 0x4004B030
  PORTC_PCR13  at 0x4004B034
  PORTC_PCR14  at 0x4004B038
  PORTC_PCR15  at 0x4004B03C
  PORTC_PCR16  at 0x4004B040
  PORTC_PCR17  at 0x4004B044
  PORTC_PCR18  at 0x4004B048
  PORTC_PCR19  at 0x4004B04C
  PORTC_PCR20  at 0x4004B050
  PORTC_PCR21  at 0x4004B054
  PORTC_PCR22  at 0x4004B058
  PORTC_PCR23  at 0x4004B05C
  PORTC_PCR24  at 0x4004B060
  PORTC_PCR25  at 0x4004B064
  PORTC_PCR26  at 0x4004B068
  PORTC_PCR27  at 0x4004B06C
  PORTC_PCR28  at 0x4004B070
  PORTC_PCR29  at 0x4004B074
  PORTC_PCR30  at 0x4004B078
  PORTC_PCR31  at 0x4004B07C
  PORTD_PCR0   at 0x4004C000
  PORTD_PCR1   at 0x4004C004
  PORTD_PCR2   at 0x4004C008
  PORTD_PCR3   at 0x4004C00C
  PORTD_PCR4   at 0x4004C010
  PORTD_PCR5   at 0x4004C014
  PORTD_PCR6   at 0x4004C018
  PORTD_PCR7   at 0x4004C01C
  PORTD_PCR8   at 0x4004C020
  PORTD_PCR9   at 0x4004C024
  PORTD_PCR10  at 0x4004C028
  PORTD_PCR11  at 0x4004C02C
  PORTD_PCR12  at 0x4004C030
  PORTD_PCR13  at 0x4004C034
  PORTD_PCR14  at 0x4004C038
  PORTD_PCR15  at 0x4004C03C
  PORTD_PCR16  at 0x4004C040
  PORTD_PCR17  at 0x4004C044
  PORTD_PCR18  at 0x4004C048
  PORTD_PCR19  at 0x4004C04C
  PORTD_PCR20  at 0x4004C050
  PORTD_PCR21  at 0x4004C054
  PORTD_PCR22  at 0x4004C058
  PORTD_PCR23  at 0x4004C05C
  PORTD_PCR24  at 0x4004C060
  PORTD_PCR25  at 0x4004C064
  PORTD_PCR26  at 0x4004C068
  PORTD_PCR27  at 0x4004C06C
  PORTD_PCR28  at 0x4004C070
  PORTD_PCR29  at 0x4004C074
  PORTD_PCR30  at 0x4004C078
  PORTD_PCR31  at 0x4004C07C
  PORTE_PCR0   at 0x4004D000
  PORTE_PCR1   at 0x4004D004
  PORTE_PCR2   at 0x4004D008
  PORTE_PCR3   at 0x4004D00C
  PORTE_PCR4   at 0x4004D010
  PORTE_PCR5   at 0x4004D014
  PORTE_PCR6   at 0x4004D018
  PORTE_PCR7   at 0x4004D01C
  PORTE_PCR8   at 0x4004D020
  PORTE_PCR9   at 0x4004D024
  PORTE_PCR10  at 0x4004D028
  PORTE_PCR11  at 0x4004D02C
  PORTE_PCR12  at 0x4004D030
  PORTE_PCR13  at 0x4004D034
  PORTE_PCR14  at 0x4004D038
  PORTE_PCR15  at 0x4004D03C
  PORTE_PCR16  at 0x4004D040
  PORTE_PCR17  at 0x4004D044
  PORTE_PCR18  at 0x4004D048
  PORTE_PCR19  at 0x4004D04C
  PORTE_PCR20  at 0x4004D050
  PORTE_PCR21  at 0x4004D054
  PORTE_PCR22  at 0x4004D058
  PORTE_PCR23  at 0x4004D05C
  PORTE_PCR24  at 0x4004D060
  PORTE_PCR25  at 0x4004D064
  PORTE_PCR26  at 0x4004D068
  PORTE_PCR27  at 0x4004D06C
  PORTE_PCR28  at 0x4004D070
  PORTE_PCR29  at 0x4004D074
  PORTE_PCR30  at 0x4004D078
  PORTE_PCR31  at 0x4004D07C
:
 UInt32 {7, isf, 4, irqc[4], lk, 4, mux[3], 1, dse, ode, pfe, 1, sre, pe, ps}

let PORT_PCR_ISF  : UInt32  = 0x01000000  // Interrupt Status Flag
//register UInt32 PORT_PCR_IRQC(n)   (((n) & 15) << 16) // Interrupt Configuration
let PORT_PCR_IRQC_MASK  : UInt32 = 0x000F0000
let PORT_PCR_LK   : UInt32 = 0x00008000  // Lock Register
//register UInt32 PORT_PCR_MUX(n)    (((n) & 7) << 8) // Pin Mux Control
let PORT_PCR_MUX_MASK : UInt32 = 0x00000700
let PORT_PCR_DSE      : UInt32 = 0x00000040  // Drive Strength Enable
let PORT_PCR_ODE      : UInt32 = 0x00000020  // Open Drain Enable
let PORT_PCR_PFE      : UInt32 = 0x00000010  // Passive Filter Enable
let PORT_PCR_SRE      : UInt32 = 0x00000004  // Slew Rate Enable
let PORT_PCR_PE       : UInt32 = 0x00000002  // Pull Enable
let PORT_PCR_PS       : UInt32 = 0x00000001  // Pull Select

register PORTA_GPCLR  at 0x40049080 : UInt32 // Global Pin Control Low Register
register PORTA_GPCHR  at 0x40049084 : UInt32 // Global Pin Control High Register
register PORTA_ISFR   at 0x400490A0 : UInt32 // Interrupt Status Flag Register

register PORTB_GPCLR  at 0x4004A080 : UInt32 // Global Pin Control Low Register
register PORTB_GPCHR  at 0x4004A084 : UInt32 // Global Pin Control High Register
register PORTB_ISFR   at 0x4004A0A0 : UInt32 // Interrupt Status Flag Register

register PORTC_GPCLR  at 0x4004B080 : UInt32 // Global Pin Control Low Register
register PORTC_GPCHR  at 0x4004B084 : UInt32 // Global Pin Control High Register
register PORTC_ISFR   at 0x4004B0A0 : UInt32 // Interrupt Status Flag Register

register PORTD_GPCLR  at 0x4004C080 : UInt32 // Global Pin Control Low Register
register PORTD_GPCHR  at 0x4004C084 : UInt32 // Global Pin Control High Register
register PORTD_ISFR   at 0x4004C0A0 : UInt32 // Interrupt Status Flag Register

register PORTE_GPCLR  at 0x4004D080 : UInt32 // Global Pin Control Low Register
register PORTE_GPCHR  at 0x4004D084 : UInt32 // Global Pin Control High Register
register PORTE_ISFR   at 0x4004D0A0 : UInt32 // Interrupt Status Flag Register

// Chapter 12: System Integration Module (SIM)
register SIM_SOPT1    at 0x40047000 : UInt32 // System Options Register 1
register SIM_SOPT1CFG at 0x40047004 : UInt32 // SOPT1 Configuration Register
register SIM_SOPT2    at 0x40048004 : UInt32 // System Options Register 2
register SIM_SOPT2_USBSRC at 0x00040000  : UInt32 // 0=USB_CLKIN, 1=FFL/PLL 
register SIM_SOPT2_PLLFLLSEL at 0x00010000  : UInt32 // 0=FLL, 1=PLL
register SIM_SOPT2_TRACECLKSEL at 0x00001000  : UInt32 // 0=MCGOUTCLK, 1=CPU
register SIM_SOPT2_PTD7PAD at 0x00000800  : UInt32 // 0=normal, 1=double drive PTD7
//register UInt32 SIM_SOPT2_CLKOUTSEL(n)   (((n) & 7) << 5) // Selects the clock to output on the CLKOUT pin.
let SIM_SOPT2_RTCCLKOUTSEL : UInt32 = 0x00000010  // RTC clock out select
register SIM_SOPT4   at 0x4004800C : UInt32 // System Options Register 4
register SIM_SOPT5   at 0x40048010 : UInt32 // System Options Register 5
register SIM_SOPT7   at 0x40048018 : UInt32 // System Options Register 7
register SIM_SDID @ro at 0x40048024 : UInt32 // System Device Identification Register
register SIM_SCGC2  at 0x4004802C : UInt32 // System Clock Gating Control Register 2
let SIM_SCGC2_DAC0  : UInt32 =  0x00001000 // DAC0 Clock Gate Control
register SIM_SCGC3  at 0x40048030 : UInt32 // System Clock Gating Control Register 3
let SIM_SCGC3_ADC1 : UInt32 =  0x08000000 // ADC1 Clock Gate Control
let SIM_SCGC3_FTM2 : UInt32 =  0x01000000 // FTM2 Clock Gate Control
register SIM_SCGC4 at 0x40048034 : UInt32 // System Clock Gating Control Register 4
let SIM_SCGC4_VREF  : UInt32 =  0x00100000  // VREF Clock Gate Control
let SIM_SCGC4_CMP   : UInt32 = 0x00080000  // Comparator Clock Gate Control
let SIM_SCGC4_USBOTG  : UInt32 = 0x00040000  // USB Clock Gate Control
let SIM_SCGC4_UART2  : UInt32 =  0x00001000  // UART2 Clock Gate Control
let SIM_SCGC4_UART1  : UInt32 =  0x00000800  // UART1 Clock Gate Control
let SIM_SCGC4_UART0  : UInt32 =  0x00000400  // UART0 Clock Gate Control
let SIM_SCGC4_I2C1  : UInt32 =  0x00000080  // I2C1 Clock Gate Control
let SIM_SCGC4_I2C0  : UInt32 =  0x00000040  // I2C0 Clock Gate Control
let SIM_SCGC4_CMT  : UInt32 =  0x00000004  // CMT Clock Gate Control
let SIM_SCGC4_EWM  : UInt32 =  0x00000002  // EWM Clock Gate Control
register SIM_SCGC5 at 0x40048038 : UInt32 // System Clock Gating Control Register 5
let SIM_SCGC5_PORTE  : UInt32 =  0x00002000  // Port E Clock Gate Control
let SIM_SCGC5_PORTD  : UInt32 =  0x00001000  // Port D Clock Gate Control
let SIM_SCGC5_PORTC  : UInt32 =  0x00000800  // Port C Clock Gate Control
let SIM_SCGC5_PORTB  : UInt32 =  0x00000400  // Port B Clock Gate Control
let SIM_SCGC5_PORTA  : UInt32 =  0x00000200  // Port A Clock Gate Control
let SIM_SCGC5_TSI  : UInt32 =  0x00000020  // Touch Sense Input TSI Clock Gate Control
let SIM_SCGC5_LPTIMER  : UInt32 =  0x00000001  // Low Power Timer Access Control
register SIM_SCGC6 at 0x4004803C : UInt32 // System Clock Gating Control Register 6
let SIM_SCGC6_RTC   : UInt32 = 0x20000000  // RTC Access
let SIM_SCGC6_ADC0  : UInt32 =   0x08000000  // ADC0 Clock Gate Control
let SIM_SCGC6_FTM1  : UInt32 =   0x02000000  // FTM1 Clock Gate Control
let SIM_SCGC6_FTM0  : UInt32=   0x01000000  // FTM0 Clock Gate Control
let SIM_SCGC6_PIT  : UInt32 =  0x00800000  // PIT Clock Gate Control
let SIM_SCGC6_PDB  : UInt32 =  0x00400000  // PDB Clock Gate Control
let SIM_SCGC6_USBDCD  : UInt32=  0x00200000  // USB DCD Clock Gate Control
let SIM_SCGC6_CRC  : UInt32 =  0x00040000  // CRC Clock Gate Control
let SIM_SCGC6_I2S  : UInt32 =  0x00008000  // I2S Clock Gate Control
let SIM_SCGC6_SPI1  : UInt32=   0x00002000  // SPI1 Clock Gate Control
let SIM_SCGC6_SPI0  : UInt32=   0x00001000  // SPI0 Clock Gate Control
let SIM_SCGC6_FLEXCAN0  : UInt32 =  0x00000010  // FlexCAN0 Clock Gate Control
let SIM_SCGC6_DMAMUX : UInt32 =  0x00000002  // DMA Mux Clock Gate Control
let SIM_SCGC6_FTFL  : UInt32 =  0x00000001  // Flash Memory Clock Gate Control

register SIM_SCGC7 at 0x40048040 : UInt32 // System Clock Gating Control Register 7
let SIM_SCGC7_DMA  : UInt32 =  0x00000002  // DMA Clock Gate Control

register SIM_CLKDIV1 at 0x40048044 : UInt32 // System Clock Divider Register 1
//register UInt32 SIM_CLKDIV1_OUTDIV1(n)   (((n) & 0x0F) << 28) // divide value for the core/system clock
let SIM_CLKDIV1_OUTDIV1_0 : UInt32 = 0 << 28
//register UInt32 SIM_CLKDIV1_OUTDIV2(n)   (((n) & 0x0F) << 24) // divide value for the peripheral clock
let SIM_CLKDIV1_OUTDIV2_1 : UInt32 = 1 << 24
//register UInt32 SIM_CLKDIV1_OUTDIV4(n)   (((n) & 0x0F) << 16) // divide value for the flash clock
let SIM_CLKDIV1_OUTDIV4_3 : UInt32 = 3 << 16

register SIM_CLKDIV2 at 0x40048048 : UInt32 // System Clock Divider Register 2
//register UInt32 SIM_CLKDIV2_USBDIV(n)   (((n) & 0x07) << 1)
let SIM_CLKDIV2_USBFRAC  : UInt32 =  0x01
register SIM_FCFG1 @ro at 0x4004804C : UInt32 // Flash Configuration Register 1
register SIM_FCFG2 @ro at 0x40048050 : UInt32 // Flash Configuration Register 2
register SIM_UIDH  @ro at 0x40048054 : UInt32 // Unique Identification Register High
register SIM_UIDMH @ro at 0x40048058 : UInt32 // Unique Identification Register Mid-High
register SIM_UIDML @ro at 0x4004805C : UInt32 // Unique Identification Register Mid Low
register SIM_UIDL  @ro at 0x40048060 : UInt32 // Unique Identification Register Low

// Chapter 13: Reset Control Module (RCM)
register RCM_SRS0 at 0x4007F000 : UInt8 // System Reset Status Register 0
register RCM_SRS1 at 0x4007F001 : UInt8 // System Reset Status Register 1
register RCM_RPFC at 0x4007F004 : UInt8 // Reset Pin Filter Control Register
register RCM_RPFW at 0x4007F005 : UInt8 // Reset Pin Filter Width Register
register RCM_MR   at 0x4007F007 : UInt8 // Mode Register

// Chapter 14: System Mode Controller
register SMC_PMPROT  at 0x4007E000 : UInt8 // Power Mode Protection Register
let SMC_PMPROT_AVLP  : UInt8 = 0x20   // Allow very low power modes
let SMC_PMPROT_ALLS : UInt8  = 0x08   // Allow low leakage stop mode
let SMC_PMPROT_AVLLS : UInt8 = 0x02   // Allow very low leakage stop mode

register SMC_PMCTRL  at 0x4007E001 : UInt8 // Power Mode Control Register
let SMC_PMCTRL_LPWUI : UInt8  = 0x80   // Low Power Wake Up on Interrupt
//register UInt8 SMC_PMCTRL_RUNM(n)  (uint8_t)(((n) & 0x03) << 5) // Run Mode Control
let SMC_PMCTRL_STOPA : UInt8  = 0x08   // Stop Aborted
//register UInt8 SMC_PMCTRL_STOPM(n)  (uint8_t)((n) & 0x07)  // Stop Mode Control

register SMC_VLLSCTRL at 0x4007E002 : UInt8 // VLLS Control Register
let SMC_VLLSCTRL_PORPO : UInt8 = 0x20   // POR Power Option
//let UInt8 SMC_VLLSCTRL_VLLSM(n)  (uint8_t)((n) & 0x07)  // VLLS Mode Control

register SMC_PMST at 0x4007E003 : UInt8 // Power Mode Status Register
let SMC_PMSTAT_RUN  : UInt8 = 0x01   // Current power mode is RUN
let SMC_PMSTAT_STOP : UInt8 = 0x02   // Current power mode is STOP
let SMC_PMSTAT_VLPR : UInt8 = 0x04   // Current power mode is VLPR
let SMC_PMSTAT_VLPW : UInt8 = 0x08   // Current power mode is VLPW
let SMC_PMSTAT_VLPS : UInt8 = 0x10   // Current power mode is VLPS
let SMC_PMSTAT_LLS  : UInt8 = 0x20   // Current power mode is LLS
let SMC_PMSTAT_VLLS : UInt8 = 0x40   // Current power mode is VLLS

// Chapter 15: Power Management Controller
register PMC_LVDSC1 at 0x4007D000 : UInt8 // Low Voltage Detect Status And Control 1 register
let PMC_LVDSC1_LVDF : UInt8 = 0x80   // Low-Voltage Detect Flag
let PMC_LVDSC1_LVDACK : UInt8 = 0x40   // Low-Voltage Detect Acknowledge
let PMC_LVDSC1_LVDIE : UInt8 = 0x20   // Low-Voltage Detect Interrupt Enable
let PMC_LVDSC1_LVDRE : UInt8 = 0x10   // Low-Voltage Detect Reset Enable
//let UInt8 PMC_LVDSC1_LVDV(n)  (uint8_t)((n) & 0x03)  // Low-Voltage Detect Voltage Select
register PMC_LVDSC2 at 0x4007D001 : UInt8 // Low Voltage Detect Status And Control 2 register
let PMC_LVDSC2_LVWF : UInt8  = 0x80   // Low-Voltage Warning Flag
let PMC_LVDSC2_LVWACK : UInt8 = 0x40   // Low-Voltage Warning Acknowledge
let PMC_LVDSC2_LVWIE : UInt8 = 0x20   // Low-Voltage Warning Interrupt Enable
//let UInt8 PMC_LVDSC2_LVWV(n)  (uint8_t)((n) & 0x03)  // Low-Voltage Warning Voltage Select
register PMC_REGSC at 0x4007D002 : UInt8 // Regulator Status And Control register
let PMC_REGSC_BGEN  : UInt8 = 0x10   // Bandgap Enable In VLPx Operation
let PMC_REGSC_ACKISO : UInt8 = 0x08   // Acknowledge Isolation
let PMC_REGSC_REGONS : UInt8 = 0x04   // Regulator In Run Regulation Status
let PMC_REGSC_BGBE  : UInt8 = 0x01   // Bandgap Buffer Enable

// Chapter 16: Low-Leakage Wakeup Unit (LLWU)
register LLWU_PE1  at 0x4007C000 : UInt8 // LLWU Pin Enable 1 register
register LLWU_PE2  at 0x4007C001 : UInt8 // LLWU Pin Enable 2 register
register LLWU_PE3  at 0x4007C002 : UInt8 // LLWU Pin Enable 3 register
register LLWU_PE4  at 0x4007C003 : UInt8 // LLWU Pin Enable 4 register
register LLWU_ME   at 0x4007C004 : UInt8 // LLWU Module Enable register
register LLWU_F1   at 0x4007C005 : UInt8 // LLWU Flag 1 register
register LLWU_F2   at 0x4007C006 : UInt8 // LLWU Flag 2 register
register LLWU_F3   at 0x4007C007 : UInt8 // LLWU Flag 3 register
register LLWU_FILT1 at 0x4007C008 : UInt8 // LLWU Pin Filter 1 register
register LLWU_FILT2 at 0x4007C009 : UInt8 // LLWU Pin Filter 2 register
register LLWU_RST  at 0x4007C00A : UInt8 // LLWU Reset Enable register

// Chapter 17: Miscellaneous Control Module (MCM)
register MCM_PLASC at 0xE0080008 : UInt16 // Crossbar Switch (AXBS) Slave Configuration

register MCM_PLAMC at 0xE008000A : UInt16 // Crossbar Switch (AXBS) Master Configuration

register MCM_PLACR at 0xE008000C : UInt32 // Crossbar Switch (AXBS) Control Register (MK20DX128)
let MCM_PLACR_ARG   : UInt32 = 0x00000200  // Arbitration select, 0=fixed, 1=round-robin

register MCM_CR at 0xE008000C : UInt32 // RAM arbitration control register (MK20DX256)
let MCM_CR_SRAMLWP  : UInt32 =  0x4000_0000  // SRAM_L write protect
//let UInt32 MCM_CR_SRAMLAP(n)   (((n) & 0x03) << 28) // SRAM_L priority, 0=RR, 1=favor DMA, 2=CPU, 3=DMA
let MCM_CR_SRAMUWP  : UInt32 =  0x0400_0000  // SRAM_U write protect
//let UInt32 MCM_CR_SRAMUAP(n)   (((n) & 0x03) << 24) // SRAM_U priority, 0=RR, 1=favor DMA, 2=CPU, 3=DMA

// Crossbar Switch (AXBS) - only programmable on MK20DX256
register AXBS_PRS0   at 0x40004000 : UInt32 // Priority Registers Slave 0
register AXBS_CRS0   at 0x40004010 : UInt32 // Control Register 0
register AXBS_PRS1   at 0x40004100 : UInt32 // Priority Registers Slave 1
register AXBS_CRS1   at 0x40004110 : UInt32 // Control Register 1
register AXBS_PRS2   at 0x40004200 : UInt32 // Priority Registers Slave 2
register AXBS_CRS2   at 0x40004210 : UInt32 // Control Register 2
register AXBS_PRS3   at 0x40004300 : UInt32 // Priority Registers Slave 3
register AXBS_CRS3   at 0x40004310 : UInt32 // Control Register 3
register AXBS_PRS4   at 0x40004400 : UInt32 // Priority Registers Slave 4
register AXBS_CRS4   at 0x40004410 : UInt32 // Control Register 4
register AXBS_PRS5   at 0x40004500 : UInt32 // Priority Registers Slave 5
register AXBS_CRS5   at 0x40004510 : UInt32 // Control Register 5
register AXBS_PRS6   at 0x40004600 : UInt32 // Priority Registers Slave 6
register AXBS_CRS6   at 0x40004610 : UInt32 // Control Register 6
register AXBS_PRS7   at 0x40004700 : UInt32 // Priority Registers Slave 7
register AXBS_CRS7   at 0x40004710 : UInt32 // Control Register 7
register AXBS_MGPCR0 at 0x40004800 : UInt32 // Master 0 General Purpose Control Register
register AXBS_MGPCR1 at 0x40004900 : UInt32 // Master 1 General Purpose Control Register
register AXBS_MGPCR2 at 0x40004A00 : UInt32 // Master 2 General Purpose Control Register
register AXBS_MGPCR3 at 0x40004B00 : UInt32 // Master 3 General Purpose Control Register
register AXBS_MGPCR4 at 0x40004C00 : UInt32 // Master 4 General Purpose Control Register
register AXBS_MGPCR5 at 0x40004D00 : UInt32 // Master 5 General Purpose Control Register
register AXBS_MGPCR6 at 0x40004E00 : UInt32 // Master 6 General Purpose Control Register
register AXBS_MGPCR7 at 0x40004F00 : UInt32 // Master 7 General Purpose Control Register
let AXBS_CRS_READONLY  : UInt32=  0x80000000
let AXBS_CRS_HALTLOWPRIORITY  : UInt32 = 0x40000000
let AXBS_CRS_ARB_FIXED  : UInt32 = 0x00000000
let AXBS_CRS_ARB_ROUNDROBIN  : UInt32 = 0x00010000
let AXBS_CRS_PARK_FIXED  : UInt32 =  0x00000000
let AXBS_CRS_PARK_PREVIOUS  : UInt32 =  0x00000010
let AXBS_CRS_PARK_NONE  : UInt32 =  0x00000020
//let UInt32 AXBS_CRS_PARK(n)   (((n) & 7) << 0)



// Chapter 20: Direct Memory Access Multiplexer (DMAMUX)
register DMAMUX0_CHCFG0  at 0x40021000 : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG1  at 0x40021001 : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG2  at 0x40021002 : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG3  at 0x40021003 : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG4  at 0x40021004 : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG5  at 0x40021005 : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG6  at 0x40021006 : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG7  at 0x40021007 : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG8  at 0x40021008 : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG9  at 0x40021009 : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG10 at 0x4002100A : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG11 at 0x4002100B : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG12 at 0x4002100C : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG13 at 0x4002100D : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG14 at 0x4002100E : UInt8 // Channel Configuration register
register DMAMUX0_CHCFG15 at 0x4002100F : UInt8 // Channel Configuration register
let DMAMUX_DISABLE : UInt8 =  0
let DMAMUX_TRIG  : UInt8 = 64
let DMAMUX_ENABLE : UInt8 =  128
let DMAMUX_SOURCE_UART0_RX : UInt8 = 2
let DMAMUX_SOURCE_UART0_TX : UInt8 = 3
let DMAMUX_SOURCE_UART1_RX : UInt8 = 4
let DMAMUX_SOURCE_UART1_TX : UInt8 = 5
let DMAMUX_SOURCE_UART2_RX : UInt8 = 6
let DMAMUX_SOURCE_UART2_TX : UInt8 = 7
let DMAMUX_SOURCE_I2S0_RX  : UInt8 =14
let DMAMUX_SOURCE_I2S0_TX  : UInt8 =15
let DMAMUX_SOURCE_SPI0_RX  : UInt8 =16
let DMAMUX_SOURCE_SPI0_TX  : UInt8 =17
let DMAMUX_SOURCE_I2C0  : UInt8 =22
let DMAMUX_SOURCE_I2C1  : UInt8 =23
let DMAMUX_SOURCE_FTM0_CH0 : UInt8 = 24
let DMAMUX_SOURCE_FTM0_CH1 : UInt8 = 25
let DMAMUX_SOURCE_FTM0_CH2 : UInt8 = 26
let DMAMUX_SOURCE_FTM0_CH3 : UInt8 = 27
let DMAMUX_SOURCE_FTM0_CH4 : UInt8 = 28
let DMAMUX_SOURCE_FTM0_CH5 : UInt8 = 29
let DMAMUX_SOURCE_FTM0_CH6 : UInt8 = 30
let DMAMUX_SOURCE_FTM0_CH7 : UInt8 = 31
let DMAMUX_SOURCE_FTM1_CH0 : UInt8 = 32
let DMAMUX_SOURCE_FTM1_CH1 : UInt8 = 33
let DMAMUX_SOURCE_FTM2_CH0 : UInt8 = 34
let DMAMUX_SOURCE_FTM2_CH1 : UInt8 = 35
let DMAMUX_SOURCE_ADC0 : UInt8 = 40
let DMAMUX_SOURCE_ADC1 : UInt8 = 41
let DMAMUX_SOURCE_CMP0 : UInt8 = 42
let DMAMUX_SOURCE_CMP1 : UInt8 = 43
let DMAMUX_SOURCE_CMP2 : UInt8 = 44
let DMAMUX_SOURCE_DAC0 : UInt8 = 45
let DMAMUX_SOURCE_CMT  : UInt8 = 47
let DMAMUX_SOURCE_PDB  : UInt8 = 48
let DMAMUX_SOURCE_PORTA : UInt8 = 49
let DMAMUX_SOURCE_PORTB : UInt8 = 50
let DMAMUX_SOURCE_PORTC : UInt8 = 51
let DMAMUX_SOURCE_PORTD : UInt8 = 52
let DMAMUX_SOURCE_PORTE : UInt8 = 53
let DMAMUX_SOURCE_ALWAYS0 : UInt8 = 54
let DMAMUX_SOURCE_ALWAYS1 : UInt8 = 55
let DMAMUX_SOURCE_ALWAYS2 : UInt8 = 56
let DMAMUX_SOURCE_ALWAYS3 : UInt8 = 57
let DMAMUX_SOURCE_ALWAYS4 : UInt8 = 58
let DMAMUX_SOURCE_ALWAYS5 : UInt8 = 59
let DMAMUX_SOURCE_ALWAYS6 : UInt8 = 60
let DMAMUX_SOURCE_ALWAYS7 : UInt8 = 61
let DMAMUX_SOURCE_ALWAYS8 : UInt8 = 62
let DMAMUX_SOURCE_ALWAYS9 : UInt8 = 63

// Chapter 21: Direct Memory Access Controller (eDMA)
register DMA_CR at 0x40008000 : UInt32 // Control Register
let DMA_CR_CX   : UInt32  = 0x2_0000 // Cancel Transfer
let DMA_CR_ECX   : UInt32 = 0x1_0000 // Error Cancel Transfer
let DMA_CR_EMLM   : UInt32= 0x80 // Enable Minor Loop Mapping
let DMA_CR_CLM   : UInt32 = 0x40 // Continuous Link Mode
let DMA_CR_HALT  : UInt32 = 0x20 // Halt DMA Operations
let DMA_CR_HOE   : UInt32 = 0x10 // Halt On Error
let DMA_CR_ERCA  : UInt32 = 0x04 // Enable Round Robin Channel Arbitration
let DMA_CR_EDBG   : UInt32= 0x02 // Enable Debug
register DMA_ES  at 0x40008004 : UInt32 // Error Status Register
register DMA_ERQ at 0x4000800C : UInt32 // Enable Request Register
let DMA_ERQ_ERQ0   : UInt32 = 1 // Enable DMA Request 0
let DMA_ERQ_ERQ1   : UInt32 = 2 // Enable DMA Request 1
let DMA_ERQ_ERQ2   : UInt32 = 4 // Enable DMA Request 2
let DMA_ERQ_ERQ3   : UInt32 = 8 // Enable DMA Request 3
register DMA_EEI at 0x40008014 : UInt8 // Enable Error Interrupt Register
let DMA_EEI_EEI0   : UInt32 = 1 // Enable Error Interrupt 0
let DMA_EEI_EEI1   : UInt32 = 2 // Enable Error Interrupt 1
let DMA_EEI_EEI2   : UInt32 = 4 // Enable Error Interrupt 2
let DMA_EEI_EEI3   : UInt32 = 8 // Enable Error Interrupt 3
//register UInt8 DMA_CEEI  *(volatile uint8_t  *)0x40008018 // Clear Enable Error Interrupt Register
//register UInt32 DMA_CEEI_CEEI(n)  ((uint8_t)(n & 3)<<0) // Clear Enable Error Interrupt
//register UInt32 DMA_CEEI_CAEE   ((uint8_t)1<<6)  // Clear All Enable Error Interrupts
//register UInt32 DMA_CEEI_NOP   ((uint8_t)1<<7)  // NOP
//register UInt32 DMA_SEEI  *(volatile uint8_t  *)0x40008019 // Set Enable Error Interrupt Register
//register UInt32 DMA_SEEI_SEEI(n)  ((uint8_t)(n & 3)<<0) // Set Enable Error Interrupt
//register UInt32 DMA_SEEI_SAEE   ((uint8_t)1<<6)  // Set All Enable Error Interrupts
//register UInt32 DMA_SEEI_NOP   ((uint8_t)1<<7)  // NOP
//register UInt32 DMA_CERQ  *(volatile uint8_t  *)0x4000801A // Clear Enable Request Register
//register UInt32 DMA_CERQ_CERQ(n)  ((uint8_t)(n & 3)<<0) // Clear Enable Request
//register UInt32 DMA_CERQ_CAER   ((uint8_t)1<<6)  // Clear All Enable Requests
//register UInt32 DMA_CERQ_NOP   ((uint8_t)1<<7)  // NOP
//register UInt32 DMA_SERQ  *(volatile uint8_t  *)0x4000801B // Set Enable Request Register
//register UInt32 DMA_SERQ_SERQ(n)  ((uint8_t)(n & 3)<<0) // Set Enable Request
//register UInt32 DMA_SERQ_SAER   ((uint8_t)1<<6)  // Set All Enable Requests
//register UInt32 DMA_SERQ_NOP   ((uint8_t)1<<7)  // NOP
//register UInt32 DMA_CDNE  *(volatile uint8_t  *)0x4000801C // Clear DONE Status Bit Register
//register UInt32 DMA_CDNE_CDNE(n)  ((uint8_t)(n & 3)<<0) // Clear Done Bit
//register UInt32 DMA_CDNE_CADN   ((uint8_t)1<<6)  // Clear All Done Bits
//register UInt32 DMA_CDNE_NOP   ((uint8_t)1<<7)  // NOP
//register UInt32 DMA_SSRT  *(volatile uint8_t  *)0x4000801D // Set START Bit Register
//register UInt32 DMA_SSRT_SSRT(n)  ((uint8_t)(n & 3)<<0) // Set Start Bit
//register UInt32 DMA_SSRT_SAST   ((uint8_t)1<<6)  // Set All Start Bits
//register UInt32 DMA_SSRT_NOP   ((uint8_t)1<<7)  // NOP
//register UInt32 DMA_CERR  *(volatile uint8_t  *)0x4000801E // Clear Error Register
//register UInt32 DMA_CERR_CERR(n)  ((uint8_t)(n & 3)<<0) // Clear Error Indicator
//register UInt32 DMA_CERR_CAEI   ((uint8_t)1<<6)  // Clear All Error Indicators
//register UInt32 DMA_CERR_NOP   ((uint8_t)1<<7)  // NOP
//register UInt32 DMA_CINT  *(volatile uint8_t  *)0x4000801F // Clear Interrupt Request Register
//register UInt32 DMA_CINT_CINT(n)  ((uint8_t)(n & 3)<<0) // Clear Interrupt Request
//register UInt32 DMA_CINT_CAIR   ((uint8_t)1<<6)  // Clear All Interrupt Requests
//register UInt32 DMA_CINT_NOP   ((uint8_t)1<<7)  // NOP
//register UInt32 DMA_INT    0x40008024 // Interrupt Request Register
//register UInt32 DMA_INT_INT0   ( 1<<0) // Interrupt Request 0
//register UInt32 DMA_INT_INT1   ( 1<<1) // Interrupt Request 1
//register UInt32 DMA_INT_INT2   ( 1<<2) // Interrupt Request 2
//register UInt32 DMA_INT_INT3   ( 1<<3) // Interrupt Request 3
//register UInt32 DMA_ERR    0x4000802C // Error Register
//register UInt32 DMA_ERR_ERR0   ( 1<<0) // Error in Channel 0
//register UInt32 DMA_ERR_ERR1   ( 1<<1) // Error in Channel 1
//register UInt32 DMA_ERR_ERR2   ( 1<<2) // Error in Channel 2
//register UInt32 DMA_ERR_ERR3   ( 1<<3) // Error in Channel 3
//register UInt32 DMA_HRS    0x40008034 // Hardware Request Status Register
//register UInt32 DMA_HRS_HRS0   ( 1<<0) // Hardware Request Status Channel 0
//register UInt32 DMA_HRS_HRS1   ( 1<<1) // Hardware Request Status Channel 1
//register UInt32 DMA_HRS_HRS2   ( 1<<2) // Hardware Request Status Channel 2
//register UInt32 DMA_HRS_HRS3   ( 1<<3) // Hardware Request Status Channel 3
//register UInt32 DMA_DCHPRI3  *(volatile uint8_t  *)0x40008100 // Channel n Priority Register
//register UInt32 DMA_DCHPRI2  *(volatile uint8_t  *)0x40008101 // Channel n Priority Register
//register UInt32 DMA_DCHPRI1  *(volatile uint8_t  *)0x40008102 // Channel n Priority Register
//register UInt32 DMA_DCHPRI0  *(volatile uint8_t  *)0x40008103 // Channel n Priority Register
//register UInt32 DMA_DCHPRI_CHPRI(n)  ((uint8_t)(n & 3)<<0) // Channel Arbitration Priority
//register UInt32 DMA_DCHPRI_DPA   ((uint8_t)1<<6)  // Disable PreEmpt Ability
//register UInt32 DMA_DCHPRI_ECP   ((uint8_t)1<<7)  // Enable PreEmption
//
//
//register DMA_TCD_ATTR_SMOD(n)  (((n) & 0x1F) << 11)
//register DMA_TCD_ATTR_SSIZE(n)  (((n) & 0x7) << 8)
//register DMA_TCD_ATTR_DMOD(n)  (((n) & 0x1F) << 3)
//register DMA_TCD_ATTR_DSIZE(n)  (((n) & 0x7) << 0)
//register DMA_TCD_ATTR_SIZE_8BIT  0
//register DMA_TCD_ATTR_SIZE_16BIT  1
//register DMA_TCD_ATTR_SIZE_32BIT  2
//register DMA_TCD_ATTR_SIZE_16BYTE 4
//register DMA_TCD_ATTR_SIZE_32BYTE 5
//register DMA_TCD_CSR_BWC(n)  (((n) & 0x3) << 14)
//register DMA_TCD_CSR_MAJORLINKCH(n) (((n) & 0x3) << 8)
//register DMA_TCD_CSR_DONE  0x0080
//register DMA_TCD_CSR_ACTIVE  0x0040
//register DMA_TCD_CSR_MAJORELINK  0x0020
//register DMA_TCD_CSR_ESG   0x0010
//register DMA_TCD_CSR_DREQ  0x0008
//register DMA_TCD_CSR_INTHALF  0x0004
//register DMA_TCD_CSR_INTMAJOR  0x0002
//register DMA_TCD_CSR_START  0x0001
//register DMA_TCD_CITER_MASK      ((uint16_t)0x7FFF)    // Loop count mask
//register DMA_TCD_CITER_ELINK      ((uint16_t)1<<15)    // Enable channel linking on minor-loop complete
//register DMA_TCD_BITER_MASK      ((uint16_t)0x7FFF)    // Loop count mask
//register DMA_TCD_BITER_ELINK      ((uint16_t)1<<15)    // Enable channel linking on minor-loop complete
//register DMA_TCD_NBYTES_SMLOE      ( 1<<31)      // Source Minor Loop Offset Enable
//register DMA_TCD_NBYTES_DMLOE      ( 1<<30)      // Destination Minor Loop Offset Enable
//register DMA_TCD_NBYTES_MLOFFNO_NBYTES(n)    ( (n))      // NBytes transfer count when minor loop disabled
//register DMA_TCD_NBYTES_MLOFFYES_NBYTES(n)   ( (n & 0x1F))     // NBytes transfer count when minor loop enabled
//register DMA_TCD_NBYTES_MLOFFYES_MLOFF(n)    ( (n & 0xFFFFF)<<10)   // Offset 
//
//register DMA_TCD0_SADDR  *(volatile const void * volatile *)0x40009000 // TCD Source Address
//register DMA_TCD0_SOFF  *(volatile int16_t *)0x40009004  // TCD Signed Source Address Offset
//register DMA_TCD0_ATTR  *(volatile uint16_t *)0x40009006 // TCD Transfer Attributes
//register DMA_TCD0_NBYTES_MLNO  0x40009008 // TCD Minor Byte Count (Minor Loop Disabled)
//register DMA_TCD0_NBYTES_MLOFFNO  0x40009008 // TCD Signed Minor Loop Offset (Minor Loop Enabled and Offset Disabled)
//register DMA_TCD0_NBYTES_MLOFFYES  0x40009008 // TCD Signed Minor Loop Offset (Minor Loop and Offset Enabled)
//register DMA_TCD0_SLAST  *(volatile int32_t *)0x4000900C  // TCD Last Source Address Adjustment
//register DMA_TCD0_DADDR  *(volatile void * volatile *)0x40009010 // TCD Destination Address
//register DMA_TCD0_DOFF  *(volatile int16_t *)0x40009014  // TCD Signed Destination Address Offset
//register DMA_TCD0_CITER_ELINKYES *(volatile uint16_t *)0x40009016 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled
//register DMA_TCD0_CITER_ELINKNO *(volatile uint16_t *)0x40009016 // ??
//register DMA_TCD0_DLASTSGA *(volatile int32_t *)0x40009018  // TCD Last Destination Address Adjustment/Scatter Gather Address
//register DMA_TCD0_CSR  *(volatile uint16_t *)0x4000901C // TCD Control and Status
//register DMA_TCD0_BITER_ELINKYES *(volatile uint16_t *)0x4000901E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Enabled
//register DMA_TCD0_BITER_ELINKNO *(volatile uint16_t *)0x4000901E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled
//
//register DMA_TCD1_SADDR  *(volatile const void * volatile *)0x40009020 // TCD Source Address
//register DMA_TCD1_SOFF  *(volatile int16_t *)0x40009024  // TCD Signed Source Address Offset
//register DMA_TCD1_ATTR  *(volatile uint16_t *)0x40009026 // TCD Transfer Attributes
//register DMA_TCD1_NBYTES_MLNO  0x40009028 // TCD Minor Byte Count, Minor Loop Disabled
//register DMA_TCD1_NBYTES_MLOFFNO  0x40009028 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled
//register DMA_TCD1_NBYTES_MLOFFYES  0x40009028 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled
//register DMA_TCD1_SLAST  *(volatile int32_t *)0x4000902C  // TCD Last Source Address Adjustment
//register DMA_TCD1_DADDR  *(volatile void * volatile *)0x40009030 // TCD Destination Address
//register DMA_TCD1_DOFF  *(volatile int16_t *)0x40009034  // TCD Signed Destination Address Offset
//register DMA_TCD1_CITER_ELINKYES *(volatile uint16_t *)0x40009036 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled
//register DMA_TCD1_CITER_ELINKNO *(volatile uint16_t *)0x40009036 // ??
//register DMA_TCD1_DLASTSGA *(volatile int32_t *)0x40009038  // TCD Last Destination Address Adjustment/Scatter Gather Address
//register DMA_TCD1_CSR  *(volatile uint16_t *)0x4000903C // TCD Control and Status
//register DMA_TCD1_BITER_ELINKYES *(volatile uint16_t *)0x4000903E // TCD Beginning Minor Loop Link, Major Loop Count Channel Linking Enabled
//register DMA_TCD1_BITER_ELINKNO *(volatile uint16_t *)0x4000903E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled
//
//register DMA_TCD2_SADDR  *(volatile const void * volatile *)0x40009040 // TCD Source Address
//register DMA_TCD2_SOFF  *(volatile int16_t *)0x40009044  // TCD Signed Source Address Offset
//register DMA_TCD2_ATTR  *(volatile uint16_t *)0x40009046 // TCD Transfer Attributes
//register DMA_TCD2_NBYTES_MLNO  0x40009048 // TCD Minor Byte Count, Minor Loop Disabled
//register DMA_TCD2_NBYTES_MLOFFNO  0x40009048 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled
//register DMA_TCD2_NBYTES_MLOFFYES  0x40009048 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled
//register DMA_TCD2_SLAST  *(volatile int32_t *)0x4000904C  // TCD Last Source Address Adjustment
//register DMA_TCD2_DADDR  *(volatile void * volatile *)0x40009050 // TCD Destination Address
//register DMA_TCD2_DOFF  *(volatile int16_t *)0x40009054  // TCD Signed Destination Address Offset
//register DMA_TCD2_CITER_ELINKYES *(volatile uint16_t *)0x40009056 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled
//register DMA_TCD2_CITER_ELINKNO *(volatile uint16_t *)0x40009056 // ??
//register DMA_TCD2_DLASTSGA *(volatile int32_t *)0x40009058  // TCD Last Destination Address Adjustment/Scatter Gather Address
//register DMA_TCD2_CSR  *(volatile uint16_t *)0x4000905C // TCD Control and Status
//register DMA_TCD2_BITER_ELINKYES *(volatile uint16_t *)0x4000905E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Enabled
//register DMA_TCD2_BITER_ELINKNO *(volatile uint16_t *)0x4000905E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled
//
//register DMA_TCD3_SADDR  *(volatile const void * volatile *)0x40009060 // TCD Source Address
//register DMA_TCD3_SOFF  *(volatile int16_t *)0x40009064  // TCD Signed Source Address Offset
//register DMA_TCD3_ATTR  *(volatile uint16_t *)0x40009066 // TCD Transfer Attributes
//register DMA_TCD3_NBYTES_MLNO  0x40009068 // TCD Minor Byte Count, Minor Loop Disabled
//register DMA_TCD3_NBYTES_MLOFFNO  0x40009068 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled
//register DMA_TCD3_NBYTES_MLOFFYES  0x40009068 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled
//register DMA_TCD3_SLAST  *(volatile int32_t *)0x4000906C  // TCD Last Source Address Adjustment
//register DMA_TCD3_DADDR  *(volatile void * volatile *)0x40009070 // TCD Destination Address
//register DMA_TCD3_DOFF  *(volatile int16_t *)0x40009074  // TCD Signed Destination Address Offset
//register DMA_TCD3_CITER_ELINKYES *(volatile uint16_t *)0x40009076 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled
//register DMA_TCD3_CITER_ELINKNO *(volatile uint16_t *)0x40009076 // ??
//register DMA_TCD3_DLASTSGA *(volatile int32_t *)0x40009078  // TCD Last Destination Address Adjustment/Scatter Gather Address
//register DMA_TCD3_CSR  *(volatile uint16_t *)0x4000907C // TCD Control and Status
//register DMA_TCD3_BITER_ELINKYES *(volatile uint16_t *)0x4000907E // TCD Beginning Minor Loop Link, Major Loop Count ,Channel Linking Enabled
//register DMA_TCD3_BITER_ELINKNO *(volatile uint16_t *)0x4000907E // TCD Beginning Minor Loop Link, Major Loop Count ,Channel Linking Disabled
//
//register DMA_TCD4_SADDR  *(volatile const void * volatile *)0x40009080 // TCD Source Addr
//register DMA_TCD4_SOFF  *(volatile int16_t *)0x40009084  // TCD Signed Source Address Offset
//register DMA_TCD4_ATTR  *(volatile uint16_t *)0x40009086 // TCD Transfer Attributes
//register DMA_TCD4_NBYTES_MLNO  0x40009088 // TCD Minor Byte Count
//register DMA_TCD4_NBYTES_MLOFFNO  0x40009088 // TCD Signed Minor Loop Offset
//register DMA_TCD4_NBYTES_MLOFFYES  0x40009088 // TCD Signed Minor Loop Offset
//register DMA_TCD4_SLAST  *(volatile int32_t *)0x4000908C  // TCD Last Source Addr Adj.
//register DMA_TCD4_DADDR  *(volatile void * volatile *)0x40009090 // TCD Destination Address
//register DMA_TCD4_DOFF  *(volatile int16_t *)0x40009094  // TCD Signed Dest Address Offset
//register DMA_TCD4_CITER_ELINKYES *(volatile uint16_t *)0x40009096 // TCD Current Minor Loop Link
//register DMA_TCD4_CITER_ELINKNO *(volatile uint16_t *)0x40009096 // ??
//register DMA_TCD4_DLASTSGA *(volatile int32_t *)0x40009098  // TCD Last Destination Addr Adj
//register DMA_TCD4_CSR  *(volatile uint16_t *)0x4000909C // TCD Control and Status
//register DMA_TCD4_BITER_ELINKYES *(volatile uint16_t *)0x4000909E // TCD Beginning Minor Loop Link
//register DMA_TCD4_BITER_ELINKNO *(volatile uint16_t *)0x4000909E // TCD Beginning Minor Loop Link
//
//register DMA_TCD5_SADDR  *(volatile const void * volatile *)0x400090A0 // TCD Source Addr
//register DMA_TCD5_SOFF  *(volatile int16_t *)0x400090A4  // TCD Signed Source Address Offset
//register DMA_TCD5_ATTR  *(volatile uint16_t *)0x400090A6 // TCD Transfer Attributes
//register DMA_TCD5_NBYTES_MLNO  0x400090A8 // TCD Minor Byte Count
//register DMA_TCD5_NBYTES_MLOFFNO  0x400090A8 // TCD Signed Minor Loop Offset
//register DMA_TCD5_NBYTES_MLOFFYES  0x400090A8 // TCD Signed Minor Loop Offset
//register DMA_TCD5_SLAST  *(volatile int32_t *)0x400090AC  // TCD Last Source Addr Adj.
//register DMA_TCD5_DADDR  *(volatile void * volatile *)0x400090B0 // TCD Destination Address
//register DMA_TCD5_DOFF  *(volatile int16_t *)0x400090B4  // TCD Signed Dest Address Offset
//register DMA_TCD5_CITER_ELINKYES *(volatile uint16_t *)0x400090B6 // TCD Current Minor Loop Link
//register DMA_TCD5_CITER_ELINKNO *(volatile uint16_t *)0x400090B6 // ??
//register DMA_TCD5_DLASTSGA *(volatile int32_t *)0x400090B8  // TCD Last Destination Addr Adj
//register DMA_TCD5_CSR  *(volatile uint16_t *)0x400090BC // TCD Control and Status
//register DMA_TCD5_BITER_ELINKYES *(volatile uint16_t *)0x400090BE // TCD Beginning Minor Loop Link
//register DMA_TCD5_BITER_ELINKNO *(volatile uint16_t *)0x400090BE // TCD Beginning Minor Loop Link
//
//register DMA_TCD6_SADDR  *(volatile const void * volatile *)0x400090C0 // TCD Source Addr
//register DMA_TCD6_SOFF  *(volatile int16_t *)0x400090C4  // TCD Signed Source Address Offset
//register DMA_TCD6_ATTR  *(volatile uint16_t *)0x400090C6 // TCD Transfer Attributes
//register DMA_TCD6_NBYTES_MLNO  0x400090C8 // TCD Minor Byte Count
//register DMA_TCD6_NBYTES_MLOFFNO  0x400090C8 // TCD Signed Minor Loop Offset
//register DMA_TCD6_NBYTES_MLOFFYES  0x400090C8 // TCD Signed Minor Loop Offset
//register DMA_TCD6_SLAST  *(volatile int32_t *)0x400090CC  // TCD Last Source Addr Adj.
//register DMA_TCD6_DADDR  *(volatile void * volatile *)0x400090D0 // TCD Destination Address
//register DMA_TCD6_DOFF  *(volatile int16_t *)0x400090D4  // TCD Signed Dest Address Offset
//register DMA_TCD6_CITER_ELINKYES *(volatile uint16_t *)0x400090D6 // TCD Current Minor Loop Link
//register DMA_TCD6_CITER_ELINKNO *(volatile uint16_t *)0x400090D6 // ??
//register DMA_TCD6_DLASTSGA *(volatile int32_t *)0x400090D8  // TCD Last Destination Addr Adj
//register DMA_TCD6_CSR  *(volatile uint16_t *)0x400090DC // TCD Control and Status
//register DMA_TCD6_BITER_ELINKYES *(volatile uint16_t *)0x400090DE // TCD Beginning Minor Loop Link
//register DMA_TCD6_BITER_ELINKNO *(volatile uint16_t *)0x400090DE // TCD Beginning Minor Loop Link
//
//register DMA_TCD7_SADDR  *(volatile const void * volatile *)0x400090E0 // TCD Source Addr
//register DMA_TCD7_SOFF  *(volatile int16_t *)0x400090E4  // TCD Signed Source Address Offset
//register DMA_TCD7_ATTR  *(volatile uint16_t *)0x400090E6 // TCD Transfer Attributes
//register DMA_TCD7_NBYTES_MLNO  0x400090E8 // TCD Minor Byte Count
//register DMA_TCD7_NBYTES_MLOFFNO  0x400090E8 // TCD Signed Minor Loop Offset
//register DMA_TCD7_NBYTES_MLOFFYES  0x400090E8 // TCD Signed Minor Loop Offset
//register DMA_TCD7_SLAST  *(volatile int32_t *)0x400090EC  // TCD Last Source Addr Adj.
//register DMA_TCD7_DADDR  *(volatile void * volatile *)0x400090F0 // TCD Destination Address
//register DMA_TCD7_DOFF  *(volatile int16_t *)0x400090F4  // TCD Signed Dest Address Offset
//register DMA_TCD7_CITER_ELINKYES *(volatile uint16_t *)0x400090F6 // TCD Current Minor Loop Link
//register DMA_TCD7_CITER_ELINKNO *(volatile uint16_t *)0x400090F6 // ??
//register DMA_TCD7_DLASTSGA *(volatile int32_t *)0x400090F8  // TCD Last Destination Addr Adj
//register DMA_TCD7_CSR  *(volatile uint16_t *)0x400090FC // TCD Control and Status
//register DMA_TCD7_BITER_ELINKYES *(volatile uint16_t *)0x400090FE // TCD Beginning Minor Loop Link
//register DMA_TCD7_BITER_ELINKNO *(volatile uint16_t *)0x400090FE // TCD Beginning Minor Loop Link
//
//register DMA_TCD8_SADDR  *(volatile const void * volatile *)0x40009100 // TCD Source Addr
//register DMA_TCD8_SOFF  *(volatile int16_t *)0x40009104  // TCD Signed Source Address Offset
//register DMA_TCD8_ATTR  *(volatile uint16_t *)0x40009106 // TCD Transfer Attributes
//register DMA_TCD8_NBYTES_MLNO  0x40009108 // TCD Minor Byte Count
//register DMA_TCD8_NBYTES_MLOFFNO  0x40009108 // TCD Signed Minor Loop Offset
//register DMA_TCD8_NBYTES_MLOFFYES  0x40009108 // TCD Signed Minor Loop Offset
//register DMA_TCD8_SLAST  *(volatile int32_t *)0x4000910C  // TCD Last Source Addr Adj.
//register DMA_TCD8_DADDR  *(volatile void * volatile *)0x40009110 // TCD Destination Address
//register DMA_TCD8_DOFF  *(volatile int16_t *)0x40009114  // TCD Signed Dest Address Offset
//register DMA_TCD8_CITER_ELINKYES *(volatile uint16_t *)0x40009116 // TCD Current Minor Loop Link
//register DMA_TCD8_CITER_ELINKNO *(volatile uint16_t *)0x40009116 // ??
//register DMA_TCD8_DLASTSGA *(volatile int32_t *)0x40009118  // TCD Last Destination Addr Adj
//register DMA_TCD8_CSR  *(volatile uint16_t *)0x4000911C // TCD Control and Status
//register DMA_TCD8_BITER_ELINKYES *(volatile uint16_t *)0x4000911E // TCD Beginning Minor Loop Link
//register DMA_TCD8_BITER_ELINKNO *(volatile uint16_t *)0x4000911E // TCD Beginning Minor Loop Link
//
//register DMA_TCD9_SADDR  *(volatile const void * volatile *)0x40009120 // TCD Source Addr
//register DMA_TCD9_SOFF  *(volatile int16_t *)0x40009124  // TCD Signed Source Address Offset
//register DMA_TCD9_ATTR  *(volatile uint16_t *)0x40009126 // TCD Transfer Attributes
//register DMA_TCD9_NBYTES_MLNO  0x40009128 // TCD Minor Byte Count
//register DMA_TCD9_NBYTES_MLOFFNO  0x40009128 // TCD Signed Minor Loop Offset
//register DMA_TCD9_NBYTES_MLOFFYES  0x40009128 // TCD Signed Minor Loop Offset
//register DMA_TCD9_SLAST  *(volatile int32_t *)0x4000912C  // TCD Last Source Addr Adj.
//register DMA_TCD9_DADDR  *(volatile void * volatile *)0x40009130 // TCD Destination Address
//register DMA_TCD9_DOFF  *(volatile int16_t *)0x40009134  // TCD Signed Dest Address Offset
//register DMA_TCD9_CITER_ELINKYES *(volatile uint16_t *)0x40009136 // TCD Current Minor Loop Link
//register DMA_TCD9_CITER_ELINKNO *(volatile uint16_t *)0x40009136 // ??
//register DMA_TCD9_DLASTSGA *(volatile int32_t *)0x40009138  // TCD Last Destination Addr Adj
//register DMA_TCD9_CSR  *(volatile uint16_t *)0x4000913C // TCD Control and Status
//register DMA_TCD9_BITER_ELINKYES *(volatile uint16_t *)0x4000913E // TCD Beginning Minor Loop Link
//register DMA_TCD9_BITER_ELINKNO *(volatile uint16_t *)0x4000913E // TCD Beginning Minor Loop Link
//
//register DMA_TCD10_SADDR  *(volatile const void * volatile *)0x40009140 // TCD Source Addr
//register DMA_TCD10_SOFF  *(volatile int16_t *)0x40009144  // TCD Signed Source Address Offset
//register DMA_TCD10_ATTR  *(volatile uint16_t *)0x40009146 // TCD Transfer Attributes
//register DMA_TCD10_NBYTES_MLNO  0x40009148 // TCD Minor Byte Count
//register DMA_TCD10_NBYTES_MLOFFNO  0x40009148 // TCD Signed Minor Loop Offset
//register DMA_TCD10_NBYTES_MLOFFYES  0x40009148 // TCD Signed Minor Loop Offset
//register DMA_TCD10_SLAST  *(volatile int32_t *)0x4000914C  // TCD Last Source Addr Adj.
//register DMA_TCD10_DADDR  *(volatile void * volatile *)0x40009150 // TCD Destination Address
//register DMA_TCD10_DOFF  *(volatile int16_t *)0x40009154  // TCD Signed Dest Address Offset
//register DMA_TCD10_CITER_ELINKYES *(volatile uint16_t *)0x40009156 // TCD Current Minor Loop Link
//register DMA_TCD10_CITER_ELINKNO *(volatile uint16_t *)0x40009156 // ??
//register DMA_TCD10_DLASTSGA *(volatile int32_t *)0x40009158  // TCD Last Destination Addr Adj
//register DMA_TCD10_CSR  *(volatile uint16_t *)0x4000915C // TCD Control and Status
//register DMA_TCD10_BITER_ELINKYES *(volatile uint16_t *)0x4000915E // TCD Beginning Minor Loop Link
//register DMA_TCD10_BITER_ELINKNO *(volatile uint16_t *)0x4000915E // TCD Beginning Minor Loop Link
//
//register DMA_TCD11_SADDR  *(volatile const void * volatile *)0x40009160 // TCD Source Addr
//register DMA_TCD11_SOFF  *(volatile int16_t *)0x40009164  // TCD Signed Source Address Offset
//register DMA_TCD11_ATTR  *(volatile uint16_t *)0x40009166 // TCD Transfer Attributes
//register DMA_TCD11_NBYTES_MLNO  0x40009168 // TCD Minor Byte Count
//register DMA_TCD11_NBYTES_MLOFFNO  0x40009168 // TCD Signed Minor Loop Offset
//register DMA_TCD11_NBYTES_MLOFFYES  0x40009168 // TCD Signed Minor Loop Offset
//register DMA_TCD11_SLAST  *(volatile int32_t *)0x4000916C  // TCD Last Source Addr Adj.
//register DMA_TCD11_DADDR  *(volatile void * volatile *)0x40009170 // TCD Destination Address
//register DMA_TCD11_DOFF  *(volatile int16_t *)0x40009174  // TCD Signed Dest Address Offset
//register DMA_TCD11_CITER_ELINKYES *(volatile uint16_t *)0x40009176 // TCD Current Minor Loop Link
//register DMA_TCD11_CITER_ELINKNO *(volatile uint16_t *)0x40009176 // ??
//register DMA_TCD11_DLASTSGA *(volatile int32_t *)0x40009178  // TCD Last Destination Addr Adj
//register DMA_TCD11_CSR  *(volatile uint16_t *)0x4000917C // TCD Control and Status
//register DMA_TCD11_BITER_ELINKYES *(volatile uint16_t *)0x4000917E // TCD Beginning Minor Loop Link
//register DMA_TCD11_BITER_ELINKNO *(volatile uint16_t *)0x4000917E // TCD Beginning Minor Loop Link
//
//register DMA_TCD12_SADDR  *(volatile const void * volatile *)0x40009180 // TCD Source Addr
//register DMA_TCD12_SOFF  *(volatile int16_t *)0x40009184  // TCD Signed Source Address Offset
//register DMA_TCD12_ATTR  *(volatile uint16_t *)0x40009186 // TCD Transfer Attributes
//register DMA_TCD12_NBYTES_MLNO  0x40009188 // TCD Minor Byte Count
//register DMA_TCD12_NBYTES_MLOFFNO  0x40009188 // TCD Signed Minor Loop Offset
//register DMA_TCD12_NBYTES_MLOFFYES  0x40009188 // TCD Signed Minor Loop Offset
//register DMA_TCD12_SLAST  *(volatile int32_t *)0x4000918C  // TCD Last Source Addr Adj.
//register DMA_TCD12_DADDR  *(volatile void * volatile *)0x40009190 // TCD Destination Address
//register DMA_TCD12_DOFF  *(volatile int16_t *)0x40009194  // TCD Signed Dest Address Offset
//register DMA_TCD12_CITER_ELINKYES *(volatile uint16_t *)0x40009196 // TCD Current Minor Loop Link
//register DMA_TCD12_CITER_ELINKNO *(volatile uint16_t *)0x40009196 // ??
//register DMA_TCD12_DLASTSGA *(volatile int32_t *)0x40009198  // TCD Last Destination Addr Adj
//register DMA_TCD12_CSR  *(volatile uint16_t *)0x4000919C // TCD Control and Status
//register DMA_TCD12_BITER_ELINKYES *(volatile uint16_t *)0x4000919E // TCD Beginning Minor Loop Link
//register DMA_TCD12_BITER_ELINKNO *(volatile uint16_t *)0x4000919E // TCD Beginning Minor Loop Link
//
//register DMA_TCD13_SADDR  *(volatile const void * volatile *)0x400091A0 // TCD Source Addr
//register DMA_TCD13_SOFF  *(volatile int16_t *)0x400091A4  // TCD Signed Source Address Offset
//register DMA_TCD13_ATTR  *(volatile uint16_t *)0x400091A6 // TCD Transfer Attributes
//register DMA_TCD13_NBYTES_MLNO  0x400091A8 // TCD Minor Byte Count
//register DMA_TCD13_NBYTES_MLOFFNO  0x400091A8 // TCD Signed Minor Loop Offset
//register DMA_TCD13_NBYTES_MLOFFYES  0x400091A8 // TCD Signed Minor Loop Offset
//register DMA_TCD13_SLAST  *(volatile int32_t *)0x400091AC  // TCD Last Source Addr Adj.
//register DMA_TCD13_DADDR  *(volatile void * volatile *)0x400091B0 // TCD Destination Address
//register DMA_TCD13_DOFF  *(volatile int16_t *)0x400091B4  // TCD Signed Dest Address Offset
//register DMA_TCD13_CITER_ELINKYES *(volatile uint16_t *)0x400091B6 // TCD Current Minor Loop Link
//register DMA_TCD13_CITER_ELINKNO *(volatile uint16_t *)0x400091B6 // ??
//register DMA_TCD13_DLASTSGA *(volatile int32_t *)0x400091B8  // TCD Last Destination Addr Adj
//register DMA_TCD13_CSR  *(volatile uint16_t *)0x400091BC // TCD Control and Status
//register DMA_TCD13_BITER_ELINKYES *(volatile uint16_t *)0x400091BE // TCD Beginning Minor Loop Link
//register DMA_TCD13_BITER_ELINKNO *(volatile uint16_t *)0x400091BE // TCD Beginning Minor Loop Link
//
//register DMA_TCD14_SADDR  *(volatile const void * volatile *)0x400091C0 // TCD Source Addr
//register DMA_TCD14_SOFF  *(volatile int16_t *)0x400091C4  // TCD Signed Source Address Offset
//register DMA_TCD14_ATTR  *(volatile uint16_t *)0x400091C6 // TCD Transfer Attributes
//register DMA_TCD14_NBYTES_MLNO  0x400091C8 // TCD Minor Byte Count
//register DMA_TCD14_NBYTES_MLOFFNO  0x400091C8 // TCD Signed Minor Loop Offset
//register DMA_TCD14_NBYTES_MLOFFYES  0x400091C8 // TCD Signed Minor Loop Offset
//register DMA_TCD14_SLAST  *(volatile int32_t *)0x400091CC  // TCD Last Source Addr Adj.
//register DMA_TCD14_DADDR  *(volatile void * volatile *)0x400091D0 // TCD Destination Address
//register DMA_TCD14_DOFF  *(volatile int16_t *)0x400091D4  // TCD Signed Dest Address Offset
//register DMA_TCD14_CITER_ELINKYES *(volatile uint16_t *)0x400091D6 // TCD Current Minor Loop Link
//register DMA_TCD14_CITER_ELINKNO *(volatile uint16_t *)0x400091D6 // ??
//register DMA_TCD14_DLASTSGA *(volatile int32_t *)0x400091D8  // TCD Last Destination Addr Adj
//register DMA_TCD14_CSR  *(volatile uint16_t *)0x400091DC // TCD Control and Status
//register DMA_TCD14_BITER_ELINKYES *(volatile uint16_t *)0x400091DE // TCD Beginning Minor Loop Link
//register DMA_TCD14_BITER_ELINKNO *(volatile uint16_t *)0x400091DE // TCD Beginning Minor Loop Link
//
//register DMA_TCD15_SADDR  *(volatile const void * volatile *)0x400091E0 // TCD Source Addr
//register DMA_TCD15_SOFF  *(volatile int16_t *)0x400091E4  // TCD Signed Source Address Offset
//register DMA_TCD15_ATTR  *(volatile uint16_t *)0x400091E6 // TCD Transfer Attributes
//register DMA_TCD15_NBYTES_MLNO  0x400091E8 // TCD Minor Byte Count
//register DMA_TCD15_NBYTES_MLOFFNO  0x400091E8 // TCD Signed Minor Loop Offset
//register DMA_TCD15_NBYTES_MLOFFYES  0x400091E8 // TCD Signed Minor Loop Offset
//register DMA_TCD15_SLAST  *(volatile int32_t *)0x400091EC  // TCD Last Source Addr Adj.
//register DMA_TCD15_DADDR  *(volatile void * volatile *)0x400091F0 // TCD Destination Address
//register DMA_TCD15_DOFF  *(volatile int16_t *)0x400091F4  // TCD Signed Dest Address Offset
//register DMA_TCD15_CITER_ELINKYES *(volatile uint16_t *)0x400091F6 // TCD Current Minor Loop Link
//register DMA_TCD15_CITER_ELINKNO *(volatile uint16_t *)0x400091F6 // ??
//register DMA_TCD15_DLASTSGA *(volatile int32_t *)0x400091F8  // TCD Last Destination Addr Adj
//register DMA_TCD15_CSR  *(volatile uint16_t *)0x400091FC // TCD Control and Status
//register DMA_TCD15_BITER_ELINKYES *(volatile uint16_t *)0x400091FE // TCD Beginning Minor Loop Link
//register DMA_TCD15_BITER_ELINKNO *(volatile uint16_t *)0x400091FE // TCD Beginning Minor Loop Link
//
//
//// Chapter 22: External Watchdog Monitor (EWM)
//register EWM_CTRL  *(volatile uint8_t  *)0x40061000 // Control Register
//register EWM_SERV  *(volatile uint8_t  *)0x40061001 // Service Register
//register EWM_CMPL  *(volatile uint8_t  *)0x40061002 // Compare Low Register
//register EWM_CMPH  *(volatile uint8_t  *)0x40061003 // Compare High Register
//
//// Chapter 23: Watchdog Timer (WDOG)
register WDOG_STCTRLH at 0x40052000 : UInt16 // Watchdog Status and Control Register High
let WDOG_STCTRLH_DISTESTWDOG : UInt16 = 0x4000  // Allows the WDOG's functional test mode to be disabled permanently.
//register WDOG_STCTRLH_BYTESEL(n)  (uint16_t)(((n) & 3) << 12) // selects the byte to be tested when the watchdog is in the byte test mode.
let WDOG_STCTRLH_TESTSEL  : UInt16 = 0x0800
let WDOG_STCTRLH_TESTWDOG : UInt16 = 0x0400
let WDOG_STCTRLH_WAITEN : UInt16 = 0x0080
let WDOG_STCTRLH_STOPEN : UInt16 = 0x0040
let WDOG_STCTRLH_DBGEN  : UInt16 = 0x0020
let WDOG_STCTRLH_ALLOWUPDATE : UInt16 = 0x0010
let WDOG_STCTRLH_WINEN : UInt16 = 0x0008
let WDOG_STCTRLH_IRQRSTEN : UInt16 = 0x0004
let WDOG_STCTRLH_CLKSRC : UInt16 = 0x0002
let WDOG_STCTRLH_WDOGEN : UInt16 = 0x0001
register WDOG_STCTRLL  at 0x40052002 : UInt16 // Watchdog Status and Control Register Low
register WDOG_TOVALH   at 0x40052004 : UInt16 // Watchdog Time-out Value Register High
register WDOG_TOVALL   at 0x40052006 : UInt16 // Watchdog Time-out Value Register Low
register WDOG_WINH     at 0x40052008 : UInt16 // Watchdog Window Register High
register WDOG_WINL     at 0x4005200A : UInt16 // Watchdog Window Register Low
register WDOG_REFRESH  at 0x4005200C : UInt16 // Watchdog Refresh register
register WDOG_UNLOCK   at 0x4005200E : UInt16 // Watchdog Unlock register
let WDOG_UNLOCK_SEQ1 : UInt16   = 0xC520
let WDOG_UNLOCK_SEQ2 : UInt16   = 0xD928
register WDOG_TMROUTH  at 0x40052010 : UInt16 // Watchdog Timer Output Register High
register WDOG_TMROUTL  at 0x40052012 : UInt16 // Watchdog Timer Output Register Low
register WDOG_RSTCNT   at 0x40052014 : UInt16 // Watchdog Reset Count register
register WDOG_PRESC    at 0x40052016 : UInt16 // Watchdog Prescaler register
//
//// Chapter 24: Multipurpose Clock Generator (MCG)
register MCG_C1 at 0x40064000 : UInt8 // MCG Control 1 Register
let MCG_C1_IREFSTEN : UInt8 = 0x01   // Internal Reference Stop Enable, Controls whether or not the internal reference clock remains enabled when the MCG enters Stop mode.
let MCG_C1_IRCLKEN : UInt8 = 0x02   // Internal Reference Clock Enable, Enables the internal reference clock for use as MCGIRCLK.
let MCG_C1_IREFS : UInt8 = 0x04   // Internal Reference Select, Selects the reference clock source for the FLL.
//register MCG_C1_FRDIV(n)   (uint8_t)(((n) & 0x07) << 3) // FLL External Reference Divider, Selects the amount to divide down the external reference clock for the FLL
let MCG_C1_FRDIV_0 : UInt8 = 0 << 3
let MCG_C1_FRDIV_1 : UInt8 = 1 << 3
let MCG_C1_FRDIV_2 : UInt8 = 2 << 3
let MCG_C1_FRDIV_3 : UInt8 = 3 << 3
let MCG_C1_FRDIV_4 : UInt8 = 4 << 3
let MCG_C1_FRDIV_5 : UInt8 = 5 << 3
let MCG_C1_FRDIV_6 : UInt8 = 6 << 3
let MCG_C1_FRDIV_7 : UInt8 = 7 << 3
//register MCG_C1_CLKS(n)   (uint8_t)(((n) & 0x03) << 6) // Clock Source Select, Selects the clock source for MCGOUTCLK
let MCG_C1_CLKS_0 : UInt8 = 0 << 6
let MCG_C1_CLKS_1 : UInt8 = 1 << 6
let MCG_C1_CLKS_2 : UInt8 = 2 << 6
let MCG_C1_CLKS_3 : UInt8 = 3 << 6
register MCG_C2 at 0x40064001 : UInt8 // MCG Control 2 Register
let MCG_C2_IRCS : UInt8  = 0x01   // Internal Reference Clock Select, Selects between the fast or slow internal reference clock source.
let MCG_C2_LP : UInt8 = 0x02   // Low Power Select, Controls whether the FLL or PLL is disabled in BLPI and BLPE modes.
let MCG_C2_EREFS : UInt8 = 0x04   // External Reference Select, Selects the source for the external reference clock. 
let MCG_C2_HGO0 : UInt8 = 0x08   // High Gain Oscillator Select, Controls the crystal oscillator mode of operation
//register MCG_C2_RANGE0(n)  (uint8_t)(((n) & 0x03) << 4) // Frequency Range Select, Selects the frequency range for the crystal oscillator
let MCG_C2_RANGE0_0 : UInt8 = 0 << 4
let MCG_C2_RANGE0_1 : UInt8 = 1 << 4
let MCG_C2_RANGE0_2 : UInt8 = 2 << 4
let MCG_C2_RANGE0_3 : UInt8 = 3 << 4
let MCG_C2_LOCRE0 : UInt8 = 0x80   // Loss of Clock Reset Enable, Determines whether an interrupt or a reset request is made following a loss of OSC0 
register MCG_C3 at 0x40064002 : UInt8 // MCG Control 3 Register
//register MCG_C3_SCTRIM(n)  (uint8_t)(n)   // Slow Internal Reference Clock Trim Setting
register MCG_C4 at 0x40064003 : UInt8 // MCG Control 4 Register
let MCG_C4_SCFTRIM : UInt8 = 0x01   // Slow Internal Reference Clock Fine Trim
//register MCG_C4_FCTRIM(n)  (uint8_t)(((n) & 0x0F) << 1) // Fast Internal Reference Clock Trim Setting
//register MCG_C4_DRST_DRS(n)  (uint8_t)(((n) & 0x03) << 5) // DCO Range Select
let MCG_C4_DMX32 : UInt8 = 0x80   // DCO Maximum Frequency with 32.768 kHz Reference, controls whether the DCO frequency range is narrowed
register MCG_C5 at 0x40064004 : UInt8 // MCG Control 5 Register
//register MCG_C5_PRDIV0(n)  (uint8_t)((n) & 0x1F)  // PLL External Reference Divider
let MCG_C5_PRDIV0_3 : UInt8 = 3
let MCG_C5_PLLSTEN0 : UInt8 = 0x20   // PLL Stop Enable
let MCG_C5_PLLCLKEN0 : UInt8 = 0x40   // PLL Clock Enable
register MCG_C6 at 0x40064005 : UInt8 // MCG Control 6 Register
//register MCG_C6_VDIV0(n)   (uint8_t)((n) & 0x1F)  // VCO 0 Divider
let MCG_C6_VDIV0_0 : UInt8 = 0   // Clock Monitor Enable
let MCG_C6_CME0 : UInt8 = 0x20   // Clock Monitor Enable
let MCG_C6_PLLS : UInt8 = 0x40   // PLL Select, Controls whether the PLL or FLL output is selected as the MCG source when CLKS[1:0]=00. 
//register MCG_C6_LOLIE0   (uint8_t)0x80   // Loss of Lock Interrrupt Enable
register MCG_S  at 0x40064006 : UInt8 // MCG Status Register
let MCG_S_IRCST : UInt8 = 0x01   // Internal Reference Clock Status
let MCG_S_OSCINIT0 : UInt8 = 0x02   // OSC Initialization, resets to 0, is set to 1 after the initialization cycles of the crystal oscillator
//register MCG_S_CLKST(n)   (uint8_t)(((n) & 0x03) << 2) // Clock Mode Status, 0=FLL is selected, 1= Internal ref, 2=External ref, 3=PLL
let MCG_S_CLKST_0 : UInt8 = 0 << 2 
let MCG_S_CLKST_1 : UInt8 = 1 << 2 
let MCG_S_CLKST_2 : UInt8 = 2 << 2 
let MCG_S_CLKST_3 : UInt8 = 3 << 2 


let MCG_S_CLKST_MASK : UInt8 = 0x0C
let MCG_S_IREFST : UInt8 = 0x10   // Internal Reference Status
let MCG_S_PLLST : UInt8 = 0x20   // PLL Select Status
let MCG_S_LOCK0 : UInt8  = 0x40   // Lock Status, 0=PLL Unlocked, 1=PLL Locked
let MCG_S_LOLS0 : UInt8  = 0x80   // Loss of Lock Status

register MCG_SC at 0x40064008 : UInt8 // MCG Status and Control Register
let MCG_SC_LOCS0 : UInt8 = 0x01   // OSC0 Loss of Clock Status
//register MCG_SC_FCRDIV(n)  (uint8_t)(((n) & 0x07) << 1) // Fast Clock Internal Reference Divider
let MCG_SC_FLTPRSRV : UInt8 = 0x10   // FLL Filter Preserve Enable
let MCG_SC_ATMF : UInt8 = 0x20   // Automatic Trim Machine Fail Flag
let MCG_SC_ATMS : UInt8 = 0x40   // Automatic Trim Machine Select
let MCG_SC_ATME : UInt8 = 0x80   // Automatic Trim Machine Enable

register MCG_ATCVH at 0x4006400A : UInt8 // MCG Auto Trim Compare Value High Register
register MCG_ATCVL at 0x4006400B : UInt8 // MCG Auto Trim Compare Value Low Register
register MCG_C7    at 0x4006400C : UInt8 // MCG Control 7 Register
register MCG_C8    at 0x4006400D : UInt8 // MCG Control 8 Register
//
//// Chapter 25: Oscillator (OSC)
register OSC0_CR at 0x40065000 : UInt8 // OSC Control Register
let OSC_SC16P  : UInt8 = 0x01   // Oscillator 16 pF Capacitor Load Configure
let OSC_SC8P   : UInt8 = 0x02   // Oscillator 8 pF Capacitor Load Configure
let OSC_SC4P   : UInt8 = 0x04   // Oscillator 4 pF Capacitor Load Configure
let OSC_SC2P   : UInt8 = 0x08   // Oscillator 2 pF Capacitor Load Configure
let OSC_EREFSTEN : UInt8 = 0x20   // External Reference Stop Enable, Controls whether or not the external reference clock (OSCERCLK) remains enabled when MCU enters Stop mode.
let OSC_ERCLKEN : UInt8 = 0x80   // External Reference Enable, Enables external reference clock (OSCERCLK).
//
//// Chapter 27: Flash Memory Controller (FMC)
register FMC_PFAPR     at 0x4001F000 : UInt32 // Flash Access Protection
register FMC_PFB0CR    at 0x4001F004 : UInt32 // Flash Control
register FMC_TAGVDW0S0 at 0x4001F100 : UInt32 // Cache Tag Storage
register FMC_TAGVDW0S1 at 0x4001F104 : UInt32 // Cache Tag Storage
register FMC_TAGVDW1S0 at 0x4001F108 : UInt32 // Cache Tag Storage
register FMC_TAGVDW1S1 at 0x4001F10C : UInt32 // Cache Tag Storage
register FMC_TAGVDW2S0 at 0x4001F110 : UInt32 // Cache Tag Storage
register FMC_TAGVDW2S1 at 0x4001F114 : UInt32 // Cache Tag Storage
register FMC_TAGVDW3S0 at 0x4001F118 : UInt32 // Cache Tag Storage
register FMC_TAGVDW3S1 at 0x4001F11C : UInt32 // Cache Tag Storage
register FMC_DATAW0S0  at 0x4001F200 : UInt32 // Cache Data Storage
register FMC_DATAW0S1  at 0x4001F204 : UInt32 // Cache Data Storage
register FMC_DATAW1S0  at 0x4001F208 : UInt32 // Cache Data Storage
register FMC_DATAW1S1  at 0x4001F20C : UInt32 // Cache Data Storage
register FMC_DATAW2S0  at 0x4001F210 : UInt32 // Cache Data Storage
register FMC_DATAW2S1  at 0x4001F214 : UInt32 // Cache Data Storage
register FMC_DATAW3S0  at 0x4001F218 : UInt32 // Cache Data Storage
register FMC_DATAW3S1  at 0x4001F21C : UInt32 // Cache Data Storage
//
//// Chapter 28: Flash Memory Module (FTFL)
//register FTFL_FST *(volatile uint8_t  *)0x40020000      // Flash Status Register
//register FTFL_FSTAT_CCIF   (uint8_t)0x80   // Command Complete Interrupt Flag
//register FTFL_FSTAT_RDCOLERR  (uint8_t)0x40   // Flash Read Collision Error Flag
//register FTFL_FSTAT_ACCERR  (uint8_t)0x20   // Flash Access Error Flag
//register FTFL_FSTAT_FPVIOL  (uint8_t)0x10   // Flash Protection Violation Flag
//register FTFL_FSTAT_MGSTAT0  (uint8_t)0x01   // Memory Controller Command Completion Status Flag
//register FTFL_FCNFG  *(volatile uint8_t  *)0x40020001      // Flash Configuration Register
//register FTFL_FCNFG_CCIE   (uint8_t)0x80   // Command Complete Interrupt Enable
//register FTFL_FCNFG_RDCOLLIE  (uint8_t)0x40   // Read Collision Error Interrupt Enable
//register FTFL_FCNFG_ERSAREQ  (uint8_t)0x20   // Erase All Request
//register FTFL_FCNFG_ERSSUSP  (uint8_t)0x10   // Erase Suspend
//register FTFL_FCNFG_PFLSH  (uint8_t)0x04   // Flash memory configuration
//register FTFL_FCNFG_RAMRDY  (uint8_t)0x02   // RAM Ready
//register FTFL_FCNFG_EEERDY  (uint8_t)0x01   // EEPROM Ready
//register FTFL_FSEC  *(const    uint8_t  *)0x40020002      // Flash Security Register
//register FTFL_FOPT  *(const    uint8_t  *)0x40020003      // Flash Option Register
//register FTFL_FCCOB3  *(volatile uint8_t  *)0x40020004      // Flash Common Command Object Registers
//register FTFL_FCCOB2  *(volatile uint8_t  *)0x40020005
//register FTFL_FCCOB1  *(volatile uint8_t  *)0x40020006
//register FTFL_FCCOB0  *(volatile uint8_t  *)0x40020007
//register FTFL_FCCOB7  *(volatile uint8_t  *)0x40020008
//register FTFL_FCCOB6  *(volatile uint8_t  *)0x40020009
//register FTFL_FCCOB5  *(volatile uint8_t  *)0x4002000A
//register FTFL_FCCOB4  *(volatile uint8_t  *)0x4002000B
//register FTFL_FCCOBB  *(volatile uint8_t  *)0x4002000C
//register FTFL_FCCOBA  *(volatile uint8_t  *)0x4002000D
//register FTFL_FCCOB9  *(volatile uint8_t  *)0x4002000E
//register FTFL_FCCOB8  *(volatile uint8_t  *)0x4002000F
//register FTFL_FPROT3  *(volatile uint8_t  *)0x40020010      // Program Flash Protection Registers
//register FTFL_FPROT2  *(volatile uint8_t  *)0x40020011      // Program Flash Protection Registers
//register FTFL_FPROT1  *(volatile uint8_t  *)0x40020012      // Program Flash Protection Registers
//register FTFL_FPROT0  *(volatile uint8_t  *)0x40020013      // Program Flash Protection Registers
//register FTFL_FEPROT  *(volatile uint8_t  *)0x40020016      // EEPROM Protection Register
//register FTFL_FDPROT  *(volatile uint8_t  *)0x40020017      // Data Flash Protection Register

// Chapter 30: Cyclic Redundancy Check (CRC)
register CRC_CRC   at 0x40032000 : UInt32 // CRC Data register
register CRC_GPOLY at 0x40032004 : UInt32 // CRC Polynomial register
register CRC_CTRL  at 0x40032008 : UInt32 // CRC Control register

// Chapter 31: Analog-to-Digital Converter (ADC)
register ADC0_SC1A   at 0x4003B000 : UInt32 // ADC status and control registers 1
register ADC0_SC1B   at 0x4003B004 : UInt32 // ADC status and control registers 1
let ADC_SC1_COCO  : UInt32 = 0x80   // Conversion complete flag
let ADC_SC1_AIEN  : UInt32 = 0x40   // Interrupt enable
let ADC_SC1_DIFF  : UInt32 = 0x20   // Differential mode enable
//register ADC_SC1_ADCH(n)    ((n) & 0x1F)  // Input channel select
register ADC0_CFG1   at 0x4003B008 : UInt32 // ADC configuration register 1
let ADC_CFG1_ADLPC  : UInt32 = 0x80   // Low-power configuration
//register ADC_CFG1_ADIV(n)   (((n) & 3) << 5) // Clock divide select, 0=direct, 1=div2, 2=div4, 3=div8
let ADC_CFG1_ADLSMP  : UInt32 = 0x10   // Sample time configuration, 0=Short, 1=Long
//register ADC_CFG1_MODE(n)   (((n) & 3) << 2) // Conversion mode, 0=8 bit, 1=12 bit, 2=10 bit, 3=16 bit
//register ADC_CFG1_ADICLK(n)   (((n) & 3) << 0) // Input clock, 0=bus, 1=bus/2, 2=OSCERCLK, 3=async
register ADC0_CFG2  at 0x4003B00C : UInt32 // Configuration register 2
let ADC_CFG2_MUXSEL  : UInt32 = 0x10   // 0=a channels, 1=b channels
let ADC_CFG2_ADACKEN  : UInt32 = 0x08   // async clock enable
let ADC_CFG2_ADHSC   : UInt32 = 0x04   // High speed configuration
//register ADC_CFG2_ADLSTS(n)   (((n) & 3) << 0) // Sample time, 0=24 cycles, 1=12 cycles, 2=6 cycles, 3=2 cycles
register ADC0_RA    at 0x4003B010 : UInt32 // ADC data result register
register ADC0_RB    at 0x4003B014 : UInt32 // ADC data result register
register ADC0_CV1   at 0x4003B018 : UInt32 // Compare value registers
register ADC0_CV2   at 0x4003B01C : UInt32 // Compare value registers
register ADC0_SC2   at 0x4003B020 : UInt32 // Status and control register 2
let ADC_SC2_ADACT  : UInt32 = 0x80   // Conversion active
let ADC_SC2_ADTRG  : UInt32 = 0x40   // Conversion trigger select, 0=software, 1=hardware
let ADC_SC2_ACFE   : UInt32 = 0x20   // Compare function enable
let ADC_SC2_ACFGT  : UInt32 = 0x10   // Compare function greater than enable
let ADC_SC2_ACREN  : UInt32 = 0x08   // Compare function range enable
let ADC_SC2_DMAEN  : UInt32= 0x04   // DMA enable
//register ADC_SC2_REFSEL(n)   (((n) & 3) << 0) // Voltage reference, 0=vcc/external, 1=1.2 volts
register ADC0_SC3   at 0x4003B024 : UInt32 // Status and control register 3
let ADC_SC3_CAL  : UInt32 = 0x80   // Calibration, 1=begin, stays set while cal in progress
let ADC_SC3_CALF  : UInt32= 0x40   // Calibration failed flag
let ADC_SC3_ADCO  : UInt32= 0x08   // Continuous conversion enable
let ADC_SC3_AVGE  : UInt32= 0x04   // Hardware average enable
//register ADC_SC3_AVGS(n)    (((n) & 3) << 0) // avg select, 0=4 samples, 1=8 samples, 2=16 samples, 3=32 samples
register ADC0_OFS   at 0x4003B028 : UInt32 // ADC offset correction register
register ADC0_PG    at 0x4003B02C : UInt32 // ADC plus-side gain register
register ADC0_MG    at 0x4003B030 : UInt32 // ADC minus-side gain register
register ADC0_CLPD  at 0x4003B034 : UInt32 // ADC plus-side general calibration value register
register ADC0_CLPS  at 0x4003B038 : UInt32 // ADC plus-side general calibration value register
register ADC0_CLP4  at 0x4003B03C : UInt32 // ADC plus-side general calibration value register
register ADC0_CLP3  at 0x4003B040 : UInt32 // ADC plus-side general calibration value register
register ADC0_CLP2  at 0x4003B044 : UInt32 // ADC plus-side general calibration value register
register ADC0_CLP1  at 0x4003B048 : UInt32 // ADC plus-side general calibration value register
register ADC0_CLP0  at 0x4003B04C : UInt32 // ADC plus-side general calibration value register
register ADC0_PGA   at 0x4003B050 : UInt32 // ADC Programmable Gain Amplifier
let ADC0_PGA_PGAEN  : UInt32 = 0x00800000  // Enable
let ADC0_PGA_PGALPB  : UInt32 = 0x00100000  // Low-Power Mode Control, 0=low power, 1=normal
//register ADC0_PGA_PGAG(n)   (((n) & 15) << 16) // Gain, 0=1X, 1=2X, 2=4X, 3=8X, 4=16X, 5=32X, 6=64X
register ADC0_CLMD   at 0x4003B054 : UInt32 // ADC minus-side general calibration value register
register ADC0_CLMS   at 0x4003B058 : UInt32 // ADC minus-side general calibration value register
register ADC0_CLM4   at 0x4003B05C : UInt32 // ADC minus-side general calibration value register
register ADC0_CLM3   at 0x4003B060 : UInt32 // ADC minus-side general calibration value register
register ADC0_CLM2   at 0x4003B064 : UInt32 // ADC minus-side general calibration value register
register ADC0_CLM1   at 0x4003B068 : UInt32 // ADC minus-side general calibration value register
register ADC0_CLM0   at 0x4003B06C : UInt32 // ADC minus-side general calibration value register

register ADC1_SC1A   at 0x400BB000 : UInt32 // ADC status and control registers 1
register ADC1_SC1B   at 0x400BB004 : UInt32 // ADC status and control registers 1
register ADC1_CFG1   at 0x400BB008 : UInt32 // ADC configuration register 1
register ADC1_CFG2   at 0x400BB00C : UInt32 // Configuration register 2
register ADC1_RA     at 0x400BB010 : UInt32 // ADC data result register
register ADC1_RB     at 0x400BB014 : UInt32 // ADC data result register
register ADC1_CV1    at 0x400BB018 : UInt32 // Compare value registers
register ADC1_CV2    at 0x400BB01C : UInt32 // Compare value registers
register ADC1_SC2    at 0x400BB020 : UInt32 // Status and control register 2
register ADC1_SC3    at 0x400BB024 : UInt32 // Status and control register 3
register ADC1_OFS    at 0x400BB028 : UInt32 // ADC offset correction register
register ADC1_PG     at 0x400BB02C : UInt32 // ADC plus-side gain register
register ADC1_MG     at 0x400BB030 : UInt32 // ADC minus-side gain register
register ADC1_CLPD   at 0x400BB034 : UInt32 // ADC plus-side general calibration value register
register ADC1_CLPS   at 0x400BB038 : UInt32 // ADC plus-side general calibration value register
register ADC1_CLP4   at 0x400BB03C : UInt32 // ADC plus-side general calibration value register
register ADC1_CLP3   at 0x400BB040 : UInt32 // ADC plus-side general calibration value register
register ADC1_CLP2   at 0x400BB044 : UInt32 // ADC plus-side general calibration value register
register ADC1_CLP1   at 0x400BB048 : UInt32 // ADC plus-side general calibration value register
register ADC1_CLP0   at 0x400BB04C : UInt32 // ADC plus-side general calibration value register
register ADC1_PGA    at 0x400BB050 : UInt32 // ADC Programmable Gain Amplifier
register ADC1_CLMD   at 0x400BB054 : UInt32 // ADC minus-side general calibration value register
register ADC1_CLMS   at 0x400BB058 : UInt32 // ADC minus-side general calibration value register
register ADC1_CLM4   at 0x400BB05C : UInt32 // ADC minus-side general calibration value register
register ADC1_CLM3   at 0x400BB060 : UInt32 // ADC minus-side general calibration value register
register ADC1_CLM2   at 0x400BB064 : UInt32 // ADC minus-side general calibration value register
register ADC1_CLM1   at 0x400BB068 : UInt32 // ADC minus-side general calibration value register
register ADC1_CLM0   at 0x400BB06C : UInt32 // ADC minus-side general calibration value register

register DAC0_DAT0L at 0x400CC000 : UInt8 // DAC Data Low Register 
register DAC0_DATH  at 0x400CC001 : UInt8 // DAC Data High Register 
register DAC0_DAT1L at 0x400CC002 : UInt8 // DAC Data Low Register 
register DAC0_DAT2L at 0x400CC004 : UInt8 // DAC Data Low Register 
register DAC0_DAT3L at 0x400CC006 : UInt8 // DAC Data Low Register 
register DAC0_DAT4L at 0x400CC008 : UInt8 // DAC Data Low Register 
register DAC0_DAT5L at 0x400CC00A : UInt8 // DAC Data Low Register 
register DAC0_DAT6L at 0x400CC00C : UInt8 // DAC Data Low Register 
register DAC0_DAT7L at 0x400CC00E : UInt8 // DAC Data Low Register 
register DAC0_DAT8L at 0x400CC010 : UInt8 // DAC Data Low Register 
register DAC0_DAT9L at 0x400CC012 : UInt8 // DAC Data Low Register 
register DAC0_DAT10L at 0x400CC014 : UInt8 // DAC Data Low Register 
register DAC0_DAT11L at 0x400CC016 : UInt8 // DAC Data Low Register 
register DAC0_DAT12L at 0x400CC018 : UInt8 // DAC Data Low Register 
register DAC0_DAT13L at 0x400CC01A : UInt8 // DAC Data Low Register 
register DAC0_DAT14L at 0x400CC01C : UInt8 // DAC Data Low Register 
register DAC0_DAT15L at 0x400CC01E : UInt8 // DAC Data Low Register 
register DAC0_SR     at 0x400CC020 : UInt8 // DAC Status Register 
register DAC0_C0     at 0x400CC021 : UInt8 // DAC Control Register 
let DAC_C0_DACEN  : UInt8 = 0x80    // DAC Enable
let DAC_C0_DACRFS : UInt8 = 0x40    // DAC Reference Select
let DAC_C0_DACTRGSEL : UInt8 = 0x20    // DAC Trigger Select
let DAC_C0_DACSWTRG  : UInt8 = 0x10    // DAC Software Trigger
let DAC_C0_LPEN  : UInt8 = 0x08    // DAC Low Power Control
let DAC_C0_DACBWIEN  : UInt8 = 0x04    // DAC Buffer Watermark Interrupt Enable
let DAC_C0_DACBTIEN : UInt8 = 0x02    // DAC Buffer Read Pointer Top Flag Interrupt Enable
let DAC_C0_DACBBIEN : UInt8 = 0x01    // DAC Buffer Read Pointer Bottom Flag Interrupt Enable

register DAC0_C1  at 0x400CC022 : UInt8 // DAC Control Register 1 
let DAC_C1_DMAEN : UInt8 = 0x80    // DMA Enable Select
//register DAC_C1_DACBFWM(n)  (((n) & 3) << 3)  // DAC Buffer Watermark Select
//register DAC_C1_DACBFMD(n)  (((n) & 3) << 0)  // DAC Buffer Work Mode Select
let DAC_C1_DACBFEN : UInt8 = 0x00    // DAC Buffer Enable
//
register DAC0_C2  at 0x400CC023 : UInt8 // DAC Control Register 2 
//register DAC_C2_DACBFRP(n)  (((n) & 15) << 4)  // DAC Buffer Read Pointer
//register DAC_C2_DACBFUP(n)  (((n) & 15) << 0)  // DAC Buffer Upper Limit
//
//
////register MCG_C2_RANGE0(n)  (uint8_t)(((n) & 0x03) << 4) // Frequency Range Select, Selects the frequency range for the crystal oscillator
////register MCG_C2_LOCRE0   (uint8_t)0x80   // Loss of Clock Reset Enable, Determines whether an interrupt or a reset request is made following a loss of OSC0 
//
//// Chapter 32: Comparator (CMP)
register CMP0_CR0   at 0x40073000 : UInt8 // CMP Control Register 0
register CMP0_CR1   at 0x40073001 : UInt8 // CMP Control Register 1
register CMP0_FPR   at 0x40073002 : UInt8 // CMP Filter Period Register
register CMP0_SCR   at 0x40073003 : UInt8 // CMP Status and Control Register
register CMP0_DACCR at 0x40073004 : UInt8 // DAC Control Register
register CMP0_MUXCR at 0x40073005 : UInt8 // MUX Control Register
register CMP1_CR0   at 0x40073008 : UInt8 // CMP Control Register 0
register CMP1_CR1   at 0x40073009 : UInt8 // CMP Control Register 1
register CMP1_FPR   at 0x4007300A : UInt8 // CMP Filter Period Register
register CMP1_SCR   at 0x4007300B : UInt8 // CMP Status and Control Register
register CMP1_DACCR at 0x4007300C : UInt8 // DAC Control Register
register CMP1_MUXCR at 0x4007300D : UInt8 // MUX Control Register
//
//// Chapter 33: Voltage Reference (VREFV1)
register VREF_TRM  at 0x40074000 : UInt8 // VREF Trim Register
register VREF_SC   at 0x40074001 : UInt8 // VREF Status and Control Register

// Chapter 34: Programmable Delay Block (PDB)
//register PDB0_SC    0x40036000 // Status and Control Register
//register PDB_SC_LDMOD(n)   (((n) & 3) << 18) // Load Mode Select
//register PDB_SC_PDBEIE   0x00020000  // Sequence Error Interrupt Enable
//register PDB_SC_SWTRIG   0x00010000  // Software Trigger
//register PDB_SC_DMAEN   0x00008000  // DMA Enable
//register PDB_SC_PRESCALER(n)  (((n) & 7) << 12) // Prescaler Divider Select
//register PDB_SC_TRGSEL(n)  (((n) & 15) << 8) // Trigger Input Source Select
//register PDB_SC_PDBEN   0x00000080  // PDB Enable
//register PDB_SC_PDBIF   0x00000040  // PDB Interrupt Flag
//register PDB_SC_PDBIE   0x00000020  // PDB Interrupt Enable.
//register PDB_SC_MULT(n)   (((n) & 3) << 2) // Multiplication Factor
//register PDB_SC_CONT   0x00000002  // Continuous Mode Enable
//register PDB_SC_LDOK   0x00000001  // Load OK
//register PDB0_MOD   0x40036004 // Modulus Register
//register PDB0_CNT   0x40036008 // Counter Register
//register PDB0_IDLY   0x4003600C // Interrupt Delay Register
//register PDB0_CH0C1   0x40036010 // Channel n Control Register 1
//register PDB0_CH0S   0x40036014 // Channel n Status Register
//register PDB0_CH0DLY0   0x40036018 // Channel n Delay 0 Register
//register PDB0_CH0DLY1   0x4003601C // Channel n Delay 1 Register
//register PDB0_POEN   0x40036190 // Pulse-Out n Enable Register
//register PDB0_PO0DLY   0x40036194 // Pulse-Out n Delay Register
//register PDB0_PO1DLY   0x40036198 // Pulse-Out n Delay Register
//
//// Chapter 35: FlexTimer Module (FTM)
//register FTM0_SC    0x40038000 // Status And Control
//register FTM_SC_TOF   0x80    // Timer Overflow Flag
//register FTM_SC_TOIE   0x40    // Timer Overflow Interrupt Enable
//register FTM_SC_CPWMS   0x20    // Center-Aligned PWM Select
//register FTM_SC_CLKS(n)   (((n) & 3) << 3)  // Clock Source Selection
//register FTM_SC_PS(n)   (((n) & 7) << 0)  // Prescale Factor Selection
//register FTM0_CNT   0x40038004 // Counter
//register FTM0_MOD   0x40038008 // Modulo
//register FTM0_C0SC   0x4003800C // Channel 0 Status And Control
//register FTM0_C0V   0x40038010 // Channel 0 Value
//register FTM0_C1SC   0x40038014 // Channel 1 Status And Control
//register FTM0_C1V   0x40038018 // Channel 1 Value
//register FTM0_C2SC   0x4003801C // Channel 2 Status And Control
//register FTM0_C2V   0x40038020 // Channel 2 Value
//register FTM0_C3SC   0x40038024 // Channel 3 Status And Control
//register FTM0_C3V   0x40038028 // Channel 3 Value
//register FTM0_C4SC   0x4003802C // Channel 4 Status And Control
//register FTM0_C4V   0x40038030 // Channel 4 Value
//register FTM0_C5SC   0x40038034 // Channel 5 Status And Control
//register FTM0_C5V   0x40038038 // Channel 5 Value
//register FTM0_C6SC   0x4003803C // Channel 6 Status And Control
//register FTM0_C6V   0x40038040 // Channel 6 Value
//register FTM0_C7SC   0x40038044 // Channel 7 Status And Control
//register FTM0_C7V   0x40038048 // Channel 7 Value
//register FTM0_CNTIN   0x4003804C // Counter Initial Value
//register FTM0_STATUS   0x40038050 // Capture And Compare Status
//register FTM0_MODE   0x40038054 // Features Mode Selection
//register FTM_MODE_FAULTIE  0x80    // Fault Interrupt Enable
//register FTM_MODE_FAULTM(n)  (((n) & 3) << 5)  // Fault Control Mode
//register FTM_MODE_CAPTEST  0x10    // Capture Test Mode Enable
//register FTM_MODE_PWMSYNC  0x08    // PWM Synchronization Mode
//register FTM_MODE_WPDIS   0x04    // Write Protection Disable
//register FTM_MODE_INIT   0x02    // Initialize The Channels Output
//register FTM_MODE_FTMEN   0x01    // FTM Enable
//register FTM0_SYNC   0x40038058 // Synchronization
//register FTM_SYNC_SWSYNC   0x80    // 
//register FTM_SYNC_TRIG2   0x40    // 
//register FTM_SYNC_TRIG1   0x20    // 
//register FTM_SYNC_TRIG0   0x10    // 
//register FTM_SYNC_SYNCHOM  0x08    // 
//register FTM_SYNC_REINIT   0x04    // 
//register FTM_SYNC_CNTMAX   0x02    // 
//register FTM_SYNC_CNTMIN   0x01    // 
//register FTM0_OUTINIT   0x4003805C // Initial State For Channels Output
//register FTM0_OUTMASK   0x40038060 // Output Mask
//register FTM0_COMBINE   0x40038064 // Function For Linked Channels
//register FTM0_DEADTIME   0x40038068 // Deadtime Insertion Control
//register FTM0_EXTTRIG   0x4003806C // FTM External Trigger
//register FTM0_POL   0x40038070 // Channels Polarity
//register FTM0_FMS   0x40038074 // Fault Mode Status
//register FTM0_FILTER   0x40038078 // Input Capture Filter Control
//register FTM0_FLTCTRL   0x4003807C // Fault Control
//register FTM0_QDCTRL   0x40038080 // Quadrature Decoder Control And Status
//register FTM0_CONF   0x40038084 // Configuration
//register FTM0_FLTPOL   0x40038088 // FTM Fault Input Polarity
//register FTM0_SYNCONF   0x4003808C // Synchronization Configuration
//register FTM0_INVCTRL   0x40038090 // FTM Inverting Control
//register FTM0_SWOCTRL   0x40038094 // FTM Software Output Control
//register FTM0_PWMLOAD   0x40038098 // FTM PWM Load
//register FTM1_SC    0x40039000 // Status And Control
//register FTM1_CNT   0x40039004 // Counter
//register FTM1_MOD   0x40039008 // Modulo
//register FTM1_C0SC   0x4003900C // Channel 0 Status And Control
//register FTM1_C0V   0x40039010 // Channel 0 Value
//register FTM1_C1SC   0x40039014 // Channel 1 Status And Control
//register FTM1_C1V   0x40039018 // Channel 1 Value
//register FTM1_CNTIN   0x4003904C // Counter Initial Value
//register FTM1_STATUS   0x40039050 // Capture And Compare Status
//register FTM1_MODE   0x40039054 // Features Mode Selection
//register FTM1_SYNC   0x40039058 // Synchronization
//register FTM1_OUTINIT   0x4003905C // Initial State For Channels Output
//register FTM1_OUTMASK   0x40039060 // Output Mask
//register FTM1_COMBINE   0x40039064 // Function For Linked Channels
//register FTM1_DEADTIME   0x40039068 // Deadtime Insertion Control
//register FTM1_EXTTRIG   0x4003906C // FTM External Trigger
//register FTM1_POL   0x40039070 // Channels Polarity
//register FTM1_FMS   0x40039074 // Fault Mode Status
//register FTM1_FILTER   0x40039078 // Input Capture Filter Control
//register FTM1_FLTCTRL   0x4003907C // Fault Control
//register FTM1_QDCTRL   0x40039080 // Quadrature Decoder Control And Status
//register FTM1_CONF   0x40039084 // Configuration
//register FTM1_FLTPOL   0x40039088 // FTM Fault Input Polarity
//register FTM1_SYNCONF   0x4003908C // Synchronization Configuration
//register FTM1_INVCTRL   0x40039090 // FTM Inverting Control
//register FTM1_SWOCTRL   0x40039094 // FTM Software Output Control
//register FTM1_PWMLOAD   0x40039098 // FTM PWM Load
//register FTM2_SC    0x400B8000 // Status And Control
//register FTM2_CNT   0x400B8004 // Counter
//register FTM2_MOD   0x400B8008 // Modulo
//register FTM2_C0SC   0x400B800C // Channel 0 Status And Control
//register FTM2_C0V   0x400B8010 // Channel 0 Value
//register FTM2_C1SC   0x400B8014 // Channel 1 Status And Control
//register FTM2_C1V   0x400B8018 // Channel 1 Value
//register FTM2_CNTIN   0x400B804C // Counter Initial Value
//register FTM2_STATUS   0x400B8050 // Capture And Compare Status
//register FTM2_MODE   0x400B8054 // Features Mode Selection
//register FTM2_SYNC   0x400B8058 // Synchronization
//register FTM2_OUTINIT   0x400B805C // Initial State For Channels Output
//register FTM2_OUTMASK   0x400B8060 // Output Mask
//register FTM2_COMBINE   0x400B8064 // Function For Linked Channels
//register FTM2_DEADTIME   0x400B8068 // Deadtime Insertion Control
//register FTM2_EXTTRIG   0x400B806C // FTM External Trigger
//register FTM2_POL   0x400B8070 // Channels Polarity
//register FTM2_FMS   0x400B8074 // Fault Mode Status
//register FTM2_FILTER   0x400B8078 // Input Capture Filter Control
//register FTM2_FLTCTRL   0x400B807C // Fault Control
//register FTM2_QDCTRL   0x400B8080 // Quadrature Decoder Control And Status
//register FTM2_CONF   0x400B8084 // Configuration
//register FTM2_FLTPOL   0x400B8088 // FTM Fault Input Polarity
//register FTM2_SYNCONF   0x400B808C // Synchronization Configuration
//register FTM2_INVCTRL   0x400B8090 // FTM Inverting Control
//register FTM2_SWOCTRL   0x400B8094 // FTM Software Output Control
//register FTM2_PWMLOAD   0x400B8098 // FTM PWM Load
//
//// Chapter 36: Periodic Interrupt Timer (PIT)
//register PIT_MCR    0x40037000 // PIT Module Control Register
//register PIT_LDVAL0   0x40037100 // Timer Load Value Register
//register PIT_CVAL0   0x40037104 // Current Timer Value Register
//register PIT_TCTRL0   0x40037108 // Timer Control Register
//register PIT_TFLG0   0x4003710C // Timer Flag Register
//register PIT_LDVAL1   0x40037110 // Timer Load Value Register
//register PIT_CVAL1   0x40037114 // Current Timer Value Register
//register PIT_TCTRL1   0x40037118 // Timer Control Register
//register PIT_TFLG1   0x4003711C // Timer Flag Register
//register PIT_LDVAL2   0x40037120 // Timer Load Value Register
//register PIT_CVAL2   0x40037124 // Current Timer Value Register
//register PIT_TCTRL2   0x40037128 // Timer Control Register
//register PIT_TFLG2   0x4003712C // Timer Flag Register
//register PIT_LDVAL3   0x40037130 // Timer Load Value Register
//register PIT_CVAL3   0x40037134 // Current Timer Value Register
//register PIT_TCTRL3   0x40037138 // Timer Control Register
//register PIT_TFLG3   0x4003713C // Timer Flag Register
//
//// Chapter 37: Low-Power Timer (LPTMR)
//register LPTMR0_CSR   0x40040000 // Low Power Timer Control Status Register
//register LPTMR0_PSR   0x40040004 // Low Power Timer Prescale Register
//register LPTMR0_CMR   0x40040008 // Low Power Timer Compare Register
//register LPTMR0_CNR   0x4004000C // Low Power Timer Counter Register
//
//// Chapter 38: Carrier Modulator Transmitter (CMT)
//register CMT_CGH1  *(volatile uint8_t  *)0x40062000 // CMT Carrier Generator High Data Register 1
//register CMT_CGL1  *(volatile uint8_t  *)0x40062001 // CMT Carrier Generator Low Data Register 1
//register CMT_CGH2  *(volatile uint8_t  *)0x40062002 // CMT Carrier Generator High Data Register 2
//register CMT_CGL2  *(volatile uint8_t  *)0x40062003 // CMT Carrier Generator Low Data Register 2
//register CMT_OC   *(volatile uint8_t  *)0x40062004 // CMT Output Control Register
//register CMT_MSC   *(volatile uint8_t  *)0x40062005 // CMT Modulator Status and Control Register
//register CMT_CMD1  *(volatile uint8_t  *)0x40062006 // CMT Modulator Data Register Mark High
//register CMT_CMD2  *(volatile uint8_t  *)0x40062007 // CMT Modulator Data Register Mark Low
//register CMT_CMD3  *(volatile uint8_t  *)0x40062008 // CMT Modulator Data Register Space High
//register CMT_CMD4  *(volatile uint8_t  *)0x40062009 // CMT Modulator Data Register Space Low
//register CMT_PPS   *(volatile uint8_t  *)0x4006200A // CMT Primary Prescaler Register
//register CMT_DMA   *(volatile uint8_t  *)0x4006200B // CMT Direct Memory Access Register
//
//// Chapter 39: Real Time Clock (RTC)
register RTC_TSR at  0x4003D000 : UInt32 // RTC Time Seconds Register
register RTC_TPR at  0x4003D004 : UInt32 // RTC Time Prescaler Register
register RTC_TAR at  0x4003D008 : UInt32 // RTC Time Alarm Register
register RTC_TCR at  0x4003D00C : UInt32 // RTC Time Compensation Register
//register RTC_TCR_CIC(n)   (((n) & 255) << 24)  // Compensation Interval Counter
//register RTC_TCR_TCV(n)   (((n) & 255) << 16)  // Time Compensation Value
//register RTC_TCR_CIR(n)   (((n) & 255) << 8)  // Compensation Interval Register
//register RTC_TCR_TCR(n)   (((n) & 255) << 0)  // Time Compensation Register
register RTC_CR at  0x4003D010 : UInt32 // RTC Control Register
let RTC_CR_SC2P : UInt32 = 0x00002000  // 
let RTC_CR_SC4P : UInt32 = 0x00001000  // 
let RTC_CR_SC8P : UInt32 = 0x00000800  // 
let RTC_CR_SC16P : UInt32 = 0x00000400  // 
let RTC_CR_CLKO : UInt32 = 0x00000200  // 
let RTC_CR_OSCE : UInt32 = 0x00000100  // 
let RTC_CR_UM : UInt32 = 0x00000008  // 
let RTC_CR_SUP : UInt32 = 0x00000004  // 
let RTC_CR_WPE : UInt32 = 0x00000002  // 
let RTC_CR_SWR : UInt32 = 0x00000001  //
 
register RTC_SR at  0x4003D014 : UInt32 // RTC Status Register
let RTC_SR_TCE : UInt32 = 0x00000010  
let RTC_SR_TAF : UInt32 = 0x00000004  // 
let RTC_SR_TOF : UInt32 = 0x00000002  // 
let RTC_SR_TIF : UInt32 = 0x00000001  // 

register RTC_LR  at 0x4003D018 : UInt32 // RTC Lock Register
register RTC_IER at 0x4003D01C : UInt32 // RTC Interrupt Enable Register
register RTC_WAR at 0x4003D800 : UInt32 // RTC Write Access Register
register RTC_RAR at 0x4003D804 : UInt32 // RTC Read Access Register

//// Chapter 40: Universal Serial Bus OTG Controller (USBOTG)
//register USB0_PERID  *(const    uint8_t  *)0x40072000 // Peripheral ID register
//register USB0_IDCOMP  *(const    uint8_t  *)0x40072004 // Peripheral ID Complement register
//register USB0_REV  *(const    uint8_t  *)0x40072008 // Peripheral Revision register
//register USB0_ADDINFO  *(volatile uint8_t  *)0x4007200C // Peripheral Additional Info register
//register USB0_OTGIST *(volatile uint8_t  *)0x40072010 // OTG Interrupt Status register
//register USB_OTGISTAT_IDCHG  (uint8_t)0x80   //
//register USB_OTGISTAT_ONEMSEC  (uint8_t)0x40   //
//register USB_OTGISTAT_LINE_STATE_CHG (uint8_t)0x20   //
//register USB_OTGISTAT_SESSVLDCHG  (uint8_t)0x08   //
//register USB_OTGISTAT_B_SESS_CHG  (uint8_t)0x04   //
//register USB_OTGISTAT_AVBUSCHG  (uint8_t)0x01   //
//register USB0_OTGICR  *(volatile uint8_t  *)0x40072014 // OTG Interrupt Control Register
//register USB_OTGICR_IDEN   (uint8_t)0x80   // 
//register USB_OTGICR_ONEMSECEN  (uint8_t)0x40   // 
//register USB_OTGICR_LINESTATEEN  (uint8_t)0x20   // 
//register USB_OTGICR_SESSVLDEN  (uint8_t)0x08   // 
//register USB_OTGICR_BSESSEN  (uint8_t)0x04   // 
//register USB_OTGICR_AVBUSEN  (uint8_t)0x01   // 
//register USB0_OTGST *(volatile uint8_t  *)0x40072018 // OTG Status register
//register USB_OTGSTAT_ID   (uint8_t)0x80   // 
//register USB_OTGSTAT_ONEMSECEN  (uint8_t)0x40   // 
//register USB_OTGSTAT_LINESTATESTABLE (uint8_t)0x20   // 
//register USB_OTGSTAT_SESS_VLD  (uint8_t)0x08   // 
//register USB_OTGSTAT_BSESSEND  (uint8_t)0x04   // 
//register USB_OTGSTAT_AVBUSVLD  (uint8_t)0x01   // 
//register USB0_OTGCTL  *(volatile uint8_t  *)0x4007201C // OTG Control Register
//register USB_OTGCTL_DPHIGH  (uint8_t)0x80   // 
//register USB_OTGCTL_DPLOW  (uint8_t)0x20   // 
//register USB_OTGCTL_DMLOW  (uint8_t)0x10   // 
//register USB_OTGCTL_OTGEN  (uint8_t)0x04   // 
//register USB0_IST *(volatile uint8_t  *)0x40072080 // Interrupt Status Register
//register USB_ISTAT_STALL   (uint8_t)0x80   // 
//register USB_ISTAT_ATTACH  (uint8_t)0x40   // 
//register USB_ISTAT_RESUME  (uint8_t)0x20   // 
//register USB_ISTAT_SLEEP   (uint8_t)0x10   // 
//register USB_ISTAT_TOKDNE  (uint8_t)0x08   // 
//register USB_ISTAT_SOFTOK  (uint8_t)0x04   // 
//register USB_ISTAT_ERROR   (uint8_t)0x02   // 
//register USB_ISTAT_USBRST  (uint8_t)0x01   // 
//register USB0_INTEN  *(volatile uint8_t  *)0x40072084 // Interrupt Enable Register
//register USB_INTEN_STALLEN  (uint8_t)0x80   // 
//register USB_INTEN_ATTACHEN  (uint8_t)0x40   // 
//register USB_INTEN_RESUMEEN  (uint8_t)0x20   // 
//register USB_INTEN_SLEEPEN  (uint8_t)0x10   // 
//register USB_INTEN_TOKDNEEN  (uint8_t)0x08   // 
//register USB_INTEN_SOFTOKEN  (uint8_t)0x04   // 
//register USB_INTEN_ERROREN  (uint8_t)0x02   // 
//register USB_INTEN_USBRSTEN  (uint8_t)0x01   // 
//register USB0_ERRST *(volatile uint8_t  *)0x40072088 // Error Interrupt Status Register
//register USB_ERRSTAT_BTSERR  (uint8_t)0x80   // 
//register USB_ERRSTAT_DMAERR  (uint8_t)0x20   // 
//register USB_ERRSTAT_BTOERR  (uint8_t)0x10   // 
//register USB_ERRSTAT_DFN8  (uint8_t)0x08   // 
//register USB_ERRSTAT_CRC16  (uint8_t)0x04   // 
//register USB_ERRSTAT_CRC5EOF  (uint8_t)0x02   // 
//register USB_ERRSTAT_PIDERR  (uint8_t)0x01   // 
//register USB0_ERREN  *(volatile uint8_t  *)0x4007208C // Error Interrupt Enable Register
//register USB_ERREN_BTSERREN  (uint8_t)0x80   // 
//register USB_ERREN_DMAERREN  (uint8_t)0x20   // 
//register USB_ERREN_BTOERREN  (uint8_t)0x10   // 
//register USB_ERREN_DFN8EN  (uint8_t)0x08   // 
//register USB_ERREN_CRC16EN  (uint8_t)0x04   // 
//register USB_ERREN_CRC5EOFEN  (uint8_t)0x02   // 
//register USB_ERREN_PIDERREN  (uint8_t)0x01   // 
//register USB0_ST *(volatile uint8_t  *)0x40072090 // Status Register
//register USB_STAT_TX   (uint8_t)0x08   // 
//register USB_STAT_ODD   (uint8_t)0x04   // 
//register USB_STAT_ENDP(n)  (uint8_t)((n) >> 4)  // 
//register USB0_CTL  *(volatile uint8_t  *)0x40072094 // Control Register
//register USB_CTL_JSTATE   (uint8_t)0x80   // 
//register USB_CTL_SE0   (uint8_t)0x40   // 
//register USB_CTL_TXSUSPENDTOKENBUSY (uint8_t)0x20   // 
//register USB_CTL_RESET   (uint8_t)0x10   // 
//register USB_CTL_HOSTMODEEN  (uint8_t)0x08   // 
//register USB_CTL_RESUME   (uint8_t)0x04   // 
//register USB_CTL_ODDRST   (uint8_t)0x02   // 
//register USB_CTL_USBENSOFEN  (uint8_t)0x01   // 
//register USB0_ADDR  *(volatile uint8_t  *)0x40072098 // Address Register
//register USB0_BDTPAGE1  *(volatile uint8_t  *)0x4007209C // BDT Page Register 1
//register USB0_FRMNUML  *(volatile uint8_t  *)0x400720A0 // Frame Number Register Low
//register USB0_FRMNUMH  *(volatile uint8_t  *)0x400720A4 // Frame Number Register High
//register USB0_TOKEN  *(volatile uint8_t  *)0x400720A8 // Token Register
//register USB0_SOFTHLD  *(volatile uint8_t  *)0x400720AC // SOF Threshold Register
//register USB0_BDTPAGE2  *(volatile uint8_t  *)0x400720B0 // BDT Page Register 2
//register USB0_BDTPAGE3  *(volatile uint8_t  *)0x400720B4 // BDT Page Register 3
//register USB0_ENDPT0  *(volatile uint8_t  *)0x400720C0 // Endpoint Control Register
//register USB_ENDPT_HOSTWOHUB  (uint8_t)0x80   // host only, enable low speed
//register USB_ENDPT_RETRYDIS  (uint8_t)0x40   // host only, set to disable NAK retry
//register USB_ENDPT_EPCTLDIS  (uint8_t)0x10   // 0=control, 1=bulk, interrupt, isync
//register USB_ENDPT_EPRXEN  (uint8_t)0x08   // enables the endpoint for RX transfers.
//register USB_ENDPT_EPTXEN  (uint8_t)0x04   // enables the endpoint for TX transfers.
//register USB_ENDPT_EPSTALL  (uint8_t)0x02   // set to stall endpoint
//register USB_ENDPT_EPHSHK  (uint8_t)0x01   // enable handshaking during a transaction, generally set unless Isochronous
//register USB0_ENDPT1  *(volatile uint8_t  *)0x400720C4 // Endpoint Control Register
//register USB0_ENDPT2  *(volatile uint8_t  *)0x400720C8 // Endpoint Control Register
//register USB0_ENDPT3  *(volatile uint8_t  *)0x400720CC // Endpoint Control Register
//register USB0_ENDPT4  *(volatile uint8_t  *)0x400720D0 // Endpoint Control Register
//register USB0_ENDPT5  *(volatile uint8_t  *)0x400720D4 // Endpoint Control Register
//register USB0_ENDPT6  *(volatile uint8_t  *)0x400720D8 // Endpoint Control Register
//register USB0_ENDPT7  *(volatile uint8_t  *)0x400720DC // Endpoint Control Register
//register USB0_ENDPT8  *(volatile uint8_t  *)0x400720E0 // Endpoint Control Register
//register USB0_ENDPT9  *(volatile uint8_t  *)0x400720E4 // Endpoint Control Register
//register USB0_ENDPT10  *(volatile uint8_t  *)0x400720E8 // Endpoint Control Register
//register USB0_ENDPT11  *(volatile uint8_t  *)0x400720EC // Endpoint Control Register
//register USB0_ENDPT12  *(volatile uint8_t  *)0x400720F0 // Endpoint Control Register
//register USB0_ENDPT13  *(volatile uint8_t  *)0x400720F4 // Endpoint Control Register
//register USB0_ENDPT14  *(volatile uint8_t  *)0x400720F8 // Endpoint Control Register
//register USB0_ENDPT15  *(volatile uint8_t  *)0x400720FC // Endpoint Control Register
//register USB0_USBCTRL  *(volatile uint8_t  *)0x40072100 // USB Control Register
//register USB_USBCTRL_SUSP  (uint8_t)0x80   // Places the USB transceiver into the suspend state.
//register USB_USBCTRL_PDE   (uint8_t)0x40   // Enables the weak pulldowns on the USB transceiver.
//register USB0_OBSERVE  *(volatile uint8_t  *)0x40072104 // USB OTG Observe Register
//register USB_OBSERVE_DPPU  (uint8_t)0x80   // 
//register USB_OBSERVE_DPPD  (uint8_t)0x40   // 
//register USB_OBSERVE_DMPD  (uint8_t)0x10   // 
//register USB0_CONTROL  *(volatile uint8_t  *)0x40072108 // USB OTG Control Register
//register USB_CONTROL_DPPULLUPNONOTG (uint8_t)0x10   //  Provides control of the DP PULLUP in the USB OTG module, if USB is configured in non-OTG device mode.
//register USB0_USBTRC0  *(volatile uint8_t  *)0x4007210C // USB Transceiver Control Register 0
//register USB_USBTRC_USBRESET  (uint8_t)0x80   //
//register USB_USBTRC_USBRESMEN  (uint8_t)0x20   //
//register USB_USBTRC_SYNC_DET  (uint8_t)0x02   //
//register USB_USBTRC_USB_RESUME_INT (uint8_t)0x01   //
//register USB0_USBFRMADJUST *(volatile uint8_t  *)0x40072114 // Frame Adjust Register
//
//// Chapter 41: USB Device Charger Detection Module (USBDCD)
//register USBDCD_CONTROL   0x40035000 // Control register
//register USBDCD_CLOCK   0x40035004 // Clock register
//register USBDCD_STATUS   0x40035008 // Status register
//register USBDCD_TIMER0   0x40035010 // TIMER0 register
//register USBDCD_TIMER1   0x40035014 // TIMER1 register
//register USBDCD_TIMER2   0x40035018 // TIMER2 register
//
//// Chapter 43: SPI (DSPI)
//register SPI0_MCR   0x4002C000 // DSPI Module Configuration Register
//register SPI_MCR_MSTR    0x80000000  // Master/Slave Mode Select
//register SPI_MCR_CONT_SCKE   0x40000000  // 
//register SPI_MCR_DCONF(n)  (((n) & 3) << 28)  // 
//register SPI_MCR_FRZ    0x08000000  // 
//register SPI_MCR_MTFE    0x04000000  // 
//register SPI_MCR_ROOE    0x01000000  // 
//register SPI_MCR_PCSIS(n)  (((n) & 0x1F) << 16)  //
//register SPI_MCR_DOZE    0x00008000  // 
//register SPI_MCR_MDIS    0x00004000  // 
//register SPI_MCR_DIS_TXF    0x00002000  // 
//register SPI_MCR_DIS_RXF    0x00001000  // 
//register SPI_MCR_CLR_TXF    0x00000800  // 
//register SPI_MCR_CLR_RXF    0x00000400  // 
//register SPI_MCR_SMPL_PT(n)  (((n) & 3) << 8)  //
//register SPI_MCR_HALT    0x00000001  // 
//register SPI0_TCR   0x4002C008 // DSPI Transfer Count Register
//register SPI0_CTAR0   0x4002C00C // DSPI Clock and Transfer Attributes Register, In Master Mode
//register SPI_CTAR_DBR    0x80000000  // Double Baud Rate
//register SPI_CTAR_FMSZ(n)  (((n) & 15) << 27)  // Frame Size (+1)
//register SPI_CTAR_CPOL    0x04000000  // Clock Polarity
//register SPI_CTAR_CPHA    0x02000000  // Clock Phase
//register SPI_CTAR_LSBFE    0x01000000  // LSB First
//register SPI_CTAR_PCSSCK(n)  (((n) & 3) << 22)  // PCS to SCK Delay Prescaler
//register SPI_CTAR_PASC(n)  (((n) & 3) << 20)  // After SCK Delay Prescaler
//register SPI_CTAR_PDT(n)   (((n) & 3) << 18)  // Delay after Transfer Prescaler
//register SPI_CTAR_PBR(n)   (((n) & 3) << 16)  // Baud Rate Prescaler
//register SPI_CTAR_CSSCK(n)  (((n) & 15) << 12)  // PCS to SCK Delay Scaler
//register SPI_CTAR_ASC(n)   (((n) & 15) << 8)  // After SCK Delay Scaler
//register SPI_CTAR_DT(n)   (((n) & 15) << 4)  // Delay After Transfer Scaler
//register SPI_CTAR_BR(n)   (((n) & 15) << 0)  // Baud Rate Scaler
//register SPI0_CTAR0_SLAVE  0x4002C00C // DSPI Clock and Transfer Attributes Register, In Slave Mode
//register SPI0_CTAR1   0x4002C010 // DSPI Clock and Transfer Attributes Register, In Master Mode
//register SPI0_SR    0x4002C02C // DSPI Status Register
//register SPI_SR_TCF    0x80000000  // Transfer Complete Flag
//register SPI_SR_TXRXS    0x40000000  // TX and RX Status
//register SPI_SR_EOQF    0x10000000  // End of Queue Flag
//register SPI_SR_TFUF    0x08000000  // Transmit FIFO Underflow Flag
//register SPI_SR_TFFF    0x02000000  // Transmit FIFO Fill Flag
//register SPI_SR_RFOF    0x00080000  // Receive FIFO Overflow Flag
//register SPI_SR_RFDF    0x00020000  // Receive FIFO Drain Flag
//register SPI0_RSER   0x4002C030 // DSPI DMA/Interrupt Request Select and Enable Register
//register SPI_RSER_TCF_RE    0x80000000  // Transmission Complete Request Enable
//register SPI_RSER_EOQF_RE   0x10000000  // DSPI Finished Request Request Enable
//register SPI_RSER_TFUF_RE   0x08000000  // Transmit FIFO Underflow Request Enable
//register SPI_RSER_TFFF_RE   0x02000000  // Transmit FIFO Fill Request Enable
//register SPI_RSER_TFFF_DIRS   0x01000000  // Transmit FIFO FIll Dma or Interrupt Request Select
//register SPI_RSER_RFOF_RE   0x00080000  // Receive FIFO Overflow Request Enable
//register SPI_RSER_RFDF_RE   0x00020000  // Receive FIFO Drain Request Enable
//register SPI_RSER_RFDF_DIRS   0x00010000  // Receive FIFO Drain DMA or Interrupt Request Select
//register SPI0_PUSHR   0x4002C034 // DSPI PUSH TX FIFO Register In Master Mode
//register SPI_PUSHR_CONT    0x80000000  // 
//register SPI_PUSHR_CTAS(n)  (((n) & 7) << 28)  // 
//register SPI_PUSHR_EOQ    0x08000000  // 
//register SPI_PUSHR_CTCNT    0x04000000  // 
//register SPI_PUSHR_PCS(n)  (((n) & 31) << 16)  //
//register SPI0_PUSHR_SLAVE  0x4002C034 // DSPI PUSH TX FIFO Register In Slave Mode
//register SPI0_POPR   0x4002C038 // DSPI POP RX FIFO Register
//register SPI0_TXFR0   0x4002C03C // DSPI Transmit FIFO Registers
//register SPI0_TXFR1   0x4002C040 // DSPI Transmit FIFO Registers
//register SPI0_TXFR2   0x4002C044 // DSPI Transmit FIFO Registers
//register SPI0_TXFR3   0x4002C048 // DSPI Transmit FIFO Registers
//register SPI0_RXFR0   0x4002C07C // DSPI Receive FIFO Registers
//register SPI0_RXFR1   0x4002C080 // DSPI Receive FIFO Registers
//register SPI0_RXFR2   0x4002C084 // DSPI Receive FIFO Registers
//register SPI0_RXFR3   0x4002C088 // DSPI Receive FIFO Registers
//typedef struct {
// volatile uint32_t MCR; // 0
// volatile uint32_t unused1;// 4
// volatile uint32_t TCR; // 8
// volatile uint32_t CTAR0; // c
// volatile uint32_t CTAR1; // 10
// volatile uint32_t CTAR2; // 14
// volatile uint32_t CTAR3; // 18
// volatile uint32_t CTAR4; // 1c
// volatile uint32_t CTAR5; // 20
// volatile uint32_t CTAR6; // 24
// volatile uint32_t CTAR7; // 28
// volatile uint32_t SR; // 2c
// volatile uint32_t RSER; // 30
// volatile uint32_t PUSHR; // 34
// volatile uint32_t POPR; // 38
// volatile uint32_t TXFR[16]; // 3c
// volatile uint32_t RXFR[16]; // 7c
//} SPI_t;
//register SPI0  (*(SPI_t *)0x4002C000)
//
//// Chapter 44: Inter-Integrated Circuit (I2C)
//register I2C0_A1   *(volatile uint8_t  *)0x40066000 // I2C Address Register 1
//register I2C0_F   *(volatile uint8_t  *)0x40066001 // I2C Frequency Divider register
//register I2C0_C1   *(volatile uint8_t  *)0x40066002 // I2C Control Register 1
//register I2C_C1_IICEN   (uint8_t)0x80   // I2C Enable
//register I2C_C1_IICIE   (uint8_t)0x40   // I2C Interrupt Enable
//register I2C_C1_MST   (uint8_t)0x20   // Master Mode Select
//register I2C_C1_TX   (uint8_t)0x10   // Transmit Mode Select
//register I2C_C1_TXAK   (uint8_t)0x08   // Transmit Acknowledge Enable
//register I2C_C1_RSTA   (uint8_t)0x04   // RepeSTART
//register I2C_C1_WUEN   (uint8_t)0x02   // Wakeup Enable
//register I2C_C1_DMAEN   (uint8_t)0x01   // DMA Enable
//register I2C0_S   *(volatile uint8_t  *)0x40066003 // I2C Status register
//register I2C_S_TCF   (uint8_t)0x80   // Transfer Complete Flag
//register I2C_S_IAAS   (uint8_t)0x40   // Addressed As A Slave
//register I2C_S_BUSY   (uint8_t)0x20   // Bus Busy
//register I2C_S_ARBL   (uint8_t)0x10   // Arbitration Lost
//register I2C_S_RAM   (uint8_t)0x08   // Range Address Match
//register I2C_S_SRW   (uint8_t)0x04   // Slave Read/Write
//register I2C_S_IICIF   (uint8_t)0x02   // Interrupt Flag
//register I2C_S_RXAK   (uint8_t)0x01   // Receive Acknowledge
//register I2C0_D   *(volatile uint8_t  *)0x40066004 // I2C Data I/O register
//register I2C0_C2   *(volatile uint8_t  *)0x40066005 // I2C Control Register 2
//register I2C_C2_GCAEN   (uint8_t)0x80   // General Call Address Enable
//register I2C_C2_ADEXT   (uint8_t)0x40   // Address Extension
//register I2C_C2_HDRS   (uint8_t)0x20   // High Drive Select
//register I2C_C2_SBRC   (uint8_t)0x10   // Slave Baud Rate Control
//register I2C_C2_RMEN   (uint8_t)0x08   // Range Address Matching Enable
//register I2C_C2_AD(n)   ((n) & 7)   // Slave Address, upper 3 bits
//register I2C0_FLT  *(volatile uint8_t  *)0x40066006 // I2C Programmable Input Glitch Filter register
//register I2C0_RA   *(volatile uint8_t  *)0x40066007 // I2C Range Address register
//register I2C0_SMB  *(volatile uint8_t  *)0x40066008 // I2C SMBus Control and Status register
//register I2C0_A2   *(volatile uint8_t  *)0x40066009 // I2C Address Register 2
//register I2C0_SLTH  *(volatile uint8_t  *)0x4006600A // I2C SCL Low Timeout Register High
//register I2C0_SLTL  *(volatile uint8_t  *)0x4006600B // I2C SCL Low Timeout Register Low
//
//register I2C1_A1   *(volatile uint8_t  *)0x40067000 // I2C Address Register 1
//register I2C1_F   *(volatile uint8_t  *)0x40067001 // I2C Frequency Divider register
//register I2C1_C1   *(volatile uint8_t  *)0x40067002 // I2C Control Register 1
//register I2C1_S   *(volatile uint8_t  *)0x40067003 // I2C Status register
//register I2C1_D   *(volatile uint8_t  *)0x40067004 // I2C Data I/O register
//register I2C1_C2   *(volatile uint8_t  *)0x40067005 // I2C Control Register 2
//register I2C1_FLT  *(volatile uint8_t  *)0x40067006 // I2C Programmable Input Glitch Filter register
//register I2C1_RA   *(volatile uint8_t  *)0x40067007 // I2C Range Address register
//register I2C1_SMB  *(volatile uint8_t  *)0x40067008 // I2C SMBus Control and Status register
//register I2C1_A2   *(volatile uint8_t  *)0x40067009 // I2C Address Register 2
//register I2C1_SLTH  *(volatile uint8_t  *)0x4006700A // I2C SCL Low Timeout Register High
//register I2C1_SLTL  *(volatile uint8_t  *)0x4006700B // I2C SCL Low Timeout Register Low
//
//// Chapter 45: Universal Asynchronous Receiver/Transmitter (UART)
//register UART0_BDH  *(volatile uint8_t  *)0x4006A000 // UART Baud Rate Registers: High
//register UART0_BDL  *(volatile uint8_t  *)0x4006A001 // UART Baud Rate Registers: Low
//register UART0_C1  *(volatile uint8_t  *)0x4006A002 // UART Control Register 1
//register UART_C1_LOOPS   (uint8_t)0x80   // When LOOPS is set, the RxD pin is disconnected from the UART and the transmitter output is internally connected to the receiver input
//register UART_C1_UARTSWAI  (uint8_t)0x40   // UART Stops in Wait Mode
//register UART_C1_RSRC   (uint8_t)0x20   // When LOOPS is set, the RSRC field determines the source for the receiver shift register input
//register UART_C1_M   (uint8_t)0x10   // 9-bit or 8-bit Mode Select
//register UART_C1_WAKE   (uint8_t)0x08   // Determines which condition wakes the UART
//register UART_C1_ILT   (uint8_t)0x04   // Idle Line Type Select
//register UART_C1_PE   (uint8_t)0x02   // Parity Enable
//register UART_C1_PT   (uint8_t)0x01   // Parity Type, 0=even, 1=odd
//register UART0_C2  *(volatile uint8_t  *)0x4006A003 // UART Control Register 2
//register UART_C2_TIE   (uint8_t)0x80   // Transmitter Interrupt or DMA Transfer Enable.
//register UART_C2_TCIE   (uint8_t)0x40   // Transmission Complete Interrupt Enable
//register UART_C2_RIE   (uint8_t)0x20   // Receiver Full Interrupt or DMA Transfer Enable
//register UART_C2_ILIE   (uint8_t)0x10   // Idle Line Interrupt Enable
//register UART_C2_TE   (uint8_t)0x08   // Transmitter Enable
//register UART_C2_RE   (uint8_t)0x04   // Receiver Enable
//register UART_C2_RWU   (uint8_t)0x02   // Receiver Wakeup Control
//register UART_C2_SBK   (uint8_t)0x01   // Send Break
//register UART0_S1  *(volatile uint8_t  *)0x4006A004 // UART Status Register 1
//register UART_S1_TDRE   (uint8_t)0x80   // Transmit Data Register Empty Flag
//register UART_S1_TC   (uint8_t)0x40   // Transmit Complete Flag
//register UART_S1_RDRF   (uint8_t)0x20   // Receive Data Register Full Flag
//register UART_S1_IDLE   (uint8_t)0x10   // Idle Line Flag
//register UART_S1_OR   (uint8_t)0x08   // Receiver Overrun Flag
//register UART_S1_NF   (uint8_t)0x04   // Noise Flag
//register UART_S1_FE   (uint8_t)0x02   // Framing Error Flag
//register UART_S1_PF   (uint8_t)0x01   // Parity Error Flag
//register UART0_S2  *(volatile uint8_t  *)0x4006A005 // UART Status Register 2
//register UART0_C3  *(volatile uint8_t  *)0x4006A006 // UART Control Register 3
//register UART0_D   *(volatile uint8_t  *)0x4006A007 // UART Data Register
//register UART0_MA1  *(volatile uint8_t  *)0x4006A008 // UART Match Address Registers 1
//register UART0_MA2  *(volatile uint8_t  *)0x4006A009 // UART Match Address Registers 2
//register UART0_C4  *(volatile uint8_t  *)0x4006A00A // UART Control Register 4
//register UART0_C5  *(volatile uint8_t  *)0x4006A00B // UART Control Register 5
//register UART0_ED  *(volatile uint8_t  *)0x4006A00C // UART Extended Data Register
//register UART0_MODEM  *(volatile uint8_t  *)0x4006A00D // UART Modem Register
//register UART0_IR  *(volatile uint8_t  *)0x4006A00E // UART Infrared Register
//register UART0_PFIFO  *(volatile uint8_t  *)0x4006A010 // UART FIFO Parameters
//register UART_PFIFO_TXFE   (uint8_t)0x80
//register UART_PFIFO_RXFE   (uint8_t)0x08
//register UART0_CFIFO  *(volatile uint8_t  *)0x4006A011 // UART FIFO Control Register
//register UART_CFIFO_TXFLUSH  (uint8_t)0x80   // 
//register UART_CFIFO_RXFLUSH  (uint8_t)0x40   // 
//register UART_CFIFO_RXOFE  (uint8_t)0x04   // 
//register UART_CFIFO_TXOFE  (uint8_t)0x02   // 
//register UART_CFIFO_RXUFE  (uint8_t)0x01   // 
//register UART0_SFIFO  *(volatile uint8_t  *)0x4006A012 // UART FIFO Status Register
//register UART_SFIFO_TXEMPT  (uint8_t)0x80
//register UART_SFIFO_RXEMPT  (uint8_t)0x40
//register UART_SFIFO_RXOF   (uint8_t)0x04
//register UART_SFIFO_TXOF   (uint8_t)0x02
//register UART_SFIFO_RXUF   (uint8_t)0x01
//register UART0_TWFIFO  *(volatile uint8_t  *)0x4006A013 // UART FIFO Transmit Watermark
//register UART0_TCFIFO  *(volatile uint8_t  *)0x4006A014 // UART FIFO Transmit Count
//register UART0_RWFIFO  *(volatile uint8_t  *)0x4006A015 // UART FIFO Receive Watermark
//register UART0_RCFIFO  *(volatile uint8_t  *)0x4006A016 // UART FIFO Receive Count
//register UART0_C7816  *(volatile uint8_t  *)0x4006A018 // UART 7816 Control Register
//register UART0_IE7816  *(volatile uint8_t  *)0x4006A019 // UART 7816 Interrupt Enable Register
//register UART0_IS7816  *(volatile uint8_t  *)0x4006A01A // UART 7816 Interrupt Status Register
//register UART0_WP7816T0  *(volatile uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register
//register UART0_WP7816T1  *(volatile uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register
//register UART0_WN7816  *(volatile uint8_t  *)0x4006A01C // UART 7816 Wait N Register
//register UART0_WF7816  *(volatile uint8_t  *)0x4006A01D // UART 7816 Wait FD Register
//register UART0_ET7816  *(volatile uint8_t  *)0x4006A01E // UART 7816 Error Threshold Register
//register UART0_TL7816  *(volatile uint8_t  *)0x4006A01F // UART 7816 Transmit Length Register
//register UART0_C6  *(volatile uint8_t  *)0x4006A021 // UART CEA709.1-B Control Register 6
//register UART0_PCTH  *(volatile uint8_t  *)0x4006A022 // UART CEA709.1-B Packet Cycle Time Counter High
//register UART0_PCTL  *(volatile uint8_t  *)0x4006A023 // UART CEA709.1-B Packet Cycle Time Counter Low
//register UART0_B1T  *(volatile uint8_t  *)0x4006A024 // UART CEA709.1-B Beta1 Timer
//register UART0_SDTH  *(volatile uint8_t  *)0x4006A025 // UART CEA709.1-B Secondary Delay Timer High
//register UART0_SDTL  *(volatile uint8_t  *)0x4006A026 // UART CEA709.1-B Secondary Delay Timer Low
//register UART0_PRE  *(volatile uint8_t  *)0x4006A027 // UART CEA709.1-B Preamble
//register UART0_TPL  *(volatile uint8_t  *)0x4006A028 // UART CEA709.1-B Transmit Packet Length
//register UART0_IE  *(volatile uint8_t  *)0x4006A029 // UART CEA709.1-B Interrupt Enable Register
//register UART0_WB  *(volatile uint8_t  *)0x4006A02A // UART CEA709.1-B WBASE
//register UART0_S3  *(volatile uint8_t  *)0x4006A02B // UART CEA709.1-B Status Register
//register UART0_S4  *(volatile uint8_t  *)0x4006A02C // UART CEA709.1-B Status Register
//register UART0_RPL  *(volatile uint8_t  *)0x4006A02D // UART CEA709.1-B Received Packet Length
//register UART0_RPREL  *(volatile uint8_t  *)0x4006A02E // UART CEA709.1-B Received Preamble Length
//register UART0_CPW  *(volatile uint8_t  *)0x4006A02F // UART CEA709.1-B Collision Pulse Width
//register UART0_RIDT  *(volatile uint8_t  *)0x4006A030 // UART CEA709.1-B Receive Indeterminate Time
//register UART0_TIDT  *(volatile uint8_t  *)0x4006A031 // UART CEA709.1-B Transmit Indeterminate Time
//register UART1_BDH  *(volatile uint8_t  *)0x4006B000 // UART Baud Rate Registers: High
//register UART1_BDL  *(volatile uint8_t  *)0x4006B001 // UART Baud Rate Registers: Low
//register UART1_C1  *(volatile uint8_t  *)0x4006B002 // UART Control Register 1
//register UART1_C2  *(volatile uint8_t  *)0x4006B003 // UART Control Register 2
//register UART1_S1  *(volatile uint8_t  *)0x4006B004 // UART Status Register 1
//register UART1_S2  *(volatile uint8_t  *)0x4006B005 // UART Status Register 2
//register UART1_C3  *(volatile uint8_t  *)0x4006B006 // UART Control Register 3
//register UART1_D   *(volatile uint8_t  *)0x4006B007 // UART Data Register
//register UART1_MA1  *(volatile uint8_t  *)0x4006B008 // UART Match Address Registers 1
//register UART1_MA2  *(volatile uint8_t  *)0x4006B009 // UART Match Address Registers 2
//register UART1_C4  *(volatile uint8_t  *)0x4006B00A // UART Control Register 4
//register UART1_C5  *(volatile uint8_t  *)0x4006B00B // UART Control Register 5
//register UART1_ED  *(volatile uint8_t  *)0x4006B00C // UART Extended Data Register
//register UART1_MODEM  *(volatile uint8_t  *)0x4006B00D // UART Modem Register
//register UART1_IR  *(volatile uint8_t  *)0x4006B00E // UART Infrared Register
//register UART1_PFIFO  *(volatile uint8_t  *)0x4006B010 // UART FIFO Parameters
//register UART1_CFIFO  *(volatile uint8_t  *)0x4006B011 // UART FIFO Control Register
//register UART1_SFIFO  *(volatile uint8_t  *)0x4006B012 // UART FIFO Status Register
//register UART1_TWFIFO  *(volatile uint8_t  *)0x4006B013 // UART FIFO Transmit Watermark
//register UART1_TCFIFO  *(volatile uint8_t  *)0x4006B014 // UART FIFO Transmit Count
//register UART1_RWFIFO  *(volatile uint8_t  *)0x4006B015 // UART FIFO Receive Watermark
//register UART1_RCFIFO  *(volatile uint8_t  *)0x4006B016 // UART FIFO Receive Count
//register UART1_C7816  *(volatile uint8_t  *)0x4006B018 // UART 7816 Control Register
//register UART1_IE7816  *(volatile uint8_t  *)0x4006B019 // UART 7816 Interrupt Enable Register
//register UART1_IS7816  *(volatile uint8_t  *)0x4006B01A // UART 7816 Interrupt Status Register
//register UART1_WP7816T0  *(volatile uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register
//register UART1_WP7816T1  *(volatile uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register
//register UART1_WN7816  *(volatile uint8_t  *)0x4006B01C // UART 7816 Wait N Register
//register UART1_WF7816  *(volatile uint8_t  *)0x4006B01D // UART 7816 Wait FD Register
//register UART1_ET7816  *(volatile uint8_t  *)0x4006B01E // UART 7816 Error Threshold Register
//register UART1_TL7816  *(volatile uint8_t  *)0x4006B01F // UART 7816 Transmit Length Register
//register UART1_C6  *(volatile uint8_t  *)0x4006B021 // UART CEA709.1-B Control Register 6
//register UART1_PCTH  *(volatile uint8_t  *)0x4006B022 // UART CEA709.1-B Packet Cycle Time Counter High
//register UART1_PCTL  *(volatile uint8_t  *)0x4006B023 // UART CEA709.1-B Packet Cycle Time Counter Low
//register UART1_B1T  *(volatile uint8_t  *)0x4006B024 // UART CEA709.1-B Beta1 Timer
//register UART1_SDTH  *(volatile uint8_t  *)0x4006B025 // UART CEA709.1-B Secondary Delay Timer High
//register UART1_SDTL  *(volatile uint8_t  *)0x4006B026 // UART CEA709.1-B Secondary Delay Timer Low
//register UART1_PRE  *(volatile uint8_t  *)0x4006B027 // UART CEA709.1-B Preamble
//register UART1_TPL  *(volatile uint8_t  *)0x4006B028 // UART CEA709.1-B Transmit Packet Length
//register UART1_IE  *(volatile uint8_t  *)0x4006B029 // UART CEA709.1-B Interrupt Enable Register
//register UART1_WB  *(volatile uint8_t  *)0x4006B02A // UART CEA709.1-B WBASE
//register UART1_S3  *(volatile uint8_t  *)0x4006B02B // UART CEA709.1-B Status Register
//register UART1_S4  *(volatile uint8_t  *)0x4006B02C // UART CEA709.1-B Status Register
//register UART1_RPL  *(volatile uint8_t  *)0x4006B02D // UART CEA709.1-B Received Packet Length
//register UART1_RPREL  *(volatile uint8_t  *)0x4006B02E // UART CEA709.1-B Received Preamble Length
//register UART1_CPW  *(volatile uint8_t  *)0x4006B02F // UART CEA709.1-B Collision Pulse Width
//register UART1_RIDT  *(volatile uint8_t  *)0x4006B030 // UART CEA709.1-B Receive Indeterminate Time
//register UART1_TIDT  *(volatile uint8_t  *)0x4006B031 // UART CEA709.1-B Transmit Indeterminate Time
//register UART2_BDH  *(volatile uint8_t  *)0x4006C000 // UART Baud Rate Registers: High
//register UART2_BDL  *(volatile uint8_t  *)0x4006C001 // UART Baud Rate Registers: Low
//register UART2_C1  *(volatile uint8_t  *)0x4006C002 // UART Control Register 1
//register UART2_C2  *(volatile uint8_t  *)0x4006C003 // UART Control Register 2
//register UART2_S1  *(volatile uint8_t  *)0x4006C004 // UART Status Register 1
//register UART2_S2  *(volatile uint8_t  *)0x4006C005 // UART Status Register 2
//register UART2_C3  *(volatile uint8_t  *)0x4006C006 // UART Control Register 3
//register UART2_D   *(volatile uint8_t  *)0x4006C007 // UART Data Register
//register UART2_MA1  *(volatile uint8_t  *)0x4006C008 // UART Match Address Registers 1
//register UART2_MA2  *(volatile uint8_t  *)0x4006C009 // UART Match Address Registers 2
//register UART2_C4  *(volatile uint8_t  *)0x4006C00A // UART Control Register 4
//register UART2_C5  *(volatile uint8_t  *)0x4006C00B // UART Control Register 5
//register UART2_ED  *(volatile uint8_t  *)0x4006C00C // UART Extended Data Register
//register UART2_MODEM  *(volatile uint8_t  *)0x4006C00D // UART Modem Register
//register UART2_IR  *(volatile uint8_t  *)0x4006C00E // UART Infrared Register
//register UART2_PFIFO  *(volatile uint8_t  *)0x4006C010 // UART FIFO Parameters
//register UART2_CFIFO  *(volatile uint8_t  *)0x4006C011 // UART FIFO Control Register
//register UART2_SFIFO  *(volatile uint8_t  *)0x4006C012 // UART FIFO Status Register
//register UART2_TWFIFO  *(volatile uint8_t  *)0x4006C013 // UART FIFO Transmit Watermark
//register UART2_TCFIFO  *(volatile uint8_t  *)0x4006C014 // UART FIFO Transmit Count
//register UART2_RWFIFO  *(volatile uint8_t  *)0x4006C015 // UART FIFO Receive Watermark
//register UART2_RCFIFO  *(volatile uint8_t  *)0x4006C016 // UART FIFO Receive Count
//register UART2_C7816  *(volatile uint8_t  *)0x4006C018 // UART 7816 Control Register
//register UART2_IE7816  *(volatile uint8_t  *)0x4006C019 // UART 7816 Interrupt Enable Register
//register UART2_IS7816  *(volatile uint8_t  *)0x4006C01A // UART 7816 Interrupt Status Register
//register UART2_WP7816T0  *(volatile uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register
//register UART2_WP7816T1  *(volatile uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register
//register UART2_WN7816  *(volatile uint8_t  *)0x4006C01C // UART 7816 Wait N Register
//register UART2_WF7816  *(volatile uint8_t  *)0x4006C01D // UART 7816 Wait FD Register
//register UART2_ET7816  *(volatile uint8_t  *)0x4006C01E // UART 7816 Error Threshold Register
//register UART2_TL7816  *(volatile uint8_t  *)0x4006C01F // UART 7816 Transmit Length Register
//register UART2_C6  *(volatile uint8_t  *)0x4006C021 // UART CEA709.1-B Control Register 6
//register UART2_PCTH  *(volatile uint8_t  *)0x4006C022 // UART CEA709.1-B Packet Cycle Time Counter High
//register UART2_PCTL  *(volatile uint8_t  *)0x4006C023 // UART CEA709.1-B Packet Cycle Time Counter Low
//register UART2_B1T  *(volatile uint8_t  *)0x4006C024 // UART CEA709.1-B Beta1 Timer
//register UART2_SDTH  *(volatile uint8_t  *)0x4006C025 // UART CEA709.1-B Secondary Delay Timer High
//register UART2_SDTL  *(volatile uint8_t  *)0x4006C026 // UART CEA709.1-B Secondary Delay Timer Low
//register UART2_PRE  *(volatile uint8_t  *)0x4006C027 // UART CEA709.1-B Preamble
//register UART2_TPL  *(volatile uint8_t  *)0x4006C028 // UART CEA709.1-B Transmit Packet Length
//register UART2_IE  *(volatile uint8_t  *)0x4006C029 // UART CEA709.1-B Interrupt Enable Register
//register UART2_WB  *(volatile uint8_t  *)0x4006C02A // UART CEA709.1-B WBASE
//register UART2_S3  *(volatile uint8_t  *)0x4006C02B // UART CEA709.1-B Status Register
//register UART2_S4  *(volatile uint8_t  *)0x4006C02C // UART CEA709.1-B Status Register
//register UART2_RPL  *(volatile uint8_t  *)0x4006C02D // UART CEA709.1-B Received Packet Length
//register UART2_RPREL  *(volatile uint8_t  *)0x4006C02E // UART CEA709.1-B Received Preamble Length
//register UART2_CPW  *(volatile uint8_t  *)0x4006C02F // UART CEA709.1-B Collision Pulse Width
//register UART2_RIDT  *(volatile uint8_t  *)0x4006C030 // UART CEA709.1-B Receive Indeterminate Time
//register UART2_TIDT  *(volatile uint8_t  *)0x4006C031 // UART CEA709.1-B Transmit Indeterminate Time
//
//// Chapter 46: Synchronous Audio Interface (SAI)
//register I2S0_TCSR   0x4002F000 // SAI Transmit Control Register
//register I2S_TCSR_TE    0x80000000 // Transmitter Enable
//register I2S_TCSR_STOPE    0x40000000 // Transmitter Enable in Stop mode
//register I2S_TCSR_DBGE    0x20000000 // Transmitter Enable in Debug mode
//register I2S_TCSR_BCE    0x10000000 // Bit Clock Enable
//register I2S_TCSR_FR    0x02000000 // FIFO Reset
//register I2S_TCSR_SR    0x01000000 // Software Reset
//register I2S_TCSR_WSF    0x00100000 // Word Start Flag
//register I2S_TCSR_SEF    0x00080000 // Sync Error Flag
//register I2S_TCSR_FEF    0x00040000 // FIFO Error Flag (underrun)
//register I2S_TCSR_FWF    0x00020000 // FIFO Warning Flag (empty)
//register I2S_TCSR_FRF    0x00010000 // FIFO Request Flag (Data Ready)
//register I2S_TCSR_WSIE    0x00001000 // Word Start Interrupt Enable
//register I2S_TCSR_SEIE    0x00000800 // Sync Error Interrupt Enable
//register I2S_TCSR_FEIE    0x00000400 // FIFO Error Interrupt Enable
//register I2S_TCSR_FWIE    0x00000200 // FIFO Warning Interrupt Enable
//register I2S_TCSR_FRIE    0x00000100 // FIFO Request Interrupt Enable
//register I2S_TCSR_FWDE    0x00000002 // FIFO Warning DMA Enable
//register I2S_TCSR_FRDE    0x00000001 // FIFO Request DMA Enable
//register I2S0_TCR1   0x4002F004 // SAI Transmit Configuration 1 Register
//register I2S_TCR1_TFW(n)   ( n & 0x03)       // Transmit FIFO watermark
//register I2S0_TCR2   0x4002F008 // SAI Transmit Configuration 2 Register
//register I2S_TCR2_DIV(n)   ( n & 0xff)       // Bit clock divide by (DIV+1)*2
//register I2S_TCR2_BCD   ( 1<<24)       // Bit clock direction
//register I2S_TCR2_BCP   ( 1<<25)       // Bit clock polarity
//register I2S_TCR2_MSEL(n)  ( (n & 3)<<26)       // MCLK select, 0=bus clock, 1=I2S0_MCLK
//register I2S_TCR2_BCI   ( 1<<28)       // Bit clock input
//register I2S_TCR2_BCS   ( 1<<29)       // Bit clock swap
//register I2S_TCR2_SYNC(n)  ( (n & 3)<<30)       // 0=async 1=sync with receiver
//register I2S0_TCR3   0x4002F00C // SAI Transmit Configuration 3 Register
//register I2S_TCR3_WDFL(n)  ( n & 0x0f)       // word flag configuration
//register I2S_TCR3_TCE   ( 0x10000)       // transmit channel enable
//register I2S0_TCR4   0x4002F010 // SAI Transmit Configuration 4 Register
//register I2S_TCR4_FSD   ( 1)        // Frame Sync Direction
//register I2S_TCR4_FSP   ( 2)        // Frame Sync Polarity
//register I2S_TCR4_FSE   ( 8)        // Frame Sync Early
//register I2S_TCR4_MF   ( 0x10)       // MSB First
//register I2S_TCR4_SYWD(n)  ( (n & 0x1f)<<8)     // Sync Width
//register I2S_TCR4_FRSZ(n)  ( (n & 0x0f)<<16)    // Frame Size
//register I2S0_TCR5   0x4002F014 // SAI Transmit Configuration 5 Register
//register I2S_TCR5_FBT(n)   ( (n & 0x1f)<<8)     // First Bit Shifted
//register I2S_TCR5_W0W(n)   ( (n & 0x1f)<<16)    // Word 0 Width
//register I2S_TCR5_WNW(n)   ( (n & 0x1f)<<24)    // Word N Width
//register I2S0_TDR0   0x4002F020 // SAI Transmit Data Register
//register I2S0_TDR1   0x4002F024 // SAI Transmit Data Register
//register I2S0_TFR0   0x4002F040 // SAI Transmit FIFO Register
//register I2S0_TFR1   0x4002F044 // SAI Transmit FIFO Register
//register I2S_TFR_RFP(n)   ( n & 7)       // read FIFO pointer
//register I2S_TFR_WFP(n)   ( (n & 7)<<16)       // write FIFO pointer
//register I2S0_TMR   0x4002F060 // SAI Transmit Mask Register
//register I2S_TMR_TWM(n)   ( n & 0xFFFFFFFF)
//register I2S0_RCSR   0x4002F080 // SAI Receive Control Register
//register I2S_RCSR_RE    0x80000000 // Receiver Enable
//register I2S_RCSR_STOPE    0x40000000 // Receiver Enable in Stop mode
//register I2S_RCSR_DBGE    0x20000000 // Receiver Enable in Debug mode
//register I2S_RCSR_BCE    0x10000000 // Bit Clock Enable
//register I2S_RCSR_FR    0x02000000 // FIFO Reset
//register I2S_RCSR_SR    0x01000000 // Software Reset
//register I2S_RCSR_WSF    0x00100000 // Word Start Flag
//register I2S_RCSR_SEF    0x00080000 // Sync Error Flag
//register I2S_RCSR_FEF    0x00040000 // FIFO Error Flag (underrun)
//register I2S_RCSR_FWF    0x00020000 // FIFO Warning Flag (empty)
//register I2S_RCSR_FRF    0x00010000 // FIFO Request Flag (Data Ready)
//register I2S_RCSR_WSIE    0x00001000 // Word Start Interrupt Enable
//register I2S_RCSR_SEIE    0x00000800 // Sync Error Interrupt Enable
//register I2S_RCSR_FEIE    0x00000400 // FIFO Error Interrupt Enable
//register I2S_RCSR_FWIE    0x00000200 // FIFO Warning Interrupt Enable
//register I2S_RCSR_FRIE    0x00000100 // FIFO Request Interrupt Enable
//register I2S_RCSR_FWDE    0x00000002 // FIFO Warning DMA Enable
//register I2S_RCSR_FRDE    0x00000001 // FIFO Request DMA Enable
//register I2S0_RCR1   0x4002F084 // SAI Receive Configuration 1 Register
//register I2S_RCR1_RFW(n)   ( n & 0x03)       // Receive FIFO watermark
//register I2S0_RCR2   0x4002F088 // SAI Receive Configuration 2 Register
//register I2S_RCR2_DIV(n)   ( n & 0xff)       // Bit clock divide by (DIV+1)*2
//register I2S_RCR2_BCD   ( 1<<24)       // Bit clock direction
//register I2S_RCR2_BCP   ( 1<<25)       // Bit clock polarity
//register I2S_RCR2_MSEL(n)  ( (n & 3)<<26)       // MCLK select, 0=bus clock, 1=I2S0_MCLK
//register I2S_RCR2_BCI   ( 1<<28)       // Bit clock input
//register I2S_RCR2_BCS   ( 1<<29)       // Bit clock swap
//register I2S_RCR2_SYNC(n)  ( (n & 3)<<30)       // 0=async 1=sync with receiver
//register I2S0_RCR3   0x4002F08C // SAI Receive Configuration 3 Register
//register I2S_RCR3_WDFL(n)  ( n & 0x0f)       // word flag configuration
//register I2S_RCR3_RCE   ( 0x10000)       // receive channel enable
//register I2S0_RCR4   0x4002F090 // SAI Receive Configuration 4 Register
//register I2S_RCR4_FSD   ( 1)        // Frame Sync Direction
//register I2S_RCR4_FSP   ( 2)        // Frame Sync Polarity
//register I2S_RCR4_FSE   ( 8)        // Frame Sync Early
//register I2S_RCR4_MF   ( 0x10)       // MSB First
//register I2S_RCR4_SYWD(n)  ( (n & 0x1f)<<8)     // Sync Width
//register I2S_RCR4_FRSZ(n)  ( (n & 0x0f)<<16)    // Frame Size
//register I2S0_RCR5   0x4002F094 // SAI Receive Configuration 5 Register
//register I2S_RCR5_FBT(n)   ( (n & 0x1f)<<8)     // First Bit Shifted
//register I2S_RCR5_W0W(n)   ( (n & 0x1f)<<16)    // Word 0 Width
//register I2S_RCR5_WNW(n)   ( (n & 0x1f)<<24)    // Word N Width
//register I2S0_RDR0   0x4002F0A0 // SAI Receive Data Register
//register I2S0_RDR1   0x4002F0A4 // SAI Receive Data Register
//register I2S0_RFR0   0x4002F0C0 // SAI Receive FIFO Register
//register I2S0_RFR1   0x4002F0C4 // SAI Receive FIFO Register
//register I2S_RFR_RFP(n)   ( n & 7)       // read FIFO pointer
//register I2S_RFR_WFP(n)   ( (n & 7)<<16)       // write FIFO pointer
//register I2S0_RMR   0x4002F0E0 // SAI Receive Mask Register
//register I2S_RMR_RWM(n)   ( n & 0xFFFFFFFF)
//register I2S0_MCR   0x4002F100 // SAI MCLK Control Register
//register I2S_MCR_DUF   ( 1<<31)       // Divider Update Flag
//register I2S_MCR_MOE   ( 1<<30)       // MCLK Output Enable
//register I2S_MCR_MICS(n)   ( (n & 3)<<24)       // MCLK Input Clock Select
//register I2S0_MDR   0x4002F104 // SAI MCLK Divide Register
//register I2S_MDR_FRACT(n)  ( (n & 0xff)<<12)    // MCLK Fraction
//register I2S_MDR_DIVIDE(n)  ( (n & 0xfff))       // MCLK Divide

// Chapter 47: General-Purpose Input/Output (GPIO)
register GPIOA_PDOR   at 0x400FF000 : UInt32 // Port Data Output Register
register GPIOA_PSOR   at 0x400FF004 : UInt32 // Port Set Output Register
register GPIOA_PCOR   at 0x400FF008 : UInt32 // Port Clear Output Register
register GPIOA_PTOR   at 0x400FF00C : UInt32 // Port Toggle Output Register
register GPIOA_PDIR   at 0x400FF010 : UInt32 // Port Data Input Register
register GPIOA_PDDR   at 0x400FF014 : UInt32 // Port Data Direction Register
register GPIOB_PDOR   at 0x400FF040 : UInt32 // Port Data Output Register
register GPIOB_PSOR   at 0x400FF044 : UInt32 // Port Set Output Register
register GPIOB_PCOR   at 0x400FF048 : UInt32 // Port Clear Output Register
register GPIOB_PTOR   at 0x400FF04C : UInt32 // Port Toggle Output Register
register GPIOB_PDIR   at 0x400FF050 : UInt32 // Port Data Input Register
register GPIOB_PDDR   at 0x400FF054 : UInt32 // Port Data Direction Register
register GPIOC_PDOR   at 0x400FF080 : UInt32 // Port Data Output Register
register GPIOC_PSOR   at 0x400FF084 : UInt32 // Port Set Output Register
register GPIOC_PCOR   at 0x400FF088 : UInt32 // Port Clear Output Register
register GPIOC_PTOR   at 0x400FF08C : UInt32 // Port Toggle Output Register
register GPIOC_PDIR   at 0x400FF090 : UInt32 // Port Data Input Register
register GPIOC_PDDR   at 0x400FF094 : UInt32 // Port Data Direction Register
register GPIOD_PDOR   at 0x400FF0C0 : UInt32 // Port Data Output Register
register GPIOD_PSOR   at 0x400FF0C4 : UInt32 // Port Set Output Register
register GPIOD_PCOR   at 0x400FF0C8 : UInt32 // Port Clear Output Register
register GPIOD_PTOR   at 0x400FF0CC : UInt32 // Port Toggle Output Register
register GPIOD_PDIR   at 0x400FF0D0 : UInt32 // Port Data Input Register
register GPIOD_PDDR   at 0x400FF0D4 : UInt32 // Port Data Direction Register
register GPIOE_PDOR   at 0x400FF100 : UInt32 // Port Data Output Register
register GPIOE_PSOR   at 0x400FF104 : UInt32 // Port Set Output Register
register GPIOE_PCOR   at 0x400FF108 : UInt32 // Port Clear Output Register
register GPIOE_PTOR   at 0x400FF10C : UInt32 // Port Toggle Output Register
register GPIOE_PDIR   at 0x400FF110 : UInt32 // Port Data Input Register
register GPIOE_PDDR   at 0x400FF114 : UInt32 // Port Data Direction Register
//
//// Chapter 48: Touch sense input (TSI)
//register TSI0_GENCS   0x40045000 // General Control and Status Register
//register TSI_GENCS_LPCLKS   0x10000000  // 
//register TSI_GENCS_LPSCNITV(n)  (((n) & 15) << 24)  // 
//register TSI_GENCS_NSCN(n)  (((n) & 31) << 19)  // 
//register TSI_GENCS_PS(n)   (((n) & 7) << 16)  // 
//register TSI_GENCS_EOSF    0x00008000  // 
//register TSI_GENCS_OUTRGF   0x00004000  // 
//register TSI_GENCS_EXTERF   0x00002000  // 
//register TSI_GENCS_OVRF    0x00001000  // 
//register TSI_GENCS_SCNIP    0x00000200  // 
//register TSI_GENCS_SWTS    0x00000100  // 
//register TSI_GENCS_TSIEN    0x00000080  // 
//register TSI_GENCS_TSIIE    0x00000040  // 
//register TSI_GENCS_ERIE    0x00000020  // 
//register TSI_GENCS_ESOR    0x00000010  // 
//register TSI_GENCS_STM    0x00000002  // 
//register TSI_GENCS_STPE    0x00000001  // 
//register TSI0_SCANC   0x40045004 // SCAN Control Register
//register TSI_SCANC_REFCHRG(n)  (((n) & 15) << 24)  // 
//register TSI_SCANC_EXTCHRG(n)  (((n) & 7) << 16)  // 
//register TSI_SCANC_SMOD(n)  (((n) & 255) << 8)  // 
//register TSI_SCANC_AMCLKS(n)  (((n) & 3) << 3)  // 
//register TSI_SCANC_AMPSC(n)  (((n) & 7) << 0)  // 
//register TSI0_PEN   0x40045008 // Pin Enable Register
//register TSI0_WUCNTR   0x4004500C // Wake-Up Channel Counter Register
//register TSI0_CNTR1   0x40045100 // Counter Register
//register TSI0_CNTR3   0x40045104 // Counter Register
//register TSI0_CNTR5   0x40045108 // Counter Register
//register TSI0_CNTR7   0x4004510C // Counter Register
//register TSI0_CNTR9   0x40045110 // Counter Register
//register TSI0_CNTR11   0x40045114 // Counter Register
//register TSI0_CNTR13   0x40045118 // Counter Register
//register TSI0_CNTR15   0x4004511C // Counter Register
//register TSI0_THRESHOLD   0x40045120 // Low Power Channel Threshold Register
//
//// Nested Vectored Interrupt Controller, Table 3-4 & ARMv7 ref, appendix B3.4 (page 750)
//register NVIC_ENABLE_IRQ(n) (*((volatile uint32_t *)0xE000E100 + (n >> 5)) = (1 << (n & 31)))
//register NVIC_DISABLE_IRQ(n) (*((volatile uint32_t *)0xE000E180 + (n >> 5)) = (1 << (n & 31)))
//register NVIC_SET_PENDING(n) (*((volatile uint32_t *)0xE000E200 + (n >> 5)) = (1 << (n & 31)))
//register NVIC_CLEAR_PENDING(n) (*((volatile uint32_t *)0xE000E280 + (n >> 5)) = (1 << (n & 31)))
//
//register NVIC_ISER0   0xE000E100
//register NVIC_ISER1   0xE000E104
//register NVIC_ICER0   0xE000E180
//register NVIC_ICER1   0xE000E184
//
//// 0 = highest priority
//// Cortex-M4: 0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240
//// Cortex-M0: 0,64,128,192
//register NVIC_SET_PRIORITY(irqnum, priority)  (*((volatile uint8_t *)0xE000E400 + (irqnum)) = (uint8_t)(priority))
//register NVIC_GET_PRIORITY(irqnum) (*((uint8_t *)0xE000E400 + (irqnum)))
//
//register IRQ_DMA_CH0  0
//register IRQ_DMA_CH1  1
//register IRQ_DMA_CH2  2
//register IRQ_DMA_CH3  3
//register IRQ_DMA_CH4  4
//register IRQ_DMA_CH5  5
//register IRQ_DMA_CH6  6
//register IRQ_DMA_CH7  7
//register IRQ_DMA_CH8  8
//register IRQ_DMA_CH9  9
//register IRQ_DMA_CH10  10
//register IRQ_DMA_CH11  11
//register IRQ_DMA_CH12  12
//register IRQ_DMA_CH13  13
//register IRQ_DMA_CH14  14
//register IRQ_DMA_CH15  15
//register IRQ_DMA_ERROR  16
//register IRQ_FTFL_COMPLETE 18
//register IRQ_FTFL_COLLISION 19
//register IRQ_LOW_VOLTAGE  20
//register IRQ_LLWU  21
//register IRQ_WDOG  22
//register IRQ_I2C0  24
//register IRQ_I2C1  25
//register IRQ_SPI0  26
//register IRQ_SPI1  27
//register IRQ_CAN_MESSAGE  29
//register IRQ_CAN_BUS_OFF  30
//register IRQ_CAN_ERROR  31
//register IRQ_CAN_TX_WARN  32
//register IRQ_CAN_RX_WARN  33
//register IRQ_CAN_WAKEUP  34
//register IRQ_I2S0_TX  35
//register IRQ_I2S0_RX  36
//register IRQ_UART0_LON  44
//register IRQ_UART0_STATUS 45
//register IRQ_UART0_ERROR  46
//register IRQ_UART1_STATUS 47
//register IRQ_UART1_ERROR  48
//register IRQ_UART2_STATUS 49
//register IRQ_UART2_ERROR  50
//register IRQ_ADC0  57
//register IRQ_ADC1  58
//register IRQ_CMP0  59
//register IRQ_CMP1  60
//register IRQ_CMP2  61
//register IRQ_FTM0  62
//register IRQ_FTM1  63
//register IRQ_FTM2  64
//register IRQ_CMT   65
//register IRQ_RTC_ALARM  66
//register IRQ_RTC_SECOND  67
//register IRQ_PIT_CH0  68
//register IRQ_PIT_CH1  69
//register IRQ_PIT_CH2  70
//register IRQ_PIT_CH3  71
//register IRQ_PDB   72
//register IRQ_USBOTG  73
//register IRQ_USBDCD  74
//register IRQ_DAC0  81
//register IRQ_TSI   83
//register IRQ_MCG   84
//register IRQ_LPTMR  85
//register IRQ_PORTA  87
//register IRQ_PORTB  88
//register IRQ_PORTC  89
//register IRQ_PORTD  90
//register IRQ_PORTE  91
//register IRQ_SOFTWARE  94
//register NVIC_NUM_INTERRUPTS 95
//
//// System Control Space (SCS), ARMv7 ref manual, B3.2, page 708
//register SCB_CPUID  *(const    uint32_t *)0xE000ED00 // CPUID Base Register

register ICSR at 0xE000_ED04 : UInt32 { // Interrupt Control and State
  NMIPENDSET, 2, PENDSVSET, PENDSVCLR, PENDSTSET, PENDSTCLR, 1, ISRPREEMPT,
  ISRPENDING, 1, VECTPENDING[9], RETTOBASE, 2, VECTACTIVE[9]
}

//register SCB_VTOR   0xE000ED08 // Vector Table Offset

register AIRCR at 0xE000ED0C : UInt32 { // Application Interrupt and Reset Control
  VECTKEY[16], ENDIANNESS, 4, PRIGROUP[3],
  5, SYSRESETREQ, VECTCLRACTIVE, VECTRESET 
}

//register SCB_SCR    0xE000ED10 // System Control Register
//register SCB_CCR    0xE000ED14 // Configuration and Control
//register SCB_SHPR1   0xE000ED18 // System Handler Priority Register 1
//register SCB_SHPR2   0xE000ED1C // System Handler Priority Register 2
//register SCB_SHPR3   0xE000ED20 // System Handler Priority Register 3
//register SCB_SHCSR   0xE000ED24 // System Handler Control and State
//register SCB_CFSR   0xE000ED28 // Configurable Fault Status Register
//register SCB_HFSR   0xE000ED2C // HardFault Status
//register SCB_DFSR   0xE000ED30 // Debug Fault Status
//register SCB_MMFAR   0xE000ED34 // MemManage Fault Address

register SYST_CSR at 0xE000_E010 // SysTick Control and Status
  : UInt32 {15, COUNTFLAG, 13, CLKSOURCE, TICKINT, ENABLE}


register SYST_RVR   at 0xE000_E014 : UInt32 // SysTick Reload Value Register
register SYST_CVR   at 0xE000_E018 : UInt32 // SysTick Current Value Register
register SYST_CALIB  @ro at 0xE000_E01C : UInt32 // SysTick Calibration Value


//register ARM_DEMCR   0xE000EDFC // Debug Exception and Monitor Control
//register ARM_DEMCR_TRCENA  (1 << 24)  // Enable debugging & monitoring blocks
//register ARM_DWT_CTRL   0xE0001000 // DWT control register
//register ARM_DWT_CTRL_CYCCNTENA  (1 << 0)  // Enable cycle count
//register ARM_DWT_CYCCNT   0xE0001004 // Cycle count register
