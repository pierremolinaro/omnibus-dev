#pragma once

//------------------------------------------------------------------------------
// STM32F767: STM32F767
//------------------------------------------------------------------------------

#include <stdint.h>

//------------------------------------------------------------------------------
// Peripheral AC: Access control
//------------------------------------------------------------------------------

//---  Register ITCMCR: Instruction and Data Tightly-Coupled Memory Control Registers
  #define AC_ITCMCR (* ((volatile uint32_t *) (0xE000EF90 + 0)))

  // Field EN: EN
    const uint32_t AC_ITCMCR_EN = 1U << 0 ;

  // Field RMW: RMW
    const uint32_t AC_ITCMCR_RMW = 1U << 1 ;

  // Field RETEN: RETEN
    const uint32_t AC_ITCMCR_RETEN = 1U << 2 ;

  // Field SZ: SZ
    inline uint32_t AC_ITCMCR_SZ (const uint32_t inValue) {return (inValue & 0xFU) << 3 ; }

//------------------------------------------------------------------------------

//---  Register DTCMCR: Instruction and Data Tightly-Coupled Memory Control Registers
  #define AC_DTCMCR (* ((volatile uint32_t *) (0xE000EF90 + 4)))

  // Field EN: EN
    const uint32_t AC_DTCMCR_EN = 1U << 0 ;

  // Field RMW: RMW
    const uint32_t AC_DTCMCR_RMW = 1U << 1 ;

  // Field RETEN: RETEN
    const uint32_t AC_DTCMCR_RETEN = 1U << 2 ;

  // Field SZ: SZ
    inline uint32_t AC_DTCMCR_SZ (const uint32_t inValue) {return (inValue & 0xFU) << 3 ; }

//------------------------------------------------------------------------------

//---  Register AHBPCR: AHBP Control register
  #define AC_AHBPCR (* ((volatile uint32_t *) (0xE000EF90 + 8)))

  // Field EN: EN
    const uint32_t AC_AHBPCR_EN = 1U << 0 ;

  // Field SZ: SZ
    inline uint32_t AC_AHBPCR_SZ (const uint32_t inValue) {return (inValue & 0x7U) << 1 ; }

//------------------------------------------------------------------------------

//---  Register CACR: Auxiliary Cache Control register
  #define AC_CACR (* ((volatile uint32_t *) (0xE000EF90 + 12)))

  // Field SIWT: SIWT
    const uint32_t AC_CACR_SIWT = 1U << 0 ;

  // Field ECCEN: ECCEN
    const uint32_t AC_CACR_ECCEN = 1U << 1 ;

  // Field FORCEWT: FORCEWT
    const uint32_t AC_CACR_FORCEWT = 1U << 2 ;

//------------------------------------------------------------------------------

//---  Register AHBSCR: AHB Slave Control register
  #define AC_AHBSCR (* ((volatile uint32_t *) (0xE000EF90 + 16)))

  // Field CTL: CTL
    inline uint32_t AC_AHBSCR_CTL (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field TPRI: TPRI
    inline uint32_t AC_AHBSCR_TPRI (const uint32_t inValue) {return (inValue & 0x1FFU) << 2 ; }

  // Field INITCOUNT: INITCOUNT
    inline uint32_t AC_AHBSCR_INITCOUNT (const uint32_t inValue) {return (inValue & 0x1FU) << 11 ; }

//------------------------------------------------------------------------------

//---  Register ABFSR: Auxiliary Bus Fault Status register
  #define AC_ABFSR (* ((volatile uint32_t *) (0xE000EF90 + 24)))

  // Field ITCM: ITCM
    const uint32_t AC_ABFSR_ITCM = 1U << 0 ;

  // Field DTCM: DTCM
    const uint32_t AC_ABFSR_DTCM = 1U << 1 ;

  // Field AHBP: AHBP
    const uint32_t AC_ABFSR_AHBP = 1U << 2 ;

  // Field AXIM: AXIM
    const uint32_t AC_ABFSR_AXIM = 1U << 3 ;

  // Field EPPB: EPPB
    const uint32_t AC_ABFSR_EPPB = 1U << 4 ;

  // Field AXIMTYPE: AXIMTYPE
    inline uint32_t AC_ABFSR_AXIMTYPE (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

//------------------------------------------------------------------------------
// Peripheral ADC1: Analog-to-digital converter
//------------------------------------------------------------------------------

//---  Register SR: status register
  #define ADC1_SR (* ((volatile uint32_t *) (0x40012000 + 0)))

  // Field OVR: Overrun
    const uint32_t ADC1_SR_OVR = 1U << 5 ;

  // Field STRT: Regular channel start flag
    const uint32_t ADC1_SR_STRT = 1U << 4 ;

  // Field JSTRT: Injected channel start flag
    const uint32_t ADC1_SR_JSTRT = 1U << 3 ;

  // Field JEOC: Injected channel end of conversion
    const uint32_t ADC1_SR_JEOC = 1U << 2 ;

  // Field EOC: Regular channel end of conversion
    const uint32_t ADC1_SR_EOC = 1U << 1 ;

  // Field AWD: Analog watchdog flag
    const uint32_t ADC1_SR_AWD = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define ADC1_CR1 (* ((volatile uint32_t *) (0x40012000 + 4)))

  // Field OVRIE: Overrun interrupt enable
    const uint32_t ADC1_CR1_OVRIE = 1U << 26 ;

  // Field RES: Resolution
    inline uint32_t ADC1_CR1_RES (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field AWDEN: Analog watchdog enable on regular channels
    const uint32_t ADC1_CR1_AWDEN = 1U << 23 ;

  // Field JAWDEN: Analog watchdog enable on injected channels
    const uint32_t ADC1_CR1_JAWDEN = 1U << 22 ;

  // Field DISCNUM: Discontinuous mode channel count
    inline uint32_t ADC1_CR1_DISCNUM (const uint32_t inValue) {return (inValue & 0x7U) << 13 ; }

  // Field JDISCEN: Discontinuous mode on injected channels
    const uint32_t ADC1_CR1_JDISCEN = 1U << 12 ;

  // Field DISCEN: Discontinuous mode on regular channels
    const uint32_t ADC1_CR1_DISCEN = 1U << 11 ;

  // Field JAUTO: Automatic injected group conversion
    const uint32_t ADC1_CR1_JAUTO = 1U << 10 ;

  // Field AWDSGL: Enable the watchdog on a single channel in scan mode
    const uint32_t ADC1_CR1_AWDSGL = 1U << 9 ;

  // Field SCAN: Scan mode
    const uint32_t ADC1_CR1_SCAN = 1U << 8 ;

  // Field JEOCIE: Interrupt enable for injected channels
    const uint32_t ADC1_CR1_JEOCIE = 1U << 7 ;

  // Field AWDIE: Analog watchdog interrupt enable
    const uint32_t ADC1_CR1_AWDIE = 1U << 6 ;

  // Field EOCIE: Interrupt enable for EOC
    const uint32_t ADC1_CR1_EOCIE = 1U << 5 ;

  // Field AWDCH: Analog watchdog channel select bits
    inline uint32_t ADC1_CR1_AWDCH (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define ADC1_CR2 (* ((volatile uint32_t *) (0x40012000 + 8)))

  // Field SWSTART: Start conversion of regular channels
    const uint32_t ADC1_CR2_SWSTART = 1U << 30 ;

  // Field EXTEN: External trigger enable for regular channels
    inline uint32_t ADC1_CR2_EXTEN (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field EXTSEL: External event select for regular group
    inline uint32_t ADC1_CR2_EXTSEL (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field JSWSTART: Start conversion of injected channels
    const uint32_t ADC1_CR2_JSWSTART = 1U << 22 ;

  // Field JEXTEN: External trigger enable for injected channels
    inline uint32_t ADC1_CR2_JEXTEN (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field JEXTSEL: External event select for injected group
    inline uint32_t ADC1_CR2_JEXTSEL (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field ALIGN: Data alignment
    const uint32_t ADC1_CR2_ALIGN = 1U << 11 ;

  // Field EOCS: End of conversion selection
    const uint32_t ADC1_CR2_EOCS = 1U << 10 ;

  // Field DDS: DMA disable selection (for single ADC mode)
    const uint32_t ADC1_CR2_DDS = 1U << 9 ;

  // Field DMA: Direct memory access mode (for single ADC mode)
    const uint32_t ADC1_CR2_DMA = 1U << 8 ;

  // Field CONT: Continuous conversion
    const uint32_t ADC1_CR2_CONT = 1U << 1 ;

  // Field ADON: A/D Converter ON / OFF
    const uint32_t ADC1_CR2_ADON = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SMPR1: sample time register 1
  #define ADC1_SMPR1 (* ((volatile uint32_t *) (0x40012000 + 12)))

  // Field SMPx_x: Sample time bits
    inline uint32_t ADC1_SMPR1_SMPx_x (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SMPR2: sample time register 2
  #define ADC1_SMPR2 (* ((volatile uint32_t *) (0x40012000 + 16)))

  // Field SMPx_x: Sample time bits
    inline uint32_t ADC1_SMPR2_SMPx_x (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JOFR1: injected channel data offset register x
  #define ADC1_JOFR1 (* ((volatile uint32_t *) (0x40012000 + 20)))

  // Field JOFFSET1: Data offset for injected channel x
    inline uint32_t ADC1_JOFR1_JOFFSET1 (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JOFR2: injected channel data offset register x
  #define ADC1_JOFR2 (* ((volatile uint32_t *) (0x40012000 + 24)))

  // Field JOFFSET2: Data offset for injected channel x
    inline uint32_t ADC1_JOFR2_JOFFSET2 (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JOFR3: injected channel data offset register x
  #define ADC1_JOFR3 (* ((volatile uint32_t *) (0x40012000 + 28)))

  // Field JOFFSET3: Data offset for injected channel x
    inline uint32_t ADC1_JOFR3_JOFFSET3 (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JOFR4: injected channel data offset register x
  #define ADC1_JOFR4 (* ((volatile uint32_t *) (0x40012000 + 32)))

  // Field JOFFSET4: Data offset for injected channel x
    inline uint32_t ADC1_JOFR4_JOFFSET4 (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HTR: watchdog higher threshold register
  #define ADC1_HTR (* ((volatile uint32_t *) (0x40012000 + 36)))

  // Field HT: Analog watchdog higher threshold
    inline uint32_t ADC1_HTR_HT (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register LTR: watchdog lower threshold register
  #define ADC1_LTR (* ((volatile uint32_t *) (0x40012000 + 40)))

  // Field LT: Analog watchdog lower threshold
    inline uint32_t ADC1_LTR_LT (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SQR1: regular sequence register 1
  #define ADC1_SQR1 (* ((volatile uint32_t *) (0x40012000 + 44)))

  // Field L: Regular channel sequence length
    inline uint32_t ADC1_SQR1_L (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field SQ16: 16th conversion in regular sequence
    inline uint32_t ADC1_SQR1_SQ16 (const uint32_t inValue) {return (inValue & 0x1FU) << 15 ; }

  // Field SQ15: 15th conversion in regular sequence
    inline uint32_t ADC1_SQR1_SQ15 (const uint32_t inValue) {return (inValue & 0x1FU) << 10 ; }

  // Field SQ14: 14th conversion in regular sequence
    inline uint32_t ADC1_SQR1_SQ14 (const uint32_t inValue) {return (inValue & 0x1FU) << 5 ; }

  // Field SQ13: 13th conversion in regular sequence
    inline uint32_t ADC1_SQR1_SQ13 (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SQR2: regular sequence register 2
  #define ADC1_SQR2 (* ((volatile uint32_t *) (0x40012000 + 48)))

  // Field SQ12: 12th conversion in regular sequence
    inline uint32_t ADC1_SQR2_SQ12 (const uint32_t inValue) {return (inValue & 0x1FU) << 25 ; }

  // Field SQ11: 11th conversion in regular sequence
    inline uint32_t ADC1_SQR2_SQ11 (const uint32_t inValue) {return (inValue & 0x1FU) << 20 ; }

  // Field SQ10: 10th conversion in regular sequence
    inline uint32_t ADC1_SQR2_SQ10 (const uint32_t inValue) {return (inValue & 0x1FU) << 15 ; }

  // Field SQ9: 9th conversion in regular sequence
    inline uint32_t ADC1_SQR2_SQ9 (const uint32_t inValue) {return (inValue & 0x1FU) << 10 ; }

  // Field SQ8: 8th conversion in regular sequence
    inline uint32_t ADC1_SQR2_SQ8 (const uint32_t inValue) {return (inValue & 0x1FU) << 5 ; }

  // Field SQ7: 7th conversion in regular sequence
    inline uint32_t ADC1_SQR2_SQ7 (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SQR3: regular sequence register 3
  #define ADC1_SQR3 (* ((volatile uint32_t *) (0x40012000 + 52)))

  // Field SQ6: 6th conversion in regular sequence
    inline uint32_t ADC1_SQR3_SQ6 (const uint32_t inValue) {return (inValue & 0x1FU) << 25 ; }

  // Field SQ5: 5th conversion in regular sequence
    inline uint32_t ADC1_SQR3_SQ5 (const uint32_t inValue) {return (inValue & 0x1FU) << 20 ; }

  // Field SQ4: 4th conversion in regular sequence
    inline uint32_t ADC1_SQR3_SQ4 (const uint32_t inValue) {return (inValue & 0x1FU) << 15 ; }

  // Field SQ3: 3rd conversion in regular sequence
    inline uint32_t ADC1_SQR3_SQ3 (const uint32_t inValue) {return (inValue & 0x1FU) << 10 ; }

  // Field SQ2: 2nd conversion in regular sequence
    inline uint32_t ADC1_SQR3_SQ2 (const uint32_t inValue) {return (inValue & 0x1FU) << 5 ; }

  // Field SQ1: 1st conversion in regular sequence
    inline uint32_t ADC1_SQR3_SQ1 (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JSQR: injected sequence register
  #define ADC1_JSQR (* ((volatile uint32_t *) (0x40012000 + 56)))

  // Field JL: Injected sequence length
    inline uint32_t ADC1_JSQR_JL (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field JSQ4: 4th conversion in injected sequence
    inline uint32_t ADC1_JSQR_JSQ4 (const uint32_t inValue) {return (inValue & 0x1FU) << 15 ; }

  // Field JSQ3: 3rd conversion in injected sequence
    inline uint32_t ADC1_JSQR_JSQ3 (const uint32_t inValue) {return (inValue & 0x1FU) << 10 ; }

  // Field JSQ2: 2nd conversion in injected sequence
    inline uint32_t ADC1_JSQR_JSQ2 (const uint32_t inValue) {return (inValue & 0x1FU) << 5 ; }

  // Field JSQ1: 1st conversion in injected sequence
    inline uint32_t ADC1_JSQR_JSQ1 (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JDR1: injected data register x
  #define ADC1_JDR1 (* ((const volatile uint32_t *) (0x40012000 + 60)))

  // Field JDATA: Injected data
    inline uint32_t ADC1_JDR1_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JDR2: injected data register x
  #define ADC1_JDR2 (* ((const volatile uint32_t *) (0x40012000 + 64)))

  // Field JDATA: Injected data
    inline uint32_t ADC1_JDR2_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JDR3: injected data register x
  #define ADC1_JDR3 (* ((const volatile uint32_t *) (0x40012000 + 68)))

  // Field JDATA: Injected data
    inline uint32_t ADC1_JDR3_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JDR4: injected data register x
  #define ADC1_JDR4 (* ((const volatile uint32_t *) (0x40012000 + 72)))

  // Field JDATA: Injected data
    inline uint32_t ADC1_JDR4_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DR: regular data register
  #define ADC1_DR (* ((const volatile uint32_t *) (0x40012000 + 76)))

  // Field DATA: Regular data
    inline uint32_t ADC1_DR_DATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral ADC2
//------------------------------------------------------------------------------

//---  Register SR: status register
  #define ADC2_SR (* ((volatile uint32_t *) (0x40012100 + 0)))

  // Field OVR: Overrun
    const uint32_t ADC2_SR_OVR = 1U << 5 ;

  // Field STRT: Regular channel start flag
    const uint32_t ADC2_SR_STRT = 1U << 4 ;

  // Field JSTRT: Injected channel start flag
    const uint32_t ADC2_SR_JSTRT = 1U << 3 ;

  // Field JEOC: Injected channel end of conversion
    const uint32_t ADC2_SR_JEOC = 1U << 2 ;

  // Field EOC: Regular channel end of conversion
    const uint32_t ADC2_SR_EOC = 1U << 1 ;

  // Field AWD: Analog watchdog flag
    const uint32_t ADC2_SR_AWD = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define ADC2_CR1 (* ((volatile uint32_t *) (0x40012100 + 4)))

  // Field OVRIE: Overrun interrupt enable
    const uint32_t ADC2_CR1_OVRIE = 1U << 26 ;

  // Field RES: Resolution
    inline uint32_t ADC2_CR1_RES (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field AWDEN: Analog watchdog enable on regular channels
    const uint32_t ADC2_CR1_AWDEN = 1U << 23 ;

  // Field JAWDEN: Analog watchdog enable on injected channels
    const uint32_t ADC2_CR1_JAWDEN = 1U << 22 ;

  // Field DISCNUM: Discontinuous mode channel count
    inline uint32_t ADC2_CR1_DISCNUM (const uint32_t inValue) {return (inValue & 0x7U) << 13 ; }

  // Field JDISCEN: Discontinuous mode on injected channels
    const uint32_t ADC2_CR1_JDISCEN = 1U << 12 ;

  // Field DISCEN: Discontinuous mode on regular channels
    const uint32_t ADC2_CR1_DISCEN = 1U << 11 ;

  // Field JAUTO: Automatic injected group conversion
    const uint32_t ADC2_CR1_JAUTO = 1U << 10 ;

  // Field AWDSGL: Enable the watchdog on a single channel in scan mode
    const uint32_t ADC2_CR1_AWDSGL = 1U << 9 ;

  // Field SCAN: Scan mode
    const uint32_t ADC2_CR1_SCAN = 1U << 8 ;

  // Field JEOCIE: Interrupt enable for injected channels
    const uint32_t ADC2_CR1_JEOCIE = 1U << 7 ;

  // Field AWDIE: Analog watchdog interrupt enable
    const uint32_t ADC2_CR1_AWDIE = 1U << 6 ;

  // Field EOCIE: Interrupt enable for EOC
    const uint32_t ADC2_CR1_EOCIE = 1U << 5 ;

  // Field AWDCH: Analog watchdog channel select bits
    inline uint32_t ADC2_CR1_AWDCH (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define ADC2_CR2 (* ((volatile uint32_t *) (0x40012100 + 8)))

  // Field SWSTART: Start conversion of regular channels
    const uint32_t ADC2_CR2_SWSTART = 1U << 30 ;

  // Field EXTEN: External trigger enable for regular channels
    inline uint32_t ADC2_CR2_EXTEN (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field EXTSEL: External event select for regular group
    inline uint32_t ADC2_CR2_EXTSEL (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field JSWSTART: Start conversion of injected channels
    const uint32_t ADC2_CR2_JSWSTART = 1U << 22 ;

  // Field JEXTEN: External trigger enable for injected channels
    inline uint32_t ADC2_CR2_JEXTEN (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field JEXTSEL: External event select for injected group
    inline uint32_t ADC2_CR2_JEXTSEL (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field ALIGN: Data alignment
    const uint32_t ADC2_CR2_ALIGN = 1U << 11 ;

  // Field EOCS: End of conversion selection
    const uint32_t ADC2_CR2_EOCS = 1U << 10 ;

  // Field DDS: DMA disable selection (for single ADC mode)
    const uint32_t ADC2_CR2_DDS = 1U << 9 ;

  // Field DMA: Direct memory access mode (for single ADC mode)
    const uint32_t ADC2_CR2_DMA = 1U << 8 ;

  // Field CONT: Continuous conversion
    const uint32_t ADC2_CR2_CONT = 1U << 1 ;

  // Field ADON: A/D Converter ON / OFF
    const uint32_t ADC2_CR2_ADON = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SMPR1: sample time register 1
  #define ADC2_SMPR1 (* ((volatile uint32_t *) (0x40012100 + 12)))

  // Field SMPx_x: Sample time bits
    inline uint32_t ADC2_SMPR1_SMPx_x (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SMPR2: sample time register 2
  #define ADC2_SMPR2 (* ((volatile uint32_t *) (0x40012100 + 16)))

  // Field SMPx_x: Sample time bits
    inline uint32_t ADC2_SMPR2_SMPx_x (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JOFR1: injected channel data offset register x
  #define ADC2_JOFR1 (* ((volatile uint32_t *) (0x40012100 + 20)))

  // Field JOFFSET1: Data offset for injected channel x
    inline uint32_t ADC2_JOFR1_JOFFSET1 (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JOFR2: injected channel data offset register x
  #define ADC2_JOFR2 (* ((volatile uint32_t *) (0x40012100 + 24)))

  // Field JOFFSET2: Data offset for injected channel x
    inline uint32_t ADC2_JOFR2_JOFFSET2 (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JOFR3: injected channel data offset register x
  #define ADC2_JOFR3 (* ((volatile uint32_t *) (0x40012100 + 28)))

  // Field JOFFSET3: Data offset for injected channel x
    inline uint32_t ADC2_JOFR3_JOFFSET3 (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JOFR4: injected channel data offset register x
  #define ADC2_JOFR4 (* ((volatile uint32_t *) (0x40012100 + 32)))

  // Field JOFFSET4: Data offset for injected channel x
    inline uint32_t ADC2_JOFR4_JOFFSET4 (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HTR: watchdog higher threshold register
  #define ADC2_HTR (* ((volatile uint32_t *) (0x40012100 + 36)))

  // Field HT: Analog watchdog higher threshold
    inline uint32_t ADC2_HTR_HT (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register LTR: watchdog lower threshold register
  #define ADC2_LTR (* ((volatile uint32_t *) (0x40012100 + 40)))

  // Field LT: Analog watchdog lower threshold
    inline uint32_t ADC2_LTR_LT (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SQR1: regular sequence register 1
  #define ADC2_SQR1 (* ((volatile uint32_t *) (0x40012100 + 44)))

  // Field L: Regular channel sequence length
    inline uint32_t ADC2_SQR1_L (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field SQ16: 16th conversion in regular sequence
    inline uint32_t ADC2_SQR1_SQ16 (const uint32_t inValue) {return (inValue & 0x1FU) << 15 ; }

  // Field SQ15: 15th conversion in regular sequence
    inline uint32_t ADC2_SQR1_SQ15 (const uint32_t inValue) {return (inValue & 0x1FU) << 10 ; }

  // Field SQ14: 14th conversion in regular sequence
    inline uint32_t ADC2_SQR1_SQ14 (const uint32_t inValue) {return (inValue & 0x1FU) << 5 ; }

  // Field SQ13: 13th conversion in regular sequence
    inline uint32_t ADC2_SQR1_SQ13 (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SQR2: regular sequence register 2
  #define ADC2_SQR2 (* ((volatile uint32_t *) (0x40012100 + 48)))

  // Field SQ12: 12th conversion in regular sequence
    inline uint32_t ADC2_SQR2_SQ12 (const uint32_t inValue) {return (inValue & 0x1FU) << 25 ; }

  // Field SQ11: 11th conversion in regular sequence
    inline uint32_t ADC2_SQR2_SQ11 (const uint32_t inValue) {return (inValue & 0x1FU) << 20 ; }

  // Field SQ10: 10th conversion in regular sequence
    inline uint32_t ADC2_SQR2_SQ10 (const uint32_t inValue) {return (inValue & 0x1FU) << 15 ; }

  // Field SQ9: 9th conversion in regular sequence
    inline uint32_t ADC2_SQR2_SQ9 (const uint32_t inValue) {return (inValue & 0x1FU) << 10 ; }

  // Field SQ8: 8th conversion in regular sequence
    inline uint32_t ADC2_SQR2_SQ8 (const uint32_t inValue) {return (inValue & 0x1FU) << 5 ; }

  // Field SQ7: 7th conversion in regular sequence
    inline uint32_t ADC2_SQR2_SQ7 (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SQR3: regular sequence register 3
  #define ADC2_SQR3 (* ((volatile uint32_t *) (0x40012100 + 52)))

  // Field SQ6: 6th conversion in regular sequence
    inline uint32_t ADC2_SQR3_SQ6 (const uint32_t inValue) {return (inValue & 0x1FU) << 25 ; }

  // Field SQ5: 5th conversion in regular sequence
    inline uint32_t ADC2_SQR3_SQ5 (const uint32_t inValue) {return (inValue & 0x1FU) << 20 ; }

  // Field SQ4: 4th conversion in regular sequence
    inline uint32_t ADC2_SQR3_SQ4 (const uint32_t inValue) {return (inValue & 0x1FU) << 15 ; }

  // Field SQ3: 3rd conversion in regular sequence
    inline uint32_t ADC2_SQR3_SQ3 (const uint32_t inValue) {return (inValue & 0x1FU) << 10 ; }

  // Field SQ2: 2nd conversion in regular sequence
    inline uint32_t ADC2_SQR3_SQ2 (const uint32_t inValue) {return (inValue & 0x1FU) << 5 ; }

  // Field SQ1: 1st conversion in regular sequence
    inline uint32_t ADC2_SQR3_SQ1 (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JSQR: injected sequence register
  #define ADC2_JSQR (* ((volatile uint32_t *) (0x40012100 + 56)))

  // Field JL: Injected sequence length
    inline uint32_t ADC2_JSQR_JL (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field JSQ4: 4th conversion in injected sequence
    inline uint32_t ADC2_JSQR_JSQ4 (const uint32_t inValue) {return (inValue & 0x1FU) << 15 ; }

  // Field JSQ3: 3rd conversion in injected sequence
    inline uint32_t ADC2_JSQR_JSQ3 (const uint32_t inValue) {return (inValue & 0x1FU) << 10 ; }

  // Field JSQ2: 2nd conversion in injected sequence
    inline uint32_t ADC2_JSQR_JSQ2 (const uint32_t inValue) {return (inValue & 0x1FU) << 5 ; }

  // Field JSQ1: 1st conversion in injected sequence
    inline uint32_t ADC2_JSQR_JSQ1 (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JDR1: injected data register x
  #define ADC2_JDR1 (* ((const volatile uint32_t *) (0x40012100 + 60)))

  // Field JDATA: Injected data
    inline uint32_t ADC2_JDR1_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JDR2: injected data register x
  #define ADC2_JDR2 (* ((const volatile uint32_t *) (0x40012100 + 64)))

  // Field JDATA: Injected data
    inline uint32_t ADC2_JDR2_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JDR3: injected data register x
  #define ADC2_JDR3 (* ((const volatile uint32_t *) (0x40012100 + 68)))

  // Field JDATA: Injected data
    inline uint32_t ADC2_JDR3_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JDR4: injected data register x
  #define ADC2_JDR4 (* ((const volatile uint32_t *) (0x40012100 + 72)))

  // Field JDATA: Injected data
    inline uint32_t ADC2_JDR4_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DR: regular data register
  #define ADC2_DR (* ((const volatile uint32_t *) (0x40012100 + 76)))

  // Field DATA: Regular data
    inline uint32_t ADC2_DR_DATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral ADC3
//------------------------------------------------------------------------------

//---  Register SR: status register
  #define ADC3_SR (* ((volatile uint32_t *) (0x40012200 + 0)))

  // Field OVR: Overrun
    const uint32_t ADC3_SR_OVR = 1U << 5 ;

  // Field STRT: Regular channel start flag
    const uint32_t ADC3_SR_STRT = 1U << 4 ;

  // Field JSTRT: Injected channel start flag
    const uint32_t ADC3_SR_JSTRT = 1U << 3 ;

  // Field JEOC: Injected channel end of conversion
    const uint32_t ADC3_SR_JEOC = 1U << 2 ;

  // Field EOC: Regular channel end of conversion
    const uint32_t ADC3_SR_EOC = 1U << 1 ;

  // Field AWD: Analog watchdog flag
    const uint32_t ADC3_SR_AWD = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define ADC3_CR1 (* ((volatile uint32_t *) (0x40012200 + 4)))

  // Field OVRIE: Overrun interrupt enable
    const uint32_t ADC3_CR1_OVRIE = 1U << 26 ;

  // Field RES: Resolution
    inline uint32_t ADC3_CR1_RES (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field AWDEN: Analog watchdog enable on regular channels
    const uint32_t ADC3_CR1_AWDEN = 1U << 23 ;

  // Field JAWDEN: Analog watchdog enable on injected channels
    const uint32_t ADC3_CR1_JAWDEN = 1U << 22 ;

  // Field DISCNUM: Discontinuous mode channel count
    inline uint32_t ADC3_CR1_DISCNUM (const uint32_t inValue) {return (inValue & 0x7U) << 13 ; }

  // Field JDISCEN: Discontinuous mode on injected channels
    const uint32_t ADC3_CR1_JDISCEN = 1U << 12 ;

  // Field DISCEN: Discontinuous mode on regular channels
    const uint32_t ADC3_CR1_DISCEN = 1U << 11 ;

  // Field JAUTO: Automatic injected group conversion
    const uint32_t ADC3_CR1_JAUTO = 1U << 10 ;

  // Field AWDSGL: Enable the watchdog on a single channel in scan mode
    const uint32_t ADC3_CR1_AWDSGL = 1U << 9 ;

  // Field SCAN: Scan mode
    const uint32_t ADC3_CR1_SCAN = 1U << 8 ;

  // Field JEOCIE: Interrupt enable for injected channels
    const uint32_t ADC3_CR1_JEOCIE = 1U << 7 ;

  // Field AWDIE: Analog watchdog interrupt enable
    const uint32_t ADC3_CR1_AWDIE = 1U << 6 ;

  // Field EOCIE: Interrupt enable for EOC
    const uint32_t ADC3_CR1_EOCIE = 1U << 5 ;

  // Field AWDCH: Analog watchdog channel select bits
    inline uint32_t ADC3_CR1_AWDCH (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define ADC3_CR2 (* ((volatile uint32_t *) (0x40012200 + 8)))

  // Field SWSTART: Start conversion of regular channels
    const uint32_t ADC3_CR2_SWSTART = 1U << 30 ;

  // Field EXTEN: External trigger enable for regular channels
    inline uint32_t ADC3_CR2_EXTEN (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field EXTSEL: External event select for regular group
    inline uint32_t ADC3_CR2_EXTSEL (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field JSWSTART: Start conversion of injected channels
    const uint32_t ADC3_CR2_JSWSTART = 1U << 22 ;

  // Field JEXTEN: External trigger enable for injected channels
    inline uint32_t ADC3_CR2_JEXTEN (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field JEXTSEL: External event select for injected group
    inline uint32_t ADC3_CR2_JEXTSEL (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field ALIGN: Data alignment
    const uint32_t ADC3_CR2_ALIGN = 1U << 11 ;

  // Field EOCS: End of conversion selection
    const uint32_t ADC3_CR2_EOCS = 1U << 10 ;

  // Field DDS: DMA disable selection (for single ADC mode)
    const uint32_t ADC3_CR2_DDS = 1U << 9 ;

  // Field DMA: Direct memory access mode (for single ADC mode)
    const uint32_t ADC3_CR2_DMA = 1U << 8 ;

  // Field CONT: Continuous conversion
    const uint32_t ADC3_CR2_CONT = 1U << 1 ;

  // Field ADON: A/D Converter ON / OFF
    const uint32_t ADC3_CR2_ADON = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SMPR1: sample time register 1
  #define ADC3_SMPR1 (* ((volatile uint32_t *) (0x40012200 + 12)))

  // Field SMPx_x: Sample time bits
    inline uint32_t ADC3_SMPR1_SMPx_x (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SMPR2: sample time register 2
  #define ADC3_SMPR2 (* ((volatile uint32_t *) (0x40012200 + 16)))

  // Field SMPx_x: Sample time bits
    inline uint32_t ADC3_SMPR2_SMPx_x (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JOFR1: injected channel data offset register x
  #define ADC3_JOFR1 (* ((volatile uint32_t *) (0x40012200 + 20)))

  // Field JOFFSET1: Data offset for injected channel x
    inline uint32_t ADC3_JOFR1_JOFFSET1 (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JOFR2: injected channel data offset register x
  #define ADC3_JOFR2 (* ((volatile uint32_t *) (0x40012200 + 24)))

  // Field JOFFSET2: Data offset for injected channel x
    inline uint32_t ADC3_JOFR2_JOFFSET2 (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JOFR3: injected channel data offset register x
  #define ADC3_JOFR3 (* ((volatile uint32_t *) (0x40012200 + 28)))

  // Field JOFFSET3: Data offset for injected channel x
    inline uint32_t ADC3_JOFR3_JOFFSET3 (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JOFR4: injected channel data offset register x
  #define ADC3_JOFR4 (* ((volatile uint32_t *) (0x40012200 + 32)))

  // Field JOFFSET4: Data offset for injected channel x
    inline uint32_t ADC3_JOFR4_JOFFSET4 (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HTR: watchdog higher threshold register
  #define ADC3_HTR (* ((volatile uint32_t *) (0x40012200 + 36)))

  // Field HT: Analog watchdog higher threshold
    inline uint32_t ADC3_HTR_HT (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register LTR: watchdog lower threshold register
  #define ADC3_LTR (* ((volatile uint32_t *) (0x40012200 + 40)))

  // Field LT: Analog watchdog lower threshold
    inline uint32_t ADC3_LTR_LT (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SQR1: regular sequence register 1
  #define ADC3_SQR1 (* ((volatile uint32_t *) (0x40012200 + 44)))

  // Field L: Regular channel sequence length
    inline uint32_t ADC3_SQR1_L (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field SQ16: 16th conversion in regular sequence
    inline uint32_t ADC3_SQR1_SQ16 (const uint32_t inValue) {return (inValue & 0x1FU) << 15 ; }

  // Field SQ15: 15th conversion in regular sequence
    inline uint32_t ADC3_SQR1_SQ15 (const uint32_t inValue) {return (inValue & 0x1FU) << 10 ; }

  // Field SQ14: 14th conversion in regular sequence
    inline uint32_t ADC3_SQR1_SQ14 (const uint32_t inValue) {return (inValue & 0x1FU) << 5 ; }

  // Field SQ13: 13th conversion in regular sequence
    inline uint32_t ADC3_SQR1_SQ13 (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SQR2: regular sequence register 2
  #define ADC3_SQR2 (* ((volatile uint32_t *) (0x40012200 + 48)))

  // Field SQ12: 12th conversion in regular sequence
    inline uint32_t ADC3_SQR2_SQ12 (const uint32_t inValue) {return (inValue & 0x1FU) << 25 ; }

  // Field SQ11: 11th conversion in regular sequence
    inline uint32_t ADC3_SQR2_SQ11 (const uint32_t inValue) {return (inValue & 0x1FU) << 20 ; }

  // Field SQ10: 10th conversion in regular sequence
    inline uint32_t ADC3_SQR2_SQ10 (const uint32_t inValue) {return (inValue & 0x1FU) << 15 ; }

  // Field SQ9: 9th conversion in regular sequence
    inline uint32_t ADC3_SQR2_SQ9 (const uint32_t inValue) {return (inValue & 0x1FU) << 10 ; }

  // Field SQ8: 8th conversion in regular sequence
    inline uint32_t ADC3_SQR2_SQ8 (const uint32_t inValue) {return (inValue & 0x1FU) << 5 ; }

  // Field SQ7: 7th conversion in regular sequence
    inline uint32_t ADC3_SQR2_SQ7 (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SQR3: regular sequence register 3
  #define ADC3_SQR3 (* ((volatile uint32_t *) (0x40012200 + 52)))

  // Field SQ6: 6th conversion in regular sequence
    inline uint32_t ADC3_SQR3_SQ6 (const uint32_t inValue) {return (inValue & 0x1FU) << 25 ; }

  // Field SQ5: 5th conversion in regular sequence
    inline uint32_t ADC3_SQR3_SQ5 (const uint32_t inValue) {return (inValue & 0x1FU) << 20 ; }

  // Field SQ4: 4th conversion in regular sequence
    inline uint32_t ADC3_SQR3_SQ4 (const uint32_t inValue) {return (inValue & 0x1FU) << 15 ; }

  // Field SQ3: 3rd conversion in regular sequence
    inline uint32_t ADC3_SQR3_SQ3 (const uint32_t inValue) {return (inValue & 0x1FU) << 10 ; }

  // Field SQ2: 2nd conversion in regular sequence
    inline uint32_t ADC3_SQR3_SQ2 (const uint32_t inValue) {return (inValue & 0x1FU) << 5 ; }

  // Field SQ1: 1st conversion in regular sequence
    inline uint32_t ADC3_SQR3_SQ1 (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JSQR: injected sequence register
  #define ADC3_JSQR (* ((volatile uint32_t *) (0x40012200 + 56)))

  // Field JL: Injected sequence length
    inline uint32_t ADC3_JSQR_JL (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field JSQ4: 4th conversion in injected sequence
    inline uint32_t ADC3_JSQR_JSQ4 (const uint32_t inValue) {return (inValue & 0x1FU) << 15 ; }

  // Field JSQ3: 3rd conversion in injected sequence
    inline uint32_t ADC3_JSQR_JSQ3 (const uint32_t inValue) {return (inValue & 0x1FU) << 10 ; }

  // Field JSQ2: 2nd conversion in injected sequence
    inline uint32_t ADC3_JSQR_JSQ2 (const uint32_t inValue) {return (inValue & 0x1FU) << 5 ; }

  // Field JSQ1: 1st conversion in injected sequence
    inline uint32_t ADC3_JSQR_JSQ1 (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JDR1: injected data register x
  #define ADC3_JDR1 (* ((const volatile uint32_t *) (0x40012200 + 60)))

  // Field JDATA: Injected data
    inline uint32_t ADC3_JDR1_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JDR2: injected data register x
  #define ADC3_JDR2 (* ((const volatile uint32_t *) (0x40012200 + 64)))

  // Field JDATA: Injected data
    inline uint32_t ADC3_JDR2_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JDR3: injected data register x
  #define ADC3_JDR3 (* ((const volatile uint32_t *) (0x40012200 + 68)))

  // Field JDATA: Injected data
    inline uint32_t ADC3_JDR3_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JDR4: injected data register x
  #define ADC3_JDR4 (* ((const volatile uint32_t *) (0x40012200 + 72)))

  // Field JDATA: Injected data
    inline uint32_t ADC3_JDR4_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DR: regular data register
  #define ADC3_DR (* ((const volatile uint32_t *) (0x40012200 + 76)))

  // Field DATA: Regular data
    inline uint32_t ADC3_DR_DATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral CAN1: Controller area network
//------------------------------------------------------------------------------

//---  Register MCR: master control register
  #define CAN1_MCR (* ((volatile uint32_t *) (0x40006400 + 0)))

  // Field DBF: DBF
    const uint32_t CAN1_MCR_DBF = 1U << 16 ;

  // Field RESET: RESET
    const uint32_t CAN1_MCR_RESET = 1U << 15 ;

  // Field TTCM: TTCM
    const uint32_t CAN1_MCR_TTCM = 1U << 7 ;

  // Field ABOM: ABOM
    const uint32_t CAN1_MCR_ABOM = 1U << 6 ;

  // Field AWUM: AWUM
    const uint32_t CAN1_MCR_AWUM = 1U << 5 ;

  // Field NART: NART
    const uint32_t CAN1_MCR_NART = 1U << 4 ;

  // Field RFLM: RFLM
    const uint32_t CAN1_MCR_RFLM = 1U << 3 ;

  // Field TXFP: TXFP
    const uint32_t CAN1_MCR_TXFP = 1U << 2 ;

  // Field SLEEP: SLEEP
    const uint32_t CAN1_MCR_SLEEP = 1U << 1 ;

  // Field INRQ: INRQ
    const uint32_t CAN1_MCR_INRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register MSR: master status register
  #define CAN1_MSR (* ((volatile uint32_t *) (0x40006400 + 4)))

  // Field RX: RX
    const uint32_t CAN1_MSR_RX = 1U << 11 ;

  // Field SAMP: SAMP
    const uint32_t CAN1_MSR_SAMP = 1U << 10 ;

  // Field RXM: RXM
    const uint32_t CAN1_MSR_RXM = 1U << 9 ;

  // Field TXM: TXM
    const uint32_t CAN1_MSR_TXM = 1U << 8 ;

  // Field SLAKI: SLAKI
    const uint32_t CAN1_MSR_SLAKI = 1U << 4 ;

  // Field WKUI: WKUI
    const uint32_t CAN1_MSR_WKUI = 1U << 3 ;

  // Field ERRI: ERRI
    const uint32_t CAN1_MSR_ERRI = 1U << 2 ;

  // Field SLAK: SLAK
    const uint32_t CAN1_MSR_SLAK = 1U << 1 ;

  // Field INAK: INAK
    const uint32_t CAN1_MSR_INAK = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register TSR: transmit status register
  #define CAN1_TSR (* ((volatile uint32_t *) (0x40006400 + 8)))

  // Field LOW2: Lowest priority flag for mailbox 2
    const uint32_t CAN1_TSR_LOW2 = 1U << 31 ;

  // Field LOW1: Lowest priority flag for mailbox 1
    const uint32_t CAN1_TSR_LOW1 = 1U << 30 ;

  // Field LOW0: Lowest priority flag for mailbox 0
    const uint32_t CAN1_TSR_LOW0 = 1U << 29 ;

  // Field TME2: Lowest priority flag for mailbox 2
    const uint32_t CAN1_TSR_TME2 = 1U << 28 ;

  // Field TME1: Lowest priority flag for mailbox 1
    const uint32_t CAN1_TSR_TME1 = 1U << 27 ;

  // Field TME0: Lowest priority flag for mailbox 0
    const uint32_t CAN1_TSR_TME0 = 1U << 26 ;

  // Field CODE: CODE
    inline uint32_t CAN1_TSR_CODE (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field ABRQ2: ABRQ2
    const uint32_t CAN1_TSR_ABRQ2 = 1U << 23 ;

  // Field TERR2: TERR2
    const uint32_t CAN1_TSR_TERR2 = 1U << 19 ;

  // Field ALST2: ALST2
    const uint32_t CAN1_TSR_ALST2 = 1U << 18 ;

  // Field TXOK2: TXOK2
    const uint32_t CAN1_TSR_TXOK2 = 1U << 17 ;

  // Field RQCP2: RQCP2
    const uint32_t CAN1_TSR_RQCP2 = 1U << 16 ;

  // Field ABRQ1: ABRQ1
    const uint32_t CAN1_TSR_ABRQ1 = 1U << 15 ;

  // Field TERR1: TERR1
    const uint32_t CAN1_TSR_TERR1 = 1U << 11 ;

  // Field ALST1: ALST1
    const uint32_t CAN1_TSR_ALST1 = 1U << 10 ;

  // Field TXOK1: TXOK1
    const uint32_t CAN1_TSR_TXOK1 = 1U << 9 ;

  // Field RQCP1: RQCP1
    const uint32_t CAN1_TSR_RQCP1 = 1U << 8 ;

  // Field ABRQ0: ABRQ0
    const uint32_t CAN1_TSR_ABRQ0 = 1U << 7 ;

  // Field TERR0: TERR0
    const uint32_t CAN1_TSR_TERR0 = 1U << 3 ;

  // Field ALST0: ALST0
    const uint32_t CAN1_TSR_ALST0 = 1U << 2 ;

  // Field TXOK0: TXOK0
    const uint32_t CAN1_TSR_TXOK0 = 1U << 1 ;

  // Field RQCP0: RQCP0
    const uint32_t CAN1_TSR_RQCP0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register RF0R: receive FIFO 0 register
  #define CAN1_RF0R (* ((volatile uint32_t *) (0x40006400 + 12)))

  // Field RFOM0: RFOM0
    const uint32_t CAN1_RF0R_RFOM0 = 1U << 5 ;

  // Field FOVR0: FOVR0
    const uint32_t CAN1_RF0R_FOVR0 = 1U << 4 ;

  // Field FULL0: FULL0
    const uint32_t CAN1_RF0R_FULL0 = 1U << 3 ;

  // Field FMP0: FMP0
    inline uint32_t CAN1_RF0R_FMP0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RF1R: receive FIFO 1 register
  #define CAN1_RF1R (* ((volatile uint32_t *) (0x40006400 + 16)))

  // Field RFOM1: RFOM1
    const uint32_t CAN1_RF1R_RFOM1 = 1U << 5 ;

  // Field FOVR1: FOVR1
    const uint32_t CAN1_RF1R_FOVR1 = 1U << 4 ;

  // Field FULL1: FULL1
    const uint32_t CAN1_RF1R_FULL1 = 1U << 3 ;

  // Field FMP1: FMP1
    inline uint32_t CAN1_RF1R_FMP1 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IER: interrupt enable register
  #define CAN1_IER (* ((volatile uint32_t *) (0x40006400 + 20)))

  // Field SLKIE: SLKIE
    const uint32_t CAN1_IER_SLKIE = 1U << 17 ;

  // Field WKUIE: WKUIE
    const uint32_t CAN1_IER_WKUIE = 1U << 16 ;

  // Field ERRIE: ERRIE
    const uint32_t CAN1_IER_ERRIE = 1U << 15 ;

  // Field LECIE: LECIE
    const uint32_t CAN1_IER_LECIE = 1U << 11 ;

  // Field BOFIE: BOFIE
    const uint32_t CAN1_IER_BOFIE = 1U << 10 ;

  // Field EPVIE: EPVIE
    const uint32_t CAN1_IER_EPVIE = 1U << 9 ;

  // Field EWGIE: EWGIE
    const uint32_t CAN1_IER_EWGIE = 1U << 8 ;

  // Field FOVIE1: FOVIE1
    const uint32_t CAN1_IER_FOVIE1 = 1U << 6 ;

  // Field FFIE1: FFIE1
    const uint32_t CAN1_IER_FFIE1 = 1U << 5 ;

  // Field FMPIE1: FMPIE1
    const uint32_t CAN1_IER_FMPIE1 = 1U << 4 ;

  // Field FOVIE0: FOVIE0
    const uint32_t CAN1_IER_FOVIE0 = 1U << 3 ;

  // Field FFIE0: FFIE0
    const uint32_t CAN1_IER_FFIE0 = 1U << 2 ;

  // Field FMPIE0: FMPIE0
    const uint32_t CAN1_IER_FMPIE0 = 1U << 1 ;

  // Field TMEIE: TMEIE
    const uint32_t CAN1_IER_TMEIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ESR: interrupt enable register
  #define CAN1_ESR (* ((volatile uint32_t *) (0x40006400 + 24)))

  // Field REC: REC
    inline uint32_t CAN1_ESR_REC (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field TEC: TEC
    inline uint32_t CAN1_ESR_TEC (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field LEC: LEC
    inline uint32_t CAN1_ESR_LEC (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field BOFF: BOFF
    const uint32_t CAN1_ESR_BOFF = 1U << 2 ;

  // Field EPVF: EPVF
    const uint32_t CAN1_ESR_EPVF = 1U << 1 ;

  // Field EWGF: EWGF
    const uint32_t CAN1_ESR_EWGF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BTR: bit timing register
  #define CAN1_BTR (* ((volatile uint32_t *) (0x40006400 + 28)))

  // Field SILM: SILM
    const uint32_t CAN1_BTR_SILM = 1U << 31 ;

  // Field LBKM: LBKM
    const uint32_t CAN1_BTR_LBKM = 1U << 30 ;

  // Field SJW: SJW
    inline uint32_t CAN1_BTR_SJW (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field TS2: TS2
    inline uint32_t CAN1_BTR_TS2 (const uint32_t inValue) {return (inValue & 0x7U) << 20 ; }

  // Field TS1: TS1
    inline uint32_t CAN1_BTR_TS1 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field BRP: BRP
    inline uint32_t CAN1_BTR_BRP (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TI0R: TX mailbox identifier register
  #define CAN1_TI0R (* ((volatile uint32_t *) (0x40006400 + 384)))

  // Field STID: STID
    inline uint32_t CAN1_TI0R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN1_TI0R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN1_TI0R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN1_TI0R_RTR = 1U << 1 ;

  // Field TXRQ: TXRQ
    const uint32_t CAN1_TI0R_TXRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register TDT0R: mailbox data length control and time stamp register
  #define CAN1_TDT0R (* ((volatile uint32_t *) (0x40006400 + 388)))

  // Field TIME: TIME
    inline uint32_t CAN1_TDT0R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field TGT: TGT
    const uint32_t CAN1_TDT0R_TGT = 1U << 8 ;

  // Field DLC: DLC
    inline uint32_t CAN1_TDT0R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDL0R: mailbox data low register
  #define CAN1_TDL0R (* ((volatile uint32_t *) (0x40006400 + 392)))

  // Field DATA3: DATA3
    inline uint32_t CAN1_TDL0R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN1_TDL0R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN1_TDL0R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN1_TDL0R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDH0R: mailbox data high register
  #define CAN1_TDH0R (* ((volatile uint32_t *) (0x40006400 + 396)))

  // Field DATA7: DATA7
    inline uint32_t CAN1_TDH0R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN1_TDH0R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN1_TDH0R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN1_TDH0R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TI1R: mailbox identifier register
  #define CAN1_TI1R (* ((volatile uint32_t *) (0x40006400 + 400)))

  // Field STID: STID
    inline uint32_t CAN1_TI1R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN1_TI1R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN1_TI1R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN1_TI1R_RTR = 1U << 1 ;

  // Field TXRQ: TXRQ
    const uint32_t CAN1_TI1R_TXRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register TDT1R: mailbox data length control and time stamp register
  #define CAN1_TDT1R (* ((volatile uint32_t *) (0x40006400 + 404)))

  // Field TIME: TIME
    inline uint32_t CAN1_TDT1R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field TGT: TGT
    const uint32_t CAN1_TDT1R_TGT = 1U << 8 ;

  // Field DLC: DLC
    inline uint32_t CAN1_TDT1R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDL1R: mailbox data low register
  #define CAN1_TDL1R (* ((volatile uint32_t *) (0x40006400 + 408)))

  // Field DATA3: DATA3
    inline uint32_t CAN1_TDL1R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN1_TDL1R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN1_TDL1R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN1_TDL1R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDH1R: mailbox data high register
  #define CAN1_TDH1R (* ((volatile uint32_t *) (0x40006400 + 412)))

  // Field DATA7: DATA7
    inline uint32_t CAN1_TDH1R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN1_TDH1R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN1_TDH1R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN1_TDH1R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TI2R: mailbox identifier register
  #define CAN1_TI2R (* ((volatile uint32_t *) (0x40006400 + 416)))

  // Field STID: STID
    inline uint32_t CAN1_TI2R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN1_TI2R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN1_TI2R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN1_TI2R_RTR = 1U << 1 ;

  // Field TXRQ: TXRQ
    const uint32_t CAN1_TI2R_TXRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register TDT2R: mailbox data length control and time stamp register
  #define CAN1_TDT2R (* ((volatile uint32_t *) (0x40006400 + 420)))

  // Field TIME: TIME
    inline uint32_t CAN1_TDT2R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field TGT: TGT
    const uint32_t CAN1_TDT2R_TGT = 1U << 8 ;

  // Field DLC: DLC
    inline uint32_t CAN1_TDT2R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDL2R: mailbox data low register
  #define CAN1_TDL2R (* ((volatile uint32_t *) (0x40006400 + 424)))

  // Field DATA3: DATA3
    inline uint32_t CAN1_TDL2R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN1_TDL2R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN1_TDL2R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN1_TDL2R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDH2R: mailbox data high register
  #define CAN1_TDH2R (* ((volatile uint32_t *) (0x40006400 + 428)))

  // Field DATA7: DATA7
    inline uint32_t CAN1_TDH2R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN1_TDH2R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN1_TDH2R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN1_TDH2R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RI0R: receive FIFO mailbox identifier register
  #define CAN1_RI0R (* ((const volatile uint32_t *) (0x40006400 + 432)))

  // Field STID: STID
    inline uint32_t CAN1_RI0R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN1_RI0R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN1_RI0R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN1_RI0R_RTR = 1U << 1 ;

//------------------------------------------------------------------------------

//---  Register RDT0R: mailbox data high register
  #define CAN1_RDT0R (* ((const volatile uint32_t *) (0x40006400 + 436)))

  // Field TIME: TIME
    inline uint32_t CAN1_RDT0R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field FMI: FMI
    inline uint32_t CAN1_RDT0R_FMI (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DLC: DLC
    inline uint32_t CAN1_RDT0R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RDL0R: mailbox data high register
  #define CAN1_RDL0R (* ((const volatile uint32_t *) (0x40006400 + 440)))

  // Field DATA3: DATA3
    inline uint32_t CAN1_RDL0R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN1_RDL0R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN1_RDL0R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN1_RDL0R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RDH0R: receive FIFO mailbox data high register
  #define CAN1_RDH0R (* ((const volatile uint32_t *) (0x40006400 + 444)))

  // Field DATA7: DATA7
    inline uint32_t CAN1_RDH0R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN1_RDH0R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN1_RDH0R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN1_RDH0R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RI1R: mailbox data high register
  #define CAN1_RI1R (* ((const volatile uint32_t *) (0x40006400 + 448)))

  // Field STID: STID
    inline uint32_t CAN1_RI1R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN1_RI1R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN1_RI1R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN1_RI1R_RTR = 1U << 1 ;

//------------------------------------------------------------------------------

//---  Register RDT1R: mailbox data high register
  #define CAN1_RDT1R (* ((const volatile uint32_t *) (0x40006400 + 452)))

  // Field TIME: TIME
    inline uint32_t CAN1_RDT1R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field FMI: FMI
    inline uint32_t CAN1_RDT1R_FMI (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DLC: DLC
    inline uint32_t CAN1_RDT1R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RDL1R: mailbox data high register
  #define CAN1_RDL1R (* ((const volatile uint32_t *) (0x40006400 + 456)))

  // Field DATA3: DATA3
    inline uint32_t CAN1_RDL1R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN1_RDL1R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN1_RDL1R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN1_RDL1R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RDH1R: mailbox data high register
  #define CAN1_RDH1R (* ((const volatile uint32_t *) (0x40006400 + 460)))

  // Field DATA7: DATA7
    inline uint32_t CAN1_RDH1R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN1_RDH1R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN1_RDH1R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN1_RDH1R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register FMR: filter master register
  #define CAN1_FMR (* ((volatile uint32_t *) (0x40006400 + 512)))

  // Field CAN2SB: CAN2SB
    inline uint32_t CAN1_FMR_CAN2SB (const uint32_t inValue) {return (inValue & 0x3FU) << 8 ; }

  // Field FINIT: FINIT
    const uint32_t CAN1_FMR_FINIT = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register FM1R: filter mode register
  #define CAN1_FM1R (* ((volatile uint32_t *) (0x40006400 + 516)))

  // Field FBM0: Filter mode
    const uint32_t CAN1_FM1R_FBM0 = 1U << 0 ;

  // Field FBM1: Filter mode
    const uint32_t CAN1_FM1R_FBM1 = 1U << 1 ;

  // Field FBM2: Filter mode
    const uint32_t CAN1_FM1R_FBM2 = 1U << 2 ;

  // Field FBM3: Filter mode
    const uint32_t CAN1_FM1R_FBM3 = 1U << 3 ;

  // Field FBM4: Filter mode
    const uint32_t CAN1_FM1R_FBM4 = 1U << 4 ;

  // Field FBM5: Filter mode
    const uint32_t CAN1_FM1R_FBM5 = 1U << 5 ;

  // Field FBM6: Filter mode
    const uint32_t CAN1_FM1R_FBM6 = 1U << 6 ;

  // Field FBM7: Filter mode
    const uint32_t CAN1_FM1R_FBM7 = 1U << 7 ;

  // Field FBM8: Filter mode
    const uint32_t CAN1_FM1R_FBM8 = 1U << 8 ;

  // Field FBM9: Filter mode
    const uint32_t CAN1_FM1R_FBM9 = 1U << 9 ;

  // Field FBM10: Filter mode
    const uint32_t CAN1_FM1R_FBM10 = 1U << 10 ;

  // Field FBM11: Filter mode
    const uint32_t CAN1_FM1R_FBM11 = 1U << 11 ;

  // Field FBM12: Filter mode
    const uint32_t CAN1_FM1R_FBM12 = 1U << 12 ;

  // Field FBM13: Filter mode
    const uint32_t CAN1_FM1R_FBM13 = 1U << 13 ;

  // Field FBM14: Filter mode
    const uint32_t CAN1_FM1R_FBM14 = 1U << 14 ;

  // Field FBM15: Filter mode
    const uint32_t CAN1_FM1R_FBM15 = 1U << 15 ;

  // Field FBM16: Filter mode
    const uint32_t CAN1_FM1R_FBM16 = 1U << 16 ;

  // Field FBM17: Filter mode
    const uint32_t CAN1_FM1R_FBM17 = 1U << 17 ;

  // Field FBM18: Filter mode
    const uint32_t CAN1_FM1R_FBM18 = 1U << 18 ;

  // Field FBM19: Filter mode
    const uint32_t CAN1_FM1R_FBM19 = 1U << 19 ;

  // Field FBM20: Filter mode
    const uint32_t CAN1_FM1R_FBM20 = 1U << 20 ;

  // Field FBM21: Filter mode
    const uint32_t CAN1_FM1R_FBM21 = 1U << 21 ;

  // Field FBM22: Filter mode
    const uint32_t CAN1_FM1R_FBM22 = 1U << 22 ;

  // Field FBM23: Filter mode
    const uint32_t CAN1_FM1R_FBM23 = 1U << 23 ;

  // Field FBM24: Filter mode
    const uint32_t CAN1_FM1R_FBM24 = 1U << 24 ;

  // Field FBM25: Filter mode
    const uint32_t CAN1_FM1R_FBM25 = 1U << 25 ;

  // Field FBM26: Filter mode
    const uint32_t CAN1_FM1R_FBM26 = 1U << 26 ;

  // Field FBM27: Filter mode
    const uint32_t CAN1_FM1R_FBM27 = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register FS1R: filter scale register
  #define CAN1_FS1R (* ((volatile uint32_t *) (0x40006400 + 524)))

  // Field FSC0: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC0 = 1U << 0 ;

  // Field FSC1: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC1 = 1U << 1 ;

  // Field FSC2: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC2 = 1U << 2 ;

  // Field FSC3: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC3 = 1U << 3 ;

  // Field FSC4: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC4 = 1U << 4 ;

  // Field FSC5: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC5 = 1U << 5 ;

  // Field FSC6: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC6 = 1U << 6 ;

  // Field FSC7: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC7 = 1U << 7 ;

  // Field FSC8: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC8 = 1U << 8 ;

  // Field FSC9: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC9 = 1U << 9 ;

  // Field FSC10: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC10 = 1U << 10 ;

  // Field FSC11: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC11 = 1U << 11 ;

  // Field FSC12: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC12 = 1U << 12 ;

  // Field FSC13: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC13 = 1U << 13 ;

  // Field FSC14: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC14 = 1U << 14 ;

  // Field FSC15: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC15 = 1U << 15 ;

  // Field FSC16: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC16 = 1U << 16 ;

  // Field FSC17: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC17 = 1U << 17 ;

  // Field FSC18: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC18 = 1U << 18 ;

  // Field FSC19: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC19 = 1U << 19 ;

  // Field FSC20: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC20 = 1U << 20 ;

  // Field FSC21: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC21 = 1U << 21 ;

  // Field FSC22: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC22 = 1U << 22 ;

  // Field FSC23: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC23 = 1U << 23 ;

  // Field FSC24: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC24 = 1U << 24 ;

  // Field FSC25: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC25 = 1U << 25 ;

  // Field FSC26: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC26 = 1U << 26 ;

  // Field FSC27: Filter scale configuration
    const uint32_t CAN1_FS1R_FSC27 = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register FFA1R: filter FIFO assignment register
  #define CAN1_FFA1R (* ((volatile uint32_t *) (0x40006400 + 532)))

  // Field FFA0: Filter FIFO assignment for filter 0
    const uint32_t CAN1_FFA1R_FFA0 = 1U << 0 ;

  // Field FFA1: Filter FIFO assignment for filter 1
    const uint32_t CAN1_FFA1R_FFA1 = 1U << 1 ;

  // Field FFA2: Filter FIFO assignment for filter 2
    const uint32_t CAN1_FFA1R_FFA2 = 1U << 2 ;

  // Field FFA3: Filter FIFO assignment for filter 3
    const uint32_t CAN1_FFA1R_FFA3 = 1U << 3 ;

  // Field FFA4: Filter FIFO assignment for filter 4
    const uint32_t CAN1_FFA1R_FFA4 = 1U << 4 ;

  // Field FFA5: Filter FIFO assignment for filter 5
    const uint32_t CAN1_FFA1R_FFA5 = 1U << 5 ;

  // Field FFA6: Filter FIFO assignment for filter 6
    const uint32_t CAN1_FFA1R_FFA6 = 1U << 6 ;

  // Field FFA7: Filter FIFO assignment for filter 7
    const uint32_t CAN1_FFA1R_FFA7 = 1U << 7 ;

  // Field FFA8: Filter FIFO assignment for filter 8
    const uint32_t CAN1_FFA1R_FFA8 = 1U << 8 ;

  // Field FFA9: Filter FIFO assignment for filter 9
    const uint32_t CAN1_FFA1R_FFA9 = 1U << 9 ;

  // Field FFA10: Filter FIFO assignment for filter 10
    const uint32_t CAN1_FFA1R_FFA10 = 1U << 10 ;

  // Field FFA11: Filter FIFO assignment for filter 11
    const uint32_t CAN1_FFA1R_FFA11 = 1U << 11 ;

  // Field FFA12: Filter FIFO assignment for filter 12
    const uint32_t CAN1_FFA1R_FFA12 = 1U << 12 ;

  // Field FFA13: Filter FIFO assignment for filter 13
    const uint32_t CAN1_FFA1R_FFA13 = 1U << 13 ;

  // Field FFA14: Filter FIFO assignment for filter 14
    const uint32_t CAN1_FFA1R_FFA14 = 1U << 14 ;

  // Field FFA15: Filter FIFO assignment for filter 15
    const uint32_t CAN1_FFA1R_FFA15 = 1U << 15 ;

  // Field FFA16: Filter FIFO assignment for filter 16
    const uint32_t CAN1_FFA1R_FFA16 = 1U << 16 ;

  // Field FFA17: Filter FIFO assignment for filter 17
    const uint32_t CAN1_FFA1R_FFA17 = 1U << 17 ;

  // Field FFA18: Filter FIFO assignment for filter 18
    const uint32_t CAN1_FFA1R_FFA18 = 1U << 18 ;

  // Field FFA19: Filter FIFO assignment for filter 19
    const uint32_t CAN1_FFA1R_FFA19 = 1U << 19 ;

  // Field FFA20: Filter FIFO assignment for filter 20
    const uint32_t CAN1_FFA1R_FFA20 = 1U << 20 ;

  // Field FFA21: Filter FIFO assignment for filter 21
    const uint32_t CAN1_FFA1R_FFA21 = 1U << 21 ;

  // Field FFA22: Filter FIFO assignment for filter 22
    const uint32_t CAN1_FFA1R_FFA22 = 1U << 22 ;

  // Field FFA23: Filter FIFO assignment for filter 23
    const uint32_t CAN1_FFA1R_FFA23 = 1U << 23 ;

  // Field FFA24: Filter FIFO assignment for filter 24
    const uint32_t CAN1_FFA1R_FFA24 = 1U << 24 ;

  // Field FFA25: Filter FIFO assignment for filter 25
    const uint32_t CAN1_FFA1R_FFA25 = 1U << 25 ;

  // Field FFA26: Filter FIFO assignment for filter 26
    const uint32_t CAN1_FFA1R_FFA26 = 1U << 26 ;

  // Field FFA27: Filter FIFO assignment for filter 27
    const uint32_t CAN1_FFA1R_FFA27 = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register FA1R: filter activation register
  #define CAN1_FA1R (* ((volatile uint32_t *) (0x40006400 + 540)))

  // Field FACT0: Filter active
    const uint32_t CAN1_FA1R_FACT0 = 1U << 0 ;

  // Field FACT1: Filter active
    const uint32_t CAN1_FA1R_FACT1 = 1U << 1 ;

  // Field FACT2: Filter active
    const uint32_t CAN1_FA1R_FACT2 = 1U << 2 ;

  // Field FACT3: Filter active
    const uint32_t CAN1_FA1R_FACT3 = 1U << 3 ;

  // Field FACT4: Filter active
    const uint32_t CAN1_FA1R_FACT4 = 1U << 4 ;

  // Field FACT5: Filter active
    const uint32_t CAN1_FA1R_FACT5 = 1U << 5 ;

  // Field FACT6: Filter active
    const uint32_t CAN1_FA1R_FACT6 = 1U << 6 ;

  // Field FACT7: Filter active
    const uint32_t CAN1_FA1R_FACT7 = 1U << 7 ;

  // Field FACT8: Filter active
    const uint32_t CAN1_FA1R_FACT8 = 1U << 8 ;

  // Field FACT9: Filter active
    const uint32_t CAN1_FA1R_FACT9 = 1U << 9 ;

  // Field FACT10: Filter active
    const uint32_t CAN1_FA1R_FACT10 = 1U << 10 ;

  // Field FACT11: Filter active
    const uint32_t CAN1_FA1R_FACT11 = 1U << 11 ;

  // Field FACT12: Filter active
    const uint32_t CAN1_FA1R_FACT12 = 1U << 12 ;

  // Field FACT13: Filter active
    const uint32_t CAN1_FA1R_FACT13 = 1U << 13 ;

  // Field FACT14: Filter active
    const uint32_t CAN1_FA1R_FACT14 = 1U << 14 ;

  // Field FACT15: Filter active
    const uint32_t CAN1_FA1R_FACT15 = 1U << 15 ;

  // Field FACT16: Filter active
    const uint32_t CAN1_FA1R_FACT16 = 1U << 16 ;

  // Field FACT17: Filter active
    const uint32_t CAN1_FA1R_FACT17 = 1U << 17 ;

  // Field FACT18: Filter active
    const uint32_t CAN1_FA1R_FACT18 = 1U << 18 ;

  // Field FACT19: Filter active
    const uint32_t CAN1_FA1R_FACT19 = 1U << 19 ;

  // Field FACT20: Filter active
    const uint32_t CAN1_FA1R_FACT20 = 1U << 20 ;

  // Field FACT21: Filter active
    const uint32_t CAN1_FA1R_FACT21 = 1U << 21 ;

  // Field FACT22: Filter active
    const uint32_t CAN1_FA1R_FACT22 = 1U << 22 ;

  // Field FACT23: Filter active
    const uint32_t CAN1_FA1R_FACT23 = 1U << 23 ;

  // Field FACT24: Filter active
    const uint32_t CAN1_FA1R_FACT24 = 1U << 24 ;

  // Field FACT25: Filter active
    const uint32_t CAN1_FA1R_FACT25 = 1U << 25 ;

  // Field FACT26: Filter active
    const uint32_t CAN1_FA1R_FACT26 = 1U << 26 ;

  // Field FACT27: Filter active
    const uint32_t CAN1_FA1R_FACT27 = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register F0R1: Filter bank 0 register 1
  #define CAN1_F0R1 (* ((volatile uint32_t *) (0x40006400 + 576)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F0R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F0R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F0R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F0R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F0R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F0R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F0R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F0R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F0R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F0R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F0R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F0R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F0R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F0R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F0R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F0R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F0R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F0R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F0R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F0R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F0R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F0R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F0R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F0R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F0R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F0R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F0R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F0R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F0R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F0R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F0R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F0R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F0R2: Filter bank 0 register 2
  #define CAN1_F0R2 (* ((volatile uint32_t *) (0x40006400 + 580)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F0R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F0R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F0R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F0R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F0R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F0R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F0R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F0R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F0R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F0R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F0R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F0R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F0R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F0R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F0R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F0R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F0R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F0R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F0R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F0R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F0R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F0R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F0R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F0R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F0R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F0R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F0R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F0R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F0R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F0R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F0R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F0R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F1R1: Filter bank 1 register 1
  #define CAN1_F1R1 (* ((volatile uint32_t *) (0x40006400 + 584)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F1R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F1R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F1R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F1R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F1R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F1R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F1R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F1R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F1R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F1R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F1R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F1R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F1R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F1R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F1R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F1R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F1R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F1R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F1R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F1R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F1R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F1R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F1R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F1R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F1R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F1R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F1R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F1R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F1R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F1R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F1R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F1R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F1R2: Filter bank 1 register 2
  #define CAN1_F1R2 (* ((volatile uint32_t *) (0x40006400 + 588)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F1R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F1R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F1R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F1R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F1R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F1R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F1R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F1R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F1R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F1R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F1R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F1R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F1R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F1R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F1R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F1R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F1R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F1R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F1R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F1R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F1R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F1R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F1R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F1R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F1R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F1R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F1R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F1R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F1R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F1R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F1R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F1R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F2R1: Filter bank 2 register 1
  #define CAN1_F2R1 (* ((volatile uint32_t *) (0x40006400 + 592)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F2R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F2R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F2R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F2R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F2R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F2R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F2R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F2R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F2R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F2R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F2R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F2R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F2R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F2R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F2R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F2R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F2R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F2R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F2R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F2R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F2R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F2R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F2R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F2R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F2R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F2R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F2R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F2R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F2R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F2R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F2R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F2R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F2R2: Filter bank 2 register 2
  #define CAN1_F2R2 (* ((volatile uint32_t *) (0x40006400 + 596)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F2R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F2R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F2R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F2R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F2R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F2R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F2R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F2R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F2R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F2R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F2R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F2R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F2R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F2R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F2R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F2R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F2R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F2R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F2R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F2R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F2R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F2R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F2R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F2R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F2R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F2R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F2R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F2R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F2R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F2R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F2R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F2R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F3R1: Filter bank 3 register 1
  #define CAN1_F3R1 (* ((volatile uint32_t *) (0x40006400 + 600)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F3R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F3R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F3R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F3R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F3R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F3R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F3R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F3R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F3R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F3R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F3R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F3R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F3R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F3R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F3R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F3R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F3R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F3R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F3R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F3R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F3R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F3R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F3R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F3R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F3R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F3R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F3R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F3R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F3R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F3R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F3R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F3R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F3R2: Filter bank 3 register 2
  #define CAN1_F3R2 (* ((volatile uint32_t *) (0x40006400 + 604)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F3R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F3R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F3R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F3R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F3R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F3R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F3R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F3R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F3R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F3R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F3R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F3R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F3R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F3R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F3R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F3R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F3R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F3R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F3R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F3R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F3R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F3R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F3R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F3R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F3R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F3R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F3R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F3R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F3R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F3R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F3R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F3R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F4R1: Filter bank 4 register 1
  #define CAN1_F4R1 (* ((volatile uint32_t *) (0x40006400 + 608)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F4R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F4R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F4R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F4R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F4R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F4R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F4R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F4R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F4R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F4R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F4R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F4R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F4R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F4R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F4R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F4R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F4R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F4R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F4R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F4R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F4R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F4R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F4R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F4R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F4R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F4R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F4R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F4R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F4R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F4R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F4R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F4R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F4R2: Filter bank 4 register 2
  #define CAN1_F4R2 (* ((volatile uint32_t *) (0x40006400 + 612)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F4R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F4R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F4R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F4R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F4R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F4R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F4R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F4R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F4R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F4R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F4R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F4R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F4R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F4R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F4R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F4R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F4R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F4R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F4R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F4R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F4R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F4R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F4R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F4R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F4R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F4R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F4R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F4R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F4R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F4R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F4R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F4R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F5R1: Filter bank 5 register 1
  #define CAN1_F5R1 (* ((volatile uint32_t *) (0x40006400 + 616)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F5R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F5R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F5R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F5R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F5R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F5R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F5R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F5R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F5R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F5R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F5R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F5R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F5R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F5R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F5R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F5R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F5R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F5R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F5R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F5R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F5R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F5R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F5R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F5R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F5R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F5R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F5R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F5R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F5R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F5R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F5R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F5R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F5R2: Filter bank 5 register 2
  #define CAN1_F5R2 (* ((volatile uint32_t *) (0x40006400 + 620)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F5R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F5R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F5R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F5R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F5R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F5R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F5R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F5R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F5R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F5R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F5R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F5R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F5R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F5R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F5R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F5R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F5R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F5R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F5R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F5R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F5R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F5R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F5R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F5R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F5R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F5R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F5R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F5R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F5R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F5R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F5R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F5R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F6R1: Filter bank 6 register 1
  #define CAN1_F6R1 (* ((volatile uint32_t *) (0x40006400 + 624)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F6R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F6R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F6R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F6R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F6R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F6R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F6R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F6R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F6R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F6R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F6R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F6R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F6R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F6R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F6R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F6R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F6R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F6R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F6R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F6R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F6R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F6R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F6R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F6R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F6R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F6R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F6R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F6R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F6R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F6R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F6R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F6R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F6R2: Filter bank 6 register 2
  #define CAN1_F6R2 (* ((volatile uint32_t *) (0x40006400 + 628)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F6R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F6R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F6R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F6R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F6R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F6R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F6R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F6R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F6R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F6R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F6R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F6R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F6R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F6R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F6R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F6R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F6R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F6R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F6R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F6R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F6R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F6R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F6R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F6R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F6R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F6R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F6R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F6R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F6R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F6R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F6R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F6R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F7R1: Filter bank 7 register 1
  #define CAN1_F7R1 (* ((volatile uint32_t *) (0x40006400 + 632)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F7R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F7R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F7R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F7R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F7R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F7R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F7R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F7R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F7R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F7R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F7R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F7R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F7R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F7R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F7R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F7R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F7R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F7R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F7R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F7R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F7R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F7R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F7R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F7R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F7R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F7R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F7R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F7R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F7R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F7R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F7R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F7R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F7R2: Filter bank 7 register 2
  #define CAN1_F7R2 (* ((volatile uint32_t *) (0x40006400 + 636)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F7R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F7R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F7R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F7R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F7R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F7R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F7R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F7R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F7R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F7R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F7R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F7R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F7R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F7R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F7R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F7R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F7R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F7R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F7R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F7R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F7R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F7R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F7R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F7R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F7R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F7R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F7R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F7R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F7R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F7R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F7R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F7R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F8R1: Filter bank 8 register 1
  #define CAN1_F8R1 (* ((volatile uint32_t *) (0x40006400 + 640)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F8R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F8R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F8R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F8R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F8R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F8R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F8R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F8R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F8R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F8R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F8R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F8R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F8R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F8R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F8R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F8R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F8R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F8R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F8R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F8R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F8R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F8R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F8R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F8R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F8R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F8R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F8R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F8R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F8R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F8R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F8R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F8R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F8R2: Filter bank 8 register 2
  #define CAN1_F8R2 (* ((volatile uint32_t *) (0x40006400 + 644)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F8R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F8R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F8R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F8R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F8R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F8R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F8R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F8R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F8R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F8R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F8R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F8R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F8R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F8R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F8R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F8R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F8R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F8R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F8R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F8R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F8R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F8R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F8R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F8R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F8R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F8R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F8R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F8R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F8R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F8R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F8R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F8R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F9R1: Filter bank 9 register 1
  #define CAN1_F9R1 (* ((volatile uint32_t *) (0x40006400 + 648)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F9R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F9R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F9R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F9R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F9R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F9R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F9R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F9R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F9R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F9R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F9R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F9R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F9R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F9R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F9R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F9R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F9R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F9R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F9R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F9R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F9R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F9R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F9R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F9R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F9R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F9R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F9R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F9R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F9R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F9R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F9R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F9R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F9R2: Filter bank 9 register 2
  #define CAN1_F9R2 (* ((volatile uint32_t *) (0x40006400 + 652)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F9R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F9R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F9R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F9R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F9R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F9R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F9R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F9R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F9R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F9R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F9R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F9R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F9R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F9R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F9R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F9R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F9R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F9R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F9R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F9R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F9R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F9R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F9R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F9R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F9R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F9R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F9R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F9R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F9R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F9R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F9R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F9R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F10R1: Filter bank 10 register 1
  #define CAN1_F10R1 (* ((volatile uint32_t *) (0x40006400 + 656)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F10R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F10R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F10R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F10R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F10R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F10R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F10R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F10R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F10R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F10R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F10R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F10R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F10R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F10R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F10R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F10R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F10R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F10R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F10R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F10R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F10R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F10R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F10R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F10R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F10R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F10R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F10R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F10R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F10R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F10R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F10R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F10R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F10R2: Filter bank 10 register 2
  #define CAN1_F10R2 (* ((volatile uint32_t *) (0x40006400 + 660)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F10R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F10R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F10R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F10R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F10R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F10R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F10R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F10R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F10R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F10R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F10R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F10R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F10R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F10R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F10R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F10R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F10R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F10R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F10R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F10R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F10R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F10R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F10R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F10R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F10R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F10R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F10R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F10R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F10R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F10R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F10R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F10R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F11R1: Filter bank 11 register 1
  #define CAN1_F11R1 (* ((volatile uint32_t *) (0x40006400 + 664)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F11R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F11R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F11R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F11R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F11R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F11R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F11R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F11R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F11R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F11R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F11R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F11R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F11R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F11R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F11R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F11R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F11R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F11R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F11R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F11R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F11R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F11R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F11R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F11R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F11R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F11R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F11R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F11R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F11R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F11R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F11R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F11R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F11R2: Filter bank 11 register 2
  #define CAN1_F11R2 (* ((volatile uint32_t *) (0x40006400 + 668)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F11R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F11R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F11R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F11R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F11R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F11R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F11R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F11R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F11R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F11R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F11R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F11R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F11R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F11R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F11R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F11R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F11R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F11R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F11R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F11R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F11R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F11R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F11R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F11R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F11R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F11R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F11R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F11R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F11R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F11R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F11R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F11R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F12R1: Filter bank 4 register 1
  #define CAN1_F12R1 (* ((volatile uint32_t *) (0x40006400 + 672)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F12R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F12R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F12R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F12R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F12R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F12R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F12R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F12R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F12R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F12R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F12R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F12R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F12R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F12R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F12R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F12R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F12R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F12R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F12R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F12R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F12R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F12R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F12R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F12R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F12R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F12R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F12R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F12R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F12R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F12R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F12R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F12R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F12R2: Filter bank 12 register 2
  #define CAN1_F12R2 (* ((volatile uint32_t *) (0x40006400 + 676)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F12R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F12R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F12R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F12R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F12R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F12R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F12R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F12R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F12R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F12R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F12R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F12R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F12R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F12R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F12R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F12R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F12R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F12R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F12R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F12R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F12R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F12R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F12R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F12R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F12R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F12R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F12R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F12R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F12R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F12R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F12R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F12R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F13R1: Filter bank 13 register 1
  #define CAN1_F13R1 (* ((volatile uint32_t *) (0x40006400 + 680)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F13R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F13R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F13R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F13R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F13R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F13R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F13R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F13R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F13R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F13R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F13R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F13R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F13R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F13R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F13R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F13R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F13R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F13R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F13R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F13R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F13R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F13R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F13R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F13R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F13R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F13R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F13R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F13R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F13R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F13R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F13R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F13R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F13R2: Filter bank 13 register 2
  #define CAN1_F13R2 (* ((volatile uint32_t *) (0x40006400 + 684)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F13R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F13R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F13R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F13R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F13R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F13R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F13R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F13R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F13R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F13R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F13R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F13R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F13R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F13R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F13R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F13R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F13R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F13R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F13R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F13R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F13R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F13R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F13R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F13R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F13R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F13R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F13R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F13R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F13R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F13R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F13R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F13R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F14R1: Filter bank 14 register 1
  #define CAN1_F14R1 (* ((volatile uint32_t *) (0x40006400 + 688)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F14R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F14R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F14R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F14R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F14R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F14R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F14R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F14R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F14R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F14R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F14R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F14R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F14R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F14R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F14R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F14R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F14R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F14R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F14R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F14R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F14R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F14R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F14R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F14R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F14R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F14R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F14R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F14R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F14R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F14R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F14R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F14R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F14R2: Filter bank 14 register 2
  #define CAN1_F14R2 (* ((volatile uint32_t *) (0x40006400 + 692)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F14R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F14R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F14R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F14R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F14R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F14R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F14R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F14R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F14R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F14R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F14R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F14R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F14R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F14R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F14R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F14R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F14R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F14R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F14R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F14R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F14R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F14R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F14R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F14R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F14R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F14R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F14R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F14R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F14R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F14R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F14R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F14R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F15R1: Filter bank 15 register 1
  #define CAN1_F15R1 (* ((volatile uint32_t *) (0x40006400 + 696)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F15R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F15R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F15R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F15R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F15R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F15R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F15R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F15R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F15R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F15R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F15R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F15R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F15R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F15R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F15R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F15R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F15R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F15R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F15R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F15R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F15R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F15R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F15R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F15R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F15R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F15R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F15R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F15R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F15R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F15R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F15R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F15R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F15R2: Filter bank 15 register 2
  #define CAN1_F15R2 (* ((volatile uint32_t *) (0x40006400 + 700)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F15R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F15R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F15R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F15R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F15R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F15R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F15R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F15R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F15R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F15R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F15R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F15R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F15R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F15R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F15R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F15R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F15R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F15R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F15R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F15R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F15R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F15R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F15R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F15R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F15R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F15R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F15R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F15R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F15R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F15R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F15R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F15R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F16R1: Filter bank 16 register 1
  #define CAN1_F16R1 (* ((volatile uint32_t *) (0x40006400 + 704)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F16R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F16R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F16R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F16R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F16R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F16R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F16R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F16R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F16R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F16R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F16R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F16R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F16R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F16R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F16R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F16R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F16R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F16R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F16R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F16R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F16R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F16R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F16R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F16R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F16R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F16R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F16R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F16R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F16R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F16R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F16R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F16R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F16R2: Filter bank 16 register 2
  #define CAN1_F16R2 (* ((volatile uint32_t *) (0x40006400 + 708)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F16R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F16R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F16R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F16R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F16R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F16R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F16R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F16R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F16R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F16R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F16R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F16R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F16R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F16R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F16R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F16R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F16R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F16R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F16R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F16R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F16R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F16R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F16R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F16R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F16R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F16R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F16R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F16R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F16R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F16R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F16R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F16R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F17R1: Filter bank 17 register 1
  #define CAN1_F17R1 (* ((volatile uint32_t *) (0x40006400 + 712)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F17R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F17R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F17R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F17R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F17R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F17R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F17R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F17R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F17R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F17R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F17R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F17R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F17R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F17R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F17R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F17R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F17R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F17R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F17R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F17R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F17R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F17R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F17R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F17R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F17R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F17R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F17R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F17R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F17R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F17R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F17R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F17R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F17R2: Filter bank 17 register 2
  #define CAN1_F17R2 (* ((volatile uint32_t *) (0x40006400 + 716)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F17R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F17R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F17R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F17R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F17R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F17R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F17R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F17R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F17R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F17R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F17R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F17R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F17R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F17R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F17R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F17R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F17R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F17R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F17R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F17R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F17R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F17R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F17R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F17R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F17R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F17R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F17R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F17R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F17R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F17R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F17R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F17R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F18R1: Filter bank 18 register 1
  #define CAN1_F18R1 (* ((volatile uint32_t *) (0x40006400 + 720)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F18R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F18R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F18R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F18R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F18R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F18R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F18R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F18R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F18R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F18R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F18R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F18R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F18R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F18R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F18R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F18R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F18R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F18R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F18R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F18R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F18R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F18R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F18R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F18R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F18R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F18R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F18R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F18R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F18R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F18R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F18R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F18R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F18R2: Filter bank 18 register 2
  #define CAN1_F18R2 (* ((volatile uint32_t *) (0x40006400 + 724)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F18R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F18R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F18R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F18R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F18R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F18R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F18R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F18R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F18R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F18R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F18R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F18R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F18R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F18R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F18R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F18R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F18R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F18R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F18R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F18R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F18R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F18R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F18R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F18R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F18R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F18R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F18R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F18R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F18R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F18R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F18R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F18R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F19R1: Filter bank 19 register 1
  #define CAN1_F19R1 (* ((volatile uint32_t *) (0x40006400 + 728)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F19R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F19R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F19R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F19R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F19R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F19R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F19R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F19R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F19R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F19R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F19R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F19R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F19R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F19R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F19R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F19R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F19R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F19R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F19R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F19R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F19R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F19R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F19R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F19R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F19R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F19R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F19R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F19R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F19R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F19R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F19R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F19R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F19R2: Filter bank 19 register 2
  #define CAN1_F19R2 (* ((volatile uint32_t *) (0x40006400 + 732)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F19R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F19R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F19R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F19R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F19R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F19R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F19R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F19R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F19R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F19R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F19R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F19R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F19R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F19R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F19R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F19R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F19R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F19R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F19R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F19R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F19R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F19R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F19R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F19R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F19R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F19R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F19R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F19R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F19R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F19R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F19R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F19R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F20R1: Filter bank 20 register 1
  #define CAN1_F20R1 (* ((volatile uint32_t *) (0x40006400 + 736)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F20R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F20R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F20R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F20R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F20R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F20R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F20R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F20R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F20R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F20R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F20R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F20R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F20R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F20R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F20R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F20R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F20R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F20R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F20R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F20R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F20R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F20R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F20R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F20R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F20R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F20R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F20R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F20R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F20R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F20R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F20R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F20R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F20R2: Filter bank 20 register 2
  #define CAN1_F20R2 (* ((volatile uint32_t *) (0x40006400 + 740)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F20R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F20R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F20R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F20R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F20R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F20R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F20R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F20R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F20R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F20R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F20R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F20R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F20R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F20R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F20R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F20R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F20R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F20R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F20R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F20R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F20R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F20R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F20R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F20R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F20R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F20R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F20R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F20R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F20R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F20R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F20R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F20R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F21R1: Filter bank 21 register 1
  #define CAN1_F21R1 (* ((volatile uint32_t *) (0x40006400 + 744)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F21R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F21R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F21R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F21R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F21R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F21R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F21R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F21R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F21R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F21R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F21R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F21R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F21R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F21R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F21R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F21R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F21R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F21R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F21R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F21R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F21R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F21R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F21R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F21R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F21R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F21R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F21R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F21R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F21R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F21R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F21R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F21R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F21R2: Filter bank 21 register 2
  #define CAN1_F21R2 (* ((volatile uint32_t *) (0x40006400 + 748)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F21R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F21R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F21R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F21R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F21R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F21R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F21R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F21R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F21R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F21R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F21R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F21R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F21R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F21R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F21R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F21R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F21R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F21R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F21R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F21R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F21R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F21R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F21R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F21R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F21R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F21R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F21R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F21R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F21R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F21R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F21R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F21R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F22R1: Filter bank 22 register 1
  #define CAN1_F22R1 (* ((volatile uint32_t *) (0x40006400 + 752)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F22R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F22R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F22R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F22R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F22R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F22R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F22R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F22R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F22R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F22R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F22R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F22R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F22R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F22R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F22R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F22R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F22R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F22R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F22R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F22R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F22R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F22R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F22R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F22R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F22R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F22R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F22R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F22R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F22R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F22R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F22R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F22R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F22R2: Filter bank 22 register 2
  #define CAN1_F22R2 (* ((volatile uint32_t *) (0x40006400 + 756)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F22R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F22R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F22R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F22R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F22R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F22R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F22R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F22R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F22R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F22R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F22R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F22R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F22R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F22R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F22R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F22R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F22R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F22R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F22R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F22R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F22R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F22R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F22R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F22R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F22R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F22R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F22R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F22R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F22R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F22R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F22R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F22R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F23R1: Filter bank 23 register 1
  #define CAN1_F23R1 (* ((volatile uint32_t *) (0x40006400 + 760)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F23R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F23R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F23R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F23R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F23R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F23R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F23R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F23R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F23R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F23R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F23R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F23R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F23R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F23R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F23R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F23R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F23R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F23R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F23R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F23R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F23R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F23R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F23R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F23R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F23R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F23R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F23R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F23R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F23R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F23R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F23R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F23R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F23R2: Filter bank 23 register 2
  #define CAN1_F23R2 (* ((volatile uint32_t *) (0x40006400 + 764)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F23R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F23R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F23R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F23R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F23R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F23R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F23R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F23R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F23R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F23R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F23R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F23R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F23R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F23R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F23R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F23R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F23R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F23R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F23R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F23R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F23R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F23R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F23R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F23R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F23R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F23R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F23R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F23R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F23R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F23R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F23R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F23R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F24R1: Filter bank 24 register 1
  #define CAN1_F24R1 (* ((volatile uint32_t *) (0x40006400 + 768)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F24R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F24R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F24R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F24R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F24R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F24R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F24R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F24R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F24R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F24R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F24R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F24R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F24R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F24R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F24R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F24R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F24R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F24R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F24R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F24R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F24R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F24R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F24R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F24R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F24R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F24R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F24R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F24R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F24R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F24R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F24R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F24R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F24R2: Filter bank 24 register 2
  #define CAN1_F24R2 (* ((volatile uint32_t *) (0x40006400 + 772)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F24R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F24R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F24R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F24R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F24R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F24R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F24R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F24R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F24R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F24R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F24R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F24R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F24R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F24R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F24R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F24R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F24R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F24R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F24R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F24R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F24R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F24R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F24R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F24R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F24R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F24R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F24R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F24R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F24R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F24R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F24R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F24R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F25R1: Filter bank 25 register 1
  #define CAN1_F25R1 (* ((volatile uint32_t *) (0x40006400 + 776)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F25R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F25R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F25R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F25R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F25R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F25R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F25R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F25R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F25R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F25R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F25R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F25R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F25R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F25R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F25R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F25R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F25R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F25R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F25R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F25R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F25R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F25R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F25R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F25R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F25R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F25R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F25R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F25R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F25R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F25R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F25R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F25R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F25R2: Filter bank 25 register 2
  #define CAN1_F25R2 (* ((volatile uint32_t *) (0x40006400 + 780)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F25R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F25R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F25R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F25R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F25R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F25R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F25R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F25R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F25R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F25R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F25R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F25R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F25R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F25R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F25R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F25R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F25R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F25R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F25R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F25R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F25R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F25R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F25R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F25R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F25R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F25R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F25R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F25R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F25R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F25R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F25R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F25R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F26R1: Filter bank 26 register 1
  #define CAN1_F26R1 (* ((volatile uint32_t *) (0x40006400 + 784)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F26R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F26R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F26R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F26R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F26R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F26R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F26R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F26R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F26R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F26R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F26R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F26R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F26R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F26R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F26R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F26R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F26R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F26R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F26R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F26R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F26R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F26R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F26R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F26R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F26R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F26R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F26R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F26R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F26R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F26R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F26R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F26R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F26R2: Filter bank 26 register 2
  #define CAN1_F26R2 (* ((volatile uint32_t *) (0x40006400 + 788)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F26R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F26R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F26R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F26R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F26R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F26R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F26R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F26R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F26R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F26R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F26R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F26R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F26R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F26R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F26R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F26R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F26R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F26R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F26R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F26R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F26R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F26R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F26R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F26R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F26R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F26R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F26R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F26R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F26R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F26R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F26R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F26R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F27R1: Filter bank 27 register 1
  #define CAN1_F27R1 (* ((volatile uint32_t *) (0x40006400 + 792)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F27R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F27R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F27R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F27R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F27R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F27R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F27R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F27R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F27R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F27R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F27R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F27R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F27R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F27R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F27R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F27R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F27R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F27R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F27R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F27R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F27R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F27R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F27R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F27R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F27R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F27R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F27R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F27R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F27R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F27R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F27R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F27R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F27R2: Filter bank 27 register 2
  #define CAN1_F27R2 (* ((volatile uint32_t *) (0x40006400 + 796)))

  // Field FB0: Filter bits
    const uint32_t CAN1_F27R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN1_F27R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN1_F27R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN1_F27R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN1_F27R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN1_F27R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN1_F27R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN1_F27R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN1_F27R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN1_F27R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN1_F27R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN1_F27R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN1_F27R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN1_F27R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN1_F27R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN1_F27R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN1_F27R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN1_F27R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN1_F27R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN1_F27R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN1_F27R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN1_F27R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN1_F27R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN1_F27R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN1_F27R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN1_F27R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN1_F27R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN1_F27R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN1_F27R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN1_F27R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN1_F27R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN1_F27R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------
// Peripheral CAN2
//------------------------------------------------------------------------------

//---  Register MCR: master control register
  #define CAN2_MCR (* ((volatile uint32_t *) (0x40006800 + 0)))

  // Field DBF: DBF
    const uint32_t CAN2_MCR_DBF = 1U << 16 ;

  // Field RESET: RESET
    const uint32_t CAN2_MCR_RESET = 1U << 15 ;

  // Field TTCM: TTCM
    const uint32_t CAN2_MCR_TTCM = 1U << 7 ;

  // Field ABOM: ABOM
    const uint32_t CAN2_MCR_ABOM = 1U << 6 ;

  // Field AWUM: AWUM
    const uint32_t CAN2_MCR_AWUM = 1U << 5 ;

  // Field NART: NART
    const uint32_t CAN2_MCR_NART = 1U << 4 ;

  // Field RFLM: RFLM
    const uint32_t CAN2_MCR_RFLM = 1U << 3 ;

  // Field TXFP: TXFP
    const uint32_t CAN2_MCR_TXFP = 1U << 2 ;

  // Field SLEEP: SLEEP
    const uint32_t CAN2_MCR_SLEEP = 1U << 1 ;

  // Field INRQ: INRQ
    const uint32_t CAN2_MCR_INRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register MSR: master status register
  #define CAN2_MSR (* ((volatile uint32_t *) (0x40006800 + 4)))

  // Field RX: RX
    const uint32_t CAN2_MSR_RX = 1U << 11 ;

  // Field SAMP: SAMP
    const uint32_t CAN2_MSR_SAMP = 1U << 10 ;

  // Field RXM: RXM
    const uint32_t CAN2_MSR_RXM = 1U << 9 ;

  // Field TXM: TXM
    const uint32_t CAN2_MSR_TXM = 1U << 8 ;

  // Field SLAKI: SLAKI
    const uint32_t CAN2_MSR_SLAKI = 1U << 4 ;

  // Field WKUI: WKUI
    const uint32_t CAN2_MSR_WKUI = 1U << 3 ;

  // Field ERRI: ERRI
    const uint32_t CAN2_MSR_ERRI = 1U << 2 ;

  // Field SLAK: SLAK
    const uint32_t CAN2_MSR_SLAK = 1U << 1 ;

  // Field INAK: INAK
    const uint32_t CAN2_MSR_INAK = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register TSR: transmit status register
  #define CAN2_TSR (* ((volatile uint32_t *) (0x40006800 + 8)))

  // Field LOW2: Lowest priority flag for mailbox 2
    const uint32_t CAN2_TSR_LOW2 = 1U << 31 ;

  // Field LOW1: Lowest priority flag for mailbox 1
    const uint32_t CAN2_TSR_LOW1 = 1U << 30 ;

  // Field LOW0: Lowest priority flag for mailbox 0
    const uint32_t CAN2_TSR_LOW0 = 1U << 29 ;

  // Field TME2: Lowest priority flag for mailbox 2
    const uint32_t CAN2_TSR_TME2 = 1U << 28 ;

  // Field TME1: Lowest priority flag for mailbox 1
    const uint32_t CAN2_TSR_TME1 = 1U << 27 ;

  // Field TME0: Lowest priority flag for mailbox 0
    const uint32_t CAN2_TSR_TME0 = 1U << 26 ;

  // Field CODE: CODE
    inline uint32_t CAN2_TSR_CODE (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field ABRQ2: ABRQ2
    const uint32_t CAN2_TSR_ABRQ2 = 1U << 23 ;

  // Field TERR2: TERR2
    const uint32_t CAN2_TSR_TERR2 = 1U << 19 ;

  // Field ALST2: ALST2
    const uint32_t CAN2_TSR_ALST2 = 1U << 18 ;

  // Field TXOK2: TXOK2
    const uint32_t CAN2_TSR_TXOK2 = 1U << 17 ;

  // Field RQCP2: RQCP2
    const uint32_t CAN2_TSR_RQCP2 = 1U << 16 ;

  // Field ABRQ1: ABRQ1
    const uint32_t CAN2_TSR_ABRQ1 = 1U << 15 ;

  // Field TERR1: TERR1
    const uint32_t CAN2_TSR_TERR1 = 1U << 11 ;

  // Field ALST1: ALST1
    const uint32_t CAN2_TSR_ALST1 = 1U << 10 ;

  // Field TXOK1: TXOK1
    const uint32_t CAN2_TSR_TXOK1 = 1U << 9 ;

  // Field RQCP1: RQCP1
    const uint32_t CAN2_TSR_RQCP1 = 1U << 8 ;

  // Field ABRQ0: ABRQ0
    const uint32_t CAN2_TSR_ABRQ0 = 1U << 7 ;

  // Field TERR0: TERR0
    const uint32_t CAN2_TSR_TERR0 = 1U << 3 ;

  // Field ALST0: ALST0
    const uint32_t CAN2_TSR_ALST0 = 1U << 2 ;

  // Field TXOK0: TXOK0
    const uint32_t CAN2_TSR_TXOK0 = 1U << 1 ;

  // Field RQCP0: RQCP0
    const uint32_t CAN2_TSR_RQCP0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register RF0R: receive FIFO 0 register
  #define CAN2_RF0R (* ((volatile uint32_t *) (0x40006800 + 12)))

  // Field RFOM0: RFOM0
    const uint32_t CAN2_RF0R_RFOM0 = 1U << 5 ;

  // Field FOVR0: FOVR0
    const uint32_t CAN2_RF0R_FOVR0 = 1U << 4 ;

  // Field FULL0: FULL0
    const uint32_t CAN2_RF0R_FULL0 = 1U << 3 ;

  // Field FMP0: FMP0
    inline uint32_t CAN2_RF0R_FMP0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RF1R: receive FIFO 1 register
  #define CAN2_RF1R (* ((volatile uint32_t *) (0x40006800 + 16)))

  // Field RFOM1: RFOM1
    const uint32_t CAN2_RF1R_RFOM1 = 1U << 5 ;

  // Field FOVR1: FOVR1
    const uint32_t CAN2_RF1R_FOVR1 = 1U << 4 ;

  // Field FULL1: FULL1
    const uint32_t CAN2_RF1R_FULL1 = 1U << 3 ;

  // Field FMP1: FMP1
    inline uint32_t CAN2_RF1R_FMP1 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IER: interrupt enable register
  #define CAN2_IER (* ((volatile uint32_t *) (0x40006800 + 20)))

  // Field SLKIE: SLKIE
    const uint32_t CAN2_IER_SLKIE = 1U << 17 ;

  // Field WKUIE: WKUIE
    const uint32_t CAN2_IER_WKUIE = 1U << 16 ;

  // Field ERRIE: ERRIE
    const uint32_t CAN2_IER_ERRIE = 1U << 15 ;

  // Field LECIE: LECIE
    const uint32_t CAN2_IER_LECIE = 1U << 11 ;

  // Field BOFIE: BOFIE
    const uint32_t CAN2_IER_BOFIE = 1U << 10 ;

  // Field EPVIE: EPVIE
    const uint32_t CAN2_IER_EPVIE = 1U << 9 ;

  // Field EWGIE: EWGIE
    const uint32_t CAN2_IER_EWGIE = 1U << 8 ;

  // Field FOVIE1: FOVIE1
    const uint32_t CAN2_IER_FOVIE1 = 1U << 6 ;

  // Field FFIE1: FFIE1
    const uint32_t CAN2_IER_FFIE1 = 1U << 5 ;

  // Field FMPIE1: FMPIE1
    const uint32_t CAN2_IER_FMPIE1 = 1U << 4 ;

  // Field FOVIE0: FOVIE0
    const uint32_t CAN2_IER_FOVIE0 = 1U << 3 ;

  // Field FFIE0: FFIE0
    const uint32_t CAN2_IER_FFIE0 = 1U << 2 ;

  // Field FMPIE0: FMPIE0
    const uint32_t CAN2_IER_FMPIE0 = 1U << 1 ;

  // Field TMEIE: TMEIE
    const uint32_t CAN2_IER_TMEIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ESR: interrupt enable register
  #define CAN2_ESR (* ((volatile uint32_t *) (0x40006800 + 24)))

  // Field REC: REC
    inline uint32_t CAN2_ESR_REC (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field TEC: TEC
    inline uint32_t CAN2_ESR_TEC (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field LEC: LEC
    inline uint32_t CAN2_ESR_LEC (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field BOFF: BOFF
    const uint32_t CAN2_ESR_BOFF = 1U << 2 ;

  // Field EPVF: EPVF
    const uint32_t CAN2_ESR_EPVF = 1U << 1 ;

  // Field EWGF: EWGF
    const uint32_t CAN2_ESR_EWGF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BTR: bit timing register
  #define CAN2_BTR (* ((volatile uint32_t *) (0x40006800 + 28)))

  // Field SILM: SILM
    const uint32_t CAN2_BTR_SILM = 1U << 31 ;

  // Field LBKM: LBKM
    const uint32_t CAN2_BTR_LBKM = 1U << 30 ;

  // Field SJW: SJW
    inline uint32_t CAN2_BTR_SJW (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field TS2: TS2
    inline uint32_t CAN2_BTR_TS2 (const uint32_t inValue) {return (inValue & 0x7U) << 20 ; }

  // Field TS1: TS1
    inline uint32_t CAN2_BTR_TS1 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field BRP: BRP
    inline uint32_t CAN2_BTR_BRP (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TI0R: TX mailbox identifier register
  #define CAN2_TI0R (* ((volatile uint32_t *) (0x40006800 + 384)))

  // Field STID: STID
    inline uint32_t CAN2_TI0R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN2_TI0R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN2_TI0R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN2_TI0R_RTR = 1U << 1 ;

  // Field TXRQ: TXRQ
    const uint32_t CAN2_TI0R_TXRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register TDT0R: mailbox data length control and time stamp register
  #define CAN2_TDT0R (* ((volatile uint32_t *) (0x40006800 + 388)))

  // Field TIME: TIME
    inline uint32_t CAN2_TDT0R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field TGT: TGT
    const uint32_t CAN2_TDT0R_TGT = 1U << 8 ;

  // Field DLC: DLC
    inline uint32_t CAN2_TDT0R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDL0R: mailbox data low register
  #define CAN2_TDL0R (* ((volatile uint32_t *) (0x40006800 + 392)))

  // Field DATA3: DATA3
    inline uint32_t CAN2_TDL0R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN2_TDL0R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN2_TDL0R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN2_TDL0R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDH0R: mailbox data high register
  #define CAN2_TDH0R (* ((volatile uint32_t *) (0x40006800 + 396)))

  // Field DATA7: DATA7
    inline uint32_t CAN2_TDH0R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN2_TDH0R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN2_TDH0R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN2_TDH0R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TI1R: mailbox identifier register
  #define CAN2_TI1R (* ((volatile uint32_t *) (0x40006800 + 400)))

  // Field STID: STID
    inline uint32_t CAN2_TI1R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN2_TI1R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN2_TI1R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN2_TI1R_RTR = 1U << 1 ;

  // Field TXRQ: TXRQ
    const uint32_t CAN2_TI1R_TXRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register TDT1R: mailbox data length control and time stamp register
  #define CAN2_TDT1R (* ((volatile uint32_t *) (0x40006800 + 404)))

  // Field TIME: TIME
    inline uint32_t CAN2_TDT1R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field TGT: TGT
    const uint32_t CAN2_TDT1R_TGT = 1U << 8 ;

  // Field DLC: DLC
    inline uint32_t CAN2_TDT1R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDL1R: mailbox data low register
  #define CAN2_TDL1R (* ((volatile uint32_t *) (0x40006800 + 408)))

  // Field DATA3: DATA3
    inline uint32_t CAN2_TDL1R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN2_TDL1R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN2_TDL1R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN2_TDL1R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDH1R: mailbox data high register
  #define CAN2_TDH1R (* ((volatile uint32_t *) (0x40006800 + 412)))

  // Field DATA7: DATA7
    inline uint32_t CAN2_TDH1R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN2_TDH1R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN2_TDH1R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN2_TDH1R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TI2R: mailbox identifier register
  #define CAN2_TI2R (* ((volatile uint32_t *) (0x40006800 + 416)))

  // Field STID: STID
    inline uint32_t CAN2_TI2R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN2_TI2R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN2_TI2R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN2_TI2R_RTR = 1U << 1 ;

  // Field TXRQ: TXRQ
    const uint32_t CAN2_TI2R_TXRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register TDT2R: mailbox data length control and time stamp register
  #define CAN2_TDT2R (* ((volatile uint32_t *) (0x40006800 + 420)))

  // Field TIME: TIME
    inline uint32_t CAN2_TDT2R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field TGT: TGT
    const uint32_t CAN2_TDT2R_TGT = 1U << 8 ;

  // Field DLC: DLC
    inline uint32_t CAN2_TDT2R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDL2R: mailbox data low register
  #define CAN2_TDL2R (* ((volatile uint32_t *) (0x40006800 + 424)))

  // Field DATA3: DATA3
    inline uint32_t CAN2_TDL2R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN2_TDL2R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN2_TDL2R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN2_TDL2R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDH2R: mailbox data high register
  #define CAN2_TDH2R (* ((volatile uint32_t *) (0x40006800 + 428)))

  // Field DATA7: DATA7
    inline uint32_t CAN2_TDH2R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN2_TDH2R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN2_TDH2R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN2_TDH2R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RI0R: receive FIFO mailbox identifier register
  #define CAN2_RI0R (* ((const volatile uint32_t *) (0x40006800 + 432)))

  // Field STID: STID
    inline uint32_t CAN2_RI0R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN2_RI0R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN2_RI0R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN2_RI0R_RTR = 1U << 1 ;

//------------------------------------------------------------------------------

//---  Register RDT0R: mailbox data high register
  #define CAN2_RDT0R (* ((const volatile uint32_t *) (0x40006800 + 436)))

  // Field TIME: TIME
    inline uint32_t CAN2_RDT0R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field FMI: FMI
    inline uint32_t CAN2_RDT0R_FMI (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DLC: DLC
    inline uint32_t CAN2_RDT0R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RDL0R: mailbox data high register
  #define CAN2_RDL0R (* ((const volatile uint32_t *) (0x40006800 + 440)))

  // Field DATA3: DATA3
    inline uint32_t CAN2_RDL0R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN2_RDL0R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN2_RDL0R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN2_RDL0R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RDH0R: receive FIFO mailbox data high register
  #define CAN2_RDH0R (* ((const volatile uint32_t *) (0x40006800 + 444)))

  // Field DATA7: DATA7
    inline uint32_t CAN2_RDH0R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN2_RDH0R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN2_RDH0R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN2_RDH0R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RI1R: mailbox data high register
  #define CAN2_RI1R (* ((const volatile uint32_t *) (0x40006800 + 448)))

  // Field STID: STID
    inline uint32_t CAN2_RI1R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN2_RI1R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN2_RI1R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN2_RI1R_RTR = 1U << 1 ;

//------------------------------------------------------------------------------

//---  Register RDT1R: mailbox data high register
  #define CAN2_RDT1R (* ((const volatile uint32_t *) (0x40006800 + 452)))

  // Field TIME: TIME
    inline uint32_t CAN2_RDT1R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field FMI: FMI
    inline uint32_t CAN2_RDT1R_FMI (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DLC: DLC
    inline uint32_t CAN2_RDT1R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RDL1R: mailbox data high register
  #define CAN2_RDL1R (* ((const volatile uint32_t *) (0x40006800 + 456)))

  // Field DATA3: DATA3
    inline uint32_t CAN2_RDL1R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN2_RDL1R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN2_RDL1R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN2_RDL1R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RDH1R: mailbox data high register
  #define CAN2_RDH1R (* ((const volatile uint32_t *) (0x40006800 + 460)))

  // Field DATA7: DATA7
    inline uint32_t CAN2_RDH1R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN2_RDH1R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN2_RDH1R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN2_RDH1R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register FMR: filter master register
  #define CAN2_FMR (* ((volatile uint32_t *) (0x40006800 + 512)))

  // Field CAN2SB: CAN2SB
    inline uint32_t CAN2_FMR_CAN2SB (const uint32_t inValue) {return (inValue & 0x3FU) << 8 ; }

  // Field FINIT: FINIT
    const uint32_t CAN2_FMR_FINIT = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register FM1R: filter mode register
  #define CAN2_FM1R (* ((volatile uint32_t *) (0x40006800 + 516)))

  // Field FBM0: Filter mode
    const uint32_t CAN2_FM1R_FBM0 = 1U << 0 ;

  // Field FBM1: Filter mode
    const uint32_t CAN2_FM1R_FBM1 = 1U << 1 ;

  // Field FBM2: Filter mode
    const uint32_t CAN2_FM1R_FBM2 = 1U << 2 ;

  // Field FBM3: Filter mode
    const uint32_t CAN2_FM1R_FBM3 = 1U << 3 ;

  // Field FBM4: Filter mode
    const uint32_t CAN2_FM1R_FBM4 = 1U << 4 ;

  // Field FBM5: Filter mode
    const uint32_t CAN2_FM1R_FBM5 = 1U << 5 ;

  // Field FBM6: Filter mode
    const uint32_t CAN2_FM1R_FBM6 = 1U << 6 ;

  // Field FBM7: Filter mode
    const uint32_t CAN2_FM1R_FBM7 = 1U << 7 ;

  // Field FBM8: Filter mode
    const uint32_t CAN2_FM1R_FBM8 = 1U << 8 ;

  // Field FBM9: Filter mode
    const uint32_t CAN2_FM1R_FBM9 = 1U << 9 ;

  // Field FBM10: Filter mode
    const uint32_t CAN2_FM1R_FBM10 = 1U << 10 ;

  // Field FBM11: Filter mode
    const uint32_t CAN2_FM1R_FBM11 = 1U << 11 ;

  // Field FBM12: Filter mode
    const uint32_t CAN2_FM1R_FBM12 = 1U << 12 ;

  // Field FBM13: Filter mode
    const uint32_t CAN2_FM1R_FBM13 = 1U << 13 ;

  // Field FBM14: Filter mode
    const uint32_t CAN2_FM1R_FBM14 = 1U << 14 ;

  // Field FBM15: Filter mode
    const uint32_t CAN2_FM1R_FBM15 = 1U << 15 ;

  // Field FBM16: Filter mode
    const uint32_t CAN2_FM1R_FBM16 = 1U << 16 ;

  // Field FBM17: Filter mode
    const uint32_t CAN2_FM1R_FBM17 = 1U << 17 ;

  // Field FBM18: Filter mode
    const uint32_t CAN2_FM1R_FBM18 = 1U << 18 ;

  // Field FBM19: Filter mode
    const uint32_t CAN2_FM1R_FBM19 = 1U << 19 ;

  // Field FBM20: Filter mode
    const uint32_t CAN2_FM1R_FBM20 = 1U << 20 ;

  // Field FBM21: Filter mode
    const uint32_t CAN2_FM1R_FBM21 = 1U << 21 ;

  // Field FBM22: Filter mode
    const uint32_t CAN2_FM1R_FBM22 = 1U << 22 ;

  // Field FBM23: Filter mode
    const uint32_t CAN2_FM1R_FBM23 = 1U << 23 ;

  // Field FBM24: Filter mode
    const uint32_t CAN2_FM1R_FBM24 = 1U << 24 ;

  // Field FBM25: Filter mode
    const uint32_t CAN2_FM1R_FBM25 = 1U << 25 ;

  // Field FBM26: Filter mode
    const uint32_t CAN2_FM1R_FBM26 = 1U << 26 ;

  // Field FBM27: Filter mode
    const uint32_t CAN2_FM1R_FBM27 = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register FS1R: filter scale register
  #define CAN2_FS1R (* ((volatile uint32_t *) (0x40006800 + 524)))

  // Field FSC0: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC0 = 1U << 0 ;

  // Field FSC1: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC1 = 1U << 1 ;

  // Field FSC2: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC2 = 1U << 2 ;

  // Field FSC3: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC3 = 1U << 3 ;

  // Field FSC4: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC4 = 1U << 4 ;

  // Field FSC5: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC5 = 1U << 5 ;

  // Field FSC6: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC6 = 1U << 6 ;

  // Field FSC7: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC7 = 1U << 7 ;

  // Field FSC8: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC8 = 1U << 8 ;

  // Field FSC9: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC9 = 1U << 9 ;

  // Field FSC10: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC10 = 1U << 10 ;

  // Field FSC11: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC11 = 1U << 11 ;

  // Field FSC12: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC12 = 1U << 12 ;

  // Field FSC13: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC13 = 1U << 13 ;

  // Field FSC14: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC14 = 1U << 14 ;

  // Field FSC15: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC15 = 1U << 15 ;

  // Field FSC16: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC16 = 1U << 16 ;

  // Field FSC17: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC17 = 1U << 17 ;

  // Field FSC18: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC18 = 1U << 18 ;

  // Field FSC19: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC19 = 1U << 19 ;

  // Field FSC20: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC20 = 1U << 20 ;

  // Field FSC21: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC21 = 1U << 21 ;

  // Field FSC22: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC22 = 1U << 22 ;

  // Field FSC23: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC23 = 1U << 23 ;

  // Field FSC24: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC24 = 1U << 24 ;

  // Field FSC25: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC25 = 1U << 25 ;

  // Field FSC26: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC26 = 1U << 26 ;

  // Field FSC27: Filter scale configuration
    const uint32_t CAN2_FS1R_FSC27 = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register FFA1R: filter FIFO assignment register
  #define CAN2_FFA1R (* ((volatile uint32_t *) (0x40006800 + 532)))

  // Field FFA0: Filter FIFO assignment for filter 0
    const uint32_t CAN2_FFA1R_FFA0 = 1U << 0 ;

  // Field FFA1: Filter FIFO assignment for filter 1
    const uint32_t CAN2_FFA1R_FFA1 = 1U << 1 ;

  // Field FFA2: Filter FIFO assignment for filter 2
    const uint32_t CAN2_FFA1R_FFA2 = 1U << 2 ;

  // Field FFA3: Filter FIFO assignment for filter 3
    const uint32_t CAN2_FFA1R_FFA3 = 1U << 3 ;

  // Field FFA4: Filter FIFO assignment for filter 4
    const uint32_t CAN2_FFA1R_FFA4 = 1U << 4 ;

  // Field FFA5: Filter FIFO assignment for filter 5
    const uint32_t CAN2_FFA1R_FFA5 = 1U << 5 ;

  // Field FFA6: Filter FIFO assignment for filter 6
    const uint32_t CAN2_FFA1R_FFA6 = 1U << 6 ;

  // Field FFA7: Filter FIFO assignment for filter 7
    const uint32_t CAN2_FFA1R_FFA7 = 1U << 7 ;

  // Field FFA8: Filter FIFO assignment for filter 8
    const uint32_t CAN2_FFA1R_FFA8 = 1U << 8 ;

  // Field FFA9: Filter FIFO assignment for filter 9
    const uint32_t CAN2_FFA1R_FFA9 = 1U << 9 ;

  // Field FFA10: Filter FIFO assignment for filter 10
    const uint32_t CAN2_FFA1R_FFA10 = 1U << 10 ;

  // Field FFA11: Filter FIFO assignment for filter 11
    const uint32_t CAN2_FFA1R_FFA11 = 1U << 11 ;

  // Field FFA12: Filter FIFO assignment for filter 12
    const uint32_t CAN2_FFA1R_FFA12 = 1U << 12 ;

  // Field FFA13: Filter FIFO assignment for filter 13
    const uint32_t CAN2_FFA1R_FFA13 = 1U << 13 ;

  // Field FFA14: Filter FIFO assignment for filter 14
    const uint32_t CAN2_FFA1R_FFA14 = 1U << 14 ;

  // Field FFA15: Filter FIFO assignment for filter 15
    const uint32_t CAN2_FFA1R_FFA15 = 1U << 15 ;

  // Field FFA16: Filter FIFO assignment for filter 16
    const uint32_t CAN2_FFA1R_FFA16 = 1U << 16 ;

  // Field FFA17: Filter FIFO assignment for filter 17
    const uint32_t CAN2_FFA1R_FFA17 = 1U << 17 ;

  // Field FFA18: Filter FIFO assignment for filter 18
    const uint32_t CAN2_FFA1R_FFA18 = 1U << 18 ;

  // Field FFA19: Filter FIFO assignment for filter 19
    const uint32_t CAN2_FFA1R_FFA19 = 1U << 19 ;

  // Field FFA20: Filter FIFO assignment for filter 20
    const uint32_t CAN2_FFA1R_FFA20 = 1U << 20 ;

  // Field FFA21: Filter FIFO assignment for filter 21
    const uint32_t CAN2_FFA1R_FFA21 = 1U << 21 ;

  // Field FFA22: Filter FIFO assignment for filter 22
    const uint32_t CAN2_FFA1R_FFA22 = 1U << 22 ;

  // Field FFA23: Filter FIFO assignment for filter 23
    const uint32_t CAN2_FFA1R_FFA23 = 1U << 23 ;

  // Field FFA24: Filter FIFO assignment for filter 24
    const uint32_t CAN2_FFA1R_FFA24 = 1U << 24 ;

  // Field FFA25: Filter FIFO assignment for filter 25
    const uint32_t CAN2_FFA1R_FFA25 = 1U << 25 ;

  // Field FFA26: Filter FIFO assignment for filter 26
    const uint32_t CAN2_FFA1R_FFA26 = 1U << 26 ;

  // Field FFA27: Filter FIFO assignment for filter 27
    const uint32_t CAN2_FFA1R_FFA27 = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register FA1R: filter activation register
  #define CAN2_FA1R (* ((volatile uint32_t *) (0x40006800 + 540)))

  // Field FACT0: Filter active
    const uint32_t CAN2_FA1R_FACT0 = 1U << 0 ;

  // Field FACT1: Filter active
    const uint32_t CAN2_FA1R_FACT1 = 1U << 1 ;

  // Field FACT2: Filter active
    const uint32_t CAN2_FA1R_FACT2 = 1U << 2 ;

  // Field FACT3: Filter active
    const uint32_t CAN2_FA1R_FACT3 = 1U << 3 ;

  // Field FACT4: Filter active
    const uint32_t CAN2_FA1R_FACT4 = 1U << 4 ;

  // Field FACT5: Filter active
    const uint32_t CAN2_FA1R_FACT5 = 1U << 5 ;

  // Field FACT6: Filter active
    const uint32_t CAN2_FA1R_FACT6 = 1U << 6 ;

  // Field FACT7: Filter active
    const uint32_t CAN2_FA1R_FACT7 = 1U << 7 ;

  // Field FACT8: Filter active
    const uint32_t CAN2_FA1R_FACT8 = 1U << 8 ;

  // Field FACT9: Filter active
    const uint32_t CAN2_FA1R_FACT9 = 1U << 9 ;

  // Field FACT10: Filter active
    const uint32_t CAN2_FA1R_FACT10 = 1U << 10 ;

  // Field FACT11: Filter active
    const uint32_t CAN2_FA1R_FACT11 = 1U << 11 ;

  // Field FACT12: Filter active
    const uint32_t CAN2_FA1R_FACT12 = 1U << 12 ;

  // Field FACT13: Filter active
    const uint32_t CAN2_FA1R_FACT13 = 1U << 13 ;

  // Field FACT14: Filter active
    const uint32_t CAN2_FA1R_FACT14 = 1U << 14 ;

  // Field FACT15: Filter active
    const uint32_t CAN2_FA1R_FACT15 = 1U << 15 ;

  // Field FACT16: Filter active
    const uint32_t CAN2_FA1R_FACT16 = 1U << 16 ;

  // Field FACT17: Filter active
    const uint32_t CAN2_FA1R_FACT17 = 1U << 17 ;

  // Field FACT18: Filter active
    const uint32_t CAN2_FA1R_FACT18 = 1U << 18 ;

  // Field FACT19: Filter active
    const uint32_t CAN2_FA1R_FACT19 = 1U << 19 ;

  // Field FACT20: Filter active
    const uint32_t CAN2_FA1R_FACT20 = 1U << 20 ;

  // Field FACT21: Filter active
    const uint32_t CAN2_FA1R_FACT21 = 1U << 21 ;

  // Field FACT22: Filter active
    const uint32_t CAN2_FA1R_FACT22 = 1U << 22 ;

  // Field FACT23: Filter active
    const uint32_t CAN2_FA1R_FACT23 = 1U << 23 ;

  // Field FACT24: Filter active
    const uint32_t CAN2_FA1R_FACT24 = 1U << 24 ;

  // Field FACT25: Filter active
    const uint32_t CAN2_FA1R_FACT25 = 1U << 25 ;

  // Field FACT26: Filter active
    const uint32_t CAN2_FA1R_FACT26 = 1U << 26 ;

  // Field FACT27: Filter active
    const uint32_t CAN2_FA1R_FACT27 = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register F0R1: Filter bank 0 register 1
  #define CAN2_F0R1 (* ((volatile uint32_t *) (0x40006800 + 576)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F0R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F0R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F0R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F0R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F0R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F0R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F0R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F0R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F0R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F0R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F0R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F0R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F0R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F0R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F0R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F0R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F0R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F0R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F0R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F0R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F0R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F0R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F0R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F0R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F0R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F0R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F0R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F0R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F0R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F0R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F0R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F0R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F0R2: Filter bank 0 register 2
  #define CAN2_F0R2 (* ((volatile uint32_t *) (0x40006800 + 580)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F0R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F0R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F0R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F0R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F0R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F0R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F0R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F0R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F0R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F0R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F0R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F0R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F0R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F0R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F0R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F0R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F0R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F0R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F0R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F0R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F0R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F0R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F0R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F0R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F0R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F0R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F0R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F0R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F0R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F0R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F0R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F0R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F1R1: Filter bank 1 register 1
  #define CAN2_F1R1 (* ((volatile uint32_t *) (0x40006800 + 584)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F1R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F1R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F1R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F1R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F1R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F1R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F1R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F1R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F1R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F1R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F1R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F1R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F1R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F1R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F1R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F1R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F1R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F1R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F1R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F1R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F1R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F1R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F1R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F1R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F1R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F1R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F1R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F1R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F1R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F1R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F1R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F1R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F1R2: Filter bank 1 register 2
  #define CAN2_F1R2 (* ((volatile uint32_t *) (0x40006800 + 588)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F1R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F1R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F1R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F1R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F1R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F1R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F1R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F1R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F1R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F1R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F1R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F1R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F1R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F1R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F1R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F1R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F1R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F1R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F1R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F1R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F1R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F1R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F1R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F1R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F1R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F1R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F1R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F1R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F1R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F1R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F1R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F1R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F2R1: Filter bank 2 register 1
  #define CAN2_F2R1 (* ((volatile uint32_t *) (0x40006800 + 592)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F2R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F2R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F2R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F2R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F2R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F2R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F2R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F2R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F2R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F2R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F2R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F2R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F2R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F2R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F2R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F2R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F2R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F2R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F2R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F2R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F2R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F2R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F2R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F2R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F2R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F2R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F2R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F2R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F2R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F2R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F2R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F2R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F2R2: Filter bank 2 register 2
  #define CAN2_F2R2 (* ((volatile uint32_t *) (0x40006800 + 596)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F2R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F2R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F2R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F2R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F2R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F2R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F2R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F2R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F2R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F2R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F2R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F2R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F2R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F2R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F2R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F2R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F2R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F2R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F2R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F2R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F2R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F2R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F2R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F2R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F2R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F2R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F2R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F2R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F2R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F2R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F2R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F2R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F3R1: Filter bank 3 register 1
  #define CAN2_F3R1 (* ((volatile uint32_t *) (0x40006800 + 600)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F3R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F3R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F3R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F3R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F3R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F3R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F3R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F3R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F3R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F3R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F3R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F3R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F3R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F3R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F3R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F3R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F3R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F3R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F3R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F3R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F3R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F3R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F3R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F3R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F3R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F3R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F3R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F3R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F3R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F3R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F3R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F3R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F3R2: Filter bank 3 register 2
  #define CAN2_F3R2 (* ((volatile uint32_t *) (0x40006800 + 604)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F3R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F3R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F3R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F3R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F3R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F3R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F3R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F3R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F3R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F3R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F3R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F3R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F3R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F3R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F3R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F3R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F3R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F3R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F3R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F3R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F3R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F3R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F3R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F3R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F3R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F3R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F3R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F3R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F3R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F3R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F3R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F3R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F4R1: Filter bank 4 register 1
  #define CAN2_F4R1 (* ((volatile uint32_t *) (0x40006800 + 608)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F4R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F4R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F4R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F4R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F4R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F4R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F4R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F4R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F4R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F4R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F4R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F4R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F4R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F4R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F4R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F4R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F4R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F4R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F4R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F4R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F4R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F4R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F4R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F4R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F4R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F4R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F4R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F4R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F4R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F4R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F4R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F4R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F4R2: Filter bank 4 register 2
  #define CAN2_F4R2 (* ((volatile uint32_t *) (0x40006800 + 612)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F4R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F4R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F4R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F4R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F4R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F4R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F4R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F4R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F4R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F4R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F4R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F4R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F4R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F4R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F4R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F4R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F4R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F4R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F4R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F4R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F4R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F4R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F4R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F4R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F4R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F4R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F4R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F4R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F4R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F4R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F4R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F4R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F5R1: Filter bank 5 register 1
  #define CAN2_F5R1 (* ((volatile uint32_t *) (0x40006800 + 616)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F5R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F5R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F5R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F5R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F5R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F5R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F5R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F5R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F5R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F5R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F5R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F5R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F5R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F5R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F5R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F5R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F5R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F5R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F5R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F5R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F5R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F5R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F5R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F5R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F5R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F5R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F5R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F5R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F5R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F5R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F5R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F5R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F5R2: Filter bank 5 register 2
  #define CAN2_F5R2 (* ((volatile uint32_t *) (0x40006800 + 620)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F5R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F5R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F5R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F5R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F5R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F5R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F5R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F5R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F5R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F5R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F5R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F5R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F5R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F5R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F5R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F5R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F5R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F5R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F5R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F5R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F5R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F5R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F5R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F5R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F5R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F5R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F5R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F5R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F5R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F5R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F5R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F5R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F6R1: Filter bank 6 register 1
  #define CAN2_F6R1 (* ((volatile uint32_t *) (0x40006800 + 624)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F6R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F6R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F6R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F6R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F6R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F6R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F6R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F6R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F6R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F6R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F6R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F6R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F6R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F6R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F6R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F6R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F6R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F6R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F6R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F6R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F6R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F6R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F6R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F6R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F6R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F6R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F6R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F6R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F6R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F6R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F6R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F6R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F6R2: Filter bank 6 register 2
  #define CAN2_F6R2 (* ((volatile uint32_t *) (0x40006800 + 628)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F6R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F6R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F6R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F6R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F6R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F6R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F6R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F6R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F6R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F6R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F6R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F6R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F6R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F6R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F6R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F6R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F6R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F6R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F6R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F6R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F6R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F6R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F6R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F6R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F6R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F6R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F6R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F6R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F6R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F6R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F6R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F6R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F7R1: Filter bank 7 register 1
  #define CAN2_F7R1 (* ((volatile uint32_t *) (0x40006800 + 632)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F7R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F7R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F7R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F7R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F7R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F7R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F7R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F7R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F7R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F7R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F7R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F7R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F7R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F7R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F7R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F7R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F7R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F7R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F7R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F7R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F7R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F7R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F7R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F7R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F7R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F7R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F7R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F7R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F7R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F7R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F7R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F7R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F7R2: Filter bank 7 register 2
  #define CAN2_F7R2 (* ((volatile uint32_t *) (0x40006800 + 636)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F7R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F7R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F7R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F7R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F7R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F7R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F7R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F7R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F7R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F7R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F7R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F7R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F7R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F7R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F7R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F7R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F7R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F7R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F7R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F7R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F7R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F7R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F7R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F7R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F7R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F7R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F7R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F7R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F7R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F7R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F7R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F7R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F8R1: Filter bank 8 register 1
  #define CAN2_F8R1 (* ((volatile uint32_t *) (0x40006800 + 640)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F8R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F8R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F8R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F8R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F8R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F8R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F8R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F8R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F8R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F8R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F8R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F8R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F8R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F8R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F8R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F8R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F8R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F8R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F8R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F8R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F8R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F8R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F8R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F8R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F8R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F8R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F8R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F8R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F8R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F8R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F8R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F8R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F8R2: Filter bank 8 register 2
  #define CAN2_F8R2 (* ((volatile uint32_t *) (0x40006800 + 644)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F8R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F8R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F8R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F8R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F8R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F8R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F8R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F8R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F8R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F8R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F8R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F8R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F8R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F8R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F8R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F8R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F8R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F8R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F8R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F8R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F8R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F8R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F8R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F8R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F8R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F8R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F8R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F8R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F8R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F8R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F8R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F8R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F9R1: Filter bank 9 register 1
  #define CAN2_F9R1 (* ((volatile uint32_t *) (0x40006800 + 648)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F9R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F9R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F9R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F9R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F9R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F9R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F9R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F9R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F9R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F9R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F9R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F9R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F9R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F9R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F9R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F9R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F9R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F9R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F9R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F9R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F9R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F9R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F9R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F9R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F9R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F9R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F9R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F9R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F9R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F9R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F9R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F9R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F9R2: Filter bank 9 register 2
  #define CAN2_F9R2 (* ((volatile uint32_t *) (0x40006800 + 652)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F9R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F9R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F9R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F9R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F9R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F9R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F9R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F9R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F9R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F9R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F9R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F9R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F9R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F9R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F9R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F9R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F9R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F9R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F9R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F9R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F9R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F9R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F9R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F9R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F9R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F9R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F9R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F9R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F9R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F9R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F9R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F9R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F10R1: Filter bank 10 register 1
  #define CAN2_F10R1 (* ((volatile uint32_t *) (0x40006800 + 656)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F10R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F10R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F10R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F10R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F10R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F10R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F10R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F10R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F10R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F10R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F10R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F10R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F10R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F10R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F10R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F10R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F10R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F10R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F10R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F10R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F10R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F10R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F10R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F10R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F10R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F10R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F10R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F10R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F10R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F10R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F10R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F10R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F10R2: Filter bank 10 register 2
  #define CAN2_F10R2 (* ((volatile uint32_t *) (0x40006800 + 660)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F10R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F10R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F10R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F10R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F10R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F10R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F10R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F10R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F10R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F10R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F10R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F10R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F10R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F10R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F10R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F10R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F10R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F10R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F10R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F10R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F10R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F10R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F10R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F10R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F10R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F10R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F10R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F10R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F10R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F10R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F10R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F10R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F11R1: Filter bank 11 register 1
  #define CAN2_F11R1 (* ((volatile uint32_t *) (0x40006800 + 664)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F11R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F11R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F11R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F11R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F11R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F11R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F11R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F11R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F11R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F11R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F11R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F11R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F11R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F11R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F11R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F11R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F11R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F11R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F11R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F11R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F11R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F11R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F11R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F11R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F11R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F11R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F11R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F11R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F11R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F11R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F11R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F11R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F11R2: Filter bank 11 register 2
  #define CAN2_F11R2 (* ((volatile uint32_t *) (0x40006800 + 668)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F11R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F11R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F11R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F11R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F11R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F11R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F11R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F11R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F11R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F11R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F11R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F11R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F11R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F11R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F11R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F11R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F11R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F11R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F11R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F11R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F11R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F11R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F11R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F11R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F11R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F11R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F11R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F11R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F11R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F11R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F11R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F11R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F12R1: Filter bank 4 register 1
  #define CAN2_F12R1 (* ((volatile uint32_t *) (0x40006800 + 672)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F12R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F12R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F12R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F12R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F12R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F12R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F12R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F12R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F12R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F12R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F12R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F12R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F12R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F12R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F12R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F12R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F12R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F12R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F12R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F12R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F12R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F12R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F12R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F12R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F12R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F12R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F12R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F12R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F12R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F12R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F12R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F12R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F12R2: Filter bank 12 register 2
  #define CAN2_F12R2 (* ((volatile uint32_t *) (0x40006800 + 676)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F12R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F12R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F12R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F12R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F12R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F12R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F12R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F12R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F12R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F12R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F12R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F12R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F12R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F12R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F12R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F12R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F12R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F12R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F12R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F12R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F12R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F12R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F12R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F12R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F12R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F12R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F12R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F12R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F12R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F12R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F12R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F12R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F13R1: Filter bank 13 register 1
  #define CAN2_F13R1 (* ((volatile uint32_t *) (0x40006800 + 680)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F13R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F13R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F13R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F13R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F13R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F13R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F13R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F13R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F13R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F13R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F13R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F13R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F13R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F13R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F13R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F13R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F13R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F13R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F13R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F13R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F13R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F13R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F13R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F13R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F13R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F13R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F13R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F13R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F13R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F13R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F13R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F13R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F13R2: Filter bank 13 register 2
  #define CAN2_F13R2 (* ((volatile uint32_t *) (0x40006800 + 684)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F13R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F13R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F13R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F13R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F13R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F13R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F13R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F13R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F13R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F13R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F13R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F13R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F13R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F13R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F13R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F13R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F13R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F13R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F13R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F13R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F13R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F13R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F13R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F13R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F13R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F13R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F13R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F13R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F13R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F13R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F13R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F13R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F14R1: Filter bank 14 register 1
  #define CAN2_F14R1 (* ((volatile uint32_t *) (0x40006800 + 688)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F14R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F14R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F14R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F14R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F14R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F14R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F14R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F14R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F14R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F14R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F14R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F14R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F14R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F14R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F14R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F14R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F14R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F14R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F14R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F14R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F14R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F14R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F14R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F14R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F14R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F14R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F14R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F14R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F14R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F14R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F14R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F14R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F14R2: Filter bank 14 register 2
  #define CAN2_F14R2 (* ((volatile uint32_t *) (0x40006800 + 692)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F14R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F14R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F14R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F14R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F14R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F14R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F14R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F14R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F14R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F14R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F14R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F14R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F14R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F14R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F14R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F14R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F14R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F14R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F14R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F14R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F14R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F14R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F14R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F14R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F14R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F14R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F14R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F14R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F14R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F14R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F14R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F14R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F15R1: Filter bank 15 register 1
  #define CAN2_F15R1 (* ((volatile uint32_t *) (0x40006800 + 696)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F15R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F15R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F15R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F15R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F15R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F15R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F15R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F15R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F15R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F15R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F15R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F15R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F15R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F15R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F15R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F15R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F15R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F15R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F15R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F15R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F15R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F15R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F15R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F15R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F15R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F15R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F15R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F15R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F15R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F15R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F15R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F15R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F15R2: Filter bank 15 register 2
  #define CAN2_F15R2 (* ((volatile uint32_t *) (0x40006800 + 700)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F15R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F15R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F15R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F15R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F15R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F15R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F15R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F15R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F15R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F15R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F15R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F15R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F15R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F15R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F15R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F15R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F15R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F15R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F15R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F15R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F15R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F15R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F15R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F15R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F15R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F15R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F15R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F15R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F15R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F15R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F15R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F15R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F16R1: Filter bank 16 register 1
  #define CAN2_F16R1 (* ((volatile uint32_t *) (0x40006800 + 704)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F16R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F16R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F16R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F16R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F16R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F16R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F16R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F16R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F16R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F16R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F16R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F16R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F16R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F16R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F16R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F16R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F16R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F16R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F16R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F16R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F16R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F16R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F16R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F16R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F16R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F16R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F16R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F16R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F16R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F16R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F16R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F16R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F16R2: Filter bank 16 register 2
  #define CAN2_F16R2 (* ((volatile uint32_t *) (0x40006800 + 708)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F16R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F16R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F16R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F16R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F16R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F16R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F16R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F16R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F16R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F16R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F16R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F16R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F16R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F16R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F16R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F16R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F16R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F16R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F16R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F16R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F16R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F16R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F16R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F16R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F16R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F16R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F16R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F16R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F16R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F16R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F16R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F16R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F17R1: Filter bank 17 register 1
  #define CAN2_F17R1 (* ((volatile uint32_t *) (0x40006800 + 712)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F17R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F17R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F17R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F17R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F17R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F17R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F17R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F17R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F17R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F17R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F17R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F17R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F17R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F17R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F17R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F17R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F17R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F17R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F17R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F17R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F17R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F17R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F17R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F17R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F17R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F17R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F17R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F17R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F17R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F17R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F17R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F17R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F17R2: Filter bank 17 register 2
  #define CAN2_F17R2 (* ((volatile uint32_t *) (0x40006800 + 716)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F17R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F17R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F17R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F17R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F17R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F17R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F17R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F17R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F17R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F17R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F17R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F17R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F17R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F17R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F17R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F17R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F17R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F17R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F17R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F17R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F17R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F17R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F17R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F17R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F17R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F17R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F17R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F17R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F17R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F17R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F17R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F17R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F18R1: Filter bank 18 register 1
  #define CAN2_F18R1 (* ((volatile uint32_t *) (0x40006800 + 720)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F18R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F18R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F18R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F18R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F18R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F18R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F18R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F18R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F18R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F18R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F18R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F18R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F18R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F18R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F18R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F18R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F18R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F18R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F18R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F18R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F18R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F18R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F18R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F18R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F18R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F18R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F18R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F18R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F18R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F18R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F18R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F18R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F18R2: Filter bank 18 register 2
  #define CAN2_F18R2 (* ((volatile uint32_t *) (0x40006800 + 724)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F18R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F18R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F18R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F18R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F18R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F18R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F18R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F18R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F18R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F18R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F18R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F18R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F18R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F18R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F18R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F18R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F18R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F18R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F18R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F18R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F18R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F18R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F18R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F18R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F18R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F18R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F18R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F18R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F18R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F18R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F18R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F18R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F19R1: Filter bank 19 register 1
  #define CAN2_F19R1 (* ((volatile uint32_t *) (0x40006800 + 728)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F19R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F19R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F19R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F19R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F19R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F19R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F19R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F19R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F19R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F19R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F19R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F19R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F19R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F19R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F19R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F19R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F19R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F19R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F19R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F19R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F19R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F19R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F19R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F19R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F19R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F19R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F19R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F19R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F19R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F19R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F19R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F19R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F19R2: Filter bank 19 register 2
  #define CAN2_F19R2 (* ((volatile uint32_t *) (0x40006800 + 732)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F19R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F19R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F19R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F19R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F19R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F19R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F19R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F19R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F19R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F19R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F19R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F19R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F19R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F19R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F19R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F19R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F19R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F19R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F19R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F19R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F19R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F19R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F19R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F19R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F19R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F19R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F19R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F19R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F19R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F19R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F19R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F19R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F20R1: Filter bank 20 register 1
  #define CAN2_F20R1 (* ((volatile uint32_t *) (0x40006800 + 736)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F20R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F20R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F20R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F20R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F20R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F20R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F20R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F20R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F20R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F20R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F20R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F20R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F20R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F20R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F20R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F20R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F20R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F20R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F20R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F20R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F20R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F20R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F20R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F20R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F20R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F20R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F20R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F20R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F20R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F20R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F20R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F20R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F20R2: Filter bank 20 register 2
  #define CAN2_F20R2 (* ((volatile uint32_t *) (0x40006800 + 740)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F20R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F20R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F20R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F20R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F20R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F20R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F20R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F20R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F20R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F20R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F20R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F20R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F20R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F20R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F20R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F20R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F20R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F20R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F20R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F20R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F20R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F20R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F20R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F20R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F20R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F20R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F20R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F20R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F20R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F20R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F20R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F20R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F21R1: Filter bank 21 register 1
  #define CAN2_F21R1 (* ((volatile uint32_t *) (0x40006800 + 744)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F21R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F21R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F21R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F21R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F21R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F21R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F21R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F21R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F21R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F21R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F21R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F21R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F21R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F21R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F21R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F21R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F21R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F21R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F21R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F21R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F21R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F21R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F21R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F21R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F21R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F21R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F21R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F21R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F21R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F21R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F21R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F21R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F21R2: Filter bank 21 register 2
  #define CAN2_F21R2 (* ((volatile uint32_t *) (0x40006800 + 748)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F21R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F21R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F21R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F21R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F21R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F21R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F21R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F21R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F21R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F21R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F21R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F21R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F21R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F21R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F21R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F21R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F21R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F21R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F21R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F21R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F21R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F21R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F21R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F21R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F21R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F21R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F21R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F21R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F21R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F21R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F21R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F21R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F22R1: Filter bank 22 register 1
  #define CAN2_F22R1 (* ((volatile uint32_t *) (0x40006800 + 752)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F22R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F22R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F22R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F22R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F22R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F22R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F22R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F22R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F22R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F22R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F22R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F22R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F22R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F22R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F22R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F22R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F22R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F22R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F22R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F22R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F22R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F22R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F22R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F22R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F22R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F22R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F22R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F22R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F22R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F22R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F22R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F22R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F22R2: Filter bank 22 register 2
  #define CAN2_F22R2 (* ((volatile uint32_t *) (0x40006800 + 756)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F22R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F22R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F22R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F22R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F22R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F22R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F22R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F22R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F22R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F22R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F22R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F22R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F22R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F22R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F22R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F22R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F22R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F22R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F22R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F22R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F22R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F22R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F22R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F22R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F22R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F22R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F22R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F22R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F22R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F22R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F22R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F22R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F23R1: Filter bank 23 register 1
  #define CAN2_F23R1 (* ((volatile uint32_t *) (0x40006800 + 760)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F23R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F23R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F23R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F23R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F23R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F23R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F23R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F23R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F23R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F23R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F23R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F23R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F23R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F23R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F23R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F23R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F23R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F23R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F23R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F23R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F23R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F23R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F23R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F23R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F23R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F23R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F23R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F23R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F23R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F23R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F23R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F23R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F23R2: Filter bank 23 register 2
  #define CAN2_F23R2 (* ((volatile uint32_t *) (0x40006800 + 764)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F23R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F23R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F23R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F23R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F23R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F23R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F23R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F23R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F23R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F23R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F23R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F23R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F23R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F23R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F23R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F23R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F23R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F23R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F23R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F23R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F23R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F23R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F23R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F23R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F23R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F23R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F23R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F23R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F23R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F23R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F23R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F23R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F24R1: Filter bank 24 register 1
  #define CAN2_F24R1 (* ((volatile uint32_t *) (0x40006800 + 768)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F24R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F24R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F24R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F24R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F24R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F24R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F24R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F24R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F24R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F24R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F24R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F24R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F24R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F24R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F24R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F24R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F24R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F24R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F24R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F24R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F24R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F24R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F24R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F24R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F24R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F24R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F24R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F24R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F24R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F24R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F24R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F24R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F24R2: Filter bank 24 register 2
  #define CAN2_F24R2 (* ((volatile uint32_t *) (0x40006800 + 772)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F24R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F24R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F24R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F24R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F24R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F24R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F24R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F24R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F24R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F24R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F24R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F24R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F24R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F24R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F24R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F24R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F24R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F24R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F24R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F24R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F24R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F24R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F24R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F24R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F24R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F24R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F24R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F24R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F24R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F24R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F24R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F24R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F25R1: Filter bank 25 register 1
  #define CAN2_F25R1 (* ((volatile uint32_t *) (0x40006800 + 776)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F25R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F25R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F25R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F25R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F25R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F25R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F25R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F25R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F25R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F25R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F25R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F25R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F25R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F25R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F25R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F25R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F25R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F25R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F25R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F25R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F25R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F25R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F25R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F25R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F25R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F25R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F25R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F25R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F25R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F25R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F25R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F25R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F25R2: Filter bank 25 register 2
  #define CAN2_F25R2 (* ((volatile uint32_t *) (0x40006800 + 780)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F25R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F25R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F25R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F25R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F25R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F25R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F25R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F25R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F25R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F25R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F25R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F25R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F25R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F25R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F25R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F25R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F25R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F25R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F25R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F25R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F25R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F25R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F25R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F25R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F25R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F25R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F25R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F25R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F25R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F25R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F25R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F25R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F26R1: Filter bank 26 register 1
  #define CAN2_F26R1 (* ((volatile uint32_t *) (0x40006800 + 784)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F26R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F26R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F26R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F26R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F26R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F26R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F26R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F26R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F26R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F26R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F26R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F26R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F26R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F26R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F26R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F26R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F26R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F26R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F26R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F26R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F26R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F26R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F26R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F26R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F26R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F26R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F26R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F26R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F26R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F26R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F26R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F26R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F26R2: Filter bank 26 register 2
  #define CAN2_F26R2 (* ((volatile uint32_t *) (0x40006800 + 788)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F26R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F26R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F26R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F26R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F26R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F26R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F26R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F26R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F26R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F26R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F26R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F26R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F26R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F26R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F26R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F26R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F26R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F26R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F26R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F26R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F26R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F26R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F26R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F26R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F26R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F26R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F26R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F26R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F26R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F26R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F26R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F26R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F27R1: Filter bank 27 register 1
  #define CAN2_F27R1 (* ((volatile uint32_t *) (0x40006800 + 792)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F27R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F27R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F27R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F27R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F27R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F27R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F27R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F27R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F27R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F27R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F27R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F27R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F27R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F27R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F27R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F27R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F27R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F27R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F27R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F27R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F27R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F27R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F27R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F27R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F27R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F27R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F27R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F27R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F27R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F27R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F27R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F27R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F27R2: Filter bank 27 register 2
  #define CAN2_F27R2 (* ((volatile uint32_t *) (0x40006800 + 796)))

  // Field FB0: Filter bits
    const uint32_t CAN2_F27R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN2_F27R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN2_F27R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN2_F27R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN2_F27R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN2_F27R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN2_F27R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN2_F27R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN2_F27R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN2_F27R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN2_F27R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN2_F27R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN2_F27R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN2_F27R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN2_F27R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN2_F27R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN2_F27R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN2_F27R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN2_F27R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN2_F27R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN2_F27R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN2_F27R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN2_F27R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN2_F27R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN2_F27R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN2_F27R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN2_F27R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN2_F27R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN2_F27R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN2_F27R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN2_F27R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN2_F27R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------
// Peripheral CAN3
//------------------------------------------------------------------------------

//---  Register MCR: master control register
  #define CAN3_MCR (* ((volatile uint32_t *) (0x40003400 + 0)))

  // Field DBF: DBF
    const uint32_t CAN3_MCR_DBF = 1U << 16 ;

  // Field RESET: RESET
    const uint32_t CAN3_MCR_RESET = 1U << 15 ;

  // Field TTCM: TTCM
    const uint32_t CAN3_MCR_TTCM = 1U << 7 ;

  // Field ABOM: ABOM
    const uint32_t CAN3_MCR_ABOM = 1U << 6 ;

  // Field AWUM: AWUM
    const uint32_t CAN3_MCR_AWUM = 1U << 5 ;

  // Field NART: NART
    const uint32_t CAN3_MCR_NART = 1U << 4 ;

  // Field RFLM: RFLM
    const uint32_t CAN3_MCR_RFLM = 1U << 3 ;

  // Field TXFP: TXFP
    const uint32_t CAN3_MCR_TXFP = 1U << 2 ;

  // Field SLEEP: SLEEP
    const uint32_t CAN3_MCR_SLEEP = 1U << 1 ;

  // Field INRQ: INRQ
    const uint32_t CAN3_MCR_INRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register MSR: master status register
  #define CAN3_MSR (* ((volatile uint32_t *) (0x40003400 + 4)))

  // Field RX: RX
    const uint32_t CAN3_MSR_RX = 1U << 11 ;

  // Field SAMP: SAMP
    const uint32_t CAN3_MSR_SAMP = 1U << 10 ;

  // Field RXM: RXM
    const uint32_t CAN3_MSR_RXM = 1U << 9 ;

  // Field TXM: TXM
    const uint32_t CAN3_MSR_TXM = 1U << 8 ;

  // Field SLAKI: SLAKI
    const uint32_t CAN3_MSR_SLAKI = 1U << 4 ;

  // Field WKUI: WKUI
    const uint32_t CAN3_MSR_WKUI = 1U << 3 ;

  // Field ERRI: ERRI
    const uint32_t CAN3_MSR_ERRI = 1U << 2 ;

  // Field SLAK: SLAK
    const uint32_t CAN3_MSR_SLAK = 1U << 1 ;

  // Field INAK: INAK
    const uint32_t CAN3_MSR_INAK = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register TSR: transmit status register
  #define CAN3_TSR (* ((volatile uint32_t *) (0x40003400 + 8)))

  // Field LOW2: Lowest priority flag for mailbox 2
    const uint32_t CAN3_TSR_LOW2 = 1U << 31 ;

  // Field LOW1: Lowest priority flag for mailbox 1
    const uint32_t CAN3_TSR_LOW1 = 1U << 30 ;

  // Field LOW0: Lowest priority flag for mailbox 0
    const uint32_t CAN3_TSR_LOW0 = 1U << 29 ;

  // Field TME2: Lowest priority flag for mailbox 2
    const uint32_t CAN3_TSR_TME2 = 1U << 28 ;

  // Field TME1: Lowest priority flag for mailbox 1
    const uint32_t CAN3_TSR_TME1 = 1U << 27 ;

  // Field TME0: Lowest priority flag for mailbox 0
    const uint32_t CAN3_TSR_TME0 = 1U << 26 ;

  // Field CODE: CODE
    inline uint32_t CAN3_TSR_CODE (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field ABRQ2: ABRQ2
    const uint32_t CAN3_TSR_ABRQ2 = 1U << 23 ;

  // Field TERR2: TERR2
    const uint32_t CAN3_TSR_TERR2 = 1U << 19 ;

  // Field ALST2: ALST2
    const uint32_t CAN3_TSR_ALST2 = 1U << 18 ;

  // Field TXOK2: TXOK2
    const uint32_t CAN3_TSR_TXOK2 = 1U << 17 ;

  // Field RQCP2: RQCP2
    const uint32_t CAN3_TSR_RQCP2 = 1U << 16 ;

  // Field ABRQ1: ABRQ1
    const uint32_t CAN3_TSR_ABRQ1 = 1U << 15 ;

  // Field TERR1: TERR1
    const uint32_t CAN3_TSR_TERR1 = 1U << 11 ;

  // Field ALST1: ALST1
    const uint32_t CAN3_TSR_ALST1 = 1U << 10 ;

  // Field TXOK1: TXOK1
    const uint32_t CAN3_TSR_TXOK1 = 1U << 9 ;

  // Field RQCP1: RQCP1
    const uint32_t CAN3_TSR_RQCP1 = 1U << 8 ;

  // Field ABRQ0: ABRQ0
    const uint32_t CAN3_TSR_ABRQ0 = 1U << 7 ;

  // Field TERR0: TERR0
    const uint32_t CAN3_TSR_TERR0 = 1U << 3 ;

  // Field ALST0: ALST0
    const uint32_t CAN3_TSR_ALST0 = 1U << 2 ;

  // Field TXOK0: TXOK0
    const uint32_t CAN3_TSR_TXOK0 = 1U << 1 ;

  // Field RQCP0: RQCP0
    const uint32_t CAN3_TSR_RQCP0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register RF0R: receive FIFO 0 register
  #define CAN3_RF0R (* ((volatile uint32_t *) (0x40003400 + 12)))

  // Field RFOM0: RFOM0
    const uint32_t CAN3_RF0R_RFOM0 = 1U << 5 ;

  // Field FOVR0: FOVR0
    const uint32_t CAN3_RF0R_FOVR0 = 1U << 4 ;

  // Field FULL0: FULL0
    const uint32_t CAN3_RF0R_FULL0 = 1U << 3 ;

  // Field FMP0: FMP0
    inline uint32_t CAN3_RF0R_FMP0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RF1R: receive FIFO 1 register
  #define CAN3_RF1R (* ((volatile uint32_t *) (0x40003400 + 16)))

  // Field RFOM1: RFOM1
    const uint32_t CAN3_RF1R_RFOM1 = 1U << 5 ;

  // Field FOVR1: FOVR1
    const uint32_t CAN3_RF1R_FOVR1 = 1U << 4 ;

  // Field FULL1: FULL1
    const uint32_t CAN3_RF1R_FULL1 = 1U << 3 ;

  // Field FMP1: FMP1
    inline uint32_t CAN3_RF1R_FMP1 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IER: interrupt enable register
  #define CAN3_IER (* ((volatile uint32_t *) (0x40003400 + 20)))

  // Field SLKIE: SLKIE
    const uint32_t CAN3_IER_SLKIE = 1U << 17 ;

  // Field WKUIE: WKUIE
    const uint32_t CAN3_IER_WKUIE = 1U << 16 ;

  // Field ERRIE: ERRIE
    const uint32_t CAN3_IER_ERRIE = 1U << 15 ;

  // Field LECIE: LECIE
    const uint32_t CAN3_IER_LECIE = 1U << 11 ;

  // Field BOFIE: BOFIE
    const uint32_t CAN3_IER_BOFIE = 1U << 10 ;

  // Field EPVIE: EPVIE
    const uint32_t CAN3_IER_EPVIE = 1U << 9 ;

  // Field EWGIE: EWGIE
    const uint32_t CAN3_IER_EWGIE = 1U << 8 ;

  // Field FOVIE1: FOVIE1
    const uint32_t CAN3_IER_FOVIE1 = 1U << 6 ;

  // Field FFIE1: FFIE1
    const uint32_t CAN3_IER_FFIE1 = 1U << 5 ;

  // Field FMPIE1: FMPIE1
    const uint32_t CAN3_IER_FMPIE1 = 1U << 4 ;

  // Field FOVIE0: FOVIE0
    const uint32_t CAN3_IER_FOVIE0 = 1U << 3 ;

  // Field FFIE0: FFIE0
    const uint32_t CAN3_IER_FFIE0 = 1U << 2 ;

  // Field FMPIE0: FMPIE0
    const uint32_t CAN3_IER_FMPIE0 = 1U << 1 ;

  // Field TMEIE: TMEIE
    const uint32_t CAN3_IER_TMEIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ESR: interrupt enable register
  #define CAN3_ESR (* ((volatile uint32_t *) (0x40003400 + 24)))

  // Field REC: REC
    inline uint32_t CAN3_ESR_REC (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field TEC: TEC
    inline uint32_t CAN3_ESR_TEC (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field LEC: LEC
    inline uint32_t CAN3_ESR_LEC (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field BOFF: BOFF
    const uint32_t CAN3_ESR_BOFF = 1U << 2 ;

  // Field EPVF: EPVF
    const uint32_t CAN3_ESR_EPVF = 1U << 1 ;

  // Field EWGF: EWGF
    const uint32_t CAN3_ESR_EWGF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BTR: bit timing register
  #define CAN3_BTR (* ((volatile uint32_t *) (0x40003400 + 28)))

  // Field SILM: SILM
    const uint32_t CAN3_BTR_SILM = 1U << 31 ;

  // Field LBKM: LBKM
    const uint32_t CAN3_BTR_LBKM = 1U << 30 ;

  // Field SJW: SJW
    inline uint32_t CAN3_BTR_SJW (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field TS2: TS2
    inline uint32_t CAN3_BTR_TS2 (const uint32_t inValue) {return (inValue & 0x7U) << 20 ; }

  // Field TS1: TS1
    inline uint32_t CAN3_BTR_TS1 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field BRP: BRP
    inline uint32_t CAN3_BTR_BRP (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TI0R: TX mailbox identifier register
  #define CAN3_TI0R (* ((volatile uint32_t *) (0x40003400 + 384)))

  // Field STID: STID
    inline uint32_t CAN3_TI0R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN3_TI0R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN3_TI0R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN3_TI0R_RTR = 1U << 1 ;

  // Field TXRQ: TXRQ
    const uint32_t CAN3_TI0R_TXRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register TDT0R: mailbox data length control and time stamp register
  #define CAN3_TDT0R (* ((volatile uint32_t *) (0x40003400 + 388)))

  // Field TIME: TIME
    inline uint32_t CAN3_TDT0R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field TGT: TGT
    const uint32_t CAN3_TDT0R_TGT = 1U << 8 ;

  // Field DLC: DLC
    inline uint32_t CAN3_TDT0R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDL0R: mailbox data low register
  #define CAN3_TDL0R (* ((volatile uint32_t *) (0x40003400 + 392)))

  // Field DATA3: DATA3
    inline uint32_t CAN3_TDL0R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN3_TDL0R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN3_TDL0R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN3_TDL0R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDH0R: mailbox data high register
  #define CAN3_TDH0R (* ((volatile uint32_t *) (0x40003400 + 396)))

  // Field DATA7: DATA7
    inline uint32_t CAN3_TDH0R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN3_TDH0R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN3_TDH0R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN3_TDH0R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TI1R: mailbox identifier register
  #define CAN3_TI1R (* ((volatile uint32_t *) (0x40003400 + 400)))

  // Field STID: STID
    inline uint32_t CAN3_TI1R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN3_TI1R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN3_TI1R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN3_TI1R_RTR = 1U << 1 ;

  // Field TXRQ: TXRQ
    const uint32_t CAN3_TI1R_TXRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register TDT1R: mailbox data length control and time stamp register
  #define CAN3_TDT1R (* ((volatile uint32_t *) (0x40003400 + 404)))

  // Field TIME: TIME
    inline uint32_t CAN3_TDT1R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field TGT: TGT
    const uint32_t CAN3_TDT1R_TGT = 1U << 8 ;

  // Field DLC: DLC
    inline uint32_t CAN3_TDT1R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDL1R: mailbox data low register
  #define CAN3_TDL1R (* ((volatile uint32_t *) (0x40003400 + 408)))

  // Field DATA3: DATA3
    inline uint32_t CAN3_TDL1R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN3_TDL1R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN3_TDL1R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN3_TDL1R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDH1R: mailbox data high register
  #define CAN3_TDH1R (* ((volatile uint32_t *) (0x40003400 + 412)))

  // Field DATA7: DATA7
    inline uint32_t CAN3_TDH1R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN3_TDH1R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN3_TDH1R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN3_TDH1R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TI2R: mailbox identifier register
  #define CAN3_TI2R (* ((volatile uint32_t *) (0x40003400 + 416)))

  // Field STID: STID
    inline uint32_t CAN3_TI2R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN3_TI2R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN3_TI2R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN3_TI2R_RTR = 1U << 1 ;

  // Field TXRQ: TXRQ
    const uint32_t CAN3_TI2R_TXRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register TDT2R: mailbox data length control and time stamp register
  #define CAN3_TDT2R (* ((volatile uint32_t *) (0x40003400 + 420)))

  // Field TIME: TIME
    inline uint32_t CAN3_TDT2R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field TGT: TGT
    const uint32_t CAN3_TDT2R_TGT = 1U << 8 ;

  // Field DLC: DLC
    inline uint32_t CAN3_TDT2R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDL2R: mailbox data low register
  #define CAN3_TDL2R (* ((volatile uint32_t *) (0x40003400 + 424)))

  // Field DATA3: DATA3
    inline uint32_t CAN3_TDL2R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN3_TDL2R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN3_TDL2R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN3_TDL2R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDH2R: mailbox data high register
  #define CAN3_TDH2R (* ((volatile uint32_t *) (0x40003400 + 428)))

  // Field DATA7: DATA7
    inline uint32_t CAN3_TDH2R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN3_TDH2R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN3_TDH2R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN3_TDH2R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RI0R: receive FIFO mailbox identifier register
  #define CAN3_RI0R (* ((const volatile uint32_t *) (0x40003400 + 432)))

  // Field STID: STID
    inline uint32_t CAN3_RI0R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN3_RI0R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN3_RI0R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN3_RI0R_RTR = 1U << 1 ;

//------------------------------------------------------------------------------

//---  Register RDT0R: mailbox data high register
  #define CAN3_RDT0R (* ((const volatile uint32_t *) (0x40003400 + 436)))

  // Field TIME: TIME
    inline uint32_t CAN3_RDT0R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field FMI: FMI
    inline uint32_t CAN3_RDT0R_FMI (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DLC: DLC
    inline uint32_t CAN3_RDT0R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RDL0R: mailbox data high register
  #define CAN3_RDL0R (* ((const volatile uint32_t *) (0x40003400 + 440)))

  // Field DATA3: DATA3
    inline uint32_t CAN3_RDL0R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN3_RDL0R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN3_RDL0R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN3_RDL0R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RDH0R: receive FIFO mailbox data high register
  #define CAN3_RDH0R (* ((const volatile uint32_t *) (0x40003400 + 444)))

  // Field DATA7: DATA7
    inline uint32_t CAN3_RDH0R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN3_RDH0R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN3_RDH0R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN3_RDH0R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RI1R: mailbox data high register
  #define CAN3_RI1R (* ((const volatile uint32_t *) (0x40003400 + 448)))

  // Field STID: STID
    inline uint32_t CAN3_RI1R_STID (const uint32_t inValue) {return (inValue & 0x7FFU) << 21 ; }

  // Field EXID: EXID
    inline uint32_t CAN3_RI1R_EXID (const uint32_t inValue) {return (inValue & 0x3FFFFU) << 3 ; }

  // Field IDE: IDE
    const uint32_t CAN3_RI1R_IDE = 1U << 2 ;

  // Field RTR: RTR
    const uint32_t CAN3_RI1R_RTR = 1U << 1 ;

//------------------------------------------------------------------------------

//---  Register RDT1R: mailbox data high register
  #define CAN3_RDT1R (* ((const volatile uint32_t *) (0x40003400 + 452)))

  // Field TIME: TIME
    inline uint32_t CAN3_RDT1R_TIME (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field FMI: FMI
    inline uint32_t CAN3_RDT1R_FMI (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DLC: DLC
    inline uint32_t CAN3_RDT1R_DLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RDL1R: mailbox data high register
  #define CAN3_RDL1R (* ((const volatile uint32_t *) (0x40003400 + 456)))

  // Field DATA3: DATA3
    inline uint32_t CAN3_RDL1R_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA2: DATA2
    inline uint32_t CAN3_RDL1R_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA1: DATA1
    inline uint32_t CAN3_RDL1R_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA0: DATA0
    inline uint32_t CAN3_RDL1R_DATA0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RDH1R: mailbox data high register
  #define CAN3_RDH1R (* ((const volatile uint32_t *) (0x40003400 + 460)))

  // Field DATA7: DATA7
    inline uint32_t CAN3_RDH1R_DATA7 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DATA6: DATA6
    inline uint32_t CAN3_RDH1R_DATA6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA5: DATA5
    inline uint32_t CAN3_RDH1R_DATA5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA4: DATA4
    inline uint32_t CAN3_RDH1R_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register FMR: filter master register
  #define CAN3_FMR (* ((volatile uint32_t *) (0x40003400 + 512)))

  // Field CAN2SB: CAN2SB
    inline uint32_t CAN3_FMR_CAN2SB (const uint32_t inValue) {return (inValue & 0x3FU) << 8 ; }

  // Field FINIT: FINIT
    const uint32_t CAN3_FMR_FINIT = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register FM1R: filter mode register
  #define CAN3_FM1R (* ((volatile uint32_t *) (0x40003400 + 516)))

  // Field FBM0: Filter mode
    const uint32_t CAN3_FM1R_FBM0 = 1U << 0 ;

  // Field FBM1: Filter mode
    const uint32_t CAN3_FM1R_FBM1 = 1U << 1 ;

  // Field FBM2: Filter mode
    const uint32_t CAN3_FM1R_FBM2 = 1U << 2 ;

  // Field FBM3: Filter mode
    const uint32_t CAN3_FM1R_FBM3 = 1U << 3 ;

  // Field FBM4: Filter mode
    const uint32_t CAN3_FM1R_FBM4 = 1U << 4 ;

  // Field FBM5: Filter mode
    const uint32_t CAN3_FM1R_FBM5 = 1U << 5 ;

  // Field FBM6: Filter mode
    const uint32_t CAN3_FM1R_FBM6 = 1U << 6 ;

  // Field FBM7: Filter mode
    const uint32_t CAN3_FM1R_FBM7 = 1U << 7 ;

  // Field FBM8: Filter mode
    const uint32_t CAN3_FM1R_FBM8 = 1U << 8 ;

  // Field FBM9: Filter mode
    const uint32_t CAN3_FM1R_FBM9 = 1U << 9 ;

  // Field FBM10: Filter mode
    const uint32_t CAN3_FM1R_FBM10 = 1U << 10 ;

  // Field FBM11: Filter mode
    const uint32_t CAN3_FM1R_FBM11 = 1U << 11 ;

  // Field FBM12: Filter mode
    const uint32_t CAN3_FM1R_FBM12 = 1U << 12 ;

  // Field FBM13: Filter mode
    const uint32_t CAN3_FM1R_FBM13 = 1U << 13 ;

  // Field FBM14: Filter mode
    const uint32_t CAN3_FM1R_FBM14 = 1U << 14 ;

  // Field FBM15: Filter mode
    const uint32_t CAN3_FM1R_FBM15 = 1U << 15 ;

  // Field FBM16: Filter mode
    const uint32_t CAN3_FM1R_FBM16 = 1U << 16 ;

  // Field FBM17: Filter mode
    const uint32_t CAN3_FM1R_FBM17 = 1U << 17 ;

  // Field FBM18: Filter mode
    const uint32_t CAN3_FM1R_FBM18 = 1U << 18 ;

  // Field FBM19: Filter mode
    const uint32_t CAN3_FM1R_FBM19 = 1U << 19 ;

  // Field FBM20: Filter mode
    const uint32_t CAN3_FM1R_FBM20 = 1U << 20 ;

  // Field FBM21: Filter mode
    const uint32_t CAN3_FM1R_FBM21 = 1U << 21 ;

  // Field FBM22: Filter mode
    const uint32_t CAN3_FM1R_FBM22 = 1U << 22 ;

  // Field FBM23: Filter mode
    const uint32_t CAN3_FM1R_FBM23 = 1U << 23 ;

  // Field FBM24: Filter mode
    const uint32_t CAN3_FM1R_FBM24 = 1U << 24 ;

  // Field FBM25: Filter mode
    const uint32_t CAN3_FM1R_FBM25 = 1U << 25 ;

  // Field FBM26: Filter mode
    const uint32_t CAN3_FM1R_FBM26 = 1U << 26 ;

  // Field FBM27: Filter mode
    const uint32_t CAN3_FM1R_FBM27 = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register FS1R: filter scale register
  #define CAN3_FS1R (* ((volatile uint32_t *) (0x40003400 + 524)))

  // Field FSC0: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC0 = 1U << 0 ;

  // Field FSC1: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC1 = 1U << 1 ;

  // Field FSC2: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC2 = 1U << 2 ;

  // Field FSC3: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC3 = 1U << 3 ;

  // Field FSC4: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC4 = 1U << 4 ;

  // Field FSC5: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC5 = 1U << 5 ;

  // Field FSC6: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC6 = 1U << 6 ;

  // Field FSC7: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC7 = 1U << 7 ;

  // Field FSC8: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC8 = 1U << 8 ;

  // Field FSC9: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC9 = 1U << 9 ;

  // Field FSC10: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC10 = 1U << 10 ;

  // Field FSC11: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC11 = 1U << 11 ;

  // Field FSC12: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC12 = 1U << 12 ;

  // Field FSC13: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC13 = 1U << 13 ;

  // Field FSC14: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC14 = 1U << 14 ;

  // Field FSC15: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC15 = 1U << 15 ;

  // Field FSC16: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC16 = 1U << 16 ;

  // Field FSC17: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC17 = 1U << 17 ;

  // Field FSC18: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC18 = 1U << 18 ;

  // Field FSC19: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC19 = 1U << 19 ;

  // Field FSC20: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC20 = 1U << 20 ;

  // Field FSC21: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC21 = 1U << 21 ;

  // Field FSC22: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC22 = 1U << 22 ;

  // Field FSC23: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC23 = 1U << 23 ;

  // Field FSC24: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC24 = 1U << 24 ;

  // Field FSC25: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC25 = 1U << 25 ;

  // Field FSC26: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC26 = 1U << 26 ;

  // Field FSC27: Filter scale configuration
    const uint32_t CAN3_FS1R_FSC27 = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register FFA1R: filter FIFO assignment register
  #define CAN3_FFA1R (* ((volatile uint32_t *) (0x40003400 + 532)))

  // Field FFA0: Filter FIFO assignment for filter 0
    const uint32_t CAN3_FFA1R_FFA0 = 1U << 0 ;

  // Field FFA1: Filter FIFO assignment for filter 1
    const uint32_t CAN3_FFA1R_FFA1 = 1U << 1 ;

  // Field FFA2: Filter FIFO assignment for filter 2
    const uint32_t CAN3_FFA1R_FFA2 = 1U << 2 ;

  // Field FFA3: Filter FIFO assignment for filter 3
    const uint32_t CAN3_FFA1R_FFA3 = 1U << 3 ;

  // Field FFA4: Filter FIFO assignment for filter 4
    const uint32_t CAN3_FFA1R_FFA4 = 1U << 4 ;

  // Field FFA5: Filter FIFO assignment for filter 5
    const uint32_t CAN3_FFA1R_FFA5 = 1U << 5 ;

  // Field FFA6: Filter FIFO assignment for filter 6
    const uint32_t CAN3_FFA1R_FFA6 = 1U << 6 ;

  // Field FFA7: Filter FIFO assignment for filter 7
    const uint32_t CAN3_FFA1R_FFA7 = 1U << 7 ;

  // Field FFA8: Filter FIFO assignment for filter 8
    const uint32_t CAN3_FFA1R_FFA8 = 1U << 8 ;

  // Field FFA9: Filter FIFO assignment for filter 9
    const uint32_t CAN3_FFA1R_FFA9 = 1U << 9 ;

  // Field FFA10: Filter FIFO assignment for filter 10
    const uint32_t CAN3_FFA1R_FFA10 = 1U << 10 ;

  // Field FFA11: Filter FIFO assignment for filter 11
    const uint32_t CAN3_FFA1R_FFA11 = 1U << 11 ;

  // Field FFA12: Filter FIFO assignment for filter 12
    const uint32_t CAN3_FFA1R_FFA12 = 1U << 12 ;

  // Field FFA13: Filter FIFO assignment for filter 13
    const uint32_t CAN3_FFA1R_FFA13 = 1U << 13 ;

  // Field FFA14: Filter FIFO assignment for filter 14
    const uint32_t CAN3_FFA1R_FFA14 = 1U << 14 ;

  // Field FFA15: Filter FIFO assignment for filter 15
    const uint32_t CAN3_FFA1R_FFA15 = 1U << 15 ;

  // Field FFA16: Filter FIFO assignment for filter 16
    const uint32_t CAN3_FFA1R_FFA16 = 1U << 16 ;

  // Field FFA17: Filter FIFO assignment for filter 17
    const uint32_t CAN3_FFA1R_FFA17 = 1U << 17 ;

  // Field FFA18: Filter FIFO assignment for filter 18
    const uint32_t CAN3_FFA1R_FFA18 = 1U << 18 ;

  // Field FFA19: Filter FIFO assignment for filter 19
    const uint32_t CAN3_FFA1R_FFA19 = 1U << 19 ;

  // Field FFA20: Filter FIFO assignment for filter 20
    const uint32_t CAN3_FFA1R_FFA20 = 1U << 20 ;

  // Field FFA21: Filter FIFO assignment for filter 21
    const uint32_t CAN3_FFA1R_FFA21 = 1U << 21 ;

  // Field FFA22: Filter FIFO assignment for filter 22
    const uint32_t CAN3_FFA1R_FFA22 = 1U << 22 ;

  // Field FFA23: Filter FIFO assignment for filter 23
    const uint32_t CAN3_FFA1R_FFA23 = 1U << 23 ;

  // Field FFA24: Filter FIFO assignment for filter 24
    const uint32_t CAN3_FFA1R_FFA24 = 1U << 24 ;

  // Field FFA25: Filter FIFO assignment for filter 25
    const uint32_t CAN3_FFA1R_FFA25 = 1U << 25 ;

  // Field FFA26: Filter FIFO assignment for filter 26
    const uint32_t CAN3_FFA1R_FFA26 = 1U << 26 ;

  // Field FFA27: Filter FIFO assignment for filter 27
    const uint32_t CAN3_FFA1R_FFA27 = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register FA1R: filter activation register
  #define CAN3_FA1R (* ((volatile uint32_t *) (0x40003400 + 540)))

  // Field FACT0: Filter active
    const uint32_t CAN3_FA1R_FACT0 = 1U << 0 ;

  // Field FACT1: Filter active
    const uint32_t CAN3_FA1R_FACT1 = 1U << 1 ;

  // Field FACT2: Filter active
    const uint32_t CAN3_FA1R_FACT2 = 1U << 2 ;

  // Field FACT3: Filter active
    const uint32_t CAN3_FA1R_FACT3 = 1U << 3 ;

  // Field FACT4: Filter active
    const uint32_t CAN3_FA1R_FACT4 = 1U << 4 ;

  // Field FACT5: Filter active
    const uint32_t CAN3_FA1R_FACT5 = 1U << 5 ;

  // Field FACT6: Filter active
    const uint32_t CAN3_FA1R_FACT6 = 1U << 6 ;

  // Field FACT7: Filter active
    const uint32_t CAN3_FA1R_FACT7 = 1U << 7 ;

  // Field FACT8: Filter active
    const uint32_t CAN3_FA1R_FACT8 = 1U << 8 ;

  // Field FACT9: Filter active
    const uint32_t CAN3_FA1R_FACT9 = 1U << 9 ;

  // Field FACT10: Filter active
    const uint32_t CAN3_FA1R_FACT10 = 1U << 10 ;

  // Field FACT11: Filter active
    const uint32_t CAN3_FA1R_FACT11 = 1U << 11 ;

  // Field FACT12: Filter active
    const uint32_t CAN3_FA1R_FACT12 = 1U << 12 ;

  // Field FACT13: Filter active
    const uint32_t CAN3_FA1R_FACT13 = 1U << 13 ;

  // Field FACT14: Filter active
    const uint32_t CAN3_FA1R_FACT14 = 1U << 14 ;

  // Field FACT15: Filter active
    const uint32_t CAN3_FA1R_FACT15 = 1U << 15 ;

  // Field FACT16: Filter active
    const uint32_t CAN3_FA1R_FACT16 = 1U << 16 ;

  // Field FACT17: Filter active
    const uint32_t CAN3_FA1R_FACT17 = 1U << 17 ;

  // Field FACT18: Filter active
    const uint32_t CAN3_FA1R_FACT18 = 1U << 18 ;

  // Field FACT19: Filter active
    const uint32_t CAN3_FA1R_FACT19 = 1U << 19 ;

  // Field FACT20: Filter active
    const uint32_t CAN3_FA1R_FACT20 = 1U << 20 ;

  // Field FACT21: Filter active
    const uint32_t CAN3_FA1R_FACT21 = 1U << 21 ;

  // Field FACT22: Filter active
    const uint32_t CAN3_FA1R_FACT22 = 1U << 22 ;

  // Field FACT23: Filter active
    const uint32_t CAN3_FA1R_FACT23 = 1U << 23 ;

  // Field FACT24: Filter active
    const uint32_t CAN3_FA1R_FACT24 = 1U << 24 ;

  // Field FACT25: Filter active
    const uint32_t CAN3_FA1R_FACT25 = 1U << 25 ;

  // Field FACT26: Filter active
    const uint32_t CAN3_FA1R_FACT26 = 1U << 26 ;

  // Field FACT27: Filter active
    const uint32_t CAN3_FA1R_FACT27 = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register F0R1: Filter bank 0 register 1
  #define CAN3_F0R1 (* ((volatile uint32_t *) (0x40003400 + 576)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F0R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F0R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F0R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F0R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F0R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F0R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F0R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F0R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F0R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F0R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F0R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F0R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F0R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F0R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F0R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F0R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F0R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F0R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F0R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F0R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F0R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F0R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F0R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F0R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F0R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F0R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F0R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F0R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F0R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F0R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F0R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F0R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F0R2: Filter bank 0 register 2
  #define CAN3_F0R2 (* ((volatile uint32_t *) (0x40003400 + 580)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F0R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F0R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F0R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F0R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F0R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F0R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F0R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F0R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F0R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F0R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F0R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F0R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F0R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F0R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F0R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F0R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F0R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F0R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F0R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F0R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F0R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F0R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F0R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F0R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F0R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F0R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F0R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F0R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F0R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F0R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F0R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F0R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F1R1: Filter bank 1 register 1
  #define CAN3_F1R1 (* ((volatile uint32_t *) (0x40003400 + 584)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F1R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F1R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F1R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F1R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F1R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F1R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F1R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F1R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F1R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F1R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F1R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F1R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F1R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F1R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F1R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F1R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F1R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F1R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F1R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F1R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F1R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F1R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F1R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F1R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F1R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F1R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F1R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F1R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F1R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F1R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F1R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F1R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F1R2: Filter bank 1 register 2
  #define CAN3_F1R2 (* ((volatile uint32_t *) (0x40003400 + 588)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F1R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F1R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F1R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F1R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F1R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F1R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F1R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F1R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F1R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F1R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F1R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F1R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F1R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F1R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F1R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F1R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F1R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F1R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F1R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F1R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F1R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F1R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F1R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F1R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F1R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F1R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F1R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F1R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F1R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F1R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F1R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F1R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F2R1: Filter bank 2 register 1
  #define CAN3_F2R1 (* ((volatile uint32_t *) (0x40003400 + 592)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F2R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F2R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F2R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F2R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F2R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F2R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F2R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F2R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F2R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F2R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F2R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F2R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F2R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F2R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F2R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F2R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F2R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F2R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F2R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F2R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F2R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F2R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F2R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F2R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F2R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F2R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F2R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F2R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F2R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F2R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F2R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F2R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F2R2: Filter bank 2 register 2
  #define CAN3_F2R2 (* ((volatile uint32_t *) (0x40003400 + 596)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F2R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F2R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F2R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F2R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F2R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F2R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F2R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F2R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F2R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F2R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F2R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F2R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F2R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F2R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F2R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F2R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F2R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F2R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F2R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F2R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F2R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F2R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F2R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F2R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F2R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F2R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F2R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F2R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F2R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F2R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F2R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F2R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F3R1: Filter bank 3 register 1
  #define CAN3_F3R1 (* ((volatile uint32_t *) (0x40003400 + 600)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F3R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F3R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F3R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F3R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F3R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F3R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F3R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F3R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F3R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F3R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F3R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F3R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F3R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F3R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F3R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F3R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F3R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F3R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F3R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F3R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F3R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F3R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F3R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F3R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F3R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F3R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F3R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F3R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F3R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F3R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F3R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F3R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F3R2: Filter bank 3 register 2
  #define CAN3_F3R2 (* ((volatile uint32_t *) (0x40003400 + 604)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F3R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F3R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F3R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F3R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F3R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F3R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F3R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F3R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F3R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F3R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F3R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F3R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F3R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F3R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F3R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F3R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F3R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F3R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F3R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F3R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F3R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F3R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F3R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F3R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F3R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F3R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F3R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F3R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F3R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F3R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F3R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F3R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F4R1: Filter bank 4 register 1
  #define CAN3_F4R1 (* ((volatile uint32_t *) (0x40003400 + 608)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F4R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F4R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F4R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F4R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F4R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F4R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F4R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F4R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F4R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F4R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F4R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F4R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F4R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F4R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F4R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F4R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F4R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F4R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F4R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F4R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F4R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F4R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F4R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F4R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F4R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F4R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F4R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F4R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F4R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F4R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F4R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F4R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F4R2: Filter bank 4 register 2
  #define CAN3_F4R2 (* ((volatile uint32_t *) (0x40003400 + 612)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F4R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F4R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F4R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F4R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F4R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F4R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F4R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F4R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F4R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F4R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F4R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F4R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F4R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F4R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F4R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F4R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F4R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F4R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F4R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F4R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F4R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F4R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F4R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F4R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F4R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F4R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F4R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F4R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F4R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F4R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F4R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F4R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F5R1: Filter bank 5 register 1
  #define CAN3_F5R1 (* ((volatile uint32_t *) (0x40003400 + 616)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F5R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F5R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F5R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F5R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F5R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F5R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F5R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F5R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F5R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F5R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F5R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F5R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F5R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F5R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F5R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F5R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F5R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F5R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F5R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F5R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F5R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F5R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F5R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F5R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F5R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F5R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F5R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F5R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F5R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F5R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F5R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F5R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F5R2: Filter bank 5 register 2
  #define CAN3_F5R2 (* ((volatile uint32_t *) (0x40003400 + 620)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F5R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F5R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F5R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F5R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F5R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F5R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F5R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F5R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F5R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F5R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F5R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F5R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F5R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F5R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F5R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F5R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F5R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F5R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F5R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F5R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F5R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F5R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F5R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F5R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F5R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F5R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F5R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F5R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F5R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F5R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F5R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F5R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F6R1: Filter bank 6 register 1
  #define CAN3_F6R1 (* ((volatile uint32_t *) (0x40003400 + 624)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F6R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F6R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F6R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F6R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F6R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F6R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F6R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F6R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F6R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F6R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F6R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F6R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F6R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F6R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F6R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F6R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F6R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F6R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F6R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F6R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F6R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F6R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F6R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F6R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F6R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F6R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F6R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F6R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F6R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F6R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F6R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F6R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F6R2: Filter bank 6 register 2
  #define CAN3_F6R2 (* ((volatile uint32_t *) (0x40003400 + 628)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F6R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F6R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F6R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F6R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F6R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F6R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F6R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F6R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F6R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F6R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F6R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F6R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F6R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F6R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F6R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F6R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F6R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F6R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F6R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F6R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F6R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F6R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F6R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F6R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F6R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F6R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F6R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F6R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F6R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F6R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F6R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F6R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F7R1: Filter bank 7 register 1
  #define CAN3_F7R1 (* ((volatile uint32_t *) (0x40003400 + 632)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F7R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F7R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F7R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F7R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F7R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F7R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F7R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F7R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F7R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F7R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F7R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F7R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F7R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F7R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F7R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F7R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F7R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F7R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F7R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F7R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F7R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F7R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F7R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F7R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F7R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F7R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F7R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F7R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F7R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F7R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F7R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F7R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F7R2: Filter bank 7 register 2
  #define CAN3_F7R2 (* ((volatile uint32_t *) (0x40003400 + 636)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F7R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F7R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F7R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F7R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F7R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F7R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F7R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F7R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F7R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F7R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F7R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F7R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F7R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F7R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F7R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F7R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F7R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F7R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F7R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F7R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F7R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F7R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F7R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F7R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F7R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F7R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F7R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F7R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F7R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F7R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F7R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F7R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F8R1: Filter bank 8 register 1
  #define CAN3_F8R1 (* ((volatile uint32_t *) (0x40003400 + 640)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F8R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F8R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F8R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F8R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F8R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F8R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F8R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F8R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F8R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F8R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F8R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F8R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F8R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F8R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F8R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F8R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F8R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F8R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F8R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F8R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F8R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F8R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F8R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F8R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F8R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F8R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F8R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F8R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F8R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F8R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F8R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F8R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F8R2: Filter bank 8 register 2
  #define CAN3_F8R2 (* ((volatile uint32_t *) (0x40003400 + 644)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F8R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F8R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F8R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F8R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F8R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F8R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F8R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F8R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F8R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F8R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F8R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F8R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F8R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F8R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F8R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F8R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F8R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F8R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F8R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F8R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F8R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F8R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F8R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F8R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F8R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F8R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F8R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F8R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F8R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F8R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F8R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F8R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F9R1: Filter bank 9 register 1
  #define CAN3_F9R1 (* ((volatile uint32_t *) (0x40003400 + 648)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F9R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F9R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F9R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F9R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F9R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F9R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F9R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F9R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F9R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F9R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F9R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F9R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F9R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F9R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F9R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F9R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F9R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F9R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F9R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F9R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F9R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F9R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F9R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F9R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F9R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F9R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F9R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F9R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F9R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F9R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F9R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F9R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F9R2: Filter bank 9 register 2
  #define CAN3_F9R2 (* ((volatile uint32_t *) (0x40003400 + 652)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F9R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F9R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F9R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F9R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F9R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F9R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F9R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F9R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F9R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F9R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F9R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F9R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F9R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F9R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F9R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F9R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F9R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F9R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F9R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F9R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F9R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F9R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F9R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F9R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F9R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F9R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F9R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F9R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F9R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F9R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F9R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F9R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F10R1: Filter bank 10 register 1
  #define CAN3_F10R1 (* ((volatile uint32_t *) (0x40003400 + 656)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F10R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F10R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F10R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F10R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F10R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F10R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F10R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F10R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F10R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F10R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F10R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F10R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F10R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F10R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F10R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F10R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F10R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F10R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F10R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F10R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F10R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F10R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F10R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F10R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F10R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F10R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F10R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F10R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F10R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F10R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F10R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F10R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F10R2: Filter bank 10 register 2
  #define CAN3_F10R2 (* ((volatile uint32_t *) (0x40003400 + 660)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F10R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F10R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F10R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F10R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F10R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F10R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F10R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F10R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F10R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F10R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F10R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F10R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F10R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F10R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F10R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F10R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F10R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F10R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F10R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F10R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F10R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F10R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F10R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F10R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F10R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F10R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F10R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F10R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F10R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F10R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F10R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F10R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F11R1: Filter bank 11 register 1
  #define CAN3_F11R1 (* ((volatile uint32_t *) (0x40003400 + 664)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F11R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F11R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F11R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F11R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F11R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F11R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F11R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F11R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F11R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F11R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F11R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F11R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F11R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F11R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F11R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F11R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F11R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F11R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F11R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F11R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F11R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F11R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F11R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F11R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F11R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F11R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F11R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F11R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F11R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F11R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F11R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F11R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F11R2: Filter bank 11 register 2
  #define CAN3_F11R2 (* ((volatile uint32_t *) (0x40003400 + 668)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F11R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F11R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F11R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F11R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F11R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F11R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F11R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F11R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F11R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F11R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F11R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F11R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F11R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F11R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F11R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F11R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F11R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F11R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F11R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F11R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F11R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F11R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F11R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F11R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F11R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F11R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F11R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F11R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F11R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F11R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F11R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F11R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F12R1: Filter bank 4 register 1
  #define CAN3_F12R1 (* ((volatile uint32_t *) (0x40003400 + 672)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F12R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F12R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F12R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F12R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F12R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F12R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F12R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F12R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F12R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F12R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F12R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F12R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F12R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F12R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F12R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F12R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F12R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F12R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F12R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F12R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F12R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F12R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F12R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F12R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F12R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F12R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F12R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F12R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F12R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F12R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F12R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F12R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F12R2: Filter bank 12 register 2
  #define CAN3_F12R2 (* ((volatile uint32_t *) (0x40003400 + 676)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F12R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F12R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F12R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F12R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F12R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F12R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F12R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F12R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F12R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F12R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F12R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F12R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F12R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F12R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F12R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F12R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F12R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F12R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F12R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F12R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F12R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F12R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F12R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F12R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F12R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F12R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F12R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F12R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F12R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F12R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F12R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F12R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F13R1: Filter bank 13 register 1
  #define CAN3_F13R1 (* ((volatile uint32_t *) (0x40003400 + 680)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F13R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F13R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F13R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F13R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F13R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F13R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F13R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F13R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F13R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F13R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F13R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F13R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F13R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F13R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F13R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F13R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F13R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F13R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F13R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F13R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F13R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F13R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F13R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F13R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F13R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F13R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F13R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F13R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F13R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F13R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F13R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F13R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F13R2: Filter bank 13 register 2
  #define CAN3_F13R2 (* ((volatile uint32_t *) (0x40003400 + 684)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F13R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F13R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F13R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F13R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F13R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F13R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F13R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F13R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F13R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F13R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F13R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F13R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F13R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F13R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F13R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F13R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F13R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F13R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F13R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F13R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F13R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F13R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F13R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F13R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F13R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F13R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F13R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F13R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F13R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F13R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F13R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F13R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F14R1: Filter bank 14 register 1
  #define CAN3_F14R1 (* ((volatile uint32_t *) (0x40003400 + 688)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F14R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F14R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F14R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F14R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F14R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F14R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F14R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F14R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F14R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F14R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F14R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F14R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F14R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F14R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F14R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F14R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F14R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F14R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F14R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F14R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F14R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F14R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F14R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F14R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F14R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F14R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F14R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F14R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F14R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F14R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F14R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F14R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F14R2: Filter bank 14 register 2
  #define CAN3_F14R2 (* ((volatile uint32_t *) (0x40003400 + 692)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F14R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F14R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F14R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F14R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F14R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F14R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F14R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F14R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F14R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F14R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F14R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F14R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F14R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F14R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F14R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F14R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F14R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F14R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F14R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F14R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F14R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F14R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F14R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F14R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F14R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F14R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F14R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F14R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F14R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F14R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F14R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F14R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F15R1: Filter bank 15 register 1
  #define CAN3_F15R1 (* ((volatile uint32_t *) (0x40003400 + 696)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F15R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F15R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F15R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F15R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F15R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F15R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F15R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F15R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F15R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F15R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F15R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F15R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F15R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F15R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F15R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F15R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F15R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F15R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F15R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F15R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F15R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F15R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F15R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F15R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F15R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F15R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F15R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F15R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F15R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F15R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F15R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F15R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F15R2: Filter bank 15 register 2
  #define CAN3_F15R2 (* ((volatile uint32_t *) (0x40003400 + 700)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F15R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F15R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F15R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F15R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F15R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F15R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F15R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F15R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F15R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F15R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F15R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F15R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F15R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F15R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F15R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F15R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F15R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F15R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F15R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F15R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F15R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F15R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F15R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F15R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F15R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F15R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F15R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F15R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F15R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F15R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F15R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F15R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F16R1: Filter bank 16 register 1
  #define CAN3_F16R1 (* ((volatile uint32_t *) (0x40003400 + 704)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F16R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F16R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F16R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F16R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F16R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F16R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F16R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F16R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F16R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F16R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F16R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F16R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F16R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F16R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F16R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F16R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F16R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F16R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F16R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F16R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F16R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F16R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F16R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F16R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F16R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F16R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F16R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F16R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F16R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F16R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F16R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F16R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F16R2: Filter bank 16 register 2
  #define CAN3_F16R2 (* ((volatile uint32_t *) (0x40003400 + 708)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F16R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F16R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F16R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F16R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F16R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F16R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F16R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F16R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F16R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F16R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F16R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F16R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F16R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F16R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F16R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F16R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F16R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F16R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F16R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F16R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F16R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F16R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F16R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F16R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F16R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F16R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F16R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F16R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F16R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F16R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F16R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F16R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F17R1: Filter bank 17 register 1
  #define CAN3_F17R1 (* ((volatile uint32_t *) (0x40003400 + 712)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F17R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F17R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F17R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F17R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F17R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F17R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F17R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F17R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F17R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F17R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F17R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F17R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F17R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F17R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F17R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F17R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F17R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F17R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F17R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F17R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F17R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F17R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F17R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F17R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F17R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F17R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F17R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F17R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F17R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F17R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F17R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F17R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F17R2: Filter bank 17 register 2
  #define CAN3_F17R2 (* ((volatile uint32_t *) (0x40003400 + 716)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F17R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F17R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F17R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F17R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F17R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F17R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F17R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F17R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F17R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F17R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F17R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F17R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F17R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F17R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F17R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F17R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F17R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F17R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F17R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F17R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F17R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F17R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F17R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F17R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F17R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F17R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F17R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F17R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F17R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F17R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F17R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F17R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F18R1: Filter bank 18 register 1
  #define CAN3_F18R1 (* ((volatile uint32_t *) (0x40003400 + 720)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F18R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F18R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F18R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F18R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F18R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F18R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F18R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F18R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F18R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F18R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F18R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F18R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F18R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F18R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F18R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F18R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F18R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F18R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F18R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F18R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F18R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F18R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F18R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F18R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F18R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F18R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F18R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F18R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F18R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F18R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F18R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F18R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F18R2: Filter bank 18 register 2
  #define CAN3_F18R2 (* ((volatile uint32_t *) (0x40003400 + 724)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F18R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F18R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F18R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F18R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F18R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F18R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F18R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F18R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F18R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F18R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F18R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F18R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F18R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F18R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F18R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F18R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F18R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F18R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F18R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F18R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F18R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F18R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F18R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F18R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F18R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F18R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F18R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F18R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F18R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F18R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F18R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F18R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F19R1: Filter bank 19 register 1
  #define CAN3_F19R1 (* ((volatile uint32_t *) (0x40003400 + 728)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F19R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F19R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F19R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F19R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F19R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F19R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F19R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F19R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F19R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F19R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F19R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F19R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F19R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F19R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F19R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F19R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F19R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F19R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F19R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F19R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F19R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F19R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F19R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F19R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F19R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F19R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F19R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F19R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F19R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F19R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F19R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F19R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F19R2: Filter bank 19 register 2
  #define CAN3_F19R2 (* ((volatile uint32_t *) (0x40003400 + 732)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F19R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F19R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F19R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F19R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F19R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F19R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F19R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F19R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F19R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F19R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F19R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F19R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F19R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F19R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F19R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F19R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F19R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F19R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F19R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F19R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F19R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F19R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F19R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F19R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F19R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F19R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F19R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F19R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F19R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F19R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F19R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F19R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F20R1: Filter bank 20 register 1
  #define CAN3_F20R1 (* ((volatile uint32_t *) (0x40003400 + 736)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F20R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F20R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F20R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F20R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F20R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F20R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F20R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F20R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F20R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F20R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F20R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F20R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F20R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F20R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F20R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F20R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F20R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F20R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F20R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F20R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F20R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F20R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F20R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F20R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F20R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F20R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F20R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F20R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F20R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F20R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F20R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F20R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F20R2: Filter bank 20 register 2
  #define CAN3_F20R2 (* ((volatile uint32_t *) (0x40003400 + 740)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F20R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F20R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F20R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F20R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F20R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F20R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F20R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F20R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F20R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F20R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F20R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F20R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F20R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F20R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F20R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F20R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F20R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F20R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F20R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F20R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F20R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F20R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F20R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F20R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F20R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F20R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F20R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F20R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F20R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F20R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F20R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F20R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F21R1: Filter bank 21 register 1
  #define CAN3_F21R1 (* ((volatile uint32_t *) (0x40003400 + 744)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F21R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F21R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F21R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F21R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F21R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F21R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F21R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F21R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F21R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F21R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F21R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F21R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F21R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F21R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F21R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F21R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F21R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F21R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F21R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F21R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F21R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F21R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F21R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F21R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F21R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F21R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F21R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F21R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F21R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F21R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F21R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F21R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F21R2: Filter bank 21 register 2
  #define CAN3_F21R2 (* ((volatile uint32_t *) (0x40003400 + 748)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F21R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F21R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F21R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F21R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F21R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F21R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F21R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F21R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F21R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F21R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F21R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F21R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F21R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F21R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F21R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F21R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F21R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F21R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F21R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F21R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F21R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F21R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F21R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F21R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F21R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F21R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F21R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F21R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F21R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F21R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F21R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F21R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F22R1: Filter bank 22 register 1
  #define CAN3_F22R1 (* ((volatile uint32_t *) (0x40003400 + 752)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F22R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F22R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F22R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F22R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F22R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F22R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F22R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F22R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F22R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F22R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F22R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F22R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F22R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F22R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F22R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F22R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F22R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F22R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F22R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F22R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F22R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F22R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F22R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F22R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F22R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F22R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F22R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F22R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F22R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F22R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F22R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F22R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F22R2: Filter bank 22 register 2
  #define CAN3_F22R2 (* ((volatile uint32_t *) (0x40003400 + 756)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F22R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F22R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F22R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F22R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F22R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F22R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F22R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F22R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F22R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F22R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F22R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F22R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F22R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F22R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F22R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F22R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F22R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F22R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F22R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F22R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F22R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F22R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F22R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F22R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F22R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F22R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F22R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F22R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F22R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F22R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F22R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F22R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F23R1: Filter bank 23 register 1
  #define CAN3_F23R1 (* ((volatile uint32_t *) (0x40003400 + 760)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F23R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F23R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F23R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F23R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F23R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F23R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F23R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F23R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F23R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F23R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F23R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F23R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F23R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F23R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F23R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F23R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F23R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F23R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F23R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F23R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F23R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F23R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F23R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F23R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F23R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F23R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F23R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F23R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F23R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F23R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F23R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F23R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F23R2: Filter bank 23 register 2
  #define CAN3_F23R2 (* ((volatile uint32_t *) (0x40003400 + 764)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F23R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F23R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F23R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F23R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F23R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F23R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F23R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F23R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F23R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F23R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F23R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F23R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F23R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F23R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F23R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F23R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F23R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F23R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F23R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F23R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F23R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F23R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F23R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F23R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F23R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F23R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F23R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F23R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F23R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F23R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F23R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F23R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F24R1: Filter bank 24 register 1
  #define CAN3_F24R1 (* ((volatile uint32_t *) (0x40003400 + 768)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F24R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F24R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F24R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F24R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F24R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F24R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F24R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F24R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F24R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F24R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F24R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F24R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F24R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F24R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F24R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F24R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F24R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F24R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F24R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F24R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F24R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F24R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F24R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F24R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F24R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F24R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F24R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F24R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F24R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F24R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F24R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F24R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F24R2: Filter bank 24 register 2
  #define CAN3_F24R2 (* ((volatile uint32_t *) (0x40003400 + 772)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F24R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F24R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F24R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F24R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F24R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F24R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F24R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F24R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F24R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F24R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F24R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F24R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F24R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F24R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F24R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F24R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F24R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F24R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F24R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F24R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F24R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F24R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F24R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F24R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F24R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F24R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F24R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F24R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F24R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F24R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F24R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F24R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F25R1: Filter bank 25 register 1
  #define CAN3_F25R1 (* ((volatile uint32_t *) (0x40003400 + 776)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F25R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F25R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F25R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F25R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F25R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F25R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F25R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F25R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F25R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F25R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F25R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F25R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F25R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F25R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F25R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F25R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F25R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F25R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F25R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F25R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F25R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F25R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F25R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F25R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F25R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F25R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F25R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F25R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F25R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F25R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F25R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F25R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F25R2: Filter bank 25 register 2
  #define CAN3_F25R2 (* ((volatile uint32_t *) (0x40003400 + 780)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F25R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F25R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F25R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F25R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F25R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F25R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F25R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F25R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F25R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F25R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F25R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F25R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F25R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F25R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F25R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F25R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F25R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F25R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F25R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F25R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F25R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F25R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F25R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F25R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F25R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F25R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F25R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F25R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F25R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F25R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F25R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F25R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F26R1: Filter bank 26 register 1
  #define CAN3_F26R1 (* ((volatile uint32_t *) (0x40003400 + 784)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F26R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F26R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F26R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F26R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F26R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F26R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F26R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F26R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F26R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F26R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F26R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F26R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F26R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F26R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F26R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F26R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F26R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F26R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F26R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F26R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F26R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F26R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F26R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F26R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F26R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F26R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F26R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F26R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F26R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F26R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F26R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F26R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F26R2: Filter bank 26 register 2
  #define CAN3_F26R2 (* ((volatile uint32_t *) (0x40003400 + 788)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F26R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F26R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F26R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F26R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F26R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F26R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F26R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F26R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F26R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F26R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F26R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F26R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F26R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F26R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F26R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F26R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F26R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F26R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F26R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F26R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F26R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F26R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F26R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F26R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F26R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F26R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F26R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F26R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F26R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F26R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F26R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F26R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F27R1: Filter bank 27 register 1
  #define CAN3_F27R1 (* ((volatile uint32_t *) (0x40003400 + 792)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F27R1_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F27R1_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F27R1_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F27R1_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F27R1_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F27R1_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F27R1_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F27R1_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F27R1_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F27R1_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F27R1_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F27R1_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F27R1_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F27R1_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F27R1_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F27R1_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F27R1_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F27R1_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F27R1_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F27R1_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F27R1_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F27R1_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F27R1_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F27R1_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F27R1_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F27R1_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F27R1_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F27R1_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F27R1_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F27R1_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F27R1_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F27R1_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register F27R2: Filter bank 27 register 2
  #define CAN3_F27R2 (* ((volatile uint32_t *) (0x40003400 + 796)))

  // Field FB0: Filter bits
    const uint32_t CAN3_F27R2_FB0 = 1U << 0 ;

  // Field FB1: Filter bits
    const uint32_t CAN3_F27R2_FB1 = 1U << 1 ;

  // Field FB2: Filter bits
    const uint32_t CAN3_F27R2_FB2 = 1U << 2 ;

  // Field FB3: Filter bits
    const uint32_t CAN3_F27R2_FB3 = 1U << 3 ;

  // Field FB4: Filter bits
    const uint32_t CAN3_F27R2_FB4 = 1U << 4 ;

  // Field FB5: Filter bits
    const uint32_t CAN3_F27R2_FB5 = 1U << 5 ;

  // Field FB6: Filter bits
    const uint32_t CAN3_F27R2_FB6 = 1U << 6 ;

  // Field FB7: Filter bits
    const uint32_t CAN3_F27R2_FB7 = 1U << 7 ;

  // Field FB8: Filter bits
    const uint32_t CAN3_F27R2_FB8 = 1U << 8 ;

  // Field FB9: Filter bits
    const uint32_t CAN3_F27R2_FB9 = 1U << 9 ;

  // Field FB10: Filter bits
    const uint32_t CAN3_F27R2_FB10 = 1U << 10 ;

  // Field FB11: Filter bits
    const uint32_t CAN3_F27R2_FB11 = 1U << 11 ;

  // Field FB12: Filter bits
    const uint32_t CAN3_F27R2_FB12 = 1U << 12 ;

  // Field FB13: Filter bits
    const uint32_t CAN3_F27R2_FB13 = 1U << 13 ;

  // Field FB14: Filter bits
    const uint32_t CAN3_F27R2_FB14 = 1U << 14 ;

  // Field FB15: Filter bits
    const uint32_t CAN3_F27R2_FB15 = 1U << 15 ;

  // Field FB16: Filter bits
    const uint32_t CAN3_F27R2_FB16 = 1U << 16 ;

  // Field FB17: Filter bits
    const uint32_t CAN3_F27R2_FB17 = 1U << 17 ;

  // Field FB18: Filter bits
    const uint32_t CAN3_F27R2_FB18 = 1U << 18 ;

  // Field FB19: Filter bits
    const uint32_t CAN3_F27R2_FB19 = 1U << 19 ;

  // Field FB20: Filter bits
    const uint32_t CAN3_F27R2_FB20 = 1U << 20 ;

  // Field FB21: Filter bits
    const uint32_t CAN3_F27R2_FB21 = 1U << 21 ;

  // Field FB22: Filter bits
    const uint32_t CAN3_F27R2_FB22 = 1U << 22 ;

  // Field FB23: Filter bits
    const uint32_t CAN3_F27R2_FB23 = 1U << 23 ;

  // Field FB24: Filter bits
    const uint32_t CAN3_F27R2_FB24 = 1U << 24 ;

  // Field FB25: Filter bits
    const uint32_t CAN3_F27R2_FB25 = 1U << 25 ;

  // Field FB26: Filter bits
    const uint32_t CAN3_F27R2_FB26 = 1U << 26 ;

  // Field FB27: Filter bits
    const uint32_t CAN3_F27R2_FB27 = 1U << 27 ;

  // Field FB28: Filter bits
    const uint32_t CAN3_F27R2_FB28 = 1U << 28 ;

  // Field FB29: Filter bits
    const uint32_t CAN3_F27R2_FB29 = 1U << 29 ;

  // Field FB30: Filter bits
    const uint32_t CAN3_F27R2_FB30 = 1U << 30 ;

  // Field FB31: Filter bits
    const uint32_t CAN3_F27R2_FB31 = 1U << 31 ;

//------------------------------------------------------------------------------
// Peripheral CEC: HDMI-CEC controller
//------------------------------------------------------------------------------

//---  Register CR: control register
  #define CEC_CR (* ((volatile uint32_t *) (0x40006C00 + 0)))

  // Field TXEOM: Tx End Of Message
    const uint32_t CEC_CR_TXEOM = 1U << 2 ;

  // Field TXSOM: Tx start of message
    const uint32_t CEC_CR_TXSOM = 1U << 1 ;

  // Field CECEN: CEC Enable
    const uint32_t CEC_CR_CECEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CFGR: configuration register
  #define CEC_CFGR (* ((volatile uint32_t *) (0x40006C00 + 4)))

  // Field SFT: Signal Free Time
    inline uint32_t CEC_CFGR_SFT (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field RXTOL: Rx-Tolerance
    const uint32_t CEC_CFGR_RXTOL = 1U << 3 ;

  // Field BRESTP: Rx-stop on bit rising error
    const uint32_t CEC_CFGR_BRESTP = 1U << 4 ;

  // Field BREGEN: Generate error-bit on bit rising error
    const uint32_t CEC_CFGR_BREGEN = 1U << 5 ;

  // Field LBPEGEN: Generate Error-Bit on Long Bit Period Error
    const uint32_t CEC_CFGR_LBPEGEN = 1U << 6 ;

  // Field BRDNOGEN: Avoid Error-Bit Generation in Broadcast
    const uint32_t CEC_CFGR_BRDNOGEN = 1U << 7 ;

  // Field SFTOP: SFT Option Bit
    const uint32_t CEC_CFGR_SFTOP = 1U << 8 ;

  // Field OAR: Own addresses configuration
    inline uint32_t CEC_CFGR_OAR (const uint32_t inValue) {return (inValue & 0x7FFFU) << 16 ; }

  // Field LSTN: Listen mode
    const uint32_t CEC_CFGR_LSTN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register TXDR: Tx data register
  #define CEC_TXDR (* ((volatile uint32_t *) (0x40006C00 + 8)))

  // Field TXD: Tx Data register
    inline uint32_t CEC_TXDR_TXD (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RXDR: Rx Data Register
  #define CEC_RXDR (* ((const volatile uint32_t *) (0x40006C00 + 12)))

  // Field RXDR: CEC Rx Data Register
    inline uint32_t CEC_RXDR_RXDR (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt and Status Register
  #define CEC_ISR (* ((volatile uint32_t *) (0x40006C00 + 16)))

  // Field TXACKE: Tx-Missing acknowledge error
    const uint32_t CEC_ISR_TXACKE = 1U << 12 ;

  // Field TXERR: Tx-Error
    const uint32_t CEC_ISR_TXERR = 1U << 11 ;

  // Field TXUDR: Tx-Buffer Underrun
    const uint32_t CEC_ISR_TXUDR = 1U << 10 ;

  // Field TXEND: End of Transmission
    const uint32_t CEC_ISR_TXEND = 1U << 9 ;

  // Field TXBR: Tx-Byte Request
    const uint32_t CEC_ISR_TXBR = 1U << 8 ;

  // Field ARBLST: Arbitration Lost
    const uint32_t CEC_ISR_ARBLST = 1U << 7 ;

  // Field RXACKE: Rx-Missing Acknowledge
    const uint32_t CEC_ISR_RXACKE = 1U << 6 ;

  // Field LBPE: Rx-Long Bit Period Error
    const uint32_t CEC_ISR_LBPE = 1U << 5 ;

  // Field SBPE: Rx-Short Bit period error
    const uint32_t CEC_ISR_SBPE = 1U << 4 ;

  // Field BRE: Rx-Bit rising error
    const uint32_t CEC_ISR_BRE = 1U << 3 ;

  // Field RXOVR: Rx-Overrun
    const uint32_t CEC_ISR_RXOVR = 1U << 2 ;

  // Field RXEND: End Of Reception
    const uint32_t CEC_ISR_RXEND = 1U << 1 ;

  // Field RXBR: Rx-Byte Received
    const uint32_t CEC_ISR_RXBR = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register IER: interrupt enable register
  #define CEC_IER (* ((volatile uint32_t *) (0x40006C00 + 20)))

  // Field TXACKIE: Tx-Missing Acknowledge Error Interrupt Enable
    const uint32_t CEC_IER_TXACKIE = 1U << 12 ;

  // Field TXERRIE: Tx-Error Interrupt Enable
    const uint32_t CEC_IER_TXERRIE = 1U << 11 ;

  // Field TXUDRIE: Tx-Underrun interrupt enable
    const uint32_t CEC_IER_TXUDRIE = 1U << 10 ;

  // Field TXENDIE: Tx-End of message interrupt enable
    const uint32_t CEC_IER_TXENDIE = 1U << 9 ;

  // Field TXBRIE: Tx-Byte Request Interrupt Enable
    const uint32_t CEC_IER_TXBRIE = 1U << 8 ;

  // Field ARBLSTIE: Arbitration Lost Interrupt Enable
    const uint32_t CEC_IER_ARBLSTIE = 1U << 7 ;

  // Field RXACKIE: Rx-Missing Acknowledge Error Interrupt Enable
    const uint32_t CEC_IER_RXACKIE = 1U << 6 ;

  // Field LBPEIE: Long Bit Period Error Interrupt Enable
    const uint32_t CEC_IER_LBPEIE = 1U << 5 ;

  // Field SBPEIE: Short Bit Period Error Interrupt Enable
    const uint32_t CEC_IER_SBPEIE = 1U << 4 ;

  // Field BREIE: Bit Rising Error Interrupt Enable
    const uint32_t CEC_IER_BREIE = 1U << 3 ;

  // Field RXOVRIE: Rx-Buffer Overrun Interrupt Enable
    const uint32_t CEC_IER_RXOVRIE = 1U << 2 ;

  // Field RXENDIE: End Of Reception Interrupt Enable
    const uint32_t CEC_IER_RXENDIE = 1U << 1 ;

  // Field RXBRIE: Rx-Byte Received Interrupt Enable
    const uint32_t CEC_IER_RXBRIE = 1U << 0 ;

//------------------------------------------------------------------------------
// Peripheral CRC: Cryptographic processor
//------------------------------------------------------------------------------

//---  Register DR: Data register
  #define CRC_DR (* ((volatile uint32_t *) (0x40023000 + 0)))

  // Field DR: Data Register
    inline uint32_t CRC_DR_DR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IDR: Independent Data register
  #define CRC_IDR (* ((volatile uint32_t *) (0x40023000 + 4)))

  // Field IDR: Independent Data register
    inline uint32_t CRC_IDR_IDR (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CR: Control register
  #define CRC_CR (* ((volatile uint32_t *) (0x40023000 + 8)))

  // Field CR: Control regidter
    const uint32_t CRC_CR_CR = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register INIT: Initial CRC value
  #define CRC_INIT (* ((volatile uint32_t *) (0x40023000 + 12)))

  // Field CRC_INIT: Programmable initial CRC value
    inline uint32_t CRC_INIT_CRC_INIT (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register POL: CRC polynomial
  #define CRC_POL (* ((volatile uint32_t *) (0x40023000 + 16)))

  // Field POL: Programmable polynomial
    inline uint32_t CRC_POL_POL (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral CRYP: Cryptographic processor
//------------------------------------------------------------------------------

//---  Register CR: control register
  #define CRYP_CR (* ((volatile uint32_t *) (0x50060000 + 0)))

  // Field ALGODIR: Algorithm direction
    const uint32_t CRYP_CR_ALGODIR = 1U << 2 ;

  // Field ALGOMODE0: Algorithm mode
    inline uint32_t CRYP_CR_ALGOMODE0 (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DATATYPE: Data type selection
    inline uint32_t CRYP_CR_DATATYPE (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field KEYSIZE: Key size selection (AES mode only)
    inline uint32_t CRYP_CR_KEYSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field FFLUSH: FIFO flush
    const uint32_t CRYP_CR_FFLUSH = 1U << 14 ;

  // Field CRYPEN: Cryptographic processor enable
    const uint32_t CRYP_CR_CRYPEN = 1U << 15 ;

  // Field GCM_CCMPH: GCM_CCMPH
    inline uint32_t CRYP_CR_GCM_CCMPH (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field ALGOMODE3: ALGOMODE
    const uint32_t CRYP_CR_ALGOMODE3 = 1U << 19 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define CRYP_SR (* ((const volatile uint32_t *) (0x50060000 + 4)))

  // Field BUSY: Busy bit
    const uint32_t CRYP_SR_BUSY = 1U << 4 ;

  // Field OFFU: Output FIFO full
    const uint32_t CRYP_SR_OFFU = 1U << 3 ;

  // Field OFNE: Output FIFO not empty
    const uint32_t CRYP_SR_OFNE = 1U << 2 ;

  // Field IFNF: Input FIFO not full
    const uint32_t CRYP_SR_IFNF = 1U << 1 ;

  // Field IFEM: Input FIFO empty
    const uint32_t CRYP_SR_IFEM = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DIN: data input register
  #define CRYP_DIN (* ((volatile uint32_t *) (0x50060000 + 8)))

  // Field DATAIN: Data input
    inline uint32_t CRYP_DIN_DATAIN (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DOUT: data output register
  #define CRYP_DOUT (* ((const volatile uint32_t *) (0x50060000 + 12)))

  // Field DATAOUT: Data output
    inline uint32_t CRYP_DOUT_DATAOUT (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMACR: DMA control register
  #define CRYP_DMACR (* ((volatile uint32_t *) (0x50060000 + 16)))

  // Field DOEN: DMA output enable
    const uint32_t CRYP_DMACR_DOEN = 1U << 1 ;

  // Field DIEN: DMA input enable
    const uint32_t CRYP_DMACR_DIEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register IMSCR: interrupt mask set/clear register
  #define CRYP_IMSCR (* ((volatile uint32_t *) (0x50060000 + 20)))

  // Field OUTIM: Output FIFO service interrupt mask
    const uint32_t CRYP_IMSCR_OUTIM = 1U << 1 ;

  // Field INIM: Input FIFO service interrupt mask
    const uint32_t CRYP_IMSCR_INIM = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register RISR: raw interrupt status register
  #define CRYP_RISR (* ((const volatile uint32_t *) (0x50060000 + 24)))

  // Field OUTRIS: Output FIFO service raw interrupt status
    const uint32_t CRYP_RISR_OUTRIS = 1U << 1 ;

  // Field INRIS: Input FIFO service raw interrupt status
    const uint32_t CRYP_RISR_INRIS = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register MISR: masked interrupt status register
  #define CRYP_MISR (* ((const volatile uint32_t *) (0x50060000 + 28)))

  // Field OUTMIS: Output FIFO service masked interrupt status
    const uint32_t CRYP_MISR_OUTMIS = 1U << 1 ;

  // Field INMIS: Input FIFO service masked interrupt status
    const uint32_t CRYP_MISR_INMIS = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register K0LR: key registers
  #define CRYP_K0LR (* ((volatile uint32_t *) (0x50060000 + 32)))

  // Field b224: b224
    const uint32_t CRYP_K0LR_b224 = 1U << 0 ;

  // Field b225: b225
    const uint32_t CRYP_K0LR_b225 = 1U << 1 ;

  // Field b226: b226
    const uint32_t CRYP_K0LR_b226 = 1U << 2 ;

  // Field b227: b227
    const uint32_t CRYP_K0LR_b227 = 1U << 3 ;

  // Field b228: b228
    const uint32_t CRYP_K0LR_b228 = 1U << 4 ;

  // Field b229: b229
    const uint32_t CRYP_K0LR_b229 = 1U << 5 ;

  // Field b230: b230
    const uint32_t CRYP_K0LR_b230 = 1U << 6 ;

  // Field b231: b231
    const uint32_t CRYP_K0LR_b231 = 1U << 7 ;

  // Field b232: b232
    const uint32_t CRYP_K0LR_b232 = 1U << 8 ;

  // Field b233: b233
    const uint32_t CRYP_K0LR_b233 = 1U << 9 ;

  // Field b234: b234
    const uint32_t CRYP_K0LR_b234 = 1U << 10 ;

  // Field b235: b235
    const uint32_t CRYP_K0LR_b235 = 1U << 11 ;

  // Field b236: b236
    const uint32_t CRYP_K0LR_b236 = 1U << 12 ;

  // Field b237: b237
    const uint32_t CRYP_K0LR_b237 = 1U << 13 ;

  // Field b238: b238
    const uint32_t CRYP_K0LR_b238 = 1U << 14 ;

  // Field b239: b239
    const uint32_t CRYP_K0LR_b239 = 1U << 15 ;

  // Field b240: b240
    const uint32_t CRYP_K0LR_b240 = 1U << 16 ;

  // Field b241: b241
    const uint32_t CRYP_K0LR_b241 = 1U << 17 ;

  // Field b242: b242
    const uint32_t CRYP_K0LR_b242 = 1U << 18 ;

  // Field b243: b243
    const uint32_t CRYP_K0LR_b243 = 1U << 19 ;

  // Field b244: b244
    const uint32_t CRYP_K0LR_b244 = 1U << 20 ;

  // Field b245: b245
    const uint32_t CRYP_K0LR_b245 = 1U << 21 ;

  // Field b246: b246
    const uint32_t CRYP_K0LR_b246 = 1U << 22 ;

  // Field b247: b247
    const uint32_t CRYP_K0LR_b247 = 1U << 23 ;

  // Field b248: b248
    const uint32_t CRYP_K0LR_b248 = 1U << 24 ;

  // Field b249: b249
    const uint32_t CRYP_K0LR_b249 = 1U << 25 ;

  // Field b250: b250
    const uint32_t CRYP_K0LR_b250 = 1U << 26 ;

  // Field b251: b251
    const uint32_t CRYP_K0LR_b251 = 1U << 27 ;

  // Field b252: b252
    const uint32_t CRYP_K0LR_b252 = 1U << 28 ;

  // Field b253: b253
    const uint32_t CRYP_K0LR_b253 = 1U << 29 ;

  // Field b254: b254
    const uint32_t CRYP_K0LR_b254 = 1U << 30 ;

  // Field b255: b255
    const uint32_t CRYP_K0LR_b255 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register K0RR: key registers
  #define CRYP_K0RR (* ((volatile uint32_t *) (0x50060000 + 36)))

  // Field b192: b192
    const uint32_t CRYP_K0RR_b192 = 1U << 0 ;

  // Field b193: b193
    const uint32_t CRYP_K0RR_b193 = 1U << 1 ;

  // Field b194: b194
    const uint32_t CRYP_K0RR_b194 = 1U << 2 ;

  // Field b195: b195
    const uint32_t CRYP_K0RR_b195 = 1U << 3 ;

  // Field b196: b196
    const uint32_t CRYP_K0RR_b196 = 1U << 4 ;

  // Field b197: b197
    const uint32_t CRYP_K0RR_b197 = 1U << 5 ;

  // Field b198: b198
    const uint32_t CRYP_K0RR_b198 = 1U << 6 ;

  // Field b199: b199
    const uint32_t CRYP_K0RR_b199 = 1U << 7 ;

  // Field b200: b200
    const uint32_t CRYP_K0RR_b200 = 1U << 8 ;

  // Field b201: b201
    const uint32_t CRYP_K0RR_b201 = 1U << 9 ;

  // Field b202: b202
    const uint32_t CRYP_K0RR_b202 = 1U << 10 ;

  // Field b203: b203
    const uint32_t CRYP_K0RR_b203 = 1U << 11 ;

  // Field b204: b204
    const uint32_t CRYP_K0RR_b204 = 1U << 12 ;

  // Field b205: b205
    const uint32_t CRYP_K0RR_b205 = 1U << 13 ;

  // Field b206: b206
    const uint32_t CRYP_K0RR_b206 = 1U << 14 ;

  // Field b207: b207
    const uint32_t CRYP_K0RR_b207 = 1U << 15 ;

  // Field b208: b208
    const uint32_t CRYP_K0RR_b208 = 1U << 16 ;

  // Field b209: b209
    const uint32_t CRYP_K0RR_b209 = 1U << 17 ;

  // Field b210: b210
    const uint32_t CRYP_K0RR_b210 = 1U << 18 ;

  // Field b211: b211
    const uint32_t CRYP_K0RR_b211 = 1U << 19 ;

  // Field b212: b212
    const uint32_t CRYP_K0RR_b212 = 1U << 20 ;

  // Field b213: b213
    const uint32_t CRYP_K0RR_b213 = 1U << 21 ;

  // Field b214: b214
    const uint32_t CRYP_K0RR_b214 = 1U << 22 ;

  // Field b215: b215
    const uint32_t CRYP_K0RR_b215 = 1U << 23 ;

  // Field b216: b216
    const uint32_t CRYP_K0RR_b216 = 1U << 24 ;

  // Field b217: b217
    const uint32_t CRYP_K0RR_b217 = 1U << 25 ;

  // Field b218: b218
    const uint32_t CRYP_K0RR_b218 = 1U << 26 ;

  // Field b219: b219
    const uint32_t CRYP_K0RR_b219 = 1U << 27 ;

  // Field b220: b220
    const uint32_t CRYP_K0RR_b220 = 1U << 28 ;

  // Field b221: b221
    const uint32_t CRYP_K0RR_b221 = 1U << 29 ;

  // Field b222: b222
    const uint32_t CRYP_K0RR_b222 = 1U << 30 ;

  // Field b223: b223
    const uint32_t CRYP_K0RR_b223 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register K1LR: key registers
  #define CRYP_K1LR (* ((volatile uint32_t *) (0x50060000 + 40)))

  // Field b160: b160
    const uint32_t CRYP_K1LR_b160 = 1U << 0 ;

  // Field b161: b161
    const uint32_t CRYP_K1LR_b161 = 1U << 1 ;

  // Field b162: b162
    const uint32_t CRYP_K1LR_b162 = 1U << 2 ;

  // Field b163: b163
    const uint32_t CRYP_K1LR_b163 = 1U << 3 ;

  // Field b164: b164
    const uint32_t CRYP_K1LR_b164 = 1U << 4 ;

  // Field b165: b165
    const uint32_t CRYP_K1LR_b165 = 1U << 5 ;

  // Field b166: b166
    const uint32_t CRYP_K1LR_b166 = 1U << 6 ;

  // Field b167: b167
    const uint32_t CRYP_K1LR_b167 = 1U << 7 ;

  // Field b168: b168
    const uint32_t CRYP_K1LR_b168 = 1U << 8 ;

  // Field b169: b169
    const uint32_t CRYP_K1LR_b169 = 1U << 9 ;

  // Field b170: b170
    const uint32_t CRYP_K1LR_b170 = 1U << 10 ;

  // Field b171: b171
    const uint32_t CRYP_K1LR_b171 = 1U << 11 ;

  // Field b172: b172
    const uint32_t CRYP_K1LR_b172 = 1U << 12 ;

  // Field b173: b173
    const uint32_t CRYP_K1LR_b173 = 1U << 13 ;

  // Field b174: b174
    const uint32_t CRYP_K1LR_b174 = 1U << 14 ;

  // Field b175: b175
    const uint32_t CRYP_K1LR_b175 = 1U << 15 ;

  // Field b176: b176
    const uint32_t CRYP_K1LR_b176 = 1U << 16 ;

  // Field b177: b177
    const uint32_t CRYP_K1LR_b177 = 1U << 17 ;

  // Field b178: b178
    const uint32_t CRYP_K1LR_b178 = 1U << 18 ;

  // Field b179: b179
    const uint32_t CRYP_K1LR_b179 = 1U << 19 ;

  // Field b180: b180
    const uint32_t CRYP_K1LR_b180 = 1U << 20 ;

  // Field b181: b181
    const uint32_t CRYP_K1LR_b181 = 1U << 21 ;

  // Field b182: b182
    const uint32_t CRYP_K1LR_b182 = 1U << 22 ;

  // Field b183: b183
    const uint32_t CRYP_K1LR_b183 = 1U << 23 ;

  // Field b184: b184
    const uint32_t CRYP_K1LR_b184 = 1U << 24 ;

  // Field b185: b185
    const uint32_t CRYP_K1LR_b185 = 1U << 25 ;

  // Field b186: b186
    const uint32_t CRYP_K1LR_b186 = 1U << 26 ;

  // Field b187: b187
    const uint32_t CRYP_K1LR_b187 = 1U << 27 ;

  // Field b188: b188
    const uint32_t CRYP_K1LR_b188 = 1U << 28 ;

  // Field b189: b189
    const uint32_t CRYP_K1LR_b189 = 1U << 29 ;

  // Field b190: b190
    const uint32_t CRYP_K1LR_b190 = 1U << 30 ;

  // Field b191: b191
    const uint32_t CRYP_K1LR_b191 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register K1RR: key registers
  #define CRYP_K1RR (* ((volatile uint32_t *) (0x50060000 + 44)))

  // Field b128: b128
    const uint32_t CRYP_K1RR_b128 = 1U << 0 ;

  // Field b129: b129
    const uint32_t CRYP_K1RR_b129 = 1U << 1 ;

  // Field b130: b130
    const uint32_t CRYP_K1RR_b130 = 1U << 2 ;

  // Field b131: b131
    const uint32_t CRYP_K1RR_b131 = 1U << 3 ;

  // Field b132: b132
    const uint32_t CRYP_K1RR_b132 = 1U << 4 ;

  // Field b133: b133
    const uint32_t CRYP_K1RR_b133 = 1U << 5 ;

  // Field b134: b134
    const uint32_t CRYP_K1RR_b134 = 1U << 6 ;

  // Field b135: b135
    const uint32_t CRYP_K1RR_b135 = 1U << 7 ;

  // Field b136: b136
    const uint32_t CRYP_K1RR_b136 = 1U << 8 ;

  // Field b137: b137
    const uint32_t CRYP_K1RR_b137 = 1U << 9 ;

  // Field b138: b138
    const uint32_t CRYP_K1RR_b138 = 1U << 10 ;

  // Field b139: b139
    const uint32_t CRYP_K1RR_b139 = 1U << 11 ;

  // Field b140: b140
    const uint32_t CRYP_K1RR_b140 = 1U << 12 ;

  // Field b141: b141
    const uint32_t CRYP_K1RR_b141 = 1U << 13 ;

  // Field b142: b142
    const uint32_t CRYP_K1RR_b142 = 1U << 14 ;

  // Field b143: b143
    const uint32_t CRYP_K1RR_b143 = 1U << 15 ;

  // Field b144: b144
    const uint32_t CRYP_K1RR_b144 = 1U << 16 ;

  // Field b145: b145
    const uint32_t CRYP_K1RR_b145 = 1U << 17 ;

  // Field b146: b146
    const uint32_t CRYP_K1RR_b146 = 1U << 18 ;

  // Field b147: b147
    const uint32_t CRYP_K1RR_b147 = 1U << 19 ;

  // Field b148: b148
    const uint32_t CRYP_K1RR_b148 = 1U << 20 ;

  // Field b149: b149
    const uint32_t CRYP_K1RR_b149 = 1U << 21 ;

  // Field b150: b150
    const uint32_t CRYP_K1RR_b150 = 1U << 22 ;

  // Field b151: b151
    const uint32_t CRYP_K1RR_b151 = 1U << 23 ;

  // Field b152: b152
    const uint32_t CRYP_K1RR_b152 = 1U << 24 ;

  // Field b153: b153
    const uint32_t CRYP_K1RR_b153 = 1U << 25 ;

  // Field b154: b154
    const uint32_t CRYP_K1RR_b154 = 1U << 26 ;

  // Field b155: b155
    const uint32_t CRYP_K1RR_b155 = 1U << 27 ;

  // Field b156: b156
    const uint32_t CRYP_K1RR_b156 = 1U << 28 ;

  // Field b157: b157
    const uint32_t CRYP_K1RR_b157 = 1U << 29 ;

  // Field b158: b158
    const uint32_t CRYP_K1RR_b158 = 1U << 30 ;

  // Field b159: b159
    const uint32_t CRYP_K1RR_b159 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register K2LR: key registers
  #define CRYP_K2LR (* ((volatile uint32_t *) (0x50060000 + 48)))

  // Field b96: b96
    const uint32_t CRYP_K2LR_b96 = 1U << 0 ;

  // Field b97: b97
    const uint32_t CRYP_K2LR_b97 = 1U << 1 ;

  // Field b98: b98
    const uint32_t CRYP_K2LR_b98 = 1U << 2 ;

  // Field b99: b99
    const uint32_t CRYP_K2LR_b99 = 1U << 3 ;

  // Field b100: b100
    const uint32_t CRYP_K2LR_b100 = 1U << 4 ;

  // Field b101: b101
    const uint32_t CRYP_K2LR_b101 = 1U << 5 ;

  // Field b102: b102
    const uint32_t CRYP_K2LR_b102 = 1U << 6 ;

  // Field b103: b103
    const uint32_t CRYP_K2LR_b103 = 1U << 7 ;

  // Field b104: b104
    const uint32_t CRYP_K2LR_b104 = 1U << 8 ;

  // Field b105: b105
    const uint32_t CRYP_K2LR_b105 = 1U << 9 ;

  // Field b106: b106
    const uint32_t CRYP_K2LR_b106 = 1U << 10 ;

  // Field b107: b107
    const uint32_t CRYP_K2LR_b107 = 1U << 11 ;

  // Field b108: b108
    const uint32_t CRYP_K2LR_b108 = 1U << 12 ;

  // Field b109: b109
    const uint32_t CRYP_K2LR_b109 = 1U << 13 ;

  // Field b110: b110
    const uint32_t CRYP_K2LR_b110 = 1U << 14 ;

  // Field b111: b111
    const uint32_t CRYP_K2LR_b111 = 1U << 15 ;

  // Field b112: b112
    const uint32_t CRYP_K2LR_b112 = 1U << 16 ;

  // Field b113: b113
    const uint32_t CRYP_K2LR_b113 = 1U << 17 ;

  // Field b114: b114
    const uint32_t CRYP_K2LR_b114 = 1U << 18 ;

  // Field b115: b115
    const uint32_t CRYP_K2LR_b115 = 1U << 19 ;

  // Field b116: b116
    const uint32_t CRYP_K2LR_b116 = 1U << 20 ;

  // Field b117: b117
    const uint32_t CRYP_K2LR_b117 = 1U << 21 ;

  // Field b118: b118
    const uint32_t CRYP_K2LR_b118 = 1U << 22 ;

  // Field b119: b119
    const uint32_t CRYP_K2LR_b119 = 1U << 23 ;

  // Field b120: b120
    const uint32_t CRYP_K2LR_b120 = 1U << 24 ;

  // Field b121: b121
    const uint32_t CRYP_K2LR_b121 = 1U << 25 ;

  // Field b122: b122
    const uint32_t CRYP_K2LR_b122 = 1U << 26 ;

  // Field b123: b123
    const uint32_t CRYP_K2LR_b123 = 1U << 27 ;

  // Field b124: b124
    const uint32_t CRYP_K2LR_b124 = 1U << 28 ;

  // Field b125: b125
    const uint32_t CRYP_K2LR_b125 = 1U << 29 ;

  // Field b126: b126
    const uint32_t CRYP_K2LR_b126 = 1U << 30 ;

  // Field b127: b127
    const uint32_t CRYP_K2LR_b127 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register K2RR: key registers
  #define CRYP_K2RR (* ((volatile uint32_t *) (0x50060000 + 52)))

  // Field b64: b64
    const uint32_t CRYP_K2RR_b64 = 1U << 0 ;

  // Field b65: b65
    const uint32_t CRYP_K2RR_b65 = 1U << 1 ;

  // Field b66: b66
    const uint32_t CRYP_K2RR_b66 = 1U << 2 ;

  // Field b67: b67
    const uint32_t CRYP_K2RR_b67 = 1U << 3 ;

  // Field b68: b68
    const uint32_t CRYP_K2RR_b68 = 1U << 4 ;

  // Field b69: b69
    const uint32_t CRYP_K2RR_b69 = 1U << 5 ;

  // Field b70: b70
    const uint32_t CRYP_K2RR_b70 = 1U << 6 ;

  // Field b71: b71
    const uint32_t CRYP_K2RR_b71 = 1U << 7 ;

  // Field b72: b72
    const uint32_t CRYP_K2RR_b72 = 1U << 8 ;

  // Field b73: b73
    const uint32_t CRYP_K2RR_b73 = 1U << 9 ;

  // Field b74: b74
    const uint32_t CRYP_K2RR_b74 = 1U << 10 ;

  // Field b75: b75
    const uint32_t CRYP_K2RR_b75 = 1U << 11 ;

  // Field b76: b76
    const uint32_t CRYP_K2RR_b76 = 1U << 12 ;

  // Field b77: b77
    const uint32_t CRYP_K2RR_b77 = 1U << 13 ;

  // Field b78: b78
    const uint32_t CRYP_K2RR_b78 = 1U << 14 ;

  // Field b79: b79
    const uint32_t CRYP_K2RR_b79 = 1U << 15 ;

  // Field b80: b80
    const uint32_t CRYP_K2RR_b80 = 1U << 16 ;

  // Field b81: b81
    const uint32_t CRYP_K2RR_b81 = 1U << 17 ;

  // Field b82: b82
    const uint32_t CRYP_K2RR_b82 = 1U << 18 ;

  // Field b83: b83
    const uint32_t CRYP_K2RR_b83 = 1U << 19 ;

  // Field b84: b84
    const uint32_t CRYP_K2RR_b84 = 1U << 20 ;

  // Field b85: b85
    const uint32_t CRYP_K2RR_b85 = 1U << 21 ;

  // Field b86: b86
    const uint32_t CRYP_K2RR_b86 = 1U << 22 ;

  // Field b87: b87
    const uint32_t CRYP_K2RR_b87 = 1U << 23 ;

  // Field b88: b88
    const uint32_t CRYP_K2RR_b88 = 1U << 24 ;

  // Field b89: b89
    const uint32_t CRYP_K2RR_b89 = 1U << 25 ;

  // Field b90: b90
    const uint32_t CRYP_K2RR_b90 = 1U << 26 ;

  // Field b91: b91
    const uint32_t CRYP_K2RR_b91 = 1U << 27 ;

  // Field b92: b92
    const uint32_t CRYP_K2RR_b92 = 1U << 28 ;

  // Field b93: b93
    const uint32_t CRYP_K2RR_b93 = 1U << 29 ;

  // Field b94: b94
    const uint32_t CRYP_K2RR_b94 = 1U << 30 ;

  // Field b95: b95
    const uint32_t CRYP_K2RR_b95 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register K3LR: key registers
  #define CRYP_K3LR (* ((volatile uint32_t *) (0x50060000 + 56)))

  // Field b32: b32
    const uint32_t CRYP_K3LR_b32 = 1U << 0 ;

  // Field b33: b33
    const uint32_t CRYP_K3LR_b33 = 1U << 1 ;

  // Field b34: b34
    const uint32_t CRYP_K3LR_b34 = 1U << 2 ;

  // Field b35: b35
    const uint32_t CRYP_K3LR_b35 = 1U << 3 ;

  // Field b36: b36
    const uint32_t CRYP_K3LR_b36 = 1U << 4 ;

  // Field b37: b37
    const uint32_t CRYP_K3LR_b37 = 1U << 5 ;

  // Field b38: b38
    const uint32_t CRYP_K3LR_b38 = 1U << 6 ;

  // Field b39: b39
    const uint32_t CRYP_K3LR_b39 = 1U << 7 ;

  // Field b40: b40
    const uint32_t CRYP_K3LR_b40 = 1U << 8 ;

  // Field b41: b41
    const uint32_t CRYP_K3LR_b41 = 1U << 9 ;

  // Field b42: b42
    const uint32_t CRYP_K3LR_b42 = 1U << 10 ;

  // Field b43: b43
    const uint32_t CRYP_K3LR_b43 = 1U << 11 ;

  // Field b44: b44
    const uint32_t CRYP_K3LR_b44 = 1U << 12 ;

  // Field b45: b45
    const uint32_t CRYP_K3LR_b45 = 1U << 13 ;

  // Field b46: b46
    const uint32_t CRYP_K3LR_b46 = 1U << 14 ;

  // Field b47: b47
    const uint32_t CRYP_K3LR_b47 = 1U << 15 ;

  // Field b48: b48
    const uint32_t CRYP_K3LR_b48 = 1U << 16 ;

  // Field b49: b49
    const uint32_t CRYP_K3LR_b49 = 1U << 17 ;

  // Field b50: b50
    const uint32_t CRYP_K3LR_b50 = 1U << 18 ;

  // Field b51: b51
    const uint32_t CRYP_K3LR_b51 = 1U << 19 ;

  // Field b52: b52
    const uint32_t CRYP_K3LR_b52 = 1U << 20 ;

  // Field b53: b53
    const uint32_t CRYP_K3LR_b53 = 1U << 21 ;

  // Field b54: b54
    const uint32_t CRYP_K3LR_b54 = 1U << 22 ;

  // Field b55: b55
    const uint32_t CRYP_K3LR_b55 = 1U << 23 ;

  // Field b56: b56
    const uint32_t CRYP_K3LR_b56 = 1U << 24 ;

  // Field b57: b57
    const uint32_t CRYP_K3LR_b57 = 1U << 25 ;

  // Field b58: b58
    const uint32_t CRYP_K3LR_b58 = 1U << 26 ;

  // Field b59: b59
    const uint32_t CRYP_K3LR_b59 = 1U << 27 ;

  // Field b60: b60
    const uint32_t CRYP_K3LR_b60 = 1U << 28 ;

  // Field b61: b61
    const uint32_t CRYP_K3LR_b61 = 1U << 29 ;

  // Field b62: b62
    const uint32_t CRYP_K3LR_b62 = 1U << 30 ;

  // Field b63: b63
    const uint32_t CRYP_K3LR_b63 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register K3RR: key registers
  #define CRYP_K3RR (* ((volatile uint32_t *) (0x50060000 + 60)))

  // Field b0: b0
    const uint32_t CRYP_K3RR_b0 = 1U << 0 ;

  // Field b1: b1
    const uint32_t CRYP_K3RR_b1 = 1U << 1 ;

  // Field b2: b2
    const uint32_t CRYP_K3RR_b2 = 1U << 2 ;

  // Field b3: b3
    const uint32_t CRYP_K3RR_b3 = 1U << 3 ;

  // Field b4: b4
    const uint32_t CRYP_K3RR_b4 = 1U << 4 ;

  // Field b5: b5
    const uint32_t CRYP_K3RR_b5 = 1U << 5 ;

  // Field b6: b6
    const uint32_t CRYP_K3RR_b6 = 1U << 6 ;

  // Field b7: b7
    const uint32_t CRYP_K3RR_b7 = 1U << 7 ;

  // Field b8: b8
    const uint32_t CRYP_K3RR_b8 = 1U << 8 ;

  // Field b9: b9
    const uint32_t CRYP_K3RR_b9 = 1U << 9 ;

  // Field b10: b10
    const uint32_t CRYP_K3RR_b10 = 1U << 10 ;

  // Field b11: b11
    const uint32_t CRYP_K3RR_b11 = 1U << 11 ;

  // Field b12: b12
    const uint32_t CRYP_K3RR_b12 = 1U << 12 ;

  // Field b13: b13
    const uint32_t CRYP_K3RR_b13 = 1U << 13 ;

  // Field b14: b14
    const uint32_t CRYP_K3RR_b14 = 1U << 14 ;

  // Field b15: b15
    const uint32_t CRYP_K3RR_b15 = 1U << 15 ;

  // Field b16: b16
    const uint32_t CRYP_K3RR_b16 = 1U << 16 ;

  // Field b17: b17
    const uint32_t CRYP_K3RR_b17 = 1U << 17 ;

  // Field b18: b18
    const uint32_t CRYP_K3RR_b18 = 1U << 18 ;

  // Field b19: b19
    const uint32_t CRYP_K3RR_b19 = 1U << 19 ;

  // Field b20: b20
    const uint32_t CRYP_K3RR_b20 = 1U << 20 ;

  // Field b21: b21
    const uint32_t CRYP_K3RR_b21 = 1U << 21 ;

  // Field b22: b22
    const uint32_t CRYP_K3RR_b22 = 1U << 22 ;

  // Field b23: b23
    const uint32_t CRYP_K3RR_b23 = 1U << 23 ;

  // Field b24: b24
    const uint32_t CRYP_K3RR_b24 = 1U << 24 ;

  // Field b25: b25
    const uint32_t CRYP_K3RR_b25 = 1U << 25 ;

  // Field b26: b26
    const uint32_t CRYP_K3RR_b26 = 1U << 26 ;

  // Field b27: b27
    const uint32_t CRYP_K3RR_b27 = 1U << 27 ;

  // Field b28: b28
    const uint32_t CRYP_K3RR_b28 = 1U << 28 ;

  // Field b29: b29
    const uint32_t CRYP_K3RR_b29 = 1U << 29 ;

  // Field b30: b30
    const uint32_t CRYP_K3RR_b30 = 1U << 30 ;

  // Field b31: b31
    const uint32_t CRYP_K3RR_b31 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register IV0LR: initialization vector registers
  #define CRYP_IV0LR (* ((volatile uint32_t *) (0x50060000 + 64)))

  // Field IV31: IV31
    const uint32_t CRYP_IV0LR_IV31 = 1U << 0 ;

  // Field IV30: IV30
    const uint32_t CRYP_IV0LR_IV30 = 1U << 1 ;

  // Field IV29: IV29
    const uint32_t CRYP_IV0LR_IV29 = 1U << 2 ;

  // Field IV28: IV28
    const uint32_t CRYP_IV0LR_IV28 = 1U << 3 ;

  // Field IV27: IV27
    const uint32_t CRYP_IV0LR_IV27 = 1U << 4 ;

  // Field IV26: IV26
    const uint32_t CRYP_IV0LR_IV26 = 1U << 5 ;

  // Field IV25: IV25
    const uint32_t CRYP_IV0LR_IV25 = 1U << 6 ;

  // Field IV24: IV24
    const uint32_t CRYP_IV0LR_IV24 = 1U << 7 ;

  // Field IV23: IV23
    const uint32_t CRYP_IV0LR_IV23 = 1U << 8 ;

  // Field IV22: IV22
    const uint32_t CRYP_IV0LR_IV22 = 1U << 9 ;

  // Field IV21: IV21
    const uint32_t CRYP_IV0LR_IV21 = 1U << 10 ;

  // Field IV20: IV20
    const uint32_t CRYP_IV0LR_IV20 = 1U << 11 ;

  // Field IV19: IV19
    const uint32_t CRYP_IV0LR_IV19 = 1U << 12 ;

  // Field IV18: IV18
    const uint32_t CRYP_IV0LR_IV18 = 1U << 13 ;

  // Field IV17: IV17
    const uint32_t CRYP_IV0LR_IV17 = 1U << 14 ;

  // Field IV16: IV16
    const uint32_t CRYP_IV0LR_IV16 = 1U << 15 ;

  // Field IV15: IV15
    const uint32_t CRYP_IV0LR_IV15 = 1U << 16 ;

  // Field IV14: IV14
    const uint32_t CRYP_IV0LR_IV14 = 1U << 17 ;

  // Field IV13: IV13
    const uint32_t CRYP_IV0LR_IV13 = 1U << 18 ;

  // Field IV12: IV12
    const uint32_t CRYP_IV0LR_IV12 = 1U << 19 ;

  // Field IV11: IV11
    const uint32_t CRYP_IV0LR_IV11 = 1U << 20 ;

  // Field IV10: IV10
    const uint32_t CRYP_IV0LR_IV10 = 1U << 21 ;

  // Field IV9: IV9
    const uint32_t CRYP_IV0LR_IV9 = 1U << 22 ;

  // Field IV8: IV8
    const uint32_t CRYP_IV0LR_IV8 = 1U << 23 ;

  // Field IV7: IV7
    const uint32_t CRYP_IV0LR_IV7 = 1U << 24 ;

  // Field IV6: IV6
    const uint32_t CRYP_IV0LR_IV6 = 1U << 25 ;

  // Field IV5: IV5
    const uint32_t CRYP_IV0LR_IV5 = 1U << 26 ;

  // Field IV4: IV4
    const uint32_t CRYP_IV0LR_IV4 = 1U << 27 ;

  // Field IV3: IV3
    const uint32_t CRYP_IV0LR_IV3 = 1U << 28 ;

  // Field IV2: IV2
    const uint32_t CRYP_IV0LR_IV2 = 1U << 29 ;

  // Field IV1: IV1
    const uint32_t CRYP_IV0LR_IV1 = 1U << 30 ;

  // Field IV0: IV0
    const uint32_t CRYP_IV0LR_IV0 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register IV0RR: initialization vector registers
  #define CRYP_IV0RR (* ((volatile uint32_t *) (0x50060000 + 68)))

  // Field IV63: IV63
    const uint32_t CRYP_IV0RR_IV63 = 1U << 0 ;

  // Field IV62: IV62
    const uint32_t CRYP_IV0RR_IV62 = 1U << 1 ;

  // Field IV61: IV61
    const uint32_t CRYP_IV0RR_IV61 = 1U << 2 ;

  // Field IV60: IV60
    const uint32_t CRYP_IV0RR_IV60 = 1U << 3 ;

  // Field IV59: IV59
    const uint32_t CRYP_IV0RR_IV59 = 1U << 4 ;

  // Field IV58: IV58
    const uint32_t CRYP_IV0RR_IV58 = 1U << 5 ;

  // Field IV57: IV57
    const uint32_t CRYP_IV0RR_IV57 = 1U << 6 ;

  // Field IV56: IV56
    const uint32_t CRYP_IV0RR_IV56 = 1U << 7 ;

  // Field IV55: IV55
    const uint32_t CRYP_IV0RR_IV55 = 1U << 8 ;

  // Field IV54: IV54
    const uint32_t CRYP_IV0RR_IV54 = 1U << 9 ;

  // Field IV53: IV53
    const uint32_t CRYP_IV0RR_IV53 = 1U << 10 ;

  // Field IV52: IV52
    const uint32_t CRYP_IV0RR_IV52 = 1U << 11 ;

  // Field IV51: IV51
    const uint32_t CRYP_IV0RR_IV51 = 1U << 12 ;

  // Field IV50: IV50
    const uint32_t CRYP_IV0RR_IV50 = 1U << 13 ;

  // Field IV49: IV49
    const uint32_t CRYP_IV0RR_IV49 = 1U << 14 ;

  // Field IV48: IV48
    const uint32_t CRYP_IV0RR_IV48 = 1U << 15 ;

  // Field IV47: IV47
    const uint32_t CRYP_IV0RR_IV47 = 1U << 16 ;

  // Field IV46: IV46
    const uint32_t CRYP_IV0RR_IV46 = 1U << 17 ;

  // Field IV45: IV45
    const uint32_t CRYP_IV0RR_IV45 = 1U << 18 ;

  // Field IV44: IV44
    const uint32_t CRYP_IV0RR_IV44 = 1U << 19 ;

  // Field IV43: IV43
    const uint32_t CRYP_IV0RR_IV43 = 1U << 20 ;

  // Field IV42: IV42
    const uint32_t CRYP_IV0RR_IV42 = 1U << 21 ;

  // Field IV41: IV41
    const uint32_t CRYP_IV0RR_IV41 = 1U << 22 ;

  // Field IV40: IV40
    const uint32_t CRYP_IV0RR_IV40 = 1U << 23 ;

  // Field IV39: IV39
    const uint32_t CRYP_IV0RR_IV39 = 1U << 24 ;

  // Field IV38: IV38
    const uint32_t CRYP_IV0RR_IV38 = 1U << 25 ;

  // Field IV37: IV37
    const uint32_t CRYP_IV0RR_IV37 = 1U << 26 ;

  // Field IV36: IV36
    const uint32_t CRYP_IV0RR_IV36 = 1U << 27 ;

  // Field IV35: IV35
    const uint32_t CRYP_IV0RR_IV35 = 1U << 28 ;

  // Field IV34: IV34
    const uint32_t CRYP_IV0RR_IV34 = 1U << 29 ;

  // Field IV33: IV33
    const uint32_t CRYP_IV0RR_IV33 = 1U << 30 ;

  // Field IV32: IV32
    const uint32_t CRYP_IV0RR_IV32 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register IV1LR: initialization vector registers
  #define CRYP_IV1LR (* ((volatile uint32_t *) (0x50060000 + 72)))

  // Field IV95: IV95
    const uint32_t CRYP_IV1LR_IV95 = 1U << 0 ;

  // Field IV94: IV94
    const uint32_t CRYP_IV1LR_IV94 = 1U << 1 ;

  // Field IV93: IV93
    const uint32_t CRYP_IV1LR_IV93 = 1U << 2 ;

  // Field IV92: IV92
    const uint32_t CRYP_IV1LR_IV92 = 1U << 3 ;

  // Field IV91: IV91
    const uint32_t CRYP_IV1LR_IV91 = 1U << 4 ;

  // Field IV90: IV90
    const uint32_t CRYP_IV1LR_IV90 = 1U << 5 ;

  // Field IV89: IV89
    const uint32_t CRYP_IV1LR_IV89 = 1U << 6 ;

  // Field IV88: IV88
    const uint32_t CRYP_IV1LR_IV88 = 1U << 7 ;

  // Field IV87: IV87
    const uint32_t CRYP_IV1LR_IV87 = 1U << 8 ;

  // Field IV86: IV86
    const uint32_t CRYP_IV1LR_IV86 = 1U << 9 ;

  // Field IV85: IV85
    const uint32_t CRYP_IV1LR_IV85 = 1U << 10 ;

  // Field IV84: IV84
    const uint32_t CRYP_IV1LR_IV84 = 1U << 11 ;

  // Field IV83: IV83
    const uint32_t CRYP_IV1LR_IV83 = 1U << 12 ;

  // Field IV82: IV82
    const uint32_t CRYP_IV1LR_IV82 = 1U << 13 ;

  // Field IV81: IV81
    const uint32_t CRYP_IV1LR_IV81 = 1U << 14 ;

  // Field IV80: IV80
    const uint32_t CRYP_IV1LR_IV80 = 1U << 15 ;

  // Field IV79: IV79
    const uint32_t CRYP_IV1LR_IV79 = 1U << 16 ;

  // Field IV78: IV78
    const uint32_t CRYP_IV1LR_IV78 = 1U << 17 ;

  // Field IV77: IV77
    const uint32_t CRYP_IV1LR_IV77 = 1U << 18 ;

  // Field IV76: IV76
    const uint32_t CRYP_IV1LR_IV76 = 1U << 19 ;

  // Field IV75: IV75
    const uint32_t CRYP_IV1LR_IV75 = 1U << 20 ;

  // Field IV74: IV74
    const uint32_t CRYP_IV1LR_IV74 = 1U << 21 ;

  // Field IV73: IV73
    const uint32_t CRYP_IV1LR_IV73 = 1U << 22 ;

  // Field IV72: IV72
    const uint32_t CRYP_IV1LR_IV72 = 1U << 23 ;

  // Field IV71: IV71
    const uint32_t CRYP_IV1LR_IV71 = 1U << 24 ;

  // Field IV70: IV70
    const uint32_t CRYP_IV1LR_IV70 = 1U << 25 ;

  // Field IV69: IV69
    const uint32_t CRYP_IV1LR_IV69 = 1U << 26 ;

  // Field IV68: IV68
    const uint32_t CRYP_IV1LR_IV68 = 1U << 27 ;

  // Field IV67: IV67
    const uint32_t CRYP_IV1LR_IV67 = 1U << 28 ;

  // Field IV66: IV66
    const uint32_t CRYP_IV1LR_IV66 = 1U << 29 ;

  // Field IV65: IV65
    const uint32_t CRYP_IV1LR_IV65 = 1U << 30 ;

  // Field IV64: IV64
    const uint32_t CRYP_IV1LR_IV64 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register IV1RR: initialization vector registers
  #define CRYP_IV1RR (* ((volatile uint32_t *) (0x50060000 + 76)))

  // Field IV127: IV127
    const uint32_t CRYP_IV1RR_IV127 = 1U << 0 ;

  // Field IV126: IV126
    const uint32_t CRYP_IV1RR_IV126 = 1U << 1 ;

  // Field IV125: IV125
    const uint32_t CRYP_IV1RR_IV125 = 1U << 2 ;

  // Field IV124: IV124
    const uint32_t CRYP_IV1RR_IV124 = 1U << 3 ;

  // Field IV123: IV123
    const uint32_t CRYP_IV1RR_IV123 = 1U << 4 ;

  // Field IV122: IV122
    const uint32_t CRYP_IV1RR_IV122 = 1U << 5 ;

  // Field IV121: IV121
    const uint32_t CRYP_IV1RR_IV121 = 1U << 6 ;

  // Field IV120: IV120
    const uint32_t CRYP_IV1RR_IV120 = 1U << 7 ;

  // Field IV119: IV119
    const uint32_t CRYP_IV1RR_IV119 = 1U << 8 ;

  // Field IV118: IV118
    const uint32_t CRYP_IV1RR_IV118 = 1U << 9 ;

  // Field IV117: IV117
    const uint32_t CRYP_IV1RR_IV117 = 1U << 10 ;

  // Field IV116: IV116
    const uint32_t CRYP_IV1RR_IV116 = 1U << 11 ;

  // Field IV115: IV115
    const uint32_t CRYP_IV1RR_IV115 = 1U << 12 ;

  // Field IV114: IV114
    const uint32_t CRYP_IV1RR_IV114 = 1U << 13 ;

  // Field IV113: IV113
    const uint32_t CRYP_IV1RR_IV113 = 1U << 14 ;

  // Field IV112: IV112
    const uint32_t CRYP_IV1RR_IV112 = 1U << 15 ;

  // Field IV111: IV111
    const uint32_t CRYP_IV1RR_IV111 = 1U << 16 ;

  // Field IV110: IV110
    const uint32_t CRYP_IV1RR_IV110 = 1U << 17 ;

  // Field IV109: IV109
    const uint32_t CRYP_IV1RR_IV109 = 1U << 18 ;

  // Field IV108: IV108
    const uint32_t CRYP_IV1RR_IV108 = 1U << 19 ;

  // Field IV107: IV107
    const uint32_t CRYP_IV1RR_IV107 = 1U << 20 ;

  // Field IV106: IV106
    const uint32_t CRYP_IV1RR_IV106 = 1U << 21 ;

  // Field IV105: IV105
    const uint32_t CRYP_IV1RR_IV105 = 1U << 22 ;

  // Field IV104: IV104
    const uint32_t CRYP_IV1RR_IV104 = 1U << 23 ;

  // Field IV103: IV103
    const uint32_t CRYP_IV1RR_IV103 = 1U << 24 ;

  // Field IV102: IV102
    const uint32_t CRYP_IV1RR_IV102 = 1U << 25 ;

  // Field IV101: IV101
    const uint32_t CRYP_IV1RR_IV101 = 1U << 26 ;

  // Field IV100: IV100
    const uint32_t CRYP_IV1RR_IV100 = 1U << 27 ;

  // Field IV99: IV99
    const uint32_t CRYP_IV1RR_IV99 = 1U << 28 ;

  // Field IV98: IV98
    const uint32_t CRYP_IV1RR_IV98 = 1U << 29 ;

  // Field IV97: IV97
    const uint32_t CRYP_IV1RR_IV97 = 1U << 30 ;

  // Field IV96: IV96
    const uint32_t CRYP_IV1RR_IV96 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register CSGCMCCM0R: context swap register
  #define CRYP_CSGCMCCM0R (* ((volatile uint32_t *) (0x50060000 + 80)))

  // Field CSGCMCCM0R: CSGCMCCM0R
    inline uint32_t CRYP_CSGCMCCM0R_CSGCMCCM0R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCMCCM1R: context swap register
  #define CRYP_CSGCMCCM1R (* ((volatile uint32_t *) (0x50060000 + 84)))

  // Field CSGCMCCM1R: CSGCMCCM1R
    inline uint32_t CRYP_CSGCMCCM1R_CSGCMCCM1R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCMCCM2R: context swap register
  #define CRYP_CSGCMCCM2R (* ((volatile uint32_t *) (0x50060000 + 88)))

  // Field CSGCMCCM2R: CSGCMCCM2R
    inline uint32_t CRYP_CSGCMCCM2R_CSGCMCCM2R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCMCCM3R: context swap register
  #define CRYP_CSGCMCCM3R (* ((volatile uint32_t *) (0x50060000 + 92)))

  // Field CSGCMCCM3R: CSGCMCCM3R
    inline uint32_t CRYP_CSGCMCCM3R_CSGCMCCM3R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCMCCM4R: context swap register
  #define CRYP_CSGCMCCM4R (* ((volatile uint32_t *) (0x50060000 + 96)))

  // Field CSGCMCCM4R: CSGCMCCM4R
    inline uint32_t CRYP_CSGCMCCM4R_CSGCMCCM4R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCMCCM5R: context swap register
  #define CRYP_CSGCMCCM5R (* ((volatile uint32_t *) (0x50060000 + 100)))

  // Field CSGCMCCM5R: CSGCMCCM5R
    inline uint32_t CRYP_CSGCMCCM5R_CSGCMCCM5R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCMCCM6R: context swap register
  #define CRYP_CSGCMCCM6R (* ((volatile uint32_t *) (0x50060000 + 104)))

  // Field CSGCMCCM6R: CSGCMCCM6R
    inline uint32_t CRYP_CSGCMCCM6R_CSGCMCCM6R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCMCCM7R: context swap register
  #define CRYP_CSGCMCCM7R (* ((volatile uint32_t *) (0x50060000 + 108)))

  // Field CSGCMCCM7R: CSGCMCCM7R
    inline uint32_t CRYP_CSGCMCCM7R_CSGCMCCM7R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCM0R: context swap register
  #define CRYP_CSGCM0R (* ((volatile uint32_t *) (0x50060000 + 112)))

  // Field CSGCM0R: CSGCM0R
    inline uint32_t CRYP_CSGCM0R_CSGCM0R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCM1R: context swap register
  #define CRYP_CSGCM1R (* ((volatile uint32_t *) (0x50060000 + 116)))

  // Field CSGCM1R: CSGCM1R
    inline uint32_t CRYP_CSGCM1R_CSGCM1R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCM2R: context swap register
  #define CRYP_CSGCM2R (* ((volatile uint32_t *) (0x50060000 + 120)))

  // Field CSGCM2R: CSGCM2R
    inline uint32_t CRYP_CSGCM2R_CSGCM2R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCM3R: context swap register
  #define CRYP_CSGCM3R (* ((volatile uint32_t *) (0x50060000 + 124)))

  // Field CSGCM3R: CSGCM3R
    inline uint32_t CRYP_CSGCM3R_CSGCM3R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCM4R: context swap register
  #define CRYP_CSGCM4R (* ((volatile uint32_t *) (0x50060000 + 128)))

  // Field CSGCM4R: CSGCM4R
    inline uint32_t CRYP_CSGCM4R_CSGCM4R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCM5R: context swap register
  #define CRYP_CSGCM5R (* ((volatile uint32_t *) (0x50060000 + 132)))

  // Field CSGCM5R: CSGCM5R
    inline uint32_t CRYP_CSGCM5R_CSGCM5R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCM6R: context swap register
  #define CRYP_CSGCM6R (* ((volatile uint32_t *) (0x50060000 + 136)))

  // Field CSGCM6R: CSGCM6R
    inline uint32_t CRYP_CSGCM6R_CSGCM6R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSGCM7R: context swap register
  #define CRYP_CSGCM7R (* ((volatile uint32_t *) (0x50060000 + 140)))

  // Field CSGCM7R: CSGCM7R
    inline uint32_t CRYP_CSGCM7R_CSGCM7R (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral DAC: Digital-to-analog converter
//------------------------------------------------------------------------------

//---  Register CR: control register
  #define DAC_CR (* ((volatile uint32_t *) (0x40007400 + 0)))

  // Field DMAUDRIE2: DAC channel2 DMA underrun interrupt enable
    const uint32_t DAC_CR_DMAUDRIE2 = 1U << 29 ;

  // Field DMAEN2: DAC channel2 DMA enable
    const uint32_t DAC_CR_DMAEN2 = 1U << 28 ;

  // Field MAMP2: DAC channel2 mask/amplitude selector
    inline uint32_t DAC_CR_MAMP2 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field WAVE2: DAC channel2 noise/triangle wave generation enable
    inline uint32_t DAC_CR_WAVE2 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field TSEL2: DAC channel2 trigger selection
    inline uint32_t DAC_CR_TSEL2 (const uint32_t inValue) {return (inValue & 0x7U) << 19 ; }

  // Field TEN2: DAC channel2 trigger enable
    const uint32_t DAC_CR_TEN2 = 1U << 18 ;

  // Field BOFF2: DAC channel2 output buffer disable
    const uint32_t DAC_CR_BOFF2 = 1U << 17 ;

  // Field EN2: DAC channel2 enable
    const uint32_t DAC_CR_EN2 = 1U << 16 ;

  // Field DMAUDRIE1: DAC channel1 DMA Underrun Interrupt enable
    const uint32_t DAC_CR_DMAUDRIE1 = 1U << 13 ;

  // Field DMAEN1: DAC channel1 DMA enable
    const uint32_t DAC_CR_DMAEN1 = 1U << 12 ;

  // Field MAMP1: DAC channel1 mask/amplitude selector
    inline uint32_t DAC_CR_MAMP1 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field WAVE1: DAC channel1 noise/triangle wave generation enable
    inline uint32_t DAC_CR_WAVE1 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field TSEL1: DAC channel1 trigger selection
    inline uint32_t DAC_CR_TSEL1 (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field TEN1: DAC channel1 trigger enable
    const uint32_t DAC_CR_TEN1 = 1U << 2 ;

  // Field BOFF1: DAC channel1 output buffer disable
    const uint32_t DAC_CR_BOFF1 = 1U << 1 ;

  // Field EN1: DAC channel1 enable
    const uint32_t DAC_CR_EN1 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SWTRIGR: software trigger register
  #define DAC_SWTRIGR (* ((volatile uint32_t *) (0x40007400 + 4)))

  // Field SWTRIG2: DAC channel2 software trigger
    const uint32_t DAC_SWTRIGR_SWTRIG2 = 1U << 1 ;

  // Field SWTRIG1: DAC channel1 software trigger
    const uint32_t DAC_SWTRIGR_SWTRIG1 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DHR12R1: channel1 12-bit right-aligned data holding register
  #define DAC_DHR12R1 (* ((volatile uint32_t *) (0x40007400 + 8)))

  // Field DACC1DHR: DAC channel1 12-bit right-aligned data
    inline uint32_t DAC_DHR12R1_DACC1DHR (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHR12L1: channel1 12-bit left aligned data holding register
  #define DAC_DHR12L1 (* ((volatile uint32_t *) (0x40007400 + 12)))

  // Field DACC1DHR: DAC channel1 12-bit left-aligned data
    inline uint32_t DAC_DHR12L1_DACC1DHR (const uint32_t inValue) {return (inValue & 0xFFFU) << 4 ; }

//------------------------------------------------------------------------------

//---  Register DHR8R1: channel1 8-bit right aligned data holding register
  #define DAC_DHR8R1 (* ((volatile uint32_t *) (0x40007400 + 16)))

  // Field DACC1DHR: DAC channel1 8-bit right-aligned data
    inline uint32_t DAC_DHR8R1_DACC1DHR (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHR12R2: channel2 12-bit right aligned data holding register
  #define DAC_DHR12R2 (* ((volatile uint32_t *) (0x40007400 + 20)))

  // Field DACC2DHR: DAC channel2 12-bit right-aligned data
    inline uint32_t DAC_DHR12R2_DACC2DHR (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHR12L2: channel2 12-bit left aligned data holding register
  #define DAC_DHR12L2 (* ((volatile uint32_t *) (0x40007400 + 24)))

  // Field DACC2DHR: DAC channel2 12-bit left-aligned data
    inline uint32_t DAC_DHR12L2_DACC2DHR (const uint32_t inValue) {return (inValue & 0xFFFU) << 4 ; }

//------------------------------------------------------------------------------

//---  Register DHR8R2: channel2 8-bit right-aligned data holding register
  #define DAC_DHR8R2 (* ((volatile uint32_t *) (0x40007400 + 28)))

  // Field DACC2DHR: DAC channel2 8-bit right-aligned data
    inline uint32_t DAC_DHR8R2_DACC2DHR (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHR12RD: Dual DAC 12-bit right-aligned data holding register
  #define DAC_DHR12RD (* ((volatile uint32_t *) (0x40007400 + 32)))

  // Field DACC2DHR: DAC channel2 12-bit right-aligned data
    inline uint32_t DAC_DHR12RD_DACC2DHR (const uint32_t inValue) {return (inValue & 0xFFFU) << 16 ; }

  // Field DACC1DHR: DAC channel1 12-bit right-aligned data
    inline uint32_t DAC_DHR12RD_DACC1DHR (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHR12LD: DUAL DAC 12-bit left aligned data holding register
  #define DAC_DHR12LD (* ((volatile uint32_t *) (0x40007400 + 36)))

  // Field DACC2DHR: DAC channel2 12-bit left-aligned data
    inline uint32_t DAC_DHR12LD_DACC2DHR (const uint32_t inValue) {return (inValue & 0xFFFU) << 20 ; }

  // Field DACC1DHR: DAC channel1 12-bit left-aligned data
    inline uint32_t DAC_DHR12LD_DACC1DHR (const uint32_t inValue) {return (inValue & 0xFFFU) << 4 ; }

//------------------------------------------------------------------------------

//---  Register DHR8RD: DUAL DAC 8-bit right aligned data holding register
  #define DAC_DHR8RD (* ((volatile uint32_t *) (0x40007400 + 40)))

  // Field DACC2DHR: DAC channel2 8-bit right-aligned data
    inline uint32_t DAC_DHR8RD_DACC2DHR (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DACC1DHR: DAC channel1 8-bit right-aligned data
    inline uint32_t DAC_DHR8RD_DACC1DHR (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DOR1: channel1 data output register
  #define DAC_DOR1 (* ((const volatile uint32_t *) (0x40007400 + 44)))

  // Field DACC1DOR: DAC channel1 data output
    inline uint32_t DAC_DOR1_DACC1DOR (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DOR2: channel2 data output register
  #define DAC_DOR2 (* ((const volatile uint32_t *) (0x40007400 + 48)))

  // Field DACC2DOR: DAC channel2 data output
    inline uint32_t DAC_DOR2_DACC2DOR (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define DAC_SR (* ((volatile uint32_t *) (0x40007400 + 52)))

  // Field DMAUDR2: DAC channel2 DMA underrun flag
    const uint32_t DAC_SR_DMAUDR2 = 1U << 29 ;

  // Field DMAUDR1: DAC channel1 DMA underrun flag
    const uint32_t DAC_SR_DMAUDR1 = 1U << 13 ;

//------------------------------------------------------------------------------
// Peripheral DBGMCU: MCU debug component
//------------------------------------------------------------------------------

//---  Register IDCODE: DBGMCU_IDCODE
  #define DBGMCU_IDCODE (* ((const volatile uint32_t *) (0xE0042000 + 0)))

  // Field DEV_ID: Device identifier
    inline uint32_t DBGMCU_IDCODE_DEV_ID (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

  // Field REV_ID: Revision identifie
    inline uint32_t DBGMCU_IDCODE_REV_ID (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------
// Peripheral DCMI: Digital camera interface
//------------------------------------------------------------------------------

//---  Register CR: control register 1
  #define DCMI_CR (* ((volatile uint32_t *) (0x50050000 + 0)))

  // Field ENABLE: DCMI enable
    const uint32_t DCMI_CR_ENABLE = 1U << 14 ;

  // Field EDM: Extended data mode
    inline uint32_t DCMI_CR_EDM (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field FCRC: Frame capture rate control
    inline uint32_t DCMI_CR_FCRC (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field VSPOL: Vertical synchronization polarity
    const uint32_t DCMI_CR_VSPOL = 1U << 7 ;

  // Field HSPOL: Horizontal synchronization polarity
    const uint32_t DCMI_CR_HSPOL = 1U << 6 ;

  // Field PCKPOL: Pixel clock polarity
    const uint32_t DCMI_CR_PCKPOL = 1U << 5 ;

  // Field ESS: Embedded synchronization select
    const uint32_t DCMI_CR_ESS = 1U << 4 ;

  // Field JPEG: JPEG format
    const uint32_t DCMI_CR_JPEG = 1U << 3 ;

  // Field CROP: Crop feature
    const uint32_t DCMI_CR_CROP = 1U << 2 ;

  // Field CM: Capture mode
    const uint32_t DCMI_CR_CM = 1U << 1 ;

  // Field CAPTURE: Capture enable
    const uint32_t DCMI_CR_CAPTURE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define DCMI_SR (* ((const volatile uint32_t *) (0x50050000 + 4)))

  // Field FNE: FIFO not empty
    const uint32_t DCMI_SR_FNE = 1U << 2 ;

  // Field VSYNC: VSYNC
    const uint32_t DCMI_SR_VSYNC = 1U << 1 ;

  // Field HSYNC: HSYNC
    const uint32_t DCMI_SR_HSYNC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register RIS: raw interrupt status register
  #define DCMI_RIS (* ((const volatile uint32_t *) (0x50050000 + 8)))

  // Field LINE_RIS: Line raw interrupt status
    const uint32_t DCMI_RIS_LINE_RIS = 1U << 4 ;

  // Field VSYNC_RIS: VSYNC raw interrupt status
    const uint32_t DCMI_RIS_VSYNC_RIS = 1U << 3 ;

  // Field ERR_RIS: Synchronization error raw interrupt status
    const uint32_t DCMI_RIS_ERR_RIS = 1U << 2 ;

  // Field OVR_RIS: Overrun raw interrupt status
    const uint32_t DCMI_RIS_OVR_RIS = 1U << 1 ;

  // Field FRAME_RIS: Capture complete raw interrupt status
    const uint32_t DCMI_RIS_FRAME_RIS = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register IER: interrupt enable register
  #define DCMI_IER (* ((volatile uint32_t *) (0x50050000 + 12)))

  // Field LINE_IE: Line interrupt enable
    const uint32_t DCMI_IER_LINE_IE = 1U << 4 ;

  // Field VSYNC_IE: VSYNC interrupt enable
    const uint32_t DCMI_IER_VSYNC_IE = 1U << 3 ;

  // Field ERR_IE: Synchronization error interrupt enable
    const uint32_t DCMI_IER_ERR_IE = 1U << 2 ;

  // Field OVR_IE: Overrun interrupt enable
    const uint32_t DCMI_IER_OVR_IE = 1U << 1 ;

  // Field FRAME_IE: Capture complete interrupt enable
    const uint32_t DCMI_IER_FRAME_IE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register MIS: masked interrupt status register
  #define DCMI_MIS (* ((const volatile uint32_t *) (0x50050000 + 16)))

  // Field LINE_MIS: Line masked interrupt status
    const uint32_t DCMI_MIS_LINE_MIS = 1U << 4 ;

  // Field VSYNC_MIS: VSYNC masked interrupt status
    const uint32_t DCMI_MIS_VSYNC_MIS = 1U << 3 ;

  // Field ERR_MIS: Synchronization error masked interrupt status
    const uint32_t DCMI_MIS_ERR_MIS = 1U << 2 ;

  // Field OVR_MIS: Overrun masked interrupt status
    const uint32_t DCMI_MIS_OVR_MIS = 1U << 1 ;

  // Field FRAME_MIS: Capture complete masked interrupt status
    const uint32_t DCMI_MIS_FRAME_MIS = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: interrupt clear register
  #define DCMI_ICR (* ((volatile uint32_t *) (0x50050000 + 20)))

  // Field LINE_ISC: line interrupt status clear
    const uint32_t DCMI_ICR_LINE_ISC = 1U << 4 ;

  // Field VSYNC_ISC: Vertical synch interrupt status clear
    const uint32_t DCMI_ICR_VSYNC_ISC = 1U << 3 ;

  // Field ERR_ISC: Synchronization error interrupt status clear
    const uint32_t DCMI_ICR_ERR_ISC = 1U << 2 ;

  // Field OVR_ISC: Overrun interrupt status clear
    const uint32_t DCMI_ICR_OVR_ISC = 1U << 1 ;

  // Field FRAME_ISC: Capture complete interrupt status clear
    const uint32_t DCMI_ICR_FRAME_ISC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ESCR: embedded synchronization code register
  #define DCMI_ESCR (* ((volatile uint32_t *) (0x50050000 + 24)))

  // Field FEC: Frame end delimiter code
    inline uint32_t DCMI_ESCR_FEC (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field LEC: Line end delimiter code
    inline uint32_t DCMI_ESCR_LEC (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field LSC: Line start delimiter code
    inline uint32_t DCMI_ESCR_LSC (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field FSC: Frame start delimiter code
    inline uint32_t DCMI_ESCR_FSC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ESUR: embedded synchronization unmask register
  #define DCMI_ESUR (* ((volatile uint32_t *) (0x50050000 + 28)))

  // Field FEU: Frame end delimiter unmask
    inline uint32_t DCMI_ESUR_FEU (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field LEU: Line end delimiter unmask
    inline uint32_t DCMI_ESUR_LEU (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field LSU: Line start delimiter unmask
    inline uint32_t DCMI_ESUR_LSU (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field FSU: Frame start delimiter unmask
    inline uint32_t DCMI_ESUR_FSU (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CWSTRT: crop window start
  #define DCMI_CWSTRT (* ((volatile uint32_t *) (0x50050000 + 32)))

  // Field VST: Vertical start line count
    inline uint32_t DCMI_CWSTRT_VST (const uint32_t inValue) {return (inValue & 0x1FFFU) << 16 ; }

  // Field HOFFCNT: Horizontal offset count
    inline uint32_t DCMI_CWSTRT_HOFFCNT (const uint32_t inValue) {return (inValue & 0x3FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CWSIZE: crop window size
  #define DCMI_CWSIZE (* ((volatile uint32_t *) (0x50050000 + 36)))

  // Field VLINE: Vertical line count
    inline uint32_t DCMI_CWSIZE_VLINE (const uint32_t inValue) {return (inValue & 0x3FFFU) << 16 ; }

  // Field CAPCNT: Capture count
    inline uint32_t DCMI_CWSIZE_CAPCNT (const uint32_t inValue) {return (inValue & 0x3FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DR: data register
  #define DCMI_DR (* ((const volatile uint32_t *) (0x50050000 + 40)))

  // Field Byte3: Data byte 3
    inline uint32_t DCMI_DR_Byte3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field Byte2: Data byte 2
    inline uint32_t DCMI_DR_Byte2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field Byte1: Data byte 1
    inline uint32_t DCMI_DR_Byte1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field Byte0: Data byte 0
    inline uint32_t DCMI_DR_Byte0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral DFSDM: Digital filter for sigma delta       modulators
//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG0R1: DFSDM channel configuration 0 register 1
  #define DFSDM_DFSDM_CHCFG0R1 (* ((volatile uint32_t *) (0x40017400 + 0)))

  // Field SITP: Serial interface type for channel 0
    inline uint32_t DFSDM_DFSDM_CHCFG0R1_SITP (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field SPICKSEL: SPI clock select for channel 0
    inline uint32_t DFSDM_DFSDM_CHCFG0R1_SPICKSEL (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field SCDEN: Short-circuit detector enable on channel 0
    const uint32_t DFSDM_DFSDM_CHCFG0R1_SCDEN = 1U << 5 ;

  // Field CKABEN: Clock absence detector enable on channel 0
    const uint32_t DFSDM_DFSDM_CHCFG0R1_CKABEN = 1U << 6 ;

  // Field CHEN: Channel 0 enable
    const uint32_t DFSDM_DFSDM_CHCFG0R1_CHEN = 1U << 7 ;

  // Field CHINSEL: Channel inputs selection
    const uint32_t DFSDM_DFSDM_CHCFG0R1_CHINSEL = 1U << 8 ;

  // Field DATMPX: Input data multiplexer for channel 0
    inline uint32_t DFSDM_DFSDM_CHCFG0R1_DATMPX (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field DATPACK: Data packing mode in DFSDM_CHDATINyR register
    inline uint32_t DFSDM_DFSDM_CHCFG0R1_DATPACK (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field CKOUTDIV: Output serial clock divider
    inline uint32_t DFSDM_DFSDM_CHCFG0R1_CKOUTDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field CKOUTSRC: Output serial clock source selection
    const uint32_t DFSDM_DFSDM_CHCFG0R1_CKOUTSRC = 1U << 30 ;

  // Field DFSDMEN: Global enable for DFSDM interface
    const uint32_t DFSDM_DFSDM_CHCFG0R1_DFSDMEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG1R1: DFSDM channel configuration 1 register 1
  #define DFSDM_DFSDM_CHCFG1R1 (* ((volatile uint32_t *) (0x40017400 + 32)))

  // Field SITP: Serial interface type for channel 1
    inline uint32_t DFSDM_DFSDM_CHCFG1R1_SITP (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field SPICKSEL: SPI clock select for channel 1
    inline uint32_t DFSDM_DFSDM_CHCFG1R1_SPICKSEL (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field SCDEN: Short-circuit detector enable on channel 1
    const uint32_t DFSDM_DFSDM_CHCFG1R1_SCDEN = 1U << 5 ;

  // Field CKABEN: Clock absence detector enable on channel 1
    const uint32_t DFSDM_DFSDM_CHCFG1R1_CKABEN = 1U << 6 ;

  // Field CHEN: Channel 1 enable
    const uint32_t DFSDM_DFSDM_CHCFG1R1_CHEN = 1U << 7 ;

  // Field CHINSEL: Channel inputs selection
    const uint32_t DFSDM_DFSDM_CHCFG1R1_CHINSEL = 1U << 8 ;

  // Field DATMPX: Input data multiplexer for channel 1
    inline uint32_t DFSDM_DFSDM_CHCFG1R1_DATMPX (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field DATPACK: Data packing mode in DFSDM_CHDATINyR register
    inline uint32_t DFSDM_DFSDM_CHCFG1R1_DATPACK (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field CKOUTDIV: Output serial clock divider
    inline uint32_t DFSDM_DFSDM_CHCFG1R1_CKOUTDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field CKOUTSRC: Output serial clock source selection
    const uint32_t DFSDM_DFSDM_CHCFG1R1_CKOUTSRC = 1U << 30 ;

  // Field DFSDMEN: Global enable for DFSDM interface
    const uint32_t DFSDM_DFSDM_CHCFG1R1_DFSDMEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG2R1: DFSDM channel configuration 2 register 1
  #define DFSDM_DFSDM_CHCFG2R1 (* ((volatile uint32_t *) (0x40017400 + 64)))

  // Field SITP: Serial interface type for channel 2
    inline uint32_t DFSDM_DFSDM_CHCFG2R1_SITP (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field SPICKSEL: SPI clock select for channel 2
    inline uint32_t DFSDM_DFSDM_CHCFG2R1_SPICKSEL (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field SCDEN: Short-circuit detector enable on channel 2
    const uint32_t DFSDM_DFSDM_CHCFG2R1_SCDEN = 1U << 5 ;

  // Field CKABEN: Clock absence detector enable on channel 2
    const uint32_t DFSDM_DFSDM_CHCFG2R1_CKABEN = 1U << 6 ;

  // Field CHEN: Channel 2 enable
    const uint32_t DFSDM_DFSDM_CHCFG2R1_CHEN = 1U << 7 ;

  // Field CHINSEL: Channel inputs selection
    const uint32_t DFSDM_DFSDM_CHCFG2R1_CHINSEL = 1U << 8 ;

  // Field DATMPX: Input data multiplexer for channel 2
    inline uint32_t DFSDM_DFSDM_CHCFG2R1_DATMPX (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field DATPACK: Data packing mode in DFSDM_CHDATINyR register
    inline uint32_t DFSDM_DFSDM_CHCFG2R1_DATPACK (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field CKOUTDIV: Output serial clock divider
    inline uint32_t DFSDM_DFSDM_CHCFG2R1_CKOUTDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field CKOUTSRC: Output serial clock source selection
    const uint32_t DFSDM_DFSDM_CHCFG2R1_CKOUTSRC = 1U << 30 ;

  // Field DFSDMEN: Global enable for DFSDM interface
    const uint32_t DFSDM_DFSDM_CHCFG2R1_DFSDMEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG3R1: DFSDM channel configuration 3 register 1
  #define DFSDM_DFSDM_CHCFG3R1 (* ((volatile uint32_t *) (0x40017400 + 96)))

  // Field SITP: Serial interface type for channel 3
    inline uint32_t DFSDM_DFSDM_CHCFG3R1_SITP (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field SPICKSEL: SPI clock select for channel 3
    inline uint32_t DFSDM_DFSDM_CHCFG3R1_SPICKSEL (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field SCDEN: Short-circuit detector enable on channel 3
    const uint32_t DFSDM_DFSDM_CHCFG3R1_SCDEN = 1U << 5 ;

  // Field CKABEN: Clock absence detector enable on channel 3
    const uint32_t DFSDM_DFSDM_CHCFG3R1_CKABEN = 1U << 6 ;

  // Field CHEN: Channel 3 enable
    const uint32_t DFSDM_DFSDM_CHCFG3R1_CHEN = 1U << 7 ;

  // Field CHINSEL: Channel inputs selection
    const uint32_t DFSDM_DFSDM_CHCFG3R1_CHINSEL = 1U << 8 ;

  // Field DATMPX: Input data multiplexer for channel 3
    inline uint32_t DFSDM_DFSDM_CHCFG3R1_DATMPX (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field DATPACK: Data packing mode in DFSDM_CHDATINyR register
    inline uint32_t DFSDM_DFSDM_CHCFG3R1_DATPACK (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field CKOUTDIV: Output serial clock divider
    inline uint32_t DFSDM_DFSDM_CHCFG3R1_CKOUTDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field CKOUTSRC: Output serial clock source selection
    const uint32_t DFSDM_DFSDM_CHCFG3R1_CKOUTSRC = 1U << 30 ;

  // Field DFSDMEN: Global enable for DFSDM interface
    const uint32_t DFSDM_DFSDM_CHCFG3R1_DFSDMEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG4R1: DFSDM channel configuration 4 register 1
  #define DFSDM_DFSDM_CHCFG4R1 (* ((volatile uint32_t *) (0x40017400 + 128)))

  // Field SITP: Serial interface type for channel 4
    inline uint32_t DFSDM_DFSDM_CHCFG4R1_SITP (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field SPICKSEL: SPI clock select for channel 4
    inline uint32_t DFSDM_DFSDM_CHCFG4R1_SPICKSEL (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field SCDEN: Short-circuit detector enable on channel 4
    const uint32_t DFSDM_DFSDM_CHCFG4R1_SCDEN = 1U << 5 ;

  // Field CKABEN: Clock absence detector enable on channel 4
    const uint32_t DFSDM_DFSDM_CHCFG4R1_CKABEN = 1U << 6 ;

  // Field CHEN: Channel 4 enable
    const uint32_t DFSDM_DFSDM_CHCFG4R1_CHEN = 1U << 7 ;

  // Field CHINSEL: Channel inputs selection
    const uint32_t DFSDM_DFSDM_CHCFG4R1_CHINSEL = 1U << 8 ;

  // Field DATMPX: Input data multiplexer for channel 4
    inline uint32_t DFSDM_DFSDM_CHCFG4R1_DATMPX (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field DATPACK: Data packing mode in DFSDM_CHDATINyR register
    inline uint32_t DFSDM_DFSDM_CHCFG4R1_DATPACK (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field CKOUTDIV: Output serial clock divider
    inline uint32_t DFSDM_DFSDM_CHCFG4R1_CKOUTDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field CKOUTSRC: Output serial clock source selection
    const uint32_t DFSDM_DFSDM_CHCFG4R1_CKOUTSRC = 1U << 30 ;

  // Field DFSDMEN: Global enable for DFSDM interface
    const uint32_t DFSDM_DFSDM_CHCFG4R1_DFSDMEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG5R1: DFSDM channel configuration 5 register 1
  #define DFSDM_DFSDM_CHCFG5R1 (* ((volatile uint32_t *) (0x40017400 + 160)))

  // Field SITP: Serial interface type for channel 5
    inline uint32_t DFSDM_DFSDM_CHCFG5R1_SITP (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field SPICKSEL: SPI clock select for channel 5
    inline uint32_t DFSDM_DFSDM_CHCFG5R1_SPICKSEL (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field SCDEN: Short-circuit detector enable on channel 5
    const uint32_t DFSDM_DFSDM_CHCFG5R1_SCDEN = 1U << 5 ;

  // Field CKABEN: Clock absence detector enable on channel 5
    const uint32_t DFSDM_DFSDM_CHCFG5R1_CKABEN = 1U << 6 ;

  // Field CHEN: Channel 5 enable
    const uint32_t DFSDM_DFSDM_CHCFG5R1_CHEN = 1U << 7 ;

  // Field CHINSEL: Channel inputs selection
    const uint32_t DFSDM_DFSDM_CHCFG5R1_CHINSEL = 1U << 8 ;

  // Field DATMPX: Input data multiplexer for channel 5
    inline uint32_t DFSDM_DFSDM_CHCFG5R1_DATMPX (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field DATPACK: Data packing mode in DFSDM_CHDATINyR register
    inline uint32_t DFSDM_DFSDM_CHCFG5R1_DATPACK (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field CKOUTDIV: Output serial clock divider
    inline uint32_t DFSDM_DFSDM_CHCFG5R1_CKOUTDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field CKOUTSRC: Output serial clock source selection
    const uint32_t DFSDM_DFSDM_CHCFG5R1_CKOUTSRC = 1U << 30 ;

  // Field DFSDMEN: Global enable for DFSDM interface
    const uint32_t DFSDM_DFSDM_CHCFG5R1_DFSDMEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG6R1: DFSDM channel configuration 6 register 1
  #define DFSDM_DFSDM_CHCFG6R1 (* ((volatile uint32_t *) (0x40017400 + 192)))

  // Field SITP: Serial interface type for channel 6
    inline uint32_t DFSDM_DFSDM_CHCFG6R1_SITP (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field SPICKSEL: SPI clock select for channel 6
    inline uint32_t DFSDM_DFSDM_CHCFG6R1_SPICKSEL (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field SCDEN: Short-circuit detector enable on channel 6
    const uint32_t DFSDM_DFSDM_CHCFG6R1_SCDEN = 1U << 5 ;

  // Field CKABEN: Clock absence detector enable on channel 6
    const uint32_t DFSDM_DFSDM_CHCFG6R1_CKABEN = 1U << 6 ;

  // Field CHEN: Channel 6 enable
    const uint32_t DFSDM_DFSDM_CHCFG6R1_CHEN = 1U << 7 ;

  // Field CHINSEL: Channel inputs selection
    const uint32_t DFSDM_DFSDM_CHCFG6R1_CHINSEL = 1U << 8 ;

  // Field DATMPX: Input data multiplexer for channel 6
    inline uint32_t DFSDM_DFSDM_CHCFG6R1_DATMPX (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field DATPACK: Data packing mode in DFSDM_CHDATINyR register
    inline uint32_t DFSDM_DFSDM_CHCFG6R1_DATPACK (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field CKOUTDIV: Output serial clock divider
    inline uint32_t DFSDM_DFSDM_CHCFG6R1_CKOUTDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field CKOUTSRC: Output serial clock source selection
    const uint32_t DFSDM_DFSDM_CHCFG6R1_CKOUTSRC = 1U << 30 ;

  // Field DFSDMEN: Global enable for DFSDM interface
    const uint32_t DFSDM_DFSDM_CHCFG6R1_DFSDMEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG7R1: DFSDM channel configuration 7 register 1
  #define DFSDM_DFSDM_CHCFG7R1 (* ((volatile uint32_t *) (0x40017400 + 224)))

  // Field SITP: Serial interface type for channel 7
    inline uint32_t DFSDM_DFSDM_CHCFG7R1_SITP (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field SPICKSEL: SPI clock select for channel 7
    inline uint32_t DFSDM_DFSDM_CHCFG7R1_SPICKSEL (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field SCDEN: Short-circuit detector enable on channel 7
    const uint32_t DFSDM_DFSDM_CHCFG7R1_SCDEN = 1U << 5 ;

  // Field CKABEN: Clock absence detector enable on channel 7
    const uint32_t DFSDM_DFSDM_CHCFG7R1_CKABEN = 1U << 6 ;

  // Field CHEN: Channel 7 enable
    const uint32_t DFSDM_DFSDM_CHCFG7R1_CHEN = 1U << 7 ;

  // Field CHINSEL: Channel inputs selection
    const uint32_t DFSDM_DFSDM_CHCFG7R1_CHINSEL = 1U << 8 ;

  // Field DATMPX: Input data multiplexer for channel 7
    inline uint32_t DFSDM_DFSDM_CHCFG7R1_DATMPX (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field DATPACK: Data packing mode in DFSDM_CHDATINyR register
    inline uint32_t DFSDM_DFSDM_CHCFG7R1_DATPACK (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field CKOUTDIV: Output serial clock divider
    inline uint32_t DFSDM_DFSDM_CHCFG7R1_CKOUTDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field CKOUTSRC: Output serial clock source selection
    const uint32_t DFSDM_DFSDM_CHCFG7R1_CKOUTSRC = 1U << 30 ;

  // Field DFSDMEN: Global enable for DFSDM interface
    const uint32_t DFSDM_DFSDM_CHCFG7R1_DFSDMEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG0R2: DFSDM channel configuration 0 register 2
  #define DFSDM_DFSDM_CHCFG0R2 (* ((volatile uint32_t *) (0x40017400 + 4)))

  // Field DTRBS: Data right bit-shift for channel 0
    inline uint32_t DFSDM_DFSDM_CHCFG0R2_DTRBS (const uint32_t inValue) {return (inValue & 0x1FU) << 3 ; }

  // Field OFFSET: 24-bit calibration offset for channel 0
    inline uint32_t DFSDM_DFSDM_CHCFG0R2_OFFSET (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG1R2: DFSDM channel configuration 1 register 2
  #define DFSDM_DFSDM_CHCFG1R2 (* ((volatile uint32_t *) (0x40017400 + 36)))

  // Field DTRBS: Data right bit-shift for channel 1
    inline uint32_t DFSDM_DFSDM_CHCFG1R2_DTRBS (const uint32_t inValue) {return (inValue & 0x1FU) << 3 ; }

  // Field OFFSET: 24-bit calibration offset for channel 1
    inline uint32_t DFSDM_DFSDM_CHCFG1R2_OFFSET (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG2R2: DFSDM channel configuration 2 register 2
  #define DFSDM_DFSDM_CHCFG2R2 (* ((volatile uint32_t *) (0x40017400 + 68)))

  // Field DTRBS: Data right bit-shift for channel 2
    inline uint32_t DFSDM_DFSDM_CHCFG2R2_DTRBS (const uint32_t inValue) {return (inValue & 0x1FU) << 3 ; }

  // Field OFFSET: 24-bit calibration offset for channel 2
    inline uint32_t DFSDM_DFSDM_CHCFG2R2_OFFSET (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG3R2: DFSDM channel configuration 3 register 2
  #define DFSDM_DFSDM_CHCFG3R2 (* ((volatile uint32_t *) (0x40017400 + 100)))

  // Field DTRBS: Data right bit-shift for channel 3
    inline uint32_t DFSDM_DFSDM_CHCFG3R2_DTRBS (const uint32_t inValue) {return (inValue & 0x1FU) << 3 ; }

  // Field OFFSET: 24-bit calibration offset for channel 3
    inline uint32_t DFSDM_DFSDM_CHCFG3R2_OFFSET (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG4R2: DFSDM channel configuration 4 register 2
  #define DFSDM_DFSDM_CHCFG4R2 (* ((volatile uint32_t *) (0x40017400 + 132)))

  // Field DTRBS: Data right bit-shift for channel 4
    inline uint32_t DFSDM_DFSDM_CHCFG4R2_DTRBS (const uint32_t inValue) {return (inValue & 0x1FU) << 3 ; }

  // Field OFFSET: 24-bit calibration offset for channel 4
    inline uint32_t DFSDM_DFSDM_CHCFG4R2_OFFSET (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG5R2: DFSDM channel configuration 5 register 2
  #define DFSDM_DFSDM_CHCFG5R2 (* ((volatile uint32_t *) (0x40017400 + 164)))

  // Field DTRBS: Data right bit-shift for channel 5
    inline uint32_t DFSDM_DFSDM_CHCFG5R2_DTRBS (const uint32_t inValue) {return (inValue & 0x1FU) << 3 ; }

  // Field OFFSET: 24-bit calibration offset for channel 5
    inline uint32_t DFSDM_DFSDM_CHCFG5R2_OFFSET (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG6R2: DFSDM channel configuration 6 register 2
  #define DFSDM_DFSDM_CHCFG6R2 (* ((volatile uint32_t *) (0x40017400 + 196)))

  // Field DTRBS: Data right bit-shift for channel 6
    inline uint32_t DFSDM_DFSDM_CHCFG6R2_DTRBS (const uint32_t inValue) {return (inValue & 0x1FU) << 3 ; }

  // Field OFFSET: 24-bit calibration offset for channel 6
    inline uint32_t DFSDM_DFSDM_CHCFG6R2_OFFSET (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHCFG7R2: DFSDM channel configuration 7 register 2
  #define DFSDM_DFSDM_CHCFG7R2 (* ((volatile uint32_t *) (0x40017400 + 228)))

  // Field DTRBS: Data right bit-shift for channel 7
    inline uint32_t DFSDM_DFSDM_CHCFG7R2_DTRBS (const uint32_t inValue) {return (inValue & 0x1FU) << 3 ; }

  // Field OFFSET: 24-bit calibration offset for channel 7
    inline uint32_t DFSDM_DFSDM_CHCFG7R2_OFFSET (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_AWSCD0R: DFSDM analog watchdog and short-circuit detector register
  #define DFSDM_DFSDM_AWSCD0R (* ((volatile uint32_t *) (0x40017400 + 8)))

  // Field SCDT: short-circuit detector threshold for channel 0
    inline uint32_t DFSDM_DFSDM_AWSCD0R_SCDT (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field BKSCD: Break signal assignment for short-circuit detector on channel 0
    inline uint32_t DFSDM_DFSDM_AWSCD0R_BKSCD (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AWFOSR: Analog watchdog filter oversampling ratio (decimation rate) on channel 0
    inline uint32_t DFSDM_DFSDM_AWSCD0R_AWFOSR (const uint32_t inValue) {return (inValue & 0x1FU) << 16 ; }

  // Field AWFORD: Analog watchdog Sinc filter order on channel 0
    inline uint32_t DFSDM_DFSDM_AWSCD0R_AWFORD (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_AWSCD1R: DFSDM analog watchdog and short-circuit detector register
  #define DFSDM_DFSDM_AWSCD1R (* ((volatile uint32_t *) (0x40017400 + 40)))

  // Field SCDT: short-circuit detector threshold for channel 1
    inline uint32_t DFSDM_DFSDM_AWSCD1R_SCDT (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field BKSCD: Break signal assignment for short-circuit detector on channel 1
    inline uint32_t DFSDM_DFSDM_AWSCD1R_BKSCD (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AWFOSR: Analog watchdog filter oversampling ratio (decimation rate) on channel 1
    inline uint32_t DFSDM_DFSDM_AWSCD1R_AWFOSR (const uint32_t inValue) {return (inValue & 0x1FU) << 16 ; }

  // Field AWFORD: Analog watchdog Sinc filter order on channel 1
    inline uint32_t DFSDM_DFSDM_AWSCD1R_AWFORD (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_AWSCD2R: DFSDM analog watchdog and short-circuit detector register
  #define DFSDM_DFSDM_AWSCD2R (* ((volatile uint32_t *) (0x40017400 + 72)))

  // Field SCDT: short-circuit detector threshold for channel 2
    inline uint32_t DFSDM_DFSDM_AWSCD2R_SCDT (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field BKSCD: Break signal assignment for short-circuit detector on channel 2
    inline uint32_t DFSDM_DFSDM_AWSCD2R_BKSCD (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AWFOSR: Analog watchdog filter oversampling ratio (decimation rate) on channel 2
    inline uint32_t DFSDM_DFSDM_AWSCD2R_AWFOSR (const uint32_t inValue) {return (inValue & 0x1FU) << 16 ; }

  // Field AWFORD: Analog watchdog Sinc filter order on channel 2
    inline uint32_t DFSDM_DFSDM_AWSCD2R_AWFORD (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_AWSCD3R: DFSDM analog watchdog and short-circuit detector register
  #define DFSDM_DFSDM_AWSCD3R (* ((volatile uint32_t *) (0x40017400 + 104)))

  // Field SCDT: short-circuit detector threshold for channel 3
    inline uint32_t DFSDM_DFSDM_AWSCD3R_SCDT (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field BKSCD: Break signal assignment for short-circuit detector on channel 3
    inline uint32_t DFSDM_DFSDM_AWSCD3R_BKSCD (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AWFOSR: Analog watchdog filter oversampling ratio (decimation rate) on channel 3
    inline uint32_t DFSDM_DFSDM_AWSCD3R_AWFOSR (const uint32_t inValue) {return (inValue & 0x1FU) << 16 ; }

  // Field AWFORD: Analog watchdog Sinc filter order on channel 3
    inline uint32_t DFSDM_DFSDM_AWSCD3R_AWFORD (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_AWSCD4R: DFSDM analog watchdog and short-circuit detector register
  #define DFSDM_DFSDM_AWSCD4R (* ((volatile uint32_t *) (0x40017400 + 136)))

  // Field SCDT: short-circuit detector threshold for channel 4
    inline uint32_t DFSDM_DFSDM_AWSCD4R_SCDT (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field BKSCD: Break signal assignment for short-circuit detector on channel 4
    inline uint32_t DFSDM_DFSDM_AWSCD4R_BKSCD (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AWFOSR: Analog watchdog filter oversampling ratio (decimation rate) on channel 4
    inline uint32_t DFSDM_DFSDM_AWSCD4R_AWFOSR (const uint32_t inValue) {return (inValue & 0x1FU) << 16 ; }

  // Field AWFORD: Analog watchdog Sinc filter order on channel 4
    inline uint32_t DFSDM_DFSDM_AWSCD4R_AWFORD (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_AWSCD5R: DFSDM analog watchdog and short-circuit detector register
  #define DFSDM_DFSDM_AWSCD5R (* ((volatile uint32_t *) (0x40017400 + 168)))

  // Field SCDT: short-circuit detector threshold for channel 5
    inline uint32_t DFSDM_DFSDM_AWSCD5R_SCDT (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field BKSCD: Break signal assignment for short-circuit detector on channel 5
    inline uint32_t DFSDM_DFSDM_AWSCD5R_BKSCD (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AWFOSR: Analog watchdog filter oversampling ratio (decimation rate) on channel 5
    inline uint32_t DFSDM_DFSDM_AWSCD5R_AWFOSR (const uint32_t inValue) {return (inValue & 0x1FU) << 16 ; }

  // Field AWFORD: Analog watchdog Sinc filter order on channel 5
    inline uint32_t DFSDM_DFSDM_AWSCD5R_AWFORD (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_AWSCD6R: DFSDM analog watchdog and short-circuit detector register
  #define DFSDM_DFSDM_AWSCD6R (* ((volatile uint32_t *) (0x40017400 + 200)))

  // Field SCDT: short-circuit detector threshold for channel 6
    inline uint32_t DFSDM_DFSDM_AWSCD6R_SCDT (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field BKSCD: Break signal assignment for short-circuit detector on channel 6
    inline uint32_t DFSDM_DFSDM_AWSCD6R_BKSCD (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AWFOSR: Analog watchdog filter oversampling ratio (decimation rate) on channel 6
    inline uint32_t DFSDM_DFSDM_AWSCD6R_AWFOSR (const uint32_t inValue) {return (inValue & 0x1FU) << 16 ; }

  // Field AWFORD: Analog watchdog Sinc filter order on channel 6
    inline uint32_t DFSDM_DFSDM_AWSCD6R_AWFORD (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_AWSCD7R: DFSDM analog watchdog and short-circuit detector register
  #define DFSDM_DFSDM_AWSCD7R (* ((volatile uint32_t *) (0x40017400 + 232)))

  // Field SCDT: short-circuit detector threshold for channel 7
    inline uint32_t DFSDM_DFSDM_AWSCD7R_SCDT (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field BKSCD: Break signal assignment for short-circuit detector on channel 7
    inline uint32_t DFSDM_DFSDM_AWSCD7R_BKSCD (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AWFOSR: Analog watchdog filter oversampling ratio (decimation rate) on channel 7
    inline uint32_t DFSDM_DFSDM_AWSCD7R_AWFOSR (const uint32_t inValue) {return (inValue & 0x1FU) << 16 ; }

  // Field AWFORD: Analog watchdog Sinc filter order on channel 7
    inline uint32_t DFSDM_DFSDM_AWSCD7R_AWFORD (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHWDAT0R: DFSDM channel watchdog filter data register
  #define DFSDM_DFSDM_CHWDAT0R (* ((const volatile uint32_t *) (0x40017400 + 12)))

  // Field WDATA: Input channel y watchdog data
    inline uint32_t DFSDM_DFSDM_CHWDAT0R_WDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHWDAT1R: DFSDM channel watchdog filter data register
  #define DFSDM_DFSDM_CHWDAT1R (* ((const volatile uint32_t *) (0x40017400 + 44)))

  // Field WDATA: Input channel y watchdog data
    inline uint32_t DFSDM_DFSDM_CHWDAT1R_WDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHWDAT2R: DFSDM channel watchdog filter data register
  #define DFSDM_DFSDM_CHWDAT2R (* ((const volatile uint32_t *) (0x40017400 + 76)))

  // Field WDATA: Input channel y watchdog data
    inline uint32_t DFSDM_DFSDM_CHWDAT2R_WDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHWDAT3R: DFSDM channel watchdog filter data register
  #define DFSDM_DFSDM_CHWDAT3R (* ((const volatile uint32_t *) (0x40017400 + 108)))

  // Field WDATA: Input channel y watchdog data
    inline uint32_t DFSDM_DFSDM_CHWDAT3R_WDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHWDAT4R: DFSDM channel watchdog filter data register
  #define DFSDM_DFSDM_CHWDAT4R (* ((const volatile uint32_t *) (0x40017400 + 140)))

  // Field WDATA: Input channel y watchdog data
    inline uint32_t DFSDM_DFSDM_CHWDAT4R_WDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHWDAT5R: DFSDM channel watchdog filter data register
  #define DFSDM_DFSDM_CHWDAT5R (* ((const volatile uint32_t *) (0x40017400 + 172)))

  // Field WDATA: Input channel y watchdog data
    inline uint32_t DFSDM_DFSDM_CHWDAT5R_WDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHWDAT6R: DFSDM channel watchdog filter data register
  #define DFSDM_DFSDM_CHWDAT6R (* ((const volatile uint32_t *) (0x40017400 + 204)))

  // Field WDATA: Input channel y watchdog data
    inline uint32_t DFSDM_DFSDM_CHWDAT6R_WDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHWDAT7R: DFSDM channel watchdog filter data register
  #define DFSDM_DFSDM_CHWDAT7R (* ((const volatile uint32_t *) (0x40017400 + 236)))

  // Field WDATA: Input channel y watchdog data
    inline uint32_t DFSDM_DFSDM_CHWDAT7R_WDATA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHDATIN0R: DFSDM channel data input register
  #define DFSDM_DFSDM_CHDATIN0R (* ((volatile uint32_t *) (0x40017400 + 16)))

  // Field INDAT0: Input data for channel 0
    inline uint32_t DFSDM_DFSDM_CHDATIN0R_INDAT0 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INDAT1: Input data for channel 1
    inline uint32_t DFSDM_DFSDM_CHDATIN0R_INDAT1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHDATIN1R: DFSDM channel data input register
  #define DFSDM_DFSDM_CHDATIN1R (* ((volatile uint32_t *) (0x40017400 + 48)))

  // Field INDAT0: Input data for channel 1
    inline uint32_t DFSDM_DFSDM_CHDATIN1R_INDAT0 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INDAT1: Input data for channel 2
    inline uint32_t DFSDM_DFSDM_CHDATIN1R_INDAT1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHDATIN2R: DFSDM channel data input register
  #define DFSDM_DFSDM_CHDATIN2R (* ((volatile uint32_t *) (0x40017400 + 80)))

  // Field INDAT0: Input data for channel 2
    inline uint32_t DFSDM_DFSDM_CHDATIN2R_INDAT0 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INDAT1: Input data for channel 3
    inline uint32_t DFSDM_DFSDM_CHDATIN2R_INDAT1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHDATIN3R: DFSDM channel data input register
  #define DFSDM_DFSDM_CHDATIN3R (* ((volatile uint32_t *) (0x40017400 + 112)))

  // Field INDAT0: Input data for channel 3
    inline uint32_t DFSDM_DFSDM_CHDATIN3R_INDAT0 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INDAT1: Input data for channel 4
    inline uint32_t DFSDM_DFSDM_CHDATIN3R_INDAT1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHDATIN4R: DFSDM channel data input register
  #define DFSDM_DFSDM_CHDATIN4R (* ((volatile uint32_t *) (0x40017400 + 144)))

  // Field INDAT0: Input data for channel 4
    inline uint32_t DFSDM_DFSDM_CHDATIN4R_INDAT0 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INDAT1: Input data for channel 5
    inline uint32_t DFSDM_DFSDM_CHDATIN4R_INDAT1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHDATIN5R: DFSDM channel data input register
  #define DFSDM_DFSDM_CHDATIN5R (* ((volatile uint32_t *) (0x40017400 + 176)))

  // Field INDAT0: Input data for channel 5
    inline uint32_t DFSDM_DFSDM_CHDATIN5R_INDAT0 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INDAT1: Input data for channel 6
    inline uint32_t DFSDM_DFSDM_CHDATIN5R_INDAT1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHDATIN6R: DFSDM channel data input register
  #define DFSDM_DFSDM_CHDATIN6R (* ((volatile uint32_t *) (0x40017400 + 208)))

  // Field INDAT0: Input data for channel 6
    inline uint32_t DFSDM_DFSDM_CHDATIN6R_INDAT0 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INDAT1: Input data for channel 7
    inline uint32_t DFSDM_DFSDM_CHDATIN6R_INDAT1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM_CHDATIN7R: DFSDM channel data input register
  #define DFSDM_DFSDM_CHDATIN7R (* ((volatile uint32_t *) (0x40017400 + 240)))

  // Field INDAT0: Input data for channel 7
    inline uint32_t DFSDM_DFSDM_CHDATIN7R_INDAT0 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INDAT1: Input data for channel 8
    inline uint32_t DFSDM_DFSDM_CHDATIN7R_INDAT1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_CR1: DFSDM control register 1
  #define DFSDM_DFSDM0_CR1 (* ((volatile uint32_t *) (0x40017400 + 256)))

  // Field DFEN: DFSDM enable
    const uint32_t DFSDM_DFSDM0_CR1_DFEN = 1U << 0 ;

  // Field JSWSTART: Start a conversion of the injected group of channels
    const uint32_t DFSDM_DFSDM0_CR1_JSWSTART = 1U << 1 ;

  // Field JSYNC: Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
    const uint32_t DFSDM_DFSDM0_CR1_JSYNC = 1U << 3 ;

  // Field JSCAN: Scanning conversion mode for injected conversions
    const uint32_t DFSDM_DFSDM0_CR1_JSCAN = 1U << 4 ;

  // Field JDMAEN: DMA channel enabled to read data for the injected channel group
    const uint32_t DFSDM_DFSDM0_CR1_JDMAEN = 1U << 5 ;

  // Field JEXTSEL: Trigger signal selection for launching injected conversions
    inline uint32_t DFSDM_DFSDM0_CR1_JEXTSEL (const uint32_t inValue) {return (inValue & 0x1FU) << 8 ; }

  // Field JEXTEN: Trigger enable and trigger edge selection for injected conversions
    inline uint32_t DFSDM_DFSDM0_CR1_JEXTEN (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field RSWSTART: Software start of a conversion on the regular channel
    const uint32_t DFSDM_DFSDM0_CR1_RSWSTART = 1U << 17 ;

  // Field RCONT: Continuous mode selection for regular conversions
    const uint32_t DFSDM_DFSDM0_CR1_RCONT = 1U << 18 ;

  // Field RSYNC: Launch regular conversion synchronously with DFSDM0
    const uint32_t DFSDM_DFSDM0_CR1_RSYNC = 1U << 19 ;

  // Field RDMAEN: DMA channel enabled to read data for the regular conversion
    const uint32_t DFSDM_DFSDM0_CR1_RDMAEN = 1U << 21 ;

  // Field RCH: Regular channel selection
    inline uint32_t DFSDM_DFSDM0_CR1_RCH (const uint32_t inValue) {return (inValue & 0x7U) << 24 ; }

  // Field FAST: Fast conversion mode selection for regular conversions
    const uint32_t DFSDM_DFSDM0_CR1_FAST = 1U << 29 ;

  // Field AWFSEL: Analog watchdog fast mode select
    const uint32_t DFSDM_DFSDM0_CR1_AWFSEL = 1U << 30 ;

//------------------------------------------------------------------------------

//---  Register DFSDM1_CR1: DFSDM control register 1
  #define DFSDM_DFSDM1_CR1 (* ((volatile uint32_t *) (0x40017400 + 384)))

  // Field DFEN: DFSDM enable
    const uint32_t DFSDM_DFSDM1_CR1_DFEN = 1U << 0 ;

  // Field JSWSTART: Start a conversion of the injected group of channels
    const uint32_t DFSDM_DFSDM1_CR1_JSWSTART = 1U << 1 ;

  // Field JSYNC: Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
    const uint32_t DFSDM_DFSDM1_CR1_JSYNC = 1U << 3 ;

  // Field JSCAN: Scanning conversion mode for injected conversions
    const uint32_t DFSDM_DFSDM1_CR1_JSCAN = 1U << 4 ;

  // Field JDMAEN: DMA channel enabled to read data for the injected channel group
    const uint32_t DFSDM_DFSDM1_CR1_JDMAEN = 1U << 5 ;

  // Field JEXTSEL: Trigger signal selection for launching injected conversions
    inline uint32_t DFSDM_DFSDM1_CR1_JEXTSEL (const uint32_t inValue) {return (inValue & 0x1FU) << 8 ; }

  // Field JEXTEN: Trigger enable and trigger edge selection for injected conversions
    inline uint32_t DFSDM_DFSDM1_CR1_JEXTEN (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field RSWSTART: Software start of a conversion on the regular channel
    const uint32_t DFSDM_DFSDM1_CR1_RSWSTART = 1U << 17 ;

  // Field RCONT: Continuous mode selection for regular conversions
    const uint32_t DFSDM_DFSDM1_CR1_RCONT = 1U << 18 ;

  // Field RSYNC: Launch regular conversion synchronously with DFSDM0
    const uint32_t DFSDM_DFSDM1_CR1_RSYNC = 1U << 19 ;

  // Field RDMAEN: DMA channel enabled to read data for the regular conversion
    const uint32_t DFSDM_DFSDM1_CR1_RDMAEN = 1U << 21 ;

  // Field RCH: Regular channel selection
    inline uint32_t DFSDM_DFSDM1_CR1_RCH (const uint32_t inValue) {return (inValue & 0x7U) << 24 ; }

  // Field FAST: Fast conversion mode selection for regular conversions
    const uint32_t DFSDM_DFSDM1_CR1_FAST = 1U << 29 ;

  // Field AWFSEL: Analog watchdog fast mode select
    const uint32_t DFSDM_DFSDM1_CR1_AWFSEL = 1U << 30 ;

//------------------------------------------------------------------------------

//---  Register DFSDM2_CR1: DFSDM control register 1
  #define DFSDM_DFSDM2_CR1 (* ((volatile uint32_t *) (0x40017400 + 512)))

  // Field DFEN: DFSDM enable
    const uint32_t DFSDM_DFSDM2_CR1_DFEN = 1U << 0 ;

  // Field JSWSTART: Start a conversion of the injected group of channels
    const uint32_t DFSDM_DFSDM2_CR1_JSWSTART = 1U << 1 ;

  // Field JSYNC: Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
    const uint32_t DFSDM_DFSDM2_CR1_JSYNC = 1U << 3 ;

  // Field JSCAN: Scanning conversion mode for injected conversions
    const uint32_t DFSDM_DFSDM2_CR1_JSCAN = 1U << 4 ;

  // Field JDMAEN: DMA channel enabled to read data for the injected channel group
    const uint32_t DFSDM_DFSDM2_CR1_JDMAEN = 1U << 5 ;

  // Field JEXTSEL: Trigger signal selection for launching injected conversions
    inline uint32_t DFSDM_DFSDM2_CR1_JEXTSEL (const uint32_t inValue) {return (inValue & 0x1FU) << 8 ; }

  // Field JEXTEN: Trigger enable and trigger edge selection for injected conversions
    inline uint32_t DFSDM_DFSDM2_CR1_JEXTEN (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field RSWSTART: Software start of a conversion on the regular channel
    const uint32_t DFSDM_DFSDM2_CR1_RSWSTART = 1U << 17 ;

  // Field RCONT: Continuous mode selection for regular conversions
    const uint32_t DFSDM_DFSDM2_CR1_RCONT = 1U << 18 ;

  // Field RSYNC: Launch regular conversion synchronously with DFSDM0
    const uint32_t DFSDM_DFSDM2_CR1_RSYNC = 1U << 19 ;

  // Field RDMAEN: DMA channel enabled to read data for the regular conversion
    const uint32_t DFSDM_DFSDM2_CR1_RDMAEN = 1U << 21 ;

  // Field RCH: Regular channel selection
    inline uint32_t DFSDM_DFSDM2_CR1_RCH (const uint32_t inValue) {return (inValue & 0x7U) << 24 ; }

  // Field FAST: Fast conversion mode selection for regular conversions
    const uint32_t DFSDM_DFSDM2_CR1_FAST = 1U << 29 ;

  // Field AWFSEL: Analog watchdog fast mode select
    const uint32_t DFSDM_DFSDM2_CR1_AWFSEL = 1U << 30 ;

//------------------------------------------------------------------------------

//---  Register DFSDM3_CR1: DFSDM control register 1
  #define DFSDM_DFSDM3_CR1 (* ((volatile uint32_t *) (0x40017400 + 896)))

  // Field DFEN: DFSDM enable
    const uint32_t DFSDM_DFSDM3_CR1_DFEN = 1U << 0 ;

  // Field JSWSTART: Start a conversion of the injected group of channels
    const uint32_t DFSDM_DFSDM3_CR1_JSWSTART = 1U << 1 ;

  // Field JSYNC: Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
    const uint32_t DFSDM_DFSDM3_CR1_JSYNC = 1U << 3 ;

  // Field JSCAN: Scanning conversion mode for injected conversions
    const uint32_t DFSDM_DFSDM3_CR1_JSCAN = 1U << 4 ;

  // Field JDMAEN: DMA channel enabled to read data for the injected channel group
    const uint32_t DFSDM_DFSDM3_CR1_JDMAEN = 1U << 5 ;

  // Field JEXTSEL: Trigger signal selection for launching injected conversions
    inline uint32_t DFSDM_DFSDM3_CR1_JEXTSEL (const uint32_t inValue) {return (inValue & 0x1FU) << 8 ; }

  // Field JEXTEN: Trigger enable and trigger edge selection for injected conversions
    inline uint32_t DFSDM_DFSDM3_CR1_JEXTEN (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field RSWSTART: Software start of a conversion on the regular channel
    const uint32_t DFSDM_DFSDM3_CR1_RSWSTART = 1U << 17 ;

  // Field RCONT: Continuous mode selection for regular conversions
    const uint32_t DFSDM_DFSDM3_CR1_RCONT = 1U << 18 ;

  // Field RSYNC: Launch regular conversion synchronously with DFSDM0
    const uint32_t DFSDM_DFSDM3_CR1_RSYNC = 1U << 19 ;

  // Field RDMAEN: DMA channel enabled to read data for the regular conversion
    const uint32_t DFSDM_DFSDM3_CR1_RDMAEN = 1U << 21 ;

  // Field RCH: Regular channel selection
    inline uint32_t DFSDM_DFSDM3_CR1_RCH (const uint32_t inValue) {return (inValue & 0x7U) << 24 ; }

  // Field FAST: Fast conversion mode selection for regular conversions
    const uint32_t DFSDM_DFSDM3_CR1_FAST = 1U << 29 ;

  // Field AWFSEL: Analog watchdog fast mode select
    const uint32_t DFSDM_DFSDM3_CR1_AWFSEL = 1U << 30 ;

//------------------------------------------------------------------------------

//---  Register DFSDM0_CR2: DFSDM control register 2
  #define DFSDM_DFSDM0_CR2 (* ((volatile uint32_t *) (0x40017400 + 260)))

  // Field JEOCIE: Injected end of conversion interrupt enable
    const uint32_t DFSDM_DFSDM0_CR2_JEOCIE = 1U << 0 ;

  // Field REOCIE: Regular end of conversion interrupt enable
    const uint32_t DFSDM_DFSDM0_CR2_REOCIE = 1U << 1 ;

  // Field JOVRIE: Injected data overrun interrupt enable
    const uint32_t DFSDM_DFSDM0_CR2_JOVRIE = 1U << 2 ;

  // Field ROVRIE: Regular data overrun interrupt enable
    const uint32_t DFSDM_DFSDM0_CR2_ROVRIE = 1U << 3 ;

  // Field AWDIE: Analog watchdog interrupt enable
    const uint32_t DFSDM_DFSDM0_CR2_AWDIE = 1U << 4 ;

  // Field SCDIE: Short-circuit detector interrupt enable
    const uint32_t DFSDM_DFSDM0_CR2_SCDIE = 1U << 5 ;

  // Field CKABIE: Clock absence interrupt enable
    const uint32_t DFSDM_DFSDM0_CR2_CKABIE = 1U << 6 ;

  // Field EXCH: Extremes detector channel selection
    inline uint32_t DFSDM_DFSDM0_CR2_EXCH (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field AWDCH: Analog watchdog channel selection
    inline uint32_t DFSDM_DFSDM0_CR2_AWDCH (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_CR2: DFSDM control register 2
  #define DFSDM_DFSDM1_CR2 (* ((volatile uint32_t *) (0x40017400 + 388)))

  // Field JEOCIE: Injected end of conversion interrupt enable
    const uint32_t DFSDM_DFSDM1_CR2_JEOCIE = 1U << 0 ;

  // Field REOCIE: Regular end of conversion interrupt enable
    const uint32_t DFSDM_DFSDM1_CR2_REOCIE = 1U << 1 ;

  // Field JOVRIE: Injected data overrun interrupt enable
    const uint32_t DFSDM_DFSDM1_CR2_JOVRIE = 1U << 2 ;

  // Field ROVRIE: Regular data overrun interrupt enable
    const uint32_t DFSDM_DFSDM1_CR2_ROVRIE = 1U << 3 ;

  // Field AWDIE: Analog watchdog interrupt enable
    const uint32_t DFSDM_DFSDM1_CR2_AWDIE = 1U << 4 ;

  // Field SCDIE: Short-circuit detector interrupt enable
    const uint32_t DFSDM_DFSDM1_CR2_SCDIE = 1U << 5 ;

  // Field CKABIE: Clock absence interrupt enable
    const uint32_t DFSDM_DFSDM1_CR2_CKABIE = 1U << 6 ;

  // Field EXCH: Extremes detector channel selection
    inline uint32_t DFSDM_DFSDM1_CR2_EXCH (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field AWDCH: Analog watchdog channel selection
    inline uint32_t DFSDM_DFSDM1_CR2_AWDCH (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_CR2: DFSDM control register 2
  #define DFSDM_DFSDM2_CR2 (* ((volatile uint32_t *) (0x40017400 + 516)))

  // Field JEOCIE: Injected end of conversion interrupt enable
    const uint32_t DFSDM_DFSDM2_CR2_JEOCIE = 1U << 0 ;

  // Field REOCIE: Regular end of conversion interrupt enable
    const uint32_t DFSDM_DFSDM2_CR2_REOCIE = 1U << 1 ;

  // Field JOVRIE: Injected data overrun interrupt enable
    const uint32_t DFSDM_DFSDM2_CR2_JOVRIE = 1U << 2 ;

  // Field ROVRIE: Regular data overrun interrupt enable
    const uint32_t DFSDM_DFSDM2_CR2_ROVRIE = 1U << 3 ;

  // Field AWDIE: Analog watchdog interrupt enable
    const uint32_t DFSDM_DFSDM2_CR2_AWDIE = 1U << 4 ;

  // Field SCDIE: Short-circuit detector interrupt enable
    const uint32_t DFSDM_DFSDM2_CR2_SCDIE = 1U << 5 ;

  // Field CKABIE: Clock absence interrupt enable
    const uint32_t DFSDM_DFSDM2_CR2_CKABIE = 1U << 6 ;

  // Field EXCH: Extremes detector channel selection
    inline uint32_t DFSDM_DFSDM2_CR2_EXCH (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field AWDCH: Analog watchdog channel selection
    inline uint32_t DFSDM_DFSDM2_CR2_AWDCH (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_CR2: DFSDM control register 2
  #define DFSDM_DFSDM3_CR2 (* ((volatile uint32_t *) (0x40017400 + 900)))

  // Field JEOCIE: Injected end of conversion interrupt enable
    const uint32_t DFSDM_DFSDM3_CR2_JEOCIE = 1U << 0 ;

  // Field REOCIE: Regular end of conversion interrupt enable
    const uint32_t DFSDM_DFSDM3_CR2_REOCIE = 1U << 1 ;

  // Field JOVRIE: Injected data overrun interrupt enable
    const uint32_t DFSDM_DFSDM3_CR2_JOVRIE = 1U << 2 ;

  // Field ROVRIE: Regular data overrun interrupt enable
    const uint32_t DFSDM_DFSDM3_CR2_ROVRIE = 1U << 3 ;

  // Field AWDIE: Analog watchdog interrupt enable
    const uint32_t DFSDM_DFSDM3_CR2_AWDIE = 1U << 4 ;

  // Field SCDIE: Short-circuit detector interrupt enable
    const uint32_t DFSDM_DFSDM3_CR2_SCDIE = 1U << 5 ;

  // Field CKABIE: Clock absence interrupt enable
    const uint32_t DFSDM_DFSDM3_CR2_CKABIE = 1U << 6 ;

  // Field EXCH: Extremes detector channel selection
    inline uint32_t DFSDM_DFSDM3_CR2_EXCH (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field AWDCH: Analog watchdog channel selection
    inline uint32_t DFSDM_DFSDM3_CR2_AWDCH (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_ISR: DFSDM interrupt and status register
  #define DFSDM_DFSDM0_ISR (* ((const volatile uint32_t *) (0x40017400 + 264)))

  // Field JEOCF: End of injected conversion flag
    const uint32_t DFSDM_DFSDM0_ISR_JEOCF = 1U << 0 ;

  // Field REOCF: End of regular conversion flag
    const uint32_t DFSDM_DFSDM0_ISR_REOCF = 1U << 1 ;

  // Field JOVRF: Injected conversion overrun flag
    const uint32_t DFSDM_DFSDM0_ISR_JOVRF = 1U << 2 ;

  // Field ROVRF: Regular conversion overrun flag
    const uint32_t DFSDM_DFSDM0_ISR_ROVRF = 1U << 3 ;

  // Field AWDF: Analog watchdog
    const uint32_t DFSDM_DFSDM0_ISR_AWDF = 1U << 4 ;

  // Field JCIP: Injected conversion in progress status
    const uint32_t DFSDM_DFSDM0_ISR_JCIP = 1U << 13 ;

  // Field RCIP: Regular conversion in progress status
    const uint32_t DFSDM_DFSDM0_ISR_RCIP = 1U << 14 ;

  // Field CKABF: Clock absence flag
    inline uint32_t DFSDM_DFSDM0_ISR_CKABF (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field SCDF: short-circuit detector flag
    inline uint32_t DFSDM_DFSDM0_ISR_SCDF (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_ISR: DFSDM interrupt and status register
  #define DFSDM_DFSDM1_ISR (* ((const volatile uint32_t *) (0x40017400 + 392)))

  // Field JEOCF: End of injected conversion flag
    const uint32_t DFSDM_DFSDM1_ISR_JEOCF = 1U << 0 ;

  // Field REOCF: End of regular conversion flag
    const uint32_t DFSDM_DFSDM1_ISR_REOCF = 1U << 1 ;

  // Field JOVRF: Injected conversion overrun flag
    const uint32_t DFSDM_DFSDM1_ISR_JOVRF = 1U << 2 ;

  // Field ROVRF: Regular conversion overrun flag
    const uint32_t DFSDM_DFSDM1_ISR_ROVRF = 1U << 3 ;

  // Field AWDF: Analog watchdog
    const uint32_t DFSDM_DFSDM1_ISR_AWDF = 1U << 4 ;

  // Field JCIP: Injected conversion in progress status
    const uint32_t DFSDM_DFSDM1_ISR_JCIP = 1U << 13 ;

  // Field RCIP: Regular conversion in progress status
    const uint32_t DFSDM_DFSDM1_ISR_RCIP = 1U << 14 ;

  // Field CKABF: Clock absence flag
    inline uint32_t DFSDM_DFSDM1_ISR_CKABF (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field SCDF: short-circuit detector flag
    inline uint32_t DFSDM_DFSDM1_ISR_SCDF (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_ISR: DFSDM interrupt and status register
  #define DFSDM_DFSDM2_ISR (* ((const volatile uint32_t *) (0x40017400 + 520)))

  // Field JEOCF: End of injected conversion flag
    const uint32_t DFSDM_DFSDM2_ISR_JEOCF = 1U << 0 ;

  // Field REOCF: End of regular conversion flag
    const uint32_t DFSDM_DFSDM2_ISR_REOCF = 1U << 1 ;

  // Field JOVRF: Injected conversion overrun flag
    const uint32_t DFSDM_DFSDM2_ISR_JOVRF = 1U << 2 ;

  // Field ROVRF: Regular conversion overrun flag
    const uint32_t DFSDM_DFSDM2_ISR_ROVRF = 1U << 3 ;

  // Field AWDF: Analog watchdog
    const uint32_t DFSDM_DFSDM2_ISR_AWDF = 1U << 4 ;

  // Field JCIP: Injected conversion in progress status
    const uint32_t DFSDM_DFSDM2_ISR_JCIP = 1U << 13 ;

  // Field RCIP: Regular conversion in progress status
    const uint32_t DFSDM_DFSDM2_ISR_RCIP = 1U << 14 ;

  // Field CKABF: Clock absence flag
    inline uint32_t DFSDM_DFSDM2_ISR_CKABF (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field SCDF: short-circuit detector flag
    inline uint32_t DFSDM_DFSDM2_ISR_SCDF (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_ISR: DFSDM interrupt and status register
  #define DFSDM_DFSDM3_ISR (* ((const volatile uint32_t *) (0x40017400 + 904)))

  // Field JEOCF: End of injected conversion flag
    const uint32_t DFSDM_DFSDM3_ISR_JEOCF = 1U << 0 ;

  // Field REOCF: End of regular conversion flag
    const uint32_t DFSDM_DFSDM3_ISR_REOCF = 1U << 1 ;

  // Field JOVRF: Injected conversion overrun flag
    const uint32_t DFSDM_DFSDM3_ISR_JOVRF = 1U << 2 ;

  // Field ROVRF: Regular conversion overrun flag
    const uint32_t DFSDM_DFSDM3_ISR_ROVRF = 1U << 3 ;

  // Field AWDF: Analog watchdog
    const uint32_t DFSDM_DFSDM3_ISR_AWDF = 1U << 4 ;

  // Field JCIP: Injected conversion in progress status
    const uint32_t DFSDM_DFSDM3_ISR_JCIP = 1U << 13 ;

  // Field RCIP: Regular conversion in progress status
    const uint32_t DFSDM_DFSDM3_ISR_RCIP = 1U << 14 ;

  // Field CKABF: Clock absence flag
    inline uint32_t DFSDM_DFSDM3_ISR_CKABF (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field SCDF: short-circuit detector flag
    inline uint32_t DFSDM_DFSDM3_ISR_SCDF (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_ICR: DFSDM interrupt flag clear register
  #define DFSDM_DFSDM0_ICR (* ((volatile uint32_t *) (0x40017400 + 268)))

  // Field CLRJOVRF: Clear the injected conversion overrun flag
    const uint32_t DFSDM_DFSDM0_ICR_CLRJOVRF = 1U << 2 ;

  // Field CLRROVRF: Clear the regular conversion overrun flag
    const uint32_t DFSDM_DFSDM0_ICR_CLRROVRF = 1U << 3 ;

  // Field CLRCKABF: Clear the clock absence flag
    inline uint32_t DFSDM_DFSDM0_ICR_CLRCKABF (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field CLRSCDF: Clear the short-circuit detector flag
    inline uint32_t DFSDM_DFSDM0_ICR_CLRSCDF (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_ICR: DFSDM interrupt flag clear register
  #define DFSDM_DFSDM1_ICR (* ((volatile uint32_t *) (0x40017400 + 396)))

  // Field CLRJOVRF: Clear the injected conversion overrun flag
    const uint32_t DFSDM_DFSDM1_ICR_CLRJOVRF = 1U << 2 ;

  // Field CLRROVRF: Clear the regular conversion overrun flag
    const uint32_t DFSDM_DFSDM1_ICR_CLRROVRF = 1U << 3 ;

  // Field CLRCKABF: Clear the clock absence flag
    inline uint32_t DFSDM_DFSDM1_ICR_CLRCKABF (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field CLRSCDF: Clear the short-circuit detector flag
    inline uint32_t DFSDM_DFSDM1_ICR_CLRSCDF (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_ICR: DFSDM interrupt flag clear register
  #define DFSDM_DFSDM2_ICR (* ((volatile uint32_t *) (0x40017400 + 524)))

  // Field CLRJOVRF: Clear the injected conversion overrun flag
    const uint32_t DFSDM_DFSDM2_ICR_CLRJOVRF = 1U << 2 ;

  // Field CLRROVRF: Clear the regular conversion overrun flag
    const uint32_t DFSDM_DFSDM2_ICR_CLRROVRF = 1U << 3 ;

  // Field CLRCKABF: Clear the clock absence flag
    inline uint32_t DFSDM_DFSDM2_ICR_CLRCKABF (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field CLRSCDF: Clear the short-circuit detector flag
    inline uint32_t DFSDM_DFSDM2_ICR_CLRSCDF (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_ICR: DFSDM interrupt flag clear register
  #define DFSDM_DFSDM3_ICR (* ((volatile uint32_t *) (0x40017400 + 908)))

  // Field CLRJOVRF: Clear the injected conversion overrun flag
    const uint32_t DFSDM_DFSDM3_ICR_CLRJOVRF = 1U << 2 ;

  // Field CLRROVRF: Clear the regular conversion overrun flag
    const uint32_t DFSDM_DFSDM3_ICR_CLRROVRF = 1U << 3 ;

  // Field CLRCKABF: Clear the clock absence flag
    inline uint32_t DFSDM_DFSDM3_ICR_CLRCKABF (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field CLRSCDF: Clear the short-circuit detector flag
    inline uint32_t DFSDM_DFSDM3_ICR_CLRSCDF (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_JCHGR: DFSDM injected channel group selection register
  #define DFSDM_DFSDM0_JCHGR (* ((volatile uint32_t *) (0x40017400 + 272)))

  // Field JCHG: Injected channel group selection
    inline uint32_t DFSDM_DFSDM0_JCHGR_JCHG (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_JCHGR: DFSDM injected channel group selection register
  #define DFSDM_DFSDM1_JCHGR (* ((volatile uint32_t *) (0x40017400 + 400)))

  // Field JCHG: Injected channel group selection
    inline uint32_t DFSDM_DFSDM1_JCHGR_JCHG (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_JCHGR: DFSDM injected channel group selection register
  #define DFSDM_DFSDM2_JCHGR (* ((volatile uint32_t *) (0x40017400 + 528)))

  // Field JCHG: Injected channel group selection
    inline uint32_t DFSDM_DFSDM2_JCHGR_JCHG (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_JCHGR: DFSDM injected channel group selection register
  #define DFSDM_DFSDM3_JCHGR (* ((volatile uint32_t *) (0x40017400 + 784)))

  // Field JCHG: Injected channel group selection
    inline uint32_t DFSDM_DFSDM3_JCHGR_JCHG (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_FCR: DFSDM filter control register
  #define DFSDM_DFSDM0_FCR (* ((volatile uint32_t *) (0x40017400 + 276)))

  // Field IOSR: Integrator oversampling ratio (averaging length)
    inline uint32_t DFSDM_DFSDM0_FCR_IOSR (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field FOSR: Sinc filter oversampling ratio (decimation rate)
    inline uint32_t DFSDM_DFSDM0_FCR_FOSR (const uint32_t inValue) {return (inValue & 0x3FFU) << 16 ; }

  // Field FORD: Sinc filter order
    inline uint32_t DFSDM_DFSDM0_FCR_FORD (const uint32_t inValue) {return (inValue & 0x7U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_FCR: DFSDM filter control register
  #define DFSDM_DFSDM1_FCR (* ((volatile uint32_t *) (0x40017400 + 404)))

  // Field IOSR: Integrator oversampling ratio (averaging length)
    inline uint32_t DFSDM_DFSDM1_FCR_IOSR (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field FOSR: Sinc filter oversampling ratio (decimation rate)
    inline uint32_t DFSDM_DFSDM1_FCR_FOSR (const uint32_t inValue) {return (inValue & 0x3FFU) << 16 ; }

  // Field FORD: Sinc filter order
    inline uint32_t DFSDM_DFSDM1_FCR_FORD (const uint32_t inValue) {return (inValue & 0x7U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_FCR: DFSDM filter control register
  #define DFSDM_DFSDM2_FCR (* ((volatile uint32_t *) (0x40017400 + 532)))

  // Field IOSR: Integrator oversampling ratio (averaging length)
    inline uint32_t DFSDM_DFSDM2_FCR_IOSR (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field FOSR: Sinc filter oversampling ratio (decimation rate)
    inline uint32_t DFSDM_DFSDM2_FCR_FOSR (const uint32_t inValue) {return (inValue & 0x3FFU) << 16 ; }

  // Field FORD: Sinc filter order
    inline uint32_t DFSDM_DFSDM2_FCR_FORD (const uint32_t inValue) {return (inValue & 0x7U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_FCR: DFSDM filter control register
  #define DFSDM_DFSDM3_FCR (* ((volatile uint32_t *) (0x40017400 + 788)))

  // Field IOSR: Integrator oversampling ratio (averaging length)
    inline uint32_t DFSDM_DFSDM3_FCR_IOSR (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field FOSR: Sinc filter oversampling ratio (decimation rate)
    inline uint32_t DFSDM_DFSDM3_FCR_FOSR (const uint32_t inValue) {return (inValue & 0x3FFU) << 16 ; }

  // Field FORD: Sinc filter order
    inline uint32_t DFSDM_DFSDM3_FCR_FORD (const uint32_t inValue) {return (inValue & 0x7U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_JDATAR: DFSDM data register for injected group
  #define DFSDM_DFSDM0_JDATAR (* ((const volatile uint32_t *) (0x40017400 + 280)))

  // Field JDATACH: Injected channel most recently converted
    inline uint32_t DFSDM_DFSDM0_JDATAR_JDATACH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field JDATA: Injected group conversion data
    inline uint32_t DFSDM_DFSDM0_JDATAR_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_JDATAR: DFSDM data register for injected group
  #define DFSDM_DFSDM1_JDATAR (* ((const volatile uint32_t *) (0x40017400 + 408)))

  // Field JDATACH: Injected channel most recently converted
    inline uint32_t DFSDM_DFSDM1_JDATAR_JDATACH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field JDATA: Injected group conversion data
    inline uint32_t DFSDM_DFSDM1_JDATAR_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_JDATAR: DFSDM data register for injected group
  #define DFSDM_DFSDM2_JDATAR (* ((const volatile uint32_t *) (0x40017400 + 536)))

  // Field JDATACH: Injected channel most recently converted
    inline uint32_t DFSDM_DFSDM2_JDATAR_JDATACH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field JDATA: Injected group conversion data
    inline uint32_t DFSDM_DFSDM2_JDATAR_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_JDATAR: DFSDM data register for injected group
  #define DFSDM_DFSDM3_JDATAR (* ((const volatile uint32_t *) (0x40017400 + 792)))

  // Field JDATACH: Injected channel most recently converted
    inline uint32_t DFSDM_DFSDM3_JDATAR_JDATACH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field JDATA: Injected group conversion data
    inline uint32_t DFSDM_DFSDM3_JDATAR_JDATA (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_RDATAR: DFSDM data register for the regular channel
  #define DFSDM_DFSDM0_RDATAR (* ((const volatile uint32_t *) (0x40017400 + 284)))

  // Field RDATACH: Regular channel most recently converted
    inline uint32_t DFSDM_DFSDM0_RDATAR_RDATACH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field RPEND: Regular channel pending data
    const uint32_t DFSDM_DFSDM0_RDATAR_RPEND = 1U << 4 ;

  // Field RDATA: Regular channel conversion data
    inline uint32_t DFSDM_DFSDM0_RDATAR_RDATA (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_RDATAR: DFSDM data register for the regular channel
  #define DFSDM_DFSDM1_RDATAR (* ((const volatile uint32_t *) (0x40017400 + 408)))

  // Field RDATACH: Regular channel most recently converted
    inline uint32_t DFSDM_DFSDM1_RDATAR_RDATACH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field RPEND: Regular channel pending data
    const uint32_t DFSDM_DFSDM1_RDATAR_RPEND = 1U << 4 ;

  // Field RDATA: Regular channel conversion data
    inline uint32_t DFSDM_DFSDM1_RDATAR_RDATA (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_RDATAR: DFSDM data register for the regular channel
  #define DFSDM_DFSDM2_RDATAR (* ((const volatile uint32_t *) (0x40017400 + 536)))

  // Field RDATACH: Regular channel most recently converted
    inline uint32_t DFSDM_DFSDM2_RDATAR_RDATACH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field RPEND: Regular channel pending data
    const uint32_t DFSDM_DFSDM2_RDATAR_RPEND = 1U << 4 ;

  // Field RDATA: Regular channel conversion data
    inline uint32_t DFSDM_DFSDM2_RDATAR_RDATA (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_RDATAR: DFSDM data register for the regular channel
  #define DFSDM_DFSDM3_RDATAR (* ((const volatile uint32_t *) (0x40017400 + 792)))

  // Field RDATACH: Regular channel most recently converted
    inline uint32_t DFSDM_DFSDM3_RDATAR_RDATACH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field RPEND: Regular channel pending data
    const uint32_t DFSDM_DFSDM3_RDATAR_RPEND = 1U << 4 ;

  // Field RDATA: Regular channel conversion data
    inline uint32_t DFSDM_DFSDM3_RDATAR_RDATA (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_AWHTR: DFSDM analog watchdog high threshold register
  #define DFSDM_DFSDM0_AWHTR (* ((volatile uint32_t *) (0x40017400 + 288)))

  // Field BKAWH: Break signal assignment to analog watchdog high threshold event
    inline uint32_t DFSDM_DFSDM0_AWHTR_BKAWH (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field AWHT: Analog watchdog high threshold
    inline uint32_t DFSDM_DFSDM0_AWHTR_AWHT (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_AWHTR: DFSDM analog watchdog high threshold register
  #define DFSDM_DFSDM1_AWHTR (* ((volatile uint32_t *) (0x40017400 + 416)))

  // Field BKAWH: Break signal assignment to analog watchdog high threshold event
    inline uint32_t DFSDM_DFSDM1_AWHTR_BKAWH (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field AWHT: Analog watchdog high threshold
    inline uint32_t DFSDM_DFSDM1_AWHTR_AWHT (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_AWHTR: DFSDM analog watchdog high threshold register
  #define DFSDM_DFSDM2_AWHTR (* ((volatile uint32_t *) (0x40017400 + 544)))

  // Field BKAWH: Break signal assignment to analog watchdog high threshold event
    inline uint32_t DFSDM_DFSDM2_AWHTR_BKAWH (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field AWHT: Analog watchdog high threshold
    inline uint32_t DFSDM_DFSDM2_AWHTR_AWHT (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_AWHTR: DFSDM analog watchdog high threshold register
  #define DFSDM_DFSDM3_AWHTR (* ((volatile uint32_t *) (0x40017400 + 672)))

  // Field BKAWH: Break signal assignment to analog watchdog high threshold event
    inline uint32_t DFSDM_DFSDM3_AWHTR_BKAWH (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field AWHT: Analog watchdog high threshold
    inline uint32_t DFSDM_DFSDM3_AWHTR_AWHT (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_AWLTR: DFSDM analog watchdog low threshold register
  #define DFSDM_DFSDM0_AWLTR (* ((volatile uint32_t *) (0x40017400 + 292)))

  // Field BKAWL: Break signal assignment to analog watchdog low threshold event
    inline uint32_t DFSDM_DFSDM0_AWLTR_BKAWL (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field AWLT: Analog watchdog low threshold
    inline uint32_t DFSDM_DFSDM0_AWLTR_AWLT (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_AWLTR: DFSDM analog watchdog low threshold register
  #define DFSDM_DFSDM1_AWLTR (* ((volatile uint32_t *) (0x40017400 + 420)))

  // Field BKAWL: Break signal assignment to analog watchdog low threshold event
    inline uint32_t DFSDM_DFSDM1_AWLTR_BKAWL (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field AWLT: Analog watchdog low threshold
    inline uint32_t DFSDM_DFSDM1_AWLTR_AWLT (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_AWLTR: DFSDM analog watchdog low threshold register
  #define DFSDM_DFSDM2_AWLTR (* ((volatile uint32_t *) (0x40017400 + 548)))

  // Field BKAWL: Break signal assignment to analog watchdog low threshold event
    inline uint32_t DFSDM_DFSDM2_AWLTR_BKAWL (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field AWLT: Analog watchdog low threshold
    inline uint32_t DFSDM_DFSDM2_AWLTR_AWLT (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_AWLTR: DFSDM analog watchdog low threshold register
  #define DFSDM_DFSDM3_AWLTR (* ((volatile uint32_t *) (0x40017400 + 676)))

  // Field BKAWL: Break signal assignment to analog watchdog low threshold event
    inline uint32_t DFSDM_DFSDM3_AWLTR_BKAWL (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field AWLT: Analog watchdog low threshold
    inline uint32_t DFSDM_DFSDM3_AWLTR_AWLT (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_AWSR: DFSDM analog watchdog status register
  #define DFSDM_DFSDM0_AWSR (* ((const volatile uint32_t *) (0x40017400 + 296)))

  // Field AWLTF: Analog watchdog low threshold flag
    inline uint32_t DFSDM_DFSDM0_AWSR_AWLTF (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field AWHTF: Analog watchdog high threshold flag
    inline uint32_t DFSDM_DFSDM0_AWSR_AWHTF (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_AWSR: DFSDM analog watchdog status register
  #define DFSDM_DFSDM1_AWSR (* ((const volatile uint32_t *) (0x40017400 + 424)))

  // Field AWLTF: Analog watchdog low threshold flag
    inline uint32_t DFSDM_DFSDM1_AWSR_AWLTF (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field AWHTF: Analog watchdog high threshold flag
    inline uint32_t DFSDM_DFSDM1_AWSR_AWHTF (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_AWSR: DFSDM analog watchdog status register
  #define DFSDM_DFSDM2_AWSR (* ((const volatile uint32_t *) (0x40017400 + 552)))

  // Field AWLTF: Analog watchdog low threshold flag
    inline uint32_t DFSDM_DFSDM2_AWSR_AWLTF (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field AWHTF: Analog watchdog high threshold flag
    inline uint32_t DFSDM_DFSDM2_AWSR_AWHTF (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_AWSR: DFSDM analog watchdog status register
  #define DFSDM_DFSDM3_AWSR (* ((const volatile uint32_t *) (0x40017400 + 680)))

  // Field AWLTF: Analog watchdog low threshold flag
    inline uint32_t DFSDM_DFSDM3_AWSR_AWLTF (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field AWHTF: Analog watchdog high threshold flag
    inline uint32_t DFSDM_DFSDM3_AWSR_AWHTF (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_AWCFR: DFSDM analog watchdog clear flag register
  #define DFSDM_DFSDM0_AWCFR (* ((volatile uint32_t *) (0x40017400 + 300)))

  // Field CLRAWLTF: Clear the analog watchdog low threshold flag
    inline uint32_t DFSDM_DFSDM0_AWCFR_CLRAWLTF (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field CLRAWHTF: Clear the analog watchdog high threshold flag
    inline uint32_t DFSDM_DFSDM0_AWCFR_CLRAWHTF (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_AWCFR: DFSDM analog watchdog clear flag register
  #define DFSDM_DFSDM1_AWCFR (* ((volatile uint32_t *) (0x40017400 + 428)))

  // Field CLRAWLTF: Clear the analog watchdog low threshold flag
    inline uint32_t DFSDM_DFSDM1_AWCFR_CLRAWLTF (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field CLRAWHTF: Clear the analog watchdog high threshold flag
    inline uint32_t DFSDM_DFSDM1_AWCFR_CLRAWHTF (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_AWCFR: DFSDM analog watchdog clear flag register
  #define DFSDM_DFSDM2_AWCFR (* ((volatile uint32_t *) (0x40017400 + 556)))

  // Field CLRAWLTF: Clear the analog watchdog low threshold flag
    inline uint32_t DFSDM_DFSDM2_AWCFR_CLRAWLTF (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field CLRAWHTF: Clear the analog watchdog high threshold flag
    inline uint32_t DFSDM_DFSDM2_AWCFR_CLRAWHTF (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_AWCFR: DFSDM analog watchdog clear flag register
  #define DFSDM_DFSDM3_AWCFR (* ((volatile uint32_t *) (0x40017400 + 684)))

  // Field CLRAWLTF: Clear the analog watchdog low threshold flag
    inline uint32_t DFSDM_DFSDM3_AWCFR_CLRAWLTF (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field CLRAWHTF: Clear the analog watchdog high threshold flag
    inline uint32_t DFSDM_DFSDM3_AWCFR_CLRAWHTF (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_EXMAX: DFSDM Extremes detector maximum register
  #define DFSDM_DFSDM0_EXMAX (* ((const volatile uint32_t *) (0x40017400 + 304)))

  // Field EXMAXCH: Extremes detector maximum data channel
    inline uint32_t DFSDM_DFSDM0_EXMAX_EXMAXCH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field EXMAX: Extremes detector maximum value
    inline uint32_t DFSDM_DFSDM0_EXMAX_EXMAX (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_EXMAX: DFSDM Extremes detector maximum register
  #define DFSDM_DFSDM1_EXMAX (* ((const volatile uint32_t *) (0x40017400 + 432)))

  // Field EXMAXCH: Extremes detector maximum data channel
    inline uint32_t DFSDM_DFSDM1_EXMAX_EXMAXCH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field EXMAX: Extremes detector maximum value
    inline uint32_t DFSDM_DFSDM1_EXMAX_EXMAX (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_EXMAX: DFSDM Extremes detector maximum register
  #define DFSDM_DFSDM2_EXMAX (* ((const volatile uint32_t *) (0x40017400 + 560)))

  // Field EXMAXCH: Extremes detector maximum data channel
    inline uint32_t DFSDM_DFSDM2_EXMAX_EXMAXCH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field EXMAX: Extremes detector maximum value
    inline uint32_t DFSDM_DFSDM2_EXMAX_EXMAX (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_EXMAX: DFSDM Extremes detector maximum register
  #define DFSDM_DFSDM3_EXMAX (* ((const volatile uint32_t *) (0x40017400 + 688)))

  // Field EXMAXCH: Extremes detector maximum data channel
    inline uint32_t DFSDM_DFSDM3_EXMAX_EXMAXCH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field EXMAX: Extremes detector maximum value
    inline uint32_t DFSDM_DFSDM3_EXMAX_EXMAX (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_EXMIN: DFSDM Extremes detector minimum register
  #define DFSDM_DFSDM0_EXMIN (* ((const volatile uint32_t *) (0x40017400 + 308)))

  // Field EXMINCH: Extremes detector minimum data channel
    inline uint32_t DFSDM_DFSDM0_EXMIN_EXMINCH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field EXMIN: Extremes detector minimum value
    inline uint32_t DFSDM_DFSDM0_EXMIN_EXMIN (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_EXMIN: DFSDM Extremes detector minimum register
  #define DFSDM_DFSDM1_EXMIN (* ((const volatile uint32_t *) (0x40017400 + 436)))

  // Field EXMINCH: Extremes detector minimum data channel
    inline uint32_t DFSDM_DFSDM1_EXMIN_EXMINCH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field EXMIN: Extremes detector minimum value
    inline uint32_t DFSDM_DFSDM1_EXMIN_EXMIN (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_EXMIN: DFSDM Extremes detector minimum register
  #define DFSDM_DFSDM2_EXMIN (* ((const volatile uint32_t *) (0x40017400 + 564)))

  // Field EXMINCH: Extremes detector minimum data channel
    inline uint32_t DFSDM_DFSDM2_EXMIN_EXMINCH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field EXMIN: Extremes detector minimum value
    inline uint32_t DFSDM_DFSDM2_EXMIN_EXMIN (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_EXMIN: DFSDM Extremes detector minimum register
  #define DFSDM_DFSDM3_EXMIN (* ((const volatile uint32_t *) (0x40017400 + 692)))

  // Field EXMINCH: Extremes detector minimum data channel
    inline uint32_t DFSDM_DFSDM3_EXMIN_EXMINCH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field EXMIN: Extremes detector minimum value
    inline uint32_t DFSDM_DFSDM3_EXMIN_EXMIN (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM0_CNVTIMR: DFSDM conversion timer register
  #define DFSDM_DFSDM0_CNVTIMR (* ((const volatile uint32_t *) (0x40017400 + 312)))

  // Field CNVCNT: 28-bit timer counting conversion time
    inline uint32_t DFSDM_DFSDM0_CNVTIMR_CNVCNT (const uint32_t inValue) {return (inValue & 0xFFFFFFFU) << 4 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM1_CNVTIMR: DFSDM conversion timer register
  #define DFSDM_DFSDM1_CNVTIMR (* ((const volatile uint32_t *) (0x40017400 + 440)))

  // Field CNVCNT: 28-bit timer counting conversion time
    inline uint32_t DFSDM_DFSDM1_CNVTIMR_CNVCNT (const uint32_t inValue) {return (inValue & 0xFFFFFFFU) << 4 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM2_CNVTIMR: DFSDM conversion timer register
  #define DFSDM_DFSDM2_CNVTIMR (* ((const volatile uint32_t *) (0x40017400 + 568)))

  // Field CNVCNT: 28-bit timer counting conversion time
    inline uint32_t DFSDM_DFSDM2_CNVTIMR_CNVCNT (const uint32_t inValue) {return (inValue & 0xFFFFFFFU) << 4 ; }

//------------------------------------------------------------------------------

//---  Register DFSDM3_CNVTIMR: DFSDM conversion timer register
  #define DFSDM_DFSDM3_CNVTIMR (* ((const volatile uint32_t *) (0x40017400 + 696)))

  // Field CNVCNT: 28-bit timer counting conversion time
    inline uint32_t DFSDM_DFSDM3_CNVTIMR_CNVCNT (const uint32_t inValue) {return (inValue & 0xFFFFFFFU) << 4 ; }

//------------------------------------------------------------------------------
// Peripheral DMA1
//------------------------------------------------------------------------------

//---  Register LISR: low interrupt status register
  #define DMA1_LISR (* ((const volatile uint32_t *) (0x40026000 + 0)))

  // Field TCIF3: Stream x transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA1_LISR_TCIF3 = 1U << 27 ;

  // Field HTIF3: Stream x half transfer interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_HTIF3 = 1U << 26 ;

  // Field TEIF3: Stream x transfer error interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_TEIF3 = 1U << 25 ;

  // Field DMEIF3: Stream x direct mode error interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_DMEIF3 = 1U << 24 ;

  // Field FEIF3: Stream x FIFO error interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_FEIF3 = 1U << 22 ;

  // Field TCIF2: Stream x transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA1_LISR_TCIF2 = 1U << 21 ;

  // Field HTIF2: Stream x half transfer interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_HTIF2 = 1U << 20 ;

  // Field TEIF2: Stream x transfer error interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_TEIF2 = 1U << 19 ;

  // Field DMEIF2: Stream x direct mode error interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_DMEIF2 = 1U << 18 ;

  // Field FEIF2: Stream x FIFO error interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_FEIF2 = 1U << 16 ;

  // Field TCIF1: Stream x transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA1_LISR_TCIF1 = 1U << 11 ;

  // Field HTIF1: Stream x half transfer interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_HTIF1 = 1U << 10 ;

  // Field TEIF1: Stream x transfer error interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_TEIF1 = 1U << 9 ;

  // Field DMEIF1: Stream x direct mode error interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_DMEIF1 = 1U << 8 ;

  // Field FEIF1: Stream x FIFO error interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_FEIF1 = 1U << 6 ;

  // Field TCIF0: Stream x transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA1_LISR_TCIF0 = 1U << 5 ;

  // Field HTIF0: Stream x half transfer interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_HTIF0 = 1U << 4 ;

  // Field TEIF0: Stream x transfer error interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_TEIF0 = 1U << 3 ;

  // Field DMEIF0: Stream x direct mode error interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_DMEIF0 = 1U << 2 ;

  // Field FEIF0: Stream x FIFO error interrupt flag (x=3..0)
    const uint32_t DMA1_LISR_FEIF0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register HISR: high interrupt status register
  #define DMA1_HISR (* ((const volatile uint32_t *) (0x40026000 + 4)))

  // Field TCIF7: Stream x transfer complete interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_TCIF7 = 1U << 27 ;

  // Field HTIF7: Stream x half transfer interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_HTIF7 = 1U << 26 ;

  // Field TEIF7: Stream x transfer error interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_TEIF7 = 1U << 25 ;

  // Field DMEIF7: Stream x direct mode error interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_DMEIF7 = 1U << 24 ;

  // Field FEIF7: Stream x FIFO error interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_FEIF7 = 1U << 22 ;

  // Field TCIF6: Stream x transfer complete interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_TCIF6 = 1U << 21 ;

  // Field HTIF6: Stream x half transfer interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_HTIF6 = 1U << 20 ;

  // Field TEIF6: Stream x transfer error interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_TEIF6 = 1U << 19 ;

  // Field DMEIF6: Stream x direct mode error interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_DMEIF6 = 1U << 18 ;

  // Field FEIF6: Stream x FIFO error interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_FEIF6 = 1U << 16 ;

  // Field TCIF5: Stream x transfer complete interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_TCIF5 = 1U << 11 ;

  // Field HTIF5: Stream x half transfer interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_HTIF5 = 1U << 10 ;

  // Field TEIF5: Stream x transfer error interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_TEIF5 = 1U << 9 ;

  // Field DMEIF5: Stream x direct mode error interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_DMEIF5 = 1U << 8 ;

  // Field FEIF5: Stream x FIFO error interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_FEIF5 = 1U << 6 ;

  // Field TCIF4: Stream x transfer complete interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_TCIF4 = 1U << 5 ;

  // Field HTIF4: Stream x half transfer interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_HTIF4 = 1U << 4 ;

  // Field TEIF4: Stream x transfer error interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_TEIF4 = 1U << 3 ;

  // Field DMEIF4: Stream x direct mode error interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_DMEIF4 = 1U << 2 ;

  // Field FEIF4: Stream x FIFO error interrupt flag (x=7..4)
    const uint32_t DMA1_HISR_FEIF4 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LIFCR: low interrupt flag clear register
  #define DMA1_LIFCR (* ((volatile uint32_t *) (0x40026000 + 8)))

  // Field CTCIF3: Stream x clear transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CTCIF3 = 1U << 27 ;

  // Field CHTIF3: Stream x clear half transfer interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CHTIF3 = 1U << 26 ;

  // Field CTEIF3: Stream x clear transfer error interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CTEIF3 = 1U << 25 ;

  // Field CDMEIF3: Stream x clear direct mode error interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CDMEIF3 = 1U << 24 ;

  // Field CFEIF3: Stream x clear FIFO error interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CFEIF3 = 1U << 22 ;

  // Field CTCIF2: Stream x clear transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CTCIF2 = 1U << 21 ;

  // Field CHTIF2: Stream x clear half transfer interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CHTIF2 = 1U << 20 ;

  // Field CTEIF2: Stream x clear transfer error interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CTEIF2 = 1U << 19 ;

  // Field CDMEIF2: Stream x clear direct mode error interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CDMEIF2 = 1U << 18 ;

  // Field CFEIF2: Stream x clear FIFO error interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CFEIF2 = 1U << 16 ;

  // Field CTCIF1: Stream x clear transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CTCIF1 = 1U << 11 ;

  // Field CHTIF1: Stream x clear half transfer interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CHTIF1 = 1U << 10 ;

  // Field CTEIF1: Stream x clear transfer error interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CTEIF1 = 1U << 9 ;

  // Field CDMEIF1: Stream x clear direct mode error interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CDMEIF1 = 1U << 8 ;

  // Field CFEIF1: Stream x clear FIFO error interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CFEIF1 = 1U << 6 ;

  // Field CTCIF0: Stream x clear transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CTCIF0 = 1U << 5 ;

  // Field CHTIF0: Stream x clear half transfer interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CHTIF0 = 1U << 4 ;

  // Field CTEIF0: Stream x clear transfer error interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CTEIF0 = 1U << 3 ;

  // Field CDMEIF0: Stream x clear direct mode error interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CDMEIF0 = 1U << 2 ;

  // Field CFEIF0: Stream x clear FIFO error interrupt flag (x = 3..0)
    const uint32_t DMA1_LIFCR_CFEIF0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register HIFCR: high interrupt flag clear register
  #define DMA1_HIFCR (* ((volatile uint32_t *) (0x40026000 + 12)))

  // Field CTCIF7: Stream x clear transfer complete interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CTCIF7 = 1U << 27 ;

  // Field CHTIF7: Stream x clear half transfer interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CHTIF7 = 1U << 26 ;

  // Field CTEIF7: Stream x clear transfer error interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CTEIF7 = 1U << 25 ;

  // Field CDMEIF7: Stream x clear direct mode error interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CDMEIF7 = 1U << 24 ;

  // Field CFEIF7: Stream x clear FIFO error interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CFEIF7 = 1U << 22 ;

  // Field CTCIF6: Stream x clear transfer complete interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CTCIF6 = 1U << 21 ;

  // Field CHTIF6: Stream x clear half transfer interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CHTIF6 = 1U << 20 ;

  // Field CTEIF6: Stream x clear transfer error interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CTEIF6 = 1U << 19 ;

  // Field CDMEIF6: Stream x clear direct mode error interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CDMEIF6 = 1U << 18 ;

  // Field CFEIF6: Stream x clear FIFO error interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CFEIF6 = 1U << 16 ;

  // Field CTCIF5: Stream x clear transfer complete interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CTCIF5 = 1U << 11 ;

  // Field CHTIF5: Stream x clear half transfer interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CHTIF5 = 1U << 10 ;

  // Field CTEIF5: Stream x clear transfer error interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CTEIF5 = 1U << 9 ;

  // Field CDMEIF5: Stream x clear direct mode error interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CDMEIF5 = 1U << 8 ;

  // Field CFEIF5: Stream x clear FIFO error interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CFEIF5 = 1U << 6 ;

  // Field CTCIF4: Stream x clear transfer complete interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CTCIF4 = 1U << 5 ;

  // Field CHTIF4: Stream x clear half transfer interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CHTIF4 = 1U << 4 ;

  // Field CTEIF4: Stream x clear transfer error interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CTEIF4 = 1U << 3 ;

  // Field CDMEIF4: Stream x clear direct mode error interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CDMEIF4 = 1U << 2 ;

  // Field CFEIF4: Stream x clear FIFO error interrupt flag (x = 7..4)
    const uint32_t DMA1_HIFCR_CFEIF4 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S0CR: stream x configuration register
  #define DMA1_S0CR (* ((volatile uint32_t *) (0x40026000 + 16)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA1_S0CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA1_S0CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA1_S0CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA1_S0CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA1_S0CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA1_S0CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA1_S0CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA1_S0CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA1_S0CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA1_S0CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA1_S0CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA1_S0CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA1_S0CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA1_S0CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA1_S0CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA1_S0CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA1_S0CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA1_S0CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA1_S0CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S0NDTR: stream x number of data register
  #define DMA1_S0NDTR (* ((volatile uint32_t *) (0x40026000 + 20)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA1_S0NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S0PAR: stream x peripheral address register
  #define DMA1_S0PAR (* ((volatile uint32_t *) (0x40026000 + 24)))

  // Field PA: Peripheral address
    inline uint32_t DMA1_S0PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S0M0AR: stream x memory 0 address register
  #define DMA1_S0M0AR (* ((volatile uint32_t *) (0x40026000 + 28)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA1_S0M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S0M1AR: stream x memory 1 address register
  #define DMA1_S0M1AR (* ((volatile uint32_t *) (0x40026000 + 32)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA1_S0M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S0FCR: stream x FIFO control register
  #define DMA1_S0FCR (* ((volatile uint32_t *) (0x40026000 + 36)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA1_S0FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA1_S0FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA1_S0FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA1_S0FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S1CR: stream x configuration register
  #define DMA1_S1CR (* ((volatile uint32_t *) (0x40026000 + 40)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA1_S1CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA1_S1CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA1_S1CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA1_S1CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA1_S1CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA1_S1CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA1_S1CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA1_S1CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA1_S1CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA1_S1CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA1_S1CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA1_S1CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA1_S1CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA1_S1CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA1_S1CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA1_S1CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA1_S1CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA1_S1CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA1_S1CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA1_S1CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S1NDTR: stream x number of data register
  #define DMA1_S1NDTR (* ((volatile uint32_t *) (0x40026000 + 44)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA1_S1NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S1PAR: stream x peripheral address register
  #define DMA1_S1PAR (* ((volatile uint32_t *) (0x40026000 + 48)))

  // Field PA: Peripheral address
    inline uint32_t DMA1_S1PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S1M0AR: stream x memory 0 address register
  #define DMA1_S1M0AR (* ((volatile uint32_t *) (0x40026000 + 52)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA1_S1M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S1M1AR: stream x memory 1 address register
  #define DMA1_S1M1AR (* ((volatile uint32_t *) (0x40026000 + 56)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA1_S1M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S1FCR: stream x FIFO control register
  #define DMA1_S1FCR (* ((volatile uint32_t *) (0x40026000 + 60)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA1_S1FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA1_S1FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA1_S1FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA1_S1FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S2CR: stream x configuration register
  #define DMA1_S2CR (* ((volatile uint32_t *) (0x40026000 + 64)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA1_S2CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA1_S2CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA1_S2CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA1_S2CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA1_S2CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA1_S2CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA1_S2CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA1_S2CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA1_S2CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA1_S2CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA1_S2CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA1_S2CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA1_S2CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA1_S2CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA1_S2CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA1_S2CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA1_S2CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA1_S2CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA1_S2CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA1_S2CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S2NDTR: stream x number of data register
  #define DMA1_S2NDTR (* ((volatile uint32_t *) (0x40026000 + 68)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA1_S2NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S2PAR: stream x peripheral address register
  #define DMA1_S2PAR (* ((volatile uint32_t *) (0x40026000 + 72)))

  // Field PA: Peripheral address
    inline uint32_t DMA1_S2PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S2M0AR: stream x memory 0 address register
  #define DMA1_S2M0AR (* ((volatile uint32_t *) (0x40026000 + 76)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA1_S2M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S2M1AR: stream x memory 1 address register
  #define DMA1_S2M1AR (* ((volatile uint32_t *) (0x40026000 + 80)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA1_S2M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S2FCR: stream x FIFO control register
  #define DMA1_S2FCR (* ((volatile uint32_t *) (0x40026000 + 84)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA1_S2FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA1_S2FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA1_S2FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA1_S2FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S3CR: stream x configuration register
  #define DMA1_S3CR (* ((volatile uint32_t *) (0x40026000 + 88)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA1_S3CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA1_S3CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA1_S3CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA1_S3CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA1_S3CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA1_S3CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA1_S3CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA1_S3CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA1_S3CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA1_S3CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA1_S3CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA1_S3CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA1_S3CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA1_S3CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA1_S3CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA1_S3CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA1_S3CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA1_S3CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA1_S3CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA1_S3CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S3NDTR: stream x number of data register
  #define DMA1_S3NDTR (* ((volatile uint32_t *) (0x40026000 + 92)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA1_S3NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S3PAR: stream x peripheral address register
  #define DMA1_S3PAR (* ((volatile uint32_t *) (0x40026000 + 96)))

  // Field PA: Peripheral address
    inline uint32_t DMA1_S3PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S3M0AR: stream x memory 0 address register
  #define DMA1_S3M0AR (* ((volatile uint32_t *) (0x40026000 + 100)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA1_S3M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S3M1AR: stream x memory 1 address register
  #define DMA1_S3M1AR (* ((volatile uint32_t *) (0x40026000 + 104)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA1_S3M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S3FCR: stream x FIFO control register
  #define DMA1_S3FCR (* ((volatile uint32_t *) (0x40026000 + 108)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA1_S3FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA1_S3FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA1_S3FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA1_S3FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S4CR: stream x configuration register
  #define DMA1_S4CR (* ((volatile uint32_t *) (0x40026000 + 112)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA1_S4CR_CHSEL (const uint32_t inValue) {return (inValue & 0x7U) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA1_S4CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA1_S4CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA1_S4CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA1_S4CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA1_S4CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA1_S4CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA1_S4CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA1_S4CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA1_S4CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA1_S4CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA1_S4CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA1_S4CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA1_S4CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA1_S4CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA1_S4CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA1_S4CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA1_S4CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA1_S4CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA1_S4CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S4NDTR: stream x number of data register
  #define DMA1_S4NDTR (* ((volatile uint32_t *) (0x40026000 + 116)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA1_S4NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S4PAR: stream x peripheral address register
  #define DMA1_S4PAR (* ((volatile uint32_t *) (0x40026000 + 120)))

  // Field PA: Peripheral address
    inline uint32_t DMA1_S4PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S4M0AR: stream x memory 0 address register
  #define DMA1_S4M0AR (* ((volatile uint32_t *) (0x40026000 + 124)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA1_S4M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S4M1AR: stream x memory 1 address register
  #define DMA1_S4M1AR (* ((volatile uint32_t *) (0x40026000 + 128)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA1_S4M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S4FCR: stream x FIFO control register
  #define DMA1_S4FCR (* ((volatile uint32_t *) (0x40026000 + 132)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA1_S4FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA1_S4FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA1_S4FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA1_S4FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S5CR: stream x configuration register
  #define DMA1_S5CR (* ((volatile uint32_t *) (0x40026000 + 136)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA1_S5CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA1_S5CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA1_S5CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA1_S5CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA1_S5CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA1_S5CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA1_S5CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA1_S5CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA1_S5CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA1_S5CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA1_S5CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA1_S5CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA1_S5CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA1_S5CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA1_S5CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA1_S5CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA1_S5CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA1_S5CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA1_S5CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA1_S5CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S5NDTR: stream x number of data register
  #define DMA1_S5NDTR (* ((volatile uint32_t *) (0x40026000 + 140)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA1_S5NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S5PAR: stream x peripheral address register
  #define DMA1_S5PAR (* ((volatile uint32_t *) (0x40026000 + 144)))

  // Field PA: Peripheral address
    inline uint32_t DMA1_S5PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S5M0AR: stream x memory 0 address register
  #define DMA1_S5M0AR (* ((volatile uint32_t *) (0x40026000 + 148)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA1_S5M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S5M1AR: stream x memory 1 address register
  #define DMA1_S5M1AR (* ((volatile uint32_t *) (0x40026000 + 152)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA1_S5M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S5FCR: stream x FIFO control register
  #define DMA1_S5FCR (* ((volatile uint32_t *) (0x40026000 + 156)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA1_S5FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA1_S5FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA1_S5FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA1_S5FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S6CR: stream x configuration register
  #define DMA1_S6CR (* ((volatile uint32_t *) (0x40026000 + 160)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA1_S6CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA1_S6CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA1_S6CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA1_S6CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA1_S6CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA1_S6CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA1_S6CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA1_S6CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA1_S6CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA1_S6CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA1_S6CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA1_S6CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA1_S6CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA1_S6CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA1_S6CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA1_S6CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA1_S6CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA1_S6CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA1_S6CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA1_S6CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S6NDTR: stream x number of data register
  #define DMA1_S6NDTR (* ((volatile uint32_t *) (0x40026000 + 164)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA1_S6NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S6PAR: stream x peripheral address register
  #define DMA1_S6PAR (* ((volatile uint32_t *) (0x40026000 + 168)))

  // Field PA: Peripheral address
    inline uint32_t DMA1_S6PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S6M0AR: stream x memory 0 address register
  #define DMA1_S6M0AR (* ((volatile uint32_t *) (0x40026000 + 172)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA1_S6M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S6M1AR: stream x memory 1 address register
  #define DMA1_S6M1AR (* ((volatile uint32_t *) (0x40026000 + 176)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA1_S6M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S6FCR: stream x FIFO control register
  #define DMA1_S6FCR (* ((volatile uint32_t *) (0x40026000 + 180)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA1_S6FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA1_S6FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA1_S6FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA1_S6FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S7CR: stream x configuration register
  #define DMA1_S7CR (* ((volatile uint32_t *) (0x40026000 + 184)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA1_S7CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA1_S7CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA1_S7CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA1_S7CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA1_S7CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA1_S7CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA1_S7CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA1_S7CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA1_S7CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA1_S7CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA1_S7CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA1_S7CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA1_S7CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA1_S7CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA1_S7CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA1_S7CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA1_S7CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA1_S7CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA1_S7CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA1_S7CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S7NDTR: stream x number of data register
  #define DMA1_S7NDTR (* ((volatile uint32_t *) (0x40026000 + 188)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA1_S7NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S7PAR: stream x peripheral address register
  #define DMA1_S7PAR (* ((volatile uint32_t *) (0x40026000 + 192)))

  // Field PA: Peripheral address
    inline uint32_t DMA1_S7PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S7M0AR: stream x memory 0 address register
  #define DMA1_S7M0AR (* ((volatile uint32_t *) (0x40026000 + 196)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA1_S7M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S7M1AR: stream x memory 1 address register
  #define DMA1_S7M1AR (* ((volatile uint32_t *) (0x40026000 + 200)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA1_S7M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S7FCR: stream x FIFO control register
  #define DMA1_S7FCR (* ((volatile uint32_t *) (0x40026000 + 204)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA1_S7FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA1_S7FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA1_S7FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA1_S7FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral DMA2: DMA controller
//------------------------------------------------------------------------------

//---  Register LISR: low interrupt status register
  #define DMA2_LISR (* ((const volatile uint32_t *) (0x40026400 + 0)))

  // Field TCIF3: Stream x transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA2_LISR_TCIF3 = 1U << 27 ;

  // Field HTIF3: Stream x half transfer interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_HTIF3 = 1U << 26 ;

  // Field TEIF3: Stream x transfer error interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_TEIF3 = 1U << 25 ;

  // Field DMEIF3: Stream x direct mode error interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_DMEIF3 = 1U << 24 ;

  // Field FEIF3: Stream x FIFO error interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_FEIF3 = 1U << 22 ;

  // Field TCIF2: Stream x transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA2_LISR_TCIF2 = 1U << 21 ;

  // Field HTIF2: Stream x half transfer interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_HTIF2 = 1U << 20 ;

  // Field TEIF2: Stream x transfer error interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_TEIF2 = 1U << 19 ;

  // Field DMEIF2: Stream x direct mode error interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_DMEIF2 = 1U << 18 ;

  // Field FEIF2: Stream x FIFO error interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_FEIF2 = 1U << 16 ;

  // Field TCIF1: Stream x transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA2_LISR_TCIF1 = 1U << 11 ;

  // Field HTIF1: Stream x half transfer interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_HTIF1 = 1U << 10 ;

  // Field TEIF1: Stream x transfer error interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_TEIF1 = 1U << 9 ;

  // Field DMEIF1: Stream x direct mode error interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_DMEIF1 = 1U << 8 ;

  // Field FEIF1: Stream x FIFO error interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_FEIF1 = 1U << 6 ;

  // Field TCIF0: Stream x transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA2_LISR_TCIF0 = 1U << 5 ;

  // Field HTIF0: Stream x half transfer interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_HTIF0 = 1U << 4 ;

  // Field TEIF0: Stream x transfer error interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_TEIF0 = 1U << 3 ;

  // Field DMEIF0: Stream x direct mode error interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_DMEIF0 = 1U << 2 ;

  // Field FEIF0: Stream x FIFO error interrupt flag (x=3..0)
    const uint32_t DMA2_LISR_FEIF0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register HISR: high interrupt status register
  #define DMA2_HISR (* ((const volatile uint32_t *) (0x40026400 + 4)))

  // Field TCIF7: Stream x transfer complete interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_TCIF7 = 1U << 27 ;

  // Field HTIF7: Stream x half transfer interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_HTIF7 = 1U << 26 ;

  // Field TEIF7: Stream x transfer error interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_TEIF7 = 1U << 25 ;

  // Field DMEIF7: Stream x direct mode error interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_DMEIF7 = 1U << 24 ;

  // Field FEIF7: Stream x FIFO error interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_FEIF7 = 1U << 22 ;

  // Field TCIF6: Stream x transfer complete interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_TCIF6 = 1U << 21 ;

  // Field HTIF6: Stream x half transfer interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_HTIF6 = 1U << 20 ;

  // Field TEIF6: Stream x transfer error interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_TEIF6 = 1U << 19 ;

  // Field DMEIF6: Stream x direct mode error interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_DMEIF6 = 1U << 18 ;

  // Field FEIF6: Stream x FIFO error interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_FEIF6 = 1U << 16 ;

  // Field TCIF5: Stream x transfer complete interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_TCIF5 = 1U << 11 ;

  // Field HTIF5: Stream x half transfer interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_HTIF5 = 1U << 10 ;

  // Field TEIF5: Stream x transfer error interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_TEIF5 = 1U << 9 ;

  // Field DMEIF5: Stream x direct mode error interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_DMEIF5 = 1U << 8 ;

  // Field FEIF5: Stream x FIFO error interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_FEIF5 = 1U << 6 ;

  // Field TCIF4: Stream x transfer complete interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_TCIF4 = 1U << 5 ;

  // Field HTIF4: Stream x half transfer interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_HTIF4 = 1U << 4 ;

  // Field TEIF4: Stream x transfer error interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_TEIF4 = 1U << 3 ;

  // Field DMEIF4: Stream x direct mode error interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_DMEIF4 = 1U << 2 ;

  // Field FEIF4: Stream x FIFO error interrupt flag (x=7..4)
    const uint32_t DMA2_HISR_FEIF4 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LIFCR: low interrupt flag clear register
  #define DMA2_LIFCR (* ((volatile uint32_t *) (0x40026400 + 8)))

  // Field CTCIF3: Stream x clear transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CTCIF3 = 1U << 27 ;

  // Field CHTIF3: Stream x clear half transfer interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CHTIF3 = 1U << 26 ;

  // Field CTEIF3: Stream x clear transfer error interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CTEIF3 = 1U << 25 ;

  // Field CDMEIF3: Stream x clear direct mode error interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CDMEIF3 = 1U << 24 ;

  // Field CFEIF3: Stream x clear FIFO error interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CFEIF3 = 1U << 22 ;

  // Field CTCIF2: Stream x clear transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CTCIF2 = 1U << 21 ;

  // Field CHTIF2: Stream x clear half transfer interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CHTIF2 = 1U << 20 ;

  // Field CTEIF2: Stream x clear transfer error interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CTEIF2 = 1U << 19 ;

  // Field CDMEIF2: Stream x clear direct mode error interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CDMEIF2 = 1U << 18 ;

  // Field CFEIF2: Stream x clear FIFO error interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CFEIF2 = 1U << 16 ;

  // Field CTCIF1: Stream x clear transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CTCIF1 = 1U << 11 ;

  // Field CHTIF1: Stream x clear half transfer interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CHTIF1 = 1U << 10 ;

  // Field CTEIF1: Stream x clear transfer error interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CTEIF1 = 1U << 9 ;

  // Field CDMEIF1: Stream x clear direct mode error interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CDMEIF1 = 1U << 8 ;

  // Field CFEIF1: Stream x clear FIFO error interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CFEIF1 = 1U << 6 ;

  // Field CTCIF0: Stream x clear transfer complete interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CTCIF0 = 1U << 5 ;

  // Field CHTIF0: Stream x clear half transfer interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CHTIF0 = 1U << 4 ;

  // Field CTEIF0: Stream x clear transfer error interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CTEIF0 = 1U << 3 ;

  // Field CDMEIF0: Stream x clear direct mode error interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CDMEIF0 = 1U << 2 ;

  // Field CFEIF0: Stream x clear FIFO error interrupt flag (x = 3..0)
    const uint32_t DMA2_LIFCR_CFEIF0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register HIFCR: high interrupt flag clear register
  #define DMA2_HIFCR (* ((volatile uint32_t *) (0x40026400 + 12)))

  // Field CTCIF7: Stream x clear transfer complete interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CTCIF7 = 1U << 27 ;

  // Field CHTIF7: Stream x clear half transfer interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CHTIF7 = 1U << 26 ;

  // Field CTEIF7: Stream x clear transfer error interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CTEIF7 = 1U << 25 ;

  // Field CDMEIF7: Stream x clear direct mode error interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CDMEIF7 = 1U << 24 ;

  // Field CFEIF7: Stream x clear FIFO error interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CFEIF7 = 1U << 22 ;

  // Field CTCIF6: Stream x clear transfer complete interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CTCIF6 = 1U << 21 ;

  // Field CHTIF6: Stream x clear half transfer interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CHTIF6 = 1U << 20 ;

  // Field CTEIF6: Stream x clear transfer error interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CTEIF6 = 1U << 19 ;

  // Field CDMEIF6: Stream x clear direct mode error interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CDMEIF6 = 1U << 18 ;

  // Field CFEIF6: Stream x clear FIFO error interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CFEIF6 = 1U << 16 ;

  // Field CTCIF5: Stream x clear transfer complete interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CTCIF5 = 1U << 11 ;

  // Field CHTIF5: Stream x clear half transfer interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CHTIF5 = 1U << 10 ;

  // Field CTEIF5: Stream x clear transfer error interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CTEIF5 = 1U << 9 ;

  // Field CDMEIF5: Stream x clear direct mode error interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CDMEIF5 = 1U << 8 ;

  // Field CFEIF5: Stream x clear FIFO error interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CFEIF5 = 1U << 6 ;

  // Field CTCIF4: Stream x clear transfer complete interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CTCIF4 = 1U << 5 ;

  // Field CHTIF4: Stream x clear half transfer interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CHTIF4 = 1U << 4 ;

  // Field CTEIF4: Stream x clear transfer error interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CTEIF4 = 1U << 3 ;

  // Field CDMEIF4: Stream x clear direct mode error interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CDMEIF4 = 1U << 2 ;

  // Field CFEIF4: Stream x clear FIFO error interrupt flag (x = 7..4)
    const uint32_t DMA2_HIFCR_CFEIF4 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S0CR: stream x configuration register
  #define DMA2_S0CR (* ((volatile uint32_t *) (0x40026400 + 16)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA2_S0CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA2_S0CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA2_S0CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA2_S0CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA2_S0CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA2_S0CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA2_S0CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA2_S0CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA2_S0CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA2_S0CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA2_S0CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA2_S0CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA2_S0CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA2_S0CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA2_S0CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA2_S0CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA2_S0CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA2_S0CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA2_S0CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S0NDTR: stream x number of data register
  #define DMA2_S0NDTR (* ((volatile uint32_t *) (0x40026400 + 20)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA2_S0NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S0PAR: stream x peripheral address register
  #define DMA2_S0PAR (* ((volatile uint32_t *) (0x40026400 + 24)))

  // Field PA: Peripheral address
    inline uint32_t DMA2_S0PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S0M0AR: stream x memory 0 address register
  #define DMA2_S0M0AR (* ((volatile uint32_t *) (0x40026400 + 28)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA2_S0M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S0M1AR: stream x memory 1 address register
  #define DMA2_S0M1AR (* ((volatile uint32_t *) (0x40026400 + 32)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA2_S0M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S0FCR: stream x FIFO control register
  #define DMA2_S0FCR (* ((volatile uint32_t *) (0x40026400 + 36)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA2_S0FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA2_S0FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA2_S0FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA2_S0FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S1CR: stream x configuration register
  #define DMA2_S1CR (* ((volatile uint32_t *) (0x40026400 + 40)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA2_S1CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA2_S1CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA2_S1CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA2_S1CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA2_S1CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA2_S1CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA2_S1CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA2_S1CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA2_S1CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA2_S1CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA2_S1CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA2_S1CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA2_S1CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA2_S1CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA2_S1CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA2_S1CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA2_S1CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA2_S1CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA2_S1CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA2_S1CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S1NDTR: stream x number of data register
  #define DMA2_S1NDTR (* ((volatile uint32_t *) (0x40026400 + 44)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA2_S1NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S1PAR: stream x peripheral address register
  #define DMA2_S1PAR (* ((volatile uint32_t *) (0x40026400 + 48)))

  // Field PA: Peripheral address
    inline uint32_t DMA2_S1PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S1M0AR: stream x memory 0 address register
  #define DMA2_S1M0AR (* ((volatile uint32_t *) (0x40026400 + 52)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA2_S1M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S1M1AR: stream x memory 1 address register
  #define DMA2_S1M1AR (* ((volatile uint32_t *) (0x40026400 + 56)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA2_S1M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S1FCR: stream x FIFO control register
  #define DMA2_S1FCR (* ((volatile uint32_t *) (0x40026400 + 60)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA2_S1FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA2_S1FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA2_S1FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA2_S1FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S2CR: stream x configuration register
  #define DMA2_S2CR (* ((volatile uint32_t *) (0x40026400 + 64)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA2_S2CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA2_S2CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA2_S2CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA2_S2CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA2_S2CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA2_S2CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA2_S2CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA2_S2CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA2_S2CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA2_S2CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA2_S2CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA2_S2CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA2_S2CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA2_S2CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA2_S2CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA2_S2CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA2_S2CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA2_S2CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA2_S2CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA2_S2CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S2NDTR: stream x number of data register
  #define DMA2_S2NDTR (* ((volatile uint32_t *) (0x40026400 + 68)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA2_S2NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S2PAR: stream x peripheral address register
  #define DMA2_S2PAR (* ((volatile uint32_t *) (0x40026400 + 72)))

  // Field PA: Peripheral address
    inline uint32_t DMA2_S2PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S2M0AR: stream x memory 0 address register
  #define DMA2_S2M0AR (* ((volatile uint32_t *) (0x40026400 + 76)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA2_S2M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S2M1AR: stream x memory 1 address register
  #define DMA2_S2M1AR (* ((volatile uint32_t *) (0x40026400 + 80)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA2_S2M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S2FCR: stream x FIFO control register
  #define DMA2_S2FCR (* ((volatile uint32_t *) (0x40026400 + 84)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA2_S2FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA2_S2FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA2_S2FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA2_S2FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S3CR: stream x configuration register
  #define DMA2_S3CR (* ((volatile uint32_t *) (0x40026400 + 88)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA2_S3CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA2_S3CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA2_S3CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA2_S3CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA2_S3CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA2_S3CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA2_S3CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA2_S3CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA2_S3CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA2_S3CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA2_S3CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA2_S3CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA2_S3CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA2_S3CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA2_S3CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA2_S3CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA2_S3CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA2_S3CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA2_S3CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA2_S3CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S3NDTR: stream x number of data register
  #define DMA2_S3NDTR (* ((volatile uint32_t *) (0x40026400 + 92)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA2_S3NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S3PAR: stream x peripheral address register
  #define DMA2_S3PAR (* ((volatile uint32_t *) (0x40026400 + 96)))

  // Field PA: Peripheral address
    inline uint32_t DMA2_S3PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S3M0AR: stream x memory 0 address register
  #define DMA2_S3M0AR (* ((volatile uint32_t *) (0x40026400 + 100)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA2_S3M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S3M1AR: stream x memory 1 address register
  #define DMA2_S3M1AR (* ((volatile uint32_t *) (0x40026400 + 104)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA2_S3M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S3FCR: stream x FIFO control register
  #define DMA2_S3FCR (* ((volatile uint32_t *) (0x40026400 + 108)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA2_S3FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA2_S3FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA2_S3FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA2_S3FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S4CR: stream x configuration register
  #define DMA2_S4CR (* ((volatile uint32_t *) (0x40026400 + 112)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA2_S4CR_CHSEL (const uint32_t inValue) {return (inValue & 0x7U) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA2_S4CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA2_S4CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA2_S4CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA2_S4CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA2_S4CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA2_S4CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA2_S4CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA2_S4CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA2_S4CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA2_S4CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA2_S4CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA2_S4CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA2_S4CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA2_S4CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA2_S4CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA2_S4CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA2_S4CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA2_S4CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA2_S4CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S4NDTR: stream x number of data register
  #define DMA2_S4NDTR (* ((volatile uint32_t *) (0x40026400 + 116)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA2_S4NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S4PAR: stream x peripheral address register
  #define DMA2_S4PAR (* ((volatile uint32_t *) (0x40026400 + 120)))

  // Field PA: Peripheral address
    inline uint32_t DMA2_S4PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S4M0AR: stream x memory 0 address register
  #define DMA2_S4M0AR (* ((volatile uint32_t *) (0x40026400 + 124)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA2_S4M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S4M1AR: stream x memory 1 address register
  #define DMA2_S4M1AR (* ((volatile uint32_t *) (0x40026400 + 128)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA2_S4M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S4FCR: stream x FIFO control register
  #define DMA2_S4FCR (* ((volatile uint32_t *) (0x40026400 + 132)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA2_S4FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA2_S4FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA2_S4FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA2_S4FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S5CR: stream x configuration register
  #define DMA2_S5CR (* ((volatile uint32_t *) (0x40026400 + 136)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA2_S5CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA2_S5CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA2_S5CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA2_S5CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA2_S5CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA2_S5CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA2_S5CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA2_S5CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA2_S5CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA2_S5CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA2_S5CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA2_S5CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA2_S5CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA2_S5CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA2_S5CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA2_S5CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA2_S5CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA2_S5CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA2_S5CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA2_S5CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S5NDTR: stream x number of data register
  #define DMA2_S5NDTR (* ((volatile uint32_t *) (0x40026400 + 140)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA2_S5NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S5PAR: stream x peripheral address register
  #define DMA2_S5PAR (* ((volatile uint32_t *) (0x40026400 + 144)))

  // Field PA: Peripheral address
    inline uint32_t DMA2_S5PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S5M0AR: stream x memory 0 address register
  #define DMA2_S5M0AR (* ((volatile uint32_t *) (0x40026400 + 148)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA2_S5M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S5M1AR: stream x memory 1 address register
  #define DMA2_S5M1AR (* ((volatile uint32_t *) (0x40026400 + 152)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA2_S5M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S5FCR: stream x FIFO control register
  #define DMA2_S5FCR (* ((volatile uint32_t *) (0x40026400 + 156)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA2_S5FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA2_S5FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA2_S5FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA2_S5FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S6CR: stream x configuration register
  #define DMA2_S6CR (* ((volatile uint32_t *) (0x40026400 + 160)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA2_S6CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA2_S6CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA2_S6CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA2_S6CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA2_S6CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA2_S6CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA2_S6CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA2_S6CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA2_S6CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA2_S6CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA2_S6CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA2_S6CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA2_S6CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA2_S6CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA2_S6CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA2_S6CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA2_S6CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA2_S6CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA2_S6CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA2_S6CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S6NDTR: stream x number of data register
  #define DMA2_S6NDTR (* ((volatile uint32_t *) (0x40026400 + 164)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA2_S6NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S6PAR: stream x peripheral address register
  #define DMA2_S6PAR (* ((volatile uint32_t *) (0x40026400 + 168)))

  // Field PA: Peripheral address
    inline uint32_t DMA2_S6PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S6M0AR: stream x memory 0 address register
  #define DMA2_S6M0AR (* ((volatile uint32_t *) (0x40026400 + 172)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA2_S6M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S6M1AR: stream x memory 1 address register
  #define DMA2_S6M1AR (* ((volatile uint32_t *) (0x40026400 + 176)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA2_S6M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S6FCR: stream x FIFO control register
  #define DMA2_S6FCR (* ((volatile uint32_t *) (0x40026400 + 180)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA2_S6FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA2_S6FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA2_S6FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA2_S6FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S7CR: stream x configuration register
  #define DMA2_S7CR (* ((volatile uint32_t *) (0x40026400 + 184)))

  // Field CHSEL: Channel selection
    inline uint32_t DMA2_S7CR_CHSEL (const uint32_t inValue) {return (inValue & 0xFU) << 25 ; }

  // Field MBURST: Memory burst transfer configuration
    inline uint32_t DMA2_S7CR_MBURST (const uint32_t inValue) {return (inValue & 0x3U) << 23 ; }

  // Field PBURST: Peripheral burst transfer configuration
    inline uint32_t DMA2_S7CR_PBURST (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field ACK: ACK
    const uint32_t DMA2_S7CR_ACK = 1U << 20 ;

  // Field CT: Current target (only in double buffer mode)
    const uint32_t DMA2_S7CR_CT = 1U << 19 ;

  // Field DBM: Double buffer mode
    const uint32_t DMA2_S7CR_DBM = 1U << 18 ;

  // Field PL: Priority level
    inline uint32_t DMA2_S7CR_PL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PINCOS: Peripheral increment offset size
    const uint32_t DMA2_S7CR_PINCOS = 1U << 15 ;

  // Field MSIZE: Memory data size
    inline uint32_t DMA2_S7CR_MSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field PSIZE: Peripheral data size
    inline uint32_t DMA2_S7CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field MINC: Memory increment mode
    const uint32_t DMA2_S7CR_MINC = 1U << 10 ;

  // Field PINC: Peripheral increment mode
    const uint32_t DMA2_S7CR_PINC = 1U << 9 ;

  // Field CIRC: Circular mode
    const uint32_t DMA2_S7CR_CIRC = 1U << 8 ;

  // Field DIR: Data transfer direction
    inline uint32_t DMA2_S7CR_DIR (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PFCTRL: Peripheral flow controller
    const uint32_t DMA2_S7CR_PFCTRL = 1U << 5 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA2_S7CR_TCIE = 1U << 4 ;

  // Field HTIE: Half transfer interrupt enable
    const uint32_t DMA2_S7CR_HTIE = 1U << 3 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA2_S7CR_TEIE = 1U << 2 ;

  // Field DMEIE: Direct mode error interrupt enable
    const uint32_t DMA2_S7CR_DMEIE = 1U << 1 ;

  // Field EN: Stream enable / flag stream ready when read low
    const uint32_t DMA2_S7CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register S7NDTR: stream x number of data register
  #define DMA2_S7NDTR (* ((volatile uint32_t *) (0x40026400 + 188)))

  // Field NDT: Number of data items to transfer
    inline uint32_t DMA2_S7NDTR_NDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S7PAR: stream x peripheral address register
  #define DMA2_S7PAR (* ((volatile uint32_t *) (0x40026400 + 192)))

  // Field PA: Peripheral address
    inline uint32_t DMA2_S7PAR_PA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S7M0AR: stream x memory 0 address register
  #define DMA2_S7M0AR (* ((volatile uint32_t *) (0x40026400 + 196)))

  // Field M0A: Memory 0 address
    inline uint32_t DMA2_S7M0AR_M0A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S7M1AR: stream x memory 1 address register
  #define DMA2_S7M1AR (* ((volatile uint32_t *) (0x40026400 + 200)))

  // Field M1A: Memory 1 address (used in case of Double buffer mode)
    inline uint32_t DMA2_S7M1AR_M1A (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register S7FCR: stream x FIFO control register
  #define DMA2_S7FCR (* ((volatile uint32_t *) (0x40026400 + 204)))

  // Field FEIE: FIFO error interrupt enable
    const uint32_t DMA2_S7FCR_FEIE = 1U << 7 ;

  // Field FS: FIFO status
    inline uint32_t DMA2_S7FCR_FS (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field DMDIS: Direct mode disable
    const uint32_t DMA2_S7FCR_DMDIS = 1U << 2 ;

  // Field FTH: FIFO threshold selection
    inline uint32_t DMA2_S7FCR_FTH (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral DMA2D: DMA2D controller
//------------------------------------------------------------------------------

//---  Register CR: control register
  #define DMA2D_CR (* ((volatile uint32_t *) (0x4002B000 + 0)))

  // Field MODE: DMA2D mode
    inline uint32_t DMA2D_CR_MODE (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field CEIE: Configuration Error Interrupt Enable
    const uint32_t DMA2D_CR_CEIE = 1U << 13 ;

  // Field CTCIE: CLUT transfer complete interrupt enable
    const uint32_t DMA2D_CR_CTCIE = 1U << 12 ;

  // Field CAEIE: CLUT access error interrupt enable
    const uint32_t DMA2D_CR_CAEIE = 1U << 11 ;

  // Field TWIE: Transfer watermark interrupt enable
    const uint32_t DMA2D_CR_TWIE = 1U << 10 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t DMA2D_CR_TCIE = 1U << 9 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t DMA2D_CR_TEIE = 1U << 8 ;

  // Field ABORT: Abort
    const uint32_t DMA2D_CR_ABORT = 1U << 2 ;

  // Field SUSP: Suspend
    const uint32_t DMA2D_CR_SUSP = 1U << 1 ;

  // Field START: Start
    const uint32_t DMA2D_CR_START = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt Status Register
  #define DMA2D_ISR (* ((const volatile uint32_t *) (0x4002B000 + 4)))

  // Field CEIF: Configuration error interrupt flag
    const uint32_t DMA2D_ISR_CEIF = 1U << 5 ;

  // Field CTCIF: CLUT transfer complete interrupt flag
    const uint32_t DMA2D_ISR_CTCIF = 1U << 4 ;

  // Field CAEIF: CLUT access error interrupt flag
    const uint32_t DMA2D_ISR_CAEIF = 1U << 3 ;

  // Field TWIF: Transfer watermark interrupt flag
    const uint32_t DMA2D_ISR_TWIF = 1U << 2 ;

  // Field TCIF: Transfer complete interrupt flag
    const uint32_t DMA2D_ISR_TCIF = 1U << 1 ;

  // Field TEIF: Transfer error interrupt flag
    const uint32_t DMA2D_ISR_TEIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register IFCR: interrupt flag clear register
  #define DMA2D_IFCR (* ((volatile uint32_t *) (0x4002B000 + 8)))

  // Field CCEIF: Clear configuration error interrupt flag
    const uint32_t DMA2D_IFCR_CCEIF = 1U << 5 ;

  // Field CCTCIF: Clear CLUT transfer complete interrupt flag
    const uint32_t DMA2D_IFCR_CCTCIF = 1U << 4 ;

  // Field CAECIF: Clear CLUT access error interrupt flag
    const uint32_t DMA2D_IFCR_CAECIF = 1U << 3 ;

  // Field CTWIF: Clear transfer watermark interrupt flag
    const uint32_t DMA2D_IFCR_CTWIF = 1U << 2 ;

  // Field CTCIF: Clear transfer complete interrupt flag
    const uint32_t DMA2D_IFCR_CTCIF = 1U << 1 ;

  // Field CTEIF: Clear Transfer error interrupt flag
    const uint32_t DMA2D_IFCR_CTEIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register FGMAR: foreground memory address register
  #define DMA2D_FGMAR (* ((volatile uint32_t *) (0x4002B000 + 12)))

  // Field MA: Memory address
    inline uint32_t DMA2D_FGMAR_MA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register FGOR: foreground offset register
  #define DMA2D_FGOR (* ((volatile uint32_t *) (0x4002B000 + 16)))

  // Field LO: Line offset
    inline uint32_t DMA2D_FGOR_LO (const uint32_t inValue) {return (inValue & 0x3FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BGMAR: background memory address register
  #define DMA2D_BGMAR (* ((volatile uint32_t *) (0x4002B000 + 20)))

  // Field MA: Memory address
    inline uint32_t DMA2D_BGMAR_MA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BGOR: background offset register
  #define DMA2D_BGOR (* ((volatile uint32_t *) (0x4002B000 + 24)))

  // Field LO: Line offset
    inline uint32_t DMA2D_BGOR_LO (const uint32_t inValue) {return (inValue & 0x3FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register FGPFCCR: foreground PFC control register
  #define DMA2D_FGPFCCR (* ((volatile uint32_t *) (0x4002B000 + 28)))

  // Field ALPHA: Alpha value
    inline uint32_t DMA2D_FGPFCCR_ALPHA (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field AM: Alpha mode
    inline uint32_t DMA2D_FGPFCCR_AM (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field CS: CLUT size
    inline uint32_t DMA2D_FGPFCCR_CS (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field START: Start
    const uint32_t DMA2D_FGPFCCR_START = 1U << 5 ;

  // Field CCM: CLUT color mode
    const uint32_t DMA2D_FGPFCCR_CCM = 1U << 4 ;

  // Field CM: Color mode
    inline uint32_t DMA2D_FGPFCCR_CM (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register FGCOLR: foreground color register
  #define DMA2D_FGCOLR (* ((volatile uint32_t *) (0x4002B000 + 32)))

  // Field RED: Red Value
    inline uint32_t DMA2D_FGCOLR_RED (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field GREEN: Green Value
    inline uint32_t DMA2D_FGCOLR_GREEN (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field BLUE: Blue Value
    inline uint32_t DMA2D_FGCOLR_BLUE (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BGPFCCR: background PFC control register
  #define DMA2D_BGPFCCR (* ((volatile uint32_t *) (0x4002B000 + 36)))

  // Field ALPHA: Alpha value
    inline uint32_t DMA2D_BGPFCCR_ALPHA (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field AM: Alpha mode
    inline uint32_t DMA2D_BGPFCCR_AM (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field CS: CLUT size
    inline uint32_t DMA2D_BGPFCCR_CS (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field START: Start
    const uint32_t DMA2D_BGPFCCR_START = 1U << 5 ;

  // Field CCM: CLUT Color mode
    const uint32_t DMA2D_BGPFCCR_CCM = 1U << 4 ;

  // Field CM: Color mode
    inline uint32_t DMA2D_BGPFCCR_CM (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BGCOLR: background color register
  #define DMA2D_BGCOLR (* ((volatile uint32_t *) (0x4002B000 + 40)))

  // Field RED: Red Value
    inline uint32_t DMA2D_BGCOLR_RED (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field GREEN: Green Value
    inline uint32_t DMA2D_BGCOLR_GREEN (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field BLUE: Blue Value
    inline uint32_t DMA2D_BGCOLR_BLUE (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register FGCMAR: foreground CLUT memory address register
  #define DMA2D_FGCMAR (* ((volatile uint32_t *) (0x4002B000 + 44)))

  // Field MA: Memory Address
    inline uint32_t DMA2D_FGCMAR_MA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BGCMAR: background CLUT memory address register
  #define DMA2D_BGCMAR (* ((volatile uint32_t *) (0x4002B000 + 48)))

  // Field MA: Memory address
    inline uint32_t DMA2D_BGCMAR_MA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OPFCCR: output PFC control register
  #define DMA2D_OPFCCR (* ((volatile uint32_t *) (0x4002B000 + 52)))

  // Field CM: Color mode
    inline uint32_t DMA2D_OPFCCR_CM (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OCOLR: output color register
  #define DMA2D_OCOLR (* ((volatile uint32_t *) (0x4002B000 + 56)))

  // Field APLHA: Alpha Channel Value
    inline uint32_t DMA2D_OCOLR_APLHA (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field RED: Red Value
    inline uint32_t DMA2D_OCOLR_RED (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field GREEN: Green Value
    inline uint32_t DMA2D_OCOLR_GREEN (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field BLUE: Blue Value
    inline uint32_t DMA2D_OCOLR_BLUE (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OMAR: output memory address register
  #define DMA2D_OMAR (* ((volatile uint32_t *) (0x4002B000 + 60)))

  // Field MA: Memory Address
    inline uint32_t DMA2D_OMAR_MA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OOR: output offset register
  #define DMA2D_OOR (* ((volatile uint32_t *) (0x4002B000 + 64)))

  // Field LO: Line Offset
    inline uint32_t DMA2D_OOR_LO (const uint32_t inValue) {return (inValue & 0x3FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register NLR: number of line register
  #define DMA2D_NLR (* ((volatile uint32_t *) (0x4002B000 + 68)))

  // Field PL: Pixel per lines
    inline uint32_t DMA2D_NLR_PL (const uint32_t inValue) {return (inValue & 0x3FFFU) << 16 ; }

  // Field NL: Number of lines
    inline uint32_t DMA2D_NLR_NL (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register LWR: line watermark register
  #define DMA2D_LWR (* ((volatile uint32_t *) (0x4002B000 + 72)))

  // Field LW: Line watermark
    inline uint32_t DMA2D_LWR_LW (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AMTCR: AHB master timer configuration register
  #define DMA2D_AMTCR (* ((volatile uint32_t *) (0x4002B000 + 76)))

  // Field DT: Dead Time
    inline uint32_t DMA2D_AMTCR_DT (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field EN: Enable
    const uint32_t DMA2D_AMTCR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register FGCLUT: FGCLUT
  #define DMA2D_FGCLUT (* ((volatile uint32_t *) (0x4002B000 + 1024)))

  // Field APLHA: APLHA
    inline uint32_t DMA2D_FGCLUT_APLHA (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field RED: RED
    inline uint32_t DMA2D_FGCLUT_RED (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field GREEN: GREEN
    inline uint32_t DMA2D_FGCLUT_GREEN (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field BLUE: BLUE
    inline uint32_t DMA2D_FGCLUT_BLUE (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BGCLUT: BGCLUT
  #define DMA2D_BGCLUT (* ((volatile uint32_t *) (0x4002B000 + 2048)))

  // Field APLHA: APLHA
    inline uint32_t DMA2D_BGCLUT_APLHA (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field RED: RED
    inline uint32_t DMA2D_BGCLUT_RED (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field GREEN: GREEN
    inline uint32_t DMA2D_BGCLUT_GREEN (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field BLUE: BLUE
    inline uint32_t DMA2D_BGCLUT_BLUE (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral DSI: DSI Host
//------------------------------------------------------------------------------

//---  Register DSI_VR: DSI Host Version Register
  #define DSI_DSI_VR (* ((const volatile uint32_t *) (0x40016C00 + 0)))

  // Field VERSION: Version of the DSI Host
    inline uint32_t DSI_DSI_VR_VERSION (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_CR: DSI Host Control Register
  #define DSI_DSI_CR (* ((volatile uint32_t *) (0x40016C00 + 4)))

  // Field EN: Enable
    const uint32_t DSI_DSI_CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DSI_CCR: DSI HOST Clock Control Register
  #define DSI_DSI_CCR (* ((volatile uint32_t *) (0x40016C00 + 8)))

  // Field TXECKDIV: TX Escape Clock Division
    inline uint32_t DSI_DSI_CCR_TXECKDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field TOCKDIV: Timeout Clock Division
    inline uint32_t DSI_DSI_CCR_TOCKDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DSI_LVCIDR: DSI Host LTDC VCID Register
  #define DSI_DSI_LVCIDR (* ((volatile uint32_t *) (0x40016C00 + 12)))

  // Field VCID: Virtual Channel ID
    inline uint32_t DSI_DSI_LVCIDR_VCID (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_LCOLCR: DSI Host LTDC Color Coding Register
  #define DSI_DSI_LCOLCR (* ((volatile uint32_t *) (0x40016C00 + 16)))

  // Field COLC: Color Coding
    inline uint32_t DSI_DSI_LCOLCR_COLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field LPE: Loosely Packet Enable
    const uint32_t DSI_DSI_LCOLCR_LPE = 1U << 8 ;

//------------------------------------------------------------------------------

//---  Register DSI_LPCR: DSI Host LTDC Polarity Configuration Register
  #define DSI_DSI_LPCR (* ((volatile uint32_t *) (0x40016C00 + 20)))

  // Field DEP: Data Enable Polarity
    const uint32_t DSI_DSI_LPCR_DEP = 1U << 0 ;

  // Field VSP: VSYNC Polarity
    const uint32_t DSI_DSI_LPCR_VSP = 1U << 1 ;

  // Field HSP: HSYNC Polarity
    const uint32_t DSI_DSI_LPCR_HSP = 1U << 2 ;

//------------------------------------------------------------------------------

//---  Register DSI_LPMCR: DSI Host Low-Power mode Configuration Register
  #define DSI_DSI_LPMCR (* ((volatile uint32_t *) (0x40016C00 + 24)))

  // Field VLPSIZE: VACT Largest Packet Size
    inline uint32_t DSI_DSI_LPMCR_VLPSIZE (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field LPSIZE: Largest Packet Size
    inline uint32_t DSI_DSI_LPMCR_LPSIZE (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DSI_PCR: DSI Host Protocol Configuration Register
  #define DSI_DSI_PCR (* ((volatile uint32_t *) (0x40016C00 + 44)))

  // Field ETTXE: EoTp Transmission Enable
    const uint32_t DSI_DSI_PCR_ETTXE = 1U << 0 ;

  // Field ETRXE: EoTp Reception Enable
    const uint32_t DSI_DSI_PCR_ETRXE = 1U << 1 ;

  // Field BTAE: Bus Turn Around Enable
    const uint32_t DSI_DSI_PCR_BTAE = 1U << 2 ;

  // Field ECCRXE: ECC Reception Enable
    const uint32_t DSI_DSI_PCR_ECCRXE = 1U << 3 ;

  // Field CRCRXE: CRC Reception Enable
    const uint32_t DSI_DSI_PCR_CRCRXE = 1U << 4 ;

//------------------------------------------------------------------------------

//---  Register DSI_GVCIDR: DSI Host Generic VCID Register
  #define DSI_DSI_GVCIDR (* ((volatile uint32_t *) (0x40016C00 + 48)))

  // Field VCID: Virtual Channel ID
    inline uint32_t DSI_DSI_GVCIDR_VCID (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_MCR: DSI Host mode Configuration Register
  #define DSI_DSI_MCR (* ((volatile uint32_t *) (0x40016C00 + 52)))

  // Field CMDM: Command mode
    const uint32_t DSI_DSI_MCR_CMDM = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DSI_VMCR: DSI Host Video mode Configuration Register
  #define DSI_DSI_VMCR (* ((volatile uint32_t *) (0x40016C00 + 56)))

  // Field VMT: Video mode Type
    inline uint32_t DSI_DSI_VMCR_VMT (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field LPVSAE: Low-Power Vertical Sync Active Enable
    const uint32_t DSI_DSI_VMCR_LPVSAE = 1U << 8 ;

  // Field LPVBPE: Low-power Vertical Back-Porch Enable
    const uint32_t DSI_DSI_VMCR_LPVBPE = 1U << 9 ;

  // Field LPVFPE: Low-power Vertical Front-porch Enable
    const uint32_t DSI_DSI_VMCR_LPVFPE = 1U << 10 ;

  // Field LPVAE: Low-Power Vertical Active Enable
    const uint32_t DSI_DSI_VMCR_LPVAE = 1U << 11 ;

  // Field LPHBPE: Low-Power Horizontal Back-Porch Enable
    const uint32_t DSI_DSI_VMCR_LPHBPE = 1U << 12 ;

  // Field LPHFPE: Low-Power Horizontal Front-Porch Enable
    const uint32_t DSI_DSI_VMCR_LPHFPE = 1U << 13 ;

  // Field FBTAAE: Frame Bus-Turn-Around Acknowledge Enable
    const uint32_t DSI_DSI_VMCR_FBTAAE = 1U << 14 ;

  // Field LPCE: Low-Power Command Enable
    const uint32_t DSI_DSI_VMCR_LPCE = 1U << 15 ;

  // Field PGE: Pattern Generator Enable
    const uint32_t DSI_DSI_VMCR_PGE = 1U << 16 ;

  // Field PGM: Pattern Generator mode
    const uint32_t DSI_DSI_VMCR_PGM = 1U << 20 ;

  // Field PGO: Pattern Generator Orientation
    const uint32_t DSI_DSI_VMCR_PGO = 1U << 24 ;

//------------------------------------------------------------------------------

//---  Register DSI_VPCR: DSI Host Video Packet Configuration Register
  #define DSI_DSI_VPCR (* ((volatile uint32_t *) (0x40016C00 + 60)))

  // Field VPSIZE: Video Packet Size
    inline uint32_t DSI_DSI_VPCR_VPSIZE (const uint32_t inValue) {return (inValue & 0x3FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VCCR: DSI Host Video Chunks Configuration Register
  #define DSI_DSI_VCCR (* ((volatile uint32_t *) (0x40016C00 + 64)))

  // Field NUMC: Number of Chunks
    inline uint32_t DSI_DSI_VCCR_NUMC (const uint32_t inValue) {return (inValue & 0x1FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VNPCR: DSI Host Video Null Packet Configuration Register
  #define DSI_DSI_VNPCR (* ((volatile uint32_t *) (0x40016C00 + 68)))

  // Field NPSIZE: Null Packet Size
    inline uint32_t DSI_DSI_VNPCR_NPSIZE (const uint32_t inValue) {return (inValue & 0x1FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VHSACR: DSI Host Video HSA Configuration Register
  #define DSI_DSI_VHSACR (* ((volatile uint32_t *) (0x40016C00 + 72)))

  // Field HSA: Horizontal Synchronism Active duration
    inline uint32_t DSI_DSI_VHSACR_HSA (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VHBPCR: DSI Host Video HBP Configuration Register
  #define DSI_DSI_VHBPCR (* ((volatile uint32_t *) (0x40016C00 + 76)))

  // Field HBP: Horizontal Back-Porch duration
    inline uint32_t DSI_DSI_VHBPCR_HBP (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VLCR: DSI Host Video Line Configuration Register
  #define DSI_DSI_VLCR (* ((volatile uint32_t *) (0x40016C00 + 80)))

  // Field HLINE: Horizontal Line duration
    inline uint32_t DSI_DSI_VLCR_HLINE (const uint32_t inValue) {return (inValue & 0x7FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VVSACR: DSI Host Video VSA Configuration Register
  #define DSI_DSI_VVSACR (* ((volatile uint32_t *) (0x40016C00 + 84)))

  // Field VSA: Vertical Synchronism Active duration
    inline uint32_t DSI_DSI_VVSACR_VSA (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VVBPCR: DSI Host Video VBP Configuration Register
  #define DSI_DSI_VVBPCR (* ((volatile uint32_t *) (0x40016C00 + 88)))

  // Field VBP: Vertical Back-Porch duration
    inline uint32_t DSI_DSI_VVBPCR_VBP (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VVFPCR: DSI Host Video VFP Configuration Register
  #define DSI_DSI_VVFPCR (* ((volatile uint32_t *) (0x40016C00 + 92)))

  // Field VFP: Vertical Front-Porch duration
    inline uint32_t DSI_DSI_VVFPCR_VFP (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VVACR: DSI Host Video VA Configuration Register
  #define DSI_DSI_VVACR (* ((volatile uint32_t *) (0x40016C00 + 96)))

  // Field VA: Vertical Active duration
    inline uint32_t DSI_DSI_VVACR_VA (const uint32_t inValue) {return (inValue & 0x3FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_LCCR: DSI Host LTDC Command Configuration Register
  #define DSI_DSI_LCCR (* ((volatile uint32_t *) (0x40016C00 + 100)))

  // Field CMDSIZE: Command Size
    inline uint32_t DSI_DSI_LCCR_CMDSIZE (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_CMCR: DSI Host Command mode Configuration Register
  #define DSI_DSI_CMCR (* ((volatile uint32_t *) (0x40016C00 + 104)))

  // Field TEARE: Tearing Effect Acknowledge Request Enable
    const uint32_t DSI_DSI_CMCR_TEARE = 1U << 0 ;

  // Field ARE: Acknowledge Request Enable
    const uint32_t DSI_DSI_CMCR_ARE = 1U << 1 ;

  // Field GSW0TX: Generic Short Write Zero parameters Transmission
    const uint32_t DSI_DSI_CMCR_GSW0TX = 1U << 8 ;

  // Field GSW1TX: Generic Short Write One parameters Transmission
    const uint32_t DSI_DSI_CMCR_GSW1TX = 1U << 9 ;

  // Field GSW2TX: Generic Short Write Two parameters Transmission
    const uint32_t DSI_DSI_CMCR_GSW2TX = 1U << 10 ;

  // Field GSR0TX: Generic Short Read Zero parameters Transmission
    const uint32_t DSI_DSI_CMCR_GSR0TX = 1U << 11 ;

  // Field GSR1TX: Generic Short Read One parameters Transmission
    const uint32_t DSI_DSI_CMCR_GSR1TX = 1U << 12 ;

  // Field GSR2TX: Generic Short Read Two parameters Transmission
    const uint32_t DSI_DSI_CMCR_GSR2TX = 1U << 13 ;

  // Field GLWTX: Generic Long Write Transmission
    const uint32_t DSI_DSI_CMCR_GLWTX = 1U << 14 ;

  // Field DSW0TX: DCS Short Write Zero parameter Transmission
    const uint32_t DSI_DSI_CMCR_DSW0TX = 1U << 16 ;

  // Field DSW1TX: DCS Short Read One parameter Transmission
    const uint32_t DSI_DSI_CMCR_DSW1TX = 1U << 17 ;

  // Field DSR0TX: DCS Short Read Zero parameter Transmission
    const uint32_t DSI_DSI_CMCR_DSR0TX = 1U << 18 ;

  // Field DLWTX: DCS Long Write Transmission
    const uint32_t DSI_DSI_CMCR_DLWTX = 1U << 19 ;

  // Field MRDPS: Maximum Read Packet Size
    const uint32_t DSI_DSI_CMCR_MRDPS = 1U << 24 ;

//------------------------------------------------------------------------------

//---  Register DSI_GHCR: DSI Host Generic Header Configuration Register
  #define DSI_DSI_GHCR (* ((volatile uint32_t *) (0x40016C00 + 108)))

  // Field DT: Type
    inline uint32_t DSI_DSI_GHCR_DT (const uint32_t inValue) {return (inValue & 0x3FU) << 0 ; }

  // Field VCID: Channel
    inline uint32_t DSI_DSI_GHCR_VCID (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field WCLSB: WordCount LSB
    inline uint32_t DSI_DSI_GHCR_WCLSB (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field WCMSB: WordCount MSB
    inline uint32_t DSI_DSI_GHCR_WCMSB (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DSI_GPDR: DSI Host Generic Payload Data Register
  #define DSI_DSI_GPDR (* ((volatile uint32_t *) (0x40016C00 + 112)))

  // Field DATA1: Payload Byte 1
    inline uint32_t DSI_DSI_GPDR_DATA1 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field DATA2: Payload Byte 2
    inline uint32_t DSI_DSI_GPDR_DATA2 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DATA3: Payload Byte 3
    inline uint32_t DSI_DSI_GPDR_DATA3 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DATA4: Payload Byte 4
    inline uint32_t DSI_DSI_GPDR_DATA4 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register DSI_GPSR: DSI Host Generic Packet Status Register
  #define DSI_DSI_GPSR (* ((const volatile uint32_t *) (0x40016C00 + 116)))

  // Field CMDFE: Command FIFO Empty
    const uint32_t DSI_DSI_GPSR_CMDFE = 1U << 0 ;

  // Field CMDFF: Command FIFO Full
    const uint32_t DSI_DSI_GPSR_CMDFF = 1U << 1 ;

  // Field PWRFE: Payload Write FIFO Empty
    const uint32_t DSI_DSI_GPSR_PWRFE = 1U << 2 ;

  // Field PWRFF: Payload Write FIFO Full
    const uint32_t DSI_DSI_GPSR_PWRFF = 1U << 3 ;

  // Field PRDFE: Payload Read FIFO Empty
    const uint32_t DSI_DSI_GPSR_PRDFE = 1U << 4 ;

  // Field PRDFF: Payload Read FIFO Full
    const uint32_t DSI_DSI_GPSR_PRDFF = 1U << 5 ;

  // Field RCB: Read Command Busy
    const uint32_t DSI_DSI_GPSR_RCB = 1U << 6 ;

//------------------------------------------------------------------------------

//---  Register DSI_TCCR0: DSI Host Timeout Counter Configuration Register 0
  #define DSI_DSI_TCCR0 (* ((volatile uint32_t *) (0x40016C00 + 120)))

  // Field LPRX_TOCNT: Low-power Reception Timeout Counter
    inline uint32_t DSI_DSI_TCCR0_LPRX_TOCNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field HSTX_TOCNT: High-Speed Transmission Timeout Counter
    inline uint32_t DSI_DSI_TCCR0_HSTX_TOCNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DSI_TCCR1: DSI Host Timeout Counter Configuration Register 1
  #define DSI_DSI_TCCR1 (* ((volatile uint32_t *) (0x40016C00 + 124)))

  // Field HSRD_TOCNT: High-Speed Read Timeout Counter
    inline uint32_t DSI_DSI_TCCR1_HSRD_TOCNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_TCCR2: DSI Host Timeout Counter Configuration Register 2
  #define DSI_DSI_TCCR2 (* ((volatile uint32_t *) (0x40016C00 + 128)))

  // Field LPRD_TOCNT: Low-Power Read Timeout Counter
    inline uint32_t DSI_DSI_TCCR2_LPRD_TOCNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_TCCR3: DSI Host Timeout Counter Configuration Register 3
  #define DSI_DSI_TCCR3 (* ((volatile uint32_t *) (0x40016C00 + 132)))

  // Field HSWR_TOCNT: High-Speed Write Timeout Counter
    inline uint32_t DSI_DSI_TCCR3_HSWR_TOCNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field PM: Presp mode
    const uint32_t DSI_DSI_TCCR3_PM = 1U << 24 ;

//------------------------------------------------------------------------------

//---  Register DSI_TCCR4: DSI Host Timeout Counter Configuration Register 4
  #define DSI_DSI_TCCR4 (* ((volatile uint32_t *) (0x40016C00 + 136)))

  // Field LSWR_TOCNT: Low-Power Write Timeout Counter
    inline uint32_t DSI_DSI_TCCR4_LSWR_TOCNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_TCCR5: DSI Host Timeout Counter Configuration Register 5
  #define DSI_DSI_TCCR5 (* ((volatile uint32_t *) (0x40016C00 + 140)))

  // Field BTA_TOCNT: Bus-Turn-Around Timeout Counter
    inline uint32_t DSI_DSI_TCCR5_BTA_TOCNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_CLCR: DSI Host Clock Lane Configuration Register
  #define DSI_DSI_CLCR (* ((volatile uint32_t *) (0x40016C00 + 148)))

  // Field DPCC: D-PHY Clock Control
    const uint32_t DSI_DSI_CLCR_DPCC = 1U << 0 ;

  // Field ACR: Automatic Clock lane Control
    const uint32_t DSI_DSI_CLCR_ACR = 1U << 1 ;

//------------------------------------------------------------------------------

//---  Register DSI_CLTCR: DSI Host Clock Lane Timer Configuration Register
  #define DSI_DSI_CLTCR (* ((volatile uint32_t *) (0x40016C00 + 152)))

  // Field LP2HS_TIME: Low-Power to High-Speed Time
    inline uint32_t DSI_DSI_CLTCR_LP2HS_TIME (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

  // Field HS2LP_TIME: High-Speed to Low-Power Time
    inline uint32_t DSI_DSI_CLTCR_HS2LP_TIME (const uint32_t inValue) {return (inValue & 0x3FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DSI_DLTCR: DSI Host Data Lane Timer Configuration Register
  #define DSI_DSI_DLTCR (* ((volatile uint32_t *) (0x40016C00 + 156)))

  // Field MRD_TIME: Maximum Read Time
    inline uint32_t DSI_DSI_DLTCR_MRD_TIME (const uint32_t inValue) {return (inValue & 0x7FFFU) << 0 ; }

  // Field LP2HS_TIME: Low-Power To High-Speed Time
    inline uint32_t DSI_DSI_DLTCR_LP2HS_TIME (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field HS2LP_TIME: High-Speed To Low-Power Time
    inline uint32_t DSI_DSI_DLTCR_HS2LP_TIME (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register DSI_PCTLR: DSI Host PHY Control Register
  #define DSI_DSI_PCTLR (* ((volatile uint32_t *) (0x40016C00 + 160)))

  // Field DEN: Digital Enable
    const uint32_t DSI_DSI_PCTLR_DEN = 1U << 1 ;

  // Field CKE: Clock Enable
    const uint32_t DSI_DSI_PCTLR_CKE = 1U << 2 ;

//------------------------------------------------------------------------------

//---  Register DSI_PCONFR: DSI Host PHY Configuration Register
  #define DSI_DSI_PCONFR (* ((volatile uint32_t *) (0x40016C00 + 164)))

  // Field NL: Number of Lanes
    inline uint32_t DSI_DSI_PCONFR_NL (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field SW_TIME: Stop Wait Time
    inline uint32_t DSI_DSI_PCONFR_SW_TIME (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register DSI_PUCR: DSI Host PHY ULPS Control Register
  #define DSI_DSI_PUCR (* ((volatile uint32_t *) (0x40016C00 + 168)))

  // Field URCL: ULPS Request on Clock Lane
    const uint32_t DSI_DSI_PUCR_URCL = 1U << 0 ;

  // Field UECL: ULPS Exit on Clock Lane
    const uint32_t DSI_DSI_PUCR_UECL = 1U << 1 ;

  // Field URDL: ULPS Request on Data Lane
    const uint32_t DSI_DSI_PUCR_URDL = 1U << 2 ;

  // Field UEDL: ULPS Exit on Data Lane
    const uint32_t DSI_DSI_PUCR_UEDL = 1U << 3 ;

//------------------------------------------------------------------------------

//---  Register DSI_PTTCR: DSI Host PHY TX Triggers Configuration Register
  #define DSI_DSI_PTTCR (* ((volatile uint32_t *) (0x40016C00 + 172)))

  // Field TX_TRIG: Transmission Trigger
    inline uint32_t DSI_DSI_PTTCR_TX_TRIG (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_PSR: DSI Host PHY Status Register
  #define DSI_DSI_PSR (* ((const volatile uint32_t *) (0x40016C00 + 176)))

  // Field PD: PHY Direction
    const uint32_t DSI_DSI_PSR_PD = 1U << 1 ;

  // Field PSSC: PHY Stop State Clock lane
    const uint32_t DSI_DSI_PSR_PSSC = 1U << 2 ;

  // Field UANC: ULPS Active Not Clock lane
    const uint32_t DSI_DSI_PSR_UANC = 1U << 3 ;

  // Field PSS0: PHY Stop State lane 0
    const uint32_t DSI_DSI_PSR_PSS0 = 1U << 4 ;

  // Field UAN0: ULPS Active Not lane 1
    const uint32_t DSI_DSI_PSR_UAN0 = 1U << 5 ;

  // Field RUE0: RX ULPS Escape lane 0
    const uint32_t DSI_DSI_PSR_RUE0 = 1U << 6 ;

  // Field PSS1: PHY Stop State lane 1
    const uint32_t DSI_DSI_PSR_PSS1 = 1U << 7 ;

  // Field UAN1: ULPS Active Not lane 1
    const uint32_t DSI_DSI_PSR_UAN1 = 1U << 8 ;

//------------------------------------------------------------------------------

//---  Register DSI_ISR0: DSI Host Interrupt & Status Register 0
  #define DSI_DSI_ISR0 (* ((const volatile uint32_t *) (0x40016C00 + 188)))

  // Field AE0: Acknowledge Error 0
    const uint32_t DSI_DSI_ISR0_AE0 = 1U << 0 ;

  // Field AE1: Acknowledge Error 1
    const uint32_t DSI_DSI_ISR0_AE1 = 1U << 1 ;

  // Field AE2: Acknowledge Error 2
    const uint32_t DSI_DSI_ISR0_AE2 = 1U << 2 ;

  // Field AE3: Acknowledge Error 3
    const uint32_t DSI_DSI_ISR0_AE3 = 1U << 3 ;

  // Field AE4: Acknowledge Error 4
    const uint32_t DSI_DSI_ISR0_AE4 = 1U << 4 ;

  // Field AE5: Acknowledge Error 5
    const uint32_t DSI_DSI_ISR0_AE5 = 1U << 5 ;

  // Field AE6: Acknowledge Error 6
    const uint32_t DSI_DSI_ISR0_AE6 = 1U << 6 ;

  // Field AE7: Acknowledge Error 7
    const uint32_t DSI_DSI_ISR0_AE7 = 1U << 7 ;

  // Field AE8: Acknowledge Error 8
    const uint32_t DSI_DSI_ISR0_AE8 = 1U << 8 ;

  // Field AE9: Acknowledge Error 9
    const uint32_t DSI_DSI_ISR0_AE9 = 1U << 9 ;

  // Field AE10: Acknowledge Error 10
    const uint32_t DSI_DSI_ISR0_AE10 = 1U << 10 ;

  // Field AE11: Acknowledge Error 11
    const uint32_t DSI_DSI_ISR0_AE11 = 1U << 11 ;

  // Field AE12: Acknowledge Error 12
    const uint32_t DSI_DSI_ISR0_AE12 = 1U << 12 ;

  // Field AE13: Acknowledge Error 13
    const uint32_t DSI_DSI_ISR0_AE13 = 1U << 13 ;

  // Field AE14: Acknowledge Error 14
    const uint32_t DSI_DSI_ISR0_AE14 = 1U << 14 ;

  // Field AE15: Acknowledge Error 15
    const uint32_t DSI_DSI_ISR0_AE15 = 1U << 15 ;

  // Field PE0: PHY Error 0
    const uint32_t DSI_DSI_ISR0_PE0 = 1U << 16 ;

  // Field PE1: PHY Error 1
    const uint32_t DSI_DSI_ISR0_PE1 = 1U << 17 ;

  // Field PE2: PHY Error 2
    const uint32_t DSI_DSI_ISR0_PE2 = 1U << 18 ;

  // Field PE3: PHY Error 3
    const uint32_t DSI_DSI_ISR0_PE3 = 1U << 19 ;

  // Field PE4: PHY Error 4
    const uint32_t DSI_DSI_ISR0_PE4 = 1U << 20 ;

//------------------------------------------------------------------------------

//---  Register DSI_ISR1: DSI Host Interrupt & Status Register 1
  #define DSI_DSI_ISR1 (* ((const volatile uint32_t *) (0x40016C00 + 192)))

  // Field TOHSTX: Timeout High-Speed Transmission
    const uint32_t DSI_DSI_ISR1_TOHSTX = 1U << 0 ;

  // Field TOLPRX: Timeout Low-Power Reception
    const uint32_t DSI_DSI_ISR1_TOLPRX = 1U << 1 ;

  // Field ECCSE: ECC Single-bit Error
    const uint32_t DSI_DSI_ISR1_ECCSE = 1U << 2 ;

  // Field ECCME: ECC Multi-bit Error
    const uint32_t DSI_DSI_ISR1_ECCME = 1U << 3 ;

  // Field CRCE: CRC Error
    const uint32_t DSI_DSI_ISR1_CRCE = 1U << 4 ;

  // Field PSE: Packet Size Error
    const uint32_t DSI_DSI_ISR1_PSE = 1U << 5 ;

  // Field EOTPE: EoTp Error
    const uint32_t DSI_DSI_ISR1_EOTPE = 1U << 6 ;

  // Field LPWRE: LTDC Payload Write Error
    const uint32_t DSI_DSI_ISR1_LPWRE = 1U << 7 ;

  // Field GCWRE: Generic Command Write Error
    const uint32_t DSI_DSI_ISR1_GCWRE = 1U << 8 ;

  // Field GPWRE: Generic Payload Write Error
    const uint32_t DSI_DSI_ISR1_GPWRE = 1U << 9 ;

  // Field GPTXE: Generic Payload Transmit Error
    const uint32_t DSI_DSI_ISR1_GPTXE = 1U << 10 ;

  // Field GPRDE: Generic Payload Read Error
    const uint32_t DSI_DSI_ISR1_GPRDE = 1U << 11 ;

  // Field GPRXE: Generic Payload Receive Error
    const uint32_t DSI_DSI_ISR1_GPRXE = 1U << 12 ;

//------------------------------------------------------------------------------

//---  Register DSI_IER0: DSI Host Interrupt Enable Register 0
  #define DSI_DSI_IER0 (* ((volatile uint32_t *) (0x40016C00 + 196)))

  // Field AE0IE: Acknowledge Error 0 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE0IE = 1U << 0 ;

  // Field AE1IE: Acknowledge Error 1 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE1IE = 1U << 1 ;

  // Field AE2IE: Acknowledge Error 2 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE2IE = 1U << 2 ;

  // Field AE3IE: Acknowledge Error 3 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE3IE = 1U << 3 ;

  // Field AE4IE: Acknowledge Error 4 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE4IE = 1U << 4 ;

  // Field AE5IE: Acknowledge Error 5 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE5IE = 1U << 5 ;

  // Field AE6IE: Acknowledge Error 6 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE6IE = 1U << 6 ;

  // Field AE7IE: Acknowledge Error 7 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE7IE = 1U << 7 ;

  // Field AE8IE: Acknowledge Error 8 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE8IE = 1U << 8 ;

  // Field AE9IE: Acknowledge Error 9 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE9IE = 1U << 9 ;

  // Field AE10IE: Acknowledge Error 10 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE10IE = 1U << 10 ;

  // Field AE11IE: Acknowledge Error 11 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE11IE = 1U << 11 ;

  // Field AE12IE: Acknowledge Error 12 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE12IE = 1U << 12 ;

  // Field AE13IE: Acknowledge Error 13 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE13IE = 1U << 13 ;

  // Field AE14IE: Acknowledge Error 14 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE14IE = 1U << 14 ;

  // Field AE15IE: Acknowledge Error 15 Interrupt Enable
    const uint32_t DSI_DSI_IER0_AE15IE = 1U << 15 ;

  // Field PE0IE: PHY Error 0 Interrupt Enable
    const uint32_t DSI_DSI_IER0_PE0IE = 1U << 16 ;

  // Field PE1IE: PHY Error 1 Interrupt Enable
    const uint32_t DSI_DSI_IER0_PE1IE = 1U << 17 ;

  // Field PE2IE: PHY Error 2 Interrupt Enable
    const uint32_t DSI_DSI_IER0_PE2IE = 1U << 18 ;

  // Field PE3IE: PHY Error 3 Interrupt Enable
    const uint32_t DSI_DSI_IER0_PE3IE = 1U << 19 ;

  // Field PE4IE: PHY Error 4 Interrupt Enable
    const uint32_t DSI_DSI_IER0_PE4IE = 1U << 20 ;

//------------------------------------------------------------------------------

//---  Register DSI_IER1: DSI Host Interrupt Enable Register 1
  #define DSI_DSI_IER1 (* ((volatile uint32_t *) (0x40016C00 + 200)))

  // Field TOHSTXIE: Timeout High-Speed Transmission Interrupt Enable
    const uint32_t DSI_DSI_IER1_TOHSTXIE = 1U << 0 ;

  // Field TOLPRXIE: Timeout Low-Power Reception Interrupt Enable
    const uint32_t DSI_DSI_IER1_TOLPRXIE = 1U << 1 ;

  // Field ECCSEIE: ECC Single-bit Error Interrupt Enable
    const uint32_t DSI_DSI_IER1_ECCSEIE = 1U << 2 ;

  // Field ECCMEIE: ECC Multi-bit Error Interrupt Enable
    const uint32_t DSI_DSI_IER1_ECCMEIE = 1U << 3 ;

  // Field CRCEIE: CRC Error Interrupt Enable
    const uint32_t DSI_DSI_IER1_CRCEIE = 1U << 4 ;

  // Field PSEIE: Packet Size Error Interrupt Enable
    const uint32_t DSI_DSI_IER1_PSEIE = 1U << 5 ;

  // Field EOTPEIE: EoTp Error Interrupt Enable
    const uint32_t DSI_DSI_IER1_EOTPEIE = 1U << 6 ;

  // Field LPWREIE: LTDC Payload Write Error Interrupt Enable
    const uint32_t DSI_DSI_IER1_LPWREIE = 1U << 7 ;

  // Field GCWREIE: Generic Command Write Error Interrupt Enable
    const uint32_t DSI_DSI_IER1_GCWREIE = 1U << 8 ;

  // Field GPWREIE: Generic Payload Write Error Interrupt Enable
    const uint32_t DSI_DSI_IER1_GPWREIE = 1U << 9 ;

  // Field GPTXEIE: Generic Payload Transmit Error Interrupt Enable
    const uint32_t DSI_DSI_IER1_GPTXEIE = 1U << 10 ;

  // Field GPRDEIE: Generic Payload Read Error Interrupt Enable
    const uint32_t DSI_DSI_IER1_GPRDEIE = 1U << 11 ;

  // Field GPRXEIE: Generic Payload Receive Error Interrupt Enable
    const uint32_t DSI_DSI_IER1_GPRXEIE = 1U << 12 ;

//------------------------------------------------------------------------------

//---  Register DSI_FIR0: DSI Host Force Interrupt Register 0
  #define DSI_DSI_FIR0 (* ((volatile uint32_t *) (0x40016C00 + 216)))

  // Field FAE0: Force Acknowledge Error 0
    const uint32_t DSI_DSI_FIR0_FAE0 = 1U << 0 ;

  // Field FAE1: Force Acknowledge Error 1
    const uint32_t DSI_DSI_FIR0_FAE1 = 1U << 1 ;

  // Field FAE2: Force Acknowledge Error 2
    const uint32_t DSI_DSI_FIR0_FAE2 = 1U << 2 ;

  // Field FAE3: Force Acknowledge Error 3
    const uint32_t DSI_DSI_FIR0_FAE3 = 1U << 3 ;

  // Field FAE4: Force Acknowledge Error 4
    const uint32_t DSI_DSI_FIR0_FAE4 = 1U << 4 ;

  // Field FAE5: Force Acknowledge Error 5
    const uint32_t DSI_DSI_FIR0_FAE5 = 1U << 5 ;

  // Field FAE6: Force Acknowledge Error 6
    const uint32_t DSI_DSI_FIR0_FAE6 = 1U << 6 ;

  // Field FAE7: Force Acknowledge Error 7
    const uint32_t DSI_DSI_FIR0_FAE7 = 1U << 7 ;

  // Field FAE8: Force Acknowledge Error 8
    const uint32_t DSI_DSI_FIR0_FAE8 = 1U << 8 ;

  // Field FAE9: Force Acknowledge Error 9
    const uint32_t DSI_DSI_FIR0_FAE9 = 1U << 9 ;

  // Field FAE10: Force Acknowledge Error 10
    const uint32_t DSI_DSI_FIR0_FAE10 = 1U << 10 ;

  // Field FAE11: Force Acknowledge Error 11
    const uint32_t DSI_DSI_FIR0_FAE11 = 1U << 11 ;

  // Field FAE12: Force Acknowledge Error 12
    const uint32_t DSI_DSI_FIR0_FAE12 = 1U << 12 ;

  // Field FAE13: Force Acknowledge Error 13
    const uint32_t DSI_DSI_FIR0_FAE13 = 1U << 13 ;

  // Field FAE14: Force Acknowledge Error 14
    const uint32_t DSI_DSI_FIR0_FAE14 = 1U << 14 ;

  // Field FAE15: Force Acknowledge Error 15
    const uint32_t DSI_DSI_FIR0_FAE15 = 1U << 15 ;

  // Field FPE0: Force PHY Error 0
    const uint32_t DSI_DSI_FIR0_FPE0 = 1U << 16 ;

  // Field FPE1: Force PHY Error 1
    const uint32_t DSI_DSI_FIR0_FPE1 = 1U << 17 ;

  // Field FPE2: Force PHY Error 2
    const uint32_t DSI_DSI_FIR0_FPE2 = 1U << 18 ;

  // Field FPE3: Force PHY Error 3
    const uint32_t DSI_DSI_FIR0_FPE3 = 1U << 19 ;

  // Field FPE4: Force PHY Error 4
    const uint32_t DSI_DSI_FIR0_FPE4 = 1U << 20 ;

//------------------------------------------------------------------------------

//---  Register DSI_FIR1: DSI Host Force Interrupt Register 1
  #define DSI_DSI_FIR1 (* ((volatile uint32_t *) (0x40016C00 + 220)))

  // Field FTOHSTX: Force Timeout High-Speed Transmission
    const uint32_t DSI_DSI_FIR1_FTOHSTX = 1U << 0 ;

  // Field FTOLPRX: Force Timeout Low-Power Reception
    const uint32_t DSI_DSI_FIR1_FTOLPRX = 1U << 1 ;

  // Field FECCSE: Force ECC Single-bit Error
    const uint32_t DSI_DSI_FIR1_FECCSE = 1U << 2 ;

  // Field FECCME: Force ECC Multi-bit Error
    const uint32_t DSI_DSI_FIR1_FECCME = 1U << 3 ;

  // Field FCRCE: Force CRC Error
    const uint32_t DSI_DSI_FIR1_FCRCE = 1U << 4 ;

  // Field FPSE: Force Packet Size Error
    const uint32_t DSI_DSI_FIR1_FPSE = 1U << 5 ;

  // Field FEOTPE: Force EoTp Error
    const uint32_t DSI_DSI_FIR1_FEOTPE = 1U << 6 ;

  // Field FLPWRE: Force LTDC Payload Write Error
    const uint32_t DSI_DSI_FIR1_FLPWRE = 1U << 7 ;

  // Field FGCWRE: Force Generic Command Write Error
    const uint32_t DSI_DSI_FIR1_FGCWRE = 1U << 8 ;

  // Field FGPWRE: Force Generic Payload Write Error
    const uint32_t DSI_DSI_FIR1_FGPWRE = 1U << 9 ;

  // Field FGPTXE: Force Generic Payload Transmit Error
    const uint32_t DSI_DSI_FIR1_FGPTXE = 1U << 10 ;

  // Field FGPRDE: Force Generic Payload Read Error
    const uint32_t DSI_DSI_FIR1_FGPRDE = 1U << 11 ;

  // Field FGPRXE: Force Generic Payload Receive Error
    const uint32_t DSI_DSI_FIR1_FGPRXE = 1U << 12 ;

//------------------------------------------------------------------------------

//---  Register DSI_VSCR: DSI Host Video Shadow Control Register
  #define DSI_DSI_VSCR (* ((volatile uint32_t *) (0x40016C00 + 256)))

  // Field EN: Enable
    const uint32_t DSI_DSI_VSCR_EN = 1U << 0 ;

  // Field UR: Update Register
    const uint32_t DSI_DSI_VSCR_UR = 1U << 8 ;

//------------------------------------------------------------------------------

//---  Register DSI_LCVCIDR: DSI Host LTDC Current VCID Register
  #define DSI_DSI_LCVCIDR (* ((const volatile uint32_t *) (0x40016C00 + 268)))

  // Field VCID: Virtual Channel ID
    inline uint32_t DSI_DSI_LCVCIDR_VCID (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_LCCCR: DSI Host LTDC Current Color Coding Register
  #define DSI_DSI_LCCCR (* ((const volatile uint32_t *) (0x40016C00 + 272)))

  // Field COLC: Color Coding
    inline uint32_t DSI_DSI_LCCCR_COLC (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field LPE: Loosely Packed Enable
    const uint32_t DSI_DSI_LCCCR_LPE = 1U << 8 ;

//------------------------------------------------------------------------------

//---  Register DSI_LPMCCR: DSI Host Low-Power mode Current Configuration Register
  #define DSI_DSI_LPMCCR (* ((const volatile uint32_t *) (0x40016C00 + 280)))

  // Field VLPSIZE: VACT Largest Packet Size
    inline uint32_t DSI_DSI_LPMCCR_VLPSIZE (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field LPSIZE: Largest Packet Size
    inline uint32_t DSI_DSI_LPMCCR_LPSIZE (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VMCCR: DSI Host Video mode Current Configuration Register
  #define DSI_DSI_VMCCR (* ((const volatile uint32_t *) (0x40016C00 + 312)))

  // Field VMT: Video mode Type
    inline uint32_t DSI_DSI_VMCCR_VMT (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field LPVSAE: Low-Power Vertical Sync time Enable
    const uint32_t DSI_DSI_VMCCR_LPVSAE = 1U << 2 ;

  // Field LPVBPE: Low-power Vertical Back-Porch Enable
    const uint32_t DSI_DSI_VMCCR_LPVBPE = 1U << 3 ;

  // Field LPVFPE: Low-power Vertical Front-Porch Enable
    const uint32_t DSI_DSI_VMCCR_LPVFPE = 1U << 4 ;

  // Field LPVAE: Low-Power Vertical Active Enable
    const uint32_t DSI_DSI_VMCCR_LPVAE = 1U << 5 ;

  // Field LPHBPE: Low-power Horizontal Back-Porch Enable
    const uint32_t DSI_DSI_VMCCR_LPHBPE = 1U << 6 ;

  // Field LPHFE: Low-Power Horizontal Front-Porch Enable
    const uint32_t DSI_DSI_VMCCR_LPHFE = 1U << 7 ;

  // Field FBTAAE: Frame BTA Acknowledge Enable
    const uint32_t DSI_DSI_VMCCR_FBTAAE = 1U << 8 ;

  // Field LPCE: Low-Power Command Enable
    const uint32_t DSI_DSI_VMCCR_LPCE = 1U << 9 ;

//------------------------------------------------------------------------------

//---  Register DSI_VPCCR: DSI Host Video Packet Current Configuration Register
  #define DSI_DSI_VPCCR (* ((const volatile uint32_t *) (0x40016C00 + 316)))

  // Field VPSIZE: Video Packet Size
    inline uint32_t DSI_DSI_VPCCR_VPSIZE (const uint32_t inValue) {return (inValue & 0x3FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VCCCR: DSI Host Video Chunks Current Configuration Register
  #define DSI_DSI_VCCCR (* ((const volatile uint32_t *) (0x40016C00 + 320)))

  // Field NUMC: Number of Chunks
    inline uint32_t DSI_DSI_VCCCR_NUMC (const uint32_t inValue) {return (inValue & 0x1FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VNPCCR: DSI Host Video Null Packet Current Configuration Register
  #define DSI_DSI_VNPCCR (* ((const volatile uint32_t *) (0x40016C00 + 324)))

  // Field NPSIZE: Null Packet Size
    inline uint32_t DSI_DSI_VNPCCR_NPSIZE (const uint32_t inValue) {return (inValue & 0x1FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VHSACCR: DSI Host Video HSA Current Configuration Register
  #define DSI_DSI_VHSACCR (* ((const volatile uint32_t *) (0x40016C00 + 328)))

  // Field HSA: Horizontal Synchronism Active duration
    inline uint32_t DSI_DSI_VHSACCR_HSA (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VHBPCCR: DSI Host Video HBP Current Configuration Register
  #define DSI_DSI_VHBPCCR (* ((const volatile uint32_t *) (0x40016C00 + 332)))

  // Field HBP: Horizontal Back-Porch duration
    inline uint32_t DSI_DSI_VHBPCCR_HBP (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VLCCR: DSI Host Video Line Current Configuration Register
  #define DSI_DSI_VLCCR (* ((const volatile uint32_t *) (0x40016C00 + 336)))

  // Field HLINE: Horizontal Line duration
    inline uint32_t DSI_DSI_VLCCR_HLINE (const uint32_t inValue) {return (inValue & 0x7FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VVSACCR: DSI Host Video VSA Current Configuration Register
  #define DSI_DSI_VVSACCR (* ((const volatile uint32_t *) (0x40016C00 + 340)))

  // Field VSA: Vertical Synchronism Active duration
    inline uint32_t DSI_DSI_VVSACCR_VSA (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VVBPCCR: DSI Host Video VBP Current Configuration Register
  #define DSI_DSI_VVBPCCR (* ((const volatile uint32_t *) (0x40016C00 + 344)))

  // Field VBP: Vertical Back-Porch duration
    inline uint32_t DSI_DSI_VVBPCCR_VBP (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VVFPCCR: DSI Host Video VFP Current Configuration Register
  #define DSI_DSI_VVFPCCR (* ((const volatile uint32_t *) (0x40016C00 + 348)))

  // Field VFP: Vertical Front-Porch duration
    inline uint32_t DSI_DSI_VVFPCCR_VFP (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_VVACCR: DSI Host Video VA Current Configuration Register
  #define DSI_DSI_VVACCR (* ((const volatile uint32_t *) (0x40016C00 + 352)))

  // Field VA: Vertical Active duration
    inline uint32_t DSI_DSI_VVACCR_VA (const uint32_t inValue) {return (inValue & 0x3FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_WCFGR: DSI Wrapper Configuration Register
  #define DSI_DSI_WCFGR (* ((volatile uint32_t *) (0x40016C00 + 1024)))

  // Field VSPOL: VSync Polarity
    const uint32_t DSI_DSI_WCFGR_VSPOL = 1U << 7 ;

  // Field AR: Automatic Refresh
    const uint32_t DSI_DSI_WCFGR_AR = 1U << 6 ;

  // Field TEPOL: TE Polarity
    const uint32_t DSI_DSI_WCFGR_TEPOL = 1U << 5 ;

  // Field TESRC: TE Source
    const uint32_t DSI_DSI_WCFGR_TESRC = 1U << 4 ;

  // Field COLMUX: Color Multiplexing
    inline uint32_t DSI_DSI_WCFGR_COLMUX (const uint32_t inValue) {return (inValue & 0x7U) << 1 ; }

  // Field DSIM: DSI Mode
    const uint32_t DSI_DSI_WCFGR_DSIM = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DSI_WCR: DSI Wrapper Control Register
  #define DSI_DSI_WCR (* ((volatile uint32_t *) (0x40016C00 + 1028)))

  // Field DSIEN: DSI Enable
    const uint32_t DSI_DSI_WCR_DSIEN = 1U << 3 ;

  // Field LTDCEN: LTDC Enable
    const uint32_t DSI_DSI_WCR_LTDCEN = 1U << 2 ;

  // Field SHTDN: Shutdown
    const uint32_t DSI_DSI_WCR_SHTDN = 1U << 1 ;

  // Field COLM: Color Mode
    const uint32_t DSI_DSI_WCR_COLM = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DSI_WIER: DSI Wrapper Interrupt Enable Register
  #define DSI_DSI_WIER (* ((volatile uint32_t *) (0x40016C00 + 1032)))

  // Field RRIE: Regulator Ready Interrupt Enable
    const uint32_t DSI_DSI_WIER_RRIE = 1U << 13 ;

  // Field PLLUIE: PLL Unlock Interrupt Enable
    const uint32_t DSI_DSI_WIER_PLLUIE = 1U << 10 ;

  // Field PLLLIE: PLL Lock Interrupt Enable
    const uint32_t DSI_DSI_WIER_PLLLIE = 1U << 9 ;

  // Field ERIE: End of Refresh Interrupt Enable
    const uint32_t DSI_DSI_WIER_ERIE = 1U << 1 ;

  // Field TEIE: Tearing Effect Interrupt Enable
    const uint32_t DSI_DSI_WIER_TEIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DSI_WISR: DSI Wrapper Interrupt & Status Register
  #define DSI_DSI_WISR (* ((const volatile uint32_t *) (0x40016C00 + 1036)))

  // Field RRIF: Regulator Ready Interrupt Flag
    const uint32_t DSI_DSI_WISR_RRIF = 1U << 13 ;

  // Field RRS: Regulator Ready Status
    const uint32_t DSI_DSI_WISR_RRS = 1U << 12 ;

  // Field PLLUIF: PLL Unlock Interrupt Flag
    const uint32_t DSI_DSI_WISR_PLLUIF = 1U << 10 ;

  // Field PLLLIF: PLL Lock Interrupt Flag
    const uint32_t DSI_DSI_WISR_PLLLIF = 1U << 9 ;

  // Field PLLLS: PLL Lock Status
    const uint32_t DSI_DSI_WISR_PLLLS = 1U << 8 ;

  // Field BUSY: Busy Flag
    const uint32_t DSI_DSI_WISR_BUSY = 1U << 2 ;

  // Field ERIF: End of Refresh Interrupt Flag
    const uint32_t DSI_DSI_WISR_ERIF = 1U << 1 ;

  // Field TEIF: Tearing Effect Interrupt Flag
    const uint32_t DSI_DSI_WISR_TEIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DSI_WIFCR: DSI Wrapper Interrupt Flag Clear Register
  #define DSI_DSI_WIFCR (* ((volatile uint32_t *) (0x40016C00 + 1040)))

  // Field CRRIF: Clear Regulator Ready Interrupt Flag
    const uint32_t DSI_DSI_WIFCR_CRRIF = 1U << 13 ;

  // Field CPLLUIF: Clear PLL Unlock Interrupt Flag
    const uint32_t DSI_DSI_WIFCR_CPLLUIF = 1U << 10 ;

  // Field CPLLLIF: Clear PLL Lock Interrupt Flag
    const uint32_t DSI_DSI_WIFCR_CPLLLIF = 1U << 9 ;

  // Field CERIF: Clear End of Refresh Interrupt Flag
    const uint32_t DSI_DSI_WIFCR_CERIF = 1U << 1 ;

  // Field CTEIF: Clear Tearing Effect Interrupt Flag
    const uint32_t DSI_DSI_WIFCR_CTEIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DSI_WPCR1: DSI Wrapper PHY Configuration Register 1
  #define DSI_DSI_WPCR1 (* ((volatile uint32_t *) (0x40016C00 + 1048)))

  // Field TCLKPOSTEN: custom time for tCLK-POST Enable
    const uint32_t DSI_DSI_WPCR1_TCLKPOSTEN = 1U << 27 ;

  // Field TLPXCEN: custom time for tLPX for Clock lane Enable
    const uint32_t DSI_DSI_WPCR1_TLPXCEN = 1U << 26 ;

  // Field THSEXITEN: custom time for tHS-EXIT Enable
    const uint32_t DSI_DSI_WPCR1_THSEXITEN = 1U << 25 ;

  // Field TLPXDEN: custom time for tLPX for Data lanes Enable
    const uint32_t DSI_DSI_WPCR1_TLPXDEN = 1U << 24 ;

  // Field THSZEROEN: custom time for tHS-ZERO Enable
    const uint32_t DSI_DSI_WPCR1_THSZEROEN = 1U << 23 ;

  // Field THSTRAILEN: custom time for tHS-TRAIL Enable
    const uint32_t DSI_DSI_WPCR1_THSTRAILEN = 1U << 22 ;

  // Field THSPREPEN: custom time for tHS-PREPARE Enable
    const uint32_t DSI_DSI_WPCR1_THSPREPEN = 1U << 21 ;

  // Field TCLKZEROEN: custom time for tCLK-ZERO Enable
    const uint32_t DSI_DSI_WPCR1_TCLKZEROEN = 1U << 20 ;

  // Field TCLKPREPEN: custom time for tCLK-PREPARE Enable
    const uint32_t DSI_DSI_WPCR1_TCLKPREPEN = 1U << 19 ;

  // Field PDEN: Pull-Down Enable
    const uint32_t DSI_DSI_WPCR1_PDEN = 1U << 18 ;

  // Field TDDL: Turn Disable Data Lanes
    const uint32_t DSI_DSI_WPCR1_TDDL = 1U << 16 ;

  // Field CDOFFDL: Contention Detection OFF on Data Lanes
    const uint32_t DSI_DSI_WPCR1_CDOFFDL = 1U << 14 ;

  // Field FTXSMDL: Force in TX Stop Mode the Data Lanes
    const uint32_t DSI_DSI_WPCR1_FTXSMDL = 1U << 13 ;

  // Field FTXSMCL: Force in TX Stop Mode the Clock Lane
    const uint32_t DSI_DSI_WPCR1_FTXSMCL = 1U << 12 ;

  // Field HSIDL1: Invert the High-Speed data signal on Data Lane 1
    const uint32_t DSI_DSI_WPCR1_HSIDL1 = 1U << 11 ;

  // Field HSIDL0: Invert the Hight-Speed data signal on Data Lane 0
    const uint32_t DSI_DSI_WPCR1_HSIDL0 = 1U << 10 ;

  // Field HSICL: Invert Hight-Speed data signal on Clock Lane
    const uint32_t DSI_DSI_WPCR1_HSICL = 1U << 9 ;

  // Field SWDL1: Swap Data Lane 1 pins
    const uint32_t DSI_DSI_WPCR1_SWDL1 = 1U << 8 ;

  // Field SWDL0: Swap Data Lane 0 pins
    const uint32_t DSI_DSI_WPCR1_SWDL0 = 1U << 7 ;

  // Field SWCL: Swap Clock Lane pins
    const uint32_t DSI_DSI_WPCR1_SWCL = 1U << 6 ;

  // Field UIX4: Unit Interval multiplied by 4
    inline uint32_t DSI_DSI_WPCR1_UIX4 (const uint32_t inValue) {return (inValue & 0x3FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_WPCR2: DSI Wrapper PHY Configuration Register 2
  #define DSI_DSI_WPCR2 (* ((volatile uint32_t *) (0x40016C00 + 1052)))

  // Field LPRXFT: Low-Power RX low-pass Filtering Tuning
    inline uint32_t DSI_DSI_WPCR2_LPRXFT (const uint32_t inValue) {return (inValue & 0x3U) << 25 ; }

  // Field FLPRXLPM: Forces LP Receiver in Low-Power Mode
    const uint32_t DSI_DSI_WPCR2_FLPRXLPM = 1U << 22 ;

  // Field HSTXSRCDL: High-Speed Transmission Slew Rate Control on Data Lanes
    inline uint32_t DSI_DSI_WPCR2_HSTXSRCDL (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field HSTXSRCCL: High-Speed Transmission Slew Rate Control on Clock Lane
    inline uint32_t DSI_DSI_WPCR2_HSTXSRCCL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field SDCC: SDD Control
    const uint32_t DSI_DSI_WPCR2_SDCC = 1U << 12 ;

  // Field LPSRDL: Low-Power transmission Slew Rate Compensation on Data Lanes
    inline uint32_t DSI_DSI_WPCR2_LPSRDL (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field LPSRCL: Low-Power transmission Slew Rate Compensation on Clock Lane
    inline uint32_t DSI_DSI_WPCR2_LPSRCL (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field HSTXDLL: High-Speed Transmission Delay on Data Lanes
    inline uint32_t DSI_DSI_WPCR2_HSTXDLL (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field HSTXDCL: High-Speed Transmission Delay on Clock Lane
    inline uint32_t DSI_DSI_WPCR2_HSTXDCL (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_WPCR3: DSI Wrapper PHY Configuration Register 3
  #define DSI_DSI_WPCR3 (* ((volatile uint32_t *) (0x40016C00 + 1056)))

  // Field THSTRAIL: tHSTRAIL
    inline uint32_t DSI_DSI_WPCR3_THSTRAIL (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field THSPREP: tHS-PREPARE
    inline uint32_t DSI_DSI_WPCR3_THSPREP (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field TCLKZEO: tCLK-ZERO
    inline uint32_t DSI_DSI_WPCR3_TCLKZEO (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field TCLKPREP: tCLK-PREPARE
    inline uint32_t DSI_DSI_WPCR3_TCLKPREP (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_WPCR4: DSI_WPCR4
  #define DSI_DSI_WPCR4 (* ((volatile uint32_t *) (0x40016C00 + 1060)))

  // Field TLPXC: tLPXC for Clock lane
    inline uint32_t DSI_DSI_WPCR4_TLPXC (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field THSEXIT: tHSEXIT
    inline uint32_t DSI_DSI_WPCR4_THSEXIT (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field TLPXD: tLPX for Data lanes
    inline uint32_t DSI_DSI_WPCR4_TLPXD (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field THSZERO: tHS-ZERO
    inline uint32_t DSI_DSI_WPCR4_THSZERO (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_WPCR5: DSI Wrapper PHY Configuration Register 5
  #define DSI_DSI_WPCR5 (* ((volatile uint32_t *) (0x40016C00 + 1064)))

  // Field THSZERO: tCLK-POST
    inline uint32_t DSI_DSI_WPCR5_THSZERO (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DSI_WRPCR: DSI Wrapper Regulator and PLL Control Register
  #define DSI_DSI_WRPCR (* ((volatile uint32_t *) (0x40016C00 + 1072)))

  // Field REGEN: Regulator Enable
    const uint32_t DSI_DSI_WRPCR_REGEN = 1U << 24 ;

  // Field ODF: PLL Output Division Factor
    inline uint32_t DSI_DSI_WRPCR_ODF (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field IDF: PLL Input Division Factor
    inline uint32_t DSI_DSI_WRPCR_IDF (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field NDIV: PLL Loop Division Factor
    inline uint32_t DSI_DSI_WRPCR_NDIV (const uint32_t inValue) {return (inValue & 0x7FU) << 2 ; }

  // Field PLLEN: PLL Enable
    const uint32_t DSI_DSI_WRPCR_PLLEN = 1U << 0 ;

//------------------------------------------------------------------------------
// Peripheral EXTI: External interrupt/event       controller
//------------------------------------------------------------------------------

//---  Register IMR: Interrupt mask register (EXTI_IMR)
  #define EXTI_IMR (* ((volatile uint32_t *) (0x40013C00 + 0)))

  // Field MR0: Interrupt Mask on line 0
    const uint32_t EXTI_IMR_MR0 = 1U << 0 ;

  // Field MR1: Interrupt Mask on line 1
    const uint32_t EXTI_IMR_MR1 = 1U << 1 ;

  // Field MR2: Interrupt Mask on line 2
    const uint32_t EXTI_IMR_MR2 = 1U << 2 ;

  // Field MR3: Interrupt Mask on line 3
    const uint32_t EXTI_IMR_MR3 = 1U << 3 ;

  // Field MR4: Interrupt Mask on line 4
    const uint32_t EXTI_IMR_MR4 = 1U << 4 ;

  // Field MR5: Interrupt Mask on line 5
    const uint32_t EXTI_IMR_MR5 = 1U << 5 ;

  // Field MR6: Interrupt Mask on line 6
    const uint32_t EXTI_IMR_MR6 = 1U << 6 ;

  // Field MR7: Interrupt Mask on line 7
    const uint32_t EXTI_IMR_MR7 = 1U << 7 ;

  // Field MR8: Interrupt Mask on line 8
    const uint32_t EXTI_IMR_MR8 = 1U << 8 ;

  // Field MR9: Interrupt Mask on line 9
    const uint32_t EXTI_IMR_MR9 = 1U << 9 ;

  // Field MR10: Interrupt Mask on line 10
    const uint32_t EXTI_IMR_MR10 = 1U << 10 ;

  // Field MR11: Interrupt Mask on line 11
    const uint32_t EXTI_IMR_MR11 = 1U << 11 ;

  // Field MR12: Interrupt Mask on line 12
    const uint32_t EXTI_IMR_MR12 = 1U << 12 ;

  // Field MR13: Interrupt Mask on line 13
    const uint32_t EXTI_IMR_MR13 = 1U << 13 ;

  // Field MR14: Interrupt Mask on line 14
    const uint32_t EXTI_IMR_MR14 = 1U << 14 ;

  // Field MR15: Interrupt Mask on line 15
    const uint32_t EXTI_IMR_MR15 = 1U << 15 ;

  // Field MR16: Interrupt Mask on line 16
    const uint32_t EXTI_IMR_MR16 = 1U << 16 ;

  // Field MR17: Interrupt Mask on line 17
    const uint32_t EXTI_IMR_MR17 = 1U << 17 ;

  // Field MR18: Interrupt Mask on line 18
    const uint32_t EXTI_IMR_MR18 = 1U << 18 ;

  // Field MR19: Interrupt Mask on line 19
    const uint32_t EXTI_IMR_MR19 = 1U << 19 ;

  // Field MR20: Interrupt Mask on line 20
    const uint32_t EXTI_IMR_MR20 = 1U << 20 ;

  // Field MR21: Interrupt Mask on line 21
    const uint32_t EXTI_IMR_MR21 = 1U << 21 ;

  // Field MR22: Interrupt Mask on line 22
    const uint32_t EXTI_IMR_MR22 = 1U << 22 ;

//------------------------------------------------------------------------------

//---  Register EMR: Event mask register (EXTI_EMR)
  #define EXTI_EMR (* ((volatile uint32_t *) (0x40013C00 + 4)))

  // Field MR0: Event Mask on line 0
    const uint32_t EXTI_EMR_MR0 = 1U << 0 ;

  // Field MR1: Event Mask on line 1
    const uint32_t EXTI_EMR_MR1 = 1U << 1 ;

  // Field MR2: Event Mask on line 2
    const uint32_t EXTI_EMR_MR2 = 1U << 2 ;

  // Field MR3: Event Mask on line 3
    const uint32_t EXTI_EMR_MR3 = 1U << 3 ;

  // Field MR4: Event Mask on line 4
    const uint32_t EXTI_EMR_MR4 = 1U << 4 ;

  // Field MR5: Event Mask on line 5
    const uint32_t EXTI_EMR_MR5 = 1U << 5 ;

  // Field MR6: Event Mask on line 6
    const uint32_t EXTI_EMR_MR6 = 1U << 6 ;

  // Field MR7: Event Mask on line 7
    const uint32_t EXTI_EMR_MR7 = 1U << 7 ;

  // Field MR8: Event Mask on line 8
    const uint32_t EXTI_EMR_MR8 = 1U << 8 ;

  // Field MR9: Event Mask on line 9
    const uint32_t EXTI_EMR_MR9 = 1U << 9 ;

  // Field MR10: Event Mask on line 10
    const uint32_t EXTI_EMR_MR10 = 1U << 10 ;

  // Field MR11: Event Mask on line 11
    const uint32_t EXTI_EMR_MR11 = 1U << 11 ;

  // Field MR12: Event Mask on line 12
    const uint32_t EXTI_EMR_MR12 = 1U << 12 ;

  // Field MR13: Event Mask on line 13
    const uint32_t EXTI_EMR_MR13 = 1U << 13 ;

  // Field MR14: Event Mask on line 14
    const uint32_t EXTI_EMR_MR14 = 1U << 14 ;

  // Field MR15: Event Mask on line 15
    const uint32_t EXTI_EMR_MR15 = 1U << 15 ;

  // Field MR16: Event Mask on line 16
    const uint32_t EXTI_EMR_MR16 = 1U << 16 ;

  // Field MR17: Event Mask on line 17
    const uint32_t EXTI_EMR_MR17 = 1U << 17 ;

  // Field MR18: Event Mask on line 18
    const uint32_t EXTI_EMR_MR18 = 1U << 18 ;

  // Field MR19: Event Mask on line 19
    const uint32_t EXTI_EMR_MR19 = 1U << 19 ;

  // Field MR20: Event Mask on line 20
    const uint32_t EXTI_EMR_MR20 = 1U << 20 ;

  // Field MR21: Event Mask on line 21
    const uint32_t EXTI_EMR_MR21 = 1U << 21 ;

  // Field MR22: Event Mask on line 22
    const uint32_t EXTI_EMR_MR22 = 1U << 22 ;

//------------------------------------------------------------------------------

//---  Register RTSR: Rising Trigger selection register (EXTI_RTSR)
  #define EXTI_RTSR (* ((volatile uint32_t *) (0x40013C00 + 8)))

  // Field TR0: Rising trigger event configuration of line 0
    const uint32_t EXTI_RTSR_TR0 = 1U << 0 ;

  // Field TR1: Rising trigger event configuration of line 1
    const uint32_t EXTI_RTSR_TR1 = 1U << 1 ;

  // Field TR2: Rising trigger event configuration of line 2
    const uint32_t EXTI_RTSR_TR2 = 1U << 2 ;

  // Field TR3: Rising trigger event configuration of line 3
    const uint32_t EXTI_RTSR_TR3 = 1U << 3 ;

  // Field TR4: Rising trigger event configuration of line 4
    const uint32_t EXTI_RTSR_TR4 = 1U << 4 ;

  // Field TR5: Rising trigger event configuration of line 5
    const uint32_t EXTI_RTSR_TR5 = 1U << 5 ;

  // Field TR6: Rising trigger event configuration of line 6
    const uint32_t EXTI_RTSR_TR6 = 1U << 6 ;

  // Field TR7: Rising trigger event configuration of line 7
    const uint32_t EXTI_RTSR_TR7 = 1U << 7 ;

  // Field TR8: Rising trigger event configuration of line 8
    const uint32_t EXTI_RTSR_TR8 = 1U << 8 ;

  // Field TR9: Rising trigger event configuration of line 9
    const uint32_t EXTI_RTSR_TR9 = 1U << 9 ;

  // Field TR10: Rising trigger event configuration of line 10
    const uint32_t EXTI_RTSR_TR10 = 1U << 10 ;

  // Field TR11: Rising trigger event configuration of line 11
    const uint32_t EXTI_RTSR_TR11 = 1U << 11 ;

  // Field TR12: Rising trigger event configuration of line 12
    const uint32_t EXTI_RTSR_TR12 = 1U << 12 ;

  // Field TR13: Rising trigger event configuration of line 13
    const uint32_t EXTI_RTSR_TR13 = 1U << 13 ;

  // Field TR14: Rising trigger event configuration of line 14
    const uint32_t EXTI_RTSR_TR14 = 1U << 14 ;

  // Field TR15: Rising trigger event configuration of line 15
    const uint32_t EXTI_RTSR_TR15 = 1U << 15 ;

  // Field TR16: Rising trigger event configuration of line 16
    const uint32_t EXTI_RTSR_TR16 = 1U << 16 ;

  // Field TR17: Rising trigger event configuration of line 17
    const uint32_t EXTI_RTSR_TR17 = 1U << 17 ;

  // Field TR18: Rising trigger event configuration of line 18
    const uint32_t EXTI_RTSR_TR18 = 1U << 18 ;

  // Field TR19: Rising trigger event configuration of line 19
    const uint32_t EXTI_RTSR_TR19 = 1U << 19 ;

  // Field TR20: Rising trigger event configuration of line 20
    const uint32_t EXTI_RTSR_TR20 = 1U << 20 ;

  // Field TR21: Rising trigger event configuration of line 21
    const uint32_t EXTI_RTSR_TR21 = 1U << 21 ;

  // Field TR22: Rising trigger event configuration of line 22
    const uint32_t EXTI_RTSR_TR22 = 1U << 22 ;

//------------------------------------------------------------------------------

//---  Register FTSR: Falling Trigger selection register (EXTI_FTSR)
  #define EXTI_FTSR (* ((volatile uint32_t *) (0x40013C00 + 12)))

  // Field TR0: Falling trigger event configuration of line 0
    const uint32_t EXTI_FTSR_TR0 = 1U << 0 ;

  // Field TR1: Falling trigger event configuration of line 1
    const uint32_t EXTI_FTSR_TR1 = 1U << 1 ;

  // Field TR2: Falling trigger event configuration of line 2
    const uint32_t EXTI_FTSR_TR2 = 1U << 2 ;

  // Field TR3: Falling trigger event configuration of line 3
    const uint32_t EXTI_FTSR_TR3 = 1U << 3 ;

  // Field TR4: Falling trigger event configuration of line 4
    const uint32_t EXTI_FTSR_TR4 = 1U << 4 ;

  // Field TR5: Falling trigger event configuration of line 5
    const uint32_t EXTI_FTSR_TR5 = 1U << 5 ;

  // Field TR6: Falling trigger event configuration of line 6
    const uint32_t EXTI_FTSR_TR6 = 1U << 6 ;

  // Field TR7: Falling trigger event configuration of line 7
    const uint32_t EXTI_FTSR_TR7 = 1U << 7 ;

  // Field TR8: Falling trigger event configuration of line 8
    const uint32_t EXTI_FTSR_TR8 = 1U << 8 ;

  // Field TR9: Falling trigger event configuration of line 9
    const uint32_t EXTI_FTSR_TR9 = 1U << 9 ;

  // Field TR10: Falling trigger event configuration of line 10
    const uint32_t EXTI_FTSR_TR10 = 1U << 10 ;

  // Field TR11: Falling trigger event configuration of line 11
    const uint32_t EXTI_FTSR_TR11 = 1U << 11 ;

  // Field TR12: Falling trigger event configuration of line 12
    const uint32_t EXTI_FTSR_TR12 = 1U << 12 ;

  // Field TR13: Falling trigger event configuration of line 13
    const uint32_t EXTI_FTSR_TR13 = 1U << 13 ;

  // Field TR14: Falling trigger event configuration of line 14
    const uint32_t EXTI_FTSR_TR14 = 1U << 14 ;

  // Field TR15: Falling trigger event configuration of line 15
    const uint32_t EXTI_FTSR_TR15 = 1U << 15 ;

  // Field TR16: Falling trigger event configuration of line 16
    const uint32_t EXTI_FTSR_TR16 = 1U << 16 ;

  // Field TR17: Falling trigger event configuration of line 17
    const uint32_t EXTI_FTSR_TR17 = 1U << 17 ;

  // Field TR18: Falling trigger event configuration of line 18
    const uint32_t EXTI_FTSR_TR18 = 1U << 18 ;

  // Field TR19: Falling trigger event configuration of line 19
    const uint32_t EXTI_FTSR_TR19 = 1U << 19 ;

  // Field TR20: Falling trigger event configuration of line 20
    const uint32_t EXTI_FTSR_TR20 = 1U << 20 ;

  // Field TR21: Falling trigger event configuration of line 21
    const uint32_t EXTI_FTSR_TR21 = 1U << 21 ;

  // Field TR22: Falling trigger event configuration of line 22
    const uint32_t EXTI_FTSR_TR22 = 1U << 22 ;

//------------------------------------------------------------------------------

//---  Register SWIER: Software interrupt event register (EXTI_SWIER)
  #define EXTI_SWIER (* ((volatile uint32_t *) (0x40013C00 + 16)))

  // Field SWIER0: Software Interrupt on line 0
    const uint32_t EXTI_SWIER_SWIER0 = 1U << 0 ;

  // Field SWIER1: Software Interrupt on line 1
    const uint32_t EXTI_SWIER_SWIER1 = 1U << 1 ;

  // Field SWIER2: Software Interrupt on line 2
    const uint32_t EXTI_SWIER_SWIER2 = 1U << 2 ;

  // Field SWIER3: Software Interrupt on line 3
    const uint32_t EXTI_SWIER_SWIER3 = 1U << 3 ;

  // Field SWIER4: Software Interrupt on line 4
    const uint32_t EXTI_SWIER_SWIER4 = 1U << 4 ;

  // Field SWIER5: Software Interrupt on line 5
    const uint32_t EXTI_SWIER_SWIER5 = 1U << 5 ;

  // Field SWIER6: Software Interrupt on line 6
    const uint32_t EXTI_SWIER_SWIER6 = 1U << 6 ;

  // Field SWIER7: Software Interrupt on line 7
    const uint32_t EXTI_SWIER_SWIER7 = 1U << 7 ;

  // Field SWIER8: Software Interrupt on line 8
    const uint32_t EXTI_SWIER_SWIER8 = 1U << 8 ;

  // Field SWIER9: Software Interrupt on line 9
    const uint32_t EXTI_SWIER_SWIER9 = 1U << 9 ;

  // Field SWIER10: Software Interrupt on line 10
    const uint32_t EXTI_SWIER_SWIER10 = 1U << 10 ;

  // Field SWIER11: Software Interrupt on line 11
    const uint32_t EXTI_SWIER_SWIER11 = 1U << 11 ;

  // Field SWIER12: Software Interrupt on line 12
    const uint32_t EXTI_SWIER_SWIER12 = 1U << 12 ;

  // Field SWIER13: Software Interrupt on line 13
    const uint32_t EXTI_SWIER_SWIER13 = 1U << 13 ;

  // Field SWIER14: Software Interrupt on line 14
    const uint32_t EXTI_SWIER_SWIER14 = 1U << 14 ;

  // Field SWIER15: Software Interrupt on line 15
    const uint32_t EXTI_SWIER_SWIER15 = 1U << 15 ;

  // Field SWIER16: Software Interrupt on line 16
    const uint32_t EXTI_SWIER_SWIER16 = 1U << 16 ;

  // Field SWIER17: Software Interrupt on line 17
    const uint32_t EXTI_SWIER_SWIER17 = 1U << 17 ;

  // Field SWIER18: Software Interrupt on line 18
    const uint32_t EXTI_SWIER_SWIER18 = 1U << 18 ;

  // Field SWIER19: Software Interrupt on line 19
    const uint32_t EXTI_SWIER_SWIER19 = 1U << 19 ;

  // Field SWIER20: Software Interrupt on line 20
    const uint32_t EXTI_SWIER_SWIER20 = 1U << 20 ;

  // Field SWIER21: Software Interrupt on line 21
    const uint32_t EXTI_SWIER_SWIER21 = 1U << 21 ;

  // Field SWIER22: Software Interrupt on line 22
    const uint32_t EXTI_SWIER_SWIER22 = 1U << 22 ;

//------------------------------------------------------------------------------

//---  Register PR: Pending register (EXTI_PR)
  #define EXTI_PR (* ((volatile uint32_t *) (0x40013C00 + 20)))

  // Field PR0: Pending bit 0
    const uint32_t EXTI_PR_PR0 = 1U << 0 ;

  // Field PR1: Pending bit 1
    const uint32_t EXTI_PR_PR1 = 1U << 1 ;

  // Field PR2: Pending bit 2
    const uint32_t EXTI_PR_PR2 = 1U << 2 ;

  // Field PR3: Pending bit 3
    const uint32_t EXTI_PR_PR3 = 1U << 3 ;

  // Field PR4: Pending bit 4
    const uint32_t EXTI_PR_PR4 = 1U << 4 ;

  // Field PR5: Pending bit 5
    const uint32_t EXTI_PR_PR5 = 1U << 5 ;

  // Field PR6: Pending bit 6
    const uint32_t EXTI_PR_PR6 = 1U << 6 ;

  // Field PR7: Pending bit 7
    const uint32_t EXTI_PR_PR7 = 1U << 7 ;

  // Field PR8: Pending bit 8
    const uint32_t EXTI_PR_PR8 = 1U << 8 ;

  // Field PR9: Pending bit 9
    const uint32_t EXTI_PR_PR9 = 1U << 9 ;

  // Field PR10: Pending bit 10
    const uint32_t EXTI_PR_PR10 = 1U << 10 ;

  // Field PR11: Pending bit 11
    const uint32_t EXTI_PR_PR11 = 1U << 11 ;

  // Field PR12: Pending bit 12
    const uint32_t EXTI_PR_PR12 = 1U << 12 ;

  // Field PR13: Pending bit 13
    const uint32_t EXTI_PR_PR13 = 1U << 13 ;

  // Field PR14: Pending bit 14
    const uint32_t EXTI_PR_PR14 = 1U << 14 ;

  // Field PR15: Pending bit 15
    const uint32_t EXTI_PR_PR15 = 1U << 15 ;

  // Field PR16: Pending bit 16
    const uint32_t EXTI_PR_PR16 = 1U << 16 ;

  // Field PR17: Pending bit 17
    const uint32_t EXTI_PR_PR17 = 1U << 17 ;

  // Field PR18: Pending bit 18
    const uint32_t EXTI_PR_PR18 = 1U << 18 ;

  // Field PR19: Pending bit 19
    const uint32_t EXTI_PR_PR19 = 1U << 19 ;

  // Field PR20: Pending bit 20
    const uint32_t EXTI_PR_PR20 = 1U << 20 ;

  // Field PR21: Pending bit 21
    const uint32_t EXTI_PR_PR21 = 1U << 21 ;

  // Field PR22: Pending bit 22
    const uint32_t EXTI_PR_PR22 = 1U << 22 ;

//------------------------------------------------------------------------------
// Peripheral Ethernet_DMA: Ethernet: DMA controller operation
//------------------------------------------------------------------------------

//---  Register DMABMR: Ethernet DMA bus mode register
  #define Ethernet_DMA_DMABMR (* ((volatile uint32_t *) (0x40029000 + 0)))

  // Field SR: SR
    const uint32_t Ethernet_DMA_DMABMR_SR = 1U << 0 ;

  // Field DA: DA
    const uint32_t Ethernet_DMA_DMABMR_DA = 1U << 1 ;

  // Field DSL: DSL
    inline uint32_t Ethernet_DMA_DMABMR_DSL (const uint32_t inValue) {return (inValue & 0x1FU) << 2 ; }

  // Field EDFE: EDFE
    const uint32_t Ethernet_DMA_DMABMR_EDFE = 1U << 7 ;

  // Field PBL: PBL
    inline uint32_t Ethernet_DMA_DMABMR_PBL (const uint32_t inValue) {return (inValue & 0x3FU) << 8 ; }

  // Field RTPR: RTPR
    inline uint32_t Ethernet_DMA_DMABMR_RTPR (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field FB: FB
    const uint32_t Ethernet_DMA_DMABMR_FB = 1U << 16 ;

  // Field RDP: RDP
    inline uint32_t Ethernet_DMA_DMABMR_RDP (const uint32_t inValue) {return (inValue & 0x3FU) << 17 ; }

  // Field USP: USP
    const uint32_t Ethernet_DMA_DMABMR_USP = 1U << 23 ;

  // Field FPM: FPM
    const uint32_t Ethernet_DMA_DMABMR_FPM = 1U << 24 ;

  // Field AAB: AAB
    const uint32_t Ethernet_DMA_DMABMR_AAB = 1U << 25 ;

  // Field MB: MB
    const uint32_t Ethernet_DMA_DMABMR_MB = 1U << 26 ;

//------------------------------------------------------------------------------

//---  Register DMATPDR: Ethernet DMA transmit poll demand register
  #define Ethernet_DMA_DMATPDR (* ((volatile uint32_t *) (0x40029000 + 4)))

  // Field TPD: TPD
    inline uint32_t Ethernet_DMA_DMATPDR_TPD (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMARPDR: EHERNET DMA receive poll demand register
  #define Ethernet_DMA_DMARPDR (* ((volatile uint32_t *) (0x40029000 + 8)))

  // Field RPD: RPD
    inline uint32_t Ethernet_DMA_DMARPDR_RPD (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMARDLAR: Ethernet DMA receive descriptor list address register
  #define Ethernet_DMA_DMARDLAR (* ((volatile uint32_t *) (0x40029000 + 12)))

  // Field SRL: SRL
    inline uint32_t Ethernet_DMA_DMARDLAR_SRL (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMATDLAR: Ethernet DMA transmit descriptor list address register
  #define Ethernet_DMA_DMATDLAR (* ((volatile uint32_t *) (0x40029000 + 16)))

  // Field STL: STL
    inline uint32_t Ethernet_DMA_DMATDLAR_STL (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMASR: Ethernet DMA status register
  #define Ethernet_DMA_DMASR (* ((volatile uint32_t *) (0x40029000 + 20)))

  // Field TS: TS
    const uint32_t Ethernet_DMA_DMASR_TS = 1U << 0 ;

  // Field TPSS: TPSS
    const uint32_t Ethernet_DMA_DMASR_TPSS = 1U << 1 ;

  // Field TBUS: TBUS
    const uint32_t Ethernet_DMA_DMASR_TBUS = 1U << 2 ;

  // Field TJTS: TJTS
    const uint32_t Ethernet_DMA_DMASR_TJTS = 1U << 3 ;

  // Field ROS: ROS
    const uint32_t Ethernet_DMA_DMASR_ROS = 1U << 4 ;

  // Field TUS: TUS
    const uint32_t Ethernet_DMA_DMASR_TUS = 1U << 5 ;

  // Field RS: RS
    const uint32_t Ethernet_DMA_DMASR_RS = 1U << 6 ;

  // Field RBUS: RBUS
    const uint32_t Ethernet_DMA_DMASR_RBUS = 1U << 7 ;

  // Field RPSS: RPSS
    const uint32_t Ethernet_DMA_DMASR_RPSS = 1U << 8 ;

  // Field PWTS: PWTS
    const uint32_t Ethernet_DMA_DMASR_PWTS = 1U << 9 ;

  // Field ETS: ETS
    const uint32_t Ethernet_DMA_DMASR_ETS = 1U << 10 ;

  // Field FBES: FBES
    const uint32_t Ethernet_DMA_DMASR_FBES = 1U << 13 ;

  // Field ERS: ERS
    const uint32_t Ethernet_DMA_DMASR_ERS = 1U << 14 ;

  // Field AIS: AIS
    const uint32_t Ethernet_DMA_DMASR_AIS = 1U << 15 ;

  // Field NIS: NIS
    const uint32_t Ethernet_DMA_DMASR_NIS = 1U << 16 ;

  // Field RPS: RPS
    inline uint32_t Ethernet_DMA_DMASR_RPS (const uint32_t inValue) {return (inValue & 0x7U) << 17 ; }

  // Field TPS: TPS
    inline uint32_t Ethernet_DMA_DMASR_TPS (const uint32_t inValue) {return (inValue & 0x7U) << 20 ; }

  // Field EBS: EBS
    inline uint32_t Ethernet_DMA_DMASR_EBS (const uint32_t inValue) {return (inValue & 0x7U) << 23 ; }

  // Field MMCS: MMCS
    const uint32_t Ethernet_DMA_DMASR_MMCS = 1U << 27 ;

  // Field PMTS: PMTS
    const uint32_t Ethernet_DMA_DMASR_PMTS = 1U << 28 ;

  // Field TSTS: TSTS
    const uint32_t Ethernet_DMA_DMASR_TSTS = 1U << 29 ;

//------------------------------------------------------------------------------

//---  Register DMAOMR: Ethernet DMA operation mode register
  #define Ethernet_DMA_DMAOMR (* ((volatile uint32_t *) (0x40029000 + 24)))

  // Field SR: SR
    const uint32_t Ethernet_DMA_DMAOMR_SR = 1U << 1 ;

  // Field OSF: OSF
    const uint32_t Ethernet_DMA_DMAOMR_OSF = 1U << 2 ;

  // Field RTC: RTC
    inline uint32_t Ethernet_DMA_DMAOMR_RTC (const uint32_t inValue) {return (inValue & 0x3U) << 3 ; }

  // Field FUGF: FUGF
    const uint32_t Ethernet_DMA_DMAOMR_FUGF = 1U << 6 ;

  // Field FEF: FEF
    const uint32_t Ethernet_DMA_DMAOMR_FEF = 1U << 7 ;

  // Field ST: ST
    const uint32_t Ethernet_DMA_DMAOMR_ST = 1U << 13 ;

  // Field TTC: TTC
    inline uint32_t Ethernet_DMA_DMAOMR_TTC (const uint32_t inValue) {return (inValue & 0x7U) << 14 ; }

  // Field FTF: FTF
    const uint32_t Ethernet_DMA_DMAOMR_FTF = 1U << 20 ;

  // Field TSF: TSF
    const uint32_t Ethernet_DMA_DMAOMR_TSF = 1U << 21 ;

  // Field DFRF: DFRF
    const uint32_t Ethernet_DMA_DMAOMR_DFRF = 1U << 24 ;

  // Field RSF: RSF
    const uint32_t Ethernet_DMA_DMAOMR_RSF = 1U << 25 ;

  // Field DTCEFD: DTCEFD
    const uint32_t Ethernet_DMA_DMAOMR_DTCEFD = 1U << 26 ;

//------------------------------------------------------------------------------

//---  Register DMAIER: Ethernet DMA interrupt enable register
  #define Ethernet_DMA_DMAIER (* ((volatile uint32_t *) (0x40029000 + 28)))

  // Field TIE: TIE
    const uint32_t Ethernet_DMA_DMAIER_TIE = 1U << 0 ;

  // Field TPSIE: TPSIE
    const uint32_t Ethernet_DMA_DMAIER_TPSIE = 1U << 1 ;

  // Field TBUIE: TBUIE
    const uint32_t Ethernet_DMA_DMAIER_TBUIE = 1U << 2 ;

  // Field TJTIE: TJTIE
    const uint32_t Ethernet_DMA_DMAIER_TJTIE = 1U << 3 ;

  // Field ROIE: ROIE
    const uint32_t Ethernet_DMA_DMAIER_ROIE = 1U << 4 ;

  // Field TUIE: TUIE
    const uint32_t Ethernet_DMA_DMAIER_TUIE = 1U << 5 ;

  // Field RIE: RIE
    const uint32_t Ethernet_DMA_DMAIER_RIE = 1U << 6 ;

  // Field RBUIE: RBUIE
    const uint32_t Ethernet_DMA_DMAIER_RBUIE = 1U << 7 ;

  // Field RPSIE: RPSIE
    const uint32_t Ethernet_DMA_DMAIER_RPSIE = 1U << 8 ;

  // Field RWTIE: RWTIE
    const uint32_t Ethernet_DMA_DMAIER_RWTIE = 1U << 9 ;

  // Field ETIE: ETIE
    const uint32_t Ethernet_DMA_DMAIER_ETIE = 1U << 10 ;

  // Field FBEIE: FBEIE
    const uint32_t Ethernet_DMA_DMAIER_FBEIE = 1U << 13 ;

  // Field ERIE: ERIE
    const uint32_t Ethernet_DMA_DMAIER_ERIE = 1U << 14 ;

  // Field AISE: AISE
    const uint32_t Ethernet_DMA_DMAIER_AISE = 1U << 15 ;

  // Field NISE: NISE
    const uint32_t Ethernet_DMA_DMAIER_NISE = 1U << 16 ;

//------------------------------------------------------------------------------

//---  Register DMAMFBOCR: Ethernet DMA missed frame and buffer overflow counter register
  #define Ethernet_DMA_DMAMFBOCR (* ((volatile uint32_t *) (0x40029000 + 32)))

  // Field MFC: MFC
    inline uint32_t Ethernet_DMA_DMAMFBOCR_MFC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field OMFC: OMFC
    const uint32_t Ethernet_DMA_DMAMFBOCR_OMFC = 1U << 16 ;

  // Field MFA: MFA
    inline uint32_t Ethernet_DMA_DMAMFBOCR_MFA (const uint32_t inValue) {return (inValue & 0x7FFU) << 17 ; }

  // Field OFOC: OFOC
    const uint32_t Ethernet_DMA_DMAMFBOCR_OFOC = 1U << 28 ;

//------------------------------------------------------------------------------

//---  Register DMARSWTR: Ethernet DMA receive status watchdog timer register
  #define Ethernet_DMA_DMARSWTR (* ((volatile uint32_t *) (0x40029000 + 36)))

  // Field RSWTC: RSWTC
    inline uint32_t Ethernet_DMA_DMARSWTR_RSWTC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMACHTDR: Ethernet DMA current host transmit descriptor register
  #define Ethernet_DMA_DMACHTDR (* ((const volatile uint32_t *) (0x40029000 + 72)))

  // Field HTDAP: HTDAP
    inline uint32_t Ethernet_DMA_DMACHTDR_HTDAP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMACHRDR: Ethernet DMA current host receive descriptor register
  #define Ethernet_DMA_DMACHRDR (* ((const volatile uint32_t *) (0x40029000 + 76)))

  // Field HRDAP: HRDAP
    inline uint32_t Ethernet_DMA_DMACHRDR_HRDAP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMACHTBAR: Ethernet DMA current host transmit buffer address register
  #define Ethernet_DMA_DMACHTBAR (* ((const volatile uint32_t *) (0x40029000 + 80)))

  // Field HTBAP: HTBAP
    inline uint32_t Ethernet_DMA_DMACHTBAR_HTBAP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMACHRBAR: Ethernet DMA current host receive buffer address register
  #define Ethernet_DMA_DMACHRBAR (* ((const volatile uint32_t *) (0x40029000 + 84)))

  // Field HRBAP: HRBAP
    inline uint32_t Ethernet_DMA_DMACHRBAR_HRBAP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral Ethernet_MAC: Ethernet: media access control       (MAC)
//------------------------------------------------------------------------------

//---  Register MACCR: Ethernet MAC configuration register
  #define Ethernet_MAC_MACCR (* ((volatile uint32_t *) (0x40028000 + 0)))

  // Field RE: RE
    const uint32_t Ethernet_MAC_MACCR_RE = 1U << 2 ;

  // Field TE: TE
    const uint32_t Ethernet_MAC_MACCR_TE = 1U << 3 ;

  // Field DC: DC
    const uint32_t Ethernet_MAC_MACCR_DC = 1U << 4 ;

  // Field BL: BL
    inline uint32_t Ethernet_MAC_MACCR_BL (const uint32_t inValue) {return (inValue & 0x3U) << 5 ; }

  // Field APCS: APCS
    const uint32_t Ethernet_MAC_MACCR_APCS = 1U << 7 ;

  // Field RD: RD
    const uint32_t Ethernet_MAC_MACCR_RD = 1U << 9 ;

  // Field IPCO: IPCO
    const uint32_t Ethernet_MAC_MACCR_IPCO = 1U << 10 ;

  // Field DM: DM
    const uint32_t Ethernet_MAC_MACCR_DM = 1U << 11 ;

  // Field LM: LM
    const uint32_t Ethernet_MAC_MACCR_LM = 1U << 12 ;

  // Field ROD: ROD
    const uint32_t Ethernet_MAC_MACCR_ROD = 1U << 13 ;

  // Field FES: FES
    const uint32_t Ethernet_MAC_MACCR_FES = 1U << 14 ;

  // Field CSD: CSD
    const uint32_t Ethernet_MAC_MACCR_CSD = 1U << 16 ;

  // Field IFG: IFG
    inline uint32_t Ethernet_MAC_MACCR_IFG (const uint32_t inValue) {return (inValue & 0x7U) << 17 ; }

  // Field JD: JD
    const uint32_t Ethernet_MAC_MACCR_JD = 1U << 22 ;

  // Field WD: WD
    const uint32_t Ethernet_MAC_MACCR_WD = 1U << 23 ;

  // Field CSTF: CSTF
    const uint32_t Ethernet_MAC_MACCR_CSTF = 1U << 25 ;

//------------------------------------------------------------------------------

//---  Register MACFFR: Ethernet MAC frame filter register
  #define Ethernet_MAC_MACFFR (* ((volatile uint32_t *) (0x40028000 + 4)))

  // Field PM: PM
    const uint32_t Ethernet_MAC_MACFFR_PM = 1U << 0 ;

  // Field HU: HU
    const uint32_t Ethernet_MAC_MACFFR_HU = 1U << 1 ;

  // Field HM: HM
    const uint32_t Ethernet_MAC_MACFFR_HM = 1U << 2 ;

  // Field DAIF: DAIF
    const uint32_t Ethernet_MAC_MACFFR_DAIF = 1U << 3 ;

  // Field RAM: RAM
    const uint32_t Ethernet_MAC_MACFFR_RAM = 1U << 4 ;

  // Field BFD: BFD
    const uint32_t Ethernet_MAC_MACFFR_BFD = 1U << 5 ;

  // Field PCF: PCF
    const uint32_t Ethernet_MAC_MACFFR_PCF = 1U << 6 ;

  // Field SAIF: SAIF
    const uint32_t Ethernet_MAC_MACFFR_SAIF = 1U << 7 ;

  // Field SAF: SAF
    const uint32_t Ethernet_MAC_MACFFR_SAF = 1U << 8 ;

  // Field HPF: HPF
    const uint32_t Ethernet_MAC_MACFFR_HPF = 1U << 9 ;

  // Field RA: RA
    const uint32_t Ethernet_MAC_MACFFR_RA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register MACHTHR: Ethernet MAC hash table high register
  #define Ethernet_MAC_MACHTHR (* ((volatile uint32_t *) (0x40028000 + 8)))

  // Field HTH: HTH
    inline uint32_t Ethernet_MAC_MACHTHR_HTH (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MACHTLR: Ethernet MAC hash table low register
  #define Ethernet_MAC_MACHTLR (* ((volatile uint32_t *) (0x40028000 + 12)))

  // Field HTL: HTL
    inline uint32_t Ethernet_MAC_MACHTLR_HTL (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MACMIIAR: Ethernet MAC MII address register
  #define Ethernet_MAC_MACMIIAR (* ((volatile uint32_t *) (0x40028000 + 16)))

  // Field MB: MB
    const uint32_t Ethernet_MAC_MACMIIAR_MB = 1U << 0 ;

  // Field MW: MW
    const uint32_t Ethernet_MAC_MACMIIAR_MW = 1U << 1 ;

  // Field CR: CR
    inline uint32_t Ethernet_MAC_MACMIIAR_CR (const uint32_t inValue) {return (inValue & 0x7U) << 2 ; }

  // Field MR: MR
    inline uint32_t Ethernet_MAC_MACMIIAR_MR (const uint32_t inValue) {return (inValue & 0x1FU) << 6 ; }

  // Field PA: PA
    inline uint32_t Ethernet_MAC_MACMIIAR_PA (const uint32_t inValue) {return (inValue & 0x1FU) << 11 ; }

//------------------------------------------------------------------------------

//---  Register MACMIIDR: Ethernet MAC MII data register
  #define Ethernet_MAC_MACMIIDR (* ((volatile uint32_t *) (0x40028000 + 20)))

  // Field TD: TD
    inline uint32_t Ethernet_MAC_MACMIIDR_TD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MACFCR: Ethernet MAC flow control register
  #define Ethernet_MAC_MACFCR (* ((volatile uint32_t *) (0x40028000 + 24)))

  // Field FCB: FCB
    const uint32_t Ethernet_MAC_MACFCR_FCB = 1U << 0 ;

  // Field TFCE: TFCE
    const uint32_t Ethernet_MAC_MACFCR_TFCE = 1U << 1 ;

  // Field RFCE: RFCE
    const uint32_t Ethernet_MAC_MACFCR_RFCE = 1U << 2 ;

  // Field UPFD: UPFD
    const uint32_t Ethernet_MAC_MACFCR_UPFD = 1U << 3 ;

  // Field PLT: PLT
    inline uint32_t Ethernet_MAC_MACFCR_PLT (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field ZQPD: ZQPD
    const uint32_t Ethernet_MAC_MACFCR_ZQPD = 1U << 7 ;

  // Field PT: PT
    inline uint32_t Ethernet_MAC_MACFCR_PT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register MACVLANTR: Ethernet MAC VLAN tag register
  #define Ethernet_MAC_MACVLANTR (* ((volatile uint32_t *) (0x40028000 + 28)))

  // Field VLANTI: VLANTI
    inline uint32_t Ethernet_MAC_MACVLANTR_VLANTI (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field VLANTC: VLANTC
    const uint32_t Ethernet_MAC_MACVLANTR_VLANTC = 1U << 16 ;

//------------------------------------------------------------------------------

//---  Register MACPMTCSR: Ethernet MAC PMT control and status register
  #define Ethernet_MAC_MACPMTCSR (* ((volatile uint32_t *) (0x40028000 + 44)))

  // Field PD: PD
    const uint32_t Ethernet_MAC_MACPMTCSR_PD = 1U << 0 ;

  // Field MPE: MPE
    const uint32_t Ethernet_MAC_MACPMTCSR_MPE = 1U << 1 ;

  // Field WFE: WFE
    const uint32_t Ethernet_MAC_MACPMTCSR_WFE = 1U << 2 ;

  // Field MPR: MPR
    const uint32_t Ethernet_MAC_MACPMTCSR_MPR = 1U << 5 ;

  // Field WFR: WFR
    const uint32_t Ethernet_MAC_MACPMTCSR_WFR = 1U << 6 ;

  // Field GU: GU
    const uint32_t Ethernet_MAC_MACPMTCSR_GU = 1U << 9 ;

  // Field WFFRPR: WFFRPR
    const uint32_t Ethernet_MAC_MACPMTCSR_WFFRPR = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register MACDBGR: Ethernet MAC debug register
  #define Ethernet_MAC_MACDBGR (* ((const volatile uint32_t *) (0x40028000 + 52)))

  // Field CR: CR
    const uint32_t Ethernet_MAC_MACDBGR_CR = 1U << 0 ;

  // Field CSR: CSR
    const uint32_t Ethernet_MAC_MACDBGR_CSR = 1U << 1 ;

  // Field ROR: ROR
    const uint32_t Ethernet_MAC_MACDBGR_ROR = 1U << 2 ;

  // Field MCF: MCF
    const uint32_t Ethernet_MAC_MACDBGR_MCF = 1U << 3 ;

  // Field MCP: MCP
    const uint32_t Ethernet_MAC_MACDBGR_MCP = 1U << 4 ;

  // Field MCFHP: MCFHP
    const uint32_t Ethernet_MAC_MACDBGR_MCFHP = 1U << 5 ;

//------------------------------------------------------------------------------

//---  Register MACSR: Ethernet MAC interrupt status register
  #define Ethernet_MAC_MACSR (* ((volatile uint32_t *) (0x40028000 + 56)))

  // Field PMTS: PMTS
    const uint32_t Ethernet_MAC_MACSR_PMTS = 1U << 3 ;

  // Field MMCS: MMCS
    const uint32_t Ethernet_MAC_MACSR_MMCS = 1U << 4 ;

  // Field MMCRS: MMCRS
    const uint32_t Ethernet_MAC_MACSR_MMCRS = 1U << 5 ;

  // Field MMCTS: MMCTS
    const uint32_t Ethernet_MAC_MACSR_MMCTS = 1U << 6 ;

  // Field TSTS: TSTS
    const uint32_t Ethernet_MAC_MACSR_TSTS = 1U << 9 ;

//------------------------------------------------------------------------------

//---  Register MACIMR: Ethernet MAC interrupt mask register
  #define Ethernet_MAC_MACIMR (* ((volatile uint32_t *) (0x40028000 + 60)))

  // Field PMTIM: PMTIM
    const uint32_t Ethernet_MAC_MACIMR_PMTIM = 1U << 3 ;

  // Field TSTIM: TSTIM
    const uint32_t Ethernet_MAC_MACIMR_TSTIM = 1U << 9 ;

//------------------------------------------------------------------------------

//---  Register MACA0HR: Ethernet MAC address 0 high register
  #define Ethernet_MAC_MACA0HR (* ((volatile uint32_t *) (0x40028000 + 64)))

  // Field MACA0H: MAC address0 high
    inline uint32_t Ethernet_MAC_MACA0HR_MACA0H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field MO: Always 1
    const uint32_t Ethernet_MAC_MACA0HR_MO = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register MACA0LR: Ethernet MAC address 0 low register
  #define Ethernet_MAC_MACA0LR (* ((volatile uint32_t *) (0x40028000 + 68)))

  // Field MACA0L: 0
    inline uint32_t Ethernet_MAC_MACA0LR_MACA0L (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MACA1HR: Ethernet MAC address 1 high register
  #define Ethernet_MAC_MACA1HR (* ((volatile uint32_t *) (0x40028000 + 72)))

  // Field MACA1H: MACA1H
    inline uint32_t Ethernet_MAC_MACA1HR_MACA1H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field MBC: MBC
    inline uint32_t Ethernet_MAC_MACA1HR_MBC (const uint32_t inValue) {return (inValue & 0x3FU) << 24 ; }

  // Field SA: SA
    const uint32_t Ethernet_MAC_MACA1HR_SA = 1U << 30 ;

  // Field AE: AE
    const uint32_t Ethernet_MAC_MACA1HR_AE = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register MACA1LR: Ethernet MAC address1 low register
  #define Ethernet_MAC_MACA1LR (* ((volatile uint32_t *) (0x40028000 + 76)))

  // Field MACA1LR: MACA1LR
    inline uint32_t Ethernet_MAC_MACA1LR_MACA1LR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MACA2HR: Ethernet MAC address 2 high register
  #define Ethernet_MAC_MACA2HR (* ((volatile uint32_t *) (0x40028000 + 80)))

  // Field MAC2AH: MAC2AH
    inline uint32_t Ethernet_MAC_MACA2HR_MAC2AH (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field MBC: MBC
    inline uint32_t Ethernet_MAC_MACA2HR_MBC (const uint32_t inValue) {return (inValue & 0x3FU) << 24 ; }

  // Field SA: SA
    const uint32_t Ethernet_MAC_MACA2HR_SA = 1U << 30 ;

  // Field AE: AE
    const uint32_t Ethernet_MAC_MACA2HR_AE = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register MACA2LR: Ethernet MAC address 2 low register
  #define Ethernet_MAC_MACA2LR (* ((volatile uint32_t *) (0x40028000 + 84)))

  // Field MACA2L: MACA2L
    inline uint32_t Ethernet_MAC_MACA2LR_MACA2L (const uint32_t inValue) {return (inValue & 0x7FFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MACA3HR: Ethernet MAC address 3 high register
  #define Ethernet_MAC_MACA3HR (* ((volatile uint32_t *) (0x40028000 + 88)))

  // Field MACA3H: MACA3H
    inline uint32_t Ethernet_MAC_MACA3HR_MACA3H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field MBC: MBC
    inline uint32_t Ethernet_MAC_MACA3HR_MBC (const uint32_t inValue) {return (inValue & 0x3FU) << 24 ; }

  // Field SA: SA
    const uint32_t Ethernet_MAC_MACA3HR_SA = 1U << 30 ;

  // Field AE: AE
    const uint32_t Ethernet_MAC_MACA3HR_AE = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register MACA3LR: Ethernet MAC address 3 low register
  #define Ethernet_MAC_MACA3LR (* ((volatile uint32_t *) (0x40028000 + 92)))

  // Field MBCA3L: MBCA3L
    inline uint32_t Ethernet_MAC_MACA3LR_MBCA3L (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MACRWUFFER: Ethernet MAC remote wakeup frame filter register
  #define Ethernet_MAC_MACRWUFFER (* ((volatile uint32_t *) (0x40028000 + 96)))

//------------------------------------------------------------------------------
// Peripheral Ethernet_MMC: Ethernet: MAC management counters
//------------------------------------------------------------------------------

//---  Register MMCCR: Ethernet MMC control register
  #define Ethernet_MMC_MMCCR (* ((volatile uint32_t *) (0x40028100 + 0)))

  // Field CR: CR
    const uint32_t Ethernet_MMC_MMCCR_CR = 1U << 0 ;

  // Field CSR: CSR
    const uint32_t Ethernet_MMC_MMCCR_CSR = 1U << 1 ;

  // Field ROR: ROR
    const uint32_t Ethernet_MMC_MMCCR_ROR = 1U << 2 ;

  // Field MCF: MCF
    const uint32_t Ethernet_MMC_MMCCR_MCF = 1U << 3 ;

  // Field MCP: MCP
    const uint32_t Ethernet_MMC_MMCCR_MCP = 1U << 4 ;

  // Field MCFHP: MCFHP
    const uint32_t Ethernet_MMC_MMCCR_MCFHP = 1U << 5 ;

//------------------------------------------------------------------------------

//---  Register MMCRIR: Ethernet MMC receive interrupt register
  #define Ethernet_MMC_MMCRIR (* ((volatile uint32_t *) (0x40028100 + 4)))

  // Field RFCES: RFCES
    const uint32_t Ethernet_MMC_MMCRIR_RFCES = 1U << 5 ;

  // Field RFAES: RFAES
    const uint32_t Ethernet_MMC_MMCRIR_RFAES = 1U << 6 ;

  // Field RGUFS: RGUFS
    const uint32_t Ethernet_MMC_MMCRIR_RGUFS = 1U << 17 ;

//------------------------------------------------------------------------------

//---  Register MMCTIR: Ethernet MMC transmit interrupt register
  #define Ethernet_MMC_MMCTIR (* ((const volatile uint32_t *) (0x40028100 + 8)))

  // Field TGFSCS: TGFSCS
    const uint32_t Ethernet_MMC_MMCTIR_TGFSCS = 1U << 14 ;

  // Field TGFMSCS: TGFMSCS
    const uint32_t Ethernet_MMC_MMCTIR_TGFMSCS = 1U << 15 ;

  // Field TGFS: TGFS
    const uint32_t Ethernet_MMC_MMCTIR_TGFS = 1U << 21 ;

//------------------------------------------------------------------------------

//---  Register MMCRIMR: Ethernet MMC receive interrupt mask register
  #define Ethernet_MMC_MMCRIMR (* ((volatile uint32_t *) (0x40028100 + 12)))

  // Field RFCEM: RFCEM
    const uint32_t Ethernet_MMC_MMCRIMR_RFCEM = 1U << 5 ;

  // Field RFAEM: RFAEM
    const uint32_t Ethernet_MMC_MMCRIMR_RFAEM = 1U << 6 ;

  // Field RGUFM: RGUFM
    const uint32_t Ethernet_MMC_MMCRIMR_RGUFM = 1U << 17 ;

//------------------------------------------------------------------------------

//---  Register MMCTIMR: Ethernet MMC transmit interrupt mask register
  #define Ethernet_MMC_MMCTIMR (* ((volatile uint32_t *) (0x40028100 + 16)))

  // Field TGFSCM: TGFSCM
    const uint32_t Ethernet_MMC_MMCTIMR_TGFSCM = 1U << 14 ;

  // Field TGFMSCM: TGFMSCM
    const uint32_t Ethernet_MMC_MMCTIMR_TGFMSCM = 1U << 15 ;

  // Field TGFM: TGFM
    const uint32_t Ethernet_MMC_MMCTIMR_TGFM = 1U << 16 ;

//------------------------------------------------------------------------------

//---  Register MMCTGFSCCR: Ethernet MMC transmitted good frames after a single collision counter
  #define Ethernet_MMC_MMCTGFSCCR (* ((const volatile uint32_t *) (0x40028100 + 76)))

  // Field TGFSCC: TGFSCC
    inline uint32_t Ethernet_MMC_MMCTGFSCCR_TGFSCC (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MMCTGFMSCCR: Ethernet MMC transmitted good frames after more than a single collision
  #define Ethernet_MMC_MMCTGFMSCCR (* ((const volatile uint32_t *) (0x40028100 + 80)))

  // Field TGFMSCC: TGFMSCC
    inline uint32_t Ethernet_MMC_MMCTGFMSCCR_TGFMSCC (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MMCTGFCR: Ethernet MMC transmitted good frames counter register
  #define Ethernet_MMC_MMCTGFCR (* ((const volatile uint32_t *) (0x40028100 + 104)))

  // Field TGFC: HTL
    inline uint32_t Ethernet_MMC_MMCTGFCR_TGFC (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MMCRFCECR: Ethernet MMC received frames with CRC error counter register
  #define Ethernet_MMC_MMCRFCECR (* ((const volatile uint32_t *) (0x40028100 + 148)))

  // Field RFCFC: RFCFC
    inline uint32_t Ethernet_MMC_MMCRFCECR_RFCFC (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MMCRFAECR: Ethernet MMC received frames with alignment error counter register
  #define Ethernet_MMC_MMCRFAECR (* ((const volatile uint32_t *) (0x40028100 + 152)))

  // Field RFAEC: RFAEC
    inline uint32_t Ethernet_MMC_MMCRFAECR_RFAEC (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MMCRGUFCR: MMC received good unicast frames counter register
  #define Ethernet_MMC_MMCRGUFCR (* ((const volatile uint32_t *) (0x40028100 + 196)))

  // Field RGUFC: RGUFC
    inline uint32_t Ethernet_MMC_MMCRGUFCR_RGUFC (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral Ethernet_PTP: Ethernet: Precision time protocol
//------------------------------------------------------------------------------

//---  Register PTPTSCR: Ethernet PTP time stamp control register
  #define Ethernet_PTP_PTPTSCR (* ((volatile uint32_t *) (0x40028700 + 0)))

  // Field TSE: TSE
    const uint32_t Ethernet_PTP_PTPTSCR_TSE = 1U << 0 ;

  // Field TSFCU: TSFCU
    const uint32_t Ethernet_PTP_PTPTSCR_TSFCU = 1U << 1 ;

  // Field TSPTPPSV2E: TSPTPPSV2E
    const uint32_t Ethernet_PTP_PTPTSCR_TSPTPPSV2E = 1U << 10 ;

  // Field TSSPTPOEFE: TSSPTPOEFE
    const uint32_t Ethernet_PTP_PTPTSCR_TSSPTPOEFE = 1U << 11 ;

  // Field TSSIPV6FE: TSSIPV6FE
    const uint32_t Ethernet_PTP_PTPTSCR_TSSIPV6FE = 1U << 12 ;

  // Field TSSIPV4FE: TSSIPV4FE
    const uint32_t Ethernet_PTP_PTPTSCR_TSSIPV4FE = 1U << 13 ;

  // Field TSSEME: TSSEME
    const uint32_t Ethernet_PTP_PTPTSCR_TSSEME = 1U << 14 ;

  // Field TSSMRME: TSSMRME
    const uint32_t Ethernet_PTP_PTPTSCR_TSSMRME = 1U << 15 ;

  // Field TSCNT: TSCNT
    inline uint32_t Ethernet_PTP_PTPTSCR_TSCNT (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field TSPFFMAE: TSPFFMAE
    const uint32_t Ethernet_PTP_PTPTSCR_TSPFFMAE = 1U << 18 ;

  // Field TSSTI: TSSTI
    const uint32_t Ethernet_PTP_PTPTSCR_TSSTI = 1U << 2 ;

  // Field TSSTU: TSSTU
    const uint32_t Ethernet_PTP_PTPTSCR_TSSTU = 1U << 3 ;

  // Field TSITE: TSITE
    const uint32_t Ethernet_PTP_PTPTSCR_TSITE = 1U << 4 ;

  // Field TTSARU: TTSARU
    const uint32_t Ethernet_PTP_PTPTSCR_TTSARU = 1U << 5 ;

  // Field TSSARFE: TSSARFE
    const uint32_t Ethernet_PTP_PTPTSCR_TSSARFE = 1U << 8 ;

  // Field TSSSR: TSSSR
    const uint32_t Ethernet_PTP_PTPTSCR_TSSSR = 1U << 9 ;

//------------------------------------------------------------------------------

//---  Register PTPSSIR: Ethernet PTP subsecond increment register
  #define Ethernet_PTP_PTPSSIR (* ((volatile uint32_t *) (0x40028700 + 4)))

  // Field STSSI: STSSI
    inline uint32_t Ethernet_PTP_PTPSSIR_STSSI (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PTPTSHR: Ethernet PTP time stamp high register
  #define Ethernet_PTP_PTPTSHR (* ((const volatile uint32_t *) (0x40028700 + 8)))

  // Field STS: STS
    inline uint32_t Ethernet_PTP_PTPTSHR_STS (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PTPTSLR: Ethernet PTP time stamp low register
  #define Ethernet_PTP_PTPTSLR (* ((const volatile uint32_t *) (0x40028700 + 12)))

  // Field STSS: STSS
    inline uint32_t Ethernet_PTP_PTPTSLR_STSS (const uint32_t inValue) {return (inValue & 0x7FFFFFFFU) << 0 ; }

  // Field STPNS: STPNS
    const uint32_t Ethernet_PTP_PTPTSLR_STPNS = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register PTPTSHUR: Ethernet PTP time stamp high update register
  #define Ethernet_PTP_PTPTSHUR (* ((volatile uint32_t *) (0x40028700 + 16)))

  // Field TSUS: TSUS
    inline uint32_t Ethernet_PTP_PTPTSHUR_TSUS (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PTPTSLUR: Ethernet PTP time stamp low update register
  #define Ethernet_PTP_PTPTSLUR (* ((volatile uint32_t *) (0x40028700 + 20)))

  // Field TSUSS: TSUSS
    inline uint32_t Ethernet_PTP_PTPTSLUR_TSUSS (const uint32_t inValue) {return (inValue & 0x7FFFFFFFU) << 0 ; }

  // Field TSUPNS: TSUPNS
    const uint32_t Ethernet_PTP_PTPTSLUR_TSUPNS = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register PTPTSAR: Ethernet PTP time stamp addend register
  #define Ethernet_PTP_PTPTSAR (* ((volatile uint32_t *) (0x40028700 + 24)))

  // Field TSA: TSA
    inline uint32_t Ethernet_PTP_PTPTSAR_TSA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PTPTTHR: Ethernet PTP target time high register
  #define Ethernet_PTP_PTPTTHR (* ((volatile uint32_t *) (0x40028700 + 28)))

  // Field TTSH: 0
    inline uint32_t Ethernet_PTP_PTPTTHR_TTSH (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PTPTTLR: Ethernet PTP target time low register
  #define Ethernet_PTP_PTPTTLR (* ((volatile uint32_t *) (0x40028700 + 32)))

  // Field TTSL: TTSL
    inline uint32_t Ethernet_PTP_PTPTTLR_TTSL (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PTPTSSR: Ethernet PTP time stamp status register
  #define Ethernet_PTP_PTPTSSR (* ((const volatile uint32_t *) (0x40028700 + 40)))

  // Field TSSO: TSSO
    const uint32_t Ethernet_PTP_PTPTSSR_TSSO = 1U << 0 ;

  // Field TSTTR: TSTTR
    const uint32_t Ethernet_PTP_PTPTSSR_TSTTR = 1U << 1 ;

//------------------------------------------------------------------------------

//---  Register PTPPPSCR: Ethernet PTP PPS control register
  #define Ethernet_PTP_PTPPPSCR (* ((const volatile uint32_t *) (0x40028700 + 44)))

  // Field TSSO: TSSO
    const uint32_t Ethernet_PTP_PTPPPSCR_TSSO = 1U << 0 ;

  // Field TSTTR: TSTTR
    const uint32_t Ethernet_PTP_PTPPPSCR_TSTTR = 1U << 1 ;

//------------------------------------------------------------------------------
// Peripheral FMC: Flexible memory controller
//------------------------------------------------------------------------------

//---  Register BCR1: SRAM/NOR-Flash chip-select control register 1
  #define FMC_BCR1 (* ((volatile uint32_t *) (0xA0000000 + 0)))

  // Field CCLKEN: CCLKEN
    const uint32_t FMC_BCR1_CCLKEN = 1U << 20 ;

  // Field CBURSTRW: CBURSTRW
    const uint32_t FMC_BCR1_CBURSTRW = 1U << 19 ;

  // Field ASYNCWAIT: ASYNCWAIT
    const uint32_t FMC_BCR1_ASYNCWAIT = 1U << 15 ;

  // Field EXTMOD: EXTMOD
    const uint32_t FMC_BCR1_EXTMOD = 1U << 14 ;

  // Field WAITEN: WAITEN
    const uint32_t FMC_BCR1_WAITEN = 1U << 13 ;

  // Field WREN: WREN
    const uint32_t FMC_BCR1_WREN = 1U << 12 ;

  // Field WAITCFG: WAITCFG
    const uint32_t FMC_BCR1_WAITCFG = 1U << 11 ;

  // Field WAITPOL: WAITPOL
    const uint32_t FMC_BCR1_WAITPOL = 1U << 9 ;

  // Field BURSTEN: BURSTEN
    const uint32_t FMC_BCR1_BURSTEN = 1U << 8 ;

  // Field FACCEN: FACCEN
    const uint32_t FMC_BCR1_FACCEN = 1U << 6 ;

  // Field MWID: MWID
    inline uint32_t FMC_BCR1_MWID (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MTYP: MTYP
    inline uint32_t FMC_BCR1_MTYP (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MUXEN: MUXEN
    const uint32_t FMC_BCR1_MUXEN = 1U << 1 ;

  // Field MBKEN: MBKEN
    const uint32_t FMC_BCR1_MBKEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BTR1: SRAM/NOR-Flash chip-select timing register 1
  #define FMC_BTR1 (* ((volatile uint32_t *) (0xA0000000 + 4)))

  // Field ACCMOD: ACCMOD
    inline uint32_t FMC_BTR1_ACCMOD (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field DATLAT: DATLAT
    inline uint32_t FMC_BTR1_DATLAT (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field CLKDIV: CLKDIV
    inline uint32_t FMC_BTR1_CLKDIV (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field BUSTURN: BUSTURN
    inline uint32_t FMC_BTR1_BUSTURN (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field DATAST: DATAST
    inline uint32_t FMC_BTR1_DATAST (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field ADDHLD: ADDHLD
    inline uint32_t FMC_BTR1_ADDHLD (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ADDSET: ADDSET
    inline uint32_t FMC_BTR1_ADDSET (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BCR2: SRAM/NOR-Flash chip-select control register 2
  #define FMC_BCR2 (* ((volatile uint32_t *) (0xA0000000 + 8)))

  // Field CBURSTRW: CBURSTRW
    const uint32_t FMC_BCR2_CBURSTRW = 1U << 19 ;

  // Field ASYNCWAIT: ASYNCWAIT
    const uint32_t FMC_BCR2_ASYNCWAIT = 1U << 15 ;

  // Field EXTMOD: EXTMOD
    const uint32_t FMC_BCR2_EXTMOD = 1U << 14 ;

  // Field WAITEN: WAITEN
    const uint32_t FMC_BCR2_WAITEN = 1U << 13 ;

  // Field WREN: WREN
    const uint32_t FMC_BCR2_WREN = 1U << 12 ;

  // Field WAITCFG: WAITCFG
    const uint32_t FMC_BCR2_WAITCFG = 1U << 11 ;

  // Field WRAPMOD: WRAPMOD
    const uint32_t FMC_BCR2_WRAPMOD = 1U << 10 ;

  // Field WAITPOL: WAITPOL
    const uint32_t FMC_BCR2_WAITPOL = 1U << 9 ;

  // Field BURSTEN: BURSTEN
    const uint32_t FMC_BCR2_BURSTEN = 1U << 8 ;

  // Field FACCEN: FACCEN
    const uint32_t FMC_BCR2_FACCEN = 1U << 6 ;

  // Field MWID: MWID
    inline uint32_t FMC_BCR2_MWID (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MTYP: MTYP
    inline uint32_t FMC_BCR2_MTYP (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MUXEN: MUXEN
    const uint32_t FMC_BCR2_MUXEN = 1U << 1 ;

  // Field MBKEN: MBKEN
    const uint32_t FMC_BCR2_MBKEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BTR2: SRAM/NOR-Flash chip-select timing register 2
  #define FMC_BTR2 (* ((volatile uint32_t *) (0xA0000000 + 12)))

  // Field ACCMOD: ACCMOD
    inline uint32_t FMC_BTR2_ACCMOD (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field DATLAT: DATLAT
    inline uint32_t FMC_BTR2_DATLAT (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field CLKDIV: CLKDIV
    inline uint32_t FMC_BTR2_CLKDIV (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field BUSTURN: BUSTURN
    inline uint32_t FMC_BTR2_BUSTURN (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field DATAST: DATAST
    inline uint32_t FMC_BTR2_DATAST (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field ADDHLD: ADDHLD
    inline uint32_t FMC_BTR2_ADDHLD (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ADDSET: ADDSET
    inline uint32_t FMC_BTR2_ADDSET (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BCR3: SRAM/NOR-Flash chip-select control register 3
  #define FMC_BCR3 (* ((volatile uint32_t *) (0xA0000000 + 16)))

  // Field CBURSTRW: CBURSTRW
    const uint32_t FMC_BCR3_CBURSTRW = 1U << 19 ;

  // Field ASYNCWAIT: ASYNCWAIT
    const uint32_t FMC_BCR3_ASYNCWAIT = 1U << 15 ;

  // Field EXTMOD: EXTMOD
    const uint32_t FMC_BCR3_EXTMOD = 1U << 14 ;

  // Field WAITEN: WAITEN
    const uint32_t FMC_BCR3_WAITEN = 1U << 13 ;

  // Field WREN: WREN
    const uint32_t FMC_BCR3_WREN = 1U << 12 ;

  // Field WAITCFG: WAITCFG
    const uint32_t FMC_BCR3_WAITCFG = 1U << 11 ;

  // Field WRAPMOD: WRAPMOD
    const uint32_t FMC_BCR3_WRAPMOD = 1U << 10 ;

  // Field WAITPOL: WAITPOL
    const uint32_t FMC_BCR3_WAITPOL = 1U << 9 ;

  // Field BURSTEN: BURSTEN
    const uint32_t FMC_BCR3_BURSTEN = 1U << 8 ;

  // Field FACCEN: FACCEN
    const uint32_t FMC_BCR3_FACCEN = 1U << 6 ;

  // Field MWID: MWID
    inline uint32_t FMC_BCR3_MWID (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MTYP: MTYP
    inline uint32_t FMC_BCR3_MTYP (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MUXEN: MUXEN
    const uint32_t FMC_BCR3_MUXEN = 1U << 1 ;

  // Field MBKEN: MBKEN
    const uint32_t FMC_BCR3_MBKEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BTR3: SRAM/NOR-Flash chip-select timing register 3
  #define FMC_BTR3 (* ((volatile uint32_t *) (0xA0000000 + 20)))

  // Field ACCMOD: ACCMOD
    inline uint32_t FMC_BTR3_ACCMOD (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field DATLAT: DATLAT
    inline uint32_t FMC_BTR3_DATLAT (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field CLKDIV: CLKDIV
    inline uint32_t FMC_BTR3_CLKDIV (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field BUSTURN: BUSTURN
    inline uint32_t FMC_BTR3_BUSTURN (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field DATAST: DATAST
    inline uint32_t FMC_BTR3_DATAST (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field ADDHLD: ADDHLD
    inline uint32_t FMC_BTR3_ADDHLD (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ADDSET: ADDSET
    inline uint32_t FMC_BTR3_ADDSET (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BCR4: SRAM/NOR-Flash chip-select control register 4
  #define FMC_BCR4 (* ((volatile uint32_t *) (0xA0000000 + 24)))

  // Field CBURSTRW: CBURSTRW
    const uint32_t FMC_BCR4_CBURSTRW = 1U << 19 ;

  // Field ASYNCWAIT: ASYNCWAIT
    const uint32_t FMC_BCR4_ASYNCWAIT = 1U << 15 ;

  // Field EXTMOD: EXTMOD
    const uint32_t FMC_BCR4_EXTMOD = 1U << 14 ;

  // Field WAITEN: WAITEN
    const uint32_t FMC_BCR4_WAITEN = 1U << 13 ;

  // Field WREN: WREN
    const uint32_t FMC_BCR4_WREN = 1U << 12 ;

  // Field WAITCFG: WAITCFG
    const uint32_t FMC_BCR4_WAITCFG = 1U << 11 ;

  // Field WRAPMOD: WRAPMOD
    const uint32_t FMC_BCR4_WRAPMOD = 1U << 10 ;

  // Field WAITPOL: WAITPOL
    const uint32_t FMC_BCR4_WAITPOL = 1U << 9 ;

  // Field BURSTEN: BURSTEN
    const uint32_t FMC_BCR4_BURSTEN = 1U << 8 ;

  // Field FACCEN: FACCEN
    const uint32_t FMC_BCR4_FACCEN = 1U << 6 ;

  // Field MWID: MWID
    inline uint32_t FMC_BCR4_MWID (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MTYP: MTYP
    inline uint32_t FMC_BCR4_MTYP (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MUXEN: MUXEN
    const uint32_t FMC_BCR4_MUXEN = 1U << 1 ;

  // Field MBKEN: MBKEN
    const uint32_t FMC_BCR4_MBKEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BTR4: SRAM/NOR-Flash chip-select timing register 4
  #define FMC_BTR4 (* ((volatile uint32_t *) (0xA0000000 + 28)))

  // Field ACCMOD: ACCMOD
    inline uint32_t FMC_BTR4_ACCMOD (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field DATLAT: DATLAT
    inline uint32_t FMC_BTR4_DATLAT (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field CLKDIV: CLKDIV
    inline uint32_t FMC_BTR4_CLKDIV (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field BUSTURN: BUSTURN
    inline uint32_t FMC_BTR4_BUSTURN (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field DATAST: DATAST
    inline uint32_t FMC_BTR4_DATAST (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field ADDHLD: ADDHLD
    inline uint32_t FMC_BTR4_ADDHLD (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ADDSET: ADDSET
    inline uint32_t FMC_BTR4_ADDSET (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PCR: PC Card/NAND Flash control register
  #define FMC_PCR (* ((volatile uint32_t *) (0xA0000000 + 128)))

  // Field ECCPS: ECCPS
    inline uint32_t FMC_PCR_ECCPS (const uint32_t inValue) {return (inValue & 0x7U) << 17 ; }

  // Field TAR: TAR
    inline uint32_t FMC_PCR_TAR (const uint32_t inValue) {return (inValue & 0xFU) << 13 ; }

  // Field TCLR: TCLR
    inline uint32_t FMC_PCR_TCLR (const uint32_t inValue) {return (inValue & 0xFU) << 9 ; }

  // Field ECCEN: ECCEN
    const uint32_t FMC_PCR_ECCEN = 1U << 6 ;

  // Field PWID: PWID
    inline uint32_t FMC_PCR_PWID (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field PTYP: PTYP
    const uint32_t FMC_PCR_PTYP = 1U << 3 ;

  // Field PBKEN: PBKEN
    const uint32_t FMC_PCR_PBKEN = 1U << 2 ;

  // Field PWAITEN: PWAITEN
    const uint32_t FMC_PCR_PWAITEN = 1U << 1 ;

//------------------------------------------------------------------------------

//---  Register SR: FIFO status and interrupt register
  #define FMC_SR (* ((volatile uint32_t *) (0xA0000000 + 132)))

  // Field FEMPT: FEMPT
    const uint32_t FMC_SR_FEMPT = 1U << 6 ;

  // Field IFEN: IFEN
    const uint32_t FMC_SR_IFEN = 1U << 5 ;

  // Field ILEN: ILEN
    const uint32_t FMC_SR_ILEN = 1U << 4 ;

  // Field IREN: IREN
    const uint32_t FMC_SR_IREN = 1U << 3 ;

  // Field IFS: IFS
    const uint32_t FMC_SR_IFS = 1U << 2 ;

  // Field ILS: ILS
    const uint32_t FMC_SR_ILS = 1U << 1 ;

  // Field IRS: IRS
    const uint32_t FMC_SR_IRS = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register PMEM: Common memory space timing register
  #define FMC_PMEM (* ((volatile uint32_t *) (0xA0000000 + 136)))

  // Field MEMHIZx: MEMHIZx
    inline uint32_t FMC_PMEM_MEMHIZx (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field MEMHOLDx: MEMHOLDx
    inline uint32_t FMC_PMEM_MEMHOLDx (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field MEMWAITx: MEMWAITx
    inline uint32_t FMC_PMEM_MEMWAITx (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field MEMSETx: MEMSETx
    inline uint32_t FMC_PMEM_MEMSETx (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PATT: Attribute memory space timing register
  #define FMC_PATT (* ((volatile uint32_t *) (0xA0000000 + 140)))

  // Field ATTHIZx: ATTHIZx
    inline uint32_t FMC_PATT_ATTHIZx (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field ATTHOLDx: ATTHOLDx
    inline uint32_t FMC_PATT_ATTHOLDx (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field ATTWAITx: ATTWAITx
    inline uint32_t FMC_PATT_ATTWAITx (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field ATTSETx: ATTSETx
    inline uint32_t FMC_PATT_ATTSETx (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ECCR: ECC result register
  #define FMC_ECCR (* ((const volatile uint32_t *) (0xA0000000 + 148)))

  // Field ECCx: ECCx
    inline uint32_t FMC_ECCR_ECCx (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BWTR1: SRAM/NOR-Flash write timing registers 1
  #define FMC_BWTR1 (* ((volatile uint32_t *) (0xA0000000 + 260)))

  // Field ACCMOD: ACCMOD
    inline uint32_t FMC_BWTR1_ACCMOD (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field DATLAT: DATLAT
    inline uint32_t FMC_BWTR1_DATLAT (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field CLKDIV: CLKDIV
    inline uint32_t FMC_BWTR1_CLKDIV (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field DATAST: DATAST
    inline uint32_t FMC_BWTR1_DATAST (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field ADDHLD: ADDHLD
    inline uint32_t FMC_BWTR1_ADDHLD (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ADDSET: ADDSET
    inline uint32_t FMC_BWTR1_ADDSET (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BWTR2: SRAM/NOR-Flash write timing registers 2
  #define FMC_BWTR2 (* ((volatile uint32_t *) (0xA0000000 + 268)))

  // Field ACCMOD: ACCMOD
    inline uint32_t FMC_BWTR2_ACCMOD (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field DATLAT: DATLAT
    inline uint32_t FMC_BWTR2_DATLAT (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field CLKDIV: CLKDIV
    inline uint32_t FMC_BWTR2_CLKDIV (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field DATAST: DATAST
    inline uint32_t FMC_BWTR2_DATAST (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field ADDHLD: ADDHLD
    inline uint32_t FMC_BWTR2_ADDHLD (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ADDSET: ADDSET
    inline uint32_t FMC_BWTR2_ADDSET (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BWTR3: SRAM/NOR-Flash write timing registers 3
  #define FMC_BWTR3 (* ((volatile uint32_t *) (0xA0000000 + 276)))

  // Field ACCMOD: ACCMOD
    inline uint32_t FMC_BWTR3_ACCMOD (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field DATLAT: DATLAT
    inline uint32_t FMC_BWTR3_DATLAT (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field CLKDIV: CLKDIV
    inline uint32_t FMC_BWTR3_CLKDIV (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field DATAST: DATAST
    inline uint32_t FMC_BWTR3_DATAST (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field ADDHLD: ADDHLD
    inline uint32_t FMC_BWTR3_ADDHLD (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ADDSET: ADDSET
    inline uint32_t FMC_BWTR3_ADDSET (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BWTR4: SRAM/NOR-Flash write timing registers 4
  #define FMC_BWTR4 (* ((volatile uint32_t *) (0xA0000000 + 284)))

  // Field ACCMOD: ACCMOD
    inline uint32_t FMC_BWTR4_ACCMOD (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field DATLAT: DATLAT
    inline uint32_t FMC_BWTR4_DATLAT (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field CLKDIV: CLKDIV
    inline uint32_t FMC_BWTR4_CLKDIV (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field DATAST: DATAST
    inline uint32_t FMC_BWTR4_DATAST (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field ADDHLD: ADDHLD
    inline uint32_t FMC_BWTR4_ADDHLD (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ADDSET: ADDSET
    inline uint32_t FMC_BWTR4_ADDSET (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SDCR1: SDRAM Control Register 1
  #define FMC_SDCR1 (* ((volatile uint32_t *) (0xA0000000 + 320)))

  // Field NC: Number of column address bits
    inline uint32_t FMC_SDCR1_NC (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field NR: Number of row address bits
    inline uint32_t FMC_SDCR1_NR (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MWID: Memory data bus width
    inline uint32_t FMC_SDCR1_MWID (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field NB: Number of internal banks
    const uint32_t FMC_SDCR1_NB = 1U << 6 ;

  // Field CAS: CAS latency
    inline uint32_t FMC_SDCR1_CAS (const uint32_t inValue) {return (inValue & 0x3U) << 7 ; }

  // Field WP: Write protection
    const uint32_t FMC_SDCR1_WP = 1U << 9 ;

  // Field SDCLK: SDRAM clock configuration
    inline uint32_t FMC_SDCR1_SDCLK (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field RBURST: Burst read
    const uint32_t FMC_SDCR1_RBURST = 1U << 12 ;

  // Field RPIPE: Read pipe
    inline uint32_t FMC_SDCR1_RPIPE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

//------------------------------------------------------------------------------

//---  Register SDCR2: SDRAM Control Register 2
  #define FMC_SDCR2 (* ((volatile uint32_t *) (0xA0000000 + 324)))

  // Field NC: Number of column address bits
    inline uint32_t FMC_SDCR2_NC (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field NR: Number of row address bits
    inline uint32_t FMC_SDCR2_NR (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MWID: Memory data bus width
    inline uint32_t FMC_SDCR2_MWID (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field NB: Number of internal banks
    const uint32_t FMC_SDCR2_NB = 1U << 6 ;

  // Field CAS: CAS latency
    inline uint32_t FMC_SDCR2_CAS (const uint32_t inValue) {return (inValue & 0x3U) << 7 ; }

  // Field WP: Write protection
    const uint32_t FMC_SDCR2_WP = 1U << 9 ;

  // Field SDCLK: SDRAM clock configuration
    inline uint32_t FMC_SDCR2_SDCLK (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field RBURST: Burst read
    const uint32_t FMC_SDCR2_RBURST = 1U << 12 ;

  // Field RPIPE: Read pipe
    inline uint32_t FMC_SDCR2_RPIPE (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

//------------------------------------------------------------------------------

//---  Register SDTR1: SDRAM Timing register 1
  #define FMC_SDTR1 (* ((volatile uint32_t *) (0xA0000000 + 328)))

  // Field TMRD: Load Mode Register to Active
    inline uint32_t FMC_SDTR1_TMRD (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field TXSR: Exit self-refresh delay
    inline uint32_t FMC_SDTR1_TXSR (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field TRAS: Self refresh time
    inline uint32_t FMC_SDTR1_TRAS (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field TRC: Row cycle delay
    inline uint32_t FMC_SDTR1_TRC (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field TWR: Recovery delay
    inline uint32_t FMC_SDTR1_TWR (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field TRP: Row precharge delay
    inline uint32_t FMC_SDTR1_TRP (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field TRCD: Row to column delay
    inline uint32_t FMC_SDTR1_TRCD (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register SDTR2: SDRAM Timing register 2
  #define FMC_SDTR2 (* ((volatile uint32_t *) (0xA0000000 + 332)))

  // Field TMRD: Load Mode Register to Active
    inline uint32_t FMC_SDTR2_TMRD (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field TXSR: Exit self-refresh delay
    inline uint32_t FMC_SDTR2_TXSR (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field TRAS: Self refresh time
    inline uint32_t FMC_SDTR2_TRAS (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field TRC: Row cycle delay
    inline uint32_t FMC_SDTR2_TRC (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field TWR: Recovery delay
    inline uint32_t FMC_SDTR2_TWR (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field TRP: Row precharge delay
    inline uint32_t FMC_SDTR2_TRP (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field TRCD: Row to column delay
    inline uint32_t FMC_SDTR2_TRCD (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register SDCMR: SDRAM Command Mode register
  #define FMC_SDCMR (* ((volatile uint32_t *) (0xA0000000 + 336)))

  // Field MODE: Command mode
    inline uint32_t FMC_SDCMR_MODE (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field CTB2: Command target bank 2
    const uint32_t FMC_SDCMR_CTB2 = 1U << 3 ;

  // Field CTB1: Command target bank 1
    const uint32_t FMC_SDCMR_CTB1 = 1U << 4 ;

  // Field NRFS: Number of Auto-refresh
    inline uint32_t FMC_SDCMR_NRFS (const uint32_t inValue) {return (inValue & 0xFU) << 5 ; }

  // Field MRD: Mode Register definition
    inline uint32_t FMC_SDCMR_MRD (const uint32_t inValue) {return (inValue & 0x1FFFU) << 9 ; }

//------------------------------------------------------------------------------

//---  Register SDRTR: SDRAM Refresh Timer register
  #define FMC_SDRTR (* ((volatile uint32_t *) (0xA0000000 + 340)))

  // Field CRE: Clear Refresh error flag
    const uint32_t FMC_SDRTR_CRE = 1U << 0 ;

  // Field COUNT: Refresh Timer Count
    inline uint32_t FMC_SDRTR_COUNT (const uint32_t inValue) {return (inValue & 0x1FFFU) << 1 ; }

  // Field REIE: RES Interrupt Enable
    const uint32_t FMC_SDRTR_REIE = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register SDSR: SDRAM Status register
  #define FMC_SDSR (* ((const volatile uint32_t *) (0xA0000000 + 344)))

  // Field RE: Refresh error flag
    const uint32_t FMC_SDSR_RE = 1U << 0 ;

  // Field MODES1: Status Mode for Bank 1
    inline uint32_t FMC_SDSR_MODES1 (const uint32_t inValue) {return (inValue & 0x3U) << 1 ; }

  // Field MODES2: Status Mode for Bank 2
    inline uint32_t FMC_SDSR_MODES2 (const uint32_t inValue) {return (inValue & 0x3U) << 3 ; }

  // Field BUSY: Busy status
    const uint32_t FMC_SDSR_BUSY = 1U << 5 ;

//------------------------------------------------------------------------------
// Peripheral FPU: Floting point unit
//------------------------------------------------------------------------------

//---  Register FPCCR: Floating-point context control register
  #define FPU_FPCCR (* ((volatile uint32_t *) (0xE000EF34 + 0)))

  // Field LSPACT: LSPACT
    const uint32_t FPU_FPCCR_LSPACT = 1U << 0 ;

  // Field USER: USER
    const uint32_t FPU_FPCCR_USER = 1U << 1 ;

  // Field THREAD: THREAD
    const uint32_t FPU_FPCCR_THREAD = 1U << 3 ;

  // Field HFRDY: HFRDY
    const uint32_t FPU_FPCCR_HFRDY = 1U << 4 ;

  // Field MMRDY: MMRDY
    const uint32_t FPU_FPCCR_MMRDY = 1U << 5 ;

  // Field BFRDY: BFRDY
    const uint32_t FPU_FPCCR_BFRDY = 1U << 6 ;

  // Field MONRDY: MONRDY
    const uint32_t FPU_FPCCR_MONRDY = 1U << 8 ;

  // Field LSPEN: LSPEN
    const uint32_t FPU_FPCCR_LSPEN = 1U << 30 ;

  // Field ASPEN: ASPEN
    const uint32_t FPU_FPCCR_ASPEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register FPCAR: Floating-point context address register
  #define FPU_FPCAR (* ((volatile uint32_t *) (0xE000EF34 + 4)))

  // Field ADDRESS: Location of unpopulated floating-point
    inline uint32_t FPU_FPCAR_ADDRESS (const uint32_t inValue) {return (inValue & 0x1FFFFFFFU) << 3 ; }

//------------------------------------------------------------------------------

//---  Register FPSCR: Floating-point status control register
  #define FPU_FPSCR (* ((volatile uint32_t *) (0xE000EF34 + 8)))

  // Field IOC: Invalid operation cumulative exception bit
    const uint32_t FPU_FPSCR_IOC = 1U << 0 ;

  // Field DZC: Division by zero cumulative exception bit.
    const uint32_t FPU_FPSCR_DZC = 1U << 1 ;

  // Field OFC: Overflow cumulative exception bit
    const uint32_t FPU_FPSCR_OFC = 1U << 2 ;

  // Field UFC: Underflow cumulative exception bit
    const uint32_t FPU_FPSCR_UFC = 1U << 3 ;

  // Field IXC: Inexact cumulative exception bit
    const uint32_t FPU_FPSCR_IXC = 1U << 4 ;

  // Field IDC: Input denormal cumulative exception bit.
    const uint32_t FPU_FPSCR_IDC = 1U << 7 ;

  // Field RMode: Rounding Mode control field
    inline uint32_t FPU_FPSCR_RMode (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field FZ: Flush-to-zero mode control bit:
    const uint32_t FPU_FPSCR_FZ = 1U << 24 ;

  // Field DN: Default NaN mode control bit
    const uint32_t FPU_FPSCR_DN = 1U << 25 ;

  // Field AHP: Alternative half-precision control bit
    const uint32_t FPU_FPSCR_AHP = 1U << 26 ;

  // Field V: Overflow condition code flag
    const uint32_t FPU_FPSCR_V = 1U << 28 ;

  // Field C: Carry condition code flag
    const uint32_t FPU_FPSCR_C = 1U << 29 ;

  // Field Z: Zero condition code flag
    const uint32_t FPU_FPSCR_Z = 1U << 30 ;

  // Field N: Negative condition code flag
    const uint32_t FPU_FPSCR_N = 1U << 31 ;

//------------------------------------------------------------------------------
// Peripheral FPU_CPACR: Floating point unit CPACR
//------------------------------------------------------------------------------

//---  Register CPACR: Coprocessor access control register
  #define FPU_CPACR_CPACR (* ((volatile uint32_t *) (0xE000ED88 + 0)))

  // Field CP: CP
    inline uint32_t FPU_CPACR_CPACR_CP (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

//------------------------------------------------------------------------------
// Peripheral Flash: FLASH
//------------------------------------------------------------------------------

//---  Register ACR: Flash access control register
  #define Flash_ACR (* ((volatile uint32_t *) (0x40023C00 + 0)))

  // Field LATENCY: Latency
    inline uint32_t Flash_ACR_LATENCY (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field PRFTEN: Prefetch enable
    const uint32_t Flash_ACR_PRFTEN = 1U << 8 ;

  // Field ARTEN: ART Accelerator Enable
    const uint32_t Flash_ACR_ARTEN = 1U << 9 ;

  // Field ARTRST: ART Accelerator reset
    const uint32_t Flash_ACR_ARTRST = 1U << 11 ;

//------------------------------------------------------------------------------

//---  Register KEYR: Flash key register
  #define Flash_KEYR (* ((volatile uint32_t *) (0x40023C00 + 4)))

  // Field KEY: FPEC key
    inline uint32_t Flash_KEYR_KEY (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OPTKEYR: Flash option key register
  #define Flash_OPTKEYR (* ((volatile uint32_t *) (0x40023C00 + 8)))

  // Field OPTKEY: Option byte key
    inline uint32_t Flash_OPTKEYR_OPTKEY (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SR: Status register
  #define Flash_SR (* ((volatile uint32_t *) (0x40023C00 + 12)))

  // Field EOP: End of operation
    const uint32_t Flash_SR_EOP = 1U << 0 ;

  // Field OPERR: Operation error
    const uint32_t Flash_SR_OPERR = 1U << 1 ;

  // Field WRPERR: Write protection error
    const uint32_t Flash_SR_WRPERR = 1U << 4 ;

  // Field PGAERR: Programming alignment error
    const uint32_t Flash_SR_PGAERR = 1U << 5 ;

  // Field PGPERR: Programming parallelism error
    const uint32_t Flash_SR_PGPERR = 1U << 6 ;

  // Field PGSERR: Programming sequence error
    const uint32_t Flash_SR_PGSERR = 1U << 7 ;

  // Field BSY: Busy
    const uint32_t Flash_SR_BSY = 1U << 16 ;

//------------------------------------------------------------------------------

//---  Register CR: Control register
  #define Flash_CR (* ((volatile uint32_t *) (0x40023C00 + 16)))

  // Field PG: Programming
    const uint32_t Flash_CR_PG = 1U << 0 ;

  // Field SER: Sector Erase
    const uint32_t Flash_CR_SER = 1U << 1 ;

  // Field MER: Mass Erase of sectors 0 to 11
    const uint32_t Flash_CR_MER = 1U << 2 ;

  // Field SNB: Sector number
    inline uint32_t Flash_CR_SNB (const uint32_t inValue) {return (inValue & 0x1FU) << 3 ; }

  // Field PSIZE: Program size
    inline uint32_t Flash_CR_PSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field MER1: Mass Erase of sectors 12 to 23
    const uint32_t Flash_CR_MER1 = 1U << 15 ;

  // Field STRT: Start
    const uint32_t Flash_CR_STRT = 1U << 16 ;

  // Field EOPIE: End of operation interrupt enable
    const uint32_t Flash_CR_EOPIE = 1U << 24 ;

  // Field ERRIE: Error interrupt enable
    const uint32_t Flash_CR_ERRIE = 1U << 25 ;

  // Field LOCK: Lock
    const uint32_t Flash_CR_LOCK = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OPTCR: Flash option control register
  #define Flash_OPTCR (* ((volatile uint32_t *) (0x40023C00 + 20)))

  // Field OPTLOCK: Option lock
    const uint32_t Flash_OPTCR_OPTLOCK = 1U << 0 ;

  // Field OPTSTRT: Option start
    const uint32_t Flash_OPTCR_OPTSTRT = 1U << 1 ;

  // Field BOR_LEV: BOR reset Level
    inline uint32_t Flash_OPTCR_BOR_LEV (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field WWDG_SW: User option bytes
    const uint32_t Flash_OPTCR_WWDG_SW = 1U << 4 ;

  // Field IWDG_SW: User option bytes
    const uint32_t Flash_OPTCR_IWDG_SW = 1U << 5 ;

  // Field nRST_STOP: User option bytes
    const uint32_t Flash_OPTCR_nRST_STOP = 1U << 6 ;

  // Field nRST_STDBY: User option bytes
    const uint32_t Flash_OPTCR_nRST_STDBY = 1U << 7 ;

  // Field RDP: Read protect
    inline uint32_t Flash_OPTCR_RDP (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field nWRP: Not write protect
    inline uint32_t Flash_OPTCR_nWRP (const uint32_t inValue) {return (inValue & 0xFFFU) << 16 ; }

  // Field nDBOOT: Dual Boot mode (valid only when nDBANK=0)
    const uint32_t Flash_OPTCR_nDBOOT = 1U << 28 ;

  // Field nDBANK: Not dual bank mode
    const uint32_t Flash_OPTCR_nDBANK = 1U << 29 ;

  // Field IWDG_STDBY: Independent watchdog counter freeze in standby mode
    const uint32_t Flash_OPTCR_IWDG_STDBY = 1U << 30 ;

  // Field IWDG_STOP: Independent watchdog counter freeze in Stop mode
    const uint32_t Flash_OPTCR_IWDG_STOP = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OPTCR1: Flash option control register 1
  #define Flash_OPTCR1 (* ((volatile uint32_t *) (0x40023C00 + 24)))

  // Field BOOT_ADD0: Boot base address when Boot pin =0
    inline uint32_t Flash_OPTCR1_BOOT_ADD0 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field BOOT_ADD1: Boot base address when Boot pin =1
    inline uint32_t Flash_OPTCR1_BOOT_ADD1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------
// Peripheral GPIOA: General-purpose I/Os
//------------------------------------------------------------------------------

//---  Register MODER: GPIO port mode register
  #define GPIOA_MODER (* ((volatile uint32_t *) (0x40020000 + 0)))

  // Field MODER15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field MODER14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field MODER13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field MODER12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field MODER11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field MODER10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field MODER9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MODER8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field MODER7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field MODER6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field MODER5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field MODER4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field MODER3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field MODER2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MODER1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODER0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_MODER_MODER0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTYPER: GPIO port output type register
  #define GPIOA_OTYPER (* ((volatile uint32_t *) (0x40020000 + 4)))

  // Field OT15: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT15 = 1U << 15 ;

  // Field OT14: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT14 = 1U << 14 ;

  // Field OT13: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT13 = 1U << 13 ;

  // Field OT12: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT12 = 1U << 12 ;

  // Field OT11: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT11 = 1U << 11 ;

  // Field OT10: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT10 = 1U << 10 ;

  // Field OT9: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT9 = 1U << 9 ;

  // Field OT8: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT8 = 1U << 8 ;

  // Field OT7: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT7 = 1U << 7 ;

  // Field OT6: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT6 = 1U << 6 ;

  // Field OT5: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT5 = 1U << 5 ;

  // Field OT4: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT4 = 1U << 4 ;

  // Field OT3: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT3 = 1U << 3 ;

  // Field OT2: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT2 = 1U << 2 ;

  // Field OT1: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT1 = 1U << 1 ;

  // Field OT0: Port x configuration bits (y = 0..15)
    const uint32_t GPIOA_OTYPER_OT0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  #define GPIOA_GPIOB_OSPEEDR (* ((volatile uint32_t *) (0x40020000 + 8)))

  // Field OSPEEDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field OSPEEDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field OSPEEDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field OSPEEDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field OSPEEDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field OSPEEDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field OSPEEDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field OSPEEDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field OSPEEDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field OSPEEDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field OSPEEDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field OSPEEDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OSPEEDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field OSPEEDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field OSPEEDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field OSPEEDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_GPIOB_OSPEEDR_OSPEEDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PUPDR: GPIO port pull-up/pull-down register
  #define GPIOA_PUPDR (* ((volatile uint32_t *) (0x40020000 + 12)))

  // Field PUPDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field PUPDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field PUPDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field PUPDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field PUPDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field PUPDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field PUPDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field PUPDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PUPDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field PUPDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field PUPDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field PUPDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PUPDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PUPDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field PUPDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field PUPDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOA_PUPDR_PUPDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IDR: GPIO port input data register
  #define GPIOA_IDR (* ((const volatile uint32_t *) (0x40020000 + 16)))

  // Field IDR15: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR15 = 1U << 15 ;

  // Field IDR14: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR14 = 1U << 14 ;

  // Field IDR13: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR13 = 1U << 13 ;

  // Field IDR12: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR12 = 1U << 12 ;

  // Field IDR11: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR11 = 1U << 11 ;

  // Field IDR10: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR10 = 1U << 10 ;

  // Field IDR9: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR9 = 1U << 9 ;

  // Field IDR8: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR8 = 1U << 8 ;

  // Field IDR7: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR7 = 1U << 7 ;

  // Field IDR6: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR6 = 1U << 6 ;

  // Field IDR5: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR5 = 1U << 5 ;

  // Field IDR4: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR4 = 1U << 4 ;

  // Field IDR3: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR3 = 1U << 3 ;

  // Field IDR2: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR2 = 1U << 2 ;

  // Field IDR1: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR1 = 1U << 1 ;

  // Field IDR0: Port input data (y = 0..15)
    const uint32_t GPIOA_IDR_IDR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ODR: GPIO port output data register
  #define GPIOA_ODR (* ((volatile uint32_t *) (0x40020000 + 20)))

  // Field ODR15: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR15 = 1U << 15 ;

  // Field ODR14: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR14 = 1U << 14 ;

  // Field ODR13: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR13 = 1U << 13 ;

  // Field ODR12: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR12 = 1U << 12 ;

  // Field ODR11: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR11 = 1U << 11 ;

  // Field ODR10: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR10 = 1U << 10 ;

  // Field ODR9: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR9 = 1U << 9 ;

  // Field ODR8: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR8 = 1U << 8 ;

  // Field ODR7: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR7 = 1U << 7 ;

  // Field ODR6: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR6 = 1U << 6 ;

  // Field ODR5: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR5 = 1U << 5 ;

  // Field ODR4: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR4 = 1U << 4 ;

  // Field ODR3: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR3 = 1U << 3 ;

  // Field ODR2: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR2 = 1U << 2 ;

  // Field ODR1: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR1 = 1U << 1 ;

  // Field ODR0: Port output data (y = 0..15)
    const uint32_t GPIOA_ODR_ODR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BSRR: GPIO port bit set/reset register
  #define GPIOA_BSRR (* ((volatile uint32_t *) (0x40020000 + 24)))

  // Field BR15: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR15 = 1U << 31 ;

  // Field BR14: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR14 = 1U << 30 ;

  // Field BR13: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR13 = 1U << 29 ;

  // Field BR12: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR12 = 1U << 28 ;

  // Field BR11: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR11 = 1U << 27 ;

  // Field BR10: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR10 = 1U << 26 ;

  // Field BR9: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR9 = 1U << 25 ;

  // Field BR8: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR8 = 1U << 24 ;

  // Field BR7: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR7 = 1U << 23 ;

  // Field BR6: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR6 = 1U << 22 ;

  // Field BR5: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR5 = 1U << 21 ;

  // Field BR4: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR4 = 1U << 20 ;

  // Field BR3: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR3 = 1U << 19 ;

  // Field BR2: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR2 = 1U << 18 ;

  // Field BR1: Port x reset bit y (y = 0..15)
    const uint32_t GPIOA_BSRR_BR1 = 1U << 17 ;

  // Field BR0: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BR0 = 1U << 16 ;

  // Field BS15: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS15 = 1U << 15 ;

  // Field BS14: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS14 = 1U << 14 ;

  // Field BS13: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS13 = 1U << 13 ;

  // Field BS12: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS12 = 1U << 12 ;

  // Field BS11: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS11 = 1U << 11 ;

  // Field BS10: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS10 = 1U << 10 ;

  // Field BS9: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS9 = 1U << 9 ;

  // Field BS8: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS8 = 1U << 8 ;

  // Field BS7: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS7 = 1U << 7 ;

  // Field BS6: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS6 = 1U << 6 ;

  // Field BS5: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS5 = 1U << 5 ;

  // Field BS4: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS4 = 1U << 4 ;

  // Field BS3: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS3 = 1U << 3 ;

  // Field BS2: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS2 = 1U << 2 ;

  // Field BS1: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS1 = 1U << 1 ;

  // Field BS0: Port x set bit y (y= 0..15)
    const uint32_t GPIOA_BSRR_BS0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LCKR: GPIO port configuration lock register
  #define GPIOA_LCKR (* ((volatile uint32_t *) (0x40020000 + 28)))

  // Field LCKK: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCKK = 1U << 16 ;

  // Field LCK15: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK15 = 1U << 15 ;

  // Field LCK14: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK14 = 1U << 14 ;

  // Field LCK13: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK13 = 1U << 13 ;

  // Field LCK12: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK12 = 1U << 12 ;

  // Field LCK11: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK11 = 1U << 11 ;

  // Field LCK10: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK10 = 1U << 10 ;

  // Field LCK9: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK9 = 1U << 9 ;

  // Field LCK8: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK8 = 1U << 8 ;

  // Field LCK7: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK7 = 1U << 7 ;

  // Field LCK6: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK6 = 1U << 6 ;

  // Field LCK5: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK5 = 1U << 5 ;

  // Field LCK4: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK4 = 1U << 4 ;

  // Field LCK3: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK3 = 1U << 3 ;

  // Field LCK2: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK2 = 1U << 2 ;

  // Field LCK1: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK1 = 1U << 1 ;

  // Field LCK0: Port x lock bit y (y= 0..15)
    const uint32_t GPIOA_LCKR_LCK0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AFRL: GPIO alternate function low register
  #define GPIOA_AFRL (* ((volatile uint32_t *) (0x40020000 + 32)))

  // Field AFRL7: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOA_AFRL_AFRL7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRL6: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOA_AFRL_AFRL6 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRL5: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOA_AFRL_AFRL5 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRL4: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOA_AFRL_AFRL4 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRL3: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOA_AFRL_AFRL3 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRL2: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOA_AFRL_AFRL2 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRL1: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOA_AFRL_AFRL1 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRL0: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOA_AFRL_AFRL0 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AFRH: GPIO alternate function high register
  #define GPIOA_AFRH (* ((volatile uint32_t *) (0x40020000 + 36)))

  // Field AFRH15: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOA_AFRH_AFRH15 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRH14: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOA_AFRH_AFRH14 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRH13: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOA_AFRH_AFRH13 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRH12: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOA_AFRH_AFRH12 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRH11: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOA_AFRH_AFRH11 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRH10: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOA_AFRH_AFRH10 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRH9: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOA_AFRH_AFRH9 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRH8: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOA_AFRH_AFRH8 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BRR: GPIO port bit reset register
  #define GPIOA_BRR (* ((volatile uint32_t *) (0x40020000 + 40)))

  // Field BR0: Port A Reset bit 0
    const uint32_t GPIOA_BRR_BR0 = 1U << 0 ;

  // Field BR1: Port A Reset bit 1
    const uint32_t GPIOA_BRR_BR1 = 1U << 1 ;

  // Field BR2: Port A Reset bit 2
    const uint32_t GPIOA_BRR_BR2 = 1U << 2 ;

  // Field BR3: Port A Reset bit 3
    const uint32_t GPIOA_BRR_BR3 = 1U << 3 ;

  // Field BR4: Port A Reset bit 4
    const uint32_t GPIOA_BRR_BR4 = 1U << 4 ;

  // Field BR5: Port A Reset bit 5
    const uint32_t GPIOA_BRR_BR5 = 1U << 5 ;

  // Field BR6: Port A Reset bit 6
    const uint32_t GPIOA_BRR_BR6 = 1U << 6 ;

  // Field BR7: Port A Reset bit 7
    const uint32_t GPIOA_BRR_BR7 = 1U << 7 ;

  // Field BR8: Port A Reset bit 8
    const uint32_t GPIOA_BRR_BR8 = 1U << 8 ;

  // Field BR9: Port A Reset bit 9
    const uint32_t GPIOA_BRR_BR9 = 1U << 9 ;

  // Field BR10: Port A Reset bit 10
    const uint32_t GPIOA_BRR_BR10 = 1U << 10 ;

  // Field BR11: Port A Reset bit 11
    const uint32_t GPIOA_BRR_BR11 = 1U << 11 ;

  // Field BR12: Port A Reset bit 12
    const uint32_t GPIOA_BRR_BR12 = 1U << 12 ;

  // Field BR13: Port A Reset bit 13
    const uint32_t GPIOA_BRR_BR13 = 1U << 13 ;

  // Field BR14: Port A Reset bit 14
    const uint32_t GPIOA_BRR_BR14 = 1U << 14 ;

  // Field BR15: Port A Reset bit 15
    const uint32_t GPIOA_BRR_BR15 = 1U << 15 ;

//------------------------------------------------------------------------------
// Peripheral GPIOB: General-purpose I/Os
//------------------------------------------------------------------------------

//---  Register MODER: GPIO port mode register
  #define GPIOB_MODER (* ((volatile uint32_t *) (0x40020400 + 0)))

  // Field MODER15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field MODER14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field MODER13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field MODER12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field MODER11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field MODER10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field MODER9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MODER8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field MODER7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field MODER6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field MODER5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field MODER4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field MODER3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field MODER2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MODER1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODER0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_MODER_MODER0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTYPER: GPIO port output type register
  #define GPIOB_OTYPER (* ((volatile uint32_t *) (0x40020400 + 4)))

  // Field OT15: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT15 = 1U << 15 ;

  // Field OT14: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT14 = 1U << 14 ;

  // Field OT13: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT13 = 1U << 13 ;

  // Field OT12: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT12 = 1U << 12 ;

  // Field OT11: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT11 = 1U << 11 ;

  // Field OT10: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT10 = 1U << 10 ;

  // Field OT9: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT9 = 1U << 9 ;

  // Field OT8: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT8 = 1U << 8 ;

  // Field OT7: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT7 = 1U << 7 ;

  // Field OT6: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT6 = 1U << 6 ;

  // Field OT5: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT5 = 1U << 5 ;

  // Field OT4: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT4 = 1U << 4 ;

  // Field OT3: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT3 = 1U << 3 ;

  // Field OT2: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT2 = 1U << 2 ;

  // Field OT1: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT1 = 1U << 1 ;

  // Field OT0: Port x configuration bits (y = 0..15)
    const uint32_t GPIOB_OTYPER_OT0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  #define GPIOB_GPIOB_OSPEEDR (* ((volatile uint32_t *) (0x40020400 + 8)))

  // Field OSPEEDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field OSPEEDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field OSPEEDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field OSPEEDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field OSPEEDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field OSPEEDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field OSPEEDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field OSPEEDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field OSPEEDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field OSPEEDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field OSPEEDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field OSPEEDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OSPEEDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field OSPEEDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field OSPEEDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field OSPEEDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_GPIOB_OSPEEDR_OSPEEDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PUPDR: GPIO port pull-up/pull-down register
  #define GPIOB_PUPDR (* ((volatile uint32_t *) (0x40020400 + 12)))

  // Field PUPDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field PUPDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field PUPDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field PUPDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field PUPDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field PUPDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field PUPDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field PUPDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PUPDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field PUPDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field PUPDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field PUPDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PUPDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PUPDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field PUPDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field PUPDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOB_PUPDR_PUPDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IDR: GPIO port input data register
  #define GPIOB_IDR (* ((const volatile uint32_t *) (0x40020400 + 16)))

  // Field IDR15: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR15 = 1U << 15 ;

  // Field IDR14: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR14 = 1U << 14 ;

  // Field IDR13: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR13 = 1U << 13 ;

  // Field IDR12: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR12 = 1U << 12 ;

  // Field IDR11: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR11 = 1U << 11 ;

  // Field IDR10: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR10 = 1U << 10 ;

  // Field IDR9: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR9 = 1U << 9 ;

  // Field IDR8: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR8 = 1U << 8 ;

  // Field IDR7: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR7 = 1U << 7 ;

  // Field IDR6: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR6 = 1U << 6 ;

  // Field IDR5: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR5 = 1U << 5 ;

  // Field IDR4: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR4 = 1U << 4 ;

  // Field IDR3: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR3 = 1U << 3 ;

  // Field IDR2: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR2 = 1U << 2 ;

  // Field IDR1: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR1 = 1U << 1 ;

  // Field IDR0: Port input data (y = 0..15)
    const uint32_t GPIOB_IDR_IDR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ODR: GPIO port output data register
  #define GPIOB_ODR (* ((volatile uint32_t *) (0x40020400 + 20)))

  // Field ODR15: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR15 = 1U << 15 ;

  // Field ODR14: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR14 = 1U << 14 ;

  // Field ODR13: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR13 = 1U << 13 ;

  // Field ODR12: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR12 = 1U << 12 ;

  // Field ODR11: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR11 = 1U << 11 ;

  // Field ODR10: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR10 = 1U << 10 ;

  // Field ODR9: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR9 = 1U << 9 ;

  // Field ODR8: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR8 = 1U << 8 ;

  // Field ODR7: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR7 = 1U << 7 ;

  // Field ODR6: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR6 = 1U << 6 ;

  // Field ODR5: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR5 = 1U << 5 ;

  // Field ODR4: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR4 = 1U << 4 ;

  // Field ODR3: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR3 = 1U << 3 ;

  // Field ODR2: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR2 = 1U << 2 ;

  // Field ODR1: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR1 = 1U << 1 ;

  // Field ODR0: Port output data (y = 0..15)
    const uint32_t GPIOB_ODR_ODR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BSRR: GPIO port bit set/reset register
  #define GPIOB_BSRR (* ((volatile uint32_t *) (0x40020400 + 24)))

  // Field BR15: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR15 = 1U << 31 ;

  // Field BR14: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR14 = 1U << 30 ;

  // Field BR13: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR13 = 1U << 29 ;

  // Field BR12: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR12 = 1U << 28 ;

  // Field BR11: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR11 = 1U << 27 ;

  // Field BR10: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR10 = 1U << 26 ;

  // Field BR9: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR9 = 1U << 25 ;

  // Field BR8: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR8 = 1U << 24 ;

  // Field BR7: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR7 = 1U << 23 ;

  // Field BR6: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR6 = 1U << 22 ;

  // Field BR5: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR5 = 1U << 21 ;

  // Field BR4: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR4 = 1U << 20 ;

  // Field BR3: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR3 = 1U << 19 ;

  // Field BR2: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR2 = 1U << 18 ;

  // Field BR1: Port x reset bit y (y = 0..15)
    const uint32_t GPIOB_BSRR_BR1 = 1U << 17 ;

  // Field BR0: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BR0 = 1U << 16 ;

  // Field BS15: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS15 = 1U << 15 ;

  // Field BS14: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS14 = 1U << 14 ;

  // Field BS13: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS13 = 1U << 13 ;

  // Field BS12: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS12 = 1U << 12 ;

  // Field BS11: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS11 = 1U << 11 ;

  // Field BS10: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS10 = 1U << 10 ;

  // Field BS9: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS9 = 1U << 9 ;

  // Field BS8: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS8 = 1U << 8 ;

  // Field BS7: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS7 = 1U << 7 ;

  // Field BS6: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS6 = 1U << 6 ;

  // Field BS5: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS5 = 1U << 5 ;

  // Field BS4: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS4 = 1U << 4 ;

  // Field BS3: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS3 = 1U << 3 ;

  // Field BS2: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS2 = 1U << 2 ;

  // Field BS1: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS1 = 1U << 1 ;

  // Field BS0: Port x set bit y (y= 0..15)
    const uint32_t GPIOB_BSRR_BS0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LCKR: GPIO port configuration lock register
  #define GPIOB_LCKR (* ((volatile uint32_t *) (0x40020400 + 28)))

  // Field LCKK: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCKK = 1U << 16 ;

  // Field LCK15: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK15 = 1U << 15 ;

  // Field LCK14: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK14 = 1U << 14 ;

  // Field LCK13: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK13 = 1U << 13 ;

  // Field LCK12: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK12 = 1U << 12 ;

  // Field LCK11: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK11 = 1U << 11 ;

  // Field LCK10: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK10 = 1U << 10 ;

  // Field LCK9: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK9 = 1U << 9 ;

  // Field LCK8: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK8 = 1U << 8 ;

  // Field LCK7: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK7 = 1U << 7 ;

  // Field LCK6: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK6 = 1U << 6 ;

  // Field LCK5: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK5 = 1U << 5 ;

  // Field LCK4: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK4 = 1U << 4 ;

  // Field LCK3: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK3 = 1U << 3 ;

  // Field LCK2: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK2 = 1U << 2 ;

  // Field LCK1: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK1 = 1U << 1 ;

  // Field LCK0: Port x lock bit y (y= 0..15)
    const uint32_t GPIOB_LCKR_LCK0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AFRL: GPIO alternate function low register
  #define GPIOB_AFRL (* ((volatile uint32_t *) (0x40020400 + 32)))

  // Field AFRL7: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOB_AFRL_AFRL7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRL6: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOB_AFRL_AFRL6 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRL5: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOB_AFRL_AFRL5 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRL4: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOB_AFRL_AFRL4 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRL3: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOB_AFRL_AFRL3 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRL2: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOB_AFRL_AFRL2 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRL1: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOB_AFRL_AFRL1 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRL0: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOB_AFRL_AFRL0 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AFRH: GPIO alternate function high register
  #define GPIOB_AFRH (* ((volatile uint32_t *) (0x40020400 + 36)))

  // Field AFRH15: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOB_AFRH_AFRH15 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRH14: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOB_AFRH_AFRH14 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRH13: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOB_AFRH_AFRH13 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRH12: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOB_AFRH_AFRH12 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRH11: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOB_AFRH_AFRH11 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRH10: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOB_AFRH_AFRH10 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRH9: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOB_AFRH_AFRH9 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRH8: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOB_AFRH_AFRH8 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BRR: GPIO port bit reset register
  #define GPIOB_BRR (* ((volatile uint32_t *) (0x40020400 + 40)))

  // Field BR0: Port B Reset bit 0
    const uint32_t GPIOB_BRR_BR0 = 1U << 0 ;

  // Field BR1: Port B Reset bit 1
    const uint32_t GPIOB_BRR_BR1 = 1U << 1 ;

  // Field BR2: Port B Reset bit 2
    const uint32_t GPIOB_BRR_BR2 = 1U << 2 ;

  // Field BR3: Port B Reset bit 3
    const uint32_t GPIOB_BRR_BR3 = 1U << 3 ;

  // Field BR4: Port B Reset bit 4
    const uint32_t GPIOB_BRR_BR4 = 1U << 4 ;

  // Field BR5: Port B Reset bit 5
    const uint32_t GPIOB_BRR_BR5 = 1U << 5 ;

  // Field BR6: Port B Reset bit 6
    const uint32_t GPIOB_BRR_BR6 = 1U << 6 ;

  // Field BR7: Port B Reset bit 7
    const uint32_t GPIOB_BRR_BR7 = 1U << 7 ;

  // Field BR8: Port B Reset bit 8
    const uint32_t GPIOB_BRR_BR8 = 1U << 8 ;

  // Field BR9: Port B Reset bit 9
    const uint32_t GPIOB_BRR_BR9 = 1U << 9 ;

  // Field BR10: Port B Reset bit 10
    const uint32_t GPIOB_BRR_BR10 = 1U << 10 ;

  // Field BR11: Port B Reset bit 11
    const uint32_t GPIOB_BRR_BR11 = 1U << 11 ;

  // Field BR12: Port B Reset bit 12
    const uint32_t GPIOB_BRR_BR12 = 1U << 12 ;

  // Field BR13: Port B Reset bit 13
    const uint32_t GPIOB_BRR_BR13 = 1U << 13 ;

  // Field BR14: Port B Reset bit 14
    const uint32_t GPIOB_BRR_BR14 = 1U << 14 ;

  // Field BR15: Port B Reset bit 15
    const uint32_t GPIOB_BRR_BR15 = 1U << 15 ;

//------------------------------------------------------------------------------
// Peripheral GPIOC
//------------------------------------------------------------------------------

//---  Register MODER: GPIO port mode register
  #define GPIOC_MODER (* ((volatile uint32_t *) (0x40020800 + 0)))

  // Field MODER15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field MODER14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field MODER13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field MODER12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field MODER11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field MODER10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field MODER9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MODER8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field MODER7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field MODER6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field MODER5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field MODER4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field MODER3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field MODER2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MODER1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODER0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_MODER_MODER0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTYPER: GPIO port output type register
  #define GPIOC_OTYPER (* ((volatile uint32_t *) (0x40020800 + 4)))

  // Field OT15: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT15 = 1U << 15 ;

  // Field OT14: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT14 = 1U << 14 ;

  // Field OT13: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT13 = 1U << 13 ;

  // Field OT12: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT12 = 1U << 12 ;

  // Field OT11: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT11 = 1U << 11 ;

  // Field OT10: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT10 = 1U << 10 ;

  // Field OT9: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT9 = 1U << 9 ;

  // Field OT8: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT8 = 1U << 8 ;

  // Field OT7: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT7 = 1U << 7 ;

  // Field OT6: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT6 = 1U << 6 ;

  // Field OT5: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT5 = 1U << 5 ;

  // Field OT4: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT4 = 1U << 4 ;

  // Field OT3: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT3 = 1U << 3 ;

  // Field OT2: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT2 = 1U << 2 ;

  // Field OT1: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT1 = 1U << 1 ;

  // Field OT0: Port x configuration bits (y = 0..15)
    const uint32_t GPIOC_OTYPER_OT0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  #define GPIOC_GPIOB_OSPEEDR (* ((volatile uint32_t *) (0x40020800 + 8)))

  // Field OSPEEDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field OSPEEDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field OSPEEDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field OSPEEDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field OSPEEDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field OSPEEDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field OSPEEDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field OSPEEDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field OSPEEDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field OSPEEDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field OSPEEDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field OSPEEDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OSPEEDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field OSPEEDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field OSPEEDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field OSPEEDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_GPIOB_OSPEEDR_OSPEEDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PUPDR: GPIO port pull-up/pull-down register
  #define GPIOC_PUPDR (* ((volatile uint32_t *) (0x40020800 + 12)))

  // Field PUPDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field PUPDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field PUPDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field PUPDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field PUPDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field PUPDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field PUPDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field PUPDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PUPDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field PUPDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field PUPDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field PUPDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PUPDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PUPDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field PUPDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field PUPDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOC_PUPDR_PUPDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IDR: GPIO port input data register
  #define GPIOC_IDR (* ((const volatile uint32_t *) (0x40020800 + 16)))

  // Field IDR15: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR15 = 1U << 15 ;

  // Field IDR14: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR14 = 1U << 14 ;

  // Field IDR13: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR13 = 1U << 13 ;

  // Field IDR12: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR12 = 1U << 12 ;

  // Field IDR11: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR11 = 1U << 11 ;

  // Field IDR10: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR10 = 1U << 10 ;

  // Field IDR9: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR9 = 1U << 9 ;

  // Field IDR8: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR8 = 1U << 8 ;

  // Field IDR7: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR7 = 1U << 7 ;

  // Field IDR6: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR6 = 1U << 6 ;

  // Field IDR5: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR5 = 1U << 5 ;

  // Field IDR4: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR4 = 1U << 4 ;

  // Field IDR3: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR3 = 1U << 3 ;

  // Field IDR2: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR2 = 1U << 2 ;

  // Field IDR1: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR1 = 1U << 1 ;

  // Field IDR0: Port input data (y = 0..15)
    const uint32_t GPIOC_IDR_IDR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ODR: GPIO port output data register
  #define GPIOC_ODR (* ((volatile uint32_t *) (0x40020800 + 20)))

  // Field ODR15: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR15 = 1U << 15 ;

  // Field ODR14: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR14 = 1U << 14 ;

  // Field ODR13: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR13 = 1U << 13 ;

  // Field ODR12: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR12 = 1U << 12 ;

  // Field ODR11: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR11 = 1U << 11 ;

  // Field ODR10: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR10 = 1U << 10 ;

  // Field ODR9: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR9 = 1U << 9 ;

  // Field ODR8: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR8 = 1U << 8 ;

  // Field ODR7: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR7 = 1U << 7 ;

  // Field ODR6: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR6 = 1U << 6 ;

  // Field ODR5: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR5 = 1U << 5 ;

  // Field ODR4: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR4 = 1U << 4 ;

  // Field ODR3: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR3 = 1U << 3 ;

  // Field ODR2: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR2 = 1U << 2 ;

  // Field ODR1: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR1 = 1U << 1 ;

  // Field ODR0: Port output data (y = 0..15)
    const uint32_t GPIOC_ODR_ODR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BSRR: GPIO port bit set/reset register
  #define GPIOC_BSRR (* ((volatile uint32_t *) (0x40020800 + 24)))

  // Field BR15: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR15 = 1U << 31 ;

  // Field BR14: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR14 = 1U << 30 ;

  // Field BR13: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR13 = 1U << 29 ;

  // Field BR12: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR12 = 1U << 28 ;

  // Field BR11: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR11 = 1U << 27 ;

  // Field BR10: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR10 = 1U << 26 ;

  // Field BR9: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR9 = 1U << 25 ;

  // Field BR8: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR8 = 1U << 24 ;

  // Field BR7: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR7 = 1U << 23 ;

  // Field BR6: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR6 = 1U << 22 ;

  // Field BR5: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR5 = 1U << 21 ;

  // Field BR4: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR4 = 1U << 20 ;

  // Field BR3: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR3 = 1U << 19 ;

  // Field BR2: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR2 = 1U << 18 ;

  // Field BR1: Port x reset bit y (y = 0..15)
    const uint32_t GPIOC_BSRR_BR1 = 1U << 17 ;

  // Field BR0: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BR0 = 1U << 16 ;

  // Field BS15: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS15 = 1U << 15 ;

  // Field BS14: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS14 = 1U << 14 ;

  // Field BS13: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS13 = 1U << 13 ;

  // Field BS12: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS12 = 1U << 12 ;

  // Field BS11: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS11 = 1U << 11 ;

  // Field BS10: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS10 = 1U << 10 ;

  // Field BS9: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS9 = 1U << 9 ;

  // Field BS8: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS8 = 1U << 8 ;

  // Field BS7: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS7 = 1U << 7 ;

  // Field BS6: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS6 = 1U << 6 ;

  // Field BS5: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS5 = 1U << 5 ;

  // Field BS4: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS4 = 1U << 4 ;

  // Field BS3: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS3 = 1U << 3 ;

  // Field BS2: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS2 = 1U << 2 ;

  // Field BS1: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS1 = 1U << 1 ;

  // Field BS0: Port x set bit y (y= 0..15)
    const uint32_t GPIOC_BSRR_BS0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LCKR: GPIO port configuration lock register
  #define GPIOC_LCKR (* ((volatile uint32_t *) (0x40020800 + 28)))

  // Field LCKK: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCKK = 1U << 16 ;

  // Field LCK15: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK15 = 1U << 15 ;

  // Field LCK14: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK14 = 1U << 14 ;

  // Field LCK13: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK13 = 1U << 13 ;

  // Field LCK12: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK12 = 1U << 12 ;

  // Field LCK11: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK11 = 1U << 11 ;

  // Field LCK10: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK10 = 1U << 10 ;

  // Field LCK9: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK9 = 1U << 9 ;

  // Field LCK8: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK8 = 1U << 8 ;

  // Field LCK7: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK7 = 1U << 7 ;

  // Field LCK6: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK6 = 1U << 6 ;

  // Field LCK5: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK5 = 1U << 5 ;

  // Field LCK4: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK4 = 1U << 4 ;

  // Field LCK3: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK3 = 1U << 3 ;

  // Field LCK2: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK2 = 1U << 2 ;

  // Field LCK1: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK1 = 1U << 1 ;

  // Field LCK0: Port x lock bit y (y= 0..15)
    const uint32_t GPIOC_LCKR_LCK0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AFRL: GPIO alternate function lowregister
  #define GPIOC_AFRL (* ((volatile uint32_t *) (0x40020800 + 32)))

  // Field AFRL7: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOC_AFRL_AFRL7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRL6: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOC_AFRL_AFRL6 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRL5: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOC_AFRL_AFRL5 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRL4: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOC_AFRL_AFRL4 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRL3: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOC_AFRL_AFRL3 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRL2: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOC_AFRL_AFRL2 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRL1: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOC_AFRL_AFRL1 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRL0: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOC_AFRL_AFRL0 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AFRH: GPIO alternate function high register
  #define GPIOC_AFRH (* ((volatile uint32_t *) (0x40020800 + 36)))

  // Field AFRH15: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOC_AFRH_AFRH15 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRH14: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOC_AFRH_AFRH14 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRH13: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOC_AFRH_AFRH13 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRH12: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOC_AFRH_AFRH12 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRH11: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOC_AFRH_AFRH11 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRH10: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOC_AFRH_AFRH10 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRH9: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOC_AFRH_AFRH9 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRH8: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOC_AFRH_AFRH8 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BRR: GPIO port bit reset register
  #define GPIOC_BRR (* ((volatile uint32_t *) (0x40020800 + 40)))

  // Field BR0: Port D Reset bit 0
    const uint32_t GPIOC_BRR_BR0 = 1U << 0 ;

  // Field BR1: Port D Reset bit 1
    const uint32_t GPIOC_BRR_BR1 = 1U << 1 ;

  // Field BR2: Port D Reset bit 2
    const uint32_t GPIOC_BRR_BR2 = 1U << 2 ;

  // Field BR3: Port D Reset bit 3
    const uint32_t GPIOC_BRR_BR3 = 1U << 3 ;

  // Field BR4: Port D Reset bit 4
    const uint32_t GPIOC_BRR_BR4 = 1U << 4 ;

  // Field BR5: Port D Reset bit 5
    const uint32_t GPIOC_BRR_BR5 = 1U << 5 ;

  // Field BR6: Port D Reset bit 6
    const uint32_t GPIOC_BRR_BR6 = 1U << 6 ;

  // Field BR7: Port D Reset bit 7
    const uint32_t GPIOC_BRR_BR7 = 1U << 7 ;

  // Field BR8: Port D Reset bit 8
    const uint32_t GPIOC_BRR_BR8 = 1U << 8 ;

  // Field BR9: Port D Reset bit 9
    const uint32_t GPIOC_BRR_BR9 = 1U << 9 ;

  // Field BR10: Port D Reset bit 10
    const uint32_t GPIOC_BRR_BR10 = 1U << 10 ;

  // Field BR11: Port D Reset bit 11
    const uint32_t GPIOC_BRR_BR11 = 1U << 11 ;

  // Field BR12: Port D Reset bit 12
    const uint32_t GPIOC_BRR_BR12 = 1U << 12 ;

  // Field BR13: Port D Reset bit 13
    const uint32_t GPIOC_BRR_BR13 = 1U << 13 ;

  // Field BR14: Port D Reset bit 14
    const uint32_t GPIOC_BRR_BR14 = 1U << 14 ;

  // Field BR15: Port D Reset bit 15
    const uint32_t GPIOC_BRR_BR15 = 1U << 15 ;

//------------------------------------------------------------------------------
// Peripheral GPIOD: General-purpose I/Os
//------------------------------------------------------------------------------

//---  Register MODER: GPIO port mode register
  #define GPIOD_MODER (* ((volatile uint32_t *) (0x40020C00 + 0)))

  // Field MODER15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field MODER14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field MODER13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field MODER12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field MODER11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field MODER10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field MODER9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MODER8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field MODER7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field MODER6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field MODER5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field MODER4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field MODER3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field MODER2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MODER1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODER0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_MODER_MODER0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTYPER: GPIO port output type register
  #define GPIOD_OTYPER (* ((volatile uint32_t *) (0x40020C00 + 4)))

  // Field OT15: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT15 = 1U << 15 ;

  // Field OT14: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT14 = 1U << 14 ;

  // Field OT13: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT13 = 1U << 13 ;

  // Field OT12: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT12 = 1U << 12 ;

  // Field OT11: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT11 = 1U << 11 ;

  // Field OT10: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT10 = 1U << 10 ;

  // Field OT9: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT9 = 1U << 9 ;

  // Field OT8: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT8 = 1U << 8 ;

  // Field OT7: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT7 = 1U << 7 ;

  // Field OT6: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT6 = 1U << 6 ;

  // Field OT5: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT5 = 1U << 5 ;

  // Field OT4: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT4 = 1U << 4 ;

  // Field OT3: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT3 = 1U << 3 ;

  // Field OT2: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT2 = 1U << 2 ;

  // Field OT1: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT1 = 1U << 1 ;

  // Field OT0: Port x configuration bits (y = 0..15)
    const uint32_t GPIOD_OTYPER_OT0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  #define GPIOD_GPIOB_OSPEEDR (* ((volatile uint32_t *) (0x40020C00 + 8)))

  // Field OSPEEDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field OSPEEDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field OSPEEDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field OSPEEDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field OSPEEDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field OSPEEDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field OSPEEDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field OSPEEDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field OSPEEDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field OSPEEDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field OSPEEDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field OSPEEDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OSPEEDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field OSPEEDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field OSPEEDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field OSPEEDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_GPIOB_OSPEEDR_OSPEEDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PUPDR: GPIO port pull-up/pull-down register
  #define GPIOD_PUPDR (* ((volatile uint32_t *) (0x40020C00 + 12)))

  // Field PUPDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field PUPDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field PUPDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field PUPDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field PUPDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field PUPDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field PUPDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field PUPDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PUPDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field PUPDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field PUPDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field PUPDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PUPDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PUPDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field PUPDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field PUPDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOD_PUPDR_PUPDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IDR: GPIO port input data register
  #define GPIOD_IDR (* ((const volatile uint32_t *) (0x40020C00 + 16)))

  // Field IDR15: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR15 = 1U << 15 ;

  // Field IDR14: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR14 = 1U << 14 ;

  // Field IDR13: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR13 = 1U << 13 ;

  // Field IDR12: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR12 = 1U << 12 ;

  // Field IDR11: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR11 = 1U << 11 ;

  // Field IDR10: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR10 = 1U << 10 ;

  // Field IDR9: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR9 = 1U << 9 ;

  // Field IDR8: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR8 = 1U << 8 ;

  // Field IDR7: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR7 = 1U << 7 ;

  // Field IDR6: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR6 = 1U << 6 ;

  // Field IDR5: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR5 = 1U << 5 ;

  // Field IDR4: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR4 = 1U << 4 ;

  // Field IDR3: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR3 = 1U << 3 ;

  // Field IDR2: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR2 = 1U << 2 ;

  // Field IDR1: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR1 = 1U << 1 ;

  // Field IDR0: Port input data (y = 0..15)
    const uint32_t GPIOD_IDR_IDR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ODR: GPIO port output data register
  #define GPIOD_ODR (* ((volatile uint32_t *) (0x40020C00 + 20)))

  // Field ODR15: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR15 = 1U << 15 ;

  // Field ODR14: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR14 = 1U << 14 ;

  // Field ODR13: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR13 = 1U << 13 ;

  // Field ODR12: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR12 = 1U << 12 ;

  // Field ODR11: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR11 = 1U << 11 ;

  // Field ODR10: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR10 = 1U << 10 ;

  // Field ODR9: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR9 = 1U << 9 ;

  // Field ODR8: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR8 = 1U << 8 ;

  // Field ODR7: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR7 = 1U << 7 ;

  // Field ODR6: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR6 = 1U << 6 ;

  // Field ODR5: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR5 = 1U << 5 ;

  // Field ODR4: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR4 = 1U << 4 ;

  // Field ODR3: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR3 = 1U << 3 ;

  // Field ODR2: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR2 = 1U << 2 ;

  // Field ODR1: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR1 = 1U << 1 ;

  // Field ODR0: Port output data (y = 0..15)
    const uint32_t GPIOD_ODR_ODR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BSRR: GPIO port bit set/reset register
  #define GPIOD_BSRR (* ((volatile uint32_t *) (0x40020C00 + 24)))

  // Field BR15: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR15 = 1U << 31 ;

  // Field BR14: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR14 = 1U << 30 ;

  // Field BR13: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR13 = 1U << 29 ;

  // Field BR12: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR12 = 1U << 28 ;

  // Field BR11: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR11 = 1U << 27 ;

  // Field BR10: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR10 = 1U << 26 ;

  // Field BR9: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR9 = 1U << 25 ;

  // Field BR8: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR8 = 1U << 24 ;

  // Field BR7: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR7 = 1U << 23 ;

  // Field BR6: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR6 = 1U << 22 ;

  // Field BR5: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR5 = 1U << 21 ;

  // Field BR4: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR4 = 1U << 20 ;

  // Field BR3: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR3 = 1U << 19 ;

  // Field BR2: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR2 = 1U << 18 ;

  // Field BR1: Port x reset bit y (y = 0..15)
    const uint32_t GPIOD_BSRR_BR1 = 1U << 17 ;

  // Field BR0: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BR0 = 1U << 16 ;

  // Field BS15: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS15 = 1U << 15 ;

  // Field BS14: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS14 = 1U << 14 ;

  // Field BS13: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS13 = 1U << 13 ;

  // Field BS12: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS12 = 1U << 12 ;

  // Field BS11: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS11 = 1U << 11 ;

  // Field BS10: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS10 = 1U << 10 ;

  // Field BS9: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS9 = 1U << 9 ;

  // Field BS8: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS8 = 1U << 8 ;

  // Field BS7: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS7 = 1U << 7 ;

  // Field BS6: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS6 = 1U << 6 ;

  // Field BS5: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS5 = 1U << 5 ;

  // Field BS4: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS4 = 1U << 4 ;

  // Field BS3: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS3 = 1U << 3 ;

  // Field BS2: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS2 = 1U << 2 ;

  // Field BS1: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS1 = 1U << 1 ;

  // Field BS0: Port x set bit y (y= 0..15)
    const uint32_t GPIOD_BSRR_BS0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LCKR: GPIO port configuration lock register
  #define GPIOD_LCKR (* ((volatile uint32_t *) (0x40020C00 + 28)))

  // Field LCKK: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCKK = 1U << 16 ;

  // Field LCK15: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK15 = 1U << 15 ;

  // Field LCK14: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK14 = 1U << 14 ;

  // Field LCK13: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK13 = 1U << 13 ;

  // Field LCK12: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK12 = 1U << 12 ;

  // Field LCK11: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK11 = 1U << 11 ;

  // Field LCK10: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK10 = 1U << 10 ;

  // Field LCK9: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK9 = 1U << 9 ;

  // Field LCK8: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK8 = 1U << 8 ;

  // Field LCK7: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK7 = 1U << 7 ;

  // Field LCK6: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK6 = 1U << 6 ;

  // Field LCK5: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK5 = 1U << 5 ;

  // Field LCK4: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK4 = 1U << 4 ;

  // Field LCK3: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK3 = 1U << 3 ;

  // Field LCK2: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK2 = 1U << 2 ;

  // Field LCK1: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK1 = 1U << 1 ;

  // Field LCK0: Port x lock bit y (y= 0..15)
    const uint32_t GPIOD_LCKR_LCK0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AFRL: GPIO alternate function lowregister
  #define GPIOD_AFRL (* ((volatile uint32_t *) (0x40020C00 + 32)))

  // Field AFRL7: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOD_AFRL_AFRL7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRL6: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOD_AFRL_AFRL6 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRL5: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOD_AFRL_AFRL5 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRL4: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOD_AFRL_AFRL4 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRL3: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOD_AFRL_AFRL3 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRL2: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOD_AFRL_AFRL2 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRL1: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOD_AFRL_AFRL1 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRL0: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOD_AFRL_AFRL0 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AFRH: GPIO alternate function high register
  #define GPIOD_AFRH (* ((volatile uint32_t *) (0x40020C00 + 36)))

  // Field AFRH15: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOD_AFRH_AFRH15 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRH14: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOD_AFRH_AFRH14 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRH13: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOD_AFRH_AFRH13 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRH12: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOD_AFRH_AFRH12 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRH11: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOD_AFRH_AFRH11 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRH10: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOD_AFRH_AFRH10 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRH9: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOD_AFRH_AFRH9 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRH8: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOD_AFRH_AFRH8 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BRR: GPIO port bit reset register
  #define GPIOD_BRR (* ((volatile uint32_t *) (0x40020C00 + 40)))

  // Field BR0: Port D Reset bit 0
    const uint32_t GPIOD_BRR_BR0 = 1U << 0 ;

  // Field BR1: Port D Reset bit 1
    const uint32_t GPIOD_BRR_BR1 = 1U << 1 ;

  // Field BR2: Port D Reset bit 2
    const uint32_t GPIOD_BRR_BR2 = 1U << 2 ;

  // Field BR3: Port D Reset bit 3
    const uint32_t GPIOD_BRR_BR3 = 1U << 3 ;

  // Field BR4: Port D Reset bit 4
    const uint32_t GPIOD_BRR_BR4 = 1U << 4 ;

  // Field BR5: Port D Reset bit 5
    const uint32_t GPIOD_BRR_BR5 = 1U << 5 ;

  // Field BR6: Port D Reset bit 6
    const uint32_t GPIOD_BRR_BR6 = 1U << 6 ;

  // Field BR7: Port D Reset bit 7
    const uint32_t GPIOD_BRR_BR7 = 1U << 7 ;

  // Field BR8: Port D Reset bit 8
    const uint32_t GPIOD_BRR_BR8 = 1U << 8 ;

  // Field BR9: Port D Reset bit 9
    const uint32_t GPIOD_BRR_BR9 = 1U << 9 ;

  // Field BR10: Port D Reset bit 10
    const uint32_t GPIOD_BRR_BR10 = 1U << 10 ;

  // Field BR11: Port D Reset bit 11
    const uint32_t GPIOD_BRR_BR11 = 1U << 11 ;

  // Field BR12: Port D Reset bit 12
    const uint32_t GPIOD_BRR_BR12 = 1U << 12 ;

  // Field BR13: Port D Reset bit 13
    const uint32_t GPIOD_BRR_BR13 = 1U << 13 ;

  // Field BR14: Port D Reset bit 14
    const uint32_t GPIOD_BRR_BR14 = 1U << 14 ;

  // Field BR15: Port D Reset bit 15
    const uint32_t GPIOD_BRR_BR15 = 1U << 15 ;

//------------------------------------------------------------------------------
// Peripheral GPIOE
//------------------------------------------------------------------------------

//---  Register MODER: GPIO port mode register
  #define GPIOE_MODER (* ((volatile uint32_t *) (0x40021000 + 0)))

  // Field MODER15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field MODER14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field MODER13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field MODER12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field MODER11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field MODER10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field MODER9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MODER8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field MODER7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field MODER6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field MODER5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field MODER4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field MODER3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field MODER2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MODER1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODER0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_MODER_MODER0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTYPER: GPIO port output type register
  #define GPIOE_OTYPER (* ((volatile uint32_t *) (0x40021000 + 4)))

  // Field OT15: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT15 = 1U << 15 ;

  // Field OT14: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT14 = 1U << 14 ;

  // Field OT13: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT13 = 1U << 13 ;

  // Field OT12: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT12 = 1U << 12 ;

  // Field OT11: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT11 = 1U << 11 ;

  // Field OT10: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT10 = 1U << 10 ;

  // Field OT9: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT9 = 1U << 9 ;

  // Field OT8: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT8 = 1U << 8 ;

  // Field OT7: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT7 = 1U << 7 ;

  // Field OT6: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT6 = 1U << 6 ;

  // Field OT5: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT5 = 1U << 5 ;

  // Field OT4: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT4 = 1U << 4 ;

  // Field OT3: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT3 = 1U << 3 ;

  // Field OT2: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT2 = 1U << 2 ;

  // Field OT1: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT1 = 1U << 1 ;

  // Field OT0: Port x configuration bits (y = 0..15)
    const uint32_t GPIOE_OTYPER_OT0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  #define GPIOE_GPIOB_OSPEEDR (* ((volatile uint32_t *) (0x40021000 + 8)))

  // Field OSPEEDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field OSPEEDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field OSPEEDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field OSPEEDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field OSPEEDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field OSPEEDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field OSPEEDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field OSPEEDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field OSPEEDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field OSPEEDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field OSPEEDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field OSPEEDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OSPEEDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field OSPEEDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field OSPEEDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field OSPEEDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_GPIOB_OSPEEDR_OSPEEDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PUPDR: GPIO port pull-up/pull-down register
  #define GPIOE_PUPDR (* ((volatile uint32_t *) (0x40021000 + 12)))

  // Field PUPDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field PUPDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field PUPDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field PUPDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field PUPDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field PUPDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field PUPDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field PUPDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PUPDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field PUPDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field PUPDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field PUPDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PUPDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PUPDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field PUPDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field PUPDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOE_PUPDR_PUPDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IDR: GPIO port input data register
  #define GPIOE_IDR (* ((const volatile uint32_t *) (0x40021000 + 16)))

  // Field IDR15: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR15 = 1U << 15 ;

  // Field IDR14: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR14 = 1U << 14 ;

  // Field IDR13: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR13 = 1U << 13 ;

  // Field IDR12: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR12 = 1U << 12 ;

  // Field IDR11: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR11 = 1U << 11 ;

  // Field IDR10: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR10 = 1U << 10 ;

  // Field IDR9: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR9 = 1U << 9 ;

  // Field IDR8: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR8 = 1U << 8 ;

  // Field IDR7: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR7 = 1U << 7 ;

  // Field IDR6: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR6 = 1U << 6 ;

  // Field IDR5: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR5 = 1U << 5 ;

  // Field IDR4: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR4 = 1U << 4 ;

  // Field IDR3: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR3 = 1U << 3 ;

  // Field IDR2: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR2 = 1U << 2 ;

  // Field IDR1: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR1 = 1U << 1 ;

  // Field IDR0: Port input data (y = 0..15)
    const uint32_t GPIOE_IDR_IDR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ODR: GPIO port output data register
  #define GPIOE_ODR (* ((volatile uint32_t *) (0x40021000 + 20)))

  // Field ODR15: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR15 = 1U << 15 ;

  // Field ODR14: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR14 = 1U << 14 ;

  // Field ODR13: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR13 = 1U << 13 ;

  // Field ODR12: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR12 = 1U << 12 ;

  // Field ODR11: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR11 = 1U << 11 ;

  // Field ODR10: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR10 = 1U << 10 ;

  // Field ODR9: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR9 = 1U << 9 ;

  // Field ODR8: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR8 = 1U << 8 ;

  // Field ODR7: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR7 = 1U << 7 ;

  // Field ODR6: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR6 = 1U << 6 ;

  // Field ODR5: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR5 = 1U << 5 ;

  // Field ODR4: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR4 = 1U << 4 ;

  // Field ODR3: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR3 = 1U << 3 ;

  // Field ODR2: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR2 = 1U << 2 ;

  // Field ODR1: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR1 = 1U << 1 ;

  // Field ODR0: Port output data (y = 0..15)
    const uint32_t GPIOE_ODR_ODR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BSRR: GPIO port bit set/reset register
  #define GPIOE_BSRR (* ((volatile uint32_t *) (0x40021000 + 24)))

  // Field BR15: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR15 = 1U << 31 ;

  // Field BR14: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR14 = 1U << 30 ;

  // Field BR13: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR13 = 1U << 29 ;

  // Field BR12: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR12 = 1U << 28 ;

  // Field BR11: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR11 = 1U << 27 ;

  // Field BR10: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR10 = 1U << 26 ;

  // Field BR9: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR9 = 1U << 25 ;

  // Field BR8: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR8 = 1U << 24 ;

  // Field BR7: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR7 = 1U << 23 ;

  // Field BR6: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR6 = 1U << 22 ;

  // Field BR5: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR5 = 1U << 21 ;

  // Field BR4: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR4 = 1U << 20 ;

  // Field BR3: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR3 = 1U << 19 ;

  // Field BR2: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR2 = 1U << 18 ;

  // Field BR1: Port x reset bit y (y = 0..15)
    const uint32_t GPIOE_BSRR_BR1 = 1U << 17 ;

  // Field BR0: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BR0 = 1U << 16 ;

  // Field BS15: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS15 = 1U << 15 ;

  // Field BS14: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS14 = 1U << 14 ;

  // Field BS13: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS13 = 1U << 13 ;

  // Field BS12: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS12 = 1U << 12 ;

  // Field BS11: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS11 = 1U << 11 ;

  // Field BS10: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS10 = 1U << 10 ;

  // Field BS9: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS9 = 1U << 9 ;

  // Field BS8: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS8 = 1U << 8 ;

  // Field BS7: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS7 = 1U << 7 ;

  // Field BS6: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS6 = 1U << 6 ;

  // Field BS5: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS5 = 1U << 5 ;

  // Field BS4: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS4 = 1U << 4 ;

  // Field BS3: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS3 = 1U << 3 ;

  // Field BS2: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS2 = 1U << 2 ;

  // Field BS1: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS1 = 1U << 1 ;

  // Field BS0: Port x set bit y (y= 0..15)
    const uint32_t GPIOE_BSRR_BS0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LCKR: GPIO port configuration lock register
  #define GPIOE_LCKR (* ((volatile uint32_t *) (0x40021000 + 28)))

  // Field LCKK: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCKK = 1U << 16 ;

  // Field LCK15: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK15 = 1U << 15 ;

  // Field LCK14: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK14 = 1U << 14 ;

  // Field LCK13: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK13 = 1U << 13 ;

  // Field LCK12: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK12 = 1U << 12 ;

  // Field LCK11: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK11 = 1U << 11 ;

  // Field LCK10: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK10 = 1U << 10 ;

  // Field LCK9: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK9 = 1U << 9 ;

  // Field LCK8: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK8 = 1U << 8 ;

  // Field LCK7: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK7 = 1U << 7 ;

  // Field LCK6: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK6 = 1U << 6 ;

  // Field LCK5: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK5 = 1U << 5 ;

  // Field LCK4: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK4 = 1U << 4 ;

  // Field LCK3: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK3 = 1U << 3 ;

  // Field LCK2: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK2 = 1U << 2 ;

  // Field LCK1: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK1 = 1U << 1 ;

  // Field LCK0: Port x lock bit y (y= 0..15)
    const uint32_t GPIOE_LCKR_LCK0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AFRL: GPIO alternate function lowregister
  #define GPIOE_AFRL (* ((volatile uint32_t *) (0x40021000 + 32)))

  // Field AFRL7: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOE_AFRL_AFRL7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRL6: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOE_AFRL_AFRL6 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRL5: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOE_AFRL_AFRL5 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRL4: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOE_AFRL_AFRL4 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRL3: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOE_AFRL_AFRL3 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRL2: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOE_AFRL_AFRL2 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRL1: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOE_AFRL_AFRL1 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRL0: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOE_AFRL_AFRL0 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AFRH: GPIO alternate function high register
  #define GPIOE_AFRH (* ((volatile uint32_t *) (0x40021000 + 36)))

  // Field AFRH15: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOE_AFRH_AFRH15 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRH14: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOE_AFRH_AFRH14 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRH13: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOE_AFRH_AFRH13 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRH12: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOE_AFRH_AFRH12 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRH11: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOE_AFRH_AFRH11 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRH10: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOE_AFRH_AFRH10 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRH9: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOE_AFRH_AFRH9 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRH8: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOE_AFRH_AFRH8 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BRR: GPIO port bit reset register
  #define GPIOE_BRR (* ((volatile uint32_t *) (0x40021000 + 40)))

  // Field BR0: Port D Reset bit 0
    const uint32_t GPIOE_BRR_BR0 = 1U << 0 ;

  // Field BR1: Port D Reset bit 1
    const uint32_t GPIOE_BRR_BR1 = 1U << 1 ;

  // Field BR2: Port D Reset bit 2
    const uint32_t GPIOE_BRR_BR2 = 1U << 2 ;

  // Field BR3: Port D Reset bit 3
    const uint32_t GPIOE_BRR_BR3 = 1U << 3 ;

  // Field BR4: Port D Reset bit 4
    const uint32_t GPIOE_BRR_BR4 = 1U << 4 ;

  // Field BR5: Port D Reset bit 5
    const uint32_t GPIOE_BRR_BR5 = 1U << 5 ;

  // Field BR6: Port D Reset bit 6
    const uint32_t GPIOE_BRR_BR6 = 1U << 6 ;

  // Field BR7: Port D Reset bit 7
    const uint32_t GPIOE_BRR_BR7 = 1U << 7 ;

  // Field BR8: Port D Reset bit 8
    const uint32_t GPIOE_BRR_BR8 = 1U << 8 ;

  // Field BR9: Port D Reset bit 9
    const uint32_t GPIOE_BRR_BR9 = 1U << 9 ;

  // Field BR10: Port D Reset bit 10
    const uint32_t GPIOE_BRR_BR10 = 1U << 10 ;

  // Field BR11: Port D Reset bit 11
    const uint32_t GPIOE_BRR_BR11 = 1U << 11 ;

  // Field BR12: Port D Reset bit 12
    const uint32_t GPIOE_BRR_BR12 = 1U << 12 ;

  // Field BR13: Port D Reset bit 13
    const uint32_t GPIOE_BRR_BR13 = 1U << 13 ;

  // Field BR14: Port D Reset bit 14
    const uint32_t GPIOE_BRR_BR14 = 1U << 14 ;

  // Field BR15: Port D Reset bit 15
    const uint32_t GPIOE_BRR_BR15 = 1U << 15 ;

//------------------------------------------------------------------------------
// Peripheral GPIOF
//------------------------------------------------------------------------------

//---  Register MODER: GPIO port mode register
  #define GPIOF_MODER (* ((volatile uint32_t *) (0x40021400 + 0)))

  // Field MODER15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field MODER14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field MODER13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field MODER12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field MODER11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field MODER10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field MODER9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MODER8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field MODER7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field MODER6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field MODER5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field MODER4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field MODER3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field MODER2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MODER1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODER0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_MODER_MODER0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTYPER: GPIO port output type register
  #define GPIOF_OTYPER (* ((volatile uint32_t *) (0x40021400 + 4)))

  // Field OT15: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT15 = 1U << 15 ;

  // Field OT14: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT14 = 1U << 14 ;

  // Field OT13: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT13 = 1U << 13 ;

  // Field OT12: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT12 = 1U << 12 ;

  // Field OT11: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT11 = 1U << 11 ;

  // Field OT10: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT10 = 1U << 10 ;

  // Field OT9: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT9 = 1U << 9 ;

  // Field OT8: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT8 = 1U << 8 ;

  // Field OT7: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT7 = 1U << 7 ;

  // Field OT6: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT6 = 1U << 6 ;

  // Field OT5: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT5 = 1U << 5 ;

  // Field OT4: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT4 = 1U << 4 ;

  // Field OT3: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT3 = 1U << 3 ;

  // Field OT2: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT2 = 1U << 2 ;

  // Field OT1: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT1 = 1U << 1 ;

  // Field OT0: Port x configuration bits (y = 0..15)
    const uint32_t GPIOF_OTYPER_OT0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  #define GPIOF_GPIOB_OSPEEDR (* ((volatile uint32_t *) (0x40021400 + 8)))

  // Field OSPEEDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field OSPEEDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field OSPEEDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field OSPEEDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field OSPEEDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field OSPEEDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field OSPEEDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field OSPEEDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field OSPEEDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field OSPEEDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field OSPEEDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field OSPEEDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OSPEEDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field OSPEEDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field OSPEEDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field OSPEEDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_GPIOB_OSPEEDR_OSPEEDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PUPDR: GPIO port pull-up/pull-down register
  #define GPIOF_PUPDR (* ((volatile uint32_t *) (0x40021400 + 12)))

  // Field PUPDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field PUPDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field PUPDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field PUPDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field PUPDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field PUPDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field PUPDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field PUPDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PUPDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field PUPDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field PUPDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field PUPDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PUPDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PUPDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field PUPDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field PUPDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOF_PUPDR_PUPDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IDR: GPIO port input data register
  #define GPIOF_IDR (* ((const volatile uint32_t *) (0x40021400 + 16)))

  // Field IDR15: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR15 = 1U << 15 ;

  // Field IDR14: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR14 = 1U << 14 ;

  // Field IDR13: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR13 = 1U << 13 ;

  // Field IDR12: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR12 = 1U << 12 ;

  // Field IDR11: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR11 = 1U << 11 ;

  // Field IDR10: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR10 = 1U << 10 ;

  // Field IDR9: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR9 = 1U << 9 ;

  // Field IDR8: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR8 = 1U << 8 ;

  // Field IDR7: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR7 = 1U << 7 ;

  // Field IDR6: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR6 = 1U << 6 ;

  // Field IDR5: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR5 = 1U << 5 ;

  // Field IDR4: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR4 = 1U << 4 ;

  // Field IDR3: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR3 = 1U << 3 ;

  // Field IDR2: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR2 = 1U << 2 ;

  // Field IDR1: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR1 = 1U << 1 ;

  // Field IDR0: Port input data (y = 0..15)
    const uint32_t GPIOF_IDR_IDR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ODR: GPIO port output data register
  #define GPIOF_ODR (* ((volatile uint32_t *) (0x40021400 + 20)))

  // Field ODR15: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR15 = 1U << 15 ;

  // Field ODR14: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR14 = 1U << 14 ;

  // Field ODR13: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR13 = 1U << 13 ;

  // Field ODR12: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR12 = 1U << 12 ;

  // Field ODR11: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR11 = 1U << 11 ;

  // Field ODR10: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR10 = 1U << 10 ;

  // Field ODR9: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR9 = 1U << 9 ;

  // Field ODR8: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR8 = 1U << 8 ;

  // Field ODR7: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR7 = 1U << 7 ;

  // Field ODR6: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR6 = 1U << 6 ;

  // Field ODR5: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR5 = 1U << 5 ;

  // Field ODR4: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR4 = 1U << 4 ;

  // Field ODR3: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR3 = 1U << 3 ;

  // Field ODR2: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR2 = 1U << 2 ;

  // Field ODR1: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR1 = 1U << 1 ;

  // Field ODR0: Port output data (y = 0..15)
    const uint32_t GPIOF_ODR_ODR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BSRR: GPIO port bit set/reset register
  #define GPIOF_BSRR (* ((volatile uint32_t *) (0x40021400 + 24)))

  // Field BR15: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR15 = 1U << 31 ;

  // Field BR14: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR14 = 1U << 30 ;

  // Field BR13: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR13 = 1U << 29 ;

  // Field BR12: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR12 = 1U << 28 ;

  // Field BR11: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR11 = 1U << 27 ;

  // Field BR10: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR10 = 1U << 26 ;

  // Field BR9: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR9 = 1U << 25 ;

  // Field BR8: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR8 = 1U << 24 ;

  // Field BR7: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR7 = 1U << 23 ;

  // Field BR6: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR6 = 1U << 22 ;

  // Field BR5: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR5 = 1U << 21 ;

  // Field BR4: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR4 = 1U << 20 ;

  // Field BR3: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR3 = 1U << 19 ;

  // Field BR2: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR2 = 1U << 18 ;

  // Field BR1: Port x reset bit y (y = 0..15)
    const uint32_t GPIOF_BSRR_BR1 = 1U << 17 ;

  // Field BR0: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BR0 = 1U << 16 ;

  // Field BS15: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS15 = 1U << 15 ;

  // Field BS14: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS14 = 1U << 14 ;

  // Field BS13: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS13 = 1U << 13 ;

  // Field BS12: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS12 = 1U << 12 ;

  // Field BS11: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS11 = 1U << 11 ;

  // Field BS10: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS10 = 1U << 10 ;

  // Field BS9: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS9 = 1U << 9 ;

  // Field BS8: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS8 = 1U << 8 ;

  // Field BS7: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS7 = 1U << 7 ;

  // Field BS6: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS6 = 1U << 6 ;

  // Field BS5: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS5 = 1U << 5 ;

  // Field BS4: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS4 = 1U << 4 ;

  // Field BS3: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS3 = 1U << 3 ;

  // Field BS2: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS2 = 1U << 2 ;

  // Field BS1: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS1 = 1U << 1 ;

  // Field BS0: Port x set bit y (y= 0..15)
    const uint32_t GPIOF_BSRR_BS0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LCKR: GPIO port configuration lock register
  #define GPIOF_LCKR (* ((volatile uint32_t *) (0x40021400 + 28)))

  // Field LCKK: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCKK = 1U << 16 ;

  // Field LCK15: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK15 = 1U << 15 ;

  // Field LCK14: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK14 = 1U << 14 ;

  // Field LCK13: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK13 = 1U << 13 ;

  // Field LCK12: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK12 = 1U << 12 ;

  // Field LCK11: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK11 = 1U << 11 ;

  // Field LCK10: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK10 = 1U << 10 ;

  // Field LCK9: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK9 = 1U << 9 ;

  // Field LCK8: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK8 = 1U << 8 ;

  // Field LCK7: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK7 = 1U << 7 ;

  // Field LCK6: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK6 = 1U << 6 ;

  // Field LCK5: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK5 = 1U << 5 ;

  // Field LCK4: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK4 = 1U << 4 ;

  // Field LCK3: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK3 = 1U << 3 ;

  // Field LCK2: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK2 = 1U << 2 ;

  // Field LCK1: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK1 = 1U << 1 ;

  // Field LCK0: Port x lock bit y (y= 0..15)
    const uint32_t GPIOF_LCKR_LCK0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AFRL: GPIO alternate function lowregister
  #define GPIOF_AFRL (* ((volatile uint32_t *) (0x40021400 + 32)))

  // Field AFRL7: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOF_AFRL_AFRL7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRL6: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOF_AFRL_AFRL6 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRL5: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOF_AFRL_AFRL5 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRL4: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOF_AFRL_AFRL4 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRL3: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOF_AFRL_AFRL3 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRL2: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOF_AFRL_AFRL2 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRL1: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOF_AFRL_AFRL1 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRL0: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOF_AFRL_AFRL0 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AFRH: GPIO alternate function high register
  #define GPIOF_AFRH (* ((volatile uint32_t *) (0x40021400 + 36)))

  // Field AFRH15: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOF_AFRH_AFRH15 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRH14: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOF_AFRH_AFRH14 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRH13: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOF_AFRH_AFRH13 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRH12: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOF_AFRH_AFRH12 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRH11: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOF_AFRH_AFRH11 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRH10: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOF_AFRH_AFRH10 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRH9: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOF_AFRH_AFRH9 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRH8: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOF_AFRH_AFRH8 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BRR: GPIO port bit reset register
  #define GPIOF_BRR (* ((volatile uint32_t *) (0x40021400 + 40)))

  // Field BR0: Port D Reset bit 0
    const uint32_t GPIOF_BRR_BR0 = 1U << 0 ;

  // Field BR1: Port D Reset bit 1
    const uint32_t GPIOF_BRR_BR1 = 1U << 1 ;

  // Field BR2: Port D Reset bit 2
    const uint32_t GPIOF_BRR_BR2 = 1U << 2 ;

  // Field BR3: Port D Reset bit 3
    const uint32_t GPIOF_BRR_BR3 = 1U << 3 ;

  // Field BR4: Port D Reset bit 4
    const uint32_t GPIOF_BRR_BR4 = 1U << 4 ;

  // Field BR5: Port D Reset bit 5
    const uint32_t GPIOF_BRR_BR5 = 1U << 5 ;

  // Field BR6: Port D Reset bit 6
    const uint32_t GPIOF_BRR_BR6 = 1U << 6 ;

  // Field BR7: Port D Reset bit 7
    const uint32_t GPIOF_BRR_BR7 = 1U << 7 ;

  // Field BR8: Port D Reset bit 8
    const uint32_t GPIOF_BRR_BR8 = 1U << 8 ;

  // Field BR9: Port D Reset bit 9
    const uint32_t GPIOF_BRR_BR9 = 1U << 9 ;

  // Field BR10: Port D Reset bit 10
    const uint32_t GPIOF_BRR_BR10 = 1U << 10 ;

  // Field BR11: Port D Reset bit 11
    const uint32_t GPIOF_BRR_BR11 = 1U << 11 ;

  // Field BR12: Port D Reset bit 12
    const uint32_t GPIOF_BRR_BR12 = 1U << 12 ;

  // Field BR13: Port D Reset bit 13
    const uint32_t GPIOF_BRR_BR13 = 1U << 13 ;

  // Field BR14: Port D Reset bit 14
    const uint32_t GPIOF_BRR_BR14 = 1U << 14 ;

  // Field BR15: Port D Reset bit 15
    const uint32_t GPIOF_BRR_BR15 = 1U << 15 ;

//------------------------------------------------------------------------------
// Peripheral GPIOG
//------------------------------------------------------------------------------

//---  Register MODER: GPIO port mode register
  #define GPIOG_MODER (* ((volatile uint32_t *) (0x40021800 + 0)))

  // Field MODER15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field MODER14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field MODER13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field MODER12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field MODER11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field MODER10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field MODER9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MODER8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field MODER7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field MODER6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field MODER5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field MODER4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field MODER3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field MODER2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MODER1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODER0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_MODER_MODER0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTYPER: GPIO port output type register
  #define GPIOG_OTYPER (* ((volatile uint32_t *) (0x40021800 + 4)))

  // Field OT15: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT15 = 1U << 15 ;

  // Field OT14: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT14 = 1U << 14 ;

  // Field OT13: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT13 = 1U << 13 ;

  // Field OT12: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT12 = 1U << 12 ;

  // Field OT11: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT11 = 1U << 11 ;

  // Field OT10: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT10 = 1U << 10 ;

  // Field OT9: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT9 = 1U << 9 ;

  // Field OT8: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT8 = 1U << 8 ;

  // Field OT7: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT7 = 1U << 7 ;

  // Field OT6: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT6 = 1U << 6 ;

  // Field OT5: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT5 = 1U << 5 ;

  // Field OT4: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT4 = 1U << 4 ;

  // Field OT3: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT3 = 1U << 3 ;

  // Field OT2: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT2 = 1U << 2 ;

  // Field OT1: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT1 = 1U << 1 ;

  // Field OT0: Port x configuration bits (y = 0..15)
    const uint32_t GPIOG_OTYPER_OT0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  #define GPIOG_GPIOB_OSPEEDR (* ((volatile uint32_t *) (0x40021800 + 8)))

  // Field OSPEEDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field OSPEEDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field OSPEEDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field OSPEEDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field OSPEEDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field OSPEEDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field OSPEEDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field OSPEEDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field OSPEEDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field OSPEEDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field OSPEEDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field OSPEEDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OSPEEDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field OSPEEDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field OSPEEDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field OSPEEDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_GPIOB_OSPEEDR_OSPEEDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PUPDR: GPIO port pull-up/pull-down register
  #define GPIOG_PUPDR (* ((volatile uint32_t *) (0x40021800 + 12)))

  // Field PUPDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field PUPDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field PUPDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field PUPDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field PUPDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field PUPDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field PUPDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field PUPDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PUPDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field PUPDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field PUPDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field PUPDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PUPDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PUPDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field PUPDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field PUPDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOG_PUPDR_PUPDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IDR: GPIO port input data register
  #define GPIOG_IDR (* ((const volatile uint32_t *) (0x40021800 + 16)))

  // Field IDR15: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR15 = 1U << 15 ;

  // Field IDR14: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR14 = 1U << 14 ;

  // Field IDR13: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR13 = 1U << 13 ;

  // Field IDR12: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR12 = 1U << 12 ;

  // Field IDR11: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR11 = 1U << 11 ;

  // Field IDR10: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR10 = 1U << 10 ;

  // Field IDR9: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR9 = 1U << 9 ;

  // Field IDR8: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR8 = 1U << 8 ;

  // Field IDR7: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR7 = 1U << 7 ;

  // Field IDR6: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR6 = 1U << 6 ;

  // Field IDR5: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR5 = 1U << 5 ;

  // Field IDR4: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR4 = 1U << 4 ;

  // Field IDR3: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR3 = 1U << 3 ;

  // Field IDR2: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR2 = 1U << 2 ;

  // Field IDR1: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR1 = 1U << 1 ;

  // Field IDR0: Port input data (y = 0..15)
    const uint32_t GPIOG_IDR_IDR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ODR: GPIO port output data register
  #define GPIOG_ODR (* ((volatile uint32_t *) (0x40021800 + 20)))

  // Field ODR15: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR15 = 1U << 15 ;

  // Field ODR14: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR14 = 1U << 14 ;

  // Field ODR13: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR13 = 1U << 13 ;

  // Field ODR12: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR12 = 1U << 12 ;

  // Field ODR11: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR11 = 1U << 11 ;

  // Field ODR10: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR10 = 1U << 10 ;

  // Field ODR9: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR9 = 1U << 9 ;

  // Field ODR8: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR8 = 1U << 8 ;

  // Field ODR7: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR7 = 1U << 7 ;

  // Field ODR6: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR6 = 1U << 6 ;

  // Field ODR5: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR5 = 1U << 5 ;

  // Field ODR4: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR4 = 1U << 4 ;

  // Field ODR3: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR3 = 1U << 3 ;

  // Field ODR2: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR2 = 1U << 2 ;

  // Field ODR1: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR1 = 1U << 1 ;

  // Field ODR0: Port output data (y = 0..15)
    const uint32_t GPIOG_ODR_ODR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BSRR: GPIO port bit set/reset register
  #define GPIOG_BSRR (* ((volatile uint32_t *) (0x40021800 + 24)))

  // Field BR15: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR15 = 1U << 31 ;

  // Field BR14: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR14 = 1U << 30 ;

  // Field BR13: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR13 = 1U << 29 ;

  // Field BR12: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR12 = 1U << 28 ;

  // Field BR11: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR11 = 1U << 27 ;

  // Field BR10: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR10 = 1U << 26 ;

  // Field BR9: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR9 = 1U << 25 ;

  // Field BR8: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR8 = 1U << 24 ;

  // Field BR7: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR7 = 1U << 23 ;

  // Field BR6: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR6 = 1U << 22 ;

  // Field BR5: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR5 = 1U << 21 ;

  // Field BR4: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR4 = 1U << 20 ;

  // Field BR3: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR3 = 1U << 19 ;

  // Field BR2: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR2 = 1U << 18 ;

  // Field BR1: Port x reset bit y (y = 0..15)
    const uint32_t GPIOG_BSRR_BR1 = 1U << 17 ;

  // Field BR0: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BR0 = 1U << 16 ;

  // Field BS15: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS15 = 1U << 15 ;

  // Field BS14: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS14 = 1U << 14 ;

  // Field BS13: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS13 = 1U << 13 ;

  // Field BS12: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS12 = 1U << 12 ;

  // Field BS11: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS11 = 1U << 11 ;

  // Field BS10: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS10 = 1U << 10 ;

  // Field BS9: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS9 = 1U << 9 ;

  // Field BS8: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS8 = 1U << 8 ;

  // Field BS7: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS7 = 1U << 7 ;

  // Field BS6: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS6 = 1U << 6 ;

  // Field BS5: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS5 = 1U << 5 ;

  // Field BS4: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS4 = 1U << 4 ;

  // Field BS3: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS3 = 1U << 3 ;

  // Field BS2: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS2 = 1U << 2 ;

  // Field BS1: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS1 = 1U << 1 ;

  // Field BS0: Port x set bit y (y= 0..15)
    const uint32_t GPIOG_BSRR_BS0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LCKR: GPIO port configuration lock register
  #define GPIOG_LCKR (* ((volatile uint32_t *) (0x40021800 + 28)))

  // Field LCKK: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCKK = 1U << 16 ;

  // Field LCK15: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK15 = 1U << 15 ;

  // Field LCK14: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK14 = 1U << 14 ;

  // Field LCK13: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK13 = 1U << 13 ;

  // Field LCK12: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK12 = 1U << 12 ;

  // Field LCK11: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK11 = 1U << 11 ;

  // Field LCK10: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK10 = 1U << 10 ;

  // Field LCK9: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK9 = 1U << 9 ;

  // Field LCK8: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK8 = 1U << 8 ;

  // Field LCK7: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK7 = 1U << 7 ;

  // Field LCK6: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK6 = 1U << 6 ;

  // Field LCK5: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK5 = 1U << 5 ;

  // Field LCK4: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK4 = 1U << 4 ;

  // Field LCK3: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK3 = 1U << 3 ;

  // Field LCK2: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK2 = 1U << 2 ;

  // Field LCK1: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK1 = 1U << 1 ;

  // Field LCK0: Port x lock bit y (y= 0..15)
    const uint32_t GPIOG_LCKR_LCK0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AFRL: GPIO alternate function lowregister
  #define GPIOG_AFRL (* ((volatile uint32_t *) (0x40021800 + 32)))

  // Field AFRL7: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOG_AFRL_AFRL7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRL6: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOG_AFRL_AFRL6 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRL5: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOG_AFRL_AFRL5 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRL4: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOG_AFRL_AFRL4 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRL3: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOG_AFRL_AFRL3 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRL2: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOG_AFRL_AFRL2 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRL1: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOG_AFRL_AFRL1 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRL0: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOG_AFRL_AFRL0 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AFRH: GPIO alternate function high register
  #define GPIOG_AFRH (* ((volatile uint32_t *) (0x40021800 + 36)))

  // Field AFRH15: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOG_AFRH_AFRH15 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRH14: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOG_AFRH_AFRH14 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRH13: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOG_AFRH_AFRH13 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRH12: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOG_AFRH_AFRH12 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRH11: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOG_AFRH_AFRH11 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRH10: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOG_AFRH_AFRH10 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRH9: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOG_AFRH_AFRH9 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRH8: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOG_AFRH_AFRH8 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BRR: GPIO port bit reset register
  #define GPIOG_BRR (* ((volatile uint32_t *) (0x40021800 + 40)))

  // Field BR0: Port D Reset bit 0
    const uint32_t GPIOG_BRR_BR0 = 1U << 0 ;

  // Field BR1: Port D Reset bit 1
    const uint32_t GPIOG_BRR_BR1 = 1U << 1 ;

  // Field BR2: Port D Reset bit 2
    const uint32_t GPIOG_BRR_BR2 = 1U << 2 ;

  // Field BR3: Port D Reset bit 3
    const uint32_t GPIOG_BRR_BR3 = 1U << 3 ;

  // Field BR4: Port D Reset bit 4
    const uint32_t GPIOG_BRR_BR4 = 1U << 4 ;

  // Field BR5: Port D Reset bit 5
    const uint32_t GPIOG_BRR_BR5 = 1U << 5 ;

  // Field BR6: Port D Reset bit 6
    const uint32_t GPIOG_BRR_BR6 = 1U << 6 ;

  // Field BR7: Port D Reset bit 7
    const uint32_t GPIOG_BRR_BR7 = 1U << 7 ;

  // Field BR8: Port D Reset bit 8
    const uint32_t GPIOG_BRR_BR8 = 1U << 8 ;

  // Field BR9: Port D Reset bit 9
    const uint32_t GPIOG_BRR_BR9 = 1U << 9 ;

  // Field BR10: Port D Reset bit 10
    const uint32_t GPIOG_BRR_BR10 = 1U << 10 ;

  // Field BR11: Port D Reset bit 11
    const uint32_t GPIOG_BRR_BR11 = 1U << 11 ;

  // Field BR12: Port D Reset bit 12
    const uint32_t GPIOG_BRR_BR12 = 1U << 12 ;

  // Field BR13: Port D Reset bit 13
    const uint32_t GPIOG_BRR_BR13 = 1U << 13 ;

  // Field BR14: Port D Reset bit 14
    const uint32_t GPIOG_BRR_BR14 = 1U << 14 ;

  // Field BR15: Port D Reset bit 15
    const uint32_t GPIOG_BRR_BR15 = 1U << 15 ;

//------------------------------------------------------------------------------
// Peripheral GPIOH
//------------------------------------------------------------------------------

//---  Register MODER: GPIO port mode register
  #define GPIOH_MODER (* ((volatile uint32_t *) (0x40021C00 + 0)))

  // Field MODER15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field MODER14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field MODER13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field MODER12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field MODER11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field MODER10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field MODER9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MODER8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field MODER7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field MODER6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field MODER5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field MODER4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field MODER3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field MODER2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MODER1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODER0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_MODER_MODER0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTYPER: GPIO port output type register
  #define GPIOH_OTYPER (* ((volatile uint32_t *) (0x40021C00 + 4)))

  // Field OT15: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT15 = 1U << 15 ;

  // Field OT14: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT14 = 1U << 14 ;

  // Field OT13: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT13 = 1U << 13 ;

  // Field OT12: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT12 = 1U << 12 ;

  // Field OT11: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT11 = 1U << 11 ;

  // Field OT10: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT10 = 1U << 10 ;

  // Field OT9: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT9 = 1U << 9 ;

  // Field OT8: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT8 = 1U << 8 ;

  // Field OT7: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT7 = 1U << 7 ;

  // Field OT6: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT6 = 1U << 6 ;

  // Field OT5: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT5 = 1U << 5 ;

  // Field OT4: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT4 = 1U << 4 ;

  // Field OT3: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT3 = 1U << 3 ;

  // Field OT2: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT2 = 1U << 2 ;

  // Field OT1: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT1 = 1U << 1 ;

  // Field OT0: Port x configuration bits (y = 0..15)
    const uint32_t GPIOH_OTYPER_OT0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  #define GPIOH_GPIOB_OSPEEDR (* ((volatile uint32_t *) (0x40021C00 + 8)))

  // Field OSPEEDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field OSPEEDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field OSPEEDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field OSPEEDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field OSPEEDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field OSPEEDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field OSPEEDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field OSPEEDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field OSPEEDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field OSPEEDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field OSPEEDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field OSPEEDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OSPEEDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field OSPEEDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field OSPEEDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field OSPEEDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_GPIOB_OSPEEDR_OSPEEDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PUPDR: GPIO port pull-up/pull-down register
  #define GPIOH_PUPDR (* ((volatile uint32_t *) (0x40021C00 + 12)))

  // Field PUPDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field PUPDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field PUPDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field PUPDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field PUPDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field PUPDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field PUPDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field PUPDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PUPDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field PUPDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field PUPDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field PUPDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PUPDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PUPDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field PUPDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field PUPDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOH_PUPDR_PUPDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IDR: GPIO port input data register
  #define GPIOH_IDR (* ((const volatile uint32_t *) (0x40021C00 + 16)))

  // Field IDR15: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR15 = 1U << 15 ;

  // Field IDR14: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR14 = 1U << 14 ;

  // Field IDR13: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR13 = 1U << 13 ;

  // Field IDR12: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR12 = 1U << 12 ;

  // Field IDR11: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR11 = 1U << 11 ;

  // Field IDR10: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR10 = 1U << 10 ;

  // Field IDR9: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR9 = 1U << 9 ;

  // Field IDR8: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR8 = 1U << 8 ;

  // Field IDR7: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR7 = 1U << 7 ;

  // Field IDR6: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR6 = 1U << 6 ;

  // Field IDR5: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR5 = 1U << 5 ;

  // Field IDR4: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR4 = 1U << 4 ;

  // Field IDR3: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR3 = 1U << 3 ;

  // Field IDR2: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR2 = 1U << 2 ;

  // Field IDR1: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR1 = 1U << 1 ;

  // Field IDR0: Port input data (y = 0..15)
    const uint32_t GPIOH_IDR_IDR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ODR: GPIO port output data register
  #define GPIOH_ODR (* ((volatile uint32_t *) (0x40021C00 + 20)))

  // Field ODR15: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR15 = 1U << 15 ;

  // Field ODR14: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR14 = 1U << 14 ;

  // Field ODR13: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR13 = 1U << 13 ;

  // Field ODR12: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR12 = 1U << 12 ;

  // Field ODR11: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR11 = 1U << 11 ;

  // Field ODR10: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR10 = 1U << 10 ;

  // Field ODR9: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR9 = 1U << 9 ;

  // Field ODR8: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR8 = 1U << 8 ;

  // Field ODR7: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR7 = 1U << 7 ;

  // Field ODR6: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR6 = 1U << 6 ;

  // Field ODR5: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR5 = 1U << 5 ;

  // Field ODR4: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR4 = 1U << 4 ;

  // Field ODR3: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR3 = 1U << 3 ;

  // Field ODR2: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR2 = 1U << 2 ;

  // Field ODR1: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR1 = 1U << 1 ;

  // Field ODR0: Port output data (y = 0..15)
    const uint32_t GPIOH_ODR_ODR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BSRR: GPIO port bit set/reset register
  #define GPIOH_BSRR (* ((volatile uint32_t *) (0x40021C00 + 24)))

  // Field BR15: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR15 = 1U << 31 ;

  // Field BR14: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR14 = 1U << 30 ;

  // Field BR13: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR13 = 1U << 29 ;

  // Field BR12: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR12 = 1U << 28 ;

  // Field BR11: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR11 = 1U << 27 ;

  // Field BR10: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR10 = 1U << 26 ;

  // Field BR9: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR9 = 1U << 25 ;

  // Field BR8: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR8 = 1U << 24 ;

  // Field BR7: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR7 = 1U << 23 ;

  // Field BR6: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR6 = 1U << 22 ;

  // Field BR5: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR5 = 1U << 21 ;

  // Field BR4: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR4 = 1U << 20 ;

  // Field BR3: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR3 = 1U << 19 ;

  // Field BR2: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR2 = 1U << 18 ;

  // Field BR1: Port x reset bit y (y = 0..15)
    const uint32_t GPIOH_BSRR_BR1 = 1U << 17 ;

  // Field BR0: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BR0 = 1U << 16 ;

  // Field BS15: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS15 = 1U << 15 ;

  // Field BS14: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS14 = 1U << 14 ;

  // Field BS13: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS13 = 1U << 13 ;

  // Field BS12: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS12 = 1U << 12 ;

  // Field BS11: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS11 = 1U << 11 ;

  // Field BS10: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS10 = 1U << 10 ;

  // Field BS9: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS9 = 1U << 9 ;

  // Field BS8: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS8 = 1U << 8 ;

  // Field BS7: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS7 = 1U << 7 ;

  // Field BS6: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS6 = 1U << 6 ;

  // Field BS5: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS5 = 1U << 5 ;

  // Field BS4: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS4 = 1U << 4 ;

  // Field BS3: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS3 = 1U << 3 ;

  // Field BS2: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS2 = 1U << 2 ;

  // Field BS1: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS1 = 1U << 1 ;

  // Field BS0: Port x set bit y (y= 0..15)
    const uint32_t GPIOH_BSRR_BS0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LCKR: GPIO port configuration lock register
  #define GPIOH_LCKR (* ((volatile uint32_t *) (0x40021C00 + 28)))

  // Field LCKK: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCKK = 1U << 16 ;

  // Field LCK15: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK15 = 1U << 15 ;

  // Field LCK14: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK14 = 1U << 14 ;

  // Field LCK13: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK13 = 1U << 13 ;

  // Field LCK12: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK12 = 1U << 12 ;

  // Field LCK11: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK11 = 1U << 11 ;

  // Field LCK10: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK10 = 1U << 10 ;

  // Field LCK9: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK9 = 1U << 9 ;

  // Field LCK8: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK8 = 1U << 8 ;

  // Field LCK7: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK7 = 1U << 7 ;

  // Field LCK6: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK6 = 1U << 6 ;

  // Field LCK5: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK5 = 1U << 5 ;

  // Field LCK4: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK4 = 1U << 4 ;

  // Field LCK3: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK3 = 1U << 3 ;

  // Field LCK2: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK2 = 1U << 2 ;

  // Field LCK1: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK1 = 1U << 1 ;

  // Field LCK0: Port x lock bit y (y= 0..15)
    const uint32_t GPIOH_LCKR_LCK0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AFRL: GPIO alternate function lowregister
  #define GPIOH_AFRL (* ((volatile uint32_t *) (0x40021C00 + 32)))

  // Field AFRL7: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOH_AFRL_AFRL7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRL6: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOH_AFRL_AFRL6 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRL5: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOH_AFRL_AFRL5 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRL4: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOH_AFRL_AFRL4 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRL3: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOH_AFRL_AFRL3 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRL2: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOH_AFRL_AFRL2 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRL1: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOH_AFRL_AFRL1 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRL0: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOH_AFRL_AFRL0 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AFRH: GPIO alternate function high register
  #define GPIOH_AFRH (* ((volatile uint32_t *) (0x40021C00 + 36)))

  // Field AFRH15: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOH_AFRH_AFRH15 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRH14: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOH_AFRH_AFRH14 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRH13: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOH_AFRH_AFRH13 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRH12: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOH_AFRH_AFRH12 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRH11: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOH_AFRH_AFRH11 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRH10: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOH_AFRH_AFRH10 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRH9: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOH_AFRH_AFRH9 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRH8: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOH_AFRH_AFRH8 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BRR: GPIO port bit reset register
  #define GPIOH_BRR (* ((volatile uint32_t *) (0x40021C00 + 40)))

  // Field BR0: Port D Reset bit 0
    const uint32_t GPIOH_BRR_BR0 = 1U << 0 ;

  // Field BR1: Port D Reset bit 1
    const uint32_t GPIOH_BRR_BR1 = 1U << 1 ;

  // Field BR2: Port D Reset bit 2
    const uint32_t GPIOH_BRR_BR2 = 1U << 2 ;

  // Field BR3: Port D Reset bit 3
    const uint32_t GPIOH_BRR_BR3 = 1U << 3 ;

  // Field BR4: Port D Reset bit 4
    const uint32_t GPIOH_BRR_BR4 = 1U << 4 ;

  // Field BR5: Port D Reset bit 5
    const uint32_t GPIOH_BRR_BR5 = 1U << 5 ;

  // Field BR6: Port D Reset bit 6
    const uint32_t GPIOH_BRR_BR6 = 1U << 6 ;

  // Field BR7: Port D Reset bit 7
    const uint32_t GPIOH_BRR_BR7 = 1U << 7 ;

  // Field BR8: Port D Reset bit 8
    const uint32_t GPIOH_BRR_BR8 = 1U << 8 ;

  // Field BR9: Port D Reset bit 9
    const uint32_t GPIOH_BRR_BR9 = 1U << 9 ;

  // Field BR10: Port D Reset bit 10
    const uint32_t GPIOH_BRR_BR10 = 1U << 10 ;

  // Field BR11: Port D Reset bit 11
    const uint32_t GPIOH_BRR_BR11 = 1U << 11 ;

  // Field BR12: Port D Reset bit 12
    const uint32_t GPIOH_BRR_BR12 = 1U << 12 ;

  // Field BR13: Port D Reset bit 13
    const uint32_t GPIOH_BRR_BR13 = 1U << 13 ;

  // Field BR14: Port D Reset bit 14
    const uint32_t GPIOH_BRR_BR14 = 1U << 14 ;

  // Field BR15: Port D Reset bit 15
    const uint32_t GPIOH_BRR_BR15 = 1U << 15 ;

//------------------------------------------------------------------------------
// Peripheral GPIOI
//------------------------------------------------------------------------------

//---  Register MODER: GPIO port mode register
  #define GPIOI_MODER (* ((volatile uint32_t *) (0x40022000 + 0)))

  // Field MODER15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field MODER14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field MODER13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field MODER12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field MODER11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field MODER10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field MODER9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MODER8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field MODER7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field MODER6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field MODER5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field MODER4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field MODER3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field MODER2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MODER1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODER0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_MODER_MODER0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTYPER: GPIO port output type register
  #define GPIOI_OTYPER (* ((volatile uint32_t *) (0x40022000 + 4)))

  // Field OT15: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT15 = 1U << 15 ;

  // Field OT14: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT14 = 1U << 14 ;

  // Field OT13: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT13 = 1U << 13 ;

  // Field OT12: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT12 = 1U << 12 ;

  // Field OT11: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT11 = 1U << 11 ;

  // Field OT10: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT10 = 1U << 10 ;

  // Field OT9: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT9 = 1U << 9 ;

  // Field OT8: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT8 = 1U << 8 ;

  // Field OT7: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT7 = 1U << 7 ;

  // Field OT6: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT6 = 1U << 6 ;

  // Field OT5: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT5 = 1U << 5 ;

  // Field OT4: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT4 = 1U << 4 ;

  // Field OT3: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT3 = 1U << 3 ;

  // Field OT2: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT2 = 1U << 2 ;

  // Field OT1: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT1 = 1U << 1 ;

  // Field OT0: Port x configuration bits (y = 0..15)
    const uint32_t GPIOI_OTYPER_OT0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  #define GPIOI_GPIOB_OSPEEDR (* ((volatile uint32_t *) (0x40022000 + 8)))

  // Field OSPEEDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field OSPEEDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field OSPEEDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field OSPEEDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field OSPEEDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field OSPEEDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field OSPEEDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field OSPEEDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field OSPEEDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field OSPEEDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field OSPEEDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field OSPEEDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OSPEEDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field OSPEEDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field OSPEEDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field OSPEEDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_GPIOB_OSPEEDR_OSPEEDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PUPDR: GPIO port pull-up/pull-down register
  #define GPIOI_PUPDR (* ((volatile uint32_t *) (0x40022000 + 12)))

  // Field PUPDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field PUPDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field PUPDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field PUPDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field PUPDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field PUPDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field PUPDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field PUPDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PUPDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field PUPDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field PUPDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field PUPDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PUPDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PUPDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field PUPDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field PUPDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOI_PUPDR_PUPDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IDR: GPIO port input data register
  #define GPIOI_IDR (* ((const volatile uint32_t *) (0x40022000 + 16)))

  // Field IDR15: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR15 = 1U << 15 ;

  // Field IDR14: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR14 = 1U << 14 ;

  // Field IDR13: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR13 = 1U << 13 ;

  // Field IDR12: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR12 = 1U << 12 ;

  // Field IDR11: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR11 = 1U << 11 ;

  // Field IDR10: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR10 = 1U << 10 ;

  // Field IDR9: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR9 = 1U << 9 ;

  // Field IDR8: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR8 = 1U << 8 ;

  // Field IDR7: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR7 = 1U << 7 ;

  // Field IDR6: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR6 = 1U << 6 ;

  // Field IDR5: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR5 = 1U << 5 ;

  // Field IDR4: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR4 = 1U << 4 ;

  // Field IDR3: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR3 = 1U << 3 ;

  // Field IDR2: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR2 = 1U << 2 ;

  // Field IDR1: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR1 = 1U << 1 ;

  // Field IDR0: Port input data (y = 0..15)
    const uint32_t GPIOI_IDR_IDR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ODR: GPIO port output data register
  #define GPIOI_ODR (* ((volatile uint32_t *) (0x40022000 + 20)))

  // Field ODR15: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR15 = 1U << 15 ;

  // Field ODR14: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR14 = 1U << 14 ;

  // Field ODR13: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR13 = 1U << 13 ;

  // Field ODR12: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR12 = 1U << 12 ;

  // Field ODR11: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR11 = 1U << 11 ;

  // Field ODR10: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR10 = 1U << 10 ;

  // Field ODR9: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR9 = 1U << 9 ;

  // Field ODR8: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR8 = 1U << 8 ;

  // Field ODR7: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR7 = 1U << 7 ;

  // Field ODR6: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR6 = 1U << 6 ;

  // Field ODR5: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR5 = 1U << 5 ;

  // Field ODR4: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR4 = 1U << 4 ;

  // Field ODR3: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR3 = 1U << 3 ;

  // Field ODR2: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR2 = 1U << 2 ;

  // Field ODR1: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR1 = 1U << 1 ;

  // Field ODR0: Port output data (y = 0..15)
    const uint32_t GPIOI_ODR_ODR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BSRR: GPIO port bit set/reset register
  #define GPIOI_BSRR (* ((volatile uint32_t *) (0x40022000 + 24)))

  // Field BR15: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR15 = 1U << 31 ;

  // Field BR14: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR14 = 1U << 30 ;

  // Field BR13: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR13 = 1U << 29 ;

  // Field BR12: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR12 = 1U << 28 ;

  // Field BR11: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR11 = 1U << 27 ;

  // Field BR10: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR10 = 1U << 26 ;

  // Field BR9: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR9 = 1U << 25 ;

  // Field BR8: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR8 = 1U << 24 ;

  // Field BR7: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR7 = 1U << 23 ;

  // Field BR6: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR6 = 1U << 22 ;

  // Field BR5: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR5 = 1U << 21 ;

  // Field BR4: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR4 = 1U << 20 ;

  // Field BR3: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR3 = 1U << 19 ;

  // Field BR2: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR2 = 1U << 18 ;

  // Field BR1: Port x reset bit y (y = 0..15)
    const uint32_t GPIOI_BSRR_BR1 = 1U << 17 ;

  // Field BR0: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BR0 = 1U << 16 ;

  // Field BS15: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS15 = 1U << 15 ;

  // Field BS14: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS14 = 1U << 14 ;

  // Field BS13: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS13 = 1U << 13 ;

  // Field BS12: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS12 = 1U << 12 ;

  // Field BS11: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS11 = 1U << 11 ;

  // Field BS10: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS10 = 1U << 10 ;

  // Field BS9: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS9 = 1U << 9 ;

  // Field BS8: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS8 = 1U << 8 ;

  // Field BS7: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS7 = 1U << 7 ;

  // Field BS6: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS6 = 1U << 6 ;

  // Field BS5: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS5 = 1U << 5 ;

  // Field BS4: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS4 = 1U << 4 ;

  // Field BS3: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS3 = 1U << 3 ;

  // Field BS2: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS2 = 1U << 2 ;

  // Field BS1: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS1 = 1U << 1 ;

  // Field BS0: Port x set bit y (y= 0..15)
    const uint32_t GPIOI_BSRR_BS0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LCKR: GPIO port configuration lock register
  #define GPIOI_LCKR (* ((volatile uint32_t *) (0x40022000 + 28)))

  // Field LCKK: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCKK = 1U << 16 ;

  // Field LCK15: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK15 = 1U << 15 ;

  // Field LCK14: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK14 = 1U << 14 ;

  // Field LCK13: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK13 = 1U << 13 ;

  // Field LCK12: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK12 = 1U << 12 ;

  // Field LCK11: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK11 = 1U << 11 ;

  // Field LCK10: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK10 = 1U << 10 ;

  // Field LCK9: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK9 = 1U << 9 ;

  // Field LCK8: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK8 = 1U << 8 ;

  // Field LCK7: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK7 = 1U << 7 ;

  // Field LCK6: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK6 = 1U << 6 ;

  // Field LCK5: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK5 = 1U << 5 ;

  // Field LCK4: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK4 = 1U << 4 ;

  // Field LCK3: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK3 = 1U << 3 ;

  // Field LCK2: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK2 = 1U << 2 ;

  // Field LCK1: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK1 = 1U << 1 ;

  // Field LCK0: Port x lock bit y (y= 0..15)
    const uint32_t GPIOI_LCKR_LCK0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AFRL: GPIO alternate function lowregister
  #define GPIOI_AFRL (* ((volatile uint32_t *) (0x40022000 + 32)))

  // Field AFRL7: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOI_AFRL_AFRL7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRL6: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOI_AFRL_AFRL6 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRL5: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOI_AFRL_AFRL5 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRL4: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOI_AFRL_AFRL4 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRL3: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOI_AFRL_AFRL3 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRL2: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOI_AFRL_AFRL2 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRL1: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOI_AFRL_AFRL1 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRL0: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOI_AFRL_AFRL0 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AFRH: GPIO alternate function high register
  #define GPIOI_AFRH (* ((volatile uint32_t *) (0x40022000 + 36)))

  // Field AFRH15: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOI_AFRH_AFRH15 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRH14: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOI_AFRH_AFRH14 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRH13: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOI_AFRH_AFRH13 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRH12: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOI_AFRH_AFRH12 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRH11: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOI_AFRH_AFRH11 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRH10: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOI_AFRH_AFRH10 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRH9: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOI_AFRH_AFRH9 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRH8: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOI_AFRH_AFRH8 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BRR: GPIO port bit reset register
  #define GPIOI_BRR (* ((volatile uint32_t *) (0x40022000 + 40)))

  // Field BR0: Port D Reset bit 0
    const uint32_t GPIOI_BRR_BR0 = 1U << 0 ;

  // Field BR1: Port D Reset bit 1
    const uint32_t GPIOI_BRR_BR1 = 1U << 1 ;

  // Field BR2: Port D Reset bit 2
    const uint32_t GPIOI_BRR_BR2 = 1U << 2 ;

  // Field BR3: Port D Reset bit 3
    const uint32_t GPIOI_BRR_BR3 = 1U << 3 ;

  // Field BR4: Port D Reset bit 4
    const uint32_t GPIOI_BRR_BR4 = 1U << 4 ;

  // Field BR5: Port D Reset bit 5
    const uint32_t GPIOI_BRR_BR5 = 1U << 5 ;

  // Field BR6: Port D Reset bit 6
    const uint32_t GPIOI_BRR_BR6 = 1U << 6 ;

  // Field BR7: Port D Reset bit 7
    const uint32_t GPIOI_BRR_BR7 = 1U << 7 ;

  // Field BR8: Port D Reset bit 8
    const uint32_t GPIOI_BRR_BR8 = 1U << 8 ;

  // Field BR9: Port D Reset bit 9
    const uint32_t GPIOI_BRR_BR9 = 1U << 9 ;

  // Field BR10: Port D Reset bit 10
    const uint32_t GPIOI_BRR_BR10 = 1U << 10 ;

  // Field BR11: Port D Reset bit 11
    const uint32_t GPIOI_BRR_BR11 = 1U << 11 ;

  // Field BR12: Port D Reset bit 12
    const uint32_t GPIOI_BRR_BR12 = 1U << 12 ;

  // Field BR13: Port D Reset bit 13
    const uint32_t GPIOI_BRR_BR13 = 1U << 13 ;

  // Field BR14: Port D Reset bit 14
    const uint32_t GPIOI_BRR_BR14 = 1U << 14 ;

  // Field BR15: Port D Reset bit 15
    const uint32_t GPIOI_BRR_BR15 = 1U << 15 ;

//------------------------------------------------------------------------------
// Peripheral GPIOJ
//------------------------------------------------------------------------------

//---  Register MODER: GPIO port mode register
  #define GPIOJ_MODER (* ((volatile uint32_t *) (0x40022400 + 0)))

  // Field MODER15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field MODER14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field MODER13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field MODER12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field MODER11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field MODER10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field MODER9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MODER8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field MODER7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field MODER6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field MODER5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field MODER4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field MODER3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field MODER2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MODER1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODER0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_MODER_MODER0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTYPER: GPIO port output type register
  #define GPIOJ_OTYPER (* ((volatile uint32_t *) (0x40022400 + 4)))

  // Field OT15: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT15 = 1U << 15 ;

  // Field OT14: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT14 = 1U << 14 ;

  // Field OT13: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT13 = 1U << 13 ;

  // Field OT12: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT12 = 1U << 12 ;

  // Field OT11: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT11 = 1U << 11 ;

  // Field OT10: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT10 = 1U << 10 ;

  // Field OT9: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT9 = 1U << 9 ;

  // Field OT8: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT8 = 1U << 8 ;

  // Field OT7: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT7 = 1U << 7 ;

  // Field OT6: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT6 = 1U << 6 ;

  // Field OT5: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT5 = 1U << 5 ;

  // Field OT4: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT4 = 1U << 4 ;

  // Field OT3: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT3 = 1U << 3 ;

  // Field OT2: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT2 = 1U << 2 ;

  // Field OT1: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT1 = 1U << 1 ;

  // Field OT0: Port x configuration bits (y = 0..15)
    const uint32_t GPIOJ_OTYPER_OT0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  #define GPIOJ_GPIOB_OSPEEDR (* ((volatile uint32_t *) (0x40022400 + 8)))

  // Field OSPEEDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field OSPEEDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field OSPEEDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field OSPEEDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field OSPEEDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field OSPEEDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field OSPEEDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field OSPEEDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field OSPEEDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field OSPEEDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field OSPEEDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field OSPEEDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OSPEEDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field OSPEEDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field OSPEEDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field OSPEEDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_GPIOB_OSPEEDR_OSPEEDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PUPDR: GPIO port pull-up/pull-down register
  #define GPIOJ_PUPDR (* ((volatile uint32_t *) (0x40022400 + 12)))

  // Field PUPDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field PUPDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field PUPDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field PUPDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field PUPDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field PUPDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field PUPDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field PUPDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PUPDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field PUPDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field PUPDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field PUPDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PUPDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PUPDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field PUPDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field PUPDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOJ_PUPDR_PUPDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IDR: GPIO port input data register
  #define GPIOJ_IDR (* ((const volatile uint32_t *) (0x40022400 + 16)))

  // Field IDR15: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR15 = 1U << 15 ;

  // Field IDR14: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR14 = 1U << 14 ;

  // Field IDR13: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR13 = 1U << 13 ;

  // Field IDR12: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR12 = 1U << 12 ;

  // Field IDR11: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR11 = 1U << 11 ;

  // Field IDR10: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR10 = 1U << 10 ;

  // Field IDR9: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR9 = 1U << 9 ;

  // Field IDR8: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR8 = 1U << 8 ;

  // Field IDR7: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR7 = 1U << 7 ;

  // Field IDR6: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR6 = 1U << 6 ;

  // Field IDR5: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR5 = 1U << 5 ;

  // Field IDR4: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR4 = 1U << 4 ;

  // Field IDR3: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR3 = 1U << 3 ;

  // Field IDR2: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR2 = 1U << 2 ;

  // Field IDR1: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR1 = 1U << 1 ;

  // Field IDR0: Port input data (y = 0..15)
    const uint32_t GPIOJ_IDR_IDR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ODR: GPIO port output data register
  #define GPIOJ_ODR (* ((volatile uint32_t *) (0x40022400 + 20)))

  // Field ODR15: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR15 = 1U << 15 ;

  // Field ODR14: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR14 = 1U << 14 ;

  // Field ODR13: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR13 = 1U << 13 ;

  // Field ODR12: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR12 = 1U << 12 ;

  // Field ODR11: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR11 = 1U << 11 ;

  // Field ODR10: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR10 = 1U << 10 ;

  // Field ODR9: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR9 = 1U << 9 ;

  // Field ODR8: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR8 = 1U << 8 ;

  // Field ODR7: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR7 = 1U << 7 ;

  // Field ODR6: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR6 = 1U << 6 ;

  // Field ODR5: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR5 = 1U << 5 ;

  // Field ODR4: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR4 = 1U << 4 ;

  // Field ODR3: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR3 = 1U << 3 ;

  // Field ODR2: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR2 = 1U << 2 ;

  // Field ODR1: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR1 = 1U << 1 ;

  // Field ODR0: Port output data (y = 0..15)
    const uint32_t GPIOJ_ODR_ODR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BSRR: GPIO port bit set/reset register
  #define GPIOJ_BSRR (* ((volatile uint32_t *) (0x40022400 + 24)))

  // Field BR15: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR15 = 1U << 31 ;

  // Field BR14: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR14 = 1U << 30 ;

  // Field BR13: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR13 = 1U << 29 ;

  // Field BR12: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR12 = 1U << 28 ;

  // Field BR11: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR11 = 1U << 27 ;

  // Field BR10: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR10 = 1U << 26 ;

  // Field BR9: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR9 = 1U << 25 ;

  // Field BR8: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR8 = 1U << 24 ;

  // Field BR7: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR7 = 1U << 23 ;

  // Field BR6: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR6 = 1U << 22 ;

  // Field BR5: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR5 = 1U << 21 ;

  // Field BR4: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR4 = 1U << 20 ;

  // Field BR3: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR3 = 1U << 19 ;

  // Field BR2: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR2 = 1U << 18 ;

  // Field BR1: Port x reset bit y (y = 0..15)
    const uint32_t GPIOJ_BSRR_BR1 = 1U << 17 ;

  // Field BR0: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BR0 = 1U << 16 ;

  // Field BS15: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS15 = 1U << 15 ;

  // Field BS14: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS14 = 1U << 14 ;

  // Field BS13: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS13 = 1U << 13 ;

  // Field BS12: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS12 = 1U << 12 ;

  // Field BS11: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS11 = 1U << 11 ;

  // Field BS10: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS10 = 1U << 10 ;

  // Field BS9: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS9 = 1U << 9 ;

  // Field BS8: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS8 = 1U << 8 ;

  // Field BS7: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS7 = 1U << 7 ;

  // Field BS6: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS6 = 1U << 6 ;

  // Field BS5: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS5 = 1U << 5 ;

  // Field BS4: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS4 = 1U << 4 ;

  // Field BS3: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS3 = 1U << 3 ;

  // Field BS2: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS2 = 1U << 2 ;

  // Field BS1: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS1 = 1U << 1 ;

  // Field BS0: Port x set bit y (y= 0..15)
    const uint32_t GPIOJ_BSRR_BS0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LCKR: GPIO port configuration lock register
  #define GPIOJ_LCKR (* ((volatile uint32_t *) (0x40022400 + 28)))

  // Field LCKK: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCKK = 1U << 16 ;

  // Field LCK15: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK15 = 1U << 15 ;

  // Field LCK14: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK14 = 1U << 14 ;

  // Field LCK13: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK13 = 1U << 13 ;

  // Field LCK12: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK12 = 1U << 12 ;

  // Field LCK11: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK11 = 1U << 11 ;

  // Field LCK10: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK10 = 1U << 10 ;

  // Field LCK9: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK9 = 1U << 9 ;

  // Field LCK8: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK8 = 1U << 8 ;

  // Field LCK7: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK7 = 1U << 7 ;

  // Field LCK6: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK6 = 1U << 6 ;

  // Field LCK5: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK5 = 1U << 5 ;

  // Field LCK4: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK4 = 1U << 4 ;

  // Field LCK3: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK3 = 1U << 3 ;

  // Field LCK2: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK2 = 1U << 2 ;

  // Field LCK1: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK1 = 1U << 1 ;

  // Field LCK0: Port x lock bit y (y= 0..15)
    const uint32_t GPIOJ_LCKR_LCK0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AFRL: GPIO alternate function lowregister
  #define GPIOJ_AFRL (* ((volatile uint32_t *) (0x40022400 + 32)))

  // Field AFRL7: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOJ_AFRL_AFRL7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRL6: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOJ_AFRL_AFRL6 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRL5: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOJ_AFRL_AFRL5 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRL4: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOJ_AFRL_AFRL4 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRL3: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOJ_AFRL_AFRL3 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRL2: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOJ_AFRL_AFRL2 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRL1: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOJ_AFRL_AFRL1 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRL0: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOJ_AFRL_AFRL0 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AFRH: GPIO alternate function high register
  #define GPIOJ_AFRH (* ((volatile uint32_t *) (0x40022400 + 36)))

  // Field AFRH15: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOJ_AFRH_AFRH15 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRH14: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOJ_AFRH_AFRH14 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRH13: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOJ_AFRH_AFRH13 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRH12: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOJ_AFRH_AFRH12 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRH11: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOJ_AFRH_AFRH11 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRH10: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOJ_AFRH_AFRH10 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRH9: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOJ_AFRH_AFRH9 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRH8: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOJ_AFRH_AFRH8 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BRR: GPIO port bit reset register
  #define GPIOJ_BRR (* ((volatile uint32_t *) (0x40022400 + 40)))

  // Field BR0: Port D Reset bit 0
    const uint32_t GPIOJ_BRR_BR0 = 1U << 0 ;

  // Field BR1: Port D Reset bit 1
    const uint32_t GPIOJ_BRR_BR1 = 1U << 1 ;

  // Field BR2: Port D Reset bit 2
    const uint32_t GPIOJ_BRR_BR2 = 1U << 2 ;

  // Field BR3: Port D Reset bit 3
    const uint32_t GPIOJ_BRR_BR3 = 1U << 3 ;

  // Field BR4: Port D Reset bit 4
    const uint32_t GPIOJ_BRR_BR4 = 1U << 4 ;

  // Field BR5: Port D Reset bit 5
    const uint32_t GPIOJ_BRR_BR5 = 1U << 5 ;

  // Field BR6: Port D Reset bit 6
    const uint32_t GPIOJ_BRR_BR6 = 1U << 6 ;

  // Field BR7: Port D Reset bit 7
    const uint32_t GPIOJ_BRR_BR7 = 1U << 7 ;

  // Field BR8: Port D Reset bit 8
    const uint32_t GPIOJ_BRR_BR8 = 1U << 8 ;

  // Field BR9: Port D Reset bit 9
    const uint32_t GPIOJ_BRR_BR9 = 1U << 9 ;

  // Field BR10: Port D Reset bit 10
    const uint32_t GPIOJ_BRR_BR10 = 1U << 10 ;

  // Field BR11: Port D Reset bit 11
    const uint32_t GPIOJ_BRR_BR11 = 1U << 11 ;

  // Field BR12: Port D Reset bit 12
    const uint32_t GPIOJ_BRR_BR12 = 1U << 12 ;

  // Field BR13: Port D Reset bit 13
    const uint32_t GPIOJ_BRR_BR13 = 1U << 13 ;

  // Field BR14: Port D Reset bit 14
    const uint32_t GPIOJ_BRR_BR14 = 1U << 14 ;

  // Field BR15: Port D Reset bit 15
    const uint32_t GPIOJ_BRR_BR15 = 1U << 15 ;

//------------------------------------------------------------------------------
// Peripheral GPIOK
//------------------------------------------------------------------------------

//---  Register MODER: GPIO port mode register
  #define GPIOK_MODER (* ((volatile uint32_t *) (0x40022800 + 0)))

  // Field MODER15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field MODER14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field MODER13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field MODER12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field MODER11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field MODER10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field MODER9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MODER8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field MODER7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field MODER6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field MODER5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field MODER4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field MODER3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field MODER2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MODER1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODER0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_MODER_MODER0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTYPER: GPIO port output type register
  #define GPIOK_OTYPER (* ((volatile uint32_t *) (0x40022800 + 4)))

  // Field OT15: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT15 = 1U << 15 ;

  // Field OT14: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT14 = 1U << 14 ;

  // Field OT13: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT13 = 1U << 13 ;

  // Field OT12: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT12 = 1U << 12 ;

  // Field OT11: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT11 = 1U << 11 ;

  // Field OT10: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT10 = 1U << 10 ;

  // Field OT9: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT9 = 1U << 9 ;

  // Field OT8: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT8 = 1U << 8 ;

  // Field OT7: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT7 = 1U << 7 ;

  // Field OT6: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT6 = 1U << 6 ;

  // Field OT5: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT5 = 1U << 5 ;

  // Field OT4: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT4 = 1U << 4 ;

  // Field OT3: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT3 = 1U << 3 ;

  // Field OT2: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT2 = 1U << 2 ;

  // Field OT1: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT1 = 1U << 1 ;

  // Field OT0: Port x configuration bits (y = 0..15)
    const uint32_t GPIOK_OTYPER_OT0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  #define GPIOK_GPIOB_OSPEEDR (* ((volatile uint32_t *) (0x40022800 + 8)))

  // Field OSPEEDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field OSPEEDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field OSPEEDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field OSPEEDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field OSPEEDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field OSPEEDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field OSPEEDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field OSPEEDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field OSPEEDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field OSPEEDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field OSPEEDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field OSPEEDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OSPEEDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field OSPEEDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field OSPEEDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field OSPEEDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_GPIOB_OSPEEDR_OSPEEDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PUPDR: GPIO port pull-up/pull-down register
  #define GPIOK_PUPDR (* ((volatile uint32_t *) (0x40022800 + 12)))

  // Field PUPDR15: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR15 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field PUPDR14: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR14 (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field PUPDR13: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR13 (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field PUPDR12: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR12 (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field PUPDR11: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR11 (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field PUPDR10: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR10 (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field PUPDR9: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR9 (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field PUPDR8: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR8 (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PUPDR7: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR7 (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field PUPDR6: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR6 (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field PUPDR5: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR5 (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field PUPDR4: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR4 (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PUPDR3: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR3 (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field PUPDR2: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR2 (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field PUPDR1: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR1 (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field PUPDR0: Port x configuration bits (y = 0..15)
    inline uint32_t GPIOK_PUPDR_PUPDR0 (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IDR: GPIO port input data register
  #define GPIOK_IDR (* ((const volatile uint32_t *) (0x40022800 + 16)))

  // Field IDR15: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR15 = 1U << 15 ;

  // Field IDR14: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR14 = 1U << 14 ;

  // Field IDR13: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR13 = 1U << 13 ;

  // Field IDR12: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR12 = 1U << 12 ;

  // Field IDR11: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR11 = 1U << 11 ;

  // Field IDR10: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR10 = 1U << 10 ;

  // Field IDR9: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR9 = 1U << 9 ;

  // Field IDR8: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR8 = 1U << 8 ;

  // Field IDR7: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR7 = 1U << 7 ;

  // Field IDR6: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR6 = 1U << 6 ;

  // Field IDR5: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR5 = 1U << 5 ;

  // Field IDR4: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR4 = 1U << 4 ;

  // Field IDR3: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR3 = 1U << 3 ;

  // Field IDR2: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR2 = 1U << 2 ;

  // Field IDR1: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR1 = 1U << 1 ;

  // Field IDR0: Port input data (y = 0..15)
    const uint32_t GPIOK_IDR_IDR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ODR: GPIO port output data register
  #define GPIOK_ODR (* ((volatile uint32_t *) (0x40022800 + 20)))

  // Field ODR15: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR15 = 1U << 15 ;

  // Field ODR14: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR14 = 1U << 14 ;

  // Field ODR13: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR13 = 1U << 13 ;

  // Field ODR12: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR12 = 1U << 12 ;

  // Field ODR11: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR11 = 1U << 11 ;

  // Field ODR10: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR10 = 1U << 10 ;

  // Field ODR9: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR9 = 1U << 9 ;

  // Field ODR8: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR8 = 1U << 8 ;

  // Field ODR7: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR7 = 1U << 7 ;

  // Field ODR6: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR6 = 1U << 6 ;

  // Field ODR5: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR5 = 1U << 5 ;

  // Field ODR4: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR4 = 1U << 4 ;

  // Field ODR3: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR3 = 1U << 3 ;

  // Field ODR2: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR2 = 1U << 2 ;

  // Field ODR1: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR1 = 1U << 1 ;

  // Field ODR0: Port output data (y = 0..15)
    const uint32_t GPIOK_ODR_ODR0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BSRR: GPIO port bit set/reset register
  #define GPIOK_BSRR (* ((volatile uint32_t *) (0x40022800 + 24)))

  // Field BR15: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR15 = 1U << 31 ;

  // Field BR14: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR14 = 1U << 30 ;

  // Field BR13: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR13 = 1U << 29 ;

  // Field BR12: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR12 = 1U << 28 ;

  // Field BR11: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR11 = 1U << 27 ;

  // Field BR10: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR10 = 1U << 26 ;

  // Field BR9: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR9 = 1U << 25 ;

  // Field BR8: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR8 = 1U << 24 ;

  // Field BR7: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR7 = 1U << 23 ;

  // Field BR6: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR6 = 1U << 22 ;

  // Field BR5: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR5 = 1U << 21 ;

  // Field BR4: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR4 = 1U << 20 ;

  // Field BR3: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR3 = 1U << 19 ;

  // Field BR2: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR2 = 1U << 18 ;

  // Field BR1: Port x reset bit y (y = 0..15)
    const uint32_t GPIOK_BSRR_BR1 = 1U << 17 ;

  // Field BR0: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BR0 = 1U << 16 ;

  // Field BS15: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS15 = 1U << 15 ;

  // Field BS14: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS14 = 1U << 14 ;

  // Field BS13: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS13 = 1U << 13 ;

  // Field BS12: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS12 = 1U << 12 ;

  // Field BS11: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS11 = 1U << 11 ;

  // Field BS10: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS10 = 1U << 10 ;

  // Field BS9: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS9 = 1U << 9 ;

  // Field BS8: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS8 = 1U << 8 ;

  // Field BS7: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS7 = 1U << 7 ;

  // Field BS6: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS6 = 1U << 6 ;

  // Field BS5: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS5 = 1U << 5 ;

  // Field BS4: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS4 = 1U << 4 ;

  // Field BS3: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS3 = 1U << 3 ;

  // Field BS2: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS2 = 1U << 2 ;

  // Field BS1: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS1 = 1U << 1 ;

  // Field BS0: Port x set bit y (y= 0..15)
    const uint32_t GPIOK_BSRR_BS0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LCKR: GPIO port configuration lock register
  #define GPIOK_LCKR (* ((volatile uint32_t *) (0x40022800 + 28)))

  // Field LCKK: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCKK = 1U << 16 ;

  // Field LCK15: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK15 = 1U << 15 ;

  // Field LCK14: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK14 = 1U << 14 ;

  // Field LCK13: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK13 = 1U << 13 ;

  // Field LCK12: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK12 = 1U << 12 ;

  // Field LCK11: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK11 = 1U << 11 ;

  // Field LCK10: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK10 = 1U << 10 ;

  // Field LCK9: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK9 = 1U << 9 ;

  // Field LCK8: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK8 = 1U << 8 ;

  // Field LCK7: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK7 = 1U << 7 ;

  // Field LCK6: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK6 = 1U << 6 ;

  // Field LCK5: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK5 = 1U << 5 ;

  // Field LCK4: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK4 = 1U << 4 ;

  // Field LCK3: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK3 = 1U << 3 ;

  // Field LCK2: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK2 = 1U << 2 ;

  // Field LCK1: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK1 = 1U << 1 ;

  // Field LCK0: Port x lock bit y (y= 0..15)
    const uint32_t GPIOK_LCKR_LCK0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AFRL: GPIO alternate function lowregister
  #define GPIOK_AFRL (* ((volatile uint32_t *) (0x40022800 + 32)))

  // Field AFRL7: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOK_AFRL_AFRL7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRL6: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOK_AFRL_AFRL6 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRL5: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOK_AFRL_AFRL5 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRL4: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOK_AFRL_AFRL4 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRL3: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOK_AFRL_AFRL3 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRL2: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOK_AFRL_AFRL2 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRL1: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOK_AFRL_AFRL1 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRL0: Alternate function selection for port x bit y (y = 0..7)
    inline uint32_t GPIOK_AFRL_AFRL0 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AFRH: GPIO alternate function high register
  #define GPIOK_AFRH (* ((volatile uint32_t *) (0x40022800 + 36)))

  // Field AFRH15: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOK_AFRH_AFRH15 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field AFRH14: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOK_AFRH_AFRH14 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field AFRH13: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOK_AFRH_AFRH13 (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field AFRH12: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOK_AFRH_AFRH12 (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field AFRH11: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOK_AFRH_AFRH11 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field AFRH10: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOK_AFRH_AFRH10 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field AFRH9: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOK_AFRH_AFRH9 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field AFRH8: Alternate function selection for port x bit y (y = 8..15)
    inline uint32_t GPIOK_AFRH_AFRH8 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BRR: GPIO port bit reset register
  #define GPIOK_BRR (* ((volatile uint32_t *) (0x40022800 + 40)))

  // Field BR0: Port D Reset bit 0
    const uint32_t GPIOK_BRR_BR0 = 1U << 0 ;

  // Field BR1: Port D Reset bit 1
    const uint32_t GPIOK_BRR_BR1 = 1U << 1 ;

  // Field BR2: Port D Reset bit 2
    const uint32_t GPIOK_BRR_BR2 = 1U << 2 ;

  // Field BR3: Port D Reset bit 3
    const uint32_t GPIOK_BRR_BR3 = 1U << 3 ;

  // Field BR4: Port D Reset bit 4
    const uint32_t GPIOK_BRR_BR4 = 1U << 4 ;

  // Field BR5: Port D Reset bit 5
    const uint32_t GPIOK_BRR_BR5 = 1U << 5 ;

  // Field BR6: Port D Reset bit 6
    const uint32_t GPIOK_BRR_BR6 = 1U << 6 ;

  // Field BR7: Port D Reset bit 7
    const uint32_t GPIOK_BRR_BR7 = 1U << 7 ;

  // Field BR8: Port D Reset bit 8
    const uint32_t GPIOK_BRR_BR8 = 1U << 8 ;

  // Field BR9: Port D Reset bit 9
    const uint32_t GPIOK_BRR_BR9 = 1U << 9 ;

  // Field BR10: Port D Reset bit 10
    const uint32_t GPIOK_BRR_BR10 = 1U << 10 ;

  // Field BR11: Port D Reset bit 11
    const uint32_t GPIOK_BRR_BR11 = 1U << 11 ;

  // Field BR12: Port D Reset bit 12
    const uint32_t GPIOK_BRR_BR12 = 1U << 12 ;

  // Field BR13: Port D Reset bit 13
    const uint32_t GPIOK_BRR_BR13 = 1U << 13 ;

  // Field BR14: Port D Reset bit 14
    const uint32_t GPIOK_BRR_BR14 = 1U << 14 ;

  // Field BR15: Port D Reset bit 15
    const uint32_t GPIOK_BRR_BR15 = 1U << 15 ;

//------------------------------------------------------------------------------
// Peripheral HASH: Hash processor
//------------------------------------------------------------------------------

//---  Register CR: control register
  #define HASH_CR (* ((volatile uint32_t *) (0x50060400 + 0)))

  // Field INIT: Initialize message digest calculation
    const uint32_t HASH_CR_INIT = 1U << 2 ;

  // Field DMAE: DMA enable
    const uint32_t HASH_CR_DMAE = 1U << 3 ;

  // Field DATATYPE: Data type selection
    inline uint32_t HASH_CR_DATATYPE (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field MODE: Mode selection
    const uint32_t HASH_CR_MODE = 1U << 6 ;

  // Field ALGO0: Algorithm selection
    const uint32_t HASH_CR_ALGO0 = 1U << 7 ;

  // Field NBW: Number of words already pushed
    inline uint32_t HASH_CR_NBW (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field DINNE: DIN not empty
    const uint32_t HASH_CR_DINNE = 1U << 12 ;

  // Field MDMAT: Multiple DMA Transfers
    const uint32_t HASH_CR_MDMAT = 1U << 13 ;

  // Field LKEY: Long key selection
    const uint32_t HASH_CR_LKEY = 1U << 16 ;

  // Field ALGO1: ALGO
    const uint32_t HASH_CR_ALGO1 = 1U << 18 ;

//------------------------------------------------------------------------------

//---  Register DIN: data input register
  #define HASH_DIN (* ((volatile uint32_t *) (0x50060400 + 4)))

  // Field DATAIN: Data input
    inline uint32_t HASH_DIN_DATAIN (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register STR: start register
  #define HASH_STR (* ((volatile uint32_t *) (0x50060400 + 8)))

  // Field DCAL: Digest calculation
    const uint32_t HASH_STR_DCAL = 1U << 8 ;

  // Field NBLW: Number of valid bits in the last word of the message
    inline uint32_t HASH_STR_NBLW (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HR0: digest registers
  #define HASH_HR0 (* ((const volatile uint32_t *) (0x50060400 + 12)))

  // Field H0: H0
    inline uint32_t HASH_HR0_H0 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HR1: digest registers
  #define HASH_HR1 (* ((const volatile uint32_t *) (0x50060400 + 16)))

  // Field H1: H1
    inline uint32_t HASH_HR1_H1 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HR2: digest registers
  #define HASH_HR2 (* ((const volatile uint32_t *) (0x50060400 + 20)))

  // Field H2: H2
    inline uint32_t HASH_HR2_H2 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HR3: digest registers
  #define HASH_HR3 (* ((const volatile uint32_t *) (0x50060400 + 24)))

  // Field H3: H3
    inline uint32_t HASH_HR3_H3 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HR4: digest registers
  #define HASH_HR4 (* ((const volatile uint32_t *) (0x50060400 + 28)))

  // Field H4: H4
    inline uint32_t HASH_HR4_H4 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IMR: interrupt enable register
  #define HASH_IMR (* ((volatile uint32_t *) (0x50060400 + 32)))

  // Field DCIE: Digest calculation completion interrupt enable
    const uint32_t HASH_IMR_DCIE = 1U << 1 ;

  // Field DINIE: Data input interrupt enable
    const uint32_t HASH_IMR_DINIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define HASH_SR (* ((volatile uint32_t *) (0x50060400 + 36)))

  // Field BUSY: Busy bit
    const uint32_t HASH_SR_BUSY = 1U << 3 ;

  // Field DMAS: DMA Status
    const uint32_t HASH_SR_DMAS = 1U << 2 ;

  // Field DCIS: Digest calculation completion interrupt status
    const uint32_t HASH_SR_DCIS = 1U << 1 ;

  // Field DINIS: Data input interrupt status
    const uint32_t HASH_SR_DINIS = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CSR0: context swap registers
  #define HASH_CSR0 (* ((volatile uint32_t *) (0x50060400 + 248)))

  // Field CSR0: CSR0
    inline uint32_t HASH_CSR0_CSR0 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR1: context swap registers
  #define HASH_CSR1 (* ((volatile uint32_t *) (0x50060400 + 252)))

  // Field CSR1: CSR1
    inline uint32_t HASH_CSR1_CSR1 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR2: context swap registers
  #define HASH_CSR2 (* ((volatile uint32_t *) (0x50060400 + 256)))

  // Field CSR2: CSR2
    inline uint32_t HASH_CSR2_CSR2 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR3: context swap registers
  #define HASH_CSR3 (* ((volatile uint32_t *) (0x50060400 + 260)))

  // Field CSR3: CSR3
    inline uint32_t HASH_CSR3_CSR3 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR4: context swap registers
  #define HASH_CSR4 (* ((volatile uint32_t *) (0x50060400 + 264)))

  // Field CSR4: CSR4
    inline uint32_t HASH_CSR4_CSR4 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR5: context swap registers
  #define HASH_CSR5 (* ((volatile uint32_t *) (0x50060400 + 268)))

  // Field CSR5: CSR5
    inline uint32_t HASH_CSR5_CSR5 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR6: context swap registers
  #define HASH_CSR6 (* ((volatile uint32_t *) (0x50060400 + 272)))

  // Field CSR6: CSR6
    inline uint32_t HASH_CSR6_CSR6 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR7: context swap registers
  #define HASH_CSR7 (* ((volatile uint32_t *) (0x50060400 + 276)))

  // Field CSR7: CSR7
    inline uint32_t HASH_CSR7_CSR7 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR8: context swap registers
  #define HASH_CSR8 (* ((volatile uint32_t *) (0x50060400 + 280)))

  // Field CSR8: CSR8
    inline uint32_t HASH_CSR8_CSR8 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR9: context swap registers
  #define HASH_CSR9 (* ((volatile uint32_t *) (0x50060400 + 284)))

  // Field CSR9: CSR9
    inline uint32_t HASH_CSR9_CSR9 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR10: context swap registers
  #define HASH_CSR10 (* ((volatile uint32_t *) (0x50060400 + 288)))

  // Field CSR10: CSR10
    inline uint32_t HASH_CSR10_CSR10 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR11: context swap registers
  #define HASH_CSR11 (* ((volatile uint32_t *) (0x50060400 + 292)))

  // Field CSR11: CSR11
    inline uint32_t HASH_CSR11_CSR11 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR12: context swap registers
  #define HASH_CSR12 (* ((volatile uint32_t *) (0x50060400 + 296)))

  // Field CSR12: CSR12
    inline uint32_t HASH_CSR12_CSR12 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR13: context swap registers
  #define HASH_CSR13 (* ((volatile uint32_t *) (0x50060400 + 300)))

  // Field CSR13: CSR13
    inline uint32_t HASH_CSR13_CSR13 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR14: context swap registers
  #define HASH_CSR14 (* ((volatile uint32_t *) (0x50060400 + 304)))

  // Field CSR14: CSR14
    inline uint32_t HASH_CSR14_CSR14 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR15: context swap registers
  #define HASH_CSR15 (* ((volatile uint32_t *) (0x50060400 + 308)))

  // Field CSR15: CSR15
    inline uint32_t HASH_CSR15_CSR15 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR16: context swap registers
  #define HASH_CSR16 (* ((volatile uint32_t *) (0x50060400 + 312)))

  // Field CSR16: CSR16
    inline uint32_t HASH_CSR16_CSR16 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR17: context swap registers
  #define HASH_CSR17 (* ((volatile uint32_t *) (0x50060400 + 316)))

  // Field CSR17: CSR17
    inline uint32_t HASH_CSR17_CSR17 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR18: context swap registers
  #define HASH_CSR18 (* ((volatile uint32_t *) (0x50060400 + 320)))

  // Field CSR18: CSR18
    inline uint32_t HASH_CSR18_CSR18 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR19: context swap registers
  #define HASH_CSR19 (* ((volatile uint32_t *) (0x50060400 + 324)))

  // Field CSR19: CSR19
    inline uint32_t HASH_CSR19_CSR19 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR20: context swap registers
  #define HASH_CSR20 (* ((volatile uint32_t *) (0x50060400 + 328)))

  // Field CSR20: CSR20
    inline uint32_t HASH_CSR20_CSR20 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR21: context swap registers
  #define HASH_CSR21 (* ((volatile uint32_t *) (0x50060400 + 332)))

  // Field CSR21: CSR21
    inline uint32_t HASH_CSR21_CSR21 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR22: context swap registers
  #define HASH_CSR22 (* ((volatile uint32_t *) (0x50060400 + 336)))

  // Field CSR22: CSR22
    inline uint32_t HASH_CSR22_CSR22 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR23: context swap registers
  #define HASH_CSR23 (* ((volatile uint32_t *) (0x50060400 + 340)))

  // Field CSR23: CSR23
    inline uint32_t HASH_CSR23_CSR23 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR24: context swap registers
  #define HASH_CSR24 (* ((volatile uint32_t *) (0x50060400 + 344)))

  // Field CSR24: CSR24
    inline uint32_t HASH_CSR24_CSR24 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR25: context swap registers
  #define HASH_CSR25 (* ((volatile uint32_t *) (0x50060400 + 348)))

  // Field CSR25: CSR25
    inline uint32_t HASH_CSR25_CSR25 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR26: context swap registers
  #define HASH_CSR26 (* ((volatile uint32_t *) (0x50060400 + 352)))

  // Field CSR26: CSR26
    inline uint32_t HASH_CSR26_CSR26 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR27: context swap registers
  #define HASH_CSR27 (* ((volatile uint32_t *) (0x50060400 + 356)))

  // Field CSR27: CSR27
    inline uint32_t HASH_CSR27_CSR27 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR28: context swap registers
  #define HASH_CSR28 (* ((volatile uint32_t *) (0x50060400 + 360)))

  // Field CSR28: CSR28
    inline uint32_t HASH_CSR28_CSR28 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR29: context swap registers
  #define HASH_CSR29 (* ((volatile uint32_t *) (0x50060400 + 364)))

  // Field CSR29: CSR29
    inline uint32_t HASH_CSR29_CSR29 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR30: context swap registers
  #define HASH_CSR30 (* ((volatile uint32_t *) (0x50060400 + 368)))

  // Field CSR30: CSR30
    inline uint32_t HASH_CSR30_CSR30 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR31: context swap registers
  #define HASH_CSR31 (* ((volatile uint32_t *) (0x50060400 + 372)))

  // Field CSR31: CSR31
    inline uint32_t HASH_CSR31_CSR31 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR32: context swap registers
  #define HASH_CSR32 (* ((volatile uint32_t *) (0x50060400 + 376)))

  // Field CSR32: CSR32
    inline uint32_t HASH_CSR32_CSR32 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR33: context swap registers
  #define HASH_CSR33 (* ((volatile uint32_t *) (0x50060400 + 380)))

  // Field CSR33: CSR33
    inline uint32_t HASH_CSR33_CSR33 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR34: context swap registers
  #define HASH_CSR34 (* ((volatile uint32_t *) (0x50060400 + 384)))

  // Field CSR34: CSR34
    inline uint32_t HASH_CSR34_CSR34 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR35: context swap registers
  #define HASH_CSR35 (* ((volatile uint32_t *) (0x50060400 + 388)))

  // Field CSR35: CSR35
    inline uint32_t HASH_CSR35_CSR35 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR36: context swap registers
  #define HASH_CSR36 (* ((volatile uint32_t *) (0x50060400 + 392)))

  // Field CSR36: CSR36
    inline uint32_t HASH_CSR36_CSR36 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR37: context swap registers
  #define HASH_CSR37 (* ((volatile uint32_t *) (0x50060400 + 396)))

  // Field CSR37: CSR37
    inline uint32_t HASH_CSR37_CSR37 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR38: context swap registers
  #define HASH_CSR38 (* ((volatile uint32_t *) (0x50060400 + 400)))

  // Field CSR38: CSR38
    inline uint32_t HASH_CSR38_CSR38 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR39: context swap registers
  #define HASH_CSR39 (* ((volatile uint32_t *) (0x50060400 + 404)))

  // Field CSR39: CSR39
    inline uint32_t HASH_CSR39_CSR39 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR40: context swap registers
  #define HASH_CSR40 (* ((volatile uint32_t *) (0x50060400 + 408)))

  // Field CSR40: CSR40
    inline uint32_t HASH_CSR40_CSR40 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR41: context swap registers
  #define HASH_CSR41 (* ((volatile uint32_t *) (0x50060400 + 412)))

  // Field CSR41: CSR41
    inline uint32_t HASH_CSR41_CSR41 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR42: context swap registers
  #define HASH_CSR42 (* ((volatile uint32_t *) (0x50060400 + 416)))

  // Field CSR42: CSR42
    inline uint32_t HASH_CSR42_CSR42 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR43: context swap registers
  #define HASH_CSR43 (* ((volatile uint32_t *) (0x50060400 + 420)))

  // Field CSR43: CSR43
    inline uint32_t HASH_CSR43_CSR43 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR44: context swap registers
  #define HASH_CSR44 (* ((volatile uint32_t *) (0x50060400 + 424)))

  // Field CSR44: CSR44
    inline uint32_t HASH_CSR44_CSR44 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR45: context swap registers
  #define HASH_CSR45 (* ((volatile uint32_t *) (0x50060400 + 428)))

  // Field CSR45: CSR45
    inline uint32_t HASH_CSR45_CSR45 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR46: context swap registers
  #define HASH_CSR46 (* ((volatile uint32_t *) (0x50060400 + 432)))

  // Field CSR46: CSR46
    inline uint32_t HASH_CSR46_CSR46 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR47: context swap registers
  #define HASH_CSR47 (* ((volatile uint32_t *) (0x50060400 + 436)))

  // Field CSR47: CSR47
    inline uint32_t HASH_CSR47_CSR47 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR48: context swap registers
  #define HASH_CSR48 (* ((volatile uint32_t *) (0x50060400 + 440)))

  // Field CSR48: CSR48
    inline uint32_t HASH_CSR48_CSR48 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR49: context swap registers
  #define HASH_CSR49 (* ((volatile uint32_t *) (0x50060400 + 444)))

  // Field CSR49: CSR49
    inline uint32_t HASH_CSR49_CSR49 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR50: context swap registers
  #define HASH_CSR50 (* ((volatile uint32_t *) (0x50060400 + 448)))

  // Field CSR50: CSR50
    inline uint32_t HASH_CSR50_CSR50 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR51: context swap registers
  #define HASH_CSR51 (* ((volatile uint32_t *) (0x50060400 + 452)))

  // Field CSR51: CSR51
    inline uint32_t HASH_CSR51_CSR51 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR52: context swap registers
  #define HASH_CSR52 (* ((volatile uint32_t *) (0x50060400 + 456)))

  // Field CSR52: CSR52
    inline uint32_t HASH_CSR52_CSR52 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CSR53: context swap registers
  #define HASH_CSR53 (* ((volatile uint32_t *) (0x50060400 + 460)))

  // Field CSR53: CSR53
    inline uint32_t HASH_CSR53_CSR53 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HASH_HR0: HASH digest register
  #define HASH_HASH_HR0 (* ((const volatile uint32_t *) (0x50060400 + 784)))

  // Field H0: H0
    inline uint32_t HASH_HASH_HR0_H0 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HASH_HR1: read-only
  #define HASH_HASH_HR1 (* ((const volatile uint32_t *) (0x50060400 + 788)))

  // Field H1: H1
    inline uint32_t HASH_HASH_HR1_H1 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HASH_HR2: read-only
  #define HASH_HASH_HR2 (* ((const volatile uint32_t *) (0x50060400 + 792)))

  // Field H2: H2
    inline uint32_t HASH_HASH_HR2_H2 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HASH_HR3: read-only
  #define HASH_HASH_HR3 (* ((const volatile uint32_t *) (0x50060400 + 796)))

  // Field H3: H3
    inline uint32_t HASH_HASH_HR3_H3 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HASH_HR4: read-only
  #define HASH_HASH_HR4 (* ((const volatile uint32_t *) (0x50060400 + 800)))

  // Field H4: H4
    inline uint32_t HASH_HASH_HR4_H4 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HASH_HR5: read-only
  #define HASH_HASH_HR5 (* ((const volatile uint32_t *) (0x50060400 + 804)))

  // Field H5: H5
    inline uint32_t HASH_HASH_HR5_H5 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HASH_HR6: read-only
  #define HASH_HASH_HR6 (* ((const volatile uint32_t *) (0x50060400 + 808)))

  // Field H6: H6
    inline uint32_t HASH_HASH_HR6_H6 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HASH_HR7: read-only
  #define HASH_HASH_HR7 (* ((const volatile uint32_t *) (0x50060400 + 812)))

  // Field H7: H7
    inline uint32_t HASH_HASH_HR7_H7 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral I2C1: Inter-integrated circuit
//------------------------------------------------------------------------------

//---  Register CR1: Control register 1
  #define I2C1_CR1 (* ((volatile uint32_t *) (0x40005400 + 0)))

  // Field PE: Peripheral enable
    const uint32_t I2C1_CR1_PE = 1U << 0 ;

  // Field TXIE: TX Interrupt enable
    const uint32_t I2C1_CR1_TXIE = 1U << 1 ;

  // Field RXIE: RX Interrupt enable
    const uint32_t I2C1_CR1_RXIE = 1U << 2 ;

  // Field ADDRIE: Address match interrupt enable (slave only)
    const uint32_t I2C1_CR1_ADDRIE = 1U << 3 ;

  // Field NACKIE: Not acknowledge received interrupt enable
    const uint32_t I2C1_CR1_NACKIE = 1U << 4 ;

  // Field STOPIE: STOP detection Interrupt enable
    const uint32_t I2C1_CR1_STOPIE = 1U << 5 ;

  // Field TCIE: Transfer Complete interrupt enable
    const uint32_t I2C1_CR1_TCIE = 1U << 6 ;

  // Field ERRIE: Error interrupts enable
    const uint32_t I2C1_CR1_ERRIE = 1U << 7 ;

  // Field DNF: Digital noise filter
    inline uint32_t I2C1_CR1_DNF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field ANFOFF: Analog noise filter OFF
    const uint32_t I2C1_CR1_ANFOFF = 1U << 12 ;

  // Field TXDMAEN: DMA transmission requests enable
    const uint32_t I2C1_CR1_TXDMAEN = 1U << 14 ;

  // Field RXDMAEN: DMA reception requests enable
    const uint32_t I2C1_CR1_RXDMAEN = 1U << 15 ;

  // Field SBC: Slave byte control
    const uint32_t I2C1_CR1_SBC = 1U << 16 ;

  // Field NOSTRETCH: Clock stretching disable
    const uint32_t I2C1_CR1_NOSTRETCH = 1U << 17 ;

  // Field WUPEN: Wakeup from STOP enable
    const uint32_t I2C1_CR1_WUPEN = 1U << 18 ;

  // Field GCEN: General call enable
    const uint32_t I2C1_CR1_GCEN = 1U << 19 ;

  // Field SMBHEN: SMBus Host address enable
    const uint32_t I2C1_CR1_SMBHEN = 1U << 20 ;

  // Field SMBDEN: SMBus Device Default address enable
    const uint32_t I2C1_CR1_SMBDEN = 1U << 21 ;

  // Field ALERTEN: SMBUS alert enable
    const uint32_t I2C1_CR1_ALERTEN = 1U << 22 ;

  // Field PECEN: PEC enable
    const uint32_t I2C1_CR1_PECEN = 1U << 23 ;

//------------------------------------------------------------------------------

//---  Register CR2: Control register 2
  #define I2C1_CR2 (* ((volatile uint32_t *) (0x40005400 + 4)))

  // Field PECBYTE: Packet error checking byte
    const uint32_t I2C1_CR2_PECBYTE = 1U << 26 ;

  // Field AUTOEND: Automatic end mode (master mode)
    const uint32_t I2C1_CR2_AUTOEND = 1U << 25 ;

  // Field RELOAD: NBYTES reload mode
    const uint32_t I2C1_CR2_RELOAD = 1U << 24 ;

  // Field NBYTES: Number of bytes
    inline uint32_t I2C1_CR2_NBYTES (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field NACK: NACK generation (slave mode)
    const uint32_t I2C1_CR2_NACK = 1U << 15 ;

  // Field STOP: Stop generation (master mode)
    const uint32_t I2C1_CR2_STOP = 1U << 14 ;

  // Field START: Start generation
    const uint32_t I2C1_CR2_START = 1U << 13 ;

  // Field HEAD10R: 10-bit address header only read direction (master receiver mode)
    const uint32_t I2C1_CR2_HEAD10R = 1U << 12 ;

  // Field ADD10: 10-bit addressing mode (master mode)
    const uint32_t I2C1_CR2_ADD10 = 1U << 11 ;

  // Field RD_WRN: Transfer direction (master mode)
    const uint32_t I2C1_CR2_RD_WRN = 1U << 10 ;

  // Field SADD: Slave address bit (master mode)
    inline uint32_t I2C1_CR2_SADD (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OAR1: Own address register 1
  #define I2C1_OAR1 (* ((volatile uint32_t *) (0x40005400 + 8)))

  // Field OA1: Interface address
    inline uint32_t I2C1_OAR1_OA1 (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

  // Field OA1MODE: Own Address 1 10-bit mode
    const uint32_t I2C1_OAR1_OA1MODE = 1U << 10 ;

  // Field OA1EN: Own Address 1 enable
    const uint32_t I2C1_OAR1_OA1EN = 1U << 15 ;

//------------------------------------------------------------------------------

//---  Register OAR2: Own address register 2
  #define I2C1_OAR2 (* ((volatile uint32_t *) (0x40005400 + 12)))

  // Field OA2: Interface address
    inline uint32_t I2C1_OAR2_OA2 (const uint32_t inValue) {return (inValue & 0x7FU) << 1 ; }

  // Field OA2MSK: Own Address 2 masks
    inline uint32_t I2C1_OAR2_OA2MSK (const uint32_t inValue) {return (inValue & 0x7U) << 8 ; }

  // Field OA2EN: Own Address 2 enable
    const uint32_t I2C1_OAR2_OA2EN = 1U << 15 ;

//------------------------------------------------------------------------------

//---  Register TIMINGR: Timing register
  #define I2C1_TIMINGR (* ((volatile uint32_t *) (0x40005400 + 16)))

  // Field SCLL: SCL low period (master mode)
    inline uint32_t I2C1_TIMINGR_SCLL (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field SCLH: SCL high period (master mode)
    inline uint32_t I2C1_TIMINGR_SCLH (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field SDADEL: Data hold time
    inline uint32_t I2C1_TIMINGR_SDADEL (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field SCLDEL: Data setup time
    inline uint32_t I2C1_TIMINGR_SCLDEL (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field PRESC: Timing prescaler
    inline uint32_t I2C1_TIMINGR_PRESC (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

//------------------------------------------------------------------------------

//---  Register TIMEOUTR: Status register 1
  #define I2C1_TIMEOUTR (* ((volatile uint32_t *) (0x40005400 + 20)))

  // Field TIMEOUTA: Bus timeout A
    inline uint32_t I2C1_TIMEOUTR_TIMEOUTA (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

  // Field TIDLE: Idle clock timeout detection
    const uint32_t I2C1_TIMEOUTR_TIDLE = 1U << 12 ;

  // Field TIMOUTEN: Clock timeout enable
    const uint32_t I2C1_TIMEOUTR_TIMOUTEN = 1U << 15 ;

  // Field TIMEOUTB: Bus timeout B
    inline uint32_t I2C1_TIMEOUTR_TIMEOUTB (const uint32_t inValue) {return (inValue & 0xFFFU) << 16 ; }

  // Field TEXTEN: Extended clock timeout enable
    const uint32_t I2C1_TIMEOUTR_TEXTEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt and Status register
  #define I2C1_ISR (* ((volatile uint32_t *) (0x40005400 + 24)))

  // Field ADDCODE: Address match code (Slave mode)
    inline uint32_t I2C1_ISR_ADDCODE (const uint32_t inValue) {return (inValue & 0x7FU) << 17 ; }

  // Field DIR: Transfer direction (Slave mode)
    const uint32_t I2C1_ISR_DIR = 1U << 16 ;

  // Field BUSY: Bus busy
    const uint32_t I2C1_ISR_BUSY = 1U << 15 ;

  // Field ALERT: SMBus alert
    const uint32_t I2C1_ISR_ALERT = 1U << 13 ;

  // Field TIMEOUT: Timeout or t_low detection flag
    const uint32_t I2C1_ISR_TIMEOUT = 1U << 12 ;

  // Field PECERR: PEC Error in reception
    const uint32_t I2C1_ISR_PECERR = 1U << 11 ;

  // Field OVR: Overrun/Underrun (slave mode)
    const uint32_t I2C1_ISR_OVR = 1U << 10 ;

  // Field ARLO: Arbitration lost
    const uint32_t I2C1_ISR_ARLO = 1U << 9 ;

  // Field BERR: Bus error
    const uint32_t I2C1_ISR_BERR = 1U << 8 ;

  // Field TCR: Transfer Complete Reload
    const uint32_t I2C1_ISR_TCR = 1U << 7 ;

  // Field TC: Transfer Complete (master mode)
    const uint32_t I2C1_ISR_TC = 1U << 6 ;

  // Field STOPF: Stop detection flag
    const uint32_t I2C1_ISR_STOPF = 1U << 5 ;

  // Field NACKF: Not acknowledge received flag
    const uint32_t I2C1_ISR_NACKF = 1U << 4 ;

  // Field ADDR: Address matched (slave mode)
    const uint32_t I2C1_ISR_ADDR = 1U << 3 ;

  // Field RXNE: Receive data register not empty (receivers)
    const uint32_t I2C1_ISR_RXNE = 1U << 2 ;

  // Field TXIS: Transmit interrupt status (transmitters)
    const uint32_t I2C1_ISR_TXIS = 1U << 1 ;

  // Field TXE: Transmit data register empty (transmitters)
    const uint32_t I2C1_ISR_TXE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt clear register
  #define I2C1_ICR (* ((volatile uint32_t *) (0x40005400 + 28)))

  // Field ALERTCF: Alert flag clear
    const uint32_t I2C1_ICR_ALERTCF = 1U << 13 ;

  // Field TIMOUTCF: Timeout detection flag clear
    const uint32_t I2C1_ICR_TIMOUTCF = 1U << 12 ;

  // Field PECCF: PEC Error flag clear
    const uint32_t I2C1_ICR_PECCF = 1U << 11 ;

  // Field OVRCF: Overrun/Underrun flag clear
    const uint32_t I2C1_ICR_OVRCF = 1U << 10 ;

  // Field ARLOCF: Arbitration lost flag clear
    const uint32_t I2C1_ICR_ARLOCF = 1U << 9 ;

  // Field BERRCF: Bus error flag clear
    const uint32_t I2C1_ICR_BERRCF = 1U << 8 ;

  // Field STOPCF: Stop detection flag clear
    const uint32_t I2C1_ICR_STOPCF = 1U << 5 ;

  // Field NACKCF: Not Acknowledge flag clear
    const uint32_t I2C1_ICR_NACKCF = 1U << 4 ;

  // Field ADDRCF: Address Matched flag clear
    const uint32_t I2C1_ICR_ADDRCF = 1U << 3 ;

//------------------------------------------------------------------------------

//---  Register PECR: PEC register
  #define I2C1_PECR (* ((const volatile uint32_t *) (0x40005400 + 32)))

  // Field PEC: Packet error checking register
    inline uint32_t I2C1_PECR_PEC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RXDR: Receive data register
  #define I2C1_RXDR (* ((const volatile uint32_t *) (0x40005400 + 36)))

  // Field RXDATA: 8-bit receive data
    inline uint32_t I2C1_RXDR_RXDATA (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TXDR: Transmit data register
  #define I2C1_TXDR (* ((volatile uint32_t *) (0x40005400 + 40)))

  // Field TXDATA: 8-bit transmit data
    inline uint32_t I2C1_TXDR_TXDATA (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral I2C2
//------------------------------------------------------------------------------

//---  Register CR1: Control register 1
  #define I2C2_CR1 (* ((volatile uint32_t *) (0x40005800 + 0)))

  // Field PE: Peripheral enable
    const uint32_t I2C2_CR1_PE = 1U << 0 ;

  // Field TXIE: TX Interrupt enable
    const uint32_t I2C2_CR1_TXIE = 1U << 1 ;

  // Field RXIE: RX Interrupt enable
    const uint32_t I2C2_CR1_RXIE = 1U << 2 ;

  // Field ADDRIE: Address match interrupt enable (slave only)
    const uint32_t I2C2_CR1_ADDRIE = 1U << 3 ;

  // Field NACKIE: Not acknowledge received interrupt enable
    const uint32_t I2C2_CR1_NACKIE = 1U << 4 ;

  // Field STOPIE: STOP detection Interrupt enable
    const uint32_t I2C2_CR1_STOPIE = 1U << 5 ;

  // Field TCIE: Transfer Complete interrupt enable
    const uint32_t I2C2_CR1_TCIE = 1U << 6 ;

  // Field ERRIE: Error interrupts enable
    const uint32_t I2C2_CR1_ERRIE = 1U << 7 ;

  // Field DNF: Digital noise filter
    inline uint32_t I2C2_CR1_DNF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field ANFOFF: Analog noise filter OFF
    const uint32_t I2C2_CR1_ANFOFF = 1U << 12 ;

  // Field TXDMAEN: DMA transmission requests enable
    const uint32_t I2C2_CR1_TXDMAEN = 1U << 14 ;

  // Field RXDMAEN: DMA reception requests enable
    const uint32_t I2C2_CR1_RXDMAEN = 1U << 15 ;

  // Field SBC: Slave byte control
    const uint32_t I2C2_CR1_SBC = 1U << 16 ;

  // Field NOSTRETCH: Clock stretching disable
    const uint32_t I2C2_CR1_NOSTRETCH = 1U << 17 ;

  // Field WUPEN: Wakeup from STOP enable
    const uint32_t I2C2_CR1_WUPEN = 1U << 18 ;

  // Field GCEN: General call enable
    const uint32_t I2C2_CR1_GCEN = 1U << 19 ;

  // Field SMBHEN: SMBus Host address enable
    const uint32_t I2C2_CR1_SMBHEN = 1U << 20 ;

  // Field SMBDEN: SMBus Device Default address enable
    const uint32_t I2C2_CR1_SMBDEN = 1U << 21 ;

  // Field ALERTEN: SMBUS alert enable
    const uint32_t I2C2_CR1_ALERTEN = 1U << 22 ;

  // Field PECEN: PEC enable
    const uint32_t I2C2_CR1_PECEN = 1U << 23 ;

//------------------------------------------------------------------------------

//---  Register CR2: Control register 2
  #define I2C2_CR2 (* ((volatile uint32_t *) (0x40005800 + 4)))

  // Field PECBYTE: Packet error checking byte
    const uint32_t I2C2_CR2_PECBYTE = 1U << 26 ;

  // Field AUTOEND: Automatic end mode (master mode)
    const uint32_t I2C2_CR2_AUTOEND = 1U << 25 ;

  // Field RELOAD: NBYTES reload mode
    const uint32_t I2C2_CR2_RELOAD = 1U << 24 ;

  // Field NBYTES: Number of bytes
    inline uint32_t I2C2_CR2_NBYTES (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field NACK: NACK generation (slave mode)
    const uint32_t I2C2_CR2_NACK = 1U << 15 ;

  // Field STOP: Stop generation (master mode)
    const uint32_t I2C2_CR2_STOP = 1U << 14 ;

  // Field START: Start generation
    const uint32_t I2C2_CR2_START = 1U << 13 ;

  // Field HEAD10R: 10-bit address header only read direction (master receiver mode)
    const uint32_t I2C2_CR2_HEAD10R = 1U << 12 ;

  // Field ADD10: 10-bit addressing mode (master mode)
    const uint32_t I2C2_CR2_ADD10 = 1U << 11 ;

  // Field RD_WRN: Transfer direction (master mode)
    const uint32_t I2C2_CR2_RD_WRN = 1U << 10 ;

  // Field SADD: Slave address bit (master mode)
    inline uint32_t I2C2_CR2_SADD (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OAR1: Own address register 1
  #define I2C2_OAR1 (* ((volatile uint32_t *) (0x40005800 + 8)))

  // Field OA1: Interface address
    inline uint32_t I2C2_OAR1_OA1 (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

  // Field OA1MODE: Own Address 1 10-bit mode
    const uint32_t I2C2_OAR1_OA1MODE = 1U << 10 ;

  // Field OA1EN: Own Address 1 enable
    const uint32_t I2C2_OAR1_OA1EN = 1U << 15 ;

//------------------------------------------------------------------------------

//---  Register OAR2: Own address register 2
  #define I2C2_OAR2 (* ((volatile uint32_t *) (0x40005800 + 12)))

  // Field OA2: Interface address
    inline uint32_t I2C2_OAR2_OA2 (const uint32_t inValue) {return (inValue & 0x7FU) << 1 ; }

  // Field OA2MSK: Own Address 2 masks
    inline uint32_t I2C2_OAR2_OA2MSK (const uint32_t inValue) {return (inValue & 0x7U) << 8 ; }

  // Field OA2EN: Own Address 2 enable
    const uint32_t I2C2_OAR2_OA2EN = 1U << 15 ;

//------------------------------------------------------------------------------

//---  Register TIMINGR: Timing register
  #define I2C2_TIMINGR (* ((volatile uint32_t *) (0x40005800 + 16)))

  // Field SCLL: SCL low period (master mode)
    inline uint32_t I2C2_TIMINGR_SCLL (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field SCLH: SCL high period (master mode)
    inline uint32_t I2C2_TIMINGR_SCLH (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field SDADEL: Data hold time
    inline uint32_t I2C2_TIMINGR_SDADEL (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field SCLDEL: Data setup time
    inline uint32_t I2C2_TIMINGR_SCLDEL (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field PRESC: Timing prescaler
    inline uint32_t I2C2_TIMINGR_PRESC (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

//------------------------------------------------------------------------------

//---  Register TIMEOUTR: Status register 1
  #define I2C2_TIMEOUTR (* ((volatile uint32_t *) (0x40005800 + 20)))

  // Field TIMEOUTA: Bus timeout A
    inline uint32_t I2C2_TIMEOUTR_TIMEOUTA (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

  // Field TIDLE: Idle clock timeout detection
    const uint32_t I2C2_TIMEOUTR_TIDLE = 1U << 12 ;

  // Field TIMOUTEN: Clock timeout enable
    const uint32_t I2C2_TIMEOUTR_TIMOUTEN = 1U << 15 ;

  // Field TIMEOUTB: Bus timeout B
    inline uint32_t I2C2_TIMEOUTR_TIMEOUTB (const uint32_t inValue) {return (inValue & 0xFFFU) << 16 ; }

  // Field TEXTEN: Extended clock timeout enable
    const uint32_t I2C2_TIMEOUTR_TEXTEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt and Status register
  #define I2C2_ISR (* ((volatile uint32_t *) (0x40005800 + 24)))

  // Field ADDCODE: Address match code (Slave mode)
    inline uint32_t I2C2_ISR_ADDCODE (const uint32_t inValue) {return (inValue & 0x7FU) << 17 ; }

  // Field DIR: Transfer direction (Slave mode)
    const uint32_t I2C2_ISR_DIR = 1U << 16 ;

  // Field BUSY: Bus busy
    const uint32_t I2C2_ISR_BUSY = 1U << 15 ;

  // Field ALERT: SMBus alert
    const uint32_t I2C2_ISR_ALERT = 1U << 13 ;

  // Field TIMEOUT: Timeout or t_low detection flag
    const uint32_t I2C2_ISR_TIMEOUT = 1U << 12 ;

  // Field PECERR: PEC Error in reception
    const uint32_t I2C2_ISR_PECERR = 1U << 11 ;

  // Field OVR: Overrun/Underrun (slave mode)
    const uint32_t I2C2_ISR_OVR = 1U << 10 ;

  // Field ARLO: Arbitration lost
    const uint32_t I2C2_ISR_ARLO = 1U << 9 ;

  // Field BERR: Bus error
    const uint32_t I2C2_ISR_BERR = 1U << 8 ;

  // Field TCR: Transfer Complete Reload
    const uint32_t I2C2_ISR_TCR = 1U << 7 ;

  // Field TC: Transfer Complete (master mode)
    const uint32_t I2C2_ISR_TC = 1U << 6 ;

  // Field STOPF: Stop detection flag
    const uint32_t I2C2_ISR_STOPF = 1U << 5 ;

  // Field NACKF: Not acknowledge received flag
    const uint32_t I2C2_ISR_NACKF = 1U << 4 ;

  // Field ADDR: Address matched (slave mode)
    const uint32_t I2C2_ISR_ADDR = 1U << 3 ;

  // Field RXNE: Receive data register not empty (receivers)
    const uint32_t I2C2_ISR_RXNE = 1U << 2 ;

  // Field TXIS: Transmit interrupt status (transmitters)
    const uint32_t I2C2_ISR_TXIS = 1U << 1 ;

  // Field TXE: Transmit data register empty (transmitters)
    const uint32_t I2C2_ISR_TXE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt clear register
  #define I2C2_ICR (* ((volatile uint32_t *) (0x40005800 + 28)))

  // Field ALERTCF: Alert flag clear
    const uint32_t I2C2_ICR_ALERTCF = 1U << 13 ;

  // Field TIMOUTCF: Timeout detection flag clear
    const uint32_t I2C2_ICR_TIMOUTCF = 1U << 12 ;

  // Field PECCF: PEC Error flag clear
    const uint32_t I2C2_ICR_PECCF = 1U << 11 ;

  // Field OVRCF: Overrun/Underrun flag clear
    const uint32_t I2C2_ICR_OVRCF = 1U << 10 ;

  // Field ARLOCF: Arbitration lost flag clear
    const uint32_t I2C2_ICR_ARLOCF = 1U << 9 ;

  // Field BERRCF: Bus error flag clear
    const uint32_t I2C2_ICR_BERRCF = 1U << 8 ;

  // Field STOPCF: Stop detection flag clear
    const uint32_t I2C2_ICR_STOPCF = 1U << 5 ;

  // Field NACKCF: Not Acknowledge flag clear
    const uint32_t I2C2_ICR_NACKCF = 1U << 4 ;

  // Field ADDRCF: Address Matched flag clear
    const uint32_t I2C2_ICR_ADDRCF = 1U << 3 ;

//------------------------------------------------------------------------------

//---  Register PECR: PEC register
  #define I2C2_PECR (* ((const volatile uint32_t *) (0x40005800 + 32)))

  // Field PEC: Packet error checking register
    inline uint32_t I2C2_PECR_PEC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RXDR: Receive data register
  #define I2C2_RXDR (* ((const volatile uint32_t *) (0x40005800 + 36)))

  // Field RXDATA: 8-bit receive data
    inline uint32_t I2C2_RXDR_RXDATA (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TXDR: Transmit data register
  #define I2C2_TXDR (* ((volatile uint32_t *) (0x40005800 + 40)))

  // Field TXDATA: 8-bit transmit data
    inline uint32_t I2C2_TXDR_TXDATA (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral I2C3
//------------------------------------------------------------------------------

//---  Register CR1: Control register 1
  #define I2C3_CR1 (* ((volatile uint32_t *) (0x40005C00 + 0)))

  // Field PE: Peripheral enable
    const uint32_t I2C3_CR1_PE = 1U << 0 ;

  // Field TXIE: TX Interrupt enable
    const uint32_t I2C3_CR1_TXIE = 1U << 1 ;

  // Field RXIE: RX Interrupt enable
    const uint32_t I2C3_CR1_RXIE = 1U << 2 ;

  // Field ADDRIE: Address match interrupt enable (slave only)
    const uint32_t I2C3_CR1_ADDRIE = 1U << 3 ;

  // Field NACKIE: Not acknowledge received interrupt enable
    const uint32_t I2C3_CR1_NACKIE = 1U << 4 ;

  // Field STOPIE: STOP detection Interrupt enable
    const uint32_t I2C3_CR1_STOPIE = 1U << 5 ;

  // Field TCIE: Transfer Complete interrupt enable
    const uint32_t I2C3_CR1_TCIE = 1U << 6 ;

  // Field ERRIE: Error interrupts enable
    const uint32_t I2C3_CR1_ERRIE = 1U << 7 ;

  // Field DNF: Digital noise filter
    inline uint32_t I2C3_CR1_DNF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field ANFOFF: Analog noise filter OFF
    const uint32_t I2C3_CR1_ANFOFF = 1U << 12 ;

  // Field TXDMAEN: DMA transmission requests enable
    const uint32_t I2C3_CR1_TXDMAEN = 1U << 14 ;

  // Field RXDMAEN: DMA reception requests enable
    const uint32_t I2C3_CR1_RXDMAEN = 1U << 15 ;

  // Field SBC: Slave byte control
    const uint32_t I2C3_CR1_SBC = 1U << 16 ;

  // Field NOSTRETCH: Clock stretching disable
    const uint32_t I2C3_CR1_NOSTRETCH = 1U << 17 ;

  // Field WUPEN: Wakeup from STOP enable
    const uint32_t I2C3_CR1_WUPEN = 1U << 18 ;

  // Field GCEN: General call enable
    const uint32_t I2C3_CR1_GCEN = 1U << 19 ;

  // Field SMBHEN: SMBus Host address enable
    const uint32_t I2C3_CR1_SMBHEN = 1U << 20 ;

  // Field SMBDEN: SMBus Device Default address enable
    const uint32_t I2C3_CR1_SMBDEN = 1U << 21 ;

  // Field ALERTEN: SMBUS alert enable
    const uint32_t I2C3_CR1_ALERTEN = 1U << 22 ;

  // Field PECEN: PEC enable
    const uint32_t I2C3_CR1_PECEN = 1U << 23 ;

//------------------------------------------------------------------------------

//---  Register CR2: Control register 2
  #define I2C3_CR2 (* ((volatile uint32_t *) (0x40005C00 + 4)))

  // Field PECBYTE: Packet error checking byte
    const uint32_t I2C3_CR2_PECBYTE = 1U << 26 ;

  // Field AUTOEND: Automatic end mode (master mode)
    const uint32_t I2C3_CR2_AUTOEND = 1U << 25 ;

  // Field RELOAD: NBYTES reload mode
    const uint32_t I2C3_CR2_RELOAD = 1U << 24 ;

  // Field NBYTES: Number of bytes
    inline uint32_t I2C3_CR2_NBYTES (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field NACK: NACK generation (slave mode)
    const uint32_t I2C3_CR2_NACK = 1U << 15 ;

  // Field STOP: Stop generation (master mode)
    const uint32_t I2C3_CR2_STOP = 1U << 14 ;

  // Field START: Start generation
    const uint32_t I2C3_CR2_START = 1U << 13 ;

  // Field HEAD10R: 10-bit address header only read direction (master receiver mode)
    const uint32_t I2C3_CR2_HEAD10R = 1U << 12 ;

  // Field ADD10: 10-bit addressing mode (master mode)
    const uint32_t I2C3_CR2_ADD10 = 1U << 11 ;

  // Field RD_WRN: Transfer direction (master mode)
    const uint32_t I2C3_CR2_RD_WRN = 1U << 10 ;

  // Field SADD: Slave address bit (master mode)
    inline uint32_t I2C3_CR2_SADD (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OAR1: Own address register 1
  #define I2C3_OAR1 (* ((volatile uint32_t *) (0x40005C00 + 8)))

  // Field OA1: Interface address
    inline uint32_t I2C3_OAR1_OA1 (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

  // Field OA1MODE: Own Address 1 10-bit mode
    const uint32_t I2C3_OAR1_OA1MODE = 1U << 10 ;

  // Field OA1EN: Own Address 1 enable
    const uint32_t I2C3_OAR1_OA1EN = 1U << 15 ;

//------------------------------------------------------------------------------

//---  Register OAR2: Own address register 2
  #define I2C3_OAR2 (* ((volatile uint32_t *) (0x40005C00 + 12)))

  // Field OA2: Interface address
    inline uint32_t I2C3_OAR2_OA2 (const uint32_t inValue) {return (inValue & 0x7FU) << 1 ; }

  // Field OA2MSK: Own Address 2 masks
    inline uint32_t I2C3_OAR2_OA2MSK (const uint32_t inValue) {return (inValue & 0x7U) << 8 ; }

  // Field OA2EN: Own Address 2 enable
    const uint32_t I2C3_OAR2_OA2EN = 1U << 15 ;

//------------------------------------------------------------------------------

//---  Register TIMINGR: Timing register
  #define I2C3_TIMINGR (* ((volatile uint32_t *) (0x40005C00 + 16)))

  // Field SCLL: SCL low period (master mode)
    inline uint32_t I2C3_TIMINGR_SCLL (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field SCLH: SCL high period (master mode)
    inline uint32_t I2C3_TIMINGR_SCLH (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field SDADEL: Data hold time
    inline uint32_t I2C3_TIMINGR_SDADEL (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field SCLDEL: Data setup time
    inline uint32_t I2C3_TIMINGR_SCLDEL (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field PRESC: Timing prescaler
    inline uint32_t I2C3_TIMINGR_PRESC (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

//------------------------------------------------------------------------------

//---  Register TIMEOUTR: Status register 1
  #define I2C3_TIMEOUTR (* ((volatile uint32_t *) (0x40005C00 + 20)))

  // Field TIMEOUTA: Bus timeout A
    inline uint32_t I2C3_TIMEOUTR_TIMEOUTA (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

  // Field TIDLE: Idle clock timeout detection
    const uint32_t I2C3_TIMEOUTR_TIDLE = 1U << 12 ;

  // Field TIMOUTEN: Clock timeout enable
    const uint32_t I2C3_TIMEOUTR_TIMOUTEN = 1U << 15 ;

  // Field TIMEOUTB: Bus timeout B
    inline uint32_t I2C3_TIMEOUTR_TIMEOUTB (const uint32_t inValue) {return (inValue & 0xFFFU) << 16 ; }

  // Field TEXTEN: Extended clock timeout enable
    const uint32_t I2C3_TIMEOUTR_TEXTEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt and Status register
  #define I2C3_ISR (* ((volatile uint32_t *) (0x40005C00 + 24)))

  // Field ADDCODE: Address match code (Slave mode)
    inline uint32_t I2C3_ISR_ADDCODE (const uint32_t inValue) {return (inValue & 0x7FU) << 17 ; }

  // Field DIR: Transfer direction (Slave mode)
    const uint32_t I2C3_ISR_DIR = 1U << 16 ;

  // Field BUSY: Bus busy
    const uint32_t I2C3_ISR_BUSY = 1U << 15 ;

  // Field ALERT: SMBus alert
    const uint32_t I2C3_ISR_ALERT = 1U << 13 ;

  // Field TIMEOUT: Timeout or t_low detection flag
    const uint32_t I2C3_ISR_TIMEOUT = 1U << 12 ;

  // Field PECERR: PEC Error in reception
    const uint32_t I2C3_ISR_PECERR = 1U << 11 ;

  // Field OVR: Overrun/Underrun (slave mode)
    const uint32_t I2C3_ISR_OVR = 1U << 10 ;

  // Field ARLO: Arbitration lost
    const uint32_t I2C3_ISR_ARLO = 1U << 9 ;

  // Field BERR: Bus error
    const uint32_t I2C3_ISR_BERR = 1U << 8 ;

  // Field TCR: Transfer Complete Reload
    const uint32_t I2C3_ISR_TCR = 1U << 7 ;

  // Field TC: Transfer Complete (master mode)
    const uint32_t I2C3_ISR_TC = 1U << 6 ;

  // Field STOPF: Stop detection flag
    const uint32_t I2C3_ISR_STOPF = 1U << 5 ;

  // Field NACKF: Not acknowledge received flag
    const uint32_t I2C3_ISR_NACKF = 1U << 4 ;

  // Field ADDR: Address matched (slave mode)
    const uint32_t I2C3_ISR_ADDR = 1U << 3 ;

  // Field RXNE: Receive data register not empty (receivers)
    const uint32_t I2C3_ISR_RXNE = 1U << 2 ;

  // Field TXIS: Transmit interrupt status (transmitters)
    const uint32_t I2C3_ISR_TXIS = 1U << 1 ;

  // Field TXE: Transmit data register empty (transmitters)
    const uint32_t I2C3_ISR_TXE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt clear register
  #define I2C3_ICR (* ((volatile uint32_t *) (0x40005C00 + 28)))

  // Field ALERTCF: Alert flag clear
    const uint32_t I2C3_ICR_ALERTCF = 1U << 13 ;

  // Field TIMOUTCF: Timeout detection flag clear
    const uint32_t I2C3_ICR_TIMOUTCF = 1U << 12 ;

  // Field PECCF: PEC Error flag clear
    const uint32_t I2C3_ICR_PECCF = 1U << 11 ;

  // Field OVRCF: Overrun/Underrun flag clear
    const uint32_t I2C3_ICR_OVRCF = 1U << 10 ;

  // Field ARLOCF: Arbitration lost flag clear
    const uint32_t I2C3_ICR_ARLOCF = 1U << 9 ;

  // Field BERRCF: Bus error flag clear
    const uint32_t I2C3_ICR_BERRCF = 1U << 8 ;

  // Field STOPCF: Stop detection flag clear
    const uint32_t I2C3_ICR_STOPCF = 1U << 5 ;

  // Field NACKCF: Not Acknowledge flag clear
    const uint32_t I2C3_ICR_NACKCF = 1U << 4 ;

  // Field ADDRCF: Address Matched flag clear
    const uint32_t I2C3_ICR_ADDRCF = 1U << 3 ;

//------------------------------------------------------------------------------

//---  Register PECR: PEC register
  #define I2C3_PECR (* ((const volatile uint32_t *) (0x40005C00 + 32)))

  // Field PEC: Packet error checking register
    inline uint32_t I2C3_PECR_PEC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RXDR: Receive data register
  #define I2C3_RXDR (* ((const volatile uint32_t *) (0x40005C00 + 36)))

  // Field RXDATA: 8-bit receive data
    inline uint32_t I2C3_RXDR_RXDATA (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TXDR: Transmit data register
  #define I2C3_TXDR (* ((volatile uint32_t *) (0x40005C00 + 40)))

  // Field TXDATA: 8-bit transmit data
    inline uint32_t I2C3_TXDR_TXDATA (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral I2C4
//------------------------------------------------------------------------------

//---  Register CR1: Control register 1
  #define I2C4_CR1 (* ((volatile uint32_t *) (0x40006000 + 0)))

  // Field PE: Peripheral enable
    const uint32_t I2C4_CR1_PE = 1U << 0 ;

  // Field TXIE: TX Interrupt enable
    const uint32_t I2C4_CR1_TXIE = 1U << 1 ;

  // Field RXIE: RX Interrupt enable
    const uint32_t I2C4_CR1_RXIE = 1U << 2 ;

  // Field ADDRIE: Address match interrupt enable (slave only)
    const uint32_t I2C4_CR1_ADDRIE = 1U << 3 ;

  // Field NACKIE: Not acknowledge received interrupt enable
    const uint32_t I2C4_CR1_NACKIE = 1U << 4 ;

  // Field STOPIE: STOP detection Interrupt enable
    const uint32_t I2C4_CR1_STOPIE = 1U << 5 ;

  // Field TCIE: Transfer Complete interrupt enable
    const uint32_t I2C4_CR1_TCIE = 1U << 6 ;

  // Field ERRIE: Error interrupts enable
    const uint32_t I2C4_CR1_ERRIE = 1U << 7 ;

  // Field DNF: Digital noise filter
    inline uint32_t I2C4_CR1_DNF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field ANFOFF: Analog noise filter OFF
    const uint32_t I2C4_CR1_ANFOFF = 1U << 12 ;

  // Field TXDMAEN: DMA transmission requests enable
    const uint32_t I2C4_CR1_TXDMAEN = 1U << 14 ;

  // Field RXDMAEN: DMA reception requests enable
    const uint32_t I2C4_CR1_RXDMAEN = 1U << 15 ;

  // Field SBC: Slave byte control
    const uint32_t I2C4_CR1_SBC = 1U << 16 ;

  // Field NOSTRETCH: Clock stretching disable
    const uint32_t I2C4_CR1_NOSTRETCH = 1U << 17 ;

  // Field WUPEN: Wakeup from STOP enable
    const uint32_t I2C4_CR1_WUPEN = 1U << 18 ;

  // Field GCEN: General call enable
    const uint32_t I2C4_CR1_GCEN = 1U << 19 ;

  // Field SMBHEN: SMBus Host address enable
    const uint32_t I2C4_CR1_SMBHEN = 1U << 20 ;

  // Field SMBDEN: SMBus Device Default address enable
    const uint32_t I2C4_CR1_SMBDEN = 1U << 21 ;

  // Field ALERTEN: SMBUS alert enable
    const uint32_t I2C4_CR1_ALERTEN = 1U << 22 ;

  // Field PECEN: PEC enable
    const uint32_t I2C4_CR1_PECEN = 1U << 23 ;

//------------------------------------------------------------------------------

//---  Register CR2: Control register 2
  #define I2C4_CR2 (* ((volatile uint32_t *) (0x40006000 + 4)))

  // Field PECBYTE: Packet error checking byte
    const uint32_t I2C4_CR2_PECBYTE = 1U << 26 ;

  // Field AUTOEND: Automatic end mode (master mode)
    const uint32_t I2C4_CR2_AUTOEND = 1U << 25 ;

  // Field RELOAD: NBYTES reload mode
    const uint32_t I2C4_CR2_RELOAD = 1U << 24 ;

  // Field NBYTES: Number of bytes
    inline uint32_t I2C4_CR2_NBYTES (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field NACK: NACK generation (slave mode)
    const uint32_t I2C4_CR2_NACK = 1U << 15 ;

  // Field STOP: Stop generation (master mode)
    const uint32_t I2C4_CR2_STOP = 1U << 14 ;

  // Field START: Start generation
    const uint32_t I2C4_CR2_START = 1U << 13 ;

  // Field HEAD10R: 10-bit address header only read direction (master receiver mode)
    const uint32_t I2C4_CR2_HEAD10R = 1U << 12 ;

  // Field ADD10: 10-bit addressing mode (master mode)
    const uint32_t I2C4_CR2_ADD10 = 1U << 11 ;

  // Field RD_WRN: Transfer direction (master mode)
    const uint32_t I2C4_CR2_RD_WRN = 1U << 10 ;

  // Field SADD: Slave address bit (master mode)
    inline uint32_t I2C4_CR2_SADD (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OAR1: Own address register 1
  #define I2C4_OAR1 (* ((volatile uint32_t *) (0x40006000 + 8)))

  // Field OA1: Interface address
    inline uint32_t I2C4_OAR1_OA1 (const uint32_t inValue) {return (inValue & 0x3FFU) << 0 ; }

  // Field OA1MODE: Own Address 1 10-bit mode
    const uint32_t I2C4_OAR1_OA1MODE = 1U << 10 ;

  // Field OA1EN: Own Address 1 enable
    const uint32_t I2C4_OAR1_OA1EN = 1U << 15 ;

//------------------------------------------------------------------------------

//---  Register OAR2: Own address register 2
  #define I2C4_OAR2 (* ((volatile uint32_t *) (0x40006000 + 12)))

  // Field OA2: Interface address
    inline uint32_t I2C4_OAR2_OA2 (const uint32_t inValue) {return (inValue & 0x7FU) << 1 ; }

  // Field OA2MSK: Own Address 2 masks
    inline uint32_t I2C4_OAR2_OA2MSK (const uint32_t inValue) {return (inValue & 0x7U) << 8 ; }

  // Field OA2EN: Own Address 2 enable
    const uint32_t I2C4_OAR2_OA2EN = 1U << 15 ;

//------------------------------------------------------------------------------

//---  Register TIMINGR: Timing register
  #define I2C4_TIMINGR (* ((volatile uint32_t *) (0x40006000 + 16)))

  // Field SCLL: SCL low period (master mode)
    inline uint32_t I2C4_TIMINGR_SCLL (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field SCLH: SCL high period (master mode)
    inline uint32_t I2C4_TIMINGR_SCLH (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field SDADEL: Data hold time
    inline uint32_t I2C4_TIMINGR_SDADEL (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field SCLDEL: Data setup time
    inline uint32_t I2C4_TIMINGR_SCLDEL (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field PRESC: Timing prescaler
    inline uint32_t I2C4_TIMINGR_PRESC (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

//------------------------------------------------------------------------------

//---  Register TIMEOUTR: Status register 1
  #define I2C4_TIMEOUTR (* ((volatile uint32_t *) (0x40006000 + 20)))

  // Field TIMEOUTA: Bus timeout A
    inline uint32_t I2C4_TIMEOUTR_TIMEOUTA (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

  // Field TIDLE: Idle clock timeout detection
    const uint32_t I2C4_TIMEOUTR_TIDLE = 1U << 12 ;

  // Field TIMOUTEN: Clock timeout enable
    const uint32_t I2C4_TIMEOUTR_TIMOUTEN = 1U << 15 ;

  // Field TIMEOUTB: Bus timeout B
    inline uint32_t I2C4_TIMEOUTR_TIMEOUTB (const uint32_t inValue) {return (inValue & 0xFFFU) << 16 ; }

  // Field TEXTEN: Extended clock timeout enable
    const uint32_t I2C4_TIMEOUTR_TEXTEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt and Status register
  #define I2C4_ISR (* ((volatile uint32_t *) (0x40006000 + 24)))

  // Field ADDCODE: Address match code (Slave mode)
    inline uint32_t I2C4_ISR_ADDCODE (const uint32_t inValue) {return (inValue & 0x7FU) << 17 ; }

  // Field DIR: Transfer direction (Slave mode)
    const uint32_t I2C4_ISR_DIR = 1U << 16 ;

  // Field BUSY: Bus busy
    const uint32_t I2C4_ISR_BUSY = 1U << 15 ;

  // Field ALERT: SMBus alert
    const uint32_t I2C4_ISR_ALERT = 1U << 13 ;

  // Field TIMEOUT: Timeout or t_low detection flag
    const uint32_t I2C4_ISR_TIMEOUT = 1U << 12 ;

  // Field PECERR: PEC Error in reception
    const uint32_t I2C4_ISR_PECERR = 1U << 11 ;

  // Field OVR: Overrun/Underrun (slave mode)
    const uint32_t I2C4_ISR_OVR = 1U << 10 ;

  // Field ARLO: Arbitration lost
    const uint32_t I2C4_ISR_ARLO = 1U << 9 ;

  // Field BERR: Bus error
    const uint32_t I2C4_ISR_BERR = 1U << 8 ;

  // Field TCR: Transfer Complete Reload
    const uint32_t I2C4_ISR_TCR = 1U << 7 ;

  // Field TC: Transfer Complete (master mode)
    const uint32_t I2C4_ISR_TC = 1U << 6 ;

  // Field STOPF: Stop detection flag
    const uint32_t I2C4_ISR_STOPF = 1U << 5 ;

  // Field NACKF: Not acknowledge received flag
    const uint32_t I2C4_ISR_NACKF = 1U << 4 ;

  // Field ADDR: Address matched (slave mode)
    const uint32_t I2C4_ISR_ADDR = 1U << 3 ;

  // Field RXNE: Receive data register not empty (receivers)
    const uint32_t I2C4_ISR_RXNE = 1U << 2 ;

  // Field TXIS: Transmit interrupt status (transmitters)
    const uint32_t I2C4_ISR_TXIS = 1U << 1 ;

  // Field TXE: Transmit data register empty (transmitters)
    const uint32_t I2C4_ISR_TXE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt clear register
  #define I2C4_ICR (* ((volatile uint32_t *) (0x40006000 + 28)))

  // Field ALERTCF: Alert flag clear
    const uint32_t I2C4_ICR_ALERTCF = 1U << 13 ;

  // Field TIMOUTCF: Timeout detection flag clear
    const uint32_t I2C4_ICR_TIMOUTCF = 1U << 12 ;

  // Field PECCF: PEC Error flag clear
    const uint32_t I2C4_ICR_PECCF = 1U << 11 ;

  // Field OVRCF: Overrun/Underrun flag clear
    const uint32_t I2C4_ICR_OVRCF = 1U << 10 ;

  // Field ARLOCF: Arbitration lost flag clear
    const uint32_t I2C4_ICR_ARLOCF = 1U << 9 ;

  // Field BERRCF: Bus error flag clear
    const uint32_t I2C4_ICR_BERRCF = 1U << 8 ;

  // Field STOPCF: Stop detection flag clear
    const uint32_t I2C4_ICR_STOPCF = 1U << 5 ;

  // Field NACKCF: Not Acknowledge flag clear
    const uint32_t I2C4_ICR_NACKCF = 1U << 4 ;

  // Field ADDRCF: Address Matched flag clear
    const uint32_t I2C4_ICR_ADDRCF = 1U << 3 ;

//------------------------------------------------------------------------------

//---  Register PECR: PEC register
  #define I2C4_PECR (* ((const volatile uint32_t *) (0x40006000 + 32)))

  // Field PEC: Packet error checking register
    inline uint32_t I2C4_PECR_PEC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RXDR: Receive data register
  #define I2C4_RXDR (* ((const volatile uint32_t *) (0x40006000 + 36)))

  // Field RXDATA: 8-bit receive data
    inline uint32_t I2C4_RXDR_RXDATA (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TXDR: Transmit data register
  #define I2C4_TXDR (* ((volatile uint32_t *) (0x40006000 + 40)))

  // Field TXDATA: 8-bit transmit data
    inline uint32_t I2C4_TXDR_TXDATA (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral IWDG: Independent watchdog
//------------------------------------------------------------------------------

//---  Register KR: Key register
  #define IWDG_KR (* ((volatile uint32_t *) (0x40003000 + 0)))

  // Field KEY: Key value (write only, read 0000h)
    inline uint32_t IWDG_KR_KEY (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PR: Prescaler register
  #define IWDG_PR (* ((volatile uint32_t *) (0x40003000 + 4)))

  // Field PR: Prescaler divider
    inline uint32_t IWDG_PR_PR (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RLR: Reload register
  #define IWDG_RLR (* ((volatile uint32_t *) (0x40003000 + 8)))

  // Field RL: Watchdog counter reload value
    inline uint32_t IWDG_RLR_RL (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SR: Status register
  #define IWDG_SR (* ((const volatile uint32_t *) (0x40003000 + 12)))

  // Field RVU: Watchdog counter reload value update
    const uint32_t IWDG_SR_RVU = 1U << 1 ;

  // Field PVU: Watchdog prescaler value update
    const uint32_t IWDG_SR_PVU = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register WINR: Window register
  #define IWDG_WINR (* ((volatile uint32_t *) (0x40003000 + 16)))

  // Field WIN: Watchdog counter window value
    inline uint32_t IWDG_WINR_WIN (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral JPEG: JPEG codec
//------------------------------------------------------------------------------

//---  Register JPEG_CONFR0: JPEG codec configuration register 0
  #define JPEG_JPEG_CONFR0 (* ((volatile uint32_t *) (0x50051000 + 0)))

  // Field START: Start
    const uint32_t JPEG_JPEG_CONFR0_START = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register JPEG_CONFR1: JPEG codec configuration register 1
  #define JPEG_JPEG_CONFR1 (* ((volatile uint32_t *) (0x50051000 + 4)))

  // Field NF: Number of color components
    inline uint32_t JPEG_JPEG_CONFR1_NF (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field DE: Decoding Enable
    const uint32_t JPEG_JPEG_CONFR1_DE = 1U << 3 ;

  // Field COLORSPACE: Color Space
    inline uint32_t JPEG_JPEG_CONFR1_COLORSPACE (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field NS: Number of components for Scan
    inline uint32_t JPEG_JPEG_CONFR1_NS (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field HDR: Header Processing
    const uint32_t JPEG_JPEG_CONFR1_HDR = 1U << 8 ;

  // Field YSIZE: Y Size
    inline uint32_t JPEG_JPEG_CONFR1_YSIZE (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register JPEG_CONFR2: JPEG codec configuration register 2
  #define JPEG_JPEG_CONFR2 (* ((volatile uint32_t *) (0x50051000 + 8)))

  // Field NMCU: Number of MCU
    inline uint32_t JPEG_JPEG_CONFR2_NMCU (const uint32_t inValue) {return (inValue & 0x3FFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JPEG_CONFR3: JPEG codec configuration register 3
  #define JPEG_JPEG_CONFR3 (* ((volatile uint32_t *) (0x50051000 + 12)))

  // Field XSIZE: X size
    inline uint32_t JPEG_JPEG_CONFR3_XSIZE (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register JPEG_CONFR4: JPEG codec configuration register 4
  #define JPEG_JPEG_CONFR4 (* ((volatile uint32_t *) (0x50051000 + 16)))

  // Field HD: Huffman DC
    const uint32_t JPEG_JPEG_CONFR4_HD = 1U << 0 ;

  // Field HA: Huffman AC
    const uint32_t JPEG_JPEG_CONFR4_HA = 1U << 1 ;

  // Field QT: Quantization Table
    inline uint32_t JPEG_JPEG_CONFR4_QT (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field NB: Number of Block
    inline uint32_t JPEG_JPEG_CONFR4_NB (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field VSF: Vertical Sampling Factor
    inline uint32_t JPEG_JPEG_CONFR4_VSF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field HSF: Horizontal Sampling Factor
    inline uint32_t JPEG_JPEG_CONFR4_HSF (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

//------------------------------------------------------------------------------

//---  Register JPEG_CONFR5: JPEG codec configuration register 5
  #define JPEG_JPEG_CONFR5 (* ((volatile uint32_t *) (0x50051000 + 20)))

  // Field HD: Huffman DC
    const uint32_t JPEG_JPEG_CONFR5_HD = 1U << 0 ;

  // Field HA: Huffman AC
    const uint32_t JPEG_JPEG_CONFR5_HA = 1U << 1 ;

  // Field QT: Quantization Table
    inline uint32_t JPEG_JPEG_CONFR5_QT (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field NB: Number of Block
    inline uint32_t JPEG_JPEG_CONFR5_NB (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field VSF: Vertical Sampling Factor
    inline uint32_t JPEG_JPEG_CONFR5_VSF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field HSF: Horizontal Sampling Factor
    inline uint32_t JPEG_JPEG_CONFR5_HSF (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

//------------------------------------------------------------------------------

//---  Register JPEG_CONFR6: JPEG codec configuration register 6
  #define JPEG_JPEG_CONFR6 (* ((volatile uint32_t *) (0x50051000 + 24)))

  // Field HD: Huffman DC
    const uint32_t JPEG_JPEG_CONFR6_HD = 1U << 0 ;

  // Field HA: Huffman AC
    const uint32_t JPEG_JPEG_CONFR6_HA = 1U << 1 ;

  // Field QT: Quantization Table
    inline uint32_t JPEG_JPEG_CONFR6_QT (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field NB: Number of Block
    inline uint32_t JPEG_JPEG_CONFR6_NB (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field VSF: Vertical Sampling Factor
    inline uint32_t JPEG_JPEG_CONFR6_VSF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field HSF: Horizontal Sampling Factor
    inline uint32_t JPEG_JPEG_CONFR6_HSF (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

//------------------------------------------------------------------------------

//---  Register JPEG_CONFR7: JPEG codec configuration register 7
  #define JPEG_JPEG_CONFR7 (* ((volatile uint32_t *) (0x50051000 + 28)))

  // Field HD: Huffman DC
    const uint32_t JPEG_JPEG_CONFR7_HD = 1U << 0 ;

  // Field HA: Huffman AC
    const uint32_t JPEG_JPEG_CONFR7_HA = 1U << 1 ;

  // Field QT: Quantization Table
    inline uint32_t JPEG_JPEG_CONFR7_QT (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field NB: Number of Block
    inline uint32_t JPEG_JPEG_CONFR7_NB (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field VSF: Vertical Sampling Factor
    inline uint32_t JPEG_JPEG_CONFR7_VSF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field HSF: Horizontal Sampling Factor
    inline uint32_t JPEG_JPEG_CONFR7_HSF (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

//------------------------------------------------------------------------------

//---  Register JPEG_CR: JPEG control register
  #define JPEG_JPEG_CR (* ((volatile uint32_t *) (0x50051000 + 48)))

  // Field JCEN: JPEG Core Enable
    const uint32_t JPEG_JPEG_CR_JCEN = 1U << 0 ;

  // Field IFTIE: Input FIFO Threshold Interrupt Enable
    const uint32_t JPEG_JPEG_CR_IFTIE = 1U << 1 ;

  // Field IFNFIE: Input FIFO Not Full Interrupt Enable
    const uint32_t JPEG_JPEG_CR_IFNFIE = 1U << 2 ;

  // Field OFTIE: Output FIFO Threshold Interrupt Enable
    const uint32_t JPEG_JPEG_CR_OFTIE = 1U << 3 ;

  // Field OFNEIE: Output FIFO Not Empty Interrupt Enable
    const uint32_t JPEG_JPEG_CR_OFNEIE = 1U << 4 ;

  // Field EOCIE: End of Conversion Interrupt Enable
    const uint32_t JPEG_JPEG_CR_EOCIE = 1U << 5 ;

  // Field HPDIE: Header Parsing Done Interrupt Enable
    const uint32_t JPEG_JPEG_CR_HPDIE = 1U << 6 ;

  // Field IDMAEN: Input DMA Enable
    const uint32_t JPEG_JPEG_CR_IDMAEN = 1U << 11 ;

  // Field ODMAEN: Output DMA Enable
    const uint32_t JPEG_JPEG_CR_ODMAEN = 1U << 12 ;

  // Field IFF: Input FIFO Flush
    const uint32_t JPEG_JPEG_CR_IFF = 1U << 13 ;

  // Field OFF: Output FIFO Flush
    const uint32_t JPEG_JPEG_CR_OFF = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register JPEG_SR: JPEG status register
  #define JPEG_JPEG_SR (* ((const volatile uint32_t *) (0x50051000 + 52)))

  // Field IFTF: Input FIFO Threshold Flag
    const uint32_t JPEG_JPEG_SR_IFTF = 1U << 1 ;

  // Field IFNFF: Input FIFO Not Full Flag
    const uint32_t JPEG_JPEG_SR_IFNFF = 1U << 2 ;

  // Field OFTF: Output FIFO Threshold Flag
    const uint32_t JPEG_JPEG_SR_OFTF = 1U << 3 ;

  // Field OFNEF: Output FIFO Not Empty Flag
    const uint32_t JPEG_JPEG_SR_OFNEF = 1U << 4 ;

  // Field EOCF: End of Conversion Flag
    const uint32_t JPEG_JPEG_SR_EOCF = 1U << 5 ;

  // Field HPDF: Header Parsing Done Flag
    const uint32_t JPEG_JPEG_SR_HPDF = 1U << 6 ;

  // Field COF: Codec Operation Flag
    const uint32_t JPEG_JPEG_SR_COF = 1U << 7 ;

//------------------------------------------------------------------------------

//---  Register JPEG_CFR: JPEG clear flag register
  #define JPEG_JPEG_CFR (* ((volatile uint32_t *) (0x50051000 + 56)))

  // Field CEOCF: Clear End of Conversion Flag
    const uint32_t JPEG_JPEG_CFR_CEOCF = 1U << 5 ;

  // Field CHPDF: Clear Header Parsing Done Flag
    const uint32_t JPEG_JPEG_CFR_CHPDF = 1U << 6 ;

//------------------------------------------------------------------------------

//---  Register JPEG_DIR: JPEG data input register
  #define JPEG_JPEG_DIR (* ((volatile uint32_t *) (0x50051000 + 64)))

  // Field DATAIN: Data Input FIFO
    inline uint32_t JPEG_JPEG_DIR_DATAIN (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register JPEG_DOR: JPEG data output register
  #define JPEG_JPEG_DOR (* ((const volatile uint32_t *) (0x50051000 + 68)))

  // Field DATAOUT: Data Output FIFO
    inline uint32_t JPEG_JPEG_DOR_DATAOUT (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_0: JPEG quantization tables
  #define JPEG_QMEM0_0 (* ((volatile uint32_t *) (0x50051000 + 80)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_0_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_1: JPEG quantization tables
  #define JPEG_QMEM0_1 (* ((volatile uint32_t *) (0x50051000 + 84)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_1_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_2: JPEG quantization tables
  #define JPEG_QMEM0_2 (* ((volatile uint32_t *) (0x50051000 + 88)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_2_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_3: JPEG quantization tables
  #define JPEG_QMEM0_3 (* ((volatile uint32_t *) (0x50051000 + 92)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_3_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_4: JPEG quantization tables
  #define JPEG_QMEM0_4 (* ((volatile uint32_t *) (0x50051000 + 96)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_4_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_5: JPEG quantization tables
  #define JPEG_QMEM0_5 (* ((volatile uint32_t *) (0x50051000 + 100)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_5_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_6: JPEG quantization tables
  #define JPEG_QMEM0_6 (* ((volatile uint32_t *) (0x50051000 + 104)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_6_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_7: JPEG quantization tables
  #define JPEG_QMEM0_7 (* ((volatile uint32_t *) (0x50051000 + 108)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_7_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_8: JPEG quantization tables
  #define JPEG_QMEM0_8 (* ((volatile uint32_t *) (0x50051000 + 112)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_8_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_9: JPEG quantization tables
  #define JPEG_QMEM0_9 (* ((volatile uint32_t *) (0x50051000 + 116)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_9_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_10: JPEG quantization tables
  #define JPEG_QMEM0_10 (* ((volatile uint32_t *) (0x50051000 + 120)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_10_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_11: JPEG quantization tables
  #define JPEG_QMEM0_11 (* ((volatile uint32_t *) (0x50051000 + 124)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_11_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_12: JPEG quantization tables
  #define JPEG_QMEM0_12 (* ((volatile uint32_t *) (0x50051000 + 128)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_12_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_13: JPEG quantization tables
  #define JPEG_QMEM0_13 (* ((volatile uint32_t *) (0x50051000 + 132)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_13_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_14: JPEG quantization tables
  #define JPEG_QMEM0_14 (* ((volatile uint32_t *) (0x50051000 + 136)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_14_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM0_15: JPEG quantization tables
  #define JPEG_QMEM0_15 (* ((volatile uint32_t *) (0x50051000 + 140)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM0_15_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_0: JPEG quantization tables
  #define JPEG_QMEM1_0 (* ((volatile uint32_t *) (0x50051000 + 144)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_0_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_1: JPEG quantization tables
  #define JPEG_QMEM1_1 (* ((volatile uint32_t *) (0x50051000 + 148)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_1_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_2: JPEG quantization tables
  #define JPEG_QMEM1_2 (* ((volatile uint32_t *) (0x50051000 + 152)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_2_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_3: JPEG quantization tables
  #define JPEG_QMEM1_3 (* ((volatile uint32_t *) (0x50051000 + 156)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_3_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_4: JPEG quantization tables
  #define JPEG_QMEM1_4 (* ((volatile uint32_t *) (0x50051000 + 160)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_4_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_5: JPEG quantization tables
  #define JPEG_QMEM1_5 (* ((volatile uint32_t *) (0x50051000 + 164)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_5_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_6: JPEG quantization tables
  #define JPEG_QMEM1_6 (* ((volatile uint32_t *) (0x50051000 + 168)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_6_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_7: JPEG quantization tables
  #define JPEG_QMEM1_7 (* ((volatile uint32_t *) (0x50051000 + 172)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_7_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_8: JPEG quantization tables
  #define JPEG_QMEM1_8 (* ((volatile uint32_t *) (0x50051000 + 176)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_8_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_9: JPEG quantization tables
  #define JPEG_QMEM1_9 (* ((volatile uint32_t *) (0x50051000 + 180)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_9_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_10: JPEG quantization tables
  #define JPEG_QMEM1_10 (* ((volatile uint32_t *) (0x50051000 + 184)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_10_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_11: JPEG quantization tables
  #define JPEG_QMEM1_11 (* ((volatile uint32_t *) (0x50051000 + 188)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_11_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_12: JPEG quantization tables
  #define JPEG_QMEM1_12 (* ((volatile uint32_t *) (0x50051000 + 192)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_12_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_13: JPEG quantization tables
  #define JPEG_QMEM1_13 (* ((volatile uint32_t *) (0x50051000 + 196)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_13_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_14: JPEG quantization tables
  #define JPEG_QMEM1_14 (* ((volatile uint32_t *) (0x50051000 + 200)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_14_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM1_15: JPEG quantization tables
  #define JPEG_QMEM1_15 (* ((volatile uint32_t *) (0x50051000 + 204)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM1_15_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_0: JPEG quantization tables
  #define JPEG_QMEM2_0 (* ((volatile uint32_t *) (0x50051000 + 208)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_0_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_1: JPEG quantization tables
  #define JPEG_QMEM2_1 (* ((volatile uint32_t *) (0x50051000 + 212)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_1_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_2: JPEG quantization tables
  #define JPEG_QMEM2_2 (* ((volatile uint32_t *) (0x50051000 + 216)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_2_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_3: JPEG quantization tables
  #define JPEG_QMEM2_3 (* ((volatile uint32_t *) (0x50051000 + 220)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_3_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_4: JPEG quantization tables
  #define JPEG_QMEM2_4 (* ((volatile uint32_t *) (0x50051000 + 224)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_4_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_5: JPEG quantization tables
  #define JPEG_QMEM2_5 (* ((volatile uint32_t *) (0x50051000 + 228)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_5_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_6: JPEG quantization tables
  #define JPEG_QMEM2_6 (* ((volatile uint32_t *) (0x50051000 + 232)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_6_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_7: JPEG quantization tables
  #define JPEG_QMEM2_7 (* ((volatile uint32_t *) (0x50051000 + 236)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_7_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_8: JPEG quantization tables
  #define JPEG_QMEM2_8 (* ((volatile uint32_t *) (0x50051000 + 240)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_8_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_9: JPEG quantization tables
  #define JPEG_QMEM2_9 (* ((volatile uint32_t *) (0x50051000 + 244)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_9_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_10: JPEG quantization tables
  #define JPEG_QMEM2_10 (* ((volatile uint32_t *) (0x50051000 + 248)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_10_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_11: JPEG quantization tables
  #define JPEG_QMEM2_11 (* ((volatile uint32_t *) (0x50051000 + 252)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_11_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_12: JPEG quantization tables
  #define JPEG_QMEM2_12 (* ((volatile uint32_t *) (0x50051000 + 256)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_12_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_13: JPEG quantization tables
  #define JPEG_QMEM2_13 (* ((volatile uint32_t *) (0x50051000 + 260)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_13_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_14: JPEG quantization tables
  #define JPEG_QMEM2_14 (* ((volatile uint32_t *) (0x50051000 + 264)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_14_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM2_15: JPEG quantization tables
  #define JPEG_QMEM2_15 (* ((volatile uint32_t *) (0x50051000 + 268)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM2_15_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_0: JPEG quantization tables
  #define JPEG_QMEM3_0 (* ((volatile uint32_t *) (0x50051000 + 272)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_0_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_1: JPEG quantization tables
  #define JPEG_QMEM3_1 (* ((volatile uint32_t *) (0x50051000 + 276)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_1_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_2: JPEG quantization tables
  #define JPEG_QMEM3_2 (* ((volatile uint32_t *) (0x50051000 + 280)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_2_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_3: JPEG quantization tables
  #define JPEG_QMEM3_3 (* ((volatile uint32_t *) (0x50051000 + 284)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_3_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_4: JPEG quantization tables
  #define JPEG_QMEM3_4 (* ((volatile uint32_t *) (0x50051000 + 288)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_4_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_5: JPEG quantization tables
  #define JPEG_QMEM3_5 (* ((volatile uint32_t *) (0x50051000 + 292)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_5_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_6: JPEG quantization tables
  #define JPEG_QMEM3_6 (* ((volatile uint32_t *) (0x50051000 + 296)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_6_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_7: JPEG quantization tables
  #define JPEG_QMEM3_7 (* ((volatile uint32_t *) (0x50051000 + 300)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_7_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_8: JPEG quantization tables
  #define JPEG_QMEM3_8 (* ((volatile uint32_t *) (0x50051000 + 304)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_8_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_9: JPEG quantization tables
  #define JPEG_QMEM3_9 (* ((volatile uint32_t *) (0x50051000 + 308)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_9_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_10: JPEG quantization tables
  #define JPEG_QMEM3_10 (* ((volatile uint32_t *) (0x50051000 + 312)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_10_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_11: JPEG quantization tables
  #define JPEG_QMEM3_11 (* ((volatile uint32_t *) (0x50051000 + 316)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_11_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_12: JPEG quantization tables
  #define JPEG_QMEM3_12 (* ((volatile uint32_t *) (0x50051000 + 320)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_12_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_13: JPEG quantization tables
  #define JPEG_QMEM3_13 (* ((volatile uint32_t *) (0x50051000 + 324)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_13_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_14: JPEG quantization tables
  #define JPEG_QMEM3_14 (* ((volatile uint32_t *) (0x50051000 + 328)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_14_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register QMEM3_15: JPEG quantization tables
  #define JPEG_QMEM3_15 (* ((volatile uint32_t *) (0x50051000 + 332)))

  // Field QMem_RAM: QMem RAM
    inline uint32_t JPEG_QMEM3_15_QMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_0: JPEG HuffMin tables
  #define JPEG_HUFFMIN_0 (* ((volatile uint32_t *) (0x50051000 + 336)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_0_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_1: JPEG HuffMin tables
  #define JPEG_HUFFMIN_1 (* ((volatile uint32_t *) (0x50051000 + 340)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_1_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_2: JPEG HuffMin tables
  #define JPEG_HUFFMIN_2 (* ((volatile uint32_t *) (0x50051000 + 344)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_2_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_3: JPEG HuffMin tables
  #define JPEG_HUFFMIN_3 (* ((volatile uint32_t *) (0x50051000 + 348)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_3_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_4: JPEG HuffMin tables
  #define JPEG_HUFFMIN_4 (* ((volatile uint32_t *) (0x50051000 + 352)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_4_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_5: JPEG HuffMin tables
  #define JPEG_HUFFMIN_5 (* ((volatile uint32_t *) (0x50051000 + 356)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_5_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_6: JPEG HuffMin tables
  #define JPEG_HUFFMIN_6 (* ((volatile uint32_t *) (0x50051000 + 360)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_6_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_7: JPEG HuffMin tables
  #define JPEG_HUFFMIN_7 (* ((volatile uint32_t *) (0x50051000 + 364)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_7_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_8: JPEG HuffMin tables
  #define JPEG_HUFFMIN_8 (* ((volatile uint32_t *) (0x50051000 + 368)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_8_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_9: JPEG HuffMin tables
  #define JPEG_HUFFMIN_9 (* ((volatile uint32_t *) (0x50051000 + 372)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_9_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_10: JPEG HuffMin tables
  #define JPEG_HUFFMIN_10 (* ((volatile uint32_t *) (0x50051000 + 376)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_10_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_11: JPEG HuffMin tables
  #define JPEG_HUFFMIN_11 (* ((volatile uint32_t *) (0x50051000 + 380)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_11_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_12: JPEG HuffMin tables
  #define JPEG_HUFFMIN_12 (* ((volatile uint32_t *) (0x50051000 + 384)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_12_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_13: JPEG HuffMin tables
  #define JPEG_HUFFMIN_13 (* ((volatile uint32_t *) (0x50051000 + 388)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_13_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_14: JPEG HuffMin tables
  #define JPEG_HUFFMIN_14 (* ((volatile uint32_t *) (0x50051000 + 392)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_14_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFMIN_15: JPEG HuffMin tables
  #define JPEG_HUFFMIN_15 (* ((volatile uint32_t *) (0x50051000 + 396)))

  // Field HuffMin_RAM: HuffMin RAM
    inline uint32_t JPEG_HUFFMIN_15_HuffMin_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE0: JPEG HuffSymb tables
  #define JPEG_HUFFBASE0 (* ((volatile uint32_t *) (0x50051000 + 400)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE0_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE0_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE1: JPEG HuffSymb tables
  #define JPEG_HUFFBASE1 (* ((volatile uint32_t *) (0x50051000 + 404)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE1_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE1_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE2: JPEG HuffSymb tables
  #define JPEG_HUFFBASE2 (* ((volatile uint32_t *) (0x50051000 + 408)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE2_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE2_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE3: JPEG HuffSymb tables
  #define JPEG_HUFFBASE3 (* ((volatile uint32_t *) (0x50051000 + 412)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE3_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE3_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE4: JPEG HuffSymb tables
  #define JPEG_HUFFBASE4 (* ((volatile uint32_t *) (0x50051000 + 416)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE4_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE4_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE5: JPEG HuffSymb tables
  #define JPEG_HUFFBASE5 (* ((volatile uint32_t *) (0x50051000 + 420)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE5_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE5_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE6: JPEG HuffSymb tables
  #define JPEG_HUFFBASE6 (* ((volatile uint32_t *) (0x50051000 + 424)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE6_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE6_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE7: JPEG HuffSymb tables
  #define JPEG_HUFFBASE7 (* ((volatile uint32_t *) (0x50051000 + 428)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE7_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE7_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE8: JPEG HuffSymb tables
  #define JPEG_HUFFBASE8 (* ((volatile uint32_t *) (0x50051000 + 432)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE8_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE8_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE9: JPEG HuffSymb tables
  #define JPEG_HUFFBASE9 (* ((volatile uint32_t *) (0x50051000 + 436)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE9_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE9_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE10: JPEG HuffSymb tables
  #define JPEG_HUFFBASE10 (* ((volatile uint32_t *) (0x50051000 + 440)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE10_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE10_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE11: JPEG HuffSymb tables
  #define JPEG_HUFFBASE11 (* ((volatile uint32_t *) (0x50051000 + 444)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE11_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE11_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE12: JPEG HuffSymb tables
  #define JPEG_HUFFBASE12 (* ((volatile uint32_t *) (0x50051000 + 448)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE12_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE12_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE13: JPEG HuffSymb tables
  #define JPEG_HUFFBASE13 (* ((volatile uint32_t *) (0x50051000 + 452)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE13_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE13_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE14: JPEG HuffSymb tables
  #define JPEG_HUFFBASE14 (* ((volatile uint32_t *) (0x50051000 + 456)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE14_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE14_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE15: JPEG HuffSymb tables
  #define JPEG_HUFFBASE15 (* ((volatile uint32_t *) (0x50051000 + 460)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE15_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE15_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE16: JPEG HuffSymb tables
  #define JPEG_HUFFBASE16 (* ((volatile uint32_t *) (0x50051000 + 464)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE16_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE16_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE17: JPEG HuffSymb tables
  #define JPEG_HUFFBASE17 (* ((volatile uint32_t *) (0x50051000 + 468)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE17_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE17_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE18: JPEG HuffSymb tables
  #define JPEG_HUFFBASE18 (* ((volatile uint32_t *) (0x50051000 + 472)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE18_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE18_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE19: JPEG HuffSymb tables
  #define JPEG_HUFFBASE19 (* ((volatile uint32_t *) (0x50051000 + 476)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE19_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE19_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE20: JPEG HuffSymb tables
  #define JPEG_HUFFBASE20 (* ((volatile uint32_t *) (0x50051000 + 480)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE20_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE20_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE21: JPEG HuffSymb tables
  #define JPEG_HUFFBASE21 (* ((volatile uint32_t *) (0x50051000 + 484)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE21_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE21_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE22: JPEG HuffSymb tables
  #define JPEG_HUFFBASE22 (* ((volatile uint32_t *) (0x50051000 + 488)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE22_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE22_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE23: JPEG HuffSymb tables
  #define JPEG_HUFFBASE23 (* ((volatile uint32_t *) (0x50051000 + 492)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE23_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE23_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE24: JPEG HuffSymb tables
  #define JPEG_HUFFBASE24 (* ((volatile uint32_t *) (0x50051000 + 496)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE24_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE24_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE25: JPEG HuffSymb tables
  #define JPEG_HUFFBASE25 (* ((volatile uint32_t *) (0x50051000 + 500)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE25_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE25_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE26: JPEG HuffSymb tables
  #define JPEG_HUFFBASE26 (* ((volatile uint32_t *) (0x50051000 + 504)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE26_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE26_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE27: JPEG HuffSymb tables
  #define JPEG_HUFFBASE27 (* ((volatile uint32_t *) (0x50051000 + 508)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE27_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE27_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE28: JPEG HuffSymb tables
  #define JPEG_HUFFBASE28 (* ((volatile uint32_t *) (0x50051000 + 512)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE28_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE28_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE29: JPEG HuffSymb tables
  #define JPEG_HUFFBASE29 (* ((volatile uint32_t *) (0x50051000 + 516)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE29_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE29_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE30: JPEG HuffSymb tables
  #define JPEG_HUFFBASE30 (* ((volatile uint32_t *) (0x50051000 + 520)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE30_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE30_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFBASE31: JPEG HuffSymb tables
  #define JPEG_HUFFBASE31 (* ((volatile uint32_t *) (0x50051000 + 524)))

  // Field HuffBase_RAM_0: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE31_HuffBase_RAM_0 (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field HuffBase_RAM_1: HuffBase RAM
    inline uint32_t JPEG_HUFFBASE31_HuffBase_RAM_1 (const uint32_t inValue) {return (inValue & 0x1FFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB0: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB0 (* ((volatile uint32_t *) (0x50051000 + 528)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB0_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB1: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB1 (* ((volatile uint32_t *) (0x50051000 + 532)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB1_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB2: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB2 (* ((volatile uint32_t *) (0x50051000 + 536)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB2_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB3: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB3 (* ((volatile uint32_t *) (0x50051000 + 540)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB3_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB4: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB4 (* ((volatile uint32_t *) (0x50051000 + 544)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB4_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB5: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB5 (* ((volatile uint32_t *) (0x50051000 + 548)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB5_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB6: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB6 (* ((volatile uint32_t *) (0x50051000 + 552)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB6_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB7: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB7 (* ((volatile uint32_t *) (0x50051000 + 556)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB7_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB8: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB8 (* ((volatile uint32_t *) (0x50051000 + 560)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB8_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB9: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB9 (* ((volatile uint32_t *) (0x50051000 + 564)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB9_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB10: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB10 (* ((volatile uint32_t *) (0x50051000 + 568)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB10_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB11: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB11 (* ((volatile uint32_t *) (0x50051000 + 572)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB11_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB12: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB12 (* ((volatile uint32_t *) (0x50051000 + 576)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB12_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB13: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB13 (* ((volatile uint32_t *) (0x50051000 + 580)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB13_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB14: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB14 (* ((volatile uint32_t *) (0x50051000 + 584)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB14_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB15: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB15 (* ((volatile uint32_t *) (0x50051000 + 588)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB15_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB16: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB16 (* ((volatile uint32_t *) (0x50051000 + 592)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB16_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB17: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB17 (* ((volatile uint32_t *) (0x50051000 + 596)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB17_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB18: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB18 (* ((volatile uint32_t *) (0x50051000 + 600)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB18_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB19: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB19 (* ((volatile uint32_t *) (0x50051000 + 604)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB19_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB20: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB20 (* ((volatile uint32_t *) (0x50051000 + 608)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB20_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB21: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB21 (* ((volatile uint32_t *) (0x50051000 + 612)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB21_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB22: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB22 (* ((volatile uint32_t *) (0x50051000 + 616)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB22_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB23: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB23 (* ((volatile uint32_t *) (0x50051000 + 620)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB23_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB24: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB24 (* ((volatile uint32_t *) (0x50051000 + 624)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB24_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB25: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB25 (* ((volatile uint32_t *) (0x50051000 + 628)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB25_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB26: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB26 (* ((volatile uint32_t *) (0x50051000 + 632)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB26_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB27: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB27 (* ((volatile uint32_t *) (0x50051000 + 636)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB27_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB28: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB28 (* ((volatile uint32_t *) (0x50051000 + 640)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB28_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB29: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB29 (* ((volatile uint32_t *) (0x50051000 + 644)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB29_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB30: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB30 (* ((volatile uint32_t *) (0x50051000 + 648)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB30_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB31: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB31 (* ((volatile uint32_t *) (0x50051000 + 652)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB31_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB32: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB32 (* ((volatile uint32_t *) (0x50051000 + 656)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB32_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB33: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB33 (* ((volatile uint32_t *) (0x50051000 + 660)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB33_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB34: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB34 (* ((volatile uint32_t *) (0x50051000 + 664)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB34_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB35: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB35 (* ((volatile uint32_t *) (0x50051000 + 668)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB35_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB36: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB36 (* ((volatile uint32_t *) (0x50051000 + 672)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB36_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB37: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB37 (* ((volatile uint32_t *) (0x50051000 + 676)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB37_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB38: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB38 (* ((volatile uint32_t *) (0x50051000 + 680)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB38_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB39: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB39 (* ((volatile uint32_t *) (0x50051000 + 684)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB39_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB40: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB40 (* ((volatile uint32_t *) (0x50051000 + 688)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB40_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB41: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB41 (* ((volatile uint32_t *) (0x50051000 + 692)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB41_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB42: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB42 (* ((volatile uint32_t *) (0x50051000 + 696)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB42_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB43: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB43 (* ((volatile uint32_t *) (0x50051000 + 700)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB43_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB44: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB44 (* ((volatile uint32_t *) (0x50051000 + 704)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB44_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB45: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB45 (* ((volatile uint32_t *) (0x50051000 + 708)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB45_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB46: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB46 (* ((volatile uint32_t *) (0x50051000 + 712)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB46_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB47: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB47 (* ((volatile uint32_t *) (0x50051000 + 716)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB47_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB48: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB48 (* ((volatile uint32_t *) (0x50051000 + 720)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB48_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB49: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB49 (* ((volatile uint32_t *) (0x50051000 + 724)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB49_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB50: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB50 (* ((volatile uint32_t *) (0x50051000 + 728)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB50_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB51: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB51 (* ((volatile uint32_t *) (0x50051000 + 732)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB51_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB52: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB52 (* ((volatile uint32_t *) (0x50051000 + 736)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB52_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB53: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB53 (* ((volatile uint32_t *) (0x50051000 + 740)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB53_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB54: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB54 (* ((volatile uint32_t *) (0x50051000 + 744)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB54_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB55: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB55 (* ((volatile uint32_t *) (0x50051000 + 748)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB55_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB56: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB56 (* ((volatile uint32_t *) (0x50051000 + 752)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB56_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB57: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB57 (* ((volatile uint32_t *) (0x50051000 + 756)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB57_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB58: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB58 (* ((volatile uint32_t *) (0x50051000 + 760)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB58_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB59: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB59 (* ((volatile uint32_t *) (0x50051000 + 764)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB59_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB60: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB60 (* ((volatile uint32_t *) (0x50051000 + 768)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB60_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB61: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB61 (* ((volatile uint32_t *) (0x50051000 + 772)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB61_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB62: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB62 (* ((volatile uint32_t *) (0x50051000 + 776)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB62_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB63: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB63 (* ((volatile uint32_t *) (0x50051000 + 780)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB63_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB64: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB64 (* ((volatile uint32_t *) (0x50051000 + 784)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB64_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB65: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB65 (* ((volatile uint32_t *) (0x50051000 + 788)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB65_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB66: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB66 (* ((volatile uint32_t *) (0x50051000 + 792)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB66_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB67: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB67 (* ((volatile uint32_t *) (0x50051000 + 796)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB67_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB68: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB68 (* ((volatile uint32_t *) (0x50051000 + 800)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB68_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB69: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB69 (* ((volatile uint32_t *) (0x50051000 + 804)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB69_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB70: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB70 (* ((volatile uint32_t *) (0x50051000 + 808)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB70_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB71: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB71 (* ((volatile uint32_t *) (0x50051000 + 812)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB71_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB72: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB72 (* ((volatile uint32_t *) (0x50051000 + 816)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB72_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB73: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB73 (* ((volatile uint32_t *) (0x50051000 + 820)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB73_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB74: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB74 (* ((volatile uint32_t *) (0x50051000 + 824)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB74_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB75: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB75 (* ((volatile uint32_t *) (0x50051000 + 828)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB75_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB76: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB76 (* ((volatile uint32_t *) (0x50051000 + 832)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB76_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB77: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB77 (* ((volatile uint32_t *) (0x50051000 + 836)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB77_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB78: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB78 (* ((volatile uint32_t *) (0x50051000 + 840)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB78_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB79: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB79 (* ((volatile uint32_t *) (0x50051000 + 844)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB79_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB80: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB80 (* ((volatile uint32_t *) (0x50051000 + 848)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB80_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB81: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB81 (* ((volatile uint32_t *) (0x50051000 + 852)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB81_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB82: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB82 (* ((volatile uint32_t *) (0x50051000 + 856)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB82_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFSYMB83: JPEG HUFFSYMB tables
  #define JPEG_HUFFSYMB83 (* ((volatile uint32_t *) (0x50051000 + 860)))

  // Field HuffSymb_RAM: DHTSymb RAM
    inline uint32_t JPEG_HUFFSYMB83_HuffSymb_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM0: JPEG DHTMem tables
  #define JPEG_DHTMEM0 (* ((volatile uint32_t *) (0x50051000 + 864)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM0_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM2: JPEG DHTMem tables
  #define JPEG_DHTMEM2 (* ((volatile uint32_t *) (0x50051000 + 868)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM2_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM3: JPEG DHTMem tables
  #define JPEG_DHTMEM3 (* ((volatile uint32_t *) (0x50051000 + 872)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM3_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM4: JPEG DHTMem tables
  #define JPEG_DHTMEM4 (* ((volatile uint32_t *) (0x50051000 + 876)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM4_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM5: JPEG DHTMem tables
  #define JPEG_DHTMEM5 (* ((volatile uint32_t *) (0x50051000 + 880)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM5_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM6: JPEG DHTMem tables
  #define JPEG_DHTMEM6 (* ((volatile uint32_t *) (0x50051000 + 884)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM6_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM7: JPEG DHTMem tables
  #define JPEG_DHTMEM7 (* ((volatile uint32_t *) (0x50051000 + 888)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM7_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM8: JPEG DHTMem tables
  #define JPEG_DHTMEM8 (* ((volatile uint32_t *) (0x50051000 + 892)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM8_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM9: JPEG DHTMem tables
  #define JPEG_DHTMEM9 (* ((volatile uint32_t *) (0x50051000 + 896)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM9_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM10: JPEG DHTMem tables
  #define JPEG_DHTMEM10 (* ((volatile uint32_t *) (0x50051000 + 900)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM10_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM11: JPEG DHTMem tables
  #define JPEG_DHTMEM11 (* ((volatile uint32_t *) (0x50051000 + 904)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM11_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM12: JPEG DHTMem tables
  #define JPEG_DHTMEM12 (* ((volatile uint32_t *) (0x50051000 + 908)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM12_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM13: JPEG DHTMem tables
  #define JPEG_DHTMEM13 (* ((volatile uint32_t *) (0x50051000 + 912)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM13_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM14: JPEG DHTMem tables
  #define JPEG_DHTMEM14 (* ((volatile uint32_t *) (0x50051000 + 916)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM14_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM15: JPEG DHTMem tables
  #define JPEG_DHTMEM15 (* ((volatile uint32_t *) (0x50051000 + 920)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM15_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM16: JPEG DHTMem tables
  #define JPEG_DHTMEM16 (* ((volatile uint32_t *) (0x50051000 + 924)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM16_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM17: JPEG DHTMem tables
  #define JPEG_DHTMEM17 (* ((volatile uint32_t *) (0x50051000 + 928)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM17_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM18: JPEG DHTMem tables
  #define JPEG_DHTMEM18 (* ((volatile uint32_t *) (0x50051000 + 932)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM18_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM19: JPEG DHTMem tables
  #define JPEG_DHTMEM19 (* ((volatile uint32_t *) (0x50051000 + 936)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM19_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM20: JPEG DHTMem tables
  #define JPEG_DHTMEM20 (* ((volatile uint32_t *) (0x50051000 + 940)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM20_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM21: JPEG DHTMem tables
  #define JPEG_DHTMEM21 (* ((volatile uint32_t *) (0x50051000 + 944)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM21_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM22: JPEG DHTMem tables
  #define JPEG_DHTMEM22 (* ((volatile uint32_t *) (0x50051000 + 948)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM22_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM23: JPEG DHTMem tables
  #define JPEG_DHTMEM23 (* ((volatile uint32_t *) (0x50051000 + 952)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM23_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM24: JPEG DHTMem tables
  #define JPEG_DHTMEM24 (* ((volatile uint32_t *) (0x50051000 + 956)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM24_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM25: JPEG DHTMem tables
  #define JPEG_DHTMEM25 (* ((volatile uint32_t *) (0x50051000 + 960)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM25_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM26: JPEG DHTMem tables
  #define JPEG_DHTMEM26 (* ((volatile uint32_t *) (0x50051000 + 964)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM26_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM27: JPEG DHTMem tables
  #define JPEG_DHTMEM27 (* ((volatile uint32_t *) (0x50051000 + 968)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM27_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM28: JPEG DHTMem tables
  #define JPEG_DHTMEM28 (* ((volatile uint32_t *) (0x50051000 + 972)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM28_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM29: JPEG DHTMem tables
  #define JPEG_DHTMEM29 (* ((volatile uint32_t *) (0x50051000 + 976)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM29_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM30: JPEG DHTMem tables
  #define JPEG_DHTMEM30 (* ((volatile uint32_t *) (0x50051000 + 980)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM30_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM31: JPEG DHTMem tables
  #define JPEG_DHTMEM31 (* ((volatile uint32_t *) (0x50051000 + 984)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM31_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM32: JPEG DHTMem tables
  #define JPEG_DHTMEM32 (* ((volatile uint32_t *) (0x50051000 + 988)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM32_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM33: JPEG DHTMem tables
  #define JPEG_DHTMEM33 (* ((volatile uint32_t *) (0x50051000 + 992)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM33_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM34: JPEG DHTMem tables
  #define JPEG_DHTMEM34 (* ((volatile uint32_t *) (0x50051000 + 996)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM34_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM35: JPEG DHTMem tables
  #define JPEG_DHTMEM35 (* ((volatile uint32_t *) (0x50051000 + 1000)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM35_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM36: JPEG DHTMem tables
  #define JPEG_DHTMEM36 (* ((volatile uint32_t *) (0x50051000 + 1004)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM36_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM37: JPEG DHTMem tables
  #define JPEG_DHTMEM37 (* ((volatile uint32_t *) (0x50051000 + 1008)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM37_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM38: JPEG DHTMem tables
  #define JPEG_DHTMEM38 (* ((volatile uint32_t *) (0x50051000 + 1012)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM38_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM39: JPEG DHTMem tables
  #define JPEG_DHTMEM39 (* ((volatile uint32_t *) (0x50051000 + 1016)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM39_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM40: JPEG DHTMem tables
  #define JPEG_DHTMEM40 (* ((volatile uint32_t *) (0x50051000 + 1020)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM40_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM41: JPEG DHTMem tables
  #define JPEG_DHTMEM41 (* ((volatile uint32_t *) (0x50051000 + 1024)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM41_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM42: JPEG DHTMem tables
  #define JPEG_DHTMEM42 (* ((volatile uint32_t *) (0x50051000 + 1028)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM42_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM43: JPEG DHTMem tables
  #define JPEG_DHTMEM43 (* ((volatile uint32_t *) (0x50051000 + 1032)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM43_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM44: JPEG DHTMem tables
  #define JPEG_DHTMEM44 (* ((volatile uint32_t *) (0x50051000 + 1036)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM44_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM45: JPEG DHTMem tables
  #define JPEG_DHTMEM45 (* ((volatile uint32_t *) (0x50051000 + 1040)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM45_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM46: JPEG DHTMem tables
  #define JPEG_DHTMEM46 (* ((volatile uint32_t *) (0x50051000 + 1044)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM46_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM47: JPEG DHTMem tables
  #define JPEG_DHTMEM47 (* ((volatile uint32_t *) (0x50051000 + 1048)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM47_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM48: JPEG DHTMem tables
  #define JPEG_DHTMEM48 (* ((volatile uint32_t *) (0x50051000 + 1052)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM48_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM49: JPEG DHTMem tables
  #define JPEG_DHTMEM49 (* ((volatile uint32_t *) (0x50051000 + 1056)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM49_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM50: JPEG DHTMem tables
  #define JPEG_DHTMEM50 (* ((volatile uint32_t *) (0x50051000 + 1060)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM50_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM51: JPEG DHTMem tables
  #define JPEG_DHTMEM51 (* ((volatile uint32_t *) (0x50051000 + 1064)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM51_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM52: JPEG DHTMem tables
  #define JPEG_DHTMEM52 (* ((volatile uint32_t *) (0x50051000 + 1068)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM52_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM53: JPEG DHTMem tables
  #define JPEG_DHTMEM53 (* ((volatile uint32_t *) (0x50051000 + 1072)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM53_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM54: JPEG DHTMem tables
  #define JPEG_DHTMEM54 (* ((volatile uint32_t *) (0x50051000 + 1076)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM54_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM55: JPEG DHTMem tables
  #define JPEG_DHTMEM55 (* ((volatile uint32_t *) (0x50051000 + 1080)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM55_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM56: JPEG DHTMem tables
  #define JPEG_DHTMEM56 (* ((volatile uint32_t *) (0x50051000 + 1084)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM56_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM57: JPEG DHTMem tables
  #define JPEG_DHTMEM57 (* ((volatile uint32_t *) (0x50051000 + 1088)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM57_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM58: JPEG DHTMem tables
  #define JPEG_DHTMEM58 (* ((volatile uint32_t *) (0x50051000 + 1092)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM58_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM59: JPEG DHTMem tables
  #define JPEG_DHTMEM59 (* ((volatile uint32_t *) (0x50051000 + 1096)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM59_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM60: JPEG DHTMem tables
  #define JPEG_DHTMEM60 (* ((volatile uint32_t *) (0x50051000 + 1100)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM60_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM61: JPEG DHTMem tables
  #define JPEG_DHTMEM61 (* ((volatile uint32_t *) (0x50051000 + 1104)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM61_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM62: JPEG DHTMem tables
  #define JPEG_DHTMEM62 (* ((volatile uint32_t *) (0x50051000 + 1108)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM62_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM63: JPEG DHTMem tables
  #define JPEG_DHTMEM63 (* ((volatile uint32_t *) (0x50051000 + 1112)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM63_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM64: JPEG DHTMem tables
  #define JPEG_DHTMEM64 (* ((volatile uint32_t *) (0x50051000 + 1116)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM64_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM65: JPEG DHTMem tables
  #define JPEG_DHTMEM65 (* ((volatile uint32_t *) (0x50051000 + 1120)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM65_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM66: JPEG DHTMem tables
  #define JPEG_DHTMEM66 (* ((volatile uint32_t *) (0x50051000 + 1124)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM66_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM67: JPEG DHTMem tables
  #define JPEG_DHTMEM67 (* ((volatile uint32_t *) (0x50051000 + 1128)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM67_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM68: JPEG DHTMem tables
  #define JPEG_DHTMEM68 (* ((volatile uint32_t *) (0x50051000 + 1132)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM68_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM69: JPEG DHTMem tables
  #define JPEG_DHTMEM69 (* ((volatile uint32_t *) (0x50051000 + 1136)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM69_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM70: JPEG DHTMem tables
  #define JPEG_DHTMEM70 (* ((volatile uint32_t *) (0x50051000 + 1140)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM70_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM71: JPEG DHTMem tables
  #define JPEG_DHTMEM71 (* ((volatile uint32_t *) (0x50051000 + 1144)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM71_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM72: JPEG DHTMem tables
  #define JPEG_DHTMEM72 (* ((volatile uint32_t *) (0x50051000 + 1148)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM72_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM73: JPEG DHTMem tables
  #define JPEG_DHTMEM73 (* ((volatile uint32_t *) (0x50051000 + 1152)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM73_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM74: JPEG DHTMem tables
  #define JPEG_DHTMEM74 (* ((volatile uint32_t *) (0x50051000 + 1156)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM74_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM75: JPEG DHTMem tables
  #define JPEG_DHTMEM75 (* ((volatile uint32_t *) (0x50051000 + 1160)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM75_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM76: JPEG DHTMem tables
  #define JPEG_DHTMEM76 (* ((volatile uint32_t *) (0x50051000 + 1164)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM76_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM77: JPEG DHTMem tables
  #define JPEG_DHTMEM77 (* ((volatile uint32_t *) (0x50051000 + 1168)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM77_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM78: JPEG DHTMem tables
  #define JPEG_DHTMEM78 (* ((volatile uint32_t *) (0x50051000 + 1172)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM78_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM79: JPEG DHTMem tables
  #define JPEG_DHTMEM79 (* ((volatile uint32_t *) (0x50051000 + 1176)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM79_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM80: JPEG DHTMem tables
  #define JPEG_DHTMEM80 (* ((volatile uint32_t *) (0x50051000 + 1180)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM80_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM81: JPEG DHTMem tables
  #define JPEG_DHTMEM81 (* ((volatile uint32_t *) (0x50051000 + 1184)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM81_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM82: JPEG DHTMem tables
  #define JPEG_DHTMEM82 (* ((volatile uint32_t *) (0x50051000 + 1188)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM82_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM83: JPEG DHTMem tables
  #define JPEG_DHTMEM83 (* ((volatile uint32_t *) (0x50051000 + 1192)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM83_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM84: JPEG DHTMem tables
  #define JPEG_DHTMEM84 (* ((volatile uint32_t *) (0x50051000 + 1196)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM84_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM85: JPEG DHTMem tables
  #define JPEG_DHTMEM85 (* ((volatile uint32_t *) (0x50051000 + 1200)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM85_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM86: JPEG DHTMem tables
  #define JPEG_DHTMEM86 (* ((volatile uint32_t *) (0x50051000 + 1204)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM86_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM87: JPEG DHTMem tables
  #define JPEG_DHTMEM87 (* ((volatile uint32_t *) (0x50051000 + 1208)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM87_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM88: JPEG DHTMem tables
  #define JPEG_DHTMEM88 (* ((volatile uint32_t *) (0x50051000 + 1212)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM88_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM89: JPEG DHTMem tables
  #define JPEG_DHTMEM89 (* ((volatile uint32_t *) (0x50051000 + 1216)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM89_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM90: JPEG DHTMem tables
  #define JPEG_DHTMEM90 (* ((volatile uint32_t *) (0x50051000 + 1220)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM90_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM91: JPEG DHTMem tables
  #define JPEG_DHTMEM91 (* ((volatile uint32_t *) (0x50051000 + 1224)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM91_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM92: JPEG DHTMem tables
  #define JPEG_DHTMEM92 (* ((volatile uint32_t *) (0x50051000 + 1228)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM92_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM93: JPEG DHTMem tables
  #define JPEG_DHTMEM93 (* ((volatile uint32_t *) (0x50051000 + 1232)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM93_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM94: JPEG DHTMem tables
  #define JPEG_DHTMEM94 (* ((volatile uint32_t *) (0x50051000 + 1236)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM94_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM95: JPEG DHTMem tables
  #define JPEG_DHTMEM95 (* ((volatile uint32_t *) (0x50051000 + 1240)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM95_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM96: JPEG DHTMem tables
  #define JPEG_DHTMEM96 (* ((volatile uint32_t *) (0x50051000 + 1244)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM96_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM97: JPEG DHTMem tables
  #define JPEG_DHTMEM97 (* ((volatile uint32_t *) (0x50051000 + 1248)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM97_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM98: JPEG DHTMem tables
  #define JPEG_DHTMEM98 (* ((volatile uint32_t *) (0x50051000 + 1252)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM98_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM99: JPEG DHTMem tables
  #define JPEG_DHTMEM99 (* ((volatile uint32_t *) (0x50051000 + 1256)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM99_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM100: JPEG DHTMem tables
  #define JPEG_DHTMEM100 (* ((volatile uint32_t *) (0x50051000 + 1260)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM100_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM101: JPEG DHTMem tables
  #define JPEG_DHTMEM101 (* ((volatile uint32_t *) (0x50051000 + 1264)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM101_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM102: JPEG DHTMem tables
  #define JPEG_DHTMEM102 (* ((volatile uint32_t *) (0x50051000 + 1268)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM102_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DHTMEM103: JPEG DHTMem tables
  #define JPEG_DHTMEM103 (* ((volatile uint32_t *) (0x50051000 + 1272)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_DHTMEM103_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_0: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_0 (* ((volatile uint32_t *) (0x50051000 + 1280)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_0_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_1: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_1 (* ((volatile uint32_t *) (0x50051000 + 1284)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_1_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_2: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_2 (* ((volatile uint32_t *) (0x50051000 + 1288)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_2_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_3: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_3 (* ((volatile uint32_t *) (0x50051000 + 1292)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_3_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_4: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_4 (* ((volatile uint32_t *) (0x50051000 + 1296)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_4_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_5: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_5 (* ((volatile uint32_t *) (0x50051000 + 1300)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_5_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_6: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_6 (* ((volatile uint32_t *) (0x50051000 + 1304)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_6_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_7: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_7 (* ((volatile uint32_t *) (0x50051000 + 1308)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_7_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_8: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_8 (* ((volatile uint32_t *) (0x50051000 + 1312)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_8_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_9: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_9 (* ((volatile uint32_t *) (0x50051000 + 1316)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_9_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_10: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_10 (* ((volatile uint32_t *) (0x50051000 + 1320)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_10_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_11: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_11 (* ((volatile uint32_t *) (0x50051000 + 1324)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_11_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_12: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_12 (* ((volatile uint32_t *) (0x50051000 + 1328)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_12_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_13: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_13 (* ((volatile uint32_t *) (0x50051000 + 1332)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_13_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_14: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_14 (* ((volatile uint32_t *) (0x50051000 + 1336)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_14_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_15: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_15 (* ((volatile uint32_t *) (0x50051000 + 1340)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_15_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_16: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_16 (* ((volatile uint32_t *) (0x50051000 + 1344)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_16_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_17: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_17 (* ((volatile uint32_t *) (0x50051000 + 1348)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_17_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_18: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_18 (* ((volatile uint32_t *) (0x50051000 + 1352)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_18_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_19: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_19 (* ((volatile uint32_t *) (0x50051000 + 1356)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_19_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_20: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_20 (* ((volatile uint32_t *) (0x50051000 + 1360)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_20_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_21: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_21 (* ((volatile uint32_t *) (0x50051000 + 1364)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_21_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_22: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_22 (* ((volatile uint32_t *) (0x50051000 + 1368)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_22_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_23: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_23 (* ((volatile uint32_t *) (0x50051000 + 1372)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_23_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_24: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_24 (* ((volatile uint32_t *) (0x50051000 + 1376)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_24_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_25: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_25 (* ((volatile uint32_t *) (0x50051000 + 1380)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_25_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_26: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_26 (* ((volatile uint32_t *) (0x50051000 + 1384)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_26_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_27: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_27 (* ((volatile uint32_t *) (0x50051000 + 1388)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_27_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_28: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_28 (* ((volatile uint32_t *) (0x50051000 + 1392)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_28_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_29: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_29 (* ((volatile uint32_t *) (0x50051000 + 1396)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_29_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_30: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_30 (* ((volatile uint32_t *) (0x50051000 + 1400)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_30_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_31: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_31 (* ((volatile uint32_t *) (0x50051000 + 1404)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_31_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_32: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_32 (* ((volatile uint32_t *) (0x50051000 + 1408)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_32_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_33: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_33 (* ((volatile uint32_t *) (0x50051000 + 1412)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_33_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_34: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_34 (* ((volatile uint32_t *) (0x50051000 + 1416)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_34_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_35: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_35 (* ((volatile uint32_t *) (0x50051000 + 1420)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_35_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_36: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_36 (* ((volatile uint32_t *) (0x50051000 + 1424)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_36_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_37: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_37 (* ((volatile uint32_t *) (0x50051000 + 1428)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_37_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_38: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_38 (* ((volatile uint32_t *) (0x50051000 + 1432)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_38_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_39: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_39 (* ((volatile uint32_t *) (0x50051000 + 1436)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_39_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_40: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_40 (* ((volatile uint32_t *) (0x50051000 + 1440)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_40_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_41: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_41 (* ((volatile uint32_t *) (0x50051000 + 1444)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_41_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_42: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_42 (* ((volatile uint32_t *) (0x50051000 + 1448)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_42_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_43: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_43 (* ((volatile uint32_t *) (0x50051000 + 1452)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_43_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_44: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_44 (* ((volatile uint32_t *) (0x50051000 + 1456)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_44_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_45: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_45 (* ((volatile uint32_t *) (0x50051000 + 1460)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_45_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_46: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_46 (* ((volatile uint32_t *) (0x50051000 + 1464)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_46_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_47: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_47 (* ((volatile uint32_t *) (0x50051000 + 1468)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_47_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_48: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_48 (* ((volatile uint32_t *) (0x50051000 + 1472)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_48_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_49: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_49 (* ((volatile uint32_t *) (0x50051000 + 1476)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_49_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_50: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_50 (* ((volatile uint32_t *) (0x50051000 + 1480)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_50_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_51: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_51 (* ((volatile uint32_t *) (0x50051000 + 1484)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_51_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_52: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_52 (* ((volatile uint32_t *) (0x50051000 + 1488)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_52_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_53: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_53 (* ((volatile uint32_t *) (0x50051000 + 1492)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_53_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_54: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_54 (* ((volatile uint32_t *) (0x50051000 + 1496)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_54_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_55: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_55 (* ((volatile uint32_t *) (0x50051000 + 1500)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_55_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_56: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_56 (* ((volatile uint32_t *) (0x50051000 + 1504)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_56_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_57: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_57 (* ((volatile uint32_t *) (0x50051000 + 1508)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_57_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_58: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_58 (* ((volatile uint32_t *) (0x50051000 + 1512)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_58_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_59: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_59 (* ((volatile uint32_t *) (0x50051000 + 1516)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_59_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_60: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_60 (* ((volatile uint32_t *) (0x50051000 + 1520)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_60_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_61: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_61 (* ((volatile uint32_t *) (0x50051000 + 1524)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_61_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_62: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_62 (* ((volatile uint32_t *) (0x50051000 + 1528)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_62_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_63: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_63 (* ((volatile uint32_t *) (0x50051000 + 1532)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_63_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_64: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_64 (* ((volatile uint32_t *) (0x50051000 + 1536)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_64_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_65: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_65 (* ((volatile uint32_t *) (0x50051000 + 1540)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_65_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_66: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_66 (* ((volatile uint32_t *) (0x50051000 + 1544)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_66_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_67: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_67 (* ((volatile uint32_t *) (0x50051000 + 1548)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_67_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_68: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_68 (* ((volatile uint32_t *) (0x50051000 + 1552)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_68_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_69: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_69 (* ((volatile uint32_t *) (0x50051000 + 1556)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_69_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_70: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_70 (* ((volatile uint32_t *) (0x50051000 + 1560)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_70_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_71: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_71 (* ((volatile uint32_t *) (0x50051000 + 1564)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_71_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_72: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_72 (* ((volatile uint32_t *) (0x50051000 + 1568)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_72_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_73: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_73 (* ((volatile uint32_t *) (0x50051000 + 1572)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_73_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_74: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_74 (* ((volatile uint32_t *) (0x50051000 + 1576)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_74_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_75: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_75 (* ((volatile uint32_t *) (0x50051000 + 1580)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_75_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_76: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_76 (* ((volatile uint32_t *) (0x50051000 + 1584)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_76_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_77: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_77 (* ((volatile uint32_t *) (0x50051000 + 1588)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_77_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_78: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_78 (* ((volatile uint32_t *) (0x50051000 + 1592)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_78_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_79: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_79 (* ((volatile uint32_t *) (0x50051000 + 1596)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_79_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_80: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_80 (* ((volatile uint32_t *) (0x50051000 + 1600)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_80_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_81: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_81 (* ((volatile uint32_t *) (0x50051000 + 1604)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_81_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_82: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_82 (* ((volatile uint32_t *) (0x50051000 + 1608)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_82_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_83: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_83 (* ((volatile uint32_t *) (0x50051000 + 1612)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_83_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_84: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_84 (* ((volatile uint32_t *) (0x50051000 + 1616)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_84_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_85: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_85 (* ((volatile uint32_t *) (0x50051000 + 1620)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_85_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_86: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_86 (* ((volatile uint32_t *) (0x50051000 + 1624)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_86_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC0_87: JPEG encoder, AC Huffman table 0
  #define JPEG_HUFFENC_AC0_87 (* ((volatile uint32_t *) (0x50051000 + 1628)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC0_87_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_0: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_0 (* ((volatile uint32_t *) (0x50051000 + 1632)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_0_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_1: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_1 (* ((volatile uint32_t *) (0x50051000 + 1636)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_1_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_2: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_2 (* ((volatile uint32_t *) (0x50051000 + 1640)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_2_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_3: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_3 (* ((volatile uint32_t *) (0x50051000 + 1644)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_3_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_4: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_4 (* ((volatile uint32_t *) (0x50051000 + 1648)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_4_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_5: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_5 (* ((volatile uint32_t *) (0x50051000 + 1652)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_5_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_6: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_6 (* ((volatile uint32_t *) (0x50051000 + 1656)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_6_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_7: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_7 (* ((volatile uint32_t *) (0x50051000 + 1660)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_7_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_8: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_8 (* ((volatile uint32_t *) (0x50051000 + 1664)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_8_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_9: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_9 (* ((volatile uint32_t *) (0x50051000 + 1668)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_9_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_10: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_10 (* ((volatile uint32_t *) (0x50051000 + 1672)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_10_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_11: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_11 (* ((volatile uint32_t *) (0x50051000 + 1676)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_11_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_12: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_12 (* ((volatile uint32_t *) (0x50051000 + 1680)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_12_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_13: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_13 (* ((volatile uint32_t *) (0x50051000 + 1684)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_13_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_14: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_14 (* ((volatile uint32_t *) (0x50051000 + 1688)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_14_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_15: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_15 (* ((volatile uint32_t *) (0x50051000 + 1692)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_15_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_16: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_16 (* ((volatile uint32_t *) (0x50051000 + 1696)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_16_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_17: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_17 (* ((volatile uint32_t *) (0x50051000 + 1700)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_17_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_18: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_18 (* ((volatile uint32_t *) (0x50051000 + 1704)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_18_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_19: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_19 (* ((volatile uint32_t *) (0x50051000 + 1708)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_19_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_20: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_20 (* ((volatile uint32_t *) (0x50051000 + 1712)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_20_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_21: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_21 (* ((volatile uint32_t *) (0x50051000 + 1716)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_21_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_22: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_22 (* ((volatile uint32_t *) (0x50051000 + 1720)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_22_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_23: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_23 (* ((volatile uint32_t *) (0x50051000 + 1724)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_23_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_24: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_24 (* ((volatile uint32_t *) (0x50051000 + 1728)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_24_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_25: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_25 (* ((volatile uint32_t *) (0x50051000 + 1732)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_25_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_26: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_26 (* ((volatile uint32_t *) (0x50051000 + 1736)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_26_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_27: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_27 (* ((volatile uint32_t *) (0x50051000 + 1740)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_27_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_28: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_28 (* ((volatile uint32_t *) (0x50051000 + 1744)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_28_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_29: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_29 (* ((volatile uint32_t *) (0x50051000 + 1748)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_29_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_30: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_30 (* ((volatile uint32_t *) (0x50051000 + 1752)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_30_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_31: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_31 (* ((volatile uint32_t *) (0x50051000 + 1756)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_31_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_32: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_32 (* ((volatile uint32_t *) (0x50051000 + 1760)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_32_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_33: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_33 (* ((volatile uint32_t *) (0x50051000 + 1764)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_33_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_34: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_34 (* ((volatile uint32_t *) (0x50051000 + 1768)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_34_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_35: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_35 (* ((volatile uint32_t *) (0x50051000 + 1772)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_35_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_36: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_36 (* ((volatile uint32_t *) (0x50051000 + 1776)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_36_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_37: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_37 (* ((volatile uint32_t *) (0x50051000 + 1780)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_37_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_38: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_38 (* ((volatile uint32_t *) (0x50051000 + 1784)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_38_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_39: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_39 (* ((volatile uint32_t *) (0x50051000 + 1788)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_39_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_40: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_40 (* ((volatile uint32_t *) (0x50051000 + 1792)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_40_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_41: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_41 (* ((volatile uint32_t *) (0x50051000 + 1796)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_41_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_42: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_42 (* ((volatile uint32_t *) (0x50051000 + 1800)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_42_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_43: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_43 (* ((volatile uint32_t *) (0x50051000 + 1804)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_43_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_44: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_44 (* ((volatile uint32_t *) (0x50051000 + 1808)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_44_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_45: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_45 (* ((volatile uint32_t *) (0x50051000 + 1812)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_45_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_46: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_46 (* ((volatile uint32_t *) (0x50051000 + 1816)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_46_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_47: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_47 (* ((volatile uint32_t *) (0x50051000 + 1820)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_47_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_48: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_48 (* ((volatile uint32_t *) (0x50051000 + 1824)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_48_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_49: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_49 (* ((volatile uint32_t *) (0x50051000 + 1828)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_49_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_50: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_50 (* ((volatile uint32_t *) (0x50051000 + 1832)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_50_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_51: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_51 (* ((volatile uint32_t *) (0x50051000 + 1836)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_51_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_52: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_52 (* ((volatile uint32_t *) (0x50051000 + 1840)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_52_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_53: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_53 (* ((volatile uint32_t *) (0x50051000 + 1844)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_53_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_54: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_54 (* ((volatile uint32_t *) (0x50051000 + 1848)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_54_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_55: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_55 (* ((volatile uint32_t *) (0x50051000 + 1852)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_55_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_56: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_56 (* ((volatile uint32_t *) (0x50051000 + 1856)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_56_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_57: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_57 (* ((volatile uint32_t *) (0x50051000 + 1860)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_57_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_58: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_58 (* ((volatile uint32_t *) (0x50051000 + 1864)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_58_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_59: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_59 (* ((volatile uint32_t *) (0x50051000 + 1868)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_59_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_60: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_60 (* ((volatile uint32_t *) (0x50051000 + 1872)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_60_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_61: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_61 (* ((volatile uint32_t *) (0x50051000 + 1876)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_61_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_62: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_62 (* ((volatile uint32_t *) (0x50051000 + 1880)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_62_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_63: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_63 (* ((volatile uint32_t *) (0x50051000 + 1884)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_63_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_64: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_64 (* ((volatile uint32_t *) (0x50051000 + 1888)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_64_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_65: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_65 (* ((volatile uint32_t *) (0x50051000 + 1892)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_65_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_66: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_66 (* ((volatile uint32_t *) (0x50051000 + 1896)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_66_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_67: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_67 (* ((volatile uint32_t *) (0x50051000 + 1900)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_67_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_68: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_68 (* ((volatile uint32_t *) (0x50051000 + 1904)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_68_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_69: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_69 (* ((volatile uint32_t *) (0x50051000 + 1908)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_69_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_70: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_70 (* ((volatile uint32_t *) (0x50051000 + 1912)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_70_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_71: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_71 (* ((volatile uint32_t *) (0x50051000 + 1916)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_71_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_72: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_72 (* ((volatile uint32_t *) (0x50051000 + 1920)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_72_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_73: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_73 (* ((volatile uint32_t *) (0x50051000 + 1924)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_73_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_74: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_74 (* ((volatile uint32_t *) (0x50051000 + 1928)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_74_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_75: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_75 (* ((volatile uint32_t *) (0x50051000 + 1932)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_75_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_76: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_76 (* ((volatile uint32_t *) (0x50051000 + 1936)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_76_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_77: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_77 (* ((volatile uint32_t *) (0x50051000 + 1940)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_77_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_78: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_78 (* ((volatile uint32_t *) (0x50051000 + 1944)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_78_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_79: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_79 (* ((volatile uint32_t *) (0x50051000 + 1948)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_79_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_80: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_80 (* ((volatile uint32_t *) (0x50051000 + 1952)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_80_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_81: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_81 (* ((volatile uint32_t *) (0x50051000 + 1956)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_81_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_82: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_82 (* ((volatile uint32_t *) (0x50051000 + 1960)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_82_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_83: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_83 (* ((volatile uint32_t *) (0x50051000 + 1964)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_83_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_84: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_84 (* ((volatile uint32_t *) (0x50051000 + 1968)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_84_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_85: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_85 (* ((volatile uint32_t *) (0x50051000 + 1972)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_85_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_86: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_86 (* ((volatile uint32_t *) (0x50051000 + 1976)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_86_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_AC1_87: JPEG encoder, AC Huffman table 1
  #define JPEG_HUFFENC_AC1_87 (* ((volatile uint32_t *) (0x50051000 + 1980)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_AC1_87_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC0_0: JPEG encoder, DC Huffman table 0
  #define JPEG_HUFFENC_DC0_0 (* ((volatile uint32_t *) (0x50051000 + 1984)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC0_0_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC0_1: JPEG encoder, DC Huffman table 0
  #define JPEG_HUFFENC_DC0_1 (* ((volatile uint32_t *) (0x50051000 + 1988)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC0_1_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC0_2: JPEG encoder, DC Huffman table 0
  #define JPEG_HUFFENC_DC0_2 (* ((volatile uint32_t *) (0x50051000 + 1992)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC0_2_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC0_3: JPEG encoder, DC Huffman table 0
  #define JPEG_HUFFENC_DC0_3 (* ((volatile uint32_t *) (0x50051000 + 1996)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC0_3_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC0_4: JPEG encoder, DC Huffman table 0
  #define JPEG_HUFFENC_DC0_4 (* ((volatile uint32_t *) (0x50051000 + 2000)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC0_4_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC0_5: JPEG encoder, DC Huffman table 0
  #define JPEG_HUFFENC_DC0_5 (* ((volatile uint32_t *) (0x50051000 + 2004)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC0_5_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC0_6: JPEG encoder, DC Huffman table 0
  #define JPEG_HUFFENC_DC0_6 (* ((volatile uint32_t *) (0x50051000 + 2008)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC0_6_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC0_7: JPEG encoder, DC Huffman table 0
  #define JPEG_HUFFENC_DC0_7 (* ((volatile uint32_t *) (0x50051000 + 2012)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC0_7_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC1_0: JPEG encoder, DC Huffman table 1
  #define JPEG_HUFFENC_DC1_0 (* ((volatile uint32_t *) (0x50051000 + 2016)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC1_0_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC1_1: JPEG encoder, DC Huffman table 1
  #define JPEG_HUFFENC_DC1_1 (* ((volatile uint32_t *) (0x50051000 + 2020)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC1_1_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC1_2: JPEG encoder, DC Huffman table 1
  #define JPEG_HUFFENC_DC1_2 (* ((volatile uint32_t *) (0x50051000 + 2024)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC1_2_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC1_3: JPEG encoder, DC Huffman table 1
  #define JPEG_HUFFENC_DC1_3 (* ((volatile uint32_t *) (0x50051000 + 2028)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC1_3_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC1_4: JPEG encoder, DC Huffman table 1
  #define JPEG_HUFFENC_DC1_4 (* ((volatile uint32_t *) (0x50051000 + 2032)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC1_4_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC1_5: JPEG encoder, DC Huffman table 1
  #define JPEG_HUFFENC_DC1_5 (* ((volatile uint32_t *) (0x50051000 + 2036)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC1_5_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC1_6: JPEG encoder, DC Huffman table 1
  #define JPEG_HUFFENC_DC1_6 (* ((volatile uint32_t *) (0x50051000 + 2040)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC1_6_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register HUFFENC_DC1_7: JPEG encoder, DC Huffman table 1
  #define JPEG_HUFFENC_DC1_7 (* ((volatile uint32_t *) (0x50051000 + 2044)))

  // Field DHTMem_RAM: DHTMem RAM
    inline uint32_t JPEG_HUFFENC_DC1_7_DHTMem_RAM (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral LPTIM1: Low power timer
//------------------------------------------------------------------------------

//---  Register ISR: Interrupt and Status Register
  #define LPTIM1_ISR (* ((const volatile uint32_t *) (0x40002400 + 0)))

  // Field DOWN: Counter direction change up to down
    const uint32_t LPTIM1_ISR_DOWN = 1U << 6 ;

  // Field UP: Counter direction change down to up
    const uint32_t LPTIM1_ISR_UP = 1U << 5 ;

  // Field ARROK: Autoreload register update OK
    const uint32_t LPTIM1_ISR_ARROK = 1U << 4 ;

  // Field CMPOK: Compare register update OK
    const uint32_t LPTIM1_ISR_CMPOK = 1U << 3 ;

  // Field EXTTRIG: External trigger edge event
    const uint32_t LPTIM1_ISR_EXTTRIG = 1U << 2 ;

  // Field ARRM: Autoreload match
    const uint32_t LPTIM1_ISR_ARRM = 1U << 1 ;

  // Field CMPM: Compare match
    const uint32_t LPTIM1_ISR_CMPM = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt Clear Register
  #define LPTIM1_ICR (* ((volatile uint32_t *) (0x40002400 + 4)))

  // Field DOWNCF: Direction change to down Clear Flag
    const uint32_t LPTIM1_ICR_DOWNCF = 1U << 6 ;

  // Field UPCF: Direction change to UP Clear Flag
    const uint32_t LPTIM1_ICR_UPCF = 1U << 5 ;

  // Field ARROKCF: Autoreload register update OK Clear Flag
    const uint32_t LPTIM1_ICR_ARROKCF = 1U << 4 ;

  // Field CMPOKCF: Compare register update OK Clear Flag
    const uint32_t LPTIM1_ICR_CMPOKCF = 1U << 3 ;

  // Field EXTTRIGCF: External trigger valid edge Clear Flag
    const uint32_t LPTIM1_ICR_EXTTRIGCF = 1U << 2 ;

  // Field ARRMCF: Autoreload match Clear Flag
    const uint32_t LPTIM1_ICR_ARRMCF = 1U << 1 ;

  // Field CMPMCF: compare match Clear Flag
    const uint32_t LPTIM1_ICR_CMPMCF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register IER: Interrupt Enable Register
  #define LPTIM1_IER (* ((volatile uint32_t *) (0x40002400 + 8)))

  // Field DOWNIE: Direction change to down Interrupt Enable
    const uint32_t LPTIM1_IER_DOWNIE = 1U << 6 ;

  // Field UPIE: Direction change to UP Interrupt Enable
    const uint32_t LPTIM1_IER_UPIE = 1U << 5 ;

  // Field ARROKIE: Autoreload register update OK Interrupt Enable
    const uint32_t LPTIM1_IER_ARROKIE = 1U << 4 ;

  // Field CMPOKIE: Compare register update OK Interrupt Enable
    const uint32_t LPTIM1_IER_CMPOKIE = 1U << 3 ;

  // Field EXTTRIGIE: External trigger valid edge Interrupt Enable
    const uint32_t LPTIM1_IER_EXTTRIGIE = 1U << 2 ;

  // Field ARRMIE: Autoreload match Interrupt Enable
    const uint32_t LPTIM1_IER_ARRMIE = 1U << 1 ;

  // Field CMPMIE: Compare match Interrupt Enable
    const uint32_t LPTIM1_IER_CMPMIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CFGR: Configuration Register
  #define LPTIM1_CFGR (* ((volatile uint32_t *) (0x40002400 + 12)))

  // Field ENC: Encoder mode enable
    const uint32_t LPTIM1_CFGR_ENC = 1U << 24 ;

  // Field COUNTMODE: counter mode enabled
    const uint32_t LPTIM1_CFGR_COUNTMODE = 1U << 23 ;

  // Field PRELOAD: Registers update mode
    const uint32_t LPTIM1_CFGR_PRELOAD = 1U << 22 ;

  // Field WAVPOL: Waveform shape polarity
    const uint32_t LPTIM1_CFGR_WAVPOL = 1U << 21 ;

  // Field WAVE: Waveform shape
    const uint32_t LPTIM1_CFGR_WAVE = 1U << 20 ;

  // Field TIMOUT: Timeout enable
    const uint32_t LPTIM1_CFGR_TIMOUT = 1U << 19 ;

  // Field TRIGEN: Trigger enable and polarity
    inline uint32_t LPTIM1_CFGR_TRIGEN (const uint32_t inValue) {return (inValue & 0x3U) << 17 ; }

  // Field TRIGSEL: Trigger selector
    inline uint32_t LPTIM1_CFGR_TRIGSEL (const uint32_t inValue) {return (inValue & 0x7U) << 13 ; }

  // Field PRESC: Clock prescaler
    inline uint32_t LPTIM1_CFGR_PRESC (const uint32_t inValue) {return (inValue & 0x7U) << 9 ; }

  // Field TRGFLT: Configurable digital filter for trigger
    inline uint32_t LPTIM1_CFGR_TRGFLT (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field CKFLT: Configurable digital filter for external clock
    inline uint32_t LPTIM1_CFGR_CKFLT (const uint32_t inValue) {return (inValue & 0x3U) << 3 ; }

  // Field CKPOL: Clock Polarity
    inline uint32_t LPTIM1_CFGR_CKPOL (const uint32_t inValue) {return (inValue & 0x3U) << 1 ; }

  // Field CKSEL: Clock selector
    const uint32_t LPTIM1_CFGR_CKSEL = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR: Control Register
  #define LPTIM1_CR (* ((volatile uint32_t *) (0x40002400 + 16)))

  // Field CNTSTRT: Timer start in continuous mode
    const uint32_t LPTIM1_CR_CNTSTRT = 1U << 2 ;

  // Field SNGSTRT: LPTIM start in single mode
    const uint32_t LPTIM1_CR_SNGSTRT = 1U << 1 ;

  // Field ENABLE: LPTIM Enable
    const uint32_t LPTIM1_CR_ENABLE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CMP: Compare Register
  #define LPTIM1_CMP (* ((volatile uint32_t *) (0x40002400 + 20)))

  // Field CMP: Compare value
    inline uint32_t LPTIM1_CMP_CMP (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: Autoreload Register
  #define LPTIM1_ARR (* ((volatile uint32_t *) (0x40002400 + 24)))

  // Field ARR: Auto reload value
    inline uint32_t LPTIM1_ARR_ARR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CNT: Counter Register
  #define LPTIM1_CNT (* ((const volatile uint32_t *) (0x40002400 + 28)))

  // Field CNT: Counter value
    inline uint32_t LPTIM1_CNT_CNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral LTCD: LCD-TFT Controller
//------------------------------------------------------------------------------

//---  Register SSCR: Synchronization Size Configuration Register
  #define LTCD_SSCR (* ((volatile uint32_t *) (0x40016800 + 8)))

  // Field HSW: Horizontal Synchronization Width (in units of pixel clock period)
    inline uint32_t LTCD_SSCR_HSW (const uint32_t inValue) {return (inValue & 0x3FFU) << 16 ; }

  // Field VSH: Vertical Synchronization Height (in units of horizontal scan line)
    inline uint32_t LTCD_SSCR_VSH (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BPCR: Back Porch Configuration Register
  #define LTCD_BPCR (* ((volatile uint32_t *) (0x40016800 + 12)))

  // Field AHBP: Accumulated Horizontal back porch (in units of pixel clock period)
    inline uint32_t LTCD_BPCR_AHBP (const uint32_t inValue) {return (inValue & 0x3FFU) << 16 ; }

  // Field AVBP: Accumulated Vertical back porch (in units of horizontal scan line)
    inline uint32_t LTCD_BPCR_AVBP (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AWCR: Active Width Configuration Register
  #define LTCD_AWCR (* ((volatile uint32_t *) (0x40016800 + 16)))

  // Field AAV: AAV
    inline uint32_t LTCD_AWCR_AAV (const uint32_t inValue) {return (inValue & 0x3FFU) << 16 ; }

  // Field AAH: Accumulated Active Height (in units of horizontal scan line)
    inline uint32_t LTCD_AWCR_AAH (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TWCR: Total Width Configuration Register
  #define LTCD_TWCR (* ((volatile uint32_t *) (0x40016800 + 20)))

  // Field TOTALW: Total Width (in units of pixel clock period)
    inline uint32_t LTCD_TWCR_TOTALW (const uint32_t inValue) {return (inValue & 0x3FFU) << 16 ; }

  // Field TOTALH: Total Height (in units of horizontal scan line)
    inline uint32_t LTCD_TWCR_TOTALH (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register GCR: Global Control Register
  #define LTCD_GCR (* ((volatile uint32_t *) (0x40016800 + 24)))

  // Field HSPOL: Horizontal Synchronization Polarity
    const uint32_t LTCD_GCR_HSPOL = 1U << 31 ;

  // Field VSPOL: Vertical Synchronization Polarity
    const uint32_t LTCD_GCR_VSPOL = 1U << 30 ;

  // Field DEPOL: Data Enable Polarity
    const uint32_t LTCD_GCR_DEPOL = 1U << 29 ;

  // Field PCPOL: Pixel Clock Polarity
    const uint32_t LTCD_GCR_PCPOL = 1U << 28 ;

  // Field DEN: Dither Enable
    const uint32_t LTCD_GCR_DEN = 1U << 16 ;

  // Field DRW: Dither Red Width
    inline uint32_t LTCD_GCR_DRW (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field DGW: Dither Green Width
    inline uint32_t LTCD_GCR_DGW (const uint32_t inValue) {return (inValue & 0x7U) << 8 ; }

  // Field DBW: Dither Blue Width
    inline uint32_t LTCD_GCR_DBW (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field LTDCEN: LCD-TFT controller enable bit
    const uint32_t LTCD_GCR_LTDCEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SRCR: Shadow Reload Configuration Register
  #define LTCD_SRCR (* ((volatile uint32_t *) (0x40016800 + 36)))

  // Field VBR: Vertical Blanking Reload
    const uint32_t LTCD_SRCR_VBR = 1U << 1 ;

  // Field IMR: Immediate Reload
    const uint32_t LTCD_SRCR_IMR = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BCCR: Background Color Configuration Register
  #define LTCD_BCCR (* ((volatile uint32_t *) (0x40016800 + 44)))

  // Field BC: Background Color Red value
    inline uint32_t LTCD_BCCR_BC (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IER: Interrupt Enable Register
  #define LTCD_IER (* ((volatile uint32_t *) (0x40016800 + 52)))

  // Field RRIE: Register Reload interrupt enable
    const uint32_t LTCD_IER_RRIE = 1U << 3 ;

  // Field TERRIE: Transfer Error Interrupt Enable
    const uint32_t LTCD_IER_TERRIE = 1U << 2 ;

  // Field FUIE: FIFO Underrun Interrupt Enable
    const uint32_t LTCD_IER_FUIE = 1U << 1 ;

  // Field LIE: Line Interrupt Enable
    const uint32_t LTCD_IER_LIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt Status Register
  #define LTCD_ISR (* ((const volatile uint32_t *) (0x40016800 + 56)))

  // Field RRIF: Register Reload Interrupt Flag
    const uint32_t LTCD_ISR_RRIF = 1U << 3 ;

  // Field TERRIF: Transfer Error interrupt flag
    const uint32_t LTCD_ISR_TERRIF = 1U << 2 ;

  // Field FUIF: FIFO Underrun Interrupt flag
    const uint32_t LTCD_ISR_FUIF = 1U << 1 ;

  // Field LIF: Line Interrupt flag
    const uint32_t LTCD_ISR_LIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt Clear Register
  #define LTCD_ICR (* ((volatile uint32_t *) (0x40016800 + 60)))

  // Field CRRIF: Clears Register Reload Interrupt Flag
    const uint32_t LTCD_ICR_CRRIF = 1U << 3 ;

  // Field CTERRIF: Clears the Transfer Error Interrupt Flag
    const uint32_t LTCD_ICR_CTERRIF = 1U << 2 ;

  // Field CFUIF: Clears the FIFO Underrun Interrupt flag
    const uint32_t LTCD_ICR_CFUIF = 1U << 1 ;

  // Field CLIF: Clears the Line Interrupt Flag
    const uint32_t LTCD_ICR_CLIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register LIPCR: Line Interrupt Position Configuration Register
  #define LTCD_LIPCR (* ((volatile uint32_t *) (0x40016800 + 64)))

  // Field LIPOS: Line Interrupt Position
    inline uint32_t LTCD_LIPCR_LIPOS (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CPSR: Current Position Status Register
  #define LTCD_CPSR (* ((const volatile uint32_t *) (0x40016800 + 68)))

  // Field CXPOS: Current X Position
    inline uint32_t LTCD_CPSR_CXPOS (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CYPOS: Current Y Position
    inline uint32_t LTCD_CPSR_CYPOS (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CDSR: Current Display Status Register
  #define LTCD_CDSR (* ((const volatile uint32_t *) (0x40016800 + 72)))

  // Field HSYNCS: Horizontal Synchronization display Status
    const uint32_t LTCD_CDSR_HSYNCS = 1U << 3 ;

  // Field VSYNCS: Vertical Synchronization display Status
    const uint32_t LTCD_CDSR_VSYNCS = 1U << 2 ;

  // Field HDES: Horizontal Data Enable display Status
    const uint32_t LTCD_CDSR_HDES = 1U << 1 ;

  // Field VDES: Vertical Data Enable display Status
    const uint32_t LTCD_CDSR_VDES = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register L1CR: Layerx Control Register
  #define LTCD_L1CR (* ((volatile uint32_t *) (0x40016800 + 132)))

  // Field CLUTEN: Color Look-Up Table Enable
    const uint32_t LTCD_L1CR_CLUTEN = 1U << 4 ;

  // Field COLKEN: Color Keying Enable
    const uint32_t LTCD_L1CR_COLKEN = 1U << 1 ;

  // Field LEN: Layer Enable
    const uint32_t LTCD_L1CR_LEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register L1WHPCR: Layerx Window Horizontal Position Configuration Register
  #define LTCD_L1WHPCR (* ((volatile uint32_t *) (0x40016800 + 136)))

  // Field WHSPPOS: Window Horizontal Stop Position
    inline uint32_t LTCD_L1WHPCR_WHSPPOS (const uint32_t inValue) {return (inValue & 0xFFFU) << 16 ; }

  // Field WHSTPOS: Window Horizontal Start Position
    inline uint32_t LTCD_L1WHPCR_WHSTPOS (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L1WVPCR: Layerx Window Vertical Position Configuration Register
  #define LTCD_L1WVPCR (* ((volatile uint32_t *) (0x40016800 + 140)))

  // Field WVSPPOS: Window Vertical Stop Position
    inline uint32_t LTCD_L1WVPCR_WVSPPOS (const uint32_t inValue) {return (inValue & 0x7FFU) << 16 ; }

  // Field WVSTPOS: Window Vertical Start Position
    inline uint32_t LTCD_L1WVPCR_WVSTPOS (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L1CKCR: Layerx Color Keying Configuration Register
  #define LTCD_L1CKCR (* ((volatile uint32_t *) (0x40016800 + 144)))

  // Field CKRED: Color Key Red value
    inline uint32_t LTCD_L1CKCR_CKRED (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field CKGREEN: Color Key Green value
    inline uint32_t LTCD_L1CKCR_CKGREEN (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field CKBLUE: Color Key Blue value
    inline uint32_t LTCD_L1CKCR_CKBLUE (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L1PFCR: Layerx Pixel Format Configuration Register
  #define LTCD_L1PFCR (* ((volatile uint32_t *) (0x40016800 + 148)))

  // Field PF: Pixel Format
    inline uint32_t LTCD_L1PFCR_PF (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L1CACR: Layerx Constant Alpha Configuration Register
  #define LTCD_L1CACR (* ((volatile uint32_t *) (0x40016800 + 152)))

  // Field CONSTA: Constant Alpha
    inline uint32_t LTCD_L1CACR_CONSTA (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L1DCCR: Layerx Default Color Configuration Register
  #define LTCD_L1DCCR (* ((volatile uint32_t *) (0x40016800 + 156)))

  // Field DCALPHA: Default Color Alpha
    inline uint32_t LTCD_L1DCCR_DCALPHA (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DCRED: Default Color Red
    inline uint32_t LTCD_L1DCCR_DCRED (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DCGREEN: Default Color Green
    inline uint32_t LTCD_L1DCCR_DCGREEN (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DCBLUE: Default Color Blue
    inline uint32_t LTCD_L1DCCR_DCBLUE (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L1BFCR: Layerx Blending Factors Configuration Register
  #define LTCD_L1BFCR (* ((volatile uint32_t *) (0x40016800 + 160)))

  // Field BF1: Blending Factor 1
    inline uint32_t LTCD_L1BFCR_BF1 (const uint32_t inValue) {return (inValue & 0x7U) << 8 ; }

  // Field BF2: Blending Factor 2
    inline uint32_t LTCD_L1BFCR_BF2 (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L1CFBAR: Layerx Color Frame Buffer Address Register
  #define LTCD_L1CFBAR (* ((volatile uint32_t *) (0x40016800 + 172)))

  // Field CFBADD: Color Frame Buffer Start Address
    inline uint32_t LTCD_L1CFBAR_CFBADD (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L1CFBLR: Layerx Color Frame Buffer Length Register
  #define LTCD_L1CFBLR (* ((volatile uint32_t *) (0x40016800 + 176)))

  // Field CFBP: Color Frame Buffer Pitch in bytes
    inline uint32_t LTCD_L1CFBLR_CFBP (const uint32_t inValue) {return (inValue & 0x1FFFU) << 16 ; }

  // Field CFBLL: Color Frame Buffer Line Length
    inline uint32_t LTCD_L1CFBLR_CFBLL (const uint32_t inValue) {return (inValue & 0x1FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L1CFBLNR: Layerx ColorFrame Buffer Line Number Register
  #define LTCD_L1CFBLNR (* ((volatile uint32_t *) (0x40016800 + 180)))

  // Field CFBLNBR: Frame Buffer Line Number
    inline uint32_t LTCD_L1CFBLNR_CFBLNBR (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L1CLUTWR: Layerx CLUT Write Register
  #define LTCD_L1CLUTWR (* ((volatile uint32_t *) (0x40016800 + 196)))

  // Field CLUTADD: CLUT Address
    inline uint32_t LTCD_L1CLUTWR_CLUTADD (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field RED: Red value
    inline uint32_t LTCD_L1CLUTWR_RED (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field GREEN: Green value
    inline uint32_t LTCD_L1CLUTWR_GREEN (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field BLUE: Blue value
    inline uint32_t LTCD_L1CLUTWR_BLUE (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L2CR: Layerx Control Register
  #define LTCD_L2CR (* ((volatile uint32_t *) (0x40016800 + 260)))

  // Field CLUTEN: Color Look-Up Table Enable
    const uint32_t LTCD_L2CR_CLUTEN = 1U << 4 ;

  // Field COLKEN: Color Keying Enable
    const uint32_t LTCD_L2CR_COLKEN = 1U << 1 ;

  // Field LEN: Layer Enable
    const uint32_t LTCD_L2CR_LEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register L2WHPCR: Layerx Window Horizontal Position Configuration Register
  #define LTCD_L2WHPCR (* ((volatile uint32_t *) (0x40016800 + 264)))

  // Field WHSPPOS: Window Horizontal Stop Position
    inline uint32_t LTCD_L2WHPCR_WHSPPOS (const uint32_t inValue) {return (inValue & 0xFFFU) << 16 ; }

  // Field WHSTPOS: Window Horizontal Start Position
    inline uint32_t LTCD_L2WHPCR_WHSTPOS (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L2WVPCR: Layerx Window Vertical Position Configuration Register
  #define LTCD_L2WVPCR (* ((volatile uint32_t *) (0x40016800 + 268)))

  // Field WVSPPOS: Window Vertical Stop Position
    inline uint32_t LTCD_L2WVPCR_WVSPPOS (const uint32_t inValue) {return (inValue & 0x7FFU) << 16 ; }

  // Field WVSTPOS: Window Vertical Start Position
    inline uint32_t LTCD_L2WVPCR_WVSTPOS (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L2CKCR: Layerx Color Keying Configuration Register
  #define LTCD_L2CKCR (* ((volatile uint32_t *) (0x40016800 + 272)))

  // Field CKRED: Color Key Red value
    inline uint32_t LTCD_L2CKCR_CKRED (const uint32_t inValue) {return (inValue & 0x1FFU) << 15 ; }

  // Field CKGREEN: Color Key Green value
    inline uint32_t LTCD_L2CKCR_CKGREEN (const uint32_t inValue) {return (inValue & 0x7FU) << 8 ; }

  // Field CKBLUE: Color Key Blue value
    inline uint32_t LTCD_L2CKCR_CKBLUE (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L2PFCR: Layerx Pixel Format Configuration Register
  #define LTCD_L2PFCR (* ((volatile uint32_t *) (0x40016800 + 276)))

  // Field PF: Pixel Format
    inline uint32_t LTCD_L2PFCR_PF (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L2CACR: Layerx Constant Alpha Configuration Register
  #define LTCD_L2CACR (* ((volatile uint32_t *) (0x40016800 + 280)))

  // Field CONSTA: Constant Alpha
    inline uint32_t LTCD_L2CACR_CONSTA (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L2DCCR: Layerx Default Color Configuration Register
  #define LTCD_L2DCCR (* ((volatile uint32_t *) (0x40016800 + 284)))

  // Field DCALPHA: Default Color Alpha
    inline uint32_t LTCD_L2DCCR_DCALPHA (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field DCRED: Default Color Red
    inline uint32_t LTCD_L2DCCR_DCRED (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field DCGREEN: Default Color Green
    inline uint32_t LTCD_L2DCCR_DCGREEN (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field DCBLUE: Default Color Blue
    inline uint32_t LTCD_L2DCCR_DCBLUE (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L2BFCR: Layerx Blending Factors Configuration Register
  #define LTCD_L2BFCR (* ((volatile uint32_t *) (0x40016800 + 288)))

  // Field BF1: Blending Factor 1
    inline uint32_t LTCD_L2BFCR_BF1 (const uint32_t inValue) {return (inValue & 0x7U) << 8 ; }

  // Field BF2: Blending Factor 2
    inline uint32_t LTCD_L2BFCR_BF2 (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L2CFBAR: Layerx Color Frame Buffer Address Register
  #define LTCD_L2CFBAR (* ((volatile uint32_t *) (0x40016800 + 300)))

  // Field CFBADD: Color Frame Buffer Start Address
    inline uint32_t LTCD_L2CFBAR_CFBADD (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L2CFBLR: Layerx Color Frame Buffer Length Register
  #define LTCD_L2CFBLR (* ((volatile uint32_t *) (0x40016800 + 304)))

  // Field CFBP: Color Frame Buffer Pitch in bytes
    inline uint32_t LTCD_L2CFBLR_CFBP (const uint32_t inValue) {return (inValue & 0x1FFFU) << 16 ; }

  // Field CFBLL: Color Frame Buffer Line Length
    inline uint32_t LTCD_L2CFBLR_CFBLL (const uint32_t inValue) {return (inValue & 0x1FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L2CFBLNR: Layerx ColorFrame Buffer Line Number Register
  #define LTCD_L2CFBLNR (* ((volatile uint32_t *) (0x40016800 + 308)))

  // Field CFBLNBR: Frame Buffer Line Number
    inline uint32_t LTCD_L2CFBLNR_CFBLNBR (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register L2CLUTWR: Layerx CLUT Write Register
  #define LTCD_L2CLUTWR (* ((volatile uint32_t *) (0x40016800 + 324)))

  // Field CLUTADD: CLUT Address
    inline uint32_t LTCD_L2CLUTWR_CLUTADD (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field RED: Red value
    inline uint32_t LTCD_L2CLUTWR_RED (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field GREEN: Green value
    inline uint32_t LTCD_L2CLUTWR_GREEN (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field BLUE: Blue value
    inline uint32_t LTCD_L2CLUTWR_BLUE (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral MDIOS: Management data input/output slave
//------------------------------------------------------------------------------

//---  Register MDIOS_CR: MDIOS configuration register
  #define MDIOS_MDIOS_CR (* ((volatile uint32_t *) (0x40017800 + 0)))

  // Field EN: Peripheral enable
    const uint32_t MDIOS_MDIOS_CR_EN = 1U << 0 ;

  // Field WRIE: Register write interrupt enable
    const uint32_t MDIOS_MDIOS_CR_WRIE = 1U << 1 ;

  // Field RDIE: Register Read Interrupt Enable
    const uint32_t MDIOS_MDIOS_CR_RDIE = 1U << 2 ;

  // Field EIE: Error interrupt enable
    const uint32_t MDIOS_MDIOS_CR_EIE = 1U << 3 ;

  // Field DPC: Disable Preamble Check
    const uint32_t MDIOS_MDIOS_CR_DPC = 1U << 7 ;

  // Field PORT_ADDRESS: Slaves's address
    inline uint32_t MDIOS_MDIOS_CR_PORT_ADDRESS (const uint32_t inValue) {return (inValue & 0x1FU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_WRFR: MDIOS write flag register
  #define MDIOS_MDIOS_WRFR (* ((const volatile uint32_t *) (0x40017800 + 4)))

  // Field WRF: Write flags for MDIO registers 0 to 31
    inline uint32_t MDIOS_MDIOS_WRFR_WRF (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_CWRFR: MDIOS clear write flag register
  #define MDIOS_MDIOS_CWRFR (* ((volatile uint32_t *) (0x40017800 + 8)))

  // Field CWRF: Clear the write flag
    inline uint32_t MDIOS_MDIOS_CWRFR_CWRF (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_RDFR: MDIOS read flag register
  #define MDIOS_MDIOS_RDFR (* ((const volatile uint32_t *) (0x40017800 + 12)))

  // Field RDF: Read flags for MDIO registers 0 to 31
    inline uint32_t MDIOS_MDIOS_RDFR_RDF (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_CRDFR: MDIOS clear read flag register
  #define MDIOS_MDIOS_CRDFR (* ((volatile uint32_t *) (0x40017800 + 16)))

  // Field CRDF: Clear the read flag
    inline uint32_t MDIOS_MDIOS_CRDFR_CRDF (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_SR: MDIOS status register
  #define MDIOS_MDIOS_SR (* ((const volatile uint32_t *) (0x40017800 + 20)))

  // Field PERF: Preamble error flag
    const uint32_t MDIOS_MDIOS_SR_PERF = 1U << 0 ;

  // Field SERF: Start error flag
    const uint32_t MDIOS_MDIOS_SR_SERF = 1U << 1 ;

  // Field TERF: Turnaround error flag
    const uint32_t MDIOS_MDIOS_SR_TERF = 1U << 2 ;

//------------------------------------------------------------------------------

//---  Register MDIOS_CLRFR: MDIOS clear flag register
  #define MDIOS_MDIOS_CLRFR (* ((volatile uint32_t *) (0x40017800 + 24)))

  // Field CPERF: Clear the preamble error flag
    const uint32_t MDIOS_MDIOS_CLRFR_CPERF = 1U << 0 ;

  // Field CSERF: Clear the start error flag
    const uint32_t MDIOS_MDIOS_CLRFR_CSERF = 1U << 1 ;

  // Field CTERF: Clear the turnaround error flag
    const uint32_t MDIOS_MDIOS_CLRFR_CTERF = 1U << 2 ;

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR0: MDIOS input data register 0
  #define MDIOS_MDIOS_DINR0 (* ((const volatile uint32_t *) (0x40017800 + 28)))

  // Field DIN0: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR0_DIN0 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR1: MDIOS input data register 1
  #define MDIOS_MDIOS_DINR1 (* ((const volatile uint32_t *) (0x40017800 + 32)))

  // Field DIN1: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR1_DIN1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR2: MDIOS input data register 2
  #define MDIOS_MDIOS_DINR2 (* ((const volatile uint32_t *) (0x40017800 + 36)))

  // Field DIN2: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR2_DIN2 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR3: MDIOS input data register 3
  #define MDIOS_MDIOS_DINR3 (* ((const volatile uint32_t *) (0x40017800 + 40)))

  // Field DIN3: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR3_DIN3 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR4: MDIOS input data register 4
  #define MDIOS_MDIOS_DINR4 (* ((const volatile uint32_t *) (0x40017800 + 44)))

  // Field DIN4: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR4_DIN4 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR5: MDIOS input data register 5
  #define MDIOS_MDIOS_DINR5 (* ((const volatile uint32_t *) (0x40017800 + 48)))

  // Field DIN5: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR5_DIN5 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR6: MDIOS input data register 6
  #define MDIOS_MDIOS_DINR6 (* ((const volatile uint32_t *) (0x40017800 + 52)))

  // Field DIN6: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR6_DIN6 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR7: MDIOS input data register 7
  #define MDIOS_MDIOS_DINR7 (* ((const volatile uint32_t *) (0x40017800 + 56)))

  // Field DIN7: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR7_DIN7 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR8: MDIOS input data register 8
  #define MDIOS_MDIOS_DINR8 (* ((const volatile uint32_t *) (0x40017800 + 60)))

  // Field DIN8: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR8_DIN8 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR9: MDIOS input data register 9
  #define MDIOS_MDIOS_DINR9 (* ((const volatile uint32_t *) (0x40017800 + 64)))

  // Field DIN9: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR9_DIN9 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR10: MDIOS input data register 10
  #define MDIOS_MDIOS_DINR10 (* ((const volatile uint32_t *) (0x40017800 + 68)))

  // Field DIN10: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR10_DIN10 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR11: MDIOS input data register 11
  #define MDIOS_MDIOS_DINR11 (* ((const volatile uint32_t *) (0x40017800 + 72)))

  // Field DIN11: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR11_DIN11 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR12: MDIOS input data register 12
  #define MDIOS_MDIOS_DINR12 (* ((const volatile uint32_t *) (0x40017800 + 76)))

  // Field DIN12: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR12_DIN12 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR13: MDIOS input data register 13
  #define MDIOS_MDIOS_DINR13 (* ((const volatile uint32_t *) (0x40017800 + 80)))

  // Field DIN13: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR13_DIN13 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR14: MDIOS input data register 14
  #define MDIOS_MDIOS_DINR14 (* ((const volatile uint32_t *) (0x40017800 + 84)))

  // Field DIN14: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR14_DIN14 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR15: MDIOS input data register 15
  #define MDIOS_MDIOS_DINR15 (* ((const volatile uint32_t *) (0x40017800 + 88)))

  // Field DIN15: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR15_DIN15 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR16: MDIOS input data register 16
  #define MDIOS_MDIOS_DINR16 (* ((const volatile uint32_t *) (0x40017800 + 92)))

  // Field DIN16: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR16_DIN16 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR17: MDIOS input data register 17
  #define MDIOS_MDIOS_DINR17 (* ((const volatile uint32_t *) (0x40017800 + 96)))

  // Field DIN17: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR17_DIN17 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR18: MDIOS input data register 18
  #define MDIOS_MDIOS_DINR18 (* ((const volatile uint32_t *) (0x40017800 + 100)))

  // Field DIN18: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR18_DIN18 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR19: MDIOS input data register 19
  #define MDIOS_MDIOS_DINR19 (* ((const volatile uint32_t *) (0x40017800 + 104)))

  // Field DIN19: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR19_DIN19 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR20: MDIOS input data register 20
  #define MDIOS_MDIOS_DINR20 (* ((const volatile uint32_t *) (0x40017800 + 108)))

  // Field DIN20: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR20_DIN20 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR21: MDIOS input data register 21
  #define MDIOS_MDIOS_DINR21 (* ((const volatile uint32_t *) (0x40017800 + 112)))

  // Field DIN21: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR21_DIN21 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR22: MDIOS input data register 22
  #define MDIOS_MDIOS_DINR22 (* ((const volatile uint32_t *) (0x40017800 + 116)))

  // Field DIN22: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR22_DIN22 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR23: MDIOS input data register 23
  #define MDIOS_MDIOS_DINR23 (* ((const volatile uint32_t *) (0x40017800 + 120)))

  // Field DIN23: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR23_DIN23 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR24: MDIOS input data register 24
  #define MDIOS_MDIOS_DINR24 (* ((const volatile uint32_t *) (0x40017800 + 124)))

  // Field DIN24: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR24_DIN24 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR25: MDIOS input data register 25
  #define MDIOS_MDIOS_DINR25 (* ((const volatile uint32_t *) (0x40017800 + 128)))

  // Field DIN25: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR25_DIN25 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR26: MDIOS input data register 26
  #define MDIOS_MDIOS_DINR26 (* ((const volatile uint32_t *) (0x40017800 + 132)))

  // Field DIN26: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR26_DIN26 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR27: MDIOS input data register 27
  #define MDIOS_MDIOS_DINR27 (* ((const volatile uint32_t *) (0x40017800 + 136)))

  // Field DIN27: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR27_DIN27 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR28: MDIOS input data register 28
  #define MDIOS_MDIOS_DINR28 (* ((const volatile uint32_t *) (0x40017800 + 140)))

  // Field DIN28: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR28_DIN28 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR29: MDIOS input data register 29
  #define MDIOS_MDIOS_DINR29 (* ((const volatile uint32_t *) (0x40017800 + 144)))

  // Field DIN29: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR29_DIN29 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR30: MDIOS input data register 30
  #define MDIOS_MDIOS_DINR30 (* ((const volatile uint32_t *) (0x40017800 + 148)))

  // Field DIN30: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR30_DIN30 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DINR31: MDIOS input data register 31
  #define MDIOS_MDIOS_DINR31 (* ((const volatile uint32_t *) (0x40017800 + 152)))

  // Field DIN31: Input data received from MDIO Master during write frames
    inline uint32_t MDIOS_MDIOS_DINR31_DIN31 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR0: MDIOS output data register 0
  #define MDIOS_MDIOS_DOUTR0 (* ((volatile uint32_t *) (0x40017800 + 156)))

  // Field DOUT0: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR0_DOUT0 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR1: MDIOS output data register 1
  #define MDIOS_MDIOS_DOUTR1 (* ((volatile uint32_t *) (0x40017800 + 160)))

  // Field DOUT1: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR1_DOUT1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR2: MDIOS output data register 2
  #define MDIOS_MDIOS_DOUTR2 (* ((volatile uint32_t *) (0x40017800 + 164)))

  // Field DOUT2: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR2_DOUT2 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR3: MDIOS output data register 3
  #define MDIOS_MDIOS_DOUTR3 (* ((volatile uint32_t *) (0x40017800 + 168)))

  // Field DOUT3: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR3_DOUT3 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR4: MDIOS output data register 4
  #define MDIOS_MDIOS_DOUTR4 (* ((volatile uint32_t *) (0x40017800 + 172)))

  // Field DOUT4: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR4_DOUT4 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR5: MDIOS output data register 5
  #define MDIOS_MDIOS_DOUTR5 (* ((volatile uint32_t *) (0x40017800 + 176)))

  // Field DOUT5: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR5_DOUT5 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR6: MDIOS output data register 6
  #define MDIOS_MDIOS_DOUTR6 (* ((volatile uint32_t *) (0x40017800 + 180)))

  // Field DOUT6: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR6_DOUT6 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR7: MDIOS output data register 7
  #define MDIOS_MDIOS_DOUTR7 (* ((volatile uint32_t *) (0x40017800 + 184)))

  // Field DOUT7: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR7_DOUT7 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR8: MDIOS output data register 8
  #define MDIOS_MDIOS_DOUTR8 (* ((volatile uint32_t *) (0x40017800 + 188)))

  // Field DOUT8: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR8_DOUT8 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR9: MDIOS output data register 9
  #define MDIOS_MDIOS_DOUTR9 (* ((volatile uint32_t *) (0x40017800 + 192)))

  // Field DOUT9: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR9_DOUT9 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR10: MDIOS output data register 10
  #define MDIOS_MDIOS_DOUTR10 (* ((volatile uint32_t *) (0x40017800 + 196)))

  // Field DOUT10: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR10_DOUT10 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR11: MDIOS output data register 11
  #define MDIOS_MDIOS_DOUTR11 (* ((volatile uint32_t *) (0x40017800 + 200)))

  // Field DOUT11: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR11_DOUT11 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR12: MDIOS output data register 12
  #define MDIOS_MDIOS_DOUTR12 (* ((volatile uint32_t *) (0x40017800 + 204)))

  // Field DOUT12: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR12_DOUT12 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR13: MDIOS output data register 13
  #define MDIOS_MDIOS_DOUTR13 (* ((volatile uint32_t *) (0x40017800 + 208)))

  // Field DOUT13: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR13_DOUT13 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR14: MDIOS output data register 14
  #define MDIOS_MDIOS_DOUTR14 (* ((volatile uint32_t *) (0x40017800 + 212)))

  // Field DOUT14: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR14_DOUT14 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR15: MDIOS output data register 15
  #define MDIOS_MDIOS_DOUTR15 (* ((volatile uint32_t *) (0x40017800 + 216)))

  // Field DOUT15: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR15_DOUT15 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR16: MDIOS output data register 16
  #define MDIOS_MDIOS_DOUTR16 (* ((volatile uint32_t *) (0x40017800 + 220)))

  // Field DOUT16: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR16_DOUT16 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR17: MDIOS output data register 17
  #define MDIOS_MDIOS_DOUTR17 (* ((volatile uint32_t *) (0x40017800 + 224)))

  // Field DOUT17: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR17_DOUT17 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR18: MDIOS output data register 18
  #define MDIOS_MDIOS_DOUTR18 (* ((volatile uint32_t *) (0x40017800 + 228)))

  // Field DOUT18: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR18_DOUT18 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR19: MDIOS output data register 19
  #define MDIOS_MDIOS_DOUTR19 (* ((volatile uint32_t *) (0x40017800 + 232)))

  // Field DOUT19: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR19_DOUT19 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR20: MDIOS output data register 20
  #define MDIOS_MDIOS_DOUTR20 (* ((volatile uint32_t *) (0x40017800 + 236)))

  // Field DOUT20: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR20_DOUT20 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR21: MDIOS output data register 21
  #define MDIOS_MDIOS_DOUTR21 (* ((volatile uint32_t *) (0x40017800 + 240)))

  // Field DOUT21: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR21_DOUT21 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR22: MDIOS output data register 22
  #define MDIOS_MDIOS_DOUTR22 (* ((volatile uint32_t *) (0x40017800 + 244)))

  // Field DOUT22: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR22_DOUT22 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR23: MDIOS output data register 23
  #define MDIOS_MDIOS_DOUTR23 (* ((volatile uint32_t *) (0x40017800 + 248)))

  // Field DOUT23: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR23_DOUT23 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR24: MDIOS output data register 24
  #define MDIOS_MDIOS_DOUTR24 (* ((volatile uint32_t *) (0x40017800 + 252)))

  // Field DOUT24: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR24_DOUT24 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR25: MDIOS output data register 25
  #define MDIOS_MDIOS_DOUTR25 (* ((volatile uint32_t *) (0x40017800 + 256)))

  // Field DOUT25: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR25_DOUT25 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR26: MDIOS output data register 26
  #define MDIOS_MDIOS_DOUTR26 (* ((volatile uint32_t *) (0x40017800 + 260)))

  // Field DOUT26: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR26_DOUT26 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR27: MDIOS output data register 27
  #define MDIOS_MDIOS_DOUTR27 (* ((volatile uint32_t *) (0x40017800 + 264)))

  // Field DOUT27: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR27_DOUT27 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR28: MDIOS output data register 28
  #define MDIOS_MDIOS_DOUTR28 (* ((volatile uint32_t *) (0x40017800 + 268)))

  // Field DOUT28: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR28_DOUT28 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR29: MDIOS output data register 29
  #define MDIOS_MDIOS_DOUTR29 (* ((volatile uint32_t *) (0x40017800 + 272)))

  // Field DOUT29: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR29_DOUT29 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR30: MDIOS output data register 30
  #define MDIOS_MDIOS_DOUTR30 (* ((volatile uint32_t *) (0x40017800 + 276)))

  // Field DOUT30: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR30_DOUT30 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MDIOS_DOUTR31: MDIOS output data register 31
  #define MDIOS_MDIOS_DOUTR31 (* ((volatile uint32_t *) (0x40017800 + 280)))

  // Field DOUT31: Output data sent to MDIO Master during read frames
    inline uint32_t MDIOS_MDIOS_DOUTR31_DOUT31 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral MPU: Memory protection unit
//------------------------------------------------------------------------------

//---  Register MPU_TYPER: MPU type register
  #define MPU_MPU_TYPER (* ((const volatile uint32_t *) (0xE000ED90 + 0)))

  // Field SEPARATE: Separate flag
    const uint32_t MPU_MPU_TYPER_SEPARATE = 1U << 0 ;

  // Field DREGION: Number of MPU data regions
    inline uint32_t MPU_MPU_TYPER_DREGION (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IREGION: Number of MPU instruction regions
    inline uint32_t MPU_MPU_TYPER_IREGION (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register MPU_CTRL: MPU control register
  #define MPU_MPU_CTRL (* ((const volatile uint32_t *) (0xE000ED90 + 4)))

  // Field ENABLE: Enables the MPU
    const uint32_t MPU_MPU_CTRL_ENABLE = 1U << 0 ;

  // Field HFNMIENA: Enables the operation of MPU during hard fault
    const uint32_t MPU_MPU_CTRL_HFNMIENA = 1U << 1 ;

  // Field PRIVDEFENA: Enable priviliged software access to default memory map
    const uint32_t MPU_MPU_CTRL_PRIVDEFENA = 1U << 2 ;

//------------------------------------------------------------------------------

//---  Register MPU_RNR: MPU region number register
  #define MPU_MPU_RNR (* ((volatile uint32_t *) (0xE000ED90 + 8)))

  // Field REGION: MPU region
    inline uint32_t MPU_MPU_RNR_REGION (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register MPU_RBAR: MPU region base address register
  #define MPU_MPU_RBAR (* ((volatile uint32_t *) (0xE000ED90 + 12)))

  // Field REGION: MPU region field
    inline uint32_t MPU_MPU_RBAR_REGION (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field VALID: MPU region number valid
    const uint32_t MPU_MPU_RBAR_VALID = 1U << 4 ;

  // Field ADDR: Region base address field
    inline uint32_t MPU_MPU_RBAR_ADDR (const uint32_t inValue) {return (inValue & 0x7FFFFFFU) << 5 ; }

//------------------------------------------------------------------------------

//---  Register MPU_RASR: MPU region attribute and size register
  #define MPU_MPU_RASR (* ((volatile uint32_t *) (0xE000ED90 + 16)))

  // Field ENABLE: Region enable bit.
    const uint32_t MPU_MPU_RASR_ENABLE = 1U << 0 ;

  // Field SIZE: Size of the MPU protection region
    inline uint32_t MPU_MPU_RASR_SIZE (const uint32_t inValue) {return (inValue & 0x1FU) << 1 ; }

  // Field SRD: Subregion disable bits
    inline uint32_t MPU_MPU_RASR_SRD (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field B: memory attribute
    const uint32_t MPU_MPU_RASR_B = 1U << 16 ;

  // Field C: memory attribute
    const uint32_t MPU_MPU_RASR_C = 1U << 17 ;

  // Field S: Shareable memory attribute
    const uint32_t MPU_MPU_RASR_S = 1U << 18 ;

  // Field TEX: memory attribute
    inline uint32_t MPU_MPU_RASR_TEX (const uint32_t inValue) {return (inValue & 0x7U) << 19 ; }

  // Field AP: Access permission
    inline uint32_t MPU_MPU_RASR_AP (const uint32_t inValue) {return (inValue & 0x7U) << 24 ; }

  // Field XN: Instruction access disable bit
    const uint32_t MPU_MPU_RASR_XN = 1U << 28 ;

//------------------------------------------------------------------------------
// Peripheral NVIC: Nested Vectored Interrupt       Controller
//------------------------------------------------------------------------------

//---  Register ISER0: Interrupt Set-Enable Register
  #define NVIC_ISER0 (* ((volatile uint32_t *) (0xE000E100 + 0)))

  // Field SETENA: SETENA
    inline uint32_t NVIC_ISER0_SETENA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ISER1: Interrupt Set-Enable Register
  #define NVIC_ISER1 (* ((volatile uint32_t *) (0xE000E100 + 4)))

  // Field SETENA: SETENA
    inline uint32_t NVIC_ISER1_SETENA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ISER2: Interrupt Set-Enable Register
  #define NVIC_ISER2 (* ((volatile uint32_t *) (0xE000E100 + 8)))

  // Field SETENA: SETENA
    inline uint32_t NVIC_ISER2_SETENA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ICER0: Interrupt Clear-Enable Register
  #define NVIC_ICER0 (* ((volatile uint32_t *) (0xE000E100 + 128)))

  // Field CLRENA: CLRENA
    inline uint32_t NVIC_ICER0_CLRENA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ICER1: Interrupt Clear-Enable Register
  #define NVIC_ICER1 (* ((volatile uint32_t *) (0xE000E100 + 132)))

  // Field CLRENA: CLRENA
    inline uint32_t NVIC_ICER1_CLRENA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ICER2: Interrupt Clear-Enable Register
  #define NVIC_ICER2 (* ((volatile uint32_t *) (0xE000E100 + 136)))

  // Field CLRENA: CLRENA
    inline uint32_t NVIC_ICER2_CLRENA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ISPR0: Interrupt Set-Pending Register
  #define NVIC_ISPR0 (* ((volatile uint32_t *) (0xE000E100 + 256)))

  // Field SETPEND: SETPEND
    inline uint32_t NVIC_ISPR0_SETPEND (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ISPR1: Interrupt Set-Pending Register
  #define NVIC_ISPR1 (* ((volatile uint32_t *) (0xE000E100 + 260)))

  // Field SETPEND: SETPEND
    inline uint32_t NVIC_ISPR1_SETPEND (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ISPR2: Interrupt Set-Pending Register
  #define NVIC_ISPR2 (* ((volatile uint32_t *) (0xE000E100 + 264)))

  // Field SETPEND: SETPEND
    inline uint32_t NVIC_ISPR2_SETPEND (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ICPR0: Interrupt Clear-Pending Register
  #define NVIC_ICPR0 (* ((volatile uint32_t *) (0xE000E100 + 384)))

  // Field CLRPEND: CLRPEND
    inline uint32_t NVIC_ICPR0_CLRPEND (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ICPR1: Interrupt Clear-Pending Register
  #define NVIC_ICPR1 (* ((volatile uint32_t *) (0xE000E100 + 388)))

  // Field CLRPEND: CLRPEND
    inline uint32_t NVIC_ICPR1_CLRPEND (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ICPR2: Interrupt Clear-Pending Register
  #define NVIC_ICPR2 (* ((volatile uint32_t *) (0xE000E100 + 392)))

  // Field CLRPEND: CLRPEND
    inline uint32_t NVIC_ICPR2_CLRPEND (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IABR0: Interrupt Active Bit Register
  #define NVIC_IABR0 (* ((const volatile uint32_t *) (0xE000E100 + 512)))

  // Field ACTIVE: ACTIVE
    inline uint32_t NVIC_IABR0_ACTIVE (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IABR1: Interrupt Active Bit Register
  #define NVIC_IABR1 (* ((const volatile uint32_t *) (0xE000E100 + 516)))

  // Field ACTIVE: ACTIVE
    inline uint32_t NVIC_IABR1_ACTIVE (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IABR2: Interrupt Active Bit Register
  #define NVIC_IABR2 (* ((const volatile uint32_t *) (0xE000E100 + 520)))

  // Field ACTIVE: ACTIVE
    inline uint32_t NVIC_IABR2_ACTIVE (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IPR0: Interrupt Priority Register
  #define NVIC_IPR0 (* ((volatile uint32_t *) (0xE000E100 + 768)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR0_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR0_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR0_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR0_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR1: Interrupt Priority Register
  #define NVIC_IPR1 (* ((volatile uint32_t *) (0xE000E100 + 772)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR1_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR1_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR1_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR1_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR2: Interrupt Priority Register
  #define NVIC_IPR2 (* ((volatile uint32_t *) (0xE000E100 + 776)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR2_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR2_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR2_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR2_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR3: Interrupt Priority Register
  #define NVIC_IPR3 (* ((volatile uint32_t *) (0xE000E100 + 780)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR3_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR3_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR3_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR3_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR4: Interrupt Priority Register
  #define NVIC_IPR4 (* ((volatile uint32_t *) (0xE000E100 + 784)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR4_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR4_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR4_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR4_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR5: Interrupt Priority Register
  #define NVIC_IPR5 (* ((volatile uint32_t *) (0xE000E100 + 788)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR5_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR5_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR5_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR5_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR6: Interrupt Priority Register
  #define NVIC_IPR6 (* ((volatile uint32_t *) (0xE000E100 + 792)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR6_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR6_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR6_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR6_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR7: Interrupt Priority Register
  #define NVIC_IPR7 (* ((volatile uint32_t *) (0xE000E100 + 796)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR7_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR7_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR7_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR7_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR8: Interrupt Priority Register
  #define NVIC_IPR8 (* ((volatile uint32_t *) (0xE000E100 + 800)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR8_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR8_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR8_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR8_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR9: Interrupt Priority Register
  #define NVIC_IPR9 (* ((volatile uint32_t *) (0xE000E100 + 804)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR9_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR9_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR9_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR9_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR10: Interrupt Priority Register
  #define NVIC_IPR10 (* ((volatile uint32_t *) (0xE000E100 + 808)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR10_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR10_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR10_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR10_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR11: Interrupt Priority Register
  #define NVIC_IPR11 (* ((volatile uint32_t *) (0xE000E100 + 812)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR11_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR11_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR11_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR11_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR12: Interrupt Priority Register
  #define NVIC_IPR12 (* ((volatile uint32_t *) (0xE000E100 + 816)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR12_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR12_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR12_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR12_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR13: Interrupt Priority Register
  #define NVIC_IPR13 (* ((volatile uint32_t *) (0xE000E100 + 820)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR13_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR13_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR13_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR13_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR14: Interrupt Priority Register
  #define NVIC_IPR14 (* ((volatile uint32_t *) (0xE000E100 + 824)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR14_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR14_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR14_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR14_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR15: Interrupt Priority Register
  #define NVIC_IPR15 (* ((volatile uint32_t *) (0xE000E100 + 828)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR15_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR15_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR15_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR15_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR16: Interrupt Priority Register
  #define NVIC_IPR16 (* ((volatile uint32_t *) (0xE000E100 + 832)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR16_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR16_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR16_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR16_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR17: Interrupt Priority Register
  #define NVIC_IPR17 (* ((volatile uint32_t *) (0xE000E100 + 836)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR17_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR17_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR17_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR17_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR18: Interrupt Priority Register
  #define NVIC_IPR18 (* ((volatile uint32_t *) (0xE000E100 + 840)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR18_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR18_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR18_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR18_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR19: Interrupt Priority Register
  #define NVIC_IPR19 (* ((volatile uint32_t *) (0xE000E100 + 844)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR19_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR19_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR19_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR19_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR20: Interrupt Priority Register
  #define NVIC_IPR20 (* ((volatile uint32_t *) (0xE000E100 + 848)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR20_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR20_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR20_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR20_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register ISER3: Interrupt Set-Enable Register
  #define NVIC_ISER3 (* ((volatile uint32_t *) (0xE000E100 + 12)))

  // Field SETENA: SETENA
    inline uint32_t NVIC_ISER3_SETENA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ICER3: Interrupt Clear-Enable Register
  #define NVIC_ICER3 (* ((volatile uint32_t *) (0xE000E100 + 140)))

  // Field CLRENA: CLRENA
    inline uint32_t NVIC_ICER3_CLRENA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ISPR3: Interrupt Set-Pending Register
  #define NVIC_ISPR3 (* ((volatile uint32_t *) (0xE000E100 + 268)))

  // Field SETPEND: SETPEND
    inline uint32_t NVIC_ISPR3_SETPEND (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ICPR3: Interrupt Clear-Pending Register
  #define NVIC_ICPR3 (* ((volatile uint32_t *) (0xE000E100 + 396)))

  // Field CLRPEND: CLRPEND
    inline uint32_t NVIC_ICPR3_CLRPEND (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IABR3: Interrupt Active Bit Register
  #define NVIC_IABR3 (* ((const volatile uint32_t *) (0xE000E100 + 524)))

  // Field ACTIVE: ACTIVE
    inline uint32_t NVIC_IABR3_ACTIVE (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register IPR21: Interrupt Priority Register
  #define NVIC_IPR21 (* ((volatile uint32_t *) (0xE000E100 + 852)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR21_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR21_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR21_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR21_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR22: Interrupt Priority Register
  #define NVIC_IPR22 (* ((volatile uint32_t *) (0xE000E100 + 856)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR22_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR22_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR22_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR22_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR23: Interrupt Priority Register
  #define NVIC_IPR23 (* ((volatile uint32_t *) (0xE000E100 + 860)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR23_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR23_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR23_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR23_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR24: Interrupt Priority Register
  #define NVIC_IPR24 (* ((volatile uint32_t *) (0xE000E100 + 864)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR24_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR24_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR24_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR24_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR25: Interrupt Priority Register
  #define NVIC_IPR25 (* ((volatile uint32_t *) (0xE000E100 + 868)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR25_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR25_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR25_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR25_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR26: Interrupt Priority Register
  #define NVIC_IPR26 (* ((volatile uint32_t *) (0xE000E100 + 872)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR26_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR26_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR26_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR26_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR27: Interrupt Priority Register
  #define NVIC_IPR27 (* ((volatile uint32_t *) (0xE000E100 + 876)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR27_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR27_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR27_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR27_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR28: Interrupt Priority Register
  #define NVIC_IPR28 (* ((volatile uint32_t *) (0xE000E100 + 880)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR28_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR28_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR28_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR28_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register IPR29: Interrupt Priority Register
  #define NVIC_IPR29 (* ((volatile uint32_t *) (0xE000E100 + 884)))

  // Field IPR_N0: IPR_N0
    inline uint32_t NVIC_IPR29_IPR_N0 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field IPR_N1: IPR_N1
    inline uint32_t NVIC_IPR29_IPR_N1 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field IPR_N2: IPR_N2
    inline uint32_t NVIC_IPR29_IPR_N2 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field IPR_N3: IPR_N3
    inline uint32_t NVIC_IPR29_IPR_N3 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------
// Peripheral NVIC_STIR: Nested vectored interrupt       controller
//------------------------------------------------------------------------------

//---  Register STIR: Software trigger interrupt register
  #define NVIC_STIR_STIR (* ((volatile uint32_t *) (0xE000EF00 + 0)))

  // Field INTID: Software generated interrupt ID
    inline uint32_t NVIC_STIR_STIR_INTID (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral OTG_FS_DEVICE: USB on the go full speed
//------------------------------------------------------------------------------

//---  Register OTG_FS_DCFG: OTG_FS device configuration register (OTG_FS_DCFG)
  #define OTG_FS_DEVICE_OTG_FS_DCFG (* ((volatile uint32_t *) (0x50000800 + 0)))

  // Field DSPD: Device speed
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DCFG_DSPD (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field NZLSOHSK: Non-zero-length status OUT handshake
    const uint32_t OTG_FS_DEVICE_OTG_FS_DCFG_NZLSOHSK = 1U << 2 ;

  // Field DAD: Device address
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DCFG_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 4 ; }

  // Field PFIVL: Periodic frame interval
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DCFG_PFIVL (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DCTL: OTG_FS device control register (OTG_FS_DCTL)
  #define OTG_FS_DEVICE_OTG_FS_DCTL (* ((volatile uint32_t *) (0x50000800 + 4)))

  // Field RWUSIG: Remote wakeup signaling
    const uint32_t OTG_FS_DEVICE_OTG_FS_DCTL_RWUSIG = 1U << 0 ;

  // Field SDIS: Soft disconnect
    const uint32_t OTG_FS_DEVICE_OTG_FS_DCTL_SDIS = 1U << 1 ;

  // Field GINSTS: Global IN NAK status
    const uint32_t OTG_FS_DEVICE_OTG_FS_DCTL_GINSTS = 1U << 2 ;

  // Field GONSTS: Global OUT NAK status
    const uint32_t OTG_FS_DEVICE_OTG_FS_DCTL_GONSTS = 1U << 3 ;

  // Field TCTL: Test control
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DCTL_TCTL (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SGINAK: Set global IN NAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DCTL_SGINAK = 1U << 7 ;

  // Field CGINAK: Clear global IN NAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DCTL_CGINAK = 1U << 8 ;

  // Field SGONAK: Set global OUT NAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DCTL_SGONAK = 1U << 9 ;

  // Field CGONAK: Clear global OUT NAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DCTL_CGONAK = 1U << 10 ;

  // Field POPRGDNE: Power-on programming done
    const uint32_t OTG_FS_DEVICE_OTG_FS_DCTL_POPRGDNE = 1U << 11 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DSTS: OTG_FS device status register (OTG_FS_DSTS)
  #define OTG_FS_DEVICE_OTG_FS_DSTS (* ((const volatile uint32_t *) (0x50000800 + 8)))

  // Field SUSPSTS: Suspend status
    const uint32_t OTG_FS_DEVICE_OTG_FS_DSTS_SUSPSTS = 1U << 0 ;

  // Field ENUMSPD: Enumerated speed
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DSTS_ENUMSPD (const uint32_t inValue) {return (inValue & 0x3U) << 1 ; }

  // Field EERR: Erratic error
    const uint32_t OTG_FS_DEVICE_OTG_FS_DSTS_EERR = 1U << 3 ;

  // Field FNSOF: Frame number of the received SOF
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DSTS_FNSOF (const uint32_t inValue) {return (inValue & 0x3FFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPMSK: OTG_FS device IN endpoint common interrupt mask register (OTG_FS_DIEPMSK)
  #define OTG_FS_DEVICE_OTG_FS_DIEPMSK (* ((volatile uint32_t *) (0x50000800 + 16)))

  // Field XFRCM: Transfer completed interrupt mask
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPMSK_XFRCM = 1U << 0 ;

  // Field EPDM: Endpoint disabled interrupt mask
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPMSK_EPDM = 1U << 1 ;

  // Field TOM: Timeout condition mask (Non-isochronous endpoints)
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPMSK_TOM = 1U << 3 ;

  // Field ITTXFEMSK: IN token received when TxFIFO empty mask
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPMSK_ITTXFEMSK = 1U << 4 ;

  // Field INEPNMM: IN token received with EP mismatch mask
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPMSK_INEPNMM = 1U << 5 ;

  // Field INEPNEM: IN endpoint NAK effective mask
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPMSK_INEPNEM = 1U << 6 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPMSK: OTG_FS device OUT endpoint common interrupt mask register (OTG_FS_DOEPMSK)
  #define OTG_FS_DEVICE_OTG_FS_DOEPMSK (* ((volatile uint32_t *) (0x50000800 + 20)))

  // Field XFRCM: Transfer completed interrupt mask
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPMSK_XFRCM = 1U << 0 ;

  // Field EPDM: Endpoint disabled interrupt mask
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPMSK_EPDM = 1U << 1 ;

  // Field STUPM: SETUP phase done mask
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPMSK_STUPM = 1U << 3 ;

  // Field OTEPDM: OUT token received when endpoint disabled mask
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPMSK_OTEPDM = 1U << 4 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DAINT: OTG_FS device all endpoints interrupt register (OTG_FS_DAINT)
  #define OTG_FS_DEVICE_OTG_FS_DAINT (* ((const volatile uint32_t *) (0x50000800 + 24)))

  // Field IEPINT: IN endpoint interrupt bits
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DAINT_IEPINT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field OEPINT: OUT endpoint interrupt bits
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DAINT_OEPINT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DAINTMSK: OTG_FS all endpoints interrupt mask register (OTG_FS_DAINTMSK)
  #define OTG_FS_DEVICE_OTG_FS_DAINTMSK (* ((volatile uint32_t *) (0x50000800 + 28)))

  // Field IEPM: IN EP interrupt mask bits
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DAINTMSK_IEPM (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field OEPINT: OUT endpoint interrupt bits
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DAINTMSK_OEPINT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DVBUSDIS: OTG_FS device VBUS discharge time register
  #define OTG_FS_DEVICE_OTG_FS_DVBUSDIS (* ((volatile uint32_t *) (0x50000800 + 40)))

  // Field VBUSDT: Device VBUS discharge time
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DVBUSDIS_VBUSDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DVBUSPULSE: OTG_FS device VBUS pulsing time register
  #define OTG_FS_DEVICE_OTG_FS_DVBUSPULSE (* ((volatile uint32_t *) (0x50000800 + 44)))

  // Field DVBUSP: Device VBUS pulsing time
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DVBUSPULSE_DVBUSP (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPEMPMSK: OTG_FS device IN endpoint FIFO empty interrupt mask register
  #define OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK (* ((volatile uint32_t *) (0x50000800 + 52)))

  // Field INEPTXFEM: IN EP Tx FIFO empty interrupt mask bits
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPEMPMSK_INEPTXFEM (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPCTL0: OTG_FS device control IN endpoint 0 control register (OTG_FS_DIEPCTL0)
  #define OTG_FS_DEVICE_OTG_FS_DIEPCTL0 (* ((volatile uint32_t *) (0x50000800 + 256)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL0_MPSIZ (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL0_USBAEP = 1U << 15 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL0_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field STALL: STALL handshake
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL0_STALL = 1U << 21 ;

  // Field TXFNUM: TxFIFO number
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL0_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field CNAK: Clear NAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL0_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL0_SNAK = 1U << 27 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL0_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPCTL1: OTG device endpoint-1 control register
  #define OTG_FS_DEVICE_OTG_FS_DIEPCTL1 (* ((volatile uint32_t *) (0x50000800 + 288)))

  // Field EPENA: EPENA
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPENA = 1U << 31 ;

  // Field EPDIS: EPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPDIS = 1U << 30 ;

  // Field SODDFRM_SD1PID: SODDFRM/SD1PID
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SODDFRM_SD1PID = 1U << 29 ;

  // Field SD0PID_SEVNFRM: SD0PID/SEVNFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SNAK: SNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL1_SNAK = 1U << 27 ;

  // Field CNAK: CNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL1_CNAK = 1U << 26 ;

  // Field TXFNUM: TXFNUM
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL1_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field Stall: Stall
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL1_Stall = 1U << 21 ;

  // Field EPTYP: EPTYP
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field NAKSTS: NAKSTS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL1_NAKSTS = 1U << 17 ;

  // Field EONUM_DPID: EONUM/DPID
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL1_EONUM_DPID = 1U << 16 ;

  // Field USBAEP: USBAEP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL1_USBAEP = 1U << 15 ;

  // Field MPSIZ: MPSIZ
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL1_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPCTL2: OTG device endpoint-2 control register
  #define OTG_FS_DEVICE_OTG_FS_DIEPCTL2 (* ((volatile uint32_t *) (0x50000800 + 320)))

  // Field EPENA: EPENA
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPENA = 1U << 31 ;

  // Field EPDIS: EPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPDIS = 1U << 30 ;

  // Field SODDFRM: SODDFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SODDFRM = 1U << 29 ;

  // Field SD0PID_SEVNFRM: SD0PID/SEVNFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SNAK: SNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL2_SNAK = 1U << 27 ;

  // Field CNAK: CNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL2_CNAK = 1U << 26 ;

  // Field TXFNUM: TXFNUM
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL2_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field Stall: Stall
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL2_Stall = 1U << 21 ;

  // Field EPTYP: EPTYP
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field NAKSTS: NAKSTS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL2_NAKSTS = 1U << 17 ;

  // Field EONUM_DPID: EONUM/DPID
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL2_EONUM_DPID = 1U << 16 ;

  // Field USBAEP: USBAEP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL2_USBAEP = 1U << 15 ;

  // Field MPSIZ: MPSIZ
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL2_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPCTL3: OTG device endpoint-3 control register
  #define OTG_FS_DEVICE_OTG_FS_DIEPCTL3 (* ((volatile uint32_t *) (0x50000800 + 352)))

  // Field EPENA: EPENA
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPENA = 1U << 31 ;

  // Field EPDIS: EPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPDIS = 1U << 30 ;

  // Field SODDFRM: SODDFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SODDFRM = 1U << 29 ;

  // Field SD0PID_SEVNFRM: SD0PID/SEVNFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SNAK: SNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL3_SNAK = 1U << 27 ;

  // Field CNAK: CNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL3_CNAK = 1U << 26 ;

  // Field TXFNUM: TXFNUM
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL3_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field Stall: Stall
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL3_Stall = 1U << 21 ;

  // Field EPTYP: EPTYP
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field NAKSTS: NAKSTS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL3_NAKSTS = 1U << 17 ;

  // Field EONUM_DPID: EONUM/DPID
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL3_EONUM_DPID = 1U << 16 ;

  // Field USBAEP: USBAEP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL3_USBAEP = 1U << 15 ;

  // Field MPSIZ: MPSIZ
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL3_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPCTL0: device endpoint-0 control register
  #define OTG_FS_DEVICE_OTG_FS_DOEPCTL0 (* ((volatile uint32_t *) (0x50000800 + 768)))

  // Field EPENA: EPENA
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPENA = 1U << 31 ;

  // Field EPDIS: EPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPDIS = 1U << 30 ;

  // Field SNAK: SNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL0_SNAK = 1U << 27 ;

  // Field CNAK: CNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL0_CNAK = 1U << 26 ;

  // Field Stall: Stall
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL0_Stall = 1U << 21 ;

  // Field SNPM: SNPM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL0_SNPM = 1U << 20 ;

  // Field EPTYP: EPTYP
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL0_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field NAKSTS: NAKSTS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL0_NAKSTS = 1U << 17 ;

  // Field USBAEP: USBAEP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL0_USBAEP = 1U << 15 ;

  // Field MPSIZ: MPSIZ
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL0_MPSIZ (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPCTL1: device endpoint-1 control register
  #define OTG_FS_DEVICE_OTG_FS_DOEPCTL1 (* ((volatile uint32_t *) (0x50000800 + 800)))

  // Field EPENA: EPENA
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPENA = 1U << 31 ;

  // Field EPDIS: EPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPDIS = 1U << 30 ;

  // Field SODDFRM: SODDFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SODDFRM = 1U << 29 ;

  // Field SD0PID_SEVNFRM: SD0PID/SEVNFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SNAK: SNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SNAK = 1U << 27 ;

  // Field CNAK: CNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL1_CNAK = 1U << 26 ;

  // Field Stall: Stall
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL1_Stall = 1U << 21 ;

  // Field SNPM: SNPM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL1_SNPM = 1U << 20 ;

  // Field EPTYP: EPTYP
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field NAKSTS: NAKSTS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL1_NAKSTS = 1U << 17 ;

  // Field EONUM_DPID: EONUM/DPID
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL1_EONUM_DPID = 1U << 16 ;

  // Field USBAEP: USBAEP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL1_USBAEP = 1U << 15 ;

  // Field MPSIZ: MPSIZ
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL1_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPCTL2: device endpoint-2 control register
  #define OTG_FS_DEVICE_OTG_FS_DOEPCTL2 (* ((volatile uint32_t *) (0x50000800 + 832)))

  // Field EPENA: EPENA
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPENA = 1U << 31 ;

  // Field EPDIS: EPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPDIS = 1U << 30 ;

  // Field SODDFRM: SODDFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SODDFRM = 1U << 29 ;

  // Field SD0PID_SEVNFRM: SD0PID/SEVNFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SNAK: SNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SNAK = 1U << 27 ;

  // Field CNAK: CNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL2_CNAK = 1U << 26 ;

  // Field Stall: Stall
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL2_Stall = 1U << 21 ;

  // Field SNPM: SNPM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL2_SNPM = 1U << 20 ;

  // Field EPTYP: EPTYP
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field NAKSTS: NAKSTS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL2_NAKSTS = 1U << 17 ;

  // Field EONUM_DPID: EONUM/DPID
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL2_EONUM_DPID = 1U << 16 ;

  // Field USBAEP: USBAEP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL2_USBAEP = 1U << 15 ;

  // Field MPSIZ: MPSIZ
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL2_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPCTL3: device endpoint-3 control register
  #define OTG_FS_DEVICE_OTG_FS_DOEPCTL3 (* ((volatile uint32_t *) (0x50000800 + 864)))

  // Field EPENA: EPENA
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPENA = 1U << 31 ;

  // Field EPDIS: EPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPDIS = 1U << 30 ;

  // Field SODDFRM: SODDFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SODDFRM = 1U << 29 ;

  // Field SD0PID_SEVNFRM: SD0PID/SEVNFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SNAK: SNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SNAK = 1U << 27 ;

  // Field CNAK: CNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL3_CNAK = 1U << 26 ;

  // Field Stall: Stall
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL3_Stall = 1U << 21 ;

  // Field SNPM: SNPM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL3_SNPM = 1U << 20 ;

  // Field EPTYP: EPTYP
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field NAKSTS: NAKSTS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL3_NAKSTS = 1U << 17 ;

  // Field EONUM_DPID: EONUM/DPID
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL3_EONUM_DPID = 1U << 16 ;

  // Field USBAEP: USBAEP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL3_USBAEP = 1U << 15 ;

  // Field MPSIZ: MPSIZ
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL3_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPINT0: device endpoint-x interrupt register
  #define OTG_FS_DEVICE_OTG_FS_DIEPINT0 (* ((volatile uint32_t *) (0x50000800 + 264)))

  // Field TXFE: TXFE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT0_TXFE = 1U << 7 ;

  // Field INEPNE: INEPNE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT0_INEPNE = 1U << 6 ;

  // Field ITTXFE: ITTXFE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT0_ITTXFE = 1U << 4 ;

  // Field TOC: TOC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT0_TOC = 1U << 3 ;

  // Field EPDISD: EPDISD
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT0_EPDISD = 1U << 1 ;

  // Field XFRC: XFRC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT0_XFRC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPINT1: device endpoint-1 interrupt register
  #define OTG_FS_DEVICE_OTG_FS_DIEPINT1 (* ((volatile uint32_t *) (0x50000800 + 296)))

  // Field TXFE: TXFE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT1_TXFE = 1U << 7 ;

  // Field INEPNE: INEPNE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT1_INEPNE = 1U << 6 ;

  // Field ITTXFE: ITTXFE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT1_ITTXFE = 1U << 4 ;

  // Field TOC: TOC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT1_TOC = 1U << 3 ;

  // Field EPDISD: EPDISD
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT1_EPDISD = 1U << 1 ;

  // Field XFRC: XFRC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT1_XFRC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPINT2: device endpoint-2 interrupt register
  #define OTG_FS_DEVICE_OTG_FS_DIEPINT2 (* ((volatile uint32_t *) (0x50000800 + 328)))

  // Field TXFE: TXFE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT2_TXFE = 1U << 7 ;

  // Field INEPNE: INEPNE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT2_INEPNE = 1U << 6 ;

  // Field ITTXFE: ITTXFE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT2_ITTXFE = 1U << 4 ;

  // Field TOC: TOC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT2_TOC = 1U << 3 ;

  // Field EPDISD: EPDISD
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT2_EPDISD = 1U << 1 ;

  // Field XFRC: XFRC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT2_XFRC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPINT3: device endpoint-3 interrupt register
  #define OTG_FS_DEVICE_OTG_FS_DIEPINT3 (* ((volatile uint32_t *) (0x50000800 + 360)))

  // Field TXFE: TXFE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT3_TXFE = 1U << 7 ;

  // Field INEPNE: INEPNE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT3_INEPNE = 1U << 6 ;

  // Field ITTXFE: ITTXFE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT3_ITTXFE = 1U << 4 ;

  // Field TOC: TOC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT3_TOC = 1U << 3 ;

  // Field EPDISD: EPDISD
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT3_EPDISD = 1U << 1 ;

  // Field XFRC: XFRC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT3_XFRC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPINT0: device endpoint-0 interrupt register
  #define OTG_FS_DEVICE_OTG_FS_DOEPINT0 (* ((volatile uint32_t *) (0x50000800 + 776)))

  // Field B2BSTUP: B2BSTUP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT0_B2BSTUP = 1U << 6 ;

  // Field OTEPDIS: OTEPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT0_OTEPDIS = 1U << 4 ;

  // Field STUP: STUP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT0_STUP = 1U << 3 ;

  // Field EPDISD: EPDISD
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT0_EPDISD = 1U << 1 ;

  // Field XFRC: XFRC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT0_XFRC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPINT1: device endpoint-1 interrupt register
  #define OTG_FS_DEVICE_OTG_FS_DOEPINT1 (* ((volatile uint32_t *) (0x50000800 + 808)))

  // Field B2BSTUP: B2BSTUP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT1_B2BSTUP = 1U << 6 ;

  // Field OTEPDIS: OTEPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT1_OTEPDIS = 1U << 4 ;

  // Field STUP: STUP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT1_STUP = 1U << 3 ;

  // Field EPDISD: EPDISD
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT1_EPDISD = 1U << 1 ;

  // Field XFRC: XFRC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT1_XFRC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPINT2: device endpoint-2 interrupt register
  #define OTG_FS_DEVICE_OTG_FS_DOEPINT2 (* ((volatile uint32_t *) (0x50000800 + 840)))

  // Field B2BSTUP: B2BSTUP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT2_B2BSTUP = 1U << 6 ;

  // Field OTEPDIS: OTEPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT2_OTEPDIS = 1U << 4 ;

  // Field STUP: STUP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT2_STUP = 1U << 3 ;

  // Field EPDISD: EPDISD
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT2_EPDISD = 1U << 1 ;

  // Field XFRC: XFRC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT2_XFRC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPINT3: device endpoint-3 interrupt register
  #define OTG_FS_DEVICE_OTG_FS_DOEPINT3 (* ((volatile uint32_t *) (0x50000800 + 872)))

  // Field B2BSTUP: B2BSTUP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT3_B2BSTUP = 1U << 6 ;

  // Field OTEPDIS: OTEPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT3_OTEPDIS = 1U << 4 ;

  // Field STUP: STUP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT3_STUP = 1U << 3 ;

  // Field EPDISD: EPDISD
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT3_EPDISD = 1U << 1 ;

  // Field XFRC: XFRC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT3_XFRC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPTSIZ0: device endpoint-0 transfer size register
  #define OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0 (* ((volatile uint32_t *) (0x50000800 + 272)))

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0_PKTCNT (const uint32_t inValue) {return (inValue & 0x3U) << 19 ; }

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ0_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPTSIZ0: device OUT endpoint-0 transfer size register
  #define OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0 (* ((volatile uint32_t *) (0x50000800 + 784)))

  // Field STUPCNT: SETUP packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

  // Field PKTCNT: Packet count
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_PKTCNT = 1U << 19 ;

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ0_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPTSIZ1: device endpoint-1 transfer size register
  #define OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1 (* ((volatile uint32_t *) (0x50000800 + 304)))

  // Field MCNT: Multi count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ1_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPTSIZ2: device endpoint-2 transfer size register
  #define OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2 (* ((volatile uint32_t *) (0x50000800 + 336)))

  // Field MCNT: Multi count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ2_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPTSIZ3: device endpoint-3 transfer size register
  #define OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3 (* ((volatile uint32_t *) (0x50000800 + 368)))

  // Field MCNT: Multi count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ3_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DTXFSTS0: OTG_FS device IN endpoint transmit FIFO status register
  #define OTG_FS_DEVICE_OTG_FS_DTXFSTS0 (* ((const volatile uint32_t *) (0x50000800 + 280)))

  // Field INEPTFSAV: IN endpoint TxFIFO space available
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DTXFSTS0_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DTXFSTS1: OTG_FS device IN endpoint transmit FIFO status register
  #define OTG_FS_DEVICE_OTG_FS_DTXFSTS1 (* ((const volatile uint32_t *) (0x50000800 + 312)))

  // Field INEPTFSAV: IN endpoint TxFIFO space available
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DTXFSTS1_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DTXFSTS2: OTG_FS device IN endpoint transmit FIFO status register
  #define OTG_FS_DEVICE_OTG_FS_DTXFSTS2 (* ((const volatile uint32_t *) (0x50000800 + 344)))

  // Field INEPTFSAV: IN endpoint TxFIFO space available
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DTXFSTS2_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DTXFSTS3: OTG_FS device IN endpoint transmit FIFO status register
  #define OTG_FS_DEVICE_OTG_FS_DTXFSTS3 (* ((const volatile uint32_t *) (0x50000800 + 376)))

  // Field INEPTFSAV: IN endpoint TxFIFO space available
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DTXFSTS3_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPTSIZ1: device OUT endpoint-1 transfer size register
  #define OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1 (* ((volatile uint32_t *) (0x50000800 + 816)))

  // Field RXDPID_STUPCNT: Received data PID/SETUP packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_RXDPID_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ1_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPTSIZ2: device OUT endpoint-2 transfer size register
  #define OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2 (* ((volatile uint32_t *) (0x50000800 + 848)))

  // Field RXDPID_STUPCNT: Received data PID/SETUP packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_RXDPID_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ2_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPTSIZ3: device OUT endpoint-3 transfer size register
  #define OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3 (* ((volatile uint32_t *) (0x50000800 + 880)))

  // Field RXDPID_STUPCNT: Received data PID/SETUP packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_RXDPID_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ3_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPCTL4: OTG device endpoint-4 control register
  #define OTG_FS_DEVICE_OTG_FS_DIEPCTL4 (* ((volatile uint32_t *) (0x50000800 + 384)))

  // Field EPENA: EPENA
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPENA = 1U << 31 ;

  // Field EPDIS: EPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPDIS = 1U << 30 ;

  // Field SODDFRM: SODDFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SODDFRM = 1U << 29 ;

  // Field SD0PID_SEVNFRM: SD0PID/SEVNFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SNAK: SNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL4_SNAK = 1U << 27 ;

  // Field CNAK: CNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL4_CNAK = 1U << 26 ;

  // Field TXFNUM: TXFNUM
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL4_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field Stall: Stall
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL4_Stall = 1U << 21 ;

  // Field EPTYP: EPTYP
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field NAKSTS: NAKSTS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL4_NAKSTS = 1U << 17 ;

  // Field EONUM_DPID: EONUM/DPID
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL4_EONUM_DPID = 1U << 16 ;

  // Field USBAEP: USBAEP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL4_USBAEP = 1U << 15 ;

  // Field MPSIZ: MPSIZ
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL4_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPINT4: device endpoint-4 interrupt register
  #define OTG_FS_DEVICE_OTG_FS_DIEPINT4 (* ((volatile uint32_t *) (0x50000800 + 392)))

  // Field TXFE: TXFE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT4_TXFE = 1U << 7 ;

  // Field INEPNE: INEPNE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT4_INEPNE = 1U << 6 ;

  // Field ITTXFE: ITTXFE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT4_ITTXFE = 1U << 4 ;

  // Field TOC: TOC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT4_TOC = 1U << 3 ;

  // Field EPDISD: EPDISD
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT4_EPDISD = 1U << 1 ;

  // Field XFRC: XFRC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT4_XFRC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPTSIZ4: device endpoint-4 transfer size register
  #define OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4 (* ((volatile uint32_t *) (0x50000800 + 404)))

  // Field MCNT: Multi count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ4_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DTXFSTS4: OTG_FS device IN endpoint transmit FIFO status register
  #define OTG_FS_DEVICE_OTG_FS_DTXFSTS4 (* ((volatile uint32_t *) (0x50000800 + 412)))

  // Field INEPTFSAV: IN endpoint TxFIFO space available
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DTXFSTS4_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPCTL5: OTG device endpoint-5 control register
  #define OTG_FS_DEVICE_OTG_FS_DIEPCTL5 (* ((volatile uint32_t *) (0x50000800 + 416)))

  // Field EPENA: EPENA
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPENA = 1U << 31 ;

  // Field EPDIS: EPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPDIS = 1U << 30 ;

  // Field SODDFRM: SODDFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SODDFRM = 1U << 29 ;

  // Field SD0PID_SEVNFRM: SD0PID/SEVNFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SNAK: SNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL5_SNAK = 1U << 27 ;

  // Field CNAK: CNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL5_CNAK = 1U << 26 ;

  // Field TXFNUM: TXFNUM
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL5_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field Stall: Stall
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL5_Stall = 1U << 21 ;

  // Field EPTYP: EPTYP
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field NAKSTS: NAKSTS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL5_NAKSTS = 1U << 17 ;

  // Field EONUM_DPID: EONUM/DPID
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL5_EONUM_DPID = 1U << 16 ;

  // Field USBAEP: USBAEP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL5_USBAEP = 1U << 15 ;

  // Field MPSIZ: MPSIZ
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPCTL5_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPINT5: device endpoint-5 interrupt register
  #define OTG_FS_DEVICE_OTG_FS_DIEPINT5 (* ((volatile uint32_t *) (0x50000800 + 424)))

  // Field TXFE: TXFE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT5_TXFE = 1U << 7 ;

  // Field INEPNE: INEPNE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT5_INEPNE = 1U << 6 ;

  // Field ITTXFE: ITTXFE
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT5_ITTXFE = 1U << 4 ;

  // Field TOC: TOC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT5_TOC = 1U << 3 ;

  // Field EPDISD: EPDISD
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT5_EPDISD = 1U << 1 ;

  // Field XFRC: XFRC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DIEPINT5_XFRC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPTSIZ55: device endpoint-5 transfer size register
  #define OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55 (* ((volatile uint32_t *) (0x50000800 + 432)))

  // Field MCNT: Multi count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DIEPTSIZ55_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DTXFSTS55: OTG_FS device IN endpoint transmit FIFO status register
  #define OTG_FS_DEVICE_OTG_FS_DTXFSTS55 (* ((volatile uint32_t *) (0x50000800 + 440)))

  // Field INEPTFSAV: IN endpoint TxFIFO space available
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DTXFSTS55_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPCTL4: device endpoint-4 control register
  #define OTG_FS_DEVICE_OTG_FS_DOEPCTL4 (* ((volatile uint32_t *) (0x50000800 + 888)))

  // Field EPENA: EPENA
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPENA = 1U << 31 ;

  // Field EPDIS: EPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPDIS = 1U << 30 ;

  // Field SODDFRM: SODDFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SODDFRM = 1U << 29 ;

  // Field SD0PID_SEVNFRM: SD0PID/SEVNFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SNAK: SNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SNAK = 1U << 27 ;

  // Field CNAK: CNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL4_CNAK = 1U << 26 ;

  // Field Stall: Stall
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL4_Stall = 1U << 21 ;

  // Field SNPM: SNPM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL4_SNPM = 1U << 20 ;

  // Field EPTYP: EPTYP
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field NAKSTS: NAKSTS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL4_NAKSTS = 1U << 17 ;

  // Field EONUM_DPID: EONUM/DPID
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL4_EONUM_DPID = 1U << 16 ;

  // Field USBAEP: USBAEP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL4_USBAEP = 1U << 15 ;

  // Field MPSIZ: MPSIZ
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL4_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPINT4: device endpoint-4 interrupt register
  #define OTG_FS_DEVICE_OTG_FS_DOEPINT4 (* ((volatile uint32_t *) (0x50000800 + 896)))

  // Field B2BSTUP: B2BSTUP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT4_B2BSTUP = 1U << 6 ;

  // Field OTEPDIS: OTEPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT4_OTEPDIS = 1U << 4 ;

  // Field STUP: STUP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT4_STUP = 1U << 3 ;

  // Field EPDISD: EPDISD
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT4_EPDISD = 1U << 1 ;

  // Field XFRC: XFRC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT4_XFRC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPTSIZ4: device OUT endpoint-4 transfer size register
  #define OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4 (* ((volatile uint32_t *) (0x50000800 + 904)))

  // Field RXDPID_STUPCNT: Received data PID/SETUP packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_RXDPID_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ4_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPCTL5: device endpoint-5 control register
  #define OTG_FS_DEVICE_OTG_FS_DOEPCTL5 (* ((volatile uint32_t *) (0x50000800 + 912)))

  // Field EPENA: EPENA
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPENA = 1U << 31 ;

  // Field EPDIS: EPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPDIS = 1U << 30 ;

  // Field SODDFRM: SODDFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SODDFRM = 1U << 29 ;

  // Field SD0PID_SEVNFRM: SD0PID/SEVNFRM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SNAK: SNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SNAK = 1U << 27 ;

  // Field CNAK: CNAK
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL5_CNAK = 1U << 26 ;

  // Field Stall: Stall
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL5_Stall = 1U << 21 ;

  // Field SNPM: SNPM
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL5_SNPM = 1U << 20 ;

  // Field EPTYP: EPTYP
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field NAKSTS: NAKSTS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL5_NAKSTS = 1U << 17 ;

  // Field EONUM_DPID: EONUM/DPID
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL5_EONUM_DPID = 1U << 16 ;

  // Field USBAEP: USBAEP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL5_USBAEP = 1U << 15 ;

  // Field MPSIZ: MPSIZ
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPCTL5_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPINT5: device endpoint-5 interrupt register
  #define OTG_FS_DEVICE_OTG_FS_DOEPINT5 (* ((volatile uint32_t *) (0x50000800 + 920)))

  // Field B2BSTUP: B2BSTUP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT5_B2BSTUP = 1U << 6 ;

  // Field OTEPDIS: OTEPDIS
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT5_OTEPDIS = 1U << 4 ;

  // Field STUP: STUP
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT5_STUP = 1U << 3 ;

  // Field EPDISD: EPDISD
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT5_EPDISD = 1U << 1 ;

  // Field XFRC: XFRC
    const uint32_t OTG_FS_DEVICE_OTG_FS_DOEPINT5_XFRC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_DOEPTSIZ5: device OUT endpoint-5 transfer size register
  #define OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5 (* ((volatile uint32_t *) (0x50000800 + 928)))

  // Field RXDPID_STUPCNT: Received data PID/SETUP packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_RXDPID_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_DEVICE_OTG_FS_DOEPTSIZ5_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral OTG_FS_GLOBAL: USB on the go full speed
//------------------------------------------------------------------------------

//---  Register OTG_FS_GOTGCTL: OTG_FS control and status register (OTG_FS_GOTGCTL)
  #define OTG_FS_GLOBAL_OTG_FS_GOTGCTL (* ((volatile uint32_t *) (0x50000000 + 0)))

  // Field SRQSCS: Session request success
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_SRQSCS = 1U << 0 ;

  // Field SRQ: Session request
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_SRQ = 1U << 1 ;

  // Field HNGSCS: Host negotiation success
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HNGSCS = 1U << 8 ;

  // Field HNPRQ: HNP request
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HNPRQ = 1U << 9 ;

  // Field HSHNPEN: Host set HNP enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_HSHNPEN = 1U << 10 ;

  // Field DHNPEN: Device HNP enabled
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_DHNPEN = 1U << 11 ;

  // Field CIDSTS: Connector ID status
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_CIDSTS = 1U << 16 ;

  // Field DBCT: Long/short debounce time
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_DBCT = 1U << 17 ;

  // Field ASVLD: A-session valid
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_ASVLD = 1U << 18 ;

  // Field BSVLD: B-session valid
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BSVLD = 1U << 19 ;

  // Field VBVALOEN: VBUS valid override enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_VBVALOEN = 1U << 2 ;

  // Field VBVALOVAL: VBUS valid override value
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_VBVALOVAL = 1U << 3 ;

  // Field AVALOEN: A-peripheral session valid override enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_AVALOEN = 1U << 4 ;

  // Field AVALOVAL: A-peripheral session valid override value
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_AVALOVAL = 1U << 5 ;

  // Field BVALOEN: B-peripheral session valid override enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BVALOEN = 1U << 6 ;

  // Field BVALOVAL: B-peripheral session valid override value
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_BVALOVAL = 1U << 7 ;

  // Field EHEN: Embedded host enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_EHEN = 1U << 12 ;

  // Field OTGVER: OTG version
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGCTL_OTGVER = 1U << 20 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_GOTGINT: OTG_FS interrupt register (OTG_FS_GOTGINT)
  #define OTG_FS_GLOBAL_OTG_FS_GOTGINT (* ((volatile uint32_t *) (0x50000000 + 4)))

  // Field SEDET: Session end detected
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGINT_SEDET = 1U << 2 ;

  // Field SRSSCHG: Session request success status change
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGINT_SRSSCHG = 1U << 8 ;

  // Field HNSSCHG: Host negotiation success status change
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGINT_HNSSCHG = 1U << 9 ;

  // Field HNGDET: Host negotiation detected
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGINT_HNGDET = 1U << 17 ;

  // Field ADTOCHG: A-device timeout change
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGINT_ADTOCHG = 1U << 18 ;

  // Field DBCDNE: Debounce done
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGINT_DBCDNE = 1U << 19 ;

  // Field IDCHNG: ID input pin changed
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GOTGINT_IDCHNG = 1U << 20 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_GAHBCFG: OTG_FS AHB configuration register (OTG_FS_GAHBCFG)
  #define OTG_FS_GLOBAL_OTG_FS_GAHBCFG (* ((volatile uint32_t *) (0x50000000 + 8)))

  // Field GINT: Global interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GAHBCFG_GINT = 1U << 0 ;

  // Field TXFELVL: TxFIFO empty level
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GAHBCFG_TXFELVL = 1U << 7 ;

  // Field PTXFELVL: Periodic TxFIFO empty level
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GAHBCFG_PTXFELVL = 1U << 8 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_GUSBCFG: OTG_FS USB configuration register (OTG_FS_GUSBCFG)
  #define OTG_FS_GLOBAL_OTG_FS_GUSBCFG (* ((volatile uint32_t *) (0x50000000 + 12)))

  // Field TOCAL: FS timeout calibration
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GUSBCFG_TOCAL (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field PHYSEL: Full Speed serial transceiver select
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GUSBCFG_PHYSEL = 1U << 6 ;

  // Field SRPCAP: SRP-capable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GUSBCFG_SRPCAP = 1U << 8 ;

  // Field HNPCAP: HNP-capable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GUSBCFG_HNPCAP = 1U << 9 ;

  // Field TRDT: USB turnaround time
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GUSBCFG_TRDT (const uint32_t inValue) {return (inValue & 0xFU) << 10 ; }

  // Field FHMOD: Force host mode
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GUSBCFG_FHMOD = 1U << 29 ;

  // Field FDMOD: Force device mode
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GUSBCFG_FDMOD = 1U << 30 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_GRSTCTL: OTG_FS reset register (OTG_FS_GRSTCTL)
  #define OTG_FS_GLOBAL_OTG_FS_GRSTCTL (* ((volatile uint32_t *) (0x50000000 + 16)))

  // Field CSRST: Core soft reset
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GRSTCTL_CSRST = 1U << 0 ;

  // Field HSRST: HCLK soft reset
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GRSTCTL_HSRST = 1U << 1 ;

  // Field FCRST: Host frame counter reset
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GRSTCTL_FCRST = 1U << 2 ;

  // Field RXFFLSH: RxFIFO flush
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GRSTCTL_RXFFLSH = 1U << 4 ;

  // Field TXFFLSH: TxFIFO flush
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GRSTCTL_TXFFLSH = 1U << 5 ;

  // Field TXFNUM: TxFIFO number
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRSTCTL_TXFNUM (const uint32_t inValue) {return (inValue & 0x1FU) << 6 ; }

  // Field AHBIDL: AHB master idle
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GRSTCTL_AHBIDL = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_GINTSTS: OTG_FS core interrupt register (OTG_FS_GINTSTS)
  #define OTG_FS_GLOBAL_OTG_FS_GINTSTS (* ((volatile uint32_t *) (0x50000000 + 20)))

  // Field CMOD: Current mode of operation
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_CMOD = 1U << 0 ;

  // Field MMIS: Mode mismatch interrupt
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_MMIS = 1U << 1 ;

  // Field OTGINT: OTG interrupt
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_OTGINT = 1U << 2 ;

  // Field SOF: Start of frame
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_SOF = 1U << 3 ;

  // Field RXFLVL: RxFIFO non-empty
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_RXFLVL = 1U << 4 ;

  // Field NPTXFE: Non-periodic TxFIFO empty
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_NPTXFE = 1U << 5 ;

  // Field GINAKEFF: Global IN non-periodic NAK effective
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_GINAKEFF = 1U << 6 ;

  // Field GOUTNAKEFF: Global OUT NAK effective
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_GOUTNAKEFF = 1U << 7 ;

  // Field ESUSP: Early suspend
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_ESUSP = 1U << 10 ;

  // Field USBSUSP: USB suspend
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_USBSUSP = 1U << 11 ;

  // Field USBRST: USB reset
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_USBRST = 1U << 12 ;

  // Field ENUMDNE: Enumeration done
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_ENUMDNE = 1U << 13 ;

  // Field ISOODRP: Isochronous OUT packet dropped interrupt
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_ISOODRP = 1U << 14 ;

  // Field EOPF: End of periodic frame interrupt
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_EOPF = 1U << 15 ;

  // Field IEPINT: IN endpoint interrupt
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_IEPINT = 1U << 18 ;

  // Field OEPINT: OUT endpoint interrupt
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_OEPINT = 1U << 19 ;

  // Field IISOIXFR: Incomplete isochronous IN transfer
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_IISOIXFR = 1U << 20 ;

  // Field IPXFR_INCOMPISOOUT: Incomplete periodic transfer(Host mode)/Incomplete isochronous OUT transfer(Device mode)
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_IPXFR_INCOMPISOOUT = 1U << 21 ;

  // Field HPRTINT: Host port interrupt
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_HPRTINT = 1U << 24 ;

  // Field HCINT: Host channels interrupt
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_HCINT = 1U << 25 ;

  // Field PTXFE: Periodic TxFIFO empty
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_PTXFE = 1U << 26 ;

  // Field CIDSCHG: Connector ID status change
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_CIDSCHG = 1U << 28 ;

  // Field DISCINT: Disconnect detected interrupt
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_DISCINT = 1U << 29 ;

  // Field SRQINT: Session request/new session detected interrupt
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_SRQINT = 1U << 30 ;

  // Field WKUPINT: Resume/remote wakeup detected interrupt
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_WKUPINT = 1U << 31 ;

  // Field RSTDET: Reset detected interrupt
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTSTS_RSTDET = 1U << 23 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_GINTMSK: OTG_FS interrupt mask register (OTG_FS_GINTMSK)
  #define OTG_FS_GLOBAL_OTG_FS_GINTMSK (* ((volatile uint32_t *) (0x50000000 + 24)))

  // Field MMISM: Mode mismatch interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_MMISM = 1U << 1 ;

  // Field OTGINT: OTG interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_OTGINT = 1U << 2 ;

  // Field SOFM: Start of frame mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_SOFM = 1U << 3 ;

  // Field RXFLVLM: Receive FIFO non-empty mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_RXFLVLM = 1U << 4 ;

  // Field NPTXFEM: Non-periodic TxFIFO empty mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_NPTXFEM = 1U << 5 ;

  // Field GINAKEFFM: Global non-periodic IN NAK effective mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_GINAKEFFM = 1U << 6 ;

  // Field GONAKEFFM: Global OUT NAK effective mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_GONAKEFFM = 1U << 7 ;

  // Field ESUSPM: Early suspend mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_ESUSPM = 1U << 10 ;

  // Field USBSUSPM: USB suspend mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_USBSUSPM = 1U << 11 ;

  // Field USBRST: USB reset mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_USBRST = 1U << 12 ;

  // Field ENUMDNEM: Enumeration done mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_ENUMDNEM = 1U << 13 ;

  // Field ISOODRPM: Isochronous OUT packet dropped interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_ISOODRPM = 1U << 14 ;

  // Field EOPFM: End of periodic frame interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_EOPFM = 1U << 15 ;

  // Field IEPINT: IN endpoints interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_IEPINT = 1U << 18 ;

  // Field OEPINT: OUT endpoints interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_OEPINT = 1U << 19 ;

  // Field IISOIXFRM: Incomplete isochronous IN transfer mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_IISOIXFRM = 1U << 20 ;

  // Field IPXFRM_IISOOXFRM: Incomplete periodic transfer mask(Host mode)/Incomplete isochronous OUT transfer mask(Device mode)
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_IPXFRM_IISOOXFRM = 1U << 21 ;

  // Field PRTIM: Host port interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_PRTIM = 1U << 24 ;

  // Field HCIM: Host channels interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_HCIM = 1U << 25 ;

  // Field PTXFEM: Periodic TxFIFO empty mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_PTXFEM = 1U << 26 ;

  // Field CIDSCHGM: Connector ID status change mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_CIDSCHGM = 1U << 28 ;

  // Field DISCINT: Disconnect detected interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_DISCINT = 1U << 29 ;

  // Field SRQIM: Session request/new session detected interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_SRQIM = 1U << 30 ;

  // Field WUIM: Resume/remote wakeup detected interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_WUIM = 1U << 31 ;

  // Field RSTDETM: Reset detected interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_RSTDETM = 1U << 23 ;

  // Field LPMIN: LPM interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GINTMSK_LPMIN = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_GRXSTSR_Device: OTG_FS Receive status debug read(Device mode)
  #define OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device (* ((const volatile uint32_t *) (0x50000000 + 28)))

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field BCNT: Byte count
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_BCNT (const uint32_t inValue) {return (inValue & 0x7FFU) << 4 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 15 ; }

  // Field PKTSTS: Packet status
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_PKTSTS (const uint32_t inValue) {return (inValue & 0xFU) << 17 ; }

  // Field FRMNUM: Frame number
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Device_FRMNUM (const uint32_t inValue) {return (inValue & 0xFU) << 21 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_GRXSTSR_Host: OTG_FS Receive status debug read(Host mode)
  #define OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host (* ((const volatile uint32_t *) (0x50000000 + 28)))

  // Field CHNUM: Endpoint number
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_CHNUM (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field BCNT: Byte count
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_BCNT (const uint32_t inValue) {return (inValue & 0x7FFU) << 4 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 15 ; }

  // Field PKTSTS: Packet status
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSR_Host_PKTSTS (const uint32_t inValue) {return (inValue & 0xFU) << 17 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_GRXFSIZ: OTG_FS Receive FIFO size register (OTG_FS_GRXFSIZ)
  #define OTG_FS_GLOBAL_OTG_FS_GRXFSIZ (* ((volatile uint32_t *) (0x50000000 + 36)))

  // Field RXFD: RxFIFO depth
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXFSIZ_RXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPTXF0_Device: OTG_FS Endpoint 0 Transmit FIFO size
  #define OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device (* ((volatile uint32_t *) (0x50000000 + 40)))

  // Field TX0FSA: Endpoint 0 transmit RAM start address
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device_TX0FSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field TX0FD: Endpoint 0 TxFIFO depth
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_DIEPTXF0_Device_TX0FD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HNPTXFSIZ_Host: OTG_FS Host non-periodic transmit FIFO size register
  #define OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host (* ((volatile uint32_t *) (0x50000000 + 40)))

  // Field NPTXFSA: Non-periodic transmit RAM start address
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host_NPTXFSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field NPTXFD: Non-periodic TxFIFO depth
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_HNPTXFSIZ_Host_NPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HNPTXSTS: OTG_FS non-periodic transmit FIFO/queue status register (OTG_FS_GNPTXSTS)
  #define OTG_FS_GLOBAL_OTG_FS_HNPTXSTS (* ((const volatile uint32_t *) (0x50000000 + 44)))

  // Field NPTXFSAV: Non-periodic TxFIFO space available
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTXFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field NPTQXSAV: Non-periodic transmit request queue space available
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTQXSAV (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field NPTXQTOP: Top of the non-periodic transmit request queue
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_HNPTXSTS_NPTXQTOP (const uint32_t inValue) {return (inValue & 0x7FU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_GCCFG: OTG_FS general core configuration register (OTG_FS_GCCFG)
  #define OTG_FS_GLOBAL_OTG_FS_GCCFG (* ((volatile uint32_t *) (0x50000000 + 56)))

  // Field PWRDWN: Power down
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GCCFG_PWRDWN = 1U << 16 ;

  // Field BCDEN: Battery charging detector (BCD) enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GCCFG_BCDEN = 1U << 17 ;

  // Field DCDEN: Data contact detection (DCD) mode enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GCCFG_DCDEN = 1U << 18 ;

  // Field PDEN: Primary detection (PD) mode enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GCCFG_PDEN = 1U << 19 ;

  // Field SDEN: Secondary detection (SD) mode enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GCCFG_SDEN = 1U << 20 ;

  // Field VBDEN: USB VBUS detection enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GCCFG_VBDEN = 1U << 21 ;

  // Field DCDET: Data contact detection (DCD) status
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GCCFG_DCDET = 1U << 0 ;

  // Field PDET: Primary detection (PD) status
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GCCFG_PDET = 1U << 1 ;

  // Field SDET: Secondary detection (SD) status
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GCCFG_SDET = 1U << 2 ;

  // Field PS2DET: DM pull-up detection status
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GCCFG_PS2DET = 1U << 3 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_CID: core ID register
  #define OTG_FS_GLOBAL_OTG_FS_CID (* ((volatile uint32_t *) (0x50000000 + 60)))

  // Field PRODUCT_ID: Product ID field
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_CID_PRODUCT_ID (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HPTXFSIZ: OTG_FS Host periodic transmit FIFO size register (OTG_FS_HPTXFSIZ)
  #define OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ (* ((volatile uint32_t *) (0x50000000 + 256)))

  // Field PTXSA: Host periodic TxFIFO start address
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ_PTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field PTXFSIZ: Host periodic TxFIFO depth
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_HPTXFSIZ_PTXFSIZ (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPTXF1: OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF1)
  #define OTG_FS_GLOBAL_OTG_FS_DIEPTXF1 (* ((volatile uint32_t *) (0x50000000 + 260)))

  // Field INEPTXSA: IN endpoint FIFO2 transmit RAM start address
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_DIEPTXF1_INEPTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INEPTXFD: IN endpoint TxFIFO depth
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_DIEPTXF1_INEPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPTXF2: OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF2)
  #define OTG_FS_GLOBAL_OTG_FS_DIEPTXF2 (* ((volatile uint32_t *) (0x50000000 + 264)))

  // Field INEPTXSA: IN endpoint FIFO3 transmit RAM start address
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_DIEPTXF2_INEPTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INEPTXFD: IN endpoint TxFIFO depth
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_DIEPTXF2_INEPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPTXF3: OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF3)
  #define OTG_FS_GLOBAL_OTG_FS_DIEPTXF3 (* ((volatile uint32_t *) (0x50000000 + 268)))

  // Field INEPTXSA: IN endpoint FIFO4 transmit RAM start address
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_DIEPTXF3_INEPTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INEPTXFD: IN endpoint TxFIFO depth
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_DIEPTXF3_INEPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_GRXSTSP_Device: OTG status read and pop register (Device mode)
  #define OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device (* ((const volatile uint32_t *) (0x50000000 + 32)))

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field BCNT: Byte count
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_BCNT (const uint32_t inValue) {return (inValue & 0x7FFU) << 4 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 15 ; }

  // Field PKTSTS: Packet status
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_PKTSTS (const uint32_t inValue) {return (inValue & 0xFU) << 17 ; }

  // Field FRMNUM: Frame number
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Device_FRMNUM (const uint32_t inValue) {return (inValue & 0xFU) << 21 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_GRXSTSP_Host: OTG status read and pop register (Host mode)
  #define OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host (* ((const volatile uint32_t *) (0x50000000 + 32)))

  // Field CHNUM: Channel number
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_CHNUM (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field BCNT: Byte count
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_BCNT (const uint32_t inValue) {return (inValue & 0x7FFU) << 4 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 15 ; }

  // Field PKTSTS: Packet status
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GRXSTSP_Host_PKTSTS (const uint32_t inValue) {return (inValue & 0xFU) << 17 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_GI2CCTL: OTG I2C access register
  #define OTG_FS_GLOBAL_OTG_FS_GI2CCTL (* ((volatile uint32_t *) (0x50000000 + 48)))

  // Field RWDATA: I2C Read/Write Data
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GI2CCTL_RWDATA (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field REGADDR: I2C Register Address
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GI2CCTL_REGADDR (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field ADDR: I2C Address
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GI2CCTL_ADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 16 ; }

  // Field I2CEN: I2C Enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CEN = 1U << 23 ;

  // Field ACK: I2C ACK
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GI2CCTL_ACK = 1U << 24 ;

  // Field I2CDEVADR: I2C Device Address
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CDEVADR (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field I2CDATSE0: I2C DatSe0 USB mode
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GI2CCTL_I2CDATSE0 = 1U << 28 ;

  // Field RW: Read/Write Indicator
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GI2CCTL_RW = 1U << 30 ;

  // Field BSYDNE: I2C Busy/Done
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GI2CCTL_BSYDNE = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_GPWRDN: OTG power down register
  #define OTG_FS_GLOBAL_OTG_FS_GPWRDN (* ((volatile uint32_t *) (0x50000000 + 88)))

  // Field ADPMEN: ADP module enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GPWRDN_ADPMEN = 1U << 0 ;

  // Field ADPIF: ADP interrupt flag
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GPWRDN_ADPIF = 1U << 23 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_GADPCTL: OTG ADP timer, control and status register
  #define OTG_FS_GLOBAL_OTG_FS_GADPCTL (* ((volatile uint32_t *) (0x50000000 + 96)))

  // Field PRBDSCHG: Probe discharge
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBDSCHG (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field PRBDELTA: Probe delta
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBDELTA (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field PRBPER: Probe period
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_PRBPER (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field RTIM: Ramp time
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_RTIM (const uint32_t inValue) {return (inValue & 0x7FFU) << 6 ; }

  // Field ENAPRB: Enable probe
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_ENAPRB = 1U << 17 ;

  // Field ENASNS: Enable sense
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_ENASNS = 1U << 18 ;

  // Field ADPRST: ADP reset
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPRST = 1U << 19 ;

  // Field ADPEN: ADP enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPEN = 1U << 20 ;

  // Field ADPPRBIF: ADP probe interrupt flag
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPPRBIF = 1U << 21 ;

  // Field ADPSNSIF: ADP sense interrupt flag
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPSNSIF = 1U << 22 ;

  // Field ADPTOIF: ADP timeout interrupt flag
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPTOIF = 1U << 23 ;

  // Field ADPPRBIM: ADP probe interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPPRBIM = 1U << 24 ;

  // Field ADPSNSIM: ADP sense interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPSNSIM = 1U << 25 ;

  // Field ADPTOIM: ADP timeout interrupt mask
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_ADPTOIM = 1U << 26 ;

  // Field AR: Access request
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GADPCTL_AR (const uint32_t inValue) {return (inValue & 0x3U) << 27 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPTXF4: OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF4)
  #define OTG_FS_GLOBAL_OTG_FS_DIEPTXF4 (* ((volatile uint32_t *) (0x50000000 + 272)))

  // Field INEPTXSA: IN endpoint FIFOx transmit RAM start address
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_DIEPTXF4_INEPTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INEPTXFD: IN endpoint Tx FIFO depth
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_DIEPTXF4_INEPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_DIEPTXF5: OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF5)
  #define OTG_FS_GLOBAL_OTG_FS_DIEPTXF5 (* ((volatile uint32_t *) (0x50000000 + 276)))

  // Field INEPTXSA: IN endpoint FIFOx transmit RAM start address
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_DIEPTXF5_INEPTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INEPTXFD: IN endpoint Tx FIFO depth
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_DIEPTXF5_INEPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_GLPMCFG: OTG core LPM configuration register
  #define OTG_FS_GLOBAL_OTG_FS_GLPMCFG (* ((volatile uint32_t *) (0x50000000 + 84)))

  // Field LPMEN: LPM support enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMEN = 1U << 0 ;

  // Field LPMACK: LPM token acknowledge enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMACK = 1U << 1 ;

  // Field BESL: Best effort service latency
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_BESL (const uint32_t inValue) {return (inValue & 0xFU) << 2 ; }

  // Field REMWAKE: bRemoteWake value
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_REMWAKE = 1U << 6 ;

  // Field L1SSEN: L1 Shallow Sleep enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1SSEN = 1U << 7 ;

  // Field BESLTHRS: BESL threshold
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_BESLTHRS (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field L1DSEN: L1 deep sleep enable
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1DSEN = 1U << 12 ;

  // Field LPMRST: LPM response
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRST (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field SLPSTS: Port sleep status
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_SLPSTS = 1U << 15 ;

  // Field L1RSMOK: Sleep State Resume OK
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_L1RSMOK = 1U << 16 ;

  // Field LPMCHIDX: LPM Channel Index
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMCHIDX (const uint32_t inValue) {return (inValue & 0xFU) << 17 ; }

  // Field LPMRCNT: LPM retry count
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRCNT (const uint32_t inValue) {return (inValue & 0x7U) << 21 ; }

  // Field SNDLPM: Send LPM transaction
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_SNDLPM = 1U << 24 ;

  // Field LPMRCNTSTS: LPM retry count status
    inline uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_LPMRCNTSTS (const uint32_t inValue) {return (inValue & 0x7U) << 25 ; }

  // Field ENBESL: Enable best effort service latency
    const uint32_t OTG_FS_GLOBAL_OTG_FS_GLPMCFG_ENBESL = 1U << 28 ;

//------------------------------------------------------------------------------
// Peripheral OTG_FS_HOST: USB on the go full speed
//------------------------------------------------------------------------------

//---  Register OTG_FS_HCFG: OTG_FS host configuration register (OTG_FS_HCFG)
  #define OTG_FS_HOST_OTG_FS_HCFG (* ((volatile uint32_t *) (0x50000400 + 0)))

  // Field FSLSPCS: FS/LS PHY clock select
    inline uint32_t OTG_FS_HOST_OTG_FS_HCFG_FSLSPCS (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field FSLSS: FS- and LS-only support
    const uint32_t OTG_FS_HOST_OTG_FS_HCFG_FSLSS = 1U << 2 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HFIR: OTG_FS Host frame interval register
  #define OTG_FS_HOST_OTG_FS_HFIR (* ((volatile uint32_t *) (0x50000400 + 4)))

  // Field FRIVL: Frame interval
    inline uint32_t OTG_FS_HOST_OTG_FS_HFIR_FRIVL (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HFNUM: OTG_FS host frame number/frame time remaining register (OTG_FS_HFNUM)
  #define OTG_FS_HOST_OTG_FS_HFNUM (* ((const volatile uint32_t *) (0x50000400 + 8)))

  // Field FRNUM: Frame number
    inline uint32_t OTG_FS_HOST_OTG_FS_HFNUM_FRNUM (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field FTREM: Frame time remaining
    inline uint32_t OTG_FS_HOST_OTG_FS_HFNUM_FTREM (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HPTXSTS: OTG_FS_Host periodic transmit FIFO/queue status register (OTG_FS_HPTXSTS)
  #define OTG_FS_HOST_OTG_FS_HPTXSTS (* ((volatile uint32_t *) (0x50000400 + 16)))

  // Field PTXFSAVL: Periodic transmit data FIFO space available
    inline uint32_t OTG_FS_HOST_OTG_FS_HPTXSTS_PTXFSAVL (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field PTXQSAV: Periodic transmit request queue space available
    inline uint32_t OTG_FS_HOST_OTG_FS_HPTXSTS_PTXQSAV (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field PTXQTOP: Top of the periodic transmit request queue
    inline uint32_t OTG_FS_HOST_OTG_FS_HPTXSTS_PTXQTOP (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HAINT: OTG_FS Host all channels interrupt register
  #define OTG_FS_HOST_OTG_FS_HAINT (* ((const volatile uint32_t *) (0x50000400 + 20)))

  // Field HAINT: Channel interrupts
    inline uint32_t OTG_FS_HOST_OTG_FS_HAINT_HAINT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HAINTMSK: OTG_FS host all channels interrupt mask register
  #define OTG_FS_HOST_OTG_FS_HAINTMSK (* ((volatile uint32_t *) (0x50000400 + 24)))

  // Field HAINTM: Channel interrupt mask
    inline uint32_t OTG_FS_HOST_OTG_FS_HAINTMSK_HAINTM (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HPRT: OTG_FS host port control and status register (OTG_FS_HPRT)
  #define OTG_FS_HOST_OTG_FS_HPRT (* ((volatile uint32_t *) (0x50000400 + 64)))

  // Field PCSTS: Port connect status
    const uint32_t OTG_FS_HOST_OTG_FS_HPRT_PCSTS = 1U << 0 ;

  // Field PCDET: Port connect detected
    const uint32_t OTG_FS_HOST_OTG_FS_HPRT_PCDET = 1U << 1 ;

  // Field PENA: Port enable
    const uint32_t OTG_FS_HOST_OTG_FS_HPRT_PENA = 1U << 2 ;

  // Field PENCHNG: Port enable/disable change
    const uint32_t OTG_FS_HOST_OTG_FS_HPRT_PENCHNG = 1U << 3 ;

  // Field POCA: Port overcurrent active
    const uint32_t OTG_FS_HOST_OTG_FS_HPRT_POCA = 1U << 4 ;

  // Field POCCHNG: Port overcurrent change
    const uint32_t OTG_FS_HOST_OTG_FS_HPRT_POCCHNG = 1U << 5 ;

  // Field PRES: Port resume
    const uint32_t OTG_FS_HOST_OTG_FS_HPRT_PRES = 1U << 6 ;

  // Field PSUSP: Port suspend
    const uint32_t OTG_FS_HOST_OTG_FS_HPRT_PSUSP = 1U << 7 ;

  // Field PRST: Port reset
    const uint32_t OTG_FS_HOST_OTG_FS_HPRT_PRST = 1U << 8 ;

  // Field PLSTS: Port line status
    inline uint32_t OTG_FS_HOST_OTG_FS_HPRT_PLSTS (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field PPWR: Port power
    const uint32_t OTG_FS_HOST_OTG_FS_HPRT_PPWR = 1U << 12 ;

  // Field PTCTL: Port test control
    inline uint32_t OTG_FS_HOST_OTG_FS_HPRT_PTCTL (const uint32_t inValue) {return (inValue & 0xFU) << 13 ; }

  // Field PSPD: Port speed
    inline uint32_t OTG_FS_HOST_OTG_FS_HPRT_PSPD (const uint32_t inValue) {return (inValue & 0x3U) << 17 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCCHAR0: OTG_FS host channel-0 characteristics register (OTG_FS_HCCHAR0)
  #define OTG_FS_HOST_OTG_FS_HCCHAR0 (* ((volatile uint32_t *) (0x50000400 + 256)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR0_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR0_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR0_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR0_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR0_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MCNT: Multicount
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR0_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR0_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR0_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR0_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR0_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCCHAR1: OTG_FS host channel-1 characteristics register (OTG_FS_HCCHAR1)
  #define OTG_FS_HOST_OTG_FS_HCCHAR1 (* ((volatile uint32_t *) (0x50000400 + 288)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR1_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR1_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR1_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR1_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR1_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MCNT: Multicount
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR1_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR1_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR1_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR1_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR1_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCCHAR2: OTG_FS host channel-2 characteristics register (OTG_FS_HCCHAR2)
  #define OTG_FS_HOST_OTG_FS_HCCHAR2 (* ((volatile uint32_t *) (0x50000400 + 320)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR2_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR2_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR2_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR2_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR2_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MCNT: Multicount
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR2_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR2_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR2_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR2_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR2_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCCHAR3: OTG_FS host channel-3 characteristics register (OTG_FS_HCCHAR3)
  #define OTG_FS_HOST_OTG_FS_HCCHAR3 (* ((volatile uint32_t *) (0x50000400 + 352)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR3_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR3_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR3_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR3_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR3_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MCNT: Multicount
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR3_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR3_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR3_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR3_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR3_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCCHAR4: OTG_FS host channel-4 characteristics register (OTG_FS_HCCHAR4)
  #define OTG_FS_HOST_OTG_FS_HCCHAR4 (* ((volatile uint32_t *) (0x50000400 + 384)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR4_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR4_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR4_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR4_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR4_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MCNT: Multicount
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR4_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR4_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR4_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR4_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR4_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCCHAR5: OTG_FS host channel-5 characteristics register (OTG_FS_HCCHAR5)
  #define OTG_FS_HOST_OTG_FS_HCCHAR5 (* ((volatile uint32_t *) (0x50000400 + 416)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR5_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR5_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR5_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR5_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR5_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MCNT: Multicount
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR5_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR5_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR5_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR5_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR5_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCCHAR6: OTG_FS host channel-6 characteristics register (OTG_FS_HCCHAR6)
  #define OTG_FS_HOST_OTG_FS_HCCHAR6 (* ((volatile uint32_t *) (0x50000400 + 448)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR6_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR6_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR6_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR6_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR6_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MCNT: Multicount
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR6_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR6_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR6_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR6_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR6_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCCHAR7: OTG_FS host channel-7 characteristics register (OTG_FS_HCCHAR7)
  #define OTG_FS_HOST_OTG_FS_HCCHAR7 (* ((volatile uint32_t *) (0x50000400 + 480)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR7_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR7_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR7_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR7_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR7_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MCNT: Multicount
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR7_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR7_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR7_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR7_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR7_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINT0: OTG_FS host channel-0 interrupt register (OTG_FS_HCINT0)
  #define OTG_FS_HOST_OTG_FS_HCINT0 (* ((volatile uint32_t *) (0x50000400 + 264)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT0_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT0_CHH = 1U << 1 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT0_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT0_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT0_ACK = 1U << 5 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT0_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT0_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT0_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT0_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINT1: OTG_FS host channel-1 interrupt register (OTG_FS_HCINT1)
  #define OTG_FS_HOST_OTG_FS_HCINT1 (* ((volatile uint32_t *) (0x50000400 + 296)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT1_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT1_CHH = 1U << 1 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT1_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT1_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT1_ACK = 1U << 5 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT1_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT1_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT1_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT1_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINT2: OTG_FS host channel-2 interrupt register (OTG_FS_HCINT2)
  #define OTG_FS_HOST_OTG_FS_HCINT2 (* ((volatile uint32_t *) (0x50000400 + 328)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT2_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT2_CHH = 1U << 1 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT2_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT2_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT2_ACK = 1U << 5 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT2_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT2_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT2_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT2_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINT3: OTG_FS host channel-3 interrupt register (OTG_FS_HCINT3)
  #define OTG_FS_HOST_OTG_FS_HCINT3 (* ((volatile uint32_t *) (0x50000400 + 360)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT3_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT3_CHH = 1U << 1 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT3_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT3_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT3_ACK = 1U << 5 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT3_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT3_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT3_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT3_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINT4: OTG_FS host channel-4 interrupt register (OTG_FS_HCINT4)
  #define OTG_FS_HOST_OTG_FS_HCINT4 (* ((volatile uint32_t *) (0x50000400 + 392)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT4_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT4_CHH = 1U << 1 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT4_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT4_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT4_ACK = 1U << 5 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT4_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT4_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT4_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT4_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINT5: OTG_FS host channel-5 interrupt register (OTG_FS_HCINT5)
  #define OTG_FS_HOST_OTG_FS_HCINT5 (* ((volatile uint32_t *) (0x50000400 + 424)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT5_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT5_CHH = 1U << 1 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT5_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT5_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT5_ACK = 1U << 5 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT5_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT5_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT5_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT5_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINT6: OTG_FS host channel-6 interrupt register (OTG_FS_HCINT6)
  #define OTG_FS_HOST_OTG_FS_HCINT6 (* ((volatile uint32_t *) (0x50000400 + 456)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT6_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT6_CHH = 1U << 1 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT6_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT6_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT6_ACK = 1U << 5 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT6_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT6_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT6_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT6_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINT7: OTG_FS host channel-7 interrupt register (OTG_FS_HCINT7)
  #define OTG_FS_HOST_OTG_FS_HCINT7 (* ((volatile uint32_t *) (0x50000400 + 488)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT7_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT7_CHH = 1U << 1 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT7_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT7_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT7_ACK = 1U << 5 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT7_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT7_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT7_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT7_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINTMSK0: OTG_FS host channel-0 mask register (OTG_FS_HCINTMSK0)
  #define OTG_FS_HOST_OTG_FS_HCINTMSK0 (* ((volatile uint32_t *) (0x50000400 + 268)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK0_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK0_CHHM = 1U << 1 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK0_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK0_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK0_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK0_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK0_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK0_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK0_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK0_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINTMSK1: OTG_FS host channel-1 mask register (OTG_FS_HCINTMSK1)
  #define OTG_FS_HOST_OTG_FS_HCINTMSK1 (* ((volatile uint32_t *) (0x50000400 + 300)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK1_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK1_CHHM = 1U << 1 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK1_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK1_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK1_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK1_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK1_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK1_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK1_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK1_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINTMSK2: OTG_FS host channel-2 mask register (OTG_FS_HCINTMSK2)
  #define OTG_FS_HOST_OTG_FS_HCINTMSK2 (* ((volatile uint32_t *) (0x50000400 + 332)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK2_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK2_CHHM = 1U << 1 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK2_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK2_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK2_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK2_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK2_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK2_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK2_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK2_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINTMSK3: OTG_FS host channel-3 mask register (OTG_FS_HCINTMSK3)
  #define OTG_FS_HOST_OTG_FS_HCINTMSK3 (* ((volatile uint32_t *) (0x50000400 + 364)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK3_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK3_CHHM = 1U << 1 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK3_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK3_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK3_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK3_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK3_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK3_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK3_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK3_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINTMSK4: OTG_FS host channel-4 mask register (OTG_FS_HCINTMSK4)
  #define OTG_FS_HOST_OTG_FS_HCINTMSK4 (* ((volatile uint32_t *) (0x50000400 + 396)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK4_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK4_CHHM = 1U << 1 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK4_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK4_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK4_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK4_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK4_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK4_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK4_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK4_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINTMSK5: OTG_FS host channel-5 mask register (OTG_FS_HCINTMSK5)
  #define OTG_FS_HOST_OTG_FS_HCINTMSK5 (* ((volatile uint32_t *) (0x50000400 + 428)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK5_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK5_CHHM = 1U << 1 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK5_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK5_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK5_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK5_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK5_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK5_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK5_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK5_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINTMSK6: OTG_FS host channel-6 mask register (OTG_FS_HCINTMSK6)
  #define OTG_FS_HOST_OTG_FS_HCINTMSK6 (* ((volatile uint32_t *) (0x50000400 + 460)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK6_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK6_CHHM = 1U << 1 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK6_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK6_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK6_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK6_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK6_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK6_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK6_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK6_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINTMSK7: OTG_FS host channel-7 mask register (OTG_FS_HCINTMSK7)
  #define OTG_FS_HOST_OTG_FS_HCINTMSK7 (* ((volatile uint32_t *) (0x50000400 + 492)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK7_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK7_CHHM = 1U << 1 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK7_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK7_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK7_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK7_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK7_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK7_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK7_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK7_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCTSIZ0: OTG_FS host channel-0 transfer size register
  #define OTG_FS_HOST_OTG_FS_HCTSIZ0 (* ((volatile uint32_t *) (0x50000400 + 272)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ0_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ0_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ0_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCTSIZ1: OTG_FS host channel-1 transfer size register
  #define OTG_FS_HOST_OTG_FS_HCTSIZ1 (* ((volatile uint32_t *) (0x50000400 + 304)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ1_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ1_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ1_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCTSIZ2: OTG_FS host channel-2 transfer size register
  #define OTG_FS_HOST_OTG_FS_HCTSIZ2 (* ((volatile uint32_t *) (0x50000400 + 336)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ2_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ2_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ2_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCTSIZ3: OTG_FS host channel-3 transfer size register
  #define OTG_FS_HOST_OTG_FS_HCTSIZ3 (* ((volatile uint32_t *) (0x50000400 + 368)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ3_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ3_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ3_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCTSIZ4: OTG_FS host channel-x transfer size register
  #define OTG_FS_HOST_OTG_FS_HCTSIZ4 (* ((volatile uint32_t *) (0x50000400 + 400)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ4_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ4_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ4_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCTSIZ5: OTG_FS host channel-5 transfer size register
  #define OTG_FS_HOST_OTG_FS_HCTSIZ5 (* ((volatile uint32_t *) (0x50000400 + 432)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ5_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ5_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ5_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCTSIZ6: OTG_FS host channel-6 transfer size register
  #define OTG_FS_HOST_OTG_FS_HCTSIZ6 (* ((volatile uint32_t *) (0x50000400 + 464)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ6_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ6_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ6_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCTSIZ7: OTG_FS host channel-7 transfer size register
  #define OTG_FS_HOST_OTG_FS_HCTSIZ7 (* ((volatile uint32_t *) (0x50000400 + 496)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ7_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ7_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ7_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCCHAR8: OTG_FS host channel-8 characteristics register
  #define OTG_FS_HOST_OTG_FS_HCCHAR8 (* ((volatile uint32_t *) (0x50000400 + 500)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR8_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR8_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR8_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR8_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR8_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MCNT: Multicount
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR8_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR8_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR8_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR8_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR8_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINT8: OTG_FS host channel-8 interrupt register
  #define OTG_FS_HOST_OTG_FS_HCINT8 (* ((volatile uint32_t *) (0x50000400 + 504)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT8_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT8_CHH = 1U << 1 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT8_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT8_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT8_ACK = 1U << 5 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT8_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT8_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT8_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT8_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINTMSK8: OTG_FS host channel-8 mask register
  #define OTG_FS_HOST_OTG_FS_HCINTMSK8 (* ((volatile uint32_t *) (0x50000400 + 508)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK8_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK8_CHHM = 1U << 1 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK8_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK8_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK8_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK8_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK8_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK8_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK8_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK8_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCTSIZ8: OTG_FS host channel-8 transfer size register
  #define OTG_FS_HOST_OTG_FS_HCTSIZ8 (* ((volatile uint32_t *) (0x50000400 + 512)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ8_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ8_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ8_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCCHAR9: OTG_FS host channel-9 characteristics register
  #define OTG_FS_HOST_OTG_FS_HCCHAR9 (* ((volatile uint32_t *) (0x50000400 + 516)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR9_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR9_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR9_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR9_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR9_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MCNT: Multicount
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR9_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR9_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR9_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR9_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR9_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINT9: OTG_FS host channel-9 interrupt register
  #define OTG_FS_HOST_OTG_FS_HCINT9 (* ((volatile uint32_t *) (0x50000400 + 520)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT9_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT9_CHH = 1U << 1 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT9_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT9_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT9_ACK = 1U << 5 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT9_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT9_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT9_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT9_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINTMSK9: OTG_FS host channel-9 mask register
  #define OTG_FS_HOST_OTG_FS_HCINTMSK9 (* ((volatile uint32_t *) (0x50000400 + 524)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK9_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK9_CHHM = 1U << 1 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK9_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK9_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK9_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK9_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK9_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK9_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK9_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK9_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCTSIZ9: OTG_FS host channel-9 transfer size register
  #define OTG_FS_HOST_OTG_FS_HCTSIZ9 (* ((volatile uint32_t *) (0x50000400 + 528)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ9_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ9_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ9_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCCHAR10: OTG_FS host channel-10 characteristics register
  #define OTG_FS_HOST_OTG_FS_HCCHAR10 (* ((volatile uint32_t *) (0x50000400 + 532)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR10_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR10_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR10_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR10_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR10_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MCNT: Multicount
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR10_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR10_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR10_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR10_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR10_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINT10: OTG_FS host channel-10 interrupt register
  #define OTG_FS_HOST_OTG_FS_HCINT10 (* ((volatile uint32_t *) (0x50000400 + 536)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT10_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT10_CHH = 1U << 1 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT10_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT10_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT10_ACK = 1U << 5 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT10_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT10_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT10_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT10_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINTMSK10: OTG_FS host channel-10 mask register
  #define OTG_FS_HOST_OTG_FS_HCINTMSK10 (* ((volatile uint32_t *) (0x50000400 + 540)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK10_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK10_CHHM = 1U << 1 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK10_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK10_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK10_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK10_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK10_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK10_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK10_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK10_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCTSIZ10: OTG_FS host channel-10 transfer size register
  #define OTG_FS_HOST_OTG_FS_HCTSIZ10 (* ((volatile uint32_t *) (0x50000400 + 544)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ10_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ10_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ10_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCCHAR11: OTG_FS host channel-11 characteristics register
  #define OTG_FS_HOST_OTG_FS_HCCHAR11 (* ((volatile uint32_t *) (0x50000400 + 548)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR11_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR11_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR11_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR11_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR11_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MCNT: Multicount
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR11_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_FS_HOST_OTG_FS_HCCHAR11_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR11_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR11_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_FS_HOST_OTG_FS_HCCHAR11_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINT11: OTG_FS host channel-11 interrupt register
  #define OTG_FS_HOST_OTG_FS_HCINT11 (* ((volatile uint32_t *) (0x50000400 + 552)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT11_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT11_CHH = 1U << 1 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT11_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT11_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT11_ACK = 1U << 5 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT11_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT11_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT11_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_FS_HOST_OTG_FS_HCINT11_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCINTMSK11: OTG_FS host channel-11 mask register
  #define OTG_FS_HOST_OTG_FS_HCINTMSK11 (* ((volatile uint32_t *) (0x50000400 + 556)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK11_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK11_CHHM = 1U << 1 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK11_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK11_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK11_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK11_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK11_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK11_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK11_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_FS_HOST_OTG_FS_HCINTMSK11_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_FS_HCTSIZ11: OTG_FS host channel-11 transfer size register
  #define OTG_FS_HOST_OTG_FS_HCTSIZ11 (* ((volatile uint32_t *) (0x50000400 + 560)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ11_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ11_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_FS_HOST_OTG_FS_HCTSIZ11_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------
// Peripheral OTG_FS_PWRCLK: USB on the go full speed
//------------------------------------------------------------------------------

//---  Register OTG_FS_PCGCCTL: OTG_FS power and clock gating control register (OTG_FS_PCGCCTL)
  #define OTG_FS_PWRCLK_OTG_FS_PCGCCTL (* ((volatile uint32_t *) (0x50000E00 + 0)))

  // Field STPPCLK: Stop PHY clock
    const uint32_t OTG_FS_PWRCLK_OTG_FS_PCGCCTL_STPPCLK = 1U << 0 ;

  // Field GATEHCLK: Gate HCLK
    const uint32_t OTG_FS_PWRCLK_OTG_FS_PCGCCTL_GATEHCLK = 1U << 1 ;

  // Field PHYSUSP: PHY Suspended
    const uint32_t OTG_FS_PWRCLK_OTG_FS_PCGCCTL_PHYSUSP = 1U << 4 ;

//------------------------------------------------------------------------------
// Peripheral OTG_HS_DEVICE: USB on the go high speed
//------------------------------------------------------------------------------

//---  Register OTG_HS_DCFG: OTG_HS device configuration register
  #define OTG_HS_DEVICE_OTG_HS_DCFG (* ((volatile uint32_t *) (0x40040800 + 0)))

  // Field DSPD: Device speed
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DCFG_DSPD (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field NZLSOHSK: Nonzero-length status OUT handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DCFG_NZLSOHSK = 1U << 2 ;

  // Field DAD: Device address
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DCFG_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 4 ; }

  // Field PFIVL: Periodic (micro)frame interval
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DCFG_PFIVL (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field PERSCHIVL: Periodic scheduling interval
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DCFG_PERSCHIVL (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DCTL: OTG_HS device control register
  #define OTG_HS_DEVICE_OTG_HS_DCTL (* ((volatile uint32_t *) (0x40040800 + 4)))

  // Field RWUSIG: Remote wakeup signaling
    const uint32_t OTG_HS_DEVICE_OTG_HS_DCTL_RWUSIG = 1U << 0 ;

  // Field SDIS: Soft disconnect
    const uint32_t OTG_HS_DEVICE_OTG_HS_DCTL_SDIS = 1U << 1 ;

  // Field GINSTS: Global IN NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DCTL_GINSTS = 1U << 2 ;

  // Field GONSTS: Global OUT NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DCTL_GONSTS = 1U << 3 ;

  // Field TCTL: Test control
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DCTL_TCTL (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SGINAK: Set global IN NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DCTL_SGINAK = 1U << 7 ;

  // Field CGINAK: Clear global IN NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DCTL_CGINAK = 1U << 8 ;

  // Field SGONAK: Set global OUT NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DCTL_SGONAK = 1U << 9 ;

  // Field CGONAK: Clear global OUT NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DCTL_CGONAK = 1U << 10 ;

  // Field POPRGDNE: Power-on programming done
    const uint32_t OTG_HS_DEVICE_OTG_HS_DCTL_POPRGDNE = 1U << 11 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DSTS: OTG_HS device status register
  #define OTG_HS_DEVICE_OTG_HS_DSTS (* ((const volatile uint32_t *) (0x40040800 + 8)))

  // Field SUSPSTS: Suspend status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DSTS_SUSPSTS = 1U << 0 ;

  // Field ENUMSPD: Enumerated speed
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DSTS_ENUMSPD (const uint32_t inValue) {return (inValue & 0x3U) << 1 ; }

  // Field EERR: Erratic error
    const uint32_t OTG_HS_DEVICE_OTG_HS_DSTS_EERR = 1U << 3 ;

  // Field FNSOF: Frame number of the received SOF
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DSTS_FNSOF (const uint32_t inValue) {return (inValue & 0x3FFFU) << 8 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPMSK: OTG_HS device IN endpoint common interrupt mask register
  #define OTG_HS_DEVICE_OTG_HS_DIEPMSK (* ((volatile uint32_t *) (0x40040800 + 16)))

  // Field XFRCM: Transfer completed interrupt mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPMSK_XFRCM = 1U << 0 ;

  // Field EPDM: Endpoint disabled interrupt mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPMSK_EPDM = 1U << 1 ;

  // Field TOM: Timeout condition mask (nonisochronous endpoints)
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPMSK_TOM = 1U << 3 ;

  // Field ITTXFEMSK: IN token received when TxFIFO empty mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPMSK_ITTXFEMSK = 1U << 4 ;

  // Field INEPNMM: IN token received with EP mismatch mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNMM = 1U << 5 ;

  // Field INEPNEM: IN endpoint NAK effective mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNEM = 1U << 6 ;

  // Field TXFURM: FIFO underrun mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPMSK_TXFURM = 1U << 8 ;

  // Field BIM: BNA interrupt mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPMSK_BIM = 1U << 9 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPMSK: OTG_HS device OUT endpoint common interrupt mask register
  #define OTG_HS_DEVICE_OTG_HS_DOEPMSK (* ((volatile uint32_t *) (0x40040800 + 20)))

  // Field XFRCM: Transfer completed interrupt mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPMSK_XFRCM = 1U << 0 ;

  // Field EPDM: Endpoint disabled interrupt mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPMSK_EPDM = 1U << 1 ;

  // Field STUPM: SETUP phase done mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPMSK_STUPM = 1U << 3 ;

  // Field OTEPDM: OUT token received when endpoint disabled mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPMSK_OTEPDM = 1U << 4 ;

  // Field B2BSTUP: Back-to-back SETUP packets received mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPMSK_B2BSTUP = 1U << 6 ;

  // Field OPEM: OUT packet error mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPMSK_OPEM = 1U << 8 ;

  // Field BOIM: BNA interrupt mask
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPMSK_BOIM = 1U << 9 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DAINT: OTG_HS device all endpoints interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DAINT (* ((const volatile uint32_t *) (0x40040800 + 24)))

  // Field IEPINT: IN endpoint interrupt bits
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DAINT_IEPINT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field OEPINT: OUT endpoint interrupt bits
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DAINT_OEPINT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DAINTMSK: OTG_HS all endpoints interrupt mask register
  #define OTG_HS_DEVICE_OTG_HS_DAINTMSK (* ((volatile uint32_t *) (0x40040800 + 28)))

  // Field IEPM: IN EP interrupt mask bits
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DAINTMSK_IEPM (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field OEPM: OUT EP interrupt mask bits
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DAINTMSK_OEPM (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DVBUSDIS: OTG_HS device VBUS discharge time register
  #define OTG_HS_DEVICE_OTG_HS_DVBUSDIS (* ((volatile uint32_t *) (0x40040800 + 40)))

  // Field VBUSDT: Device VBUS discharge time
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DVBUSDIS_VBUSDT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DVBUSPULSE: OTG_HS device VBUS pulsing time register
  #define OTG_HS_DEVICE_OTG_HS_DVBUSPULSE (* ((volatile uint32_t *) (0x40040800 + 44)))

  // Field DVBUSP: Device VBUS pulsing time
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_DVBUSP (const uint32_t inValue) {return (inValue & 0xFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DTHRCTL: OTG_HS Device threshold control register
  #define OTG_HS_DEVICE_OTG_HS_DTHRCTL (* ((volatile uint32_t *) (0x40040800 + 48)))

  // Field NONISOTHREN: Nonisochronous IN endpoints threshold enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DTHRCTL_NONISOTHREN = 1U << 0 ;

  // Field ISOTHREN: ISO IN endpoint threshold enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DTHRCTL_ISOTHREN = 1U << 1 ;

  // Field TXTHRLEN: Transmit threshold length
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DTHRCTL_TXTHRLEN (const uint32_t inValue) {return (inValue & 0x1FFU) << 2 ; }

  // Field RXTHREN: Receive threshold enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHREN = 1U << 16 ;

  // Field RXTHRLEN: Receive threshold length
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHRLEN (const uint32_t inValue) {return (inValue & 0x1FFU) << 17 ; }

  // Field ARPEN: Arbiter parking enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DTHRCTL_ARPEN = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPEMPMSK: OTG_HS device IN endpoint FIFO empty interrupt mask register
  #define OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK (* ((volatile uint32_t *) (0x40040800 + 52)))

  // Field INEPTXFEM: IN EP Tx FIFO empty interrupt mask bits
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_INEPTXFEM (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DEACHINT: OTG_HS device each endpoint interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DEACHINT (* ((volatile uint32_t *) (0x40040800 + 56)))

  // Field IEP1INT: IN endpoint 1interrupt bit
    const uint32_t OTG_HS_DEVICE_OTG_HS_DEACHINT_IEP1INT = 1U << 1 ;

  // Field OEP1INT: OUT endpoint 1 interrupt bit
    const uint32_t OTG_HS_DEVICE_OTG_HS_DEACHINT_OEP1INT = 1U << 17 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DEACHINTMSK: OTG_HS device each endpoint interrupt register mask
  #define OTG_HS_DEVICE_OTG_HS_DEACHINTMSK (* ((volatile uint32_t *) (0x40040800 + 60)))

  // Field IEP1INTM: IN Endpoint 1 interrupt mask bit
    const uint32_t OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_IEP1INTM = 1U << 1 ;

  // Field OEP1INTM: OUT Endpoint 1 interrupt mask bit
    const uint32_t OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_OEP1INTM = 1U << 17 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPCTL0: OTG device endpoint-0 control register
  #define OTG_HS_DEVICE_OTG_HS_DIEPCTL0 (* ((volatile uint32_t *) (0x40040800 + 256)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL0_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL0_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even/odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL0_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Stall = 1U << 21 ;

  // Field TXFNUM: TxFIFO number
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL0_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL0_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPCTL1: OTG device endpoint-1 control register
  #define OTG_HS_DEVICE_OTG_HS_DIEPCTL1 (* ((volatile uint32_t *) (0x40040800 + 288)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL1_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL1_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even/odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL1_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Stall = 1U << 21 ;

  // Field TXFNUM: TxFIFO number
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL1_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL1_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPCTL2: OTG device endpoint-2 control register
  #define OTG_HS_DEVICE_OTG_HS_DIEPCTL2 (* ((volatile uint32_t *) (0x40040800 + 320)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL2_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL2_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even/odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL2_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Stall = 1U << 21 ;

  // Field TXFNUM: TxFIFO number
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL2_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL2_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPCTL3: OTG device endpoint-3 control register
  #define OTG_HS_DEVICE_OTG_HS_DIEPCTL3 (* ((volatile uint32_t *) (0x40040800 + 352)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL3_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL3_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even/odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL3_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Stall = 1U << 21 ;

  // Field TXFNUM: TxFIFO number
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL3_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL3_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPCTL4: OTG device endpoint-4 control register
  #define OTG_HS_DEVICE_OTG_HS_DIEPCTL4 (* ((volatile uint32_t *) (0x40040800 + 384)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL4_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL4_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even/odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL4_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Stall = 1U << 21 ;

  // Field TXFNUM: TxFIFO number
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL4_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL4_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPCTL5: OTG device endpoint-5 control register
  #define OTG_HS_DEVICE_OTG_HS_DIEPCTL5 (* ((volatile uint32_t *) (0x40040800 + 416)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL5_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL5_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even/odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL5_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Stall = 1U << 21 ;

  // Field TXFNUM: TxFIFO number
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL5_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL5_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPCTL6: OTG device endpoint-6 control register
  #define OTG_HS_DEVICE_OTG_HS_DIEPCTL6 (* ((volatile uint32_t *) (0x40040800 + 448)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL6_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL6_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even/odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL6_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Stall = 1U << 21 ;

  // Field TXFNUM: TxFIFO number
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL6_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL6_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPCTL7: OTG device endpoint-7 control register
  #define OTG_HS_DEVICE_OTG_HS_DIEPCTL7 (* ((volatile uint32_t *) (0x40040800 + 480)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL7_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL7_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even/odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL7_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Stall = 1U << 21 ;

  // Field TXFNUM: TxFIFO number
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL7_TXFNUM (const uint32_t inValue) {return (inValue & 0xFU) << 22 ; }

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL7_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPINT0: OTG device endpoint-0 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DIEPINT0 (* ((volatile uint32_t *) (0x40040800 + 264)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT0_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT0_EPDISD = 1U << 1 ;

  // Field TOC: Timeout condition
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT0_TOC = 1U << 3 ;

  // Field ITTXFE: IN token received when TxFIFO is empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT0_ITTXFE = 1U << 4 ;

  // Field INEPNE: IN endpoint NAK effective
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT0_INEPNE = 1U << 6 ;

  // Field TXFE: Transmit FIFO empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFE = 1U << 7 ;

  // Field TXFIFOUDRN: Transmit Fifo Underrun
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFIFOUDRN = 1U << 8 ;

  // Field BNA: Buffer not available interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT0_BNA = 1U << 9 ;

  // Field PKTDRPSTS: Packet dropped status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT0_PKTDRPSTS = 1U << 11 ;

  // Field BERR: Babble error interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT0_BERR = 1U << 12 ;

  // Field NAK: NAK interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT0_NAK = 1U << 13 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPINT1: OTG device endpoint-1 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DIEPINT1 (* ((volatile uint32_t *) (0x40040800 + 296)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT1_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT1_EPDISD = 1U << 1 ;

  // Field TOC: Timeout condition
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT1_TOC = 1U << 3 ;

  // Field ITTXFE: IN token received when TxFIFO is empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT1_ITTXFE = 1U << 4 ;

  // Field INEPNE: IN endpoint NAK effective
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT1_INEPNE = 1U << 6 ;

  // Field TXFE: Transmit FIFO empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFE = 1U << 7 ;

  // Field TXFIFOUDRN: Transmit Fifo Underrun
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFIFOUDRN = 1U << 8 ;

  // Field BNA: Buffer not available interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT1_BNA = 1U << 9 ;

  // Field PKTDRPSTS: Packet dropped status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT1_PKTDRPSTS = 1U << 11 ;

  // Field BERR: Babble error interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT1_BERR = 1U << 12 ;

  // Field NAK: NAK interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT1_NAK = 1U << 13 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPINT2: OTG device endpoint-2 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DIEPINT2 (* ((volatile uint32_t *) (0x40040800 + 328)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT2_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT2_EPDISD = 1U << 1 ;

  // Field TOC: Timeout condition
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT2_TOC = 1U << 3 ;

  // Field ITTXFE: IN token received when TxFIFO is empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT2_ITTXFE = 1U << 4 ;

  // Field INEPNE: IN endpoint NAK effective
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT2_INEPNE = 1U << 6 ;

  // Field TXFE: Transmit FIFO empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFE = 1U << 7 ;

  // Field TXFIFOUDRN: Transmit Fifo Underrun
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFIFOUDRN = 1U << 8 ;

  // Field BNA: Buffer not available interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT2_BNA = 1U << 9 ;

  // Field PKTDRPSTS: Packet dropped status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT2_PKTDRPSTS = 1U << 11 ;

  // Field BERR: Babble error interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT2_BERR = 1U << 12 ;

  // Field NAK: NAK interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT2_NAK = 1U << 13 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPINT3: OTG device endpoint-3 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DIEPINT3 (* ((volatile uint32_t *) (0x40040800 + 360)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT3_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT3_EPDISD = 1U << 1 ;

  // Field TOC: Timeout condition
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT3_TOC = 1U << 3 ;

  // Field ITTXFE: IN token received when TxFIFO is empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT3_ITTXFE = 1U << 4 ;

  // Field INEPNE: IN endpoint NAK effective
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT3_INEPNE = 1U << 6 ;

  // Field TXFE: Transmit FIFO empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFE = 1U << 7 ;

  // Field TXFIFOUDRN: Transmit Fifo Underrun
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFIFOUDRN = 1U << 8 ;

  // Field BNA: Buffer not available interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT3_BNA = 1U << 9 ;

  // Field PKTDRPSTS: Packet dropped status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT3_PKTDRPSTS = 1U << 11 ;

  // Field BERR: Babble error interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT3_BERR = 1U << 12 ;

  // Field NAK: NAK interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT3_NAK = 1U << 13 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPINT4: OTG device endpoint-4 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DIEPINT4 (* ((volatile uint32_t *) (0x40040800 + 392)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT4_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT4_EPDISD = 1U << 1 ;

  // Field TOC: Timeout condition
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT4_TOC = 1U << 3 ;

  // Field ITTXFE: IN token received when TxFIFO is empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT4_ITTXFE = 1U << 4 ;

  // Field INEPNE: IN endpoint NAK effective
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT4_INEPNE = 1U << 6 ;

  // Field TXFE: Transmit FIFO empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFE = 1U << 7 ;

  // Field TXFIFOUDRN: Transmit Fifo Underrun
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFIFOUDRN = 1U << 8 ;

  // Field BNA: Buffer not available interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT4_BNA = 1U << 9 ;

  // Field PKTDRPSTS: Packet dropped status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT4_PKTDRPSTS = 1U << 11 ;

  // Field BERR: Babble error interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT4_BERR = 1U << 12 ;

  // Field NAK: NAK interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT4_NAK = 1U << 13 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPINT5: OTG device endpoint-5 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DIEPINT5 (* ((volatile uint32_t *) (0x40040800 + 424)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT5_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT5_EPDISD = 1U << 1 ;

  // Field TOC: Timeout condition
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT5_TOC = 1U << 3 ;

  // Field ITTXFE: IN token received when TxFIFO is empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT5_ITTXFE = 1U << 4 ;

  // Field INEPNE: IN endpoint NAK effective
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT5_INEPNE = 1U << 6 ;

  // Field TXFE: Transmit FIFO empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFE = 1U << 7 ;

  // Field TXFIFOUDRN: Transmit Fifo Underrun
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFIFOUDRN = 1U << 8 ;

  // Field BNA: Buffer not available interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT5_BNA = 1U << 9 ;

  // Field PKTDRPSTS: Packet dropped status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT5_PKTDRPSTS = 1U << 11 ;

  // Field BERR: Babble error interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT5_BERR = 1U << 12 ;

  // Field NAK: NAK interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT5_NAK = 1U << 13 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPINT6: OTG device endpoint-6 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DIEPINT6 (* ((volatile uint32_t *) (0x40040800 + 456)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT6_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT6_EPDISD = 1U << 1 ;

  // Field TOC: Timeout condition
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT6_TOC = 1U << 3 ;

  // Field ITTXFE: IN token received when TxFIFO is empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT6_ITTXFE = 1U << 4 ;

  // Field INEPNE: IN endpoint NAK effective
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT6_INEPNE = 1U << 6 ;

  // Field TXFE: Transmit FIFO empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFE = 1U << 7 ;

  // Field TXFIFOUDRN: Transmit Fifo Underrun
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFIFOUDRN = 1U << 8 ;

  // Field BNA: Buffer not available interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT6_BNA = 1U << 9 ;

  // Field PKTDRPSTS: Packet dropped status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT6_PKTDRPSTS = 1U << 11 ;

  // Field BERR: Babble error interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT6_BERR = 1U << 12 ;

  // Field NAK: NAK interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT6_NAK = 1U << 13 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPINT7: OTG device endpoint-7 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DIEPINT7 (* ((volatile uint32_t *) (0x40040800 + 488)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT7_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT7_EPDISD = 1U << 1 ;

  // Field TOC: Timeout condition
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT7_TOC = 1U << 3 ;

  // Field ITTXFE: IN token received when TxFIFO is empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT7_ITTXFE = 1U << 4 ;

  // Field INEPNE: IN endpoint NAK effective
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT7_INEPNE = 1U << 6 ;

  // Field TXFE: Transmit FIFO empty
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFE = 1U << 7 ;

  // Field TXFIFOUDRN: Transmit Fifo Underrun
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFIFOUDRN = 1U << 8 ;

  // Field BNA: Buffer not available interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT7_BNA = 1U << 9 ;

  // Field PKTDRPSTS: Packet dropped status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT7_PKTDRPSTS = 1U << 11 ;

  // Field BERR: Babble error interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT7_BERR = 1U << 12 ;

  // Field NAK: NAK interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DIEPINT7_NAK = 1U << 13 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTSIZ0: OTG_HS device IN endpoint 0 transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0 (* ((volatile uint32_t *) (0x40040800 + 272)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_PKTCNT (const uint32_t inValue) {return (inValue & 0x3U) << 19 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPDMA1: OTG_HS device endpoint-1 DMA address register
  #define OTG_HS_DEVICE_OTG_HS_DIEPDMA1 (* ((volatile uint32_t *) (0x40040800 + 276)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPDMA1_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPDMA2: OTG_HS device endpoint-2 DMA address register
  #define OTG_HS_DEVICE_OTG_HS_DIEPDMA2 (* ((volatile uint32_t *) (0x40040800 + 308)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPDMA2_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPDMA3: OTG_HS device endpoint-3 DMA address register
  #define OTG_HS_DEVICE_OTG_HS_DIEPDMA3 (* ((volatile uint32_t *) (0x40040800 + 340)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPDMA3_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPDMA4: OTG_HS device endpoint-4 DMA address register
  #define OTG_HS_DEVICE_OTG_HS_DIEPDMA4 (* ((volatile uint32_t *) (0x40040800 + 372)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPDMA4_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPDMA5: OTG_HS device endpoint-5 DMA address register
  #define OTG_HS_DEVICE_OTG_HS_DIEPDMA5 (* ((volatile uint32_t *) (0x40040800 + 404)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPDMA5_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DTXFSTS0: OTG_HS device IN endpoint transmit FIFO status register
  #define OTG_HS_DEVICE_OTG_HS_DTXFSTS0 (* ((const volatile uint32_t *) (0x40040800 + 280)))

  // Field INEPTFSAV: IN endpoint TxFIFO space avail
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DTXFSTS0_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DTXFSTS1: OTG_HS device IN endpoint transmit FIFO status register
  #define OTG_HS_DEVICE_OTG_HS_DTXFSTS1 (* ((const volatile uint32_t *) (0x40040800 + 312)))

  // Field INEPTFSAV: IN endpoint TxFIFO space avail
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DTXFSTS1_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DTXFSTS2: OTG_HS device IN endpoint transmit FIFO status register
  #define OTG_HS_DEVICE_OTG_HS_DTXFSTS2 (* ((const volatile uint32_t *) (0x40040800 + 344)))

  // Field INEPTFSAV: IN endpoint TxFIFO space avail
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DTXFSTS2_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DTXFSTS3: OTG_HS device IN endpoint transmit FIFO status register
  #define OTG_HS_DEVICE_OTG_HS_DTXFSTS3 (* ((const volatile uint32_t *) (0x40040800 + 376)))

  // Field INEPTFSAV: IN endpoint TxFIFO space avail
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DTXFSTS3_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DTXFSTS4: OTG_HS device IN endpoint transmit FIFO status register
  #define OTG_HS_DEVICE_OTG_HS_DTXFSTS4 (* ((const volatile uint32_t *) (0x40040800 + 408)))

  // Field INEPTFSAV: IN endpoint TxFIFO space avail
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DTXFSTS4_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DTXFSTS5: OTG_HS device IN endpoint transmit FIFO status register
  #define OTG_HS_DEVICE_OTG_HS_DTXFSTS5 (* ((const volatile uint32_t *) (0x40040800 + 440)))

  // Field INEPTFSAV: IN endpoint TxFIFO space avail
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DTXFSTS5_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTSIZ1: OTG_HS device endpoint transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1 (* ((volatile uint32_t *) (0x40040800 + 304)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field MCNT: Multi count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTSIZ2: OTG_HS device endpoint transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2 (* ((volatile uint32_t *) (0x40040800 + 336)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field MCNT: Multi count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTSIZ3: OTG_HS device endpoint transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3 (* ((volatile uint32_t *) (0x40040800 + 368)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field MCNT: Multi count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTSIZ4: OTG_HS device endpoint transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4 (* ((volatile uint32_t *) (0x40040800 + 400)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field MCNT: Multi count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTSIZ5: OTG_HS device endpoint transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5 (* ((volatile uint32_t *) (0x40040800 + 432)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field MCNT: Multi count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPCTL0: OTG_HS device control OUT endpoint 0 control register
  #define OTG_HS_DEVICE_OTG_HS_DOEPCTL0 (* ((volatile uint32_t *) (0x40040800 + 768)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL0_MPSIZ (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL0_USBAEP = 1U << 15 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL0_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field SNPM: Snoop mode
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNPM = 1U << 20 ;

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Stall = 1U << 21 ;

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL0_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNAK = 1U << 27 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPCTL1: OTG device endpoint-1 control register
  #define OTG_HS_DEVICE_OTG_HS_DOEPCTL1 (* ((volatile uint32_t *) (0x40040800 + 800)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL1_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL1_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even odd frame/Endpoint data PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL1_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field SNPM: Snoop mode
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNPM = 1U << 20 ;

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Stall = 1U << 21 ;

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL1_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID/Set even frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPCTL2: OTG device endpoint-2 control register
  #define OTG_HS_DEVICE_OTG_HS_DOEPCTL2 (* ((volatile uint32_t *) (0x40040800 + 832)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL2_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL2_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even odd frame/Endpoint data PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL2_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field SNPM: Snoop mode
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNPM = 1U << 20 ;

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Stall = 1U << 21 ;

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL2_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID/Set even frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPCTL3: OTG device endpoint-3 control register
  #define OTG_HS_DEVICE_OTG_HS_DOEPCTL3 (* ((volatile uint32_t *) (0x40040800 + 864)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL3_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL3_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even odd frame/Endpoint data PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL3_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field SNPM: Snoop mode
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNPM = 1U << 20 ;

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Stall = 1U << 21 ;

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL3_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID/Set even frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPINT0: OTG_HS device endpoint-0 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DOEPINT0 (* ((volatile uint32_t *) (0x40040800 + 776)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT0_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT0_EPDISD = 1U << 1 ;

  // Field STUP: SETUP phase done
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT0_STUP = 1U << 3 ;

  // Field OTEPDIS: OUT token received when endpoint disabled
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT0_OTEPDIS = 1U << 4 ;

  // Field B2BSTUP: Back-to-back SETUP packets received
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT0_B2BSTUP = 1U << 6 ;

  // Field NYET: NYET interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT0_NYET = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPINT1: OTG_HS device endpoint-1 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DOEPINT1 (* ((volatile uint32_t *) (0x40040800 + 808)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT1_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT1_EPDISD = 1U << 1 ;

  // Field STUP: SETUP phase done
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT1_STUP = 1U << 3 ;

  // Field OTEPDIS: OUT token received when endpoint disabled
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT1_OTEPDIS = 1U << 4 ;

  // Field B2BSTUP: Back-to-back SETUP packets received
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT1_B2BSTUP = 1U << 6 ;

  // Field NYET: NYET interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT1_NYET = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPINT2: OTG_HS device endpoint-2 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DOEPINT2 (* ((volatile uint32_t *) (0x40040800 + 840)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT2_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT2_EPDISD = 1U << 1 ;

  // Field STUP: SETUP phase done
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT2_STUP = 1U << 3 ;

  // Field OTEPDIS: OUT token received when endpoint disabled
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT2_OTEPDIS = 1U << 4 ;

  // Field B2BSTUP: Back-to-back SETUP packets received
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT2_B2BSTUP = 1U << 6 ;

  // Field NYET: NYET interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT2_NYET = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPINT3: OTG_HS device endpoint-3 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DOEPINT3 (* ((volatile uint32_t *) (0x40040800 + 872)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT3_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT3_EPDISD = 1U << 1 ;

  // Field STUP: SETUP phase done
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT3_STUP = 1U << 3 ;

  // Field OTEPDIS: OUT token received when endpoint disabled
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT3_OTEPDIS = 1U << 4 ;

  // Field B2BSTUP: Back-to-back SETUP packets received
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT3_B2BSTUP = 1U << 6 ;

  // Field NYET: NYET interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT3_NYET = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPINT4: OTG_HS device endpoint-4 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DOEPINT4 (* ((volatile uint32_t *) (0x40040800 + 904)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT4_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT4_EPDISD = 1U << 1 ;

  // Field STUP: SETUP phase done
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT4_STUP = 1U << 3 ;

  // Field OTEPDIS: OUT token received when endpoint disabled
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT4_OTEPDIS = 1U << 4 ;

  // Field B2BSTUP: Back-to-back SETUP packets received
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT4_B2BSTUP = 1U << 6 ;

  // Field NYET: NYET interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT4_NYET = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPINT5: OTG_HS device endpoint-5 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DOEPINT5 (* ((volatile uint32_t *) (0x40040800 + 936)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT5_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT5_EPDISD = 1U << 1 ;

  // Field STUP: SETUP phase done
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT5_STUP = 1U << 3 ;

  // Field OTEPDIS: OUT token received when endpoint disabled
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT5_OTEPDIS = 1U << 4 ;

  // Field B2BSTUP: Back-to-back SETUP packets received
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT5_B2BSTUP = 1U << 6 ;

  // Field NYET: NYET interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT5_NYET = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPINT6: OTG_HS device endpoint-6 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DOEPINT6 (* ((volatile uint32_t *) (0x40040800 + 968)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT6_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT6_EPDISD = 1U << 1 ;

  // Field STUP: SETUP phase done
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT6_STUP = 1U << 3 ;

  // Field OTEPDIS: OUT token received when endpoint disabled
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT6_OTEPDIS = 1U << 4 ;

  // Field B2BSTUP: Back-to-back SETUP packets received
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT6_B2BSTUP = 1U << 6 ;

  // Field NYET: NYET interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT6_NYET = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPINT7: OTG_HS device endpoint-7 interrupt register
  #define OTG_HS_DEVICE_OTG_HS_DOEPINT7 (* ((volatile uint32_t *) (0x40040800 + 1000)))

  // Field XFRC: Transfer completed interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT7_XFRC = 1U << 0 ;

  // Field EPDISD: Endpoint disabled interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT7_EPDISD = 1U << 1 ;

  // Field STUP: SETUP phase done
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT7_STUP = 1U << 3 ;

  // Field OTEPDIS: OUT token received when endpoint disabled
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT7_OTEPDIS = 1U << 4 ;

  // Field B2BSTUP: Back-to-back SETUP packets received
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT7_B2BSTUP = 1U << 6 ;

  // Field NYET: NYET interrupt
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPINT7_NYET = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPTSIZ0: OTG_HS device endpoint-0 transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0 (* ((volatile uint32_t *) (0x40040800 + 784)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field PKTCNT: Packet count
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_PKTCNT = 1U << 19 ;

  // Field STUPCNT: SETUP packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPTSIZ1: OTG_HS device endpoint-1 transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1 (* ((volatile uint32_t *) (0x40040800 + 816)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field RXDPID_STUPCNT: Received data PID/SETUP packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_RXDPID_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPTSIZ2: OTG_HS device endpoint-2 transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2 (* ((volatile uint32_t *) (0x40040800 + 848)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field RXDPID_STUPCNT: Received data PID/SETUP packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_RXDPID_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPTSIZ3: OTG_HS device endpoint-3 transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3 (* ((volatile uint32_t *) (0x40040800 + 880)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field RXDPID_STUPCNT: Received data PID/SETUP packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_RXDPID_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPTSIZ4: OTG_HS device endpoint-4 transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4 (* ((volatile uint32_t *) (0x40040800 + 912)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field RXDPID_STUPCNT: Received data PID/SETUP packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_RXDPID_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTSIZ6: OTG_HS device endpoint transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6 (* ((volatile uint32_t *) (0x40040800 + 416)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field MCNT: Multi count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ6_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DTXFSTS6: OTG_HS device IN endpoint transmit FIFO status register
  #define OTG_HS_DEVICE_OTG_HS_DTXFSTS6 (* ((volatile uint32_t *) (0x40040800 + 420)))

  // Field INEPTFSAV: IN endpoint TxFIFO space avail
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DTXFSTS6_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTSIZ7: OTG_HS device endpoint transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7 (* ((volatile uint32_t *) (0x40040800 + 424)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field MCNT: Multi count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DIEPTSIZ7_MCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DTXFSTS7: OTG_HS device IN endpoint transmit FIFO status register
  #define OTG_HS_DEVICE_OTG_HS_DTXFSTS7 (* ((volatile uint32_t *) (0x40040800 + 428)))

  // Field INEPTFSAV: IN endpoint TxFIFO space avail
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DTXFSTS7_INEPTFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPCTL4: OTG device endpoint-4 control register
  #define OTG_HS_DEVICE_OTG_HS_DOEPCTL4 (* ((volatile uint32_t *) (0x40040800 + 896)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL4_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL4_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even odd frame/Endpoint data PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL4_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field SNPM: Snoop mode
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SNPM = 1U << 20 ;

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL4_Stall = 1U << 21 ;

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL4_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID/Set even frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL4_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL4_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPCTL5: OTG device endpoint-5 control register
  #define OTG_HS_DEVICE_OTG_HS_DOEPCTL5 (* ((volatile uint32_t *) (0x40040800 + 928)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL5_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL5_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even odd frame/Endpoint data PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL5_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field SNPM: Snoop mode
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SNPM = 1U << 20 ;

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL5_Stall = 1U << 21 ;

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL5_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID/Set even frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL5_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL5_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPCTL6: OTG device endpoint-6 control register
  #define OTG_HS_DEVICE_OTG_HS_DOEPCTL6 (* ((volatile uint32_t *) (0x40040800 + 960)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL6_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL6_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even odd frame/Endpoint data PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL6_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field SNPM: Snoop mode
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SNPM = 1U << 20 ;

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL6_Stall = 1U << 21 ;

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL6_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID/Set even frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL6_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL6_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPCTL7: OTG device endpoint-7 control register
  #define OTG_HS_DEVICE_OTG_HS_DOEPCTL7 (* ((volatile uint32_t *) (0x40040800 + 992)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL7_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field USBAEP: USB active endpoint
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL7_USBAEP = 1U << 15 ;

  // Field EONUM_DPID: Even odd frame/Endpoint data PID
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EONUM_DPID = 1U << 16 ;

  // Field NAKSTS: NAK status
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL7_NAKSTS = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field SNPM: Snoop mode
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SNPM = 1U << 20 ;

  // Field Stall: STALL handshake
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL7_Stall = 1U << 21 ;

  // Field CNAK: Clear NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL7_CNAK = 1U << 26 ;

  // Field SNAK: Set NAK
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SNAK = 1U << 27 ;

  // Field SD0PID_SEVNFRM: Set DATA0 PID/Set even frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SD0PID_SEVNFRM = 1U << 28 ;

  // Field SODDFRM: Set odd frame
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL7_SODDFRM = 1U << 29 ;

  // Field EPDIS: Endpoint disable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPDIS = 1U << 30 ;

  // Field EPENA: Endpoint enable
    const uint32_t OTG_HS_DEVICE_OTG_HS_DOEPCTL7_EPENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPTSIZ5: OTG_HS device endpoint-5 transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5 (* ((volatile uint32_t *) (0x40040800 + 944)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field RXDPID_STUPCNT: Received data PID/SETUP packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ5_RXDPID_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPTSIZ6: OTG_HS device endpoint-6 transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6 (* ((volatile uint32_t *) (0x40040800 + 976)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field RXDPID_STUPCNT: Received data PID/SETUP packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ6_RXDPID_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DOEPTSIZ7: OTG_HS device endpoint-7 transfer size register
  #define OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7 (* ((volatile uint32_t *) (0x40040800 + 1008)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field RXDPID_STUPCNT: Received data PID/SETUP packet count
    inline uint32_t OTG_HS_DEVICE_OTG_HS_DOEPTSIZ7_RXDPID_STUPCNT (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------
// Peripheral OTG_HS_GLOBAL: USB on the go high speed
//------------------------------------------------------------------------------

//---  Register OTG_HS_GOTGCTL: OTG_HS control and status register
  #define OTG_HS_GLOBAL_OTG_HS_GOTGCTL (* ((volatile uint32_t *) (0x40040000 + 0)))

  // Field SRQSCS: Session request success
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQSCS = 1U << 0 ;

  // Field SRQ: Session request
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQ = 1U << 1 ;

  // Field HNGSCS: Host negotiation success
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNGSCS = 1U << 8 ;

  // Field HNPRQ: HNP request
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNPRQ = 1U << 9 ;

  // Field HSHNPEN: Host set HNP enable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HSHNPEN = 1U << 10 ;

  // Field DHNPEN: Device HNP enabled
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DHNPEN = 1U << 11 ;

  // Field CIDSTS: Connector ID status
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGCTL_CIDSTS = 1U << 16 ;

  // Field DBCT: Long/short debounce time
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DBCT = 1U << 17 ;

  // Field ASVLD: A-session valid
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGCTL_ASVLD = 1U << 18 ;

  // Field BSVLD: B-session valid
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGCTL_BSVLD = 1U << 19 ;

  // Field EHEN: Embedded host enable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGCTL_EHEN = 1U << 12 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_GOTGINT: OTG_HS interrupt register
  #define OTG_HS_GLOBAL_OTG_HS_GOTGINT (* ((volatile uint32_t *) (0x40040000 + 4)))

  // Field SEDET: Session end detected
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGINT_SEDET = 1U << 2 ;

  // Field SRSSCHG: Session request success status change
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGINT_SRSSCHG = 1U << 8 ;

  // Field HNSSCHG: Host negotiation success status change
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNSSCHG = 1U << 9 ;

  // Field HNGDET: Host negotiation detected
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNGDET = 1U << 17 ;

  // Field ADTOCHG: A-device timeout change
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGINT_ADTOCHG = 1U << 18 ;

  // Field DBCDNE: Debounce done
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGINT_DBCDNE = 1U << 19 ;

  // Field IDCHNG: ID input pin changed
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GOTGINT_IDCHNG = 1U << 20 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_GAHBCFG: OTG_HS AHB configuration register
  #define OTG_HS_GLOBAL_OTG_HS_GAHBCFG (* ((volatile uint32_t *) (0x40040000 + 8)))

  // Field GINT: Global interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GAHBCFG_GINT = 1U << 0 ;

  // Field HBSTLEN: Burst length/type
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GAHBCFG_HBSTLEN (const uint32_t inValue) {return (inValue & 0xFU) << 1 ; }

  // Field DMAEN: DMA enable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GAHBCFG_DMAEN = 1U << 5 ;

  // Field TXFELVL: TxFIFO empty level
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GAHBCFG_TXFELVL = 1U << 7 ;

  // Field PTXFELVL: Periodic TxFIFO empty level
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GAHBCFG_PTXFELVL = 1U << 8 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_GUSBCFG: OTG_HS USB configuration register
  #define OTG_HS_GLOBAL_OTG_HS_GUSBCFG (* ((volatile uint32_t *) (0x40040000 + 12)))

  // Field TOCAL: FS timeout calibration
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TOCAL (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field PHYSEL: USB 2.0 high-speed ULPI PHY or USB 1.1 full-speed serial transceiver select
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYSEL = 1U << 6 ;

  // Field SRPCAP: SRP-capable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_SRPCAP = 1U << 8 ;

  // Field HNPCAP: HNP-capable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_HNPCAP = 1U << 9 ;

  // Field TRDT: USB turnaround time
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TRDT (const uint32_t inValue) {return (inValue & 0xFU) << 10 ; }

  // Field PHYLPCS: PHY Low-power clock select
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYLPCS = 1U << 15 ;

  // Field ULPIFSLS: ULPI FS/LS select
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIFSLS = 1U << 17 ;

  // Field ULPIAR: ULPI Auto-resume
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIAR = 1U << 18 ;

  // Field ULPICSM: ULPI Clock SuspendM
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPICSM = 1U << 19 ;

  // Field ULPIEVBUSD: ULPI External VBUS Drive
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSD = 1U << 20 ;

  // Field ULPIEVBUSI: ULPI external VBUS indicator
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSI = 1U << 21 ;

  // Field TSDPS: TermSel DLine pulsing selection
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TSDPS = 1U << 22 ;

  // Field PCCI: Indicator complement
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PCCI = 1U << 23 ;

  // Field PTCI: Indicator pass through
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PTCI = 1U << 24 ;

  // Field ULPIIPD: ULPI interface protect disable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIIPD = 1U << 25 ;

  // Field FHMOD: Forced host mode
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FHMOD = 1U << 29 ;

  // Field FDMOD: Forced peripheral mode
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FDMOD = 1U << 30 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_GRSTCTL: OTG_HS reset register
  #define OTG_HS_GLOBAL_OTG_HS_GRSTCTL (* ((volatile uint32_t *) (0x40040000 + 16)))

  // Field CSRST: Core soft reset
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GRSTCTL_CSRST = 1U << 0 ;

  // Field HSRST: HCLK soft reset
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GRSTCTL_HSRST = 1U << 1 ;

  // Field FCRST: Host frame counter reset
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GRSTCTL_FCRST = 1U << 2 ;

  // Field RXFFLSH: RxFIFO flush
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GRSTCTL_RXFFLSH = 1U << 4 ;

  // Field TXFFLSH: TxFIFO flush
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFFLSH = 1U << 5 ;

  // Field TXFNUM: TxFIFO number
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFNUM (const uint32_t inValue) {return (inValue & 0x1FU) << 6 ; }

  // Field AHBIDL: AHB master idle
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GRSTCTL_AHBIDL = 1U << 31 ;

  // Field DMAREQ: DMA request signal enabled for USB OTG HS
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GRSTCTL_DMAREQ = 1U << 30 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_GINTSTS: OTG_HS core interrupt register
  #define OTG_HS_GLOBAL_OTG_HS_GINTSTS (* ((volatile uint32_t *) (0x40040000 + 20)))

  // Field CMOD: Current mode of operation
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_CMOD = 1U << 0 ;

  // Field MMIS: Mode mismatch interrupt
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_MMIS = 1U << 1 ;

  // Field OTGINT: OTG interrupt
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_OTGINT = 1U << 2 ;

  // Field SOF: Start of frame
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_SOF = 1U << 3 ;

  // Field RXFLVL: RxFIFO nonempty
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_RXFLVL = 1U << 4 ;

  // Field NPTXFE: Nonperiodic TxFIFO empty
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_NPTXFE = 1U << 5 ;

  // Field GINAKEFF: Global IN nonperiodic NAK effective
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_GINAKEFF = 1U << 6 ;

  // Field BOUTNAKEFF: Global OUT NAK effective
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_BOUTNAKEFF = 1U << 7 ;

  // Field ESUSP: Early suspend
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_ESUSP = 1U << 10 ;

  // Field USBSUSP: USB suspend
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBSUSP = 1U << 11 ;

  // Field USBRST: USB reset
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBRST = 1U << 12 ;

  // Field ENUMDNE: Enumeration done
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_ENUMDNE = 1U << 13 ;

  // Field ISOODRP: Isochronous OUT packet dropped interrupt
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_ISOODRP = 1U << 14 ;

  // Field EOPF: End of periodic frame interrupt
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_EOPF = 1U << 15 ;

  // Field IEPINT: IN endpoint interrupt
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_IEPINT = 1U << 18 ;

  // Field OEPINT: OUT endpoint interrupt
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_OEPINT = 1U << 19 ;

  // Field IISOIXFR: Incomplete isochronous IN transfer
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_IISOIXFR = 1U << 20 ;

  // Field PXFR_INCOMPISOOUT: Incomplete periodic transfer
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_PXFR_INCOMPISOOUT = 1U << 21 ;

  // Field DATAFSUSP: Data fetch suspended
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_DATAFSUSP = 1U << 22 ;

  // Field HPRTINT: Host port interrupt
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_HPRTINT = 1U << 24 ;

  // Field HCINT: Host channels interrupt
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_HCINT = 1U << 25 ;

  // Field PTXFE: Periodic TxFIFO empty
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_PTXFE = 1U << 26 ;

  // Field CIDSCHG: Connector ID status change
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_CIDSCHG = 1U << 28 ;

  // Field DISCINT: Disconnect detected interrupt
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_DISCINT = 1U << 29 ;

  // Field SRQINT: Session request/new session detected interrupt
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_SRQINT = 1U << 30 ;

  // Field WKUINT: Resume/remote wakeup detected interrupt
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTSTS_WKUINT = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_GINTMSK: OTG_HS interrupt mask register
  #define OTG_HS_GLOBAL_OTG_HS_GINTMSK (* ((volatile uint32_t *) (0x40040000 + 24)))

  // Field MMISM: Mode mismatch interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_MMISM = 1U << 1 ;

  // Field OTGINT: OTG interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_OTGINT = 1U << 2 ;

  // Field SOFM: Start of frame mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_SOFM = 1U << 3 ;

  // Field RXFLVLM: Receive FIFO nonempty mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_RXFLVLM = 1U << 4 ;

  // Field NPTXFEM: Nonperiodic TxFIFO empty mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_NPTXFEM = 1U << 5 ;

  // Field GINAKEFFM: Global nonperiodic IN NAK effective mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_GINAKEFFM = 1U << 6 ;

  // Field GONAKEFFM: Global OUT NAK effective mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_GONAKEFFM = 1U << 7 ;

  // Field ESUSPM: Early suspend mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_ESUSPM = 1U << 10 ;

  // Field USBSUSPM: USB suspend mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBSUSPM = 1U << 11 ;

  // Field USBRST: USB reset mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBRST = 1U << 12 ;

  // Field ENUMDNEM: Enumeration done mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_ENUMDNEM = 1U << 13 ;

  // Field ISOODRPM: Isochronous OUT packet dropped interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_ISOODRPM = 1U << 14 ;

  // Field EOPFM: End of periodic frame interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_EOPFM = 1U << 15 ;

  // Field IEPINT: IN endpoints interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_IEPINT = 1U << 18 ;

  // Field OEPINT: OUT endpoints interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_OEPINT = 1U << 19 ;

  // Field IISOIXFRM: Incomplete isochronous IN transfer mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_IISOIXFRM = 1U << 20 ;

  // Field PXFRM_IISOOXFRM: Incomplete periodic transfer mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_PXFRM_IISOOXFRM = 1U << 21 ;

  // Field FSUSPM: Data fetch suspended mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_FSUSPM = 1U << 22 ;

  // Field PRTIM: Host port interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_PRTIM = 1U << 24 ;

  // Field HCIM: Host channels interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_HCIM = 1U << 25 ;

  // Field PTXFEM: Periodic TxFIFO empty mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_PTXFEM = 1U << 26 ;

  // Field CIDSCHGM: Connector ID status change mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_CIDSCHGM = 1U << 28 ;

  // Field DISCINT: Disconnect detected interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_DISCINT = 1U << 29 ;

  // Field SRQIM: Session request/new session detected interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_SRQIM = 1U << 30 ;

  // Field WUIM: Resume/remote wakeup detected interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_WUIM = 1U << 31 ;

  // Field RSTDE: Reset detected interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_RSTDE = 1U << 23 ;

  // Field LPMINTM: LPM interrupt mask
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GINTMSK_LPMINTM = 1U << 27 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_GRXSTSR_Host: OTG_HS Receive status debug read register (host mode)
  #define OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host (* ((const volatile uint32_t *) (0x40040000 + 28)))

  // Field CHNUM: Channel number
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_CHNUM (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field BCNT: Byte count
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_BCNT (const uint32_t inValue) {return (inValue & 0x7FFU) << 4 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 15 ; }

  // Field PKTSTS: Packet status
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_PKTSTS (const uint32_t inValue) {return (inValue & 0xFU) << 17 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_GRXSTSP_Host: OTG_HS status read and pop register (host mode)
  #define OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host (* ((const volatile uint32_t *) (0x40040000 + 32)))

  // Field CHNUM: Channel number
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_CHNUM (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field BCNT: Byte count
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_BCNT (const uint32_t inValue) {return (inValue & 0x7FFU) << 4 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 15 ; }

  // Field PKTSTS: Packet status
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_PKTSTS (const uint32_t inValue) {return (inValue & 0xFU) << 17 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_GRXFSIZ: OTG_HS Receive FIFO size register
  #define OTG_HS_GLOBAL_OTG_HS_GRXFSIZ (* ((volatile uint32_t *) (0x40040000 + 36)))

  // Field RXFD: RxFIFO depth
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_RXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HNPTXFSIZ_Host: OTG_HS nonperiodic transmit FIFO size register (host mode)
  #define OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host (* ((volatile uint32_t *) (0x40040000 + 40)))

  // Field NPTXFSA: Nonperiodic transmit RAM start address
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host_NPTXFSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field NPTXFD: Nonperiodic TxFIFO depth
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_HNPTXFSIZ_Host_NPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTXF0_Device: Endpoint 0 transmit FIFO size (peripheral mode)
  #define OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device (* ((volatile uint32_t *) (0x40040000 + 40)))

  // Field TX0FSA: Endpoint 0 transmit RAM start address
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device_TX0FSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field TX0FD: Endpoint 0 TxFIFO depth
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF0_Device_TX0FD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_GNPTXSTS: OTG_HS nonperiodic transmit FIFO/queue status register
  #define OTG_HS_GLOBAL_OTG_HS_GNPTXSTS (* ((const volatile uint32_t *) (0x40040000 + 44)))

  // Field NPTXFSAV: Nonperiodic TxFIFO space available
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXFSAV (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field NPTQXSAV: Nonperiodic transmit request queue space available
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTQXSAV (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field NPTXQTOP: Top of the nonperiodic transmit request queue
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXQTOP (const uint32_t inValue) {return (inValue & 0x7FU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_GCCFG: OTG_HS general core configuration register
  #define OTG_HS_GLOBAL_OTG_HS_GCCFG (* ((volatile uint32_t *) (0x40040000 + 56)))

  // Field PWRDWN: Power down
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GCCFG_PWRDWN = 1U << 16 ;

  // Field BCDEN: Battery charging detector (BCD) enable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GCCFG_BCDEN = 1U << 17 ;

  // Field DCDEN: Data contact detection (DCD) mode enable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GCCFG_DCDEN = 1U << 18 ;

  // Field PDEN: Primary detection (PD) mode enable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GCCFG_PDEN = 1U << 19 ;

  // Field SDEN: Secondary detection (SD) mode enable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GCCFG_SDEN = 1U << 20 ;

  // Field VBDEN: USB VBUS detection enable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GCCFG_VBDEN = 1U << 21 ;

  // Field DCDET: Data contact detection (DCD) status
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GCCFG_DCDET = 1U << 0 ;

  // Field PDET: Primary detection (PD) status
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GCCFG_PDET = 1U << 1 ;

  // Field SDET: Secondary detection (SD) status
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GCCFG_SDET = 1U << 2 ;

  // Field PS2DET: DM pull-up detection status
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GCCFG_PS2DET = 1U << 3 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_CID: OTG_HS core ID register
  #define OTG_HS_GLOBAL_OTG_HS_CID (* ((volatile uint32_t *) (0x40040000 + 60)))

  // Field PRODUCT_ID: Product ID field
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_CID_PRODUCT_ID (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HPTXFSIZ: OTG_HS Host periodic transmit FIFO size register
  #define OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ (* ((volatile uint32_t *) (0x40040000 + 256)))

  // Field PTXSA: Host periodic TxFIFO start address
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field PTXFD: Host periodic TxFIFO depth
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTXF1: OTG_HS device IN endpoint transmit FIFO size register
  #define OTG_HS_GLOBAL_OTG_HS_DIEPTXF1 (* ((volatile uint32_t *) (0x40040000 + 260)))

  // Field INEPTXSA: IN endpoint FIFOx transmit RAM start address
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INEPTXFD: IN endpoint TxFIFO depth
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTXF2: OTG_HS device IN endpoint transmit FIFO size register
  #define OTG_HS_GLOBAL_OTG_HS_DIEPTXF2 (* ((volatile uint32_t *) (0x40040000 + 264)))

  // Field INEPTXSA: IN endpoint FIFOx transmit RAM start address
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INEPTXFD: IN endpoint TxFIFO depth
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTXF3: OTG_HS device IN endpoint transmit FIFO size register
  #define OTG_HS_GLOBAL_OTG_HS_DIEPTXF3 (* ((volatile uint32_t *) (0x40040000 + 284)))

  // Field INEPTXSA: IN endpoint FIFOx transmit RAM start address
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INEPTXFD: IN endpoint TxFIFO depth
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTXF4: OTG_HS device IN endpoint transmit FIFO size register
  #define OTG_HS_GLOBAL_OTG_HS_DIEPTXF4 (* ((volatile uint32_t *) (0x40040000 + 288)))

  // Field INEPTXSA: IN endpoint FIFOx transmit RAM start address
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INEPTXFD: IN endpoint TxFIFO depth
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTXF5: OTG_HS device IN endpoint transmit FIFO size register
  #define OTG_HS_GLOBAL_OTG_HS_DIEPTXF5 (* ((volatile uint32_t *) (0x40040000 + 292)))

  // Field INEPTXSA: IN endpoint FIFOx transmit RAM start address
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INEPTXFD: IN endpoint TxFIFO depth
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTXF6: OTG_HS device IN endpoint transmit FIFO size register
  #define OTG_HS_GLOBAL_OTG_HS_DIEPTXF6 (* ((volatile uint32_t *) (0x40040000 + 296)))

  // Field INEPTXSA: IN endpoint FIFOx transmit RAM start address
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INEPTXFD: IN endpoint TxFIFO depth
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_DIEPTXF7: OTG_HS device IN endpoint transmit FIFO size register
  #define OTG_HS_GLOBAL_OTG_HS_DIEPTXF7 (* ((volatile uint32_t *) (0x40040000 + 300)))

  // Field INEPTXSA: IN endpoint FIFOx transmit RAM start address
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXSA (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field INEPTXFD: IN endpoint TxFIFO depth
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXFD (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_GRXSTSR_Device: OTG_HS Receive status debug read register (peripheral mode mode)
  #define OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device (* ((const volatile uint32_t *) (0x40040000 + 28)))

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field BCNT: Byte count
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_BCNT (const uint32_t inValue) {return (inValue & 0x7FFU) << 4 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 15 ; }

  // Field PKTSTS: Packet status
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_PKTSTS (const uint32_t inValue) {return (inValue & 0xFU) << 17 ; }

  // Field FRMNUM: Frame number
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Device_FRMNUM (const uint32_t inValue) {return (inValue & 0xFU) << 21 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_GRXSTSP_Device: OTG_HS status read and pop register (peripheral mode)
  #define OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device (* ((const volatile uint32_t *) (0x40040000 + 32)))

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field BCNT: Byte count
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_BCNT (const uint32_t inValue) {return (inValue & 0x7FFU) << 4 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 15 ; }

  // Field PKTSTS: Packet status
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_PKTSTS (const uint32_t inValue) {return (inValue & 0xFU) << 17 ; }

  // Field FRMNUM: Frame number
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Device_FRMNUM (const uint32_t inValue) {return (inValue & 0xFU) << 21 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_GLPMCFG: OTG core LPM configuration register
  #define OTG_HS_GLOBAL_OTG_HS_GLPMCFG (* ((volatile uint32_t *) (0x40040000 + 84)))

  // Field LPMEN: LPM support enable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMEN = 1U << 0 ;

  // Field LPMACK: LPM token acknowledge enable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMACK = 1U << 1 ;

  // Field BESL: Best effort service latency
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_BESL (const uint32_t inValue) {return (inValue & 0xFU) << 2 ; }

  // Field REMWAKE: bRemoteWake value
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_REMWAKE = 1U << 6 ;

  // Field L1SSEN: L1 Shallow Sleep enable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1SSEN = 1U << 7 ;

  // Field BESLTHRS: BESL threshold
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_BESLTHRS (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field L1DSEN: L1 deep sleep enable
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1DSEN = 1U << 12 ;

  // Field LPMRST: LPM response
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRST (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field SLPSTS: Port sleep status
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_SLPSTS = 1U << 15 ;

  // Field L1RSMOK: Sleep State Resume OK
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_L1RSMOK = 1U << 16 ;

  // Field LPMCHIDX: LPM Channel Index
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMCHIDX (const uint32_t inValue) {return (inValue & 0xFU) << 17 ; }

  // Field LPMRCNT: LPM retry count
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRCNT (const uint32_t inValue) {return (inValue & 0x7U) << 21 ; }

  // Field SNDLPM: Send LPM transaction
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_SNDLPM = 1U << 24 ;

  // Field LPMRCNTSTS: LPM retry count status
    inline uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_LPMRCNTSTS (const uint32_t inValue) {return (inValue & 0x7U) << 25 ; }

  // Field ENBESL: Enable best effort service latency
    const uint32_t OTG_HS_GLOBAL_OTG_HS_GLPMCFG_ENBESL = 1U << 28 ;

//------------------------------------------------------------------------------
// Peripheral OTG_HS_HOST: USB on the go high speed
//------------------------------------------------------------------------------

//---  Register OTG_HS_HCFG: OTG_HS host configuration register
  #define OTG_HS_HOST_OTG_HS_HCFG (* ((volatile uint32_t *) (0x40040400 + 0)))

  // Field FSLSPCS: FS/LS PHY clock select
    inline uint32_t OTG_HS_HOST_OTG_HS_HCFG_FSLSPCS (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field FSLSS: FS- and LS-only support
    const uint32_t OTG_HS_HOST_OTG_HS_HCFG_FSLSS = 1U << 2 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HFIR: OTG_HS Host frame interval register
  #define OTG_HS_HOST_OTG_HS_HFIR (* ((volatile uint32_t *) (0x40040400 + 4)))

  // Field FRIVL: Frame interval
    inline uint32_t OTG_HS_HOST_OTG_HS_HFIR_FRIVL (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HFNUM: OTG_HS host frame number/frame time remaining register
  #define OTG_HS_HOST_OTG_HS_HFNUM (* ((const volatile uint32_t *) (0x40040400 + 8)))

  // Field FRNUM: Frame number
    inline uint32_t OTG_HS_HOST_OTG_HS_HFNUM_FRNUM (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field FTREM: Frame time remaining
    inline uint32_t OTG_HS_HOST_OTG_HS_HFNUM_FTREM (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HPTXSTS: OTG_HS_Host periodic transmit FIFO/queue status register
  #define OTG_HS_HOST_OTG_HS_HPTXSTS (* ((volatile uint32_t *) (0x40040400 + 16)))

  // Field PTXFSAVL: Periodic transmit data FIFO space available
    inline uint32_t OTG_HS_HOST_OTG_HS_HPTXSTS_PTXFSAVL (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field PTXQSAV: Periodic transmit request queue space available
    inline uint32_t OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQSAV (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field PTXQTOP: Top of the periodic transmit request queue
    inline uint32_t OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQTOP (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HAINT: OTG_HS Host all channels interrupt register
  #define OTG_HS_HOST_OTG_HS_HAINT (* ((const volatile uint32_t *) (0x40040400 + 20)))

  // Field HAINT: Channel interrupts
    inline uint32_t OTG_HS_HOST_OTG_HS_HAINT_HAINT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HAINTMSK: OTG_HS host all channels interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HAINTMSK (* ((volatile uint32_t *) (0x40040400 + 24)))

  // Field HAINTM: Channel interrupt mask
    inline uint32_t OTG_HS_HOST_OTG_HS_HAINTMSK_HAINTM (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HPRT: OTG_HS host port control and status register
  #define OTG_HS_HOST_OTG_HS_HPRT (* ((volatile uint32_t *) (0x40040400 + 64)))

  // Field PCSTS: Port connect status
    const uint32_t OTG_HS_HOST_OTG_HS_HPRT_PCSTS = 1U << 0 ;

  // Field PCDET: Port connect detected
    const uint32_t OTG_HS_HOST_OTG_HS_HPRT_PCDET = 1U << 1 ;

  // Field PENA: Port enable
    const uint32_t OTG_HS_HOST_OTG_HS_HPRT_PENA = 1U << 2 ;

  // Field PENCHNG: Port enable/disable change
    const uint32_t OTG_HS_HOST_OTG_HS_HPRT_PENCHNG = 1U << 3 ;

  // Field POCA: Port overcurrent active
    const uint32_t OTG_HS_HOST_OTG_HS_HPRT_POCA = 1U << 4 ;

  // Field POCCHNG: Port overcurrent change
    const uint32_t OTG_HS_HOST_OTG_HS_HPRT_POCCHNG = 1U << 5 ;

  // Field PRES: Port resume
    const uint32_t OTG_HS_HOST_OTG_HS_HPRT_PRES = 1U << 6 ;

  // Field PSUSP: Port suspend
    const uint32_t OTG_HS_HOST_OTG_HS_HPRT_PSUSP = 1U << 7 ;

  // Field PRST: Port reset
    const uint32_t OTG_HS_HOST_OTG_HS_HPRT_PRST = 1U << 8 ;

  // Field PLSTS: Port line status
    inline uint32_t OTG_HS_HOST_OTG_HS_HPRT_PLSTS (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field PPWR: Port power
    const uint32_t OTG_HS_HOST_OTG_HS_HPRT_PPWR = 1U << 12 ;

  // Field PTCTL: Port test control
    inline uint32_t OTG_HS_HOST_OTG_HS_HPRT_PTCTL (const uint32_t inValue) {return (inValue & 0xFU) << 13 ; }

  // Field PSPD: Port speed
    inline uint32_t OTG_HS_HOST_OTG_HS_HPRT_PSPD (const uint32_t inValue) {return (inValue & 0x3U) << 17 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR0: OTG_HS host channel-0 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR0 (* ((volatile uint32_t *) (0x40040400 + 256)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR0_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR0_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR0_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR0_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR0_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR0_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR0_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR0_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR0_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR0_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR1: OTG_HS host channel-1 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR1 (* ((volatile uint32_t *) (0x40040400 + 288)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR1_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR1_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR1_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR1_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR1_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR1_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR1_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR1_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR1_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR1_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR2: OTG_HS host channel-2 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR2 (* ((volatile uint32_t *) (0x40040400 + 320)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR2_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR2_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR2_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR2_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR2_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR2_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR2_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR2_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR2_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR2_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR3: OTG_HS host channel-3 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR3 (* ((volatile uint32_t *) (0x40040400 + 352)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR3_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR3_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR3_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR3_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR3_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR3_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR3_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR3_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR3_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR3_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR4: OTG_HS host channel-4 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR4 (* ((volatile uint32_t *) (0x40040400 + 384)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR4_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR4_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR4_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR4_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR4_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR4_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR4_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR4_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR4_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR4_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR5: OTG_HS host channel-5 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR5 (* ((volatile uint32_t *) (0x40040400 + 416)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR5_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR5_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR5_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR5_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR5_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR5_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR5_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR5_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR5_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR5_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR6: OTG_HS host channel-6 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR6 (* ((volatile uint32_t *) (0x40040400 + 448)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR6_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR6_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR6_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR6_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR6_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR6_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR6_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR6_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR6_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR6_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR7: OTG_HS host channel-7 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR7 (* ((volatile uint32_t *) (0x40040400 + 480)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR7_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR7_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR7_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR7_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR7_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR7_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR7_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR7_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR7_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR7_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR8: OTG_HS host channel-8 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR8 (* ((volatile uint32_t *) (0x40040400 + 512)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR8_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR8_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR8_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR8_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR8_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR8_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR8_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR8_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR8_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR8_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR9: OTG_HS host channel-9 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR9 (* ((volatile uint32_t *) (0x40040400 + 544)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR9_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR9_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR9_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR9_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR9_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR9_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR9_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR9_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR9_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR9_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR10: OTG_HS host channel-10 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR10 (* ((volatile uint32_t *) (0x40040400 + 576)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR10_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR10_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR10_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR10_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR10_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR10_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR10_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR10_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR10_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR10_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR11: OTG_HS host channel-11 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR11 (* ((volatile uint32_t *) (0x40040400 + 608)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR11_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR11_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR11_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR11_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR11_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR11_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR11_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR11_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR11_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR11_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT0: OTG_HS host channel-0 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT0 (* ((volatile uint32_t *) (0x40040400 + 260)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT0_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT0_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT0_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT0_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT0_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT1: OTG_HS host channel-1 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT1 (* ((volatile uint32_t *) (0x40040400 + 292)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT1_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT1_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT1_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT1_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT1_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT2: OTG_HS host channel-2 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT2 (* ((volatile uint32_t *) (0x40040400 + 324)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT2_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT2_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT2_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT2_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT2_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT3: OTG_HS host channel-3 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT3 (* ((volatile uint32_t *) (0x40040400 + 356)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT3_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT3_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT3_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT3_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT3_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT4: OTG_HS host channel-4 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT4 (* ((volatile uint32_t *) (0x40040400 + 388)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT4_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT4_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT4_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT4_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT4_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT5: OTG_HS host channel-5 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT5 (* ((volatile uint32_t *) (0x40040400 + 420)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT5_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT5_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT5_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT5_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT5_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT6: OTG_HS host channel-6 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT6 (* ((volatile uint32_t *) (0x40040400 + 452)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT6_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT6_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT6_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT6_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT6_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT7: OTG_HS host channel-7 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT7 (* ((volatile uint32_t *) (0x40040400 + 484)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT7_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT7_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT7_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT7_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT7_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT8: OTG_HS host channel-8 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT8 (* ((volatile uint32_t *) (0x40040400 + 516)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT8_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT8_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT8_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT8_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT8_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT9: OTG_HS host channel-9 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT9 (* ((volatile uint32_t *) (0x40040400 + 548)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT9_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT9_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT9_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT9_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT9_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT10: OTG_HS host channel-10 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT10 (* ((volatile uint32_t *) (0x40040400 + 580)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT10_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT10_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT10_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT10_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT10_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT11: OTG_HS host channel-11 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT11 (* ((volatile uint32_t *) (0x40040400 + 612)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT11_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT11_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT11_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT11_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT11_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT0: OTG_HS host channel-11 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT0 (* ((volatile uint32_t *) (0x40040400 + 264)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT0_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT0_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT0_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT0_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT0_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT0_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT0_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT0_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT0_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT0_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT0_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT1: OTG_HS host channel-1 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT1 (* ((volatile uint32_t *) (0x40040400 + 296)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT1_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT1_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT1_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT1_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT1_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT1_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT1_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT1_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT1_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT1_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT1_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT2: OTG_HS host channel-2 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT2 (* ((volatile uint32_t *) (0x40040400 + 328)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT2_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT2_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT2_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT2_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT2_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT2_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT2_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT2_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT2_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT2_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT2_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT3: OTG_HS host channel-3 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT3 (* ((volatile uint32_t *) (0x40040400 + 360)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT3_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT3_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT3_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT3_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT3_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT3_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT3_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT3_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT3_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT3_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT3_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT4: OTG_HS host channel-4 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT4 (* ((volatile uint32_t *) (0x40040400 + 392)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT4_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT4_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT4_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT4_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT4_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT4_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT4_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT4_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT4_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT4_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT4_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT5: OTG_HS host channel-5 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT5 (* ((volatile uint32_t *) (0x40040400 + 424)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT5_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT5_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT5_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT5_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT5_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT5_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT5_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT5_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT5_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT5_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT5_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT6: OTG_HS host channel-6 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT6 (* ((volatile uint32_t *) (0x40040400 + 456)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT6_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT6_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT6_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT6_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT6_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT6_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT6_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT6_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT6_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT6_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT6_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT7: OTG_HS host channel-7 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT7 (* ((volatile uint32_t *) (0x40040400 + 488)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT7_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT7_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT7_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT7_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT7_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT7_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT7_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT7_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT7_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT7_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT7_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT8: OTG_HS host channel-8 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT8 (* ((volatile uint32_t *) (0x40040400 + 520)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT8_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT8_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT8_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT8_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT8_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT8_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT8_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT8_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT8_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT8_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT8_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT9: OTG_HS host channel-9 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT9 (* ((volatile uint32_t *) (0x40040400 + 552)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT9_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT9_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT9_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT9_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT9_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT9_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT9_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT9_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT9_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT9_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT9_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT10: OTG_HS host channel-10 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT10 (* ((volatile uint32_t *) (0x40040400 + 584)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT10_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT10_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT10_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT10_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT10_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT10_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT10_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT10_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT10_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT10_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT10_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT11: OTG_HS host channel-11 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT11 (* ((volatile uint32_t *) (0x40040400 + 616)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT11_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT11_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT11_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT11_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT11_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT11_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT11_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT11_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT11_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT11_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT11_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK0: OTG_HS host channel-11 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK0 (* ((volatile uint32_t *) (0x40040400 + 268)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK0_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK0_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK0_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK0_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK0_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK0_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK0_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK0_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK0_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK0_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK0_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK1: OTG_HS host channel-1 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK1 (* ((volatile uint32_t *) (0x40040400 + 300)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK1_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK1_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK1_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK1_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK1_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK1_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK1_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK1_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK1_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK1_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK1_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK2: OTG_HS host channel-2 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK2 (* ((volatile uint32_t *) (0x40040400 + 332)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK2_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK2_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK2_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK2_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK2_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK2_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK2_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK2_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK2_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK2_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK2_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK3: OTG_HS host channel-3 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK3 (* ((volatile uint32_t *) (0x40040400 + 364)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK3_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK3_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK3_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK3_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK3_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK3_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK3_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK3_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK3_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK3_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK3_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK4: OTG_HS host channel-4 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK4 (* ((volatile uint32_t *) (0x40040400 + 396)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK4_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK4_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK4_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK4_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK4_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK4_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK4_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK4_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK4_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK4_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK4_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK5: OTG_HS host channel-5 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK5 (* ((volatile uint32_t *) (0x40040400 + 428)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK5_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK5_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK5_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK5_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK5_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK5_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK5_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK5_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK5_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK5_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK5_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK6: OTG_HS host channel-6 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK6 (* ((volatile uint32_t *) (0x40040400 + 460)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK6_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK6_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK6_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK6_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK6_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK6_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK6_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK6_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK6_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK6_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK6_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK7: OTG_HS host channel-7 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK7 (* ((volatile uint32_t *) (0x40040400 + 492)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK7_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK7_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK7_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK7_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK7_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK7_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK7_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK7_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK7_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK7_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK7_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK8: OTG_HS host channel-8 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK8 (* ((volatile uint32_t *) (0x40040400 + 524)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK8_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK8_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK8_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK8_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK8_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK8_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK8_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK8_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK8_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK8_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK8_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK9: OTG_HS host channel-9 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK9 (* ((volatile uint32_t *) (0x40040400 + 556)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK9_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK9_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK9_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK9_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK9_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK9_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK9_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK9_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK9_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK9_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK9_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK10: OTG_HS host channel-10 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK10 (* ((volatile uint32_t *) (0x40040400 + 588)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK10_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK10_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK10_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK10_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK10_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK10_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK10_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK10_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK10_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK10_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK10_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK11: OTG_HS host channel-11 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK11 (* ((volatile uint32_t *) (0x40040400 + 620)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK11_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK11_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK11_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK11_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK11_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK11_ACKM = 1U << 5 ;

  // Field NYET: response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK11_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK11_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK11_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK11_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK11_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ0: OTG_HS host channel-11 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ0 (* ((volatile uint32_t *) (0x40040400 + 272)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ0_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ0_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ0_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ1: OTG_HS host channel-1 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ1 (* ((volatile uint32_t *) (0x40040400 + 304)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ1_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ1_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ1_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ2: OTG_HS host channel-2 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ2 (* ((volatile uint32_t *) (0x40040400 + 336)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ2_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ2_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ2_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ3: OTG_HS host channel-3 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ3 (* ((volatile uint32_t *) (0x40040400 + 368)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ3_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ3_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ3_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ4: OTG_HS host channel-4 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ4 (* ((volatile uint32_t *) (0x40040400 + 400)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ4_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ4_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ4_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ5: OTG_HS host channel-5 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ5 (* ((volatile uint32_t *) (0x40040400 + 432)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ5_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ5_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ5_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ6: OTG_HS host channel-6 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ6 (* ((volatile uint32_t *) (0x40040400 + 464)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ6_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ6_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ6_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ7: OTG_HS host channel-7 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ7 (* ((volatile uint32_t *) (0x40040400 + 496)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ7_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ7_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ7_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ8: OTG_HS host channel-8 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ8 (* ((volatile uint32_t *) (0x40040400 + 528)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ8_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ8_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ8_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ9: OTG_HS host channel-9 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ9 (* ((volatile uint32_t *) (0x40040400 + 560)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ9_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ9_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ9_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ10: OTG_HS host channel-10 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ10 (* ((volatile uint32_t *) (0x40040400 + 592)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ10_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ10_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ10_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ11: OTG_HS host channel-11 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ11 (* ((volatile uint32_t *) (0x40040400 + 624)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ11_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ11_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ11_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA0: OTG_HS host channel-0 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA0 (* ((volatile uint32_t *) (0x40040400 + 276)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA0_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA1: OTG_HS host channel-1 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA1 (* ((volatile uint32_t *) (0x40040400 + 308)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA1_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA2: OTG_HS host channel-2 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA2 (* ((volatile uint32_t *) (0x40040400 + 340)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA2_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA3: OTG_HS host channel-3 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA3 (* ((volatile uint32_t *) (0x40040400 + 372)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA3_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA4: OTG_HS host channel-4 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA4 (* ((volatile uint32_t *) (0x40040400 + 404)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA4_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA5: OTG_HS host channel-5 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA5 (* ((volatile uint32_t *) (0x40040400 + 436)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA5_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA6: OTG_HS host channel-6 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA6 (* ((volatile uint32_t *) (0x40040400 + 468)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA6_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA7: OTG_HS host channel-7 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA7 (* ((volatile uint32_t *) (0x40040400 + 500)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA7_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA8: OTG_HS host channel-8 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA8 (* ((volatile uint32_t *) (0x40040400 + 532)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA8_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA9: OTG_HS host channel-9 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA9 (* ((volatile uint32_t *) (0x40040400 + 564)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA9_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA10: OTG_HS host channel-10 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA10 (* ((volatile uint32_t *) (0x40040400 + 596)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA10_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA11: OTG_HS host channel-11 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA11 (* ((volatile uint32_t *) (0x40040400 + 628)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA11_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR12: OTG_HS host channel-12 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR12 (* ((volatile uint32_t *) (0x40040400 + 632)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR12_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR12_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR12_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR12_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR12_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR12_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR12_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR12_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR12_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR12_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT12: OTG_HS host channel-12 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT12 (* ((volatile uint32_t *) (0x40040400 + 636)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT12_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT12_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT12_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT12_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT12_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT12: OTG_HS host channel-12 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT12 (* ((volatile uint32_t *) (0x40040400 + 640)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT12_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT12_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT12_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT12_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT12_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT12_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT12_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT12_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT12_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT12_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT12_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK12: OTG_HS host channel-12 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK12 (* ((volatile uint32_t *) (0x40040400 + 644)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK12_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK12_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK12_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK12_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK12_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK12_ACKM = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK12_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK12_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK12_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK12_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK12_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ12: OTG_HS host channel-12 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ12 (* ((volatile uint32_t *) (0x40040400 + 648)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ12_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ12_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ12_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA12: OTG_HS host channel-12 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA12 (* ((volatile uint32_t *) (0x40040400 + 652)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA12_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR13: OTG_HS host channel-13 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR13 (* ((volatile uint32_t *) (0x40040400 + 656)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR13_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR13_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR13_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR13_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR13_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR13_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR13_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR13_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR13_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR13_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT13: OTG_HS host channel-13 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT13 (* ((volatile uint32_t *) (0x40040400 + 660)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT13_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT13_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT13_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT13_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT13_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT13: OTG_HS host channel-13 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT13 (* ((volatile uint32_t *) (0x40040400 + 664)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT13_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT13_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT13_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT13_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT13_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT13_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT13_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT13_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT13_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT13_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT13_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK13: OTG_HS host channel-13 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK13 (* ((volatile uint32_t *) (0x40040400 + 668)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK13_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK13_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK13_AHBERR = 1U << 2 ;

  // Field STALLM: STALLM response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK13_STALLM = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK13_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK13_ACKM = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK13_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK13_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK13_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK13_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK13_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ13: OTG_HS host channel-13 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ13 (* ((volatile uint32_t *) (0x40040400 + 672)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ13_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ13_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ13_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA13: OTG_HS host channel-13 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA13 (* ((volatile uint32_t *) (0x40040400 + 676)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA13_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR14: OTG_HS host channel-14 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR14 (* ((volatile uint32_t *) (0x40040400 + 680)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR14_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR14_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR14_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR14_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR14_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR14_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR14_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR14_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR14_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR14_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT14: OTG_HS host channel-14 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT14 (* ((volatile uint32_t *) (0x40040400 + 684)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT14_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT14_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT14_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT14_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT14_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT14: OTG_HS host channel-14 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT14 (* ((volatile uint32_t *) (0x40040400 + 688)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT14_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT14_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT14_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT14_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT14_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT14_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT14_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT14_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT14_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT14_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT14_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK14: OTG_HS host channel-14 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK14 (* ((volatile uint32_t *) (0x40040400 + 692)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK14_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK14_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK14_AHBERR = 1U << 2 ;

  // Field STALLM: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK14_STALLM = 1U << 3 ;

  // Field NAKM: NAKM response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK14_NAKM = 1U << 4 ;

  // Field ACKM: ACKM response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK14_ACKM = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK14_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK14_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK14_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK14_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK14_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ14: OTG_HS host channel-14 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ14 (* ((volatile uint32_t *) (0x40040400 + 696)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ14_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ14_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ14_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA14: OTG_HS host channel-14 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA14 (* ((volatile uint32_t *) (0x40040400 + 700)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA14_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCCHAR15: OTG_HS host channel-15 characteristics register
  #define OTG_HS_HOST_OTG_HS_HCCHAR15 (* ((volatile uint32_t *) (0x40040400 + 704)))

  // Field MPSIZ: Maximum packet size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR15_MPSIZ (const uint32_t inValue) {return (inValue & 0x7FFU) << 0 ; }

  // Field EPNUM: Endpoint number
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR15_EPNUM (const uint32_t inValue) {return (inValue & 0xFU) << 11 ; }

  // Field EPDIR: Endpoint direction
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR15_EPDIR = 1U << 15 ;

  // Field LSDEV: Low-speed device
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR15_LSDEV = 1U << 17 ;

  // Field EPTYP: Endpoint type
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR15_EPTYP (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field MC: Multi Count (MC) / Error Count (EC)
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR15_MC (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field DAD: Device address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCCHAR15_DAD (const uint32_t inValue) {return (inValue & 0x7FU) << 22 ; }

  // Field ODDFRM: Odd frame
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR15_ODDFRM = 1U << 29 ;

  // Field CHDIS: Channel disable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR15_CHDIS = 1U << 30 ;

  // Field CHENA: Channel enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCCHAR15_CHENA = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCSPLT15: OTG_HS host channel-15 split control register
  #define OTG_HS_HOST_OTG_HS_HCSPLT15 (* ((volatile uint32_t *) (0x40040400 + 708)))

  // Field PRTADDR: Port address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT15_PRTADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

  // Field HUBADDR: Hub address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT15_HUBADDR (const uint32_t inValue) {return (inValue & 0x7FU) << 7 ; }

  // Field XACTPOS: XACTPOS
    inline uint32_t OTG_HS_HOST_OTG_HS_HCSPLT15_XACTPOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field COMPLSPLT: Do complete split
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT15_COMPLSPLT = 1U << 16 ;

  // Field SPLITEN: Split enable
    const uint32_t OTG_HS_HOST_OTG_HS_HCSPLT15_SPLITEN = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINT15: OTG_HS host channel-15 interrupt register
  #define OTG_HS_HOST_OTG_HS_HCINT15 (* ((volatile uint32_t *) (0x40040400 + 712)))

  // Field XFRC: Transfer completed
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT15_XFRC = 1U << 0 ;

  // Field CHH: Channel halted
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT15_CHH = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT15_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT15_STALL = 1U << 3 ;

  // Field NAK: NAK response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT15_NAK = 1U << 4 ;

  // Field ACK: ACK response received/transmitted interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT15_ACK = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT15_NYET = 1U << 6 ;

  // Field TXERR: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT15_TXERR = 1U << 7 ;

  // Field BBERR: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT15_BBERR = 1U << 8 ;

  // Field FRMOR: Frame overrun
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT15_FRMOR = 1U << 9 ;

  // Field DTERR: Data toggle error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINT15_DTERR = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCINTMSK15: OTG_HS host channel-15 interrupt mask register
  #define OTG_HS_HOST_OTG_HS_HCINTMSK15 (* ((volatile uint32_t *) (0x40040400 + 716)))

  // Field XFRCM: Transfer completed mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK15_XFRCM = 1U << 0 ;

  // Field CHHM: Channel halted mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK15_CHHM = 1U << 1 ;

  // Field AHBERR: AHB error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK15_AHBERR = 1U << 2 ;

  // Field STALL: STALL response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK15_STALL = 1U << 3 ;

  // Field NAKM: NAK response received interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK15_NAKM = 1U << 4 ;

  // Field ACKM: ACK response received/transmitted interrupt mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK15_ACKM = 1U << 5 ;

  // Field NYET: Response received interrupt
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK15_NYET = 1U << 6 ;

  // Field TXERRM: Transaction error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK15_TXERRM = 1U << 7 ;

  // Field BBERRM: Babble error
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK15_BBERRM = 1U << 8 ;

  // Field FRMORM: Frame overrun mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK15_FRMORM = 1U << 9 ;

  // Field DTERRM: Data toggle error mask
    const uint32_t OTG_HS_HOST_OTG_HS_HCINTMSK15_DTERRM = 1U << 10 ;

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCTSIZ15: OTG_HS host channel-15 transfer size register
  #define OTG_HS_HOST_OTG_HS_HCTSIZ15 (* ((volatile uint32_t *) (0x40040400 + 720)))

  // Field XFRSIZ: Transfer size
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ15_XFRSIZ (const uint32_t inValue) {return (inValue & 0x7FFFFU) << 0 ; }

  // Field PKTCNT: Packet count
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ15_PKTCNT (const uint32_t inValue) {return (inValue & 0x3FFU) << 19 ; }

  // Field DPID: Data PID
    inline uint32_t OTG_HS_HOST_OTG_HS_HCTSIZ15_DPID (const uint32_t inValue) {return (inValue & 0x3U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register OTG_HS_HCDMA15: OTG_HS host channel-15 DMA address register
  #define OTG_HS_HOST_OTG_HS_HCDMA15 (* ((volatile uint32_t *) (0x40040400 + 724)))

  // Field DMAADDR: DMA address
    inline uint32_t OTG_HS_HOST_OTG_HS_HCDMA15_DMAADDR (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral OTG_HS_PWRCLK: USB on the go high speed
//------------------------------------------------------------------------------

//---  Register OTG_HS_PCGCR: Power and clock gating control register
  #define OTG_HS_PWRCLK_OTG_HS_PCGCR (* ((volatile uint32_t *) (0x40040E00 + 0)))

  // Field STPPCLK: Stop PHY clock
    const uint32_t OTG_HS_PWRCLK_OTG_HS_PCGCR_STPPCLK = 1U << 0 ;

  // Field GATEHCLK: Gate HCLK
    const uint32_t OTG_HS_PWRCLK_OTG_HS_PCGCR_GATEHCLK = 1U << 1 ;

  // Field PHYSUSP: PHY suspended
    const uint32_t OTG_HS_PWRCLK_OTG_HS_PCGCR_PHYSUSP = 1U << 4 ;

//------------------------------------------------------------------------------
// Peripheral PF: Processor features
//------------------------------------------------------------------------------

//---  Register CLIDR: Cache Level ID register
  #define PF_CLIDR (* ((const volatile uint32_t *) (0xE000ED78 + 0)))

  // Field CL1: CL1
    inline uint32_t PF_CLIDR_CL1 (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field CL2: CL2
    inline uint32_t PF_CLIDR_CL2 (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field CL3: CL3
    inline uint32_t PF_CLIDR_CL3 (const uint32_t inValue) {return (inValue & 0x7U) << 6 ; }

  // Field CL4: CL4
    inline uint32_t PF_CLIDR_CL4 (const uint32_t inValue) {return (inValue & 0x7U) << 9 ; }

  // Field CL5: CL5
    inline uint32_t PF_CLIDR_CL5 (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field CL6: CL6
    inline uint32_t PF_CLIDR_CL6 (const uint32_t inValue) {return (inValue & 0x7U) << 15 ; }

  // Field CL7: CL7
    inline uint32_t PF_CLIDR_CL7 (const uint32_t inValue) {return (inValue & 0x7U) << 18 ; }

  // Field LoUIS: LoUIS
    inline uint32_t PF_CLIDR_LoUIS (const uint32_t inValue) {return (inValue & 0x7U) << 21 ; }

  // Field LoC: LoC
    inline uint32_t PF_CLIDR_LoC (const uint32_t inValue) {return (inValue & 0x7U) << 24 ; }

  // Field LoU: LoU
    inline uint32_t PF_CLIDR_LoU (const uint32_t inValue) {return (inValue & 0x7U) << 27 ; }

//------------------------------------------------------------------------------

//---  Register CTR: Cache Type register
  #define PF_CTR (* ((const volatile uint32_t *) (0xE000ED78 + 4)))

  // Field _IminLine: IminLine
    inline uint32_t PF_CTR__IminLine (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field DMinLine: DMinLine
    inline uint32_t PF_CTR_DMinLine (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field ERG: ERG
    inline uint32_t PF_CTR_ERG (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field CWG: CWG
    inline uint32_t PF_CTR_CWG (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field Format: Format
    inline uint32_t PF_CTR_Format (const uint32_t inValue) {return (inValue & 0x7U) << 29 ; }

//------------------------------------------------------------------------------

//---  Register CCSIDR: Cache Size ID register
  #define PF_CCSIDR (* ((const volatile uint32_t *) (0xE000ED78 + 8)))

  // Field LineSize: LineSize
    inline uint32_t PF_CCSIDR_LineSize (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field Associativity: Associativity
    inline uint32_t PF_CCSIDR_Associativity (const uint32_t inValue) {return (inValue & 0x3FFU) << 3 ; }

  // Field NumSets: NumSets
    inline uint32_t PF_CCSIDR_NumSets (const uint32_t inValue) {return (inValue & 0x7FFFU) << 13 ; }

  // Field WA: WA
    const uint32_t PF_CCSIDR_WA = 1U << 28 ;

  // Field RA: RA
    const uint32_t PF_CCSIDR_RA = 1U << 29 ;

  // Field WB: WB
    const uint32_t PF_CCSIDR_WB = 1U << 30 ;

  // Field WT: WT
    const uint32_t PF_CCSIDR_WT = 1U << 31 ;

//------------------------------------------------------------------------------
// Peripheral PWR: Power control
//------------------------------------------------------------------------------

//---  Register CR1: power control register
  #define PWR_CR1 (* ((volatile uint32_t *) (0x40007000 + 0)))

  // Field LPDS: Low-power deep sleep
    const uint32_t PWR_CR1_LPDS = 1U << 0 ;

  // Field PDDS: Power down deepsleep
    const uint32_t PWR_CR1_PDDS = 1U << 1 ;

  // Field CSBF: Clear standby flag
    const uint32_t PWR_CR1_CSBF = 1U << 3 ;

  // Field PVDE: Power voltage detector enable
    const uint32_t PWR_CR1_PVDE = 1U << 4 ;

  // Field PLS: PVD level selection
    inline uint32_t PWR_CR1_PLS (const uint32_t inValue) {return (inValue & 0x7U) << 5 ; }

  // Field DBP: Disable backup domain write protection
    const uint32_t PWR_CR1_DBP = 1U << 8 ;

  // Field FPDS: Flash power down in Stop mode
    const uint32_t PWR_CR1_FPDS = 1U << 9 ;

  // Field LPUDS: Low-power regulator in deepsleep under-drive mode
    const uint32_t PWR_CR1_LPUDS = 1U << 10 ;

  // Field MRUDS: Main regulator in deepsleep under-drive mode
    const uint32_t PWR_CR1_MRUDS = 1U << 11 ;

  // Field ADCDC1: ADCDC1
    const uint32_t PWR_CR1_ADCDC1 = 1U << 13 ;

  // Field VOS: Regulator voltage scaling output selection
    inline uint32_t PWR_CR1_VOS (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field ODEN: Over-drive enable
    const uint32_t PWR_CR1_ODEN = 1U << 16 ;

  // Field ODSWEN: Over-drive switching enabled
    const uint32_t PWR_CR1_ODSWEN = 1U << 17 ;

  // Field UDEN: Under-drive enable in stop mode
    inline uint32_t PWR_CR1_UDEN (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

//------------------------------------------------------------------------------

//---  Register CSR1: power control/status register
  #define PWR_CSR1 (* ((volatile uint32_t *) (0x40007000 + 4)))

  // Field WUIF: Wakeup internal flag
    const uint32_t PWR_CSR1_WUIF = 1U << 0 ;

  // Field SBF: Standby flag
    const uint32_t PWR_CSR1_SBF = 1U << 1 ;

  // Field PVDO: PVD output
    const uint32_t PWR_CSR1_PVDO = 1U << 2 ;

  // Field BRR: Backup regulator ready
    const uint32_t PWR_CSR1_BRR = 1U << 3 ;

  // Field BRE: Backup regulator enable
    const uint32_t PWR_CSR1_BRE = 1U << 9 ;

  // Field VOSRDY: Regulator voltage scaling output selection ready bit
    const uint32_t PWR_CSR1_VOSRDY = 1U << 14 ;

  // Field ODRDY: Over-drive mode ready
    const uint32_t PWR_CSR1_ODRDY = 1U << 16 ;

  // Field ODSWRDY: Over-drive mode switching ready
    const uint32_t PWR_CSR1_ODSWRDY = 1U << 17 ;

  // Field UDRDY: Under-drive ready flag
    inline uint32_t PWR_CSR1_UDRDY (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

//------------------------------------------------------------------------------

//---  Register CR2: power control register
  #define PWR_CR2 (* ((volatile uint32_t *) (0x40007000 + 8)))

  // Field CWUPF1: Clear Wakeup Pin flag for PA0
    const uint32_t PWR_CR2_CWUPF1 = 1U << 0 ;

  // Field CWUPF2: Clear Wakeup Pin flag for PA2
    const uint32_t PWR_CR2_CWUPF2 = 1U << 1 ;

  // Field CWUPF3: Clear Wakeup Pin flag for PC1
    const uint32_t PWR_CR2_CWUPF3 = 1U << 2 ;

  // Field CWUPF4: Clear Wakeup Pin flag for PC13
    const uint32_t PWR_CR2_CWUPF4 = 1U << 3 ;

  // Field CWUPF5: Clear Wakeup Pin flag for PI8
    const uint32_t PWR_CR2_CWUPF5 = 1U << 4 ;

  // Field CWUPF6: Clear Wakeup Pin flag for PI11
    const uint32_t PWR_CR2_CWUPF6 = 1U << 5 ;

  // Field WUPP1: Wakeup pin polarity bit for PA0
    const uint32_t PWR_CR2_WUPP1 = 1U << 8 ;

  // Field WUPP2: Wakeup pin polarity bit for PA2
    const uint32_t PWR_CR2_WUPP2 = 1U << 9 ;

  // Field WUPP3: Wakeup pin polarity bit for PC1
    const uint32_t PWR_CR2_WUPP3 = 1U << 10 ;

  // Field WUPP4: Wakeup pin polarity bit for PC13
    const uint32_t PWR_CR2_WUPP4 = 1U << 11 ;

  // Field WUPP5: Wakeup pin polarity bit for PI8
    const uint32_t PWR_CR2_WUPP5 = 1U << 12 ;

  // Field WUPP6: Wakeup pin polarity bit for PI11
    const uint32_t PWR_CR2_WUPP6 = 1U << 13 ;

//------------------------------------------------------------------------------

//---  Register CSR2: power control/status register
  #define PWR_CSR2 (* ((volatile uint32_t *) (0x40007000 + 12)))

  // Field WUPF1: Wakeup Pin flag for PA0
    const uint32_t PWR_CSR2_WUPF1 = 1U << 0 ;

  // Field WUPF2: Wakeup Pin flag for PA2
    const uint32_t PWR_CSR2_WUPF2 = 1U << 1 ;

  // Field WUPF3: Wakeup Pin flag for PC1
    const uint32_t PWR_CSR2_WUPF3 = 1U << 2 ;

  // Field WUPF4: Wakeup Pin flag for PC13
    const uint32_t PWR_CSR2_WUPF4 = 1U << 3 ;

  // Field WUPF5: Wakeup Pin flag for PI8
    const uint32_t PWR_CSR2_WUPF5 = 1U << 4 ;

  // Field WUPF6: Wakeup Pin flag for PI11
    const uint32_t PWR_CSR2_WUPF6 = 1U << 5 ;

  // Field EWUP1: Enable Wakeup pin for PA0
    const uint32_t PWR_CSR2_EWUP1 = 1U << 8 ;

  // Field EWUP2: Enable Wakeup pin for PA2
    const uint32_t PWR_CSR2_EWUP2 = 1U << 9 ;

  // Field EWUP3: Enable Wakeup pin for PC1
    const uint32_t PWR_CSR2_EWUP3 = 1U << 10 ;

  // Field EWUP4: Enable Wakeup pin for PC13
    const uint32_t PWR_CSR2_EWUP4 = 1U << 11 ;

  // Field EWUP5: Enable Wakeup pin for PI8
    const uint32_t PWR_CSR2_EWUP5 = 1U << 12 ;

  // Field EWUP6: Enable Wakeup pin for PI11
    const uint32_t PWR_CSR2_EWUP6 = 1U << 13 ;

//------------------------------------------------------------------------------
// Peripheral QUADSPI: QuadSPI interface
//------------------------------------------------------------------------------

//---  Register CR: control register
  #define QUADSPI_CR (* ((volatile uint32_t *) (0xA0001000 + 0)))

  // Field PRESCALER: Clock prescaler
    inline uint32_t QUADSPI_CR_PRESCALER (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field PMM: Polling match mode
    const uint32_t QUADSPI_CR_PMM = 1U << 23 ;

  // Field APMS: Automatic poll mode stop
    const uint32_t QUADSPI_CR_APMS = 1U << 22 ;

  // Field TOIE: TimeOut interrupt enable
    const uint32_t QUADSPI_CR_TOIE = 1U << 20 ;

  // Field SMIE: Status match interrupt enable
    const uint32_t QUADSPI_CR_SMIE = 1U << 19 ;

  // Field FTIE: FIFO threshold interrupt enable
    const uint32_t QUADSPI_CR_FTIE = 1U << 18 ;

  // Field TCIE: Transfer complete interrupt enable
    const uint32_t QUADSPI_CR_TCIE = 1U << 17 ;

  // Field TEIE: Transfer error interrupt enable
    const uint32_t QUADSPI_CR_TEIE = 1U << 16 ;

  // Field FTHRES: IFO threshold level
    inline uint32_t QUADSPI_CR_FTHRES (const uint32_t inValue) {return (inValue & 0x1FU) << 8 ; }

  // Field FSEL: FLASH memory selection
    const uint32_t QUADSPI_CR_FSEL = 1U << 7 ;

  // Field DFM: Dual-flash mode
    const uint32_t QUADSPI_CR_DFM = 1U << 6 ;

  // Field SSHIFT: Sample shift
    const uint32_t QUADSPI_CR_SSHIFT = 1U << 4 ;

  // Field TCEN: Timeout counter enable
    const uint32_t QUADSPI_CR_TCEN = 1U << 3 ;

  // Field DMAEN: DMA enable
    const uint32_t QUADSPI_CR_DMAEN = 1U << 2 ;

  // Field ABORT: Abort request
    const uint32_t QUADSPI_CR_ABORT = 1U << 1 ;

  // Field EN: Enable
    const uint32_t QUADSPI_CR_EN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DCR: device configuration register
  #define QUADSPI_DCR (* ((volatile uint32_t *) (0xA0001000 + 4)))

  // Field FSIZE: FLASH memory size
    inline uint32_t QUADSPI_DCR_FSIZE (const uint32_t inValue) {return (inValue & 0x1FU) << 16 ; }

  // Field CSHT: Chip select high time
    inline uint32_t QUADSPI_DCR_CSHT (const uint32_t inValue) {return (inValue & 0x7U) << 8 ; }

  // Field CKMODE: Mode 0 / mode 3
    const uint32_t QUADSPI_DCR_CKMODE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define QUADSPI_SR (* ((const volatile uint32_t *) (0xA0001000 + 8)))

  // Field FLEVEL: FIFO level
    inline uint32_t QUADSPI_SR_FLEVEL (const uint32_t inValue) {return (inValue & 0x7FU) << 8 ; }

  // Field BUSY: Busy
    const uint32_t QUADSPI_SR_BUSY = 1U << 5 ;

  // Field TOF: Timeout flag
    const uint32_t QUADSPI_SR_TOF = 1U << 4 ;

  // Field SMF: Status match flag
    const uint32_t QUADSPI_SR_SMF = 1U << 3 ;

  // Field FTF: FIFO threshold flag
    const uint32_t QUADSPI_SR_FTF = 1U << 2 ;

  // Field TCF: Transfer complete flag
    const uint32_t QUADSPI_SR_TCF = 1U << 1 ;

  // Field TEF: Transfer error flag
    const uint32_t QUADSPI_SR_TEF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register FCR: flag clear register
  #define QUADSPI_FCR (* ((volatile uint32_t *) (0xA0001000 + 12)))

  // Field CTOF: Clear timeout flag
    const uint32_t QUADSPI_FCR_CTOF = 1U << 4 ;

  // Field CSMF: Clear status match flag
    const uint32_t QUADSPI_FCR_CSMF = 1U << 3 ;

  // Field CTCF: Clear transfer complete flag
    const uint32_t QUADSPI_FCR_CTCF = 1U << 1 ;

  // Field CTEF: Clear transfer error flag
    const uint32_t QUADSPI_FCR_CTEF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DLR: data length register
  #define QUADSPI_DLR (* ((volatile uint32_t *) (0xA0001000 + 16)))

  // Field DL: Data length
    inline uint32_t QUADSPI_DLR_DL (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR: communication configuration register
  #define QUADSPI_CCR (* ((volatile uint32_t *) (0xA0001000 + 20)))

  // Field DDRM: Double data rate mode
    const uint32_t QUADSPI_CCR_DDRM = 1U << 31 ;

  // Field DHHC: DDR hold half cycle
    const uint32_t QUADSPI_CCR_DHHC = 1U << 30 ;

  // Field SIOO: Send instruction only once mode
    const uint32_t QUADSPI_CCR_SIOO = 1U << 28 ;

  // Field FMODE: Functional mode
    inline uint32_t QUADSPI_CCR_FMODE (const uint32_t inValue) {return (inValue & 0x3U) << 26 ; }

  // Field DMODE: Data mode
    inline uint32_t QUADSPI_CCR_DMODE (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field DCYC: Number of dummy cycles
    inline uint32_t QUADSPI_CCR_DCYC (const uint32_t inValue) {return (inValue & 0x1FU) << 18 ; }

  // Field ABSIZE: Alternate bytes size
    inline uint32_t QUADSPI_CCR_ABSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field ABMODE: Alternate bytes mode
    inline uint32_t QUADSPI_CCR_ABMODE (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field ADSIZE: Address size
    inline uint32_t QUADSPI_CCR_ADSIZE (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field ADMODE: Address mode
    inline uint32_t QUADSPI_CCR_ADMODE (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field IMODE: Instruction mode
    inline uint32_t QUADSPI_CCR_IMODE (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field INSTRUCTION: Instruction
    inline uint32_t QUADSPI_CCR_INSTRUCTION (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AR: address register
  #define QUADSPI_AR (* ((volatile uint32_t *) (0xA0001000 + 24)))

  // Field ADDRESS: Address
    inline uint32_t QUADSPI_AR_ADDRESS (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ABR: ABR
  #define QUADSPI_ABR (* ((volatile uint32_t *) (0xA0001000 + 28)))

  // Field ALTERNATE: ALTERNATE
    inline uint32_t QUADSPI_ABR_ALTERNATE (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DR: data register
  #define QUADSPI_DR (* ((volatile uint32_t *) (0xA0001000 + 32)))

  // Field DATA: Data
    inline uint32_t QUADSPI_DR_DATA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSMKR: polling status mask register
  #define QUADSPI_PSMKR (* ((volatile uint32_t *) (0xA0001000 + 36)))

  // Field MASK: Status mask
    inline uint32_t QUADSPI_PSMKR_MASK (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSMAR: polling status match register
  #define QUADSPI_PSMAR (* ((volatile uint32_t *) (0xA0001000 + 40)))

  // Field MATCH: Status match
    inline uint32_t QUADSPI_PSMAR_MATCH (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PIR: polling interval register
  #define QUADSPI_PIR (* ((volatile uint32_t *) (0xA0001000 + 44)))

  // Field INTERVAL: Polling interval
    inline uint32_t QUADSPI_PIR_INTERVAL (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register LPTR: low-power timeout register
  #define QUADSPI_LPTR (* ((volatile uint32_t *) (0xA0001000 + 48)))

  // Field TIMEOUT: Timeout period
    inline uint32_t QUADSPI_LPTR_TIMEOUT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral RCC: Reset and clock control
//------------------------------------------------------------------------------

//---  Register CR: clock control register
  #define RCC_CR (* ((volatile uint32_t *) (0x40023800 + 0)))

  // Field PLLI2SRDY: PLLI2S clock ready flag
    const uint32_t RCC_CR_PLLI2SRDY = 1U << 27 ;

  // Field PLLI2SON: PLLI2S enable
    const uint32_t RCC_CR_PLLI2SON = 1U << 26 ;

  // Field PLLRDY: Main PLL (PLL) clock ready flag
    const uint32_t RCC_CR_PLLRDY = 1U << 25 ;

  // Field PLLON: Main PLL (PLL) enable
    const uint32_t RCC_CR_PLLON = 1U << 24 ;

  // Field CSSON: Clock security system enable
    const uint32_t RCC_CR_CSSON = 1U << 19 ;

  // Field HSEBYP: HSE clock bypass
    const uint32_t RCC_CR_HSEBYP = 1U << 18 ;

  // Field HSERDY: HSE clock ready flag
    const uint32_t RCC_CR_HSERDY = 1U << 17 ;

  // Field HSEON: HSE clock enable
    const uint32_t RCC_CR_HSEON = 1U << 16 ;

  // Field HSICAL: Internal high-speed clock calibration
    inline uint32_t RCC_CR_HSICAL (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field HSITRIM: Internal high-speed clock trimming
    inline uint32_t RCC_CR_HSITRIM (const uint32_t inValue) {return (inValue & 0x1FU) << 3 ; }

  // Field HSIRDY: Internal high-speed clock ready flag
    const uint32_t RCC_CR_HSIRDY = 1U << 1 ;

  // Field HSION: Internal high-speed clock enable
    const uint32_t RCC_CR_HSION = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register PLLCFGR: PLL configuration register
  #define RCC_PLLCFGR (* ((volatile uint32_t *) (0x40023800 + 4)))

  // Field PLLQ3: Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
    const uint32_t RCC_PLLCFGR_PLLQ3 = 1U << 27 ;

  // Field PLLQ2: Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
    const uint32_t RCC_PLLCFGR_PLLQ2 = 1U << 26 ;

  // Field PLLQ1: Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
    const uint32_t RCC_PLLCFGR_PLLQ1 = 1U << 25 ;

  // Field PLLQ0: Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
    const uint32_t RCC_PLLCFGR_PLLQ0 = 1U << 24 ;

  // Field PLLSRC: Main PLL(PLL) and audio PLL (PLLI2S) entry clock source
    const uint32_t RCC_PLLCFGR_PLLSRC = 1U << 22 ;

  // Field PLLP1: Main PLL (PLL) division factor for main system clock
    const uint32_t RCC_PLLCFGR_PLLP1 = 1U << 17 ;

  // Field PLLP0: Main PLL (PLL) division factor for main system clock
    const uint32_t RCC_PLLCFGR_PLLP0 = 1U << 16 ;

  // Field PLLN8: Main PLL (PLL) multiplication factor for VCO
    const uint32_t RCC_PLLCFGR_PLLN8 = 1U << 14 ;

  // Field PLLN7: Main PLL (PLL) multiplication factor for VCO
    const uint32_t RCC_PLLCFGR_PLLN7 = 1U << 13 ;

  // Field PLLN6: Main PLL (PLL) multiplication factor for VCO
    const uint32_t RCC_PLLCFGR_PLLN6 = 1U << 12 ;

  // Field PLLN5: Main PLL (PLL) multiplication factor for VCO
    const uint32_t RCC_PLLCFGR_PLLN5 = 1U << 11 ;

  // Field PLLN4: Main PLL (PLL) multiplication factor for VCO
    const uint32_t RCC_PLLCFGR_PLLN4 = 1U << 10 ;

  // Field PLLN3: Main PLL (PLL) multiplication factor for VCO
    const uint32_t RCC_PLLCFGR_PLLN3 = 1U << 9 ;

  // Field PLLN2: Main PLL (PLL) multiplication factor for VCO
    const uint32_t RCC_PLLCFGR_PLLN2 = 1U << 8 ;

  // Field PLLN1: Main PLL (PLL) multiplication factor for VCO
    const uint32_t RCC_PLLCFGR_PLLN1 = 1U << 7 ;

  // Field PLLN0: Main PLL (PLL) multiplication factor for VCO
    const uint32_t RCC_PLLCFGR_PLLN0 = 1U << 6 ;

  // Field PLLM5: Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
    const uint32_t RCC_PLLCFGR_PLLM5 = 1U << 5 ;

  // Field PLLM4: Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
    const uint32_t RCC_PLLCFGR_PLLM4 = 1U << 4 ;

  // Field PLLM3: Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
    const uint32_t RCC_PLLCFGR_PLLM3 = 1U << 3 ;

  // Field PLLM2: Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
    const uint32_t RCC_PLLCFGR_PLLM2 = 1U << 2 ;

  // Field PLLM1: Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
    const uint32_t RCC_PLLCFGR_PLLM1 = 1U << 1 ;

  // Field PLLM0: Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
    const uint32_t RCC_PLLCFGR_PLLM0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CFGR: clock configuration register
  #define RCC_CFGR (* ((volatile uint32_t *) (0x40023800 + 8)))

  // Field MCO2: Microcontroller clock output 2
    inline uint32_t RCC_CFGR_MCO2 (const uint32_t inValue) {return (inValue & 0x3U) << 30 ; }

  // Field MCO2PRE: MCO2 prescaler
    inline uint32_t RCC_CFGR_MCO2PRE (const uint32_t inValue) {return (inValue & 0x7U) << 27 ; }

  // Field MCO1PRE: MCO1 prescaler
    inline uint32_t RCC_CFGR_MCO1PRE (const uint32_t inValue) {return (inValue & 0x7U) << 24 ; }

  // Field I2SSRC: I2S clock selection
    const uint32_t RCC_CFGR_I2SSRC = 1U << 23 ;

  // Field MCO1: Microcontroller clock output 1
    inline uint32_t RCC_CFGR_MCO1 (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field RTCPRE: HSE division factor for RTC clock
    inline uint32_t RCC_CFGR_RTCPRE (const uint32_t inValue) {return (inValue & 0x1FU) << 16 ; }

  // Field PPRE2: APB high-speed prescaler (APB2)
    inline uint32_t RCC_CFGR_PPRE2 (const uint32_t inValue) {return (inValue & 0x7U) << 13 ; }

  // Field PPRE1: APB Low speed prescaler (APB1)
    inline uint32_t RCC_CFGR_PPRE1 (const uint32_t inValue) {return (inValue & 0x7U) << 10 ; }

  // Field HPRE: AHB prescaler
    inline uint32_t RCC_CFGR_HPRE (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field SWS1: System clock switch status
    const uint32_t RCC_CFGR_SWS1 = 1U << 3 ;

  // Field SWS0: System clock switch status
    const uint32_t RCC_CFGR_SWS0 = 1U << 2 ;

  // Field SW1: System clock switch
    const uint32_t RCC_CFGR_SW1 = 1U << 1 ;

  // Field SW0: System clock switch
    const uint32_t RCC_CFGR_SW0 = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CIR: clock interrupt register
  #define RCC_CIR (* ((volatile uint32_t *) (0x40023800 + 12)))

  // Field CSSC: Clock security system interrupt clear
    const uint32_t RCC_CIR_CSSC = 1U << 23 ;

  // Field PLLSAIRDYC: PLLSAI Ready Interrupt Clear
    const uint32_t RCC_CIR_PLLSAIRDYC = 1U << 22 ;

  // Field PLLI2SRDYC: PLLI2S ready interrupt clear
    const uint32_t RCC_CIR_PLLI2SRDYC = 1U << 21 ;

  // Field PLLRDYC: Main PLL(PLL) ready interrupt clear
    const uint32_t RCC_CIR_PLLRDYC = 1U << 20 ;

  // Field HSERDYC: HSE ready interrupt clear
    const uint32_t RCC_CIR_HSERDYC = 1U << 19 ;

  // Field HSIRDYC: HSI ready interrupt clear
    const uint32_t RCC_CIR_HSIRDYC = 1U << 18 ;

  // Field LSERDYC: LSE ready interrupt clear
    const uint32_t RCC_CIR_LSERDYC = 1U << 17 ;

  // Field LSIRDYC: LSI ready interrupt clear
    const uint32_t RCC_CIR_LSIRDYC = 1U << 16 ;

  // Field PLLSAIRDYIE: PLLSAI Ready Interrupt Enable
    const uint32_t RCC_CIR_PLLSAIRDYIE = 1U << 14 ;

  // Field PLLI2SRDYIE: PLLI2S ready interrupt enable
    const uint32_t RCC_CIR_PLLI2SRDYIE = 1U << 13 ;

  // Field PLLRDYIE: Main PLL (PLL) ready interrupt enable
    const uint32_t RCC_CIR_PLLRDYIE = 1U << 12 ;

  // Field HSERDYIE: HSE ready interrupt enable
    const uint32_t RCC_CIR_HSERDYIE = 1U << 11 ;

  // Field HSIRDYIE: HSI ready interrupt enable
    const uint32_t RCC_CIR_HSIRDYIE = 1U << 10 ;

  // Field LSERDYIE: LSE ready interrupt enable
    const uint32_t RCC_CIR_LSERDYIE = 1U << 9 ;

  // Field LSIRDYIE: LSI ready interrupt enable
    const uint32_t RCC_CIR_LSIRDYIE = 1U << 8 ;

  // Field CSSF: Clock security system interrupt flag
    const uint32_t RCC_CIR_CSSF = 1U << 7 ;

  // Field PLLSAIRDYF: PLLSAI ready interrupt flag
    const uint32_t RCC_CIR_PLLSAIRDYF = 1U << 6 ;

  // Field PLLI2SRDYF: PLLI2S ready interrupt flag
    const uint32_t RCC_CIR_PLLI2SRDYF = 1U << 5 ;

  // Field PLLRDYF: Main PLL (PLL) ready interrupt flag
    const uint32_t RCC_CIR_PLLRDYF = 1U << 4 ;

  // Field HSERDYF: HSE ready interrupt flag
    const uint32_t RCC_CIR_HSERDYF = 1U << 3 ;

  // Field HSIRDYF: HSI ready interrupt flag
    const uint32_t RCC_CIR_HSIRDYF = 1U << 2 ;

  // Field LSERDYF: LSE ready interrupt flag
    const uint32_t RCC_CIR_LSERDYF = 1U << 1 ;

  // Field LSIRDYF: LSI ready interrupt flag
    const uint32_t RCC_CIR_LSIRDYF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AHB1RSTR: AHB1 peripheral reset register
  #define RCC_AHB1RSTR (* ((volatile uint32_t *) (0x40023800 + 16)))

  // Field OTGHSRST: USB OTG HS module reset
    const uint32_t RCC_AHB1RSTR_OTGHSRST = 1U << 29 ;

  // Field ETHMACRST: Ethernet MAC reset
    const uint32_t RCC_AHB1RSTR_ETHMACRST = 1U << 25 ;

  // Field DMA2DRST: DMA2D reset
    const uint32_t RCC_AHB1RSTR_DMA2DRST = 1U << 23 ;

  // Field DMA2RST: DMA2 reset
    const uint32_t RCC_AHB1RSTR_DMA2RST = 1U << 22 ;

  // Field DMA1RST: DMA2 reset
    const uint32_t RCC_AHB1RSTR_DMA1RST = 1U << 21 ;

  // Field CRCRST: CRC reset
    const uint32_t RCC_AHB1RSTR_CRCRST = 1U << 12 ;

  // Field GPIOKRST: IO port K reset
    const uint32_t RCC_AHB1RSTR_GPIOKRST = 1U << 10 ;

  // Field GPIOJRST: IO port J reset
    const uint32_t RCC_AHB1RSTR_GPIOJRST = 1U << 9 ;

  // Field GPIOIRST: IO port I reset
    const uint32_t RCC_AHB1RSTR_GPIOIRST = 1U << 8 ;

  // Field GPIOHRST: IO port H reset
    const uint32_t RCC_AHB1RSTR_GPIOHRST = 1U << 7 ;

  // Field GPIOGRST: IO port G reset
    const uint32_t RCC_AHB1RSTR_GPIOGRST = 1U << 6 ;

  // Field GPIOFRST: IO port F reset
    const uint32_t RCC_AHB1RSTR_GPIOFRST = 1U << 5 ;

  // Field GPIOERST: IO port E reset
    const uint32_t RCC_AHB1RSTR_GPIOERST = 1U << 4 ;

  // Field GPIODRST: IO port D reset
    const uint32_t RCC_AHB1RSTR_GPIODRST = 1U << 3 ;

  // Field GPIOCRST: IO port C reset
    const uint32_t RCC_AHB1RSTR_GPIOCRST = 1U << 2 ;

  // Field GPIOBRST: IO port B reset
    const uint32_t RCC_AHB1RSTR_GPIOBRST = 1U << 1 ;

  // Field GPIOARST: IO port A reset
    const uint32_t RCC_AHB1RSTR_GPIOARST = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AHB2RSTR: AHB2 peripheral reset register
  #define RCC_AHB2RSTR (* ((volatile uint32_t *) (0x40023800 + 20)))

  // Field OTGFSRST: USB OTG FS module reset
    const uint32_t RCC_AHB2RSTR_OTGFSRST = 1U << 7 ;

  // Field RNGRST: Random number generator module reset
    const uint32_t RCC_AHB2RSTR_RNGRST = 1U << 6 ;

  // Field HSAHRST: Hash module reset
    const uint32_t RCC_AHB2RSTR_HSAHRST = 1U << 5 ;

  // Field CRYPRST: Cryptographic module reset
    const uint32_t RCC_AHB2RSTR_CRYPRST = 1U << 4 ;

  // Field DCMIRST: Camera interface reset
    const uint32_t RCC_AHB2RSTR_DCMIRST = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AHB3RSTR: AHB3 peripheral reset register
  #define RCC_AHB3RSTR (* ((volatile uint32_t *) (0x40023800 + 24)))

  // Field FMCRST: Flexible memory controller module reset
    const uint32_t RCC_AHB3RSTR_FMCRST = 1U << 0 ;

  // Field QSPIRST: Quad SPI memory controller reset
    const uint32_t RCC_AHB3RSTR_QSPIRST = 1U << 1 ;

//------------------------------------------------------------------------------

//---  Register APB1RSTR: APB1 peripheral reset register
  #define RCC_APB1RSTR (* ((volatile uint32_t *) (0x40023800 + 32)))

  // Field TIM2RST: TIM2 reset
    const uint32_t RCC_APB1RSTR_TIM2RST = 1U << 0 ;

  // Field TIM3RST: TIM3 reset
    const uint32_t RCC_APB1RSTR_TIM3RST = 1U << 1 ;

  // Field TIM4RST: TIM4 reset
    const uint32_t RCC_APB1RSTR_TIM4RST = 1U << 2 ;

  // Field TIM5RST: TIM5 reset
    const uint32_t RCC_APB1RSTR_TIM5RST = 1U << 3 ;

  // Field TIM6RST: TIM6 reset
    const uint32_t RCC_APB1RSTR_TIM6RST = 1U << 4 ;

  // Field TIM7RST: TIM7 reset
    const uint32_t RCC_APB1RSTR_TIM7RST = 1U << 5 ;

  // Field TIM12RST: TIM12 reset
    const uint32_t RCC_APB1RSTR_TIM12RST = 1U << 6 ;

  // Field TIM13RST: TIM13 reset
    const uint32_t RCC_APB1RSTR_TIM13RST = 1U << 7 ;

  // Field TIM14RST: TIM14 reset
    const uint32_t RCC_APB1RSTR_TIM14RST = 1U << 8 ;

  // Field WWDGRST: Window watchdog reset
    const uint32_t RCC_APB1RSTR_WWDGRST = 1U << 11 ;

  // Field CAN3RST: CAN3 reset
    const uint32_t RCC_APB1RSTR_CAN3RST = 1U << 13 ;

  // Field SPI2RST: SPI 2 reset
    const uint32_t RCC_APB1RSTR_SPI2RST = 1U << 14 ;

  // Field SPI3RST: SPI 3 reset
    const uint32_t RCC_APB1RSTR_SPI3RST = 1U << 15 ;

  // Field UART2RST: USART 2 reset
    const uint32_t RCC_APB1RSTR_UART2RST = 1U << 17 ;

  // Field UART3RST: USART 3 reset
    const uint32_t RCC_APB1RSTR_UART3RST = 1U << 18 ;

  // Field UART4RST: USART 4 reset
    const uint32_t RCC_APB1RSTR_UART4RST = 1U << 19 ;

  // Field UART5RST: USART 5 reset
    const uint32_t RCC_APB1RSTR_UART5RST = 1U << 20 ;

  // Field I2C1RST: I2C 1 reset
    const uint32_t RCC_APB1RSTR_I2C1RST = 1U << 21 ;

  // Field I2C2RST: I2C 2 reset
    const uint32_t RCC_APB1RSTR_I2C2RST = 1U << 22 ;

  // Field I2C3RST: I2C3 reset
    const uint32_t RCC_APB1RSTR_I2C3RST = 1U << 23 ;

  // Field CAN1RST: CAN1 reset
    const uint32_t RCC_APB1RSTR_CAN1RST = 1U << 25 ;

  // Field CAN2RST: CAN2 reset
    const uint32_t RCC_APB1RSTR_CAN2RST = 1U << 26 ;

  // Field PWRRST: Power interface reset
    const uint32_t RCC_APB1RSTR_PWRRST = 1U << 28 ;

  // Field DACRST: DAC reset
    const uint32_t RCC_APB1RSTR_DACRST = 1U << 29 ;

  // Field UART7RST: UART7 reset
    const uint32_t RCC_APB1RSTR_UART7RST = 1U << 30 ;

  // Field UART8RST: UART8 reset
    const uint32_t RCC_APB1RSTR_UART8RST = 1U << 31 ;

  // Field SPDIFRXRST: SPDIF-RX reset
    const uint32_t RCC_APB1RSTR_SPDIFRXRST = 1U << 16 ;

  // Field CECRST: HDMI-CEC reset
    const uint32_t RCC_APB1RSTR_CECRST = 1U << 27 ;

  // Field LPTIM1RST: Low power timer 1 reset
    const uint32_t RCC_APB1RSTR_LPTIM1RST = 1U << 9 ;

  // Field I2C4RST: I2C 4 reset
    const uint32_t RCC_APB1RSTR_I2C4RST = 1U << 24 ;

//------------------------------------------------------------------------------

//---  Register APB2RSTR: APB2 peripheral reset register
  #define RCC_APB2RSTR (* ((volatile uint32_t *) (0x40023800 + 36)))

  // Field TIM1RST: TIM1 reset
    const uint32_t RCC_APB2RSTR_TIM1RST = 1U << 0 ;

  // Field TIM8RST: TIM8 reset
    const uint32_t RCC_APB2RSTR_TIM8RST = 1U << 1 ;

  // Field USART1RST: USART1 reset
    const uint32_t RCC_APB2RSTR_USART1RST = 1U << 4 ;

  // Field USART6RST: USART6 reset
    const uint32_t RCC_APB2RSTR_USART6RST = 1U << 5 ;

  // Field ADCRST: ADC interface reset (common to all ADCs)
    const uint32_t RCC_APB2RSTR_ADCRST = 1U << 8 ;

  // Field SPI1RST: SPI 1 reset
    const uint32_t RCC_APB2RSTR_SPI1RST = 1U << 12 ;

  // Field SPI4RST: SPI4 reset
    const uint32_t RCC_APB2RSTR_SPI4RST = 1U << 13 ;

  // Field SYSCFGRST: System configuration controller reset
    const uint32_t RCC_APB2RSTR_SYSCFGRST = 1U << 14 ;

  // Field TIM9RST: TIM9 reset
    const uint32_t RCC_APB2RSTR_TIM9RST = 1U << 16 ;

  // Field TIM10RST: TIM10 reset
    const uint32_t RCC_APB2RSTR_TIM10RST = 1U << 17 ;

  // Field TIM11RST: TIM11 reset
    const uint32_t RCC_APB2RSTR_TIM11RST = 1U << 18 ;

  // Field SPI5RST: SPI5 reset
    const uint32_t RCC_APB2RSTR_SPI5RST = 1U << 20 ;

  // Field SPI6RST: SPI6 reset
    const uint32_t RCC_APB2RSTR_SPI6RST = 1U << 21 ;

  // Field SAI1RST: SAI1 reset
    const uint32_t RCC_APB2RSTR_SAI1RST = 1U << 22 ;

  // Field LTDCRST: LTDC reset
    const uint32_t RCC_APB2RSTR_LTDCRST = 1U << 26 ;

  // Field SAI2RST: SAI2 reset
    const uint32_t RCC_APB2RSTR_SAI2RST = 1U << 23 ;

  // Field SDMMC1RST: SDMMC1 reset
    const uint32_t RCC_APB2RSTR_SDMMC1RST = 1U << 11 ;

//------------------------------------------------------------------------------

//---  Register AHB1ENR: AHB1 peripheral clock register
  #define RCC_AHB1ENR (* ((volatile uint32_t *) (0x40023800 + 48)))

  // Field OTGHSULPIEN: USB OTG HSULPI clock enable
    const uint32_t RCC_AHB1ENR_OTGHSULPIEN = 1U << 30 ;

  // Field OTGHSEN: USB OTG HS clock enable
    const uint32_t RCC_AHB1ENR_OTGHSEN = 1U << 29 ;

  // Field ETHMACPTPEN: Ethernet PTP clock enable
    const uint32_t RCC_AHB1ENR_ETHMACPTPEN = 1U << 28 ;

  // Field ETHMACRXEN: Ethernet Reception clock enable
    const uint32_t RCC_AHB1ENR_ETHMACRXEN = 1U << 27 ;

  // Field ETHMACTXEN: Ethernet Transmission clock enable
    const uint32_t RCC_AHB1ENR_ETHMACTXEN = 1U << 26 ;

  // Field ETHMACEN: Ethernet MAC clock enable
    const uint32_t RCC_AHB1ENR_ETHMACEN = 1U << 25 ;

  // Field DMA2DEN: DMA2D clock enable
    const uint32_t RCC_AHB1ENR_DMA2DEN = 1U << 23 ;

  // Field DMA2EN: DMA2 clock enable
    const uint32_t RCC_AHB1ENR_DMA2EN = 1U << 22 ;

  // Field DMA1EN: DMA1 clock enable
    const uint32_t RCC_AHB1ENR_DMA1EN = 1U << 21 ;

  // Field CCMDATARAMEN: CCM data RAM clock enable
    const uint32_t RCC_AHB1ENR_CCMDATARAMEN = 1U << 20 ;

  // Field BKPSRAMEN: Backup SRAM interface clock enable
    const uint32_t RCC_AHB1ENR_BKPSRAMEN = 1U << 18 ;

  // Field CRCEN: CRC clock enable
    const uint32_t RCC_AHB1ENR_CRCEN = 1U << 12 ;

  // Field GPIOKEN: IO port K clock enable
    const uint32_t RCC_AHB1ENR_GPIOKEN = 1U << 10 ;

  // Field GPIOJEN: IO port J clock enable
    const uint32_t RCC_AHB1ENR_GPIOJEN = 1U << 9 ;

  // Field GPIOIEN: IO port I clock enable
    const uint32_t RCC_AHB1ENR_GPIOIEN = 1U << 8 ;

  // Field GPIOHEN: IO port H clock enable
    const uint32_t RCC_AHB1ENR_GPIOHEN = 1U << 7 ;

  // Field GPIOGEN: IO port G clock enable
    const uint32_t RCC_AHB1ENR_GPIOGEN = 1U << 6 ;

  // Field GPIOFEN: IO port F clock enable
    const uint32_t RCC_AHB1ENR_GPIOFEN = 1U << 5 ;

  // Field GPIOEEN: IO port E clock enable
    const uint32_t RCC_AHB1ENR_GPIOEEN = 1U << 4 ;

  // Field GPIODEN: IO port D clock enable
    const uint32_t RCC_AHB1ENR_GPIODEN = 1U << 3 ;

  // Field GPIOCEN: IO port C clock enable
    const uint32_t RCC_AHB1ENR_GPIOCEN = 1U << 2 ;

  // Field GPIOBEN: IO port B clock enable
    const uint32_t RCC_AHB1ENR_GPIOBEN = 1U << 1 ;

  // Field GPIOAEN: IO port A clock enable
    const uint32_t RCC_AHB1ENR_GPIOAEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AHB2ENR: AHB2 peripheral clock enable register
  #define RCC_AHB2ENR (* ((volatile uint32_t *) (0x40023800 + 52)))

  // Field OTGFSEN: USB OTG FS clock enable
    const uint32_t RCC_AHB2ENR_OTGFSEN = 1U << 7 ;

  // Field RNGEN: Random number generator clock enable
    const uint32_t RCC_AHB2ENR_RNGEN = 1U << 6 ;

  // Field HASHEN: Hash modules clock enable
    const uint32_t RCC_AHB2ENR_HASHEN = 1U << 5 ;

  // Field CRYPEN: Cryptographic modules clock enable
    const uint32_t RCC_AHB2ENR_CRYPEN = 1U << 4 ;

  // Field DCMIEN: Camera interface enable
    const uint32_t RCC_AHB2ENR_DCMIEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AHB3ENR: AHB3 peripheral clock enable register
  #define RCC_AHB3ENR (* ((volatile uint32_t *) (0x40023800 + 56)))

  // Field FMCEN: Flexible memory controller module clock enable
    const uint32_t RCC_AHB3ENR_FMCEN = 1U << 0 ;

  // Field QSPIEN: Quad SPI memory controller clock enable
    const uint32_t RCC_AHB3ENR_QSPIEN = 1U << 1 ;

//------------------------------------------------------------------------------

//---  Register APB1ENR: APB1 peripheral clock enable register
  #define RCC_APB1ENR (* ((volatile uint32_t *) (0x40023800 + 64)))

  // Field TIM2EN: TIM2 clock enable
    const uint32_t RCC_APB1ENR_TIM2EN = 1U << 0 ;

  // Field TIM3EN: TIM3 clock enable
    const uint32_t RCC_APB1ENR_TIM3EN = 1U << 1 ;

  // Field TIM4EN: TIM4 clock enable
    const uint32_t RCC_APB1ENR_TIM4EN = 1U << 2 ;

  // Field TIM5EN: TIM5 clock enable
    const uint32_t RCC_APB1ENR_TIM5EN = 1U << 3 ;

  // Field TIM6EN: TIM6 clock enable
    const uint32_t RCC_APB1ENR_TIM6EN = 1U << 4 ;

  // Field TIM7EN: TIM7 clock enable
    const uint32_t RCC_APB1ENR_TIM7EN = 1U << 5 ;

  // Field TIM12EN: TIM12 clock enable
    const uint32_t RCC_APB1ENR_TIM12EN = 1U << 6 ;

  // Field TIM13EN: TIM13 clock enable
    const uint32_t RCC_APB1ENR_TIM13EN = 1U << 7 ;

  // Field TIM14EN: TIM14 clock enable
    const uint32_t RCC_APB1ENR_TIM14EN = 1U << 8 ;

  // Field WWDGEN: Window watchdog clock enable
    const uint32_t RCC_APB1ENR_WWDGEN = 1U << 11 ;

  // Field CAN3EN: CAN3 clock enable
    const uint32_t RCC_APB1ENR_CAN3EN = 1U << 13 ;

  // Field SPI2EN: SPI2 clock enable
    const uint32_t RCC_APB1ENR_SPI2EN = 1U << 14 ;

  // Field SPI3EN: SPI3 clock enable
    const uint32_t RCC_APB1ENR_SPI3EN = 1U << 15 ;

  // Field USART2EN: USART 2 clock enable
    const uint32_t RCC_APB1ENR_USART2EN = 1U << 17 ;

  // Field USART3EN: USART3 clock enable
    const uint32_t RCC_APB1ENR_USART3EN = 1U << 18 ;

  // Field UART4EN: UART4 clock enable
    const uint32_t RCC_APB1ENR_UART4EN = 1U << 19 ;

  // Field UART5EN: UART5 clock enable
    const uint32_t RCC_APB1ENR_UART5EN = 1U << 20 ;

  // Field I2C1EN: I2C1 clock enable
    const uint32_t RCC_APB1ENR_I2C1EN = 1U << 21 ;

  // Field I2C2EN: I2C2 clock enable
    const uint32_t RCC_APB1ENR_I2C2EN = 1U << 22 ;

  // Field I2C3EN: I2C3 clock enable
    const uint32_t RCC_APB1ENR_I2C3EN = 1U << 23 ;

  // Field CAN1EN: CAN 1 clock enable
    const uint32_t RCC_APB1ENR_CAN1EN = 1U << 25 ;

  // Field CAN2EN: CAN 2 clock enable
    const uint32_t RCC_APB1ENR_CAN2EN = 1U << 26 ;

  // Field PWREN: Power interface clock enable
    const uint32_t RCC_APB1ENR_PWREN = 1U << 28 ;

  // Field DACEN: DAC interface clock enable
    const uint32_t RCC_APB1ENR_DACEN = 1U << 29 ;

  // Field UART7ENR: UART7 clock enable
    const uint32_t RCC_APB1ENR_UART7ENR = 1U << 30 ;

  // Field UART8ENR: UART8 clock enable
    const uint32_t RCC_APB1ENR_UART8ENR = 1U << 31 ;

  // Field SPDIFRXEN: SPDIF-RX clock enable
    const uint32_t RCC_APB1ENR_SPDIFRXEN = 1U << 16 ;

  // Field CECEN: HDMI-CEN clock enable
    const uint32_t RCC_APB1ENR_CECEN = 1U << 27 ;

  // Field LPTMI1EN: Low power timer 1 clock enable
    const uint32_t RCC_APB1ENR_LPTMI1EN = 1U << 9 ;

  // Field I2C4EN: I2C4 clock enable
    const uint32_t RCC_APB1ENR_I2C4EN = 1U << 24 ;

//------------------------------------------------------------------------------

//---  Register APB2ENR: APB2 peripheral clock enable register
  #define RCC_APB2ENR (* ((volatile uint32_t *) (0x40023800 + 68)))

  // Field TIM1EN: TIM1 clock enable
    const uint32_t RCC_APB2ENR_TIM1EN = 1U << 0 ;

  // Field TIM8EN: TIM8 clock enable
    const uint32_t RCC_APB2ENR_TIM8EN = 1U << 1 ;

  // Field USART1EN: USART1 clock enable
    const uint32_t RCC_APB2ENR_USART1EN = 1U << 4 ;

  // Field USART6EN: USART6 clock enable
    const uint32_t RCC_APB2ENR_USART6EN = 1U << 5 ;

  // Field ADC1EN: ADC1 clock enable
    const uint32_t RCC_APB2ENR_ADC1EN = 1U << 8 ;

  // Field ADC2EN: ADC2 clock enable
    const uint32_t RCC_APB2ENR_ADC2EN = 1U << 9 ;

  // Field ADC3EN: ADC3 clock enable
    const uint32_t RCC_APB2ENR_ADC3EN = 1U << 10 ;

  // Field SPI1EN: SPI1 clock enable
    const uint32_t RCC_APB2ENR_SPI1EN = 1U << 12 ;

  // Field SPI4ENR: SPI4 clock enable
    const uint32_t RCC_APB2ENR_SPI4ENR = 1U << 13 ;

  // Field SYSCFGEN: System configuration controller clock enable
    const uint32_t RCC_APB2ENR_SYSCFGEN = 1U << 14 ;

  // Field TIM9EN: TIM9 clock enable
    const uint32_t RCC_APB2ENR_TIM9EN = 1U << 16 ;

  // Field TIM10EN: TIM10 clock enable
    const uint32_t RCC_APB2ENR_TIM10EN = 1U << 17 ;

  // Field TIM11EN: TIM11 clock enable
    const uint32_t RCC_APB2ENR_TIM11EN = 1U << 18 ;

  // Field SPI5ENR: SPI5 clock enable
    const uint32_t RCC_APB2ENR_SPI5ENR = 1U << 20 ;

  // Field SPI6ENR: SPI6 clock enable
    const uint32_t RCC_APB2ENR_SPI6ENR = 1U << 21 ;

  // Field SAI1EN: SAI1 clock enable
    const uint32_t RCC_APB2ENR_SAI1EN = 1U << 22 ;

  // Field LTDCEN: LTDC clock enable
    const uint32_t RCC_APB2ENR_LTDCEN = 1U << 26 ;

  // Field SAI2EN: SAI2 clock enable
    const uint32_t RCC_APB2ENR_SAI2EN = 1U << 23 ;

  // Field SDMMC1EN: SDMMC1 clock enable
    const uint32_t RCC_APB2ENR_SDMMC1EN = 1U << 11 ;

//------------------------------------------------------------------------------

//---  Register AHB1LPENR: AHB1 peripheral clock enable in low power mode register
  #define RCC_AHB1LPENR (* ((volatile uint32_t *) (0x40023800 + 80)))

  // Field GPIOALPEN: IO port A clock enable during sleep mode
    const uint32_t RCC_AHB1LPENR_GPIOALPEN = 1U << 0 ;

  // Field GPIOBLPEN: IO port B clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_GPIOBLPEN = 1U << 1 ;

  // Field GPIOCLPEN: IO port C clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_GPIOCLPEN = 1U << 2 ;

  // Field GPIODLPEN: IO port D clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_GPIODLPEN = 1U << 3 ;

  // Field GPIOELPEN: IO port E clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_GPIOELPEN = 1U << 4 ;

  // Field GPIOFLPEN: IO port F clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_GPIOFLPEN = 1U << 5 ;

  // Field GPIOGLPEN: IO port G clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_GPIOGLPEN = 1U << 6 ;

  // Field GPIOHLPEN: IO port H clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_GPIOHLPEN = 1U << 7 ;

  // Field GPIOILPEN: IO port I clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_GPIOILPEN = 1U << 8 ;

  // Field GPIOJLPEN: IO port J clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_GPIOJLPEN = 1U << 9 ;

  // Field GPIOKLPEN: IO port K clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_GPIOKLPEN = 1U << 10 ;

  // Field CRCLPEN: CRC clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_CRCLPEN = 1U << 12 ;

  // Field FLITFLPEN: Flash interface clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_FLITFLPEN = 1U << 15 ;

  // Field SRAM1LPEN: SRAM 1interface clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_SRAM1LPEN = 1U << 16 ;

  // Field SRAM2LPEN: SRAM 2 interface clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_SRAM2LPEN = 1U << 17 ;

  // Field BKPSRAMLPEN: Backup SRAM interface clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_BKPSRAMLPEN = 1U << 18 ;

  // Field SRAM3LPEN: SRAM 3 interface clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_SRAM3LPEN = 1U << 19 ;

  // Field DMA1LPEN: DMA1 clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_DMA1LPEN = 1U << 21 ;

  // Field DMA2LPEN: DMA2 clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_DMA2LPEN = 1U << 22 ;

  // Field DMA2DLPEN: DMA2D clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_DMA2DLPEN = 1U << 23 ;

  // Field ETHMACLPEN: Ethernet MAC clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_ETHMACLPEN = 1U << 25 ;

  // Field ETHMACTXLPEN: Ethernet transmission clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_ETHMACTXLPEN = 1U << 26 ;

  // Field ETHMACRXLPEN: Ethernet reception clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_ETHMACRXLPEN = 1U << 27 ;

  // Field ETHMACPTPLPEN: Ethernet PTP clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_ETHMACPTPLPEN = 1U << 28 ;

  // Field OTGHSLPEN: USB OTG HS clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_OTGHSLPEN = 1U << 29 ;

  // Field OTGHSULPILPEN: USB OTG HS ULPI clock enable during Sleep mode
    const uint32_t RCC_AHB1LPENR_OTGHSULPILPEN = 1U << 30 ;

//------------------------------------------------------------------------------

//---  Register AHB2LPENR: AHB2 peripheral clock enable in low power mode register
  #define RCC_AHB2LPENR (* ((volatile uint32_t *) (0x40023800 + 84)))

  // Field OTGFSLPEN: USB OTG FS clock enable during Sleep mode
    const uint32_t RCC_AHB2LPENR_OTGFSLPEN = 1U << 7 ;

  // Field RNGLPEN: Random number generator clock enable during Sleep mode
    const uint32_t RCC_AHB2LPENR_RNGLPEN = 1U << 6 ;

  // Field HASHLPEN: Hash modules clock enable during Sleep mode
    const uint32_t RCC_AHB2LPENR_HASHLPEN = 1U << 5 ;

  // Field CRYPLPEN: Cryptography modules clock enable during Sleep mode
    const uint32_t RCC_AHB2LPENR_CRYPLPEN = 1U << 4 ;

  // Field DCMILPEN: Camera interface enable during Sleep mode
    const uint32_t RCC_AHB2LPENR_DCMILPEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register AHB3LPENR: AHB3 peripheral clock enable in low power mode register
  #define RCC_AHB3LPENR (* ((volatile uint32_t *) (0x40023800 + 88)))

  // Field FMCLPEN: Flexible memory controller module clock enable during Sleep mode
    const uint32_t RCC_AHB3LPENR_FMCLPEN = 1U << 0 ;

  // Field QSPILPEN: Quand SPI memory controller clock enable during Sleep mode
    const uint32_t RCC_AHB3LPENR_QSPILPEN = 1U << 1 ;

//------------------------------------------------------------------------------

//---  Register APB1LPENR: APB1 peripheral clock enable in low power mode register
  #define RCC_APB1LPENR (* ((volatile uint32_t *) (0x40023800 + 96)))

  // Field TIM2LPEN: TIM2 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_TIM2LPEN = 1U << 0 ;

  // Field TIM3LPEN: TIM3 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_TIM3LPEN = 1U << 1 ;

  // Field TIM4LPEN: TIM4 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_TIM4LPEN = 1U << 2 ;

  // Field TIM5LPEN: TIM5 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_TIM5LPEN = 1U << 3 ;

  // Field TIM6LPEN: TIM6 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_TIM6LPEN = 1U << 4 ;

  // Field TIM7LPEN: TIM7 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_TIM7LPEN = 1U << 5 ;

  // Field TIM12LPEN: TIM12 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_TIM12LPEN = 1U << 6 ;

  // Field TIM13LPEN: TIM13 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_TIM13LPEN = 1U << 7 ;

  // Field TIM14LPEN: TIM14 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_TIM14LPEN = 1U << 8 ;

  // Field WWDGLPEN: Window watchdog clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_WWDGLPEN = 1U << 11 ;

  // Field SPI2LPEN: SPI2 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_SPI2LPEN = 1U << 14 ;

  // Field SPI3LPEN: SPI3 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_SPI3LPEN = 1U << 15 ;

  // Field USART2LPEN: USART2 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_USART2LPEN = 1U << 17 ;

  // Field USART3LPEN: USART3 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_USART3LPEN = 1U << 18 ;

  // Field UART4LPEN: UART4 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_UART4LPEN = 1U << 19 ;

  // Field UART5LPEN: UART5 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_UART5LPEN = 1U << 20 ;

  // Field I2C1LPEN: I2C1 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_I2C1LPEN = 1U << 21 ;

  // Field I2C2LPEN: I2C2 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_I2C2LPEN = 1U << 22 ;

  // Field I2C3LPEN: I2C3 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_I2C3LPEN = 1U << 23 ;

  // Field CAN1LPEN: CAN 1 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_CAN1LPEN = 1U << 25 ;

  // Field CAN2LPEN: CAN 2 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_CAN2LPEN = 1U << 26 ;

  // Field PWRLPEN: Power interface clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_PWRLPEN = 1U << 28 ;

  // Field DACLPEN: DAC interface clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_DACLPEN = 1U << 29 ;

  // Field UART7LPEN: UART7 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_UART7LPEN = 1U << 30 ;

  // Field UART8LPEN: UART8 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_UART8LPEN = 1U << 31 ;

  // Field SPDIFRXLPEN: SPDIF-RX clock enable during sleep mode
    const uint32_t RCC_APB1LPENR_SPDIFRXLPEN = 1U << 16 ;

  // Field CECLPEN: HDMI-CEN clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_CECLPEN = 1U << 27 ;

  // Field LPTIM1LPEN: low power timer 1 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_LPTIM1LPEN = 1U << 9 ;

  // Field I2C4LPEN: I2C4 clock enable during Sleep mode
    const uint32_t RCC_APB1LPENR_I2C4LPEN = 1U << 24 ;

//------------------------------------------------------------------------------

//---  Register APB2LPENR: APB2 peripheral clock enabled in low power mode register
  #define RCC_APB2LPENR (* ((volatile uint32_t *) (0x40023800 + 100)))

  // Field TIM1LPEN: TIM1 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_TIM1LPEN = 1U << 0 ;

  // Field TIM8LPEN: TIM8 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_TIM8LPEN = 1U << 1 ;

  // Field USART1LPEN: USART1 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_USART1LPEN = 1U << 4 ;

  // Field USART6LPEN: USART6 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_USART6LPEN = 1U << 5 ;

  // Field ADC1LPEN: ADC1 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_ADC1LPEN = 1U << 8 ;

  // Field ADC2LPEN: ADC2 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_ADC2LPEN = 1U << 9 ;

  // Field ADC3LPEN: ADC 3 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_ADC3LPEN = 1U << 10 ;

  // Field SPI1LPEN: SPI 1 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_SPI1LPEN = 1U << 12 ;

  // Field SPI4LPEN: SPI 4 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_SPI4LPEN = 1U << 13 ;

  // Field SYSCFGLPEN: System configuration controller clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_SYSCFGLPEN = 1U << 14 ;

  // Field TIM9LPEN: TIM9 clock enable during sleep mode
    const uint32_t RCC_APB2LPENR_TIM9LPEN = 1U << 16 ;

  // Field TIM10LPEN: TIM10 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_TIM10LPEN = 1U << 17 ;

  // Field TIM11LPEN: TIM11 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_TIM11LPEN = 1U << 18 ;

  // Field SPI5LPEN: SPI 5 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_SPI5LPEN = 1U << 20 ;

  // Field SPI6LPEN: SPI 6 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_SPI6LPEN = 1U << 21 ;

  // Field SAI1LPEN: SAI1 clock enable during sleep mode
    const uint32_t RCC_APB2LPENR_SAI1LPEN = 1U << 22 ;

  // Field LTDCLPEN: LTDC clock enable during sleep mode
    const uint32_t RCC_APB2LPENR_LTDCLPEN = 1U << 26 ;

  // Field SAI2LPEN: SAI2 clock enable during sleep mode
    const uint32_t RCC_APB2LPENR_SAI2LPEN = 1U << 23 ;

  // Field SDMMC1LPEN: SDMMC1 clock enable during Sleep mode
    const uint32_t RCC_APB2LPENR_SDMMC1LPEN = 1U << 11 ;

//------------------------------------------------------------------------------

//---  Register BDCR: Backup domain control register
  #define RCC_BDCR (* ((volatile uint32_t *) (0x40023800 + 112)))

  // Field BDRST: Backup domain software reset
    const uint32_t RCC_BDCR_BDRST = 1U << 16 ;

  // Field RTCEN: RTC clock enable
    const uint32_t RCC_BDCR_RTCEN = 1U << 15 ;

  // Field RTCSEL1: RTC clock source selection
    const uint32_t RCC_BDCR_RTCSEL1 = 1U << 9 ;

  // Field RTCSEL0: RTC clock source selection
    const uint32_t RCC_BDCR_RTCSEL0 = 1U << 8 ;

  // Field LSEBYP: External low-speed oscillator bypass
    const uint32_t RCC_BDCR_LSEBYP = 1U << 2 ;

  // Field LSERDY: External low-speed oscillator ready
    const uint32_t RCC_BDCR_LSERDY = 1U << 1 ;

  // Field LSEON: External low-speed oscillator enable
    const uint32_t RCC_BDCR_LSEON = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CSR: clock control & status register
  #define RCC_CSR (* ((volatile uint32_t *) (0x40023800 + 116)))

  // Field LPWRRSTF: Low-power reset flag
    const uint32_t RCC_CSR_LPWRRSTF = 1U << 31 ;

  // Field WWDGRSTF: Window watchdog reset flag
    const uint32_t RCC_CSR_WWDGRSTF = 1U << 30 ;

  // Field WDGRSTF: Independent watchdog reset flag
    const uint32_t RCC_CSR_WDGRSTF = 1U << 29 ;

  // Field SFTRSTF: Software reset flag
    const uint32_t RCC_CSR_SFTRSTF = 1U << 28 ;

  // Field PORRSTF: POR/PDR reset flag
    const uint32_t RCC_CSR_PORRSTF = 1U << 27 ;

  // Field PADRSTF: PIN reset flag
    const uint32_t RCC_CSR_PADRSTF = 1U << 26 ;

  // Field BORRSTF: BOR reset flag
    const uint32_t RCC_CSR_BORRSTF = 1U << 25 ;

  // Field RMVF: Remove reset flag
    const uint32_t RCC_CSR_RMVF = 1U << 24 ;

  // Field LSIRDY: Internal low-speed oscillator ready
    const uint32_t RCC_CSR_LSIRDY = 1U << 1 ;

  // Field LSION: Internal low-speed oscillator enable
    const uint32_t RCC_CSR_LSION = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SSCGR: spread spectrum clock generation register
  #define RCC_SSCGR (* ((volatile uint32_t *) (0x40023800 + 128)))

  // Field SSCGEN: Spread spectrum modulation enable
    const uint32_t RCC_SSCGR_SSCGEN = 1U << 31 ;

  // Field SPREADSEL: Spread Select
    const uint32_t RCC_SSCGR_SPREADSEL = 1U << 30 ;

  // Field INCSTEP: Incrementation step
    inline uint32_t RCC_SSCGR_INCSTEP (const uint32_t inValue) {return (inValue & 0x7FFFU) << 13 ; }

  // Field MODPER: Modulation period
    inline uint32_t RCC_SSCGR_MODPER (const uint32_t inValue) {return (inValue & 0x1FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PLLI2SCFGR: PLLI2S configuration register
  #define RCC_PLLI2SCFGR (* ((volatile uint32_t *) (0x40023800 + 132)))

  // Field PLLI2SR: PLLI2S division factor for I2S clocks
    inline uint32_t RCC_PLLI2SCFGR_PLLI2SR (const uint32_t inValue) {return (inValue & 0x7U) << 28 ; }

  // Field PLLI2SQ: PLLI2S division factor for SAI1 clock
    inline uint32_t RCC_PLLI2SCFGR_PLLI2SQ (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field PLLI2SN: PLLI2S multiplication factor for VCO
    inline uint32_t RCC_PLLI2SCFGR_PLLI2SN (const uint32_t inValue) {return (inValue & 0x1FFU) << 6 ; }

//------------------------------------------------------------------------------

//---  Register PLLSAICFGR: PLL configuration register
  #define RCC_PLLSAICFGR (* ((volatile uint32_t *) (0x40023800 + 136)))

  // Field PLLSAIN: PLLSAI division factor for VCO
    inline uint32_t RCC_PLLSAICFGR_PLLSAIN (const uint32_t inValue) {return (inValue & 0x1FFU) << 6 ; }

  // Field PLLSAIP: PLLSAI division factor for 48MHz clock
    inline uint32_t RCC_PLLSAICFGR_PLLSAIP (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field PLLSAIQ: PLLSAI division factor for SAI clock
    inline uint32_t RCC_PLLSAICFGR_PLLSAIQ (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field PLLSAIR: PLLSAI division factor for LCD clock
    inline uint32_t RCC_PLLSAICFGR_PLLSAIR (const uint32_t inValue) {return (inValue & 0x7U) << 28 ; }

//------------------------------------------------------------------------------

//---  Register DKCFGR1: dedicated clocks configuration register
  #define RCC_DKCFGR1 (* ((volatile uint32_t *) (0x40023800 + 140)))

  // Field PLLI2SDIV: PLLI2S division factor for SAI1 clock
    inline uint32_t RCC_DKCFGR1_PLLI2SDIV (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

  // Field PLLSAIDIVQ: PLLSAI division factor for SAI1 clock
    inline uint32_t RCC_DKCFGR1_PLLSAIDIVQ (const uint32_t inValue) {return (inValue & 0x1FU) << 8 ; }

  // Field PLLSAIDIVR: division factor for LCD_CLK
    inline uint32_t RCC_DKCFGR1_PLLSAIDIVR (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field SAI1SEL: SAI1 clock source selection
    inline uint32_t RCC_DKCFGR1_SAI1SEL (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field SAI2SEL: SAI2 clock source selection
    inline uint32_t RCC_DKCFGR1_SAI2SEL (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field TIMPRE: Timers clocks prescalers selection
    const uint32_t RCC_DKCFGR1_TIMPRE = 1U << 24 ;

//------------------------------------------------------------------------------

//---  Register DKCFGR2: dedicated clocks configuration register
  #define RCC_DKCFGR2 (* ((volatile uint32_t *) (0x40023800 + 144)))

  // Field USART1SEL: USART 1 clock source selection
    inline uint32_t RCC_DKCFGR2_USART1SEL (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field USART2SEL: USART 2 clock source selection
    inline uint32_t RCC_DKCFGR2_USART2SEL (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field USART3SEL: USART 3 clock source selection
    inline uint32_t RCC_DKCFGR2_USART3SEL (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field UART4SEL: UART 4 clock source selection
    inline uint32_t RCC_DKCFGR2_UART4SEL (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field UART5SEL: UART 5 clock source selection
    inline uint32_t RCC_DKCFGR2_UART5SEL (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field USART6SEL: USART 6 clock source selection
    inline uint32_t RCC_DKCFGR2_USART6SEL (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field UART7SEL: UART 7 clock source selection
    inline uint32_t RCC_DKCFGR2_UART7SEL (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field UART8SEL: UART 8 clock source selection
    inline uint32_t RCC_DKCFGR2_UART8SEL (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field I2C1SEL: I2C1 clock source selection
    inline uint32_t RCC_DKCFGR2_I2C1SEL (const uint32_t inValue) {return (inValue & 0x3U) << 16 ; }

  // Field I2C2SEL: I2C2 clock source selection
    inline uint32_t RCC_DKCFGR2_I2C2SEL (const uint32_t inValue) {return (inValue & 0x3U) << 18 ; }

  // Field I2C3SEL: I2C3 clock source selection
    inline uint32_t RCC_DKCFGR2_I2C3SEL (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field I2C4SEL: I2C4 clock source selection
    inline uint32_t RCC_DKCFGR2_I2C4SEL (const uint32_t inValue) {return (inValue & 0x3U) << 22 ; }

  // Field LPTIM1SEL: Low power timer 1 clock source selection
    inline uint32_t RCC_DKCFGR2_LPTIM1SEL (const uint32_t inValue) {return (inValue & 0x3U) << 24 ; }

  // Field CECSEL: HDMI-CEC clock source selection
    const uint32_t RCC_DKCFGR2_CECSEL = 1U << 26 ;

  // Field CK48MSEL: 48MHz clock source selection
    const uint32_t RCC_DKCFGR2_CK48MSEL = 1U << 27 ;

  // Field SDMMCSEL: SDMMC clock source selection
    const uint32_t RCC_DKCFGR2_SDMMCSEL = 1U << 28 ;

  // Field SDMMC2SEL: SDMMC2 clock source selection
    const uint32_t RCC_DKCFGR2_SDMMC2SEL = 1U << 29 ;

  // Field DSISEL: DSI clock source selection
    const uint32_t RCC_DKCFGR2_DSISEL = 1U << 30 ;

//------------------------------------------------------------------------------
// Peripheral RNG: Random number generator
//------------------------------------------------------------------------------

//---  Register CR: control register
  #define RNG_CR (* ((volatile uint32_t *) (0x50060800 + 0)))

  // Field IE: Interrupt enable
    const uint32_t RNG_CR_IE = 1U << 3 ;

  // Field RNGEN: Random number generator enable
    const uint32_t RNG_CR_RNGEN = 1U << 2 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define RNG_SR (* ((volatile uint32_t *) (0x50060800 + 4)))

  // Field SEIS: Seed error interrupt status
    const uint32_t RNG_SR_SEIS = 1U << 6 ;

  // Field CEIS: Clock error interrupt status
    const uint32_t RNG_SR_CEIS = 1U << 5 ;

  // Field SECS: Seed error current status
    const uint32_t RNG_SR_SECS = 1U << 2 ;

  // Field CECS: Clock error current status
    const uint32_t RNG_SR_CECS = 1U << 1 ;

  // Field DRDY: Data ready
    const uint32_t RNG_SR_DRDY = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DR: data register
  #define RNG_DR (* ((const volatile uint32_t *) (0x50060800 + 8)))

  // Field RNDATA: Random data
    inline uint32_t RNG_DR_RNDATA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral RTC: Real-time clock
//------------------------------------------------------------------------------

//---  Register TR: time register
  #define RTC_TR (* ((volatile uint32_t *) (0x40002800 + 0)))

  // Field PM: AM/PM notation
    const uint32_t RTC_TR_PM = 1U << 22 ;

  // Field HT: Hour tens in BCD format
    inline uint32_t RTC_TR_HT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field HU: Hour units in BCD format
    inline uint32_t RTC_TR_HU (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field MNT: Minute tens in BCD format
    inline uint32_t RTC_TR_MNT (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field MNU: Minute units in BCD format
    inline uint32_t RTC_TR_MNU (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field ST: Second tens in BCD format
    inline uint32_t RTC_TR_ST (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SU: Second units in BCD format
    inline uint32_t RTC_TR_SU (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DR: date register
  #define RTC_DR (* ((volatile uint32_t *) (0x40002800 + 4)))

  // Field YT: Year tens in BCD format
    inline uint32_t RTC_DR_YT (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field YU: Year units in BCD format
    inline uint32_t RTC_DR_YU (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field WDU: Week day units
    inline uint32_t RTC_DR_WDU (const uint32_t inValue) {return (inValue & 0x7U) << 13 ; }

  // Field MT: Month tens in BCD format
    const uint32_t RTC_DR_MT = 1U << 12 ;

  // Field MU: Month units in BCD format
    inline uint32_t RTC_DR_MU (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field DT: Date tens in BCD format
    inline uint32_t RTC_DR_DT (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field DU: Date units in BCD format
    inline uint32_t RTC_DR_DU (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CR: control register
  #define RTC_CR (* ((volatile uint32_t *) (0x40002800 + 8)))

  // Field WCKSEL: Wakeup clock selection
    inline uint32_t RTC_CR_WCKSEL (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field TSEDGE: Time-stamp event active edge
    const uint32_t RTC_CR_TSEDGE = 1U << 3 ;

  // Field REFCKON: Reference clock detection enable (50 or 60 Hz)
    const uint32_t RTC_CR_REFCKON = 1U << 4 ;

  // Field BYPSHAD: Bypass the shadow registers
    const uint32_t RTC_CR_BYPSHAD = 1U << 5 ;

  // Field FMT: Hour format
    const uint32_t RTC_CR_FMT = 1U << 6 ;

  // Field ALRAE: Alarm A enable
    const uint32_t RTC_CR_ALRAE = 1U << 8 ;

  // Field ALRBE: Alarm B enable
    const uint32_t RTC_CR_ALRBE = 1U << 9 ;

  // Field WUTE: Wakeup timer enable
    const uint32_t RTC_CR_WUTE = 1U << 10 ;

  // Field TSE: Time stamp enable
    const uint32_t RTC_CR_TSE = 1U << 11 ;

  // Field ALRAIE: Alarm A interrupt enable
    const uint32_t RTC_CR_ALRAIE = 1U << 12 ;

  // Field ALRBIE: Alarm B interrupt enable
    const uint32_t RTC_CR_ALRBIE = 1U << 13 ;

  // Field WUTIE: Wakeup timer interrupt enable
    const uint32_t RTC_CR_WUTIE = 1U << 14 ;

  // Field TSIE: Time-stamp interrupt enable
    const uint32_t RTC_CR_TSIE = 1U << 15 ;

  // Field ADD1H: Add 1 hour (summer time change)
    const uint32_t RTC_CR_ADD1H = 1U << 16 ;

  // Field SUB1H: Subtract 1 hour (winter time change)
    const uint32_t RTC_CR_SUB1H = 1U << 17 ;

  // Field BKP: Backup
    const uint32_t RTC_CR_BKP = 1U << 18 ;

  // Field COSEL: Calibration output selection
    const uint32_t RTC_CR_COSEL = 1U << 19 ;

  // Field POL: Output polarity
    const uint32_t RTC_CR_POL = 1U << 20 ;

  // Field OSEL: Output selection
    inline uint32_t RTC_CR_OSEL (const uint32_t inValue) {return (inValue & 0x3U) << 21 ; }

  // Field COE: Calibration output enable
    const uint32_t RTC_CR_COE = 1U << 23 ;

  // Field ITSE: timestamp on internal event enable
    const uint32_t RTC_CR_ITSE = 1U << 24 ;

//------------------------------------------------------------------------------

//---  Register ISR: initialization and status register
  #define RTC_ISR (* ((volatile uint32_t *) (0x40002800 + 12)))

  // Field ALRAWF: Alarm A write flag
    const uint32_t RTC_ISR_ALRAWF = 1U << 0 ;

  // Field ALRBWF: Alarm B write flag
    const uint32_t RTC_ISR_ALRBWF = 1U << 1 ;

  // Field WUTWF: Wakeup timer write flag
    const uint32_t RTC_ISR_WUTWF = 1U << 2 ;

  // Field SHPF: Shift operation pending
    const uint32_t RTC_ISR_SHPF = 1U << 3 ;

  // Field INITS: Initialization status flag
    const uint32_t RTC_ISR_INITS = 1U << 4 ;

  // Field RSF: Registers synchronization flag
    const uint32_t RTC_ISR_RSF = 1U << 5 ;

  // Field INITF: Initialization flag
    const uint32_t RTC_ISR_INITF = 1U << 6 ;

  // Field INIT: Initialization mode
    const uint32_t RTC_ISR_INIT = 1U << 7 ;

  // Field ALRAF: Alarm A flag
    const uint32_t RTC_ISR_ALRAF = 1U << 8 ;

  // Field ALRBF: Alarm B flag
    const uint32_t RTC_ISR_ALRBF = 1U << 9 ;

  // Field WUTF: Wakeup timer flag
    const uint32_t RTC_ISR_WUTF = 1U << 10 ;

  // Field TSF: Time-stamp flag
    const uint32_t RTC_ISR_TSF = 1U << 11 ;

  // Field TSOVF: Time-stamp overflow flag
    const uint32_t RTC_ISR_TSOVF = 1U << 12 ;

  // Field TAMP1F: Tamper detection flag
    const uint32_t RTC_ISR_TAMP1F = 1U << 13 ;

  // Field TAMP2F: RTC_TAMP2 detection flag
    const uint32_t RTC_ISR_TAMP2F = 1U << 14 ;

  // Field TAMP3F: RTC_TAMP3 detection flag
    const uint32_t RTC_ISR_TAMP3F = 1U << 15 ;

  // Field RECALPF: Recalibration pending Flag
    const uint32_t RTC_ISR_RECALPF = 1U << 16 ;

//------------------------------------------------------------------------------

//---  Register PRER: prescaler register
  #define RTC_PRER (* ((volatile uint32_t *) (0x40002800 + 16)))

  // Field PREDIV_A: Asynchronous prescaler factor
    inline uint32_t RTC_PRER_PREDIV_A (const uint32_t inValue) {return (inValue & 0x7FU) << 16 ; }

  // Field PREDIV_S: Synchronous prescaler factor
    inline uint32_t RTC_PRER_PREDIV_S (const uint32_t inValue) {return (inValue & 0x7FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register WUTR: wakeup timer register
  #define RTC_WUTR (* ((volatile uint32_t *) (0x40002800 + 20)))

  // Field WUT: Wakeup auto-reload value bits
    inline uint32_t RTC_WUTR_WUT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ALRMAR: alarm A register
  #define RTC_ALRMAR (* ((volatile uint32_t *) (0x40002800 + 28)))

  // Field MSK4: Alarm A date mask
    const uint32_t RTC_ALRMAR_MSK4 = 1U << 31 ;

  // Field WDSEL: Week day selection
    const uint32_t RTC_ALRMAR_WDSEL = 1U << 30 ;

  // Field DT: Date tens in BCD format
    inline uint32_t RTC_ALRMAR_DT (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field DU: Date units or day in BCD format
    inline uint32_t RTC_ALRMAR_DU (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field MSK3: Alarm A hours mask
    const uint32_t RTC_ALRMAR_MSK3 = 1U << 23 ;

  // Field PM: AM/PM notation
    const uint32_t RTC_ALRMAR_PM = 1U << 22 ;

  // Field HT: Hour tens in BCD format
    inline uint32_t RTC_ALRMAR_HT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field HU: Hour units in BCD format
    inline uint32_t RTC_ALRMAR_HU (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field MSK2: Alarm A minutes mask
    const uint32_t RTC_ALRMAR_MSK2 = 1U << 15 ;

  // Field MNT: Minute tens in BCD format
    inline uint32_t RTC_ALRMAR_MNT (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field MNU: Minute units in BCD format
    inline uint32_t RTC_ALRMAR_MNU (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field MSK1: Alarm A seconds mask
    const uint32_t RTC_ALRMAR_MSK1 = 1U << 7 ;

  // Field ST: Second tens in BCD format
    inline uint32_t RTC_ALRMAR_ST (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SU: Second units in BCD format
    inline uint32_t RTC_ALRMAR_SU (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ALRMBR: alarm B register
  #define RTC_ALRMBR (* ((volatile uint32_t *) (0x40002800 + 32)))

  // Field MSK4: Alarm B date mask
    const uint32_t RTC_ALRMBR_MSK4 = 1U << 31 ;

  // Field WDSEL: Week day selection
    const uint32_t RTC_ALRMBR_WDSEL = 1U << 30 ;

  // Field DT: Date tens in BCD format
    inline uint32_t RTC_ALRMBR_DT (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

  // Field DU: Date units or day in BCD format
    inline uint32_t RTC_ALRMBR_DU (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field MSK3: Alarm B hours mask
    const uint32_t RTC_ALRMBR_MSK3 = 1U << 23 ;

  // Field PM: AM/PM notation
    const uint32_t RTC_ALRMBR_PM = 1U << 22 ;

  // Field HT: Hour tens in BCD format
    inline uint32_t RTC_ALRMBR_HT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field HU: Hour units in BCD format
    inline uint32_t RTC_ALRMBR_HU (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field MSK2: Alarm B minutes mask
    const uint32_t RTC_ALRMBR_MSK2 = 1U << 15 ;

  // Field MNT: Minute tens in BCD format
    inline uint32_t RTC_ALRMBR_MNT (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field MNU: Minute units in BCD format
    inline uint32_t RTC_ALRMBR_MNU (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field MSK1: Alarm B seconds mask
    const uint32_t RTC_ALRMBR_MSK1 = 1U << 7 ;

  // Field ST: Second tens in BCD format
    inline uint32_t RTC_ALRMBR_ST (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SU: Second units in BCD format
    inline uint32_t RTC_ALRMBR_SU (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register WPR: write protection register
  #define RTC_WPR (* ((volatile uint32_t *) (0x40002800 + 36)))

  // Field KEY: Write protection key
    inline uint32_t RTC_WPR_KEY (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SSR: sub second register
  #define RTC_SSR (* ((const volatile uint32_t *) (0x40002800 + 40)))

  // Field SS: Sub second value
    inline uint32_t RTC_SSR_SS (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SHIFTR: shift control register
  #define RTC_SHIFTR (* ((volatile uint32_t *) (0x40002800 + 44)))

  // Field ADD1S: Add one second
    const uint32_t RTC_SHIFTR_ADD1S = 1U << 31 ;

  // Field SUBFS: Subtract a fraction of a second
    inline uint32_t RTC_SHIFTR_SUBFS (const uint32_t inValue) {return (inValue & 0x7FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TSTR: time stamp time register
  #define RTC_TSTR (* ((const volatile uint32_t *) (0x40002800 + 48)))

  // Field SU: Second units in BCD format
    inline uint32_t RTC_TSTR_SU (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field ST: Second tens in BCD format
    inline uint32_t RTC_TSTR_ST (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field MNU: Minute units in BCD format
    inline uint32_t RTC_TSTR_MNU (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field MNT: Minute tens in BCD format
    inline uint32_t RTC_TSTR_MNT (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field HU: Hour units in BCD format
    inline uint32_t RTC_TSTR_HU (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field HT: Hour tens in BCD format
    inline uint32_t RTC_TSTR_HT (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field PM: AM/PM notation
    const uint32_t RTC_TSTR_PM = 1U << 22 ;

//------------------------------------------------------------------------------

//---  Register TSDR: time stamp date register
  #define RTC_TSDR (* ((const volatile uint32_t *) (0x40002800 + 52)))

  // Field WDU: Week day units
    inline uint32_t RTC_TSDR_WDU (const uint32_t inValue) {return (inValue & 0x7U) << 13 ; }

  // Field MT: Month tens in BCD format
    const uint32_t RTC_TSDR_MT = 1U << 12 ;

  // Field MU: Month units in BCD format
    inline uint32_t RTC_TSDR_MU (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field DT: Date tens in BCD format
    inline uint32_t RTC_TSDR_DT (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field DU: Date units in BCD format
    inline uint32_t RTC_TSDR_DU (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TSSSR: timestamp sub second register
  #define RTC_TSSSR (* ((const volatile uint32_t *) (0x40002800 + 56)))

  // Field SS: Sub second value
    inline uint32_t RTC_TSSSR_SS (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CALR: calibration register
  #define RTC_CALR (* ((volatile uint32_t *) (0x40002800 + 60)))

  // Field CALP: Increase frequency of RTC by 488.5 ppm
    const uint32_t RTC_CALR_CALP = 1U << 15 ;

  // Field CALW8: Use an 8-second calibration cycle period
    const uint32_t RTC_CALR_CALW8 = 1U << 14 ;

  // Field CALW16: Use a 16-second calibration cycle period
    const uint32_t RTC_CALR_CALW16 = 1U << 13 ;

  // Field CALM: Calibration minus
    inline uint32_t RTC_CALR_CALM (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TAMPCR: tamper configuration register
  #define RTC_TAMPCR (* ((volatile uint32_t *) (0x40002800 + 64)))

  // Field TAMP1E: Tamper 1 detection enable
    const uint32_t RTC_TAMPCR_TAMP1E = 1U << 0 ;

  // Field TAMP1TRG: Active level for tamper 1
    const uint32_t RTC_TAMPCR_TAMP1TRG = 1U << 1 ;

  // Field TAMPIE: Tamper interrupt enable
    const uint32_t RTC_TAMPCR_TAMPIE = 1U << 2 ;

  // Field TAMP2E: Tamper 2 detection enable
    const uint32_t RTC_TAMPCR_TAMP2E = 1U << 3 ;

  // Field TAMP2TRG: Active level for tamper 2
    const uint32_t RTC_TAMPCR_TAMP2TRG = 1U << 4 ;

  // Field TAMP3E: Tamper 3 detection enable
    const uint32_t RTC_TAMPCR_TAMP3E = 1U << 5 ;

  // Field TAMP3TRG: Active level for tamper 3
    const uint32_t RTC_TAMPCR_TAMP3TRG = 1U << 6 ;

  // Field TAMPTS: Activate timestamp on tamper detection event
    const uint32_t RTC_TAMPCR_TAMPTS = 1U << 7 ;

  // Field TAMPFREQ: Tamper sampling frequency
    inline uint32_t RTC_TAMPCR_TAMPFREQ (const uint32_t inValue) {return (inValue & 0x7U) << 8 ; }

  // Field TAMPFLT: Tamper filter count
    inline uint32_t RTC_TAMPCR_TAMPFLT (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field TAMPPRCH: Tamper precharge duration
    inline uint32_t RTC_TAMPCR_TAMPPRCH (const uint32_t inValue) {return (inValue & 0x3U) << 13 ; }

  // Field TAMPPUDIS: TAMPER pull-up disable
    const uint32_t RTC_TAMPCR_TAMPPUDIS = 1U << 15 ;

  // Field TAMP1IE: Tamper 1 interrupt enable
    const uint32_t RTC_TAMPCR_TAMP1IE = 1U << 16 ;

  // Field TAMP1NOERASE: Tamper 1 no erase
    const uint32_t RTC_TAMPCR_TAMP1NOERASE = 1U << 17 ;

  // Field TAMP1MF: Tamper 1 mask flag
    const uint32_t RTC_TAMPCR_TAMP1MF = 1U << 18 ;

  // Field TAMP2IE: Tamper 2 interrupt enable
    const uint32_t RTC_TAMPCR_TAMP2IE = 1U << 19 ;

  // Field TAMP2NOERASE: Tamper 2 no erase
    const uint32_t RTC_TAMPCR_TAMP2NOERASE = 1U << 20 ;

  // Field TAMP2MF: Tamper 2 mask flag
    const uint32_t RTC_TAMPCR_TAMP2MF = 1U << 21 ;

  // Field TAMP3IE: Tamper 3 interrupt enable
    const uint32_t RTC_TAMPCR_TAMP3IE = 1U << 22 ;

  // Field TAMP3NOERASE: Tamper 3 no erase
    const uint32_t RTC_TAMPCR_TAMP3NOERASE = 1U << 23 ;

  // Field TAMP3MF: Tamper 3 mask flag
    const uint32_t RTC_TAMPCR_TAMP3MF = 1U << 24 ;

//------------------------------------------------------------------------------

//---  Register ALRMASSR: alarm A sub second register
  #define RTC_ALRMASSR (* ((volatile uint32_t *) (0x40002800 + 68)))

  // Field MASKSS: Mask the most-significant bits starting at this bit
    inline uint32_t RTC_ALRMASSR_MASKSS (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field SS: Sub seconds value
    inline uint32_t RTC_ALRMASSR_SS (const uint32_t inValue) {return (inValue & 0x7FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ALRMBSSR: alarm B sub second register
  #define RTC_ALRMBSSR (* ((volatile uint32_t *) (0x40002800 + 72)))

  // Field MASKSS: Mask the most-significant bits starting at this bit
    inline uint32_t RTC_ALRMBSSR_MASKSS (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field SS: Sub seconds value
    inline uint32_t RTC_ALRMBSSR_SS (const uint32_t inValue) {return (inValue & 0x7FFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OR: option register
  #define RTC_OR (* ((volatile uint32_t *) (0x40002800 + 76)))

  // Field RTC_ALARM_TYPE: RTC_ALARM on PC13 output type
    const uint32_t RTC_OR_RTC_ALARM_TYPE = 1U << 0 ;

  // Field RTC_OUT_RMP: RTC_OUT remap
    const uint32_t RTC_OR_RTC_OUT_RMP = 1U << 1 ;

//------------------------------------------------------------------------------

//---  Register BKP0R: backup register
  #define RTC_BKP0R (* ((volatile uint32_t *) (0x40002800 + 80)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP0R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP1R: backup register
  #define RTC_BKP1R (* ((volatile uint32_t *) (0x40002800 + 84)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP1R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP2R: backup register
  #define RTC_BKP2R (* ((volatile uint32_t *) (0x40002800 + 88)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP2R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP3R: backup register
  #define RTC_BKP3R (* ((volatile uint32_t *) (0x40002800 + 92)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP3R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP4R: backup register
  #define RTC_BKP4R (* ((volatile uint32_t *) (0x40002800 + 96)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP4R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP5R: backup register
  #define RTC_BKP5R (* ((volatile uint32_t *) (0x40002800 + 100)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP5R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP6R: backup register
  #define RTC_BKP6R (* ((volatile uint32_t *) (0x40002800 + 104)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP6R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP7R: backup register
  #define RTC_BKP7R (* ((volatile uint32_t *) (0x40002800 + 108)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP7R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP8R: backup register
  #define RTC_BKP8R (* ((volatile uint32_t *) (0x40002800 + 112)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP8R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP9R: backup register
  #define RTC_BKP9R (* ((volatile uint32_t *) (0x40002800 + 116)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP9R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP10R: backup register
  #define RTC_BKP10R (* ((volatile uint32_t *) (0x40002800 + 120)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP10R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP11R: backup register
  #define RTC_BKP11R (* ((volatile uint32_t *) (0x40002800 + 124)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP11R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP12R: backup register
  #define RTC_BKP12R (* ((volatile uint32_t *) (0x40002800 + 128)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP12R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP13R: backup register
  #define RTC_BKP13R (* ((volatile uint32_t *) (0x40002800 + 132)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP13R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP14R: backup register
  #define RTC_BKP14R (* ((volatile uint32_t *) (0x40002800 + 136)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP14R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP15R: backup register
  #define RTC_BKP15R (* ((volatile uint32_t *) (0x40002800 + 140)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP15R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP16R: backup register
  #define RTC_BKP16R (* ((volatile uint32_t *) (0x40002800 + 144)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP16R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP17R: backup register
  #define RTC_BKP17R (* ((volatile uint32_t *) (0x40002800 + 148)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP17R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP18R: backup register
  #define RTC_BKP18R (* ((volatile uint32_t *) (0x40002800 + 152)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP18R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP19R: backup register
  #define RTC_BKP19R (* ((volatile uint32_t *) (0x40002800 + 156)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP19R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP20R: backup register
  #define RTC_BKP20R (* ((volatile uint32_t *) (0x40002800 + 160)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP20R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP21R: backup register
  #define RTC_BKP21R (* ((volatile uint32_t *) (0x40002800 + 164)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP21R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP22R: backup register
  #define RTC_BKP22R (* ((volatile uint32_t *) (0x40002800 + 168)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP22R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP23R: backup register
  #define RTC_BKP23R (* ((volatile uint32_t *) (0x40002800 + 172)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP23R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP24R: backup register
  #define RTC_BKP24R (* ((volatile uint32_t *) (0x40002800 + 176)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP24R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP25R: backup register
  #define RTC_BKP25R (* ((volatile uint32_t *) (0x40002800 + 180)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP25R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP26R: backup register
  #define RTC_BKP26R (* ((volatile uint32_t *) (0x40002800 + 184)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP26R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP27R: backup register
  #define RTC_BKP27R (* ((volatile uint32_t *) (0x40002800 + 188)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP27R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP28R: backup register
  #define RTC_BKP28R (* ((volatile uint32_t *) (0x40002800 + 192)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP28R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP29R: backup register
  #define RTC_BKP29R (* ((volatile uint32_t *) (0x40002800 + 196)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP29R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP30R: backup register
  #define RTC_BKP30R (* ((volatile uint32_t *) (0x40002800 + 200)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP30R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BKP31R: backup register
  #define RTC_BKP31R (* ((volatile uint32_t *) (0x40002800 + 204)))

  // Field BKP: BKP
    inline uint32_t RTC_BKP31R_BKP (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral SAI1: Serial audio interface
//------------------------------------------------------------------------------

//---  Register BCR1: BConfiguration register 1
  #define SAI1_BCR1 (* ((volatile uint32_t *) (0x40015800 + 36)))

  // Field MCKDIV: Master clock divider
    inline uint32_t SAI1_BCR1_MCKDIV (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field NODIV: No divider
    const uint32_t SAI1_BCR1_NODIV = 1U << 19 ;

  // Field DMAEN: DMA enable
    const uint32_t SAI1_BCR1_DMAEN = 1U << 17 ;

  // Field SAIBEN: Audio block B enable
    const uint32_t SAI1_BCR1_SAIBEN = 1U << 16 ;

  // Field OutDri: Output drive
    const uint32_t SAI1_BCR1_OutDri = 1U << 13 ;

  // Field MONO: Mono mode
    const uint32_t SAI1_BCR1_MONO = 1U << 12 ;

  // Field SYNCEN: Synchronization enable
    inline uint32_t SAI1_BCR1_SYNCEN (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CKSTR: Clock strobing edge
    const uint32_t SAI1_BCR1_CKSTR = 1U << 9 ;

  // Field LSBFIRST: Least significant bit first
    const uint32_t SAI1_BCR1_LSBFIRST = 1U << 8 ;

  // Field DS: Data size
    inline uint32_t SAI1_BCR1_DS (const uint32_t inValue) {return (inValue & 0x7U) << 5 ; }

  // Field PRTCFG: Protocol configuration
    inline uint32_t SAI1_BCR1_PRTCFG (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODE: Audio block mode
    inline uint32_t SAI1_BCR1_MODE (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BCR2: BConfiguration register 2
  #define SAI1_BCR2 (* ((volatile uint32_t *) (0x40015800 + 40)))

  // Field COMP: Companding mode
    inline uint32_t SAI1_BCR2_COMP (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field CPL: Complement bit
    const uint32_t SAI1_BCR2_CPL = 1U << 13 ;

  // Field MUTECN: Mute counter
    inline uint32_t SAI1_BCR2_MUTECN (const uint32_t inValue) {return (inValue & 0x3FU) << 7 ; }

  // Field MUTEVAL: Mute value
    const uint32_t SAI1_BCR2_MUTEVAL = 1U << 6 ;

  // Field MUTE: Mute
    const uint32_t SAI1_BCR2_MUTE = 1U << 5 ;

  // Field TRIS: Tristate management on data line
    const uint32_t SAI1_BCR2_TRIS = 1U << 4 ;

  // Field FFLUS: FIFO flush
    const uint32_t SAI1_BCR2_FFLUS = 1U << 3 ;

  // Field FTH: FIFO threshold
    inline uint32_t SAI1_BCR2_FTH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BFRCR: BFRCR
  #define SAI1_BFRCR (* ((volatile uint32_t *) (0x40015800 + 44)))

  // Field FSOFF: Frame synchronization offset
    const uint32_t SAI1_BFRCR_FSOFF = 1U << 18 ;

  // Field FSPOL: Frame synchronization polarity
    const uint32_t SAI1_BFRCR_FSPOL = 1U << 17 ;

  // Field FSDEF: Frame synchronization definition
    const uint32_t SAI1_BFRCR_FSDEF = 1U << 16 ;

  // Field FSALL: Frame synchronization active level length
    inline uint32_t SAI1_BFRCR_FSALL (const uint32_t inValue) {return (inValue & 0x7FU) << 8 ; }

  // Field FRL: Frame length
    inline uint32_t SAI1_BFRCR_FRL (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BSLOTR: BSlot register
  #define SAI1_BSLOTR (* ((volatile uint32_t *) (0x40015800 + 48)))

  // Field SLOTEN: Slot enable
    inline uint32_t SAI1_BSLOTR_SLOTEN (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field NBSLOT: Number of slots in an audio frame
    inline uint32_t SAI1_BSLOTR_NBSLOT (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field SLOTSZ: Slot size
    inline uint32_t SAI1_BSLOTR_SLOTSZ (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field FBOFF: First bit offset
    inline uint32_t SAI1_BSLOTR_FBOFF (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BIM: BInterrupt mask register2
  #define SAI1_BIM (* ((volatile uint32_t *) (0x40015800 + 52)))

  // Field LFSDETIE: Late frame synchronization detection interrupt enable
    const uint32_t SAI1_BIM_LFSDETIE = 1U << 6 ;

  // Field AFSDETIE: Anticipated frame synchronization detection interrupt enable
    const uint32_t SAI1_BIM_AFSDETIE = 1U << 5 ;

  // Field CNRDYIE: Codec not ready interrupt enable
    const uint32_t SAI1_BIM_CNRDYIE = 1U << 4 ;

  // Field FREQIE: FIFO request interrupt enable
    const uint32_t SAI1_BIM_FREQIE = 1U << 3 ;

  // Field WCKCFG: Wrong clock configuration interrupt enable
    const uint32_t SAI1_BIM_WCKCFG = 1U << 2 ;

  // Field MUTEDET: Mute detection interrupt enable
    const uint32_t SAI1_BIM_MUTEDET = 1U << 1 ;

  // Field OVRUDRIE: Overrun/underrun interrupt enable
    const uint32_t SAI1_BIM_OVRUDRIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BSR: BStatus register
  #define SAI1_BSR (* ((const volatile uint32_t *) (0x40015800 + 56)))

  // Field FLVL: FIFO level threshold
    inline uint32_t SAI1_BSR_FLVL (const uint32_t inValue) {return (inValue & 0x7U) << 16 ; }

  // Field LFSDET: Late frame synchronization detection
    const uint32_t SAI1_BSR_LFSDET = 1U << 6 ;

  // Field AFSDET: Anticipated frame synchronization detection
    const uint32_t SAI1_BSR_AFSDET = 1U << 5 ;

  // Field CNRDY: Codec not ready
    const uint32_t SAI1_BSR_CNRDY = 1U << 4 ;

  // Field FREQ: FIFO request
    const uint32_t SAI1_BSR_FREQ = 1U << 3 ;

  // Field WCKCFG: Wrong clock configuration flag
    const uint32_t SAI1_BSR_WCKCFG = 1U << 2 ;

  // Field MUTEDET: Mute detection
    const uint32_t SAI1_BSR_MUTEDET = 1U << 1 ;

  // Field OVRUDR: Overrun / underrun
    const uint32_t SAI1_BSR_OVRUDR = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BCLRFR: BClear flag register
  #define SAI1_BCLRFR (* ((volatile uint32_t *) (0x40015800 + 60)))

  // Field LFSDET: Clear late frame synchronization detection flag
    const uint32_t SAI1_BCLRFR_LFSDET = 1U << 6 ;

  // Field CAFSDET: Clear anticipated frame synchronization detection flag
    const uint32_t SAI1_BCLRFR_CAFSDET = 1U << 5 ;

  // Field CNRDY: Clear codec not ready flag
    const uint32_t SAI1_BCLRFR_CNRDY = 1U << 4 ;

  // Field WCKCFG: Clear wrong clock configuration flag
    const uint32_t SAI1_BCLRFR_WCKCFG = 1U << 2 ;

  // Field MUTEDET: Mute detection flag
    const uint32_t SAI1_BCLRFR_MUTEDET = 1U << 1 ;

  // Field OVRUDR: Clear overrun / underrun
    const uint32_t SAI1_BCLRFR_OVRUDR = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BDR: BData register
  #define SAI1_BDR (* ((volatile uint32_t *) (0x40015800 + 64)))

  // Field DATA: Data
    inline uint32_t SAI1_BDR_DATA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ACR1: AConfiguration register 1
  #define SAI1_ACR1 (* ((volatile uint32_t *) (0x40015800 + 4)))

  // Field MCKDIV: Master clock divider
    inline uint32_t SAI1_ACR1_MCKDIV (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field NODIV: No divider
    const uint32_t SAI1_ACR1_NODIV = 1U << 19 ;

  // Field DMAEN: DMA enable
    const uint32_t SAI1_ACR1_DMAEN = 1U << 17 ;

  // Field SAIAEN: Audio block A enable
    const uint32_t SAI1_ACR1_SAIAEN = 1U << 16 ;

  // Field OutDri: Output drive
    const uint32_t SAI1_ACR1_OutDri = 1U << 13 ;

  // Field MONO: Mono mode
    const uint32_t SAI1_ACR1_MONO = 1U << 12 ;

  // Field SYNCEN: Synchronization enable
    inline uint32_t SAI1_ACR1_SYNCEN (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CKSTR: Clock strobing edge
    const uint32_t SAI1_ACR1_CKSTR = 1U << 9 ;

  // Field LSBFIRST: Least significant bit first
    const uint32_t SAI1_ACR1_LSBFIRST = 1U << 8 ;

  // Field DS: Data size
    inline uint32_t SAI1_ACR1_DS (const uint32_t inValue) {return (inValue & 0x7U) << 5 ; }

  // Field PRTCFG: Protocol configuration
    inline uint32_t SAI1_ACR1_PRTCFG (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODE: Audio block mode
    inline uint32_t SAI1_ACR1_MODE (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ACR2: AConfiguration register 2
  #define SAI1_ACR2 (* ((volatile uint32_t *) (0x40015800 + 8)))

  // Field COMP: Companding mode
    inline uint32_t SAI1_ACR2_COMP (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field CPL: Complement bit
    const uint32_t SAI1_ACR2_CPL = 1U << 13 ;

  // Field MUTECN: Mute counter
    inline uint32_t SAI1_ACR2_MUTECN (const uint32_t inValue) {return (inValue & 0x3FU) << 7 ; }

  // Field MUTEVAL: Mute value
    const uint32_t SAI1_ACR2_MUTEVAL = 1U << 6 ;

  // Field MUTE: Mute
    const uint32_t SAI1_ACR2_MUTE = 1U << 5 ;

  // Field TRIS: Tristate management on data line
    const uint32_t SAI1_ACR2_TRIS = 1U << 4 ;

  // Field FFLUS: FIFO flush
    const uint32_t SAI1_ACR2_FFLUS = 1U << 3 ;

  // Field FTH: FIFO threshold
    inline uint32_t SAI1_ACR2_FTH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AFRCR: AFRCR
  #define SAI1_AFRCR (* ((volatile uint32_t *) (0x40015800 + 12)))

  // Field FSOFF: Frame synchronization offset
    const uint32_t SAI1_AFRCR_FSOFF = 1U << 18 ;

  // Field FSPOL: Frame synchronization polarity
    const uint32_t SAI1_AFRCR_FSPOL = 1U << 17 ;

  // Field FSDEF: Frame synchronization definition
    const uint32_t SAI1_AFRCR_FSDEF = 1U << 16 ;

  // Field FSALL: Frame synchronization active level length
    inline uint32_t SAI1_AFRCR_FSALL (const uint32_t inValue) {return (inValue & 0x7FU) << 8 ; }

  // Field FRL: Frame length
    inline uint32_t SAI1_AFRCR_FRL (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ASLOTR: ASlot register
  #define SAI1_ASLOTR (* ((volatile uint32_t *) (0x40015800 + 16)))

  // Field SLOTEN: Slot enable
    inline uint32_t SAI1_ASLOTR_SLOTEN (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field NBSLOT: Number of slots in an audio frame
    inline uint32_t SAI1_ASLOTR_NBSLOT (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field SLOTSZ: Slot size
    inline uint32_t SAI1_ASLOTR_SLOTSZ (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field FBOFF: First bit offset
    inline uint32_t SAI1_ASLOTR_FBOFF (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AIM: AInterrupt mask register2
  #define SAI1_AIM (* ((volatile uint32_t *) (0x40015800 + 20)))

  // Field LFSDET: Late frame synchronization detection interrupt enable
    const uint32_t SAI1_AIM_LFSDET = 1U << 6 ;

  // Field AFSDETIE: Anticipated frame synchronization detection interrupt enable
    const uint32_t SAI1_AIM_AFSDETIE = 1U << 5 ;

  // Field CNRDYIE: Codec not ready interrupt enable
    const uint32_t SAI1_AIM_CNRDYIE = 1U << 4 ;

  // Field FREQIE: FIFO request interrupt enable
    const uint32_t SAI1_AIM_FREQIE = 1U << 3 ;

  // Field WCKCFG: Wrong clock configuration interrupt enable
    const uint32_t SAI1_AIM_WCKCFG = 1U << 2 ;

  // Field MUTEDET: Mute detection interrupt enable
    const uint32_t SAI1_AIM_MUTEDET = 1U << 1 ;

  // Field OVRUDRIE: Overrun/underrun interrupt enable
    const uint32_t SAI1_AIM_OVRUDRIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ASR: AStatus register
  #define SAI1_ASR (* ((volatile uint32_t *) (0x40015800 + 24)))

  // Field FLVL: FIFO level threshold
    inline uint32_t SAI1_ASR_FLVL (const uint32_t inValue) {return (inValue & 0x7U) << 16 ; }

  // Field LFSDET: Late frame synchronization detection
    const uint32_t SAI1_ASR_LFSDET = 1U << 6 ;

  // Field AFSDET: Anticipated frame synchronization detection
    const uint32_t SAI1_ASR_AFSDET = 1U << 5 ;

  // Field CNRDY: Codec not ready
    const uint32_t SAI1_ASR_CNRDY = 1U << 4 ;

  // Field FREQ: FIFO request
    const uint32_t SAI1_ASR_FREQ = 1U << 3 ;

  // Field WCKCFG: Wrong clock configuration flag. This bit is read only.
    const uint32_t SAI1_ASR_WCKCFG = 1U << 2 ;

  // Field MUTEDET: Mute detection
    const uint32_t SAI1_ASR_MUTEDET = 1U << 1 ;

  // Field OVRUDR: Overrun / underrun
    const uint32_t SAI1_ASR_OVRUDR = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ACLRFR: AClear flag register
  #define SAI1_ACLRFR (* ((volatile uint32_t *) (0x40015800 + 28)))

  // Field LFSDET: Clear late frame synchronization detection flag
    const uint32_t SAI1_ACLRFR_LFSDET = 1U << 6 ;

  // Field CAFSDET: Clear anticipated frame synchronization detection flag.
    const uint32_t SAI1_ACLRFR_CAFSDET = 1U << 5 ;

  // Field CNRDY: Clear codec not ready flag
    const uint32_t SAI1_ACLRFR_CNRDY = 1U << 4 ;

  // Field WCKCFG: Clear wrong clock configuration flag
    const uint32_t SAI1_ACLRFR_WCKCFG = 1U << 2 ;

  // Field MUTEDET: Mute detection flag
    const uint32_t SAI1_ACLRFR_MUTEDET = 1U << 1 ;

  // Field OVRUDR: Clear overrun / underrun
    const uint32_t SAI1_ACLRFR_OVRUDR = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ADR: AData register
  #define SAI1_ADR (* ((volatile uint32_t *) (0x40015800 + 32)))

  // Field DATA: Data
    inline uint32_t SAI1_ADR_DATA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register GCR: Global configuration register
  #define SAI1_GCR (* ((volatile uint32_t *) (0x40015800 + 0)))

  // Field SYNCIN: Synchronization inputs
    inline uint32_t SAI1_GCR_SYNCIN (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field SYNCOUT: Synchronization outputs
    inline uint32_t SAI1_GCR_SYNCOUT (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

//------------------------------------------------------------------------------
// Peripheral SAI2
//------------------------------------------------------------------------------

//---  Register BCR1: BConfiguration register 1
  #define SAI2_BCR1 (* ((volatile uint32_t *) (0x40015C00 + 36)))

  // Field MCKDIV: Master clock divider
    inline uint32_t SAI2_BCR1_MCKDIV (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field NODIV: No divider
    const uint32_t SAI2_BCR1_NODIV = 1U << 19 ;

  // Field DMAEN: DMA enable
    const uint32_t SAI2_BCR1_DMAEN = 1U << 17 ;

  // Field SAIBEN: Audio block B enable
    const uint32_t SAI2_BCR1_SAIBEN = 1U << 16 ;

  // Field OutDri: Output drive
    const uint32_t SAI2_BCR1_OutDri = 1U << 13 ;

  // Field MONO: Mono mode
    const uint32_t SAI2_BCR1_MONO = 1U << 12 ;

  // Field SYNCEN: Synchronization enable
    inline uint32_t SAI2_BCR1_SYNCEN (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CKSTR: Clock strobing edge
    const uint32_t SAI2_BCR1_CKSTR = 1U << 9 ;

  // Field LSBFIRST: Least significant bit first
    const uint32_t SAI2_BCR1_LSBFIRST = 1U << 8 ;

  // Field DS: Data size
    inline uint32_t SAI2_BCR1_DS (const uint32_t inValue) {return (inValue & 0x7U) << 5 ; }

  // Field PRTCFG: Protocol configuration
    inline uint32_t SAI2_BCR1_PRTCFG (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODE: Audio block mode
    inline uint32_t SAI2_BCR1_MODE (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BCR2: BConfiguration register 2
  #define SAI2_BCR2 (* ((volatile uint32_t *) (0x40015C00 + 40)))

  // Field COMP: Companding mode
    inline uint32_t SAI2_BCR2_COMP (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field CPL: Complement bit
    const uint32_t SAI2_BCR2_CPL = 1U << 13 ;

  // Field MUTECN: Mute counter
    inline uint32_t SAI2_BCR2_MUTECN (const uint32_t inValue) {return (inValue & 0x3FU) << 7 ; }

  // Field MUTEVAL: Mute value
    const uint32_t SAI2_BCR2_MUTEVAL = 1U << 6 ;

  // Field MUTE: Mute
    const uint32_t SAI2_BCR2_MUTE = 1U << 5 ;

  // Field TRIS: Tristate management on data line
    const uint32_t SAI2_BCR2_TRIS = 1U << 4 ;

  // Field FFLUS: FIFO flush
    const uint32_t SAI2_BCR2_FFLUS = 1U << 3 ;

  // Field FTH: FIFO threshold
    inline uint32_t SAI2_BCR2_FTH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BFRCR: BFRCR
  #define SAI2_BFRCR (* ((volatile uint32_t *) (0x40015C00 + 44)))

  // Field FSOFF: Frame synchronization offset
    const uint32_t SAI2_BFRCR_FSOFF = 1U << 18 ;

  // Field FSPOL: Frame synchronization polarity
    const uint32_t SAI2_BFRCR_FSPOL = 1U << 17 ;

  // Field FSDEF: Frame synchronization definition
    const uint32_t SAI2_BFRCR_FSDEF = 1U << 16 ;

  // Field FSALL: Frame synchronization active level length
    inline uint32_t SAI2_BFRCR_FSALL (const uint32_t inValue) {return (inValue & 0x7FU) << 8 ; }

  // Field FRL: Frame length
    inline uint32_t SAI2_BFRCR_FRL (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BSLOTR: BSlot register
  #define SAI2_BSLOTR (* ((volatile uint32_t *) (0x40015C00 + 48)))

  // Field SLOTEN: Slot enable
    inline uint32_t SAI2_BSLOTR_SLOTEN (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field NBSLOT: Number of slots in an audio frame
    inline uint32_t SAI2_BSLOTR_NBSLOT (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field SLOTSZ: Slot size
    inline uint32_t SAI2_BSLOTR_SLOTSZ (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field FBOFF: First bit offset
    inline uint32_t SAI2_BSLOTR_FBOFF (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BIM: BInterrupt mask register2
  #define SAI2_BIM (* ((volatile uint32_t *) (0x40015C00 + 52)))

  // Field LFSDETIE: Late frame synchronization detection interrupt enable
    const uint32_t SAI2_BIM_LFSDETIE = 1U << 6 ;

  // Field AFSDETIE: Anticipated frame synchronization detection interrupt enable
    const uint32_t SAI2_BIM_AFSDETIE = 1U << 5 ;

  // Field CNRDYIE: Codec not ready interrupt enable
    const uint32_t SAI2_BIM_CNRDYIE = 1U << 4 ;

  // Field FREQIE: FIFO request interrupt enable
    const uint32_t SAI2_BIM_FREQIE = 1U << 3 ;

  // Field WCKCFG: Wrong clock configuration interrupt enable
    const uint32_t SAI2_BIM_WCKCFG = 1U << 2 ;

  // Field MUTEDET: Mute detection interrupt enable
    const uint32_t SAI2_BIM_MUTEDET = 1U << 1 ;

  // Field OVRUDRIE: Overrun/underrun interrupt enable
    const uint32_t SAI2_BIM_OVRUDRIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BSR: BStatus register
  #define SAI2_BSR (* ((const volatile uint32_t *) (0x40015C00 + 56)))

  // Field FLVL: FIFO level threshold
    inline uint32_t SAI2_BSR_FLVL (const uint32_t inValue) {return (inValue & 0x7U) << 16 ; }

  // Field LFSDET: Late frame synchronization detection
    const uint32_t SAI2_BSR_LFSDET = 1U << 6 ;

  // Field AFSDET: Anticipated frame synchronization detection
    const uint32_t SAI2_BSR_AFSDET = 1U << 5 ;

  // Field CNRDY: Codec not ready
    const uint32_t SAI2_BSR_CNRDY = 1U << 4 ;

  // Field FREQ: FIFO request
    const uint32_t SAI2_BSR_FREQ = 1U << 3 ;

  // Field WCKCFG: Wrong clock configuration flag
    const uint32_t SAI2_BSR_WCKCFG = 1U << 2 ;

  // Field MUTEDET: Mute detection
    const uint32_t SAI2_BSR_MUTEDET = 1U << 1 ;

  // Field OVRUDR: Overrun / underrun
    const uint32_t SAI2_BSR_OVRUDR = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BCLRFR: BClear flag register
  #define SAI2_BCLRFR (* ((volatile uint32_t *) (0x40015C00 + 60)))

  // Field LFSDET: Clear late frame synchronization detection flag
    const uint32_t SAI2_BCLRFR_LFSDET = 1U << 6 ;

  // Field CAFSDET: Clear anticipated frame synchronization detection flag
    const uint32_t SAI2_BCLRFR_CAFSDET = 1U << 5 ;

  // Field CNRDY: Clear codec not ready flag
    const uint32_t SAI2_BCLRFR_CNRDY = 1U << 4 ;

  // Field WCKCFG: Clear wrong clock configuration flag
    const uint32_t SAI2_BCLRFR_WCKCFG = 1U << 2 ;

  // Field MUTEDET: Mute detection flag
    const uint32_t SAI2_BCLRFR_MUTEDET = 1U << 1 ;

  // Field OVRUDR: Clear overrun / underrun
    const uint32_t SAI2_BCLRFR_OVRUDR = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BDR: BData register
  #define SAI2_BDR (* ((volatile uint32_t *) (0x40015C00 + 64)))

  // Field DATA: Data
    inline uint32_t SAI2_BDR_DATA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ACR1: AConfiguration register 1
  #define SAI2_ACR1 (* ((volatile uint32_t *) (0x40015C00 + 4)))

  // Field MCKDIV: Master clock divider
    inline uint32_t SAI2_ACR1_MCKDIV (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field NODIV: No divider
    const uint32_t SAI2_ACR1_NODIV = 1U << 19 ;

  // Field DMAEN: DMA enable
    const uint32_t SAI2_ACR1_DMAEN = 1U << 17 ;

  // Field SAIAEN: Audio block A enable
    const uint32_t SAI2_ACR1_SAIAEN = 1U << 16 ;

  // Field OutDri: Output drive
    const uint32_t SAI2_ACR1_OutDri = 1U << 13 ;

  // Field MONO: Mono mode
    const uint32_t SAI2_ACR1_MONO = 1U << 12 ;

  // Field SYNCEN: Synchronization enable
    inline uint32_t SAI2_ACR1_SYNCEN (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CKSTR: Clock strobing edge
    const uint32_t SAI2_ACR1_CKSTR = 1U << 9 ;

  // Field LSBFIRST: Least significant bit first
    const uint32_t SAI2_ACR1_LSBFIRST = 1U << 8 ;

  // Field DS: Data size
    inline uint32_t SAI2_ACR1_DS (const uint32_t inValue) {return (inValue & 0x7U) << 5 ; }

  // Field PRTCFG: Protocol configuration
    inline uint32_t SAI2_ACR1_PRTCFG (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field MODE: Audio block mode
    inline uint32_t SAI2_ACR1_MODE (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ACR2: AConfiguration register 2
  #define SAI2_ACR2 (* ((volatile uint32_t *) (0x40015C00 + 8)))

  // Field COMP: Companding mode
    inline uint32_t SAI2_ACR2_COMP (const uint32_t inValue) {return (inValue & 0x3U) << 14 ; }

  // Field CPL: Complement bit
    const uint32_t SAI2_ACR2_CPL = 1U << 13 ;

  // Field MUTECN: Mute counter
    inline uint32_t SAI2_ACR2_MUTECN (const uint32_t inValue) {return (inValue & 0x3FU) << 7 ; }

  // Field MUTEVAL: Mute value
    const uint32_t SAI2_ACR2_MUTEVAL = 1U << 6 ;

  // Field MUTE: Mute
    const uint32_t SAI2_ACR2_MUTE = 1U << 5 ;

  // Field TRIS: Tristate management on data line
    const uint32_t SAI2_ACR2_TRIS = 1U << 4 ;

  // Field FFLUS: FIFO flush
    const uint32_t SAI2_ACR2_FFLUS = 1U << 3 ;

  // Field FTH: FIFO threshold
    inline uint32_t SAI2_ACR2_FTH (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AFRCR: AFRCR
  #define SAI2_AFRCR (* ((volatile uint32_t *) (0x40015C00 + 12)))

  // Field FSOFF: Frame synchronization offset
    const uint32_t SAI2_AFRCR_FSOFF = 1U << 18 ;

  // Field FSPOL: Frame synchronization polarity
    const uint32_t SAI2_AFRCR_FSPOL = 1U << 17 ;

  // Field FSDEF: Frame synchronization definition
    const uint32_t SAI2_AFRCR_FSDEF = 1U << 16 ;

  // Field FSALL: Frame synchronization active level length
    inline uint32_t SAI2_AFRCR_FSALL (const uint32_t inValue) {return (inValue & 0x7FU) << 8 ; }

  // Field FRL: Frame length
    inline uint32_t SAI2_AFRCR_FRL (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ASLOTR: ASlot register
  #define SAI2_ASLOTR (* ((volatile uint32_t *) (0x40015C00 + 16)))

  // Field SLOTEN: Slot enable
    inline uint32_t SAI2_ASLOTR_SLOTEN (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field NBSLOT: Number of slots in an audio frame
    inline uint32_t SAI2_ASLOTR_NBSLOT (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field SLOTSZ: Slot size
    inline uint32_t SAI2_ASLOTR_SLOTSZ (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field FBOFF: First bit offset
    inline uint32_t SAI2_ASLOTR_FBOFF (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AIM: AInterrupt mask register2
  #define SAI2_AIM (* ((volatile uint32_t *) (0x40015C00 + 20)))

  // Field LFSDET: Late frame synchronization detection interrupt enable
    const uint32_t SAI2_AIM_LFSDET = 1U << 6 ;

  // Field AFSDETIE: Anticipated frame synchronization detection interrupt enable
    const uint32_t SAI2_AIM_AFSDETIE = 1U << 5 ;

  // Field CNRDYIE: Codec not ready interrupt enable
    const uint32_t SAI2_AIM_CNRDYIE = 1U << 4 ;

  // Field FREQIE: FIFO request interrupt enable
    const uint32_t SAI2_AIM_FREQIE = 1U << 3 ;

  // Field WCKCFG: Wrong clock configuration interrupt enable
    const uint32_t SAI2_AIM_WCKCFG = 1U << 2 ;

  // Field MUTEDET: Mute detection interrupt enable
    const uint32_t SAI2_AIM_MUTEDET = 1U << 1 ;

  // Field OVRUDRIE: Overrun/underrun interrupt enable
    const uint32_t SAI2_AIM_OVRUDRIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ASR: AStatus register
  #define SAI2_ASR (* ((volatile uint32_t *) (0x40015C00 + 24)))

  // Field FLVL: FIFO level threshold
    inline uint32_t SAI2_ASR_FLVL (const uint32_t inValue) {return (inValue & 0x7U) << 16 ; }

  // Field LFSDET: Late frame synchronization detection
    const uint32_t SAI2_ASR_LFSDET = 1U << 6 ;

  // Field AFSDET: Anticipated frame synchronization detection
    const uint32_t SAI2_ASR_AFSDET = 1U << 5 ;

  // Field CNRDY: Codec not ready
    const uint32_t SAI2_ASR_CNRDY = 1U << 4 ;

  // Field FREQ: FIFO request
    const uint32_t SAI2_ASR_FREQ = 1U << 3 ;

  // Field WCKCFG: Wrong clock configuration flag. This bit is read only.
    const uint32_t SAI2_ASR_WCKCFG = 1U << 2 ;

  // Field MUTEDET: Mute detection
    const uint32_t SAI2_ASR_MUTEDET = 1U << 1 ;

  // Field OVRUDR: Overrun / underrun
    const uint32_t SAI2_ASR_OVRUDR = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ACLRFR: AClear flag register
  #define SAI2_ACLRFR (* ((volatile uint32_t *) (0x40015C00 + 28)))

  // Field LFSDET: Clear late frame synchronization detection flag
    const uint32_t SAI2_ACLRFR_LFSDET = 1U << 6 ;

  // Field CAFSDET: Clear anticipated frame synchronization detection flag.
    const uint32_t SAI2_ACLRFR_CAFSDET = 1U << 5 ;

  // Field CNRDY: Clear codec not ready flag
    const uint32_t SAI2_ACLRFR_CNRDY = 1U << 4 ;

  // Field WCKCFG: Clear wrong clock configuration flag
    const uint32_t SAI2_ACLRFR_WCKCFG = 1U << 2 ;

  // Field MUTEDET: Mute detection flag
    const uint32_t SAI2_ACLRFR_MUTEDET = 1U << 1 ;

  // Field OVRUDR: Clear overrun / underrun
    const uint32_t SAI2_ACLRFR_OVRUDR = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ADR: AData register
  #define SAI2_ADR (* ((volatile uint32_t *) (0x40015C00 + 32)))

  // Field DATA: Data
    inline uint32_t SAI2_ADR_DATA (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register GCR: Global configuration register
  #define SAI2_GCR (* ((volatile uint32_t *) (0x40015C00 + 0)))

  // Field SYNCIN: Synchronization inputs
    inline uint32_t SAI2_GCR_SYNCIN (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field SYNCOUT: Synchronization outputs
    inline uint32_t SAI2_GCR_SYNCOUT (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

//------------------------------------------------------------------------------
// Peripheral SCB: System control block
//------------------------------------------------------------------------------

//---  Register CPUID: CPUID base register
  #define SCB_CPUID (* ((const volatile uint32_t *) (0xE000ED00 + 0)))

  // Field Revision: Revision number
    inline uint32_t SCB_CPUID_Revision (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

  // Field PartNo: Part number of the processor
    inline uint32_t SCB_CPUID_PartNo (const uint32_t inValue) {return (inValue & 0xFFFU) << 4 ; }

  // Field Constant: Reads as 0xF
    inline uint32_t SCB_CPUID_Constant (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field Variant: Variant number
    inline uint32_t SCB_CPUID_Variant (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field Implementer: Implementer code
    inline uint32_t SCB_CPUID_Implementer (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register ICSR: Interrupt control and state register
  #define SCB_ICSR (* ((volatile uint32_t *) (0xE000ED00 + 4)))

  // Field VECTACTIVE: Active vector
    inline uint32_t SCB_ICSR_VECTACTIVE (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

  // Field RETTOBASE: Return to base level
    const uint32_t SCB_ICSR_RETTOBASE = 1U << 11 ;

  // Field VECTPENDING: Pending vector
    inline uint32_t SCB_ICSR_VECTPENDING (const uint32_t inValue) {return (inValue & 0x7FU) << 12 ; }

  // Field ISRPENDING: Interrupt pending flag
    const uint32_t SCB_ICSR_ISRPENDING = 1U << 22 ;

  // Field PENDSTCLR: SysTick exception clear-pending bit
    const uint32_t SCB_ICSR_PENDSTCLR = 1U << 25 ;

  // Field PENDSTSET: SysTick exception set-pending bit
    const uint32_t SCB_ICSR_PENDSTSET = 1U << 26 ;

  // Field PENDSVCLR: PendSV clear-pending bit
    const uint32_t SCB_ICSR_PENDSVCLR = 1U << 27 ;

  // Field PENDSVSET: PendSV set-pending bit
    const uint32_t SCB_ICSR_PENDSVSET = 1U << 28 ;

  // Field NMIPENDSET: NMI set-pending bit.
    const uint32_t SCB_ICSR_NMIPENDSET = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register VTOR: Vector table offset register
  #define SCB_VTOR (* ((volatile uint32_t *) (0xE000ED00 + 8)))

  // Field TBLOFF: Vector table base offset field
    inline uint32_t SCB_VTOR_TBLOFF (const uint32_t inValue) {return (inValue & 0x1FFFFFU) << 9 ; }

//------------------------------------------------------------------------------

//---  Register AIRCR: Application interrupt and reset control register
  #define SCB_AIRCR (* ((volatile uint32_t *) (0xE000ED00 + 12)))

  // Field VECTRESET: VECTRESET
    const uint32_t SCB_AIRCR_VECTRESET = 1U << 0 ;

  // Field VECTCLRACTIVE: VECTCLRACTIVE
    const uint32_t SCB_AIRCR_VECTCLRACTIVE = 1U << 1 ;

  // Field SYSRESETREQ: SYSRESETREQ
    const uint32_t SCB_AIRCR_SYSRESETREQ = 1U << 2 ;

  // Field PRIGROUP: PRIGROUP
    inline uint32_t SCB_AIRCR_PRIGROUP (const uint32_t inValue) {return (inValue & 0x7U) << 8 ; }

  // Field ENDIANESS: ENDIANESS
    const uint32_t SCB_AIRCR_ENDIANESS = 1U << 15 ;

  // Field VECTKEYSTAT: Register key
    inline uint32_t SCB_AIRCR_VECTKEYSTAT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register SCR: System control register
  #define SCB_SCR (* ((volatile uint32_t *) (0xE000ED00 + 16)))

  // Field SLEEPONEXIT: SLEEPONEXIT
    const uint32_t SCB_SCR_SLEEPONEXIT = 1U << 1 ;

  // Field SLEEPDEEP: SLEEPDEEP
    const uint32_t SCB_SCR_SLEEPDEEP = 1U << 2 ;

  // Field SEVEONPEND: Send Event on Pending bit
    const uint32_t SCB_SCR_SEVEONPEND = 1U << 4 ;

//------------------------------------------------------------------------------

//---  Register CCR: Configuration and control register
  #define SCB_CCR (* ((volatile uint32_t *) (0xE000ED00 + 20)))

  // Field NONBASETHRDENA: Configures how the processor enters Thread mode
    const uint32_t SCB_CCR_NONBASETHRDENA = 1U << 0 ;

  // Field USERSETMPEND: USERSETMPEND
    const uint32_t SCB_CCR_USERSETMPEND = 1U << 1 ;

  // Field UNALIGN__TRP: UNALIGN_ TRP
    const uint32_t SCB_CCR_UNALIGN__TRP = 1U << 3 ;

  // Field DIV_0_TRP: DIV_0_TRP
    const uint32_t SCB_CCR_DIV_0_TRP = 1U << 4 ;

  // Field BFHFNMIGN: BFHFNMIGN
    const uint32_t SCB_CCR_BFHFNMIGN = 1U << 8 ;

  // Field STKALIGN: STKALIGN
    const uint32_t SCB_CCR_STKALIGN = 1U << 9 ;

  // Field DC: DC
    const uint32_t SCB_CCR_DC = 1U << 16 ;

  // Field IC: IC
    const uint32_t SCB_CCR_IC = 1U << 17 ;

  // Field BP: BP
    const uint32_t SCB_CCR_BP = 1U << 18 ;

//------------------------------------------------------------------------------

//---  Register SHPR1: System handler priority registers
  #define SCB_SHPR1 (* ((volatile uint32_t *) (0xE000ED00 + 24)))

  // Field PRI_4: Priority of system handler 4
    inline uint32_t SCB_SHPR1_PRI_4 (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field PRI_5: Priority of system handler 5
    inline uint32_t SCB_SHPR1_PRI_5 (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field PRI_6: Priority of system handler 6
    inline uint32_t SCB_SHPR1_PRI_6 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register SHPR2: System handler priority registers
  #define SCB_SHPR2 (* ((volatile uint32_t *) (0xE000ED00 + 28)))

  // Field PRI_11: Priority of system handler 11
    inline uint32_t SCB_SHPR2_PRI_11 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register SHPR3: System handler priority registers
  #define SCB_SHPR3 (* ((volatile uint32_t *) (0xE000ED00 + 32)))

  // Field PRI_14: Priority of system handler 14
    inline uint32_t SCB_SHPR3_PRI_14 (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field PRI_15: Priority of system handler 15
    inline uint32_t SCB_SHPR3_PRI_15 (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

//------------------------------------------------------------------------------

//---  Register SHCRS: System handler control and state register
  #define SCB_SHCRS (* ((volatile uint32_t *) (0xE000ED00 + 36)))

  // Field MEMFAULTACT: Memory management fault exception active bit
    const uint32_t SCB_SHCRS_MEMFAULTACT = 1U << 0 ;

  // Field BUSFAULTACT: Bus fault exception active bit
    const uint32_t SCB_SHCRS_BUSFAULTACT = 1U << 1 ;

  // Field USGFAULTACT: Usage fault exception active bit
    const uint32_t SCB_SHCRS_USGFAULTACT = 1U << 3 ;

  // Field SVCALLACT: SVC call active bit
    const uint32_t SCB_SHCRS_SVCALLACT = 1U << 7 ;

  // Field MONITORACT: Debug monitor active bit
    const uint32_t SCB_SHCRS_MONITORACT = 1U << 8 ;

  // Field PENDSVACT: PendSV exception active bit
    const uint32_t SCB_SHCRS_PENDSVACT = 1U << 10 ;

  // Field SYSTICKACT: SysTick exception active bit
    const uint32_t SCB_SHCRS_SYSTICKACT = 1U << 11 ;

  // Field USGFAULTPENDED: Usage fault exception pending bit
    const uint32_t SCB_SHCRS_USGFAULTPENDED = 1U << 12 ;

  // Field MEMFAULTPENDED: Memory management fault exception pending bit
    const uint32_t SCB_SHCRS_MEMFAULTPENDED = 1U << 13 ;

  // Field BUSFAULTPENDED: Bus fault exception pending bit
    const uint32_t SCB_SHCRS_BUSFAULTPENDED = 1U << 14 ;

  // Field SVCALLPENDED: SVC call pending bit
    const uint32_t SCB_SHCRS_SVCALLPENDED = 1U << 15 ;

  // Field MEMFAULTENA: Memory management fault enable bit
    const uint32_t SCB_SHCRS_MEMFAULTENA = 1U << 16 ;

  // Field BUSFAULTENA: Bus fault enable bit
    const uint32_t SCB_SHCRS_BUSFAULTENA = 1U << 17 ;

  // Field USGFAULTENA: Usage fault enable bit
    const uint32_t SCB_SHCRS_USGFAULTENA = 1U << 18 ;

//------------------------------------------------------------------------------

//---  Register CFSR_UFSR_BFSR_MMFSR: Configurable fault status register
  #define SCB_CFSR_UFSR_BFSR_MMFSR (* ((volatile uint32_t *) (0xE000ED00 + 40)))

  // Field IACCVIOL: IACCVIOL
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_IACCVIOL = 1U << 0 ;

  // Field DACCVIOL: DACCVIOL
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_DACCVIOL = 1U << 1 ;

  // Field MUNSTKERR: MUNSTKERR
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_MUNSTKERR = 1U << 3 ;

  // Field MSTKERR: MSTKERR
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_MSTKERR = 1U << 4 ;

  // Field MLSPERR: MLSPERR
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_MLSPERR = 1U << 5 ;

  // Field MMARVALID: MMARVALID
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_MMARVALID = 1U << 7 ;

  // Field IBUSERR: Instruction bus error
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_IBUSERR = 1U << 8 ;

  // Field PRECISERR: Precise data bus error
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_PRECISERR = 1U << 9 ;

  // Field IMPRECISERR: Imprecise data bus error
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_IMPRECISERR = 1U << 10 ;

  // Field UNSTKERR: Bus fault on unstacking for a return from exception
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_UNSTKERR = 1U << 11 ;

  // Field STKERR: Bus fault on stacking for exception entry
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_STKERR = 1U << 12 ;

  // Field LSPERR: Bus fault on floating-point lazy state preservation
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_LSPERR = 1U << 13 ;

  // Field BFARVALID: Bus Fault Address Register (BFAR) valid flag
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_BFARVALID = 1U << 15 ;

  // Field UNDEFINSTR: Undefined instruction usage fault
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_UNDEFINSTR = 1U << 16 ;

  // Field INVSTATE: Invalid state usage fault
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_INVSTATE = 1U << 17 ;

  // Field INVPC: Invalid PC load usage fault
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_INVPC = 1U << 18 ;

  // Field NOCP: No coprocessor usage fault.
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_NOCP = 1U << 19 ;

  // Field UNALIGNED: Unaligned access usage fault
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_UNALIGNED = 1U << 24 ;

  // Field DIVBYZERO: Divide by zero usage fault
    const uint32_t SCB_CFSR_UFSR_BFSR_MMFSR_DIVBYZERO = 1U << 25 ;

//------------------------------------------------------------------------------

//---  Register HFSR: Hard fault status register
  #define SCB_HFSR (* ((volatile uint32_t *) (0xE000ED00 + 44)))

  // Field VECTTBL: Vector table hard fault
    const uint32_t SCB_HFSR_VECTTBL = 1U << 1 ;

  // Field FORCED: Forced hard fault
    const uint32_t SCB_HFSR_FORCED = 1U << 30 ;

  // Field DEBUG_VT: Reserved for Debug use
    const uint32_t SCB_HFSR_DEBUG_VT = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register MMFAR: Memory management fault address register
  #define SCB_MMFAR (* ((volatile uint32_t *) (0xE000ED00 + 52)))

  // Field ADDRESS: Memory management fault address
    inline uint32_t SCB_MMFAR_ADDRESS (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BFAR: Bus fault address register
  #define SCB_BFAR (* ((volatile uint32_t *) (0xE000ED00 + 56)))

  // Field ADDRESS: Bus fault address
    inline uint32_t SCB_BFAR_ADDRESS (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral SCB_ACTRL: System control block ACTLR
//------------------------------------------------------------------------------

//---  Register ACTRL: Auxiliary control register
  #define SCB_ACTRL_ACTRL (* ((volatile uint32_t *) (0xE000E008 + 0)))

  // Field DISFOLD: DISFOLD
    const uint32_t SCB_ACTRL_ACTRL_DISFOLD = 1U << 2 ;

  // Field FPEXCODIS: FPEXCODIS
    const uint32_t SCB_ACTRL_ACTRL_FPEXCODIS = 1U << 10 ;

  // Field DISRAMODE: DISRAMODE
    const uint32_t SCB_ACTRL_ACTRL_DISRAMODE = 1U << 11 ;

  // Field DISITMATBFLUSH: DISITMATBFLUSH
    const uint32_t SCB_ACTRL_ACTRL_DISITMATBFLUSH = 1U << 12 ;

//------------------------------------------------------------------------------
// Peripheral SDMMC1: Secure digital input/output       interface
//------------------------------------------------------------------------------

//---  Register POWER: power control register
  #define SDMMC1_POWER (* ((volatile uint32_t *) (0x40012C00 + 0)))

  // Field PWRCTRL: PWRCTRL
    inline uint32_t SDMMC1_POWER_PWRCTRL (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CLKCR: SDI clock control register
  #define SDMMC1_CLKCR (* ((volatile uint32_t *) (0x40012C00 + 4)))

  // Field HWFC_EN: HW Flow Control enable
    const uint32_t SDMMC1_CLKCR_HWFC_EN = 1U << 14 ;

  // Field NEGEDGE: SDIO_CK dephasing selection bit
    const uint32_t SDMMC1_CLKCR_NEGEDGE = 1U << 13 ;

  // Field WIDBUS: Wide bus mode enable bit
    inline uint32_t SDMMC1_CLKCR_WIDBUS (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field BYPASS: Clock divider bypass enable bit
    const uint32_t SDMMC1_CLKCR_BYPASS = 1U << 10 ;

  // Field PWRSAV: Power saving configuration bit
    const uint32_t SDMMC1_CLKCR_PWRSAV = 1U << 9 ;

  // Field CLKEN: Clock enable bit
    const uint32_t SDMMC1_CLKCR_CLKEN = 1U << 8 ;

  // Field CLKDIV: Clock divide factor
    inline uint32_t SDMMC1_CLKCR_CLKDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARG: argument register
  #define SDMMC1_ARG (* ((volatile uint32_t *) (0x40012C00 + 8)))

  // Field CMDARG: Command argument
    inline uint32_t SDMMC1_ARG_CMDARG (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CMD: command register
  #define SDMMC1_CMD (* ((volatile uint32_t *) (0x40012C00 + 12)))

  // Field CE_ATACMD: CE-ATA command
    const uint32_t SDMMC1_CMD_CE_ATACMD = 1U << 14 ;

  // Field nIEN: not Interrupt Enable
    const uint32_t SDMMC1_CMD_nIEN = 1U << 13 ;

  // Field ENCMDcompl: Enable CMD completion
    const uint32_t SDMMC1_CMD_ENCMDcompl = 1U << 12 ;

  // Field SDIOSuspend: SD I/O suspend command
    const uint32_t SDMMC1_CMD_SDIOSuspend = 1U << 11 ;

  // Field CPSMEN: Command path state machine (CPSM) Enable bit
    const uint32_t SDMMC1_CMD_CPSMEN = 1U << 10 ;

  // Field WAITPEND: CPSM Waits for ends of data transfer (CmdPend internal signal)
    const uint32_t SDMMC1_CMD_WAITPEND = 1U << 9 ;

  // Field WAITINT: CPSM waits for interrupt request
    const uint32_t SDMMC1_CMD_WAITINT = 1U << 8 ;

  // Field WAITRESP: Wait for response bits
    inline uint32_t SDMMC1_CMD_WAITRESP (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field CMDINDEX: Command index
    inline uint32_t SDMMC1_CMD_CMDINDEX (const uint32_t inValue) {return (inValue & 0x3FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RESPCMD: command response register
  #define SDMMC1_RESPCMD (* ((const volatile uint32_t *) (0x40012C00 + 16)))

  // Field RESPCMD: Response command index
    inline uint32_t SDMMC1_RESPCMD_RESPCMD (const uint32_t inValue) {return (inValue & 0x3FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RESP1: response 1..4 register
  #define SDMMC1_RESP1 (* ((const volatile uint32_t *) (0x40012C00 + 20)))

  // Field CARDSTATUS1: see Table 132
    inline uint32_t SDMMC1_RESP1_CARDSTATUS1 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RESP2: response 1..4 register
  #define SDMMC1_RESP2 (* ((const volatile uint32_t *) (0x40012C00 + 24)))

  // Field CARDSTATUS2: see Table 132
    inline uint32_t SDMMC1_RESP2_CARDSTATUS2 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RESP3: response 1..4 register
  #define SDMMC1_RESP3 (* ((const volatile uint32_t *) (0x40012C00 + 28)))

  // Field CARDSTATUS3: see Table 132
    inline uint32_t SDMMC1_RESP3_CARDSTATUS3 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RESP4: response 1..4 register
  #define SDMMC1_RESP4 (* ((const volatile uint32_t *) (0x40012C00 + 32)))

  // Field CARDSTATUS4: see Table 132
    inline uint32_t SDMMC1_RESP4_CARDSTATUS4 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DTIMER: data timer register
  #define SDMMC1_DTIMER (* ((volatile uint32_t *) (0x40012C00 + 36)))

  // Field DATATIME: Data timeout period
    inline uint32_t SDMMC1_DTIMER_DATATIME (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DLEN: data length register
  #define SDMMC1_DLEN (* ((volatile uint32_t *) (0x40012C00 + 40)))

  // Field DATALENGTH: Data length value
    inline uint32_t SDMMC1_DLEN_DATALENGTH (const uint32_t inValue) {return (inValue & 0x1FFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DCTRL: data control register
  #define SDMMC1_DCTRL (* ((volatile uint32_t *) (0x40012C00 + 44)))

  // Field SDIOEN: SD I/O enable functions
    const uint32_t SDMMC1_DCTRL_SDIOEN = 1U << 11 ;

  // Field RWMOD: Read wait mode
    const uint32_t SDMMC1_DCTRL_RWMOD = 1U << 10 ;

  // Field RWSTOP: Read wait stop
    const uint32_t SDMMC1_DCTRL_RWSTOP = 1U << 9 ;

  // Field RWSTART: Read wait start
    const uint32_t SDMMC1_DCTRL_RWSTART = 1U << 8 ;

  // Field DBLOCKSIZE: Data block size
    inline uint32_t SDMMC1_DCTRL_DBLOCKSIZE (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field DMAEN: DMA enable bit
    const uint32_t SDMMC1_DCTRL_DMAEN = 1U << 3 ;

  // Field DTMODE: Data transfer mode selection 1: Stream or SDIO multibyte data transfer
    const uint32_t SDMMC1_DCTRL_DTMODE = 1U << 2 ;

  // Field DTDIR: Data transfer direction selection
    const uint32_t SDMMC1_DCTRL_DTDIR = 1U << 1 ;

  // Field DTEN: DTEN
    const uint32_t SDMMC1_DCTRL_DTEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DCOUNT: data counter register
  #define SDMMC1_DCOUNT (* ((const volatile uint32_t *) (0x40012C00 + 48)))

  // Field DATACOUNT: Data count value
    inline uint32_t SDMMC1_DCOUNT_DATACOUNT (const uint32_t inValue) {return (inValue & 0x1FFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register STA: status register
  #define SDMMC1_STA (* ((const volatile uint32_t *) (0x40012C00 + 52)))

  // Field CEATAEND: CE-ATA command completion signal received for CMD61
    const uint32_t SDMMC1_STA_CEATAEND = 1U << 23 ;

  // Field SDIOIT: SDIO interrupt received
    const uint32_t SDMMC1_STA_SDIOIT = 1U << 22 ;

  // Field RXDAVL: Data available in receive FIFO
    const uint32_t SDMMC1_STA_RXDAVL = 1U << 21 ;

  // Field TXDAVL: Data available in transmit FIFO
    const uint32_t SDMMC1_STA_TXDAVL = 1U << 20 ;

  // Field RXFIFOE: Receive FIFO empty
    const uint32_t SDMMC1_STA_RXFIFOE = 1U << 19 ;

  // Field TXFIFOE: Transmit FIFO empty
    const uint32_t SDMMC1_STA_TXFIFOE = 1U << 18 ;

  // Field RXFIFOF: Receive FIFO full
    const uint32_t SDMMC1_STA_RXFIFOF = 1U << 17 ;

  // Field TXFIFOF: Transmit FIFO full
    const uint32_t SDMMC1_STA_TXFIFOF = 1U << 16 ;

  // Field RXFIFOHF: Receive FIFO half full: there are at least 8 words in the FIFO
    const uint32_t SDMMC1_STA_RXFIFOHF = 1U << 15 ;

  // Field TXFIFOHE: Transmit FIFO half empty: at least 8 words can be written into the FIFO
    const uint32_t SDMMC1_STA_TXFIFOHE = 1U << 14 ;

  // Field RXACT: Data receive in progress
    const uint32_t SDMMC1_STA_RXACT = 1U << 13 ;

  // Field TXACT: Data transmit in progress
    const uint32_t SDMMC1_STA_TXACT = 1U << 12 ;

  // Field CMDACT: Command transfer in progress
    const uint32_t SDMMC1_STA_CMDACT = 1U << 11 ;

  // Field DBCKEND: Data block sent/received (CRC check passed)
    const uint32_t SDMMC1_STA_DBCKEND = 1U << 10 ;

  // Field STBITERR: Start bit not detected on all data signals in wide bus mode
    const uint32_t SDMMC1_STA_STBITERR = 1U << 9 ;

  // Field DATAEND: Data end (data counter, SDIDCOUNT, is zero)
    const uint32_t SDMMC1_STA_DATAEND = 1U << 8 ;

  // Field CMDSENT: Command sent (no response required)
    const uint32_t SDMMC1_STA_CMDSENT = 1U << 7 ;

  // Field CMDREND: Command response received (CRC check passed)
    const uint32_t SDMMC1_STA_CMDREND = 1U << 6 ;

  // Field RXOVERR: Received FIFO overrun error
    const uint32_t SDMMC1_STA_RXOVERR = 1U << 5 ;

  // Field TXUNDERR: Transmit FIFO underrun error
    const uint32_t SDMMC1_STA_TXUNDERR = 1U << 4 ;

  // Field DTIMEOUT: Data timeout
    const uint32_t SDMMC1_STA_DTIMEOUT = 1U << 3 ;

  // Field CTIMEOUT: Command response timeout
    const uint32_t SDMMC1_STA_CTIMEOUT = 1U << 2 ;

  // Field DCRCFAIL: Data block sent/received (CRC check failed)
    const uint32_t SDMMC1_STA_DCRCFAIL = 1U << 1 ;

  // Field CCRCFAIL: Command response received (CRC check failed)
    const uint32_t SDMMC1_STA_CCRCFAIL = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: interrupt clear register
  #define SDMMC1_ICR (* ((volatile uint32_t *) (0x40012C00 + 56)))

  // Field CEATAENDC: CEATAEND flag clear bit
    const uint32_t SDMMC1_ICR_CEATAENDC = 1U << 23 ;

  // Field SDIOITC: SDIOIT flag clear bit
    const uint32_t SDMMC1_ICR_SDIOITC = 1U << 22 ;

  // Field DBCKENDC: DBCKEND flag clear bit
    const uint32_t SDMMC1_ICR_DBCKENDC = 1U << 10 ;

  // Field STBITERRC: STBITERR flag clear bit
    const uint32_t SDMMC1_ICR_STBITERRC = 1U << 9 ;

  // Field DATAENDC: DATAEND flag clear bit
    const uint32_t SDMMC1_ICR_DATAENDC = 1U << 8 ;

  // Field CMDSENTC: CMDSENT flag clear bit
    const uint32_t SDMMC1_ICR_CMDSENTC = 1U << 7 ;

  // Field CMDRENDC: CMDREND flag clear bit
    const uint32_t SDMMC1_ICR_CMDRENDC = 1U << 6 ;

  // Field RXOVERRC: RXOVERR flag clear bit
    const uint32_t SDMMC1_ICR_RXOVERRC = 1U << 5 ;

  // Field TXUNDERRC: TXUNDERR flag clear bit
    const uint32_t SDMMC1_ICR_TXUNDERRC = 1U << 4 ;

  // Field DTIMEOUTC: DTIMEOUT flag clear bit
    const uint32_t SDMMC1_ICR_DTIMEOUTC = 1U << 3 ;

  // Field CTIMEOUTC: CTIMEOUT flag clear bit
    const uint32_t SDMMC1_ICR_CTIMEOUTC = 1U << 2 ;

  // Field DCRCFAILC: DCRCFAIL flag clear bit
    const uint32_t SDMMC1_ICR_DCRCFAILC = 1U << 1 ;

  // Field CCRCFAILC: CCRCFAIL flag clear bit
    const uint32_t SDMMC1_ICR_CCRCFAILC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register MASK: mask register
  #define SDMMC1_MASK (* ((volatile uint32_t *) (0x40012C00 + 60)))

  // Field CEATAENDIE: CE-ATA command completion signal received interrupt enable
    const uint32_t SDMMC1_MASK_CEATAENDIE = 1U << 23 ;

  // Field SDIOITIE: SDIO mode interrupt received interrupt enable
    const uint32_t SDMMC1_MASK_SDIOITIE = 1U << 22 ;

  // Field RXDAVLIE: Data available in Rx FIFO interrupt enable
    const uint32_t SDMMC1_MASK_RXDAVLIE = 1U << 21 ;

  // Field TXDAVLIE: Data available in Tx FIFO interrupt enable
    const uint32_t SDMMC1_MASK_TXDAVLIE = 1U << 20 ;

  // Field RXFIFOEIE: Rx FIFO empty interrupt enable
    const uint32_t SDMMC1_MASK_RXFIFOEIE = 1U << 19 ;

  // Field TXFIFOEIE: Tx FIFO empty interrupt enable
    const uint32_t SDMMC1_MASK_TXFIFOEIE = 1U << 18 ;

  // Field RXFIFOFIE: Rx FIFO full interrupt enable
    const uint32_t SDMMC1_MASK_RXFIFOFIE = 1U << 17 ;

  // Field TXFIFOFIE: Tx FIFO full interrupt enable
    const uint32_t SDMMC1_MASK_TXFIFOFIE = 1U << 16 ;

  // Field RXFIFOHFIE: Rx FIFO half full interrupt enable
    const uint32_t SDMMC1_MASK_RXFIFOHFIE = 1U << 15 ;

  // Field TXFIFOHEIE: Tx FIFO half empty interrupt enable
    const uint32_t SDMMC1_MASK_TXFIFOHEIE = 1U << 14 ;

  // Field RXACTIE: Data receive acting interrupt enable
    const uint32_t SDMMC1_MASK_RXACTIE = 1U << 13 ;

  // Field TXACTIE: Data transmit acting interrupt enable
    const uint32_t SDMMC1_MASK_TXACTIE = 1U << 12 ;

  // Field CMDACTIE: Command acting interrupt enable
    const uint32_t SDMMC1_MASK_CMDACTIE = 1U << 11 ;

  // Field DBCKENDIE: Data block end interrupt enable
    const uint32_t SDMMC1_MASK_DBCKENDIE = 1U << 10 ;

  // Field STBITERRIE: Start bit error interrupt enable
    const uint32_t SDMMC1_MASK_STBITERRIE = 1U << 9 ;

  // Field DATAENDIE: Data end interrupt enable
    const uint32_t SDMMC1_MASK_DATAENDIE = 1U << 8 ;

  // Field CMDSENTIE: Command sent interrupt enable
    const uint32_t SDMMC1_MASK_CMDSENTIE = 1U << 7 ;

  // Field CMDRENDIE: Command response received interrupt enable
    const uint32_t SDMMC1_MASK_CMDRENDIE = 1U << 6 ;

  // Field RXOVERRIE: Rx FIFO overrun error interrupt enable
    const uint32_t SDMMC1_MASK_RXOVERRIE = 1U << 5 ;

  // Field TXUNDERRIE: Tx FIFO underrun error interrupt enable
    const uint32_t SDMMC1_MASK_TXUNDERRIE = 1U << 4 ;

  // Field DTIMEOUTIE: Data timeout interrupt enable
    const uint32_t SDMMC1_MASK_DTIMEOUTIE = 1U << 3 ;

  // Field CTIMEOUTIE: Command timeout interrupt enable
    const uint32_t SDMMC1_MASK_CTIMEOUTIE = 1U << 2 ;

  // Field DCRCFAILIE: Data CRC fail interrupt enable
    const uint32_t SDMMC1_MASK_DCRCFAILIE = 1U << 1 ;

  // Field CCRCFAILIE: Command CRC fail interrupt enable
    const uint32_t SDMMC1_MASK_CCRCFAILIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register FIFOCNT: FIFO counter register
  #define SDMMC1_FIFOCNT (* ((const volatile uint32_t *) (0x40012C00 + 72)))

  // Field FIFOCOUNT: Remaining number of words to be written to or read from the FIFO
    inline uint32_t SDMMC1_FIFOCNT_FIFOCOUNT (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register FIFO: data FIFO register
  #define SDMMC1_FIFO (* ((volatile uint32_t *) (0x40012C00 + 128)))

  // Field FIFOData: Receive and transmit FIFO data
    inline uint32_t SDMMC1_FIFO_FIFOData (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral SDMMC2
//------------------------------------------------------------------------------

//---  Register POWER: power control register
  #define SDMMC2_POWER (* ((volatile uint32_t *) (0x40011C00 + 0)))

  // Field PWRCTRL: PWRCTRL
    inline uint32_t SDMMC2_POWER_PWRCTRL (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CLKCR: SDI clock control register
  #define SDMMC2_CLKCR (* ((volatile uint32_t *) (0x40011C00 + 4)))

  // Field HWFC_EN: HW Flow Control enable
    const uint32_t SDMMC2_CLKCR_HWFC_EN = 1U << 14 ;

  // Field NEGEDGE: SDIO_CK dephasing selection bit
    const uint32_t SDMMC2_CLKCR_NEGEDGE = 1U << 13 ;

  // Field WIDBUS: Wide bus mode enable bit
    inline uint32_t SDMMC2_CLKCR_WIDBUS (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

  // Field BYPASS: Clock divider bypass enable bit
    const uint32_t SDMMC2_CLKCR_BYPASS = 1U << 10 ;

  // Field PWRSAV: Power saving configuration bit
    const uint32_t SDMMC2_CLKCR_PWRSAV = 1U << 9 ;

  // Field CLKEN: Clock enable bit
    const uint32_t SDMMC2_CLKCR_CLKEN = 1U << 8 ;

  // Field CLKDIV: Clock divide factor
    inline uint32_t SDMMC2_CLKCR_CLKDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARG: argument register
  #define SDMMC2_ARG (* ((volatile uint32_t *) (0x40011C00 + 8)))

  // Field CMDARG: Command argument
    inline uint32_t SDMMC2_ARG_CMDARG (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CMD: command register
  #define SDMMC2_CMD (* ((volatile uint32_t *) (0x40011C00 + 12)))

  // Field CE_ATACMD: CE-ATA command
    const uint32_t SDMMC2_CMD_CE_ATACMD = 1U << 14 ;

  // Field nIEN: not Interrupt Enable
    const uint32_t SDMMC2_CMD_nIEN = 1U << 13 ;

  // Field ENCMDcompl: Enable CMD completion
    const uint32_t SDMMC2_CMD_ENCMDcompl = 1U << 12 ;

  // Field SDIOSuspend: SD I/O suspend command
    const uint32_t SDMMC2_CMD_SDIOSuspend = 1U << 11 ;

  // Field CPSMEN: Command path state machine (CPSM) Enable bit
    const uint32_t SDMMC2_CMD_CPSMEN = 1U << 10 ;

  // Field WAITPEND: CPSM Waits for ends of data transfer (CmdPend internal signal)
    const uint32_t SDMMC2_CMD_WAITPEND = 1U << 9 ;

  // Field WAITINT: CPSM waits for interrupt request
    const uint32_t SDMMC2_CMD_WAITINT = 1U << 8 ;

  // Field WAITRESP: Wait for response bits
    inline uint32_t SDMMC2_CMD_WAITRESP (const uint32_t inValue) {return (inValue & 0x3U) << 6 ; }

  // Field CMDINDEX: Command index
    inline uint32_t SDMMC2_CMD_CMDINDEX (const uint32_t inValue) {return (inValue & 0x3FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RESPCMD: command response register
  #define SDMMC2_RESPCMD (* ((const volatile uint32_t *) (0x40011C00 + 16)))

  // Field RESPCMD: Response command index
    inline uint32_t SDMMC2_RESPCMD_RESPCMD (const uint32_t inValue) {return (inValue & 0x3FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RESP1: response 1..4 register
  #define SDMMC2_RESP1 (* ((const volatile uint32_t *) (0x40011C00 + 20)))

  // Field CARDSTATUS1: see Table 132
    inline uint32_t SDMMC2_RESP1_CARDSTATUS1 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RESP2: response 1..4 register
  #define SDMMC2_RESP2 (* ((const volatile uint32_t *) (0x40011C00 + 24)))

  // Field CARDSTATUS2: see Table 132
    inline uint32_t SDMMC2_RESP2_CARDSTATUS2 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RESP3: response 1..4 register
  #define SDMMC2_RESP3 (* ((const volatile uint32_t *) (0x40011C00 + 28)))

  // Field CARDSTATUS3: see Table 132
    inline uint32_t SDMMC2_RESP3_CARDSTATUS3 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RESP4: response 1..4 register
  #define SDMMC2_RESP4 (* ((const volatile uint32_t *) (0x40011C00 + 32)))

  // Field CARDSTATUS4: see Table 132
    inline uint32_t SDMMC2_RESP4_CARDSTATUS4 (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DTIMER: data timer register
  #define SDMMC2_DTIMER (* ((volatile uint32_t *) (0x40011C00 + 36)))

  // Field DATATIME: Data timeout period
    inline uint32_t SDMMC2_DTIMER_DATATIME (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DLEN: data length register
  #define SDMMC2_DLEN (* ((volatile uint32_t *) (0x40011C00 + 40)))

  // Field DATALENGTH: Data length value
    inline uint32_t SDMMC2_DLEN_DATALENGTH (const uint32_t inValue) {return (inValue & 0x1FFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DCTRL: data control register
  #define SDMMC2_DCTRL (* ((volatile uint32_t *) (0x40011C00 + 44)))

  // Field SDIOEN: SD I/O enable functions
    const uint32_t SDMMC2_DCTRL_SDIOEN = 1U << 11 ;

  // Field RWMOD: Read wait mode
    const uint32_t SDMMC2_DCTRL_RWMOD = 1U << 10 ;

  // Field RWSTOP: Read wait stop
    const uint32_t SDMMC2_DCTRL_RWSTOP = 1U << 9 ;

  // Field RWSTART: Read wait start
    const uint32_t SDMMC2_DCTRL_RWSTART = 1U << 8 ;

  // Field DBLOCKSIZE: Data block size
    inline uint32_t SDMMC2_DCTRL_DBLOCKSIZE (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field DMAEN: DMA enable bit
    const uint32_t SDMMC2_DCTRL_DMAEN = 1U << 3 ;

  // Field DTMODE: Data transfer mode selection 1: Stream or SDIO multibyte data transfer
    const uint32_t SDMMC2_DCTRL_DTMODE = 1U << 2 ;

  // Field DTDIR: Data transfer direction selection
    const uint32_t SDMMC2_DCTRL_DTDIR = 1U << 1 ;

  // Field DTEN: DTEN
    const uint32_t SDMMC2_DCTRL_DTEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DCOUNT: data counter register
  #define SDMMC2_DCOUNT (* ((const volatile uint32_t *) (0x40011C00 + 48)))

  // Field DATACOUNT: Data count value
    inline uint32_t SDMMC2_DCOUNT_DATACOUNT (const uint32_t inValue) {return (inValue & 0x1FFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register STA: status register
  #define SDMMC2_STA (* ((const volatile uint32_t *) (0x40011C00 + 52)))

  // Field CEATAEND: CE-ATA command completion signal received for CMD61
    const uint32_t SDMMC2_STA_CEATAEND = 1U << 23 ;

  // Field SDIOIT: SDIO interrupt received
    const uint32_t SDMMC2_STA_SDIOIT = 1U << 22 ;

  // Field RXDAVL: Data available in receive FIFO
    const uint32_t SDMMC2_STA_RXDAVL = 1U << 21 ;

  // Field TXDAVL: Data available in transmit FIFO
    const uint32_t SDMMC2_STA_TXDAVL = 1U << 20 ;

  // Field RXFIFOE: Receive FIFO empty
    const uint32_t SDMMC2_STA_RXFIFOE = 1U << 19 ;

  // Field TXFIFOE: Transmit FIFO empty
    const uint32_t SDMMC2_STA_TXFIFOE = 1U << 18 ;

  // Field RXFIFOF: Receive FIFO full
    const uint32_t SDMMC2_STA_RXFIFOF = 1U << 17 ;

  // Field TXFIFOF: Transmit FIFO full
    const uint32_t SDMMC2_STA_TXFIFOF = 1U << 16 ;

  // Field RXFIFOHF: Receive FIFO half full: there are at least 8 words in the FIFO
    const uint32_t SDMMC2_STA_RXFIFOHF = 1U << 15 ;

  // Field TXFIFOHE: Transmit FIFO half empty: at least 8 words can be written into the FIFO
    const uint32_t SDMMC2_STA_TXFIFOHE = 1U << 14 ;

  // Field RXACT: Data receive in progress
    const uint32_t SDMMC2_STA_RXACT = 1U << 13 ;

  // Field TXACT: Data transmit in progress
    const uint32_t SDMMC2_STA_TXACT = 1U << 12 ;

  // Field CMDACT: Command transfer in progress
    const uint32_t SDMMC2_STA_CMDACT = 1U << 11 ;

  // Field DBCKEND: Data block sent/received (CRC check passed)
    const uint32_t SDMMC2_STA_DBCKEND = 1U << 10 ;

  // Field STBITERR: Start bit not detected on all data signals in wide bus mode
    const uint32_t SDMMC2_STA_STBITERR = 1U << 9 ;

  // Field DATAEND: Data end (data counter, SDIDCOUNT, is zero)
    const uint32_t SDMMC2_STA_DATAEND = 1U << 8 ;

  // Field CMDSENT: Command sent (no response required)
    const uint32_t SDMMC2_STA_CMDSENT = 1U << 7 ;

  // Field CMDREND: Command response received (CRC check passed)
    const uint32_t SDMMC2_STA_CMDREND = 1U << 6 ;

  // Field RXOVERR: Received FIFO overrun error
    const uint32_t SDMMC2_STA_RXOVERR = 1U << 5 ;

  // Field TXUNDERR: Transmit FIFO underrun error
    const uint32_t SDMMC2_STA_TXUNDERR = 1U << 4 ;

  // Field DTIMEOUT: Data timeout
    const uint32_t SDMMC2_STA_DTIMEOUT = 1U << 3 ;

  // Field CTIMEOUT: Command response timeout
    const uint32_t SDMMC2_STA_CTIMEOUT = 1U << 2 ;

  // Field DCRCFAIL: Data block sent/received (CRC check failed)
    const uint32_t SDMMC2_STA_DCRCFAIL = 1U << 1 ;

  // Field CCRCFAIL: Command response received (CRC check failed)
    const uint32_t SDMMC2_STA_CCRCFAIL = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: interrupt clear register
  #define SDMMC2_ICR (* ((volatile uint32_t *) (0x40011C00 + 56)))

  // Field CEATAENDC: CEATAEND flag clear bit
    const uint32_t SDMMC2_ICR_CEATAENDC = 1U << 23 ;

  // Field SDIOITC: SDIOIT flag clear bit
    const uint32_t SDMMC2_ICR_SDIOITC = 1U << 22 ;

  // Field DBCKENDC: DBCKEND flag clear bit
    const uint32_t SDMMC2_ICR_DBCKENDC = 1U << 10 ;

  // Field STBITERRC: STBITERR flag clear bit
    const uint32_t SDMMC2_ICR_STBITERRC = 1U << 9 ;

  // Field DATAENDC: DATAEND flag clear bit
    const uint32_t SDMMC2_ICR_DATAENDC = 1U << 8 ;

  // Field CMDSENTC: CMDSENT flag clear bit
    const uint32_t SDMMC2_ICR_CMDSENTC = 1U << 7 ;

  // Field CMDRENDC: CMDREND flag clear bit
    const uint32_t SDMMC2_ICR_CMDRENDC = 1U << 6 ;

  // Field RXOVERRC: RXOVERR flag clear bit
    const uint32_t SDMMC2_ICR_RXOVERRC = 1U << 5 ;

  // Field TXUNDERRC: TXUNDERR flag clear bit
    const uint32_t SDMMC2_ICR_TXUNDERRC = 1U << 4 ;

  // Field DTIMEOUTC: DTIMEOUT flag clear bit
    const uint32_t SDMMC2_ICR_DTIMEOUTC = 1U << 3 ;

  // Field CTIMEOUTC: CTIMEOUT flag clear bit
    const uint32_t SDMMC2_ICR_CTIMEOUTC = 1U << 2 ;

  // Field DCRCFAILC: DCRCFAIL flag clear bit
    const uint32_t SDMMC2_ICR_DCRCFAILC = 1U << 1 ;

  // Field CCRCFAILC: CCRCFAIL flag clear bit
    const uint32_t SDMMC2_ICR_CCRCFAILC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register MASK: mask register
  #define SDMMC2_MASK (* ((volatile uint32_t *) (0x40011C00 + 60)))

  // Field CEATAENDIE: CE-ATA command completion signal received interrupt enable
    const uint32_t SDMMC2_MASK_CEATAENDIE = 1U << 23 ;

  // Field SDIOITIE: SDIO mode interrupt received interrupt enable
    const uint32_t SDMMC2_MASK_SDIOITIE = 1U << 22 ;

  // Field RXDAVLIE: Data available in Rx FIFO interrupt enable
    const uint32_t SDMMC2_MASK_RXDAVLIE = 1U << 21 ;

  // Field TXDAVLIE: Data available in Tx FIFO interrupt enable
    const uint32_t SDMMC2_MASK_TXDAVLIE = 1U << 20 ;

  // Field RXFIFOEIE: Rx FIFO empty interrupt enable
    const uint32_t SDMMC2_MASK_RXFIFOEIE = 1U << 19 ;

  // Field TXFIFOEIE: Tx FIFO empty interrupt enable
    const uint32_t SDMMC2_MASK_TXFIFOEIE = 1U << 18 ;

  // Field RXFIFOFIE: Rx FIFO full interrupt enable
    const uint32_t SDMMC2_MASK_RXFIFOFIE = 1U << 17 ;

  // Field TXFIFOFIE: Tx FIFO full interrupt enable
    const uint32_t SDMMC2_MASK_TXFIFOFIE = 1U << 16 ;

  // Field RXFIFOHFIE: Rx FIFO half full interrupt enable
    const uint32_t SDMMC2_MASK_RXFIFOHFIE = 1U << 15 ;

  // Field TXFIFOHEIE: Tx FIFO half empty interrupt enable
    const uint32_t SDMMC2_MASK_TXFIFOHEIE = 1U << 14 ;

  // Field RXACTIE: Data receive acting interrupt enable
    const uint32_t SDMMC2_MASK_RXACTIE = 1U << 13 ;

  // Field TXACTIE: Data transmit acting interrupt enable
    const uint32_t SDMMC2_MASK_TXACTIE = 1U << 12 ;

  // Field CMDACTIE: Command acting interrupt enable
    const uint32_t SDMMC2_MASK_CMDACTIE = 1U << 11 ;

  // Field DBCKENDIE: Data block end interrupt enable
    const uint32_t SDMMC2_MASK_DBCKENDIE = 1U << 10 ;

  // Field STBITERRIE: Start bit error interrupt enable
    const uint32_t SDMMC2_MASK_STBITERRIE = 1U << 9 ;

  // Field DATAENDIE: Data end interrupt enable
    const uint32_t SDMMC2_MASK_DATAENDIE = 1U << 8 ;

  // Field CMDSENTIE: Command sent interrupt enable
    const uint32_t SDMMC2_MASK_CMDSENTIE = 1U << 7 ;

  // Field CMDRENDIE: Command response received interrupt enable
    const uint32_t SDMMC2_MASK_CMDRENDIE = 1U << 6 ;

  // Field RXOVERRIE: Rx FIFO overrun error interrupt enable
    const uint32_t SDMMC2_MASK_RXOVERRIE = 1U << 5 ;

  // Field TXUNDERRIE: Tx FIFO underrun error interrupt enable
    const uint32_t SDMMC2_MASK_TXUNDERRIE = 1U << 4 ;

  // Field DTIMEOUTIE: Data timeout interrupt enable
    const uint32_t SDMMC2_MASK_DTIMEOUTIE = 1U << 3 ;

  // Field CTIMEOUTIE: Command timeout interrupt enable
    const uint32_t SDMMC2_MASK_CTIMEOUTIE = 1U << 2 ;

  // Field DCRCFAILIE: Data CRC fail interrupt enable
    const uint32_t SDMMC2_MASK_DCRCFAILIE = 1U << 1 ;

  // Field CCRCFAILIE: Command CRC fail interrupt enable
    const uint32_t SDMMC2_MASK_CCRCFAILIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register FIFOCNT: FIFO counter register
  #define SDMMC2_FIFOCNT (* ((const volatile uint32_t *) (0x40011C00 + 72)))

  // Field FIFOCOUNT: Remaining number of words to be written to or read from the FIFO
    inline uint32_t SDMMC2_FIFOCNT_FIFOCOUNT (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register FIFO: data FIFO register
  #define SDMMC2_FIFO (* ((volatile uint32_t *) (0x40011C00 + 128)))

  // Field FIFOData: Receive and transmit FIFO data
    inline uint32_t SDMMC2_FIFO_FIFOData (const uint32_t inValue) {return (inValue & 0xFFFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral SPDIFRX: Receiver Interface
//------------------------------------------------------------------------------

//---  Register CR: Control register
  #define SPDIFRX_CR (* ((volatile uint32_t *) (0x40004000 + 0)))

  // Field SPDIFEN: Peripheral Block Enable
    inline uint32_t SPDIFRX_CR_SPDIFEN (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

  // Field RXDMAEN: Receiver DMA ENable for data flow
    const uint32_t SPDIFRX_CR_RXDMAEN = 1U << 2 ;

  // Field RXSTEO: STerEO Mode
    const uint32_t SPDIFRX_CR_RXSTEO = 1U << 3 ;

  // Field DRFMT: RX Data format
    inline uint32_t SPDIFRX_CR_DRFMT (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field PMSK: Mask Parity error bit
    const uint32_t SPDIFRX_CR_PMSK = 1U << 6 ;

  // Field VMSK: Mask of Validity bit
    const uint32_t SPDIFRX_CR_VMSK = 1U << 7 ;

  // Field CUMSK: Mask of channel status and user bits
    const uint32_t SPDIFRX_CR_CUMSK = 1U << 8 ;

  // Field PTMSK: Mask of Preamble Type bits
    const uint32_t SPDIFRX_CR_PTMSK = 1U << 9 ;

  // Field CBDMAEN: Control Buffer DMA ENable for control flow
    const uint32_t SPDIFRX_CR_CBDMAEN = 1U << 10 ;

  // Field CHSEL: Channel Selection
    const uint32_t SPDIFRX_CR_CHSEL = 1U << 11 ;

  // Field NBTR: Maximum allowed re-tries during synchronization phase
    inline uint32_t SPDIFRX_CR_NBTR (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field WFA: Wait For Activity
    const uint32_t SPDIFRX_CR_WFA = 1U << 14 ;

  // Field INSEL: input selection
    inline uint32_t SPDIFRX_CR_INSEL (const uint32_t inValue) {return (inValue & 0x7U) << 16 ; }

//------------------------------------------------------------------------------

//---  Register IMR: Interrupt mask register
  #define SPDIFRX_IMR (* ((volatile uint32_t *) (0x40004000 + 4)))

  // Field RXNEIE: RXNE interrupt enable
    const uint32_t SPDIFRX_IMR_RXNEIE = 1U << 0 ;

  // Field CSRNEIE: Control Buffer Ready Interrupt Enable
    const uint32_t SPDIFRX_IMR_CSRNEIE = 1U << 1 ;

  // Field PERRIE: Parity error interrupt enable
    const uint32_t SPDIFRX_IMR_PERRIE = 1U << 2 ;

  // Field OVRIE: Overrun error Interrupt Enable
    const uint32_t SPDIFRX_IMR_OVRIE = 1U << 3 ;

  // Field SBLKIE: Synchronization Block Detected Interrupt Enable
    const uint32_t SPDIFRX_IMR_SBLKIE = 1U << 4 ;

  // Field SYNCDIE: Synchronization Done
    const uint32_t SPDIFRX_IMR_SYNCDIE = 1U << 5 ;

  // Field IFEIE: Serial Interface Error Interrupt Enable
    const uint32_t SPDIFRX_IMR_IFEIE = 1U << 6 ;

//------------------------------------------------------------------------------

//---  Register SR: Status register
  #define SPDIFRX_SR (* ((const volatile uint32_t *) (0x40004000 + 8)))

  // Field RXNE: Read data register not empty
    const uint32_t SPDIFRX_SR_RXNE = 1U << 0 ;

  // Field CSRNE: Control Buffer register is not empty
    const uint32_t SPDIFRX_SR_CSRNE = 1U << 1 ;

  // Field PERR: Parity error
    const uint32_t SPDIFRX_SR_PERR = 1U << 2 ;

  // Field OVR: Overrun error
    const uint32_t SPDIFRX_SR_OVR = 1U << 3 ;

  // Field SBD: Synchronization Block Detected
    const uint32_t SPDIFRX_SR_SBD = 1U << 4 ;

  // Field SYNCD: Synchronization Done
    const uint32_t SPDIFRX_SR_SYNCD = 1U << 5 ;

  // Field FERR: Framing error
    const uint32_t SPDIFRX_SR_FERR = 1U << 6 ;

  // Field SERR: Synchronization error
    const uint32_t SPDIFRX_SR_SERR = 1U << 7 ;

  // Field TERR: Time-out error
    const uint32_t SPDIFRX_SR_TERR = 1U << 8 ;

  // Field WIDTH5: Duration of 5 symbols counted with SPDIF_CLK
    inline uint32_t SPDIFRX_SR_WIDTH5 (const uint32_t inValue) {return (inValue & 0x7FFFU) << 16 ; }

//------------------------------------------------------------------------------

//---  Register IFCR: Interrupt Flag Clear register
  #define SPDIFRX_IFCR (* ((volatile uint32_t *) (0x40004000 + 12)))

  // Field PERRCF: Clears the Parity error flag
    const uint32_t SPDIFRX_IFCR_PERRCF = 1U << 2 ;

  // Field OVRCF: Clears the Overrun error flag
    const uint32_t SPDIFRX_IFCR_OVRCF = 1U << 3 ;

  // Field SBDCF: Clears the Synchronization Block Detected flag
    const uint32_t SPDIFRX_IFCR_SBDCF = 1U << 4 ;

  // Field SYNCDCF: Clears the Synchronization Done flag
    const uint32_t SPDIFRX_IFCR_SYNCDCF = 1U << 5 ;

//------------------------------------------------------------------------------

//---  Register DR: Data input register
  #define SPDIFRX_DR (* ((const volatile uint32_t *) (0x40004000 + 16)))

  // Field DR: Parity Error bit
    inline uint32_t SPDIFRX_DR_DR (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

  // Field PE: Parity Error bit
    const uint32_t SPDIFRX_DR_PE = 1U << 24 ;

  // Field V: Validity bit
    const uint32_t SPDIFRX_DR_V = 1U << 25 ;

  // Field U: User bit
    const uint32_t SPDIFRX_DR_U = 1U << 26 ;

  // Field C: Channel Status bit
    const uint32_t SPDIFRX_DR_C = 1U << 27 ;

  // Field PT: Preamble Type
    inline uint32_t SPDIFRX_DR_PT (const uint32_t inValue) {return (inValue & 0x3U) << 28 ; }

//------------------------------------------------------------------------------

//---  Register CSR: Channel Status register
  #define SPDIFRX_CSR (* ((const volatile uint32_t *) (0x40004000 + 20)))

  // Field USR: User data information
    inline uint32_t SPDIFRX_CSR_USR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field CS: Channel A status information
    inline uint32_t SPDIFRX_CSR_CS (const uint32_t inValue) {return (inValue & 0xFFU) << 16 ; }

  // Field SOB: Start Of Block
    const uint32_t SPDIFRX_CSR_SOB = 1U << 24 ;

//------------------------------------------------------------------------------

//---  Register DIR: Debug Information register
  #define SPDIFRX_DIR (* ((const volatile uint32_t *) (0x40004000 + 24)))

  // Field THI: Threshold HIGH
    inline uint32_t SPDIFRX_DIR_THI (const uint32_t inValue) {return (inValue & 0x1FFFU) << 0 ; }

  // Field TLO: Threshold LOW
    inline uint32_t SPDIFRX_DIR_TLO (const uint32_t inValue) {return (inValue & 0x1FFFU) << 16 ; }

//------------------------------------------------------------------------------
// Peripheral SPI1: Serial peripheral interface
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define SPI1_CR1 (* ((volatile uint32_t *) (0x40013000 + 0)))

  // Field BIDIMODE: Bidirectional data mode enable
    const uint32_t SPI1_CR1_BIDIMODE = 1U << 15 ;

  // Field BIDIOE: Output enable in bidirectional mode
    const uint32_t SPI1_CR1_BIDIOE = 1U << 14 ;

  // Field CRCEN: Hardware CRC calculation enable
    const uint32_t SPI1_CR1_CRCEN = 1U << 13 ;

  // Field CRCNEXT: CRC transfer next
    const uint32_t SPI1_CR1_CRCNEXT = 1U << 12 ;

  // Field CRCL: CRC length
    const uint32_t SPI1_CR1_CRCL = 1U << 11 ;

  // Field RXONLY: Receive only
    const uint32_t SPI1_CR1_RXONLY = 1U << 10 ;

  // Field SSM: Software slave management
    const uint32_t SPI1_CR1_SSM = 1U << 9 ;

  // Field SSI: Internal slave select
    const uint32_t SPI1_CR1_SSI = 1U << 8 ;

  // Field LSBFIRST: Frame format
    const uint32_t SPI1_CR1_LSBFIRST = 1U << 7 ;

  // Field SPE: SPI enable
    const uint32_t SPI1_CR1_SPE = 1U << 6 ;

  // Field BR: Baud rate control
    inline uint32_t SPI1_CR1_BR (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field MSTR: Master selection
    const uint32_t SPI1_CR1_MSTR = 1U << 2 ;

  // Field CPOL: Clock polarity
    const uint32_t SPI1_CR1_CPOL = 1U << 1 ;

  // Field CPHA: Clock phase
    const uint32_t SPI1_CR1_CPHA = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define SPI1_CR2 (* ((volatile uint32_t *) (0x40013000 + 4)))

  // Field RXDMAEN: Rx buffer DMA enable
    const uint32_t SPI1_CR2_RXDMAEN = 1U << 0 ;

  // Field TXDMAEN: Tx buffer DMA enable
    const uint32_t SPI1_CR2_TXDMAEN = 1U << 1 ;

  // Field SSOE: SS output enable
    const uint32_t SPI1_CR2_SSOE = 1U << 2 ;

  // Field NSSP: NSS pulse management
    const uint32_t SPI1_CR2_NSSP = 1U << 3 ;

  // Field FRF: Frame format
    const uint32_t SPI1_CR2_FRF = 1U << 4 ;

  // Field ERRIE: Error interrupt enable
    const uint32_t SPI1_CR2_ERRIE = 1U << 5 ;

  // Field RXNEIE: RX buffer not empty interrupt enable
    const uint32_t SPI1_CR2_RXNEIE = 1U << 6 ;

  // Field TXEIE: Tx buffer empty interrupt enable
    const uint32_t SPI1_CR2_TXEIE = 1U << 7 ;

  // Field DS: Data size
    inline uint32_t SPI1_CR2_DS (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field FRXTH: FIFO reception threshold
    const uint32_t SPI1_CR2_FRXTH = 1U << 12 ;

  // Field LDMA_RX: Last DMA transfer for reception
    const uint32_t SPI1_CR2_LDMA_RX = 1U << 13 ;

  // Field LDMA_TX: Last DMA transfer for transmission
    const uint32_t SPI1_CR2_LDMA_TX = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define SPI1_SR (* ((volatile uint32_t *) (0x40013000 + 8)))

  // Field FRE: Frame format error
    const uint32_t SPI1_SR_FRE = 1U << 8 ;

  // Field BSY: Busy flag
    const uint32_t SPI1_SR_BSY = 1U << 7 ;

  // Field OVR: Overrun flag
    const uint32_t SPI1_SR_OVR = 1U << 6 ;

  // Field MODF: Mode fault
    const uint32_t SPI1_SR_MODF = 1U << 5 ;

  // Field CRCERR: CRC error flag
    const uint32_t SPI1_SR_CRCERR = 1U << 4 ;

  // Field UDR: Underrun flag
    const uint32_t SPI1_SR_UDR = 1U << 3 ;

  // Field CHSIDE: Channel side
    const uint32_t SPI1_SR_CHSIDE = 1U << 2 ;

  // Field TXE: Transmit buffer empty
    const uint32_t SPI1_SR_TXE = 1U << 1 ;

  // Field RXNE: Receive buffer not empty
    const uint32_t SPI1_SR_RXNE = 1U << 0 ;

  // Field FRLVL: FIFO reception level
    inline uint32_t SPI1_SR_FRLVL (const uint32_t inValue) {return (inValue & 0x3U) << 9 ; }

  // Field FTLVL: FIFO Transmission Level
    inline uint32_t SPI1_SR_FTLVL (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

//------------------------------------------------------------------------------

//---  Register DR: data register
  #define SPI1_DR (* ((volatile uint32_t *) (0x40013000 + 12)))

  // Field DR: Data register
    inline uint32_t SPI1_DR_DR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CRCPR: CRC polynomial register
  #define SPI1_CRCPR (* ((volatile uint32_t *) (0x40013000 + 16)))

  // Field CRCPOLY: CRC polynomial register
    inline uint32_t SPI1_CRCPR_CRCPOLY (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RXCRCR: RX CRC register
  #define SPI1_RXCRCR (* ((const volatile uint32_t *) (0x40013000 + 20)))

  // Field RxCRC: Rx CRC register
    inline uint32_t SPI1_RXCRCR_RxCRC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TXCRCR: TX CRC register
  #define SPI1_TXCRCR (* ((const volatile uint32_t *) (0x40013000 + 24)))

  // Field TxCRC: Tx CRC register
    inline uint32_t SPI1_TXCRCR_TxCRC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register I2SCFGR: I2S configuration register
  #define SPI1_I2SCFGR (* ((volatile uint32_t *) (0x40013000 + 28)))

  // Field I2SMOD: I2S mode selection
    const uint32_t SPI1_I2SCFGR_I2SMOD = 1U << 11 ;

  // Field I2SE: I2S Enable
    const uint32_t SPI1_I2SCFGR_I2SE = 1U << 10 ;

  // Field I2SCFG: I2S configuration mode
    inline uint32_t SPI1_I2SCFGR_I2SCFG (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PCMSYNC: PCM frame synchronization
    const uint32_t SPI1_I2SCFGR_PCMSYNC = 1U << 7 ;

  // Field I2SSTD: I2S standard selection
    inline uint32_t SPI1_I2SCFGR_I2SSTD (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field CKPOL: Steady state clock polarity
    const uint32_t SPI1_I2SCFGR_CKPOL = 1U << 3 ;

  // Field DATLEN: Data length to be transferred
    inline uint32_t SPI1_I2SCFGR_DATLEN (const uint32_t inValue) {return (inValue & 0x3U) << 1 ; }

  // Field CHLEN: Channel length (number of bits per audio channel)
    const uint32_t SPI1_I2SCFGR_CHLEN = 1U << 0 ;

  // Field ASTRTEN: Asynchronous start enable
    const uint32_t SPI1_I2SCFGR_ASTRTEN = 1U << 12 ;

//------------------------------------------------------------------------------

//---  Register I2SPR: I2S prescaler register
  #define SPI1_I2SPR (* ((volatile uint32_t *) (0x40013000 + 32)))

  // Field MCKOE: Master clock output enable
    const uint32_t SPI1_I2SPR_MCKOE = 1U << 9 ;

  // Field ODD: Odd factor for the prescaler
    const uint32_t SPI1_I2SPR_ODD = 1U << 8 ;

  // Field I2SDIV: I2S Linear prescaler
    inline uint32_t SPI1_I2SPR_I2SDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral SPI2
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define SPI2_CR1 (* ((volatile uint32_t *) (0x40003800 + 0)))

  // Field BIDIMODE: Bidirectional data mode enable
    const uint32_t SPI2_CR1_BIDIMODE = 1U << 15 ;

  // Field BIDIOE: Output enable in bidirectional mode
    const uint32_t SPI2_CR1_BIDIOE = 1U << 14 ;

  // Field CRCEN: Hardware CRC calculation enable
    const uint32_t SPI2_CR1_CRCEN = 1U << 13 ;

  // Field CRCNEXT: CRC transfer next
    const uint32_t SPI2_CR1_CRCNEXT = 1U << 12 ;

  // Field CRCL: CRC length
    const uint32_t SPI2_CR1_CRCL = 1U << 11 ;

  // Field RXONLY: Receive only
    const uint32_t SPI2_CR1_RXONLY = 1U << 10 ;

  // Field SSM: Software slave management
    const uint32_t SPI2_CR1_SSM = 1U << 9 ;

  // Field SSI: Internal slave select
    const uint32_t SPI2_CR1_SSI = 1U << 8 ;

  // Field LSBFIRST: Frame format
    const uint32_t SPI2_CR1_LSBFIRST = 1U << 7 ;

  // Field SPE: SPI enable
    const uint32_t SPI2_CR1_SPE = 1U << 6 ;

  // Field BR: Baud rate control
    inline uint32_t SPI2_CR1_BR (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field MSTR: Master selection
    const uint32_t SPI2_CR1_MSTR = 1U << 2 ;

  // Field CPOL: Clock polarity
    const uint32_t SPI2_CR1_CPOL = 1U << 1 ;

  // Field CPHA: Clock phase
    const uint32_t SPI2_CR1_CPHA = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define SPI2_CR2 (* ((volatile uint32_t *) (0x40003800 + 4)))

  // Field RXDMAEN: Rx buffer DMA enable
    const uint32_t SPI2_CR2_RXDMAEN = 1U << 0 ;

  // Field TXDMAEN: Tx buffer DMA enable
    const uint32_t SPI2_CR2_TXDMAEN = 1U << 1 ;

  // Field SSOE: SS output enable
    const uint32_t SPI2_CR2_SSOE = 1U << 2 ;

  // Field NSSP: NSS pulse management
    const uint32_t SPI2_CR2_NSSP = 1U << 3 ;

  // Field FRF: Frame format
    const uint32_t SPI2_CR2_FRF = 1U << 4 ;

  // Field ERRIE: Error interrupt enable
    const uint32_t SPI2_CR2_ERRIE = 1U << 5 ;

  // Field RXNEIE: RX buffer not empty interrupt enable
    const uint32_t SPI2_CR2_RXNEIE = 1U << 6 ;

  // Field TXEIE: Tx buffer empty interrupt enable
    const uint32_t SPI2_CR2_TXEIE = 1U << 7 ;

  // Field DS: Data size
    inline uint32_t SPI2_CR2_DS (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field FRXTH: FIFO reception threshold
    const uint32_t SPI2_CR2_FRXTH = 1U << 12 ;

  // Field LDMA_RX: Last DMA transfer for reception
    const uint32_t SPI2_CR2_LDMA_RX = 1U << 13 ;

  // Field LDMA_TX: Last DMA transfer for transmission
    const uint32_t SPI2_CR2_LDMA_TX = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define SPI2_SR (* ((volatile uint32_t *) (0x40003800 + 8)))

  // Field FRE: Frame format error
    const uint32_t SPI2_SR_FRE = 1U << 8 ;

  // Field BSY: Busy flag
    const uint32_t SPI2_SR_BSY = 1U << 7 ;

  // Field OVR: Overrun flag
    const uint32_t SPI2_SR_OVR = 1U << 6 ;

  // Field MODF: Mode fault
    const uint32_t SPI2_SR_MODF = 1U << 5 ;

  // Field CRCERR: CRC error flag
    const uint32_t SPI2_SR_CRCERR = 1U << 4 ;

  // Field UDR: Underrun flag
    const uint32_t SPI2_SR_UDR = 1U << 3 ;

  // Field CHSIDE: Channel side
    const uint32_t SPI2_SR_CHSIDE = 1U << 2 ;

  // Field TXE: Transmit buffer empty
    const uint32_t SPI2_SR_TXE = 1U << 1 ;

  // Field RXNE: Receive buffer not empty
    const uint32_t SPI2_SR_RXNE = 1U << 0 ;

  // Field FRLVL: FIFO reception level
    inline uint32_t SPI2_SR_FRLVL (const uint32_t inValue) {return (inValue & 0x3U) << 9 ; }

  // Field FTLVL: FIFO Transmission Level
    inline uint32_t SPI2_SR_FTLVL (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

//------------------------------------------------------------------------------

//---  Register DR: data register
  #define SPI2_DR (* ((volatile uint32_t *) (0x40003800 + 12)))

  // Field DR: Data register
    inline uint32_t SPI2_DR_DR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CRCPR: CRC polynomial register
  #define SPI2_CRCPR (* ((volatile uint32_t *) (0x40003800 + 16)))

  // Field CRCPOLY: CRC polynomial register
    inline uint32_t SPI2_CRCPR_CRCPOLY (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RXCRCR: RX CRC register
  #define SPI2_RXCRCR (* ((const volatile uint32_t *) (0x40003800 + 20)))

  // Field RxCRC: Rx CRC register
    inline uint32_t SPI2_RXCRCR_RxCRC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TXCRCR: TX CRC register
  #define SPI2_TXCRCR (* ((const volatile uint32_t *) (0x40003800 + 24)))

  // Field TxCRC: Tx CRC register
    inline uint32_t SPI2_TXCRCR_TxCRC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register I2SCFGR: I2S configuration register
  #define SPI2_I2SCFGR (* ((volatile uint32_t *) (0x40003800 + 28)))

  // Field I2SMOD: I2S mode selection
    const uint32_t SPI2_I2SCFGR_I2SMOD = 1U << 11 ;

  // Field I2SE: I2S Enable
    const uint32_t SPI2_I2SCFGR_I2SE = 1U << 10 ;

  // Field I2SCFG: I2S configuration mode
    inline uint32_t SPI2_I2SCFGR_I2SCFG (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PCMSYNC: PCM frame synchronization
    const uint32_t SPI2_I2SCFGR_PCMSYNC = 1U << 7 ;

  // Field I2SSTD: I2S standard selection
    inline uint32_t SPI2_I2SCFGR_I2SSTD (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field CKPOL: Steady state clock polarity
    const uint32_t SPI2_I2SCFGR_CKPOL = 1U << 3 ;

  // Field DATLEN: Data length to be transferred
    inline uint32_t SPI2_I2SCFGR_DATLEN (const uint32_t inValue) {return (inValue & 0x3U) << 1 ; }

  // Field CHLEN: Channel length (number of bits per audio channel)
    const uint32_t SPI2_I2SCFGR_CHLEN = 1U << 0 ;

  // Field ASTRTEN: Asynchronous start enable
    const uint32_t SPI2_I2SCFGR_ASTRTEN = 1U << 12 ;

//------------------------------------------------------------------------------

//---  Register I2SPR: I2S prescaler register
  #define SPI2_I2SPR (* ((volatile uint32_t *) (0x40003800 + 32)))

  // Field MCKOE: Master clock output enable
    const uint32_t SPI2_I2SPR_MCKOE = 1U << 9 ;

  // Field ODD: Odd factor for the prescaler
    const uint32_t SPI2_I2SPR_ODD = 1U << 8 ;

  // Field I2SDIV: I2S Linear prescaler
    inline uint32_t SPI2_I2SPR_I2SDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral SPI3
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define SPI3_CR1 (* ((volatile uint32_t *) (0x40003C00 + 0)))

  // Field BIDIMODE: Bidirectional data mode enable
    const uint32_t SPI3_CR1_BIDIMODE = 1U << 15 ;

  // Field BIDIOE: Output enable in bidirectional mode
    const uint32_t SPI3_CR1_BIDIOE = 1U << 14 ;

  // Field CRCEN: Hardware CRC calculation enable
    const uint32_t SPI3_CR1_CRCEN = 1U << 13 ;

  // Field CRCNEXT: CRC transfer next
    const uint32_t SPI3_CR1_CRCNEXT = 1U << 12 ;

  // Field CRCL: CRC length
    const uint32_t SPI3_CR1_CRCL = 1U << 11 ;

  // Field RXONLY: Receive only
    const uint32_t SPI3_CR1_RXONLY = 1U << 10 ;

  // Field SSM: Software slave management
    const uint32_t SPI3_CR1_SSM = 1U << 9 ;

  // Field SSI: Internal slave select
    const uint32_t SPI3_CR1_SSI = 1U << 8 ;

  // Field LSBFIRST: Frame format
    const uint32_t SPI3_CR1_LSBFIRST = 1U << 7 ;

  // Field SPE: SPI enable
    const uint32_t SPI3_CR1_SPE = 1U << 6 ;

  // Field BR: Baud rate control
    inline uint32_t SPI3_CR1_BR (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field MSTR: Master selection
    const uint32_t SPI3_CR1_MSTR = 1U << 2 ;

  // Field CPOL: Clock polarity
    const uint32_t SPI3_CR1_CPOL = 1U << 1 ;

  // Field CPHA: Clock phase
    const uint32_t SPI3_CR1_CPHA = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define SPI3_CR2 (* ((volatile uint32_t *) (0x40003C00 + 4)))

  // Field RXDMAEN: Rx buffer DMA enable
    const uint32_t SPI3_CR2_RXDMAEN = 1U << 0 ;

  // Field TXDMAEN: Tx buffer DMA enable
    const uint32_t SPI3_CR2_TXDMAEN = 1U << 1 ;

  // Field SSOE: SS output enable
    const uint32_t SPI3_CR2_SSOE = 1U << 2 ;

  // Field NSSP: NSS pulse management
    const uint32_t SPI3_CR2_NSSP = 1U << 3 ;

  // Field FRF: Frame format
    const uint32_t SPI3_CR2_FRF = 1U << 4 ;

  // Field ERRIE: Error interrupt enable
    const uint32_t SPI3_CR2_ERRIE = 1U << 5 ;

  // Field RXNEIE: RX buffer not empty interrupt enable
    const uint32_t SPI3_CR2_RXNEIE = 1U << 6 ;

  // Field TXEIE: Tx buffer empty interrupt enable
    const uint32_t SPI3_CR2_TXEIE = 1U << 7 ;

  // Field DS: Data size
    inline uint32_t SPI3_CR2_DS (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field FRXTH: FIFO reception threshold
    const uint32_t SPI3_CR2_FRXTH = 1U << 12 ;

  // Field LDMA_RX: Last DMA transfer for reception
    const uint32_t SPI3_CR2_LDMA_RX = 1U << 13 ;

  // Field LDMA_TX: Last DMA transfer for transmission
    const uint32_t SPI3_CR2_LDMA_TX = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define SPI3_SR (* ((volatile uint32_t *) (0x40003C00 + 8)))

  // Field FRE: Frame format error
    const uint32_t SPI3_SR_FRE = 1U << 8 ;

  // Field BSY: Busy flag
    const uint32_t SPI3_SR_BSY = 1U << 7 ;

  // Field OVR: Overrun flag
    const uint32_t SPI3_SR_OVR = 1U << 6 ;

  // Field MODF: Mode fault
    const uint32_t SPI3_SR_MODF = 1U << 5 ;

  // Field CRCERR: CRC error flag
    const uint32_t SPI3_SR_CRCERR = 1U << 4 ;

  // Field UDR: Underrun flag
    const uint32_t SPI3_SR_UDR = 1U << 3 ;

  // Field CHSIDE: Channel side
    const uint32_t SPI3_SR_CHSIDE = 1U << 2 ;

  // Field TXE: Transmit buffer empty
    const uint32_t SPI3_SR_TXE = 1U << 1 ;

  // Field RXNE: Receive buffer not empty
    const uint32_t SPI3_SR_RXNE = 1U << 0 ;

  // Field FRLVL: FIFO reception level
    inline uint32_t SPI3_SR_FRLVL (const uint32_t inValue) {return (inValue & 0x3U) << 9 ; }

  // Field FTLVL: FIFO Transmission Level
    inline uint32_t SPI3_SR_FTLVL (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

//------------------------------------------------------------------------------

//---  Register DR: data register
  #define SPI3_DR (* ((volatile uint32_t *) (0x40003C00 + 12)))

  // Field DR: Data register
    inline uint32_t SPI3_DR_DR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CRCPR: CRC polynomial register
  #define SPI3_CRCPR (* ((volatile uint32_t *) (0x40003C00 + 16)))

  // Field CRCPOLY: CRC polynomial register
    inline uint32_t SPI3_CRCPR_CRCPOLY (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RXCRCR: RX CRC register
  #define SPI3_RXCRCR (* ((const volatile uint32_t *) (0x40003C00 + 20)))

  // Field RxCRC: Rx CRC register
    inline uint32_t SPI3_RXCRCR_RxCRC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TXCRCR: TX CRC register
  #define SPI3_TXCRCR (* ((const volatile uint32_t *) (0x40003C00 + 24)))

  // Field TxCRC: Tx CRC register
    inline uint32_t SPI3_TXCRCR_TxCRC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register I2SCFGR: I2S configuration register
  #define SPI3_I2SCFGR (* ((volatile uint32_t *) (0x40003C00 + 28)))

  // Field I2SMOD: I2S mode selection
    const uint32_t SPI3_I2SCFGR_I2SMOD = 1U << 11 ;

  // Field I2SE: I2S Enable
    const uint32_t SPI3_I2SCFGR_I2SE = 1U << 10 ;

  // Field I2SCFG: I2S configuration mode
    inline uint32_t SPI3_I2SCFGR_I2SCFG (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PCMSYNC: PCM frame synchronization
    const uint32_t SPI3_I2SCFGR_PCMSYNC = 1U << 7 ;

  // Field I2SSTD: I2S standard selection
    inline uint32_t SPI3_I2SCFGR_I2SSTD (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field CKPOL: Steady state clock polarity
    const uint32_t SPI3_I2SCFGR_CKPOL = 1U << 3 ;

  // Field DATLEN: Data length to be transferred
    inline uint32_t SPI3_I2SCFGR_DATLEN (const uint32_t inValue) {return (inValue & 0x3U) << 1 ; }

  // Field CHLEN: Channel length (number of bits per audio channel)
    const uint32_t SPI3_I2SCFGR_CHLEN = 1U << 0 ;

  // Field ASTRTEN: Asynchronous start enable
    const uint32_t SPI3_I2SCFGR_ASTRTEN = 1U << 12 ;

//------------------------------------------------------------------------------

//---  Register I2SPR: I2S prescaler register
  #define SPI3_I2SPR (* ((volatile uint32_t *) (0x40003C00 + 32)))

  // Field MCKOE: Master clock output enable
    const uint32_t SPI3_I2SPR_MCKOE = 1U << 9 ;

  // Field ODD: Odd factor for the prescaler
    const uint32_t SPI3_I2SPR_ODD = 1U << 8 ;

  // Field I2SDIV: I2S Linear prescaler
    inline uint32_t SPI3_I2SPR_I2SDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral SPI4
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define SPI4_CR1 (* ((volatile uint32_t *) (0x40013400 + 0)))

  // Field BIDIMODE: Bidirectional data mode enable
    const uint32_t SPI4_CR1_BIDIMODE = 1U << 15 ;

  // Field BIDIOE: Output enable in bidirectional mode
    const uint32_t SPI4_CR1_BIDIOE = 1U << 14 ;

  // Field CRCEN: Hardware CRC calculation enable
    const uint32_t SPI4_CR1_CRCEN = 1U << 13 ;

  // Field CRCNEXT: CRC transfer next
    const uint32_t SPI4_CR1_CRCNEXT = 1U << 12 ;

  // Field CRCL: CRC length
    const uint32_t SPI4_CR1_CRCL = 1U << 11 ;

  // Field RXONLY: Receive only
    const uint32_t SPI4_CR1_RXONLY = 1U << 10 ;

  // Field SSM: Software slave management
    const uint32_t SPI4_CR1_SSM = 1U << 9 ;

  // Field SSI: Internal slave select
    const uint32_t SPI4_CR1_SSI = 1U << 8 ;

  // Field LSBFIRST: Frame format
    const uint32_t SPI4_CR1_LSBFIRST = 1U << 7 ;

  // Field SPE: SPI enable
    const uint32_t SPI4_CR1_SPE = 1U << 6 ;

  // Field BR: Baud rate control
    inline uint32_t SPI4_CR1_BR (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field MSTR: Master selection
    const uint32_t SPI4_CR1_MSTR = 1U << 2 ;

  // Field CPOL: Clock polarity
    const uint32_t SPI4_CR1_CPOL = 1U << 1 ;

  // Field CPHA: Clock phase
    const uint32_t SPI4_CR1_CPHA = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define SPI4_CR2 (* ((volatile uint32_t *) (0x40013400 + 4)))

  // Field RXDMAEN: Rx buffer DMA enable
    const uint32_t SPI4_CR2_RXDMAEN = 1U << 0 ;

  // Field TXDMAEN: Tx buffer DMA enable
    const uint32_t SPI4_CR2_TXDMAEN = 1U << 1 ;

  // Field SSOE: SS output enable
    const uint32_t SPI4_CR2_SSOE = 1U << 2 ;

  // Field NSSP: NSS pulse management
    const uint32_t SPI4_CR2_NSSP = 1U << 3 ;

  // Field FRF: Frame format
    const uint32_t SPI4_CR2_FRF = 1U << 4 ;

  // Field ERRIE: Error interrupt enable
    const uint32_t SPI4_CR2_ERRIE = 1U << 5 ;

  // Field RXNEIE: RX buffer not empty interrupt enable
    const uint32_t SPI4_CR2_RXNEIE = 1U << 6 ;

  // Field TXEIE: Tx buffer empty interrupt enable
    const uint32_t SPI4_CR2_TXEIE = 1U << 7 ;

  // Field DS: Data size
    inline uint32_t SPI4_CR2_DS (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field FRXTH: FIFO reception threshold
    const uint32_t SPI4_CR2_FRXTH = 1U << 12 ;

  // Field LDMA_RX: Last DMA transfer for reception
    const uint32_t SPI4_CR2_LDMA_RX = 1U << 13 ;

  // Field LDMA_TX: Last DMA transfer for transmission
    const uint32_t SPI4_CR2_LDMA_TX = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define SPI4_SR (* ((volatile uint32_t *) (0x40013400 + 8)))

  // Field FRE: Frame format error
    const uint32_t SPI4_SR_FRE = 1U << 8 ;

  // Field BSY: Busy flag
    const uint32_t SPI4_SR_BSY = 1U << 7 ;

  // Field OVR: Overrun flag
    const uint32_t SPI4_SR_OVR = 1U << 6 ;

  // Field MODF: Mode fault
    const uint32_t SPI4_SR_MODF = 1U << 5 ;

  // Field CRCERR: CRC error flag
    const uint32_t SPI4_SR_CRCERR = 1U << 4 ;

  // Field UDR: Underrun flag
    const uint32_t SPI4_SR_UDR = 1U << 3 ;

  // Field CHSIDE: Channel side
    const uint32_t SPI4_SR_CHSIDE = 1U << 2 ;

  // Field TXE: Transmit buffer empty
    const uint32_t SPI4_SR_TXE = 1U << 1 ;

  // Field RXNE: Receive buffer not empty
    const uint32_t SPI4_SR_RXNE = 1U << 0 ;

  // Field FRLVL: FIFO reception level
    inline uint32_t SPI4_SR_FRLVL (const uint32_t inValue) {return (inValue & 0x3U) << 9 ; }

  // Field FTLVL: FIFO Transmission Level
    inline uint32_t SPI4_SR_FTLVL (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

//------------------------------------------------------------------------------

//---  Register DR: data register
  #define SPI4_DR (* ((volatile uint32_t *) (0x40013400 + 12)))

  // Field DR: Data register
    inline uint32_t SPI4_DR_DR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CRCPR: CRC polynomial register
  #define SPI4_CRCPR (* ((volatile uint32_t *) (0x40013400 + 16)))

  // Field CRCPOLY: CRC polynomial register
    inline uint32_t SPI4_CRCPR_CRCPOLY (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RXCRCR: RX CRC register
  #define SPI4_RXCRCR (* ((const volatile uint32_t *) (0x40013400 + 20)))

  // Field RxCRC: Rx CRC register
    inline uint32_t SPI4_RXCRCR_RxCRC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TXCRCR: TX CRC register
  #define SPI4_TXCRCR (* ((const volatile uint32_t *) (0x40013400 + 24)))

  // Field TxCRC: Tx CRC register
    inline uint32_t SPI4_TXCRCR_TxCRC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register I2SCFGR: I2S configuration register
  #define SPI4_I2SCFGR (* ((volatile uint32_t *) (0x40013400 + 28)))

  // Field I2SMOD: I2S mode selection
    const uint32_t SPI4_I2SCFGR_I2SMOD = 1U << 11 ;

  // Field I2SE: I2S Enable
    const uint32_t SPI4_I2SCFGR_I2SE = 1U << 10 ;

  // Field I2SCFG: I2S configuration mode
    inline uint32_t SPI4_I2SCFGR_I2SCFG (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PCMSYNC: PCM frame synchronization
    const uint32_t SPI4_I2SCFGR_PCMSYNC = 1U << 7 ;

  // Field I2SSTD: I2S standard selection
    inline uint32_t SPI4_I2SCFGR_I2SSTD (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field CKPOL: Steady state clock polarity
    const uint32_t SPI4_I2SCFGR_CKPOL = 1U << 3 ;

  // Field DATLEN: Data length to be transferred
    inline uint32_t SPI4_I2SCFGR_DATLEN (const uint32_t inValue) {return (inValue & 0x3U) << 1 ; }

  // Field CHLEN: Channel length (number of bits per audio channel)
    const uint32_t SPI4_I2SCFGR_CHLEN = 1U << 0 ;

  // Field ASTRTEN: Asynchronous start enable
    const uint32_t SPI4_I2SCFGR_ASTRTEN = 1U << 12 ;

//------------------------------------------------------------------------------

//---  Register I2SPR: I2S prescaler register
  #define SPI4_I2SPR (* ((volatile uint32_t *) (0x40013400 + 32)))

  // Field MCKOE: Master clock output enable
    const uint32_t SPI4_I2SPR_MCKOE = 1U << 9 ;

  // Field ODD: Odd factor for the prescaler
    const uint32_t SPI4_I2SPR_ODD = 1U << 8 ;

  // Field I2SDIV: I2S Linear prescaler
    inline uint32_t SPI4_I2SPR_I2SDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral SPI5
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define SPI5_CR1 (* ((volatile uint32_t *) (0x40015000 + 0)))

  // Field BIDIMODE: Bidirectional data mode enable
    const uint32_t SPI5_CR1_BIDIMODE = 1U << 15 ;

  // Field BIDIOE: Output enable in bidirectional mode
    const uint32_t SPI5_CR1_BIDIOE = 1U << 14 ;

  // Field CRCEN: Hardware CRC calculation enable
    const uint32_t SPI5_CR1_CRCEN = 1U << 13 ;

  // Field CRCNEXT: CRC transfer next
    const uint32_t SPI5_CR1_CRCNEXT = 1U << 12 ;

  // Field CRCL: CRC length
    const uint32_t SPI5_CR1_CRCL = 1U << 11 ;

  // Field RXONLY: Receive only
    const uint32_t SPI5_CR1_RXONLY = 1U << 10 ;

  // Field SSM: Software slave management
    const uint32_t SPI5_CR1_SSM = 1U << 9 ;

  // Field SSI: Internal slave select
    const uint32_t SPI5_CR1_SSI = 1U << 8 ;

  // Field LSBFIRST: Frame format
    const uint32_t SPI5_CR1_LSBFIRST = 1U << 7 ;

  // Field SPE: SPI enable
    const uint32_t SPI5_CR1_SPE = 1U << 6 ;

  // Field BR: Baud rate control
    inline uint32_t SPI5_CR1_BR (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field MSTR: Master selection
    const uint32_t SPI5_CR1_MSTR = 1U << 2 ;

  // Field CPOL: Clock polarity
    const uint32_t SPI5_CR1_CPOL = 1U << 1 ;

  // Field CPHA: Clock phase
    const uint32_t SPI5_CR1_CPHA = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define SPI5_CR2 (* ((volatile uint32_t *) (0x40015000 + 4)))

  // Field RXDMAEN: Rx buffer DMA enable
    const uint32_t SPI5_CR2_RXDMAEN = 1U << 0 ;

  // Field TXDMAEN: Tx buffer DMA enable
    const uint32_t SPI5_CR2_TXDMAEN = 1U << 1 ;

  // Field SSOE: SS output enable
    const uint32_t SPI5_CR2_SSOE = 1U << 2 ;

  // Field NSSP: NSS pulse management
    const uint32_t SPI5_CR2_NSSP = 1U << 3 ;

  // Field FRF: Frame format
    const uint32_t SPI5_CR2_FRF = 1U << 4 ;

  // Field ERRIE: Error interrupt enable
    const uint32_t SPI5_CR2_ERRIE = 1U << 5 ;

  // Field RXNEIE: RX buffer not empty interrupt enable
    const uint32_t SPI5_CR2_RXNEIE = 1U << 6 ;

  // Field TXEIE: Tx buffer empty interrupt enable
    const uint32_t SPI5_CR2_TXEIE = 1U << 7 ;

  // Field DS: Data size
    inline uint32_t SPI5_CR2_DS (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field FRXTH: FIFO reception threshold
    const uint32_t SPI5_CR2_FRXTH = 1U << 12 ;

  // Field LDMA_RX: Last DMA transfer for reception
    const uint32_t SPI5_CR2_LDMA_RX = 1U << 13 ;

  // Field LDMA_TX: Last DMA transfer for transmission
    const uint32_t SPI5_CR2_LDMA_TX = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define SPI5_SR (* ((volatile uint32_t *) (0x40015000 + 8)))

  // Field FRE: Frame format error
    const uint32_t SPI5_SR_FRE = 1U << 8 ;

  // Field BSY: Busy flag
    const uint32_t SPI5_SR_BSY = 1U << 7 ;

  // Field OVR: Overrun flag
    const uint32_t SPI5_SR_OVR = 1U << 6 ;

  // Field MODF: Mode fault
    const uint32_t SPI5_SR_MODF = 1U << 5 ;

  // Field CRCERR: CRC error flag
    const uint32_t SPI5_SR_CRCERR = 1U << 4 ;

  // Field UDR: Underrun flag
    const uint32_t SPI5_SR_UDR = 1U << 3 ;

  // Field CHSIDE: Channel side
    const uint32_t SPI5_SR_CHSIDE = 1U << 2 ;

  // Field TXE: Transmit buffer empty
    const uint32_t SPI5_SR_TXE = 1U << 1 ;

  // Field RXNE: Receive buffer not empty
    const uint32_t SPI5_SR_RXNE = 1U << 0 ;

  // Field FRLVL: FIFO reception level
    inline uint32_t SPI5_SR_FRLVL (const uint32_t inValue) {return (inValue & 0x3U) << 9 ; }

  // Field FTLVL: FIFO Transmission Level
    inline uint32_t SPI5_SR_FTLVL (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

//------------------------------------------------------------------------------

//---  Register DR: data register
  #define SPI5_DR (* ((volatile uint32_t *) (0x40015000 + 12)))

  // Field DR: Data register
    inline uint32_t SPI5_DR_DR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CRCPR: CRC polynomial register
  #define SPI5_CRCPR (* ((volatile uint32_t *) (0x40015000 + 16)))

  // Field CRCPOLY: CRC polynomial register
    inline uint32_t SPI5_CRCPR_CRCPOLY (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RXCRCR: RX CRC register
  #define SPI5_RXCRCR (* ((const volatile uint32_t *) (0x40015000 + 20)))

  // Field RxCRC: Rx CRC register
    inline uint32_t SPI5_RXCRCR_RxCRC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TXCRCR: TX CRC register
  #define SPI5_TXCRCR (* ((const volatile uint32_t *) (0x40015000 + 24)))

  // Field TxCRC: Tx CRC register
    inline uint32_t SPI5_TXCRCR_TxCRC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register I2SCFGR: I2S configuration register
  #define SPI5_I2SCFGR (* ((volatile uint32_t *) (0x40015000 + 28)))

  // Field I2SMOD: I2S mode selection
    const uint32_t SPI5_I2SCFGR_I2SMOD = 1U << 11 ;

  // Field I2SE: I2S Enable
    const uint32_t SPI5_I2SCFGR_I2SE = 1U << 10 ;

  // Field I2SCFG: I2S configuration mode
    inline uint32_t SPI5_I2SCFGR_I2SCFG (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PCMSYNC: PCM frame synchronization
    const uint32_t SPI5_I2SCFGR_PCMSYNC = 1U << 7 ;

  // Field I2SSTD: I2S standard selection
    inline uint32_t SPI5_I2SCFGR_I2SSTD (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field CKPOL: Steady state clock polarity
    const uint32_t SPI5_I2SCFGR_CKPOL = 1U << 3 ;

  // Field DATLEN: Data length to be transferred
    inline uint32_t SPI5_I2SCFGR_DATLEN (const uint32_t inValue) {return (inValue & 0x3U) << 1 ; }

  // Field CHLEN: Channel length (number of bits per audio channel)
    const uint32_t SPI5_I2SCFGR_CHLEN = 1U << 0 ;

  // Field ASTRTEN: Asynchronous start enable
    const uint32_t SPI5_I2SCFGR_ASTRTEN = 1U << 12 ;

//------------------------------------------------------------------------------

//---  Register I2SPR: I2S prescaler register
  #define SPI5_I2SPR (* ((volatile uint32_t *) (0x40015000 + 32)))

  // Field MCKOE: Master clock output enable
    const uint32_t SPI5_I2SPR_MCKOE = 1U << 9 ;

  // Field ODD: Odd factor for the prescaler
    const uint32_t SPI5_I2SPR_ODD = 1U << 8 ;

  // Field I2SDIV: I2S Linear prescaler
    inline uint32_t SPI5_I2SPR_I2SDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral SPI6
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define SPI6_CR1 (* ((volatile uint32_t *) (0x40015400 + 0)))

  // Field BIDIMODE: Bidirectional data mode enable
    const uint32_t SPI6_CR1_BIDIMODE = 1U << 15 ;

  // Field BIDIOE: Output enable in bidirectional mode
    const uint32_t SPI6_CR1_BIDIOE = 1U << 14 ;

  // Field CRCEN: Hardware CRC calculation enable
    const uint32_t SPI6_CR1_CRCEN = 1U << 13 ;

  // Field CRCNEXT: CRC transfer next
    const uint32_t SPI6_CR1_CRCNEXT = 1U << 12 ;

  // Field CRCL: CRC length
    const uint32_t SPI6_CR1_CRCL = 1U << 11 ;

  // Field RXONLY: Receive only
    const uint32_t SPI6_CR1_RXONLY = 1U << 10 ;

  // Field SSM: Software slave management
    const uint32_t SPI6_CR1_SSM = 1U << 9 ;

  // Field SSI: Internal slave select
    const uint32_t SPI6_CR1_SSI = 1U << 8 ;

  // Field LSBFIRST: Frame format
    const uint32_t SPI6_CR1_LSBFIRST = 1U << 7 ;

  // Field SPE: SPI enable
    const uint32_t SPI6_CR1_SPE = 1U << 6 ;

  // Field BR: Baud rate control
    inline uint32_t SPI6_CR1_BR (const uint32_t inValue) {return (inValue & 0x7U) << 3 ; }

  // Field MSTR: Master selection
    const uint32_t SPI6_CR1_MSTR = 1U << 2 ;

  // Field CPOL: Clock polarity
    const uint32_t SPI6_CR1_CPOL = 1U << 1 ;

  // Field CPHA: Clock phase
    const uint32_t SPI6_CR1_CPHA = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define SPI6_CR2 (* ((volatile uint32_t *) (0x40015400 + 4)))

  // Field RXDMAEN: Rx buffer DMA enable
    const uint32_t SPI6_CR2_RXDMAEN = 1U << 0 ;

  // Field TXDMAEN: Tx buffer DMA enable
    const uint32_t SPI6_CR2_TXDMAEN = 1U << 1 ;

  // Field SSOE: SS output enable
    const uint32_t SPI6_CR2_SSOE = 1U << 2 ;

  // Field NSSP: NSS pulse management
    const uint32_t SPI6_CR2_NSSP = 1U << 3 ;

  // Field FRF: Frame format
    const uint32_t SPI6_CR2_FRF = 1U << 4 ;

  // Field ERRIE: Error interrupt enable
    const uint32_t SPI6_CR2_ERRIE = 1U << 5 ;

  // Field RXNEIE: RX buffer not empty interrupt enable
    const uint32_t SPI6_CR2_RXNEIE = 1U << 6 ;

  // Field TXEIE: Tx buffer empty interrupt enable
    const uint32_t SPI6_CR2_TXEIE = 1U << 7 ;

  // Field DS: Data size
    inline uint32_t SPI6_CR2_DS (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field FRXTH: FIFO reception threshold
    const uint32_t SPI6_CR2_FRXTH = 1U << 12 ;

  // Field LDMA_RX: Last DMA transfer for reception
    const uint32_t SPI6_CR2_LDMA_RX = 1U << 13 ;

  // Field LDMA_TX: Last DMA transfer for transmission
    const uint32_t SPI6_CR2_LDMA_TX = 1U << 14 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define SPI6_SR (* ((volatile uint32_t *) (0x40015400 + 8)))

  // Field FRE: Frame format error
    const uint32_t SPI6_SR_FRE = 1U << 8 ;

  // Field BSY: Busy flag
    const uint32_t SPI6_SR_BSY = 1U << 7 ;

  // Field OVR: Overrun flag
    const uint32_t SPI6_SR_OVR = 1U << 6 ;

  // Field MODF: Mode fault
    const uint32_t SPI6_SR_MODF = 1U << 5 ;

  // Field CRCERR: CRC error flag
    const uint32_t SPI6_SR_CRCERR = 1U << 4 ;

  // Field UDR: Underrun flag
    const uint32_t SPI6_SR_UDR = 1U << 3 ;

  // Field CHSIDE: Channel side
    const uint32_t SPI6_SR_CHSIDE = 1U << 2 ;

  // Field TXE: Transmit buffer empty
    const uint32_t SPI6_SR_TXE = 1U << 1 ;

  // Field RXNE: Receive buffer not empty
    const uint32_t SPI6_SR_RXNE = 1U << 0 ;

  // Field FRLVL: FIFO reception level
    inline uint32_t SPI6_SR_FRLVL (const uint32_t inValue) {return (inValue & 0x3U) << 9 ; }

  // Field FTLVL: FIFO Transmission Level
    inline uint32_t SPI6_SR_FTLVL (const uint32_t inValue) {return (inValue & 0x3U) << 11 ; }

//------------------------------------------------------------------------------

//---  Register DR: data register
  #define SPI6_DR (* ((volatile uint32_t *) (0x40015400 + 12)))

  // Field DR: Data register
    inline uint32_t SPI6_DR_DR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CRCPR: CRC polynomial register
  #define SPI6_CRCPR (* ((volatile uint32_t *) (0x40015400 + 16)))

  // Field CRCPOLY: CRC polynomial register
    inline uint32_t SPI6_CRCPR_CRCPOLY (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RXCRCR: RX CRC register
  #define SPI6_RXCRCR (* ((const volatile uint32_t *) (0x40015400 + 20)))

  // Field RxCRC: Rx CRC register
    inline uint32_t SPI6_RXCRCR_RxCRC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TXCRCR: TX CRC register
  #define SPI6_TXCRCR (* ((const volatile uint32_t *) (0x40015400 + 24)))

  // Field TxCRC: Tx CRC register
    inline uint32_t SPI6_TXCRCR_TxCRC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register I2SCFGR: I2S configuration register
  #define SPI6_I2SCFGR (* ((volatile uint32_t *) (0x40015400 + 28)))

  // Field I2SMOD: I2S mode selection
    const uint32_t SPI6_I2SCFGR_I2SMOD = 1U << 11 ;

  // Field I2SE: I2S Enable
    const uint32_t SPI6_I2SCFGR_I2SE = 1U << 10 ;

  // Field I2SCFG: I2S configuration mode
    inline uint32_t SPI6_I2SCFGR_I2SCFG (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field PCMSYNC: PCM frame synchronization
    const uint32_t SPI6_I2SCFGR_PCMSYNC = 1U << 7 ;

  // Field I2SSTD: I2S standard selection
    inline uint32_t SPI6_I2SCFGR_I2SSTD (const uint32_t inValue) {return (inValue & 0x3U) << 4 ; }

  // Field CKPOL: Steady state clock polarity
    const uint32_t SPI6_I2SCFGR_CKPOL = 1U << 3 ;

  // Field DATLEN: Data length to be transferred
    inline uint32_t SPI6_I2SCFGR_DATLEN (const uint32_t inValue) {return (inValue & 0x3U) << 1 ; }

  // Field CHLEN: Channel length (number of bits per audio channel)
    const uint32_t SPI6_I2SCFGR_CHLEN = 1U << 0 ;

  // Field ASTRTEN: Asynchronous start enable
    const uint32_t SPI6_I2SCFGR_ASTRTEN = 1U << 12 ;

//------------------------------------------------------------------------------

//---  Register I2SPR: I2S prescaler register
  #define SPI6_I2SPR (* ((volatile uint32_t *) (0x40015400 + 32)))

  // Field MCKOE: Master clock output enable
    const uint32_t SPI6_I2SPR_MCKOE = 1U << 9 ;

  // Field ODD: Odd factor for the prescaler
    const uint32_t SPI6_I2SPR_ODD = 1U << 8 ;

  // Field I2SDIV: I2S Linear prescaler
    inline uint32_t SPI6_I2SPR_I2SDIV (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral SYSCFG: System configuration controller
//------------------------------------------------------------------------------

//---  Register MEMRM: memory remap register
  #define SYSCFG_MEMRM (* ((volatile uint32_t *) (0x40013800 + 0)))

  // Field MEM_MODE: Memory mapping selection
    inline uint32_t SYSCFG_MEMRM_MEM_MODE (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

  // Field FB_MODE: Flash bank mode selection
    const uint32_t SYSCFG_MEMRM_FB_MODE = 1U << 8 ;

  // Field SWP_FMC: FMC memory mapping swap
    inline uint32_t SYSCFG_MEMRM_SWP_FMC (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

//------------------------------------------------------------------------------

//---  Register PMC: peripheral mode configuration register
  #define SYSCFG_PMC (* ((volatile uint32_t *) (0x40013800 + 4)))

  // Field MII_RMII_SEL: Ethernet PHY interface selection
    const uint32_t SYSCFG_PMC_MII_RMII_SEL = 1U << 23 ;

  // Field ADC1DC2: ADC1DC2
    const uint32_t SYSCFG_PMC_ADC1DC2 = 1U << 16 ;

  // Field ADC2DC2: ADC2DC2
    const uint32_t SYSCFG_PMC_ADC2DC2 = 1U << 17 ;

  // Field ADC3DC2: ADC3DC2
    const uint32_t SYSCFG_PMC_ADC3DC2 = 1U << 18 ;

//------------------------------------------------------------------------------

//---  Register EXTICR1: external interrupt configuration register 1
  #define SYSCFG_EXTICR1 (* ((volatile uint32_t *) (0x40013800 + 8)))

  // Field EXTI3: EXTI x configuration (x = 0 to 3)
    inline uint32_t SYSCFG_EXTICR1_EXTI3 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field EXTI2: EXTI x configuration (x = 0 to 3)
    inline uint32_t SYSCFG_EXTICR1_EXTI2 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field EXTI1: EXTI x configuration (x = 0 to 3)
    inline uint32_t SYSCFG_EXTICR1_EXTI1 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field EXTI0: EXTI x configuration (x = 0 to 3)
    inline uint32_t SYSCFG_EXTICR1_EXTI0 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register EXTICR2: external interrupt configuration register 2
  #define SYSCFG_EXTICR2 (* ((volatile uint32_t *) (0x40013800 + 12)))

  // Field EXTI7: EXTI x configuration (x = 4 to 7)
    inline uint32_t SYSCFG_EXTICR2_EXTI7 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field EXTI6: EXTI x configuration (x = 4 to 7)
    inline uint32_t SYSCFG_EXTICR2_EXTI6 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field EXTI5: EXTI x configuration (x = 4 to 7)
    inline uint32_t SYSCFG_EXTICR2_EXTI5 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field EXTI4: EXTI x configuration (x = 4 to 7)
    inline uint32_t SYSCFG_EXTICR2_EXTI4 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register EXTICR3: external interrupt configuration register 3
  #define SYSCFG_EXTICR3 (* ((volatile uint32_t *) (0x40013800 + 16)))

  // Field EXTI11: EXTI x configuration (x = 8 to 11)
    inline uint32_t SYSCFG_EXTICR3_EXTI11 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field EXTI10: EXTI10
    inline uint32_t SYSCFG_EXTICR3_EXTI10 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field EXTI9: EXTI x configuration (x = 8 to 11)
    inline uint32_t SYSCFG_EXTICR3_EXTI9 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field EXTI8: EXTI x configuration (x = 8 to 11)
    inline uint32_t SYSCFG_EXTICR3_EXTI8 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register EXTICR4: external interrupt configuration register 4
  #define SYSCFG_EXTICR4 (* ((volatile uint32_t *) (0x40013800 + 20)))

  // Field EXTI15: EXTI x configuration (x = 12 to 15)
    inline uint32_t SYSCFG_EXTICR4_EXTI15 (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field EXTI14: EXTI x configuration (x = 12 to 15)
    inline uint32_t SYSCFG_EXTICR4_EXTI14 (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field EXTI13: EXTI x configuration (x = 12 to 15)
    inline uint32_t SYSCFG_EXTICR4_EXTI13 (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field EXTI12: EXTI x configuration (x = 12 to 15)
    inline uint32_t SYSCFG_EXTICR4_EXTI12 (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CMPCR: Compensation cell control register
  #define SYSCFG_CMPCR (* ((const volatile uint32_t *) (0x40013800 + 32)))

  // Field READY: READY
    const uint32_t SYSCFG_CMPCR_READY = 1U << 8 ;

  // Field CMP_PD: Compensation cell power-down
    const uint32_t SYSCFG_CMPCR_CMP_PD = 1U << 0 ;

//------------------------------------------------------------------------------
// Peripheral SYST: SysTick timer
//------------------------------------------------------------------------------

//---  Register CSR: SysTick control and status register
  #define SYST_CSR (* ((volatile uint32_t *) (0xE000E010 + 0)))

  // Field ENABLE: Counter enable
    const uint32_t SYST_CSR_ENABLE = 1U << 0 ;

  // Field TICKINT: SysTick exception request enable
    const uint32_t SYST_CSR_TICKINT = 1U << 1 ;

  // Field CLKSOURCE: Clock source selection
    const uint32_t SYST_CSR_CLKSOURCE = 1U << 2 ;

  // Field COUNTFLAG: COUNTFLAG
    const uint32_t SYST_CSR_COUNTFLAG = 1U << 16 ;

//------------------------------------------------------------------------------

//---  Register RVR: SysTick reload value register
  #define SYST_RVR (* ((volatile uint32_t *) (0xE000E010 + 4)))

  // Field RELOAD: RELOAD value
    inline uint32_t SYST_RVR_RELOAD (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CVR: SysTick current value register
  #define SYST_CVR (* ((volatile uint32_t *) (0xE000E010 + 8)))

  // Field CURRENT: Current counter value
    inline uint32_t SYST_CVR_CURRENT (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CALIB: SysTick calibration value register
  #define SYST_CALIB (* ((volatile uint32_t *) (0xE000E010 + 12)))

  // Field TENMS: Calibration value
    inline uint32_t SYST_CALIB_TENMS (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

  // Field SKEW: SKEW flag: Indicates whether the TENMS value is exact
    const uint32_t SYST_CALIB_SKEW = 1U << 30 ;

  // Field NOREF: NOREF flag. Reads as zero
    const uint32_t SYST_CALIB_NOREF = 1U << 31 ;

//------------------------------------------------------------------------------
// Peripheral TIM1: Advanced-timers
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM1_CR1 (* ((volatile uint32_t *) (0x40010000 + 0)))

  // Field CKD: Clock division
    inline uint32_t TIM1_CR1_CKD (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM1_CR1_ARPE = 1U << 7 ;

  // Field CMS: Center-aligned mode selection
    inline uint32_t TIM1_CR1_CMS (const uint32_t inValue) {return (inValue & 0x3U) << 5 ; }

  // Field DIR: Direction
    const uint32_t TIM1_CR1_DIR = 1U << 4 ;

  // Field OPM: One-pulse mode
    const uint32_t TIM1_CR1_OPM = 1U << 3 ;

  // Field URS: Update request source
    const uint32_t TIM1_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM1_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM1_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define TIM1_CR2 (* ((volatile uint32_t *) (0x40010000 + 4)))

  // Field OIS4: Output Idle state 4
    const uint32_t TIM1_CR2_OIS4 = 1U << 14 ;

  // Field OIS3N: Output Idle state 3
    const uint32_t TIM1_CR2_OIS3N = 1U << 13 ;

  // Field OIS3: Output Idle state 3
    const uint32_t TIM1_CR2_OIS3 = 1U << 12 ;

  // Field OIS2N: Output Idle state 2
    const uint32_t TIM1_CR2_OIS2N = 1U << 11 ;

  // Field OIS2: Output Idle state 2
    const uint32_t TIM1_CR2_OIS2 = 1U << 10 ;

  // Field OIS1N: Output Idle state 1
    const uint32_t TIM1_CR2_OIS1N = 1U << 9 ;

  // Field OIS1: Output Idle state 1
    const uint32_t TIM1_CR2_OIS1 = 1U << 8 ;

  // Field TI1S: TI1 selection
    const uint32_t TIM1_CR2_TI1S = 1U << 7 ;

  // Field MMS: Master mode selection
    inline uint32_t TIM1_CR2_MMS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field CCDS: Capture/compare DMA selection
    const uint32_t TIM1_CR2_CCDS = 1U << 3 ;

  // Field CCUS: Capture/compare control update selection
    const uint32_t TIM1_CR2_CCUS = 1U << 2 ;

  // Field CCPC: Capture/compare preloaded control
    const uint32_t TIM1_CR2_CCPC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SMCR: slave mode control register
  #define TIM1_SMCR (* ((volatile uint32_t *) (0x40010000 + 8)))

  // Field ETP: External trigger polarity
    const uint32_t TIM1_SMCR_ETP = 1U << 15 ;

  // Field ECE: External clock enable
    const uint32_t TIM1_SMCR_ECE = 1U << 14 ;

  // Field ETPS: External trigger prescaler
    inline uint32_t TIM1_SMCR_ETPS (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field ETF: External trigger filter
    inline uint32_t TIM1_SMCR_ETF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field MSM: Master/Slave mode
    const uint32_t TIM1_SMCR_MSM = 1U << 7 ;

  // Field TS: Trigger selection
    inline uint32_t TIM1_SMCR_TS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SMS: Slave mode selection
    inline uint32_t TIM1_SMCR_SMS (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM1_DIER (* ((volatile uint32_t *) (0x40010000 + 12)))

  // Field TDE: Trigger DMA request enable
    const uint32_t TIM1_DIER_TDE = 1U << 14 ;

  // Field COMDE: COM DMA request enable
    const uint32_t TIM1_DIER_COMDE = 1U << 13 ;

  // Field CC4DE: Capture/Compare 4 DMA request enable
    const uint32_t TIM1_DIER_CC4DE = 1U << 12 ;

  // Field CC3DE: Capture/Compare 3 DMA request enable
    const uint32_t TIM1_DIER_CC3DE = 1U << 11 ;

  // Field CC2DE: Capture/Compare 2 DMA request enable
    const uint32_t TIM1_DIER_CC2DE = 1U << 10 ;

  // Field CC1DE: Capture/Compare 1 DMA request enable
    const uint32_t TIM1_DIER_CC1DE = 1U << 9 ;

  // Field UDE: Update DMA request enable
    const uint32_t TIM1_DIER_UDE = 1U << 8 ;

  // Field TIE: Trigger interrupt enable
    const uint32_t TIM1_DIER_TIE = 1U << 6 ;

  // Field CC4IE: Capture/Compare 4 interrupt enable
    const uint32_t TIM1_DIER_CC4IE = 1U << 4 ;

  // Field CC3IE: Capture/Compare 3 interrupt enable
    const uint32_t TIM1_DIER_CC3IE = 1U << 3 ;

  // Field CC2IE: Capture/Compare 2 interrupt enable
    const uint32_t TIM1_DIER_CC2IE = 1U << 2 ;

  // Field CC1IE: Capture/Compare 1 interrupt enable
    const uint32_t TIM1_DIER_CC1IE = 1U << 1 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM1_DIER_UIE = 1U << 0 ;

  // Field BIE: Break interrupt enable
    const uint32_t TIM1_DIER_BIE = 1U << 7 ;

  // Field COMIE: COM interrupt enable
    const uint32_t TIM1_DIER_COMIE = 1U << 5 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM1_SR (* ((volatile uint32_t *) (0x40010000 + 16)))

  // Field CC4OF: Capture/Compare 4 overcapture flag
    const uint32_t TIM1_SR_CC4OF = 1U << 12 ;

  // Field CC3OF: Capture/Compare 3 overcapture flag
    const uint32_t TIM1_SR_CC3OF = 1U << 11 ;

  // Field CC2OF: Capture/compare 2 overcapture flag
    const uint32_t TIM1_SR_CC2OF = 1U << 10 ;

  // Field CC1OF: Capture/Compare 1 overcapture flag
    const uint32_t TIM1_SR_CC1OF = 1U << 9 ;

  // Field BIF: Break interrupt flag
    const uint32_t TIM1_SR_BIF = 1U << 7 ;

  // Field TIF: Trigger interrupt flag
    const uint32_t TIM1_SR_TIF = 1U << 6 ;

  // Field COMIF: COM interrupt flag
    const uint32_t TIM1_SR_COMIF = 1U << 5 ;

  // Field CC4IF: Capture/Compare 4 interrupt flag
    const uint32_t TIM1_SR_CC4IF = 1U << 4 ;

  // Field CC3IF: Capture/Compare 3 interrupt flag
    const uint32_t TIM1_SR_CC3IF = 1U << 3 ;

  // Field CC2IF: Capture/Compare 2 interrupt flag
    const uint32_t TIM1_SR_CC2IF = 1U << 2 ;

  // Field CC1IF: Capture/compare 1 interrupt flag
    const uint32_t TIM1_SR_CC1IF = 1U << 1 ;

  // Field UIF: Update interrupt flag
    const uint32_t TIM1_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM1_EGR (* ((volatile uint32_t *) (0x40010000 + 20)))

  // Field BG: Break generation
    const uint32_t TIM1_EGR_BG = 1U << 7 ;

  // Field TG: Trigger generation
    const uint32_t TIM1_EGR_TG = 1U << 6 ;

  // Field COMG: Capture/Compare control update generation
    const uint32_t TIM1_EGR_COMG = 1U << 5 ;

  // Field CC4G: Capture/compare 4 generation
    const uint32_t TIM1_EGR_CC4G = 1U << 4 ;

  // Field CC3G: Capture/compare 3 generation
    const uint32_t TIM1_EGR_CC3G = 1U << 3 ;

  // Field CC2G: Capture/compare 2 generation
    const uint32_t TIM1_EGR_CC2G = 1U << 2 ;

  // Field CC1G: Capture/compare 1 generation
    const uint32_t TIM1_EGR_CC1G = 1U << 1 ;

  // Field UG: Update generation
    const uint32_t TIM1_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  #define TIM1_CCMR1_Output (* ((volatile uint32_t *) (0x40010000 + 24)))

  // Field OC2CE: Output Compare 2 clear enable
    const uint32_t TIM1_CCMR1_Output_OC2CE = 1U << 15 ;

  // Field OC2M: Output Compare 2 mode
    inline uint32_t TIM1_CCMR1_Output_OC2M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC2PE: Output Compare 2 preload enable
    const uint32_t TIM1_CCMR1_Output_OC2PE = 1U << 11 ;

  // Field OC2FE: Output Compare 2 fast enable
    const uint32_t TIM1_CCMR1_Output_OC2FE = 1U << 10 ;

  // Field CC2S: Capture/Compare 2 selection
    inline uint32_t TIM1_CCMR1_Output_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC1CE: Output Compare 1 clear enable
    const uint32_t TIM1_CCMR1_Output_OC1CE = 1U << 7 ;

  // Field OC1M: Output Compare 1 mode
    inline uint32_t TIM1_CCMR1_Output_OC1M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC1PE: Output Compare 1 preload enable
    const uint32_t TIM1_CCMR1_Output_OC1PE = 1U << 3 ;

  // Field OC1FE: Output Compare 1 fast enable
    const uint32_t TIM1_CCMR1_Output_OC1FE = 1U << 2 ;

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM1_CCMR1_Output_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  #define TIM1_CCMR1_Input (* ((volatile uint32_t *) (0x40010000 + 24)))

  // Field IC2F: Input capture 2 filter
    inline uint32_t TIM1_CCMR1_Input_IC2F (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field IC2PCS: Input capture 2 prescaler
    inline uint32_t TIM1_CCMR1_Input_IC2PCS (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC2S: Capture/Compare 2 selection
    inline uint32_t TIM1_CCMR1_Input_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC1F: Input capture 1 filter
    inline uint32_t TIM1_CCMR1_Input_IC1F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ICPCS: Input capture 1 prescaler
    inline uint32_t TIM1_CCMR1_Input_ICPCS (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM1_CCMR1_Input_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR2_Output: capture/compare mode register 2 (output mode)
  #define TIM1_CCMR2_Output (* ((volatile uint32_t *) (0x40010000 + 28)))

  // Field OC4CE: Output compare 4 clear enable
    const uint32_t TIM1_CCMR2_Output_OC4CE = 1U << 15 ;

  // Field OC4M: Output compare 4 mode
    inline uint32_t TIM1_CCMR2_Output_OC4M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC4PE: Output compare 4 preload enable
    const uint32_t TIM1_CCMR2_Output_OC4PE = 1U << 11 ;

  // Field OC4FE: Output compare 4 fast enable
    const uint32_t TIM1_CCMR2_Output_OC4FE = 1U << 10 ;

  // Field CC4S: Capture/Compare 4 selection
    inline uint32_t TIM1_CCMR2_Output_CC4S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC3CE: Output compare 3 clear enable
    const uint32_t TIM1_CCMR2_Output_OC3CE = 1U << 7 ;

  // Field OC3M: Output compare 3 mode
    inline uint32_t TIM1_CCMR2_Output_OC3M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC3PE: Output compare 3 preload enable
    const uint32_t TIM1_CCMR2_Output_OC3PE = 1U << 3 ;

  // Field OC3FE: Output compare 3 fast enable
    const uint32_t TIM1_CCMR2_Output_OC3FE = 1U << 2 ;

  // Field CC3S: Capture/Compare 3 selection
    inline uint32_t TIM1_CCMR2_Output_CC3S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR2_Input: capture/compare mode register 2 (input mode)
  #define TIM1_CCMR2_Input (* ((volatile uint32_t *) (0x40010000 + 28)))

  // Field IC4F: Input capture 4 filter
    inline uint32_t TIM1_CCMR2_Input_IC4F (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field IC4PSC: Input capture 4 prescaler
    inline uint32_t TIM1_CCMR2_Input_IC4PSC (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC4S: Capture/Compare 4 selection
    inline uint32_t TIM1_CCMR2_Input_CC4S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC3F: Input capture 3 filter
    inline uint32_t TIM1_CCMR2_Input_IC3F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field IC3PSC: Input capture 3 prescaler
    inline uint32_t TIM1_CCMR2_Input_IC3PSC (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC3S: Capture/compare 3 selection
    inline uint32_t TIM1_CCMR2_Input_CC3S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCER: capture/compare enable register
  #define TIM1_CCER (* ((volatile uint32_t *) (0x40010000 + 32)))

  // Field CC4P: Capture/Compare 3 output Polarity
    const uint32_t TIM1_CCER_CC4P = 1U << 13 ;

  // Field CC4E: Capture/Compare 4 output enable
    const uint32_t TIM1_CCER_CC4E = 1U << 12 ;

  // Field CC3NP: Capture/Compare 3 output Polarity
    const uint32_t TIM1_CCER_CC3NP = 1U << 11 ;

  // Field CC3NE: Capture/Compare 3 complementary output enable
    const uint32_t TIM1_CCER_CC3NE = 1U << 10 ;

  // Field CC3P: Capture/Compare 3 output Polarity
    const uint32_t TIM1_CCER_CC3P = 1U << 9 ;

  // Field CC3E: Capture/Compare 3 output enable
    const uint32_t TIM1_CCER_CC3E = 1U << 8 ;

  // Field CC2NP: Capture/Compare 2 output Polarity
    const uint32_t TIM1_CCER_CC2NP = 1U << 7 ;

  // Field CC2NE: Capture/Compare 2 complementary output enable
    const uint32_t TIM1_CCER_CC2NE = 1U << 6 ;

  // Field CC2P: Capture/Compare 2 output Polarity
    const uint32_t TIM1_CCER_CC2P = 1U << 5 ;

  // Field CC2E: Capture/Compare 2 output enable
    const uint32_t TIM1_CCER_CC2E = 1U << 4 ;

  // Field CC1NP: Capture/Compare 1 output Polarity
    const uint32_t TIM1_CCER_CC1NP = 1U << 3 ;

  // Field CC1NE: Capture/Compare 1 complementary output enable
    const uint32_t TIM1_CCER_CC1NE = 1U << 2 ;

  // Field CC1P: Capture/Compare 1 output Polarity
    const uint32_t TIM1_CCER_CC1P = 1U << 1 ;

  // Field CC1E: Capture/Compare 1 output enable
    const uint32_t TIM1_CCER_CC1E = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM1_CNT (* ((volatile uint32_t *) (0x40010000 + 36)))

  // Field CNT: counter value
    inline uint32_t TIM1_CNT_CNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM1_PSC (* ((volatile uint32_t *) (0x40010000 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM1_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM1_ARR (* ((volatile uint32_t *) (0x40010000 + 44)))

  // Field ARR: Auto-reload value
    inline uint32_t TIM1_ARR_ARR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR1: capture/compare register 1
  #define TIM1_CCR1 (* ((volatile uint32_t *) (0x40010000 + 52)))

  // Field CCR1: Capture/Compare 1 value
    inline uint32_t TIM1_CCR1_CCR1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR2: capture/compare register 2
  #define TIM1_CCR2 (* ((volatile uint32_t *) (0x40010000 + 56)))

  // Field CCR2: Capture/Compare 2 value
    inline uint32_t TIM1_CCR2_CCR2 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR3: capture/compare register 3
  #define TIM1_CCR3 (* ((volatile uint32_t *) (0x40010000 + 60)))

  // Field CCR3: Capture/Compare value
    inline uint32_t TIM1_CCR3_CCR3 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR4: capture/compare register 4
  #define TIM1_CCR4 (* ((volatile uint32_t *) (0x40010000 + 64)))

  // Field CCR4: Capture/Compare value
    inline uint32_t TIM1_CCR4_CCR4 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DCR: DMA control register
  #define TIM1_DCR (* ((volatile uint32_t *) (0x40010000 + 72)))

  // Field DBL: DMA burst length
    inline uint32_t TIM1_DCR_DBL (const uint32_t inValue) {return (inValue & 0x1FU) << 8 ; }

  // Field DBA: DMA base address
    inline uint32_t TIM1_DCR_DBA (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMAR: DMA address for full transfer
  #define TIM1_DMAR (* ((volatile uint32_t *) (0x40010000 + 76)))

  // Field DMAB: DMA register for burst accesses
    inline uint32_t TIM1_DMAR_DMAB (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RCR: repetition counter register
  #define TIM1_RCR (* ((volatile uint32_t *) (0x40010000 + 48)))

  // Field REP: Repetition counter value
    inline uint32_t TIM1_RCR_REP (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BDTR: break and dead-time register
  #define TIM1_BDTR (* ((volatile uint32_t *) (0x40010000 + 68)))

  // Field DTG: Dead-time generator setup
    inline uint32_t TIM1_BDTR_DTG (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field LOCK: Lock configuration
    inline uint32_t TIM1_BDTR_LOCK (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OSSI: Off-state selection for Idle mode
    const uint32_t TIM1_BDTR_OSSI = 1U << 10 ;

  // Field OSSR: Off-state selection for Run mode
    const uint32_t TIM1_BDTR_OSSR = 1U << 11 ;

  // Field BKE: Break enable
    const uint32_t TIM1_BDTR_BKE = 1U << 12 ;

  // Field BKP: Break polarity
    const uint32_t TIM1_BDTR_BKP = 1U << 13 ;

  // Field AOE: Automatic output enable
    const uint32_t TIM1_BDTR_AOE = 1U << 14 ;

  // Field MOE: Main output enable
    const uint32_t TIM1_BDTR_MOE = 1U << 15 ;

  // Field BKF: Break filter
    inline uint32_t TIM1_BDTR_BKF (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field BK2F: Break 2 filter
    inline uint32_t TIM1_BDTR_BK2F (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field BK2E: Break 2 enable
    const uint32_t TIM1_BDTR_BK2E = 1U << 24 ;

  // Field BK2P: Break 2 polarity
    const uint32_t TIM1_BDTR_BK2P = 1U << 25 ;

//------------------------------------------------------------------------------

//---  Register CCMR3_Output: capture/compare mode register 3 (output mode)
  #define TIM1_CCMR3_Output (* ((volatile uint32_t *) (0x40010000 + 84)))

  // Field OC5FE: Output compare 5 fast enable
    const uint32_t TIM1_CCMR3_Output_OC5FE = 1U << 2 ;

  // Field OC5PE: Output compare 5 preload enable
    const uint32_t TIM1_CCMR3_Output_OC5PE = 1U << 3 ;

  // Field OC5M: Output compare 5 mode
    inline uint32_t TIM1_CCMR3_Output_OC5M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC5CE: Output compare 5 clear enable
    const uint32_t TIM1_CCMR3_Output_OC5CE = 1U << 7 ;

  // Field OC6FE: Output compare 6 fast enable
    const uint32_t TIM1_CCMR3_Output_OC6FE = 1U << 10 ;

  // Field OC6PE: Output compare 6 preload enable
    const uint32_t TIM1_CCMR3_Output_OC6PE = 1U << 11 ;

  // Field OC6M: Output compare 6 mode
    inline uint32_t TIM1_CCMR3_Output_OC6M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC6CE: Output compare 6 clear enable
    const uint32_t TIM1_CCMR3_Output_OC6CE = 1U << 15 ;

  // Field OC5M3: Output Compare 5 mode
    const uint32_t TIM1_CCMR3_Output_OC5M3 = 1U << 16 ;

  // Field OC6M3: Output Compare 6 mode
    const uint32_t TIM1_CCMR3_Output_OC6M3 = 1U << 24 ;

//------------------------------------------------------------------------------

//---  Register CCR5: capture/compare register 5
  #define TIM1_CCR5 (* ((volatile uint32_t *) (0x40010000 + 88)))

  // Field CCR5: Capture/Compare 5 value
    inline uint32_t TIM1_CCR5_CCR5 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field GC5C1: Group Channel 5 and Channel 1
    const uint32_t TIM1_CCR5_GC5C1 = 1U << 29 ;

  // Field GC5C2: Group Channel 5 and Channel 2
    const uint32_t TIM1_CCR5_GC5C2 = 1U << 30 ;

  // Field GC5C3: Group Channel 5 and Channel 3
    const uint32_t TIM1_CCR5_GC5C3 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register CRR6: capture/compare register 6
  #define TIM1_CRR6 (* ((volatile uint32_t *) (0x40010000 + 92)))

  // Field CCR6: Capture/Compare 6 value
    inline uint32_t TIM1_CRR6_CCR6 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AF1: alternate function option register 1
  #define TIM1_AF1 (* ((volatile uint32_t *) (0x40010000 + 96)))

  // Field BKINE: BRK BKIN input enable
    const uint32_t TIM1_AF1_BKINE = 1U << 0 ;

  // Field BKDFBKE: BRK DFSDM_BREAK[0] enable
    const uint32_t TIM1_AF1_BKDFBKE = 1U << 8 ;

  // Field BKINP: BRK BKIN input polarity
    const uint32_t TIM1_AF1_BKINP = 1U << 9 ;

//------------------------------------------------------------------------------

//---  Register AF2: alternate function option register 2
  #define TIM1_AF2 (* ((volatile uint32_t *) (0x40010000 + 100)))

  // Field BK2INE: BRK2 BKIN input enable
    const uint32_t TIM1_AF2_BK2INE = 1U << 0 ;

  // Field BK2DFBKE: BRK2 DFSDM_BREAK enable
    const uint32_t TIM1_AF2_BK2DFBKE = 1U << 8 ;

  // Field BK2INP: BRK2 BKIN2 input polarity
    const uint32_t TIM1_AF2_BK2INP = 1U << 9 ;

//------------------------------------------------------------------------------
// Peripheral TIM10: General-purpose-timers
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM10_CR1 (* ((volatile uint32_t *) (0x40014400 + 0)))

  // Field CKD: Clock division
    inline uint32_t TIM10_CR1_CKD (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM10_CR1_ARPE = 1U << 7 ;

  // Field URS: Update request source
    const uint32_t TIM10_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM10_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM10_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM10_DIER (* ((volatile uint32_t *) (0x40014400 + 12)))

  // Field CC1IE: Capture/Compare 1 interrupt enable
    const uint32_t TIM10_DIER_CC1IE = 1U << 1 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM10_DIER_UIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM10_SR (* ((volatile uint32_t *) (0x40014400 + 16)))

  // Field CC1OF: Capture/Compare 1 overcapture flag
    const uint32_t TIM10_SR_CC1OF = 1U << 9 ;

  // Field CC1IF: Capture/compare 1 interrupt flag
    const uint32_t TIM10_SR_CC1IF = 1U << 1 ;

  // Field UIF: Update interrupt flag
    const uint32_t TIM10_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM10_EGR (* ((volatile uint32_t *) (0x40014400 + 20)))

  // Field CC1G: Capture/compare 1 generation
    const uint32_t TIM10_EGR_CC1G = 1U << 1 ;

  // Field UG: Update generation
    const uint32_t TIM10_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  #define TIM10_CCMR1_Output (* ((volatile uint32_t *) (0x40014400 + 24)))

  // Field OC1M: Output Compare 1 mode
    inline uint32_t TIM10_CCMR1_Output_OC1M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC1PE: Output Compare 1 preload enable
    const uint32_t TIM10_CCMR1_Output_OC1PE = 1U << 3 ;

  // Field OC1FE: Output Compare 1 fast enable
    const uint32_t TIM10_CCMR1_Output_OC1FE = 1U << 2 ;

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM10_CCMR1_Output_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  #define TIM10_CCMR1_Input (* ((volatile uint32_t *) (0x40014400 + 24)))

  // Field IC1F: Input capture 1 filter
    inline uint32_t TIM10_CCMR1_Input_IC1F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ICPCS: Input capture 1 prescaler
    inline uint32_t TIM10_CCMR1_Input_ICPCS (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM10_CCMR1_Input_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCER: capture/compare enable register
  #define TIM10_CCER (* ((volatile uint32_t *) (0x40014400 + 32)))

  // Field CC1NP: Capture/Compare 1 output Polarity
    const uint32_t TIM10_CCER_CC1NP = 1U << 3 ;

  // Field CC1P: Capture/Compare 1 output Polarity
    const uint32_t TIM10_CCER_CC1P = 1U << 1 ;

  // Field CC1E: Capture/Compare 1 output enable
    const uint32_t TIM10_CCER_CC1E = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM10_CNT (* ((volatile uint32_t *) (0x40014400 + 36)))

  // Field CNT: counter value
    inline uint32_t TIM10_CNT_CNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM10_PSC (* ((volatile uint32_t *) (0x40014400 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM10_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM10_ARR (* ((volatile uint32_t *) (0x40014400 + 44)))

  // Field ARR: Auto-reload value
    inline uint32_t TIM10_ARR_ARR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR1: capture/compare register 1
  #define TIM10_CCR1 (* ((volatile uint32_t *) (0x40014400 + 52)))

  // Field CCR1: Capture/Compare 1 value
    inline uint32_t TIM10_CCR1_CCR1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SMCR: slave mode control register
  #define TIM10_SMCR (* ((volatile uint32_t *) (0x40014400 + 8)))

  // Field SMS3: Slave mode selection
    const uint32_t TIM10_SMCR_SMS3 = 1U << 16 ;

  // Field ETP: External trigger polarity
    const uint32_t TIM10_SMCR_ETP = 1U << 15 ;

  // Field ECE: External clock enable
    const uint32_t TIM10_SMCR_ECE = 1U << 14 ;

  // Field ETPS: External trigger prescaler
    inline uint32_t TIM10_SMCR_ETPS (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field ETF: External trigger filter
    inline uint32_t TIM10_SMCR_ETF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field MSM: Master/slave mode
    const uint32_t TIM10_SMCR_MSM = 1U << 7 ;

  // Field TS: Trigger selection
    inline uint32_t TIM10_SMCR_TS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SMS: Slave mode selection
    inline uint32_t TIM10_SMCR_SMS (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OR: option register
  #define TIM10_OR (* ((volatile uint32_t *) (0x40014400 + 80)))

  // Field TI1_RMP: TIM11 Input 1 remapping capability
    inline uint32_t TIM10_OR_TI1_RMP (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral TIM11
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM11_CR1 (* ((volatile uint32_t *) (0x40014800 + 0)))

  // Field CKD: Clock division
    inline uint32_t TIM11_CR1_CKD (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM11_CR1_ARPE = 1U << 7 ;

  // Field URS: Update request source
    const uint32_t TIM11_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM11_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM11_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM11_DIER (* ((volatile uint32_t *) (0x40014800 + 12)))

  // Field CC1IE: Capture/Compare 1 interrupt enable
    const uint32_t TIM11_DIER_CC1IE = 1U << 1 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM11_DIER_UIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM11_SR (* ((volatile uint32_t *) (0x40014800 + 16)))

  // Field CC1OF: Capture/Compare 1 overcapture flag
    const uint32_t TIM11_SR_CC1OF = 1U << 9 ;

  // Field CC1IF: Capture/compare 1 interrupt flag
    const uint32_t TIM11_SR_CC1IF = 1U << 1 ;

  // Field UIF: Update interrupt flag
    const uint32_t TIM11_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM11_EGR (* ((volatile uint32_t *) (0x40014800 + 20)))

  // Field CC1G: Capture/compare 1 generation
    const uint32_t TIM11_EGR_CC1G = 1U << 1 ;

  // Field UG: Update generation
    const uint32_t TIM11_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  #define TIM11_CCMR1_Output (* ((volatile uint32_t *) (0x40014800 + 24)))

  // Field OC1M: Output Compare 1 mode
    inline uint32_t TIM11_CCMR1_Output_OC1M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC1PE: Output Compare 1 preload enable
    const uint32_t TIM11_CCMR1_Output_OC1PE = 1U << 3 ;

  // Field OC1FE: Output Compare 1 fast enable
    const uint32_t TIM11_CCMR1_Output_OC1FE = 1U << 2 ;

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM11_CCMR1_Output_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  #define TIM11_CCMR1_Input (* ((volatile uint32_t *) (0x40014800 + 24)))

  // Field IC1F: Input capture 1 filter
    inline uint32_t TIM11_CCMR1_Input_IC1F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ICPCS: Input capture 1 prescaler
    inline uint32_t TIM11_CCMR1_Input_ICPCS (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM11_CCMR1_Input_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCER: capture/compare enable register
  #define TIM11_CCER (* ((volatile uint32_t *) (0x40014800 + 32)))

  // Field CC1NP: Capture/Compare 1 output Polarity
    const uint32_t TIM11_CCER_CC1NP = 1U << 3 ;

  // Field CC1P: Capture/Compare 1 output Polarity
    const uint32_t TIM11_CCER_CC1P = 1U << 1 ;

  // Field CC1E: Capture/Compare 1 output enable
    const uint32_t TIM11_CCER_CC1E = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM11_CNT (* ((volatile uint32_t *) (0x40014800 + 36)))

  // Field CNT: counter value
    inline uint32_t TIM11_CNT_CNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM11_PSC (* ((volatile uint32_t *) (0x40014800 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM11_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM11_ARR (* ((volatile uint32_t *) (0x40014800 + 44)))

  // Field ARR: Auto-reload value
    inline uint32_t TIM11_ARR_ARR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR1: capture/compare register 1
  #define TIM11_CCR1 (* ((volatile uint32_t *) (0x40014800 + 52)))

  // Field CCR1: Capture/Compare 1 value
    inline uint32_t TIM11_CCR1_CCR1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SMCR: slave mode control register
  #define TIM11_SMCR (* ((volatile uint32_t *) (0x40014800 + 8)))

  // Field SMS3: Slave mode selection
    const uint32_t TIM11_SMCR_SMS3 = 1U << 16 ;

  // Field ETP: External trigger polarity
    const uint32_t TIM11_SMCR_ETP = 1U << 15 ;

  // Field ECE: External clock enable
    const uint32_t TIM11_SMCR_ECE = 1U << 14 ;

  // Field ETPS: External trigger prescaler
    inline uint32_t TIM11_SMCR_ETPS (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field ETF: External trigger filter
    inline uint32_t TIM11_SMCR_ETF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field MSM: Master/slave mode
    const uint32_t TIM11_SMCR_MSM = 1U << 7 ;

  // Field TS: Trigger selection
    inline uint32_t TIM11_SMCR_TS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SMS: Slave mode selection
    inline uint32_t TIM11_SMCR_SMS (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OR: option register
  #define TIM11_OR (* ((volatile uint32_t *) (0x40014800 + 80)))

  // Field TI1_RMP: TIM11 Input 1 remapping capability
    inline uint32_t TIM11_OR_TI1_RMP (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral TIM12
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM12_CR1 (* ((volatile uint32_t *) (0x40001800 + 0)))

  // Field CKD: Clock division
    inline uint32_t TIM12_CR1_CKD (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM12_CR1_ARPE = 1U << 7 ;

  // Field OPM: One-pulse mode
    const uint32_t TIM12_CR1_OPM = 1U << 3 ;

  // Field URS: Update request source
    const uint32_t TIM12_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM12_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM12_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SMCR: slave mode control register
  #define TIM12_SMCR (* ((volatile uint32_t *) (0x40001800 + 8)))

  // Field MSM: Master/Slave mode
    const uint32_t TIM12_SMCR_MSM = 1U << 7 ;

  // Field TS: Trigger selection
    inline uint32_t TIM12_SMCR_TS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SMS: Slave mode selection
    inline uint32_t TIM12_SMCR_SMS (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM12_DIER (* ((volatile uint32_t *) (0x40001800 + 12)))

  // Field TIE: Trigger interrupt enable
    const uint32_t TIM12_DIER_TIE = 1U << 6 ;

  // Field CC2IE: Capture/Compare 2 interrupt enable
    const uint32_t TIM12_DIER_CC2IE = 1U << 2 ;

  // Field CC1IE: Capture/Compare 1 interrupt enable
    const uint32_t TIM12_DIER_CC1IE = 1U << 1 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM12_DIER_UIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM12_SR (* ((volatile uint32_t *) (0x40001800 + 16)))

  // Field CC2OF: Capture/compare 2 overcapture flag
    const uint32_t TIM12_SR_CC2OF = 1U << 10 ;

  // Field CC1OF: Capture/Compare 1 overcapture flag
    const uint32_t TIM12_SR_CC1OF = 1U << 9 ;

  // Field TIF: Trigger interrupt flag
    const uint32_t TIM12_SR_TIF = 1U << 6 ;

  // Field CC2IF: Capture/Compare 2 interrupt flag
    const uint32_t TIM12_SR_CC2IF = 1U << 2 ;

  // Field CC1IF: Capture/compare 1 interrupt flag
    const uint32_t TIM12_SR_CC1IF = 1U << 1 ;

  // Field UIF: Update interrupt flag
    const uint32_t TIM12_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM12_EGR (* ((volatile uint32_t *) (0x40001800 + 20)))

  // Field TG: Trigger generation
    const uint32_t TIM12_EGR_TG = 1U << 6 ;

  // Field CC2G: Capture/compare 2 generation
    const uint32_t TIM12_EGR_CC2G = 1U << 2 ;

  // Field CC1G: Capture/compare 1 generation
    const uint32_t TIM12_EGR_CC1G = 1U << 1 ;

  // Field UG: Update generation
    const uint32_t TIM12_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  #define TIM12_CCMR1_Output (* ((volatile uint32_t *) (0x40001800 + 24)))

  // Field OC2M: Output Compare 2 mode
    inline uint32_t TIM12_CCMR1_Output_OC2M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC2PE: Output Compare 2 preload enable
    const uint32_t TIM12_CCMR1_Output_OC2PE = 1U << 11 ;

  // Field OC2FE: Output Compare 2 fast enable
    const uint32_t TIM12_CCMR1_Output_OC2FE = 1U << 10 ;

  // Field CC2S: Capture/Compare 2 selection
    inline uint32_t TIM12_CCMR1_Output_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC1M: Output Compare 1 mode
    inline uint32_t TIM12_CCMR1_Output_OC1M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC1PE: Output Compare 1 preload enable
    const uint32_t TIM12_CCMR1_Output_OC1PE = 1U << 3 ;

  // Field OC1FE: Output Compare 1 fast enable
    const uint32_t TIM12_CCMR1_Output_OC1FE = 1U << 2 ;

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM12_CCMR1_Output_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  #define TIM12_CCMR1_Input (* ((volatile uint32_t *) (0x40001800 + 24)))

  // Field IC2F: Input capture 2 filter
    inline uint32_t TIM12_CCMR1_Input_IC2F (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field IC2PCS: Input capture 2 prescaler
    inline uint32_t TIM12_CCMR1_Input_IC2PCS (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC2S: Capture/Compare 2 selection
    inline uint32_t TIM12_CCMR1_Input_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC1F: Input capture 1 filter
    inline uint32_t TIM12_CCMR1_Input_IC1F (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field ICPCS: Input capture 1 prescaler
    inline uint32_t TIM12_CCMR1_Input_ICPCS (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM12_CCMR1_Input_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCER: capture/compare enable register
  #define TIM12_CCER (* ((volatile uint32_t *) (0x40001800 + 32)))

  // Field CC2NP: Capture/Compare 2 output Polarity
    const uint32_t TIM12_CCER_CC2NP = 1U << 7 ;

  // Field CC2P: Capture/Compare 2 output Polarity
    const uint32_t TIM12_CCER_CC2P = 1U << 5 ;

  // Field CC2E: Capture/Compare 2 output enable
    const uint32_t TIM12_CCER_CC2E = 1U << 4 ;

  // Field CC1NP: Capture/Compare 1 output Polarity
    const uint32_t TIM12_CCER_CC1NP = 1U << 3 ;

  // Field CC1P: Capture/Compare 1 output Polarity
    const uint32_t TIM12_CCER_CC1P = 1U << 1 ;

  // Field CC1E: Capture/Compare 1 output enable
    const uint32_t TIM12_CCER_CC1E = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM12_CNT (* ((volatile uint32_t *) (0x40001800 + 36)))

  // Field CNT: counter value
    inline uint32_t TIM12_CNT_CNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM12_PSC (* ((volatile uint32_t *) (0x40001800 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM12_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM12_ARR (* ((volatile uint32_t *) (0x40001800 + 44)))

  // Field ARR: Auto-reload value
    inline uint32_t TIM12_ARR_ARR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR1: capture/compare register 1
  #define TIM12_CCR1 (* ((volatile uint32_t *) (0x40001800 + 52)))

  // Field CCR1: Capture/Compare 1 value
    inline uint32_t TIM12_CCR1_CCR1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR2: capture/compare register 2
  #define TIM12_CCR2 (* ((volatile uint32_t *) (0x40001800 + 56)))

  // Field CCR2: Capture/Compare 2 value
    inline uint32_t TIM12_CCR2_CCR2 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral TIM13
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM13_CR1 (* ((volatile uint32_t *) (0x40001C00 + 0)))

  // Field CKD: Clock division
    inline uint32_t TIM13_CR1_CKD (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM13_CR1_ARPE = 1U << 7 ;

  // Field URS: Update request source
    const uint32_t TIM13_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM13_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM13_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM13_DIER (* ((volatile uint32_t *) (0x40001C00 + 12)))

  // Field CC1IE: Capture/Compare 1 interrupt enable
    const uint32_t TIM13_DIER_CC1IE = 1U << 1 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM13_DIER_UIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM13_SR (* ((volatile uint32_t *) (0x40001C00 + 16)))

  // Field CC1OF: Capture/Compare 1 overcapture flag
    const uint32_t TIM13_SR_CC1OF = 1U << 9 ;

  // Field CC1IF: Capture/compare 1 interrupt flag
    const uint32_t TIM13_SR_CC1IF = 1U << 1 ;

  // Field UIF: Update interrupt flag
    const uint32_t TIM13_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM13_EGR (* ((volatile uint32_t *) (0x40001C00 + 20)))

  // Field CC1G: Capture/compare 1 generation
    const uint32_t TIM13_EGR_CC1G = 1U << 1 ;

  // Field UG: Update generation
    const uint32_t TIM13_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  #define TIM13_CCMR1_Output (* ((volatile uint32_t *) (0x40001C00 + 24)))

  // Field OC1M: Output Compare 1 mode
    inline uint32_t TIM13_CCMR1_Output_OC1M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC1PE: Output Compare 1 preload enable
    const uint32_t TIM13_CCMR1_Output_OC1PE = 1U << 3 ;

  // Field OC1FE: Output Compare 1 fast enable
    const uint32_t TIM13_CCMR1_Output_OC1FE = 1U << 2 ;

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM13_CCMR1_Output_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  #define TIM13_CCMR1_Input (* ((volatile uint32_t *) (0x40001C00 + 24)))

  // Field IC1F: Input capture 1 filter
    inline uint32_t TIM13_CCMR1_Input_IC1F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ICPCS: Input capture 1 prescaler
    inline uint32_t TIM13_CCMR1_Input_ICPCS (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM13_CCMR1_Input_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCER: capture/compare enable register
  #define TIM13_CCER (* ((volatile uint32_t *) (0x40001C00 + 32)))

  // Field CC1NP: Capture/Compare 1 output Polarity
    const uint32_t TIM13_CCER_CC1NP = 1U << 3 ;

  // Field CC1P: Capture/Compare 1 output Polarity
    const uint32_t TIM13_CCER_CC1P = 1U << 1 ;

  // Field CC1E: Capture/Compare 1 output enable
    const uint32_t TIM13_CCER_CC1E = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM13_CNT (* ((volatile uint32_t *) (0x40001C00 + 36)))

  // Field CNT: counter value
    inline uint32_t TIM13_CNT_CNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM13_PSC (* ((volatile uint32_t *) (0x40001C00 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM13_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM13_ARR (* ((volatile uint32_t *) (0x40001C00 + 44)))

  // Field ARR: Auto-reload value
    inline uint32_t TIM13_ARR_ARR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR1: capture/compare register 1
  #define TIM13_CCR1 (* ((volatile uint32_t *) (0x40001C00 + 52)))

  // Field CCR1: Capture/Compare 1 value
    inline uint32_t TIM13_CCR1_CCR1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SMCR: slave mode control register
  #define TIM13_SMCR (* ((volatile uint32_t *) (0x40001C00 + 8)))

  // Field SMS3: Slave mode selection
    const uint32_t TIM13_SMCR_SMS3 = 1U << 16 ;

  // Field ETP: External trigger polarity
    const uint32_t TIM13_SMCR_ETP = 1U << 15 ;

  // Field ECE: External clock enable
    const uint32_t TIM13_SMCR_ECE = 1U << 14 ;

  // Field ETPS: External trigger prescaler
    inline uint32_t TIM13_SMCR_ETPS (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field ETF: External trigger filter
    inline uint32_t TIM13_SMCR_ETF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field MSM: Master/slave mode
    const uint32_t TIM13_SMCR_MSM = 1U << 7 ;

  // Field TS: Trigger selection
    inline uint32_t TIM13_SMCR_TS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SMS: Slave mode selection
    inline uint32_t TIM13_SMCR_SMS (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OR: option register
  #define TIM13_OR (* ((volatile uint32_t *) (0x40001C00 + 80)))

  // Field TI1_RMP: TIM11 Input 1 remapping capability
    inline uint32_t TIM13_OR_TI1_RMP (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral TIM14
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM14_CR1 (* ((volatile uint32_t *) (0x40002000 + 0)))

  // Field CKD: Clock division
    inline uint32_t TIM14_CR1_CKD (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM14_CR1_ARPE = 1U << 7 ;

  // Field URS: Update request source
    const uint32_t TIM14_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM14_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM14_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM14_DIER (* ((volatile uint32_t *) (0x40002000 + 12)))

  // Field CC1IE: Capture/Compare 1 interrupt enable
    const uint32_t TIM14_DIER_CC1IE = 1U << 1 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM14_DIER_UIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM14_SR (* ((volatile uint32_t *) (0x40002000 + 16)))

  // Field CC1OF: Capture/Compare 1 overcapture flag
    const uint32_t TIM14_SR_CC1OF = 1U << 9 ;

  // Field CC1IF: Capture/compare 1 interrupt flag
    const uint32_t TIM14_SR_CC1IF = 1U << 1 ;

  // Field UIF: Update interrupt flag
    const uint32_t TIM14_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM14_EGR (* ((volatile uint32_t *) (0x40002000 + 20)))

  // Field CC1G: Capture/compare 1 generation
    const uint32_t TIM14_EGR_CC1G = 1U << 1 ;

  // Field UG: Update generation
    const uint32_t TIM14_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  #define TIM14_CCMR1_Output (* ((volatile uint32_t *) (0x40002000 + 24)))

  // Field OC1M: Output Compare 1 mode
    inline uint32_t TIM14_CCMR1_Output_OC1M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC1PE: Output Compare 1 preload enable
    const uint32_t TIM14_CCMR1_Output_OC1PE = 1U << 3 ;

  // Field OC1FE: Output Compare 1 fast enable
    const uint32_t TIM14_CCMR1_Output_OC1FE = 1U << 2 ;

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM14_CCMR1_Output_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  #define TIM14_CCMR1_Input (* ((volatile uint32_t *) (0x40002000 + 24)))

  // Field IC1F: Input capture 1 filter
    inline uint32_t TIM14_CCMR1_Input_IC1F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ICPCS: Input capture 1 prescaler
    inline uint32_t TIM14_CCMR1_Input_ICPCS (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM14_CCMR1_Input_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCER: capture/compare enable register
  #define TIM14_CCER (* ((volatile uint32_t *) (0x40002000 + 32)))

  // Field CC1NP: Capture/Compare 1 output Polarity
    const uint32_t TIM14_CCER_CC1NP = 1U << 3 ;

  // Field CC1P: Capture/Compare 1 output Polarity
    const uint32_t TIM14_CCER_CC1P = 1U << 1 ;

  // Field CC1E: Capture/Compare 1 output enable
    const uint32_t TIM14_CCER_CC1E = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM14_CNT (* ((volatile uint32_t *) (0x40002000 + 36)))

  // Field CNT: counter value
    inline uint32_t TIM14_CNT_CNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM14_PSC (* ((volatile uint32_t *) (0x40002000 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM14_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM14_ARR (* ((volatile uint32_t *) (0x40002000 + 44)))

  // Field ARR: Auto-reload value
    inline uint32_t TIM14_ARR_ARR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR1: capture/compare register 1
  #define TIM14_CCR1 (* ((volatile uint32_t *) (0x40002000 + 52)))

  // Field CCR1: Capture/Compare 1 value
    inline uint32_t TIM14_CCR1_CCR1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SMCR: slave mode control register
  #define TIM14_SMCR (* ((volatile uint32_t *) (0x40002000 + 8)))

  // Field SMS3: Slave mode selection
    const uint32_t TIM14_SMCR_SMS3 = 1U << 16 ;

  // Field ETP: External trigger polarity
    const uint32_t TIM14_SMCR_ETP = 1U << 15 ;

  // Field ECE: External clock enable
    const uint32_t TIM14_SMCR_ECE = 1U << 14 ;

  // Field ETPS: External trigger prescaler
    inline uint32_t TIM14_SMCR_ETPS (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field ETF: External trigger filter
    inline uint32_t TIM14_SMCR_ETF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field MSM: Master/slave mode
    const uint32_t TIM14_SMCR_MSM = 1U << 7 ;

  // Field TS: Trigger selection
    inline uint32_t TIM14_SMCR_TS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SMS: Slave mode selection
    inline uint32_t TIM14_SMCR_SMS (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OR: option register
  #define TIM14_OR (* ((volatile uint32_t *) (0x40002000 + 80)))

  // Field TI1_RMP: TIM11 Input 1 remapping capability
    inline uint32_t TIM14_OR_TI1_RMP (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral TIM2: General purpose timers
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM2_CR1 (* ((volatile uint32_t *) (0x40000000 + 0)))

  // Field CKD: Clock division
    inline uint32_t TIM2_CR1_CKD (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM2_CR1_ARPE = 1U << 7 ;

  // Field CMS: Center-aligned mode selection
    inline uint32_t TIM2_CR1_CMS (const uint32_t inValue) {return (inValue & 0x3U) << 5 ; }

  // Field DIR: Direction
    const uint32_t TIM2_CR1_DIR = 1U << 4 ;

  // Field OPM: One-pulse mode
    const uint32_t TIM2_CR1_OPM = 1U << 3 ;

  // Field URS: Update request source
    const uint32_t TIM2_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM2_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM2_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define TIM2_CR2 (* ((volatile uint32_t *) (0x40000000 + 4)))

  // Field TI1S: TI1 selection
    const uint32_t TIM2_CR2_TI1S = 1U << 7 ;

  // Field MMS: Master mode selection
    inline uint32_t TIM2_CR2_MMS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field CCDS: Capture/compare DMA selection
    const uint32_t TIM2_CR2_CCDS = 1U << 3 ;

//------------------------------------------------------------------------------

//---  Register SMCR: slave mode control register
  #define TIM2_SMCR (* ((volatile uint32_t *) (0x40000000 + 8)))

  // Field ETP: External trigger polarity
    const uint32_t TIM2_SMCR_ETP = 1U << 15 ;

  // Field ECE: External clock enable
    const uint32_t TIM2_SMCR_ECE = 1U << 14 ;

  // Field ETPS: External trigger prescaler
    inline uint32_t TIM2_SMCR_ETPS (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field ETF: External trigger filter
    inline uint32_t TIM2_SMCR_ETF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field MSM: Master/Slave mode
    const uint32_t TIM2_SMCR_MSM = 1U << 7 ;

  // Field TS: Trigger selection
    inline uint32_t TIM2_SMCR_TS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SMS: Slave mode selection
    inline uint32_t TIM2_SMCR_SMS (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM2_DIER (* ((volatile uint32_t *) (0x40000000 + 12)))

  // Field TDE: Trigger DMA request enable
    const uint32_t TIM2_DIER_TDE = 1U << 14 ;

  // Field CC4DE: Capture/Compare 4 DMA request enable
    const uint32_t TIM2_DIER_CC4DE = 1U << 12 ;

  // Field CC3DE: Capture/Compare 3 DMA request enable
    const uint32_t TIM2_DIER_CC3DE = 1U << 11 ;

  // Field CC2DE: Capture/Compare 2 DMA request enable
    const uint32_t TIM2_DIER_CC2DE = 1U << 10 ;

  // Field CC1DE: Capture/Compare 1 DMA request enable
    const uint32_t TIM2_DIER_CC1DE = 1U << 9 ;

  // Field UDE: Update DMA request enable
    const uint32_t TIM2_DIER_UDE = 1U << 8 ;

  // Field TIE: Trigger interrupt enable
    const uint32_t TIM2_DIER_TIE = 1U << 6 ;

  // Field CC4IE: Capture/Compare 4 interrupt enable
    const uint32_t TIM2_DIER_CC4IE = 1U << 4 ;

  // Field CC3IE: Capture/Compare 3 interrupt enable
    const uint32_t TIM2_DIER_CC3IE = 1U << 3 ;

  // Field CC2IE: Capture/Compare 2 interrupt enable
    const uint32_t TIM2_DIER_CC2IE = 1U << 2 ;

  // Field CC1IE: Capture/Compare 1 interrupt enable
    const uint32_t TIM2_DIER_CC1IE = 1U << 1 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM2_DIER_UIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM2_SR (* ((volatile uint32_t *) (0x40000000 + 16)))

  // Field CC4OF: Capture/Compare 4 overcapture flag
    const uint32_t TIM2_SR_CC4OF = 1U << 12 ;

  // Field CC3OF: Capture/Compare 3 overcapture flag
    const uint32_t TIM2_SR_CC3OF = 1U << 11 ;

  // Field CC2OF: Capture/compare 2 overcapture flag
    const uint32_t TIM2_SR_CC2OF = 1U << 10 ;

  // Field CC1OF: Capture/Compare 1 overcapture flag
    const uint32_t TIM2_SR_CC1OF = 1U << 9 ;

  // Field TIF: Trigger interrupt flag
    const uint32_t TIM2_SR_TIF = 1U << 6 ;

  // Field CC4IF: Capture/Compare 4 interrupt flag
    const uint32_t TIM2_SR_CC4IF = 1U << 4 ;

  // Field CC3IF: Capture/Compare 3 interrupt flag
    const uint32_t TIM2_SR_CC3IF = 1U << 3 ;

  // Field CC2IF: Capture/Compare 2 interrupt flag
    const uint32_t TIM2_SR_CC2IF = 1U << 2 ;

  // Field CC1IF: Capture/compare 1 interrupt flag
    const uint32_t TIM2_SR_CC1IF = 1U << 1 ;

  // Field UIF: Update interrupt flag
    const uint32_t TIM2_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM2_EGR (* ((volatile uint32_t *) (0x40000000 + 20)))

  // Field TG: Trigger generation
    const uint32_t TIM2_EGR_TG = 1U << 6 ;

  // Field CC4G: Capture/compare 4 generation
    const uint32_t TIM2_EGR_CC4G = 1U << 4 ;

  // Field CC3G: Capture/compare 3 generation
    const uint32_t TIM2_EGR_CC3G = 1U << 3 ;

  // Field CC2G: Capture/compare 2 generation
    const uint32_t TIM2_EGR_CC2G = 1U << 2 ;

  // Field CC1G: Capture/compare 1 generation
    const uint32_t TIM2_EGR_CC1G = 1U << 1 ;

  // Field UG: Update generation
    const uint32_t TIM2_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  #define TIM2_CCMR1_Output (* ((volatile uint32_t *) (0x40000000 + 24)))

  // Field OC2CE: OC2CE
    const uint32_t TIM2_CCMR1_Output_OC2CE = 1U << 15 ;

  // Field OC2M: OC2M
    inline uint32_t TIM2_CCMR1_Output_OC2M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC2PE: OC2PE
    const uint32_t TIM2_CCMR1_Output_OC2PE = 1U << 11 ;

  // Field OC2FE: OC2FE
    const uint32_t TIM2_CCMR1_Output_OC2FE = 1U << 10 ;

  // Field CC2S: CC2S
    inline uint32_t TIM2_CCMR1_Output_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC1CE: OC1CE
    const uint32_t TIM2_CCMR1_Output_OC1CE = 1U << 7 ;

  // Field OC1M: OC1M
    inline uint32_t TIM2_CCMR1_Output_OC1M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC1PE: OC1PE
    const uint32_t TIM2_CCMR1_Output_OC1PE = 1U << 3 ;

  // Field OC1FE: OC1FE
    const uint32_t TIM2_CCMR1_Output_OC1FE = 1U << 2 ;

  // Field CC1S: CC1S
    inline uint32_t TIM2_CCMR1_Output_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  #define TIM2_CCMR1_Input (* ((volatile uint32_t *) (0x40000000 + 24)))

  // Field IC2F: Input capture 2 filter
    inline uint32_t TIM2_CCMR1_Input_IC2F (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field IC2PCS: Input capture 2 prescaler
    inline uint32_t TIM2_CCMR1_Input_IC2PCS (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC2S: Capture/Compare 2 selection
    inline uint32_t TIM2_CCMR1_Input_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC1F: Input capture 1 filter
    inline uint32_t TIM2_CCMR1_Input_IC1F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ICPCS: Input capture 1 prescaler
    inline uint32_t TIM2_CCMR1_Input_ICPCS (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM2_CCMR1_Input_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR2_Output: capture/compare mode register 2 (output mode)
  #define TIM2_CCMR2_Output (* ((volatile uint32_t *) (0x40000000 + 28)))

  // Field O24CE: O24CE
    const uint32_t TIM2_CCMR2_Output_O24CE = 1U << 15 ;

  // Field OC4M: OC4M
    inline uint32_t TIM2_CCMR2_Output_OC4M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC4PE: OC4PE
    const uint32_t TIM2_CCMR2_Output_OC4PE = 1U << 11 ;

  // Field OC4FE: OC4FE
    const uint32_t TIM2_CCMR2_Output_OC4FE = 1U << 10 ;

  // Field CC4S: CC4S
    inline uint32_t TIM2_CCMR2_Output_CC4S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC3CE: OC3CE
    const uint32_t TIM2_CCMR2_Output_OC3CE = 1U << 7 ;

  // Field OC3M: OC3M
    inline uint32_t TIM2_CCMR2_Output_OC3M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC3PE: OC3PE
    const uint32_t TIM2_CCMR2_Output_OC3PE = 1U << 3 ;

  // Field OC3FE: OC3FE
    const uint32_t TIM2_CCMR2_Output_OC3FE = 1U << 2 ;

  // Field CC3S: CC3S
    inline uint32_t TIM2_CCMR2_Output_CC3S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR2_Input: capture/compare mode register 2 (input mode)
  #define TIM2_CCMR2_Input (* ((volatile uint32_t *) (0x40000000 + 28)))

  // Field IC4F: Input capture 4 filter
    inline uint32_t TIM2_CCMR2_Input_IC4F (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field IC4PSC: Input capture 4 prescaler
    inline uint32_t TIM2_CCMR2_Input_IC4PSC (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC4S: Capture/Compare 4 selection
    inline uint32_t TIM2_CCMR2_Input_CC4S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC3F: Input capture 3 filter
    inline uint32_t TIM2_CCMR2_Input_IC3F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field IC3PSC: Input capture 3 prescaler
    inline uint32_t TIM2_CCMR2_Input_IC3PSC (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC3S: Capture/compare 3 selection
    inline uint32_t TIM2_CCMR2_Input_CC3S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCER: capture/compare enable register
  #define TIM2_CCER (* ((volatile uint32_t *) (0x40000000 + 32)))

  // Field CC4NP: Capture/Compare 4 output Polarity
    const uint32_t TIM2_CCER_CC4NP = 1U << 15 ;

  // Field CC4P: Capture/Compare 3 output Polarity
    const uint32_t TIM2_CCER_CC4P = 1U << 13 ;

  // Field CC4E: Capture/Compare 4 output enable
    const uint32_t TIM2_CCER_CC4E = 1U << 12 ;

  // Field CC3NP: Capture/Compare 3 output Polarity
    const uint32_t TIM2_CCER_CC3NP = 1U << 11 ;

  // Field CC3P: Capture/Compare 3 output Polarity
    const uint32_t TIM2_CCER_CC3P = 1U << 9 ;

  // Field CC3E: Capture/Compare 3 output enable
    const uint32_t TIM2_CCER_CC3E = 1U << 8 ;

  // Field CC2NP: Capture/Compare 2 output Polarity
    const uint32_t TIM2_CCER_CC2NP = 1U << 7 ;

  // Field CC2P: Capture/Compare 2 output Polarity
    const uint32_t TIM2_CCER_CC2P = 1U << 5 ;

  // Field CC2E: Capture/Compare 2 output enable
    const uint32_t TIM2_CCER_CC2E = 1U << 4 ;

  // Field CC1NP: Capture/Compare 1 output Polarity
    const uint32_t TIM2_CCER_CC1NP = 1U << 3 ;

  // Field CC1P: Capture/Compare 1 output Polarity
    const uint32_t TIM2_CCER_CC1P = 1U << 1 ;

  // Field CC1E: Capture/Compare 1 output enable
    const uint32_t TIM2_CCER_CC1E = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM2_CNT (* ((volatile uint32_t *) (0x40000000 + 36)))

  // Field CNT_H: High counter value
    inline uint32_t TIM2_CNT_CNT_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CNT_L: Low counter value
    inline uint32_t TIM2_CNT_CNT_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM2_PSC (* ((volatile uint32_t *) (0x40000000 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM2_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM2_ARR (* ((volatile uint32_t *) (0x40000000 + 44)))

  // Field ARR_H: High Auto-reload value
    inline uint32_t TIM2_ARR_ARR_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field ARR_L: Low Auto-reload value
    inline uint32_t TIM2_ARR_ARR_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR1: capture/compare register 1
  #define TIM2_CCR1 (* ((volatile uint32_t *) (0x40000000 + 52)))

  // Field CCR1_H: High Capture/Compare 1 value
    inline uint32_t TIM2_CCR1_CCR1_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR1_L: Low Capture/Compare 1 value
    inline uint32_t TIM2_CCR1_CCR1_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR2: capture/compare register 2
  #define TIM2_CCR2 (* ((volatile uint32_t *) (0x40000000 + 56)))

  // Field CCR2_H: High Capture/Compare 2 value
    inline uint32_t TIM2_CCR2_CCR2_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR2_L: Low Capture/Compare 2 value
    inline uint32_t TIM2_CCR2_CCR2_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR3: capture/compare register 3
  #define TIM2_CCR3 (* ((volatile uint32_t *) (0x40000000 + 60)))

  // Field CCR3_H: High Capture/Compare value
    inline uint32_t TIM2_CCR3_CCR3_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR3_L: Low Capture/Compare value
    inline uint32_t TIM2_CCR3_CCR3_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR4: capture/compare register 4
  #define TIM2_CCR4 (* ((volatile uint32_t *) (0x40000000 + 64)))

  // Field CCR4_H: High Capture/Compare value
    inline uint32_t TIM2_CCR4_CCR4_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR4_L: Low Capture/Compare value
    inline uint32_t TIM2_CCR4_CCR4_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DCR: DMA control register
  #define TIM2_DCR (* ((volatile uint32_t *) (0x40000000 + 72)))

  // Field DBL: DMA burst length
    inline uint32_t TIM2_DCR_DBL (const uint32_t inValue) {return (inValue & 0x1FU) << 8 ; }

  // Field DBA: DMA base address
    inline uint32_t TIM2_DCR_DBA (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMAR: DMA address for full transfer
  #define TIM2_DMAR (* ((volatile uint32_t *) (0x40000000 + 76)))

  // Field DMAB: DMA register for burst accesses
    inline uint32_t TIM2_DMAR_DMAB (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OR1: TIM2 option register 1
  #define TIM2_OR1 (* ((volatile uint32_t *) (0x40000000 + 80)))

  // Field TI4_RMP: Input Capture 4 remap
    inline uint32_t TIM2_OR1_TI4_RMP (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field ETR1_RMP: External trigger remap
    const uint32_t TIM2_OR1_ETR1_RMP = 1U << 1 ;

  // Field ITR1_RMP: Internal trigger 1 remap
    const uint32_t TIM2_OR1_ITR1_RMP = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register OR2: TIM2 option register 2
  #define TIM2_OR2 (* ((volatile uint32_t *) (0x40000000 + 96)))

  // Field ETRSEL: ETR source selection
    inline uint32_t TIM2_OR2_ETRSEL (const uint32_t inValue) {return (inValue & 0x7U) << 14 ; }

//------------------------------------------------------------------------------
// Peripheral TIM3: General purpose timers
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM3_CR1 (* ((volatile uint32_t *) (0x40000400 + 0)))

  // Field CKD: Clock division
    inline uint32_t TIM3_CR1_CKD (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM3_CR1_ARPE = 1U << 7 ;

  // Field CMS: Center-aligned mode selection
    inline uint32_t TIM3_CR1_CMS (const uint32_t inValue) {return (inValue & 0x3U) << 5 ; }

  // Field DIR: Direction
    const uint32_t TIM3_CR1_DIR = 1U << 4 ;

  // Field OPM: One-pulse mode
    const uint32_t TIM3_CR1_OPM = 1U << 3 ;

  // Field URS: Update request source
    const uint32_t TIM3_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM3_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM3_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define TIM3_CR2 (* ((volatile uint32_t *) (0x40000400 + 4)))

  // Field TI1S: TI1 selection
    const uint32_t TIM3_CR2_TI1S = 1U << 7 ;

  // Field MMS: Master mode selection
    inline uint32_t TIM3_CR2_MMS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field CCDS: Capture/compare DMA selection
    const uint32_t TIM3_CR2_CCDS = 1U << 3 ;

//------------------------------------------------------------------------------

//---  Register SMCR: slave mode control register
  #define TIM3_SMCR (* ((volatile uint32_t *) (0x40000400 + 8)))

  // Field ETP: External trigger polarity
    const uint32_t TIM3_SMCR_ETP = 1U << 15 ;

  // Field ECE: External clock enable
    const uint32_t TIM3_SMCR_ECE = 1U << 14 ;

  // Field ETPS: External trigger prescaler
    inline uint32_t TIM3_SMCR_ETPS (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field ETF: External trigger filter
    inline uint32_t TIM3_SMCR_ETF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field MSM: Master/Slave mode
    const uint32_t TIM3_SMCR_MSM = 1U << 7 ;

  // Field TS: Trigger selection
    inline uint32_t TIM3_SMCR_TS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SMS: Slave mode selection
    inline uint32_t TIM3_SMCR_SMS (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM3_DIER (* ((volatile uint32_t *) (0x40000400 + 12)))

  // Field TDE: Trigger DMA request enable
    const uint32_t TIM3_DIER_TDE = 1U << 14 ;

  // Field CC4DE: Capture/Compare 4 DMA request enable
    const uint32_t TIM3_DIER_CC4DE = 1U << 12 ;

  // Field CC3DE: Capture/Compare 3 DMA request enable
    const uint32_t TIM3_DIER_CC3DE = 1U << 11 ;

  // Field CC2DE: Capture/Compare 2 DMA request enable
    const uint32_t TIM3_DIER_CC2DE = 1U << 10 ;

  // Field CC1DE: Capture/Compare 1 DMA request enable
    const uint32_t TIM3_DIER_CC1DE = 1U << 9 ;

  // Field UDE: Update DMA request enable
    const uint32_t TIM3_DIER_UDE = 1U << 8 ;

  // Field TIE: Trigger interrupt enable
    const uint32_t TIM3_DIER_TIE = 1U << 6 ;

  // Field CC4IE: Capture/Compare 4 interrupt enable
    const uint32_t TIM3_DIER_CC4IE = 1U << 4 ;

  // Field CC3IE: Capture/Compare 3 interrupt enable
    const uint32_t TIM3_DIER_CC3IE = 1U << 3 ;

  // Field CC2IE: Capture/Compare 2 interrupt enable
    const uint32_t TIM3_DIER_CC2IE = 1U << 2 ;

  // Field CC1IE: Capture/Compare 1 interrupt enable
    const uint32_t TIM3_DIER_CC1IE = 1U << 1 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM3_DIER_UIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM3_SR (* ((volatile uint32_t *) (0x40000400 + 16)))

  // Field CC4OF: Capture/Compare 4 overcapture flag
    const uint32_t TIM3_SR_CC4OF = 1U << 12 ;

  // Field CC3OF: Capture/Compare 3 overcapture flag
    const uint32_t TIM3_SR_CC3OF = 1U << 11 ;

  // Field CC2OF: Capture/compare 2 overcapture flag
    const uint32_t TIM3_SR_CC2OF = 1U << 10 ;

  // Field CC1OF: Capture/Compare 1 overcapture flag
    const uint32_t TIM3_SR_CC1OF = 1U << 9 ;

  // Field TIF: Trigger interrupt flag
    const uint32_t TIM3_SR_TIF = 1U << 6 ;

  // Field CC4IF: Capture/Compare 4 interrupt flag
    const uint32_t TIM3_SR_CC4IF = 1U << 4 ;

  // Field CC3IF: Capture/Compare 3 interrupt flag
    const uint32_t TIM3_SR_CC3IF = 1U << 3 ;

  // Field CC2IF: Capture/Compare 2 interrupt flag
    const uint32_t TIM3_SR_CC2IF = 1U << 2 ;

  // Field CC1IF: Capture/compare 1 interrupt flag
    const uint32_t TIM3_SR_CC1IF = 1U << 1 ;

  // Field UIF: Update interrupt flag
    const uint32_t TIM3_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM3_EGR (* ((volatile uint32_t *) (0x40000400 + 20)))

  // Field TG: Trigger generation
    const uint32_t TIM3_EGR_TG = 1U << 6 ;

  // Field CC4G: Capture/compare 4 generation
    const uint32_t TIM3_EGR_CC4G = 1U << 4 ;

  // Field CC3G: Capture/compare 3 generation
    const uint32_t TIM3_EGR_CC3G = 1U << 3 ;

  // Field CC2G: Capture/compare 2 generation
    const uint32_t TIM3_EGR_CC2G = 1U << 2 ;

  // Field CC1G: Capture/compare 1 generation
    const uint32_t TIM3_EGR_CC1G = 1U << 1 ;

  // Field UG: Update generation
    const uint32_t TIM3_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  #define TIM3_CCMR1_Output (* ((volatile uint32_t *) (0x40000400 + 24)))

  // Field OC2CE: OC2CE
    const uint32_t TIM3_CCMR1_Output_OC2CE = 1U << 15 ;

  // Field OC2M: OC2M
    inline uint32_t TIM3_CCMR1_Output_OC2M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC2PE: OC2PE
    const uint32_t TIM3_CCMR1_Output_OC2PE = 1U << 11 ;

  // Field OC2FE: OC2FE
    const uint32_t TIM3_CCMR1_Output_OC2FE = 1U << 10 ;

  // Field CC2S: CC2S
    inline uint32_t TIM3_CCMR1_Output_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC1CE: OC1CE
    const uint32_t TIM3_CCMR1_Output_OC1CE = 1U << 7 ;

  // Field OC1M: OC1M
    inline uint32_t TIM3_CCMR1_Output_OC1M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC1PE: OC1PE
    const uint32_t TIM3_CCMR1_Output_OC1PE = 1U << 3 ;

  // Field OC1FE: OC1FE
    const uint32_t TIM3_CCMR1_Output_OC1FE = 1U << 2 ;

  // Field CC1S: CC1S
    inline uint32_t TIM3_CCMR1_Output_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  #define TIM3_CCMR1_Input (* ((volatile uint32_t *) (0x40000400 + 24)))

  // Field IC2F: Input capture 2 filter
    inline uint32_t TIM3_CCMR1_Input_IC2F (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field IC2PCS: Input capture 2 prescaler
    inline uint32_t TIM3_CCMR1_Input_IC2PCS (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC2S: Capture/Compare 2 selection
    inline uint32_t TIM3_CCMR1_Input_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC1F: Input capture 1 filter
    inline uint32_t TIM3_CCMR1_Input_IC1F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ICPCS: Input capture 1 prescaler
    inline uint32_t TIM3_CCMR1_Input_ICPCS (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM3_CCMR1_Input_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR2_Output: capture/compare mode register 2 (output mode)
  #define TIM3_CCMR2_Output (* ((volatile uint32_t *) (0x40000400 + 28)))

  // Field O24CE: O24CE
    const uint32_t TIM3_CCMR2_Output_O24CE = 1U << 15 ;

  // Field OC4M: OC4M
    inline uint32_t TIM3_CCMR2_Output_OC4M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC4PE: OC4PE
    const uint32_t TIM3_CCMR2_Output_OC4PE = 1U << 11 ;

  // Field OC4FE: OC4FE
    const uint32_t TIM3_CCMR2_Output_OC4FE = 1U << 10 ;

  // Field CC4S: CC4S
    inline uint32_t TIM3_CCMR2_Output_CC4S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC3CE: OC3CE
    const uint32_t TIM3_CCMR2_Output_OC3CE = 1U << 7 ;

  // Field OC3M: OC3M
    inline uint32_t TIM3_CCMR2_Output_OC3M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC3PE: OC3PE
    const uint32_t TIM3_CCMR2_Output_OC3PE = 1U << 3 ;

  // Field OC3FE: OC3FE
    const uint32_t TIM3_CCMR2_Output_OC3FE = 1U << 2 ;

  // Field CC3S: CC3S
    inline uint32_t TIM3_CCMR2_Output_CC3S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR2_Input: capture/compare mode register 2 (input mode)
  #define TIM3_CCMR2_Input (* ((volatile uint32_t *) (0x40000400 + 28)))

  // Field IC4F: Input capture 4 filter
    inline uint32_t TIM3_CCMR2_Input_IC4F (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field IC4PSC: Input capture 4 prescaler
    inline uint32_t TIM3_CCMR2_Input_IC4PSC (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC4S: Capture/Compare 4 selection
    inline uint32_t TIM3_CCMR2_Input_CC4S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC3F: Input capture 3 filter
    inline uint32_t TIM3_CCMR2_Input_IC3F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field IC3PSC: Input capture 3 prescaler
    inline uint32_t TIM3_CCMR2_Input_IC3PSC (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC3S: Capture/compare 3 selection
    inline uint32_t TIM3_CCMR2_Input_CC3S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCER: capture/compare enable register
  #define TIM3_CCER (* ((volatile uint32_t *) (0x40000400 + 32)))

  // Field CC4NP: Capture/Compare 4 output Polarity
    const uint32_t TIM3_CCER_CC4NP = 1U << 15 ;

  // Field CC4P: Capture/Compare 3 output Polarity
    const uint32_t TIM3_CCER_CC4P = 1U << 13 ;

  // Field CC4E: Capture/Compare 4 output enable
    const uint32_t TIM3_CCER_CC4E = 1U << 12 ;

  // Field CC3NP: Capture/Compare 3 output Polarity
    const uint32_t TIM3_CCER_CC3NP = 1U << 11 ;

  // Field CC3P: Capture/Compare 3 output Polarity
    const uint32_t TIM3_CCER_CC3P = 1U << 9 ;

  // Field CC3E: Capture/Compare 3 output enable
    const uint32_t TIM3_CCER_CC3E = 1U << 8 ;

  // Field CC2NP: Capture/Compare 2 output Polarity
    const uint32_t TIM3_CCER_CC2NP = 1U << 7 ;

  // Field CC2P: Capture/Compare 2 output Polarity
    const uint32_t TIM3_CCER_CC2P = 1U << 5 ;

  // Field CC2E: Capture/Compare 2 output enable
    const uint32_t TIM3_CCER_CC2E = 1U << 4 ;

  // Field CC1NP: Capture/Compare 1 output Polarity
    const uint32_t TIM3_CCER_CC1NP = 1U << 3 ;

  // Field CC1P: Capture/Compare 1 output Polarity
    const uint32_t TIM3_CCER_CC1P = 1U << 1 ;

  // Field CC1E: Capture/Compare 1 output enable
    const uint32_t TIM3_CCER_CC1E = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM3_CNT (* ((volatile uint32_t *) (0x40000400 + 36)))

  // Field CNT_H: High counter value
    inline uint32_t TIM3_CNT_CNT_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CNT_L: Low counter value
    inline uint32_t TIM3_CNT_CNT_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM3_PSC (* ((volatile uint32_t *) (0x40000400 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM3_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM3_ARR (* ((volatile uint32_t *) (0x40000400 + 44)))

  // Field ARR_H: High Auto-reload value
    inline uint32_t TIM3_ARR_ARR_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field ARR_L: Low Auto-reload value
    inline uint32_t TIM3_ARR_ARR_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR1: capture/compare register 1
  #define TIM3_CCR1 (* ((volatile uint32_t *) (0x40000400 + 52)))

  // Field CCR1_H: High Capture/Compare 1 value
    inline uint32_t TIM3_CCR1_CCR1_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR1_L: Low Capture/Compare 1 value
    inline uint32_t TIM3_CCR1_CCR1_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR2: capture/compare register 2
  #define TIM3_CCR2 (* ((volatile uint32_t *) (0x40000400 + 56)))

  // Field CCR2_H: High Capture/Compare 2 value
    inline uint32_t TIM3_CCR2_CCR2_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR2_L: Low Capture/Compare 2 value
    inline uint32_t TIM3_CCR2_CCR2_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR3: capture/compare register 3
  #define TIM3_CCR3 (* ((volatile uint32_t *) (0x40000400 + 60)))

  // Field CCR3_H: High Capture/Compare value
    inline uint32_t TIM3_CCR3_CCR3_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR3_L: Low Capture/Compare value
    inline uint32_t TIM3_CCR3_CCR3_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR4: capture/compare register 4
  #define TIM3_CCR4 (* ((volatile uint32_t *) (0x40000400 + 64)))

  // Field CCR4_H: High Capture/Compare value
    inline uint32_t TIM3_CCR4_CCR4_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR4_L: Low Capture/Compare value
    inline uint32_t TIM3_CCR4_CCR4_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DCR: DMA control register
  #define TIM3_DCR (* ((volatile uint32_t *) (0x40000400 + 72)))

  // Field DBL: DMA burst length
    inline uint32_t TIM3_DCR_DBL (const uint32_t inValue) {return (inValue & 0x1FU) << 8 ; }

  // Field DBA: DMA base address
    inline uint32_t TIM3_DCR_DBA (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMAR: DMA address for full transfer
  #define TIM3_DMAR (* ((volatile uint32_t *) (0x40000400 + 76)))

  // Field DMAB: DMA register for burst accesses
    inline uint32_t TIM3_DMAR_DMAB (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OR1: TIM3 option register 1
  #define TIM3_OR1 (* ((volatile uint32_t *) (0x40000400 + 80)))

  // Field TI1_RMP: Input Capture 1 remap
    inline uint32_t TIM3_OR1_TI1_RMP (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register OR2: TIM3 option register 2
  #define TIM3_OR2 (* ((volatile uint32_t *) (0x40000400 + 96)))

  // Field ETRSEL: ETR source selection
    inline uint32_t TIM3_OR2_ETRSEL (const uint32_t inValue) {return (inValue & 0x7U) << 14 ; }

//------------------------------------------------------------------------------
// Peripheral TIM4: General purpose timers
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM4_CR1 (* ((volatile uint32_t *) (0x40000800 + 0)))

  // Field CKD: Clock division
    inline uint32_t TIM4_CR1_CKD (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM4_CR1_ARPE = 1U << 7 ;

  // Field CMS: Center-aligned mode selection
    inline uint32_t TIM4_CR1_CMS (const uint32_t inValue) {return (inValue & 0x3U) << 5 ; }

  // Field DIR: Direction
    const uint32_t TIM4_CR1_DIR = 1U << 4 ;

  // Field OPM: One-pulse mode
    const uint32_t TIM4_CR1_OPM = 1U << 3 ;

  // Field URS: Update request source
    const uint32_t TIM4_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM4_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM4_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define TIM4_CR2 (* ((volatile uint32_t *) (0x40000800 + 4)))

  // Field TI1S: TI1 selection
    const uint32_t TIM4_CR2_TI1S = 1U << 7 ;

  // Field MMS: Master mode selection
    inline uint32_t TIM4_CR2_MMS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field CCDS: Capture/compare DMA selection
    const uint32_t TIM4_CR2_CCDS = 1U << 3 ;

//------------------------------------------------------------------------------

//---  Register SMCR: slave mode control register
  #define TIM4_SMCR (* ((volatile uint32_t *) (0x40000800 + 8)))

  // Field ETP: External trigger polarity
    const uint32_t TIM4_SMCR_ETP = 1U << 15 ;

  // Field ECE: External clock enable
    const uint32_t TIM4_SMCR_ECE = 1U << 14 ;

  // Field ETPS: External trigger prescaler
    inline uint32_t TIM4_SMCR_ETPS (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field ETF: External trigger filter
    inline uint32_t TIM4_SMCR_ETF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field MSM: Master/Slave mode
    const uint32_t TIM4_SMCR_MSM = 1U << 7 ;

  // Field TS: Trigger selection
    inline uint32_t TIM4_SMCR_TS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SMS: Slave mode selection
    inline uint32_t TIM4_SMCR_SMS (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM4_DIER (* ((volatile uint32_t *) (0x40000800 + 12)))

  // Field TDE: Trigger DMA request enable
    const uint32_t TIM4_DIER_TDE = 1U << 14 ;

  // Field CC4DE: Capture/Compare 4 DMA request enable
    const uint32_t TIM4_DIER_CC4DE = 1U << 12 ;

  // Field CC3DE: Capture/Compare 3 DMA request enable
    const uint32_t TIM4_DIER_CC3DE = 1U << 11 ;

  // Field CC2DE: Capture/Compare 2 DMA request enable
    const uint32_t TIM4_DIER_CC2DE = 1U << 10 ;

  // Field CC1DE: Capture/Compare 1 DMA request enable
    const uint32_t TIM4_DIER_CC1DE = 1U << 9 ;

  // Field UDE: Update DMA request enable
    const uint32_t TIM4_DIER_UDE = 1U << 8 ;

  // Field TIE: Trigger interrupt enable
    const uint32_t TIM4_DIER_TIE = 1U << 6 ;

  // Field CC4IE: Capture/Compare 4 interrupt enable
    const uint32_t TIM4_DIER_CC4IE = 1U << 4 ;

  // Field CC3IE: Capture/Compare 3 interrupt enable
    const uint32_t TIM4_DIER_CC3IE = 1U << 3 ;

  // Field CC2IE: Capture/Compare 2 interrupt enable
    const uint32_t TIM4_DIER_CC2IE = 1U << 2 ;

  // Field CC1IE: Capture/Compare 1 interrupt enable
    const uint32_t TIM4_DIER_CC1IE = 1U << 1 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM4_DIER_UIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM4_SR (* ((volatile uint32_t *) (0x40000800 + 16)))

  // Field CC4OF: Capture/Compare 4 overcapture flag
    const uint32_t TIM4_SR_CC4OF = 1U << 12 ;

  // Field CC3OF: Capture/Compare 3 overcapture flag
    const uint32_t TIM4_SR_CC3OF = 1U << 11 ;

  // Field CC2OF: Capture/compare 2 overcapture flag
    const uint32_t TIM4_SR_CC2OF = 1U << 10 ;

  // Field CC1OF: Capture/Compare 1 overcapture flag
    const uint32_t TIM4_SR_CC1OF = 1U << 9 ;

  // Field TIF: Trigger interrupt flag
    const uint32_t TIM4_SR_TIF = 1U << 6 ;

  // Field CC4IF: Capture/Compare 4 interrupt flag
    const uint32_t TIM4_SR_CC4IF = 1U << 4 ;

  // Field CC3IF: Capture/Compare 3 interrupt flag
    const uint32_t TIM4_SR_CC3IF = 1U << 3 ;

  // Field CC2IF: Capture/Compare 2 interrupt flag
    const uint32_t TIM4_SR_CC2IF = 1U << 2 ;

  // Field CC1IF: Capture/compare 1 interrupt flag
    const uint32_t TIM4_SR_CC1IF = 1U << 1 ;

  // Field UIF: Update interrupt flag
    const uint32_t TIM4_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM4_EGR (* ((volatile uint32_t *) (0x40000800 + 20)))

  // Field TG: Trigger generation
    const uint32_t TIM4_EGR_TG = 1U << 6 ;

  // Field CC4G: Capture/compare 4 generation
    const uint32_t TIM4_EGR_CC4G = 1U << 4 ;

  // Field CC3G: Capture/compare 3 generation
    const uint32_t TIM4_EGR_CC3G = 1U << 3 ;

  // Field CC2G: Capture/compare 2 generation
    const uint32_t TIM4_EGR_CC2G = 1U << 2 ;

  // Field CC1G: Capture/compare 1 generation
    const uint32_t TIM4_EGR_CC1G = 1U << 1 ;

  // Field UG: Update generation
    const uint32_t TIM4_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  #define TIM4_CCMR1_Output (* ((volatile uint32_t *) (0x40000800 + 24)))

  // Field OC2CE: OC2CE
    const uint32_t TIM4_CCMR1_Output_OC2CE = 1U << 15 ;

  // Field OC2M: OC2M
    inline uint32_t TIM4_CCMR1_Output_OC2M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC2PE: OC2PE
    const uint32_t TIM4_CCMR1_Output_OC2PE = 1U << 11 ;

  // Field OC2FE: OC2FE
    const uint32_t TIM4_CCMR1_Output_OC2FE = 1U << 10 ;

  // Field CC2S: CC2S
    inline uint32_t TIM4_CCMR1_Output_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC1CE: OC1CE
    const uint32_t TIM4_CCMR1_Output_OC1CE = 1U << 7 ;

  // Field OC1M: OC1M
    inline uint32_t TIM4_CCMR1_Output_OC1M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC1PE: OC1PE
    const uint32_t TIM4_CCMR1_Output_OC1PE = 1U << 3 ;

  // Field OC1FE: OC1FE
    const uint32_t TIM4_CCMR1_Output_OC1FE = 1U << 2 ;

  // Field CC1S: CC1S
    inline uint32_t TIM4_CCMR1_Output_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  #define TIM4_CCMR1_Input (* ((volatile uint32_t *) (0x40000800 + 24)))

  // Field IC2F: Input capture 2 filter
    inline uint32_t TIM4_CCMR1_Input_IC2F (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field IC2PCS: Input capture 2 prescaler
    inline uint32_t TIM4_CCMR1_Input_IC2PCS (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC2S: Capture/Compare 2 selection
    inline uint32_t TIM4_CCMR1_Input_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC1F: Input capture 1 filter
    inline uint32_t TIM4_CCMR1_Input_IC1F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ICPCS: Input capture 1 prescaler
    inline uint32_t TIM4_CCMR1_Input_ICPCS (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM4_CCMR1_Input_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR2_Output: capture/compare mode register 2 (output mode)
  #define TIM4_CCMR2_Output (* ((volatile uint32_t *) (0x40000800 + 28)))

  // Field O24CE: O24CE
    const uint32_t TIM4_CCMR2_Output_O24CE = 1U << 15 ;

  // Field OC4M: OC4M
    inline uint32_t TIM4_CCMR2_Output_OC4M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC4PE: OC4PE
    const uint32_t TIM4_CCMR2_Output_OC4PE = 1U << 11 ;

  // Field OC4FE: OC4FE
    const uint32_t TIM4_CCMR2_Output_OC4FE = 1U << 10 ;

  // Field CC4S: CC4S
    inline uint32_t TIM4_CCMR2_Output_CC4S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC3CE: OC3CE
    const uint32_t TIM4_CCMR2_Output_OC3CE = 1U << 7 ;

  // Field OC3M: OC3M
    inline uint32_t TIM4_CCMR2_Output_OC3M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC3PE: OC3PE
    const uint32_t TIM4_CCMR2_Output_OC3PE = 1U << 3 ;

  // Field OC3FE: OC3FE
    const uint32_t TIM4_CCMR2_Output_OC3FE = 1U << 2 ;

  // Field CC3S: CC3S
    inline uint32_t TIM4_CCMR2_Output_CC3S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR2_Input: capture/compare mode register 2 (input mode)
  #define TIM4_CCMR2_Input (* ((volatile uint32_t *) (0x40000800 + 28)))

  // Field IC4F: Input capture 4 filter
    inline uint32_t TIM4_CCMR2_Input_IC4F (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field IC4PSC: Input capture 4 prescaler
    inline uint32_t TIM4_CCMR2_Input_IC4PSC (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC4S: Capture/Compare 4 selection
    inline uint32_t TIM4_CCMR2_Input_CC4S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC3F: Input capture 3 filter
    inline uint32_t TIM4_CCMR2_Input_IC3F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field IC3PSC: Input capture 3 prescaler
    inline uint32_t TIM4_CCMR2_Input_IC3PSC (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC3S: Capture/compare 3 selection
    inline uint32_t TIM4_CCMR2_Input_CC3S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCER: capture/compare enable register
  #define TIM4_CCER (* ((volatile uint32_t *) (0x40000800 + 32)))

  // Field CC4NP: Capture/Compare 4 output Polarity
    const uint32_t TIM4_CCER_CC4NP = 1U << 15 ;

  // Field CC4P: Capture/Compare 3 output Polarity
    const uint32_t TIM4_CCER_CC4P = 1U << 13 ;

  // Field CC4E: Capture/Compare 4 output enable
    const uint32_t TIM4_CCER_CC4E = 1U << 12 ;

  // Field CC3NP: Capture/Compare 3 output Polarity
    const uint32_t TIM4_CCER_CC3NP = 1U << 11 ;

  // Field CC3P: Capture/Compare 3 output Polarity
    const uint32_t TIM4_CCER_CC3P = 1U << 9 ;

  // Field CC3E: Capture/Compare 3 output enable
    const uint32_t TIM4_CCER_CC3E = 1U << 8 ;

  // Field CC2NP: Capture/Compare 2 output Polarity
    const uint32_t TIM4_CCER_CC2NP = 1U << 7 ;

  // Field CC2P: Capture/Compare 2 output Polarity
    const uint32_t TIM4_CCER_CC2P = 1U << 5 ;

  // Field CC2E: Capture/Compare 2 output enable
    const uint32_t TIM4_CCER_CC2E = 1U << 4 ;

  // Field CC1NP: Capture/Compare 1 output Polarity
    const uint32_t TIM4_CCER_CC1NP = 1U << 3 ;

  // Field CC1P: Capture/Compare 1 output Polarity
    const uint32_t TIM4_CCER_CC1P = 1U << 1 ;

  // Field CC1E: Capture/Compare 1 output enable
    const uint32_t TIM4_CCER_CC1E = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM4_CNT (* ((volatile uint32_t *) (0x40000800 + 36)))

  // Field CNT_H: High counter value
    inline uint32_t TIM4_CNT_CNT_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CNT_L: Low counter value
    inline uint32_t TIM4_CNT_CNT_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM4_PSC (* ((volatile uint32_t *) (0x40000800 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM4_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM4_ARR (* ((volatile uint32_t *) (0x40000800 + 44)))

  // Field ARR_H: High Auto-reload value
    inline uint32_t TIM4_ARR_ARR_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field ARR_L: Low Auto-reload value
    inline uint32_t TIM4_ARR_ARR_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR1: capture/compare register 1
  #define TIM4_CCR1 (* ((volatile uint32_t *) (0x40000800 + 52)))

  // Field CCR1_H: High Capture/Compare 1 value
    inline uint32_t TIM4_CCR1_CCR1_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR1_L: Low Capture/Compare 1 value
    inline uint32_t TIM4_CCR1_CCR1_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR2: capture/compare register 2
  #define TIM4_CCR2 (* ((volatile uint32_t *) (0x40000800 + 56)))

  // Field CCR2_H: High Capture/Compare 2 value
    inline uint32_t TIM4_CCR2_CCR2_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR2_L: Low Capture/Compare 2 value
    inline uint32_t TIM4_CCR2_CCR2_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR3: capture/compare register 3
  #define TIM4_CCR3 (* ((volatile uint32_t *) (0x40000800 + 60)))

  // Field CCR3_H: High Capture/Compare value
    inline uint32_t TIM4_CCR3_CCR3_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR3_L: Low Capture/Compare value
    inline uint32_t TIM4_CCR3_CCR3_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR4: capture/compare register 4
  #define TIM4_CCR4 (* ((volatile uint32_t *) (0x40000800 + 64)))

  // Field CCR4_H: High Capture/Compare value
    inline uint32_t TIM4_CCR4_CCR4_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR4_L: Low Capture/Compare value
    inline uint32_t TIM4_CCR4_CCR4_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DCR: DMA control register
  #define TIM4_DCR (* ((volatile uint32_t *) (0x40000800 + 72)))

  // Field DBL: DMA burst length
    inline uint32_t TIM4_DCR_DBL (const uint32_t inValue) {return (inValue & 0x1FU) << 8 ; }

  // Field DBA: DMA base address
    inline uint32_t TIM4_DCR_DBA (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMAR: DMA address for full transfer
  #define TIM4_DMAR (* ((volatile uint32_t *) (0x40000800 + 76)))

  // Field DMAB: DMA register for burst accesses
    inline uint32_t TIM4_DMAR_DMAB (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral TIM5
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM5_CR1 (* ((volatile uint32_t *) (0x40000C00 + 0)))

  // Field CKD: Clock division
    inline uint32_t TIM5_CR1_CKD (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM5_CR1_ARPE = 1U << 7 ;

  // Field CMS: Center-aligned mode selection
    inline uint32_t TIM5_CR1_CMS (const uint32_t inValue) {return (inValue & 0x3U) << 5 ; }

  // Field DIR: Direction
    const uint32_t TIM5_CR1_DIR = 1U << 4 ;

  // Field OPM: One-pulse mode
    const uint32_t TIM5_CR1_OPM = 1U << 3 ;

  // Field URS: Update request source
    const uint32_t TIM5_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM5_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM5_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define TIM5_CR2 (* ((volatile uint32_t *) (0x40000C00 + 4)))

  // Field TI1S: TI1 selection
    const uint32_t TIM5_CR2_TI1S = 1U << 7 ;

  // Field MMS: Master mode selection
    inline uint32_t TIM5_CR2_MMS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field CCDS: Capture/compare DMA selection
    const uint32_t TIM5_CR2_CCDS = 1U << 3 ;

//------------------------------------------------------------------------------

//---  Register SMCR: slave mode control register
  #define TIM5_SMCR (* ((volatile uint32_t *) (0x40000C00 + 8)))

  // Field ETP: External trigger polarity
    const uint32_t TIM5_SMCR_ETP = 1U << 15 ;

  // Field ECE: External clock enable
    const uint32_t TIM5_SMCR_ECE = 1U << 14 ;

  // Field ETPS: External trigger prescaler
    inline uint32_t TIM5_SMCR_ETPS (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field ETF: External trigger filter
    inline uint32_t TIM5_SMCR_ETF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field MSM: Master/Slave mode
    const uint32_t TIM5_SMCR_MSM = 1U << 7 ;

  // Field TS: Trigger selection
    inline uint32_t TIM5_SMCR_TS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SMS: Slave mode selection
    inline uint32_t TIM5_SMCR_SMS (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM5_DIER (* ((volatile uint32_t *) (0x40000C00 + 12)))

  // Field TDE: Trigger DMA request enable
    const uint32_t TIM5_DIER_TDE = 1U << 14 ;

  // Field CC4DE: Capture/Compare 4 DMA request enable
    const uint32_t TIM5_DIER_CC4DE = 1U << 12 ;

  // Field CC3DE: Capture/Compare 3 DMA request enable
    const uint32_t TIM5_DIER_CC3DE = 1U << 11 ;

  // Field CC2DE: Capture/Compare 2 DMA request enable
    const uint32_t TIM5_DIER_CC2DE = 1U << 10 ;

  // Field CC1DE: Capture/Compare 1 DMA request enable
    const uint32_t TIM5_DIER_CC1DE = 1U << 9 ;

  // Field UDE: Update DMA request enable
    const uint32_t TIM5_DIER_UDE = 1U << 8 ;

  // Field TIE: Trigger interrupt enable
    const uint32_t TIM5_DIER_TIE = 1U << 6 ;

  // Field CC4IE: Capture/Compare 4 interrupt enable
    const uint32_t TIM5_DIER_CC4IE = 1U << 4 ;

  // Field CC3IE: Capture/Compare 3 interrupt enable
    const uint32_t TIM5_DIER_CC3IE = 1U << 3 ;

  // Field CC2IE: Capture/Compare 2 interrupt enable
    const uint32_t TIM5_DIER_CC2IE = 1U << 2 ;

  // Field CC1IE: Capture/Compare 1 interrupt enable
    const uint32_t TIM5_DIER_CC1IE = 1U << 1 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM5_DIER_UIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM5_SR (* ((volatile uint32_t *) (0x40000C00 + 16)))

  // Field CC4OF: Capture/Compare 4 overcapture flag
    const uint32_t TIM5_SR_CC4OF = 1U << 12 ;

  // Field CC3OF: Capture/Compare 3 overcapture flag
    const uint32_t TIM5_SR_CC3OF = 1U << 11 ;

  // Field CC2OF: Capture/compare 2 overcapture flag
    const uint32_t TIM5_SR_CC2OF = 1U << 10 ;

  // Field CC1OF: Capture/Compare 1 overcapture flag
    const uint32_t TIM5_SR_CC1OF = 1U << 9 ;

  // Field TIF: Trigger interrupt flag
    const uint32_t TIM5_SR_TIF = 1U << 6 ;

  // Field CC4IF: Capture/Compare 4 interrupt flag
    const uint32_t TIM5_SR_CC4IF = 1U << 4 ;

  // Field CC3IF: Capture/Compare 3 interrupt flag
    const uint32_t TIM5_SR_CC3IF = 1U << 3 ;

  // Field CC2IF: Capture/Compare 2 interrupt flag
    const uint32_t TIM5_SR_CC2IF = 1U << 2 ;

  // Field CC1IF: Capture/compare 1 interrupt flag
    const uint32_t TIM5_SR_CC1IF = 1U << 1 ;

  // Field UIF: Update interrupt flag
    const uint32_t TIM5_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM5_EGR (* ((volatile uint32_t *) (0x40000C00 + 20)))

  // Field TG: Trigger generation
    const uint32_t TIM5_EGR_TG = 1U << 6 ;

  // Field CC4G: Capture/compare 4 generation
    const uint32_t TIM5_EGR_CC4G = 1U << 4 ;

  // Field CC3G: Capture/compare 3 generation
    const uint32_t TIM5_EGR_CC3G = 1U << 3 ;

  // Field CC2G: Capture/compare 2 generation
    const uint32_t TIM5_EGR_CC2G = 1U << 2 ;

  // Field CC1G: Capture/compare 1 generation
    const uint32_t TIM5_EGR_CC1G = 1U << 1 ;

  // Field UG: Update generation
    const uint32_t TIM5_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  #define TIM5_CCMR1_Output (* ((volatile uint32_t *) (0x40000C00 + 24)))

  // Field OC2CE: OC2CE
    const uint32_t TIM5_CCMR1_Output_OC2CE = 1U << 15 ;

  // Field OC2M: OC2M
    inline uint32_t TIM5_CCMR1_Output_OC2M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC2PE: OC2PE
    const uint32_t TIM5_CCMR1_Output_OC2PE = 1U << 11 ;

  // Field OC2FE: OC2FE
    const uint32_t TIM5_CCMR1_Output_OC2FE = 1U << 10 ;

  // Field CC2S: CC2S
    inline uint32_t TIM5_CCMR1_Output_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC1CE: OC1CE
    const uint32_t TIM5_CCMR1_Output_OC1CE = 1U << 7 ;

  // Field OC1M: OC1M
    inline uint32_t TIM5_CCMR1_Output_OC1M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC1PE: OC1PE
    const uint32_t TIM5_CCMR1_Output_OC1PE = 1U << 3 ;

  // Field OC1FE: OC1FE
    const uint32_t TIM5_CCMR1_Output_OC1FE = 1U << 2 ;

  // Field CC1S: CC1S
    inline uint32_t TIM5_CCMR1_Output_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  #define TIM5_CCMR1_Input (* ((volatile uint32_t *) (0x40000C00 + 24)))

  // Field IC2F: Input capture 2 filter
    inline uint32_t TIM5_CCMR1_Input_IC2F (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field IC2PCS: Input capture 2 prescaler
    inline uint32_t TIM5_CCMR1_Input_IC2PCS (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC2S: Capture/Compare 2 selection
    inline uint32_t TIM5_CCMR1_Input_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC1F: Input capture 1 filter
    inline uint32_t TIM5_CCMR1_Input_IC1F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ICPCS: Input capture 1 prescaler
    inline uint32_t TIM5_CCMR1_Input_ICPCS (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM5_CCMR1_Input_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR2_Output: capture/compare mode register 2 (output mode)
  #define TIM5_CCMR2_Output (* ((volatile uint32_t *) (0x40000C00 + 28)))

  // Field O24CE: O24CE
    const uint32_t TIM5_CCMR2_Output_O24CE = 1U << 15 ;

  // Field OC4M: OC4M
    inline uint32_t TIM5_CCMR2_Output_OC4M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC4PE: OC4PE
    const uint32_t TIM5_CCMR2_Output_OC4PE = 1U << 11 ;

  // Field OC4FE: OC4FE
    const uint32_t TIM5_CCMR2_Output_OC4FE = 1U << 10 ;

  // Field CC4S: CC4S
    inline uint32_t TIM5_CCMR2_Output_CC4S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC3CE: OC3CE
    const uint32_t TIM5_CCMR2_Output_OC3CE = 1U << 7 ;

  // Field OC3M: OC3M
    inline uint32_t TIM5_CCMR2_Output_OC3M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC3PE: OC3PE
    const uint32_t TIM5_CCMR2_Output_OC3PE = 1U << 3 ;

  // Field OC3FE: OC3FE
    const uint32_t TIM5_CCMR2_Output_OC3FE = 1U << 2 ;

  // Field CC3S: CC3S
    inline uint32_t TIM5_CCMR2_Output_CC3S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR2_Input: capture/compare mode register 2 (input mode)
  #define TIM5_CCMR2_Input (* ((volatile uint32_t *) (0x40000C00 + 28)))

  // Field IC4F: Input capture 4 filter
    inline uint32_t TIM5_CCMR2_Input_IC4F (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field IC4PSC: Input capture 4 prescaler
    inline uint32_t TIM5_CCMR2_Input_IC4PSC (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC4S: Capture/Compare 4 selection
    inline uint32_t TIM5_CCMR2_Input_CC4S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC3F: Input capture 3 filter
    inline uint32_t TIM5_CCMR2_Input_IC3F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field IC3PSC: Input capture 3 prescaler
    inline uint32_t TIM5_CCMR2_Input_IC3PSC (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC3S: Capture/compare 3 selection
    inline uint32_t TIM5_CCMR2_Input_CC3S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCER: capture/compare enable register
  #define TIM5_CCER (* ((volatile uint32_t *) (0x40000C00 + 32)))

  // Field CC4NP: Capture/Compare 4 output Polarity
    const uint32_t TIM5_CCER_CC4NP = 1U << 15 ;

  // Field CC4P: Capture/Compare 3 output Polarity
    const uint32_t TIM5_CCER_CC4P = 1U << 13 ;

  // Field CC4E: Capture/Compare 4 output enable
    const uint32_t TIM5_CCER_CC4E = 1U << 12 ;

  // Field CC3NP: Capture/Compare 3 output Polarity
    const uint32_t TIM5_CCER_CC3NP = 1U << 11 ;

  // Field CC3P: Capture/Compare 3 output Polarity
    const uint32_t TIM5_CCER_CC3P = 1U << 9 ;

  // Field CC3E: Capture/Compare 3 output enable
    const uint32_t TIM5_CCER_CC3E = 1U << 8 ;

  // Field CC2NP: Capture/Compare 2 output Polarity
    const uint32_t TIM5_CCER_CC2NP = 1U << 7 ;

  // Field CC2P: Capture/Compare 2 output Polarity
    const uint32_t TIM5_CCER_CC2P = 1U << 5 ;

  // Field CC2E: Capture/Compare 2 output enable
    const uint32_t TIM5_CCER_CC2E = 1U << 4 ;

  // Field CC1NP: Capture/Compare 1 output Polarity
    const uint32_t TIM5_CCER_CC1NP = 1U << 3 ;

  // Field CC1P: Capture/Compare 1 output Polarity
    const uint32_t TIM5_CCER_CC1P = 1U << 1 ;

  // Field CC1E: Capture/Compare 1 output enable
    const uint32_t TIM5_CCER_CC1E = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM5_CNT (* ((volatile uint32_t *) (0x40000C00 + 36)))

  // Field CNT_H: High counter value
    inline uint32_t TIM5_CNT_CNT_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CNT_L: Low counter value
    inline uint32_t TIM5_CNT_CNT_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM5_PSC (* ((volatile uint32_t *) (0x40000C00 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM5_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM5_ARR (* ((volatile uint32_t *) (0x40000C00 + 44)))

  // Field ARR_H: High Auto-reload value
    inline uint32_t TIM5_ARR_ARR_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field ARR_L: Low Auto-reload value
    inline uint32_t TIM5_ARR_ARR_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR1: capture/compare register 1
  #define TIM5_CCR1 (* ((volatile uint32_t *) (0x40000C00 + 52)))

  // Field CCR1_H: High Capture/Compare 1 value
    inline uint32_t TIM5_CCR1_CCR1_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR1_L: Low Capture/Compare 1 value
    inline uint32_t TIM5_CCR1_CCR1_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR2: capture/compare register 2
  #define TIM5_CCR2 (* ((volatile uint32_t *) (0x40000C00 + 56)))

  // Field CCR2_H: High Capture/Compare 2 value
    inline uint32_t TIM5_CCR2_CCR2_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR2_L: Low Capture/Compare 2 value
    inline uint32_t TIM5_CCR2_CCR2_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR3: capture/compare register 3
  #define TIM5_CCR3 (* ((volatile uint32_t *) (0x40000C00 + 60)))

  // Field CCR3_H: High Capture/Compare value
    inline uint32_t TIM5_CCR3_CCR3_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR3_L: Low Capture/Compare value
    inline uint32_t TIM5_CCR3_CCR3_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR4: capture/compare register 4
  #define TIM5_CCR4 (* ((volatile uint32_t *) (0x40000C00 + 64)))

  // Field CCR4_H: High Capture/Compare value
    inline uint32_t TIM5_CCR4_CCR4_H (const uint32_t inValue) {return (inValue & 0xFFFFU) << 16 ; }

  // Field CCR4_L: Low Capture/Compare value
    inline uint32_t TIM5_CCR4_CCR4_L (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DCR: DMA control register
  #define TIM5_DCR (* ((volatile uint32_t *) (0x40000C00 + 72)))

  // Field DBL: DMA burst length
    inline uint32_t TIM5_DCR_DBL (const uint32_t inValue) {return (inValue & 0x1FU) << 8 ; }

  // Field DBA: DMA base address
    inline uint32_t TIM5_DCR_DBA (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMAR: DMA address for full transfer
  #define TIM5_DMAR (* ((volatile uint32_t *) (0x40000C00 + 76)))

  // Field DMAB: DMA register for burst accesses
    inline uint32_t TIM5_DMAR_DMAB (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral TIM6: Basic timers
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM6_CR1 (* ((volatile uint32_t *) (0x40001000 + 0)))

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM6_CR1_ARPE = 1U << 7 ;

  // Field OPM: One-pulse mode
    const uint32_t TIM6_CR1_OPM = 1U << 3 ;

  // Field URS: Update request source
    const uint32_t TIM6_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM6_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM6_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define TIM6_CR2 (* ((volatile uint32_t *) (0x40001000 + 4)))

  // Field MMS: Master mode selection
    inline uint32_t TIM6_CR2_MMS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM6_DIER (* ((volatile uint32_t *) (0x40001000 + 12)))

  // Field UDE: Update DMA request enable
    const uint32_t TIM6_DIER_UDE = 1U << 8 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM6_DIER_UIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM6_SR (* ((volatile uint32_t *) (0x40001000 + 16)))

  // Field UIF: Update interrupt flag
    const uint32_t TIM6_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM6_EGR (* ((volatile uint32_t *) (0x40001000 + 20)))

  // Field UG: Update generation
    const uint32_t TIM6_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM6_CNT (* ((volatile uint32_t *) (0x40001000 + 36)))

  // Field CNT: Low counter value
    inline uint32_t TIM6_CNT_CNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM6_PSC (* ((volatile uint32_t *) (0x40001000 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM6_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM6_ARR (* ((volatile uint32_t *) (0x40001000 + 44)))

  // Field ARR: Low Auto-reload value
    inline uint32_t TIM6_ARR_ARR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral TIM7
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM7_CR1 (* ((volatile uint32_t *) (0x40001400 + 0)))

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM7_CR1_ARPE = 1U << 7 ;

  // Field OPM: One-pulse mode
    const uint32_t TIM7_CR1_OPM = 1U << 3 ;

  // Field URS: Update request source
    const uint32_t TIM7_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM7_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM7_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define TIM7_CR2 (* ((volatile uint32_t *) (0x40001400 + 4)))

  // Field MMS: Master mode selection
    inline uint32_t TIM7_CR2_MMS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM7_DIER (* ((volatile uint32_t *) (0x40001400 + 12)))

  // Field UDE: Update DMA request enable
    const uint32_t TIM7_DIER_UDE = 1U << 8 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM7_DIER_UIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM7_SR (* ((volatile uint32_t *) (0x40001400 + 16)))

  // Field UIF: Update interrupt flag
    const uint32_t TIM7_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM7_EGR (* ((volatile uint32_t *) (0x40001400 + 20)))

  // Field UG: Update generation
    const uint32_t TIM7_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM7_CNT (* ((volatile uint32_t *) (0x40001400 + 36)))

  // Field CNT: Low counter value
    inline uint32_t TIM7_CNT_CNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM7_PSC (* ((volatile uint32_t *) (0x40001400 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM7_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM7_ARR (* ((volatile uint32_t *) (0x40001400 + 44)))

  // Field ARR: Low Auto-reload value
    inline uint32_t TIM7_ARR_ARR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral TIM8
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM8_CR1 (* ((volatile uint32_t *) (0x40010400 + 0)))

  // Field CKD: Clock division
    inline uint32_t TIM8_CR1_CKD (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM8_CR1_ARPE = 1U << 7 ;

  // Field CMS: Center-aligned mode selection
    inline uint32_t TIM8_CR1_CMS (const uint32_t inValue) {return (inValue & 0x3U) << 5 ; }

  // Field DIR: Direction
    const uint32_t TIM8_CR1_DIR = 1U << 4 ;

  // Field OPM: One-pulse mode
    const uint32_t TIM8_CR1_OPM = 1U << 3 ;

  // Field URS: Update request source
    const uint32_t TIM8_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM8_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM8_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: control register 2
  #define TIM8_CR2 (* ((volatile uint32_t *) (0x40010400 + 4)))

  // Field OIS4: Output Idle state 4
    const uint32_t TIM8_CR2_OIS4 = 1U << 14 ;

  // Field OIS3N: Output Idle state 3
    const uint32_t TIM8_CR2_OIS3N = 1U << 13 ;

  // Field OIS3: Output Idle state 3
    const uint32_t TIM8_CR2_OIS3 = 1U << 12 ;

  // Field OIS2N: Output Idle state 2
    const uint32_t TIM8_CR2_OIS2N = 1U << 11 ;

  // Field OIS2: Output Idle state 2
    const uint32_t TIM8_CR2_OIS2 = 1U << 10 ;

  // Field OIS1N: Output Idle state 1
    const uint32_t TIM8_CR2_OIS1N = 1U << 9 ;

  // Field OIS1: Output Idle state 1
    const uint32_t TIM8_CR2_OIS1 = 1U << 8 ;

  // Field TI1S: TI1 selection
    const uint32_t TIM8_CR2_TI1S = 1U << 7 ;

  // Field MMS: Master mode selection
    inline uint32_t TIM8_CR2_MMS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field CCDS: Capture/compare DMA selection
    const uint32_t TIM8_CR2_CCDS = 1U << 3 ;

  // Field CCUS: Capture/compare control update selection
    const uint32_t TIM8_CR2_CCUS = 1U << 2 ;

  // Field CCPC: Capture/compare preloaded control
    const uint32_t TIM8_CR2_CCPC = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SMCR: slave mode control register
  #define TIM8_SMCR (* ((volatile uint32_t *) (0x40010400 + 8)))

  // Field ETP: External trigger polarity
    const uint32_t TIM8_SMCR_ETP = 1U << 15 ;

  // Field ECE: External clock enable
    const uint32_t TIM8_SMCR_ECE = 1U << 14 ;

  // Field ETPS: External trigger prescaler
    inline uint32_t TIM8_SMCR_ETPS (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field ETF: External trigger filter
    inline uint32_t TIM8_SMCR_ETF (const uint32_t inValue) {return (inValue & 0xFU) << 8 ; }

  // Field MSM: Master/Slave mode
    const uint32_t TIM8_SMCR_MSM = 1U << 7 ;

  // Field TS: Trigger selection
    inline uint32_t TIM8_SMCR_TS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SMS: Slave mode selection
    inline uint32_t TIM8_SMCR_SMS (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM8_DIER (* ((volatile uint32_t *) (0x40010400 + 12)))

  // Field TDE: Trigger DMA request enable
    const uint32_t TIM8_DIER_TDE = 1U << 14 ;

  // Field COMDE: COM DMA request enable
    const uint32_t TIM8_DIER_COMDE = 1U << 13 ;

  // Field CC4DE: Capture/Compare 4 DMA request enable
    const uint32_t TIM8_DIER_CC4DE = 1U << 12 ;

  // Field CC3DE: Capture/Compare 3 DMA request enable
    const uint32_t TIM8_DIER_CC3DE = 1U << 11 ;

  // Field CC2DE: Capture/Compare 2 DMA request enable
    const uint32_t TIM8_DIER_CC2DE = 1U << 10 ;

  // Field CC1DE: Capture/Compare 1 DMA request enable
    const uint32_t TIM8_DIER_CC1DE = 1U << 9 ;

  // Field UDE: Update DMA request enable
    const uint32_t TIM8_DIER_UDE = 1U << 8 ;

  // Field TIE: Trigger interrupt enable
    const uint32_t TIM8_DIER_TIE = 1U << 6 ;

  // Field CC4IE: Capture/Compare 4 interrupt enable
    const uint32_t TIM8_DIER_CC4IE = 1U << 4 ;

  // Field CC3IE: Capture/Compare 3 interrupt enable
    const uint32_t TIM8_DIER_CC3IE = 1U << 3 ;

  // Field CC2IE: Capture/Compare 2 interrupt enable
    const uint32_t TIM8_DIER_CC2IE = 1U << 2 ;

  // Field CC1IE: Capture/Compare 1 interrupt enable
    const uint32_t TIM8_DIER_CC1IE = 1U << 1 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM8_DIER_UIE = 1U << 0 ;

  // Field BIE: Break interrupt enable
    const uint32_t TIM8_DIER_BIE = 1U << 7 ;

  // Field COMIE: COM interrupt enable
    const uint32_t TIM8_DIER_COMIE = 1U << 5 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM8_SR (* ((volatile uint32_t *) (0x40010400 + 16)))

  // Field CC4OF: Capture/Compare 4 overcapture flag
    const uint32_t TIM8_SR_CC4OF = 1U << 12 ;

  // Field CC3OF: Capture/Compare 3 overcapture flag
    const uint32_t TIM8_SR_CC3OF = 1U << 11 ;

  // Field CC2OF: Capture/compare 2 overcapture flag
    const uint32_t TIM8_SR_CC2OF = 1U << 10 ;

  // Field CC1OF: Capture/Compare 1 overcapture flag
    const uint32_t TIM8_SR_CC1OF = 1U << 9 ;

  // Field BIF: Break interrupt flag
    const uint32_t TIM8_SR_BIF = 1U << 7 ;

  // Field TIF: Trigger interrupt flag
    const uint32_t TIM8_SR_TIF = 1U << 6 ;

  // Field COMIF: COM interrupt flag
    const uint32_t TIM8_SR_COMIF = 1U << 5 ;

  // Field CC4IF: Capture/Compare 4 interrupt flag
    const uint32_t TIM8_SR_CC4IF = 1U << 4 ;

  // Field CC3IF: Capture/Compare 3 interrupt flag
    const uint32_t TIM8_SR_CC3IF = 1U << 3 ;

  // Field CC2IF: Capture/Compare 2 interrupt flag
    const uint32_t TIM8_SR_CC2IF = 1U << 2 ;

  // Field CC1IF: Capture/compare 1 interrupt flag
    const uint32_t TIM8_SR_CC1IF = 1U << 1 ;

  // Field UIF: Update interrupt flag
    const uint32_t TIM8_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM8_EGR (* ((volatile uint32_t *) (0x40010400 + 20)))

  // Field BG: Break generation
    const uint32_t TIM8_EGR_BG = 1U << 7 ;

  // Field TG: Trigger generation
    const uint32_t TIM8_EGR_TG = 1U << 6 ;

  // Field COMG: Capture/Compare control update generation
    const uint32_t TIM8_EGR_COMG = 1U << 5 ;

  // Field CC4G: Capture/compare 4 generation
    const uint32_t TIM8_EGR_CC4G = 1U << 4 ;

  // Field CC3G: Capture/compare 3 generation
    const uint32_t TIM8_EGR_CC3G = 1U << 3 ;

  // Field CC2G: Capture/compare 2 generation
    const uint32_t TIM8_EGR_CC2G = 1U << 2 ;

  // Field CC1G: Capture/compare 1 generation
    const uint32_t TIM8_EGR_CC1G = 1U << 1 ;

  // Field UG: Update generation
    const uint32_t TIM8_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  #define TIM8_CCMR1_Output (* ((volatile uint32_t *) (0x40010400 + 24)))

  // Field OC2CE: Output Compare 2 clear enable
    const uint32_t TIM8_CCMR1_Output_OC2CE = 1U << 15 ;

  // Field OC2M: Output Compare 2 mode
    inline uint32_t TIM8_CCMR1_Output_OC2M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC2PE: Output Compare 2 preload enable
    const uint32_t TIM8_CCMR1_Output_OC2PE = 1U << 11 ;

  // Field OC2FE: Output Compare 2 fast enable
    const uint32_t TIM8_CCMR1_Output_OC2FE = 1U << 10 ;

  // Field CC2S: Capture/Compare 2 selection
    inline uint32_t TIM8_CCMR1_Output_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC1CE: Output Compare 1 clear enable
    const uint32_t TIM8_CCMR1_Output_OC1CE = 1U << 7 ;

  // Field OC1M: Output Compare 1 mode
    inline uint32_t TIM8_CCMR1_Output_OC1M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC1PE: Output Compare 1 preload enable
    const uint32_t TIM8_CCMR1_Output_OC1PE = 1U << 3 ;

  // Field OC1FE: Output Compare 1 fast enable
    const uint32_t TIM8_CCMR1_Output_OC1FE = 1U << 2 ;

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM8_CCMR1_Output_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  #define TIM8_CCMR1_Input (* ((volatile uint32_t *) (0x40010400 + 24)))

  // Field IC2F: Input capture 2 filter
    inline uint32_t TIM8_CCMR1_Input_IC2F (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field IC2PCS: Input capture 2 prescaler
    inline uint32_t TIM8_CCMR1_Input_IC2PCS (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC2S: Capture/Compare 2 selection
    inline uint32_t TIM8_CCMR1_Input_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC1F: Input capture 1 filter
    inline uint32_t TIM8_CCMR1_Input_IC1F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field ICPCS: Input capture 1 prescaler
    inline uint32_t TIM8_CCMR1_Input_ICPCS (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM8_CCMR1_Input_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR2_Output: capture/compare mode register 2 (output mode)
  #define TIM8_CCMR2_Output (* ((volatile uint32_t *) (0x40010400 + 28)))

  // Field OC4CE: Output compare 4 clear enable
    const uint32_t TIM8_CCMR2_Output_OC4CE = 1U << 15 ;

  // Field OC4M: Output compare 4 mode
    inline uint32_t TIM8_CCMR2_Output_OC4M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC4PE: Output compare 4 preload enable
    const uint32_t TIM8_CCMR2_Output_OC4PE = 1U << 11 ;

  // Field OC4FE: Output compare 4 fast enable
    const uint32_t TIM8_CCMR2_Output_OC4FE = 1U << 10 ;

  // Field CC4S: Capture/Compare 4 selection
    inline uint32_t TIM8_CCMR2_Output_CC4S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC3CE: Output compare 3 clear enable
    const uint32_t TIM8_CCMR2_Output_OC3CE = 1U << 7 ;

  // Field OC3M: Output compare 3 mode
    inline uint32_t TIM8_CCMR2_Output_OC3M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC3PE: Output compare 3 preload enable
    const uint32_t TIM8_CCMR2_Output_OC3PE = 1U << 3 ;

  // Field OC3FE: Output compare 3 fast enable
    const uint32_t TIM8_CCMR2_Output_OC3FE = 1U << 2 ;

  // Field CC3S: Capture/Compare 3 selection
    inline uint32_t TIM8_CCMR2_Output_CC3S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR2_Input: capture/compare mode register 2 (input mode)
  #define TIM8_CCMR2_Input (* ((volatile uint32_t *) (0x40010400 + 28)))

  // Field IC4F: Input capture 4 filter
    inline uint32_t TIM8_CCMR2_Input_IC4F (const uint32_t inValue) {return (inValue & 0xFU) << 12 ; }

  // Field IC4PSC: Input capture 4 prescaler
    inline uint32_t TIM8_CCMR2_Input_IC4PSC (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC4S: Capture/Compare 4 selection
    inline uint32_t TIM8_CCMR2_Input_CC4S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC3F: Input capture 3 filter
    inline uint32_t TIM8_CCMR2_Input_IC3F (const uint32_t inValue) {return (inValue & 0xFU) << 4 ; }

  // Field IC3PSC: Input capture 3 prescaler
    inline uint32_t TIM8_CCMR2_Input_IC3PSC (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC3S: Capture/compare 3 selection
    inline uint32_t TIM8_CCMR2_Input_CC3S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCER: capture/compare enable register
  #define TIM8_CCER (* ((volatile uint32_t *) (0x40010400 + 32)))

  // Field CC4P: Capture/Compare 3 output Polarity
    const uint32_t TIM8_CCER_CC4P = 1U << 13 ;

  // Field CC4E: Capture/Compare 4 output enable
    const uint32_t TIM8_CCER_CC4E = 1U << 12 ;

  // Field CC3NP: Capture/Compare 3 output Polarity
    const uint32_t TIM8_CCER_CC3NP = 1U << 11 ;

  // Field CC3NE: Capture/Compare 3 complementary output enable
    const uint32_t TIM8_CCER_CC3NE = 1U << 10 ;

  // Field CC3P: Capture/Compare 3 output Polarity
    const uint32_t TIM8_CCER_CC3P = 1U << 9 ;

  // Field CC3E: Capture/Compare 3 output enable
    const uint32_t TIM8_CCER_CC3E = 1U << 8 ;

  // Field CC2NP: Capture/Compare 2 output Polarity
    const uint32_t TIM8_CCER_CC2NP = 1U << 7 ;

  // Field CC2NE: Capture/Compare 2 complementary output enable
    const uint32_t TIM8_CCER_CC2NE = 1U << 6 ;

  // Field CC2P: Capture/Compare 2 output Polarity
    const uint32_t TIM8_CCER_CC2P = 1U << 5 ;

  // Field CC2E: Capture/Compare 2 output enable
    const uint32_t TIM8_CCER_CC2E = 1U << 4 ;

  // Field CC1NP: Capture/Compare 1 output Polarity
    const uint32_t TIM8_CCER_CC1NP = 1U << 3 ;

  // Field CC1NE: Capture/Compare 1 complementary output enable
    const uint32_t TIM8_CCER_CC1NE = 1U << 2 ;

  // Field CC1P: Capture/Compare 1 output Polarity
    const uint32_t TIM8_CCER_CC1P = 1U << 1 ;

  // Field CC1E: Capture/Compare 1 output enable
    const uint32_t TIM8_CCER_CC1E = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM8_CNT (* ((volatile uint32_t *) (0x40010400 + 36)))

  // Field CNT: counter value
    inline uint32_t TIM8_CNT_CNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM8_PSC (* ((volatile uint32_t *) (0x40010400 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM8_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM8_ARR (* ((volatile uint32_t *) (0x40010400 + 44)))

  // Field ARR: Auto-reload value
    inline uint32_t TIM8_ARR_ARR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR1: capture/compare register 1
  #define TIM8_CCR1 (* ((volatile uint32_t *) (0x40010400 + 52)))

  // Field CCR1: Capture/Compare 1 value
    inline uint32_t TIM8_CCR1_CCR1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR2: capture/compare register 2
  #define TIM8_CCR2 (* ((volatile uint32_t *) (0x40010400 + 56)))

  // Field CCR2: Capture/Compare 2 value
    inline uint32_t TIM8_CCR2_CCR2 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR3: capture/compare register 3
  #define TIM8_CCR3 (* ((volatile uint32_t *) (0x40010400 + 60)))

  // Field CCR3: Capture/Compare value
    inline uint32_t TIM8_CCR3_CCR3 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR4: capture/compare register 4
  #define TIM8_CCR4 (* ((volatile uint32_t *) (0x40010400 + 64)))

  // Field CCR4: Capture/Compare value
    inline uint32_t TIM8_CCR4_CCR4 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DCR: DMA control register
  #define TIM8_DCR (* ((volatile uint32_t *) (0x40010400 + 72)))

  // Field DBL: DMA burst length
    inline uint32_t TIM8_DCR_DBL (const uint32_t inValue) {return (inValue & 0x1FU) << 8 ; }

  // Field DBA: DMA base address
    inline uint32_t TIM8_DCR_DBA (const uint32_t inValue) {return (inValue & 0x1FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DMAR: DMA address for full transfer
  #define TIM8_DMAR (* ((volatile uint32_t *) (0x40010400 + 76)))

  // Field DMAB: DMA register for burst accesses
    inline uint32_t TIM8_DMAR_DMAB (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RCR: repetition counter register
  #define TIM8_RCR (* ((volatile uint32_t *) (0x40010400 + 48)))

  // Field REP: Repetition counter value
    inline uint32_t TIM8_RCR_REP (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register BDTR: break and dead-time register
  #define TIM8_BDTR (* ((volatile uint32_t *) (0x40010400 + 68)))

  // Field DTG: Dead-time generator setup
    inline uint32_t TIM8_BDTR_DTG (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

  // Field LOCK: Lock configuration
    inline uint32_t TIM8_BDTR_LOCK (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OSSI: Off-state selection for Idle mode
    const uint32_t TIM8_BDTR_OSSI = 1U << 10 ;

  // Field OSSR: Off-state selection for Run mode
    const uint32_t TIM8_BDTR_OSSR = 1U << 11 ;

  // Field BKE: Break enable
    const uint32_t TIM8_BDTR_BKE = 1U << 12 ;

  // Field BKP: Break polarity
    const uint32_t TIM8_BDTR_BKP = 1U << 13 ;

  // Field AOE: Automatic output enable
    const uint32_t TIM8_BDTR_AOE = 1U << 14 ;

  // Field MOE: Main output enable
    const uint32_t TIM8_BDTR_MOE = 1U << 15 ;

  // Field BKF: Break filter
    inline uint32_t TIM8_BDTR_BKF (const uint32_t inValue) {return (inValue & 0xFU) << 16 ; }

  // Field BK2F: Break 2 filter
    inline uint32_t TIM8_BDTR_BK2F (const uint32_t inValue) {return (inValue & 0xFU) << 20 ; }

  // Field BK2E: Break 2 enable
    const uint32_t TIM8_BDTR_BK2E = 1U << 24 ;

  // Field BK2P: Break 2 polarity
    const uint32_t TIM8_BDTR_BK2P = 1U << 25 ;

//------------------------------------------------------------------------------

//---  Register CCMR3_Output: capture/compare mode register 3 (output mode)
  #define TIM8_CCMR3_Output (* ((volatile uint32_t *) (0x40010400 + 84)))

  // Field OC5FE: Output compare 5 fast enable
    const uint32_t TIM8_CCMR3_Output_OC5FE = 1U << 2 ;

  // Field OC5PE: Output compare 5 preload enable
    const uint32_t TIM8_CCMR3_Output_OC5PE = 1U << 3 ;

  // Field OC5M: Output compare 5 mode
    inline uint32_t TIM8_CCMR3_Output_OC5M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC5CE: Output compare 5 clear enable
    const uint32_t TIM8_CCMR3_Output_OC5CE = 1U << 7 ;

  // Field OC6FE: Output compare 6 fast enable
    const uint32_t TIM8_CCMR3_Output_OC6FE = 1U << 10 ;

  // Field OC6PE: Output compare 6 preload enable
    const uint32_t TIM8_CCMR3_Output_OC6PE = 1U << 11 ;

  // Field OC6M: Output compare 6 mode
    inline uint32_t TIM8_CCMR3_Output_OC6M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC6CE: Output compare 6 clear enable
    const uint32_t TIM8_CCMR3_Output_OC6CE = 1U << 15 ;

  // Field OC5M3: Output Compare 5 mode
    const uint32_t TIM8_CCMR3_Output_OC5M3 = 1U << 16 ;

  // Field OC6M3: Output Compare 6 mode
    const uint32_t TIM8_CCMR3_Output_OC6M3 = 1U << 24 ;

//------------------------------------------------------------------------------

//---  Register CCR5: capture/compare register 5
  #define TIM8_CCR5 (* ((volatile uint32_t *) (0x40010400 + 88)))

  // Field CCR5: Capture/Compare 5 value
    inline uint32_t TIM8_CCR5_CCR5 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

  // Field GC5C1: Group Channel 5 and Channel 1
    const uint32_t TIM8_CCR5_GC5C1 = 1U << 29 ;

  // Field GC5C2: Group Channel 5 and Channel 2
    const uint32_t TIM8_CCR5_GC5C2 = 1U << 30 ;

  // Field GC5C3: Group Channel 5 and Channel 3
    const uint32_t TIM8_CCR5_GC5C3 = 1U << 31 ;

//------------------------------------------------------------------------------

//---  Register CRR6: capture/compare register 6
  #define TIM8_CRR6 (* ((volatile uint32_t *) (0x40010400 + 92)))

  // Field CCR6: Capture/Compare 6 value
    inline uint32_t TIM8_CRR6_CCR6 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register AF1: alternate function option register 1
  #define TIM8_AF1 (* ((volatile uint32_t *) (0x40010400 + 96)))

  // Field BKINE: BRK BKIN input enable
    const uint32_t TIM8_AF1_BKINE = 1U << 0 ;

  // Field BKDFBKE: BRK DFSDM_BREAK[0] enable
    const uint32_t TIM8_AF1_BKDFBKE = 1U << 8 ;

  // Field BKINP: BRK BKIN input polarity
    const uint32_t TIM8_AF1_BKINP = 1U << 9 ;

//------------------------------------------------------------------------------

//---  Register AF2: alternate function option register 2
  #define TIM8_AF2 (* ((volatile uint32_t *) (0x40010400 + 100)))

  // Field BK2INE: BRK2 BKIN input enable
    const uint32_t TIM8_AF2_BK2INE = 1U << 0 ;

  // Field BK2DFBKE: BRK2 DFSDM_BREAK enable
    const uint32_t TIM8_AF2_BK2DFBKE = 1U << 8 ;

  // Field BK2INP: BRK2 BKIN2 input polarity
    const uint32_t TIM8_AF2_BK2INP = 1U << 9 ;

//------------------------------------------------------------------------------
// Peripheral TIM9: General purpose timers
//------------------------------------------------------------------------------

//---  Register CR1: control register 1
  #define TIM9_CR1 (* ((volatile uint32_t *) (0x40014000 + 0)))

  // Field CKD: Clock division
    inline uint32_t TIM9_CR1_CKD (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field ARPE: Auto-reload preload enable
    const uint32_t TIM9_CR1_ARPE = 1U << 7 ;

  // Field OPM: One-pulse mode
    const uint32_t TIM9_CR1_OPM = 1U << 3 ;

  // Field URS: Update request source
    const uint32_t TIM9_CR1_URS = 1U << 2 ;

  // Field UDIS: Update disable
    const uint32_t TIM9_CR1_UDIS = 1U << 1 ;

  // Field CEN: Counter enable
    const uint32_t TIM9_CR1_CEN = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SMCR: slave mode control register
  #define TIM9_SMCR (* ((volatile uint32_t *) (0x40014000 + 8)))

  // Field MSM: Master/Slave mode
    const uint32_t TIM9_SMCR_MSM = 1U << 7 ;

  // Field TS: Trigger selection
    inline uint32_t TIM9_SMCR_TS (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field SMS: Slave mode selection
    inline uint32_t TIM9_SMCR_SMS (const uint32_t inValue) {return (inValue & 0x7U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register DIER: DMA/Interrupt enable register
  #define TIM9_DIER (* ((volatile uint32_t *) (0x40014000 + 12)))

  // Field TIE: Trigger interrupt enable
    const uint32_t TIM9_DIER_TIE = 1U << 6 ;

  // Field CC2IE: Capture/Compare 2 interrupt enable
    const uint32_t TIM9_DIER_CC2IE = 1U << 2 ;

  // Field CC1IE: Capture/Compare 1 interrupt enable
    const uint32_t TIM9_DIER_CC1IE = 1U << 1 ;

  // Field UIE: Update interrupt enable
    const uint32_t TIM9_DIER_UIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register SR: status register
  #define TIM9_SR (* ((volatile uint32_t *) (0x40014000 + 16)))

  // Field CC2OF: Capture/compare 2 overcapture flag
    const uint32_t TIM9_SR_CC2OF = 1U << 10 ;

  // Field CC1OF: Capture/Compare 1 overcapture flag
    const uint32_t TIM9_SR_CC1OF = 1U << 9 ;

  // Field TIF: Trigger interrupt flag
    const uint32_t TIM9_SR_TIF = 1U << 6 ;

  // Field CC2IF: Capture/Compare 2 interrupt flag
    const uint32_t TIM9_SR_CC2IF = 1U << 2 ;

  // Field CC1IF: Capture/compare 1 interrupt flag
    const uint32_t TIM9_SR_CC1IF = 1U << 1 ;

  // Field UIF: Update interrupt flag
    const uint32_t TIM9_SR_UIF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register EGR: event generation register
  #define TIM9_EGR (* ((volatile uint32_t *) (0x40014000 + 20)))

  // Field TG: Trigger generation
    const uint32_t TIM9_EGR_TG = 1U << 6 ;

  // Field CC2G: Capture/compare 2 generation
    const uint32_t TIM9_EGR_CC2G = 1U << 2 ;

  // Field CC1G: Capture/compare 1 generation
    const uint32_t TIM9_EGR_CC1G = 1U << 1 ;

  // Field UG: Update generation
    const uint32_t TIM9_EGR_UG = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  #define TIM9_CCMR1_Output (* ((volatile uint32_t *) (0x40014000 + 24)))

  // Field OC2M: Output Compare 2 mode
    inline uint32_t TIM9_CCMR1_Output_OC2M (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field OC2PE: Output Compare 2 preload enable
    const uint32_t TIM9_CCMR1_Output_OC2PE = 1U << 11 ;

  // Field OC2FE: Output Compare 2 fast enable
    const uint32_t TIM9_CCMR1_Output_OC2FE = 1U << 10 ;

  // Field CC2S: Capture/Compare 2 selection
    inline uint32_t TIM9_CCMR1_Output_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field OC1M: Output Compare 1 mode
    inline uint32_t TIM9_CCMR1_Output_OC1M (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field OC1PE: Output Compare 1 preload enable
    const uint32_t TIM9_CCMR1_Output_OC1PE = 1U << 3 ;

  // Field OC1FE: Output Compare 1 fast enable
    const uint32_t TIM9_CCMR1_Output_OC1FE = 1U << 2 ;

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM9_CCMR1_Output_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  #define TIM9_CCMR1_Input (* ((volatile uint32_t *) (0x40014000 + 24)))

  // Field IC2F: Input capture 2 filter
    inline uint32_t TIM9_CCMR1_Input_IC2F (const uint32_t inValue) {return (inValue & 0x7U) << 12 ; }

  // Field IC2PCS: Input capture 2 prescaler
    inline uint32_t TIM9_CCMR1_Input_IC2PCS (const uint32_t inValue) {return (inValue & 0x3U) << 10 ; }

  // Field CC2S: Capture/Compare 2 selection
    inline uint32_t TIM9_CCMR1_Input_CC2S (const uint32_t inValue) {return (inValue & 0x3U) << 8 ; }

  // Field IC1F: Input capture 1 filter
    inline uint32_t TIM9_CCMR1_Input_IC1F (const uint32_t inValue) {return (inValue & 0x7U) << 4 ; }

  // Field ICPCS: Input capture 1 prescaler
    inline uint32_t TIM9_CCMR1_Input_ICPCS (const uint32_t inValue) {return (inValue & 0x3U) << 2 ; }

  // Field CC1S: Capture/Compare 1 selection
    inline uint32_t TIM9_CCMR1_Input_CC1S (const uint32_t inValue) {return (inValue & 0x3U) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCER: capture/compare enable register
  #define TIM9_CCER (* ((volatile uint32_t *) (0x40014000 + 32)))

  // Field CC2NP: Capture/Compare 2 output Polarity
    const uint32_t TIM9_CCER_CC2NP = 1U << 7 ;

  // Field CC2P: Capture/Compare 2 output Polarity
    const uint32_t TIM9_CCER_CC2P = 1U << 5 ;

  // Field CC2E: Capture/Compare 2 output enable
    const uint32_t TIM9_CCER_CC2E = 1U << 4 ;

  // Field CC1NP: Capture/Compare 1 output Polarity
    const uint32_t TIM9_CCER_CC1NP = 1U << 3 ;

  // Field CC1P: Capture/Compare 1 output Polarity
    const uint32_t TIM9_CCER_CC1P = 1U << 1 ;

  // Field CC1E: Capture/Compare 1 output enable
    const uint32_t TIM9_CCER_CC1E = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CNT: counter
  #define TIM9_CNT (* ((volatile uint32_t *) (0x40014000 + 36)))

  // Field CNT: counter value
    inline uint32_t TIM9_CNT_CNT (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register PSC: prescaler
  #define TIM9_PSC (* ((volatile uint32_t *) (0x40014000 + 40)))

  // Field PSC: Prescaler value
    inline uint32_t TIM9_PSC_PSC (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register ARR: auto-reload register
  #define TIM9_ARR (* ((volatile uint32_t *) (0x40014000 + 44)))

  // Field ARR: Auto-reload value
    inline uint32_t TIM9_ARR_ARR (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR1: capture/compare register 1
  #define TIM9_CCR1 (* ((volatile uint32_t *) (0x40014000 + 52)))

  // Field CCR1: Capture/Compare 1 value
    inline uint32_t TIM9_CCR1_CCR1 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CCR2: capture/compare register 2
  #define TIM9_CCR2 (* ((volatile uint32_t *) (0x40014000 + 56)))

  // Field CCR2: Capture/Compare 2 value
    inline uint32_t TIM9_CCR2_CCR2 (const uint32_t inValue) {return (inValue & 0xFFFFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral UART4
//------------------------------------------------------------------------------

//---  Register CR1: Control register 1
  #define UART4_CR1 (* ((volatile uint32_t *) (0x40004C00 + 0)))

  // Field M1: Word length
    const uint32_t UART4_CR1_M1 = 1U << 28 ;

  // Field EOBIE: End of Block interrupt enable
    const uint32_t UART4_CR1_EOBIE = 1U << 27 ;

  // Field RTOIE: Receiver timeout interrupt enable
    const uint32_t UART4_CR1_RTOIE = 1U << 26 ;

  // Field DEAT4: Driver Enable assertion time
    const uint32_t UART4_CR1_DEAT4 = 1U << 25 ;

  // Field DEAT3: DEAT3
    const uint32_t UART4_CR1_DEAT3 = 1U << 24 ;

  // Field DEAT2: DEAT2
    const uint32_t UART4_CR1_DEAT2 = 1U << 23 ;

  // Field DEAT1: DEAT1
    const uint32_t UART4_CR1_DEAT1 = 1U << 22 ;

  // Field DEAT0: DEAT0
    const uint32_t UART4_CR1_DEAT0 = 1U << 21 ;

  // Field DEDT4: Driver Enable de-assertion time
    const uint32_t UART4_CR1_DEDT4 = 1U << 20 ;

  // Field DEDT3: DEDT3
    const uint32_t UART4_CR1_DEDT3 = 1U << 19 ;

  // Field DEDT2: DEDT2
    const uint32_t UART4_CR1_DEDT2 = 1U << 18 ;

  // Field DEDT1: DEDT1
    const uint32_t UART4_CR1_DEDT1 = 1U << 17 ;

  // Field DEDT0: DEDT0
    const uint32_t UART4_CR1_DEDT0 = 1U << 16 ;

  // Field OVER8: Oversampling mode
    const uint32_t UART4_CR1_OVER8 = 1U << 15 ;

  // Field CMIE: Character match interrupt enable
    const uint32_t UART4_CR1_CMIE = 1U << 14 ;

  // Field MME: Mute mode enable
    const uint32_t UART4_CR1_MME = 1U << 13 ;

  // Field M0: Word length
    const uint32_t UART4_CR1_M0 = 1U << 12 ;

  // Field WAKE: Receiver wakeup method
    const uint32_t UART4_CR1_WAKE = 1U << 11 ;

  // Field PCE: Parity control enable
    const uint32_t UART4_CR1_PCE = 1U << 10 ;

  // Field PS: Parity selection
    const uint32_t UART4_CR1_PS = 1U << 9 ;

  // Field PEIE: PE interrupt enable
    const uint32_t UART4_CR1_PEIE = 1U << 8 ;

  // Field TXEIE: interrupt enable
    const uint32_t UART4_CR1_TXEIE = 1U << 7 ;

  // Field TCIE: Transmission complete interrupt enable
    const uint32_t UART4_CR1_TCIE = 1U << 6 ;

  // Field RXNEIE: RXNE interrupt enable
    const uint32_t UART4_CR1_RXNEIE = 1U << 5 ;

  // Field IDLEIE: IDLE interrupt enable
    const uint32_t UART4_CR1_IDLEIE = 1U << 4 ;

  // Field TE: Transmitter enable
    const uint32_t UART4_CR1_TE = 1U << 3 ;

  // Field RE: Receiver enable
    const uint32_t UART4_CR1_RE = 1U << 2 ;

  // Field UESM: USART enable in Stop mode
    const uint32_t UART4_CR1_UESM = 1U << 1 ;

  // Field UE: USART enable
    const uint32_t UART4_CR1_UE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: Control register 2
  #define UART4_CR2 (* ((volatile uint32_t *) (0x40004C00 + 4)))

  // Field ADD4_7: Address of the USART node
    inline uint32_t UART4_CR2_ADD4_7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field ADD0_3: Address of the USART node
    inline uint32_t UART4_CR2_ADD0_3 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field RTOEN: Receiver timeout enable
    const uint32_t UART4_CR2_RTOEN = 1U << 23 ;

  // Field ABRMOD1: Auto baud rate mode
    const uint32_t UART4_CR2_ABRMOD1 = 1U << 22 ;

  // Field ABRMOD0: ABRMOD0
    const uint32_t UART4_CR2_ABRMOD0 = 1U << 21 ;

  // Field ABREN: Auto baud rate enable
    const uint32_t UART4_CR2_ABREN = 1U << 20 ;

  // Field MSBFIRST: Most significant bit first
    const uint32_t UART4_CR2_MSBFIRST = 1U << 19 ;

  // Field TAINV: Binary data inversion
    const uint32_t UART4_CR2_TAINV = 1U << 18 ;

  // Field TXINV: TX pin active level inversion
    const uint32_t UART4_CR2_TXINV = 1U << 17 ;

  // Field RXINV: RX pin active level inversion
    const uint32_t UART4_CR2_RXINV = 1U << 16 ;

  // Field SWAP: Swap TX/RX pins
    const uint32_t UART4_CR2_SWAP = 1U << 15 ;

  // Field LINEN: LIN mode enable
    const uint32_t UART4_CR2_LINEN = 1U << 14 ;

  // Field STOP: STOP bits
    inline uint32_t UART4_CR2_STOP (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field CLKEN: Clock enable
    const uint32_t UART4_CR2_CLKEN = 1U << 11 ;

  // Field CPOL: Clock polarity
    const uint32_t UART4_CR2_CPOL = 1U << 10 ;

  // Field CPHA: Clock phase
    const uint32_t UART4_CR2_CPHA = 1U << 9 ;

  // Field LBCL: Last bit clock pulse
    const uint32_t UART4_CR2_LBCL = 1U << 8 ;

  // Field LBDIE: LIN break detection interrupt enable
    const uint32_t UART4_CR2_LBDIE = 1U << 6 ;

  // Field LBDL: LIN break detection length
    const uint32_t UART4_CR2_LBDL = 1U << 5 ;

  // Field ADDM7: 7-bit Address Detection/4-bit Address Detection
    const uint32_t UART4_CR2_ADDM7 = 1U << 4 ;

//------------------------------------------------------------------------------

//---  Register CR3: Control register 3
  #define UART4_CR3 (* ((volatile uint32_t *) (0x40004C00 + 8)))

  // Field WUFIE: Wakeup from Stop mode interrupt enable
    const uint32_t UART4_CR3_WUFIE = 1U << 22 ;

  // Field WUS: Wakeup from Stop mode interrupt flag selection
    inline uint32_t UART4_CR3_WUS (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field SCARCNT: Smartcard auto-retry count
    inline uint32_t UART4_CR3_SCARCNT (const uint32_t inValue) {return (inValue & 0x7U) << 17 ; }

  // Field DEP: Driver enable polarity selection
    const uint32_t UART4_CR3_DEP = 1U << 15 ;

  // Field DEM: Driver enable mode
    const uint32_t UART4_CR3_DEM = 1U << 14 ;

  // Field DDRE: DMA Disable on Reception Error
    const uint32_t UART4_CR3_DDRE = 1U << 13 ;

  // Field OVRDIS: Overrun Disable
    const uint32_t UART4_CR3_OVRDIS = 1U << 12 ;

  // Field ONEBIT: One sample bit method enable
    const uint32_t UART4_CR3_ONEBIT = 1U << 11 ;

  // Field CTSIE: CTS interrupt enable
    const uint32_t UART4_CR3_CTSIE = 1U << 10 ;

  // Field CTSE: CTS enable
    const uint32_t UART4_CR3_CTSE = 1U << 9 ;

  // Field RTSE: RTS enable
    const uint32_t UART4_CR3_RTSE = 1U << 8 ;

  // Field DMAT: DMA enable transmitter
    const uint32_t UART4_CR3_DMAT = 1U << 7 ;

  // Field DMAR: DMA enable receiver
    const uint32_t UART4_CR3_DMAR = 1U << 6 ;

  // Field SCEN: Smartcard mode enable
    const uint32_t UART4_CR3_SCEN = 1U << 5 ;

  // Field NACK: Smartcard NACK enable
    const uint32_t UART4_CR3_NACK = 1U << 4 ;

  // Field HDSEL: Half-duplex selection
    const uint32_t UART4_CR3_HDSEL = 1U << 3 ;

  // Field IRLP: Ir low-power
    const uint32_t UART4_CR3_IRLP = 1U << 2 ;

  // Field IREN: Ir mode enable
    const uint32_t UART4_CR3_IREN = 1U << 1 ;

  // Field EIE: Error interrupt enable
    const uint32_t UART4_CR3_EIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BRR: Baud rate register
  #define UART4_BRR (* ((volatile uint32_t *) (0x40004C00 + 12)))

  // Field DIV_Mantissa: DIV_Mantissa
    inline uint32_t UART4_BRR_DIV_Mantissa (const uint32_t inValue) {return (inValue & 0xFFFU) << 4 ; }

  // Field DIV_Fraction: DIV_Fraction
    inline uint32_t UART4_BRR_DIV_Fraction (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register GTPR: Guard time and prescaler register
  #define UART4_GTPR (* ((volatile uint32_t *) (0x40004C00 + 16)))

  // Field GT: Guard time value
    inline uint32_t UART4_GTPR_GT (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field PSC: Prescaler value
    inline uint32_t UART4_GTPR_PSC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RTOR: Receiver timeout register
  #define UART4_RTOR (* ((volatile uint32_t *) (0x40004C00 + 20)))

  // Field BLEN: Block Length
    inline uint32_t UART4_RTOR_BLEN (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field RTO: Receiver timeout value
    inline uint32_t UART4_RTOR_RTO (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RQR: Request register
  #define UART4_RQR (* ((volatile uint32_t *) (0x40004C00 + 24)))

  // Field TXFRQ: Transmit data flush request
    const uint32_t UART4_RQR_TXFRQ = 1U << 4 ;

  // Field RXFRQ: Receive data flush request
    const uint32_t UART4_RQR_RXFRQ = 1U << 3 ;

  // Field MMRQ: Mute mode request
    const uint32_t UART4_RQR_MMRQ = 1U << 2 ;

  // Field SBKRQ: Send break request
    const uint32_t UART4_RQR_SBKRQ = 1U << 1 ;

  // Field ABRRQ: Auto baud rate request
    const uint32_t UART4_RQR_ABRRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt & status register
  #define UART4_ISR (* ((const volatile uint32_t *) (0x40004C00 + 28)))

  // Field REACK: REACK
    const uint32_t UART4_ISR_REACK = 1U << 22 ;

  // Field TEACK: TEACK
    const uint32_t UART4_ISR_TEACK = 1U << 21 ;

  // Field WUF: WUF
    const uint32_t UART4_ISR_WUF = 1U << 20 ;

  // Field RWU: RWU
    const uint32_t UART4_ISR_RWU = 1U << 19 ;

  // Field SBKF: SBKF
    const uint32_t UART4_ISR_SBKF = 1U << 18 ;

  // Field CMF: CMF
    const uint32_t UART4_ISR_CMF = 1U << 17 ;

  // Field BUSY: BUSY
    const uint32_t UART4_ISR_BUSY = 1U << 16 ;

  // Field ABRF: ABRF
    const uint32_t UART4_ISR_ABRF = 1U << 15 ;

  // Field ABRE: ABRE
    const uint32_t UART4_ISR_ABRE = 1U << 14 ;

  // Field EOBF: EOBF
    const uint32_t UART4_ISR_EOBF = 1U << 12 ;

  // Field RTOF: RTOF
    const uint32_t UART4_ISR_RTOF = 1U << 11 ;

  // Field CTS: CTS
    const uint32_t UART4_ISR_CTS = 1U << 10 ;

  // Field CTSIF: CTSIF
    const uint32_t UART4_ISR_CTSIF = 1U << 9 ;

  // Field LBDF: LBDF
    const uint32_t UART4_ISR_LBDF = 1U << 8 ;

  // Field TXE: TXE
    const uint32_t UART4_ISR_TXE = 1U << 7 ;

  // Field TC: TC
    const uint32_t UART4_ISR_TC = 1U << 6 ;

  // Field RXNE: RXNE
    const uint32_t UART4_ISR_RXNE = 1U << 5 ;

  // Field IDLE: IDLE
    const uint32_t UART4_ISR_IDLE = 1U << 4 ;

  // Field ORE: ORE
    const uint32_t UART4_ISR_ORE = 1U << 3 ;

  // Field NF: NF
    const uint32_t UART4_ISR_NF = 1U << 2 ;

  // Field FE: FE
    const uint32_t UART4_ISR_FE = 1U << 1 ;

  // Field PE: PE
    const uint32_t UART4_ISR_PE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt flag clear register
  #define UART4_ICR (* ((volatile uint32_t *) (0x40004C00 + 32)))

  // Field WUCF: Wakeup from Stop mode clear flag
    const uint32_t UART4_ICR_WUCF = 1U << 20 ;

  // Field CMCF: Character match clear flag
    const uint32_t UART4_ICR_CMCF = 1U << 17 ;

  // Field EOBCF: End of block clear flag
    const uint32_t UART4_ICR_EOBCF = 1U << 12 ;

  // Field RTOCF: Receiver timeout clear flag
    const uint32_t UART4_ICR_RTOCF = 1U << 11 ;

  // Field CTSCF: CTS clear flag
    const uint32_t UART4_ICR_CTSCF = 1U << 9 ;

  // Field LBDCF: LIN break detection clear flag
    const uint32_t UART4_ICR_LBDCF = 1U << 8 ;

  // Field TCCF: Transmission complete clear flag
    const uint32_t UART4_ICR_TCCF = 1U << 6 ;

  // Field IDLECF: Idle line detected clear flag
    const uint32_t UART4_ICR_IDLECF = 1U << 4 ;

  // Field ORECF: Overrun error clear flag
    const uint32_t UART4_ICR_ORECF = 1U << 3 ;

  // Field NCF: Noise detected clear flag
    const uint32_t UART4_ICR_NCF = 1U << 2 ;

  // Field FECF: Framing error clear flag
    const uint32_t UART4_ICR_FECF = 1U << 1 ;

  // Field PECF: Parity error clear flag
    const uint32_t UART4_ICR_PECF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register RDR: Receive data register
  #define UART4_RDR (* ((const volatile uint32_t *) (0x40004C00 + 36)))

  // Field RDR: Receive data value
    inline uint32_t UART4_RDR_RDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDR: Transmit data register
  #define UART4_TDR (* ((volatile uint32_t *) (0x40004C00 + 40)))

  // Field TDR: Transmit data value
    inline uint32_t UART4_TDR_TDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral UART5
//------------------------------------------------------------------------------

//---  Register CR1: Control register 1
  #define UART5_CR1 (* ((volatile uint32_t *) (0x40005000 + 0)))

  // Field M1: Word length
    const uint32_t UART5_CR1_M1 = 1U << 28 ;

  // Field EOBIE: End of Block interrupt enable
    const uint32_t UART5_CR1_EOBIE = 1U << 27 ;

  // Field RTOIE: Receiver timeout interrupt enable
    const uint32_t UART5_CR1_RTOIE = 1U << 26 ;

  // Field DEAT4: Driver Enable assertion time
    const uint32_t UART5_CR1_DEAT4 = 1U << 25 ;

  // Field DEAT3: DEAT3
    const uint32_t UART5_CR1_DEAT3 = 1U << 24 ;

  // Field DEAT2: DEAT2
    const uint32_t UART5_CR1_DEAT2 = 1U << 23 ;

  // Field DEAT1: DEAT1
    const uint32_t UART5_CR1_DEAT1 = 1U << 22 ;

  // Field DEAT0: DEAT0
    const uint32_t UART5_CR1_DEAT0 = 1U << 21 ;

  // Field DEDT4: Driver Enable de-assertion time
    const uint32_t UART5_CR1_DEDT4 = 1U << 20 ;

  // Field DEDT3: DEDT3
    const uint32_t UART5_CR1_DEDT3 = 1U << 19 ;

  // Field DEDT2: DEDT2
    const uint32_t UART5_CR1_DEDT2 = 1U << 18 ;

  // Field DEDT1: DEDT1
    const uint32_t UART5_CR1_DEDT1 = 1U << 17 ;

  // Field DEDT0: DEDT0
    const uint32_t UART5_CR1_DEDT0 = 1U << 16 ;

  // Field OVER8: Oversampling mode
    const uint32_t UART5_CR1_OVER8 = 1U << 15 ;

  // Field CMIE: Character match interrupt enable
    const uint32_t UART5_CR1_CMIE = 1U << 14 ;

  // Field MME: Mute mode enable
    const uint32_t UART5_CR1_MME = 1U << 13 ;

  // Field M0: Word length
    const uint32_t UART5_CR1_M0 = 1U << 12 ;

  // Field WAKE: Receiver wakeup method
    const uint32_t UART5_CR1_WAKE = 1U << 11 ;

  // Field PCE: Parity control enable
    const uint32_t UART5_CR1_PCE = 1U << 10 ;

  // Field PS: Parity selection
    const uint32_t UART5_CR1_PS = 1U << 9 ;

  // Field PEIE: PE interrupt enable
    const uint32_t UART5_CR1_PEIE = 1U << 8 ;

  // Field TXEIE: interrupt enable
    const uint32_t UART5_CR1_TXEIE = 1U << 7 ;

  // Field TCIE: Transmission complete interrupt enable
    const uint32_t UART5_CR1_TCIE = 1U << 6 ;

  // Field RXNEIE: RXNE interrupt enable
    const uint32_t UART5_CR1_RXNEIE = 1U << 5 ;

  // Field IDLEIE: IDLE interrupt enable
    const uint32_t UART5_CR1_IDLEIE = 1U << 4 ;

  // Field TE: Transmitter enable
    const uint32_t UART5_CR1_TE = 1U << 3 ;

  // Field RE: Receiver enable
    const uint32_t UART5_CR1_RE = 1U << 2 ;

  // Field UESM: USART enable in Stop mode
    const uint32_t UART5_CR1_UESM = 1U << 1 ;

  // Field UE: USART enable
    const uint32_t UART5_CR1_UE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: Control register 2
  #define UART5_CR2 (* ((volatile uint32_t *) (0x40005000 + 4)))

  // Field ADD4_7: Address of the USART node
    inline uint32_t UART5_CR2_ADD4_7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field ADD0_3: Address of the USART node
    inline uint32_t UART5_CR2_ADD0_3 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field RTOEN: Receiver timeout enable
    const uint32_t UART5_CR2_RTOEN = 1U << 23 ;

  // Field ABRMOD1: Auto baud rate mode
    const uint32_t UART5_CR2_ABRMOD1 = 1U << 22 ;

  // Field ABRMOD0: ABRMOD0
    const uint32_t UART5_CR2_ABRMOD0 = 1U << 21 ;

  // Field ABREN: Auto baud rate enable
    const uint32_t UART5_CR2_ABREN = 1U << 20 ;

  // Field MSBFIRST: Most significant bit first
    const uint32_t UART5_CR2_MSBFIRST = 1U << 19 ;

  // Field TAINV: Binary data inversion
    const uint32_t UART5_CR2_TAINV = 1U << 18 ;

  // Field TXINV: TX pin active level inversion
    const uint32_t UART5_CR2_TXINV = 1U << 17 ;

  // Field RXINV: RX pin active level inversion
    const uint32_t UART5_CR2_RXINV = 1U << 16 ;

  // Field SWAP: Swap TX/RX pins
    const uint32_t UART5_CR2_SWAP = 1U << 15 ;

  // Field LINEN: LIN mode enable
    const uint32_t UART5_CR2_LINEN = 1U << 14 ;

  // Field STOP: STOP bits
    inline uint32_t UART5_CR2_STOP (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field CLKEN: Clock enable
    const uint32_t UART5_CR2_CLKEN = 1U << 11 ;

  // Field CPOL: Clock polarity
    const uint32_t UART5_CR2_CPOL = 1U << 10 ;

  // Field CPHA: Clock phase
    const uint32_t UART5_CR2_CPHA = 1U << 9 ;

  // Field LBCL: Last bit clock pulse
    const uint32_t UART5_CR2_LBCL = 1U << 8 ;

  // Field LBDIE: LIN break detection interrupt enable
    const uint32_t UART5_CR2_LBDIE = 1U << 6 ;

  // Field LBDL: LIN break detection length
    const uint32_t UART5_CR2_LBDL = 1U << 5 ;

  // Field ADDM7: 7-bit Address Detection/4-bit Address Detection
    const uint32_t UART5_CR2_ADDM7 = 1U << 4 ;

//------------------------------------------------------------------------------

//---  Register CR3: Control register 3
  #define UART5_CR3 (* ((volatile uint32_t *) (0x40005000 + 8)))

  // Field WUFIE: Wakeup from Stop mode interrupt enable
    const uint32_t UART5_CR3_WUFIE = 1U << 22 ;

  // Field WUS: Wakeup from Stop mode interrupt flag selection
    inline uint32_t UART5_CR3_WUS (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field SCARCNT: Smartcard auto-retry count
    inline uint32_t UART5_CR3_SCARCNT (const uint32_t inValue) {return (inValue & 0x7U) << 17 ; }

  // Field DEP: Driver enable polarity selection
    const uint32_t UART5_CR3_DEP = 1U << 15 ;

  // Field DEM: Driver enable mode
    const uint32_t UART5_CR3_DEM = 1U << 14 ;

  // Field DDRE: DMA Disable on Reception Error
    const uint32_t UART5_CR3_DDRE = 1U << 13 ;

  // Field OVRDIS: Overrun Disable
    const uint32_t UART5_CR3_OVRDIS = 1U << 12 ;

  // Field ONEBIT: One sample bit method enable
    const uint32_t UART5_CR3_ONEBIT = 1U << 11 ;

  // Field CTSIE: CTS interrupt enable
    const uint32_t UART5_CR3_CTSIE = 1U << 10 ;

  // Field CTSE: CTS enable
    const uint32_t UART5_CR3_CTSE = 1U << 9 ;

  // Field RTSE: RTS enable
    const uint32_t UART5_CR3_RTSE = 1U << 8 ;

  // Field DMAT: DMA enable transmitter
    const uint32_t UART5_CR3_DMAT = 1U << 7 ;

  // Field DMAR: DMA enable receiver
    const uint32_t UART5_CR3_DMAR = 1U << 6 ;

  // Field SCEN: Smartcard mode enable
    const uint32_t UART5_CR3_SCEN = 1U << 5 ;

  // Field NACK: Smartcard NACK enable
    const uint32_t UART5_CR3_NACK = 1U << 4 ;

  // Field HDSEL: Half-duplex selection
    const uint32_t UART5_CR3_HDSEL = 1U << 3 ;

  // Field IRLP: Ir low-power
    const uint32_t UART5_CR3_IRLP = 1U << 2 ;

  // Field IREN: Ir mode enable
    const uint32_t UART5_CR3_IREN = 1U << 1 ;

  // Field EIE: Error interrupt enable
    const uint32_t UART5_CR3_EIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BRR: Baud rate register
  #define UART5_BRR (* ((volatile uint32_t *) (0x40005000 + 12)))

  // Field DIV_Mantissa: DIV_Mantissa
    inline uint32_t UART5_BRR_DIV_Mantissa (const uint32_t inValue) {return (inValue & 0xFFFU) << 4 ; }

  // Field DIV_Fraction: DIV_Fraction
    inline uint32_t UART5_BRR_DIV_Fraction (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register GTPR: Guard time and prescaler register
  #define UART5_GTPR (* ((volatile uint32_t *) (0x40005000 + 16)))

  // Field GT: Guard time value
    inline uint32_t UART5_GTPR_GT (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field PSC: Prescaler value
    inline uint32_t UART5_GTPR_PSC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RTOR: Receiver timeout register
  #define UART5_RTOR (* ((volatile uint32_t *) (0x40005000 + 20)))

  // Field BLEN: Block Length
    inline uint32_t UART5_RTOR_BLEN (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field RTO: Receiver timeout value
    inline uint32_t UART5_RTOR_RTO (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RQR: Request register
  #define UART5_RQR (* ((volatile uint32_t *) (0x40005000 + 24)))

  // Field TXFRQ: Transmit data flush request
    const uint32_t UART5_RQR_TXFRQ = 1U << 4 ;

  // Field RXFRQ: Receive data flush request
    const uint32_t UART5_RQR_RXFRQ = 1U << 3 ;

  // Field MMRQ: Mute mode request
    const uint32_t UART5_RQR_MMRQ = 1U << 2 ;

  // Field SBKRQ: Send break request
    const uint32_t UART5_RQR_SBKRQ = 1U << 1 ;

  // Field ABRRQ: Auto baud rate request
    const uint32_t UART5_RQR_ABRRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt & status register
  #define UART5_ISR (* ((const volatile uint32_t *) (0x40005000 + 28)))

  // Field REACK: REACK
    const uint32_t UART5_ISR_REACK = 1U << 22 ;

  // Field TEACK: TEACK
    const uint32_t UART5_ISR_TEACK = 1U << 21 ;

  // Field WUF: WUF
    const uint32_t UART5_ISR_WUF = 1U << 20 ;

  // Field RWU: RWU
    const uint32_t UART5_ISR_RWU = 1U << 19 ;

  // Field SBKF: SBKF
    const uint32_t UART5_ISR_SBKF = 1U << 18 ;

  // Field CMF: CMF
    const uint32_t UART5_ISR_CMF = 1U << 17 ;

  // Field BUSY: BUSY
    const uint32_t UART5_ISR_BUSY = 1U << 16 ;

  // Field ABRF: ABRF
    const uint32_t UART5_ISR_ABRF = 1U << 15 ;

  // Field ABRE: ABRE
    const uint32_t UART5_ISR_ABRE = 1U << 14 ;

  // Field EOBF: EOBF
    const uint32_t UART5_ISR_EOBF = 1U << 12 ;

  // Field RTOF: RTOF
    const uint32_t UART5_ISR_RTOF = 1U << 11 ;

  // Field CTS: CTS
    const uint32_t UART5_ISR_CTS = 1U << 10 ;

  // Field CTSIF: CTSIF
    const uint32_t UART5_ISR_CTSIF = 1U << 9 ;

  // Field LBDF: LBDF
    const uint32_t UART5_ISR_LBDF = 1U << 8 ;

  // Field TXE: TXE
    const uint32_t UART5_ISR_TXE = 1U << 7 ;

  // Field TC: TC
    const uint32_t UART5_ISR_TC = 1U << 6 ;

  // Field RXNE: RXNE
    const uint32_t UART5_ISR_RXNE = 1U << 5 ;

  // Field IDLE: IDLE
    const uint32_t UART5_ISR_IDLE = 1U << 4 ;

  // Field ORE: ORE
    const uint32_t UART5_ISR_ORE = 1U << 3 ;

  // Field NF: NF
    const uint32_t UART5_ISR_NF = 1U << 2 ;

  // Field FE: FE
    const uint32_t UART5_ISR_FE = 1U << 1 ;

  // Field PE: PE
    const uint32_t UART5_ISR_PE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt flag clear register
  #define UART5_ICR (* ((volatile uint32_t *) (0x40005000 + 32)))

  // Field WUCF: Wakeup from Stop mode clear flag
    const uint32_t UART5_ICR_WUCF = 1U << 20 ;

  // Field CMCF: Character match clear flag
    const uint32_t UART5_ICR_CMCF = 1U << 17 ;

  // Field EOBCF: End of block clear flag
    const uint32_t UART5_ICR_EOBCF = 1U << 12 ;

  // Field RTOCF: Receiver timeout clear flag
    const uint32_t UART5_ICR_RTOCF = 1U << 11 ;

  // Field CTSCF: CTS clear flag
    const uint32_t UART5_ICR_CTSCF = 1U << 9 ;

  // Field LBDCF: LIN break detection clear flag
    const uint32_t UART5_ICR_LBDCF = 1U << 8 ;

  // Field TCCF: Transmission complete clear flag
    const uint32_t UART5_ICR_TCCF = 1U << 6 ;

  // Field IDLECF: Idle line detected clear flag
    const uint32_t UART5_ICR_IDLECF = 1U << 4 ;

  // Field ORECF: Overrun error clear flag
    const uint32_t UART5_ICR_ORECF = 1U << 3 ;

  // Field NCF: Noise detected clear flag
    const uint32_t UART5_ICR_NCF = 1U << 2 ;

  // Field FECF: Framing error clear flag
    const uint32_t UART5_ICR_FECF = 1U << 1 ;

  // Field PECF: Parity error clear flag
    const uint32_t UART5_ICR_PECF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register RDR: Receive data register
  #define UART5_RDR (* ((const volatile uint32_t *) (0x40005000 + 36)))

  // Field RDR: Receive data value
    inline uint32_t UART5_RDR_RDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDR: Transmit data register
  #define UART5_TDR (* ((volatile uint32_t *) (0x40005000 + 40)))

  // Field TDR: Transmit data value
    inline uint32_t UART5_TDR_TDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral UART7
//------------------------------------------------------------------------------

//---  Register CR1: Control register 1
  #define UART7_CR1 (* ((volatile uint32_t *) (0x40007800 + 0)))

  // Field M1: Word length
    const uint32_t UART7_CR1_M1 = 1U << 28 ;

  // Field EOBIE: End of Block interrupt enable
    const uint32_t UART7_CR1_EOBIE = 1U << 27 ;

  // Field RTOIE: Receiver timeout interrupt enable
    const uint32_t UART7_CR1_RTOIE = 1U << 26 ;

  // Field DEAT4: Driver Enable assertion time
    const uint32_t UART7_CR1_DEAT4 = 1U << 25 ;

  // Field DEAT3: DEAT3
    const uint32_t UART7_CR1_DEAT3 = 1U << 24 ;

  // Field DEAT2: DEAT2
    const uint32_t UART7_CR1_DEAT2 = 1U << 23 ;

  // Field DEAT1: DEAT1
    const uint32_t UART7_CR1_DEAT1 = 1U << 22 ;

  // Field DEAT0: DEAT0
    const uint32_t UART7_CR1_DEAT0 = 1U << 21 ;

  // Field DEDT4: Driver Enable de-assertion time
    const uint32_t UART7_CR1_DEDT4 = 1U << 20 ;

  // Field DEDT3: DEDT3
    const uint32_t UART7_CR1_DEDT3 = 1U << 19 ;

  // Field DEDT2: DEDT2
    const uint32_t UART7_CR1_DEDT2 = 1U << 18 ;

  // Field DEDT1: DEDT1
    const uint32_t UART7_CR1_DEDT1 = 1U << 17 ;

  // Field DEDT0: DEDT0
    const uint32_t UART7_CR1_DEDT0 = 1U << 16 ;

  // Field OVER8: Oversampling mode
    const uint32_t UART7_CR1_OVER8 = 1U << 15 ;

  // Field CMIE: Character match interrupt enable
    const uint32_t UART7_CR1_CMIE = 1U << 14 ;

  // Field MME: Mute mode enable
    const uint32_t UART7_CR1_MME = 1U << 13 ;

  // Field M0: Word length
    const uint32_t UART7_CR1_M0 = 1U << 12 ;

  // Field WAKE: Receiver wakeup method
    const uint32_t UART7_CR1_WAKE = 1U << 11 ;

  // Field PCE: Parity control enable
    const uint32_t UART7_CR1_PCE = 1U << 10 ;

  // Field PS: Parity selection
    const uint32_t UART7_CR1_PS = 1U << 9 ;

  // Field PEIE: PE interrupt enable
    const uint32_t UART7_CR1_PEIE = 1U << 8 ;

  // Field TXEIE: interrupt enable
    const uint32_t UART7_CR1_TXEIE = 1U << 7 ;

  // Field TCIE: Transmission complete interrupt enable
    const uint32_t UART7_CR1_TCIE = 1U << 6 ;

  // Field RXNEIE: RXNE interrupt enable
    const uint32_t UART7_CR1_RXNEIE = 1U << 5 ;

  // Field IDLEIE: IDLE interrupt enable
    const uint32_t UART7_CR1_IDLEIE = 1U << 4 ;

  // Field TE: Transmitter enable
    const uint32_t UART7_CR1_TE = 1U << 3 ;

  // Field RE: Receiver enable
    const uint32_t UART7_CR1_RE = 1U << 2 ;

  // Field UESM: USART enable in Stop mode
    const uint32_t UART7_CR1_UESM = 1U << 1 ;

  // Field UE: USART enable
    const uint32_t UART7_CR1_UE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: Control register 2
  #define UART7_CR2 (* ((volatile uint32_t *) (0x40007800 + 4)))

  // Field ADD4_7: Address of the USART node
    inline uint32_t UART7_CR2_ADD4_7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field ADD0_3: Address of the USART node
    inline uint32_t UART7_CR2_ADD0_3 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field RTOEN: Receiver timeout enable
    const uint32_t UART7_CR2_RTOEN = 1U << 23 ;

  // Field ABRMOD1: Auto baud rate mode
    const uint32_t UART7_CR2_ABRMOD1 = 1U << 22 ;

  // Field ABRMOD0: ABRMOD0
    const uint32_t UART7_CR2_ABRMOD0 = 1U << 21 ;

  // Field ABREN: Auto baud rate enable
    const uint32_t UART7_CR2_ABREN = 1U << 20 ;

  // Field MSBFIRST: Most significant bit first
    const uint32_t UART7_CR2_MSBFIRST = 1U << 19 ;

  // Field TAINV: Binary data inversion
    const uint32_t UART7_CR2_TAINV = 1U << 18 ;

  // Field TXINV: TX pin active level inversion
    const uint32_t UART7_CR2_TXINV = 1U << 17 ;

  // Field RXINV: RX pin active level inversion
    const uint32_t UART7_CR2_RXINV = 1U << 16 ;

  // Field SWAP: Swap TX/RX pins
    const uint32_t UART7_CR2_SWAP = 1U << 15 ;

  // Field LINEN: LIN mode enable
    const uint32_t UART7_CR2_LINEN = 1U << 14 ;

  // Field STOP: STOP bits
    inline uint32_t UART7_CR2_STOP (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field CLKEN: Clock enable
    const uint32_t UART7_CR2_CLKEN = 1U << 11 ;

  // Field CPOL: Clock polarity
    const uint32_t UART7_CR2_CPOL = 1U << 10 ;

  // Field CPHA: Clock phase
    const uint32_t UART7_CR2_CPHA = 1U << 9 ;

  // Field LBCL: Last bit clock pulse
    const uint32_t UART7_CR2_LBCL = 1U << 8 ;

  // Field LBDIE: LIN break detection interrupt enable
    const uint32_t UART7_CR2_LBDIE = 1U << 6 ;

  // Field LBDL: LIN break detection length
    const uint32_t UART7_CR2_LBDL = 1U << 5 ;

  // Field ADDM7: 7-bit Address Detection/4-bit Address Detection
    const uint32_t UART7_CR2_ADDM7 = 1U << 4 ;

//------------------------------------------------------------------------------

//---  Register CR3: Control register 3
  #define UART7_CR3 (* ((volatile uint32_t *) (0x40007800 + 8)))

  // Field WUFIE: Wakeup from Stop mode interrupt enable
    const uint32_t UART7_CR3_WUFIE = 1U << 22 ;

  // Field WUS: Wakeup from Stop mode interrupt flag selection
    inline uint32_t UART7_CR3_WUS (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field SCARCNT: Smartcard auto-retry count
    inline uint32_t UART7_CR3_SCARCNT (const uint32_t inValue) {return (inValue & 0x7U) << 17 ; }

  // Field DEP: Driver enable polarity selection
    const uint32_t UART7_CR3_DEP = 1U << 15 ;

  // Field DEM: Driver enable mode
    const uint32_t UART7_CR3_DEM = 1U << 14 ;

  // Field DDRE: DMA Disable on Reception Error
    const uint32_t UART7_CR3_DDRE = 1U << 13 ;

  // Field OVRDIS: Overrun Disable
    const uint32_t UART7_CR3_OVRDIS = 1U << 12 ;

  // Field ONEBIT: One sample bit method enable
    const uint32_t UART7_CR3_ONEBIT = 1U << 11 ;

  // Field CTSIE: CTS interrupt enable
    const uint32_t UART7_CR3_CTSIE = 1U << 10 ;

  // Field CTSE: CTS enable
    const uint32_t UART7_CR3_CTSE = 1U << 9 ;

  // Field RTSE: RTS enable
    const uint32_t UART7_CR3_RTSE = 1U << 8 ;

  // Field DMAT: DMA enable transmitter
    const uint32_t UART7_CR3_DMAT = 1U << 7 ;

  // Field DMAR: DMA enable receiver
    const uint32_t UART7_CR3_DMAR = 1U << 6 ;

  // Field SCEN: Smartcard mode enable
    const uint32_t UART7_CR3_SCEN = 1U << 5 ;

  // Field NACK: Smartcard NACK enable
    const uint32_t UART7_CR3_NACK = 1U << 4 ;

  // Field HDSEL: Half-duplex selection
    const uint32_t UART7_CR3_HDSEL = 1U << 3 ;

  // Field IRLP: Ir low-power
    const uint32_t UART7_CR3_IRLP = 1U << 2 ;

  // Field IREN: Ir mode enable
    const uint32_t UART7_CR3_IREN = 1U << 1 ;

  // Field EIE: Error interrupt enable
    const uint32_t UART7_CR3_EIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BRR: Baud rate register
  #define UART7_BRR (* ((volatile uint32_t *) (0x40007800 + 12)))

  // Field DIV_Mantissa: DIV_Mantissa
    inline uint32_t UART7_BRR_DIV_Mantissa (const uint32_t inValue) {return (inValue & 0xFFFU) << 4 ; }

  // Field DIV_Fraction: DIV_Fraction
    inline uint32_t UART7_BRR_DIV_Fraction (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register GTPR: Guard time and prescaler register
  #define UART7_GTPR (* ((volatile uint32_t *) (0x40007800 + 16)))

  // Field GT: Guard time value
    inline uint32_t UART7_GTPR_GT (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field PSC: Prescaler value
    inline uint32_t UART7_GTPR_PSC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RTOR: Receiver timeout register
  #define UART7_RTOR (* ((volatile uint32_t *) (0x40007800 + 20)))

  // Field BLEN: Block Length
    inline uint32_t UART7_RTOR_BLEN (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field RTO: Receiver timeout value
    inline uint32_t UART7_RTOR_RTO (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RQR: Request register
  #define UART7_RQR (* ((volatile uint32_t *) (0x40007800 + 24)))

  // Field TXFRQ: Transmit data flush request
    const uint32_t UART7_RQR_TXFRQ = 1U << 4 ;

  // Field RXFRQ: Receive data flush request
    const uint32_t UART7_RQR_RXFRQ = 1U << 3 ;

  // Field MMRQ: Mute mode request
    const uint32_t UART7_RQR_MMRQ = 1U << 2 ;

  // Field SBKRQ: Send break request
    const uint32_t UART7_RQR_SBKRQ = 1U << 1 ;

  // Field ABRRQ: Auto baud rate request
    const uint32_t UART7_RQR_ABRRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt & status register
  #define UART7_ISR (* ((const volatile uint32_t *) (0x40007800 + 28)))

  // Field REACK: REACK
    const uint32_t UART7_ISR_REACK = 1U << 22 ;

  // Field TEACK: TEACK
    const uint32_t UART7_ISR_TEACK = 1U << 21 ;

  // Field WUF: WUF
    const uint32_t UART7_ISR_WUF = 1U << 20 ;

  // Field RWU: RWU
    const uint32_t UART7_ISR_RWU = 1U << 19 ;

  // Field SBKF: SBKF
    const uint32_t UART7_ISR_SBKF = 1U << 18 ;

  // Field CMF: CMF
    const uint32_t UART7_ISR_CMF = 1U << 17 ;

  // Field BUSY: BUSY
    const uint32_t UART7_ISR_BUSY = 1U << 16 ;

  // Field ABRF: ABRF
    const uint32_t UART7_ISR_ABRF = 1U << 15 ;

  // Field ABRE: ABRE
    const uint32_t UART7_ISR_ABRE = 1U << 14 ;

  // Field EOBF: EOBF
    const uint32_t UART7_ISR_EOBF = 1U << 12 ;

  // Field RTOF: RTOF
    const uint32_t UART7_ISR_RTOF = 1U << 11 ;

  // Field CTS: CTS
    const uint32_t UART7_ISR_CTS = 1U << 10 ;

  // Field CTSIF: CTSIF
    const uint32_t UART7_ISR_CTSIF = 1U << 9 ;

  // Field LBDF: LBDF
    const uint32_t UART7_ISR_LBDF = 1U << 8 ;

  // Field TXE: TXE
    const uint32_t UART7_ISR_TXE = 1U << 7 ;

  // Field TC: TC
    const uint32_t UART7_ISR_TC = 1U << 6 ;

  // Field RXNE: RXNE
    const uint32_t UART7_ISR_RXNE = 1U << 5 ;

  // Field IDLE: IDLE
    const uint32_t UART7_ISR_IDLE = 1U << 4 ;

  // Field ORE: ORE
    const uint32_t UART7_ISR_ORE = 1U << 3 ;

  // Field NF: NF
    const uint32_t UART7_ISR_NF = 1U << 2 ;

  // Field FE: FE
    const uint32_t UART7_ISR_FE = 1U << 1 ;

  // Field PE: PE
    const uint32_t UART7_ISR_PE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt flag clear register
  #define UART7_ICR (* ((volatile uint32_t *) (0x40007800 + 32)))

  // Field WUCF: Wakeup from Stop mode clear flag
    const uint32_t UART7_ICR_WUCF = 1U << 20 ;

  // Field CMCF: Character match clear flag
    const uint32_t UART7_ICR_CMCF = 1U << 17 ;

  // Field EOBCF: End of block clear flag
    const uint32_t UART7_ICR_EOBCF = 1U << 12 ;

  // Field RTOCF: Receiver timeout clear flag
    const uint32_t UART7_ICR_RTOCF = 1U << 11 ;

  // Field CTSCF: CTS clear flag
    const uint32_t UART7_ICR_CTSCF = 1U << 9 ;

  // Field LBDCF: LIN break detection clear flag
    const uint32_t UART7_ICR_LBDCF = 1U << 8 ;

  // Field TCCF: Transmission complete clear flag
    const uint32_t UART7_ICR_TCCF = 1U << 6 ;

  // Field IDLECF: Idle line detected clear flag
    const uint32_t UART7_ICR_IDLECF = 1U << 4 ;

  // Field ORECF: Overrun error clear flag
    const uint32_t UART7_ICR_ORECF = 1U << 3 ;

  // Field NCF: Noise detected clear flag
    const uint32_t UART7_ICR_NCF = 1U << 2 ;

  // Field FECF: Framing error clear flag
    const uint32_t UART7_ICR_FECF = 1U << 1 ;

  // Field PECF: Parity error clear flag
    const uint32_t UART7_ICR_PECF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register RDR: Receive data register
  #define UART7_RDR (* ((const volatile uint32_t *) (0x40007800 + 36)))

  // Field RDR: Receive data value
    inline uint32_t UART7_RDR_RDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDR: Transmit data register
  #define UART7_TDR (* ((volatile uint32_t *) (0x40007800 + 40)))

  // Field TDR: Transmit data value
    inline uint32_t UART7_TDR_TDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral UART8
//------------------------------------------------------------------------------

//---  Register CR1: Control register 1
  #define UART8_CR1 (* ((volatile uint32_t *) (0x40007C00 + 0)))

  // Field M1: Word length
    const uint32_t UART8_CR1_M1 = 1U << 28 ;

  // Field EOBIE: End of Block interrupt enable
    const uint32_t UART8_CR1_EOBIE = 1U << 27 ;

  // Field RTOIE: Receiver timeout interrupt enable
    const uint32_t UART8_CR1_RTOIE = 1U << 26 ;

  // Field DEAT4: Driver Enable assertion time
    const uint32_t UART8_CR1_DEAT4 = 1U << 25 ;

  // Field DEAT3: DEAT3
    const uint32_t UART8_CR1_DEAT3 = 1U << 24 ;

  // Field DEAT2: DEAT2
    const uint32_t UART8_CR1_DEAT2 = 1U << 23 ;

  // Field DEAT1: DEAT1
    const uint32_t UART8_CR1_DEAT1 = 1U << 22 ;

  // Field DEAT0: DEAT0
    const uint32_t UART8_CR1_DEAT0 = 1U << 21 ;

  // Field DEDT4: Driver Enable de-assertion time
    const uint32_t UART8_CR1_DEDT4 = 1U << 20 ;

  // Field DEDT3: DEDT3
    const uint32_t UART8_CR1_DEDT3 = 1U << 19 ;

  // Field DEDT2: DEDT2
    const uint32_t UART8_CR1_DEDT2 = 1U << 18 ;

  // Field DEDT1: DEDT1
    const uint32_t UART8_CR1_DEDT1 = 1U << 17 ;

  // Field DEDT0: DEDT0
    const uint32_t UART8_CR1_DEDT0 = 1U << 16 ;

  // Field OVER8: Oversampling mode
    const uint32_t UART8_CR1_OVER8 = 1U << 15 ;

  // Field CMIE: Character match interrupt enable
    const uint32_t UART8_CR1_CMIE = 1U << 14 ;

  // Field MME: Mute mode enable
    const uint32_t UART8_CR1_MME = 1U << 13 ;

  // Field M0: Word length
    const uint32_t UART8_CR1_M0 = 1U << 12 ;

  // Field WAKE: Receiver wakeup method
    const uint32_t UART8_CR1_WAKE = 1U << 11 ;

  // Field PCE: Parity control enable
    const uint32_t UART8_CR1_PCE = 1U << 10 ;

  // Field PS: Parity selection
    const uint32_t UART8_CR1_PS = 1U << 9 ;

  // Field PEIE: PE interrupt enable
    const uint32_t UART8_CR1_PEIE = 1U << 8 ;

  // Field TXEIE: interrupt enable
    const uint32_t UART8_CR1_TXEIE = 1U << 7 ;

  // Field TCIE: Transmission complete interrupt enable
    const uint32_t UART8_CR1_TCIE = 1U << 6 ;

  // Field RXNEIE: RXNE interrupt enable
    const uint32_t UART8_CR1_RXNEIE = 1U << 5 ;

  // Field IDLEIE: IDLE interrupt enable
    const uint32_t UART8_CR1_IDLEIE = 1U << 4 ;

  // Field TE: Transmitter enable
    const uint32_t UART8_CR1_TE = 1U << 3 ;

  // Field RE: Receiver enable
    const uint32_t UART8_CR1_RE = 1U << 2 ;

  // Field UESM: USART enable in Stop mode
    const uint32_t UART8_CR1_UESM = 1U << 1 ;

  // Field UE: USART enable
    const uint32_t UART8_CR1_UE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: Control register 2
  #define UART8_CR2 (* ((volatile uint32_t *) (0x40007C00 + 4)))

  // Field ADD4_7: Address of the USART node
    inline uint32_t UART8_CR2_ADD4_7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field ADD0_3: Address of the USART node
    inline uint32_t UART8_CR2_ADD0_3 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field RTOEN: Receiver timeout enable
    const uint32_t UART8_CR2_RTOEN = 1U << 23 ;

  // Field ABRMOD1: Auto baud rate mode
    const uint32_t UART8_CR2_ABRMOD1 = 1U << 22 ;

  // Field ABRMOD0: ABRMOD0
    const uint32_t UART8_CR2_ABRMOD0 = 1U << 21 ;

  // Field ABREN: Auto baud rate enable
    const uint32_t UART8_CR2_ABREN = 1U << 20 ;

  // Field MSBFIRST: Most significant bit first
    const uint32_t UART8_CR2_MSBFIRST = 1U << 19 ;

  // Field TAINV: Binary data inversion
    const uint32_t UART8_CR2_TAINV = 1U << 18 ;

  // Field TXINV: TX pin active level inversion
    const uint32_t UART8_CR2_TXINV = 1U << 17 ;

  // Field RXINV: RX pin active level inversion
    const uint32_t UART8_CR2_RXINV = 1U << 16 ;

  // Field SWAP: Swap TX/RX pins
    const uint32_t UART8_CR2_SWAP = 1U << 15 ;

  // Field LINEN: LIN mode enable
    const uint32_t UART8_CR2_LINEN = 1U << 14 ;

  // Field STOP: STOP bits
    inline uint32_t UART8_CR2_STOP (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field CLKEN: Clock enable
    const uint32_t UART8_CR2_CLKEN = 1U << 11 ;

  // Field CPOL: Clock polarity
    const uint32_t UART8_CR2_CPOL = 1U << 10 ;

  // Field CPHA: Clock phase
    const uint32_t UART8_CR2_CPHA = 1U << 9 ;

  // Field LBCL: Last bit clock pulse
    const uint32_t UART8_CR2_LBCL = 1U << 8 ;

  // Field LBDIE: LIN break detection interrupt enable
    const uint32_t UART8_CR2_LBDIE = 1U << 6 ;

  // Field LBDL: LIN break detection length
    const uint32_t UART8_CR2_LBDL = 1U << 5 ;

  // Field ADDM7: 7-bit Address Detection/4-bit Address Detection
    const uint32_t UART8_CR2_ADDM7 = 1U << 4 ;

//------------------------------------------------------------------------------

//---  Register CR3: Control register 3
  #define UART8_CR3 (* ((volatile uint32_t *) (0x40007C00 + 8)))

  // Field WUFIE: Wakeup from Stop mode interrupt enable
    const uint32_t UART8_CR3_WUFIE = 1U << 22 ;

  // Field WUS: Wakeup from Stop mode interrupt flag selection
    inline uint32_t UART8_CR3_WUS (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field SCARCNT: Smartcard auto-retry count
    inline uint32_t UART8_CR3_SCARCNT (const uint32_t inValue) {return (inValue & 0x7U) << 17 ; }

  // Field DEP: Driver enable polarity selection
    const uint32_t UART8_CR3_DEP = 1U << 15 ;

  // Field DEM: Driver enable mode
    const uint32_t UART8_CR3_DEM = 1U << 14 ;

  // Field DDRE: DMA Disable on Reception Error
    const uint32_t UART8_CR3_DDRE = 1U << 13 ;

  // Field OVRDIS: Overrun Disable
    const uint32_t UART8_CR3_OVRDIS = 1U << 12 ;

  // Field ONEBIT: One sample bit method enable
    const uint32_t UART8_CR3_ONEBIT = 1U << 11 ;

  // Field CTSIE: CTS interrupt enable
    const uint32_t UART8_CR3_CTSIE = 1U << 10 ;

  // Field CTSE: CTS enable
    const uint32_t UART8_CR3_CTSE = 1U << 9 ;

  // Field RTSE: RTS enable
    const uint32_t UART8_CR3_RTSE = 1U << 8 ;

  // Field DMAT: DMA enable transmitter
    const uint32_t UART8_CR3_DMAT = 1U << 7 ;

  // Field DMAR: DMA enable receiver
    const uint32_t UART8_CR3_DMAR = 1U << 6 ;

  // Field SCEN: Smartcard mode enable
    const uint32_t UART8_CR3_SCEN = 1U << 5 ;

  // Field NACK: Smartcard NACK enable
    const uint32_t UART8_CR3_NACK = 1U << 4 ;

  // Field HDSEL: Half-duplex selection
    const uint32_t UART8_CR3_HDSEL = 1U << 3 ;

  // Field IRLP: Ir low-power
    const uint32_t UART8_CR3_IRLP = 1U << 2 ;

  // Field IREN: Ir mode enable
    const uint32_t UART8_CR3_IREN = 1U << 1 ;

  // Field EIE: Error interrupt enable
    const uint32_t UART8_CR3_EIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BRR: Baud rate register
  #define UART8_BRR (* ((volatile uint32_t *) (0x40007C00 + 12)))

  // Field DIV_Mantissa: DIV_Mantissa
    inline uint32_t UART8_BRR_DIV_Mantissa (const uint32_t inValue) {return (inValue & 0xFFFU) << 4 ; }

  // Field DIV_Fraction: DIV_Fraction
    inline uint32_t UART8_BRR_DIV_Fraction (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register GTPR: Guard time and prescaler register
  #define UART8_GTPR (* ((volatile uint32_t *) (0x40007C00 + 16)))

  // Field GT: Guard time value
    inline uint32_t UART8_GTPR_GT (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field PSC: Prescaler value
    inline uint32_t UART8_GTPR_PSC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RTOR: Receiver timeout register
  #define UART8_RTOR (* ((volatile uint32_t *) (0x40007C00 + 20)))

  // Field BLEN: Block Length
    inline uint32_t UART8_RTOR_BLEN (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field RTO: Receiver timeout value
    inline uint32_t UART8_RTOR_RTO (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RQR: Request register
  #define UART8_RQR (* ((volatile uint32_t *) (0x40007C00 + 24)))

  // Field TXFRQ: Transmit data flush request
    const uint32_t UART8_RQR_TXFRQ = 1U << 4 ;

  // Field RXFRQ: Receive data flush request
    const uint32_t UART8_RQR_RXFRQ = 1U << 3 ;

  // Field MMRQ: Mute mode request
    const uint32_t UART8_RQR_MMRQ = 1U << 2 ;

  // Field SBKRQ: Send break request
    const uint32_t UART8_RQR_SBKRQ = 1U << 1 ;

  // Field ABRRQ: Auto baud rate request
    const uint32_t UART8_RQR_ABRRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt & status register
  #define UART8_ISR (* ((const volatile uint32_t *) (0x40007C00 + 28)))

  // Field REACK: REACK
    const uint32_t UART8_ISR_REACK = 1U << 22 ;

  // Field TEACK: TEACK
    const uint32_t UART8_ISR_TEACK = 1U << 21 ;

  // Field WUF: WUF
    const uint32_t UART8_ISR_WUF = 1U << 20 ;

  // Field RWU: RWU
    const uint32_t UART8_ISR_RWU = 1U << 19 ;

  // Field SBKF: SBKF
    const uint32_t UART8_ISR_SBKF = 1U << 18 ;

  // Field CMF: CMF
    const uint32_t UART8_ISR_CMF = 1U << 17 ;

  // Field BUSY: BUSY
    const uint32_t UART8_ISR_BUSY = 1U << 16 ;

  // Field ABRF: ABRF
    const uint32_t UART8_ISR_ABRF = 1U << 15 ;

  // Field ABRE: ABRE
    const uint32_t UART8_ISR_ABRE = 1U << 14 ;

  // Field EOBF: EOBF
    const uint32_t UART8_ISR_EOBF = 1U << 12 ;

  // Field RTOF: RTOF
    const uint32_t UART8_ISR_RTOF = 1U << 11 ;

  // Field CTS: CTS
    const uint32_t UART8_ISR_CTS = 1U << 10 ;

  // Field CTSIF: CTSIF
    const uint32_t UART8_ISR_CTSIF = 1U << 9 ;

  // Field LBDF: LBDF
    const uint32_t UART8_ISR_LBDF = 1U << 8 ;

  // Field TXE: TXE
    const uint32_t UART8_ISR_TXE = 1U << 7 ;

  // Field TC: TC
    const uint32_t UART8_ISR_TC = 1U << 6 ;

  // Field RXNE: RXNE
    const uint32_t UART8_ISR_RXNE = 1U << 5 ;

  // Field IDLE: IDLE
    const uint32_t UART8_ISR_IDLE = 1U << 4 ;

  // Field ORE: ORE
    const uint32_t UART8_ISR_ORE = 1U << 3 ;

  // Field NF: NF
    const uint32_t UART8_ISR_NF = 1U << 2 ;

  // Field FE: FE
    const uint32_t UART8_ISR_FE = 1U << 1 ;

  // Field PE: PE
    const uint32_t UART8_ISR_PE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt flag clear register
  #define UART8_ICR (* ((volatile uint32_t *) (0x40007C00 + 32)))

  // Field WUCF: Wakeup from Stop mode clear flag
    const uint32_t UART8_ICR_WUCF = 1U << 20 ;

  // Field CMCF: Character match clear flag
    const uint32_t UART8_ICR_CMCF = 1U << 17 ;

  // Field EOBCF: End of block clear flag
    const uint32_t UART8_ICR_EOBCF = 1U << 12 ;

  // Field RTOCF: Receiver timeout clear flag
    const uint32_t UART8_ICR_RTOCF = 1U << 11 ;

  // Field CTSCF: CTS clear flag
    const uint32_t UART8_ICR_CTSCF = 1U << 9 ;

  // Field LBDCF: LIN break detection clear flag
    const uint32_t UART8_ICR_LBDCF = 1U << 8 ;

  // Field TCCF: Transmission complete clear flag
    const uint32_t UART8_ICR_TCCF = 1U << 6 ;

  // Field IDLECF: Idle line detected clear flag
    const uint32_t UART8_ICR_IDLECF = 1U << 4 ;

  // Field ORECF: Overrun error clear flag
    const uint32_t UART8_ICR_ORECF = 1U << 3 ;

  // Field NCF: Noise detected clear flag
    const uint32_t UART8_ICR_NCF = 1U << 2 ;

  // Field FECF: Framing error clear flag
    const uint32_t UART8_ICR_FECF = 1U << 1 ;

  // Field PECF: Parity error clear flag
    const uint32_t UART8_ICR_PECF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register RDR: Receive data register
  #define UART8_RDR (* ((const volatile uint32_t *) (0x40007C00 + 36)))

  // Field RDR: Receive data value
    inline uint32_t UART8_RDR_RDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDR: Transmit data register
  #define UART8_TDR (* ((volatile uint32_t *) (0x40007C00 + 40)))

  // Field TDR: Transmit data value
    inline uint32_t UART8_TDR_TDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral USART1
//------------------------------------------------------------------------------

//---  Register CR1: Control register 1
  #define USART1_CR1 (* ((volatile uint32_t *) (0x40011000 + 0)))

  // Field M1: Word length
    const uint32_t USART1_CR1_M1 = 1U << 28 ;

  // Field EOBIE: End of Block interrupt enable
    const uint32_t USART1_CR1_EOBIE = 1U << 27 ;

  // Field RTOIE: Receiver timeout interrupt enable
    const uint32_t USART1_CR1_RTOIE = 1U << 26 ;

  // Field DEAT4: Driver Enable assertion time
    const uint32_t USART1_CR1_DEAT4 = 1U << 25 ;

  // Field DEAT3: DEAT3
    const uint32_t USART1_CR1_DEAT3 = 1U << 24 ;

  // Field DEAT2: DEAT2
    const uint32_t USART1_CR1_DEAT2 = 1U << 23 ;

  // Field DEAT1: DEAT1
    const uint32_t USART1_CR1_DEAT1 = 1U << 22 ;

  // Field DEAT0: DEAT0
    const uint32_t USART1_CR1_DEAT0 = 1U << 21 ;

  // Field DEDT4: Driver Enable de-assertion time
    const uint32_t USART1_CR1_DEDT4 = 1U << 20 ;

  // Field DEDT3: DEDT3
    const uint32_t USART1_CR1_DEDT3 = 1U << 19 ;

  // Field DEDT2: DEDT2
    const uint32_t USART1_CR1_DEDT2 = 1U << 18 ;

  // Field DEDT1: DEDT1
    const uint32_t USART1_CR1_DEDT1 = 1U << 17 ;

  // Field DEDT0: DEDT0
    const uint32_t USART1_CR1_DEDT0 = 1U << 16 ;

  // Field OVER8: Oversampling mode
    const uint32_t USART1_CR1_OVER8 = 1U << 15 ;

  // Field CMIE: Character match interrupt enable
    const uint32_t USART1_CR1_CMIE = 1U << 14 ;

  // Field MME: Mute mode enable
    const uint32_t USART1_CR1_MME = 1U << 13 ;

  // Field M0: Word length
    const uint32_t USART1_CR1_M0 = 1U << 12 ;

  // Field WAKE: Receiver wakeup method
    const uint32_t USART1_CR1_WAKE = 1U << 11 ;

  // Field PCE: Parity control enable
    const uint32_t USART1_CR1_PCE = 1U << 10 ;

  // Field PS: Parity selection
    const uint32_t USART1_CR1_PS = 1U << 9 ;

  // Field PEIE: PE interrupt enable
    const uint32_t USART1_CR1_PEIE = 1U << 8 ;

  // Field TXEIE: interrupt enable
    const uint32_t USART1_CR1_TXEIE = 1U << 7 ;

  // Field TCIE: Transmission complete interrupt enable
    const uint32_t USART1_CR1_TCIE = 1U << 6 ;

  // Field RXNEIE: RXNE interrupt enable
    const uint32_t USART1_CR1_RXNEIE = 1U << 5 ;

  // Field IDLEIE: IDLE interrupt enable
    const uint32_t USART1_CR1_IDLEIE = 1U << 4 ;

  // Field TE: Transmitter enable
    const uint32_t USART1_CR1_TE = 1U << 3 ;

  // Field RE: Receiver enable
    const uint32_t USART1_CR1_RE = 1U << 2 ;

  // Field UESM: USART enable in Stop mode
    const uint32_t USART1_CR1_UESM = 1U << 1 ;

  // Field UE: USART enable
    const uint32_t USART1_CR1_UE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: Control register 2
  #define USART1_CR2 (* ((volatile uint32_t *) (0x40011000 + 4)))

  // Field ADD4_7: Address of the USART node
    inline uint32_t USART1_CR2_ADD4_7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field ADD0_3: Address of the USART node
    inline uint32_t USART1_CR2_ADD0_3 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field RTOEN: Receiver timeout enable
    const uint32_t USART1_CR2_RTOEN = 1U << 23 ;

  // Field ABRMOD1: Auto baud rate mode
    const uint32_t USART1_CR2_ABRMOD1 = 1U << 22 ;

  // Field ABRMOD0: ABRMOD0
    const uint32_t USART1_CR2_ABRMOD0 = 1U << 21 ;

  // Field ABREN: Auto baud rate enable
    const uint32_t USART1_CR2_ABREN = 1U << 20 ;

  // Field MSBFIRST: Most significant bit first
    const uint32_t USART1_CR2_MSBFIRST = 1U << 19 ;

  // Field TAINV: Binary data inversion
    const uint32_t USART1_CR2_TAINV = 1U << 18 ;

  // Field TXINV: TX pin active level inversion
    const uint32_t USART1_CR2_TXINV = 1U << 17 ;

  // Field RXINV: RX pin active level inversion
    const uint32_t USART1_CR2_RXINV = 1U << 16 ;

  // Field SWAP: Swap TX/RX pins
    const uint32_t USART1_CR2_SWAP = 1U << 15 ;

  // Field LINEN: LIN mode enable
    const uint32_t USART1_CR2_LINEN = 1U << 14 ;

  // Field STOP: STOP bits
    inline uint32_t USART1_CR2_STOP (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field CLKEN: Clock enable
    const uint32_t USART1_CR2_CLKEN = 1U << 11 ;

  // Field CPOL: Clock polarity
    const uint32_t USART1_CR2_CPOL = 1U << 10 ;

  // Field CPHA: Clock phase
    const uint32_t USART1_CR2_CPHA = 1U << 9 ;

  // Field LBCL: Last bit clock pulse
    const uint32_t USART1_CR2_LBCL = 1U << 8 ;

  // Field LBDIE: LIN break detection interrupt enable
    const uint32_t USART1_CR2_LBDIE = 1U << 6 ;

  // Field LBDL: LIN break detection length
    const uint32_t USART1_CR2_LBDL = 1U << 5 ;

  // Field ADDM7: 7-bit Address Detection/4-bit Address Detection
    const uint32_t USART1_CR2_ADDM7 = 1U << 4 ;

//------------------------------------------------------------------------------

//---  Register CR3: Control register 3
  #define USART1_CR3 (* ((volatile uint32_t *) (0x40011000 + 8)))

  // Field WUFIE: Wakeup from Stop mode interrupt enable
    const uint32_t USART1_CR3_WUFIE = 1U << 22 ;

  // Field WUS: Wakeup from Stop mode interrupt flag selection
    inline uint32_t USART1_CR3_WUS (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field SCARCNT: Smartcard auto-retry count
    inline uint32_t USART1_CR3_SCARCNT (const uint32_t inValue) {return (inValue & 0x7U) << 17 ; }

  // Field DEP: Driver enable polarity selection
    const uint32_t USART1_CR3_DEP = 1U << 15 ;

  // Field DEM: Driver enable mode
    const uint32_t USART1_CR3_DEM = 1U << 14 ;

  // Field DDRE: DMA Disable on Reception Error
    const uint32_t USART1_CR3_DDRE = 1U << 13 ;

  // Field OVRDIS: Overrun Disable
    const uint32_t USART1_CR3_OVRDIS = 1U << 12 ;

  // Field ONEBIT: One sample bit method enable
    const uint32_t USART1_CR3_ONEBIT = 1U << 11 ;

  // Field CTSIE: CTS interrupt enable
    const uint32_t USART1_CR3_CTSIE = 1U << 10 ;

  // Field CTSE: CTS enable
    const uint32_t USART1_CR3_CTSE = 1U << 9 ;

  // Field RTSE: RTS enable
    const uint32_t USART1_CR3_RTSE = 1U << 8 ;

  // Field DMAT: DMA enable transmitter
    const uint32_t USART1_CR3_DMAT = 1U << 7 ;

  // Field DMAR: DMA enable receiver
    const uint32_t USART1_CR3_DMAR = 1U << 6 ;

  // Field SCEN: Smartcard mode enable
    const uint32_t USART1_CR3_SCEN = 1U << 5 ;

  // Field NACK: Smartcard NACK enable
    const uint32_t USART1_CR3_NACK = 1U << 4 ;

  // Field HDSEL: Half-duplex selection
    const uint32_t USART1_CR3_HDSEL = 1U << 3 ;

  // Field IRLP: Ir low-power
    const uint32_t USART1_CR3_IRLP = 1U << 2 ;

  // Field IREN: Ir mode enable
    const uint32_t USART1_CR3_IREN = 1U << 1 ;

  // Field EIE: Error interrupt enable
    const uint32_t USART1_CR3_EIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BRR: Baud rate register
  #define USART1_BRR (* ((volatile uint32_t *) (0x40011000 + 12)))

  // Field DIV_Mantissa: DIV_Mantissa
    inline uint32_t USART1_BRR_DIV_Mantissa (const uint32_t inValue) {return (inValue & 0xFFFU) << 4 ; }

  // Field DIV_Fraction: DIV_Fraction
    inline uint32_t USART1_BRR_DIV_Fraction (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register GTPR: Guard time and prescaler register
  #define USART1_GTPR (* ((volatile uint32_t *) (0x40011000 + 16)))

  // Field GT: Guard time value
    inline uint32_t USART1_GTPR_GT (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field PSC: Prescaler value
    inline uint32_t USART1_GTPR_PSC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RTOR: Receiver timeout register
  #define USART1_RTOR (* ((volatile uint32_t *) (0x40011000 + 20)))

  // Field BLEN: Block Length
    inline uint32_t USART1_RTOR_BLEN (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field RTO: Receiver timeout value
    inline uint32_t USART1_RTOR_RTO (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RQR: Request register
  #define USART1_RQR (* ((volatile uint32_t *) (0x40011000 + 24)))

  // Field TXFRQ: Transmit data flush request
    const uint32_t USART1_RQR_TXFRQ = 1U << 4 ;

  // Field RXFRQ: Receive data flush request
    const uint32_t USART1_RQR_RXFRQ = 1U << 3 ;

  // Field MMRQ: Mute mode request
    const uint32_t USART1_RQR_MMRQ = 1U << 2 ;

  // Field SBKRQ: Send break request
    const uint32_t USART1_RQR_SBKRQ = 1U << 1 ;

  // Field ABRRQ: Auto baud rate request
    const uint32_t USART1_RQR_ABRRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt & status register
  #define USART1_ISR (* ((const volatile uint32_t *) (0x40011000 + 28)))

  // Field REACK: REACK
    const uint32_t USART1_ISR_REACK = 1U << 22 ;

  // Field TEACK: TEACK
    const uint32_t USART1_ISR_TEACK = 1U << 21 ;

  // Field WUF: WUF
    const uint32_t USART1_ISR_WUF = 1U << 20 ;

  // Field RWU: RWU
    const uint32_t USART1_ISR_RWU = 1U << 19 ;

  // Field SBKF: SBKF
    const uint32_t USART1_ISR_SBKF = 1U << 18 ;

  // Field CMF: CMF
    const uint32_t USART1_ISR_CMF = 1U << 17 ;

  // Field BUSY: BUSY
    const uint32_t USART1_ISR_BUSY = 1U << 16 ;

  // Field ABRF: ABRF
    const uint32_t USART1_ISR_ABRF = 1U << 15 ;

  // Field ABRE: ABRE
    const uint32_t USART1_ISR_ABRE = 1U << 14 ;

  // Field EOBF: EOBF
    const uint32_t USART1_ISR_EOBF = 1U << 12 ;

  // Field RTOF: RTOF
    const uint32_t USART1_ISR_RTOF = 1U << 11 ;

  // Field CTS: CTS
    const uint32_t USART1_ISR_CTS = 1U << 10 ;

  // Field CTSIF: CTSIF
    const uint32_t USART1_ISR_CTSIF = 1U << 9 ;

  // Field LBDF: LBDF
    const uint32_t USART1_ISR_LBDF = 1U << 8 ;

  // Field TXE: TXE
    const uint32_t USART1_ISR_TXE = 1U << 7 ;

  // Field TC: TC
    const uint32_t USART1_ISR_TC = 1U << 6 ;

  // Field RXNE: RXNE
    const uint32_t USART1_ISR_RXNE = 1U << 5 ;

  // Field IDLE: IDLE
    const uint32_t USART1_ISR_IDLE = 1U << 4 ;

  // Field ORE: ORE
    const uint32_t USART1_ISR_ORE = 1U << 3 ;

  // Field NF: NF
    const uint32_t USART1_ISR_NF = 1U << 2 ;

  // Field FE: FE
    const uint32_t USART1_ISR_FE = 1U << 1 ;

  // Field PE: PE
    const uint32_t USART1_ISR_PE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt flag clear register
  #define USART1_ICR (* ((volatile uint32_t *) (0x40011000 + 32)))

  // Field WUCF: Wakeup from Stop mode clear flag
    const uint32_t USART1_ICR_WUCF = 1U << 20 ;

  // Field CMCF: Character match clear flag
    const uint32_t USART1_ICR_CMCF = 1U << 17 ;

  // Field EOBCF: End of block clear flag
    const uint32_t USART1_ICR_EOBCF = 1U << 12 ;

  // Field RTOCF: Receiver timeout clear flag
    const uint32_t USART1_ICR_RTOCF = 1U << 11 ;

  // Field CTSCF: CTS clear flag
    const uint32_t USART1_ICR_CTSCF = 1U << 9 ;

  // Field LBDCF: LIN break detection clear flag
    const uint32_t USART1_ICR_LBDCF = 1U << 8 ;

  // Field TCCF: Transmission complete clear flag
    const uint32_t USART1_ICR_TCCF = 1U << 6 ;

  // Field IDLECF: Idle line detected clear flag
    const uint32_t USART1_ICR_IDLECF = 1U << 4 ;

  // Field ORECF: Overrun error clear flag
    const uint32_t USART1_ICR_ORECF = 1U << 3 ;

  // Field NCF: Noise detected clear flag
    const uint32_t USART1_ICR_NCF = 1U << 2 ;

  // Field FECF: Framing error clear flag
    const uint32_t USART1_ICR_FECF = 1U << 1 ;

  // Field PECF: Parity error clear flag
    const uint32_t USART1_ICR_PECF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register RDR: Receive data register
  #define USART1_RDR (* ((const volatile uint32_t *) (0x40011000 + 36)))

  // Field RDR: Receive data value
    inline uint32_t USART1_RDR_RDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDR: Transmit data register
  #define USART1_TDR (* ((volatile uint32_t *) (0x40011000 + 40)))

  // Field TDR: Transmit data value
    inline uint32_t USART1_TDR_TDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral USART2
//------------------------------------------------------------------------------

//---  Register CR1: Control register 1
  #define USART2_CR1 (* ((volatile uint32_t *) (0x40004400 + 0)))

  // Field M1: Word length
    const uint32_t USART2_CR1_M1 = 1U << 28 ;

  // Field EOBIE: End of Block interrupt enable
    const uint32_t USART2_CR1_EOBIE = 1U << 27 ;

  // Field RTOIE: Receiver timeout interrupt enable
    const uint32_t USART2_CR1_RTOIE = 1U << 26 ;

  // Field DEAT4: Driver Enable assertion time
    const uint32_t USART2_CR1_DEAT4 = 1U << 25 ;

  // Field DEAT3: DEAT3
    const uint32_t USART2_CR1_DEAT3 = 1U << 24 ;

  // Field DEAT2: DEAT2
    const uint32_t USART2_CR1_DEAT2 = 1U << 23 ;

  // Field DEAT1: DEAT1
    const uint32_t USART2_CR1_DEAT1 = 1U << 22 ;

  // Field DEAT0: DEAT0
    const uint32_t USART2_CR1_DEAT0 = 1U << 21 ;

  // Field DEDT4: Driver Enable de-assertion time
    const uint32_t USART2_CR1_DEDT4 = 1U << 20 ;

  // Field DEDT3: DEDT3
    const uint32_t USART2_CR1_DEDT3 = 1U << 19 ;

  // Field DEDT2: DEDT2
    const uint32_t USART2_CR1_DEDT2 = 1U << 18 ;

  // Field DEDT1: DEDT1
    const uint32_t USART2_CR1_DEDT1 = 1U << 17 ;

  // Field DEDT0: DEDT0
    const uint32_t USART2_CR1_DEDT0 = 1U << 16 ;

  // Field OVER8: Oversampling mode
    const uint32_t USART2_CR1_OVER8 = 1U << 15 ;

  // Field CMIE: Character match interrupt enable
    const uint32_t USART2_CR1_CMIE = 1U << 14 ;

  // Field MME: Mute mode enable
    const uint32_t USART2_CR1_MME = 1U << 13 ;

  // Field M0: Word length
    const uint32_t USART2_CR1_M0 = 1U << 12 ;

  // Field WAKE: Receiver wakeup method
    const uint32_t USART2_CR1_WAKE = 1U << 11 ;

  // Field PCE: Parity control enable
    const uint32_t USART2_CR1_PCE = 1U << 10 ;

  // Field PS: Parity selection
    const uint32_t USART2_CR1_PS = 1U << 9 ;

  // Field PEIE: PE interrupt enable
    const uint32_t USART2_CR1_PEIE = 1U << 8 ;

  // Field TXEIE: interrupt enable
    const uint32_t USART2_CR1_TXEIE = 1U << 7 ;

  // Field TCIE: Transmission complete interrupt enable
    const uint32_t USART2_CR1_TCIE = 1U << 6 ;

  // Field RXNEIE: RXNE interrupt enable
    const uint32_t USART2_CR1_RXNEIE = 1U << 5 ;

  // Field IDLEIE: IDLE interrupt enable
    const uint32_t USART2_CR1_IDLEIE = 1U << 4 ;

  // Field TE: Transmitter enable
    const uint32_t USART2_CR1_TE = 1U << 3 ;

  // Field RE: Receiver enable
    const uint32_t USART2_CR1_RE = 1U << 2 ;

  // Field UESM: USART enable in Stop mode
    const uint32_t USART2_CR1_UESM = 1U << 1 ;

  // Field UE: USART enable
    const uint32_t USART2_CR1_UE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: Control register 2
  #define USART2_CR2 (* ((volatile uint32_t *) (0x40004400 + 4)))

  // Field ADD4_7: Address of the USART node
    inline uint32_t USART2_CR2_ADD4_7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field ADD0_3: Address of the USART node
    inline uint32_t USART2_CR2_ADD0_3 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field RTOEN: Receiver timeout enable
    const uint32_t USART2_CR2_RTOEN = 1U << 23 ;

  // Field ABRMOD1: Auto baud rate mode
    const uint32_t USART2_CR2_ABRMOD1 = 1U << 22 ;

  // Field ABRMOD0: ABRMOD0
    const uint32_t USART2_CR2_ABRMOD0 = 1U << 21 ;

  // Field ABREN: Auto baud rate enable
    const uint32_t USART2_CR2_ABREN = 1U << 20 ;

  // Field MSBFIRST: Most significant bit first
    const uint32_t USART2_CR2_MSBFIRST = 1U << 19 ;

  // Field TAINV: Binary data inversion
    const uint32_t USART2_CR2_TAINV = 1U << 18 ;

  // Field TXINV: TX pin active level inversion
    const uint32_t USART2_CR2_TXINV = 1U << 17 ;

  // Field RXINV: RX pin active level inversion
    const uint32_t USART2_CR2_RXINV = 1U << 16 ;

  // Field SWAP: Swap TX/RX pins
    const uint32_t USART2_CR2_SWAP = 1U << 15 ;

  // Field LINEN: LIN mode enable
    const uint32_t USART2_CR2_LINEN = 1U << 14 ;

  // Field STOP: STOP bits
    inline uint32_t USART2_CR2_STOP (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field CLKEN: Clock enable
    const uint32_t USART2_CR2_CLKEN = 1U << 11 ;

  // Field CPOL: Clock polarity
    const uint32_t USART2_CR2_CPOL = 1U << 10 ;

  // Field CPHA: Clock phase
    const uint32_t USART2_CR2_CPHA = 1U << 9 ;

  // Field LBCL: Last bit clock pulse
    const uint32_t USART2_CR2_LBCL = 1U << 8 ;

  // Field LBDIE: LIN break detection interrupt enable
    const uint32_t USART2_CR2_LBDIE = 1U << 6 ;

  // Field LBDL: LIN break detection length
    const uint32_t USART2_CR2_LBDL = 1U << 5 ;

  // Field ADDM7: 7-bit Address Detection/4-bit Address Detection
    const uint32_t USART2_CR2_ADDM7 = 1U << 4 ;

//------------------------------------------------------------------------------

//---  Register CR3: Control register 3
  #define USART2_CR3 (* ((volatile uint32_t *) (0x40004400 + 8)))

  // Field WUFIE: Wakeup from Stop mode interrupt enable
    const uint32_t USART2_CR3_WUFIE = 1U << 22 ;

  // Field WUS: Wakeup from Stop mode interrupt flag selection
    inline uint32_t USART2_CR3_WUS (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field SCARCNT: Smartcard auto-retry count
    inline uint32_t USART2_CR3_SCARCNT (const uint32_t inValue) {return (inValue & 0x7U) << 17 ; }

  // Field DEP: Driver enable polarity selection
    const uint32_t USART2_CR3_DEP = 1U << 15 ;

  // Field DEM: Driver enable mode
    const uint32_t USART2_CR3_DEM = 1U << 14 ;

  // Field DDRE: DMA Disable on Reception Error
    const uint32_t USART2_CR3_DDRE = 1U << 13 ;

  // Field OVRDIS: Overrun Disable
    const uint32_t USART2_CR3_OVRDIS = 1U << 12 ;

  // Field ONEBIT: One sample bit method enable
    const uint32_t USART2_CR3_ONEBIT = 1U << 11 ;

  // Field CTSIE: CTS interrupt enable
    const uint32_t USART2_CR3_CTSIE = 1U << 10 ;

  // Field CTSE: CTS enable
    const uint32_t USART2_CR3_CTSE = 1U << 9 ;

  // Field RTSE: RTS enable
    const uint32_t USART2_CR3_RTSE = 1U << 8 ;

  // Field DMAT: DMA enable transmitter
    const uint32_t USART2_CR3_DMAT = 1U << 7 ;

  // Field DMAR: DMA enable receiver
    const uint32_t USART2_CR3_DMAR = 1U << 6 ;

  // Field SCEN: Smartcard mode enable
    const uint32_t USART2_CR3_SCEN = 1U << 5 ;

  // Field NACK: Smartcard NACK enable
    const uint32_t USART2_CR3_NACK = 1U << 4 ;

  // Field HDSEL: Half-duplex selection
    const uint32_t USART2_CR3_HDSEL = 1U << 3 ;

  // Field IRLP: Ir low-power
    const uint32_t USART2_CR3_IRLP = 1U << 2 ;

  // Field IREN: Ir mode enable
    const uint32_t USART2_CR3_IREN = 1U << 1 ;

  // Field EIE: Error interrupt enable
    const uint32_t USART2_CR3_EIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BRR: Baud rate register
  #define USART2_BRR (* ((volatile uint32_t *) (0x40004400 + 12)))

  // Field DIV_Mantissa: DIV_Mantissa
    inline uint32_t USART2_BRR_DIV_Mantissa (const uint32_t inValue) {return (inValue & 0xFFFU) << 4 ; }

  // Field DIV_Fraction: DIV_Fraction
    inline uint32_t USART2_BRR_DIV_Fraction (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register GTPR: Guard time and prescaler register
  #define USART2_GTPR (* ((volatile uint32_t *) (0x40004400 + 16)))

  // Field GT: Guard time value
    inline uint32_t USART2_GTPR_GT (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field PSC: Prescaler value
    inline uint32_t USART2_GTPR_PSC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RTOR: Receiver timeout register
  #define USART2_RTOR (* ((volatile uint32_t *) (0x40004400 + 20)))

  // Field BLEN: Block Length
    inline uint32_t USART2_RTOR_BLEN (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field RTO: Receiver timeout value
    inline uint32_t USART2_RTOR_RTO (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RQR: Request register
  #define USART2_RQR (* ((volatile uint32_t *) (0x40004400 + 24)))

  // Field TXFRQ: Transmit data flush request
    const uint32_t USART2_RQR_TXFRQ = 1U << 4 ;

  // Field RXFRQ: Receive data flush request
    const uint32_t USART2_RQR_RXFRQ = 1U << 3 ;

  // Field MMRQ: Mute mode request
    const uint32_t USART2_RQR_MMRQ = 1U << 2 ;

  // Field SBKRQ: Send break request
    const uint32_t USART2_RQR_SBKRQ = 1U << 1 ;

  // Field ABRRQ: Auto baud rate request
    const uint32_t USART2_RQR_ABRRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt & status register
  #define USART2_ISR (* ((const volatile uint32_t *) (0x40004400 + 28)))

  // Field REACK: REACK
    const uint32_t USART2_ISR_REACK = 1U << 22 ;

  // Field TEACK: TEACK
    const uint32_t USART2_ISR_TEACK = 1U << 21 ;

  // Field WUF: WUF
    const uint32_t USART2_ISR_WUF = 1U << 20 ;

  // Field RWU: RWU
    const uint32_t USART2_ISR_RWU = 1U << 19 ;

  // Field SBKF: SBKF
    const uint32_t USART2_ISR_SBKF = 1U << 18 ;

  // Field CMF: CMF
    const uint32_t USART2_ISR_CMF = 1U << 17 ;

  // Field BUSY: BUSY
    const uint32_t USART2_ISR_BUSY = 1U << 16 ;

  // Field ABRF: ABRF
    const uint32_t USART2_ISR_ABRF = 1U << 15 ;

  // Field ABRE: ABRE
    const uint32_t USART2_ISR_ABRE = 1U << 14 ;

  // Field EOBF: EOBF
    const uint32_t USART2_ISR_EOBF = 1U << 12 ;

  // Field RTOF: RTOF
    const uint32_t USART2_ISR_RTOF = 1U << 11 ;

  // Field CTS: CTS
    const uint32_t USART2_ISR_CTS = 1U << 10 ;

  // Field CTSIF: CTSIF
    const uint32_t USART2_ISR_CTSIF = 1U << 9 ;

  // Field LBDF: LBDF
    const uint32_t USART2_ISR_LBDF = 1U << 8 ;

  // Field TXE: TXE
    const uint32_t USART2_ISR_TXE = 1U << 7 ;

  // Field TC: TC
    const uint32_t USART2_ISR_TC = 1U << 6 ;

  // Field RXNE: RXNE
    const uint32_t USART2_ISR_RXNE = 1U << 5 ;

  // Field IDLE: IDLE
    const uint32_t USART2_ISR_IDLE = 1U << 4 ;

  // Field ORE: ORE
    const uint32_t USART2_ISR_ORE = 1U << 3 ;

  // Field NF: NF
    const uint32_t USART2_ISR_NF = 1U << 2 ;

  // Field FE: FE
    const uint32_t USART2_ISR_FE = 1U << 1 ;

  // Field PE: PE
    const uint32_t USART2_ISR_PE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt flag clear register
  #define USART2_ICR (* ((volatile uint32_t *) (0x40004400 + 32)))

  // Field WUCF: Wakeup from Stop mode clear flag
    const uint32_t USART2_ICR_WUCF = 1U << 20 ;

  // Field CMCF: Character match clear flag
    const uint32_t USART2_ICR_CMCF = 1U << 17 ;

  // Field EOBCF: End of block clear flag
    const uint32_t USART2_ICR_EOBCF = 1U << 12 ;

  // Field RTOCF: Receiver timeout clear flag
    const uint32_t USART2_ICR_RTOCF = 1U << 11 ;

  // Field CTSCF: CTS clear flag
    const uint32_t USART2_ICR_CTSCF = 1U << 9 ;

  // Field LBDCF: LIN break detection clear flag
    const uint32_t USART2_ICR_LBDCF = 1U << 8 ;

  // Field TCCF: Transmission complete clear flag
    const uint32_t USART2_ICR_TCCF = 1U << 6 ;

  // Field IDLECF: Idle line detected clear flag
    const uint32_t USART2_ICR_IDLECF = 1U << 4 ;

  // Field ORECF: Overrun error clear flag
    const uint32_t USART2_ICR_ORECF = 1U << 3 ;

  // Field NCF: Noise detected clear flag
    const uint32_t USART2_ICR_NCF = 1U << 2 ;

  // Field FECF: Framing error clear flag
    const uint32_t USART2_ICR_FECF = 1U << 1 ;

  // Field PECF: Parity error clear flag
    const uint32_t USART2_ICR_PECF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register RDR: Receive data register
  #define USART2_RDR (* ((const volatile uint32_t *) (0x40004400 + 36)))

  // Field RDR: Receive data value
    inline uint32_t USART2_RDR_RDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDR: Transmit data register
  #define USART2_TDR (* ((volatile uint32_t *) (0x40004400 + 40)))

  // Field TDR: Transmit data value
    inline uint32_t USART2_TDR_TDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral USART3
//------------------------------------------------------------------------------

//---  Register CR1: Control register 1
  #define USART3_CR1 (* ((volatile uint32_t *) (0x40004800 + 0)))

  // Field M1: Word length
    const uint32_t USART3_CR1_M1 = 1U << 28 ;

  // Field EOBIE: End of Block interrupt enable
    const uint32_t USART3_CR1_EOBIE = 1U << 27 ;

  // Field RTOIE: Receiver timeout interrupt enable
    const uint32_t USART3_CR1_RTOIE = 1U << 26 ;

  // Field DEAT4: Driver Enable assertion time
    const uint32_t USART3_CR1_DEAT4 = 1U << 25 ;

  // Field DEAT3: DEAT3
    const uint32_t USART3_CR1_DEAT3 = 1U << 24 ;

  // Field DEAT2: DEAT2
    const uint32_t USART3_CR1_DEAT2 = 1U << 23 ;

  // Field DEAT1: DEAT1
    const uint32_t USART3_CR1_DEAT1 = 1U << 22 ;

  // Field DEAT0: DEAT0
    const uint32_t USART3_CR1_DEAT0 = 1U << 21 ;

  // Field DEDT4: Driver Enable de-assertion time
    const uint32_t USART3_CR1_DEDT4 = 1U << 20 ;

  // Field DEDT3: DEDT3
    const uint32_t USART3_CR1_DEDT3 = 1U << 19 ;

  // Field DEDT2: DEDT2
    const uint32_t USART3_CR1_DEDT2 = 1U << 18 ;

  // Field DEDT1: DEDT1
    const uint32_t USART3_CR1_DEDT1 = 1U << 17 ;

  // Field DEDT0: DEDT0
    const uint32_t USART3_CR1_DEDT0 = 1U << 16 ;

  // Field OVER8: Oversampling mode
    const uint32_t USART3_CR1_OVER8 = 1U << 15 ;

  // Field CMIE: Character match interrupt enable
    const uint32_t USART3_CR1_CMIE = 1U << 14 ;

  // Field MME: Mute mode enable
    const uint32_t USART3_CR1_MME = 1U << 13 ;

  // Field M0: Word length
    const uint32_t USART3_CR1_M0 = 1U << 12 ;

  // Field WAKE: Receiver wakeup method
    const uint32_t USART3_CR1_WAKE = 1U << 11 ;

  // Field PCE: Parity control enable
    const uint32_t USART3_CR1_PCE = 1U << 10 ;

  // Field PS: Parity selection
    const uint32_t USART3_CR1_PS = 1U << 9 ;

  // Field PEIE: PE interrupt enable
    const uint32_t USART3_CR1_PEIE = 1U << 8 ;

  // Field TXEIE: interrupt enable
    const uint32_t USART3_CR1_TXEIE = 1U << 7 ;

  // Field TCIE: Transmission complete interrupt enable
    const uint32_t USART3_CR1_TCIE = 1U << 6 ;

  // Field RXNEIE: RXNE interrupt enable
    const uint32_t USART3_CR1_RXNEIE = 1U << 5 ;

  // Field IDLEIE: IDLE interrupt enable
    const uint32_t USART3_CR1_IDLEIE = 1U << 4 ;

  // Field TE: Transmitter enable
    const uint32_t USART3_CR1_TE = 1U << 3 ;

  // Field RE: Receiver enable
    const uint32_t USART3_CR1_RE = 1U << 2 ;

  // Field UESM: USART enable in Stop mode
    const uint32_t USART3_CR1_UESM = 1U << 1 ;

  // Field UE: USART enable
    const uint32_t USART3_CR1_UE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: Control register 2
  #define USART3_CR2 (* ((volatile uint32_t *) (0x40004800 + 4)))

  // Field ADD4_7: Address of the USART node
    inline uint32_t USART3_CR2_ADD4_7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field ADD0_3: Address of the USART node
    inline uint32_t USART3_CR2_ADD0_3 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field RTOEN: Receiver timeout enable
    const uint32_t USART3_CR2_RTOEN = 1U << 23 ;

  // Field ABRMOD1: Auto baud rate mode
    const uint32_t USART3_CR2_ABRMOD1 = 1U << 22 ;

  // Field ABRMOD0: ABRMOD0
    const uint32_t USART3_CR2_ABRMOD0 = 1U << 21 ;

  // Field ABREN: Auto baud rate enable
    const uint32_t USART3_CR2_ABREN = 1U << 20 ;

  // Field MSBFIRST: Most significant bit first
    const uint32_t USART3_CR2_MSBFIRST = 1U << 19 ;

  // Field TAINV: Binary data inversion
    const uint32_t USART3_CR2_TAINV = 1U << 18 ;

  // Field TXINV: TX pin active level inversion
    const uint32_t USART3_CR2_TXINV = 1U << 17 ;

  // Field RXINV: RX pin active level inversion
    const uint32_t USART3_CR2_RXINV = 1U << 16 ;

  // Field SWAP: Swap TX/RX pins
    const uint32_t USART3_CR2_SWAP = 1U << 15 ;

  // Field LINEN: LIN mode enable
    const uint32_t USART3_CR2_LINEN = 1U << 14 ;

  // Field STOP: STOP bits
    inline uint32_t USART3_CR2_STOP (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field CLKEN: Clock enable
    const uint32_t USART3_CR2_CLKEN = 1U << 11 ;

  // Field CPOL: Clock polarity
    const uint32_t USART3_CR2_CPOL = 1U << 10 ;

  // Field CPHA: Clock phase
    const uint32_t USART3_CR2_CPHA = 1U << 9 ;

  // Field LBCL: Last bit clock pulse
    const uint32_t USART3_CR2_LBCL = 1U << 8 ;

  // Field LBDIE: LIN break detection interrupt enable
    const uint32_t USART3_CR2_LBDIE = 1U << 6 ;

  // Field LBDL: LIN break detection length
    const uint32_t USART3_CR2_LBDL = 1U << 5 ;

  // Field ADDM7: 7-bit Address Detection/4-bit Address Detection
    const uint32_t USART3_CR2_ADDM7 = 1U << 4 ;

//------------------------------------------------------------------------------

//---  Register CR3: Control register 3
  #define USART3_CR3 (* ((volatile uint32_t *) (0x40004800 + 8)))

  // Field WUFIE: Wakeup from Stop mode interrupt enable
    const uint32_t USART3_CR3_WUFIE = 1U << 22 ;

  // Field WUS: Wakeup from Stop mode interrupt flag selection
    inline uint32_t USART3_CR3_WUS (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field SCARCNT: Smartcard auto-retry count
    inline uint32_t USART3_CR3_SCARCNT (const uint32_t inValue) {return (inValue & 0x7U) << 17 ; }

  // Field DEP: Driver enable polarity selection
    const uint32_t USART3_CR3_DEP = 1U << 15 ;

  // Field DEM: Driver enable mode
    const uint32_t USART3_CR3_DEM = 1U << 14 ;

  // Field DDRE: DMA Disable on Reception Error
    const uint32_t USART3_CR3_DDRE = 1U << 13 ;

  // Field OVRDIS: Overrun Disable
    const uint32_t USART3_CR3_OVRDIS = 1U << 12 ;

  // Field ONEBIT: One sample bit method enable
    const uint32_t USART3_CR3_ONEBIT = 1U << 11 ;

  // Field CTSIE: CTS interrupt enable
    const uint32_t USART3_CR3_CTSIE = 1U << 10 ;

  // Field CTSE: CTS enable
    const uint32_t USART3_CR3_CTSE = 1U << 9 ;

  // Field RTSE: RTS enable
    const uint32_t USART3_CR3_RTSE = 1U << 8 ;

  // Field DMAT: DMA enable transmitter
    const uint32_t USART3_CR3_DMAT = 1U << 7 ;

  // Field DMAR: DMA enable receiver
    const uint32_t USART3_CR3_DMAR = 1U << 6 ;

  // Field SCEN: Smartcard mode enable
    const uint32_t USART3_CR3_SCEN = 1U << 5 ;

  // Field NACK: Smartcard NACK enable
    const uint32_t USART3_CR3_NACK = 1U << 4 ;

  // Field HDSEL: Half-duplex selection
    const uint32_t USART3_CR3_HDSEL = 1U << 3 ;

  // Field IRLP: Ir low-power
    const uint32_t USART3_CR3_IRLP = 1U << 2 ;

  // Field IREN: Ir mode enable
    const uint32_t USART3_CR3_IREN = 1U << 1 ;

  // Field EIE: Error interrupt enable
    const uint32_t USART3_CR3_EIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BRR: Baud rate register
  #define USART3_BRR (* ((volatile uint32_t *) (0x40004800 + 12)))

  // Field DIV_Mantissa: DIV_Mantissa
    inline uint32_t USART3_BRR_DIV_Mantissa (const uint32_t inValue) {return (inValue & 0xFFFU) << 4 ; }

  // Field DIV_Fraction: DIV_Fraction
    inline uint32_t USART3_BRR_DIV_Fraction (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register GTPR: Guard time and prescaler register
  #define USART3_GTPR (* ((volatile uint32_t *) (0x40004800 + 16)))

  // Field GT: Guard time value
    inline uint32_t USART3_GTPR_GT (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field PSC: Prescaler value
    inline uint32_t USART3_GTPR_PSC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RTOR: Receiver timeout register
  #define USART3_RTOR (* ((volatile uint32_t *) (0x40004800 + 20)))

  // Field BLEN: Block Length
    inline uint32_t USART3_RTOR_BLEN (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field RTO: Receiver timeout value
    inline uint32_t USART3_RTOR_RTO (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RQR: Request register
  #define USART3_RQR (* ((volatile uint32_t *) (0x40004800 + 24)))

  // Field TXFRQ: Transmit data flush request
    const uint32_t USART3_RQR_TXFRQ = 1U << 4 ;

  // Field RXFRQ: Receive data flush request
    const uint32_t USART3_RQR_RXFRQ = 1U << 3 ;

  // Field MMRQ: Mute mode request
    const uint32_t USART3_RQR_MMRQ = 1U << 2 ;

  // Field SBKRQ: Send break request
    const uint32_t USART3_RQR_SBKRQ = 1U << 1 ;

  // Field ABRRQ: Auto baud rate request
    const uint32_t USART3_RQR_ABRRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt & status register
  #define USART3_ISR (* ((const volatile uint32_t *) (0x40004800 + 28)))

  // Field REACK: REACK
    const uint32_t USART3_ISR_REACK = 1U << 22 ;

  // Field TEACK: TEACK
    const uint32_t USART3_ISR_TEACK = 1U << 21 ;

  // Field WUF: WUF
    const uint32_t USART3_ISR_WUF = 1U << 20 ;

  // Field RWU: RWU
    const uint32_t USART3_ISR_RWU = 1U << 19 ;

  // Field SBKF: SBKF
    const uint32_t USART3_ISR_SBKF = 1U << 18 ;

  // Field CMF: CMF
    const uint32_t USART3_ISR_CMF = 1U << 17 ;

  // Field BUSY: BUSY
    const uint32_t USART3_ISR_BUSY = 1U << 16 ;

  // Field ABRF: ABRF
    const uint32_t USART3_ISR_ABRF = 1U << 15 ;

  // Field ABRE: ABRE
    const uint32_t USART3_ISR_ABRE = 1U << 14 ;

  // Field EOBF: EOBF
    const uint32_t USART3_ISR_EOBF = 1U << 12 ;

  // Field RTOF: RTOF
    const uint32_t USART3_ISR_RTOF = 1U << 11 ;

  // Field CTS: CTS
    const uint32_t USART3_ISR_CTS = 1U << 10 ;

  // Field CTSIF: CTSIF
    const uint32_t USART3_ISR_CTSIF = 1U << 9 ;

  // Field LBDF: LBDF
    const uint32_t USART3_ISR_LBDF = 1U << 8 ;

  // Field TXE: TXE
    const uint32_t USART3_ISR_TXE = 1U << 7 ;

  // Field TC: TC
    const uint32_t USART3_ISR_TC = 1U << 6 ;

  // Field RXNE: RXNE
    const uint32_t USART3_ISR_RXNE = 1U << 5 ;

  // Field IDLE: IDLE
    const uint32_t USART3_ISR_IDLE = 1U << 4 ;

  // Field ORE: ORE
    const uint32_t USART3_ISR_ORE = 1U << 3 ;

  // Field NF: NF
    const uint32_t USART3_ISR_NF = 1U << 2 ;

  // Field FE: FE
    const uint32_t USART3_ISR_FE = 1U << 1 ;

  // Field PE: PE
    const uint32_t USART3_ISR_PE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt flag clear register
  #define USART3_ICR (* ((volatile uint32_t *) (0x40004800 + 32)))

  // Field WUCF: Wakeup from Stop mode clear flag
    const uint32_t USART3_ICR_WUCF = 1U << 20 ;

  // Field CMCF: Character match clear flag
    const uint32_t USART3_ICR_CMCF = 1U << 17 ;

  // Field EOBCF: End of block clear flag
    const uint32_t USART3_ICR_EOBCF = 1U << 12 ;

  // Field RTOCF: Receiver timeout clear flag
    const uint32_t USART3_ICR_RTOCF = 1U << 11 ;

  // Field CTSCF: CTS clear flag
    const uint32_t USART3_ICR_CTSCF = 1U << 9 ;

  // Field LBDCF: LIN break detection clear flag
    const uint32_t USART3_ICR_LBDCF = 1U << 8 ;

  // Field TCCF: Transmission complete clear flag
    const uint32_t USART3_ICR_TCCF = 1U << 6 ;

  // Field IDLECF: Idle line detected clear flag
    const uint32_t USART3_ICR_IDLECF = 1U << 4 ;

  // Field ORECF: Overrun error clear flag
    const uint32_t USART3_ICR_ORECF = 1U << 3 ;

  // Field NCF: Noise detected clear flag
    const uint32_t USART3_ICR_NCF = 1U << 2 ;

  // Field FECF: Framing error clear flag
    const uint32_t USART3_ICR_FECF = 1U << 1 ;

  // Field PECF: Parity error clear flag
    const uint32_t USART3_ICR_PECF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register RDR: Receive data register
  #define USART3_RDR (* ((const volatile uint32_t *) (0x40004800 + 36)))

  // Field RDR: Receive data value
    inline uint32_t USART3_RDR_RDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDR: Transmit data register
  #define USART3_TDR (* ((volatile uint32_t *) (0x40004800 + 40)))

  // Field TDR: Transmit data value
    inline uint32_t USART3_TDR_TDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral USART6: Universal synchronous asynchronous receiver       transmitter
//------------------------------------------------------------------------------

//---  Register CR1: Control register 1
  #define USART6_CR1 (* ((volatile uint32_t *) (0x40011400 + 0)))

  // Field M1: Word length
    const uint32_t USART6_CR1_M1 = 1U << 28 ;

  // Field EOBIE: End of Block interrupt enable
    const uint32_t USART6_CR1_EOBIE = 1U << 27 ;

  // Field RTOIE: Receiver timeout interrupt enable
    const uint32_t USART6_CR1_RTOIE = 1U << 26 ;

  // Field DEAT4: Driver Enable assertion time
    const uint32_t USART6_CR1_DEAT4 = 1U << 25 ;

  // Field DEAT3: DEAT3
    const uint32_t USART6_CR1_DEAT3 = 1U << 24 ;

  // Field DEAT2: DEAT2
    const uint32_t USART6_CR1_DEAT2 = 1U << 23 ;

  // Field DEAT1: DEAT1
    const uint32_t USART6_CR1_DEAT1 = 1U << 22 ;

  // Field DEAT0: DEAT0
    const uint32_t USART6_CR1_DEAT0 = 1U << 21 ;

  // Field DEDT4: Driver Enable de-assertion time
    const uint32_t USART6_CR1_DEDT4 = 1U << 20 ;

  // Field DEDT3: DEDT3
    const uint32_t USART6_CR1_DEDT3 = 1U << 19 ;

  // Field DEDT2: DEDT2
    const uint32_t USART6_CR1_DEDT2 = 1U << 18 ;

  // Field DEDT1: DEDT1
    const uint32_t USART6_CR1_DEDT1 = 1U << 17 ;

  // Field DEDT0: DEDT0
    const uint32_t USART6_CR1_DEDT0 = 1U << 16 ;

  // Field OVER8: Oversampling mode
    const uint32_t USART6_CR1_OVER8 = 1U << 15 ;

  // Field CMIE: Character match interrupt enable
    const uint32_t USART6_CR1_CMIE = 1U << 14 ;

  // Field MME: Mute mode enable
    const uint32_t USART6_CR1_MME = 1U << 13 ;

  // Field M0: Word length
    const uint32_t USART6_CR1_M0 = 1U << 12 ;

  // Field WAKE: Receiver wakeup method
    const uint32_t USART6_CR1_WAKE = 1U << 11 ;

  // Field PCE: Parity control enable
    const uint32_t USART6_CR1_PCE = 1U << 10 ;

  // Field PS: Parity selection
    const uint32_t USART6_CR1_PS = 1U << 9 ;

  // Field PEIE: PE interrupt enable
    const uint32_t USART6_CR1_PEIE = 1U << 8 ;

  // Field TXEIE: interrupt enable
    const uint32_t USART6_CR1_TXEIE = 1U << 7 ;

  // Field TCIE: Transmission complete interrupt enable
    const uint32_t USART6_CR1_TCIE = 1U << 6 ;

  // Field RXNEIE: RXNE interrupt enable
    const uint32_t USART6_CR1_RXNEIE = 1U << 5 ;

  // Field IDLEIE: IDLE interrupt enable
    const uint32_t USART6_CR1_IDLEIE = 1U << 4 ;

  // Field TE: Transmitter enable
    const uint32_t USART6_CR1_TE = 1U << 3 ;

  // Field RE: Receiver enable
    const uint32_t USART6_CR1_RE = 1U << 2 ;

  // Field UESM: USART enable in Stop mode
    const uint32_t USART6_CR1_UESM = 1U << 1 ;

  // Field UE: USART enable
    const uint32_t USART6_CR1_UE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register CR2: Control register 2
  #define USART6_CR2 (* ((volatile uint32_t *) (0x40011400 + 4)))

  // Field ADD4_7: Address of the USART node
    inline uint32_t USART6_CR2_ADD4_7 (const uint32_t inValue) {return (inValue & 0xFU) << 28 ; }

  // Field ADD0_3: Address of the USART node
    inline uint32_t USART6_CR2_ADD0_3 (const uint32_t inValue) {return (inValue & 0xFU) << 24 ; }

  // Field RTOEN: Receiver timeout enable
    const uint32_t USART6_CR2_RTOEN = 1U << 23 ;

  // Field ABRMOD1: Auto baud rate mode
    const uint32_t USART6_CR2_ABRMOD1 = 1U << 22 ;

  // Field ABRMOD0: ABRMOD0
    const uint32_t USART6_CR2_ABRMOD0 = 1U << 21 ;

  // Field ABREN: Auto baud rate enable
    const uint32_t USART6_CR2_ABREN = 1U << 20 ;

  // Field MSBFIRST: Most significant bit first
    const uint32_t USART6_CR2_MSBFIRST = 1U << 19 ;

  // Field TAINV: Binary data inversion
    const uint32_t USART6_CR2_TAINV = 1U << 18 ;

  // Field TXINV: TX pin active level inversion
    const uint32_t USART6_CR2_TXINV = 1U << 17 ;

  // Field RXINV: RX pin active level inversion
    const uint32_t USART6_CR2_RXINV = 1U << 16 ;

  // Field SWAP: Swap TX/RX pins
    const uint32_t USART6_CR2_SWAP = 1U << 15 ;

  // Field LINEN: LIN mode enable
    const uint32_t USART6_CR2_LINEN = 1U << 14 ;

  // Field STOP: STOP bits
    inline uint32_t USART6_CR2_STOP (const uint32_t inValue) {return (inValue & 0x3U) << 12 ; }

  // Field CLKEN: Clock enable
    const uint32_t USART6_CR2_CLKEN = 1U << 11 ;

  // Field CPOL: Clock polarity
    const uint32_t USART6_CR2_CPOL = 1U << 10 ;

  // Field CPHA: Clock phase
    const uint32_t USART6_CR2_CPHA = 1U << 9 ;

  // Field LBCL: Last bit clock pulse
    const uint32_t USART6_CR2_LBCL = 1U << 8 ;

  // Field LBDIE: LIN break detection interrupt enable
    const uint32_t USART6_CR2_LBDIE = 1U << 6 ;

  // Field LBDL: LIN break detection length
    const uint32_t USART6_CR2_LBDL = 1U << 5 ;

  // Field ADDM7: 7-bit Address Detection/4-bit Address Detection
    const uint32_t USART6_CR2_ADDM7 = 1U << 4 ;

//------------------------------------------------------------------------------

//---  Register CR3: Control register 3
  #define USART6_CR3 (* ((volatile uint32_t *) (0x40011400 + 8)))

  // Field WUFIE: Wakeup from Stop mode interrupt enable
    const uint32_t USART6_CR3_WUFIE = 1U << 22 ;

  // Field WUS: Wakeup from Stop mode interrupt flag selection
    inline uint32_t USART6_CR3_WUS (const uint32_t inValue) {return (inValue & 0x3U) << 20 ; }

  // Field SCARCNT: Smartcard auto-retry count
    inline uint32_t USART6_CR3_SCARCNT (const uint32_t inValue) {return (inValue & 0x7U) << 17 ; }

  // Field DEP: Driver enable polarity selection
    const uint32_t USART6_CR3_DEP = 1U << 15 ;

  // Field DEM: Driver enable mode
    const uint32_t USART6_CR3_DEM = 1U << 14 ;

  // Field DDRE: DMA Disable on Reception Error
    const uint32_t USART6_CR3_DDRE = 1U << 13 ;

  // Field OVRDIS: Overrun Disable
    const uint32_t USART6_CR3_OVRDIS = 1U << 12 ;

  // Field ONEBIT: One sample bit method enable
    const uint32_t USART6_CR3_ONEBIT = 1U << 11 ;

  // Field CTSIE: CTS interrupt enable
    const uint32_t USART6_CR3_CTSIE = 1U << 10 ;

  // Field CTSE: CTS enable
    const uint32_t USART6_CR3_CTSE = 1U << 9 ;

  // Field RTSE: RTS enable
    const uint32_t USART6_CR3_RTSE = 1U << 8 ;

  // Field DMAT: DMA enable transmitter
    const uint32_t USART6_CR3_DMAT = 1U << 7 ;

  // Field DMAR: DMA enable receiver
    const uint32_t USART6_CR3_DMAR = 1U << 6 ;

  // Field SCEN: Smartcard mode enable
    const uint32_t USART6_CR3_SCEN = 1U << 5 ;

  // Field NACK: Smartcard NACK enable
    const uint32_t USART6_CR3_NACK = 1U << 4 ;

  // Field HDSEL: Half-duplex selection
    const uint32_t USART6_CR3_HDSEL = 1U << 3 ;

  // Field IRLP: Ir low-power
    const uint32_t USART6_CR3_IRLP = 1U << 2 ;

  // Field IREN: Ir mode enable
    const uint32_t USART6_CR3_IREN = 1U << 1 ;

  // Field EIE: Error interrupt enable
    const uint32_t USART6_CR3_EIE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register BRR: Baud rate register
  #define USART6_BRR (* ((volatile uint32_t *) (0x40011400 + 12)))

  // Field DIV_Mantissa: DIV_Mantissa
    inline uint32_t USART6_BRR_DIV_Mantissa (const uint32_t inValue) {return (inValue & 0xFFFU) << 4 ; }

  // Field DIV_Fraction: DIV_Fraction
    inline uint32_t USART6_BRR_DIV_Fraction (const uint32_t inValue) {return (inValue & 0xFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register GTPR: Guard time and prescaler register
  #define USART6_GTPR (* ((volatile uint32_t *) (0x40011400 + 16)))

  // Field GT: Guard time value
    inline uint32_t USART6_GTPR_GT (const uint32_t inValue) {return (inValue & 0xFFU) << 8 ; }

  // Field PSC: Prescaler value
    inline uint32_t USART6_GTPR_PSC (const uint32_t inValue) {return (inValue & 0xFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RTOR: Receiver timeout register
  #define USART6_RTOR (* ((volatile uint32_t *) (0x40011400 + 20)))

  // Field BLEN: Block Length
    inline uint32_t USART6_RTOR_BLEN (const uint32_t inValue) {return (inValue & 0xFFU) << 24 ; }

  // Field RTO: Receiver timeout value
    inline uint32_t USART6_RTOR_RTO (const uint32_t inValue) {return (inValue & 0xFFFFFFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register RQR: Request register
  #define USART6_RQR (* ((volatile uint32_t *) (0x40011400 + 24)))

  // Field TXFRQ: Transmit data flush request
    const uint32_t USART6_RQR_TXFRQ = 1U << 4 ;

  // Field RXFRQ: Receive data flush request
    const uint32_t USART6_RQR_RXFRQ = 1U << 3 ;

  // Field MMRQ: Mute mode request
    const uint32_t USART6_RQR_MMRQ = 1U << 2 ;

  // Field SBKRQ: Send break request
    const uint32_t USART6_RQR_SBKRQ = 1U << 1 ;

  // Field ABRRQ: Auto baud rate request
    const uint32_t USART6_RQR_ABRRQ = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ISR: Interrupt & status register
  #define USART6_ISR (* ((const volatile uint32_t *) (0x40011400 + 28)))

  // Field REACK: REACK
    const uint32_t USART6_ISR_REACK = 1U << 22 ;

  // Field TEACK: TEACK
    const uint32_t USART6_ISR_TEACK = 1U << 21 ;

  // Field WUF: WUF
    const uint32_t USART6_ISR_WUF = 1U << 20 ;

  // Field RWU: RWU
    const uint32_t USART6_ISR_RWU = 1U << 19 ;

  // Field SBKF: SBKF
    const uint32_t USART6_ISR_SBKF = 1U << 18 ;

  // Field CMF: CMF
    const uint32_t USART6_ISR_CMF = 1U << 17 ;

  // Field BUSY: BUSY
    const uint32_t USART6_ISR_BUSY = 1U << 16 ;

  // Field ABRF: ABRF
    const uint32_t USART6_ISR_ABRF = 1U << 15 ;

  // Field ABRE: ABRE
    const uint32_t USART6_ISR_ABRE = 1U << 14 ;

  // Field EOBF: EOBF
    const uint32_t USART6_ISR_EOBF = 1U << 12 ;

  // Field RTOF: RTOF
    const uint32_t USART6_ISR_RTOF = 1U << 11 ;

  // Field CTS: CTS
    const uint32_t USART6_ISR_CTS = 1U << 10 ;

  // Field CTSIF: CTSIF
    const uint32_t USART6_ISR_CTSIF = 1U << 9 ;

  // Field LBDF: LBDF
    const uint32_t USART6_ISR_LBDF = 1U << 8 ;

  // Field TXE: TXE
    const uint32_t USART6_ISR_TXE = 1U << 7 ;

  // Field TC: TC
    const uint32_t USART6_ISR_TC = 1U << 6 ;

  // Field RXNE: RXNE
    const uint32_t USART6_ISR_RXNE = 1U << 5 ;

  // Field IDLE: IDLE
    const uint32_t USART6_ISR_IDLE = 1U << 4 ;

  // Field ORE: ORE
    const uint32_t USART6_ISR_ORE = 1U << 3 ;

  // Field NF: NF
    const uint32_t USART6_ISR_NF = 1U << 2 ;

  // Field FE: FE
    const uint32_t USART6_ISR_FE = 1U << 1 ;

  // Field PE: PE
    const uint32_t USART6_ISR_PE = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register ICR: Interrupt flag clear register
  #define USART6_ICR (* ((volatile uint32_t *) (0x40011400 + 32)))

  // Field WUCF: Wakeup from Stop mode clear flag
    const uint32_t USART6_ICR_WUCF = 1U << 20 ;

  // Field CMCF: Character match clear flag
    const uint32_t USART6_ICR_CMCF = 1U << 17 ;

  // Field EOBCF: End of block clear flag
    const uint32_t USART6_ICR_EOBCF = 1U << 12 ;

  // Field RTOCF: Receiver timeout clear flag
    const uint32_t USART6_ICR_RTOCF = 1U << 11 ;

  // Field CTSCF: CTS clear flag
    const uint32_t USART6_ICR_CTSCF = 1U << 9 ;

  // Field LBDCF: LIN break detection clear flag
    const uint32_t USART6_ICR_LBDCF = 1U << 8 ;

  // Field TCCF: Transmission complete clear flag
    const uint32_t USART6_ICR_TCCF = 1U << 6 ;

  // Field IDLECF: Idle line detected clear flag
    const uint32_t USART6_ICR_IDLECF = 1U << 4 ;

  // Field ORECF: Overrun error clear flag
    const uint32_t USART6_ICR_ORECF = 1U << 3 ;

  // Field NCF: Noise detected clear flag
    const uint32_t USART6_ICR_NCF = 1U << 2 ;

  // Field FECF: Framing error clear flag
    const uint32_t USART6_ICR_FECF = 1U << 1 ;

  // Field PECF: Parity error clear flag
    const uint32_t USART6_ICR_PECF = 1U << 0 ;

//------------------------------------------------------------------------------

//---  Register RDR: Receive data register
  #define USART6_RDR (* ((const volatile uint32_t *) (0x40011400 + 36)))

  // Field RDR: Receive data value
    inline uint32_t USART6_RDR_RDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register TDR: Transmit data register
  #define USART6_TDR (* ((volatile uint32_t *) (0x40011400 + 40)))

  // Field TDR: Transmit data value
    inline uint32_t USART6_TDR_TDR (const uint32_t inValue) {return (inValue & 0x1FFU) << 0 ; }

//------------------------------------------------------------------------------
// Peripheral WWDG: Window watchdog
//------------------------------------------------------------------------------

//---  Register CR: Control register
  #define WWDG_CR (* ((volatile uint32_t *) (0x40002C00 + 0)))

  // Field WDGA: Activation bit
    const uint32_t WWDG_CR_WDGA = 1U << 7 ;

  // Field T: 7-bit counter (MSB to LSB)
    inline uint32_t WWDG_CR_T (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register CFR: Configuration register
  #define WWDG_CFR (* ((volatile uint32_t *) (0x40002C00 + 4)))

  // Field EWI: Early wakeup interrupt
    const uint32_t WWDG_CFR_EWI = 1U << 9 ;

  // Field WDGTB1: Timer base
    const uint32_t WWDG_CFR_WDGTB1 = 1U << 8 ;

  // Field WDGTB0: Timer base
    const uint32_t WWDG_CFR_WDGTB0 = 1U << 7 ;

  // Field W: 7-bit window value
    inline uint32_t WWDG_CFR_W (const uint32_t inValue) {return (inValue & 0x7FU) << 0 ; }

//------------------------------------------------------------------------------

//---  Register SR: Status register
  #define WWDG_SR (* ((volatile uint32_t *) (0x40002C00 + 8)))

  // Field EWIF: Early wakeup interrupt flag
    const uint32_t WWDG_SR_EWIF = 1U << 0 ;

//------------------------------------------------------------------------------
// INTERRUPTS
//------------------------------------------------------------------------------

enum class ISRSlot : uint8_t {
  WWDG = 0,
  PVD = 1,
  TAMP_STAMP = 2,
  RTC_WKUP = 3,
  FLASH = 4,
  RCC = 5,
  EXTI0 = 6,
  EXTI1 = 7,
  EXTI2 = 8,
  EXTI3 = 9,
  EXTI4 = 10,
  DMA1_Stream0 = 11,
  DMA1_Stream1 = 12,
  DMA1_Stream2 = 13,
  DMA1_Stream3 = 14,
  DMA1_Stream4 = 15,
  DMA1_Stream5 = 16,
  DMA1_Stream6 = 17,
  ADC = 18,
  CAN1_TX = 19,
  CAN1_RX0 = 20,
  CAN1_RX1 = 21,
  CAN1_SCE = 22,
  EXTI9_5 = 23,
  TIM1_BRK_TIM9 = 24,
  TIM1_UP_TIM10 = 25,
  TIM1_TRG_COM_TIM11 = 26,
  TIM1_CC = 27,
  TIM2 = 28,
  TIM3 = 29,
  TIM4 = 30,
  I2C1_EV = 31,
  I2C1_ER = 32,
  I2C2_EV = 33,
  I2C2_ER = 34,
  SPI1 = 35,
  SPI2 = 36,
  USART1 = 37,
  USART2 = 38,
  USART3 = 39,
  EXTI15_10 = 40,
  RTC_ALARM = 41,
  OTG_FS_WKUP = 42,
  TIM8_BRK_TIM12 = 43,
  TIM8_UP_TIM13 = 44,
  TIM8_TRG_COM_TIM14 = 45,
  TIM8_CC = 46,
  DMA1_Stream7 = 47,
  FMC = 48,
  SDMMC1 = 49,
  TIM5 = 50,
  SPI3 = 51,
  UART4 = 52,
  UART5 = 53,
  TIM6_DAC = 54,
  TIM7 = 55,
  DMA2_Stream0 = 56,
  DMA2_Stream1 = 57,
  DMA2_Stream2 = 58,
  DMA2_Stream3 = 59,
  DMA2_Stream4 = 60,
  ETH = 61,
  ETH_WKUP = 62,
  CAN2_TX = 63,
  CAN2_RX0 = 64,
  CAN2_RX1 = 65,
  CAN2_SCE = 66,
  OTG_FS = 67,
  DMA2_Stream5 = 68,
  DMA2_Stream6 = 69,
  DMA2_Stream7 = 70,
  USART6 = 71,
  I2C3_EV = 72,
  I2C3_ER = 73,
  OTG_HS_EP1_OUT = 74,
  OTG_HS_EP1_IN = 75,
  OTG_HS_WKUP = 76,
  OTG_HS = 77,
  DCMI = 78,
  CRYP = 79,
  HASH_RNG = 80,
  FPU = 81,
  UART7 = 82,
  UART8 = 83,
  SPI4 = 84,
  SPI5 = 85,
  SPI6 = 86,
  SAI1 = 87,
  LCD_TFT = 88,
  LCD_TFT_1 = 89,
  DMA2D = 90,
  SAI2 = 91,
  QuadSPI = 92,
  LP_Timer1 = 93,
  I2C4_EV = 95,
  I2C4_ER = 96,
  SPDIFRX = 97,
  DSIHOST = 98,
  DFSDM1_FLT0 = 99,
  DFSDM1_FLT1 = 100,
  DFSDM1_FLT2 = 101,
  DFSDM1_FLT3 = 102,
  SDMMC2 = 103,
  CAN3_TX = 104,
  CAN3_RX0 = 105,
  CAN3_RX1 = 106,
  CAN3_SCE = 107,
  JPEG = 108,
  MDIOS = 109,
} ;

//------------------------------------------------------------------------------

inline void NVIC_ENABLE_IRQ (const ISRSlot inInterrupt) {
  const uint32_t it = static_cast <uint32_t> (inInterrupt) ;
  *((volatile uint32_t *) (0xE000E100 + 4 * (it >> 5))) = 1U << (it & 31) ;
}

//------------------------------------------------------------------------------

inline void NVIC_DISABLE_IRQ (const ISRSlot inInterrupt) {
  const uint32_t it = static_cast <uint32_t> (inInterrupt) ;
  *((volatile uint32_t *) (0xE000E180 + 4 * (it >> 5))) = 1U << (it & 31) ;
}

//------------------------------------------------------------------------------
// BITBAND
//------------------------------------------------------------------------------

inline void bitband32 (const volatile uint32_t & inRegister, const uint8_t inBit, const bool inValue) {
  const uint32_t address = ((uint32_t) &inRegister - 0x40000000) * 32 + ((uint32_t) inBit) * 4 + 0x42000000 ;
  volatile uint32_t * ptr = (volatile uint32_t *) address ;
  *ptr = (uint32_t) inValue ;
}

//------------------------------------------------------------------------------
