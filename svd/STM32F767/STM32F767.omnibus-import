//------------------------------------------------------------------------------
// STM32F767: STM32F767
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Peripheral AC: Access control
//------------------------------------------------------------------------------

registers ©AC @at 0xe000ef90 {
//---  Register ITCMCR: Instruction and Data Tightly-Coupled Memory Control Registers
  ITCMCR @offset 0x0 $u32 {
    25
    SZ:4 // at 3: SZ
    RETEN // at 2: RETEN
    RMW // at 1: RMW
    EN // at 0: EN
  }

//---  Register DTCMCR: Instruction and Data Tightly-Coupled Memory Control Registers
  DTCMCR @offset 0x4 $u32 {
    25
    SZ:4 // at 3: SZ
    RETEN // at 2: RETEN
    RMW // at 1: RMW
    EN // at 0: EN
  }

//---  Register AHBPCR: AHBP Control register
  AHBPCR @offset 0x8 $u32 {
    28
    SZ:3 // at 1: SZ
    EN // at 0: EN
  }

//---  Register CACR: Auxiliary Cache Control register
  CACR @offset 0xc $u32 {
    29
    FORCEWT // at 2: FORCEWT
    ECCEN // at 1: ECCEN
    SIWT // at 0: SIWT
  }

//---  Register AHBSCR: AHB Slave Control register
  AHBSCR @offset 0x10 $u32 {
    16
    INITCOUNT:5 // at 11: INITCOUNT
    TPRI:9 // at 2: TPRI
    CTL:2 // at 0: CTL
  }

//---  Register ABFSR: Auxiliary Bus Fault Status register
  ABFSR @offset 0x18 $u32 {
    22
    AXIMTYPE:2 // at 8: AXIMTYPE
    3
    EPPB // at 4: EPPB
    AXIM // at 3: AXIM
    AHBP // at 2: AHBP
    DTCM // at 1: DTCM
    ITCM // at 0: ITCM
  }

}

//------------------------------------------------------------------------------
// Peripheral ADC1: Analog-to-digital converter
//------------------------------------------------------------------------------

registers ©ADC1 @at 0x40012000 {
//---  Register SR: status register
  SR @offset 0x0 $u32 {
    26
    OVR // at 5: Overrun
    STRT // at 4: Regular channel start flag
    JSTRT // at 3: Injected channel start flag
    JEOC // at 2: Injected channel end of conversion
    EOC // at 1: Regular channel end of conversion
    AWD // at 0: Analog watchdog flag
  }

//---  Register CR1: control register 1
  CR1 @offset 0x4 $u32 {
    5
    OVRIE // at 26: Overrun interrupt enable
    RES:2 // at 24: Resolution
    AWDEN // at 23: Analog watchdog enable on regular channels
    JAWDEN // at 22: Analog watchdog enable on injected channels
    6
    DISCNUM:3 // at 13: Discontinuous mode channel count
    JDISCEN // at 12: Discontinuous mode on injected channels
    DISCEN // at 11: Discontinuous mode on regular channels
    JAUTO // at 10: Automatic injected group conversion
    AWDSGL // at 9: Enable the watchdog on a single channel in scan mode
    SCAN // at 8: Scan mode
    JEOCIE // at 7: Interrupt enable for injected channels
    AWDIE // at 6: Analog watchdog interrupt enable
    EOCIE // at 5: Interrupt enable for EOC
    AWDCH:5 // at 0: Analog watchdog channel select bits
  }

//---  Register CR2: control register 2
  CR2 @offset 0x8 $u32 {
    1
    SWSTART // at 30: Start conversion of regular channels
    EXTEN:2 // at 28: External trigger enable for regular channels
    EXTSEL:4 // at 24: External event select for regular group
    1
    JSWSTART // at 22: Start conversion of injected channels
    JEXTEN:2 // at 20: External trigger enable for injected channels
    JEXTSEL:4 // at 16: External event select for injected group
    4
    ALIGN // at 11: Data alignment
    EOCS // at 10: End of conversion selection
    DDS // at 9: DMA disable selection (for single ADC mode)
    DMA // at 8: Direct memory access mode (for single ADC mode)
    6
    CONT // at 1: Continuous conversion
    ADON // at 0: A/D Converter ON / OFF
  }

//---  Register SMPR1: sample time register 1
  SMPR1 @offset 0xc $u32 {
    SMPx_x:32 // at 0: Sample time bits
  }

//---  Register SMPR2: sample time register 2
  SMPR2 @offset 0x10 $u32 {
    SMPx_x:32 // at 0: Sample time bits
  }

//---  Register JOFR1: injected channel data offset register x
  JOFR1 @offset 0x14 $u32 {
    20
    JOFFSET1:12 // at 0: Data offset for injected channel x
  }

//---  Register JOFR2: injected channel data offset register x
  JOFR2 @offset 0x18 $u32 {
    20
    JOFFSET2:12 // at 0: Data offset for injected channel x
  }

//---  Register JOFR3: injected channel data offset register x
  JOFR3 @offset 0x1c $u32 {
    20
    JOFFSET3:12 // at 0: Data offset for injected channel x
  }

//---  Register JOFR4: injected channel data offset register x
  JOFR4 @offset 0x20 $u32 {
    20
    JOFFSET4:12 // at 0: Data offset for injected channel x
  }

//---  Register HTR: watchdog higher threshold register
  HTR @offset 0x24 $u32 {
    20
    HT:12 // at 0: Analog watchdog higher threshold
  }

//---  Register LTR: watchdog lower threshold register
  LTR @offset 0x28 $u32 {
    20
    LT:12 // at 0: Analog watchdog lower threshold
  }

//---  Register SQR1: regular sequence register 1
  SQR1 @offset 0x2c $u32 {
    8
    L:4 // at 20: Regular channel sequence length
    SQ16:5 // at 15: 16th conversion in regular sequence
    SQ15:5 // at 10: 15th conversion in regular sequence
    SQ14:5 // at 5: 14th conversion in regular sequence
    SQ13:5 // at 0: 13th conversion in regular sequence
  }

//---  Register SQR2: regular sequence register 2
  SQR2 @offset 0x30 $u32 {
    2
    SQ12:5 // at 25: 12th conversion in regular sequence
    SQ11:5 // at 20: 11th conversion in regular sequence
    SQ10:5 // at 15: 10th conversion in regular sequence
    SQ9:5 // at 10: 9th conversion in regular sequence
    SQ8:5 // at 5: 8th conversion in regular sequence
    SQ7:5 // at 0: 7th conversion in regular sequence
  }

//---  Register SQR3: regular sequence register 3
  SQR3 @offset 0x34 $u32 {
    2
    SQ6:5 // at 25: 6th conversion in regular sequence
    SQ5:5 // at 20: 5th conversion in regular sequence
    SQ4:5 // at 15: 4th conversion in regular sequence
    SQ3:5 // at 10: 3rd conversion in regular sequence
    SQ2:5 // at 5: 2nd conversion in regular sequence
    SQ1:5 // at 0: 1st conversion in regular sequence
  }

//---  Register JSQR: injected sequence register
  JSQR @offset 0x38 $u32 {
    10
    JL:2 // at 20: Injected sequence length
    JSQ4:5 // at 15: 4th conversion in injected sequence
    JSQ3:5 // at 10: 3rd conversion in injected sequence
    JSQ2:5 // at 5: 2nd conversion in injected sequence
    JSQ1:5 // at 0: 1st conversion in injected sequence
  }

//---  Register JDR1: injected data register x
  JDR1 @offset 0x3c @ro $u32 {
    16
    JDATA:16 // at 0: Injected data
  }

//---  Register JDR2: injected data register x
  JDR2 @offset 0x40 @ro $u32 {
    16
    JDATA:16 // at 0: Injected data
  }

//---  Register JDR3: injected data register x
  JDR3 @offset 0x44 @ro $u32 {
    16
    JDATA:16 // at 0: Injected data
  }

//---  Register JDR4: injected data register x
  JDR4 @offset 0x48 @ro $u32 {
    16
    JDATA:16 // at 0: Injected data
  }

//---  Register DR: regular data register
  DR @offset 0x4c @ro $u32 {
    16
    DATA:16 // at 0: Regular data
  }

}

//------------------------------------------------------------------------------
// Peripheral ADC2
//------------------------------------------------------------------------------

registers ©ADC2 @at 0x40012100 {
//---  Register SR: status register
  SR @offset 0x0 $u32 {
    26
    OVR // at 5: Overrun
    STRT // at 4: Regular channel start flag
    JSTRT // at 3: Injected channel start flag
    JEOC // at 2: Injected channel end of conversion
    EOC // at 1: Regular channel end of conversion
    AWD // at 0: Analog watchdog flag
  }

//---  Register CR1: control register 1
  CR1 @offset 0x4 $u32 {
    5
    OVRIE // at 26: Overrun interrupt enable
    RES:2 // at 24: Resolution
    AWDEN // at 23: Analog watchdog enable on regular channels
    JAWDEN // at 22: Analog watchdog enable on injected channels
    6
    DISCNUM:3 // at 13: Discontinuous mode channel count
    JDISCEN // at 12: Discontinuous mode on injected channels
    DISCEN // at 11: Discontinuous mode on regular channels
    JAUTO // at 10: Automatic injected group conversion
    AWDSGL // at 9: Enable the watchdog on a single channel in scan mode
    SCAN // at 8: Scan mode
    JEOCIE // at 7: Interrupt enable for injected channels
    AWDIE // at 6: Analog watchdog interrupt enable
    EOCIE // at 5: Interrupt enable for EOC
    AWDCH:5 // at 0: Analog watchdog channel select bits
  }

//---  Register CR2: control register 2
  CR2 @offset 0x8 $u32 {
    1
    SWSTART // at 30: Start conversion of regular channels
    EXTEN:2 // at 28: External trigger enable for regular channels
    EXTSEL:4 // at 24: External event select for regular group
    1
    JSWSTART // at 22: Start conversion of injected channels
    JEXTEN:2 // at 20: External trigger enable for injected channels
    JEXTSEL:4 // at 16: External event select for injected group
    4
    ALIGN // at 11: Data alignment
    EOCS // at 10: End of conversion selection
    DDS // at 9: DMA disable selection (for single ADC mode)
    DMA // at 8: Direct memory access mode (for single ADC mode)
    6
    CONT // at 1: Continuous conversion
    ADON // at 0: A/D Converter ON / OFF
  }

//---  Register SMPR1: sample time register 1
  SMPR1 @offset 0xc $u32 {
    SMPx_x:32 // at 0: Sample time bits
  }

//---  Register SMPR2: sample time register 2
  SMPR2 @offset 0x10 $u32 {
    SMPx_x:32 // at 0: Sample time bits
  }

//---  Register JOFR1: injected channel data offset register x
  JOFR1 @offset 0x14 $u32 {
    20
    JOFFSET1:12 // at 0: Data offset for injected channel x
  }

//---  Register JOFR2: injected channel data offset register x
  JOFR2 @offset 0x18 $u32 {
    20
    JOFFSET2:12 // at 0: Data offset for injected channel x
  }

//---  Register JOFR3: injected channel data offset register x
  JOFR3 @offset 0x1c $u32 {
    20
    JOFFSET3:12 // at 0: Data offset for injected channel x
  }

//---  Register JOFR4: injected channel data offset register x
  JOFR4 @offset 0x20 $u32 {
    20
    JOFFSET4:12 // at 0: Data offset for injected channel x
  }

//---  Register HTR: watchdog higher threshold register
  HTR @offset 0x24 $u32 {
    20
    HT:12 // at 0: Analog watchdog higher threshold
  }

//---  Register LTR: watchdog lower threshold register
  LTR @offset 0x28 $u32 {
    20
    LT:12 // at 0: Analog watchdog lower threshold
  }

//---  Register SQR1: regular sequence register 1
  SQR1 @offset 0x2c $u32 {
    8
    L:4 // at 20: Regular channel sequence length
    SQ16:5 // at 15: 16th conversion in regular sequence
    SQ15:5 // at 10: 15th conversion in regular sequence
    SQ14:5 // at 5: 14th conversion in regular sequence
    SQ13:5 // at 0: 13th conversion in regular sequence
  }

//---  Register SQR2: regular sequence register 2
  SQR2 @offset 0x30 $u32 {
    2
    SQ12:5 // at 25: 12th conversion in regular sequence
    SQ11:5 // at 20: 11th conversion in regular sequence
    SQ10:5 // at 15: 10th conversion in regular sequence
    SQ9:5 // at 10: 9th conversion in regular sequence
    SQ8:5 // at 5: 8th conversion in regular sequence
    SQ7:5 // at 0: 7th conversion in regular sequence
  }

//---  Register SQR3: regular sequence register 3
  SQR3 @offset 0x34 $u32 {
    2
    SQ6:5 // at 25: 6th conversion in regular sequence
    SQ5:5 // at 20: 5th conversion in regular sequence
    SQ4:5 // at 15: 4th conversion in regular sequence
    SQ3:5 // at 10: 3rd conversion in regular sequence
    SQ2:5 // at 5: 2nd conversion in regular sequence
    SQ1:5 // at 0: 1st conversion in regular sequence
  }

//---  Register JSQR: injected sequence register
  JSQR @offset 0x38 $u32 {
    10
    JL:2 // at 20: Injected sequence length
    JSQ4:5 // at 15: 4th conversion in injected sequence
    JSQ3:5 // at 10: 3rd conversion in injected sequence
    JSQ2:5 // at 5: 2nd conversion in injected sequence
    JSQ1:5 // at 0: 1st conversion in injected sequence
  }

//---  Register JDR1: injected data register x
  JDR1 @offset 0x3c @ro $u32 {
    16
    JDATA:16 // at 0: Injected data
  }

//---  Register JDR2: injected data register x
  JDR2 @offset 0x40 @ro $u32 {
    16
    JDATA:16 // at 0: Injected data
  }

//---  Register JDR3: injected data register x
  JDR3 @offset 0x44 @ro $u32 {
    16
    JDATA:16 // at 0: Injected data
  }

//---  Register JDR4: injected data register x
  JDR4 @offset 0x48 @ro $u32 {
    16
    JDATA:16 // at 0: Injected data
  }

//---  Register DR: regular data register
  DR @offset 0x4c @ro $u32 {
    16
    DATA:16 // at 0: Regular data
  }

}

//------------------------------------------------------------------------------
// Peripheral ADC3
//------------------------------------------------------------------------------

registers ©ADC3 @at 0x40012200 {
//---  Register SR: status register
  SR @offset 0x0 $u32 {
    26
    OVR // at 5: Overrun
    STRT // at 4: Regular channel start flag
    JSTRT // at 3: Injected channel start flag
    JEOC // at 2: Injected channel end of conversion
    EOC // at 1: Regular channel end of conversion
    AWD // at 0: Analog watchdog flag
  }

//---  Register CR1: control register 1
  CR1 @offset 0x4 $u32 {
    5
    OVRIE // at 26: Overrun interrupt enable
    RES:2 // at 24: Resolution
    AWDEN // at 23: Analog watchdog enable on regular channels
    JAWDEN // at 22: Analog watchdog enable on injected channels
    6
    DISCNUM:3 // at 13: Discontinuous mode channel count
    JDISCEN // at 12: Discontinuous mode on injected channels
    DISCEN // at 11: Discontinuous mode on regular channels
    JAUTO // at 10: Automatic injected group conversion
    AWDSGL // at 9: Enable the watchdog on a single channel in scan mode
    SCAN // at 8: Scan mode
    JEOCIE // at 7: Interrupt enable for injected channels
    AWDIE // at 6: Analog watchdog interrupt enable
    EOCIE // at 5: Interrupt enable for EOC
    AWDCH:5 // at 0: Analog watchdog channel select bits
  }

//---  Register CR2: control register 2
  CR2 @offset 0x8 $u32 {
    1
    SWSTART // at 30: Start conversion of regular channels
    EXTEN:2 // at 28: External trigger enable for regular channels
    EXTSEL:4 // at 24: External event select for regular group
    1
    JSWSTART // at 22: Start conversion of injected channels
    JEXTEN:2 // at 20: External trigger enable for injected channels
    JEXTSEL:4 // at 16: External event select for injected group
    4
    ALIGN // at 11: Data alignment
    EOCS // at 10: End of conversion selection
    DDS // at 9: DMA disable selection (for single ADC mode)
    DMA // at 8: Direct memory access mode (for single ADC mode)
    6
    CONT // at 1: Continuous conversion
    ADON // at 0: A/D Converter ON / OFF
  }

//---  Register SMPR1: sample time register 1
  SMPR1 @offset 0xc $u32 {
    SMPx_x:32 // at 0: Sample time bits
  }

//---  Register SMPR2: sample time register 2
  SMPR2 @offset 0x10 $u32 {
    SMPx_x:32 // at 0: Sample time bits
  }

//---  Register JOFR1: injected channel data offset register x
  JOFR1 @offset 0x14 $u32 {
    20
    JOFFSET1:12 // at 0: Data offset for injected channel x
  }

//---  Register JOFR2: injected channel data offset register x
  JOFR2 @offset 0x18 $u32 {
    20
    JOFFSET2:12 // at 0: Data offset for injected channel x
  }

//---  Register JOFR3: injected channel data offset register x
  JOFR3 @offset 0x1c $u32 {
    20
    JOFFSET3:12 // at 0: Data offset for injected channel x
  }

//---  Register JOFR4: injected channel data offset register x
  JOFR4 @offset 0x20 $u32 {
    20
    JOFFSET4:12 // at 0: Data offset for injected channel x
  }

//---  Register HTR: watchdog higher threshold register
  HTR @offset 0x24 $u32 {
    20
    HT:12 // at 0: Analog watchdog higher threshold
  }

//---  Register LTR: watchdog lower threshold register
  LTR @offset 0x28 $u32 {
    20
    LT:12 // at 0: Analog watchdog lower threshold
  }

//---  Register SQR1: regular sequence register 1
  SQR1 @offset 0x2c $u32 {
    8
    L:4 // at 20: Regular channel sequence length
    SQ16:5 // at 15: 16th conversion in regular sequence
    SQ15:5 // at 10: 15th conversion in regular sequence
    SQ14:5 // at 5: 14th conversion in regular sequence
    SQ13:5 // at 0: 13th conversion in regular sequence
  }

//---  Register SQR2: regular sequence register 2
  SQR2 @offset 0x30 $u32 {
    2
    SQ12:5 // at 25: 12th conversion in regular sequence
    SQ11:5 // at 20: 11th conversion in regular sequence
    SQ10:5 // at 15: 10th conversion in regular sequence
    SQ9:5 // at 10: 9th conversion in regular sequence
    SQ8:5 // at 5: 8th conversion in regular sequence
    SQ7:5 // at 0: 7th conversion in regular sequence
  }

//---  Register SQR3: regular sequence register 3
  SQR3 @offset 0x34 $u32 {
    2
    SQ6:5 // at 25: 6th conversion in regular sequence
    SQ5:5 // at 20: 5th conversion in regular sequence
    SQ4:5 // at 15: 4th conversion in regular sequence
    SQ3:5 // at 10: 3rd conversion in regular sequence
    SQ2:5 // at 5: 2nd conversion in regular sequence
    SQ1:5 // at 0: 1st conversion in regular sequence
  }

//---  Register JSQR: injected sequence register
  JSQR @offset 0x38 $u32 {
    10
    JL:2 // at 20: Injected sequence length
    JSQ4:5 // at 15: 4th conversion in injected sequence
    JSQ3:5 // at 10: 3rd conversion in injected sequence
    JSQ2:5 // at 5: 2nd conversion in injected sequence
    JSQ1:5 // at 0: 1st conversion in injected sequence
  }

//---  Register JDR1: injected data register x
  JDR1 @offset 0x3c @ro $u32 {
    16
    JDATA:16 // at 0: Injected data
  }

//---  Register JDR2: injected data register x
  JDR2 @offset 0x40 @ro $u32 {
    16
    JDATA:16 // at 0: Injected data
  }

//---  Register JDR3: injected data register x
  JDR3 @offset 0x44 @ro $u32 {
    16
    JDATA:16 // at 0: Injected data
  }

//---  Register JDR4: injected data register x
  JDR4 @offset 0x48 @ro $u32 {
    16
    JDATA:16 // at 0: Injected data
  }

//---  Register DR: regular data register
  DR @offset 0x4c @ro $u32 {
    16
    DATA:16 // at 0: Regular data
  }

}

//------------------------------------------------------------------------------
// Peripheral CAN1: Controller area network
//------------------------------------------------------------------------------

registers ©CAN1 @at 0x40006400 {
//---  Register MCR: master control register
  MCR @offset 0x0 $u32 {
    15
    DBF // at 16: DBF
    RESET // at 15: RESET
    7
    TTCM // at 7: TTCM
    ABOM // at 6: ABOM
    AWUM // at 5: AWUM
    NART // at 4: NART
    RFLM // at 3: RFLM
    TXFP // at 2: TXFP
    SLEEP // at 1: SLEEP
    INRQ // at 0: INRQ
  }

//---  Register MSR: master status register
  MSR @offset 0x4 $u32 {
    20
    RX // at 11: RX
    SAMP // at 10: SAMP
    RXM // at 9: RXM
    TXM // at 8: TXM
    3
    SLAKI // at 4: SLAKI
    WKUI // at 3: WKUI
    ERRI // at 2: ERRI
    SLAK // at 1: SLAK
    INAK // at 0: INAK
  }

//---  Register TSR: transmit status register
  TSR @offset 0x8 $u32 {
    LOW2 // at 31: Lowest priority flag for mailbox 2
    LOW1 // at 30: Lowest priority flag for mailbox 1
    LOW0 // at 29: Lowest priority flag for mailbox 0
    TME2 // at 28: Lowest priority flag for mailbox 2
    TME1 // at 27: Lowest priority flag for mailbox 1
    TME0 // at 26: Lowest priority flag for mailbox 0
    CODE:2 // at 24: CODE
    ABRQ2 // at 23: ABRQ2
    3
    TERR2 // at 19: TERR2
    ALST2 // at 18: ALST2
    TXOK2 // at 17: TXOK2
    RQCP2 // at 16: RQCP2
    ABRQ1 // at 15: ABRQ1
    3
    TERR1 // at 11: TERR1
    ALST1 // at 10: ALST1
    TXOK1 // at 9: TXOK1
    RQCP1 // at 8: RQCP1
    ABRQ0 // at 7: ABRQ0
    3
    TERR0 // at 3: TERR0
    ALST0 // at 2: ALST0
    TXOK0 // at 1: TXOK0
    RQCP0 // at 0: RQCP0
  }

//---  Register RF0R: receive FIFO 0 register
  RF0R @offset 0xc $u32 {
    26
    RFOM0 // at 5: RFOM0
    FOVR0 // at 4: FOVR0
    FULL0 // at 3: FULL0
    1
    FMP0:2 // at 0: FMP0
  }

//---  Register RF1R: receive FIFO 1 register
  RF1R @offset 0x10 $u32 {
    26
    RFOM1 // at 5: RFOM1
    FOVR1 // at 4: FOVR1
    FULL1 // at 3: FULL1
    1
    FMP1:2 // at 0: FMP1
  }

//---  Register IER: interrupt enable register
  IER @offset 0x14 $u32 {
    14
    SLKIE // at 17: SLKIE
    WKUIE // at 16: WKUIE
    ERRIE // at 15: ERRIE
    3
    LECIE // at 11: LECIE
    BOFIE // at 10: BOFIE
    EPVIE // at 9: EPVIE
    EWGIE // at 8: EWGIE
    1
    FOVIE1 // at 6: FOVIE1
    FFIE1 // at 5: FFIE1
    FMPIE1 // at 4: FMPIE1
    FOVIE0 // at 3: FOVIE0
    FFIE0 // at 2: FFIE0
    FMPIE0 // at 1: FMPIE0
    TMEIE // at 0: TMEIE
  }

//---  Register ESR: interrupt enable register
  ESR @offset 0x18 $u32 {
    REC:8 // at 24: REC
    TEC:8 // at 16: TEC
    9
    LEC:3 // at 4: LEC
    1
    BOFF // at 2: BOFF
    EPVF // at 1: EPVF
    EWGF // at 0: EWGF
  }

//---  Register BTR: bit timing register
  BTR @offset 0x1c $u32 {
    SILM // at 31: SILM
    LBKM // at 30: LBKM
    4
    SJW:2 // at 24: SJW
    1
    TS2:3 // at 20: TS2
    TS1:4 // at 16: TS1
    6
    BRP:10 // at 0: BRP
  }

//---  Register TI0R: TX mailbox identifier register
  TI0R @offset 0x180 $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    TXRQ // at 0: TXRQ
  }

//---  Register TDT0R: mailbox data length control and time stamp register
  TDT0R @offset 0x184 $u32 {
    TIME:16 // at 16: TIME
    7
    TGT // at 8: TGT
    4
    DLC:4 // at 0: DLC
  }

//---  Register TDL0R: mailbox data low register
  TDL0R @offset 0x188 $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register TDH0R: mailbox data high register
  TDH0R @offset 0x18c $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register TI1R: mailbox identifier register
  TI1R @offset 0x190 $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    TXRQ // at 0: TXRQ
  }

//---  Register TDT1R: mailbox data length control and time stamp register
  TDT1R @offset 0x194 $u32 {
    TIME:16 // at 16: TIME
    7
    TGT // at 8: TGT
    4
    DLC:4 // at 0: DLC
  }

//---  Register TDL1R: mailbox data low register
  TDL1R @offset 0x198 $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register TDH1R: mailbox data high register
  TDH1R @offset 0x19c $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register TI2R: mailbox identifier register
  TI2R @offset 0x1a0 $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    TXRQ // at 0: TXRQ
  }

//---  Register TDT2R: mailbox data length control and time stamp register
  TDT2R @offset 0x1a4 $u32 {
    TIME:16 // at 16: TIME
    7
    TGT // at 8: TGT
    4
    DLC:4 // at 0: DLC
  }

//---  Register TDL2R: mailbox data low register
  TDL2R @offset 0x1a8 $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register TDH2R: mailbox data high register
  TDH2R @offset 0x1ac $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register RI0R: receive FIFO mailbox identifier register
  RI0R @offset 0x1b0 @ro $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    1
  }

//---  Register RDT0R: mailbox data high register
  RDT0R @offset 0x1b4 @ro $u32 {
    TIME:16 // at 16: TIME
    FMI:8 // at 8: FMI
    4
    DLC:4 // at 0: DLC
  }

//---  Register RDL0R: mailbox data high register
  RDL0R @offset 0x1b8 @ro $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register RDH0R: receive FIFO mailbox data high register
  RDH0R @offset 0x1bc @ro $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register RI1R: mailbox data high register
  RI1R @offset 0x1c0 @ro $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    1
  }

//---  Register RDT1R: mailbox data high register
  RDT1R @offset 0x1c4 @ro $u32 {
    TIME:16 // at 16: TIME
    FMI:8 // at 8: FMI
    4
    DLC:4 // at 0: DLC
  }

//---  Register RDL1R: mailbox data high register
  RDL1R @offset 0x1c8 @ro $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register RDH1R: mailbox data high register
  RDH1R @offset 0x1cc @ro $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register FMR: filter master register
  FMR @offset 0x200 $u32 {
    18
    CAN2SB:6 // at 8: CAN2SB
    7
    FINIT // at 0: FINIT
  }

//---  Register FM1R: filter mode register
  FM1R @offset 0x204 $u32 {
    4
    FBM27 // at 27: Filter mode
    FBM26 // at 26: Filter mode
    FBM25 // at 25: Filter mode
    FBM24 // at 24: Filter mode
    FBM23 // at 23: Filter mode
    FBM22 // at 22: Filter mode
    FBM21 // at 21: Filter mode
    FBM20 // at 20: Filter mode
    FBM19 // at 19: Filter mode
    FBM18 // at 18: Filter mode
    FBM17 // at 17: Filter mode
    FBM16 // at 16: Filter mode
    FBM15 // at 15: Filter mode
    FBM14 // at 14: Filter mode
    FBM13 // at 13: Filter mode
    FBM12 // at 12: Filter mode
    FBM11 // at 11: Filter mode
    FBM10 // at 10: Filter mode
    FBM9 // at 9: Filter mode
    FBM8 // at 8: Filter mode
    FBM7 // at 7: Filter mode
    FBM6 // at 6: Filter mode
    FBM5 // at 5: Filter mode
    FBM4 // at 4: Filter mode
    FBM3 // at 3: Filter mode
    FBM2 // at 2: Filter mode
    FBM1 // at 1: Filter mode
    FBM0 // at 0: Filter mode
  }

//---  Register FS1R: filter scale register
  FS1R @offset 0x20c $u32 {
    4
    FSC27 // at 27: Filter scale configuration
    FSC26 // at 26: Filter scale configuration
    FSC25 // at 25: Filter scale configuration
    FSC24 // at 24: Filter scale configuration
    FSC23 // at 23: Filter scale configuration
    FSC22 // at 22: Filter scale configuration
    FSC21 // at 21: Filter scale configuration
    FSC20 // at 20: Filter scale configuration
    FSC19 // at 19: Filter scale configuration
    FSC18 // at 18: Filter scale configuration
    FSC17 // at 17: Filter scale configuration
    FSC16 // at 16: Filter scale configuration
    FSC15 // at 15: Filter scale configuration
    FSC14 // at 14: Filter scale configuration
    FSC13 // at 13: Filter scale configuration
    FSC12 // at 12: Filter scale configuration
    FSC11 // at 11: Filter scale configuration
    FSC10 // at 10: Filter scale configuration
    FSC9 // at 9: Filter scale configuration
    FSC8 // at 8: Filter scale configuration
    FSC7 // at 7: Filter scale configuration
    FSC6 // at 6: Filter scale configuration
    FSC5 // at 5: Filter scale configuration
    FSC4 // at 4: Filter scale configuration
    FSC3 // at 3: Filter scale configuration
    FSC2 // at 2: Filter scale configuration
    FSC1 // at 1: Filter scale configuration
    FSC0 // at 0: Filter scale configuration
  }

//---  Register FFA1R: filter FIFO assignment register
  FFA1R @offset 0x214 $u32 {
    4
    FFA27 // at 27: Filter FIFO assignment for filter 27
    FFA26 // at 26: Filter FIFO assignment for filter 26
    FFA25 // at 25: Filter FIFO assignment for filter 25
    FFA24 // at 24: Filter FIFO assignment for filter 24
    FFA23 // at 23: Filter FIFO assignment for filter 23
    FFA22 // at 22: Filter FIFO assignment for filter 22
    FFA21 // at 21: Filter FIFO assignment for filter 21
    FFA20 // at 20: Filter FIFO assignment for filter 20
    FFA19 // at 19: Filter FIFO assignment for filter 19
    FFA18 // at 18: Filter FIFO assignment for filter 18
    FFA17 // at 17: Filter FIFO assignment for filter 17
    FFA16 // at 16: Filter FIFO assignment for filter 16
    FFA15 // at 15: Filter FIFO assignment for filter 15
    FFA14 // at 14: Filter FIFO assignment for filter 14
    FFA13 // at 13: Filter FIFO assignment for filter 13
    FFA12 // at 12: Filter FIFO assignment for filter 12
    FFA11 // at 11: Filter FIFO assignment for filter 11
    FFA10 // at 10: Filter FIFO assignment for filter 10
    FFA9 // at 9: Filter FIFO assignment for filter 9
    FFA8 // at 8: Filter FIFO assignment for filter 8
    FFA7 // at 7: Filter FIFO assignment for filter 7
    FFA6 // at 6: Filter FIFO assignment for filter 6
    FFA5 // at 5: Filter FIFO assignment for filter 5
    FFA4 // at 4: Filter FIFO assignment for filter 4
    FFA3 // at 3: Filter FIFO assignment for filter 3
    FFA2 // at 2: Filter FIFO assignment for filter 2
    FFA1 // at 1: Filter FIFO assignment for filter 1
    FFA0 // at 0: Filter FIFO assignment for filter 0
  }

//---  Register FA1R: filter activation register
  FA1R @offset 0x21c $u32 {
    4
    FACT27 // at 27: Filter active
    FACT26 // at 26: Filter active
    FACT25 // at 25: Filter active
    FACT24 // at 24: Filter active
    FACT23 // at 23: Filter active
    FACT22 // at 22: Filter active
    FACT21 // at 21: Filter active
    FACT20 // at 20: Filter active
    FACT19 // at 19: Filter active
    FACT18 // at 18: Filter active
    FACT17 // at 17: Filter active
    FACT16 // at 16: Filter active
    FACT15 // at 15: Filter active
    FACT14 // at 14: Filter active
    FACT13 // at 13: Filter active
    FACT12 // at 12: Filter active
    FACT11 // at 11: Filter active
    FACT10 // at 10: Filter active
    FACT9 // at 9: Filter active
    FACT8 // at 8: Filter active
    FACT7 // at 7: Filter active
    FACT6 // at 6: Filter active
    FACT5 // at 5: Filter active
    FACT4 // at 4: Filter active
    FACT3 // at 3: Filter active
    FACT2 // at 2: Filter active
    FACT1 // at 1: Filter active
    FACT0 // at 0: Filter active
  }

//---  Register F0R1: Filter bank 0 register 1
  F0R1 @offset 0x240 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F0R2: Filter bank 0 register 2
  F0R2 @offset 0x244 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F1R1: Filter bank 1 register 1
  F1R1 @offset 0x248 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F1R2: Filter bank 1 register 2
  F1R2 @offset 0x24c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F2R1: Filter bank 2 register 1
  F2R1 @offset 0x250 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F2R2: Filter bank 2 register 2
  F2R2 @offset 0x254 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F3R1: Filter bank 3 register 1
  F3R1 @offset 0x258 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F3R2: Filter bank 3 register 2
  F3R2 @offset 0x25c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F4R1: Filter bank 4 register 1
  F4R1 @offset 0x260 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F4R2: Filter bank 4 register 2
  F4R2 @offset 0x264 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F5R1: Filter bank 5 register 1
  F5R1 @offset 0x268 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F5R2: Filter bank 5 register 2
  F5R2 @offset 0x26c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F6R1: Filter bank 6 register 1
  F6R1 @offset 0x270 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F6R2: Filter bank 6 register 2
  F6R2 @offset 0x274 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F7R1: Filter bank 7 register 1
  F7R1 @offset 0x278 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F7R2: Filter bank 7 register 2
  F7R2 @offset 0x27c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F8R1: Filter bank 8 register 1
  F8R1 @offset 0x280 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F8R2: Filter bank 8 register 2
  F8R2 @offset 0x284 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F9R1: Filter bank 9 register 1
  F9R1 @offset 0x288 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F9R2: Filter bank 9 register 2
  F9R2 @offset 0x28c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F10R1: Filter bank 10 register 1
  F10R1 @offset 0x290 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F10R2: Filter bank 10 register 2
  F10R2 @offset 0x294 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F11R1: Filter bank 11 register 1
  F11R1 @offset 0x298 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F11R2: Filter bank 11 register 2
  F11R2 @offset 0x29c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F12R1: Filter bank 4 register 1
  F12R1 @offset 0x2a0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F12R2: Filter bank 12 register 2
  F12R2 @offset 0x2a4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F13R1: Filter bank 13 register 1
  F13R1 @offset 0x2a8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F13R2: Filter bank 13 register 2
  F13R2 @offset 0x2ac $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F14R1: Filter bank 14 register 1
  F14R1 @offset 0x2b0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F14R2: Filter bank 14 register 2
  F14R2 @offset 0x2b4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F15R1: Filter bank 15 register 1
  F15R1 @offset 0x2b8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F15R2: Filter bank 15 register 2
  F15R2 @offset 0x2bc $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F16R1: Filter bank 16 register 1
  F16R1 @offset 0x2c0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F16R2: Filter bank 16 register 2
  F16R2 @offset 0x2c4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F17R1: Filter bank 17 register 1
  F17R1 @offset 0x2c8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F17R2: Filter bank 17 register 2
  F17R2 @offset 0x2cc $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F18R1: Filter bank 18 register 1
  F18R1 @offset 0x2d0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F18R2: Filter bank 18 register 2
  F18R2 @offset 0x2d4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F19R1: Filter bank 19 register 1
  F19R1 @offset 0x2d8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F19R2: Filter bank 19 register 2
  F19R2 @offset 0x2dc $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F20R1: Filter bank 20 register 1
  F20R1 @offset 0x2e0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F20R2: Filter bank 20 register 2
  F20R2 @offset 0x2e4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F21R1: Filter bank 21 register 1
  F21R1 @offset 0x2e8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F21R2: Filter bank 21 register 2
  F21R2 @offset 0x2ec $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F22R1: Filter bank 22 register 1
  F22R1 @offset 0x2f0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F22R2: Filter bank 22 register 2
  F22R2 @offset 0x2f4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F23R1: Filter bank 23 register 1
  F23R1 @offset 0x2f8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F23R2: Filter bank 23 register 2
  F23R2 @offset 0x2fc $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F24R1: Filter bank 24 register 1
  F24R1 @offset 0x300 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F24R2: Filter bank 24 register 2
  F24R2 @offset 0x304 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F25R1: Filter bank 25 register 1
  F25R1 @offset 0x308 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F25R2: Filter bank 25 register 2
  F25R2 @offset 0x30c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F26R1: Filter bank 26 register 1
  F26R1 @offset 0x310 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F26R2: Filter bank 26 register 2
  F26R2 @offset 0x314 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F27R1: Filter bank 27 register 1
  F27R1 @offset 0x318 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F27R2: Filter bank 27 register 2
  F27R2 @offset 0x31c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

}

//------------------------------------------------------------------------------
// Peripheral CAN2
//------------------------------------------------------------------------------

registers ©CAN2 @at 0x40006800 {
//---  Register MCR: master control register
  MCR @offset 0x0 $u32 {
    15
    DBF // at 16: DBF
    RESET // at 15: RESET
    7
    TTCM // at 7: TTCM
    ABOM // at 6: ABOM
    AWUM // at 5: AWUM
    NART // at 4: NART
    RFLM // at 3: RFLM
    TXFP // at 2: TXFP
    SLEEP // at 1: SLEEP
    INRQ // at 0: INRQ
  }

//---  Register MSR: master status register
  MSR @offset 0x4 $u32 {
    20
    RX // at 11: RX
    SAMP // at 10: SAMP
    RXM // at 9: RXM
    TXM // at 8: TXM
    3
    SLAKI // at 4: SLAKI
    WKUI // at 3: WKUI
    ERRI // at 2: ERRI
    SLAK // at 1: SLAK
    INAK // at 0: INAK
  }

//---  Register TSR: transmit status register
  TSR @offset 0x8 $u32 {
    LOW2 // at 31: Lowest priority flag for mailbox 2
    LOW1 // at 30: Lowest priority flag for mailbox 1
    LOW0 // at 29: Lowest priority flag for mailbox 0
    TME2 // at 28: Lowest priority flag for mailbox 2
    TME1 // at 27: Lowest priority flag for mailbox 1
    TME0 // at 26: Lowest priority flag for mailbox 0
    CODE:2 // at 24: CODE
    ABRQ2 // at 23: ABRQ2
    3
    TERR2 // at 19: TERR2
    ALST2 // at 18: ALST2
    TXOK2 // at 17: TXOK2
    RQCP2 // at 16: RQCP2
    ABRQ1 // at 15: ABRQ1
    3
    TERR1 // at 11: TERR1
    ALST1 // at 10: ALST1
    TXOK1 // at 9: TXOK1
    RQCP1 // at 8: RQCP1
    ABRQ0 // at 7: ABRQ0
    3
    TERR0 // at 3: TERR0
    ALST0 // at 2: ALST0
    TXOK0 // at 1: TXOK0
    RQCP0 // at 0: RQCP0
  }

//---  Register RF0R: receive FIFO 0 register
  RF0R @offset 0xc $u32 {
    26
    RFOM0 // at 5: RFOM0
    FOVR0 // at 4: FOVR0
    FULL0 // at 3: FULL0
    1
    FMP0:2 // at 0: FMP0
  }

//---  Register RF1R: receive FIFO 1 register
  RF1R @offset 0x10 $u32 {
    26
    RFOM1 // at 5: RFOM1
    FOVR1 // at 4: FOVR1
    FULL1 // at 3: FULL1
    1
    FMP1:2 // at 0: FMP1
  }

//---  Register IER: interrupt enable register
  IER @offset 0x14 $u32 {
    14
    SLKIE // at 17: SLKIE
    WKUIE // at 16: WKUIE
    ERRIE // at 15: ERRIE
    3
    LECIE // at 11: LECIE
    BOFIE // at 10: BOFIE
    EPVIE // at 9: EPVIE
    EWGIE // at 8: EWGIE
    1
    FOVIE1 // at 6: FOVIE1
    FFIE1 // at 5: FFIE1
    FMPIE1 // at 4: FMPIE1
    FOVIE0 // at 3: FOVIE0
    FFIE0 // at 2: FFIE0
    FMPIE0 // at 1: FMPIE0
    TMEIE // at 0: TMEIE
  }

//---  Register ESR: interrupt enable register
  ESR @offset 0x18 $u32 {
    REC:8 // at 24: REC
    TEC:8 // at 16: TEC
    9
    LEC:3 // at 4: LEC
    1
    BOFF // at 2: BOFF
    EPVF // at 1: EPVF
    EWGF // at 0: EWGF
  }

//---  Register BTR: bit timing register
  BTR @offset 0x1c $u32 {
    SILM // at 31: SILM
    LBKM // at 30: LBKM
    4
    SJW:2 // at 24: SJW
    1
    TS2:3 // at 20: TS2
    TS1:4 // at 16: TS1
    6
    BRP:10 // at 0: BRP
  }

//---  Register TI0R: TX mailbox identifier register
  TI0R @offset 0x180 $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    TXRQ // at 0: TXRQ
  }

//---  Register TDT0R: mailbox data length control and time stamp register
  TDT0R @offset 0x184 $u32 {
    TIME:16 // at 16: TIME
    7
    TGT // at 8: TGT
    4
    DLC:4 // at 0: DLC
  }

//---  Register TDL0R: mailbox data low register
  TDL0R @offset 0x188 $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register TDH0R: mailbox data high register
  TDH0R @offset 0x18c $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register TI1R: mailbox identifier register
  TI1R @offset 0x190 $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    TXRQ // at 0: TXRQ
  }

//---  Register TDT1R: mailbox data length control and time stamp register
  TDT1R @offset 0x194 $u32 {
    TIME:16 // at 16: TIME
    7
    TGT // at 8: TGT
    4
    DLC:4 // at 0: DLC
  }

//---  Register TDL1R: mailbox data low register
  TDL1R @offset 0x198 $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register TDH1R: mailbox data high register
  TDH1R @offset 0x19c $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register TI2R: mailbox identifier register
  TI2R @offset 0x1a0 $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    TXRQ // at 0: TXRQ
  }

//---  Register TDT2R: mailbox data length control and time stamp register
  TDT2R @offset 0x1a4 $u32 {
    TIME:16 // at 16: TIME
    7
    TGT // at 8: TGT
    4
    DLC:4 // at 0: DLC
  }

//---  Register TDL2R: mailbox data low register
  TDL2R @offset 0x1a8 $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register TDH2R: mailbox data high register
  TDH2R @offset 0x1ac $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register RI0R: receive FIFO mailbox identifier register
  RI0R @offset 0x1b0 @ro $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    1
  }

//---  Register RDT0R: mailbox data high register
  RDT0R @offset 0x1b4 @ro $u32 {
    TIME:16 // at 16: TIME
    FMI:8 // at 8: FMI
    4
    DLC:4 // at 0: DLC
  }

//---  Register RDL0R: mailbox data high register
  RDL0R @offset 0x1b8 @ro $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register RDH0R: receive FIFO mailbox data high register
  RDH0R @offset 0x1bc @ro $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register RI1R: mailbox data high register
  RI1R @offset 0x1c0 @ro $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    1
  }

//---  Register RDT1R: mailbox data high register
  RDT1R @offset 0x1c4 @ro $u32 {
    TIME:16 // at 16: TIME
    FMI:8 // at 8: FMI
    4
    DLC:4 // at 0: DLC
  }

//---  Register RDL1R: mailbox data high register
  RDL1R @offset 0x1c8 @ro $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register RDH1R: mailbox data high register
  RDH1R @offset 0x1cc @ro $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register FMR: filter master register
  FMR @offset 0x200 $u32 {
    18
    CAN2SB:6 // at 8: CAN2SB
    7
    FINIT // at 0: FINIT
  }

//---  Register FM1R: filter mode register
  FM1R @offset 0x204 $u32 {
    4
    FBM27 // at 27: Filter mode
    FBM26 // at 26: Filter mode
    FBM25 // at 25: Filter mode
    FBM24 // at 24: Filter mode
    FBM23 // at 23: Filter mode
    FBM22 // at 22: Filter mode
    FBM21 // at 21: Filter mode
    FBM20 // at 20: Filter mode
    FBM19 // at 19: Filter mode
    FBM18 // at 18: Filter mode
    FBM17 // at 17: Filter mode
    FBM16 // at 16: Filter mode
    FBM15 // at 15: Filter mode
    FBM14 // at 14: Filter mode
    FBM13 // at 13: Filter mode
    FBM12 // at 12: Filter mode
    FBM11 // at 11: Filter mode
    FBM10 // at 10: Filter mode
    FBM9 // at 9: Filter mode
    FBM8 // at 8: Filter mode
    FBM7 // at 7: Filter mode
    FBM6 // at 6: Filter mode
    FBM5 // at 5: Filter mode
    FBM4 // at 4: Filter mode
    FBM3 // at 3: Filter mode
    FBM2 // at 2: Filter mode
    FBM1 // at 1: Filter mode
    FBM0 // at 0: Filter mode
  }

//---  Register FS1R: filter scale register
  FS1R @offset 0x20c $u32 {
    4
    FSC27 // at 27: Filter scale configuration
    FSC26 // at 26: Filter scale configuration
    FSC25 // at 25: Filter scale configuration
    FSC24 // at 24: Filter scale configuration
    FSC23 // at 23: Filter scale configuration
    FSC22 // at 22: Filter scale configuration
    FSC21 // at 21: Filter scale configuration
    FSC20 // at 20: Filter scale configuration
    FSC19 // at 19: Filter scale configuration
    FSC18 // at 18: Filter scale configuration
    FSC17 // at 17: Filter scale configuration
    FSC16 // at 16: Filter scale configuration
    FSC15 // at 15: Filter scale configuration
    FSC14 // at 14: Filter scale configuration
    FSC13 // at 13: Filter scale configuration
    FSC12 // at 12: Filter scale configuration
    FSC11 // at 11: Filter scale configuration
    FSC10 // at 10: Filter scale configuration
    FSC9 // at 9: Filter scale configuration
    FSC8 // at 8: Filter scale configuration
    FSC7 // at 7: Filter scale configuration
    FSC6 // at 6: Filter scale configuration
    FSC5 // at 5: Filter scale configuration
    FSC4 // at 4: Filter scale configuration
    FSC3 // at 3: Filter scale configuration
    FSC2 // at 2: Filter scale configuration
    FSC1 // at 1: Filter scale configuration
    FSC0 // at 0: Filter scale configuration
  }

//---  Register FFA1R: filter FIFO assignment register
  FFA1R @offset 0x214 $u32 {
    4
    FFA27 // at 27: Filter FIFO assignment for filter 27
    FFA26 // at 26: Filter FIFO assignment for filter 26
    FFA25 // at 25: Filter FIFO assignment for filter 25
    FFA24 // at 24: Filter FIFO assignment for filter 24
    FFA23 // at 23: Filter FIFO assignment for filter 23
    FFA22 // at 22: Filter FIFO assignment for filter 22
    FFA21 // at 21: Filter FIFO assignment for filter 21
    FFA20 // at 20: Filter FIFO assignment for filter 20
    FFA19 // at 19: Filter FIFO assignment for filter 19
    FFA18 // at 18: Filter FIFO assignment for filter 18
    FFA17 // at 17: Filter FIFO assignment for filter 17
    FFA16 // at 16: Filter FIFO assignment for filter 16
    FFA15 // at 15: Filter FIFO assignment for filter 15
    FFA14 // at 14: Filter FIFO assignment for filter 14
    FFA13 // at 13: Filter FIFO assignment for filter 13
    FFA12 // at 12: Filter FIFO assignment for filter 12
    FFA11 // at 11: Filter FIFO assignment for filter 11
    FFA10 // at 10: Filter FIFO assignment for filter 10
    FFA9 // at 9: Filter FIFO assignment for filter 9
    FFA8 // at 8: Filter FIFO assignment for filter 8
    FFA7 // at 7: Filter FIFO assignment for filter 7
    FFA6 // at 6: Filter FIFO assignment for filter 6
    FFA5 // at 5: Filter FIFO assignment for filter 5
    FFA4 // at 4: Filter FIFO assignment for filter 4
    FFA3 // at 3: Filter FIFO assignment for filter 3
    FFA2 // at 2: Filter FIFO assignment for filter 2
    FFA1 // at 1: Filter FIFO assignment for filter 1
    FFA0 // at 0: Filter FIFO assignment for filter 0
  }

//---  Register FA1R: filter activation register
  FA1R @offset 0x21c $u32 {
    4
    FACT27 // at 27: Filter active
    FACT26 // at 26: Filter active
    FACT25 // at 25: Filter active
    FACT24 // at 24: Filter active
    FACT23 // at 23: Filter active
    FACT22 // at 22: Filter active
    FACT21 // at 21: Filter active
    FACT20 // at 20: Filter active
    FACT19 // at 19: Filter active
    FACT18 // at 18: Filter active
    FACT17 // at 17: Filter active
    FACT16 // at 16: Filter active
    FACT15 // at 15: Filter active
    FACT14 // at 14: Filter active
    FACT13 // at 13: Filter active
    FACT12 // at 12: Filter active
    FACT11 // at 11: Filter active
    FACT10 // at 10: Filter active
    FACT9 // at 9: Filter active
    FACT8 // at 8: Filter active
    FACT7 // at 7: Filter active
    FACT6 // at 6: Filter active
    FACT5 // at 5: Filter active
    FACT4 // at 4: Filter active
    FACT3 // at 3: Filter active
    FACT2 // at 2: Filter active
    FACT1 // at 1: Filter active
    FACT0 // at 0: Filter active
  }

//---  Register F0R1: Filter bank 0 register 1
  F0R1 @offset 0x240 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F0R2: Filter bank 0 register 2
  F0R2 @offset 0x244 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F1R1: Filter bank 1 register 1
  F1R1 @offset 0x248 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F1R2: Filter bank 1 register 2
  F1R2 @offset 0x24c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F2R1: Filter bank 2 register 1
  F2R1 @offset 0x250 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F2R2: Filter bank 2 register 2
  F2R2 @offset 0x254 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F3R1: Filter bank 3 register 1
  F3R1 @offset 0x258 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F3R2: Filter bank 3 register 2
  F3R2 @offset 0x25c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F4R1: Filter bank 4 register 1
  F4R1 @offset 0x260 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F4R2: Filter bank 4 register 2
  F4R2 @offset 0x264 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F5R1: Filter bank 5 register 1
  F5R1 @offset 0x268 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F5R2: Filter bank 5 register 2
  F5R2 @offset 0x26c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F6R1: Filter bank 6 register 1
  F6R1 @offset 0x270 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F6R2: Filter bank 6 register 2
  F6R2 @offset 0x274 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F7R1: Filter bank 7 register 1
  F7R1 @offset 0x278 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F7R2: Filter bank 7 register 2
  F7R2 @offset 0x27c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F8R1: Filter bank 8 register 1
  F8R1 @offset 0x280 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F8R2: Filter bank 8 register 2
  F8R2 @offset 0x284 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F9R1: Filter bank 9 register 1
  F9R1 @offset 0x288 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F9R2: Filter bank 9 register 2
  F9R2 @offset 0x28c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F10R1: Filter bank 10 register 1
  F10R1 @offset 0x290 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F10R2: Filter bank 10 register 2
  F10R2 @offset 0x294 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F11R1: Filter bank 11 register 1
  F11R1 @offset 0x298 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F11R2: Filter bank 11 register 2
  F11R2 @offset 0x29c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F12R1: Filter bank 4 register 1
  F12R1 @offset 0x2a0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F12R2: Filter bank 12 register 2
  F12R2 @offset 0x2a4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F13R1: Filter bank 13 register 1
  F13R1 @offset 0x2a8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F13R2: Filter bank 13 register 2
  F13R2 @offset 0x2ac $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F14R1: Filter bank 14 register 1
  F14R1 @offset 0x2b0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F14R2: Filter bank 14 register 2
  F14R2 @offset 0x2b4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F15R1: Filter bank 15 register 1
  F15R1 @offset 0x2b8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F15R2: Filter bank 15 register 2
  F15R2 @offset 0x2bc $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F16R1: Filter bank 16 register 1
  F16R1 @offset 0x2c0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F16R2: Filter bank 16 register 2
  F16R2 @offset 0x2c4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F17R1: Filter bank 17 register 1
  F17R1 @offset 0x2c8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F17R2: Filter bank 17 register 2
  F17R2 @offset 0x2cc $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F18R1: Filter bank 18 register 1
  F18R1 @offset 0x2d0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F18R2: Filter bank 18 register 2
  F18R2 @offset 0x2d4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F19R1: Filter bank 19 register 1
  F19R1 @offset 0x2d8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F19R2: Filter bank 19 register 2
  F19R2 @offset 0x2dc $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F20R1: Filter bank 20 register 1
  F20R1 @offset 0x2e0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F20R2: Filter bank 20 register 2
  F20R2 @offset 0x2e4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F21R1: Filter bank 21 register 1
  F21R1 @offset 0x2e8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F21R2: Filter bank 21 register 2
  F21R2 @offset 0x2ec $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F22R1: Filter bank 22 register 1
  F22R1 @offset 0x2f0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F22R2: Filter bank 22 register 2
  F22R2 @offset 0x2f4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F23R1: Filter bank 23 register 1
  F23R1 @offset 0x2f8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F23R2: Filter bank 23 register 2
  F23R2 @offset 0x2fc $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F24R1: Filter bank 24 register 1
  F24R1 @offset 0x300 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F24R2: Filter bank 24 register 2
  F24R2 @offset 0x304 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F25R1: Filter bank 25 register 1
  F25R1 @offset 0x308 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F25R2: Filter bank 25 register 2
  F25R2 @offset 0x30c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F26R1: Filter bank 26 register 1
  F26R1 @offset 0x310 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F26R2: Filter bank 26 register 2
  F26R2 @offset 0x314 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F27R1: Filter bank 27 register 1
  F27R1 @offset 0x318 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F27R2: Filter bank 27 register 2
  F27R2 @offset 0x31c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

}

//------------------------------------------------------------------------------
// Peripheral CAN3
//------------------------------------------------------------------------------

registers ©CAN3 @at 0x40003400 {
//---  Register MCR: master control register
  MCR @offset 0x0 $u32 {
    15
    DBF // at 16: DBF
    RESET // at 15: RESET
    7
    TTCM // at 7: TTCM
    ABOM // at 6: ABOM
    AWUM // at 5: AWUM
    NART // at 4: NART
    RFLM // at 3: RFLM
    TXFP // at 2: TXFP
    SLEEP // at 1: SLEEP
    INRQ // at 0: INRQ
  }

//---  Register MSR: master status register
  MSR @offset 0x4 $u32 {
    20
    RX // at 11: RX
    SAMP // at 10: SAMP
    RXM // at 9: RXM
    TXM // at 8: TXM
    3
    SLAKI // at 4: SLAKI
    WKUI // at 3: WKUI
    ERRI // at 2: ERRI
    SLAK // at 1: SLAK
    INAK // at 0: INAK
  }

//---  Register TSR: transmit status register
  TSR @offset 0x8 $u32 {
    LOW2 // at 31: Lowest priority flag for mailbox 2
    LOW1 // at 30: Lowest priority flag for mailbox 1
    LOW0 // at 29: Lowest priority flag for mailbox 0
    TME2 // at 28: Lowest priority flag for mailbox 2
    TME1 // at 27: Lowest priority flag for mailbox 1
    TME0 // at 26: Lowest priority flag for mailbox 0
    CODE:2 // at 24: CODE
    ABRQ2 // at 23: ABRQ2
    3
    TERR2 // at 19: TERR2
    ALST2 // at 18: ALST2
    TXOK2 // at 17: TXOK2
    RQCP2 // at 16: RQCP2
    ABRQ1 // at 15: ABRQ1
    3
    TERR1 // at 11: TERR1
    ALST1 // at 10: ALST1
    TXOK1 // at 9: TXOK1
    RQCP1 // at 8: RQCP1
    ABRQ0 // at 7: ABRQ0
    3
    TERR0 // at 3: TERR0
    ALST0 // at 2: ALST0
    TXOK0 // at 1: TXOK0
    RQCP0 // at 0: RQCP0
  }

//---  Register RF0R: receive FIFO 0 register
  RF0R @offset 0xc $u32 {
    26
    RFOM0 // at 5: RFOM0
    FOVR0 // at 4: FOVR0
    FULL0 // at 3: FULL0
    1
    FMP0:2 // at 0: FMP0
  }

//---  Register RF1R: receive FIFO 1 register
  RF1R @offset 0x10 $u32 {
    26
    RFOM1 // at 5: RFOM1
    FOVR1 // at 4: FOVR1
    FULL1 // at 3: FULL1
    1
    FMP1:2 // at 0: FMP1
  }

//---  Register IER: interrupt enable register
  IER @offset 0x14 $u32 {
    14
    SLKIE // at 17: SLKIE
    WKUIE // at 16: WKUIE
    ERRIE // at 15: ERRIE
    3
    LECIE // at 11: LECIE
    BOFIE // at 10: BOFIE
    EPVIE // at 9: EPVIE
    EWGIE // at 8: EWGIE
    1
    FOVIE1 // at 6: FOVIE1
    FFIE1 // at 5: FFIE1
    FMPIE1 // at 4: FMPIE1
    FOVIE0 // at 3: FOVIE0
    FFIE0 // at 2: FFIE0
    FMPIE0 // at 1: FMPIE0
    TMEIE // at 0: TMEIE
  }

//---  Register ESR: interrupt enable register
  ESR @offset 0x18 $u32 {
    REC:8 // at 24: REC
    TEC:8 // at 16: TEC
    9
    LEC:3 // at 4: LEC
    1
    BOFF // at 2: BOFF
    EPVF // at 1: EPVF
    EWGF // at 0: EWGF
  }

//---  Register BTR: bit timing register
  BTR @offset 0x1c $u32 {
    SILM // at 31: SILM
    LBKM // at 30: LBKM
    4
    SJW:2 // at 24: SJW
    1
    TS2:3 // at 20: TS2
    TS1:4 // at 16: TS1
    6
    BRP:10 // at 0: BRP
  }

//---  Register TI0R: TX mailbox identifier register
  TI0R @offset 0x180 $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    TXRQ // at 0: TXRQ
  }

//---  Register TDT0R: mailbox data length control and time stamp register
  TDT0R @offset 0x184 $u32 {
    TIME:16 // at 16: TIME
    7
    TGT // at 8: TGT
    4
    DLC:4 // at 0: DLC
  }

//---  Register TDL0R: mailbox data low register
  TDL0R @offset 0x188 $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register TDH0R: mailbox data high register
  TDH0R @offset 0x18c $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register TI1R: mailbox identifier register
  TI1R @offset 0x190 $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    TXRQ // at 0: TXRQ
  }

//---  Register TDT1R: mailbox data length control and time stamp register
  TDT1R @offset 0x194 $u32 {
    TIME:16 // at 16: TIME
    7
    TGT // at 8: TGT
    4
    DLC:4 // at 0: DLC
  }

//---  Register TDL1R: mailbox data low register
  TDL1R @offset 0x198 $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register TDH1R: mailbox data high register
  TDH1R @offset 0x19c $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register TI2R: mailbox identifier register
  TI2R @offset 0x1a0 $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    TXRQ // at 0: TXRQ
  }

//---  Register TDT2R: mailbox data length control and time stamp register
  TDT2R @offset 0x1a4 $u32 {
    TIME:16 // at 16: TIME
    7
    TGT // at 8: TGT
    4
    DLC:4 // at 0: DLC
  }

//---  Register TDL2R: mailbox data low register
  TDL2R @offset 0x1a8 $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register TDH2R: mailbox data high register
  TDH2R @offset 0x1ac $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register RI0R: receive FIFO mailbox identifier register
  RI0R @offset 0x1b0 @ro $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    1
  }

//---  Register RDT0R: mailbox data high register
  RDT0R @offset 0x1b4 @ro $u32 {
    TIME:16 // at 16: TIME
    FMI:8 // at 8: FMI
    4
    DLC:4 // at 0: DLC
  }

//---  Register RDL0R: mailbox data high register
  RDL0R @offset 0x1b8 @ro $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register RDH0R: receive FIFO mailbox data high register
  RDH0R @offset 0x1bc @ro $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register RI1R: mailbox data high register
  RI1R @offset 0x1c0 @ro $u32 {
    STID:11 // at 21: STID
    EXID:18 // at 3: EXID
    IDE // at 2: IDE
    RTR // at 1: RTR
    1
  }

//---  Register RDT1R: mailbox data high register
  RDT1R @offset 0x1c4 @ro $u32 {
    TIME:16 // at 16: TIME
    FMI:8 // at 8: FMI
    4
    DLC:4 // at 0: DLC
  }

//---  Register RDL1R: mailbox data high register
  RDL1R @offset 0x1c8 @ro $u32 {
    DATA3:8 // at 24: DATA3
    DATA2:8 // at 16: DATA2
    DATA1:8 // at 8: DATA1
    DATA0:8 // at 0: DATA0
  }

//---  Register RDH1R: mailbox data high register
  RDH1R @offset 0x1cc @ro $u32 {
    DATA7:8 // at 24: DATA7
    DATA6:8 // at 16: DATA6
    DATA5:8 // at 8: DATA5
    DATA4:8 // at 0: DATA4
  }

//---  Register FMR: filter master register
  FMR @offset 0x200 $u32 {
    18
    CAN2SB:6 // at 8: CAN2SB
    7
    FINIT // at 0: FINIT
  }

//---  Register FM1R: filter mode register
  FM1R @offset 0x204 $u32 {
    4
    FBM27 // at 27: Filter mode
    FBM26 // at 26: Filter mode
    FBM25 // at 25: Filter mode
    FBM24 // at 24: Filter mode
    FBM23 // at 23: Filter mode
    FBM22 // at 22: Filter mode
    FBM21 // at 21: Filter mode
    FBM20 // at 20: Filter mode
    FBM19 // at 19: Filter mode
    FBM18 // at 18: Filter mode
    FBM17 // at 17: Filter mode
    FBM16 // at 16: Filter mode
    FBM15 // at 15: Filter mode
    FBM14 // at 14: Filter mode
    FBM13 // at 13: Filter mode
    FBM12 // at 12: Filter mode
    FBM11 // at 11: Filter mode
    FBM10 // at 10: Filter mode
    FBM9 // at 9: Filter mode
    FBM8 // at 8: Filter mode
    FBM7 // at 7: Filter mode
    FBM6 // at 6: Filter mode
    FBM5 // at 5: Filter mode
    FBM4 // at 4: Filter mode
    FBM3 // at 3: Filter mode
    FBM2 // at 2: Filter mode
    FBM1 // at 1: Filter mode
    FBM0 // at 0: Filter mode
  }

//---  Register FS1R: filter scale register
  FS1R @offset 0x20c $u32 {
    4
    FSC27 // at 27: Filter scale configuration
    FSC26 // at 26: Filter scale configuration
    FSC25 // at 25: Filter scale configuration
    FSC24 // at 24: Filter scale configuration
    FSC23 // at 23: Filter scale configuration
    FSC22 // at 22: Filter scale configuration
    FSC21 // at 21: Filter scale configuration
    FSC20 // at 20: Filter scale configuration
    FSC19 // at 19: Filter scale configuration
    FSC18 // at 18: Filter scale configuration
    FSC17 // at 17: Filter scale configuration
    FSC16 // at 16: Filter scale configuration
    FSC15 // at 15: Filter scale configuration
    FSC14 // at 14: Filter scale configuration
    FSC13 // at 13: Filter scale configuration
    FSC12 // at 12: Filter scale configuration
    FSC11 // at 11: Filter scale configuration
    FSC10 // at 10: Filter scale configuration
    FSC9 // at 9: Filter scale configuration
    FSC8 // at 8: Filter scale configuration
    FSC7 // at 7: Filter scale configuration
    FSC6 // at 6: Filter scale configuration
    FSC5 // at 5: Filter scale configuration
    FSC4 // at 4: Filter scale configuration
    FSC3 // at 3: Filter scale configuration
    FSC2 // at 2: Filter scale configuration
    FSC1 // at 1: Filter scale configuration
    FSC0 // at 0: Filter scale configuration
  }

//---  Register FFA1R: filter FIFO assignment register
  FFA1R @offset 0x214 $u32 {
    4
    FFA27 // at 27: Filter FIFO assignment for filter 27
    FFA26 // at 26: Filter FIFO assignment for filter 26
    FFA25 // at 25: Filter FIFO assignment for filter 25
    FFA24 // at 24: Filter FIFO assignment for filter 24
    FFA23 // at 23: Filter FIFO assignment for filter 23
    FFA22 // at 22: Filter FIFO assignment for filter 22
    FFA21 // at 21: Filter FIFO assignment for filter 21
    FFA20 // at 20: Filter FIFO assignment for filter 20
    FFA19 // at 19: Filter FIFO assignment for filter 19
    FFA18 // at 18: Filter FIFO assignment for filter 18
    FFA17 // at 17: Filter FIFO assignment for filter 17
    FFA16 // at 16: Filter FIFO assignment for filter 16
    FFA15 // at 15: Filter FIFO assignment for filter 15
    FFA14 // at 14: Filter FIFO assignment for filter 14
    FFA13 // at 13: Filter FIFO assignment for filter 13
    FFA12 // at 12: Filter FIFO assignment for filter 12
    FFA11 // at 11: Filter FIFO assignment for filter 11
    FFA10 // at 10: Filter FIFO assignment for filter 10
    FFA9 // at 9: Filter FIFO assignment for filter 9
    FFA8 // at 8: Filter FIFO assignment for filter 8
    FFA7 // at 7: Filter FIFO assignment for filter 7
    FFA6 // at 6: Filter FIFO assignment for filter 6
    FFA5 // at 5: Filter FIFO assignment for filter 5
    FFA4 // at 4: Filter FIFO assignment for filter 4
    FFA3 // at 3: Filter FIFO assignment for filter 3
    FFA2 // at 2: Filter FIFO assignment for filter 2
    FFA1 // at 1: Filter FIFO assignment for filter 1
    FFA0 // at 0: Filter FIFO assignment for filter 0
  }

//---  Register FA1R: filter activation register
  FA1R @offset 0x21c $u32 {
    4
    FACT27 // at 27: Filter active
    FACT26 // at 26: Filter active
    FACT25 // at 25: Filter active
    FACT24 // at 24: Filter active
    FACT23 // at 23: Filter active
    FACT22 // at 22: Filter active
    FACT21 // at 21: Filter active
    FACT20 // at 20: Filter active
    FACT19 // at 19: Filter active
    FACT18 // at 18: Filter active
    FACT17 // at 17: Filter active
    FACT16 // at 16: Filter active
    FACT15 // at 15: Filter active
    FACT14 // at 14: Filter active
    FACT13 // at 13: Filter active
    FACT12 // at 12: Filter active
    FACT11 // at 11: Filter active
    FACT10 // at 10: Filter active
    FACT9 // at 9: Filter active
    FACT8 // at 8: Filter active
    FACT7 // at 7: Filter active
    FACT6 // at 6: Filter active
    FACT5 // at 5: Filter active
    FACT4 // at 4: Filter active
    FACT3 // at 3: Filter active
    FACT2 // at 2: Filter active
    FACT1 // at 1: Filter active
    FACT0 // at 0: Filter active
  }

//---  Register F0R1: Filter bank 0 register 1
  F0R1 @offset 0x240 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F0R2: Filter bank 0 register 2
  F0R2 @offset 0x244 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F1R1: Filter bank 1 register 1
  F1R1 @offset 0x248 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F1R2: Filter bank 1 register 2
  F1R2 @offset 0x24c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F2R1: Filter bank 2 register 1
  F2R1 @offset 0x250 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F2R2: Filter bank 2 register 2
  F2R2 @offset 0x254 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F3R1: Filter bank 3 register 1
  F3R1 @offset 0x258 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F3R2: Filter bank 3 register 2
  F3R2 @offset 0x25c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F4R1: Filter bank 4 register 1
  F4R1 @offset 0x260 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F4R2: Filter bank 4 register 2
  F4R2 @offset 0x264 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F5R1: Filter bank 5 register 1
  F5R1 @offset 0x268 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F5R2: Filter bank 5 register 2
  F5R2 @offset 0x26c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F6R1: Filter bank 6 register 1
  F6R1 @offset 0x270 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F6R2: Filter bank 6 register 2
  F6R2 @offset 0x274 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F7R1: Filter bank 7 register 1
  F7R1 @offset 0x278 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F7R2: Filter bank 7 register 2
  F7R2 @offset 0x27c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F8R1: Filter bank 8 register 1
  F8R1 @offset 0x280 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F8R2: Filter bank 8 register 2
  F8R2 @offset 0x284 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F9R1: Filter bank 9 register 1
  F9R1 @offset 0x288 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F9R2: Filter bank 9 register 2
  F9R2 @offset 0x28c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F10R1: Filter bank 10 register 1
  F10R1 @offset 0x290 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F10R2: Filter bank 10 register 2
  F10R2 @offset 0x294 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F11R1: Filter bank 11 register 1
  F11R1 @offset 0x298 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F11R2: Filter bank 11 register 2
  F11R2 @offset 0x29c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F12R1: Filter bank 4 register 1
  F12R1 @offset 0x2a0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F12R2: Filter bank 12 register 2
  F12R2 @offset 0x2a4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F13R1: Filter bank 13 register 1
  F13R1 @offset 0x2a8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F13R2: Filter bank 13 register 2
  F13R2 @offset 0x2ac $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F14R1: Filter bank 14 register 1
  F14R1 @offset 0x2b0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F14R2: Filter bank 14 register 2
  F14R2 @offset 0x2b4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F15R1: Filter bank 15 register 1
  F15R1 @offset 0x2b8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F15R2: Filter bank 15 register 2
  F15R2 @offset 0x2bc $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F16R1: Filter bank 16 register 1
  F16R1 @offset 0x2c0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F16R2: Filter bank 16 register 2
  F16R2 @offset 0x2c4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F17R1: Filter bank 17 register 1
  F17R1 @offset 0x2c8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F17R2: Filter bank 17 register 2
  F17R2 @offset 0x2cc $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F18R1: Filter bank 18 register 1
  F18R1 @offset 0x2d0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F18R2: Filter bank 18 register 2
  F18R2 @offset 0x2d4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F19R1: Filter bank 19 register 1
  F19R1 @offset 0x2d8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F19R2: Filter bank 19 register 2
  F19R2 @offset 0x2dc $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F20R1: Filter bank 20 register 1
  F20R1 @offset 0x2e0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F20R2: Filter bank 20 register 2
  F20R2 @offset 0x2e4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F21R1: Filter bank 21 register 1
  F21R1 @offset 0x2e8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F21R2: Filter bank 21 register 2
  F21R2 @offset 0x2ec $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F22R1: Filter bank 22 register 1
  F22R1 @offset 0x2f0 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F22R2: Filter bank 22 register 2
  F22R2 @offset 0x2f4 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F23R1: Filter bank 23 register 1
  F23R1 @offset 0x2f8 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F23R2: Filter bank 23 register 2
  F23R2 @offset 0x2fc $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F24R1: Filter bank 24 register 1
  F24R1 @offset 0x300 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F24R2: Filter bank 24 register 2
  F24R2 @offset 0x304 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F25R1: Filter bank 25 register 1
  F25R1 @offset 0x308 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F25R2: Filter bank 25 register 2
  F25R2 @offset 0x30c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F26R1: Filter bank 26 register 1
  F26R1 @offset 0x310 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F26R2: Filter bank 26 register 2
  F26R2 @offset 0x314 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F27R1: Filter bank 27 register 1
  F27R1 @offset 0x318 $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

//---  Register F27R2: Filter bank 27 register 2
  F27R2 @offset 0x31c $u32 {
    FB31 // at 31: Filter bits
    FB30 // at 30: Filter bits
    FB29 // at 29: Filter bits
    FB28 // at 28: Filter bits
    FB27 // at 27: Filter bits
    FB26 // at 26: Filter bits
    FB25 // at 25: Filter bits
    FB24 // at 24: Filter bits
    FB23 // at 23: Filter bits
    FB22 // at 22: Filter bits
    FB21 // at 21: Filter bits
    FB20 // at 20: Filter bits
    FB19 // at 19: Filter bits
    FB18 // at 18: Filter bits
    FB17 // at 17: Filter bits
    FB16 // at 16: Filter bits
    FB15 // at 15: Filter bits
    FB14 // at 14: Filter bits
    FB13 // at 13: Filter bits
    FB12 // at 12: Filter bits
    FB11 // at 11: Filter bits
    FB10 // at 10: Filter bits
    FB9 // at 9: Filter bits
    FB8 // at 8: Filter bits
    FB7 // at 7: Filter bits
    FB6 // at 6: Filter bits
    FB5 // at 5: Filter bits
    FB4 // at 4: Filter bits
    FB3 // at 3: Filter bits
    FB2 // at 2: Filter bits
    FB1 // at 1: Filter bits
    FB0 // at 0: Filter bits
  }

}

//------------------------------------------------------------------------------
// Peripheral CEC: HDMI-CEC controller
//------------------------------------------------------------------------------

registers ©CEC @at 0x40006c00 {
//---  Register CR: control register
  CR @offset 0x0 $u32 {
    29
    TXEOM // at 2: Tx End Of Message
    TXSOM // at 1: Tx start of message
    CECEN // at 0: CEC Enable
  }

//---  Register CFGR: configuration register
  CFGR @offset 0x4 $u32 {
    LSTN // at 31: Listen mode
    OAR:15 // at 16: Own addresses configuration
    7
    SFTOP // at 8: SFT Option Bit
    BRDNOGEN // at 7: Avoid Error-Bit Generation in Broadcast
    LBPEGEN // at 6: Generate Error-Bit on Long Bit Period Error
    BREGEN // at 5: Generate error-bit on bit rising error
    BRESTP // at 4: Rx-stop on bit rising error
    RXTOL // at 3: Rx-Tolerance
    SFT:3 // at 0: Signal Free Time
  }

//---  Register TXDR: Tx data register
  TXDR @offset 0x8 $u32 {
    24
    TXD:8 // at 0: Tx Data register
  }

//---  Register RXDR: Rx Data Register
  RXDR @offset 0xc @ro $u32 {
    24
    RXDR:8 // at 0: CEC Rx Data Register
  }

//---  Register ISR: Interrupt and Status Register
  ISR @offset 0x10 $u32 {
    19
    TXACKE // at 12: Tx-Missing acknowledge error
    TXERR // at 11: Tx-Error
    TXUDR // at 10: Tx-Buffer Underrun
    TXEND // at 9: End of Transmission
    TXBR // at 8: Tx-Byte Request
    ARBLST // at 7: Arbitration Lost
    RXACKE // at 6: Rx-Missing Acknowledge
    LBPE // at 5: Rx-Long Bit Period Error
    SBPE // at 4: Rx-Short Bit period error
    BRE // at 3: Rx-Bit rising error
    RXOVR // at 2: Rx-Overrun
    RXEND // at 1: End Of Reception
    RXBR // at 0: Rx-Byte Received
  }

//---  Register IER: interrupt enable register
  IER @offset 0x14 $u32 {
    19
    TXACKIE // at 12: Tx-Missing Acknowledge Error Interrupt Enable
    TXERRIE // at 11: Tx-Error Interrupt Enable
    TXUDRIE // at 10: Tx-Underrun interrupt enable
    TXENDIE // at 9: Tx-End of message interrupt enable
    TXBRIE // at 8: Tx-Byte Request Interrupt Enable
    ARBLSTIE // at 7: Arbitration Lost Interrupt Enable
    RXACKIE // at 6: Rx-Missing Acknowledge Error Interrupt Enable
    LBPEIE // at 5: Long Bit Period Error Interrupt Enable
    SBPEIE // at 4: Short Bit Period Error Interrupt Enable
    BREIE // at 3: Bit Rising Error Interrupt Enable
    RXOVRIE // at 2: Rx-Buffer Overrun Interrupt Enable
    RXENDIE // at 1: End Of Reception Interrupt Enable
    RXBRIE // at 0: Rx-Byte Received Interrupt Enable
  }

}

//------------------------------------------------------------------------------
// Peripheral CRC: Cryptographic processor
//------------------------------------------------------------------------------

registers ©CRC @at 0x40023000 {
//---  Register DR: Data register
  DR @offset 0x0 $u32 {
    DR:32 // at 0: Data Register
  }

//---  Register IDR: Independent Data register
  IDR @offset 0x4 $u32 {
    24
    IDR:8 // at 0: Independent Data register
  }

//---  Register CR: Control register
  CR @offset 0x8 $u32 {
    31
    CR // at 0: Control regidter
  }

//---  Register INIT: Initial CRC value
  INIT @offset 0xc $u32 {
    CRC_INIT:32 // at 0: Programmable initial CRC value
  }

//---  Register POL: CRC polynomial
  POL @offset 0x10 $u32 {
    POL:32 // at 0: Programmable polynomial
  }

}

//------------------------------------------------------------------------------
// Peripheral CRYP: Cryptographic processor
//------------------------------------------------------------------------------

registers ©CRYP @at 0x50060000 {
//---  Register CR: control register
  CR @offset 0x0 $u32 {
    12
    ALGOMODE3 // at 19: ALGOMODE
    1
    GCM_CCMPH:2 // at 16: GCM_CCMPH
    CRYPEN // at 15: Cryptographic processor enable
    FFLUSH // at 14: FIFO flush
    4
    KEYSIZE:2 // at 8: Key size selection (AES mode only)
    DATATYPE:2 // at 6: Data type selection
    ALGOMODE0:3 // at 3: Algorithm mode
    ALGODIR // at 2: Algorithm direction
    2
  }

//---  Register SR: status register
  SR @offset 0x4 @ro $u32 {
    27
    BUSY // at 4: Busy bit
    OFFU // at 3: Output FIFO full
    OFNE // at 2: Output FIFO not empty
    IFNF // at 1: Input FIFO not full
    IFEM // at 0: Input FIFO empty
  }

//---  Register DIN: data input register
  DIN @offset 0x8 $u32 {
    DATAIN:32 // at 0: Data input
  }

//---  Register DOUT: data output register
  DOUT @offset 0xc @ro $u32 {
    DATAOUT:32 // at 0: Data output
  }

//---  Register DMACR: DMA control register
  DMACR @offset 0x10 $u32 {
    30
    DOEN // at 1: DMA output enable
    DIEN // at 0: DMA input enable
  }

//---  Register IMSCR: interrupt mask set/clear register
  IMSCR @offset 0x14 $u32 {
    30
    OUTIM // at 1: Output FIFO service interrupt mask
    INIM // at 0: Input FIFO service interrupt mask
  }

//---  Register RISR: raw interrupt status register
  RISR @offset 0x18 @ro $u32 {
    30
    OUTRIS // at 1: Output FIFO service raw interrupt status
    INRIS // at 0: Input FIFO service raw interrupt status
  }

//---  Register MISR: masked interrupt status register
  MISR @offset 0x1c @ro $u32 {
    30
    OUTMIS // at 1: Output FIFO service masked interrupt status
    INMIS // at 0: Input FIFO service masked interrupt status
  }

//---  Register K0LR: key registers
  K0LR @offset 0x20 $u32 {
    b255 // at 31: b255
    b254 // at 30: b254
    b253 // at 29: b253
    b252 // at 28: b252
    b251 // at 27: b251
    b250 // at 26: b250
    b249 // at 25: b249
    b248 // at 24: b248
    b247 // at 23: b247
    b246 // at 22: b246
    b245 // at 21: b245
    b244 // at 20: b244
    b243 // at 19: b243
    b242 // at 18: b242
    b241 // at 17: b241
    b240 // at 16: b240
    b239 // at 15: b239
    b238 // at 14: b238
    b237 // at 13: b237
    b236 // at 12: b236
    b235 // at 11: b235
    b234 // at 10: b234
    b233 // at 9: b233
    b232 // at 8: b232
    b231 // at 7: b231
    b230 // at 6: b230
    b229 // at 5: b229
    b228 // at 4: b228
    b227 // at 3: b227
    b226 // at 2: b226
    b225 // at 1: b225
    b224 // at 0: b224
  }

//---  Register K0RR: key registers
  K0RR @offset 0x24 $u32 {
    b223 // at 31: b223
    b222 // at 30: b222
    b221 // at 29: b221
    b220 // at 28: b220
    b219 // at 27: b219
    b218 // at 26: b218
    b217 // at 25: b217
    b216 // at 24: b216
    b215 // at 23: b215
    b214 // at 22: b214
    b213 // at 21: b213
    b212 // at 20: b212
    b211 // at 19: b211
    b210 // at 18: b210
    b209 // at 17: b209
    b208 // at 16: b208
    b207 // at 15: b207
    b206 // at 14: b206
    b205 // at 13: b205
    b204 // at 12: b204
    b203 // at 11: b203
    b202 // at 10: b202
    b201 // at 9: b201
    b200 // at 8: b200
    b199 // at 7: b199
    b198 // at 6: b198
    b197 // at 5: b197
    b196 // at 4: b196
    b195 // at 3: b195
    b194 // at 2: b194
    b193 // at 1: b193
    b192 // at 0: b192
  }

//---  Register K1LR: key registers
  K1LR @offset 0x28 $u32 {
    b191 // at 31: b191
    b190 // at 30: b190
    b189 // at 29: b189
    b188 // at 28: b188
    b187 // at 27: b187
    b186 // at 26: b186
    b185 // at 25: b185
    b184 // at 24: b184
    b183 // at 23: b183
    b182 // at 22: b182
    b181 // at 21: b181
    b180 // at 20: b180
    b179 // at 19: b179
    b178 // at 18: b178
    b177 // at 17: b177
    b176 // at 16: b176
    b175 // at 15: b175
    b174 // at 14: b174
    b173 // at 13: b173
    b172 // at 12: b172
    b171 // at 11: b171
    b170 // at 10: b170
    b169 // at 9: b169
    b168 // at 8: b168
    b167 // at 7: b167
    b166 // at 6: b166
    b165 // at 5: b165
    b164 // at 4: b164
    b163 // at 3: b163
    b162 // at 2: b162
    b161 // at 1: b161
    b160 // at 0: b160
  }

//---  Register K1RR: key registers
  K1RR @offset 0x2c $u32 {
    b159 // at 31: b159
    b158 // at 30: b158
    b157 // at 29: b157
    b156 // at 28: b156
    b155 // at 27: b155
    b154 // at 26: b154
    b153 // at 25: b153
    b152 // at 24: b152
    b151 // at 23: b151
    b150 // at 22: b150
    b149 // at 21: b149
    b148 // at 20: b148
    b147 // at 19: b147
    b146 // at 18: b146
    b145 // at 17: b145
    b144 // at 16: b144
    b143 // at 15: b143
    b142 // at 14: b142
    b141 // at 13: b141
    b140 // at 12: b140
    b139 // at 11: b139
    b138 // at 10: b138
    b137 // at 9: b137
    b136 // at 8: b136
    b135 // at 7: b135
    b134 // at 6: b134
    b133 // at 5: b133
    b132 // at 4: b132
    b131 // at 3: b131
    b130 // at 2: b130
    b129 // at 1: b129
    b128 // at 0: b128
  }

//---  Register K2LR: key registers
  K2LR @offset 0x30 $u32 {
    b127 // at 31: b127
    b126 // at 30: b126
    b125 // at 29: b125
    b124 // at 28: b124
    b123 // at 27: b123
    b122 // at 26: b122
    b121 // at 25: b121
    b120 // at 24: b120
    b119 // at 23: b119
    b118 // at 22: b118
    b117 // at 21: b117
    b116 // at 20: b116
    b115 // at 19: b115
    b114 // at 18: b114
    b113 // at 17: b113
    b112 // at 16: b112
    b111 // at 15: b111
    b110 // at 14: b110
    b109 // at 13: b109
    b108 // at 12: b108
    b107 // at 11: b107
    b106 // at 10: b106
    b105 // at 9: b105
    b104 // at 8: b104
    b103 // at 7: b103
    b102 // at 6: b102
    b101 // at 5: b101
    b100 // at 4: b100
    b99 // at 3: b99
    b98 // at 2: b98
    b97 // at 1: b97
    b96 // at 0: b96
  }

//---  Register K2RR: key registers
  K2RR @offset 0x34 $u32 {
    b95 // at 31: b95
    b94 // at 30: b94
    b93 // at 29: b93
    b92 // at 28: b92
    b91 // at 27: b91
    b90 // at 26: b90
    b89 // at 25: b89
    b88 // at 24: b88
    b87 // at 23: b87
    b86 // at 22: b86
    b85 // at 21: b85
    b84 // at 20: b84
    b83 // at 19: b83
    b82 // at 18: b82
    b81 // at 17: b81
    b80 // at 16: b80
    b79 // at 15: b79
    b78 // at 14: b78
    b77 // at 13: b77
    b76 // at 12: b76
    b75 // at 11: b75
    b74 // at 10: b74
    b73 // at 9: b73
    b72 // at 8: b72
    b71 // at 7: b71
    b70 // at 6: b70
    b69 // at 5: b69
    b68 // at 4: b68
    b67 // at 3: b67
    b66 // at 2: b66
    b65 // at 1: b65
    b64 // at 0: b64
  }

//---  Register K3LR: key registers
  K3LR @offset 0x38 $u32 {
    b63 // at 31: b63
    b62 // at 30: b62
    b61 // at 29: b61
    b60 // at 28: b60
    b59 // at 27: b59
    b58 // at 26: b58
    b57 // at 25: b57
    b56 // at 24: b56
    b55 // at 23: b55
    b54 // at 22: b54
    b53 // at 21: b53
    b52 // at 20: b52
    b51 // at 19: b51
    b50 // at 18: b50
    b49 // at 17: b49
    b48 // at 16: b48
    b47 // at 15: b47
    b46 // at 14: b46
    b45 // at 13: b45
    b44 // at 12: b44
    b43 // at 11: b43
    b42 // at 10: b42
    b41 // at 9: b41
    b40 // at 8: b40
    b39 // at 7: b39
    b38 // at 6: b38
    b37 // at 5: b37
    b36 // at 4: b36
    b35 // at 3: b35
    b34 // at 2: b34
    b33 // at 1: b33
    b32 // at 0: b32
  }

//---  Register K3RR: key registers
  K3RR @offset 0x3c $u32 {
    b31 // at 31: b31
    b30 // at 30: b30
    b29 // at 29: b29
    b28 // at 28: b28
    b27 // at 27: b27
    b26 // at 26: b26
    b25 // at 25: b25
    b24 // at 24: b24
    b23 // at 23: b23
    b22 // at 22: b22
    b21 // at 21: b21
    b20 // at 20: b20
    b19 // at 19: b19
    b18 // at 18: b18
    b17 // at 17: b17
    b16 // at 16: b16
    b15 // at 15: b15
    b14 // at 14: b14
    b13 // at 13: b13
    b12 // at 12: b12
    b11 // at 11: b11
    b10 // at 10: b10
    b9 // at 9: b9
    b8 // at 8: b8
    b7 // at 7: b7
    b6 // at 6: b6
    b5 // at 5: b5
    b4 // at 4: b4
    b3 // at 3: b3
    b2 // at 2: b2
    b1 // at 1: b1
    b0 // at 0: b0
  }

//---  Register IV0LR: initialization vector registers
  IV0LR @offset 0x40 $u32 {
    IV0 // at 31: IV0
    IV1 // at 30: IV1
    IV2 // at 29: IV2
    IV3 // at 28: IV3
    IV4 // at 27: IV4
    IV5 // at 26: IV5
    IV6 // at 25: IV6
    IV7 // at 24: IV7
    IV8 // at 23: IV8
    IV9 // at 22: IV9
    IV10 // at 21: IV10
    IV11 // at 20: IV11
    IV12 // at 19: IV12
    IV13 // at 18: IV13
    IV14 // at 17: IV14
    IV15 // at 16: IV15
    IV16 // at 15: IV16
    IV17 // at 14: IV17
    IV18 // at 13: IV18
    IV19 // at 12: IV19
    IV20 // at 11: IV20
    IV21 // at 10: IV21
    IV22 // at 9: IV22
    IV23 // at 8: IV23
    IV24 // at 7: IV24
    IV25 // at 6: IV25
    IV26 // at 5: IV26
    IV27 // at 4: IV27
    IV28 // at 3: IV28
    IV29 // at 2: IV29
    IV30 // at 1: IV30
    IV31 // at 0: IV31
  }

//---  Register IV0RR: initialization vector registers
  IV0RR @offset 0x44 $u32 {
    IV32 // at 31: IV32
    IV33 // at 30: IV33
    IV34 // at 29: IV34
    IV35 // at 28: IV35
    IV36 // at 27: IV36
    IV37 // at 26: IV37
    IV38 // at 25: IV38
    IV39 // at 24: IV39
    IV40 // at 23: IV40
    IV41 // at 22: IV41
    IV42 // at 21: IV42
    IV43 // at 20: IV43
    IV44 // at 19: IV44
    IV45 // at 18: IV45
    IV46 // at 17: IV46
    IV47 // at 16: IV47
    IV48 // at 15: IV48
    IV49 // at 14: IV49
    IV50 // at 13: IV50
    IV51 // at 12: IV51
    IV52 // at 11: IV52
    IV53 // at 10: IV53
    IV54 // at 9: IV54
    IV55 // at 8: IV55
    IV56 // at 7: IV56
    IV57 // at 6: IV57
    IV58 // at 5: IV58
    IV59 // at 4: IV59
    IV60 // at 3: IV60
    IV61 // at 2: IV61
    IV62 // at 1: IV62
    IV63 // at 0: IV63
  }

//---  Register IV1LR: initialization vector registers
  IV1LR @offset 0x48 $u32 {
    IV64 // at 31: IV64
    IV65 // at 30: IV65
    IV66 // at 29: IV66
    IV67 // at 28: IV67
    IV68 // at 27: IV68
    IV69 // at 26: IV69
    IV70 // at 25: IV70
    IV71 // at 24: IV71
    IV72 // at 23: IV72
    IV73 // at 22: IV73
    IV74 // at 21: IV74
    IV75 // at 20: IV75
    IV76 // at 19: IV76
    IV77 // at 18: IV77
    IV78 // at 17: IV78
    IV79 // at 16: IV79
    IV80 // at 15: IV80
    IV81 // at 14: IV81
    IV82 // at 13: IV82
    IV83 // at 12: IV83
    IV84 // at 11: IV84
    IV85 // at 10: IV85
    IV86 // at 9: IV86
    IV87 // at 8: IV87
    IV88 // at 7: IV88
    IV89 // at 6: IV89
    IV90 // at 5: IV90
    IV91 // at 4: IV91
    IV92 // at 3: IV92
    IV93 // at 2: IV93
    IV94 // at 1: IV94
    IV95 // at 0: IV95
  }

//---  Register IV1RR: initialization vector registers
  IV1RR @offset 0x4c $u32 {
    IV96 // at 31: IV96
    IV97 // at 30: IV97
    IV98 // at 29: IV98
    IV99 // at 28: IV99
    IV100 // at 27: IV100
    IV101 // at 26: IV101
    IV102 // at 25: IV102
    IV103 // at 24: IV103
    IV104 // at 23: IV104
    IV105 // at 22: IV105
    IV106 // at 21: IV106
    IV107 // at 20: IV107
    IV108 // at 19: IV108
    IV109 // at 18: IV109
    IV110 // at 17: IV110
    IV111 // at 16: IV111
    IV112 // at 15: IV112
    IV113 // at 14: IV113
    IV114 // at 13: IV114
    IV115 // at 12: IV115
    IV116 // at 11: IV116
    IV117 // at 10: IV117
    IV118 // at 9: IV118
    IV119 // at 8: IV119
    IV120 // at 7: IV120
    IV121 // at 6: IV121
    IV122 // at 5: IV122
    IV123 // at 4: IV123
    IV124 // at 3: IV124
    IV125 // at 2: IV125
    IV126 // at 1: IV126
    IV127 // at 0: IV127
  }

//---  Register CSGCMCCM0R: context swap register
  CSGCMCCM0R @offset 0x50 $u32 {
    CSGCMCCM0R:32 // at 0: CSGCMCCM0R
  }

//---  Register CSGCMCCM1R: context swap register
  CSGCMCCM1R @offset 0x54 $u32 {
    CSGCMCCM1R:32 // at 0: CSGCMCCM1R
  }

//---  Register CSGCMCCM2R: context swap register
  CSGCMCCM2R @offset 0x58 $u32 {
    CSGCMCCM2R:32 // at 0: CSGCMCCM2R
  }

//---  Register CSGCMCCM3R: context swap register
  CSGCMCCM3R @offset 0x5c $u32 {
    CSGCMCCM3R:32 // at 0: CSGCMCCM3R
  }

//---  Register CSGCMCCM4R: context swap register
  CSGCMCCM4R @offset 0x60 $u32 {
    CSGCMCCM4R:32 // at 0: CSGCMCCM4R
  }

//---  Register CSGCMCCM5R: context swap register
  CSGCMCCM5R @offset 0x64 $u32 {
    CSGCMCCM5R:32 // at 0: CSGCMCCM5R
  }

//---  Register CSGCMCCM6R: context swap register
  CSGCMCCM6R @offset 0x68 $u32 {
    CSGCMCCM6R:32 // at 0: CSGCMCCM6R
  }

//---  Register CSGCMCCM7R: context swap register
  CSGCMCCM7R @offset 0x6c $u32 {
    CSGCMCCM7R:32 // at 0: CSGCMCCM7R
  }

//---  Register CSGCM0R: context swap register
  CSGCM0R @offset 0x70 $u32 {
    CSGCM0R:32 // at 0: CSGCM0R
  }

//---  Register CSGCM1R: context swap register
  CSGCM1R @offset 0x74 $u32 {
    CSGCM1R:32 // at 0: CSGCM1R
  }

//---  Register CSGCM2R: context swap register
  CSGCM2R @offset 0x78 $u32 {
    CSGCM2R:32 // at 0: CSGCM2R
  }

//---  Register CSGCM3R: context swap register
  CSGCM3R @offset 0x7c $u32 {
    CSGCM3R:32 // at 0: CSGCM3R
  }

//---  Register CSGCM4R: context swap register
  CSGCM4R @offset 0x80 $u32 {
    CSGCM4R:32 // at 0: CSGCM4R
  }

//---  Register CSGCM5R: context swap register
  CSGCM5R @offset 0x84 $u32 {
    CSGCM5R:32 // at 0: CSGCM5R
  }

//---  Register CSGCM6R: context swap register
  CSGCM6R @offset 0x88 $u32 {
    CSGCM6R:32 // at 0: CSGCM6R
  }

//---  Register CSGCM7R: context swap register
  CSGCM7R @offset 0x8c $u32 {
    CSGCM7R:32 // at 0: CSGCM7R
  }

}

//------------------------------------------------------------------------------
// Peripheral DAC: Digital-to-analog converter
//------------------------------------------------------------------------------

registers ©DAC @at 0x40007400 {
//---  Register CR: control register
  CR @offset 0x0 $u32 {
    2
    DMAUDRIE2 // at 29: DAC channel2 DMA underrun interrupt enable
    DMAEN2 // at 28: DAC channel2 DMA enable
    MAMP2:4 // at 24: DAC channel2 mask/amplitude selector
    WAVE2:2 // at 22: DAC channel2 noise/triangle wave generation enable
    TSEL2:3 // at 19: DAC channel2 trigger selection
    TEN2 // at 18: DAC channel2 trigger enable
    BOFF2 // at 17: DAC channel2 output buffer disable
    EN2 // at 16: DAC channel2 enable
    2
    DMAUDRIE1 // at 13: DAC channel1 DMA Underrun Interrupt enable
    DMAEN1 // at 12: DAC channel1 DMA enable
    MAMP1:4 // at 8: DAC channel1 mask/amplitude selector
    WAVE1:2 // at 6: DAC channel1 noise/triangle wave generation enable
    TSEL1:3 // at 3: DAC channel1 trigger selection
    TEN1 // at 2: DAC channel1 trigger enable
    BOFF1 // at 1: DAC channel1 output buffer disable
    EN1 // at 0: DAC channel1 enable
  }

//---  Register SWTRIGR: software trigger register
  SWTRIGR @offset 0x4 $u32 {
    30
    SWTRIG2 // at 1: DAC channel2 software trigger
    SWTRIG1 // at 0: DAC channel1 software trigger
  }

//---  Register DHR12R1: channel1 12-bit right-aligned data holding register
  DHR12R1 @offset 0x8 $u32 {
    20
    DACC1DHR:12 // at 0: DAC channel1 12-bit right-aligned data
  }

//---  Register DHR12L1: channel1 12-bit left aligned data holding register
  DHR12L1 @offset 0xc $u32 {
    16
    DACC1DHR:12 // at 4: DAC channel1 12-bit left-aligned data
    4
  }

//---  Register DHR8R1: channel1 8-bit right aligned data holding register
  DHR8R1 @offset 0x10 $u32 {
    24
    DACC1DHR:8 // at 0: DAC channel1 8-bit right-aligned data
  }

//---  Register DHR12R2: channel2 12-bit right aligned data holding register
  DHR12R2 @offset 0x14 $u32 {
    20
    DACC2DHR:12 // at 0: DAC channel2 12-bit right-aligned data
  }

//---  Register DHR12L2: channel2 12-bit left aligned data holding register
  DHR12L2 @offset 0x18 $u32 {
    16
    DACC2DHR:12 // at 4: DAC channel2 12-bit left-aligned data
    4
  }

//---  Register DHR8R2: channel2 8-bit right-aligned data holding register
  DHR8R2 @offset 0x1c $u32 {
    24
    DACC2DHR:8 // at 0: DAC channel2 8-bit right-aligned data
  }

//---  Register DHR12RD: Dual DAC 12-bit right-aligned data holding register
  DHR12RD @offset 0x20 $u32 {
    4
    DACC2DHR:12 // at 16: DAC channel2 12-bit right-aligned data
    4
    DACC1DHR:12 // at 0: DAC channel1 12-bit right-aligned data
  }

//---  Register DHR12LD: DUAL DAC 12-bit left aligned data holding register
  DHR12LD @offset 0x24 $u32 {
    DACC2DHR:12 // at 20: DAC channel2 12-bit left-aligned data
    4
    DACC1DHR:12 // at 4: DAC channel1 12-bit left-aligned data
    4
  }

//---  Register DHR8RD: DUAL DAC 8-bit right aligned data holding register
  DHR8RD @offset 0x28 $u32 {
    16
    DACC2DHR:8 // at 8: DAC channel2 8-bit right-aligned data
    DACC1DHR:8 // at 0: DAC channel1 8-bit right-aligned data
  }

//---  Register DOR1: channel1 data output register
  DOR1 @offset 0x2c @ro $u32 {
    20
    DACC1DOR:12 // at 0: DAC channel1 data output
  }

//---  Register DOR2: channel2 data output register
  DOR2 @offset 0x30 @ro $u32 {
    20
    DACC2DOR:12 // at 0: DAC channel2 data output
  }

//---  Register SR: status register
  SR @offset 0x34 $u32 {
    2
    DMAUDR2 // at 29: DAC channel2 DMA underrun flag
    15
    DMAUDR1 // at 13: DAC channel1 DMA underrun flag
    13
  }

}

//------------------------------------------------------------------------------
// Peripheral DBGMCU: MCU debug component
//------------------------------------------------------------------------------

registers ©DBGMCU @at 0xe0042000 {
//---  Register IDCODE: DBGMCU_IDCODE
  IDCODE @offset 0x0 @ro $u32 {
    REV_ID:16 // at 16: Revision identifie
    4
    DEV_ID:12 // at 0: Device identifier
  }

}

//------------------------------------------------------------------------------
// Peripheral DCMI: Digital camera interface
//------------------------------------------------------------------------------

registers ©DCMI @at 0x50050000 {
//---  Register CR: control register 1
  CR @offset 0x0 $u32 {
    17
    ENABLE // at 14: DCMI enable
    2
    EDM:2 // at 10: Extended data mode
    FCRC:2 // at 8: Frame capture rate control
    VSPOL // at 7: Vertical synchronization polarity
    HSPOL // at 6: Horizontal synchronization polarity
    PCKPOL // at 5: Pixel clock polarity
    ESS // at 4: Embedded synchronization select
    JPEG // at 3: JPEG format
    CROP // at 2: Crop feature
    CM // at 1: Capture mode
    CAPTURE // at 0: Capture enable
  }

//---  Register SR: status register
  SR @offset 0x4 @ro $u32 {
    29
    FNE // at 2: FIFO not empty
    VSYNC // at 1: VSYNC
    HSYNC // at 0: HSYNC
  }

//---  Register RIS: raw interrupt status register
  RIS @offset 0x8 @ro $u32 {
    27
    LINE_RIS // at 4: Line raw interrupt status
    VSYNC_RIS // at 3: VSYNC raw interrupt status
    ERR_RIS // at 2: Synchronization error raw interrupt status
    OVR_RIS // at 1: Overrun raw interrupt status
    FRAME_RIS // at 0: Capture complete raw interrupt status
  }

//---  Register IER: interrupt enable register
  IER @offset 0xc $u32 {
    27
    LINE_IE // at 4: Line interrupt enable
    VSYNC_IE // at 3: VSYNC interrupt enable
    ERR_IE // at 2: Synchronization error interrupt enable
    OVR_IE // at 1: Overrun interrupt enable
    FRAME_IE // at 0: Capture complete interrupt enable
  }

//---  Register MIS: masked interrupt status register
  MIS @offset 0x10 @ro $u32 {
    27
    LINE_MIS // at 4: Line masked interrupt status
    VSYNC_MIS // at 3: VSYNC masked interrupt status
    ERR_MIS // at 2: Synchronization error masked interrupt status
    OVR_MIS // at 1: Overrun masked interrupt status
    FRAME_MIS // at 0: Capture complete masked interrupt status
  }

//---  Register ICR: interrupt clear register
  ICR @offset 0x14 $u32 {
    27
    LINE_ISC // at 4: line interrupt status clear
    VSYNC_ISC // at 3: Vertical synch interrupt status clear
    ERR_ISC // at 2: Synchronization error interrupt status clear
    OVR_ISC // at 1: Overrun interrupt status clear
    FRAME_ISC // at 0: Capture complete interrupt status clear
  }

//---  Register ESCR: embedded synchronization code register
  ESCR @offset 0x18 $u32 {
    FEC:8 // at 24: Frame end delimiter code
    LEC:8 // at 16: Line end delimiter code
    LSC:8 // at 8: Line start delimiter code
    FSC:8 // at 0: Frame start delimiter code
  }

//---  Register ESUR: embedded synchronization unmask register
  ESUR @offset 0x1c $u32 {
    FEU:8 // at 24: Frame end delimiter unmask
    LEU:8 // at 16: Line end delimiter unmask
    LSU:8 // at 8: Line start delimiter unmask
    FSU:8 // at 0: Frame start delimiter unmask
  }

//---  Register CWSTRT: crop window start
  CWSTRT @offset 0x20 $u32 {
    3
    VST:13 // at 16: Vertical start line count
    2
    HOFFCNT:14 // at 0: Horizontal offset count
  }

//---  Register CWSIZE: crop window size
  CWSIZE @offset 0x24 $u32 {
    2
    VLINE:14 // at 16: Vertical line count
    2
    CAPCNT:14 // at 0: Capture count
  }

//---  Register DR: data register
  DR @offset 0x28 @ro $u32 {
    Byte3:8 // at 24: Data byte 3
    Byte2:8 // at 16: Data byte 2
    Byte1:8 // at 8: Data byte 1
    Byte0:8 // at 0: Data byte 0
  }

}

//------------------------------------------------------------------------------
// Peripheral DFSDM: Digital filter for sigma delta       modulators
//------------------------------------------------------------------------------

registers ©DFSDM @at 0x40017400 {
//---  Register DFSDM_CHCFG0R1: DFSDM channel configuration 0 register 1
  DFSDM_CHCFG0R1 @offset 0x0 $u32 {
    DFSDMEN // at 31: Global enable for DFSDM interface
    CKOUTSRC // at 30: Output serial clock source selection
    6
    CKOUTDIV:8 // at 16: Output serial clock divider
    DATPACK:2 // at 14: Data packing mode in DFSDM_CHDATINyR register
    DATMPX:2 // at 12: Input data multiplexer for channel 0
    3
    CHINSEL // at 8: Channel inputs selection
    CHEN // at 7: Channel 0 enable
    CKABEN // at 6: Clock absence detector enable on channel 0
    SCDEN // at 5: Short-circuit detector enable on channel 0
    1
    SPICKSEL:2 // at 2: SPI clock select for channel 0
    SITP:2 // at 0: Serial interface type for channel 0
  }

//---  Register DFSDM_CHCFG1R1: DFSDM channel configuration 1 register 1
  DFSDM_CHCFG1R1 @offset 0x20 $u32 {
    DFSDMEN // at 31: Global enable for DFSDM interface
    CKOUTSRC // at 30: Output serial clock source selection
    6
    CKOUTDIV:8 // at 16: Output serial clock divider
    DATPACK:2 // at 14: Data packing mode in DFSDM_CHDATINyR register
    DATMPX:2 // at 12: Input data multiplexer for channel 1
    3
    CHINSEL // at 8: Channel inputs selection
    CHEN // at 7: Channel 1 enable
    CKABEN // at 6: Clock absence detector enable on channel 1
    SCDEN // at 5: Short-circuit detector enable on channel 1
    1
    SPICKSEL:2 // at 2: SPI clock select for channel 1
    SITP:2 // at 0: Serial interface type for channel 1
  }

//---  Register DFSDM_CHCFG2R1: DFSDM channel configuration 2 register 1
  DFSDM_CHCFG2R1 @offset 0x40 $u32 {
    DFSDMEN // at 31: Global enable for DFSDM interface
    CKOUTSRC // at 30: Output serial clock source selection
    6
    CKOUTDIV:8 // at 16: Output serial clock divider
    DATPACK:2 // at 14: Data packing mode in DFSDM_CHDATINyR register
    DATMPX:2 // at 12: Input data multiplexer for channel 2
    3
    CHINSEL // at 8: Channel inputs selection
    CHEN // at 7: Channel 2 enable
    CKABEN // at 6: Clock absence detector enable on channel 2
    SCDEN // at 5: Short-circuit detector enable on channel 2
    1
    SPICKSEL:2 // at 2: SPI clock select for channel 2
    SITP:2 // at 0: Serial interface type for channel 2
  }

//---  Register DFSDM_CHCFG3R1: DFSDM channel configuration 3 register 1
  DFSDM_CHCFG3R1 @offset 0x60 $u32 {
    DFSDMEN // at 31: Global enable for DFSDM interface
    CKOUTSRC // at 30: Output serial clock source selection
    6
    CKOUTDIV:8 // at 16: Output serial clock divider
    DATPACK:2 // at 14: Data packing mode in DFSDM_CHDATINyR register
    DATMPX:2 // at 12: Input data multiplexer for channel 3
    3
    CHINSEL // at 8: Channel inputs selection
    CHEN // at 7: Channel 3 enable
    CKABEN // at 6: Clock absence detector enable on channel 3
    SCDEN // at 5: Short-circuit detector enable on channel 3
    1
    SPICKSEL:2 // at 2: SPI clock select for channel 3
    SITP:2 // at 0: Serial interface type for channel 3
  }

//---  Register DFSDM_CHCFG4R1: DFSDM channel configuration 4 register 1
  DFSDM_CHCFG4R1 @offset 0x80 $u32 {
    DFSDMEN // at 31: Global enable for DFSDM interface
    CKOUTSRC // at 30: Output serial clock source selection
    6
    CKOUTDIV:8 // at 16: Output serial clock divider
    DATPACK:2 // at 14: Data packing mode in DFSDM_CHDATINyR register
    DATMPX:2 // at 12: Input data multiplexer for channel 4
    3
    CHINSEL // at 8: Channel inputs selection
    CHEN // at 7: Channel 4 enable
    CKABEN // at 6: Clock absence detector enable on channel 4
    SCDEN // at 5: Short-circuit detector enable on channel 4
    1
    SPICKSEL:2 // at 2: SPI clock select for channel 4
    SITP:2 // at 0: Serial interface type for channel 4
  }

//---  Register DFSDM_CHCFG5R1: DFSDM channel configuration 5 register 1
  DFSDM_CHCFG5R1 @offset 0xa0 $u32 {
    DFSDMEN // at 31: Global enable for DFSDM interface
    CKOUTSRC // at 30: Output serial clock source selection
    6
    CKOUTDIV:8 // at 16: Output serial clock divider
    DATPACK:2 // at 14: Data packing mode in DFSDM_CHDATINyR register
    DATMPX:2 // at 12: Input data multiplexer for channel 5
    3
    CHINSEL // at 8: Channel inputs selection
    CHEN // at 7: Channel 5 enable
    CKABEN // at 6: Clock absence detector enable on channel 5
    SCDEN // at 5: Short-circuit detector enable on channel 5
    1
    SPICKSEL:2 // at 2: SPI clock select for channel 5
    SITP:2 // at 0: Serial interface type for channel 5
  }

//---  Register DFSDM_CHCFG6R1: DFSDM channel configuration 6 register 1
  DFSDM_CHCFG6R1 @offset 0xc0 $u32 {
    DFSDMEN // at 31: Global enable for DFSDM interface
    CKOUTSRC // at 30: Output serial clock source selection
    6
    CKOUTDIV:8 // at 16: Output serial clock divider
    DATPACK:2 // at 14: Data packing mode in DFSDM_CHDATINyR register
    DATMPX:2 // at 12: Input data multiplexer for channel 6
    3
    CHINSEL // at 8: Channel inputs selection
    CHEN // at 7: Channel 6 enable
    CKABEN // at 6: Clock absence detector enable on channel 6
    SCDEN // at 5: Short-circuit detector enable on channel 6
    1
    SPICKSEL:2 // at 2: SPI clock select for channel 6
    SITP:2 // at 0: Serial interface type for channel 6
  }

//---  Register DFSDM_CHCFG7R1: DFSDM channel configuration 7 register 1
  DFSDM_CHCFG7R1 @offset 0xe0 $u32 {
    DFSDMEN // at 31: Global enable for DFSDM interface
    CKOUTSRC // at 30: Output serial clock source selection
    6
    CKOUTDIV:8 // at 16: Output serial clock divider
    DATPACK:2 // at 14: Data packing mode in DFSDM_CHDATINyR register
    DATMPX:2 // at 12: Input data multiplexer for channel 7
    3
    CHINSEL // at 8: Channel inputs selection
    CHEN // at 7: Channel 7 enable
    CKABEN // at 6: Clock absence detector enable on channel 7
    SCDEN // at 5: Short-circuit detector enable on channel 7
    1
    SPICKSEL:2 // at 2: SPI clock select for channel 7
    SITP:2 // at 0: Serial interface type for channel 7
  }

//---  Register DFSDM_CHCFG0R2: DFSDM channel configuration 0 register 2
  DFSDM_CHCFG0R2 @offset 0x4 $u32 {
    OFFSET:24 // at 8: 24-bit calibration offset for channel 0
    DTRBS:5 // at 3: Data right bit-shift for channel 0
    3
  }

//---  Register DFSDM_CHCFG1R2: DFSDM channel configuration 1 register 2
  DFSDM_CHCFG1R2 @offset 0x24 $u32 {
    OFFSET:24 // at 8: 24-bit calibration offset for channel 1
    DTRBS:5 // at 3: Data right bit-shift for channel 1
    3
  }

//---  Register DFSDM_CHCFG2R2: DFSDM channel configuration 2 register 2
  DFSDM_CHCFG2R2 @offset 0x44 $u32 {
    OFFSET:24 // at 8: 24-bit calibration offset for channel 2
    DTRBS:5 // at 3: Data right bit-shift for channel 2
    3
  }

//---  Register DFSDM_CHCFG3R2: DFSDM channel configuration 3 register 2
  DFSDM_CHCFG3R2 @offset 0x64 $u32 {
    OFFSET:24 // at 8: 24-bit calibration offset for channel 3
    DTRBS:5 // at 3: Data right bit-shift for channel 3
    3
  }

//---  Register DFSDM_CHCFG4R2: DFSDM channel configuration 4 register 2
  DFSDM_CHCFG4R2 @offset 0x84 $u32 {
    OFFSET:24 // at 8: 24-bit calibration offset for channel 4
    DTRBS:5 // at 3: Data right bit-shift for channel 4
    3
  }

//---  Register DFSDM_CHCFG5R2: DFSDM channel configuration 5 register 2
  DFSDM_CHCFG5R2 @offset 0xa4 $u32 {
    OFFSET:24 // at 8: 24-bit calibration offset for channel 5
    DTRBS:5 // at 3: Data right bit-shift for channel 5
    3
  }

//---  Register DFSDM_CHCFG6R2: DFSDM channel configuration 6 register 2
  DFSDM_CHCFG6R2 @offset 0xc4 $u32 {
    OFFSET:24 // at 8: 24-bit calibration offset for channel 6
    DTRBS:5 // at 3: Data right bit-shift for channel 6
    3
  }

//---  Register DFSDM_CHCFG7R2: DFSDM channel configuration 7 register 2
  DFSDM_CHCFG7R2 @offset 0xe4 $u32 {
    OFFSET:24 // at 8: 24-bit calibration offset for channel 7
    DTRBS:5 // at 3: Data right bit-shift for channel 7
    3
  }

//---  Register DFSDM_AWSCD0R: DFSDM analog watchdog and short-circuit detector register
  DFSDM_AWSCD0R @offset 0x8 $u32 {
    8
    AWFORD:2 // at 22: Analog watchdog Sinc filter order on channel 0
    1
    AWFOSR:5 // at 16: Analog watchdog filter oversampling ratio (decimation rate) on channel 0
    BKSCD:4 // at 12: Break signal assignment for short-circuit detector on channel 0
    4
    SCDT:8 // at 0: short-circuit detector threshold for channel 0
  }

//---  Register DFSDM_AWSCD1R: DFSDM analog watchdog and short-circuit detector register
  DFSDM_AWSCD1R @offset 0x28 $u32 {
    8
    AWFORD:2 // at 22: Analog watchdog Sinc filter order on channel 1
    1
    AWFOSR:5 // at 16: Analog watchdog filter oversampling ratio (decimation rate) on channel 1
    BKSCD:4 // at 12: Break signal assignment for short-circuit detector on channel 1
    4
    SCDT:8 // at 0: short-circuit detector threshold for channel 1
  }

//---  Register DFSDM_AWSCD2R: DFSDM analog watchdog and short-circuit detector register
  DFSDM_AWSCD2R @offset 0x48 $u32 {
    8
    AWFORD:2 // at 22: Analog watchdog Sinc filter order on channel 2
    1
    AWFOSR:5 // at 16: Analog watchdog filter oversampling ratio (decimation rate) on channel 2
    BKSCD:4 // at 12: Break signal assignment for short-circuit detector on channel 2
    4
    SCDT:8 // at 0: short-circuit detector threshold for channel 2
  }

//---  Register DFSDM_AWSCD3R: DFSDM analog watchdog and short-circuit detector register
  DFSDM_AWSCD3R @offset 0x68 $u32 {
    8
    AWFORD:2 // at 22: Analog watchdog Sinc filter order on channel 3
    1
    AWFOSR:5 // at 16: Analog watchdog filter oversampling ratio (decimation rate) on channel 3
    BKSCD:4 // at 12: Break signal assignment for short-circuit detector on channel 3
    4
    SCDT:8 // at 0: short-circuit detector threshold for channel 3
  }

//---  Register DFSDM_AWSCD4R: DFSDM analog watchdog and short-circuit detector register
  DFSDM_AWSCD4R @offset 0x88 $u32 {
    8
    AWFORD:2 // at 22: Analog watchdog Sinc filter order on channel 4
    1
    AWFOSR:5 // at 16: Analog watchdog filter oversampling ratio (decimation rate) on channel 4
    BKSCD:4 // at 12: Break signal assignment for short-circuit detector on channel 4
    4
    SCDT:8 // at 0: short-circuit detector threshold for channel 4
  }

//---  Register DFSDM_AWSCD5R: DFSDM analog watchdog and short-circuit detector register
  DFSDM_AWSCD5R @offset 0xa8 $u32 {
    8
    AWFORD:2 // at 22: Analog watchdog Sinc filter order on channel 5
    1
    AWFOSR:5 // at 16: Analog watchdog filter oversampling ratio (decimation rate) on channel 5
    BKSCD:4 // at 12: Break signal assignment for short-circuit detector on channel 5
    4
    SCDT:8 // at 0: short-circuit detector threshold for channel 5
  }

//---  Register DFSDM_AWSCD6R: DFSDM analog watchdog and short-circuit detector register
  DFSDM_AWSCD6R @offset 0xc8 $u32 {
    8
    AWFORD:2 // at 22: Analog watchdog Sinc filter order on channel 6
    1
    AWFOSR:5 // at 16: Analog watchdog filter oversampling ratio (decimation rate) on channel 6
    BKSCD:4 // at 12: Break signal assignment for short-circuit detector on channel 6
    4
    SCDT:8 // at 0: short-circuit detector threshold for channel 6
  }

//---  Register DFSDM_AWSCD7R: DFSDM analog watchdog and short-circuit detector register
  DFSDM_AWSCD7R @offset 0xe8 $u32 {
    8
    AWFORD:2 // at 22: Analog watchdog Sinc filter order on channel 7
    1
    AWFOSR:5 // at 16: Analog watchdog filter oversampling ratio (decimation rate) on channel 7
    BKSCD:4 // at 12: Break signal assignment for short-circuit detector on channel 7
    4
    SCDT:8 // at 0: short-circuit detector threshold for channel 7
  }

//---  Register DFSDM_CHWDAT0R: DFSDM channel watchdog filter data register
  DFSDM_CHWDAT0R @offset 0xc @ro $u32 {
    16
    WDATA:16 // at 0: Input channel y watchdog data
  }

//---  Register DFSDM_CHWDAT1R: DFSDM channel watchdog filter data register
  DFSDM_CHWDAT1R @offset 0x2c @ro $u32 {
    16
    WDATA:16 // at 0: Input channel y watchdog data
  }

//---  Register DFSDM_CHWDAT2R: DFSDM channel watchdog filter data register
  DFSDM_CHWDAT2R @offset 0x4c @ro $u32 {
    16
    WDATA:16 // at 0: Input channel y watchdog data
  }

//---  Register DFSDM_CHWDAT3R: DFSDM channel watchdog filter data register
  DFSDM_CHWDAT3R @offset 0x6c @ro $u32 {
    16
    WDATA:16 // at 0: Input channel y watchdog data
  }

//---  Register DFSDM_CHWDAT4R: DFSDM channel watchdog filter data register
  DFSDM_CHWDAT4R @offset 0x8c @ro $u32 {
    16
    WDATA:16 // at 0: Input channel y watchdog data
  }

//---  Register DFSDM_CHWDAT5R: DFSDM channel watchdog filter data register
  DFSDM_CHWDAT5R @offset 0xac @ro $u32 {
    16
    WDATA:16 // at 0: Input channel y watchdog data
  }

//---  Register DFSDM_CHWDAT6R: DFSDM channel watchdog filter data register
  DFSDM_CHWDAT6R @offset 0xcc @ro $u32 {
    16
    WDATA:16 // at 0: Input channel y watchdog data
  }

//---  Register DFSDM_CHWDAT7R: DFSDM channel watchdog filter data register
  DFSDM_CHWDAT7R @offset 0xec @ro $u32 {
    16
    WDATA:16 // at 0: Input channel y watchdog data
  }

//---  Register DFSDM_CHDATIN0R: DFSDM channel data input register
  DFSDM_CHDATIN0R @offset 0x10 $u32 {
    INDAT1:16 // at 16: Input data for channel 1
    INDAT0:16 // at 0: Input data for channel 0
  }

//---  Register DFSDM_CHDATIN1R: DFSDM channel data input register
  DFSDM_CHDATIN1R @offset 0x30 $u32 {
    INDAT1:16 // at 16: Input data for channel 2
    INDAT0:16 // at 0: Input data for channel 1
  }

//---  Register DFSDM_CHDATIN2R: DFSDM channel data input register
  DFSDM_CHDATIN2R @offset 0x50 $u32 {
    INDAT1:16 // at 16: Input data for channel 3
    INDAT0:16 // at 0: Input data for channel 2
  }

//---  Register DFSDM_CHDATIN3R: DFSDM channel data input register
  DFSDM_CHDATIN3R @offset 0x70 $u32 {
    INDAT1:16 // at 16: Input data for channel 4
    INDAT0:16 // at 0: Input data for channel 3
  }

//---  Register DFSDM_CHDATIN4R: DFSDM channel data input register
  DFSDM_CHDATIN4R @offset 0x90 $u32 {
    INDAT1:16 // at 16: Input data for channel 5
    INDAT0:16 // at 0: Input data for channel 4
  }

//---  Register DFSDM_CHDATIN5R: DFSDM channel data input register
  DFSDM_CHDATIN5R @offset 0xb0 $u32 {
    INDAT1:16 // at 16: Input data for channel 6
    INDAT0:16 // at 0: Input data for channel 5
  }

//---  Register DFSDM_CHDATIN6R: DFSDM channel data input register
  DFSDM_CHDATIN6R @offset 0xd0 $u32 {
    INDAT1:16 // at 16: Input data for channel 7
    INDAT0:16 // at 0: Input data for channel 6
  }

//---  Register DFSDM_CHDATIN7R: DFSDM channel data input register
  DFSDM_CHDATIN7R @offset 0xf0 $u32 {
    INDAT1:16 // at 16: Input data for channel 8
    INDAT0:16 // at 0: Input data for channel 7
  }

//---  Register DFSDM0_CR1: DFSDM control register 1
  DFSDM0_CR1 @offset 0x100 $u32 {
    1
    AWFSEL // at 30: Analog watchdog fast mode select
    FAST // at 29: Fast conversion mode selection for regular conversions
    2
    RCH:3 // at 24: Regular channel selection
    2
    RDMAEN // at 21: DMA channel enabled to read data for the regular conversion
    1
    RSYNC // at 19: Launch regular conversion synchronously with DFSDM0
    RCONT // at 18: Continuous mode selection for regular conversions
    RSWSTART // at 17: Software start of a conversion on the regular channel
    2
    JEXTEN:2 // at 13: Trigger enable and trigger edge selection for injected conversions
    JEXTSEL:5 // at 8: Trigger signal selection for launching injected conversions
    2
    JDMAEN // at 5: DMA channel enabled to read data for the injected channel group
    JSCAN // at 4: Scanning conversion mode for injected conversions
    JSYNC // at 3: Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
    1
    JSWSTART // at 1: Start a conversion of the injected group of channels
    DFEN // at 0: DFSDM enable
  }

//---  Register DFSDM1_CR1: DFSDM control register 1
  DFSDM1_CR1 @offset 0x180 $u32 {
    1
    AWFSEL // at 30: Analog watchdog fast mode select
    FAST // at 29: Fast conversion mode selection for regular conversions
    2
    RCH:3 // at 24: Regular channel selection
    2
    RDMAEN // at 21: DMA channel enabled to read data for the regular conversion
    1
    RSYNC // at 19: Launch regular conversion synchronously with DFSDM0
    RCONT // at 18: Continuous mode selection for regular conversions
    RSWSTART // at 17: Software start of a conversion on the regular channel
    2
    JEXTEN:2 // at 13: Trigger enable and trigger edge selection for injected conversions
    JEXTSEL:5 // at 8: Trigger signal selection for launching injected conversions
    2
    JDMAEN // at 5: DMA channel enabled to read data for the injected channel group
    JSCAN // at 4: Scanning conversion mode for injected conversions
    JSYNC // at 3: Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
    1
    JSWSTART // at 1: Start a conversion of the injected group of channels
    DFEN // at 0: DFSDM enable
  }

//---  Register DFSDM2_CR1: DFSDM control register 1
  DFSDM2_CR1 @offset 0x200 $u32 {
    1
    AWFSEL // at 30: Analog watchdog fast mode select
    FAST // at 29: Fast conversion mode selection for regular conversions
    2
    RCH:3 // at 24: Regular channel selection
    2
    RDMAEN // at 21: DMA channel enabled to read data for the regular conversion
    1
    RSYNC // at 19: Launch regular conversion synchronously with DFSDM0
    RCONT // at 18: Continuous mode selection for regular conversions
    RSWSTART // at 17: Software start of a conversion on the regular channel
    2
    JEXTEN:2 // at 13: Trigger enable and trigger edge selection for injected conversions
    JEXTSEL:5 // at 8: Trigger signal selection for launching injected conversions
    2
    JDMAEN // at 5: DMA channel enabled to read data for the injected channel group
    JSCAN // at 4: Scanning conversion mode for injected conversions
    JSYNC // at 3: Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
    1
    JSWSTART // at 1: Start a conversion of the injected group of channels
    DFEN // at 0: DFSDM enable
  }

//---  Register DFSDM3_CR1: DFSDM control register 1
  DFSDM3_CR1 @offset 0x380 $u32 {
    1
    AWFSEL // at 30: Analog watchdog fast mode select
    FAST // at 29: Fast conversion mode selection for regular conversions
    2
    RCH:3 // at 24: Regular channel selection
    2
    RDMAEN // at 21: DMA channel enabled to read data for the regular conversion
    1
    RSYNC // at 19: Launch regular conversion synchronously with DFSDM0
    RCONT // at 18: Continuous mode selection for regular conversions
    RSWSTART // at 17: Software start of a conversion on the regular channel
    2
    JEXTEN:2 // at 13: Trigger enable and trigger edge selection for injected conversions
    JEXTSEL:5 // at 8: Trigger signal selection for launching injected conversions
    2
    JDMAEN // at 5: DMA channel enabled to read data for the injected channel group
    JSCAN // at 4: Scanning conversion mode for injected conversions
    JSYNC // at 3: Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
    1
    JSWSTART // at 1: Start a conversion of the injected group of channels
    DFEN // at 0: DFSDM enable
  }

//---  Register DFSDM0_CR2: DFSDM control register 2
  DFSDM0_CR2 @offset 0x104 $u32 {
    8
    AWDCH:8 // at 16: Analog watchdog channel selection
    EXCH:8 // at 8: Extremes detector channel selection
    1
    CKABIE // at 6: Clock absence interrupt enable
    SCDIE // at 5: Short-circuit detector interrupt enable
    AWDIE // at 4: Analog watchdog interrupt enable
    ROVRIE // at 3: Regular data overrun interrupt enable
    JOVRIE // at 2: Injected data overrun interrupt enable
    REOCIE // at 1: Regular end of conversion interrupt enable
    JEOCIE // at 0: Injected end of conversion interrupt enable
  }

//---  Register DFSDM1_CR2: DFSDM control register 2
  DFSDM1_CR2 @offset 0x184 $u32 {
    8
    AWDCH:8 // at 16: Analog watchdog channel selection
    EXCH:8 // at 8: Extremes detector channel selection
    1
    CKABIE // at 6: Clock absence interrupt enable
    SCDIE // at 5: Short-circuit detector interrupt enable
    AWDIE // at 4: Analog watchdog interrupt enable
    ROVRIE // at 3: Regular data overrun interrupt enable
    JOVRIE // at 2: Injected data overrun interrupt enable
    REOCIE // at 1: Regular end of conversion interrupt enable
    JEOCIE // at 0: Injected end of conversion interrupt enable
  }

//---  Register DFSDM2_CR2: DFSDM control register 2
  DFSDM2_CR2 @offset 0x204 $u32 {
    8
    AWDCH:8 // at 16: Analog watchdog channel selection
    EXCH:8 // at 8: Extremes detector channel selection
    1
    CKABIE // at 6: Clock absence interrupt enable
    SCDIE // at 5: Short-circuit detector interrupt enable
    AWDIE // at 4: Analog watchdog interrupt enable
    ROVRIE // at 3: Regular data overrun interrupt enable
    JOVRIE // at 2: Injected data overrun interrupt enable
    REOCIE // at 1: Regular end of conversion interrupt enable
    JEOCIE // at 0: Injected end of conversion interrupt enable
  }

//---  Register DFSDM3_CR2: DFSDM control register 2
  DFSDM3_CR2 @offset 0x384 $u32 {
    8
    AWDCH:8 // at 16: Analog watchdog channel selection
    EXCH:8 // at 8: Extremes detector channel selection
    1
    CKABIE // at 6: Clock absence interrupt enable
    SCDIE // at 5: Short-circuit detector interrupt enable
    AWDIE // at 4: Analog watchdog interrupt enable
    ROVRIE // at 3: Regular data overrun interrupt enable
    JOVRIE // at 2: Injected data overrun interrupt enable
    REOCIE // at 1: Regular end of conversion interrupt enable
    JEOCIE // at 0: Injected end of conversion interrupt enable
  }

//---  Register DFSDM0_ISR: DFSDM interrupt and status register
  DFSDM0_ISR @offset 0x108 @ro $u32 {
    SCDF:8 // at 24: short-circuit detector flag
    CKABF:8 // at 16: Clock absence flag
    1
    RCIP // at 14: Regular conversion in progress status
    JCIP // at 13: Injected conversion in progress status
    8
    AWDF // at 4: Analog watchdog
    ROVRF // at 3: Regular conversion overrun flag
    JOVRF // at 2: Injected conversion overrun flag
    REOCF // at 1: End of regular conversion flag
    JEOCF // at 0: End of injected conversion flag
  }

//---  Register DFSDM1_ISR: DFSDM interrupt and status register
  DFSDM1_ISR @offset 0x188 @ro $u32 {
    SCDF:8 // at 24: short-circuit detector flag
    CKABF:8 // at 16: Clock absence flag
    1
    RCIP // at 14: Regular conversion in progress status
    JCIP // at 13: Injected conversion in progress status
    8
    AWDF // at 4: Analog watchdog
    ROVRF // at 3: Regular conversion overrun flag
    JOVRF // at 2: Injected conversion overrun flag
    REOCF // at 1: End of regular conversion flag
    JEOCF // at 0: End of injected conversion flag
  }

//---  Register DFSDM2_ISR: DFSDM interrupt and status register
  DFSDM2_ISR @offset 0x208 @ro $u32 {
    SCDF:8 // at 24: short-circuit detector flag
    CKABF:8 // at 16: Clock absence flag
    1
    RCIP // at 14: Regular conversion in progress status
    JCIP // at 13: Injected conversion in progress status
    8
    AWDF // at 4: Analog watchdog
    ROVRF // at 3: Regular conversion overrun flag
    JOVRF // at 2: Injected conversion overrun flag
    REOCF // at 1: End of regular conversion flag
    JEOCF // at 0: End of injected conversion flag
  }

//---  Register DFSDM3_ISR: DFSDM interrupt and status register
  DFSDM3_ISR @offset 0x388 @ro $u32 {
    SCDF:8 // at 24: short-circuit detector flag
    CKABF:8 // at 16: Clock absence flag
    1
    RCIP // at 14: Regular conversion in progress status
    JCIP // at 13: Injected conversion in progress status
    8
    AWDF // at 4: Analog watchdog
    ROVRF // at 3: Regular conversion overrun flag
    JOVRF // at 2: Injected conversion overrun flag
    REOCF // at 1: End of regular conversion flag
    JEOCF // at 0: End of injected conversion flag
  }

//---  Register DFSDM0_ICR: DFSDM interrupt flag clear register
  DFSDM0_ICR @offset 0x10c $u32 {
    CLRSCDF:8 // at 24: Clear the short-circuit detector flag
    CLRCKABF:8 // at 16: Clear the clock absence flag
    12
    CLRROVRF // at 3: Clear the regular conversion overrun flag
    CLRJOVRF // at 2: Clear the injected conversion overrun flag
    2
  }

//---  Register DFSDM1_ICR: DFSDM interrupt flag clear register
  DFSDM1_ICR @offset 0x18c $u32 {
    CLRSCDF:8 // at 24: Clear the short-circuit detector flag
    CLRCKABF:8 // at 16: Clear the clock absence flag
    12
    CLRROVRF // at 3: Clear the regular conversion overrun flag
    CLRJOVRF // at 2: Clear the injected conversion overrun flag
    2
  }

//---  Register DFSDM2_ICR: DFSDM interrupt flag clear register
  DFSDM2_ICR @offset 0x20c $u32 {
    CLRSCDF:8 // at 24: Clear the short-circuit detector flag
    CLRCKABF:8 // at 16: Clear the clock absence flag
    12
    CLRROVRF // at 3: Clear the regular conversion overrun flag
    CLRJOVRF // at 2: Clear the injected conversion overrun flag
    2
  }

//---  Register DFSDM3_ICR: DFSDM interrupt flag clear register
  DFSDM3_ICR @offset 0x38c $u32 {
    CLRSCDF:8 // at 24: Clear the short-circuit detector flag
    CLRCKABF:8 // at 16: Clear the clock absence flag
    12
    CLRROVRF // at 3: Clear the regular conversion overrun flag
    CLRJOVRF // at 2: Clear the injected conversion overrun flag
    2
  }

//---  Register DFSDM0_JCHGR: DFSDM injected channel group selection register
  DFSDM0_JCHGR @offset 0x110 $u32 {
    24
    JCHG:8 // at 0: Injected channel group selection
  }

//---  Register DFSDM1_JCHGR: DFSDM injected channel group selection register
  DFSDM1_JCHGR @offset 0x190 $u32 {
    24
    JCHG:8 // at 0: Injected channel group selection
  }

//---  Register DFSDM2_JCHGR: DFSDM injected channel group selection register
  DFSDM2_JCHGR @offset 0x210 $u32 {
    24
    JCHG:8 // at 0: Injected channel group selection
  }

//---  Register DFSDM3_JCHGR: DFSDM injected channel group selection register
  DFSDM3_JCHGR @offset 0x310 $u32 {
    24
    JCHG:8 // at 0: Injected channel group selection
  }

//---  Register DFSDM0_FCR: DFSDM filter control register
  DFSDM0_FCR @offset 0x114 $u32 {
    FORD:3 // at 29: Sinc filter order
    3
    FOSR:10 // at 16: Sinc filter oversampling ratio (decimation rate)
    8
    IOSR:8 // at 0: Integrator oversampling ratio (averaging length)
  }

//---  Register DFSDM1_FCR: DFSDM filter control register
  DFSDM1_FCR @offset 0x194 $u32 {
    FORD:3 // at 29: Sinc filter order
    3
    FOSR:10 // at 16: Sinc filter oversampling ratio (decimation rate)
    8
    IOSR:8 // at 0: Integrator oversampling ratio (averaging length)
  }

//---  Register DFSDM2_FCR: DFSDM filter control register
  DFSDM2_FCR @offset 0x214 $u32 {
    FORD:3 // at 29: Sinc filter order
    3
    FOSR:10 // at 16: Sinc filter oversampling ratio (decimation rate)
    8
    IOSR:8 // at 0: Integrator oversampling ratio (averaging length)
  }

//---  Register DFSDM3_FCR: DFSDM filter control register
  DFSDM3_FCR @offset 0x314 $u32 {
    FORD:3 // at 29: Sinc filter order
    3
    FOSR:10 // at 16: Sinc filter oversampling ratio (decimation rate)
    8
    IOSR:8 // at 0: Integrator oversampling ratio (averaging length)
  }

//---  Register DFSDM0_JDATAR: DFSDM data register for injected group
  DFSDM0_JDATAR @offset 0x118 @ro $u32 {
    JDATA:24 // at 8: Injected group conversion data
    5
    JDATACH:3 // at 0: Injected channel most recently converted
  }

//---  Register DFSDM1_JDATAR: DFSDM data register for injected group
  DFSDM1_JDATAR @offset 0x198 @ro $u32 {
    JDATA:24 // at 8: Injected group conversion data
    5
    JDATACH:3 // at 0: Injected channel most recently converted
  }

//---  Register DFSDM2_JDATAR: DFSDM data register for injected group
  DFSDM2_JDATAR @offset 0x218 @ro $u32 {
    JDATA:24 // at 8: Injected group conversion data
    5
    JDATACH:3 // at 0: Injected channel most recently converted
  }

//---  Register DFSDM3_JDATAR: DFSDM data register for injected group
  DFSDM3_JDATAR @offset 0x318 @ro $u32 {
    JDATA:24 // at 8: Injected group conversion data
    5
    JDATACH:3 // at 0: Injected channel most recently converted
  }

//---  Register DFSDM0_RDATAR: DFSDM data register for the regular channel
  DFSDM0_RDATAR @offset 0x11c @ro $u32 {
    RDATA:24 // at 8: Regular channel conversion data
    3
    RPEND // at 4: Regular channel pending data
    1
    RDATACH:3 // at 0: Regular channel most recently converted
  }

//---  Register DFSDM1_RDATAR: DFSDM data register for the regular channel
  DFSDM1_RDATAR @offset 0x198 @ro $u32 {
    RDATA:24 // at 8: Regular channel conversion data
    3
    RPEND // at 4: Regular channel pending data
    1
    RDATACH:3 // at 0: Regular channel most recently converted
  }

//---  Register DFSDM2_RDATAR: DFSDM data register for the regular channel
  DFSDM2_RDATAR @offset 0x218 @ro $u32 {
    RDATA:24 // at 8: Regular channel conversion data
    3
    RPEND // at 4: Regular channel pending data
    1
    RDATACH:3 // at 0: Regular channel most recently converted
  }

//---  Register DFSDM3_RDATAR: DFSDM data register for the regular channel
  DFSDM3_RDATAR @offset 0x318 @ro $u32 {
    RDATA:24 // at 8: Regular channel conversion data
    3
    RPEND // at 4: Regular channel pending data
    1
    RDATACH:3 // at 0: Regular channel most recently converted
  }

//---  Register DFSDM0_AWHTR: DFSDM analog watchdog high threshold register
  DFSDM0_AWHTR @offset 0x120 $u32 {
    AWHT:24 // at 8: Analog watchdog high threshold
    4
    BKAWH:4 // at 0: Break signal assignment to analog watchdog high threshold event
  }

//---  Register DFSDM1_AWHTR: DFSDM analog watchdog high threshold register
  DFSDM1_AWHTR @offset 0x1a0 $u32 {
    AWHT:24 // at 8: Analog watchdog high threshold
    4
    BKAWH:4 // at 0: Break signal assignment to analog watchdog high threshold event
  }

//---  Register DFSDM2_AWHTR: DFSDM analog watchdog high threshold register
  DFSDM2_AWHTR @offset 0x220 $u32 {
    AWHT:24 // at 8: Analog watchdog high threshold
    4
    BKAWH:4 // at 0: Break signal assignment to analog watchdog high threshold event
  }

//---  Register DFSDM3_AWHTR: DFSDM analog watchdog high threshold register
  DFSDM3_AWHTR @offset 0x2a0 $u32 {
    AWHT:24 // at 8: Analog watchdog high threshold
    4
    BKAWH:4 // at 0: Break signal assignment to analog watchdog high threshold event
  }

//---  Register DFSDM0_AWLTR: DFSDM analog watchdog low threshold register
  DFSDM0_AWLTR @offset 0x124 $u32 {
    AWLT:24 // at 8: Analog watchdog low threshold
    4
    BKAWL:4 // at 0: Break signal assignment to analog watchdog low threshold event
  }

//---  Register DFSDM1_AWLTR: DFSDM analog watchdog low threshold register
  DFSDM1_AWLTR @offset 0x1a4 $u32 {
    AWLT:24 // at 8: Analog watchdog low threshold
    4
    BKAWL:4 // at 0: Break signal assignment to analog watchdog low threshold event
  }

//---  Register DFSDM2_AWLTR: DFSDM analog watchdog low threshold register
  DFSDM2_AWLTR @offset 0x224 $u32 {
    AWLT:24 // at 8: Analog watchdog low threshold
    4
    BKAWL:4 // at 0: Break signal assignment to analog watchdog low threshold event
  }

//---  Register DFSDM3_AWLTR: DFSDM analog watchdog low threshold register
  DFSDM3_AWLTR @offset 0x2a4 $u32 {
    AWLT:24 // at 8: Analog watchdog low threshold
    4
    BKAWL:4 // at 0: Break signal assignment to analog watchdog low threshold event
  }

//---  Register DFSDM0_AWSR: DFSDM analog watchdog status register
  DFSDM0_AWSR @offset 0x128 @ro $u32 {
    16
    AWHTF:8 // at 8: Analog watchdog high threshold flag
    AWLTF:8 // at 0: Analog watchdog low threshold flag
  }

//---  Register DFSDM1_AWSR: DFSDM analog watchdog status register
  DFSDM1_AWSR @offset 0x1a8 @ro $u32 {
    16
    AWHTF:8 // at 8: Analog watchdog high threshold flag
    AWLTF:8 // at 0: Analog watchdog low threshold flag
  }

//---  Register DFSDM2_AWSR: DFSDM analog watchdog status register
  DFSDM2_AWSR @offset 0x228 @ro $u32 {
    16
    AWHTF:8 // at 8: Analog watchdog high threshold flag
    AWLTF:8 // at 0: Analog watchdog low threshold flag
  }

//---  Register DFSDM3_AWSR: DFSDM analog watchdog status register
  DFSDM3_AWSR @offset 0x2a8 @ro $u32 {
    16
    AWHTF:8 // at 8: Analog watchdog high threshold flag
    AWLTF:8 // at 0: Analog watchdog low threshold flag
  }

//---  Register DFSDM0_AWCFR: DFSDM analog watchdog clear flag register
  DFSDM0_AWCFR @offset 0x12c $u32 {
    16
    CLRAWHTF:8 // at 8: Clear the analog watchdog high threshold flag
    CLRAWLTF:8 // at 0: Clear the analog watchdog low threshold flag
  }

//---  Register DFSDM1_AWCFR: DFSDM analog watchdog clear flag register
  DFSDM1_AWCFR @offset 0x1ac $u32 {
    16
    CLRAWHTF:8 // at 8: Clear the analog watchdog high threshold flag
    CLRAWLTF:8 // at 0: Clear the analog watchdog low threshold flag
  }

//---  Register DFSDM2_AWCFR: DFSDM analog watchdog clear flag register
  DFSDM2_AWCFR @offset 0x22c $u32 {
    16
    CLRAWHTF:8 // at 8: Clear the analog watchdog high threshold flag
    CLRAWLTF:8 // at 0: Clear the analog watchdog low threshold flag
  }

//---  Register DFSDM3_AWCFR: DFSDM analog watchdog clear flag register
  DFSDM3_AWCFR @offset 0x2ac $u32 {
    16
    CLRAWHTF:8 // at 8: Clear the analog watchdog high threshold flag
    CLRAWLTF:8 // at 0: Clear the analog watchdog low threshold flag
  }

//---  Register DFSDM0_EXMAX: DFSDM Extremes detector maximum register
  DFSDM0_EXMAX @offset 0x130 @ro $u32 {
    EXMAX:24 // at 8: Extremes detector maximum value
    5
    EXMAXCH:3 // at 0: Extremes detector maximum data channel
  }

//---  Register DFSDM1_EXMAX: DFSDM Extremes detector maximum register
  DFSDM1_EXMAX @offset 0x1b0 @ro $u32 {
    EXMAX:24 // at 8: Extremes detector maximum value
    5
    EXMAXCH:3 // at 0: Extremes detector maximum data channel
  }

//---  Register DFSDM2_EXMAX: DFSDM Extremes detector maximum register
  DFSDM2_EXMAX @offset 0x230 @ro $u32 {
    EXMAX:24 // at 8: Extremes detector maximum value
    5
    EXMAXCH:3 // at 0: Extremes detector maximum data channel
  }

//---  Register DFSDM3_EXMAX: DFSDM Extremes detector maximum register
  DFSDM3_EXMAX @offset 0x2b0 @ro $u32 {
    EXMAX:24 // at 8: Extremes detector maximum value
    5
    EXMAXCH:3 // at 0: Extremes detector maximum data channel
  }

//---  Register DFSDM0_EXMIN: DFSDM Extremes detector minimum register
  DFSDM0_EXMIN @offset 0x134 @ro $u32 {
    EXMIN:24 // at 8: Extremes detector minimum value
    5
    EXMINCH:3 // at 0: Extremes detector minimum data channel
  }

//---  Register DFSDM1_EXMIN: DFSDM Extremes detector minimum register
  DFSDM1_EXMIN @offset 0x1b4 @ro $u32 {
    EXMIN:24 // at 8: Extremes detector minimum value
    5
    EXMINCH:3 // at 0: Extremes detector minimum data channel
  }

//---  Register DFSDM2_EXMIN: DFSDM Extremes detector minimum register
  DFSDM2_EXMIN @offset 0x234 @ro $u32 {
    EXMIN:24 // at 8: Extremes detector minimum value
    5
    EXMINCH:3 // at 0: Extremes detector minimum data channel
  }

//---  Register DFSDM3_EXMIN: DFSDM Extremes detector minimum register
  DFSDM3_EXMIN @offset 0x2b4 @ro $u32 {
    EXMIN:24 // at 8: Extremes detector minimum value
    5
    EXMINCH:3 // at 0: Extremes detector minimum data channel
  }

//---  Register DFSDM0_CNVTIMR: DFSDM conversion timer register
  DFSDM0_CNVTIMR @offset 0x138 @ro $u32 {
    CNVCNT:28 // at 4: 28-bit timer counting conversion time
    4
  }

//---  Register DFSDM1_CNVTIMR: DFSDM conversion timer register
  DFSDM1_CNVTIMR @offset 0x1b8 @ro $u32 {
    CNVCNT:28 // at 4: 28-bit timer counting conversion time
    4
  }

//---  Register DFSDM2_CNVTIMR: DFSDM conversion timer register
  DFSDM2_CNVTIMR @offset 0x238 @ro $u32 {
    CNVCNT:28 // at 4: 28-bit timer counting conversion time
    4
  }

//---  Register DFSDM3_CNVTIMR: DFSDM conversion timer register
  DFSDM3_CNVTIMR @offset 0x2b8 @ro $u32 {
    CNVCNT:28 // at 4: 28-bit timer counting conversion time
    4
  }

}

//------------------------------------------------------------------------------
// Peripheral DMA1
//------------------------------------------------------------------------------

registers ©DMA1 @at 0x40026000 {
//---  Register LISR: low interrupt status register
  LISR @offset 0x0 @ro $u32 {
    4
    TCIF3 // at 27: Stream x transfer complete interrupt flag (x = 3..0)
    HTIF3 // at 26: Stream x half transfer interrupt flag (x=3..0)
    TEIF3 // at 25: Stream x transfer error interrupt flag (x=3..0)
    DMEIF3 // at 24: Stream x direct mode error interrupt flag (x=3..0)
    1
    FEIF3 // at 22: Stream x FIFO error interrupt flag (x=3..0)
    TCIF2 // at 21: Stream x transfer complete interrupt flag (x = 3..0)
    HTIF2 // at 20: Stream x half transfer interrupt flag (x=3..0)
    TEIF2 // at 19: Stream x transfer error interrupt flag (x=3..0)
    DMEIF2 // at 18: Stream x direct mode error interrupt flag (x=3..0)
    1
    FEIF2 // at 16: Stream x FIFO error interrupt flag (x=3..0)
    4
    TCIF1 // at 11: Stream x transfer complete interrupt flag (x = 3..0)
    HTIF1 // at 10: Stream x half transfer interrupt flag (x=3..0)
    TEIF1 // at 9: Stream x transfer error interrupt flag (x=3..0)
    DMEIF1 // at 8: Stream x direct mode error interrupt flag (x=3..0)
    1
    FEIF1 // at 6: Stream x FIFO error interrupt flag (x=3..0)
    TCIF0 // at 5: Stream x transfer complete interrupt flag (x = 3..0)
    HTIF0 // at 4: Stream x half transfer interrupt flag (x=3..0)
    TEIF0 // at 3: Stream x transfer error interrupt flag (x=3..0)
    DMEIF0 // at 2: Stream x direct mode error interrupt flag (x=3..0)
    1
    FEIF0 // at 0: Stream x FIFO error interrupt flag (x=3..0)
  }

//---  Register HISR: high interrupt status register
  HISR @offset 0x4 @ro $u32 {
    4
    TCIF7 // at 27: Stream x transfer complete interrupt flag (x=7..4)
    HTIF7 // at 26: Stream x half transfer interrupt flag (x=7..4)
    TEIF7 // at 25: Stream x transfer error interrupt flag (x=7..4)
    DMEIF7 // at 24: Stream x direct mode error interrupt flag (x=7..4)
    1
    FEIF7 // at 22: Stream x FIFO error interrupt flag (x=7..4)
    TCIF6 // at 21: Stream x transfer complete interrupt flag (x=7..4)
    HTIF6 // at 20: Stream x half transfer interrupt flag (x=7..4)
    TEIF6 // at 19: Stream x transfer error interrupt flag (x=7..4)
    DMEIF6 // at 18: Stream x direct mode error interrupt flag (x=7..4)
    1
    FEIF6 // at 16: Stream x FIFO error interrupt flag (x=7..4)
    4
    TCIF5 // at 11: Stream x transfer complete interrupt flag (x=7..4)
    HTIF5 // at 10: Stream x half transfer interrupt flag (x=7..4)
    TEIF5 // at 9: Stream x transfer error interrupt flag (x=7..4)
    DMEIF5 // at 8: Stream x direct mode error interrupt flag (x=7..4)
    1
    FEIF5 // at 6: Stream x FIFO error interrupt flag (x=7..4)
    TCIF4 // at 5: Stream x transfer complete interrupt flag (x=7..4)
    HTIF4 // at 4: Stream x half transfer interrupt flag (x=7..4)
    TEIF4 // at 3: Stream x transfer error interrupt flag (x=7..4)
    DMEIF4 // at 2: Stream x direct mode error interrupt flag (x=7..4)
    1
    FEIF4 // at 0: Stream x FIFO error interrupt flag (x=7..4)
  }

//---  Register LIFCR: low interrupt flag clear register
  LIFCR @offset 0x8 $u32 {
    4
    CTCIF3 // at 27: Stream x clear transfer complete interrupt flag (x = 3..0)
    CHTIF3 // at 26: Stream x clear half transfer interrupt flag (x = 3..0)
    CTEIF3 // at 25: Stream x clear transfer error interrupt flag (x = 3..0)
    CDMEIF3 // at 24: Stream x clear direct mode error interrupt flag (x = 3..0)
    1
    CFEIF3 // at 22: Stream x clear FIFO error interrupt flag (x = 3..0)
    CTCIF2 // at 21: Stream x clear transfer complete interrupt flag (x = 3..0)
    CHTIF2 // at 20: Stream x clear half transfer interrupt flag (x = 3..0)
    CTEIF2 // at 19: Stream x clear transfer error interrupt flag (x = 3..0)
    CDMEIF2 // at 18: Stream x clear direct mode error interrupt flag (x = 3..0)
    1
    CFEIF2 // at 16: Stream x clear FIFO error interrupt flag (x = 3..0)
    4
    CTCIF1 // at 11: Stream x clear transfer complete interrupt flag (x = 3..0)
    CHTIF1 // at 10: Stream x clear half transfer interrupt flag (x = 3..0)
    CTEIF1 // at 9: Stream x clear transfer error interrupt flag (x = 3..0)
    CDMEIF1 // at 8: Stream x clear direct mode error interrupt flag (x = 3..0)
    1
    CFEIF1 // at 6: Stream x clear FIFO error interrupt flag (x = 3..0)
    CTCIF0 // at 5: Stream x clear transfer complete interrupt flag (x = 3..0)
    CHTIF0 // at 4: Stream x clear half transfer interrupt flag (x = 3..0)
    CTEIF0 // at 3: Stream x clear transfer error interrupt flag (x = 3..0)
    CDMEIF0 // at 2: Stream x clear direct mode error interrupt flag (x = 3..0)
    1
    CFEIF0 // at 0: Stream x clear FIFO error interrupt flag (x = 3..0)
  }

//---  Register HIFCR: high interrupt flag clear register
  HIFCR @offset 0xc $u32 {
    4
    CTCIF7 // at 27: Stream x clear transfer complete interrupt flag (x = 7..4)
    CHTIF7 // at 26: Stream x clear half transfer interrupt flag (x = 7..4)
    CTEIF7 // at 25: Stream x clear transfer error interrupt flag (x = 7..4)
    CDMEIF7 // at 24: Stream x clear direct mode error interrupt flag (x = 7..4)
    1
    CFEIF7 // at 22: Stream x clear FIFO error interrupt flag (x = 7..4)
    CTCIF6 // at 21: Stream x clear transfer complete interrupt flag (x = 7..4)
    CHTIF6 // at 20: Stream x clear half transfer interrupt flag (x = 7..4)
    CTEIF6 // at 19: Stream x clear transfer error interrupt flag (x = 7..4)
    CDMEIF6 // at 18: Stream x clear direct mode error interrupt flag (x = 7..4)
    1
    CFEIF6 // at 16: Stream x clear FIFO error interrupt flag (x = 7..4)
    4
    CTCIF5 // at 11: Stream x clear transfer complete interrupt flag (x = 7..4)
    CHTIF5 // at 10: Stream x clear half transfer interrupt flag (x = 7..4)
    CTEIF5 // at 9: Stream x clear transfer error interrupt flag (x = 7..4)
    CDMEIF5 // at 8: Stream x clear direct mode error interrupt flag (x = 7..4)
    1
    CFEIF5 // at 6: Stream x clear FIFO error interrupt flag (x = 7..4)
    CTCIF4 // at 5: Stream x clear transfer complete interrupt flag (x = 7..4)
    CHTIF4 // at 4: Stream x clear half transfer interrupt flag (x = 7..4)
    CTEIF4 // at 3: Stream x clear transfer error interrupt flag (x = 7..4)
    CDMEIF4 // at 2: Stream x clear direct mode error interrupt flag (x = 7..4)
    1
    CFEIF4 // at 0: Stream x clear FIFO error interrupt flag (x = 7..4)
  }

//---  Register S0CR: stream x configuration register
  S0CR @offset 0x10 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    1
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S0NDTR: stream x number of data register
  S0NDTR @offset 0x14 $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S0PAR: stream x peripheral address register
  S0PAR @offset 0x18 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S0M0AR: stream x memory 0 address register
  S0M0AR @offset 0x1c $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S0M1AR: stream x memory 1 address register
  S0M1AR @offset 0x20 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S0FCR: stream x FIFO control register
  S0FCR @offset 0x24 $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S1CR: stream x configuration register
  S1CR @offset 0x28 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S1NDTR: stream x number of data register
  S1NDTR @offset 0x2c $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S1PAR: stream x peripheral address register
  S1PAR @offset 0x30 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S1M0AR: stream x memory 0 address register
  S1M0AR @offset 0x34 $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S1M1AR: stream x memory 1 address register
  S1M1AR @offset 0x38 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S1FCR: stream x FIFO control register
  S1FCR @offset 0x3c $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S2CR: stream x configuration register
  S2CR @offset 0x40 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S2NDTR: stream x number of data register
  S2NDTR @offset 0x44 $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S2PAR: stream x peripheral address register
  S2PAR @offset 0x48 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S2M0AR: stream x memory 0 address register
  S2M0AR @offset 0x4c $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S2M1AR: stream x memory 1 address register
  S2M1AR @offset 0x50 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S2FCR: stream x FIFO control register
  S2FCR @offset 0x54 $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S3CR: stream x configuration register
  S3CR @offset 0x58 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S3NDTR: stream x number of data register
  S3NDTR @offset 0x5c $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S3PAR: stream x peripheral address register
  S3PAR @offset 0x60 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S3M0AR: stream x memory 0 address register
  S3M0AR @offset 0x64 $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S3M1AR: stream x memory 1 address register
  S3M1AR @offset 0x68 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S3FCR: stream x FIFO control register
  S3FCR @offset 0x6c $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S4CR: stream x configuration register
  S4CR @offset 0x70 $u32 {
    4
    CHSEL:3 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S4NDTR: stream x number of data register
  S4NDTR @offset 0x74 $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S4PAR: stream x peripheral address register
  S4PAR @offset 0x78 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S4M0AR: stream x memory 0 address register
  S4M0AR @offset 0x7c $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S4M1AR: stream x memory 1 address register
  S4M1AR @offset 0x80 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S4FCR: stream x FIFO control register
  S4FCR @offset 0x84 $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S5CR: stream x configuration register
  S5CR @offset 0x88 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S5NDTR: stream x number of data register
  S5NDTR @offset 0x8c $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S5PAR: stream x peripheral address register
  S5PAR @offset 0x90 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S5M0AR: stream x memory 0 address register
  S5M0AR @offset 0x94 $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S5M1AR: stream x memory 1 address register
  S5M1AR @offset 0x98 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S5FCR: stream x FIFO control register
  S5FCR @offset 0x9c $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S6CR: stream x configuration register
  S6CR @offset 0xa0 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S6NDTR: stream x number of data register
  S6NDTR @offset 0xa4 $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S6PAR: stream x peripheral address register
  S6PAR @offset 0xa8 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S6M0AR: stream x memory 0 address register
  S6M0AR @offset 0xac $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S6M1AR: stream x memory 1 address register
  S6M1AR @offset 0xb0 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S6FCR: stream x FIFO control register
  S6FCR @offset 0xb4 $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S7CR: stream x configuration register
  S7CR @offset 0xb8 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S7NDTR: stream x number of data register
  S7NDTR @offset 0xbc $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S7PAR: stream x peripheral address register
  S7PAR @offset 0xc0 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S7M0AR: stream x memory 0 address register
  S7M0AR @offset 0xc4 $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S7M1AR: stream x memory 1 address register
  S7M1AR @offset 0xc8 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S7FCR: stream x FIFO control register
  S7FCR @offset 0xcc $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

}

//------------------------------------------------------------------------------
// Peripheral DMA2: DMA controller
//------------------------------------------------------------------------------

registers ©DMA2 @at 0x40026400 {
//---  Register LISR: low interrupt status register
  LISR @offset 0x0 @ro $u32 {
    4
    TCIF3 // at 27: Stream x transfer complete interrupt flag (x = 3..0)
    HTIF3 // at 26: Stream x half transfer interrupt flag (x=3..0)
    TEIF3 // at 25: Stream x transfer error interrupt flag (x=3..0)
    DMEIF3 // at 24: Stream x direct mode error interrupt flag (x=3..0)
    1
    FEIF3 // at 22: Stream x FIFO error interrupt flag (x=3..0)
    TCIF2 // at 21: Stream x transfer complete interrupt flag (x = 3..0)
    HTIF2 // at 20: Stream x half transfer interrupt flag (x=3..0)
    TEIF2 // at 19: Stream x transfer error interrupt flag (x=3..0)
    DMEIF2 // at 18: Stream x direct mode error interrupt flag (x=3..0)
    1
    FEIF2 // at 16: Stream x FIFO error interrupt flag (x=3..0)
    4
    TCIF1 // at 11: Stream x transfer complete interrupt flag (x = 3..0)
    HTIF1 // at 10: Stream x half transfer interrupt flag (x=3..0)
    TEIF1 // at 9: Stream x transfer error interrupt flag (x=3..0)
    DMEIF1 // at 8: Stream x direct mode error interrupt flag (x=3..0)
    1
    FEIF1 // at 6: Stream x FIFO error interrupt flag (x=3..0)
    TCIF0 // at 5: Stream x transfer complete interrupt flag (x = 3..0)
    HTIF0 // at 4: Stream x half transfer interrupt flag (x=3..0)
    TEIF0 // at 3: Stream x transfer error interrupt flag (x=3..0)
    DMEIF0 // at 2: Stream x direct mode error interrupt flag (x=3..0)
    1
    FEIF0 // at 0: Stream x FIFO error interrupt flag (x=3..0)
  }

//---  Register HISR: high interrupt status register
  HISR @offset 0x4 @ro $u32 {
    4
    TCIF7 // at 27: Stream x transfer complete interrupt flag (x=7..4)
    HTIF7 // at 26: Stream x half transfer interrupt flag (x=7..4)
    TEIF7 // at 25: Stream x transfer error interrupt flag (x=7..4)
    DMEIF7 // at 24: Stream x direct mode error interrupt flag (x=7..4)
    1
    FEIF7 // at 22: Stream x FIFO error interrupt flag (x=7..4)
    TCIF6 // at 21: Stream x transfer complete interrupt flag (x=7..4)
    HTIF6 // at 20: Stream x half transfer interrupt flag (x=7..4)
    TEIF6 // at 19: Stream x transfer error interrupt flag (x=7..4)
    DMEIF6 // at 18: Stream x direct mode error interrupt flag (x=7..4)
    1
    FEIF6 // at 16: Stream x FIFO error interrupt flag (x=7..4)
    4
    TCIF5 // at 11: Stream x transfer complete interrupt flag (x=7..4)
    HTIF5 // at 10: Stream x half transfer interrupt flag (x=7..4)
    TEIF5 // at 9: Stream x transfer error interrupt flag (x=7..4)
    DMEIF5 // at 8: Stream x direct mode error interrupt flag (x=7..4)
    1
    FEIF5 // at 6: Stream x FIFO error interrupt flag (x=7..4)
    TCIF4 // at 5: Stream x transfer complete interrupt flag (x=7..4)
    HTIF4 // at 4: Stream x half transfer interrupt flag (x=7..4)
    TEIF4 // at 3: Stream x transfer error interrupt flag (x=7..4)
    DMEIF4 // at 2: Stream x direct mode error interrupt flag (x=7..4)
    1
    FEIF4 // at 0: Stream x FIFO error interrupt flag (x=7..4)
  }

//---  Register LIFCR: low interrupt flag clear register
  LIFCR @offset 0x8 $u32 {
    4
    CTCIF3 // at 27: Stream x clear transfer complete interrupt flag (x = 3..0)
    CHTIF3 // at 26: Stream x clear half transfer interrupt flag (x = 3..0)
    CTEIF3 // at 25: Stream x clear transfer error interrupt flag (x = 3..0)
    CDMEIF3 // at 24: Stream x clear direct mode error interrupt flag (x = 3..0)
    1
    CFEIF3 // at 22: Stream x clear FIFO error interrupt flag (x = 3..0)
    CTCIF2 // at 21: Stream x clear transfer complete interrupt flag (x = 3..0)
    CHTIF2 // at 20: Stream x clear half transfer interrupt flag (x = 3..0)
    CTEIF2 // at 19: Stream x clear transfer error interrupt flag (x = 3..0)
    CDMEIF2 // at 18: Stream x clear direct mode error interrupt flag (x = 3..0)
    1
    CFEIF2 // at 16: Stream x clear FIFO error interrupt flag (x = 3..0)
    4
    CTCIF1 // at 11: Stream x clear transfer complete interrupt flag (x = 3..0)
    CHTIF1 // at 10: Stream x clear half transfer interrupt flag (x = 3..0)
    CTEIF1 // at 9: Stream x clear transfer error interrupt flag (x = 3..0)
    CDMEIF1 // at 8: Stream x clear direct mode error interrupt flag (x = 3..0)
    1
    CFEIF1 // at 6: Stream x clear FIFO error interrupt flag (x = 3..0)
    CTCIF0 // at 5: Stream x clear transfer complete interrupt flag (x = 3..0)
    CHTIF0 // at 4: Stream x clear half transfer interrupt flag (x = 3..0)
    CTEIF0 // at 3: Stream x clear transfer error interrupt flag (x = 3..0)
    CDMEIF0 // at 2: Stream x clear direct mode error interrupt flag (x = 3..0)
    1
    CFEIF0 // at 0: Stream x clear FIFO error interrupt flag (x = 3..0)
  }

//---  Register HIFCR: high interrupt flag clear register
  HIFCR @offset 0xc $u32 {
    4
    CTCIF7 // at 27: Stream x clear transfer complete interrupt flag (x = 7..4)
    CHTIF7 // at 26: Stream x clear half transfer interrupt flag (x = 7..4)
    CTEIF7 // at 25: Stream x clear transfer error interrupt flag (x = 7..4)
    CDMEIF7 // at 24: Stream x clear direct mode error interrupt flag (x = 7..4)
    1
    CFEIF7 // at 22: Stream x clear FIFO error interrupt flag (x = 7..4)
    CTCIF6 // at 21: Stream x clear transfer complete interrupt flag (x = 7..4)
    CHTIF6 // at 20: Stream x clear half transfer interrupt flag (x = 7..4)
    CTEIF6 // at 19: Stream x clear transfer error interrupt flag (x = 7..4)
    CDMEIF6 // at 18: Stream x clear direct mode error interrupt flag (x = 7..4)
    1
    CFEIF6 // at 16: Stream x clear FIFO error interrupt flag (x = 7..4)
    4
    CTCIF5 // at 11: Stream x clear transfer complete interrupt flag (x = 7..4)
    CHTIF5 // at 10: Stream x clear half transfer interrupt flag (x = 7..4)
    CTEIF5 // at 9: Stream x clear transfer error interrupt flag (x = 7..4)
    CDMEIF5 // at 8: Stream x clear direct mode error interrupt flag (x = 7..4)
    1
    CFEIF5 // at 6: Stream x clear FIFO error interrupt flag (x = 7..4)
    CTCIF4 // at 5: Stream x clear transfer complete interrupt flag (x = 7..4)
    CHTIF4 // at 4: Stream x clear half transfer interrupt flag (x = 7..4)
    CTEIF4 // at 3: Stream x clear transfer error interrupt flag (x = 7..4)
    CDMEIF4 // at 2: Stream x clear direct mode error interrupt flag (x = 7..4)
    1
    CFEIF4 // at 0: Stream x clear FIFO error interrupt flag (x = 7..4)
  }

//---  Register S0CR: stream x configuration register
  S0CR @offset 0x10 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    1
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S0NDTR: stream x number of data register
  S0NDTR @offset 0x14 $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S0PAR: stream x peripheral address register
  S0PAR @offset 0x18 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S0M0AR: stream x memory 0 address register
  S0M0AR @offset 0x1c $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S0M1AR: stream x memory 1 address register
  S0M1AR @offset 0x20 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S0FCR: stream x FIFO control register
  S0FCR @offset 0x24 $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S1CR: stream x configuration register
  S1CR @offset 0x28 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S1NDTR: stream x number of data register
  S1NDTR @offset 0x2c $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S1PAR: stream x peripheral address register
  S1PAR @offset 0x30 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S1M0AR: stream x memory 0 address register
  S1M0AR @offset 0x34 $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S1M1AR: stream x memory 1 address register
  S1M1AR @offset 0x38 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S1FCR: stream x FIFO control register
  S1FCR @offset 0x3c $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S2CR: stream x configuration register
  S2CR @offset 0x40 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S2NDTR: stream x number of data register
  S2NDTR @offset 0x44 $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S2PAR: stream x peripheral address register
  S2PAR @offset 0x48 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S2M0AR: stream x memory 0 address register
  S2M0AR @offset 0x4c $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S2M1AR: stream x memory 1 address register
  S2M1AR @offset 0x50 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S2FCR: stream x FIFO control register
  S2FCR @offset 0x54 $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S3CR: stream x configuration register
  S3CR @offset 0x58 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S3NDTR: stream x number of data register
  S3NDTR @offset 0x5c $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S3PAR: stream x peripheral address register
  S3PAR @offset 0x60 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S3M0AR: stream x memory 0 address register
  S3M0AR @offset 0x64 $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S3M1AR: stream x memory 1 address register
  S3M1AR @offset 0x68 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S3FCR: stream x FIFO control register
  S3FCR @offset 0x6c $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S4CR: stream x configuration register
  S4CR @offset 0x70 $u32 {
    4
    CHSEL:3 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S4NDTR: stream x number of data register
  S4NDTR @offset 0x74 $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S4PAR: stream x peripheral address register
  S4PAR @offset 0x78 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S4M0AR: stream x memory 0 address register
  S4M0AR @offset 0x7c $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S4M1AR: stream x memory 1 address register
  S4M1AR @offset 0x80 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S4FCR: stream x FIFO control register
  S4FCR @offset 0x84 $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S5CR: stream x configuration register
  S5CR @offset 0x88 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S5NDTR: stream x number of data register
  S5NDTR @offset 0x8c $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S5PAR: stream x peripheral address register
  S5PAR @offset 0x90 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S5M0AR: stream x memory 0 address register
  S5M0AR @offset 0x94 $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S5M1AR: stream x memory 1 address register
  S5M1AR @offset 0x98 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S5FCR: stream x FIFO control register
  S5FCR @offset 0x9c $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S6CR: stream x configuration register
  S6CR @offset 0xa0 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S6NDTR: stream x number of data register
  S6NDTR @offset 0xa4 $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S6PAR: stream x peripheral address register
  S6PAR @offset 0xa8 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S6M0AR: stream x memory 0 address register
  S6M0AR @offset 0xac $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S6M1AR: stream x memory 1 address register
  S6M1AR @offset 0xb0 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S6FCR: stream x FIFO control register
  S6FCR @offset 0xb4 $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

//---  Register S7CR: stream x configuration register
  S7CR @offset 0xb8 $u32 {
    3
    CHSEL:4 // at 25: Channel selection
    MBURST:2 // at 23: Memory burst transfer configuration
    PBURST:2 // at 21: Peripheral burst transfer configuration
    ACK // at 20: ACK
    CT // at 19: Current target (only in double buffer mode)
    DBM // at 18: Double buffer mode
    PL:2 // at 16: Priority level
    PINCOS // at 15: Peripheral increment offset size
    MSIZE:2 // at 13: Memory data size
    PSIZE:2 // at 11: Peripheral data size
    MINC // at 10: Memory increment mode
    PINC // at 9: Peripheral increment mode
    CIRC // at 8: Circular mode
    DIR:2 // at 6: Data transfer direction
    PFCTRL // at 5: Peripheral flow controller
    TCIE // at 4: Transfer complete interrupt enable
    HTIE // at 3: Half transfer interrupt enable
    TEIE // at 2: Transfer error interrupt enable
    DMEIE // at 1: Direct mode error interrupt enable
    EN // at 0: Stream enable / flag stream ready when read low
  }

//---  Register S7NDTR: stream x number of data register
  S7NDTR @offset 0xbc $u32 {
    16
    NDT:16 // at 0: Number of data items to transfer
  }

//---  Register S7PAR: stream x peripheral address register
  S7PAR @offset 0xc0 $u32 {
    PA:32 // at 0: Peripheral address
  }

//---  Register S7M0AR: stream x memory 0 address register
  S7M0AR @offset 0xc4 $u32 {
    M0A:32 // at 0: Memory 0 address
  }

//---  Register S7M1AR: stream x memory 1 address register
  S7M1AR @offset 0xc8 $u32 {
    M1A:32 // at 0: Memory 1 address (used in case of Double buffer mode)
  }

//---  Register S7FCR: stream x FIFO control register
  S7FCR @offset 0xcc $u32 {
    24
    FEIE // at 7: FIFO error interrupt enable
    1
    FS:3 // at 3: FIFO status
    DMDIS // at 2: Direct mode disable
    FTH:2 // at 0: FIFO threshold selection
  }

}

//------------------------------------------------------------------------------
// Peripheral DMA2D: DMA2D controller
//------------------------------------------------------------------------------

registers ©DMA2D @at 0x4002b000 {
//---  Register CR: control register
  CR @offset 0x0 $u32 {
    14
    MODE:2 // at 16: DMA2D mode
    2
    CEIE // at 13: Configuration Error Interrupt Enable
    CTCIE // at 12: CLUT transfer complete interrupt enable
    CAEIE // at 11: CLUT access error interrupt enable
    TWIE // at 10: Transfer watermark interrupt enable
    TCIE // at 9: Transfer complete interrupt enable
    TEIE // at 8: Transfer error interrupt enable
    5
    ABORT // at 2: Abort
    SUSP // at 1: Suspend
    START // at 0: Start
  }

//---  Register ISR: Interrupt Status Register
  ISR @offset 0x4 @ro $u32 {
    26
    CEIF // at 5: Configuration error interrupt flag
    CTCIF // at 4: CLUT transfer complete interrupt flag
    CAEIF // at 3: CLUT access error interrupt flag
    TWIF // at 2: Transfer watermark interrupt flag
    TCIF // at 1: Transfer complete interrupt flag
    TEIF // at 0: Transfer error interrupt flag
  }

//---  Register IFCR: interrupt flag clear register
  IFCR @offset 0x8 $u32 {
    26
    CCEIF // at 5: Clear configuration error interrupt flag
    CCTCIF // at 4: Clear CLUT transfer complete interrupt flag
    CAECIF // at 3: Clear CLUT access error interrupt flag
    CTWIF // at 2: Clear transfer watermark interrupt flag
    CTCIF // at 1: Clear transfer complete interrupt flag
    CTEIF // at 0: Clear Transfer error interrupt flag
  }

//---  Register FGMAR: foreground memory address register
  FGMAR @offset 0xc $u32 {
    MA:32 // at 0: Memory address
  }

//---  Register FGOR: foreground offset register
  FGOR @offset 0x10 $u32 {
    18
    LO:14 // at 0: Line offset
  }

//---  Register BGMAR: background memory address register
  BGMAR @offset 0x14 $u32 {
    MA:32 // at 0: Memory address
  }

//---  Register BGOR: background offset register
  BGOR @offset 0x18 $u32 {
    18
    LO:14 // at 0: Line offset
  }

//---  Register FGPFCCR: foreground PFC control register
  FGPFCCR @offset 0x1c $u32 {
    ALPHA:8 // at 24: Alpha value
    6
    AM:2 // at 16: Alpha mode
    CS:8 // at 8: CLUT size
    2
    START // at 5: Start
    CCM // at 4: CLUT color mode
    CM:4 // at 0: Color mode
  }

//---  Register FGCOLR: foreground color register
  FGCOLR @offset 0x20 $u32 {
    8
    RED:8 // at 16: Red Value
    GREEN:8 // at 8: Green Value
    BLUE:8 // at 0: Blue Value
  }

//---  Register BGPFCCR: background PFC control register
  BGPFCCR @offset 0x24 $u32 {
    ALPHA:8 // at 24: Alpha value
    6
    AM:2 // at 16: Alpha mode
    CS:8 // at 8: CLUT size
    2
    START // at 5: Start
    CCM // at 4: CLUT Color mode
    CM:4 // at 0: Color mode
  }

//---  Register BGCOLR: background color register
  BGCOLR @offset 0x28 $u32 {
    8
    RED:8 // at 16: Red Value
    GREEN:8 // at 8: Green Value
    BLUE:8 // at 0: Blue Value
  }

//---  Register FGCMAR: foreground CLUT memory address register
  FGCMAR @offset 0x2c $u32 {
    MA:32 // at 0: Memory Address
  }

//---  Register BGCMAR: background CLUT memory address register
  BGCMAR @offset 0x30 $u32 {
    MA:32 // at 0: Memory address
  }

//---  Register OPFCCR: output PFC control register
  OPFCCR @offset 0x34 $u32 {
    29
    CM:3 // at 0: Color mode
  }

//---  Register OCOLR: output color register
  OCOLR @offset 0x38 $u32 {
    APLHA:8 // at 24: Alpha Channel Value
    RED:8 // at 16: Red Value
    GREEN:8 // at 8: Green Value
    BLUE:8 // at 0: Blue Value
  }

//---  Register OMAR: output memory address register
  OMAR @offset 0x3c $u32 {
    MA:32 // at 0: Memory Address
  }

//---  Register OOR: output offset register
  OOR @offset 0x40 $u32 {
    18
    LO:14 // at 0: Line Offset
  }

//---  Register NLR: number of line register
  NLR @offset 0x44 $u32 {
    2
    PL:14 // at 16: Pixel per lines
    NL:16 // at 0: Number of lines
  }

//---  Register LWR: line watermark register
  LWR @offset 0x48 $u32 {
    16
    LW:16 // at 0: Line watermark
  }

//---  Register AMTCR: AHB master timer configuration register
  AMTCR @offset 0x4c $u32 {
    16
    DT:8 // at 8: Dead Time
    7
    EN // at 0: Enable
  }

//---  Register FGCLUT: FGCLUT
  FGCLUT @offset 0x400 $u32 {
    APLHA:8 // at 24: APLHA
    RED:8 // at 16: RED
    GREEN:8 // at 8: GREEN
    BLUE:8 // at 0: BLUE
  }

//---  Register BGCLUT: BGCLUT
  BGCLUT @offset 0x800 $u32 {
    APLHA:8 // at 24: APLHA
    RED:8 // at 16: RED
    GREEN:8 // at 8: GREEN
    BLUE:8 // at 0: BLUE
  }

}

//------------------------------------------------------------------------------
// Peripheral DSI: DSI Host
//------------------------------------------------------------------------------

registers ©DSI @at 0x40016c00 {
//---  Register DSI_VR: DSI Host Version Register
  DSI_VR @offset 0x0 @ro $u32 {
    VERSION:32 // at 0: Version of the DSI Host
  }

//---  Register DSI_CR: DSI Host Control Register
  DSI_CR @offset 0x4 $u32 {
    31
    EN // at 0: Enable
  }

//---  Register DSI_CCR: DSI HOST Clock Control Register
  DSI_CCR @offset 0x8 $u32 {
    16
    TOCKDIV:8 // at 8: Timeout Clock Division
    TXECKDIV:8 // at 0: TX Escape Clock Division
  }

//---  Register DSI_LVCIDR: DSI Host LTDC VCID Register
  DSI_LVCIDR @offset 0xc $u32 {
    30
    VCID:2 // at 0: Virtual Channel ID
  }

//---  Register DSI_LCOLCR: DSI Host LTDC Color Coding Register
  DSI_LCOLCR @offset 0x10 $u32 {
    23
    LPE // at 8: Loosely Packet Enable
    4
    COLC:4 // at 0: Color Coding
  }

//---  Register DSI_LPCR: DSI Host LTDC Polarity Configuration Register
  DSI_LPCR @offset 0x14 $u32 {
    29
    HSP // at 2: HSYNC Polarity
    VSP // at 1: VSYNC Polarity
    DEP // at 0: Data Enable Polarity
  }

//---  Register DSI_LPMCR: DSI Host Low-Power mode Configuration Register
  DSI_LPMCR @offset 0x18 $u32 {
    8
    LPSIZE:8 // at 16: Largest Packet Size
    8
    VLPSIZE:8 // at 0: VACT Largest Packet Size
  }

//---  Register DSI_PCR: DSI Host Protocol Configuration Register
  DSI_PCR @offset 0x2c $u32 {
    27
    CRCRXE // at 4: CRC Reception Enable
    ECCRXE // at 3: ECC Reception Enable
    BTAE // at 2: Bus Turn Around Enable
    ETRXE // at 1: EoTp Reception Enable
    ETTXE // at 0: EoTp Transmission Enable
  }

//---  Register DSI_GVCIDR: DSI Host Generic VCID Register
  DSI_GVCIDR @offset 0x30 $u32 {
    30
    VCID:2 // at 0: Virtual Channel ID
  }

//---  Register DSI_MCR: DSI Host mode Configuration Register
  DSI_MCR @offset 0x34 $u32 {
    31
    CMDM // at 0: Command mode
  }

//---  Register DSI_VMCR: DSI Host Video mode Configuration Register
  DSI_VMCR @offset 0x38 $u32 {
    7
    PGO // at 24: Pattern Generator Orientation
    3
    PGM // at 20: Pattern Generator mode
    3
    PGE // at 16: Pattern Generator Enable
    LPCE // at 15: Low-Power Command Enable
    FBTAAE // at 14: Frame Bus-Turn-Around Acknowledge Enable
    LPHFPE // at 13: Low-Power Horizontal Front-Porch Enable
    LPHBPE // at 12: Low-Power Horizontal Back-Porch Enable
    LPVAE // at 11: Low-Power Vertical Active Enable
    LPVFPE // at 10: Low-power Vertical Front-porch Enable
    LPVBPE // at 9: Low-power Vertical Back-Porch Enable
    LPVSAE // at 8: Low-Power Vertical Sync Active Enable
    6
    VMT:2 // at 0: Video mode Type
  }

//---  Register DSI_VPCR: DSI Host Video Packet Configuration Register
  DSI_VPCR @offset 0x3c $u32 {
    18
    VPSIZE:14 // at 0: Video Packet Size
  }

//---  Register DSI_VCCR: DSI Host Video Chunks Configuration Register
  DSI_VCCR @offset 0x40 $u32 {
    19
    NUMC:13 // at 0: Number of Chunks
  }

//---  Register DSI_VNPCR: DSI Host Video Null Packet Configuration Register
  DSI_VNPCR @offset 0x44 $u32 {
    19
    NPSIZE:13 // at 0: Null Packet Size
  }

//---  Register DSI_VHSACR: DSI Host Video HSA Configuration Register
  DSI_VHSACR @offset 0x48 $u32 {
    20
    HSA:12 // at 0: Horizontal Synchronism Active duration
  }

//---  Register DSI_VHBPCR: DSI Host Video HBP Configuration Register
  DSI_VHBPCR @offset 0x4c $u32 {
    20
    HBP:12 // at 0: Horizontal Back-Porch duration
  }

//---  Register DSI_VLCR: DSI Host Video Line Configuration Register
  DSI_VLCR @offset 0x50 $u32 {
    17
    HLINE:15 // at 0: Horizontal Line duration
  }

//---  Register DSI_VVSACR: DSI Host Video VSA Configuration Register
  DSI_VVSACR @offset 0x54 $u32 {
    22
    VSA:10 // at 0: Vertical Synchronism Active duration
  }

//---  Register DSI_VVBPCR: DSI Host Video VBP Configuration Register
  DSI_VVBPCR @offset 0x58 $u32 {
    22
    VBP:10 // at 0: Vertical Back-Porch duration
  }

//---  Register DSI_VVFPCR: DSI Host Video VFP Configuration Register
  DSI_VVFPCR @offset 0x5c $u32 {
    22
    VFP:10 // at 0: Vertical Front-Porch duration
  }

//---  Register DSI_VVACR: DSI Host Video VA Configuration Register
  DSI_VVACR @offset 0x60 $u32 {
    18
    VA:14 // at 0: Vertical Active duration
  }

//---  Register DSI_LCCR: DSI Host LTDC Command Configuration Register
  DSI_LCCR @offset 0x64 $u32 {
    16
    CMDSIZE:16 // at 0: Command Size
  }

//---  Register DSI_CMCR: DSI Host Command mode Configuration Register
  DSI_CMCR @offset 0x68 $u32 {
    7
    MRDPS // at 24: Maximum Read Packet Size
    4
    DLWTX // at 19: DCS Long Write Transmission
    DSR0TX // at 18: DCS Short Read Zero parameter Transmission
    DSW1TX // at 17: DCS Short Read One parameter Transmission
    DSW0TX // at 16: DCS Short Write Zero parameter Transmission
    1
    GLWTX // at 14: Generic Long Write Transmission
    GSR2TX // at 13: Generic Short Read Two parameters Transmission
    GSR1TX // at 12: Generic Short Read One parameters Transmission
    GSR0TX // at 11: Generic Short Read Zero parameters Transmission
    GSW2TX // at 10: Generic Short Write Two parameters Transmission
    GSW1TX // at 9: Generic Short Write One parameters Transmission
    GSW0TX // at 8: Generic Short Write Zero parameters Transmission
    6
    ARE // at 1: Acknowledge Request Enable
    TEARE // at 0: Tearing Effect Acknowledge Request Enable
  }

//---  Register DSI_GHCR: DSI Host Generic Header Configuration Register
  DSI_GHCR @offset 0x6c $u32 {
    8
    WCMSB:8 // at 16: WordCount MSB
    WCLSB:8 // at 8: WordCount LSB
    VCID:2 // at 6: Channel
    DT:6 // at 0: Type
  }

//---  Register DSI_GPDR: DSI Host Generic Payload Data Register
  DSI_GPDR @offset 0x70 $u32 {
    DATA4:8 // at 24: Payload Byte 4
    DATA3:8 // at 16: Payload Byte 3
    DATA2:8 // at 8: Payload Byte 2
    DATA1:8 // at 0: Payload Byte 1
  }

//---  Register DSI_GPSR: DSI Host Generic Packet Status Register
  DSI_GPSR @offset 0x74 @ro $u32 {
    25
    RCB // at 6: Read Command Busy
    PRDFF // at 5: Payload Read FIFO Full
    PRDFE // at 4: Payload Read FIFO Empty
    PWRFF // at 3: Payload Write FIFO Full
    PWRFE // at 2: Payload Write FIFO Empty
    CMDFF // at 1: Command FIFO Full
    CMDFE // at 0: Command FIFO Empty
  }

//---  Register DSI_TCCR0: DSI Host Timeout Counter Configuration Register 0
  DSI_TCCR0 @offset 0x78 $u32 {
    HSTX_TOCNT:16 // at 16: High-Speed Transmission Timeout Counter
    LPRX_TOCNT:16 // at 0: Low-power Reception Timeout Counter
  }

//---  Register DSI_TCCR1: DSI Host Timeout Counter Configuration Register 1
  DSI_TCCR1 @offset 0x7c $u32 {
    16
    HSRD_TOCNT:16 // at 0: High-Speed Read Timeout Counter
  }

//---  Register DSI_TCCR2: DSI Host Timeout Counter Configuration Register 2
  DSI_TCCR2 @offset 0x80 $u32 {
    16
    LPRD_TOCNT:16 // at 0: Low-Power Read Timeout Counter
  }

//---  Register DSI_TCCR3: DSI Host Timeout Counter Configuration Register 3
  DSI_TCCR3 @offset 0x84 $u32 {
    7
    PM // at 24: Presp mode
    8
    HSWR_TOCNT:16 // at 0: High-Speed Write Timeout Counter
  }

//---  Register DSI_TCCR4: DSI Host Timeout Counter Configuration Register 4
  DSI_TCCR4 @offset 0x88 $u32 {
    16
    LSWR_TOCNT:16 // at 0: Low-Power Write Timeout Counter
  }

//---  Register DSI_TCCR5: DSI Host Timeout Counter Configuration Register 5
  DSI_TCCR5 @offset 0x8c $u32 {
    16
    BTA_TOCNT:16 // at 0: Bus-Turn-Around Timeout Counter
  }

//---  Register DSI_CLCR: DSI Host Clock Lane Configuration Register
  DSI_CLCR @offset 0x94 $u32 {
    30
    ACR // at 1: Automatic Clock lane Control
    DPCC // at 0: D-PHY Clock Control
  }

//---  Register DSI_CLTCR: DSI Host Clock Lane Timer Configuration Register
  DSI_CLTCR @offset 0x98 $u32 {
    6
    HS2LP_TIME:10 // at 16: High-Speed to Low-Power Time
    6
    LP2HS_TIME:10 // at 0: Low-Power to High-Speed Time
  }

//---  Register DSI_DLTCR: DSI Host Data Lane Timer Configuration Register
  DSI_DLTCR @offset 0x9c $u32 {
    HS2LP_TIME:8 // at 24: High-Speed To Low-Power Time
    LP2HS_TIME:8 // at 16: Low-Power To High-Speed Time
    1
    MRD_TIME:15 // at 0: Maximum Read Time
  }

//---  Register DSI_PCTLR: DSI Host PHY Control Register
  DSI_PCTLR @offset 0xa0 $u32 {
    29
    CKE // at 2: Clock Enable
    DEN // at 1: Digital Enable
    1
  }

//---  Register DSI_PCONFR: DSI Host PHY Configuration Register
  DSI_PCONFR @offset 0xa4 $u32 {
    16
    SW_TIME:8 // at 8: Stop Wait Time
    6
    NL:2 // at 0: Number of Lanes
  }

//---  Register DSI_PUCR: DSI Host PHY ULPS Control Register
  DSI_PUCR @offset 0xa8 $u32 {
    28
    UEDL // at 3: ULPS Exit on Data Lane
    URDL // at 2: ULPS Request on Data Lane
    UECL // at 1: ULPS Exit on Clock Lane
    URCL // at 0: ULPS Request on Clock Lane
  }

//---  Register DSI_PTTCR: DSI Host PHY TX Triggers Configuration Register
  DSI_PTTCR @offset 0xac $u32 {
    28
    TX_TRIG:4 // at 0: Transmission Trigger
  }

//---  Register DSI_PSR: DSI Host PHY Status Register
  DSI_PSR @offset 0xb0 @ro $u32 {
    23
    UAN1 // at 8: ULPS Active Not lane 1
    PSS1 // at 7: PHY Stop State lane 1
    RUE0 // at 6: RX ULPS Escape lane 0
    UAN0 // at 5: ULPS Active Not lane 1
    PSS0 // at 4: PHY Stop State lane 0
    UANC // at 3: ULPS Active Not Clock lane
    PSSC // at 2: PHY Stop State Clock lane
    PD // at 1: PHY Direction
    1
  }

//---  Register DSI_ISR0: DSI Host Interrupt & Status Register 0
  DSI_ISR0 @offset 0xbc @ro $u32 {
    11
    PE4 // at 20: PHY Error 4
    PE3 // at 19: PHY Error 3
    PE2 // at 18: PHY Error 2
    PE1 // at 17: PHY Error 1
    PE0 // at 16: PHY Error 0
    AE15 // at 15: Acknowledge Error 15
    AE14 // at 14: Acknowledge Error 14
    AE13 // at 13: Acknowledge Error 13
    AE12 // at 12: Acknowledge Error 12
    AE11 // at 11: Acknowledge Error 11
    AE10 // at 10: Acknowledge Error 10
    AE9 // at 9: Acknowledge Error 9
    AE8 // at 8: Acknowledge Error 8
    AE7 // at 7: Acknowledge Error 7
    AE6 // at 6: Acknowledge Error 6
    AE5 // at 5: Acknowledge Error 5
    AE4 // at 4: Acknowledge Error 4
    AE3 // at 3: Acknowledge Error 3
    AE2 // at 2: Acknowledge Error 2
    AE1 // at 1: Acknowledge Error 1
    AE0 // at 0: Acknowledge Error 0
  }

//---  Register DSI_ISR1: DSI Host Interrupt & Status Register 1
  DSI_ISR1 @offset 0xc0 @ro $u32 {
    19
    GPRXE // at 12: Generic Payload Receive Error
    GPRDE // at 11: Generic Payload Read Error
    GPTXE // at 10: Generic Payload Transmit Error
    GPWRE // at 9: Generic Payload Write Error
    GCWRE // at 8: Generic Command Write Error
    LPWRE // at 7: LTDC Payload Write Error
    EOTPE // at 6: EoTp Error
    PSE // at 5: Packet Size Error
    CRCE // at 4: CRC Error
    ECCME // at 3: ECC Multi-bit Error
    ECCSE // at 2: ECC Single-bit Error
    TOLPRX // at 1: Timeout Low-Power Reception
    TOHSTX // at 0: Timeout High-Speed Transmission
  }

//---  Register DSI_IER0: DSI Host Interrupt Enable Register 0
  DSI_IER0 @offset 0xc4 $u32 {
    11
    PE4IE // at 20: PHY Error 4 Interrupt Enable
    PE3IE // at 19: PHY Error 3 Interrupt Enable
    PE2IE // at 18: PHY Error 2 Interrupt Enable
    PE1IE // at 17: PHY Error 1 Interrupt Enable
    PE0IE // at 16: PHY Error 0 Interrupt Enable
    AE15IE // at 15: Acknowledge Error 15 Interrupt Enable
    AE14IE // at 14: Acknowledge Error 14 Interrupt Enable
    AE13IE // at 13: Acknowledge Error 13 Interrupt Enable
    AE12IE // at 12: Acknowledge Error 12 Interrupt Enable
    AE11IE // at 11: Acknowledge Error 11 Interrupt Enable
    AE10IE // at 10: Acknowledge Error 10 Interrupt Enable
    AE9IE // at 9: Acknowledge Error 9 Interrupt Enable
    AE8IE // at 8: Acknowledge Error 8 Interrupt Enable
    AE7IE // at 7: Acknowledge Error 7 Interrupt Enable
    AE6IE // at 6: Acknowledge Error 6 Interrupt Enable
    AE5IE // at 5: Acknowledge Error 5 Interrupt Enable
    AE4IE // at 4: Acknowledge Error 4 Interrupt Enable
    AE3IE // at 3: Acknowledge Error 3 Interrupt Enable
    AE2IE // at 2: Acknowledge Error 2 Interrupt Enable
    AE1IE // at 1: Acknowledge Error 1 Interrupt Enable
    AE0IE // at 0: Acknowledge Error 0 Interrupt Enable
  }

//---  Register DSI_IER1: DSI Host Interrupt Enable Register 1
  DSI_IER1 @offset 0xc8 $u32 {
    19
    GPRXEIE // at 12: Generic Payload Receive Error Interrupt Enable
    GPRDEIE // at 11: Generic Payload Read Error Interrupt Enable
    GPTXEIE // at 10: Generic Payload Transmit Error Interrupt Enable
    GPWREIE // at 9: Generic Payload Write Error Interrupt Enable
    GCWREIE // at 8: Generic Command Write Error Interrupt Enable
    LPWREIE // at 7: LTDC Payload Write Error Interrupt Enable
    EOTPEIE // at 6: EoTp Error Interrupt Enable
    PSEIE // at 5: Packet Size Error Interrupt Enable
    CRCEIE // at 4: CRC Error Interrupt Enable
    ECCMEIE // at 3: ECC Multi-bit Error Interrupt Enable
    ECCSEIE // at 2: ECC Single-bit Error Interrupt Enable
    TOLPRXIE // at 1: Timeout Low-Power Reception Interrupt Enable
    TOHSTXIE // at 0: Timeout High-Speed Transmission Interrupt Enable
  }

//---  Register DSI_FIR0: DSI Host Force Interrupt Register 0
  DSI_FIR0 @offset 0xd8 $u32 {
    11
    FPE4 // at 20: Force PHY Error 4
    FPE3 // at 19: Force PHY Error 3
    FPE2 // at 18: Force PHY Error 2
    FPE1 // at 17: Force PHY Error 1
    FPE0 // at 16: Force PHY Error 0
    FAE15 // at 15: Force Acknowledge Error 15
    FAE14 // at 14: Force Acknowledge Error 14
    FAE13 // at 13: Force Acknowledge Error 13
    FAE12 // at 12: Force Acknowledge Error 12
    FAE11 // at 11: Force Acknowledge Error 11
    FAE10 // at 10: Force Acknowledge Error 10
    FAE9 // at 9: Force Acknowledge Error 9
    FAE8 // at 8: Force Acknowledge Error 8
    FAE7 // at 7: Force Acknowledge Error 7
    FAE6 // at 6: Force Acknowledge Error 6
    FAE5 // at 5: Force Acknowledge Error 5
    FAE4 // at 4: Force Acknowledge Error 4
    FAE3 // at 3: Force Acknowledge Error 3
    FAE2 // at 2: Force Acknowledge Error 2
    FAE1 // at 1: Force Acknowledge Error 1
    FAE0 // at 0: Force Acknowledge Error 0
  }

//---  Register DSI_FIR1: DSI Host Force Interrupt Register 1
  DSI_FIR1 @offset 0xdc $u32 {
    19
    FGPRXE // at 12: Force Generic Payload Receive Error
    FGPRDE // at 11: Force Generic Payload Read Error
    FGPTXE // at 10: Force Generic Payload Transmit Error
    FGPWRE // at 9: Force Generic Payload Write Error
    FGCWRE // at 8: Force Generic Command Write Error
    FLPWRE // at 7: Force LTDC Payload Write Error
    FEOTPE // at 6: Force EoTp Error
    FPSE // at 5: Force Packet Size Error
    FCRCE // at 4: Force CRC Error
    FECCME // at 3: Force ECC Multi-bit Error
    FECCSE // at 2: Force ECC Single-bit Error
    FTOLPRX // at 1: Force Timeout Low-Power Reception
    FTOHSTX // at 0: Force Timeout High-Speed Transmission
  }

//---  Register DSI_VSCR: DSI Host Video Shadow Control Register
  DSI_VSCR @offset 0x100 $u32 {
    23
    UR // at 8: Update Register
    7
    EN // at 0: Enable
  }

//---  Register DSI_LCVCIDR: DSI Host LTDC Current VCID Register
  DSI_LCVCIDR @offset 0x10c @ro $u32 {
    30
    VCID:2 // at 0: Virtual Channel ID
  }

//---  Register DSI_LCCCR: DSI Host LTDC Current Color Coding Register
  DSI_LCCCR @offset 0x110 @ro $u32 {
    23
    LPE // at 8: Loosely Packed Enable
    4
    COLC:4 // at 0: Color Coding
  }

//---  Register DSI_LPMCCR: DSI Host Low-Power mode Current Configuration Register
  DSI_LPMCCR @offset 0x118 @ro $u32 {
    8
    LPSIZE:8 // at 16: Largest Packet Size
    8
    VLPSIZE:8 // at 0: VACT Largest Packet Size
  }

//---  Register DSI_VMCCR: DSI Host Video mode Current Configuration Register
  DSI_VMCCR @offset 0x138 @ro $u32 {
    22
    LPCE // at 9: Low-Power Command Enable
    FBTAAE // at 8: Frame BTA Acknowledge Enable
    LPHFE // at 7: Low-Power Horizontal Front-Porch Enable
    LPHBPE // at 6: Low-power Horizontal Back-Porch Enable
    LPVAE // at 5: Low-Power Vertical Active Enable
    LPVFPE // at 4: Low-power Vertical Front-Porch Enable
    LPVBPE // at 3: Low-power Vertical Back-Porch Enable
    LPVSAE // at 2: Low-Power Vertical Sync time Enable
    VMT:2 // at 0: Video mode Type
  }

//---  Register DSI_VPCCR: DSI Host Video Packet Current Configuration Register
  DSI_VPCCR @offset 0x13c @ro $u32 {
    18
    VPSIZE:14 // at 0: Video Packet Size
  }

//---  Register DSI_VCCCR: DSI Host Video Chunks Current Configuration Register
  DSI_VCCCR @offset 0x140 @ro $u32 {
    19
    NUMC:13 // at 0: Number of Chunks
  }

//---  Register DSI_VNPCCR: DSI Host Video Null Packet Current Configuration Register
  DSI_VNPCCR @offset 0x144 @ro $u32 {
    19
    NPSIZE:13 // at 0: Null Packet Size
  }

//---  Register DSI_VHSACCR: DSI Host Video HSA Current Configuration Register
  DSI_VHSACCR @offset 0x148 @ro $u32 {
    20
    HSA:12 // at 0: Horizontal Synchronism Active duration
  }

//---  Register DSI_VHBPCCR: DSI Host Video HBP Current Configuration Register
  DSI_VHBPCCR @offset 0x14c @ro $u32 {
    20
    HBP:12 // at 0: Horizontal Back-Porch duration
  }

//---  Register DSI_VLCCR: DSI Host Video Line Current Configuration Register
  DSI_VLCCR @offset 0x150 @ro $u32 {
    17
    HLINE:15 // at 0: Horizontal Line duration
  }

//---  Register DSI_VVSACCR: DSI Host Video VSA Current Configuration Register
  DSI_VVSACCR @offset 0x154 @ro $u32 {
    22
    VSA:10 // at 0: Vertical Synchronism Active duration
  }

//---  Register DSI_VVBPCCR: DSI Host Video VBP Current Configuration Register
  DSI_VVBPCCR @offset 0x158 @ro $u32 {
    22
    VBP:10 // at 0: Vertical Back-Porch duration
  }

//---  Register DSI_VVFPCCR: DSI Host Video VFP Current Configuration Register
  DSI_VVFPCCR @offset 0x15c @ro $u32 {
    22
    VFP:10 // at 0: Vertical Front-Porch duration
  }

//---  Register DSI_VVACCR: DSI Host Video VA Current Configuration Register
  DSI_VVACCR @offset 0x160 @ro $u32 {
    18
    VA:14 // at 0: Vertical Active duration
  }

//---  Register DSI_WCFGR: DSI Wrapper Configuration Register
  DSI_WCFGR @offset 0x400 $u32 {
    24
    VSPOL // at 7: VSync Polarity
    AR // at 6: Automatic Refresh
    TEPOL // at 5: TE Polarity
    TESRC // at 4: TE Source
    COLMUX:3 // at 1: Color Multiplexing
    DSIM // at 0: DSI Mode
  }

//---  Register DSI_WCR: DSI Wrapper Control Register
  DSI_WCR @offset 0x404 $u32 {
    28
    DSIEN // at 3: DSI Enable
    LTDCEN // at 2: LTDC Enable
    SHTDN // at 1: Shutdown
    COLM // at 0: Color Mode
  }

//---  Register DSI_WIER: DSI Wrapper Interrupt Enable Register
  DSI_WIER @offset 0x408 $u32 {
    18
    RRIE // at 13: Regulator Ready Interrupt Enable
    2
    PLLUIE // at 10: PLL Unlock Interrupt Enable
    PLLLIE // at 9: PLL Lock Interrupt Enable
    7
    ERIE // at 1: End of Refresh Interrupt Enable
    TEIE // at 0: Tearing Effect Interrupt Enable
  }

//---  Register DSI_WISR: DSI Wrapper Interrupt & Status Register
  DSI_WISR @offset 0x40c @ro $u32 {
    18
    RRIF // at 13: Regulator Ready Interrupt Flag
    RRS // at 12: Regulator Ready Status
    1
    PLLUIF // at 10: PLL Unlock Interrupt Flag
    PLLLIF // at 9: PLL Lock Interrupt Flag
    PLLLS // at 8: PLL Lock Status
    5
    BUSY // at 2: Busy Flag
    ERIF // at 1: End of Refresh Interrupt Flag
    TEIF // at 0: Tearing Effect Interrupt Flag
  }

//---  Register DSI_WIFCR: DSI Wrapper Interrupt Flag Clear Register
  DSI_WIFCR @offset 0x410 $u32 {
    18
    CRRIF // at 13: Clear Regulator Ready Interrupt Flag
    2
    CPLLUIF // at 10: Clear PLL Unlock Interrupt Flag
    CPLLLIF // at 9: Clear PLL Lock Interrupt Flag
    7
    CERIF // at 1: Clear End of Refresh Interrupt Flag
    CTEIF // at 0: Clear Tearing Effect Interrupt Flag
  }

//---  Register DSI_WPCR1: DSI Wrapper PHY Configuration Register 1
  DSI_WPCR1 @offset 0x418 $u32 {
    4
    TCLKPOSTEN // at 27: custom time for tCLK-POST Enable
    TLPXCEN // at 26: custom time for tLPX for Clock lane Enable
    THSEXITEN // at 25: custom time for tHS-EXIT Enable
    TLPXDEN // at 24: custom time for tLPX for Data lanes Enable
    THSZEROEN // at 23: custom time for tHS-ZERO Enable
    THSTRAILEN // at 22: custom time for tHS-TRAIL Enable
    THSPREPEN // at 21: custom time for tHS-PREPARE Enable
    TCLKZEROEN // at 20: custom time for tCLK-ZERO Enable
    TCLKPREPEN // at 19: custom time for tCLK-PREPARE Enable
    PDEN // at 18: Pull-Down Enable
    1
    TDDL // at 16: Turn Disable Data Lanes
    1
    CDOFFDL // at 14: Contention Detection OFF on Data Lanes
    FTXSMDL // at 13: Force in TX Stop Mode the Data Lanes
    FTXSMCL // at 12: Force in TX Stop Mode the Clock Lane
    HSIDL1 // at 11: Invert the High-Speed data signal on Data Lane 1
    HSIDL0 // at 10: Invert the Hight-Speed data signal on Data Lane 0
    HSICL // at 9: Invert Hight-Speed data signal on Clock Lane
    SWDL1 // at 8: Swap Data Lane 1 pins
    SWDL0 // at 7: Swap Data Lane 0 pins
    SWCL // at 6: Swap Clock Lane pins
    UIX4:6 // at 0: Unit Interval multiplied by 4
  }

//---  Register DSI_WPCR2: DSI Wrapper PHY Configuration Register 2
  DSI_WPCR2 @offset 0x41c $u32 {
    5
    LPRXFT:2 // at 25: Low-Power RX low-pass Filtering Tuning
    2
    FLPRXLPM // at 22: Forces LP Receiver in Low-Power Mode
    2
    HSTXSRCDL:2 // at 18: High-Speed Transmission Slew Rate Control on Data Lanes
    HSTXSRCCL:2 // at 16: High-Speed Transmission Slew Rate Control on Clock Lane
    3
    SDCC // at 12: SDD Control
    2
    LPSRDL:2 // at 8: Low-Power transmission Slew Rate Compensation on Data Lanes
    LPSRCL:2 // at 6: Low-Power transmission Slew Rate Compensation on Clock Lane
    2
    HSTXDLL:2 // at 2: High-Speed Transmission Delay on Data Lanes
    HSTXDCL:2 // at 0: High-Speed Transmission Delay on Clock Lane
  }

//---  Register DSI_WPCR3: DSI Wrapper PHY Configuration Register 3
  DSI_WPCR3 @offset 0x420 $u32 {
    THSTRAIL:8 // at 24: tHSTRAIL
    THSPREP:8 // at 16: tHS-PREPARE
    TCLKZEO:8 // at 8: tCLK-ZERO
    TCLKPREP:8 // at 0: tCLK-PREPARE
  }

//---  Register DSI_WPCR4: DSI_WPCR4
  DSI_WPCR4 @offset 0x424 $u32 {
    TLPXC:8 // at 24: tLPXC for Clock lane
    THSEXIT:8 // at 16: tHSEXIT
    TLPXD:8 // at 8: tLPX for Data lanes
    THSZERO:8 // at 0: tHS-ZERO
  }

//---  Register DSI_WPCR5: DSI Wrapper PHY Configuration Register 5
  DSI_WPCR5 @offset 0x428 $u32 {
    24
    THSZERO:8 // at 0: tCLK-POST
  }

//---  Register DSI_WRPCR: DSI Wrapper Regulator and PLL Control Register
  DSI_WRPCR @offset 0x430 $u32 {
    7
    REGEN // at 24: Regulator Enable
    6
    ODF:2 // at 16: PLL Output Division Factor
    1
    IDF:4 // at 11: PLL Input Division Factor
    2
    NDIV:7 // at 2: PLL Loop Division Factor
    1
    PLLEN // at 0: PLL Enable
  }

}

//------------------------------------------------------------------------------
// Peripheral EXTI: External interrupt/event       controller
//------------------------------------------------------------------------------

registers ©EXTI @at 0x40013c00 {
//---  Register IMR: Interrupt mask register (EXTI_IMR)
  IMR @offset 0x0 $u32 {
    9
    MR22 // at 22: Interrupt Mask on line 22
    MR21 // at 21: Interrupt Mask on line 21
    MR20 // at 20: Interrupt Mask on line 20
    MR19 // at 19: Interrupt Mask on line 19
    MR18 // at 18: Interrupt Mask on line 18
    MR17 // at 17: Interrupt Mask on line 17
    MR16 // at 16: Interrupt Mask on line 16
    MR15 // at 15: Interrupt Mask on line 15
    MR14 // at 14: Interrupt Mask on line 14
    MR13 // at 13: Interrupt Mask on line 13
    MR12 // at 12: Interrupt Mask on line 12
    MR11 // at 11: Interrupt Mask on line 11
    MR10 // at 10: Interrupt Mask on line 10
    MR9 // at 9: Interrupt Mask on line 9
    MR8 // at 8: Interrupt Mask on line 8
    MR7 // at 7: Interrupt Mask on line 7
    MR6 // at 6: Interrupt Mask on line 6
    MR5 // at 5: Interrupt Mask on line 5
    MR4 // at 4: Interrupt Mask on line 4
    MR3 // at 3: Interrupt Mask on line 3
    MR2 // at 2: Interrupt Mask on line 2
    MR1 // at 1: Interrupt Mask on line 1
    MR0 // at 0: Interrupt Mask on line 0
  }

//---  Register EMR: Event mask register (EXTI_EMR)
  EMR @offset 0x4 $u32 {
    9
    MR22 // at 22: Event Mask on line 22
    MR21 // at 21: Event Mask on line 21
    MR20 // at 20: Event Mask on line 20
    MR19 // at 19: Event Mask on line 19
    MR18 // at 18: Event Mask on line 18
    MR17 // at 17: Event Mask on line 17
    MR16 // at 16: Event Mask on line 16
    MR15 // at 15: Event Mask on line 15
    MR14 // at 14: Event Mask on line 14
    MR13 // at 13: Event Mask on line 13
    MR12 // at 12: Event Mask on line 12
    MR11 // at 11: Event Mask on line 11
    MR10 // at 10: Event Mask on line 10
    MR9 // at 9: Event Mask on line 9
    MR8 // at 8: Event Mask on line 8
    MR7 // at 7: Event Mask on line 7
    MR6 // at 6: Event Mask on line 6
    MR5 // at 5: Event Mask on line 5
    MR4 // at 4: Event Mask on line 4
    MR3 // at 3: Event Mask on line 3
    MR2 // at 2: Event Mask on line 2
    MR1 // at 1: Event Mask on line 1
    MR0 // at 0: Event Mask on line 0
  }

//---  Register RTSR: Rising Trigger selection register (EXTI_RTSR)
  RTSR @offset 0x8 $u32 {
    9
    TR22 // at 22: Rising trigger event configuration of line 22
    TR21 // at 21: Rising trigger event configuration of line 21
    TR20 // at 20: Rising trigger event configuration of line 20
    TR19 // at 19: Rising trigger event configuration of line 19
    TR18 // at 18: Rising trigger event configuration of line 18
    TR17 // at 17: Rising trigger event configuration of line 17
    TR16 // at 16: Rising trigger event configuration of line 16
    TR15 // at 15: Rising trigger event configuration of line 15
    TR14 // at 14: Rising trigger event configuration of line 14
    TR13 // at 13: Rising trigger event configuration of line 13
    TR12 // at 12: Rising trigger event configuration of line 12
    TR11 // at 11: Rising trigger event configuration of line 11
    TR10 // at 10: Rising trigger event configuration of line 10
    TR9 // at 9: Rising trigger event configuration of line 9
    TR8 // at 8: Rising trigger event configuration of line 8
    TR7 // at 7: Rising trigger event configuration of line 7
    TR6 // at 6: Rising trigger event configuration of line 6
    TR5 // at 5: Rising trigger event configuration of line 5
    TR4 // at 4: Rising trigger event configuration of line 4
    TR3 // at 3: Rising trigger event configuration of line 3
    TR2 // at 2: Rising trigger event configuration of line 2
    TR1 // at 1: Rising trigger event configuration of line 1
    TR0 // at 0: Rising trigger event configuration of line 0
  }

//---  Register FTSR: Falling Trigger selection register (EXTI_FTSR)
  FTSR @offset 0xc $u32 {
    9
    TR22 // at 22: Falling trigger event configuration of line 22
    TR21 // at 21: Falling trigger event configuration of line 21
    TR20 // at 20: Falling trigger event configuration of line 20
    TR19 // at 19: Falling trigger event configuration of line 19
    TR18 // at 18: Falling trigger event configuration of line 18
    TR17 // at 17: Falling trigger event configuration of line 17
    TR16 // at 16: Falling trigger event configuration of line 16
    TR15 // at 15: Falling trigger event configuration of line 15
    TR14 // at 14: Falling trigger event configuration of line 14
    TR13 // at 13: Falling trigger event configuration of line 13
    TR12 // at 12: Falling trigger event configuration of line 12
    TR11 // at 11: Falling trigger event configuration of line 11
    TR10 // at 10: Falling trigger event configuration of line 10
    TR9 // at 9: Falling trigger event configuration of line 9
    TR8 // at 8: Falling trigger event configuration of line 8
    TR7 // at 7: Falling trigger event configuration of line 7
    TR6 // at 6: Falling trigger event configuration of line 6
    TR5 // at 5: Falling trigger event configuration of line 5
    TR4 // at 4: Falling trigger event configuration of line 4
    TR3 // at 3: Falling trigger event configuration of line 3
    TR2 // at 2: Falling trigger event configuration of line 2
    TR1 // at 1: Falling trigger event configuration of line 1
    TR0 // at 0: Falling trigger event configuration of line 0
  }

//---  Register SWIER: Software interrupt event register (EXTI_SWIER)
  SWIER @offset 0x10 $u32 {
    9
    SWIER22 // at 22: Software Interrupt on line 22
    SWIER21 // at 21: Software Interrupt on line 21
    SWIER20 // at 20: Software Interrupt on line 20
    SWIER19 // at 19: Software Interrupt on line 19
    SWIER18 // at 18: Software Interrupt on line 18
    SWIER17 // at 17: Software Interrupt on line 17
    SWIER16 // at 16: Software Interrupt on line 16
    SWIER15 // at 15: Software Interrupt on line 15
    SWIER14 // at 14: Software Interrupt on line 14
    SWIER13 // at 13: Software Interrupt on line 13
    SWIER12 // at 12: Software Interrupt on line 12
    SWIER11 // at 11: Software Interrupt on line 11
    SWIER10 // at 10: Software Interrupt on line 10
    SWIER9 // at 9: Software Interrupt on line 9
    SWIER8 // at 8: Software Interrupt on line 8
    SWIER7 // at 7: Software Interrupt on line 7
    SWIER6 // at 6: Software Interrupt on line 6
    SWIER5 // at 5: Software Interrupt on line 5
    SWIER4 // at 4: Software Interrupt on line 4
    SWIER3 // at 3: Software Interrupt on line 3
    SWIER2 // at 2: Software Interrupt on line 2
    SWIER1 // at 1: Software Interrupt on line 1
    SWIER0 // at 0: Software Interrupt on line 0
  }

//---  Register PR: Pending register (EXTI_PR)
  PR @offset 0x14 $u32 {
    9
    PR22 // at 22: Pending bit 22
    PR21 // at 21: Pending bit 21
    PR20 // at 20: Pending bit 20
    PR19 // at 19: Pending bit 19
    PR18 // at 18: Pending bit 18
    PR17 // at 17: Pending bit 17
    PR16 // at 16: Pending bit 16
    PR15 // at 15: Pending bit 15
    PR14 // at 14: Pending bit 14
    PR13 // at 13: Pending bit 13
    PR12 // at 12: Pending bit 12
    PR11 // at 11: Pending bit 11
    PR10 // at 10: Pending bit 10
    PR9 // at 9: Pending bit 9
    PR8 // at 8: Pending bit 8
    PR7 // at 7: Pending bit 7
    PR6 // at 6: Pending bit 6
    PR5 // at 5: Pending bit 5
    PR4 // at 4: Pending bit 4
    PR3 // at 3: Pending bit 3
    PR2 // at 2: Pending bit 2
    PR1 // at 1: Pending bit 1
    PR0 // at 0: Pending bit 0
  }

}

//------------------------------------------------------------------------------
// Peripheral Ethernet_DMA: Ethernet: DMA controller operation
//------------------------------------------------------------------------------

registers ©Ethernet_DMA @at 0x40029000 {
//---  Register DMABMR: Ethernet DMA bus mode register
  DMABMR @offset 0x0 $u32 {
    5
    MB // at 26: MB
    AAB // at 25: AAB
    FPM // at 24: FPM
    USP // at 23: USP
    RDP:6 // at 17: RDP
    FB // at 16: FB
    RTPR:2 // at 14: RTPR
    PBL:6 // at 8: PBL
    EDFE // at 7: EDFE
    DSL:5 // at 2: DSL
    DA // at 1: DA
    SR // at 0: SR
  }

//---  Register DMATPDR: Ethernet DMA transmit poll demand register
  DMATPDR @offset 0x4 $u32 {
    TPD:32 // at 0: TPD
  }

//---  Register DMARPDR: EHERNET DMA receive poll demand register
  DMARPDR @offset 0x8 $u32 {
    RPD:32 // at 0: RPD
  }

//---  Register DMARDLAR: Ethernet DMA receive descriptor list address register
  DMARDLAR @offset 0xc $u32 {
    SRL:32 // at 0: SRL
  }

//---  Register DMATDLAR: Ethernet DMA transmit descriptor list address register
  DMATDLAR @offset 0x10 $u32 {
    STL:32 // at 0: STL
  }

//---  Register DMASR: Ethernet DMA status register
  DMASR @offset 0x14 $u32 {
    2
    TSTS // at 29: TSTS
    PMTS // at 28: PMTS
    MMCS // at 27: MMCS
    1
    EBS:3 // at 23: EBS
    TPS:3 // at 20: TPS
    RPS:3 // at 17: RPS
    NIS // at 16: NIS
    AIS // at 15: AIS
    ERS // at 14: ERS
    FBES // at 13: FBES
    2
    ETS // at 10: ETS
    PWTS // at 9: PWTS
    RPSS // at 8: RPSS
    RBUS // at 7: RBUS
    RS // at 6: RS
    TUS // at 5: TUS
    ROS // at 4: ROS
    TJTS // at 3: TJTS
    TBUS // at 2: TBUS
    TPSS // at 1: TPSS
    TS // at 0: TS
  }

//---  Register DMAOMR: Ethernet DMA operation mode register
  DMAOMR @offset 0x18 $u32 {
    5
    DTCEFD // at 26: DTCEFD
    RSF // at 25: RSF
    DFRF // at 24: DFRF
    2
    TSF // at 21: TSF
    FTF // at 20: FTF
    3
    TTC:3 // at 14: TTC
    ST // at 13: ST
    5
    FEF // at 7: FEF
    FUGF // at 6: FUGF
    1
    RTC:2 // at 3: RTC
    OSF // at 2: OSF
    SR // at 1: SR
    1
  }

//---  Register DMAIER: Ethernet DMA interrupt enable register
  DMAIER @offset 0x1c $u32 {
    15
    NISE // at 16: NISE
    AISE // at 15: AISE
    ERIE // at 14: ERIE
    FBEIE // at 13: FBEIE
    2
    ETIE // at 10: ETIE
    RWTIE // at 9: RWTIE
    RPSIE // at 8: RPSIE
    RBUIE // at 7: RBUIE
    RIE // at 6: RIE
    TUIE // at 5: TUIE
    ROIE // at 4: ROIE
    TJTIE // at 3: TJTIE
    TBUIE // at 2: TBUIE
    TPSIE // at 1: TPSIE
    TIE // at 0: TIE
  }

//---  Register DMAMFBOCR: Ethernet DMA missed frame and buffer overflow counter register
  DMAMFBOCR @offset 0x20 $u32 {
    3
    OFOC // at 28: OFOC
    MFA:11 // at 17: MFA
    OMFC // at 16: OMFC
    MFC:16 // at 0: MFC
  }

//---  Register DMARSWTR: Ethernet DMA receive status watchdog timer register
  DMARSWTR @offset 0x24 $u32 {
    24
    RSWTC:8 // at 0: RSWTC
  }

//---  Register DMACHTDR: Ethernet DMA current host transmit descriptor register
  DMACHTDR @offset 0x48 @ro $u32 {
    HTDAP:32 // at 0: HTDAP
  }

//---  Register DMACHRDR: Ethernet DMA current host receive descriptor register
  DMACHRDR @offset 0x4c @ro $u32 {
    HRDAP:32 // at 0: HRDAP
  }

//---  Register DMACHTBAR: Ethernet DMA current host transmit buffer address register
  DMACHTBAR @offset 0x50 @ro $u32 {
    HTBAP:32 // at 0: HTBAP
  }

//---  Register DMACHRBAR: Ethernet DMA current host receive buffer address register
  DMACHRBAR @offset 0x54 @ro $u32 {
    HRBAP:32 // at 0: HRBAP
  }

}

//------------------------------------------------------------------------------
// Peripheral Ethernet_MAC: Ethernet: media access control       (MAC)
//------------------------------------------------------------------------------

registers ©Ethernet_MAC @at 0x40028000 {
//---  Register MACCR: Ethernet MAC configuration register
  MACCR @offset 0x0 $u32 {
    6
    CSTF // at 25: CSTF
    1
    WD // at 23: WD
    JD // at 22: JD
    2
    IFG:3 // at 17: IFG
    CSD // at 16: CSD
    1
    FES // at 14: FES
    ROD // at 13: ROD
    LM // at 12: LM
    DM // at 11: DM
    IPCO // at 10: IPCO
    RD // at 9: RD
    1
    APCS // at 7: APCS
    BL:2 // at 5: BL
    DC // at 4: DC
    TE // at 3: TE
    RE // at 2: RE
    2
  }

//---  Register MACFFR: Ethernet MAC frame filter register
  MACFFR @offset 0x4 $u32 {
    RA // at 31: RA
    21
    HPF // at 9: HPF
    SAF // at 8: SAF
    SAIF // at 7: SAIF
    PCF // at 6: PCF
    BFD // at 5: BFD
    RAM // at 4: RAM
    DAIF // at 3: DAIF
    HM // at 2: HM
    HU // at 1: HU
    PM // at 0: PM
  }

//---  Register MACHTHR: Ethernet MAC hash table high register
  MACHTHR @offset 0x8 $u32 {
    HTH:32 // at 0: HTH
  }

//---  Register MACHTLR: Ethernet MAC hash table low register
  MACHTLR @offset 0xc $u32 {
    HTL:32 // at 0: HTL
  }

//---  Register MACMIIAR: Ethernet MAC MII address register
  MACMIIAR @offset 0x10 $u32 {
    16
    PA:5 // at 11: PA
    MR:5 // at 6: MR
    1
    CR:3 // at 2: CR
    MW // at 1: MW
    MB // at 0: MB
  }

//---  Register MACMIIDR: Ethernet MAC MII data register
  MACMIIDR @offset 0x14 $u32 {
    16
    TD:16 // at 0: TD
  }

//---  Register MACFCR: Ethernet MAC flow control register
  MACFCR @offset 0x18 $u32 {
    PT:16 // at 16: PT
    8
    ZQPD // at 7: ZQPD
    1
    PLT:2 // at 4: PLT
    UPFD // at 3: UPFD
    RFCE // at 2: RFCE
    TFCE // at 1: TFCE
    FCB // at 0: FCB
  }

//---  Register MACVLANTR: Ethernet MAC VLAN tag register
  MACVLANTR @offset 0x1c $u32 {
    15
    VLANTC // at 16: VLANTC
    VLANTI:16 // at 0: VLANTI
  }

//---  Register MACPMTCSR: Ethernet MAC PMT control and status register
  MACPMTCSR @offset 0x2c $u32 {
    WFFRPR // at 31: WFFRPR
    21
    GU // at 9: GU
    2
    WFR // at 6: WFR
    MPR // at 5: MPR
    2
    WFE // at 2: WFE
    MPE // at 1: MPE
    PD // at 0: PD
  }

//---  Register MACDBGR: Ethernet MAC debug register
  MACDBGR @offset 0x34 @ro $u32 {
    26
    MCFHP // at 5: MCFHP
    MCP // at 4: MCP
    MCF // at 3: MCF
    ROR // at 2: ROR
    CSR // at 1: CSR
    CR // at 0: CR
  }

//---  Register MACSR: Ethernet MAC interrupt status register
  MACSR @offset 0x38 $u32 {
    22
    TSTS // at 9: TSTS
    2
    MMCTS // at 6: MMCTS
    MMCRS // at 5: MMCRS
    MMCS // at 4: MMCS
    PMTS // at 3: PMTS
    3
  }

//---  Register MACIMR: Ethernet MAC interrupt mask register
  MACIMR @offset 0x3c $u32 {
    22
    TSTIM // at 9: TSTIM
    5
    PMTIM // at 3: PMTIM
    3
  }

//---  Register MACA0HR: Ethernet MAC address 0 high register
  MACA0HR @offset 0x40 $u32 {
    MO // at 31: Always 1
    15
    MACA0H:16 // at 0: MAC address0 high
  }

//---  Register MACA0LR: Ethernet MAC address 0 low register
  MACA0LR @offset 0x44 $u32 {
    MACA0L:32 // at 0: 0
  }

//---  Register MACA1HR: Ethernet MAC address 1 high register
  MACA1HR @offset 0x48 $u32 {
    AE // at 31: AE
    SA // at 30: SA
    MBC:6 // at 24: MBC
    8
    MACA1H:16 // at 0: MACA1H
  }

//---  Register MACA1LR: Ethernet MAC address1 low register
  MACA1LR @offset 0x4c $u32 {
    MACA1LR:32 // at 0: MACA1LR
  }

//---  Register MACA2HR: Ethernet MAC address 2 high register
  MACA2HR @offset 0x50 $u32 {
    AE // at 31: AE
    SA // at 30: SA
    MBC:6 // at 24: MBC
    8
    MAC2AH:16 // at 0: MAC2AH
  }

//---  Register MACA2LR: Ethernet MAC address 2 low register
  MACA2LR @offset 0x54 $u32 {
    1
    MACA2L:31 // at 0: MACA2L
  }

//---  Register MACA3HR: Ethernet MAC address 3 high register
  MACA3HR @offset 0x58 $u32 {
    AE // at 31: AE
    SA // at 30: SA
    MBC:6 // at 24: MBC
    8
    MACA3H:16 // at 0: MACA3H
  }

//---  Register MACA3LR: Ethernet MAC address 3 low register
  MACA3LR @offset 0x5c $u32 {
    MBCA3L:32 // at 0: MBCA3L
  }

//---  Register MACRWUFFER: Ethernet MAC remote wakeup frame filter register
  MACRWUFFER @offset 0x60 $u32
}

//------------------------------------------------------------------------------
// Peripheral Ethernet_MMC: Ethernet: MAC management counters
//------------------------------------------------------------------------------

registers ©Ethernet_MMC @at 0x40028100 {
//---  Register MMCCR: Ethernet MMC control register
  MMCCR @offset 0x0 $u32 {
    26
    MCFHP // at 5: MCFHP
    MCP // at 4: MCP
    MCF // at 3: MCF
    ROR // at 2: ROR
    CSR // at 1: CSR
    CR // at 0: CR
  }

//---  Register MMCRIR: Ethernet MMC receive interrupt register
  MMCRIR @offset 0x4 $u32 {
    14
    RGUFS // at 17: RGUFS
    10
    RFAES // at 6: RFAES
    RFCES // at 5: RFCES
    5
  }

//---  Register MMCTIR: Ethernet MMC transmit interrupt register
  MMCTIR @offset 0x8 @ro $u32 {
    10
    TGFS // at 21: TGFS
    5
    TGFMSCS // at 15: TGFMSCS
    TGFSCS // at 14: TGFSCS
    14
  }

//---  Register MMCRIMR: Ethernet MMC receive interrupt mask register
  MMCRIMR @offset 0xc $u32 {
    14
    RGUFM // at 17: RGUFM
    10
    RFAEM // at 6: RFAEM
    RFCEM // at 5: RFCEM
    5
  }

//---  Register MMCTIMR: Ethernet MMC transmit interrupt mask register
  MMCTIMR @offset 0x10 $u32 {
    15
    TGFM // at 16: TGFM
    TGFMSCM // at 15: TGFMSCM
    TGFSCM // at 14: TGFSCM
    14
  }

//---  Register MMCTGFSCCR: Ethernet MMC transmitted good frames after a single collision counter
  MMCTGFSCCR @offset 0x4c @ro $u32 {
    TGFSCC:32 // at 0: TGFSCC
  }

//---  Register MMCTGFMSCCR: Ethernet MMC transmitted good frames after more than a single collision
  MMCTGFMSCCR @offset 0x50 @ro $u32 {
    TGFMSCC:32 // at 0: TGFMSCC
  }

//---  Register MMCTGFCR: Ethernet MMC transmitted good frames counter register
  MMCTGFCR @offset 0x68 @ro $u32 {
    TGFC:32 // at 0: HTL
  }

//---  Register MMCRFCECR: Ethernet MMC received frames with CRC error counter register
  MMCRFCECR @offset 0x94 @ro $u32 {
    RFCFC:32 // at 0: RFCFC
  }

//---  Register MMCRFAECR: Ethernet MMC received frames with alignment error counter register
  MMCRFAECR @offset 0x98 @ro $u32 {
    RFAEC:32 // at 0: RFAEC
  }

//---  Register MMCRGUFCR: MMC received good unicast frames counter register
  MMCRGUFCR @offset 0xc4 @ro $u32 {
    RGUFC:32 // at 0: RGUFC
  }

}

//------------------------------------------------------------------------------
// Peripheral Ethernet_PTP: Ethernet: Precision time protocol
//------------------------------------------------------------------------------

registers ©Ethernet_PTP @at 0x40028700 {
//---  Register PTPTSCR: Ethernet PTP time stamp control register
  PTPTSCR @offset 0x0 $u32 {
    13
    TSPFFMAE // at 18: TSPFFMAE
    TSCNT:2 // at 16: TSCNT
    TSSMRME // at 15: TSSMRME
    TSSEME // at 14: TSSEME
    TSSIPV4FE // at 13: TSSIPV4FE
    TSSIPV6FE // at 12: TSSIPV6FE
    TSSPTPOEFE // at 11: TSSPTPOEFE
    TSPTPPSV2E // at 10: TSPTPPSV2E
    TSSSR // at 9: TSSSR
    TSSARFE // at 8: TSSARFE
    2
    TTSARU // at 5: TTSARU
    TSITE // at 4: TSITE
    TSSTU // at 3: TSSTU
    TSSTI // at 2: TSSTI
    TSFCU // at 1: TSFCU
    TSE // at 0: TSE
  }

//---  Register PTPSSIR: Ethernet PTP subsecond increment register
  PTPSSIR @offset 0x4 $u32 {
    24
    STSSI:8 // at 0: STSSI
  }

//---  Register PTPTSHR: Ethernet PTP time stamp high register
  PTPTSHR @offset 0x8 @ro $u32 {
    STS:32 // at 0: STS
  }

//---  Register PTPTSLR: Ethernet PTP time stamp low register
  PTPTSLR @offset 0xc @ro $u32 {
    STPNS // at 31: STPNS
    STSS:31 // at 0: STSS
  }

//---  Register PTPTSHUR: Ethernet PTP time stamp high update register
  PTPTSHUR @offset 0x10 $u32 {
    TSUS:32 // at 0: TSUS
  }

//---  Register PTPTSLUR: Ethernet PTP time stamp low update register
  PTPTSLUR @offset 0x14 $u32 {
    TSUPNS // at 31: TSUPNS
    TSUSS:31 // at 0: TSUSS
  }

//---  Register PTPTSAR: Ethernet PTP time stamp addend register
  PTPTSAR @offset 0x18 $u32 {
    TSA:32 // at 0: TSA
  }

//---  Register PTPTTHR: Ethernet PTP target time high register
  PTPTTHR @offset 0x1c $u32 {
    TTSH:32 // at 0: 0
  }

//---  Register PTPTTLR: Ethernet PTP target time low register
  PTPTTLR @offset 0x20 $u32 {
    TTSL:32 // at 0: TTSL
  }

//---  Register PTPTSSR: Ethernet PTP time stamp status register
  PTPTSSR @offset 0x28 @ro $u32 {
    30
    TSTTR // at 1: TSTTR
    TSSO // at 0: TSSO
  }

//---  Register PTPPPSCR: Ethernet PTP PPS control register
  PTPPPSCR @offset 0x2c @ro $u32 {
    30
    TSTTR // at 1: TSTTR
    TSSO // at 0: TSSO
  }

}

//------------------------------------------------------------------------------
// Peripheral FMC: Flexible memory controller
//------------------------------------------------------------------------------

registers ©FMC @at 0xa0000000 {
//---  Register BCR1: SRAM/NOR-Flash chip-select control register 1
  BCR1 @offset 0x0 $u32 {
    11
    CCLKEN // at 20: CCLKEN
    CBURSTRW // at 19: CBURSTRW
    3
    ASYNCWAIT // at 15: ASYNCWAIT
    EXTMOD // at 14: EXTMOD
    WAITEN // at 13: WAITEN
    WREN // at 12: WREN
    WAITCFG // at 11: WAITCFG
    1
    WAITPOL // at 9: WAITPOL
    BURSTEN // at 8: BURSTEN
    1
    FACCEN // at 6: FACCEN
    MWID:2 // at 4: MWID
    MTYP:2 // at 2: MTYP
    MUXEN // at 1: MUXEN
    MBKEN // at 0: MBKEN
  }

//---  Register BTR1: SRAM/NOR-Flash chip-select timing register 1
  BTR1 @offset 0x4 $u32 {
    2
    ACCMOD:2 // at 28: ACCMOD
    DATLAT:4 // at 24: DATLAT
    CLKDIV:4 // at 20: CLKDIV
    BUSTURN:4 // at 16: BUSTURN
    DATAST:8 // at 8: DATAST
    ADDHLD:4 // at 4: ADDHLD
    ADDSET:4 // at 0: ADDSET
  }

//---  Register BCR2: SRAM/NOR-Flash chip-select control register 2
  BCR2 @offset 0x8 $u32 {
    12
    CBURSTRW // at 19: CBURSTRW
    3
    ASYNCWAIT // at 15: ASYNCWAIT
    EXTMOD // at 14: EXTMOD
    WAITEN // at 13: WAITEN
    WREN // at 12: WREN
    WAITCFG // at 11: WAITCFG
    WRAPMOD // at 10: WRAPMOD
    WAITPOL // at 9: WAITPOL
    BURSTEN // at 8: BURSTEN
    1
    FACCEN // at 6: FACCEN
    MWID:2 // at 4: MWID
    MTYP:2 // at 2: MTYP
    MUXEN // at 1: MUXEN
    MBKEN // at 0: MBKEN
  }

//---  Register BTR2: SRAM/NOR-Flash chip-select timing register 2
  BTR2 @offset 0xc $u32 {
    2
    ACCMOD:2 // at 28: ACCMOD
    DATLAT:4 // at 24: DATLAT
    CLKDIV:4 // at 20: CLKDIV
    BUSTURN:4 // at 16: BUSTURN
    DATAST:8 // at 8: DATAST
    ADDHLD:4 // at 4: ADDHLD
    ADDSET:4 // at 0: ADDSET
  }

//---  Register BCR3: SRAM/NOR-Flash chip-select control register 3
  BCR3 @offset 0x10 $u32 {
    12
    CBURSTRW // at 19: CBURSTRW
    3
    ASYNCWAIT // at 15: ASYNCWAIT
    EXTMOD // at 14: EXTMOD
    WAITEN // at 13: WAITEN
    WREN // at 12: WREN
    WAITCFG // at 11: WAITCFG
    WRAPMOD // at 10: WRAPMOD
    WAITPOL // at 9: WAITPOL
    BURSTEN // at 8: BURSTEN
    1
    FACCEN // at 6: FACCEN
    MWID:2 // at 4: MWID
    MTYP:2 // at 2: MTYP
    MUXEN // at 1: MUXEN
    MBKEN // at 0: MBKEN
  }

//---  Register BTR3: SRAM/NOR-Flash chip-select timing register 3
  BTR3 @offset 0x14 $u32 {
    2
    ACCMOD:2 // at 28: ACCMOD
    DATLAT:4 // at 24: DATLAT
    CLKDIV:4 // at 20: CLKDIV
    BUSTURN:4 // at 16: BUSTURN
    DATAST:8 // at 8: DATAST
    ADDHLD:4 // at 4: ADDHLD
    ADDSET:4 // at 0: ADDSET
  }

//---  Register BCR4: SRAM/NOR-Flash chip-select control register 4
  BCR4 @offset 0x18 $u32 {
    12
    CBURSTRW // at 19: CBURSTRW
    3
    ASYNCWAIT // at 15: ASYNCWAIT
    EXTMOD // at 14: EXTMOD
    WAITEN // at 13: WAITEN
    WREN // at 12: WREN
    WAITCFG // at 11: WAITCFG
    WRAPMOD // at 10: WRAPMOD
    WAITPOL // at 9: WAITPOL
    BURSTEN // at 8: BURSTEN
    1
    FACCEN // at 6: FACCEN
    MWID:2 // at 4: MWID
    MTYP:2 // at 2: MTYP
    MUXEN // at 1: MUXEN
    MBKEN // at 0: MBKEN
  }

//---  Register BTR4: SRAM/NOR-Flash chip-select timing register 4
  BTR4 @offset 0x1c $u32 {
    2
    ACCMOD:2 // at 28: ACCMOD
    DATLAT:4 // at 24: DATLAT
    CLKDIV:4 // at 20: CLKDIV
    BUSTURN:4 // at 16: BUSTURN
    DATAST:8 // at 8: DATAST
    ADDHLD:4 // at 4: ADDHLD
    ADDSET:4 // at 0: ADDSET
  }

//---  Register PCR: PC Card/NAND Flash control register
  PCR @offset 0x80 $u32 {
    12
    ECCPS:3 // at 17: ECCPS
    TAR:4 // at 13: TAR
    TCLR:4 // at 9: TCLR
    2
    ECCEN // at 6: ECCEN
    PWID:2 // at 4: PWID
    PTYP // at 3: PTYP
    PBKEN // at 2: PBKEN
    PWAITEN // at 1: PWAITEN
    1
  }

//---  Register SR: FIFO status and interrupt register
  SR @offset 0x84 $u32 {
    25
    FEMPT // at 6: FEMPT
    IFEN // at 5: IFEN
    ILEN // at 4: ILEN
    IREN // at 3: IREN
    IFS // at 2: IFS
    ILS // at 1: ILS
    IRS // at 0: IRS
  }

//---  Register PMEM: Common memory space timing register
  PMEM @offset 0x88 $u32 {
    MEMHIZx:8 // at 24: MEMHIZx
    MEMHOLDx:8 // at 16: MEMHOLDx
    MEMWAITx:8 // at 8: MEMWAITx
    MEMSETx:8 // at 0: MEMSETx
  }

//---  Register PATT: Attribute memory space timing register
  PATT @offset 0x8c $u32 {
    ATTHIZx:8 // at 24: ATTHIZx
    ATTHOLDx:8 // at 16: ATTHOLDx
    ATTWAITx:8 // at 8: ATTWAITx
    ATTSETx:8 // at 0: ATTSETx
  }

//---  Register ECCR: ECC result register
  ECCR @offset 0x94 @ro $u32 {
    ECCx:32 // at 0: ECCx
  }

//---  Register BWTR1: SRAM/NOR-Flash write timing registers 1
  BWTR1 @offset 0x104 $u32 {
    2
    ACCMOD:2 // at 28: ACCMOD
    DATLAT:4 // at 24: DATLAT
    CLKDIV:4 // at 20: CLKDIV
    4
    DATAST:8 // at 8: DATAST
    ADDHLD:4 // at 4: ADDHLD
    ADDSET:4 // at 0: ADDSET
  }

//---  Register BWTR2: SRAM/NOR-Flash write timing registers 2
  BWTR2 @offset 0x10c $u32 {
    2
    ACCMOD:2 // at 28: ACCMOD
    DATLAT:4 // at 24: DATLAT
    CLKDIV:4 // at 20: CLKDIV
    4
    DATAST:8 // at 8: DATAST
    ADDHLD:4 // at 4: ADDHLD
    ADDSET:4 // at 0: ADDSET
  }

//---  Register BWTR3: SRAM/NOR-Flash write timing registers 3
  BWTR3 @offset 0x114 $u32 {
    2
    ACCMOD:2 // at 28: ACCMOD
    DATLAT:4 // at 24: DATLAT
    CLKDIV:4 // at 20: CLKDIV
    4
    DATAST:8 // at 8: DATAST
    ADDHLD:4 // at 4: ADDHLD
    ADDSET:4 // at 0: ADDSET
  }

//---  Register BWTR4: SRAM/NOR-Flash write timing registers 4
  BWTR4 @offset 0x11c $u32 {
    2
    ACCMOD:2 // at 28: ACCMOD
    DATLAT:4 // at 24: DATLAT
    CLKDIV:4 // at 20: CLKDIV
    4
    DATAST:8 // at 8: DATAST
    ADDHLD:4 // at 4: ADDHLD
    ADDSET:4 // at 0: ADDSET
  }

//---  Register SDCR1: SDRAM Control Register 1
  SDCR1 @offset 0x140 $u32 {
    17
    RPIPE:2 // at 13: Read pipe
    RBURST // at 12: Burst read
    SDCLK:2 // at 10: SDRAM clock configuration
    WP // at 9: Write protection
    CAS:2 // at 7: CAS latency
    NB // at 6: Number of internal banks
    MWID:2 // at 4: Memory data bus width
    NR:2 // at 2: Number of row address bits
    NC:2 // at 0: Number of column address bits
  }

//---  Register SDCR2: SDRAM Control Register 2
  SDCR2 @offset 0x144 $u32 {
    17
    RPIPE:2 // at 13: Read pipe
    RBURST // at 12: Burst read
    SDCLK:2 // at 10: SDRAM clock configuration
    WP // at 9: Write protection
    CAS:2 // at 7: CAS latency
    NB // at 6: Number of internal banks
    MWID:2 // at 4: Memory data bus width
    NR:2 // at 2: Number of row address bits
    NC:2 // at 0: Number of column address bits
  }

//---  Register SDTR1: SDRAM Timing register 1
  SDTR1 @offset 0x148 $u32 {
    4
    TRCD:4 // at 24: Row to column delay
    TRP:4 // at 20: Row precharge delay
    TWR:4 // at 16: Recovery delay
    TRC:4 // at 12: Row cycle delay
    TRAS:4 // at 8: Self refresh time
    TXSR:4 // at 4: Exit self-refresh delay
    TMRD:4 // at 0: Load Mode Register to Active
  }

//---  Register SDTR2: SDRAM Timing register 2
  SDTR2 @offset 0x14c $u32 {
    4
    TRCD:4 // at 24: Row to column delay
    TRP:4 // at 20: Row precharge delay
    TWR:4 // at 16: Recovery delay
    TRC:4 // at 12: Row cycle delay
    TRAS:4 // at 8: Self refresh time
    TXSR:4 // at 4: Exit self-refresh delay
    TMRD:4 // at 0: Load Mode Register to Active
  }

//---  Register SDCMR: SDRAM Command Mode register
  SDCMR @offset 0x150 $u32 {
    10
    MRD:13 // at 9: Mode Register definition
    NRFS:4 // at 5: Number of Auto-refresh
    CTB1 // at 4: Command target bank 1
    CTB2 // at 3: Command target bank 2
    MODE:3 // at 0: Command mode
  }

//---  Register SDRTR: SDRAM Refresh Timer register
  SDRTR @offset 0x154 $u32 {
    17
    REIE // at 14: RES Interrupt Enable
    COUNT:13 // at 1: Refresh Timer Count
    CRE // at 0: Clear Refresh error flag
  }

//---  Register SDSR: SDRAM Status register
  SDSR @offset 0x158 @ro $u32 {
    26
    BUSY // at 5: Busy status
    MODES2:2 // at 3: Status Mode for Bank 2
    MODES1:2 // at 1: Status Mode for Bank 1
    RE // at 0: Refresh error flag
  }

}

//------------------------------------------------------------------------------
// Peripheral FPU: Floting point unit
//------------------------------------------------------------------------------

registers ©FPU @at 0xe000ef34 {
//---  Register FPCCR: Floating-point context control register
  FPCCR @offset 0x0 $u32 {
    ASPEN // at 31: ASPEN
    LSPEN // at 30: LSPEN
    21
    MONRDY // at 8: MONRDY
    1
    BFRDY // at 6: BFRDY
    MMRDY // at 5: MMRDY
    HFRDY // at 4: HFRDY
    THREAD // at 3: THREAD
    1
    USER // at 1: USER
    LSPACT // at 0: LSPACT
  }

//---  Register FPCAR: Floating-point context address register
  FPCAR @offset 0x4 $u32 {
    ADDRESS:29 // at 3: Location of unpopulated floating-point
    3
  }

//---  Register FPSCR: Floating-point status control register
  FPSCR @offset 0x8 $u32 {
    N // at 31: Negative condition code flag
    Z // at 30: Zero condition code flag
    C // at 29: Carry condition code flag
    V // at 28: Overflow condition code flag
    1
    AHP // at 26: Alternative half-precision control bit
    DN // at 25: Default NaN mode control bit
    FZ // at 24: Flush-to-zero mode control bit:
    RMode:2 // at 22: Rounding Mode control field
    14
    IDC // at 7: Input denormal cumulative exception bit.
    2
    IXC // at 4: Inexact cumulative exception bit
    UFC // at 3: Underflow cumulative exception bit
    OFC // at 2: Overflow cumulative exception bit
    DZC // at 1: Division by zero cumulative exception bit.
    IOC // at 0: Invalid operation cumulative exception bit
  }

}

//------------------------------------------------------------------------------
// Peripheral FPU_CPACR: Floating point unit CPACR
//------------------------------------------------------------------------------

registers ©FPU_CPACR @at 0xe000ed88 {
//---  Register CPACR: Coprocessor access control register
  CPACR @offset 0x0 $u32 {
    8
    CP:4 // at 20: CP
    20
  }

}

//------------------------------------------------------------------------------
// Peripheral Flash: FLASH
//------------------------------------------------------------------------------

registers ©Flash @at 0x40023c00 {
//---  Register ACR: Flash access control register
  ACR @offset 0x0 $u32 {
    20
    ARTRST // at 11: ART Accelerator reset
    1
    ARTEN // at 9: ART Accelerator Enable
    PRFTEN // at 8: Prefetch enable
    4
    LATENCY:4 // at 0: Latency
  }

//---  Register KEYR: Flash key register
  KEYR @offset 0x4 $u32 {
    KEY:32 // at 0: FPEC key
  }

//---  Register OPTKEYR: Flash option key register
  OPTKEYR @offset 0x8 $u32 {
    OPTKEY:32 // at 0: Option byte key
  }

//---  Register SR: Status register
  SR @offset 0xc $u32 {
    15
    BSY // at 16: Busy
    8
    PGSERR // at 7: Programming sequence error
    PGPERR // at 6: Programming parallelism error
    PGAERR // at 5: Programming alignment error
    WRPERR // at 4: Write protection error
    2
    OPERR // at 1: Operation error
    EOP // at 0: End of operation
  }

//---  Register CR: Control register
  CR @offset 0x10 $u32 {
    LOCK // at 31: Lock
    5
    ERRIE // at 25: Error interrupt enable
    EOPIE // at 24: End of operation interrupt enable
    7
    STRT // at 16: Start
    MER1 // at 15: Mass Erase of sectors 12 to 23
    5
    PSIZE:2 // at 8: Program size
    SNB:5 // at 3: Sector number
    MER // at 2: Mass Erase of sectors 0 to 11
    SER // at 1: Sector Erase
    PG // at 0: Programming
  }

//---  Register OPTCR: Flash option control register
  OPTCR @offset 0x14 $u32 {
    IWDG_STOP // at 31: Independent watchdog counter freeze in Stop mode
    IWDG_STDBY // at 30: Independent watchdog counter freeze in standby mode
    nDBANK // at 29: Not dual bank mode
    nDBOOT // at 28: Dual Boot mode (valid only when nDBANK=0)
    nWRP:12 // at 16: Not write protect
    RDP:8 // at 8: Read protect
    nRST_STDBY // at 7: User option bytes
    nRST_STOP // at 6: User option bytes
    IWDG_SW // at 5: User option bytes
    WWDG_SW // at 4: User option bytes
    BOR_LEV:2 // at 2: BOR reset Level
    OPTSTRT // at 1: Option start
    OPTLOCK // at 0: Option lock
  }

//---  Register OPTCR1: Flash option control register 1
  OPTCR1 @offset 0x18 $u32 {
    BOOT_ADD1:16 // at 16: Boot base address when Boot pin =1
    BOOT_ADD0:16 // at 0: Boot base address when Boot pin =0
  }

}

//------------------------------------------------------------------------------
// Peripheral GPIOA: General-purpose I/Os
//------------------------------------------------------------------------------

registers ©GPIOA @at 0x40020000 {
//---  Register MODER: GPIO port mode register
  MODER @offset 0x0 $u32 {
    MODER15:2 // at 30: Port x configuration bits (y = 0..15)
    MODER14:2 // at 28: Port x configuration bits (y = 0..15)
    MODER13:2 // at 26: Port x configuration bits (y = 0..15)
    MODER12:2 // at 24: Port x configuration bits (y = 0..15)
    MODER11:2 // at 22: Port x configuration bits (y = 0..15)
    MODER10:2 // at 20: Port x configuration bits (y = 0..15)
    MODER9:2 // at 18: Port x configuration bits (y = 0..15)
    MODER8:2 // at 16: Port x configuration bits (y = 0..15)
    MODER7:2 // at 14: Port x configuration bits (y = 0..15)
    MODER6:2 // at 12: Port x configuration bits (y = 0..15)
    MODER5:2 // at 10: Port x configuration bits (y = 0..15)
    MODER4:2 // at 8: Port x configuration bits (y = 0..15)
    MODER3:2 // at 6: Port x configuration bits (y = 0..15)
    MODER2:2 // at 4: Port x configuration bits (y = 0..15)
    MODER1:2 // at 2: Port x configuration bits (y = 0..15)
    MODER0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register OTYPER: GPIO port output type register
  OTYPER @offset 0x4 $u32 {
    16
    OT15 // at 15: Port x configuration bits (y = 0..15)
    OT14 // at 14: Port x configuration bits (y = 0..15)
    OT13 // at 13: Port x configuration bits (y = 0..15)
    OT12 // at 12: Port x configuration bits (y = 0..15)
    OT11 // at 11: Port x configuration bits (y = 0..15)
    OT10 // at 10: Port x configuration bits (y = 0..15)
    OT9 // at 9: Port x configuration bits (y = 0..15)
    OT8 // at 8: Port x configuration bits (y = 0..15)
    OT7 // at 7: Port x configuration bits (y = 0..15)
    OT6 // at 6: Port x configuration bits (y = 0..15)
    OT5 // at 5: Port x configuration bits (y = 0..15)
    OT4 // at 4: Port x configuration bits (y = 0..15)
    OT3 // at 3: Port x configuration bits (y = 0..15)
    OT2 // at 2: Port x configuration bits (y = 0..15)
    OT1 // at 1: Port x configuration bits (y = 0..15)
    OT0 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  GPIOB_OSPEEDR @offset 0x8 $u32 {
    OSPEEDR15:2 // at 30: Port x configuration bits (y = 0..15)
    OSPEEDR14:2 // at 28: Port x configuration bits (y = 0..15)
    OSPEEDR13:2 // at 26: Port x configuration bits (y = 0..15)
    OSPEEDR12:2 // at 24: Port x configuration bits (y = 0..15)
    OSPEEDR11:2 // at 22: Port x configuration bits (y = 0..15)
    OSPEEDR10:2 // at 20: Port x configuration bits (y = 0..15)
    OSPEEDR9:2 // at 18: Port x configuration bits (y = 0..15)
    OSPEEDR8:2 // at 16: Port x configuration bits (y = 0..15)
    OSPEEDR7:2 // at 14: Port x configuration bits (y = 0..15)
    OSPEEDR6:2 // at 12: Port x configuration bits (y = 0..15)
    OSPEEDR5:2 // at 10: Port x configuration bits (y = 0..15)
    OSPEEDR4:2 // at 8: Port x configuration bits (y = 0..15)
    OSPEEDR3:2 // at 6: Port x configuration bits (y = 0..15)
    OSPEEDR2:2 // at 4: Port x configuration bits (y = 0..15)
    OSPEEDR1:2 // at 2: Port x configuration bits (y = 0..15)
    OSPEEDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register PUPDR: GPIO port pull-up/pull-down register
  PUPDR @offset 0xc $u32 {
    PUPDR15:2 // at 30: Port x configuration bits (y = 0..15)
    PUPDR14:2 // at 28: Port x configuration bits (y = 0..15)
    PUPDR13:2 // at 26: Port x configuration bits (y = 0..15)
    PUPDR12:2 // at 24: Port x configuration bits (y = 0..15)
    PUPDR11:2 // at 22: Port x configuration bits (y = 0..15)
    PUPDR10:2 // at 20: Port x configuration bits (y = 0..15)
    PUPDR9:2 // at 18: Port x configuration bits (y = 0..15)
    PUPDR8:2 // at 16: Port x configuration bits (y = 0..15)
    PUPDR7:2 // at 14: Port x configuration bits (y = 0..15)
    PUPDR6:2 // at 12: Port x configuration bits (y = 0..15)
    PUPDR5:2 // at 10: Port x configuration bits (y = 0..15)
    PUPDR4:2 // at 8: Port x configuration bits (y = 0..15)
    PUPDR3:2 // at 6: Port x configuration bits (y = 0..15)
    PUPDR2:2 // at 4: Port x configuration bits (y = 0..15)
    PUPDR1:2 // at 2: Port x configuration bits (y = 0..15)
    PUPDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register IDR: GPIO port input data register
  IDR @offset 0x10 @ro $u32 {
    16
    IDR15 // at 15: Port input data (y = 0..15)
    IDR14 // at 14: Port input data (y = 0..15)
    IDR13 // at 13: Port input data (y = 0..15)
    IDR12 // at 12: Port input data (y = 0..15)
    IDR11 // at 11: Port input data (y = 0..15)
    IDR10 // at 10: Port input data (y = 0..15)
    IDR9 // at 9: Port input data (y = 0..15)
    IDR8 // at 8: Port input data (y = 0..15)
    IDR7 // at 7: Port input data (y = 0..15)
    IDR6 // at 6: Port input data (y = 0..15)
    IDR5 // at 5: Port input data (y = 0..15)
    IDR4 // at 4: Port input data (y = 0..15)
    IDR3 // at 3: Port input data (y = 0..15)
    IDR2 // at 2: Port input data (y = 0..15)
    IDR1 // at 1: Port input data (y = 0..15)
    IDR0 // at 0: Port input data (y = 0..15)
  }

//---  Register ODR: GPIO port output data register
  ODR @offset 0x14 $u32 {
    16
    ODR15 // at 15: Port output data (y = 0..15)
    ODR14 // at 14: Port output data (y = 0..15)
    ODR13 // at 13: Port output data (y = 0..15)
    ODR12 // at 12: Port output data (y = 0..15)
    ODR11 // at 11: Port output data (y = 0..15)
    ODR10 // at 10: Port output data (y = 0..15)
    ODR9 // at 9: Port output data (y = 0..15)
    ODR8 // at 8: Port output data (y = 0..15)
    ODR7 // at 7: Port output data (y = 0..15)
    ODR6 // at 6: Port output data (y = 0..15)
    ODR5 // at 5: Port output data (y = 0..15)
    ODR4 // at 4: Port output data (y = 0..15)
    ODR3 // at 3: Port output data (y = 0..15)
    ODR2 // at 2: Port output data (y = 0..15)
    ODR1 // at 1: Port output data (y = 0..15)
    ODR0 // at 0: Port output data (y = 0..15)
  }

//---  Register BSRR: GPIO port bit set/reset register
  BSRR @offset 0x18 $u32 {
    BR15 // at 31: Port x reset bit y (y = 0..15)
    BR14 // at 30: Port x reset bit y (y = 0..15)
    BR13 // at 29: Port x reset bit y (y = 0..15)
    BR12 // at 28: Port x reset bit y (y = 0..15)
    BR11 // at 27: Port x reset bit y (y = 0..15)
    BR10 // at 26: Port x reset bit y (y = 0..15)
    BR9 // at 25: Port x reset bit y (y = 0..15)
    BR8 // at 24: Port x reset bit y (y = 0..15)
    BR7 // at 23: Port x reset bit y (y = 0..15)
    BR6 // at 22: Port x reset bit y (y = 0..15)
    BR5 // at 21: Port x reset bit y (y = 0..15)
    BR4 // at 20: Port x reset bit y (y = 0..15)
    BR3 // at 19: Port x reset bit y (y = 0..15)
    BR2 // at 18: Port x reset bit y (y = 0..15)
    BR1 // at 17: Port x reset bit y (y = 0..15)
    BR0 // at 16: Port x set bit y (y= 0..15)
    BS15 // at 15: Port x set bit y (y= 0..15)
    BS14 // at 14: Port x set bit y (y= 0..15)
    BS13 // at 13: Port x set bit y (y= 0..15)
    BS12 // at 12: Port x set bit y (y= 0..15)
    BS11 // at 11: Port x set bit y (y= 0..15)
    BS10 // at 10: Port x set bit y (y= 0..15)
    BS9 // at 9: Port x set bit y (y= 0..15)
    BS8 // at 8: Port x set bit y (y= 0..15)
    BS7 // at 7: Port x set bit y (y= 0..15)
    BS6 // at 6: Port x set bit y (y= 0..15)
    BS5 // at 5: Port x set bit y (y= 0..15)
    BS4 // at 4: Port x set bit y (y= 0..15)
    BS3 // at 3: Port x set bit y (y= 0..15)
    BS2 // at 2: Port x set bit y (y= 0..15)
    BS1 // at 1: Port x set bit y (y= 0..15)
    BS0 // at 0: Port x set bit y (y= 0..15)
  }

//---  Register LCKR: GPIO port configuration lock register
  LCKR @offset 0x1c $u32 {
    15
    LCKK // at 16: Port x lock bit y (y= 0..15)
    LCK15 // at 15: Port x lock bit y (y= 0..15)
    LCK14 // at 14: Port x lock bit y (y= 0..15)
    LCK13 // at 13: Port x lock bit y (y= 0..15)
    LCK12 // at 12: Port x lock bit y (y= 0..15)
    LCK11 // at 11: Port x lock bit y (y= 0..15)
    LCK10 // at 10: Port x lock bit y (y= 0..15)
    LCK9 // at 9: Port x lock bit y (y= 0..15)
    LCK8 // at 8: Port x lock bit y (y= 0..15)
    LCK7 // at 7: Port x lock bit y (y= 0..15)
    LCK6 // at 6: Port x lock bit y (y= 0..15)
    LCK5 // at 5: Port x lock bit y (y= 0..15)
    LCK4 // at 4: Port x lock bit y (y= 0..15)
    LCK3 // at 3: Port x lock bit y (y= 0..15)
    LCK2 // at 2: Port x lock bit y (y= 0..15)
    LCK1 // at 1: Port x lock bit y (y= 0..15)
    LCK0 // at 0: Port x lock bit y (y= 0..15)
  }

//---  Register AFRL: GPIO alternate function low register
  AFRL @offset 0x20 $u32 {
    AFRL7:4 // at 28: Alternate function selection for port x bit y (y = 0..7)
    AFRL6:4 // at 24: Alternate function selection for port x bit y (y = 0..7)
    AFRL5:4 // at 20: Alternate function selection for port x bit y (y = 0..7)
    AFRL4:4 // at 16: Alternate function selection for port x bit y (y = 0..7)
    AFRL3:4 // at 12: Alternate function selection for port x bit y (y = 0..7)
    AFRL2:4 // at 8: Alternate function selection for port x bit y (y = 0..7)
    AFRL1:4 // at 4: Alternate function selection for port x bit y (y = 0..7)
    AFRL0:4 // at 0: Alternate function selection for port x bit y (y = 0..7)
  }

//---  Register AFRH: GPIO alternate function high register
  AFRH @offset 0x24 $u32 {
    AFRH15:4 // at 28: Alternate function selection for port x bit y (y = 8..15)
    AFRH14:4 // at 24: Alternate function selection for port x bit y (y = 8..15)
    AFRH13:4 // at 20: Alternate function selection for port x bit y (y = 8..15)
    AFRH12:4 // at 16: Alternate function selection for port x bit y (y = 8..15)
    AFRH11:4 // at 12: Alternate function selection for port x bit y (y = 8..15)
    AFRH10:4 // at 8: Alternate function selection for port x bit y (y = 8..15)
    AFRH9:4 // at 4: Alternate function selection for port x bit y (y = 8..15)
    AFRH8:4 // at 0: Alternate function selection for port x bit y (y = 8..15)
  }

//---  Register BRR: GPIO port bit reset register
  BRR @offset 0x28 $u32 {
    16
    BR15 // at 15: Port A Reset bit 15
    BR14 // at 14: Port A Reset bit 14
    BR13 // at 13: Port A Reset bit 13
    BR12 // at 12: Port A Reset bit 12
    BR11 // at 11: Port A Reset bit 11
    BR10 // at 10: Port A Reset bit 10
    BR9 // at 9: Port A Reset bit 9
    BR8 // at 8: Port A Reset bit 8
    BR7 // at 7: Port A Reset bit 7
    BR6 // at 6: Port A Reset bit 6
    BR5 // at 5: Port A Reset bit 5
    BR4 // at 4: Port A Reset bit 4
    BR3 // at 3: Port A Reset bit 3
    BR2 // at 2: Port A Reset bit 2
    BR1 // at 1: Port A Reset bit 1
    BR0 // at 0: Port A Reset bit 0
  }

}

//------------------------------------------------------------------------------
// Peripheral GPIOB: General-purpose I/Os
//------------------------------------------------------------------------------

registers ©GPIOB @at 0x40020400 {
//---  Register MODER: GPIO port mode register
  MODER @offset 0x0 $u32 {
    MODER15:2 // at 30: Port x configuration bits (y = 0..15)
    MODER14:2 // at 28: Port x configuration bits (y = 0..15)
    MODER13:2 // at 26: Port x configuration bits (y = 0..15)
    MODER12:2 // at 24: Port x configuration bits (y = 0..15)
    MODER11:2 // at 22: Port x configuration bits (y = 0..15)
    MODER10:2 // at 20: Port x configuration bits (y = 0..15)
    MODER9:2 // at 18: Port x configuration bits (y = 0..15)
    MODER8:2 // at 16: Port x configuration bits (y = 0..15)
    MODER7:2 // at 14: Port x configuration bits (y = 0..15)
    MODER6:2 // at 12: Port x configuration bits (y = 0..15)
    MODER5:2 // at 10: Port x configuration bits (y = 0..15)
    MODER4:2 // at 8: Port x configuration bits (y = 0..15)
    MODER3:2 // at 6: Port x configuration bits (y = 0..15)
    MODER2:2 // at 4: Port x configuration bits (y = 0..15)
    MODER1:2 // at 2: Port x configuration bits (y = 0..15)
    MODER0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register OTYPER: GPIO port output type register
  OTYPER @offset 0x4 $u32 {
    16
    OT15 // at 15: Port x configuration bits (y = 0..15)
    OT14 // at 14: Port x configuration bits (y = 0..15)
    OT13 // at 13: Port x configuration bits (y = 0..15)
    OT12 // at 12: Port x configuration bits (y = 0..15)
    OT11 // at 11: Port x configuration bits (y = 0..15)
    OT10 // at 10: Port x configuration bits (y = 0..15)
    OT9 // at 9: Port x configuration bits (y = 0..15)
    OT8 // at 8: Port x configuration bits (y = 0..15)
    OT7 // at 7: Port x configuration bits (y = 0..15)
    OT6 // at 6: Port x configuration bits (y = 0..15)
    OT5 // at 5: Port x configuration bits (y = 0..15)
    OT4 // at 4: Port x configuration bits (y = 0..15)
    OT3 // at 3: Port x configuration bits (y = 0..15)
    OT2 // at 2: Port x configuration bits (y = 0..15)
    OT1 // at 1: Port x configuration bits (y = 0..15)
    OT0 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  GPIOB_OSPEEDR @offset 0x8 $u32 {
    OSPEEDR15:2 // at 30: Port x configuration bits (y = 0..15)
    OSPEEDR14:2 // at 28: Port x configuration bits (y = 0..15)
    OSPEEDR13:2 // at 26: Port x configuration bits (y = 0..15)
    OSPEEDR12:2 // at 24: Port x configuration bits (y = 0..15)
    OSPEEDR11:2 // at 22: Port x configuration bits (y = 0..15)
    OSPEEDR10:2 // at 20: Port x configuration bits (y = 0..15)
    OSPEEDR9:2 // at 18: Port x configuration bits (y = 0..15)
    OSPEEDR8:2 // at 16: Port x configuration bits (y = 0..15)
    OSPEEDR7:2 // at 14: Port x configuration bits (y = 0..15)
    OSPEEDR6:2 // at 12: Port x configuration bits (y = 0..15)
    OSPEEDR5:2 // at 10: Port x configuration bits (y = 0..15)
    OSPEEDR4:2 // at 8: Port x configuration bits (y = 0..15)
    OSPEEDR3:2 // at 6: Port x configuration bits (y = 0..15)
    OSPEEDR2:2 // at 4: Port x configuration bits (y = 0..15)
    OSPEEDR1:2 // at 2: Port x configuration bits (y = 0..15)
    OSPEEDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register PUPDR: GPIO port pull-up/pull-down register
  PUPDR @offset 0xc $u32 {
    PUPDR15:2 // at 30: Port x configuration bits (y = 0..15)
    PUPDR14:2 // at 28: Port x configuration bits (y = 0..15)
    PUPDR13:2 // at 26: Port x configuration bits (y = 0..15)
    PUPDR12:2 // at 24: Port x configuration bits (y = 0..15)
    PUPDR11:2 // at 22: Port x configuration bits (y = 0..15)
    PUPDR10:2 // at 20: Port x configuration bits (y = 0..15)
    PUPDR9:2 // at 18: Port x configuration bits (y = 0..15)
    PUPDR8:2 // at 16: Port x configuration bits (y = 0..15)
    PUPDR7:2 // at 14: Port x configuration bits (y = 0..15)
    PUPDR6:2 // at 12: Port x configuration bits (y = 0..15)
    PUPDR5:2 // at 10: Port x configuration bits (y = 0..15)
    PUPDR4:2 // at 8: Port x configuration bits (y = 0..15)
    PUPDR3:2 // at 6: Port x configuration bits (y = 0..15)
    PUPDR2:2 // at 4: Port x configuration bits (y = 0..15)
    PUPDR1:2 // at 2: Port x configuration bits (y = 0..15)
    PUPDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register IDR: GPIO port input data register
  IDR @offset 0x10 @ro $u32 {
    16
    IDR15 // at 15: Port input data (y = 0..15)
    IDR14 // at 14: Port input data (y = 0..15)
    IDR13 // at 13: Port input data (y = 0..15)
    IDR12 // at 12: Port input data (y = 0..15)
    IDR11 // at 11: Port input data (y = 0..15)
    IDR10 // at 10: Port input data (y = 0..15)
    IDR9 // at 9: Port input data (y = 0..15)
    IDR8 // at 8: Port input data (y = 0..15)
    IDR7 // at 7: Port input data (y = 0..15)
    IDR6 // at 6: Port input data (y = 0..15)
    IDR5 // at 5: Port input data (y = 0..15)
    IDR4 // at 4: Port input data (y = 0..15)
    IDR3 // at 3: Port input data (y = 0..15)
    IDR2 // at 2: Port input data (y = 0..15)
    IDR1 // at 1: Port input data (y = 0..15)
    IDR0 // at 0: Port input data (y = 0..15)
  }

//---  Register ODR: GPIO port output data register
  ODR @offset 0x14 $u32 {
    16
    ODR15 // at 15: Port output data (y = 0..15)
    ODR14 // at 14: Port output data (y = 0..15)
    ODR13 // at 13: Port output data (y = 0..15)
    ODR12 // at 12: Port output data (y = 0..15)
    ODR11 // at 11: Port output data (y = 0..15)
    ODR10 // at 10: Port output data (y = 0..15)
    ODR9 // at 9: Port output data (y = 0..15)
    ODR8 // at 8: Port output data (y = 0..15)
    ODR7 // at 7: Port output data (y = 0..15)
    ODR6 // at 6: Port output data (y = 0..15)
    ODR5 // at 5: Port output data (y = 0..15)
    ODR4 // at 4: Port output data (y = 0..15)
    ODR3 // at 3: Port output data (y = 0..15)
    ODR2 // at 2: Port output data (y = 0..15)
    ODR1 // at 1: Port output data (y = 0..15)
    ODR0 // at 0: Port output data (y = 0..15)
  }

//---  Register BSRR: GPIO port bit set/reset register
  BSRR @offset 0x18 $u32 {
    BR15 // at 31: Port x reset bit y (y = 0..15)
    BR14 // at 30: Port x reset bit y (y = 0..15)
    BR13 // at 29: Port x reset bit y (y = 0..15)
    BR12 // at 28: Port x reset bit y (y = 0..15)
    BR11 // at 27: Port x reset bit y (y = 0..15)
    BR10 // at 26: Port x reset bit y (y = 0..15)
    BR9 // at 25: Port x reset bit y (y = 0..15)
    BR8 // at 24: Port x reset bit y (y = 0..15)
    BR7 // at 23: Port x reset bit y (y = 0..15)
    BR6 // at 22: Port x reset bit y (y = 0..15)
    BR5 // at 21: Port x reset bit y (y = 0..15)
    BR4 // at 20: Port x reset bit y (y = 0..15)
    BR3 // at 19: Port x reset bit y (y = 0..15)
    BR2 // at 18: Port x reset bit y (y = 0..15)
    BR1 // at 17: Port x reset bit y (y = 0..15)
    BR0 // at 16: Port x set bit y (y= 0..15)
    BS15 // at 15: Port x set bit y (y= 0..15)
    BS14 // at 14: Port x set bit y (y= 0..15)
    BS13 // at 13: Port x set bit y (y= 0..15)
    BS12 // at 12: Port x set bit y (y= 0..15)
    BS11 // at 11: Port x set bit y (y= 0..15)
    BS10 // at 10: Port x set bit y (y= 0..15)
    BS9 // at 9: Port x set bit y (y= 0..15)
    BS8 // at 8: Port x set bit y (y= 0..15)
    BS7 // at 7: Port x set bit y (y= 0..15)
    BS6 // at 6: Port x set bit y (y= 0..15)
    BS5 // at 5: Port x set bit y (y= 0..15)
    BS4 // at 4: Port x set bit y (y= 0..15)
    BS3 // at 3: Port x set bit y (y= 0..15)
    BS2 // at 2: Port x set bit y (y= 0..15)
    BS1 // at 1: Port x set bit y (y= 0..15)
    BS0 // at 0: Port x set bit y (y= 0..15)
  }

//---  Register LCKR: GPIO port configuration lock register
  LCKR @offset 0x1c $u32 {
    15
    LCKK // at 16: Port x lock bit y (y= 0..15)
    LCK15 // at 15: Port x lock bit y (y= 0..15)
    LCK14 // at 14: Port x lock bit y (y= 0..15)
    LCK13 // at 13: Port x lock bit y (y= 0..15)
    LCK12 // at 12: Port x lock bit y (y= 0..15)
    LCK11 // at 11: Port x lock bit y (y= 0..15)
    LCK10 // at 10: Port x lock bit y (y= 0..15)
    LCK9 // at 9: Port x lock bit y (y= 0..15)
    LCK8 // at 8: Port x lock bit y (y= 0..15)
    LCK7 // at 7: Port x lock bit y (y= 0..15)
    LCK6 // at 6: Port x lock bit y (y= 0..15)
    LCK5 // at 5: Port x lock bit y (y= 0..15)
    LCK4 // at 4: Port x lock bit y (y= 0..15)
    LCK3 // at 3: Port x lock bit y (y= 0..15)
    LCK2 // at 2: Port x lock bit y (y= 0..15)
    LCK1 // at 1: Port x lock bit y (y= 0..15)
    LCK0 // at 0: Port x lock bit y (y= 0..15)
  }

//---  Register AFRL: GPIO alternate function low register
  AFRL @offset 0x20 $u32 {
    AFRL7:4 // at 28: Alternate function selection for port x bit y (y = 0..7)
    AFRL6:4 // at 24: Alternate function selection for port x bit y (y = 0..7)
    AFRL5:4 // at 20: Alternate function selection for port x bit y (y = 0..7)
    AFRL4:4 // at 16: Alternate function selection for port x bit y (y = 0..7)
    AFRL3:4 // at 12: Alternate function selection for port x bit y (y = 0..7)
    AFRL2:4 // at 8: Alternate function selection for port x bit y (y = 0..7)
    AFRL1:4 // at 4: Alternate function selection for port x bit y (y = 0..7)
    AFRL0:4 // at 0: Alternate function selection for port x bit y (y = 0..7)
  }

//---  Register AFRH: GPIO alternate function high register
  AFRH @offset 0x24 $u32 {
    AFRH15:4 // at 28: Alternate function selection for port x bit y (y = 8..15)
    AFRH14:4 // at 24: Alternate function selection for port x bit y (y = 8..15)
    AFRH13:4 // at 20: Alternate function selection for port x bit y (y = 8..15)
    AFRH12:4 // at 16: Alternate function selection for port x bit y (y = 8..15)
    AFRH11:4 // at 12: Alternate function selection for port x bit y (y = 8..15)
    AFRH10:4 // at 8: Alternate function selection for port x bit y (y = 8..15)
    AFRH9:4 // at 4: Alternate function selection for port x bit y (y = 8..15)
    AFRH8:4 // at 0: Alternate function selection for port x bit y (y = 8..15)
  }

//---  Register BRR: GPIO port bit reset register
  BRR @offset 0x28 $u32 {
    16
    BR15 // at 15: Port B Reset bit 15
    BR14 // at 14: Port B Reset bit 14
    BR13 // at 13: Port B Reset bit 13
    BR12 // at 12: Port B Reset bit 12
    BR11 // at 11: Port B Reset bit 11
    BR10 // at 10: Port B Reset bit 10
    BR9 // at 9: Port B Reset bit 9
    BR8 // at 8: Port B Reset bit 8
    BR7 // at 7: Port B Reset bit 7
    BR6 // at 6: Port B Reset bit 6
    BR5 // at 5: Port B Reset bit 5
    BR4 // at 4: Port B Reset bit 4
    BR3 // at 3: Port B Reset bit 3
    BR2 // at 2: Port B Reset bit 2
    BR1 // at 1: Port B Reset bit 1
    BR0 // at 0: Port B Reset bit 0
  }

}

//------------------------------------------------------------------------------
// Peripheral GPIOC
//------------------------------------------------------------------------------

registers ©GPIOC @at 0x40020800 {
//---  Register MODER: GPIO port mode register
  MODER @offset 0x0 $u32 {
    MODER15:2 // at 30: Port x configuration bits (y = 0..15)
    MODER14:2 // at 28: Port x configuration bits (y = 0..15)
    MODER13:2 // at 26: Port x configuration bits (y = 0..15)
    MODER12:2 // at 24: Port x configuration bits (y = 0..15)
    MODER11:2 // at 22: Port x configuration bits (y = 0..15)
    MODER10:2 // at 20: Port x configuration bits (y = 0..15)
    MODER9:2 // at 18: Port x configuration bits (y = 0..15)
    MODER8:2 // at 16: Port x configuration bits (y = 0..15)
    MODER7:2 // at 14: Port x configuration bits (y = 0..15)
    MODER6:2 // at 12: Port x configuration bits (y = 0..15)
    MODER5:2 // at 10: Port x configuration bits (y = 0..15)
    MODER4:2 // at 8: Port x configuration bits (y = 0..15)
    MODER3:2 // at 6: Port x configuration bits (y = 0..15)
    MODER2:2 // at 4: Port x configuration bits (y = 0..15)
    MODER1:2 // at 2: Port x configuration bits (y = 0..15)
    MODER0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register OTYPER: GPIO port output type register
  OTYPER @offset 0x4 $u32 {
    16
    OT15 // at 15: Port x configuration bits (y = 0..15)
    OT14 // at 14: Port x configuration bits (y = 0..15)
    OT13 // at 13: Port x configuration bits (y = 0..15)
    OT12 // at 12: Port x configuration bits (y = 0..15)
    OT11 // at 11: Port x configuration bits (y = 0..15)
    OT10 // at 10: Port x configuration bits (y = 0..15)
    OT9 // at 9: Port x configuration bits (y = 0..15)
    OT8 // at 8: Port x configuration bits (y = 0..15)
    OT7 // at 7: Port x configuration bits (y = 0..15)
    OT6 // at 6: Port x configuration bits (y = 0..15)
    OT5 // at 5: Port x configuration bits (y = 0..15)
    OT4 // at 4: Port x configuration bits (y = 0..15)
    OT3 // at 3: Port x configuration bits (y = 0..15)
    OT2 // at 2: Port x configuration bits (y = 0..15)
    OT1 // at 1: Port x configuration bits (y = 0..15)
    OT0 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  GPIOB_OSPEEDR @offset 0x8 $u32 {
    OSPEEDR15:2 // at 30: Port x configuration bits (y = 0..15)
    OSPEEDR14:2 // at 28: Port x configuration bits (y = 0..15)
    OSPEEDR13:2 // at 26: Port x configuration bits (y = 0..15)
    OSPEEDR12:2 // at 24: Port x configuration bits (y = 0..15)
    OSPEEDR11:2 // at 22: Port x configuration bits (y = 0..15)
    OSPEEDR10:2 // at 20: Port x configuration bits (y = 0..15)
    OSPEEDR9:2 // at 18: Port x configuration bits (y = 0..15)
    OSPEEDR8:2 // at 16: Port x configuration bits (y = 0..15)
    OSPEEDR7:2 // at 14: Port x configuration bits (y = 0..15)
    OSPEEDR6:2 // at 12: Port x configuration bits (y = 0..15)
    OSPEEDR5:2 // at 10: Port x configuration bits (y = 0..15)
    OSPEEDR4:2 // at 8: Port x configuration bits (y = 0..15)
    OSPEEDR3:2 // at 6: Port x configuration bits (y = 0..15)
    OSPEEDR2:2 // at 4: Port x configuration bits (y = 0..15)
    OSPEEDR1:2 // at 2: Port x configuration bits (y = 0..15)
    OSPEEDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register PUPDR: GPIO port pull-up/pull-down register
  PUPDR @offset 0xc $u32 {
    PUPDR15:2 // at 30: Port x configuration bits (y = 0..15)
    PUPDR14:2 // at 28: Port x configuration bits (y = 0..15)
    PUPDR13:2 // at 26: Port x configuration bits (y = 0..15)
    PUPDR12:2 // at 24: Port x configuration bits (y = 0..15)
    PUPDR11:2 // at 22: Port x configuration bits (y = 0..15)
    PUPDR10:2 // at 20: Port x configuration bits (y = 0..15)
    PUPDR9:2 // at 18: Port x configuration bits (y = 0..15)
    PUPDR8:2 // at 16: Port x configuration bits (y = 0..15)
    PUPDR7:2 // at 14: Port x configuration bits (y = 0..15)
    PUPDR6:2 // at 12: Port x configuration bits (y = 0..15)
    PUPDR5:2 // at 10: Port x configuration bits (y = 0..15)
    PUPDR4:2 // at 8: Port x configuration bits (y = 0..15)
    PUPDR3:2 // at 6: Port x configuration bits (y = 0..15)
    PUPDR2:2 // at 4: Port x configuration bits (y = 0..15)
    PUPDR1:2 // at 2: Port x configuration bits (y = 0..15)
    PUPDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register IDR: GPIO port input data register
  IDR @offset 0x10 @ro $u32 {
    16
    IDR15 // at 15: Port input data (y = 0..15)
    IDR14 // at 14: Port input data (y = 0..15)
    IDR13 // at 13: Port input data (y = 0..15)
    IDR12 // at 12: Port input data (y = 0..15)
    IDR11 // at 11: Port input data (y = 0..15)
    IDR10 // at 10: Port input data (y = 0..15)
    IDR9 // at 9: Port input data (y = 0..15)
    IDR8 // at 8: Port input data (y = 0..15)
    IDR7 // at 7: Port input data (y = 0..15)
    IDR6 // at 6: Port input data (y = 0..15)
    IDR5 // at 5: Port input data (y = 0..15)
    IDR4 // at 4: Port input data (y = 0..15)
    IDR3 // at 3: Port input data (y = 0..15)
    IDR2 // at 2: Port input data (y = 0..15)
    IDR1 // at 1: Port input data (y = 0..15)
    IDR0 // at 0: Port input data (y = 0..15)
  }

//---  Register ODR: GPIO port output data register
  ODR @offset 0x14 $u32 {
    16
    ODR15 // at 15: Port output data (y = 0..15)
    ODR14 // at 14: Port output data (y = 0..15)
    ODR13 // at 13: Port output data (y = 0..15)
    ODR12 // at 12: Port output data (y = 0..15)
    ODR11 // at 11: Port output data (y = 0..15)
    ODR10 // at 10: Port output data (y = 0..15)
    ODR9 // at 9: Port output data (y = 0..15)
    ODR8 // at 8: Port output data (y = 0..15)
    ODR7 // at 7: Port output data (y = 0..15)
    ODR6 // at 6: Port output data (y = 0..15)
    ODR5 // at 5: Port output data (y = 0..15)
    ODR4 // at 4: Port output data (y = 0..15)
    ODR3 // at 3: Port output data (y = 0..15)
    ODR2 // at 2: Port output data (y = 0..15)
    ODR1 // at 1: Port output data (y = 0..15)
    ODR0 // at 0: Port output data (y = 0..15)
  }

//---  Register BSRR: GPIO port bit set/reset register
  BSRR @offset 0x18 $u32 {
    BR15 // at 31: Port x reset bit y (y = 0..15)
    BR14 // at 30: Port x reset bit y (y = 0..15)
    BR13 // at 29: Port x reset bit y (y = 0..15)
    BR12 // at 28: Port x reset bit y (y = 0..15)
    BR11 // at 27: Port x reset bit y (y = 0..15)
    BR10 // at 26: Port x reset bit y (y = 0..15)
    BR9 // at 25: Port x reset bit y (y = 0..15)
    BR8 // at 24: Port x reset bit y (y = 0..15)
    BR7 // at 23: Port x reset bit y (y = 0..15)
    BR6 // at 22: Port x reset bit y (y = 0..15)
    BR5 // at 21: Port x reset bit y (y = 0..15)
    BR4 // at 20: Port x reset bit y (y = 0..15)
    BR3 // at 19: Port x reset bit y (y = 0..15)
    BR2 // at 18: Port x reset bit y (y = 0..15)
    BR1 // at 17: Port x reset bit y (y = 0..15)
    BR0 // at 16: Port x set bit y (y= 0..15)
    BS15 // at 15: Port x set bit y (y= 0..15)
    BS14 // at 14: Port x set bit y (y= 0..15)
    BS13 // at 13: Port x set bit y (y= 0..15)
    BS12 // at 12: Port x set bit y (y= 0..15)
    BS11 // at 11: Port x set bit y (y= 0..15)
    BS10 // at 10: Port x set bit y (y= 0..15)
    BS9 // at 9: Port x set bit y (y= 0..15)
    BS8 // at 8: Port x set bit y (y= 0..15)
    BS7 // at 7: Port x set bit y (y= 0..15)
    BS6 // at 6: Port x set bit y (y= 0..15)
    BS5 // at 5: Port x set bit y (y= 0..15)
    BS4 // at 4: Port x set bit y (y= 0..15)
    BS3 // at 3: Port x set bit y (y= 0..15)
    BS2 // at 2: Port x set bit y (y= 0..15)
    BS1 // at 1: Port x set bit y (y= 0..15)
    BS0 // at 0: Port x set bit y (y= 0..15)
  }

//---  Register LCKR: GPIO port configuration lock register
  LCKR @offset 0x1c $u32 {
    15
    LCKK // at 16: Port x lock bit y (y= 0..15)
    LCK15 // at 15: Port x lock bit y (y= 0..15)
    LCK14 // at 14: Port x lock bit y (y= 0..15)
    LCK13 // at 13: Port x lock bit y (y= 0..15)
    LCK12 // at 12: Port x lock bit y (y= 0..15)
    LCK11 // at 11: Port x lock bit y (y= 0..15)
    LCK10 // at 10: Port x lock bit y (y= 0..15)
    LCK9 // at 9: Port x lock bit y (y= 0..15)
    LCK8 // at 8: Port x lock bit y (y= 0..15)
    LCK7 // at 7: Port x lock bit y (y= 0..15)
    LCK6 // at 6: Port x lock bit y (y= 0..15)
    LCK5 // at 5: Port x lock bit y (y= 0..15)
    LCK4 // at 4: Port x lock bit y (y= 0..15)
    LCK3 // at 3: Port x lock bit y (y= 0..15)
    LCK2 // at 2: Port x lock bit y (y= 0..15)
    LCK1 // at 1: Port x lock bit y (y= 0..15)
    LCK0 // at 0: Port x lock bit y (y= 0..15)
  }

//---  Register AFRL: GPIO alternate function lowregister
  AFRL @offset 0x20 $u32 {
    AFRL7:4 // at 28: Alternate function selection for port x bit y (y = 0..7)
    AFRL6:4 // at 24: Alternate function selection for port x bit y (y = 0..7)
    AFRL5:4 // at 20: Alternate function selection for port x bit y (y = 0..7)
    AFRL4:4 // at 16: Alternate function selection for port x bit y (y = 0..7)
    AFRL3:4 // at 12: Alternate function selection for port x bit y (y = 0..7)
    AFRL2:4 // at 8: Alternate function selection for port x bit y (y = 0..7)
    AFRL1:4 // at 4: Alternate function selection for port x bit y (y = 0..7)
    AFRL0:4 // at 0: Alternate function selection for port x bit y (y = 0..7)
  }

//---  Register AFRH: GPIO alternate function high register
  AFRH @offset 0x24 $u32 {
    AFRH15:4 // at 28: Alternate function selection for port x bit y (y = 8..15)
    AFRH14:4 // at 24: Alternate function selection for port x bit y (y = 8..15)
    AFRH13:4 // at 20: Alternate function selection for port x bit y (y = 8..15)
    AFRH12:4 // at 16: Alternate function selection for port x bit y (y = 8..15)
    AFRH11:4 // at 12: Alternate function selection for port x bit y (y = 8..15)
    AFRH10:4 // at 8: Alternate function selection for port x bit y (y = 8..15)
    AFRH9:4 // at 4: Alternate function selection for port x bit y (y = 8..15)
    AFRH8:4 // at 0: Alternate function selection for port x bit y (y = 8..15)
  }

//---  Register BRR: GPIO port bit reset register
  BRR @offset 0x28 $u32 {
    16
    BR15 // at 15: Port D Reset bit 15
    BR14 // at 14: Port D Reset bit 14
    BR13 // at 13: Port D Reset bit 13
    BR12 // at 12: Port D Reset bit 12
    BR11 // at 11: Port D Reset bit 11
    BR10 // at 10: Port D Reset bit 10
    BR9 // at 9: Port D Reset bit 9
    BR8 // at 8: Port D Reset bit 8
    BR7 // at 7: Port D Reset bit 7
    BR6 // at 6: Port D Reset bit 6
    BR5 // at 5: Port D Reset bit 5
    BR4 // at 4: Port D Reset bit 4
    BR3 // at 3: Port D Reset bit 3
    BR2 // at 2: Port D Reset bit 2
    BR1 // at 1: Port D Reset bit 1
    BR0 // at 0: Port D Reset bit 0
  }

}

//------------------------------------------------------------------------------
// Peripheral GPIOD: General-purpose I/Os
//------------------------------------------------------------------------------

registers ©GPIOD @at 0x40020c00 {
//---  Register MODER: GPIO port mode register
  MODER @offset 0x0 $u32 {
    MODER15:2 // at 30: Port x configuration bits (y = 0..15)
    MODER14:2 // at 28: Port x configuration bits (y = 0..15)
    MODER13:2 // at 26: Port x configuration bits (y = 0..15)
    MODER12:2 // at 24: Port x configuration bits (y = 0..15)
    MODER11:2 // at 22: Port x configuration bits (y = 0..15)
    MODER10:2 // at 20: Port x configuration bits (y = 0..15)
    MODER9:2 // at 18: Port x configuration bits (y = 0..15)
    MODER8:2 // at 16: Port x configuration bits (y = 0..15)
    MODER7:2 // at 14: Port x configuration bits (y = 0..15)
    MODER6:2 // at 12: Port x configuration bits (y = 0..15)
    MODER5:2 // at 10: Port x configuration bits (y = 0..15)
    MODER4:2 // at 8: Port x configuration bits (y = 0..15)
    MODER3:2 // at 6: Port x configuration bits (y = 0..15)
    MODER2:2 // at 4: Port x configuration bits (y = 0..15)
    MODER1:2 // at 2: Port x configuration bits (y = 0..15)
    MODER0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register OTYPER: GPIO port output type register
  OTYPER @offset 0x4 $u32 {
    16
    OT15 // at 15: Port x configuration bits (y = 0..15)
    OT14 // at 14: Port x configuration bits (y = 0..15)
    OT13 // at 13: Port x configuration bits (y = 0..15)
    OT12 // at 12: Port x configuration bits (y = 0..15)
    OT11 // at 11: Port x configuration bits (y = 0..15)
    OT10 // at 10: Port x configuration bits (y = 0..15)
    OT9 // at 9: Port x configuration bits (y = 0..15)
    OT8 // at 8: Port x configuration bits (y = 0..15)
    OT7 // at 7: Port x configuration bits (y = 0..15)
    OT6 // at 6: Port x configuration bits (y = 0..15)
    OT5 // at 5: Port x configuration bits (y = 0..15)
    OT4 // at 4: Port x configuration bits (y = 0..15)
    OT3 // at 3: Port x configuration bits (y = 0..15)
    OT2 // at 2: Port x configuration bits (y = 0..15)
    OT1 // at 1: Port x configuration bits (y = 0..15)
    OT0 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  GPIOB_OSPEEDR @offset 0x8 $u32 {
    OSPEEDR15:2 // at 30: Port x configuration bits (y = 0..15)
    OSPEEDR14:2 // at 28: Port x configuration bits (y = 0..15)
    OSPEEDR13:2 // at 26: Port x configuration bits (y = 0..15)
    OSPEEDR12:2 // at 24: Port x configuration bits (y = 0..15)
    OSPEEDR11:2 // at 22: Port x configuration bits (y = 0..15)
    OSPEEDR10:2 // at 20: Port x configuration bits (y = 0..15)
    OSPEEDR9:2 // at 18: Port x configuration bits (y = 0..15)
    OSPEEDR8:2 // at 16: Port x configuration bits (y = 0..15)
    OSPEEDR7:2 // at 14: Port x configuration bits (y = 0..15)
    OSPEEDR6:2 // at 12: Port x configuration bits (y = 0..15)
    OSPEEDR5:2 // at 10: Port x configuration bits (y = 0..15)
    OSPEEDR4:2 // at 8: Port x configuration bits (y = 0..15)
    OSPEEDR3:2 // at 6: Port x configuration bits (y = 0..15)
    OSPEEDR2:2 // at 4: Port x configuration bits (y = 0..15)
    OSPEEDR1:2 // at 2: Port x configuration bits (y = 0..15)
    OSPEEDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register PUPDR: GPIO port pull-up/pull-down register
  PUPDR @offset 0xc $u32 {
    PUPDR15:2 // at 30: Port x configuration bits (y = 0..15)
    PUPDR14:2 // at 28: Port x configuration bits (y = 0..15)
    PUPDR13:2 // at 26: Port x configuration bits (y = 0..15)
    PUPDR12:2 // at 24: Port x configuration bits (y = 0..15)
    PUPDR11:2 // at 22: Port x configuration bits (y = 0..15)
    PUPDR10:2 // at 20: Port x configuration bits (y = 0..15)
    PUPDR9:2 // at 18: Port x configuration bits (y = 0..15)
    PUPDR8:2 // at 16: Port x configuration bits (y = 0..15)
    PUPDR7:2 // at 14: Port x configuration bits (y = 0..15)
    PUPDR6:2 // at 12: Port x configuration bits (y = 0..15)
    PUPDR5:2 // at 10: Port x configuration bits (y = 0..15)
    PUPDR4:2 // at 8: Port x configuration bits (y = 0..15)
    PUPDR3:2 // at 6: Port x configuration bits (y = 0..15)
    PUPDR2:2 // at 4: Port x configuration bits (y = 0..15)
    PUPDR1:2 // at 2: Port x configuration bits (y = 0..15)
    PUPDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register IDR: GPIO port input data register
  IDR @offset 0x10 @ro $u32 {
    16
    IDR15 // at 15: Port input data (y = 0..15)
    IDR14 // at 14: Port input data (y = 0..15)
    IDR13 // at 13: Port input data (y = 0..15)
    IDR12 // at 12: Port input data (y = 0..15)
    IDR11 // at 11: Port input data (y = 0..15)
    IDR10 // at 10: Port input data (y = 0..15)
    IDR9 // at 9: Port input data (y = 0..15)
    IDR8 // at 8: Port input data (y = 0..15)
    IDR7 // at 7: Port input data (y = 0..15)
    IDR6 // at 6: Port input data (y = 0..15)
    IDR5 // at 5: Port input data (y = 0..15)
    IDR4 // at 4: Port input data (y = 0..15)
    IDR3 // at 3: Port input data (y = 0..15)
    IDR2 // at 2: Port input data (y = 0..15)
    IDR1 // at 1: Port input data (y = 0..15)
    IDR0 // at 0: Port input data (y = 0..15)
  }

//---  Register ODR: GPIO port output data register
  ODR @offset 0x14 $u32 {
    16
    ODR15 // at 15: Port output data (y = 0..15)
    ODR14 // at 14: Port output data (y = 0..15)
    ODR13 // at 13: Port output data (y = 0..15)
    ODR12 // at 12: Port output data (y = 0..15)
    ODR11 // at 11: Port output data (y = 0..15)
    ODR10 // at 10: Port output data (y = 0..15)
    ODR9 // at 9: Port output data (y = 0..15)
    ODR8 // at 8: Port output data (y = 0..15)
    ODR7 // at 7: Port output data (y = 0..15)
    ODR6 // at 6: Port output data (y = 0..15)
    ODR5 // at 5: Port output data (y = 0..15)
    ODR4 // at 4: Port output data (y = 0..15)
    ODR3 // at 3: Port output data (y = 0..15)
    ODR2 // at 2: Port output data (y = 0..15)
    ODR1 // at 1: Port output data (y = 0..15)
    ODR0 // at 0: Port output data (y = 0..15)
  }

//---  Register BSRR: GPIO port bit set/reset register
  BSRR @offset 0x18 $u32 {
    BR15 // at 31: Port x reset bit y (y = 0..15)
    BR14 // at 30: Port x reset bit y (y = 0..15)
    BR13 // at 29: Port x reset bit y (y = 0..15)
    BR12 // at 28: Port x reset bit y (y = 0..15)
    BR11 // at 27: Port x reset bit y (y = 0..15)
    BR10 // at 26: Port x reset bit y (y = 0..15)
    BR9 // at 25: Port x reset bit y (y = 0..15)
    BR8 // at 24: Port x reset bit y (y = 0..15)
    BR7 // at 23: Port x reset bit y (y = 0..15)
    BR6 // at 22: Port x reset bit y (y = 0..15)
    BR5 // at 21: Port x reset bit y (y = 0..15)
    BR4 // at 20: Port x reset bit y (y = 0..15)
    BR3 // at 19: Port x reset bit y (y = 0..15)
    BR2 // at 18: Port x reset bit y (y = 0..15)
    BR1 // at 17: Port x reset bit y (y = 0..15)
    BR0 // at 16: Port x set bit y (y= 0..15)
    BS15 // at 15: Port x set bit y (y= 0..15)
    BS14 // at 14: Port x set bit y (y= 0..15)
    BS13 // at 13: Port x set bit y (y= 0..15)
    BS12 // at 12: Port x set bit y (y= 0..15)
    BS11 // at 11: Port x set bit y (y= 0..15)
    BS10 // at 10: Port x set bit y (y= 0..15)
    BS9 // at 9: Port x set bit y (y= 0..15)
    BS8 // at 8: Port x set bit y (y= 0..15)
    BS7 // at 7: Port x set bit y (y= 0..15)
    BS6 // at 6: Port x set bit y (y= 0..15)
    BS5 // at 5: Port x set bit y (y= 0..15)
    BS4 // at 4: Port x set bit y (y= 0..15)
    BS3 // at 3: Port x set bit y (y= 0..15)
    BS2 // at 2: Port x set bit y (y= 0..15)
    BS1 // at 1: Port x set bit y (y= 0..15)
    BS0 // at 0: Port x set bit y (y= 0..15)
  }

//---  Register LCKR: GPIO port configuration lock register
  LCKR @offset 0x1c $u32 {
    15
    LCKK // at 16: Port x lock bit y (y= 0..15)
    LCK15 // at 15: Port x lock bit y (y= 0..15)
    LCK14 // at 14: Port x lock bit y (y= 0..15)
    LCK13 // at 13: Port x lock bit y (y= 0..15)
    LCK12 // at 12: Port x lock bit y (y= 0..15)
    LCK11 // at 11: Port x lock bit y (y= 0..15)
    LCK10 // at 10: Port x lock bit y (y= 0..15)
    LCK9 // at 9: Port x lock bit y (y= 0..15)
    LCK8 // at 8: Port x lock bit y (y= 0..15)
    LCK7 // at 7: Port x lock bit y (y= 0..15)
    LCK6 // at 6: Port x lock bit y (y= 0..15)
    LCK5 // at 5: Port x lock bit y (y= 0..15)
    LCK4 // at 4: Port x lock bit y (y= 0..15)
    LCK3 // at 3: Port x lock bit y (y= 0..15)
    LCK2 // at 2: Port x lock bit y (y= 0..15)
    LCK1 // at 1: Port x lock bit y (y= 0..15)
    LCK0 // at 0: Port x lock bit y (y= 0..15)
  }

//---  Register AFRL: GPIO alternate function lowregister
  AFRL @offset 0x20 $u32 {
    AFRL7:4 // at 28: Alternate function selection for port x bit y (y = 0..7)
    AFRL6:4 // at 24: Alternate function selection for port x bit y (y = 0..7)
    AFRL5:4 // at 20: Alternate function selection for port x bit y (y = 0..7)
    AFRL4:4 // at 16: Alternate function selection for port x bit y (y = 0..7)
    AFRL3:4 // at 12: Alternate function selection for port x bit y (y = 0..7)
    AFRL2:4 // at 8: Alternate function selection for port x bit y (y = 0..7)
    AFRL1:4 // at 4: Alternate function selection for port x bit y (y = 0..7)
    AFRL0:4 // at 0: Alternate function selection for port x bit y (y = 0..7)
  }

//---  Register AFRH: GPIO alternate function high register
  AFRH @offset 0x24 $u32 {
    AFRH15:4 // at 28: Alternate function selection for port x bit y (y = 8..15)
    AFRH14:4 // at 24: Alternate function selection for port x bit y (y = 8..15)
    AFRH13:4 // at 20: Alternate function selection for port x bit y (y = 8..15)
    AFRH12:4 // at 16: Alternate function selection for port x bit y (y = 8..15)
    AFRH11:4 // at 12: Alternate function selection for port x bit y (y = 8..15)
    AFRH10:4 // at 8: Alternate function selection for port x bit y (y = 8..15)
    AFRH9:4 // at 4: Alternate function selection for port x bit y (y = 8..15)
    AFRH8:4 // at 0: Alternate function selection for port x bit y (y = 8..15)
  }

//---  Register BRR: GPIO port bit reset register
  BRR @offset 0x28 $u32 {
    16
    BR15 // at 15: Port D Reset bit 15
    BR14 // at 14: Port D Reset bit 14
    BR13 // at 13: Port D Reset bit 13
    BR12 // at 12: Port D Reset bit 12
    BR11 // at 11: Port D Reset bit 11
    BR10 // at 10: Port D Reset bit 10
    BR9 // at 9: Port D Reset bit 9
    BR8 // at 8: Port D Reset bit 8
    BR7 // at 7: Port D Reset bit 7
    BR6 // at 6: Port D Reset bit 6
    BR5 // at 5: Port D Reset bit 5
    BR4 // at 4: Port D Reset bit 4
    BR3 // at 3: Port D Reset bit 3
    BR2 // at 2: Port D Reset bit 2
    BR1 // at 1: Port D Reset bit 1
    BR0 // at 0: Port D Reset bit 0
  }

}

//------------------------------------------------------------------------------
// Peripheral GPIOE
//------------------------------------------------------------------------------

registers ©GPIOE @at 0x40021000 {
//---  Register MODER: GPIO port mode register
  MODER @offset 0x0 $u32 {
    MODER15:2 // at 30: Port x configuration bits (y = 0..15)
    MODER14:2 // at 28: Port x configuration bits (y = 0..15)
    MODER13:2 // at 26: Port x configuration bits (y = 0..15)
    MODER12:2 // at 24: Port x configuration bits (y = 0..15)
    MODER11:2 // at 22: Port x configuration bits (y = 0..15)
    MODER10:2 // at 20: Port x configuration bits (y = 0..15)
    MODER9:2 // at 18: Port x configuration bits (y = 0..15)
    MODER8:2 // at 16: Port x configuration bits (y = 0..15)
    MODER7:2 // at 14: Port x configuration bits (y = 0..15)
    MODER6:2 // at 12: Port x configuration bits (y = 0..15)
    MODER5:2 // at 10: Port x configuration bits (y = 0..15)
    MODER4:2 // at 8: Port x configuration bits (y = 0..15)
    MODER3:2 // at 6: Port x configuration bits (y = 0..15)
    MODER2:2 // at 4: Port x configuration bits (y = 0..15)
    MODER1:2 // at 2: Port x configuration bits (y = 0..15)
    MODER0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register OTYPER: GPIO port output type register
  OTYPER @offset 0x4 $u32 {
    16
    OT15 // at 15: Port x configuration bits (y = 0..15)
    OT14 // at 14: Port x configuration bits (y = 0..15)
    OT13 // at 13: Port x configuration bits (y = 0..15)
    OT12 // at 12: Port x configuration bits (y = 0..15)
    OT11 // at 11: Port x configuration bits (y = 0..15)
    OT10 // at 10: Port x configuration bits (y = 0..15)
    OT9 // at 9: Port x configuration bits (y = 0..15)
    OT8 // at 8: Port x configuration bits (y = 0..15)
    OT7 // at 7: Port x configuration bits (y = 0..15)
    OT6 // at 6: Port x configuration bits (y = 0..15)
    OT5 // at 5: Port x configuration bits (y = 0..15)
    OT4 // at 4: Port x configuration bits (y = 0..15)
    OT3 // at 3: Port x configuration bits (y = 0..15)
    OT2 // at 2: Port x configuration bits (y = 0..15)
    OT1 // at 1: Port x configuration bits (y = 0..15)
    OT0 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  GPIOB_OSPEEDR @offset 0x8 $u32 {
    OSPEEDR15:2 // at 30: Port x configuration bits (y = 0..15)
    OSPEEDR14:2 // at 28: Port x configuration bits (y = 0..15)
    OSPEEDR13:2 // at 26: Port x configuration bits (y = 0..15)
    OSPEEDR12:2 // at 24: Port x configuration bits (y = 0..15)
    OSPEEDR11:2 // at 22: Port x configuration bits (y = 0..15)
    OSPEEDR10:2 // at 20: Port x configuration bits (y = 0..15)
    OSPEEDR9:2 // at 18: Port x configuration bits (y = 0..15)
    OSPEEDR8:2 // at 16: Port x configuration bits (y = 0..15)
    OSPEEDR7:2 // at 14: Port x configuration bits (y = 0..15)
    OSPEEDR6:2 // at 12: Port x configuration bits (y = 0..15)
    OSPEEDR5:2 // at 10: Port x configuration bits (y = 0..15)
    OSPEEDR4:2 // at 8: Port x configuration bits (y = 0..15)
    OSPEEDR3:2 // at 6: Port x configuration bits (y = 0..15)
    OSPEEDR2:2 // at 4: Port x configuration bits (y = 0..15)
    OSPEEDR1:2 // at 2: Port x configuration bits (y = 0..15)
    OSPEEDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register PUPDR: GPIO port pull-up/pull-down register
  PUPDR @offset 0xc $u32 {
    PUPDR15:2 // at 30: Port x configuration bits (y = 0..15)
    PUPDR14:2 // at 28: Port x configuration bits (y = 0..15)
    PUPDR13:2 // at 26: Port x configuration bits (y = 0..15)
    PUPDR12:2 // at 24: Port x configuration bits (y = 0..15)
    PUPDR11:2 // at 22: Port x configuration bits (y = 0..15)
    PUPDR10:2 // at 20: Port x configuration bits (y = 0..15)
    PUPDR9:2 // at 18: Port x configuration bits (y = 0..15)
    PUPDR8:2 // at 16: Port x configuration bits (y = 0..15)
    PUPDR7:2 // at 14: Port x configuration bits (y = 0..15)
    PUPDR6:2 // at 12: Port x configuration bits (y = 0..15)
    PUPDR5:2 // at 10: Port x configuration bits (y = 0..15)
    PUPDR4:2 // at 8: Port x configuration bits (y = 0..15)
    PUPDR3:2 // at 6: Port x configuration bits (y = 0..15)
    PUPDR2:2 // at 4: Port x configuration bits (y = 0..15)
    PUPDR1:2 // at 2: Port x configuration bits (y = 0..15)
    PUPDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register IDR: GPIO port input data register
  IDR @offset 0x10 @ro $u32 {
    16
    IDR15 // at 15: Port input data (y = 0..15)
    IDR14 // at 14: Port input data (y = 0..15)
    IDR13 // at 13: Port input data (y = 0..15)
    IDR12 // at 12: Port input data (y = 0..15)
    IDR11 // at 11: Port input data (y = 0..15)
    IDR10 // at 10: Port input data (y = 0..15)
    IDR9 // at 9: Port input data (y = 0..15)
    IDR8 // at 8: Port input data (y = 0..15)
    IDR7 // at 7: Port input data (y = 0..15)
    IDR6 // at 6: Port input data (y = 0..15)
    IDR5 // at 5: Port input data (y = 0..15)
    IDR4 // at 4: Port input data (y = 0..15)
    IDR3 // at 3: Port input data (y = 0..15)
    IDR2 // at 2: Port input data (y = 0..15)
    IDR1 // at 1: Port input data (y = 0..15)
    IDR0 // at 0: Port input data (y = 0..15)
  }

//---  Register ODR: GPIO port output data register
  ODR @offset 0x14 $u32 {
    16
    ODR15 // at 15: Port output data (y = 0..15)
    ODR14 // at 14: Port output data (y = 0..15)
    ODR13 // at 13: Port output data (y = 0..15)
    ODR12 // at 12: Port output data (y = 0..15)
    ODR11 // at 11: Port output data (y = 0..15)
    ODR10 // at 10: Port output data (y = 0..15)
    ODR9 // at 9: Port output data (y = 0..15)
    ODR8 // at 8: Port output data (y = 0..15)
    ODR7 // at 7: Port output data (y = 0..15)
    ODR6 // at 6: Port output data (y = 0..15)
    ODR5 // at 5: Port output data (y = 0..15)
    ODR4 // at 4: Port output data (y = 0..15)
    ODR3 // at 3: Port output data (y = 0..15)
    ODR2 // at 2: Port output data (y = 0..15)
    ODR1 // at 1: Port output data (y = 0..15)
    ODR0 // at 0: Port output data (y = 0..15)
  }

//---  Register BSRR: GPIO port bit set/reset register
  BSRR @offset 0x18 $u32 {
    BR15 // at 31: Port x reset bit y (y = 0..15)
    BR14 // at 30: Port x reset bit y (y = 0..15)
    BR13 // at 29: Port x reset bit y (y = 0..15)
    BR12 // at 28: Port x reset bit y (y = 0..15)
    BR11 // at 27: Port x reset bit y (y = 0..15)
    BR10 // at 26: Port x reset bit y (y = 0..15)
    BR9 // at 25: Port x reset bit y (y = 0..15)
    BR8 // at 24: Port x reset bit y (y = 0..15)
    BR7 // at 23: Port x reset bit y (y = 0..15)
    BR6 // at 22: Port x reset bit y (y = 0..15)
    BR5 // at 21: Port x reset bit y (y = 0..15)
    BR4 // at 20: Port x reset bit y (y = 0..15)
    BR3 // at 19: Port x reset bit y (y = 0..15)
    BR2 // at 18: Port x reset bit y (y = 0..15)
    BR1 // at 17: Port x reset bit y (y = 0..15)
    BR0 // at 16: Port x set bit y (y= 0..15)
    BS15 // at 15: Port x set bit y (y= 0..15)
    BS14 // at 14: Port x set bit y (y= 0..15)
    BS13 // at 13: Port x set bit y (y= 0..15)
    BS12 // at 12: Port x set bit y (y= 0..15)
    BS11 // at 11: Port x set bit y (y= 0..15)
    BS10 // at 10: Port x set bit y (y= 0..15)
    BS9 // at 9: Port x set bit y (y= 0..15)
    BS8 // at 8: Port x set bit y (y= 0..15)
    BS7 // at 7: Port x set bit y (y= 0..15)
    BS6 // at 6: Port x set bit y (y= 0..15)
    BS5 // at 5: Port x set bit y (y= 0..15)
    BS4 // at 4: Port x set bit y (y= 0..15)
    BS3 // at 3: Port x set bit y (y= 0..15)
    BS2 // at 2: Port x set bit y (y= 0..15)
    BS1 // at 1: Port x set bit y (y= 0..15)
    BS0 // at 0: Port x set bit y (y= 0..15)
  }

//---  Register LCKR: GPIO port configuration lock register
  LCKR @offset 0x1c $u32 {
    15
    LCKK // at 16: Port x lock bit y (y= 0..15)
    LCK15 // at 15: Port x lock bit y (y= 0..15)
    LCK14 // at 14: Port x lock bit y (y= 0..15)
    LCK13 // at 13: Port x lock bit y (y= 0..15)
    LCK12 // at 12: Port x lock bit y (y= 0..15)
    LCK11 // at 11: Port x lock bit y (y= 0..15)
    LCK10 // at 10: Port x lock bit y (y= 0..15)
    LCK9 // at 9: Port x lock bit y (y= 0..15)
    LCK8 // at 8: Port x lock bit y (y= 0..15)
    LCK7 // at 7: Port x lock bit y (y= 0..15)
    LCK6 // at 6: Port x lock bit y (y= 0..15)
    LCK5 // at 5: Port x lock bit y (y= 0..15)
    LCK4 // at 4: Port x lock bit y (y= 0..15)
    LCK3 // at 3: Port x lock bit y (y= 0..15)
    LCK2 // at 2: Port x lock bit y (y= 0..15)
    LCK1 // at 1: Port x lock bit y (y= 0..15)
    LCK0 // at 0: Port x lock bit y (y= 0..15)
  }

//---  Register AFRL: GPIO alternate function lowregister
  AFRL @offset 0x20 $u32 {
    AFRL7:4 // at 28: Alternate function selection for port x bit y (y = 0..7)
    AFRL6:4 // at 24: Alternate function selection for port x bit y (y = 0..7)
    AFRL5:4 // at 20: Alternate function selection for port x bit y (y = 0..7)
    AFRL4:4 // at 16: Alternate function selection for port x bit y (y = 0..7)
    AFRL3:4 // at 12: Alternate function selection for port x bit y (y = 0..7)
    AFRL2:4 // at 8: Alternate function selection for port x bit y (y = 0..7)
    AFRL1:4 // at 4: Alternate function selection for port x bit y (y = 0..7)
    AFRL0:4 // at 0: Alternate function selection for port x bit y (y = 0..7)
  }

//---  Register AFRH: GPIO alternate function high register
  AFRH @offset 0x24 $u32 {
    AFRH15:4 // at 28: Alternate function selection for port x bit y (y = 8..15)
    AFRH14:4 // at 24: Alternate function selection for port x bit y (y = 8..15)
    AFRH13:4 // at 20: Alternate function selection for port x bit y (y = 8..15)
    AFRH12:4 // at 16: Alternate function selection for port x bit y (y = 8..15)
    AFRH11:4 // at 12: Alternate function selection for port x bit y (y = 8..15)
    AFRH10:4 // at 8: Alternate function selection for port x bit y (y = 8..15)
    AFRH9:4 // at 4: Alternate function selection for port x bit y (y = 8..15)
    AFRH8:4 // at 0: Alternate function selection for port x bit y (y = 8..15)
  }

//---  Register BRR: GPIO port bit reset register
  BRR @offset 0x28 $u32 {
    16
    BR15 // at 15: Port D Reset bit 15
    BR14 // at 14: Port D Reset bit 14
    BR13 // at 13: Port D Reset bit 13
    BR12 // at 12: Port D Reset bit 12
    BR11 // at 11: Port D Reset bit 11
    BR10 // at 10: Port D Reset bit 10
    BR9 // at 9: Port D Reset bit 9
    BR8 // at 8: Port D Reset bit 8
    BR7 // at 7: Port D Reset bit 7
    BR6 // at 6: Port D Reset bit 6
    BR5 // at 5: Port D Reset bit 5
    BR4 // at 4: Port D Reset bit 4
    BR3 // at 3: Port D Reset bit 3
    BR2 // at 2: Port D Reset bit 2
    BR1 // at 1: Port D Reset bit 1
    BR0 // at 0: Port D Reset bit 0
  }

}

//------------------------------------------------------------------------------
// Peripheral GPIOF
//------------------------------------------------------------------------------

registers ©GPIOF @at 0x40021400 {
//---  Register MODER: GPIO port mode register
  MODER @offset 0x0 $u32 {
    MODER15:2 // at 30: Port x configuration bits (y = 0..15)
    MODER14:2 // at 28: Port x configuration bits (y = 0..15)
    MODER13:2 // at 26: Port x configuration bits (y = 0..15)
    MODER12:2 // at 24: Port x configuration bits (y = 0..15)
    MODER11:2 // at 22: Port x configuration bits (y = 0..15)
    MODER10:2 // at 20: Port x configuration bits (y = 0..15)
    MODER9:2 // at 18: Port x configuration bits (y = 0..15)
    MODER8:2 // at 16: Port x configuration bits (y = 0..15)
    MODER7:2 // at 14: Port x configuration bits (y = 0..15)
    MODER6:2 // at 12: Port x configuration bits (y = 0..15)
    MODER5:2 // at 10: Port x configuration bits (y = 0..15)
    MODER4:2 // at 8: Port x configuration bits (y = 0..15)
    MODER3:2 // at 6: Port x configuration bits (y = 0..15)
    MODER2:2 // at 4: Port x configuration bits (y = 0..15)
    MODER1:2 // at 2: Port x configuration bits (y = 0..15)
    MODER0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register OTYPER: GPIO port output type register
  OTYPER @offset 0x4 $u32 {
    16
    OT15 // at 15: Port x configuration bits (y = 0..15)
    OT14 // at 14: Port x configuration bits (y = 0..15)
    OT13 // at 13: Port x configuration bits (y = 0..15)
    OT12 // at 12: Port x configuration bits (y = 0..15)
    OT11 // at 11: Port x configuration bits (y = 0..15)
    OT10 // at 10: Port x configuration bits (y = 0..15)
    OT9 // at 9: Port x configuration bits (y = 0..15)
    OT8 // at 8: Port x configuration bits (y = 0..15)
    OT7 // at 7: Port x configuration bits (y = 0..15)
    OT6 // at 6: Port x configuration bits (y = 0..15)
    OT5 // at 5: Port x configuration bits (y = 0..15)
    OT4 // at 4: Port x configuration bits (y = 0..15)
    OT3 // at 3: Port x configuration bits (y = 0..15)
    OT2 // at 2: Port x configuration bits (y = 0..15)
    OT1 // at 1: Port x configuration bits (y = 0..15)
    OT0 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  GPIOB_OSPEEDR @offset 0x8 $u32 {
    OSPEEDR15:2 // at 30: Port x configuration bits (y = 0..15)
    OSPEEDR14:2 // at 28: Port x configuration bits (y = 0..15)
    OSPEEDR13:2 // at 26: Port x configuration bits (y = 0..15)
    OSPEEDR12:2 // at 24: Port x configuration bits (y = 0..15)
    OSPEEDR11:2 // at 22: Port x configuration bits (y = 0..15)
    OSPEEDR10:2 // at 20: Port x configuration bits (y = 0..15)
    OSPEEDR9:2 // at 18: Port x configuration bits (y = 0..15)
    OSPEEDR8:2 // at 16: Port x configuration bits (y = 0..15)
    OSPEEDR7:2 // at 14: Port x configuration bits (y = 0..15)
    OSPEEDR6:2 // at 12: Port x configuration bits (y = 0..15)
    OSPEEDR5:2 // at 10: Port x configuration bits (y = 0..15)
    OSPEEDR4:2 // at 8: Port x configuration bits (y = 0..15)
    OSPEEDR3:2 // at 6: Port x configuration bits (y = 0..15)
    OSPEEDR2:2 // at 4: Port x configuration bits (y = 0..15)
    OSPEEDR1:2 // at 2: Port x configuration bits (y = 0..15)
    OSPEEDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register PUPDR: GPIO port pull-up/pull-down register
  PUPDR @offset 0xc $u32 {
    PUPDR15:2 // at 30: Port x configuration bits (y = 0..15)
    PUPDR14:2 // at 28: Port x configuration bits (y = 0..15)
    PUPDR13:2 // at 26: Port x configuration bits (y = 0..15)
    PUPDR12:2 // at 24: Port x configuration bits (y = 0..15)
    PUPDR11:2 // at 22: Port x configuration bits (y = 0..15)
    PUPDR10:2 // at 20: Port x configuration bits (y = 0..15)
    PUPDR9:2 // at 18: Port x configuration bits (y = 0..15)
    PUPDR8:2 // at 16: Port x configuration bits (y = 0..15)
    PUPDR7:2 // at 14: Port x configuration bits (y = 0..15)
    PUPDR6:2 // at 12: Port x configuration bits (y = 0..15)
    PUPDR5:2 // at 10: Port x configuration bits (y = 0..15)
    PUPDR4:2 // at 8: Port x configuration bits (y = 0..15)
    PUPDR3:2 // at 6: Port x configuration bits (y = 0..15)
    PUPDR2:2 // at 4: Port x configuration bits (y = 0..15)
    PUPDR1:2 // at 2: Port x configuration bits (y = 0..15)
    PUPDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register IDR: GPIO port input data register
  IDR @offset 0x10 @ro $u32 {
    16
    IDR15 // at 15: Port input data (y = 0..15)
    IDR14 // at 14: Port input data (y = 0..15)
    IDR13 // at 13: Port input data (y = 0..15)
    IDR12 // at 12: Port input data (y = 0..15)
    IDR11 // at 11: Port input data (y = 0..15)
    IDR10 // at 10: Port input data (y = 0..15)
    IDR9 // at 9: Port input data (y = 0..15)
    IDR8 // at 8: Port input data (y = 0..15)
    IDR7 // at 7: Port input data (y = 0..15)
    IDR6 // at 6: Port input data (y = 0..15)
    IDR5 // at 5: Port input data (y = 0..15)
    IDR4 // at 4: Port input data (y = 0..15)
    IDR3 // at 3: Port input data (y = 0..15)
    IDR2 // at 2: Port input data (y = 0..15)
    IDR1 // at 1: Port input data (y = 0..15)
    IDR0 // at 0: Port input data (y = 0..15)
  }

//---  Register ODR: GPIO port output data register
  ODR @offset 0x14 $u32 {
    16
    ODR15 // at 15: Port output data (y = 0..15)
    ODR14 // at 14: Port output data (y = 0..15)
    ODR13 // at 13: Port output data (y = 0..15)
    ODR12 // at 12: Port output data (y = 0..15)
    ODR11 // at 11: Port output data (y = 0..15)
    ODR10 // at 10: Port output data (y = 0..15)
    ODR9 // at 9: Port output data (y = 0..15)
    ODR8 // at 8: Port output data (y = 0..15)
    ODR7 // at 7: Port output data (y = 0..15)
    ODR6 // at 6: Port output data (y = 0..15)
    ODR5 // at 5: Port output data (y = 0..15)
    ODR4 // at 4: Port output data (y = 0..15)
    ODR3 // at 3: Port output data (y = 0..15)
    ODR2 // at 2: Port output data (y = 0..15)
    ODR1 // at 1: Port output data (y = 0..15)
    ODR0 // at 0: Port output data (y = 0..15)
  }

//---  Register BSRR: GPIO port bit set/reset register
  BSRR @offset 0x18 $u32 {
    BR15 // at 31: Port x reset bit y (y = 0..15)
    BR14 // at 30: Port x reset bit y (y = 0..15)
    BR13 // at 29: Port x reset bit y (y = 0..15)
    BR12 // at 28: Port x reset bit y (y = 0..15)
    BR11 // at 27: Port x reset bit y (y = 0..15)
    BR10 // at 26: Port x reset bit y (y = 0..15)
    BR9 // at 25: Port x reset bit y (y = 0..15)
    BR8 // at 24: Port x reset bit y (y = 0..15)
    BR7 // at 23: Port x reset bit y (y = 0..15)
    BR6 // at 22: Port x reset bit y (y = 0..15)
    BR5 // at 21: Port x reset bit y (y = 0..15)
    BR4 // at 20: Port x reset bit y (y = 0..15)
    BR3 // at 19: Port x reset bit y (y = 0..15)
    BR2 // at 18: Port x reset bit y (y = 0..15)
    BR1 // at 17: Port x reset bit y (y = 0..15)
    BR0 // at 16: Port x set bit y (y= 0..15)
    BS15 // at 15: Port x set bit y (y= 0..15)
    BS14 // at 14: Port x set bit y (y= 0..15)
    BS13 // at 13: Port x set bit y (y= 0..15)
    BS12 // at 12: Port x set bit y (y= 0..15)
    BS11 // at 11: Port x set bit y (y= 0..15)
    BS10 // at 10: Port x set bit y (y= 0..15)
    BS9 // at 9: Port x set bit y (y= 0..15)
    BS8 // at 8: Port x set bit y (y= 0..15)
    BS7 // at 7: Port x set bit y (y= 0..15)
    BS6 // at 6: Port x set bit y (y= 0..15)
    BS5 // at 5: Port x set bit y (y= 0..15)
    BS4 // at 4: Port x set bit y (y= 0..15)
    BS3 // at 3: Port x set bit y (y= 0..15)
    BS2 // at 2: Port x set bit y (y= 0..15)
    BS1 // at 1: Port x set bit y (y= 0..15)
    BS0 // at 0: Port x set bit y (y= 0..15)
  }

//---  Register LCKR: GPIO port configuration lock register
  LCKR @offset 0x1c $u32 {
    15
    LCKK // at 16: Port x lock bit y (y= 0..15)
    LCK15 // at 15: Port x lock bit y (y= 0..15)
    LCK14 // at 14: Port x lock bit y (y= 0..15)
    LCK13 // at 13: Port x lock bit y (y= 0..15)
    LCK12 // at 12: Port x lock bit y (y= 0..15)
    LCK11 // at 11: Port x lock bit y (y= 0..15)
    LCK10 // at 10: Port x lock bit y (y= 0..15)
    LCK9 // at 9: Port x lock bit y (y= 0..15)
    LCK8 // at 8: Port x lock bit y (y= 0..15)
    LCK7 // at 7: Port x lock bit y (y= 0..15)
    LCK6 // at 6: Port x lock bit y (y= 0..15)
    LCK5 // at 5: Port x lock bit y (y= 0..15)
    LCK4 // at 4: Port x lock bit y (y= 0..15)
    LCK3 // at 3: Port x lock bit y (y= 0..15)
    LCK2 // at 2: Port x lock bit y (y= 0..15)
    LCK1 // at 1: Port x lock bit y (y= 0..15)
    LCK0 // at 0: Port x lock bit y (y= 0..15)
  }

//---  Register AFRL: GPIO alternate function lowregister
  AFRL @offset 0x20 $u32 {
    AFRL7:4 // at 28: Alternate function selection for port x bit y (y = 0..7)
    AFRL6:4 // at 24: Alternate function selection for port x bit y (y = 0..7)
    AFRL5:4 // at 20: Alternate function selection for port x bit y (y = 0..7)
    AFRL4:4 // at 16: Alternate function selection for port x bit y (y = 0..7)
    AFRL3:4 // at 12: Alternate function selection for port x bit y (y = 0..7)
    AFRL2:4 // at 8: Alternate function selection for port x bit y (y = 0..7)
    AFRL1:4 // at 4: Alternate function selection for port x bit y (y = 0..7)
    AFRL0:4 // at 0: Alternate function selection for port x bit y (y = 0..7)
  }

//---  Register AFRH: GPIO alternate function high register
  AFRH @offset 0x24 $u32 {
    AFRH15:4 // at 28: Alternate function selection for port x bit y (y = 8..15)
    AFRH14:4 // at 24: Alternate function selection for port x bit y (y = 8..15)
    AFRH13:4 // at 20: Alternate function selection for port x bit y (y = 8..15)
    AFRH12:4 // at 16: Alternate function selection for port x bit y (y = 8..15)
    AFRH11:4 // at 12: Alternate function selection for port x bit y (y = 8..15)
    AFRH10:4 // at 8: Alternate function selection for port x bit y (y = 8..15)
    AFRH9:4 // at 4: Alternate function selection for port x bit y (y = 8..15)
    AFRH8:4 // at 0: Alternate function selection for port x bit y (y = 8..15)
  }

//---  Register BRR: GPIO port bit reset register
  BRR @offset 0x28 $u32 {
    16
    BR15 // at 15: Port D Reset bit 15
    BR14 // at 14: Port D Reset bit 14
    BR13 // at 13: Port D Reset bit 13
    BR12 // at 12: Port D Reset bit 12
    BR11 // at 11: Port D Reset bit 11
    BR10 // at 10: Port D Reset bit 10
    BR9 // at 9: Port D Reset bit 9
    BR8 // at 8: Port D Reset bit 8
    BR7 // at 7: Port D Reset bit 7
    BR6 // at 6: Port D Reset bit 6
    BR5 // at 5: Port D Reset bit 5
    BR4 // at 4: Port D Reset bit 4
    BR3 // at 3: Port D Reset bit 3
    BR2 // at 2: Port D Reset bit 2
    BR1 // at 1: Port D Reset bit 1
    BR0 // at 0: Port D Reset bit 0
  }

}

//------------------------------------------------------------------------------
// Peripheral GPIOG
//------------------------------------------------------------------------------

registers ©GPIOG @at 0x40021800 {
//---  Register MODER: GPIO port mode register
  MODER @offset 0x0 $u32 {
    MODER15:2 // at 30: Port x configuration bits (y = 0..15)
    MODER14:2 // at 28: Port x configuration bits (y = 0..15)
    MODER13:2 // at 26: Port x configuration bits (y = 0..15)
    MODER12:2 // at 24: Port x configuration bits (y = 0..15)
    MODER11:2 // at 22: Port x configuration bits (y = 0..15)
    MODER10:2 // at 20: Port x configuration bits (y = 0..15)
    MODER9:2 // at 18: Port x configuration bits (y = 0..15)
    MODER8:2 // at 16: Port x configuration bits (y = 0..15)
    MODER7:2 // at 14: Port x configuration bits (y = 0..15)
    MODER6:2 // at 12: Port x configuration bits (y = 0..15)
    MODER5:2 // at 10: Port x configuration bits (y = 0..15)
    MODER4:2 // at 8: Port x configuration bits (y = 0..15)
    MODER3:2 // at 6: Port x configuration bits (y = 0..15)
    MODER2:2 // at 4: Port x configuration bits (y = 0..15)
    MODER1:2 // at 2: Port x configuration bits (y = 0..15)
    MODER0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register OTYPER: GPIO port output type register
  OTYPER @offset 0x4 $u32 {
    16
    OT15 // at 15: Port x configuration bits (y = 0..15)
    OT14 // at 14: Port x configuration bits (y = 0..15)
    OT13 // at 13: Port x configuration bits (y = 0..15)
    OT12 // at 12: Port x configuration bits (y = 0..15)
    OT11 // at 11: Port x configuration bits (y = 0..15)
    OT10 // at 10: Port x configuration bits (y = 0..15)
    OT9 // at 9: Port x configuration bits (y = 0..15)
    OT8 // at 8: Port x configuration bits (y = 0..15)
    OT7 // at 7: Port x configuration bits (y = 0..15)
    OT6 // at 6: Port x configuration bits (y = 0..15)
    OT5 // at 5: Port x configuration bits (y = 0..15)
    OT4 // at 4: Port x configuration bits (y = 0..15)
    OT3 // at 3: Port x configuration bits (y = 0..15)
    OT2 // at 2: Port x configuration bits (y = 0..15)
    OT1 // at 1: Port x configuration bits (y = 0..15)
    OT0 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  GPIOB_OSPEEDR @offset 0x8 $u32 {
    OSPEEDR15:2 // at 30: Port x configuration bits (y = 0..15)
    OSPEEDR14:2 // at 28: Port x configuration bits (y = 0..15)
    OSPEEDR13:2 // at 26: Port x configuration bits (y = 0..15)
    OSPEEDR12:2 // at 24: Port x configuration bits (y = 0..15)
    OSPEEDR11:2 // at 22: Port x configuration bits (y = 0..15)
    OSPEEDR10:2 // at 20: Port x configuration bits (y = 0..15)
    OSPEEDR9:2 // at 18: Port x configuration bits (y = 0..15)
    OSPEEDR8:2 // at 16: Port x configuration bits (y = 0..15)
    OSPEEDR7:2 // at 14: Port x configuration bits (y = 0..15)
    OSPEEDR6:2 // at 12: Port x configuration bits (y = 0..15)
    OSPEEDR5:2 // at 10: Port x configuration bits (y = 0..15)
    OSPEEDR4:2 // at 8: Port x configuration bits (y = 0..15)
    OSPEEDR3:2 // at 6: Port x configuration bits (y = 0..15)
    OSPEEDR2:2 // at 4: Port x configuration bits (y = 0..15)
    OSPEEDR1:2 // at 2: Port x configuration bits (y = 0..15)
    OSPEEDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register PUPDR: GPIO port pull-up/pull-down register
  PUPDR @offset 0xc $u32 {
    PUPDR15:2 // at 30: Port x configuration bits (y = 0..15)
    PUPDR14:2 // at 28: Port x configuration bits (y = 0..15)
    PUPDR13:2 // at 26: Port x configuration bits (y = 0..15)
    PUPDR12:2 // at 24: Port x configuration bits (y = 0..15)
    PUPDR11:2 // at 22: Port x configuration bits (y = 0..15)
    PUPDR10:2 // at 20: Port x configuration bits (y = 0..15)
    PUPDR9:2 // at 18: Port x configuration bits (y = 0..15)
    PUPDR8:2 // at 16: Port x configuration bits (y = 0..15)
    PUPDR7:2 // at 14: Port x configuration bits (y = 0..15)
    PUPDR6:2 // at 12: Port x configuration bits (y = 0..15)
    PUPDR5:2 // at 10: Port x configuration bits (y = 0..15)
    PUPDR4:2 // at 8: Port x configuration bits (y = 0..15)
    PUPDR3:2 // at 6: Port x configuration bits (y = 0..15)
    PUPDR2:2 // at 4: Port x configuration bits (y = 0..15)
    PUPDR1:2 // at 2: Port x configuration bits (y = 0..15)
    PUPDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register IDR: GPIO port input data register
  IDR @offset 0x10 @ro $u32 {
    16
    IDR15 // at 15: Port input data (y = 0..15)
    IDR14 // at 14: Port input data (y = 0..15)
    IDR13 // at 13: Port input data (y = 0..15)
    IDR12 // at 12: Port input data (y = 0..15)
    IDR11 // at 11: Port input data (y = 0..15)
    IDR10 // at 10: Port input data (y = 0..15)
    IDR9 // at 9: Port input data (y = 0..15)
    IDR8 // at 8: Port input data (y = 0..15)
    IDR7 // at 7: Port input data (y = 0..15)
    IDR6 // at 6: Port input data (y = 0..15)
    IDR5 // at 5: Port input data (y = 0..15)
    IDR4 // at 4: Port input data (y = 0..15)
    IDR3 // at 3: Port input data (y = 0..15)
    IDR2 // at 2: Port input data (y = 0..15)
    IDR1 // at 1: Port input data (y = 0..15)
    IDR0 // at 0: Port input data (y = 0..15)
  }

//---  Register ODR: GPIO port output data register
  ODR @offset 0x14 $u32 {
    16
    ODR15 // at 15: Port output data (y = 0..15)
    ODR14 // at 14: Port output data (y = 0..15)
    ODR13 // at 13: Port output data (y = 0..15)
    ODR12 // at 12: Port output data (y = 0..15)
    ODR11 // at 11: Port output data (y = 0..15)
    ODR10 // at 10: Port output data (y = 0..15)
    ODR9 // at 9: Port output data (y = 0..15)
    ODR8 // at 8: Port output data (y = 0..15)
    ODR7 // at 7: Port output data (y = 0..15)
    ODR6 // at 6: Port output data (y = 0..15)
    ODR5 // at 5: Port output data (y = 0..15)
    ODR4 // at 4: Port output data (y = 0..15)
    ODR3 // at 3: Port output data (y = 0..15)
    ODR2 // at 2: Port output data (y = 0..15)
    ODR1 // at 1: Port output data (y = 0..15)
    ODR0 // at 0: Port output data (y = 0..15)
  }

//---  Register BSRR: GPIO port bit set/reset register
  BSRR @offset 0x18 $u32 {
    BR15 // at 31: Port x reset bit y (y = 0..15)
    BR14 // at 30: Port x reset bit y (y = 0..15)
    BR13 // at 29: Port x reset bit y (y = 0..15)
    BR12 // at 28: Port x reset bit y (y = 0..15)
    BR11 // at 27: Port x reset bit y (y = 0..15)
    BR10 // at 26: Port x reset bit y (y = 0..15)
    BR9 // at 25: Port x reset bit y (y = 0..15)
    BR8 // at 24: Port x reset bit y (y = 0..15)
    BR7 // at 23: Port x reset bit y (y = 0..15)
    BR6 // at 22: Port x reset bit y (y = 0..15)
    BR5 // at 21: Port x reset bit y (y = 0..15)
    BR4 // at 20: Port x reset bit y (y = 0..15)
    BR3 // at 19: Port x reset bit y (y = 0..15)
    BR2 // at 18: Port x reset bit y (y = 0..15)
    BR1 // at 17: Port x reset bit y (y = 0..15)
    BR0 // at 16: Port x set bit y (y= 0..15)
    BS15 // at 15: Port x set bit y (y= 0..15)
    BS14 // at 14: Port x set bit y (y= 0..15)
    BS13 // at 13: Port x set bit y (y= 0..15)
    BS12 // at 12: Port x set bit y (y= 0..15)
    BS11 // at 11: Port x set bit y (y= 0..15)
    BS10 // at 10: Port x set bit y (y= 0..15)
    BS9 // at 9: Port x set bit y (y= 0..15)
    BS8 // at 8: Port x set bit y (y= 0..15)
    BS7 // at 7: Port x set bit y (y= 0..15)
    BS6 // at 6: Port x set bit y (y= 0..15)
    BS5 // at 5: Port x set bit y (y= 0..15)
    BS4 // at 4: Port x set bit y (y= 0..15)
    BS3 // at 3: Port x set bit y (y= 0..15)
    BS2 // at 2: Port x set bit y (y= 0..15)
    BS1 // at 1: Port x set bit y (y= 0..15)
    BS0 // at 0: Port x set bit y (y= 0..15)
  }

//---  Register LCKR: GPIO port configuration lock register
  LCKR @offset 0x1c $u32 {
    15
    LCKK // at 16: Port x lock bit y (y= 0..15)
    LCK15 // at 15: Port x lock bit y (y= 0..15)
    LCK14 // at 14: Port x lock bit y (y= 0..15)
    LCK13 // at 13: Port x lock bit y (y= 0..15)
    LCK12 // at 12: Port x lock bit y (y= 0..15)
    LCK11 // at 11: Port x lock bit y (y= 0..15)
    LCK10 // at 10: Port x lock bit y (y= 0..15)
    LCK9 // at 9: Port x lock bit y (y= 0..15)
    LCK8 // at 8: Port x lock bit y (y= 0..15)
    LCK7 // at 7: Port x lock bit y (y= 0..15)
    LCK6 // at 6: Port x lock bit y (y= 0..15)
    LCK5 // at 5: Port x lock bit y (y= 0..15)
    LCK4 // at 4: Port x lock bit y (y= 0..15)
    LCK3 // at 3: Port x lock bit y (y= 0..15)
    LCK2 // at 2: Port x lock bit y (y= 0..15)
    LCK1 // at 1: Port x lock bit y (y= 0..15)
    LCK0 // at 0: Port x lock bit y (y= 0..15)
  }

//---  Register AFRL: GPIO alternate function lowregister
  AFRL @offset 0x20 $u32 {
    AFRL7:4 // at 28: Alternate function selection for port x bit y (y = 0..7)
    AFRL6:4 // at 24: Alternate function selection for port x bit y (y = 0..7)
    AFRL5:4 // at 20: Alternate function selection for port x bit y (y = 0..7)
    AFRL4:4 // at 16: Alternate function selection for port x bit y (y = 0..7)
    AFRL3:4 // at 12: Alternate function selection for port x bit y (y = 0..7)
    AFRL2:4 // at 8: Alternate function selection for port x bit y (y = 0..7)
    AFRL1:4 // at 4: Alternate function selection for port x bit y (y = 0..7)
    AFRL0:4 // at 0: Alternate function selection for port x bit y (y = 0..7)
  }

//---  Register AFRH: GPIO alternate function high register
  AFRH @offset 0x24 $u32 {
    AFRH15:4 // at 28: Alternate function selection for port x bit y (y = 8..15)
    AFRH14:4 // at 24: Alternate function selection for port x bit y (y = 8..15)
    AFRH13:4 // at 20: Alternate function selection for port x bit y (y = 8..15)
    AFRH12:4 // at 16: Alternate function selection for port x bit y (y = 8..15)
    AFRH11:4 // at 12: Alternate function selection for port x bit y (y = 8..15)
    AFRH10:4 // at 8: Alternate function selection for port x bit y (y = 8..15)
    AFRH9:4 // at 4: Alternate function selection for port x bit y (y = 8..15)
    AFRH8:4 // at 0: Alternate function selection for port x bit y (y = 8..15)
  }

//---  Register BRR: GPIO port bit reset register
  BRR @offset 0x28 $u32 {
    16
    BR15 // at 15: Port D Reset bit 15
    BR14 // at 14: Port D Reset bit 14
    BR13 // at 13: Port D Reset bit 13
    BR12 // at 12: Port D Reset bit 12
    BR11 // at 11: Port D Reset bit 11
    BR10 // at 10: Port D Reset bit 10
    BR9 // at 9: Port D Reset bit 9
    BR8 // at 8: Port D Reset bit 8
    BR7 // at 7: Port D Reset bit 7
    BR6 // at 6: Port D Reset bit 6
    BR5 // at 5: Port D Reset bit 5
    BR4 // at 4: Port D Reset bit 4
    BR3 // at 3: Port D Reset bit 3
    BR2 // at 2: Port D Reset bit 2
    BR1 // at 1: Port D Reset bit 1
    BR0 // at 0: Port D Reset bit 0
  }

}

//------------------------------------------------------------------------------
// Peripheral GPIOH
//------------------------------------------------------------------------------

registers ©GPIOH @at 0x40021c00 {
//---  Register MODER: GPIO port mode register
  MODER @offset 0x0 $u32 {
    MODER15:2 // at 30: Port x configuration bits (y = 0..15)
    MODER14:2 // at 28: Port x configuration bits (y = 0..15)
    MODER13:2 // at 26: Port x configuration bits (y = 0..15)
    MODER12:2 // at 24: Port x configuration bits (y = 0..15)
    MODER11:2 // at 22: Port x configuration bits (y = 0..15)
    MODER10:2 // at 20: Port x configuration bits (y = 0..15)
    MODER9:2 // at 18: Port x configuration bits (y = 0..15)
    MODER8:2 // at 16: Port x configuration bits (y = 0..15)
    MODER7:2 // at 14: Port x configuration bits (y = 0..15)
    MODER6:2 // at 12: Port x configuration bits (y = 0..15)
    MODER5:2 // at 10: Port x configuration bits (y = 0..15)
    MODER4:2 // at 8: Port x configuration bits (y = 0..15)
    MODER3:2 // at 6: Port x configuration bits (y = 0..15)
    MODER2:2 // at 4: Port x configuration bits (y = 0..15)
    MODER1:2 // at 2: Port x configuration bits (y = 0..15)
    MODER0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register OTYPER: GPIO port output type register
  OTYPER @offset 0x4 $u32 {
    16
    OT15 // at 15: Port x configuration bits (y = 0..15)
    OT14 // at 14: Port x configuration bits (y = 0..15)
    OT13 // at 13: Port x configuration bits (y = 0..15)
    OT12 // at 12: Port x configuration bits (y = 0..15)
    OT11 // at 11: Port x configuration bits (y = 0..15)
    OT10 // at 10: Port x configuration bits (y = 0..15)
    OT9 // at 9: Port x configuration bits (y = 0..15)
    OT8 // at 8: Port x configuration bits (y = 0..15)
    OT7 // at 7: Port x configuration bits (y = 0..15)
    OT6 // at 6: Port x configuration bits (y = 0..15)
    OT5 // at 5: Port x configuration bits (y = 0..15)
    OT4 // at 4: Port x configuration bits (y = 0..15)
    OT3 // at 3: Port x configuration bits (y = 0..15)
    OT2 // at 2: Port x configuration bits (y = 0..15)
    OT1 // at 1: Port x configuration bits (y = 0..15)
    OT0 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  GPIOB_OSPEEDR @offset 0x8 $u32 {
    OSPEEDR15:2 // at 30: Port x configuration bits (y = 0..15)
    OSPEEDR14:2 // at 28: Port x configuration bits (y = 0..15)
    OSPEEDR13:2 // at 26: Port x configuration bits (y = 0..15)
    OSPEEDR12:2 // at 24: Port x configuration bits (y = 0..15)
    OSPEEDR11:2 // at 22: Port x configuration bits (y = 0..15)
    OSPEEDR10:2 // at 20: Port x configuration bits (y = 0..15)
    OSPEEDR9:2 // at 18: Port x configuration bits (y = 0..15)
    OSPEEDR8:2 // at 16: Port x configuration bits (y = 0..15)
    OSPEEDR7:2 // at 14: Port x configuration bits (y = 0..15)
    OSPEEDR6:2 // at 12: Port x configuration bits (y = 0..15)
    OSPEEDR5:2 // at 10: Port x configuration bits (y = 0..15)
    OSPEEDR4:2 // at 8: Port x configuration bits (y = 0..15)
    OSPEEDR3:2 // at 6: Port x configuration bits (y = 0..15)
    OSPEEDR2:2 // at 4: Port x configuration bits (y = 0..15)
    OSPEEDR1:2 // at 2: Port x configuration bits (y = 0..15)
    OSPEEDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register PUPDR: GPIO port pull-up/pull-down register
  PUPDR @offset 0xc $u32 {
    PUPDR15:2 // at 30: Port x configuration bits (y = 0..15)
    PUPDR14:2 // at 28: Port x configuration bits (y = 0..15)
    PUPDR13:2 // at 26: Port x configuration bits (y = 0..15)
    PUPDR12:2 // at 24: Port x configuration bits (y = 0..15)
    PUPDR11:2 // at 22: Port x configuration bits (y = 0..15)
    PUPDR10:2 // at 20: Port x configuration bits (y = 0..15)
    PUPDR9:2 // at 18: Port x configuration bits (y = 0..15)
    PUPDR8:2 // at 16: Port x configuration bits (y = 0..15)
    PUPDR7:2 // at 14: Port x configuration bits (y = 0..15)
    PUPDR6:2 // at 12: Port x configuration bits (y = 0..15)
    PUPDR5:2 // at 10: Port x configuration bits (y = 0..15)
    PUPDR4:2 // at 8: Port x configuration bits (y = 0..15)
    PUPDR3:2 // at 6: Port x configuration bits (y = 0..15)
    PUPDR2:2 // at 4: Port x configuration bits (y = 0..15)
    PUPDR1:2 // at 2: Port x configuration bits (y = 0..15)
    PUPDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register IDR: GPIO port input data register
  IDR @offset 0x10 @ro $u32 {
    16
    IDR15 // at 15: Port input data (y = 0..15)
    IDR14 // at 14: Port input data (y = 0..15)
    IDR13 // at 13: Port input data (y = 0..15)
    IDR12 // at 12: Port input data (y = 0..15)
    IDR11 // at 11: Port input data (y = 0..15)
    IDR10 // at 10: Port input data (y = 0..15)
    IDR9 // at 9: Port input data (y = 0..15)
    IDR8 // at 8: Port input data (y = 0..15)
    IDR7 // at 7: Port input data (y = 0..15)
    IDR6 // at 6: Port input data (y = 0..15)
    IDR5 // at 5: Port input data (y = 0..15)
    IDR4 // at 4: Port input data (y = 0..15)
    IDR3 // at 3: Port input data (y = 0..15)
    IDR2 // at 2: Port input data (y = 0..15)
    IDR1 // at 1: Port input data (y = 0..15)
    IDR0 // at 0: Port input data (y = 0..15)
  }

//---  Register ODR: GPIO port output data register
  ODR @offset 0x14 $u32 {
    16
    ODR15 // at 15: Port output data (y = 0..15)
    ODR14 // at 14: Port output data (y = 0..15)
    ODR13 // at 13: Port output data (y = 0..15)
    ODR12 // at 12: Port output data (y = 0..15)
    ODR11 // at 11: Port output data (y = 0..15)
    ODR10 // at 10: Port output data (y = 0..15)
    ODR9 // at 9: Port output data (y = 0..15)
    ODR8 // at 8: Port output data (y = 0..15)
    ODR7 // at 7: Port output data (y = 0..15)
    ODR6 // at 6: Port output data (y = 0..15)
    ODR5 // at 5: Port output data (y = 0..15)
    ODR4 // at 4: Port output data (y = 0..15)
    ODR3 // at 3: Port output data (y = 0..15)
    ODR2 // at 2: Port output data (y = 0..15)
    ODR1 // at 1: Port output data (y = 0..15)
    ODR0 // at 0: Port output data (y = 0..15)
  }

//---  Register BSRR: GPIO port bit set/reset register
  BSRR @offset 0x18 $u32 {
    BR15 // at 31: Port x reset bit y (y = 0..15)
    BR14 // at 30: Port x reset bit y (y = 0..15)
    BR13 // at 29: Port x reset bit y (y = 0..15)
    BR12 // at 28: Port x reset bit y (y = 0..15)
    BR11 // at 27: Port x reset bit y (y = 0..15)
    BR10 // at 26: Port x reset bit y (y = 0..15)
    BR9 // at 25: Port x reset bit y (y = 0..15)
    BR8 // at 24: Port x reset bit y (y = 0..15)
    BR7 // at 23: Port x reset bit y (y = 0..15)
    BR6 // at 22: Port x reset bit y (y = 0..15)
    BR5 // at 21: Port x reset bit y (y = 0..15)
    BR4 // at 20: Port x reset bit y (y = 0..15)
    BR3 // at 19: Port x reset bit y (y = 0..15)
    BR2 // at 18: Port x reset bit y (y = 0..15)
    BR1 // at 17: Port x reset bit y (y = 0..15)
    BR0 // at 16: Port x set bit y (y= 0..15)
    BS15 // at 15: Port x set bit y (y= 0..15)
    BS14 // at 14: Port x set bit y (y= 0..15)
    BS13 // at 13: Port x set bit y (y= 0..15)
    BS12 // at 12: Port x set bit y (y= 0..15)
    BS11 // at 11: Port x set bit y (y= 0..15)
    BS10 // at 10: Port x set bit y (y= 0..15)
    BS9 // at 9: Port x set bit y (y= 0..15)
    BS8 // at 8: Port x set bit y (y= 0..15)
    BS7 // at 7: Port x set bit y (y= 0..15)
    BS6 // at 6: Port x set bit y (y= 0..15)
    BS5 // at 5: Port x set bit y (y= 0..15)
    BS4 // at 4: Port x set bit y (y= 0..15)
    BS3 // at 3: Port x set bit y (y= 0..15)
    BS2 // at 2: Port x set bit y (y= 0..15)
    BS1 // at 1: Port x set bit y (y= 0..15)
    BS0 // at 0: Port x set bit y (y= 0..15)
  }

//---  Register LCKR: GPIO port configuration lock register
  LCKR @offset 0x1c $u32 {
    15
    LCKK // at 16: Port x lock bit y (y= 0..15)
    LCK15 // at 15: Port x lock bit y (y= 0..15)
    LCK14 // at 14: Port x lock bit y (y= 0..15)
    LCK13 // at 13: Port x lock bit y (y= 0..15)
    LCK12 // at 12: Port x lock bit y (y= 0..15)
    LCK11 // at 11: Port x lock bit y (y= 0..15)
    LCK10 // at 10: Port x lock bit y (y= 0..15)
    LCK9 // at 9: Port x lock bit y (y= 0..15)
    LCK8 // at 8: Port x lock bit y (y= 0..15)
    LCK7 // at 7: Port x lock bit y (y= 0..15)
    LCK6 // at 6: Port x lock bit y (y= 0..15)
    LCK5 // at 5: Port x lock bit y (y= 0..15)
    LCK4 // at 4: Port x lock bit y (y= 0..15)
    LCK3 // at 3: Port x lock bit y (y= 0..15)
    LCK2 // at 2: Port x lock bit y (y= 0..15)
    LCK1 // at 1: Port x lock bit y (y= 0..15)
    LCK0 // at 0: Port x lock bit y (y= 0..15)
  }

//---  Register AFRL: GPIO alternate function lowregister
  AFRL @offset 0x20 $u32 {
    AFRL7:4 // at 28: Alternate function selection for port x bit y (y = 0..7)
    AFRL6:4 // at 24: Alternate function selection for port x bit y (y = 0..7)
    AFRL5:4 // at 20: Alternate function selection for port x bit y (y = 0..7)
    AFRL4:4 // at 16: Alternate function selection for port x bit y (y = 0..7)
    AFRL3:4 // at 12: Alternate function selection for port x bit y (y = 0..7)
    AFRL2:4 // at 8: Alternate function selection for port x bit y (y = 0..7)
    AFRL1:4 // at 4: Alternate function selection for port x bit y (y = 0..7)
    AFRL0:4 // at 0: Alternate function selection for port x bit y (y = 0..7)
  }

//---  Register AFRH: GPIO alternate function high register
  AFRH @offset 0x24 $u32 {
    AFRH15:4 // at 28: Alternate function selection for port x bit y (y = 8..15)
    AFRH14:4 // at 24: Alternate function selection for port x bit y (y = 8..15)
    AFRH13:4 // at 20: Alternate function selection for port x bit y (y = 8..15)
    AFRH12:4 // at 16: Alternate function selection for port x bit y (y = 8..15)
    AFRH11:4 // at 12: Alternate function selection for port x bit y (y = 8..15)
    AFRH10:4 // at 8: Alternate function selection for port x bit y (y = 8..15)
    AFRH9:4 // at 4: Alternate function selection for port x bit y (y = 8..15)
    AFRH8:4 // at 0: Alternate function selection for port x bit y (y = 8..15)
  }

//---  Register BRR: GPIO port bit reset register
  BRR @offset 0x28 $u32 {
    16
    BR15 // at 15: Port D Reset bit 15
    BR14 // at 14: Port D Reset bit 14
    BR13 // at 13: Port D Reset bit 13
    BR12 // at 12: Port D Reset bit 12
    BR11 // at 11: Port D Reset bit 11
    BR10 // at 10: Port D Reset bit 10
    BR9 // at 9: Port D Reset bit 9
    BR8 // at 8: Port D Reset bit 8
    BR7 // at 7: Port D Reset bit 7
    BR6 // at 6: Port D Reset bit 6
    BR5 // at 5: Port D Reset bit 5
    BR4 // at 4: Port D Reset bit 4
    BR3 // at 3: Port D Reset bit 3
    BR2 // at 2: Port D Reset bit 2
    BR1 // at 1: Port D Reset bit 1
    BR0 // at 0: Port D Reset bit 0
  }

}

//------------------------------------------------------------------------------
// Peripheral GPIOI
//------------------------------------------------------------------------------

registers ©GPIOI @at 0x40022000 {
//---  Register MODER: GPIO port mode register
  MODER @offset 0x0 $u32 {
    MODER15:2 // at 30: Port x configuration bits (y = 0..15)
    MODER14:2 // at 28: Port x configuration bits (y = 0..15)
    MODER13:2 // at 26: Port x configuration bits (y = 0..15)
    MODER12:2 // at 24: Port x configuration bits (y = 0..15)
    MODER11:2 // at 22: Port x configuration bits (y = 0..15)
    MODER10:2 // at 20: Port x configuration bits (y = 0..15)
    MODER9:2 // at 18: Port x configuration bits (y = 0..15)
    MODER8:2 // at 16: Port x configuration bits (y = 0..15)
    MODER7:2 // at 14: Port x configuration bits (y = 0..15)
    MODER6:2 // at 12: Port x configuration bits (y = 0..15)
    MODER5:2 // at 10: Port x configuration bits (y = 0..15)
    MODER4:2 // at 8: Port x configuration bits (y = 0..15)
    MODER3:2 // at 6: Port x configuration bits (y = 0..15)
    MODER2:2 // at 4: Port x configuration bits (y = 0..15)
    MODER1:2 // at 2: Port x configuration bits (y = 0..15)
    MODER0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register OTYPER: GPIO port output type register
  OTYPER @offset 0x4 $u32 {
    16
    OT15 // at 15: Port x configuration bits (y = 0..15)
    OT14 // at 14: Port x configuration bits (y = 0..15)
    OT13 // at 13: Port x configuration bits (y = 0..15)
    OT12 // at 12: Port x configuration bits (y = 0..15)
    OT11 // at 11: Port x configuration bits (y = 0..15)
    OT10 // at 10: Port x configuration bits (y = 0..15)
    OT9 // at 9: Port x configuration bits (y = 0..15)
    OT8 // at 8: Port x configuration bits (y = 0..15)
    OT7 // at 7: Port x configuration bits (y = 0..15)
    OT6 // at 6: Port x configuration bits (y = 0..15)
    OT5 // at 5: Port x configuration bits (y = 0..15)
    OT4 // at 4: Port x configuration bits (y = 0..15)
    OT3 // at 3: Port x configuration bits (y = 0..15)
    OT2 // at 2: Port x configuration bits (y = 0..15)
    OT1 // at 1: Port x configuration bits (y = 0..15)
    OT0 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  GPIOB_OSPEEDR @offset 0x8 $u32 {
    OSPEEDR15:2 // at 30: Port x configuration bits (y = 0..15)
    OSPEEDR14:2 // at 28: Port x configuration bits (y = 0..15)
    OSPEEDR13:2 // at 26: Port x configuration bits (y = 0..15)
    OSPEEDR12:2 // at 24: Port x configuration bits (y = 0..15)
    OSPEEDR11:2 // at 22: Port x configuration bits (y = 0..15)
    OSPEEDR10:2 // at 20: Port x configuration bits (y = 0..15)
    OSPEEDR9:2 // at 18: Port x configuration bits (y = 0..15)
    OSPEEDR8:2 // at 16: Port x configuration bits (y = 0..15)
    OSPEEDR7:2 // at 14: Port x configuration bits (y = 0..15)
    OSPEEDR6:2 // at 12: Port x configuration bits (y = 0..15)
    OSPEEDR5:2 // at 10: Port x configuration bits (y = 0..15)
    OSPEEDR4:2 // at 8: Port x configuration bits (y = 0..15)
    OSPEEDR3:2 // at 6: Port x configuration bits (y = 0..15)
    OSPEEDR2:2 // at 4: Port x configuration bits (y = 0..15)
    OSPEEDR1:2 // at 2: Port x configuration bits (y = 0..15)
    OSPEEDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register PUPDR: GPIO port pull-up/pull-down register
  PUPDR @offset 0xc $u32 {
    PUPDR15:2 // at 30: Port x configuration bits (y = 0..15)
    PUPDR14:2 // at 28: Port x configuration bits (y = 0..15)
    PUPDR13:2 // at 26: Port x configuration bits (y = 0..15)
    PUPDR12:2 // at 24: Port x configuration bits (y = 0..15)
    PUPDR11:2 // at 22: Port x configuration bits (y = 0..15)
    PUPDR10:2 // at 20: Port x configuration bits (y = 0..15)
    PUPDR9:2 // at 18: Port x configuration bits (y = 0..15)
    PUPDR8:2 // at 16: Port x configuration bits (y = 0..15)
    PUPDR7:2 // at 14: Port x configuration bits (y = 0..15)
    PUPDR6:2 // at 12: Port x configuration bits (y = 0..15)
    PUPDR5:2 // at 10: Port x configuration bits (y = 0..15)
    PUPDR4:2 // at 8: Port x configuration bits (y = 0..15)
    PUPDR3:2 // at 6: Port x configuration bits (y = 0..15)
    PUPDR2:2 // at 4: Port x configuration bits (y = 0..15)
    PUPDR1:2 // at 2: Port x configuration bits (y = 0..15)
    PUPDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register IDR: GPIO port input data register
  IDR @offset 0x10 @ro $u32 {
    16
    IDR15 // at 15: Port input data (y = 0..15)
    IDR14 // at 14: Port input data (y = 0..15)
    IDR13 // at 13: Port input data (y = 0..15)
    IDR12 // at 12: Port input data (y = 0..15)
    IDR11 // at 11: Port input data (y = 0..15)
    IDR10 // at 10: Port input data (y = 0..15)
    IDR9 // at 9: Port input data (y = 0..15)
    IDR8 // at 8: Port input data (y = 0..15)
    IDR7 // at 7: Port input data (y = 0..15)
    IDR6 // at 6: Port input data (y = 0..15)
    IDR5 // at 5: Port input data (y = 0..15)
    IDR4 // at 4: Port input data (y = 0..15)
    IDR3 // at 3: Port input data (y = 0..15)
    IDR2 // at 2: Port input data (y = 0..15)
    IDR1 // at 1: Port input data (y = 0..15)
    IDR0 // at 0: Port input data (y = 0..15)
  }

//---  Register ODR: GPIO port output data register
  ODR @offset 0x14 $u32 {
    16
    ODR15 // at 15: Port output data (y = 0..15)
    ODR14 // at 14: Port output data (y = 0..15)
    ODR13 // at 13: Port output data (y = 0..15)
    ODR12 // at 12: Port output data (y = 0..15)
    ODR11 // at 11: Port output data (y = 0..15)
    ODR10 // at 10: Port output data (y = 0..15)
    ODR9 // at 9: Port output data (y = 0..15)
    ODR8 // at 8: Port output data (y = 0..15)
    ODR7 // at 7: Port output data (y = 0..15)
    ODR6 // at 6: Port output data (y = 0..15)
    ODR5 // at 5: Port output data (y = 0..15)
    ODR4 // at 4: Port output data (y = 0..15)
    ODR3 // at 3: Port output data (y = 0..15)
    ODR2 // at 2: Port output data (y = 0..15)
    ODR1 // at 1: Port output data (y = 0..15)
    ODR0 // at 0: Port output data (y = 0..15)
  }

//---  Register BSRR: GPIO port bit set/reset register
  BSRR @offset 0x18 $u32 {
    BR15 // at 31: Port x reset bit y (y = 0..15)
    BR14 // at 30: Port x reset bit y (y = 0..15)
    BR13 // at 29: Port x reset bit y (y = 0..15)
    BR12 // at 28: Port x reset bit y (y = 0..15)
    BR11 // at 27: Port x reset bit y (y = 0..15)
    BR10 // at 26: Port x reset bit y (y = 0..15)
    BR9 // at 25: Port x reset bit y (y = 0..15)
    BR8 // at 24: Port x reset bit y (y = 0..15)
    BR7 // at 23: Port x reset bit y (y = 0..15)
    BR6 // at 22: Port x reset bit y (y = 0..15)
    BR5 // at 21: Port x reset bit y (y = 0..15)
    BR4 // at 20: Port x reset bit y (y = 0..15)
    BR3 // at 19: Port x reset bit y (y = 0..15)
    BR2 // at 18: Port x reset bit y (y = 0..15)
    BR1 // at 17: Port x reset bit y (y = 0..15)
    BR0 // at 16: Port x set bit y (y= 0..15)
    BS15 // at 15: Port x set bit y (y= 0..15)
    BS14 // at 14: Port x set bit y (y= 0..15)
    BS13 // at 13: Port x set bit y (y= 0..15)
    BS12 // at 12: Port x set bit y (y= 0..15)
    BS11 // at 11: Port x set bit y (y= 0..15)
    BS10 // at 10: Port x set bit y (y= 0..15)
    BS9 // at 9: Port x set bit y (y= 0..15)
    BS8 // at 8: Port x set bit y (y= 0..15)
    BS7 // at 7: Port x set bit y (y= 0..15)
    BS6 // at 6: Port x set bit y (y= 0..15)
    BS5 // at 5: Port x set bit y (y= 0..15)
    BS4 // at 4: Port x set bit y (y= 0..15)
    BS3 // at 3: Port x set bit y (y= 0..15)
    BS2 // at 2: Port x set bit y (y= 0..15)
    BS1 // at 1: Port x set bit y (y= 0..15)
    BS0 // at 0: Port x set bit y (y= 0..15)
  }

//---  Register LCKR: GPIO port configuration lock register
  LCKR @offset 0x1c $u32 {
    15
    LCKK // at 16: Port x lock bit y (y= 0..15)
    LCK15 // at 15: Port x lock bit y (y= 0..15)
    LCK14 // at 14: Port x lock bit y (y= 0..15)
    LCK13 // at 13: Port x lock bit y (y= 0..15)
    LCK12 // at 12: Port x lock bit y (y= 0..15)
    LCK11 // at 11: Port x lock bit y (y= 0..15)
    LCK10 // at 10: Port x lock bit y (y= 0..15)
    LCK9 // at 9: Port x lock bit y (y= 0..15)
    LCK8 // at 8: Port x lock bit y (y= 0..15)
    LCK7 // at 7: Port x lock bit y (y= 0..15)
    LCK6 // at 6: Port x lock bit y (y= 0..15)
    LCK5 // at 5: Port x lock bit y (y= 0..15)
    LCK4 // at 4: Port x lock bit y (y= 0..15)
    LCK3 // at 3: Port x lock bit y (y= 0..15)
    LCK2 // at 2: Port x lock bit y (y= 0..15)
    LCK1 // at 1: Port x lock bit y (y= 0..15)
    LCK0 // at 0: Port x lock bit y (y= 0..15)
  }

//---  Register AFRL: GPIO alternate function lowregister
  AFRL @offset 0x20 $u32 {
    AFRL7:4 // at 28: Alternate function selection for port x bit y (y = 0..7)
    AFRL6:4 // at 24: Alternate function selection for port x bit y (y = 0..7)
    AFRL5:4 // at 20: Alternate function selection for port x bit y (y = 0..7)
    AFRL4:4 // at 16: Alternate function selection for port x bit y (y = 0..7)
    AFRL3:4 // at 12: Alternate function selection for port x bit y (y = 0..7)
    AFRL2:4 // at 8: Alternate function selection for port x bit y (y = 0..7)
    AFRL1:4 // at 4: Alternate function selection for port x bit y (y = 0..7)
    AFRL0:4 // at 0: Alternate function selection for port x bit y (y = 0..7)
  }

//---  Register AFRH: GPIO alternate function high register
  AFRH @offset 0x24 $u32 {
    AFRH15:4 // at 28: Alternate function selection for port x bit y (y = 8..15)
    AFRH14:4 // at 24: Alternate function selection for port x bit y (y = 8..15)
    AFRH13:4 // at 20: Alternate function selection for port x bit y (y = 8..15)
    AFRH12:4 // at 16: Alternate function selection for port x bit y (y = 8..15)
    AFRH11:4 // at 12: Alternate function selection for port x bit y (y = 8..15)
    AFRH10:4 // at 8: Alternate function selection for port x bit y (y = 8..15)
    AFRH9:4 // at 4: Alternate function selection for port x bit y (y = 8..15)
    AFRH8:4 // at 0: Alternate function selection for port x bit y (y = 8..15)
  }

//---  Register BRR: GPIO port bit reset register
  BRR @offset 0x28 $u32 {
    16
    BR15 // at 15: Port D Reset bit 15
    BR14 // at 14: Port D Reset bit 14
    BR13 // at 13: Port D Reset bit 13
    BR12 // at 12: Port D Reset bit 12
    BR11 // at 11: Port D Reset bit 11
    BR10 // at 10: Port D Reset bit 10
    BR9 // at 9: Port D Reset bit 9
    BR8 // at 8: Port D Reset bit 8
    BR7 // at 7: Port D Reset bit 7
    BR6 // at 6: Port D Reset bit 6
    BR5 // at 5: Port D Reset bit 5
    BR4 // at 4: Port D Reset bit 4
    BR3 // at 3: Port D Reset bit 3
    BR2 // at 2: Port D Reset bit 2
    BR1 // at 1: Port D Reset bit 1
    BR0 // at 0: Port D Reset bit 0
  }

}

//------------------------------------------------------------------------------
// Peripheral GPIOJ
//------------------------------------------------------------------------------

registers ©GPIOJ @at 0x40022400 {
//---  Register MODER: GPIO port mode register
  MODER @offset 0x0 $u32 {
    MODER15:2 // at 30: Port x configuration bits (y = 0..15)
    MODER14:2 // at 28: Port x configuration bits (y = 0..15)
    MODER13:2 // at 26: Port x configuration bits (y = 0..15)
    MODER12:2 // at 24: Port x configuration bits (y = 0..15)
    MODER11:2 // at 22: Port x configuration bits (y = 0..15)
    MODER10:2 // at 20: Port x configuration bits (y = 0..15)
    MODER9:2 // at 18: Port x configuration bits (y = 0..15)
    MODER8:2 // at 16: Port x configuration bits (y = 0..15)
    MODER7:2 // at 14: Port x configuration bits (y = 0..15)
    MODER6:2 // at 12: Port x configuration bits (y = 0..15)
    MODER5:2 // at 10: Port x configuration bits (y = 0..15)
    MODER4:2 // at 8: Port x configuration bits (y = 0..15)
    MODER3:2 // at 6: Port x configuration bits (y = 0..15)
    MODER2:2 // at 4: Port x configuration bits (y = 0..15)
    MODER1:2 // at 2: Port x configuration bits (y = 0..15)
    MODER0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register OTYPER: GPIO port output type register
  OTYPER @offset 0x4 $u32 {
    16
    OT15 // at 15: Port x configuration bits (y = 0..15)
    OT14 // at 14: Port x configuration bits (y = 0..15)
    OT13 // at 13: Port x configuration bits (y = 0..15)
    OT12 // at 12: Port x configuration bits (y = 0..15)
    OT11 // at 11: Port x configuration bits (y = 0..15)
    OT10 // at 10: Port x configuration bits (y = 0..15)
    OT9 // at 9: Port x configuration bits (y = 0..15)
    OT8 // at 8: Port x configuration bits (y = 0..15)
    OT7 // at 7: Port x configuration bits (y = 0..15)
    OT6 // at 6: Port x configuration bits (y = 0..15)
    OT5 // at 5: Port x configuration bits (y = 0..15)
    OT4 // at 4: Port x configuration bits (y = 0..15)
    OT3 // at 3: Port x configuration bits (y = 0..15)
    OT2 // at 2: Port x configuration bits (y = 0..15)
    OT1 // at 1: Port x configuration bits (y = 0..15)
    OT0 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  GPIOB_OSPEEDR @offset 0x8 $u32 {
    OSPEEDR15:2 // at 30: Port x configuration bits (y = 0..15)
    OSPEEDR14:2 // at 28: Port x configuration bits (y = 0..15)
    OSPEEDR13:2 // at 26: Port x configuration bits (y = 0..15)
    OSPEEDR12:2 // at 24: Port x configuration bits (y = 0..15)
    OSPEEDR11:2 // at 22: Port x configuration bits (y = 0..15)
    OSPEEDR10:2 // at 20: Port x configuration bits (y = 0..15)
    OSPEEDR9:2 // at 18: Port x configuration bits (y = 0..15)
    OSPEEDR8:2 // at 16: Port x configuration bits (y = 0..15)
    OSPEEDR7:2 // at 14: Port x configuration bits (y = 0..15)
    OSPEEDR6:2 // at 12: Port x configuration bits (y = 0..15)
    OSPEEDR5:2 // at 10: Port x configuration bits (y = 0..15)
    OSPEEDR4:2 // at 8: Port x configuration bits (y = 0..15)
    OSPEEDR3:2 // at 6: Port x configuration bits (y = 0..15)
    OSPEEDR2:2 // at 4: Port x configuration bits (y = 0..15)
    OSPEEDR1:2 // at 2: Port x configuration bits (y = 0..15)
    OSPEEDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register PUPDR: GPIO port pull-up/pull-down register
  PUPDR @offset 0xc $u32 {
    PUPDR15:2 // at 30: Port x configuration bits (y = 0..15)
    PUPDR14:2 // at 28: Port x configuration bits (y = 0..15)
    PUPDR13:2 // at 26: Port x configuration bits (y = 0..15)
    PUPDR12:2 // at 24: Port x configuration bits (y = 0..15)
    PUPDR11:2 // at 22: Port x configuration bits (y = 0..15)
    PUPDR10:2 // at 20: Port x configuration bits (y = 0..15)
    PUPDR9:2 // at 18: Port x configuration bits (y = 0..15)
    PUPDR8:2 // at 16: Port x configuration bits (y = 0..15)
    PUPDR7:2 // at 14: Port x configuration bits (y = 0..15)
    PUPDR6:2 // at 12: Port x configuration bits (y = 0..15)
    PUPDR5:2 // at 10: Port x configuration bits (y = 0..15)
    PUPDR4:2 // at 8: Port x configuration bits (y = 0..15)
    PUPDR3:2 // at 6: Port x configuration bits (y = 0..15)
    PUPDR2:2 // at 4: Port x configuration bits (y = 0..15)
    PUPDR1:2 // at 2: Port x configuration bits (y = 0..15)
    PUPDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register IDR: GPIO port input data register
  IDR @offset 0x10 @ro $u32 {
    16
    IDR15 // at 15: Port input data (y = 0..15)
    IDR14 // at 14: Port input data (y = 0..15)
    IDR13 // at 13: Port input data (y = 0..15)
    IDR12 // at 12: Port input data (y = 0..15)
    IDR11 // at 11: Port input data (y = 0..15)
    IDR10 // at 10: Port input data (y = 0..15)
    IDR9 // at 9: Port input data (y = 0..15)
    IDR8 // at 8: Port input data (y = 0..15)
    IDR7 // at 7: Port input data (y = 0..15)
    IDR6 // at 6: Port input data (y = 0..15)
    IDR5 // at 5: Port input data (y = 0..15)
    IDR4 // at 4: Port input data (y = 0..15)
    IDR3 // at 3: Port input data (y = 0..15)
    IDR2 // at 2: Port input data (y = 0..15)
    IDR1 // at 1: Port input data (y = 0..15)
    IDR0 // at 0: Port input data (y = 0..15)
  }

//---  Register ODR: GPIO port output data register
  ODR @offset 0x14 $u32 {
    16
    ODR15 // at 15: Port output data (y = 0..15)
    ODR14 // at 14: Port output data (y = 0..15)
    ODR13 // at 13: Port output data (y = 0..15)
    ODR12 // at 12: Port output data (y = 0..15)
    ODR11 // at 11: Port output data (y = 0..15)
    ODR10 // at 10: Port output data (y = 0..15)
    ODR9 // at 9: Port output data (y = 0..15)
    ODR8 // at 8: Port output data (y = 0..15)
    ODR7 // at 7: Port output data (y = 0..15)
    ODR6 // at 6: Port output data (y = 0..15)
    ODR5 // at 5: Port output data (y = 0..15)
    ODR4 // at 4: Port output data (y = 0..15)
    ODR3 // at 3: Port output data (y = 0..15)
    ODR2 // at 2: Port output data (y = 0..15)
    ODR1 // at 1: Port output data (y = 0..15)
    ODR0 // at 0: Port output data (y = 0..15)
  }

//---  Register BSRR: GPIO port bit set/reset register
  BSRR @offset 0x18 $u32 {
    BR15 // at 31: Port x reset bit y (y = 0..15)
    BR14 // at 30: Port x reset bit y (y = 0..15)
    BR13 // at 29: Port x reset bit y (y = 0..15)
    BR12 // at 28: Port x reset bit y (y = 0..15)
    BR11 // at 27: Port x reset bit y (y = 0..15)
    BR10 // at 26: Port x reset bit y (y = 0..15)
    BR9 // at 25: Port x reset bit y (y = 0..15)
    BR8 // at 24: Port x reset bit y (y = 0..15)
    BR7 // at 23: Port x reset bit y (y = 0..15)
    BR6 // at 22: Port x reset bit y (y = 0..15)
    BR5 // at 21: Port x reset bit y (y = 0..15)
    BR4 // at 20: Port x reset bit y (y = 0..15)
    BR3 // at 19: Port x reset bit y (y = 0..15)
    BR2 // at 18: Port x reset bit y (y = 0..15)
    BR1 // at 17: Port x reset bit y (y = 0..15)
    BR0 // at 16: Port x set bit y (y= 0..15)
    BS15 // at 15: Port x set bit y (y= 0..15)
    BS14 // at 14: Port x set bit y (y= 0..15)
    BS13 // at 13: Port x set bit y (y= 0..15)
    BS12 // at 12: Port x set bit y (y= 0..15)
    BS11 // at 11: Port x set bit y (y= 0..15)
    BS10 // at 10: Port x set bit y (y= 0..15)
    BS9 // at 9: Port x set bit y (y= 0..15)
    BS8 // at 8: Port x set bit y (y= 0..15)
    BS7 // at 7: Port x set bit y (y= 0..15)
    BS6 // at 6: Port x set bit y (y= 0..15)
    BS5 // at 5: Port x set bit y (y= 0..15)
    BS4 // at 4: Port x set bit y (y= 0..15)
    BS3 // at 3: Port x set bit y (y= 0..15)
    BS2 // at 2: Port x set bit y (y= 0..15)
    BS1 // at 1: Port x set bit y (y= 0..15)
    BS0 // at 0: Port x set bit y (y= 0..15)
  }

//---  Register LCKR: GPIO port configuration lock register
  LCKR @offset 0x1c $u32 {
    15
    LCKK // at 16: Port x lock bit y (y= 0..15)
    LCK15 // at 15: Port x lock bit y (y= 0..15)
    LCK14 // at 14: Port x lock bit y (y= 0..15)
    LCK13 // at 13: Port x lock bit y (y= 0..15)
    LCK12 // at 12: Port x lock bit y (y= 0..15)
    LCK11 // at 11: Port x lock bit y (y= 0..15)
    LCK10 // at 10: Port x lock bit y (y= 0..15)
    LCK9 // at 9: Port x lock bit y (y= 0..15)
    LCK8 // at 8: Port x lock bit y (y= 0..15)
    LCK7 // at 7: Port x lock bit y (y= 0..15)
    LCK6 // at 6: Port x lock bit y (y= 0..15)
    LCK5 // at 5: Port x lock bit y (y= 0..15)
    LCK4 // at 4: Port x lock bit y (y= 0..15)
    LCK3 // at 3: Port x lock bit y (y= 0..15)
    LCK2 // at 2: Port x lock bit y (y= 0..15)
    LCK1 // at 1: Port x lock bit y (y= 0..15)
    LCK0 // at 0: Port x lock bit y (y= 0..15)
  }

//---  Register AFRL: GPIO alternate function lowregister
  AFRL @offset 0x20 $u32 {
    AFRL7:4 // at 28: Alternate function selection for port x bit y (y = 0..7)
    AFRL6:4 // at 24: Alternate function selection for port x bit y (y = 0..7)
    AFRL5:4 // at 20: Alternate function selection for port x bit y (y = 0..7)
    AFRL4:4 // at 16: Alternate function selection for port x bit y (y = 0..7)
    AFRL3:4 // at 12: Alternate function selection for port x bit y (y = 0..7)
    AFRL2:4 // at 8: Alternate function selection for port x bit y (y = 0..7)
    AFRL1:4 // at 4: Alternate function selection for port x bit y (y = 0..7)
    AFRL0:4 // at 0: Alternate function selection for port x bit y (y = 0..7)
  }

//---  Register AFRH: GPIO alternate function high register
  AFRH @offset 0x24 $u32 {
    AFRH15:4 // at 28: Alternate function selection for port x bit y (y = 8..15)
    AFRH14:4 // at 24: Alternate function selection for port x bit y (y = 8..15)
    AFRH13:4 // at 20: Alternate function selection for port x bit y (y = 8..15)
    AFRH12:4 // at 16: Alternate function selection for port x bit y (y = 8..15)
    AFRH11:4 // at 12: Alternate function selection for port x bit y (y = 8..15)
    AFRH10:4 // at 8: Alternate function selection for port x bit y (y = 8..15)
    AFRH9:4 // at 4: Alternate function selection for port x bit y (y = 8..15)
    AFRH8:4 // at 0: Alternate function selection for port x bit y (y = 8..15)
  }

//---  Register BRR: GPIO port bit reset register
  BRR @offset 0x28 $u32 {
    16
    BR15 // at 15: Port D Reset bit 15
    BR14 // at 14: Port D Reset bit 14
    BR13 // at 13: Port D Reset bit 13
    BR12 // at 12: Port D Reset bit 12
    BR11 // at 11: Port D Reset bit 11
    BR10 // at 10: Port D Reset bit 10
    BR9 // at 9: Port D Reset bit 9
    BR8 // at 8: Port D Reset bit 8
    BR7 // at 7: Port D Reset bit 7
    BR6 // at 6: Port D Reset bit 6
    BR5 // at 5: Port D Reset bit 5
    BR4 // at 4: Port D Reset bit 4
    BR3 // at 3: Port D Reset bit 3
    BR2 // at 2: Port D Reset bit 2
    BR1 // at 1: Port D Reset bit 1
    BR0 // at 0: Port D Reset bit 0
  }

}

//------------------------------------------------------------------------------
// Peripheral GPIOK
//------------------------------------------------------------------------------

registers ©GPIOK @at 0x40022800 {
//---  Register MODER: GPIO port mode register
  MODER @offset 0x0 $u32 {
    MODER15:2 // at 30: Port x configuration bits (y = 0..15)
    MODER14:2 // at 28: Port x configuration bits (y = 0..15)
    MODER13:2 // at 26: Port x configuration bits (y = 0..15)
    MODER12:2 // at 24: Port x configuration bits (y = 0..15)
    MODER11:2 // at 22: Port x configuration bits (y = 0..15)
    MODER10:2 // at 20: Port x configuration bits (y = 0..15)
    MODER9:2 // at 18: Port x configuration bits (y = 0..15)
    MODER8:2 // at 16: Port x configuration bits (y = 0..15)
    MODER7:2 // at 14: Port x configuration bits (y = 0..15)
    MODER6:2 // at 12: Port x configuration bits (y = 0..15)
    MODER5:2 // at 10: Port x configuration bits (y = 0..15)
    MODER4:2 // at 8: Port x configuration bits (y = 0..15)
    MODER3:2 // at 6: Port x configuration bits (y = 0..15)
    MODER2:2 // at 4: Port x configuration bits (y = 0..15)
    MODER1:2 // at 2: Port x configuration bits (y = 0..15)
    MODER0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register OTYPER: GPIO port output type register
  OTYPER @offset 0x4 $u32 {
    16
    OT15 // at 15: Port x configuration bits (y = 0..15)
    OT14 // at 14: Port x configuration bits (y = 0..15)
    OT13 // at 13: Port x configuration bits (y = 0..15)
    OT12 // at 12: Port x configuration bits (y = 0..15)
    OT11 // at 11: Port x configuration bits (y = 0..15)
    OT10 // at 10: Port x configuration bits (y = 0..15)
    OT9 // at 9: Port x configuration bits (y = 0..15)
    OT8 // at 8: Port x configuration bits (y = 0..15)
    OT7 // at 7: Port x configuration bits (y = 0..15)
    OT6 // at 6: Port x configuration bits (y = 0..15)
    OT5 // at 5: Port x configuration bits (y = 0..15)
    OT4 // at 4: Port x configuration bits (y = 0..15)
    OT3 // at 3: Port x configuration bits (y = 0..15)
    OT2 // at 2: Port x configuration bits (y = 0..15)
    OT1 // at 1: Port x configuration bits (y = 0..15)
    OT0 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register GPIOB_OSPEEDR: GPIO port output speed register
  GPIOB_OSPEEDR @offset 0x8 $u32 {
    OSPEEDR15:2 // at 30: Port x configuration bits (y = 0..15)
    OSPEEDR14:2 // at 28: Port x configuration bits (y = 0..15)
    OSPEEDR13:2 // at 26: Port x configuration bits (y = 0..15)
    OSPEEDR12:2 // at 24: Port x configuration bits (y = 0..15)
    OSPEEDR11:2 // at 22: Port x configuration bits (y = 0..15)
    OSPEEDR10:2 // at 20: Port x configuration bits (y = 0..15)
    OSPEEDR9:2 // at 18: Port x configuration bits (y = 0..15)
    OSPEEDR8:2 // at 16: Port x configuration bits (y = 0..15)
    OSPEEDR7:2 // at 14: Port x configuration bits (y = 0..15)
    OSPEEDR6:2 // at 12: Port x configuration bits (y = 0..15)
    OSPEEDR5:2 // at 10: Port x configuration bits (y = 0..15)
    OSPEEDR4:2 // at 8: Port x configuration bits (y = 0..15)
    OSPEEDR3:2 // at 6: Port x configuration bits (y = 0..15)
    OSPEEDR2:2 // at 4: Port x configuration bits (y = 0..15)
    OSPEEDR1:2 // at 2: Port x configuration bits (y = 0..15)
    OSPEEDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register PUPDR: GPIO port pull-up/pull-down register
  PUPDR @offset 0xc $u32 {
    PUPDR15:2 // at 30: Port x configuration bits (y = 0..15)
    PUPDR14:2 // at 28: Port x configuration bits (y = 0..15)
    PUPDR13:2 // at 26: Port x configuration bits (y = 0..15)
    PUPDR12:2 // at 24: Port x configuration bits (y = 0..15)
    PUPDR11:2 // at 22: Port x configuration bits (y = 0..15)
    PUPDR10:2 // at 20: Port x configuration bits (y = 0..15)
    PUPDR9:2 // at 18: Port x configuration bits (y = 0..15)
    PUPDR8:2 // at 16: Port x configuration bits (y = 0..15)
    PUPDR7:2 // at 14: Port x configuration bits (y = 0..15)
    PUPDR6:2 // at 12: Port x configuration bits (y = 0..15)
    PUPDR5:2 // at 10: Port x configuration bits (y = 0..15)
    PUPDR4:2 // at 8: Port x configuration bits (y = 0..15)
    PUPDR3:2 // at 6: Port x configuration bits (y = 0..15)
    PUPDR2:2 // at 4: Port x configuration bits (y = 0..15)
    PUPDR1:2 // at 2: Port x configuration bits (y = 0..15)
    PUPDR0:2 // at 0: Port x configuration bits (y = 0..15)
  }

//---  Register IDR: GPIO port input data register
  IDR @offset 0x10 @ro $u32 {
    16
    IDR15 // at 15: Port input data (y = 0..15)
    IDR14 // at 14: Port input data (y = 0..15)
    IDR13 // at 13: Port input data (y = 0..15)
    IDR12 // at 12: Port input data (y = 0..15)
    IDR11 // at 11: Port input data (y = 0..15)
    IDR10 // at 10: Port input data (y = 0..15)
    IDR9 // at 9: Port input data (y = 0..15)
    IDR8 // at 8: Port input data (y = 0..15)
    IDR7 // at 7: Port input data (y = 0..15)
    IDR6 // at 6: Port input data (y = 0..15)
    IDR5 // at 5: Port input data (y = 0..15)
    IDR4 // at 4: Port input data (y = 0..15)
    IDR3 // at 3: Port input data (y = 0..15)
    IDR2 // at 2: Port input data (y = 0..15)
    IDR1 // at 1: Port input data (y = 0..15)
    IDR0 // at 0: Port input data (y = 0..15)
  }

//---  Register ODR: GPIO port output data register
  ODR @offset 0x14 $u32 {
    16
    ODR15 // at 15: Port output data (y = 0..15)
    ODR14 // at 14: Port output data (y = 0..15)
    ODR13 // at 13: Port output data (y = 0..15)
    ODR12 // at 12: Port output data (y = 0..15)
    ODR11 // at 11: Port output data (y = 0..15)
    ODR10 // at 10: Port output data (y = 0..15)
    ODR9 // at 9: Port output data (y = 0..15)
    ODR8 // at 8: Port output data (y = 0..15)
    ODR7 // at 7: Port output data (y = 0..15)
    ODR6 // at 6: Port output data (y = 0..15)
    ODR5 // at 5: Port output data (y = 0..15)
    ODR4 // at 4: Port output data (y = 0..15)
    ODR3 // at 3: Port output data (y = 0..15)
    ODR2 // at 2: Port output data (y = 0..15)
    ODR1 // at 1: Port output data (y = 0..15)
    ODR0 // at 0: Port output data (y = 0..15)
  }

//---  Register BSRR: GPIO port bit set/reset register
  BSRR @offset 0x18 $u32 {
    BR15 // at 31: Port x reset bit y (y = 0..15)
    BR14 // at 30: Port x reset bit y (y = 0..15)
    BR13 // at 29: Port x reset bit y (y = 0..15)
    BR12 // at 28: Port x reset bit y (y = 0..15)
    BR11 // at 27: Port x reset bit y (y = 0..15)
    BR10 // at 26: Port x reset bit y (y = 0..15)
    BR9 // at 25: Port x reset bit y (y = 0..15)
    BR8 // at 24: Port x reset bit y (y = 0..15)
    BR7 // at 23: Port x reset bit y (y = 0..15)
    BR6 // at 22: Port x reset bit y (y = 0..15)
    BR5 // at 21: Port x reset bit y (y = 0..15)
    BR4 // at 20: Port x reset bit y (y = 0..15)
    BR3 // at 19: Port x reset bit y (y = 0..15)
    BR2 // at 18: Port x reset bit y (y = 0..15)
    BR1 // at 17: Port x reset bit y (y = 0..15)
    BR0 // at 16: Port x set bit y (y= 0..15)
    BS15 // at 15: Port x set bit y (y= 0..15)
    BS14 // at 14: Port x set bit y (y= 0..15)
    BS13 // at 13: Port x set bit y (y= 0..15)
    BS12 // at 12: Port x set bit y (y= 0..15)
    BS11 // at 11: Port x set bit y (y= 0..15)
    BS10 // at 10: Port x set bit y (y= 0..15)
    BS9 // at 9: Port x set bit y (y= 0..15)
    BS8 // at 8: Port x set bit y (y= 0..15)
    BS7 // at 7: Port x set bit y (y= 0..15)
    BS6 // at 6: Port x set bit y (y= 0..15)
    BS5 // at 5: Port x set bit y (y= 0..15)
    BS4 // at 4: Port x set bit y (y= 0..15)
    BS3 // at 3: Port x set bit y (y= 0..15)
    BS2 // at 2: Port x set bit y (y= 0..15)
    BS1 // at 1: Port x set bit y (y= 0..15)
    BS0 // at 0: Port x set bit y (y= 0..15)
  }

//---  Register LCKR: GPIO port configuration lock register
  LCKR @offset 0x1c $u32 {
    15
    LCKK // at 16: Port x lock bit y (y= 0..15)
    LCK15 // at 15: Port x lock bit y (y= 0..15)
    LCK14 // at 14: Port x lock bit y (y= 0..15)
    LCK13 // at 13: Port x lock bit y (y= 0..15)
    LCK12 // at 12: Port x lock bit y (y= 0..15)
    LCK11 // at 11: Port x lock bit y (y= 0..15)
    LCK10 // at 10: Port x lock bit y (y= 0..15)
    LCK9 // at 9: Port x lock bit y (y= 0..15)
    LCK8 // at 8: Port x lock bit y (y= 0..15)
    LCK7 // at 7: Port x lock bit y (y= 0..15)
    LCK6 // at 6: Port x lock bit y (y= 0..15)
    LCK5 // at 5: Port x lock bit y (y= 0..15)
    LCK4 // at 4: Port x lock bit y (y= 0..15)
    LCK3 // at 3: Port x lock bit y (y= 0..15)
    LCK2 // at 2: Port x lock bit y (y= 0..15)
    LCK1 // at 1: Port x lock bit y (y= 0..15)
    LCK0 // at 0: Port x lock bit y (y= 0..15)
  }

//---  Register AFRL: GPIO alternate function lowregister
  AFRL @offset 0x20 $u32 {
    AFRL7:4 // at 28: Alternate function selection for port x bit y (y = 0..7)
    AFRL6:4 // at 24: Alternate function selection for port x bit y (y = 0..7)
    AFRL5:4 // at 20: Alternate function selection for port x bit y (y = 0..7)
    AFRL4:4 // at 16: Alternate function selection for port x bit y (y = 0..7)
    AFRL3:4 // at 12: Alternate function selection for port x bit y (y = 0..7)
    AFRL2:4 // at 8: Alternate function selection for port x bit y (y = 0..7)
    AFRL1:4 // at 4: Alternate function selection for port x bit y (y = 0..7)
    AFRL0:4 // at 0: Alternate function selection for port x bit y (y = 0..7)
  }

//---  Register AFRH: GPIO alternate function high register
  AFRH @offset 0x24 $u32 {
    AFRH15:4 // at 28: Alternate function selection for port x bit y (y = 8..15)
    AFRH14:4 // at 24: Alternate function selection for port x bit y (y = 8..15)
    AFRH13:4 // at 20: Alternate function selection for port x bit y (y = 8..15)
    AFRH12:4 // at 16: Alternate function selection for port x bit y (y = 8..15)
    AFRH11:4 // at 12: Alternate function selection for port x bit y (y = 8..15)
    AFRH10:4 // at 8: Alternate function selection for port x bit y (y = 8..15)
    AFRH9:4 // at 4: Alternate function selection for port x bit y (y = 8..15)
    AFRH8:4 // at 0: Alternate function selection for port x bit y (y = 8..15)
  }

//---  Register BRR: GPIO port bit reset register
  BRR @offset 0x28 $u32 {
    16
    BR15 // at 15: Port D Reset bit 15
    BR14 // at 14: Port D Reset bit 14
    BR13 // at 13: Port D Reset bit 13
    BR12 // at 12: Port D Reset bit 12
    BR11 // at 11: Port D Reset bit 11
    BR10 // at 10: Port D Reset bit 10
    BR9 // at 9: Port D Reset bit 9
    BR8 // at 8: Port D Reset bit 8
    BR7 // at 7: Port D Reset bit 7
    BR6 // at 6: Port D Reset bit 6
    BR5 // at 5: Port D Reset bit 5
    BR4 // at 4: Port D Reset bit 4
    BR3 // at 3: Port D Reset bit 3
    BR2 // at 2: Port D Reset bit 2
    BR1 // at 1: Port D Reset bit 1
    BR0 // at 0: Port D Reset bit 0
  }

}

//------------------------------------------------------------------------------
// Peripheral HASH: Hash processor
//------------------------------------------------------------------------------

registers ©HASH @at 0x50060400 {
//---  Register CR: control register
  CR @offset 0x0 $u32 {
    13
    ALGO1 // at 18: ALGO
    1
    LKEY // at 16: Long key selection
    2
    MDMAT // at 13: Multiple DMA Transfers
    DINNE // at 12: DIN not empty
    NBW:4 // at 8: Number of words already pushed
    ALGO0 // at 7: Algorithm selection
    MODE // at 6: Mode selection
    DATATYPE:2 // at 4: Data type selection
    DMAE // at 3: DMA enable
    INIT // at 2: Initialize message digest calculation
    2
  }

//---  Register DIN: data input register
  DIN @offset 0x4 $u32 {
    DATAIN:32 // at 0: Data input
  }

//---  Register STR: start register
  STR @offset 0x8 $u32 {
    23
    DCAL // at 8: Digest calculation
    3
    NBLW:5 // at 0: Number of valid bits in the last word of the message
  }

//---  Register HR0: digest registers
  HR0 @offset 0xc @ro $u32 {
    H0:32 // at 0: H0
  }

//---  Register HR1: digest registers
  HR1 @offset 0x10 @ro $u32 {
    H1:32 // at 0: H1
  }

//---  Register HR2: digest registers
  HR2 @offset 0x14 @ro $u32 {
    H2:32 // at 0: H2
  }

//---  Register HR3: digest registers
  HR3 @offset 0x18 @ro $u32 {
    H3:32 // at 0: H3
  }

//---  Register HR4: digest registers
  HR4 @offset 0x1c @ro $u32 {
    H4:32 // at 0: H4
  }

//---  Register IMR: interrupt enable register
  IMR @offset 0x20 $u32 {
    30
    DCIE // at 1: Digest calculation completion interrupt enable
    DINIE // at 0: Data input interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x24 $u32 {
    28
    BUSY // at 3: Busy bit
    DMAS // at 2: DMA Status
    DCIS // at 1: Digest calculation completion interrupt status
    DINIS // at 0: Data input interrupt status
  }

//---  Register CSR0: context swap registers
  CSR0 @offset 0xf8 $u32 {
    CSR0:32 // at 0: CSR0
  }

//---  Register CSR1: context swap registers
  CSR1 @offset 0xfc $u32 {
    CSR1:32 // at 0: CSR1
  }

//---  Register CSR2: context swap registers
  CSR2 @offset 0x100 $u32 {
    CSR2:32 // at 0: CSR2
  }

//---  Register CSR3: context swap registers
  CSR3 @offset 0x104 $u32 {
    CSR3:32 // at 0: CSR3
  }

//---  Register CSR4: context swap registers
  CSR4 @offset 0x108 $u32 {
    CSR4:32 // at 0: CSR4
  }

//---  Register CSR5: context swap registers
  CSR5 @offset 0x10c $u32 {
    CSR5:32 // at 0: CSR5
  }

//---  Register CSR6: context swap registers
  CSR6 @offset 0x110 $u32 {
    CSR6:32 // at 0: CSR6
  }

//---  Register CSR7: context swap registers
  CSR7 @offset 0x114 $u32 {
    CSR7:32 // at 0: CSR7
  }

//---  Register CSR8: context swap registers
  CSR8 @offset 0x118 $u32 {
    CSR8:32 // at 0: CSR8
  }

//---  Register CSR9: context swap registers
  CSR9 @offset 0x11c $u32 {
    CSR9:32 // at 0: CSR9
  }

//---  Register CSR10: context swap registers
  CSR10 @offset 0x120 $u32 {
    CSR10:32 // at 0: CSR10
  }

//---  Register CSR11: context swap registers
  CSR11 @offset 0x124 $u32 {
    CSR11:32 // at 0: CSR11
  }

//---  Register CSR12: context swap registers
  CSR12 @offset 0x128 $u32 {
    CSR12:32 // at 0: CSR12
  }

//---  Register CSR13: context swap registers
  CSR13 @offset 0x12c $u32 {
    CSR13:32 // at 0: CSR13
  }

//---  Register CSR14: context swap registers
  CSR14 @offset 0x130 $u32 {
    CSR14:32 // at 0: CSR14
  }

//---  Register CSR15: context swap registers
  CSR15 @offset 0x134 $u32 {
    CSR15:32 // at 0: CSR15
  }

//---  Register CSR16: context swap registers
  CSR16 @offset 0x138 $u32 {
    CSR16:32 // at 0: CSR16
  }

//---  Register CSR17: context swap registers
  CSR17 @offset 0x13c $u32 {
    CSR17:32 // at 0: CSR17
  }

//---  Register CSR18: context swap registers
  CSR18 @offset 0x140 $u32 {
    CSR18:32 // at 0: CSR18
  }

//---  Register CSR19: context swap registers
  CSR19 @offset 0x144 $u32 {
    CSR19:32 // at 0: CSR19
  }

//---  Register CSR20: context swap registers
  CSR20 @offset 0x148 $u32 {
    CSR20:32 // at 0: CSR20
  }

//---  Register CSR21: context swap registers
  CSR21 @offset 0x14c $u32 {
    CSR21:32 // at 0: CSR21
  }

//---  Register CSR22: context swap registers
  CSR22 @offset 0x150 $u32 {
    CSR22:32 // at 0: CSR22
  }

//---  Register CSR23: context swap registers
  CSR23 @offset 0x154 $u32 {
    CSR23:32 // at 0: CSR23
  }

//---  Register CSR24: context swap registers
  CSR24 @offset 0x158 $u32 {
    CSR24:32 // at 0: CSR24
  }

//---  Register CSR25: context swap registers
  CSR25 @offset 0x15c $u32 {
    CSR25:32 // at 0: CSR25
  }

//---  Register CSR26: context swap registers
  CSR26 @offset 0x160 $u32 {
    CSR26:32 // at 0: CSR26
  }

//---  Register CSR27: context swap registers
  CSR27 @offset 0x164 $u32 {
    CSR27:32 // at 0: CSR27
  }

//---  Register CSR28: context swap registers
  CSR28 @offset 0x168 $u32 {
    CSR28:32 // at 0: CSR28
  }

//---  Register CSR29: context swap registers
  CSR29 @offset 0x16c $u32 {
    CSR29:32 // at 0: CSR29
  }

//---  Register CSR30: context swap registers
  CSR30 @offset 0x170 $u32 {
    CSR30:32 // at 0: CSR30
  }

//---  Register CSR31: context swap registers
  CSR31 @offset 0x174 $u32 {
    CSR31:32 // at 0: CSR31
  }

//---  Register CSR32: context swap registers
  CSR32 @offset 0x178 $u32 {
    CSR32:32 // at 0: CSR32
  }

//---  Register CSR33: context swap registers
  CSR33 @offset 0x17c $u32 {
    CSR33:32 // at 0: CSR33
  }

//---  Register CSR34: context swap registers
  CSR34 @offset 0x180 $u32 {
    CSR34:32 // at 0: CSR34
  }

//---  Register CSR35: context swap registers
  CSR35 @offset 0x184 $u32 {
    CSR35:32 // at 0: CSR35
  }

//---  Register CSR36: context swap registers
  CSR36 @offset 0x188 $u32 {
    CSR36:32 // at 0: CSR36
  }

//---  Register CSR37: context swap registers
  CSR37 @offset 0x18c $u32 {
    CSR37:32 // at 0: CSR37
  }

//---  Register CSR38: context swap registers
  CSR38 @offset 0x190 $u32 {
    CSR38:32 // at 0: CSR38
  }

//---  Register CSR39: context swap registers
  CSR39 @offset 0x194 $u32 {
    CSR39:32 // at 0: CSR39
  }

//---  Register CSR40: context swap registers
  CSR40 @offset 0x198 $u32 {
    CSR40:32 // at 0: CSR40
  }

//---  Register CSR41: context swap registers
  CSR41 @offset 0x19c $u32 {
    CSR41:32 // at 0: CSR41
  }

//---  Register CSR42: context swap registers
  CSR42 @offset 0x1a0 $u32 {
    CSR42:32 // at 0: CSR42
  }

//---  Register CSR43: context swap registers
  CSR43 @offset 0x1a4 $u32 {
    CSR43:32 // at 0: CSR43
  }

//---  Register CSR44: context swap registers
  CSR44 @offset 0x1a8 $u32 {
    CSR44:32 // at 0: CSR44
  }

//---  Register CSR45: context swap registers
  CSR45 @offset 0x1ac $u32 {
    CSR45:32 // at 0: CSR45
  }

//---  Register CSR46: context swap registers
  CSR46 @offset 0x1b0 $u32 {
    CSR46:32 // at 0: CSR46
  }

//---  Register CSR47: context swap registers
  CSR47 @offset 0x1b4 $u32 {
    CSR47:32 // at 0: CSR47
  }

//---  Register CSR48: context swap registers
  CSR48 @offset 0x1b8 $u32 {
    CSR48:32 // at 0: CSR48
  }

//---  Register CSR49: context swap registers
  CSR49 @offset 0x1bc $u32 {
    CSR49:32 // at 0: CSR49
  }

//---  Register CSR50: context swap registers
  CSR50 @offset 0x1c0 $u32 {
    CSR50:32 // at 0: CSR50
  }

//---  Register CSR51: context swap registers
  CSR51 @offset 0x1c4 $u32 {
    CSR51:32 // at 0: CSR51
  }

//---  Register CSR52: context swap registers
  CSR52 @offset 0x1c8 $u32 {
    CSR52:32 // at 0: CSR52
  }

//---  Register CSR53: context swap registers
  CSR53 @offset 0x1cc $u32 {
    CSR53:32 // at 0: CSR53
  }

//---  Register HASH_HR0: HASH digest register
  HASH_HR0 @offset 0x310 @ro $u32 {
    H0:32 // at 0: H0
  }

//---  Register HASH_HR1: read-only
  HASH_HR1 @offset 0x314 @ro $u32 {
    H1:32 // at 0: H1
  }

//---  Register HASH_HR2: read-only
  HASH_HR2 @offset 0x318 @ro $u32 {
    H2:32 // at 0: H2
  }

//---  Register HASH_HR3: read-only
  HASH_HR3 @offset 0x31c @ro $u32 {
    H3:32 // at 0: H3
  }

//---  Register HASH_HR4: read-only
  HASH_HR4 @offset 0x320 @ro $u32 {
    H4:32 // at 0: H4
  }

//---  Register HASH_HR5: read-only
  HASH_HR5 @offset 0x324 @ro $u32 {
    H5:32 // at 0: H5
  }

//---  Register HASH_HR6: read-only
  HASH_HR6 @offset 0x328 @ro $u32 {
    H6:32 // at 0: H6
  }

//---  Register HASH_HR7: read-only
  HASH_HR7 @offset 0x32c @ro $u32 {
    H7:32 // at 0: H7
  }

}

//------------------------------------------------------------------------------
// Peripheral I2C1: Inter-integrated circuit
//------------------------------------------------------------------------------

registers ©I2C1 @at 0x40005400 {
//---  Register CR1: Control register 1
  CR1 @offset 0x0 $u32 {
    8
    PECEN // at 23: PEC enable
    ALERTEN // at 22: SMBUS alert enable
    SMBDEN // at 21: SMBus Device Default address enable
    SMBHEN // at 20: SMBus Host address enable
    GCEN // at 19: General call enable
    WUPEN // at 18: Wakeup from STOP enable
    NOSTRETCH // at 17: Clock stretching disable
    SBC // at 16: Slave byte control
    RXDMAEN // at 15: DMA reception requests enable
    TXDMAEN // at 14: DMA transmission requests enable
    1
    ANFOFF // at 12: Analog noise filter OFF
    DNF:4 // at 8: Digital noise filter
    ERRIE // at 7: Error interrupts enable
    TCIE // at 6: Transfer Complete interrupt enable
    STOPIE // at 5: STOP detection Interrupt enable
    NACKIE // at 4: Not acknowledge received interrupt enable
    ADDRIE // at 3: Address match interrupt enable (slave only)
    RXIE // at 2: RX Interrupt enable
    TXIE // at 1: TX Interrupt enable
    PE // at 0: Peripheral enable
  }

//---  Register CR2: Control register 2
  CR2 @offset 0x4 $u32 {
    5
    PECBYTE // at 26: Packet error checking byte
    AUTOEND // at 25: Automatic end mode (master mode)
    RELOAD // at 24: NBYTES reload mode
    NBYTES:8 // at 16: Number of bytes
    NACK // at 15: NACK generation (slave mode)
    STOP // at 14: Stop generation (master mode)
    START // at 13: Start generation
    HEAD10R // at 12: 10-bit address header only read direction (master receiver mode)
    ADD10 // at 11: 10-bit addressing mode (master mode)
    RD_WRN // at 10: Transfer direction (master mode)
    SADD:10 // at 0: Slave address bit (master mode)
  }

//---  Register OAR1: Own address register 1
  OAR1 @offset 0x8 $u32 {
    16
    OA1EN // at 15: Own Address 1 enable
    4
    OA1MODE // at 10: Own Address 1 10-bit mode
    OA1:10 // at 0: Interface address
  }

//---  Register OAR2: Own address register 2
  OAR2 @offset 0xc $u32 {
    16
    OA2EN // at 15: Own Address 2 enable
    4
    OA2MSK:3 // at 8: Own Address 2 masks
    OA2:7 // at 1: Interface address
    1
  }

//---  Register TIMINGR: Timing register
  TIMINGR @offset 0x10 $u32 {
    PRESC:4 // at 28: Timing prescaler
    4
    SCLDEL:4 // at 20: Data setup time
    SDADEL:4 // at 16: Data hold time
    SCLH:8 // at 8: SCL high period (master mode)
    SCLL:8 // at 0: SCL low period (master mode)
  }

//---  Register TIMEOUTR: Status register 1
  TIMEOUTR @offset 0x14 $u32 {
    TEXTEN // at 31: Extended clock timeout enable
    3
    TIMEOUTB:12 // at 16: Bus timeout B
    TIMOUTEN // at 15: Clock timeout enable
    2
    TIDLE // at 12: Idle clock timeout detection
    TIMEOUTA:12 // at 0: Bus timeout A
  }

//---  Register ISR: Interrupt and Status register
  ISR @offset 0x18 $u32 {
    8
    ADDCODE:7 // at 17: Address match code (Slave mode)
    DIR // at 16: Transfer direction (Slave mode)
    BUSY // at 15: Bus busy
    1
    ALERT // at 13: SMBus alert
    TIMEOUT // at 12: Timeout or t_low detection flag
    PECERR // at 11: PEC Error in reception
    OVR // at 10: Overrun/Underrun (slave mode)
    ARLO // at 9: Arbitration lost
    BERR // at 8: Bus error
    TCR // at 7: Transfer Complete Reload
    TC // at 6: Transfer Complete (master mode)
    STOPF // at 5: Stop detection flag
    NACKF // at 4: Not acknowledge received flag
    ADDR // at 3: Address matched (slave mode)
    RXNE // at 2: Receive data register not empty (receivers)
    TXIS // at 1: Transmit interrupt status (transmitters)
    TXE // at 0: Transmit data register empty (transmitters)
  }

//---  Register ICR: Interrupt clear register
  ICR @offset 0x1c $u32 {
    18
    ALERTCF // at 13: Alert flag clear
    TIMOUTCF // at 12: Timeout detection flag clear
    PECCF // at 11: PEC Error flag clear
    OVRCF // at 10: Overrun/Underrun flag clear
    ARLOCF // at 9: Arbitration lost flag clear
    BERRCF // at 8: Bus error flag clear
    2
    STOPCF // at 5: Stop detection flag clear
    NACKCF // at 4: Not Acknowledge flag clear
    ADDRCF // at 3: Address Matched flag clear
    3
  }

//---  Register PECR: PEC register
  PECR @offset 0x20 @ro $u32 {
    24
    PEC:8 // at 0: Packet error checking register
  }

//---  Register RXDR: Receive data register
  RXDR @offset 0x24 @ro $u32 {
    24
    RXDATA:8 // at 0: 8-bit receive data
  }

//---  Register TXDR: Transmit data register
  TXDR @offset 0x28 $u32 {
    24
    TXDATA:8 // at 0: 8-bit transmit data
  }

}

//------------------------------------------------------------------------------
// Peripheral I2C2
//------------------------------------------------------------------------------

registers ©I2C2 @at 0x40005800 {
//---  Register CR1: Control register 1
  CR1 @offset 0x0 $u32 {
    8
    PECEN // at 23: PEC enable
    ALERTEN // at 22: SMBUS alert enable
    SMBDEN // at 21: SMBus Device Default address enable
    SMBHEN // at 20: SMBus Host address enable
    GCEN // at 19: General call enable
    WUPEN // at 18: Wakeup from STOP enable
    NOSTRETCH // at 17: Clock stretching disable
    SBC // at 16: Slave byte control
    RXDMAEN // at 15: DMA reception requests enable
    TXDMAEN // at 14: DMA transmission requests enable
    1
    ANFOFF // at 12: Analog noise filter OFF
    DNF:4 // at 8: Digital noise filter
    ERRIE // at 7: Error interrupts enable
    TCIE // at 6: Transfer Complete interrupt enable
    STOPIE // at 5: STOP detection Interrupt enable
    NACKIE // at 4: Not acknowledge received interrupt enable
    ADDRIE // at 3: Address match interrupt enable (slave only)
    RXIE // at 2: RX Interrupt enable
    TXIE // at 1: TX Interrupt enable
    PE // at 0: Peripheral enable
  }

//---  Register CR2: Control register 2
  CR2 @offset 0x4 $u32 {
    5
    PECBYTE // at 26: Packet error checking byte
    AUTOEND // at 25: Automatic end mode (master mode)
    RELOAD // at 24: NBYTES reload mode
    NBYTES:8 // at 16: Number of bytes
    NACK // at 15: NACK generation (slave mode)
    STOP // at 14: Stop generation (master mode)
    START // at 13: Start generation
    HEAD10R // at 12: 10-bit address header only read direction (master receiver mode)
    ADD10 // at 11: 10-bit addressing mode (master mode)
    RD_WRN // at 10: Transfer direction (master mode)
    SADD:10 // at 0: Slave address bit (master mode)
  }

//---  Register OAR1: Own address register 1
  OAR1 @offset 0x8 $u32 {
    16
    OA1EN // at 15: Own Address 1 enable
    4
    OA1MODE // at 10: Own Address 1 10-bit mode
    OA1:10 // at 0: Interface address
  }

//---  Register OAR2: Own address register 2
  OAR2 @offset 0xc $u32 {
    16
    OA2EN // at 15: Own Address 2 enable
    4
    OA2MSK:3 // at 8: Own Address 2 masks
    OA2:7 // at 1: Interface address
    1
  }

//---  Register TIMINGR: Timing register
  TIMINGR @offset 0x10 $u32 {
    PRESC:4 // at 28: Timing prescaler
    4
    SCLDEL:4 // at 20: Data setup time
    SDADEL:4 // at 16: Data hold time
    SCLH:8 // at 8: SCL high period (master mode)
    SCLL:8 // at 0: SCL low period (master mode)
  }

//---  Register TIMEOUTR: Status register 1
  TIMEOUTR @offset 0x14 $u32 {
    TEXTEN // at 31: Extended clock timeout enable
    3
    TIMEOUTB:12 // at 16: Bus timeout B
    TIMOUTEN // at 15: Clock timeout enable
    2
    TIDLE // at 12: Idle clock timeout detection
    TIMEOUTA:12 // at 0: Bus timeout A
  }

//---  Register ISR: Interrupt and Status register
  ISR @offset 0x18 $u32 {
    8
    ADDCODE:7 // at 17: Address match code (Slave mode)
    DIR // at 16: Transfer direction (Slave mode)
    BUSY // at 15: Bus busy
    1
    ALERT // at 13: SMBus alert
    TIMEOUT // at 12: Timeout or t_low detection flag
    PECERR // at 11: PEC Error in reception
    OVR // at 10: Overrun/Underrun (slave mode)
    ARLO // at 9: Arbitration lost
    BERR // at 8: Bus error
    TCR // at 7: Transfer Complete Reload
    TC // at 6: Transfer Complete (master mode)
    STOPF // at 5: Stop detection flag
    NACKF // at 4: Not acknowledge received flag
    ADDR // at 3: Address matched (slave mode)
    RXNE // at 2: Receive data register not empty (receivers)
    TXIS // at 1: Transmit interrupt status (transmitters)
    TXE // at 0: Transmit data register empty (transmitters)
  }

//---  Register ICR: Interrupt clear register
  ICR @offset 0x1c $u32 {
    18
    ALERTCF // at 13: Alert flag clear
    TIMOUTCF // at 12: Timeout detection flag clear
    PECCF // at 11: PEC Error flag clear
    OVRCF // at 10: Overrun/Underrun flag clear
    ARLOCF // at 9: Arbitration lost flag clear
    BERRCF // at 8: Bus error flag clear
    2
    STOPCF // at 5: Stop detection flag clear
    NACKCF // at 4: Not Acknowledge flag clear
    ADDRCF // at 3: Address Matched flag clear
    3
  }

//---  Register PECR: PEC register
  PECR @offset 0x20 @ro $u32 {
    24
    PEC:8 // at 0: Packet error checking register
  }

//---  Register RXDR: Receive data register
  RXDR @offset 0x24 @ro $u32 {
    24
    RXDATA:8 // at 0: 8-bit receive data
  }

//---  Register TXDR: Transmit data register
  TXDR @offset 0x28 $u32 {
    24
    TXDATA:8 // at 0: 8-bit transmit data
  }

}

//------------------------------------------------------------------------------
// Peripheral I2C3
//------------------------------------------------------------------------------

registers ©I2C3 @at 0x40005c00 {
//---  Register CR1: Control register 1
  CR1 @offset 0x0 $u32 {
    8
    PECEN // at 23: PEC enable
    ALERTEN // at 22: SMBUS alert enable
    SMBDEN // at 21: SMBus Device Default address enable
    SMBHEN // at 20: SMBus Host address enable
    GCEN // at 19: General call enable
    WUPEN // at 18: Wakeup from STOP enable
    NOSTRETCH // at 17: Clock stretching disable
    SBC // at 16: Slave byte control
    RXDMAEN // at 15: DMA reception requests enable
    TXDMAEN // at 14: DMA transmission requests enable
    1
    ANFOFF // at 12: Analog noise filter OFF
    DNF:4 // at 8: Digital noise filter
    ERRIE // at 7: Error interrupts enable
    TCIE // at 6: Transfer Complete interrupt enable
    STOPIE // at 5: STOP detection Interrupt enable
    NACKIE // at 4: Not acknowledge received interrupt enable
    ADDRIE // at 3: Address match interrupt enable (slave only)
    RXIE // at 2: RX Interrupt enable
    TXIE // at 1: TX Interrupt enable
    PE // at 0: Peripheral enable
  }

//---  Register CR2: Control register 2
  CR2 @offset 0x4 $u32 {
    5
    PECBYTE // at 26: Packet error checking byte
    AUTOEND // at 25: Automatic end mode (master mode)
    RELOAD // at 24: NBYTES reload mode
    NBYTES:8 // at 16: Number of bytes
    NACK // at 15: NACK generation (slave mode)
    STOP // at 14: Stop generation (master mode)
    START // at 13: Start generation
    HEAD10R // at 12: 10-bit address header only read direction (master receiver mode)
    ADD10 // at 11: 10-bit addressing mode (master mode)
    RD_WRN // at 10: Transfer direction (master mode)
    SADD:10 // at 0: Slave address bit (master mode)
  }

//---  Register OAR1: Own address register 1
  OAR1 @offset 0x8 $u32 {
    16
    OA1EN // at 15: Own Address 1 enable
    4
    OA1MODE // at 10: Own Address 1 10-bit mode
    OA1:10 // at 0: Interface address
  }

//---  Register OAR2: Own address register 2
  OAR2 @offset 0xc $u32 {
    16
    OA2EN // at 15: Own Address 2 enable
    4
    OA2MSK:3 // at 8: Own Address 2 masks
    OA2:7 // at 1: Interface address
    1
  }

//---  Register TIMINGR: Timing register
  TIMINGR @offset 0x10 $u32 {
    PRESC:4 // at 28: Timing prescaler
    4
    SCLDEL:4 // at 20: Data setup time
    SDADEL:4 // at 16: Data hold time
    SCLH:8 // at 8: SCL high period (master mode)
    SCLL:8 // at 0: SCL low period (master mode)
  }

//---  Register TIMEOUTR: Status register 1
  TIMEOUTR @offset 0x14 $u32 {
    TEXTEN // at 31: Extended clock timeout enable
    3
    TIMEOUTB:12 // at 16: Bus timeout B
    TIMOUTEN // at 15: Clock timeout enable
    2
    TIDLE // at 12: Idle clock timeout detection
    TIMEOUTA:12 // at 0: Bus timeout A
  }

//---  Register ISR: Interrupt and Status register
  ISR @offset 0x18 $u32 {
    8
    ADDCODE:7 // at 17: Address match code (Slave mode)
    DIR // at 16: Transfer direction (Slave mode)
    BUSY // at 15: Bus busy
    1
    ALERT // at 13: SMBus alert
    TIMEOUT // at 12: Timeout or t_low detection flag
    PECERR // at 11: PEC Error in reception
    OVR // at 10: Overrun/Underrun (slave mode)
    ARLO // at 9: Arbitration lost
    BERR // at 8: Bus error
    TCR // at 7: Transfer Complete Reload
    TC // at 6: Transfer Complete (master mode)
    STOPF // at 5: Stop detection flag
    NACKF // at 4: Not acknowledge received flag
    ADDR // at 3: Address matched (slave mode)
    RXNE // at 2: Receive data register not empty (receivers)
    TXIS // at 1: Transmit interrupt status (transmitters)
    TXE // at 0: Transmit data register empty (transmitters)
  }

//---  Register ICR: Interrupt clear register
  ICR @offset 0x1c $u32 {
    18
    ALERTCF // at 13: Alert flag clear
    TIMOUTCF // at 12: Timeout detection flag clear
    PECCF // at 11: PEC Error flag clear
    OVRCF // at 10: Overrun/Underrun flag clear
    ARLOCF // at 9: Arbitration lost flag clear
    BERRCF // at 8: Bus error flag clear
    2
    STOPCF // at 5: Stop detection flag clear
    NACKCF // at 4: Not Acknowledge flag clear
    ADDRCF // at 3: Address Matched flag clear
    3
  }

//---  Register PECR: PEC register
  PECR @offset 0x20 @ro $u32 {
    24
    PEC:8 // at 0: Packet error checking register
  }

//---  Register RXDR: Receive data register
  RXDR @offset 0x24 @ro $u32 {
    24
    RXDATA:8 // at 0: 8-bit receive data
  }

//---  Register TXDR: Transmit data register
  TXDR @offset 0x28 $u32 {
    24
    TXDATA:8 // at 0: 8-bit transmit data
  }

}

//------------------------------------------------------------------------------
// Peripheral I2C4
//------------------------------------------------------------------------------

registers ©I2C4 @at 0x40006000 {
//---  Register CR1: Control register 1
  CR1 @offset 0x0 $u32 {
    8
    PECEN // at 23: PEC enable
    ALERTEN // at 22: SMBUS alert enable
    SMBDEN // at 21: SMBus Device Default address enable
    SMBHEN // at 20: SMBus Host address enable
    GCEN // at 19: General call enable
    WUPEN // at 18: Wakeup from STOP enable
    NOSTRETCH // at 17: Clock stretching disable
    SBC // at 16: Slave byte control
    RXDMAEN // at 15: DMA reception requests enable
    TXDMAEN // at 14: DMA transmission requests enable
    1
    ANFOFF // at 12: Analog noise filter OFF
    DNF:4 // at 8: Digital noise filter
    ERRIE // at 7: Error interrupts enable
    TCIE // at 6: Transfer Complete interrupt enable
    STOPIE // at 5: STOP detection Interrupt enable
    NACKIE // at 4: Not acknowledge received interrupt enable
    ADDRIE // at 3: Address match interrupt enable (slave only)
    RXIE // at 2: RX Interrupt enable
    TXIE // at 1: TX Interrupt enable
    PE // at 0: Peripheral enable
  }

//---  Register CR2: Control register 2
  CR2 @offset 0x4 $u32 {
    5
    PECBYTE // at 26: Packet error checking byte
    AUTOEND // at 25: Automatic end mode (master mode)
    RELOAD // at 24: NBYTES reload mode
    NBYTES:8 // at 16: Number of bytes
    NACK // at 15: NACK generation (slave mode)
    STOP // at 14: Stop generation (master mode)
    START // at 13: Start generation
    HEAD10R // at 12: 10-bit address header only read direction (master receiver mode)
    ADD10 // at 11: 10-bit addressing mode (master mode)
    RD_WRN // at 10: Transfer direction (master mode)
    SADD:10 // at 0: Slave address bit (master mode)
  }

//---  Register OAR1: Own address register 1
  OAR1 @offset 0x8 $u32 {
    16
    OA1EN // at 15: Own Address 1 enable
    4
    OA1MODE // at 10: Own Address 1 10-bit mode
    OA1:10 // at 0: Interface address
  }

//---  Register OAR2: Own address register 2
  OAR2 @offset 0xc $u32 {
    16
    OA2EN // at 15: Own Address 2 enable
    4
    OA2MSK:3 // at 8: Own Address 2 masks
    OA2:7 // at 1: Interface address
    1
  }

//---  Register TIMINGR: Timing register
  TIMINGR @offset 0x10 $u32 {
    PRESC:4 // at 28: Timing prescaler
    4
    SCLDEL:4 // at 20: Data setup time
    SDADEL:4 // at 16: Data hold time
    SCLH:8 // at 8: SCL high period (master mode)
    SCLL:8 // at 0: SCL low period (master mode)
  }

//---  Register TIMEOUTR: Status register 1
  TIMEOUTR @offset 0x14 $u32 {
    TEXTEN // at 31: Extended clock timeout enable
    3
    TIMEOUTB:12 // at 16: Bus timeout B
    TIMOUTEN // at 15: Clock timeout enable
    2
    TIDLE // at 12: Idle clock timeout detection
    TIMEOUTA:12 // at 0: Bus timeout A
  }

//---  Register ISR: Interrupt and Status register
  ISR @offset 0x18 $u32 {
    8
    ADDCODE:7 // at 17: Address match code (Slave mode)
    DIR // at 16: Transfer direction (Slave mode)
    BUSY // at 15: Bus busy
    1
    ALERT // at 13: SMBus alert
    TIMEOUT // at 12: Timeout or t_low detection flag
    PECERR // at 11: PEC Error in reception
    OVR // at 10: Overrun/Underrun (slave mode)
    ARLO // at 9: Arbitration lost
    BERR // at 8: Bus error
    TCR // at 7: Transfer Complete Reload
    TC // at 6: Transfer Complete (master mode)
    STOPF // at 5: Stop detection flag
    NACKF // at 4: Not acknowledge received flag
    ADDR // at 3: Address matched (slave mode)
    RXNE // at 2: Receive data register not empty (receivers)
    TXIS // at 1: Transmit interrupt status (transmitters)
    TXE // at 0: Transmit data register empty (transmitters)
  }

//---  Register ICR: Interrupt clear register
  ICR @offset 0x1c $u32 {
    18
    ALERTCF // at 13: Alert flag clear
    TIMOUTCF // at 12: Timeout detection flag clear
    PECCF // at 11: PEC Error flag clear
    OVRCF // at 10: Overrun/Underrun flag clear
    ARLOCF // at 9: Arbitration lost flag clear
    BERRCF // at 8: Bus error flag clear
    2
    STOPCF // at 5: Stop detection flag clear
    NACKCF // at 4: Not Acknowledge flag clear
    ADDRCF // at 3: Address Matched flag clear
    3
  }

//---  Register PECR: PEC register
  PECR @offset 0x20 @ro $u32 {
    24
    PEC:8 // at 0: Packet error checking register
  }

//---  Register RXDR: Receive data register
  RXDR @offset 0x24 @ro $u32 {
    24
    RXDATA:8 // at 0: 8-bit receive data
  }

//---  Register TXDR: Transmit data register
  TXDR @offset 0x28 $u32 {
    24
    TXDATA:8 // at 0: 8-bit transmit data
  }

}

//------------------------------------------------------------------------------
// Peripheral IWDG: Independent watchdog
//------------------------------------------------------------------------------

registers ©IWDG @at 0x40003000 {
//---  Register KR: Key register
  KR @offset 0x0 $u32 {
    16
    KEY:16 // at 0: Key value (write only, read 0000h)
  }

//---  Register PR: Prescaler register
  PR @offset 0x4 $u32 {
    29
    PR:3 // at 0: Prescaler divider
  }

//---  Register RLR: Reload register
  RLR @offset 0x8 $u32 {
    20
    RL:12 // at 0: Watchdog counter reload value
  }

//---  Register SR: Status register
  SR @offset 0xc @ro $u32 {
    30
    RVU // at 1: Watchdog counter reload value update
    PVU // at 0: Watchdog prescaler value update
  }

//---  Register WINR: Window register
  WINR @offset 0x10 $u32 {
    20
    WIN:12 // at 0: Watchdog counter window value
  }

}

//------------------------------------------------------------------------------
// Peripheral JPEG: JPEG codec
//------------------------------------------------------------------------------

registers ©JPEG @at 0x50051000 {
//---  Register JPEG_CONFR0: JPEG codec configuration register 0
  JPEG_CONFR0 @offset 0x0 $u32 {
    31
    START // at 0: Start
  }

//---  Register JPEG_CONFR1: JPEG codec configuration register 1
  JPEG_CONFR1 @offset 0x4 $u32 {
    YSIZE:16 // at 16: Y Size
    7
    HDR // at 8: Header Processing
    NS:2 // at 6: Number of components for Scan
    COLORSPACE:2 // at 4: Color Space
    DE // at 3: Decoding Enable
    1
    NF:2 // at 0: Number of color components
  }

//---  Register JPEG_CONFR2: JPEG codec configuration register 2
  JPEG_CONFR2 @offset 0x8 $u32 {
    6
    NMCU:26 // at 0: Number of MCU
  }

//---  Register JPEG_CONFR3: JPEG codec configuration register 3
  JPEG_CONFR3 @offset 0xc $u32 {
    XSIZE:16 // at 16: X size
    16
  }

//---  Register JPEG_CONFR4: JPEG codec configuration register 4
  JPEG_CONFR4 @offset 0x10 $u32 {
    16
    HSF:4 // at 12: Horizontal Sampling Factor
    VSF:4 // at 8: Vertical Sampling Factor
    NB:4 // at 4: Number of Block
    QT:2 // at 2: Quantization Table
    HA // at 1: Huffman AC
    HD // at 0: Huffman DC
  }

//---  Register JPEG_CONFR5: JPEG codec configuration register 5
  JPEG_CONFR5 @offset 0x14 $u32 {
    16
    HSF:4 // at 12: Horizontal Sampling Factor
    VSF:4 // at 8: Vertical Sampling Factor
    NB:4 // at 4: Number of Block
    QT:2 // at 2: Quantization Table
    HA // at 1: Huffman AC
    HD // at 0: Huffman DC
  }

//---  Register JPEG_CONFR6: JPEG codec configuration register 6
  JPEG_CONFR6 @offset 0x18 $u32 {
    16
    HSF:4 // at 12: Horizontal Sampling Factor
    VSF:4 // at 8: Vertical Sampling Factor
    NB:4 // at 4: Number of Block
    QT:2 // at 2: Quantization Table
    HA // at 1: Huffman AC
    HD // at 0: Huffman DC
  }

//---  Register JPEG_CONFR7: JPEG codec configuration register 7
  JPEG_CONFR7 @offset 0x1c $u32 {
    16
    HSF:4 // at 12: Horizontal Sampling Factor
    VSF:4 // at 8: Vertical Sampling Factor
    NB:4 // at 4: Number of Block
    QT:2 // at 2: Quantization Table
    HA // at 1: Huffman AC
    HD // at 0: Huffman DC
  }

//---  Register JPEG_CR: JPEG control register
  JPEG_CR @offset 0x30 $u32 {
    17
    OFF // at 14: Output FIFO Flush
    IFF // at 13: Input FIFO Flush
    ODMAEN // at 12: Output DMA Enable
    IDMAEN // at 11: Input DMA Enable
    4
    HPDIE // at 6: Header Parsing Done Interrupt Enable
    EOCIE // at 5: End of Conversion Interrupt Enable
    OFNEIE // at 4: Output FIFO Not Empty Interrupt Enable
    OFTIE // at 3: Output FIFO Threshold Interrupt Enable
    IFNFIE // at 2: Input FIFO Not Full Interrupt Enable
    IFTIE // at 1: Input FIFO Threshold Interrupt Enable
    JCEN // at 0: JPEG Core Enable
  }

//---  Register JPEG_SR: JPEG status register
  JPEG_SR @offset 0x34 @ro $u32 {
    24
    COF // at 7: Codec Operation Flag
    HPDF // at 6: Header Parsing Done Flag
    EOCF // at 5: End of Conversion Flag
    OFNEF // at 4: Output FIFO Not Empty Flag
    OFTF // at 3: Output FIFO Threshold Flag
    IFNFF // at 2: Input FIFO Not Full Flag
    IFTF // at 1: Input FIFO Threshold Flag
    1
  }

//---  Register JPEG_CFR: JPEG clear flag register
  JPEG_CFR @offset 0x38 $u32 {
    25
    CHPDF // at 6: Clear Header Parsing Done Flag
    CEOCF // at 5: Clear End of Conversion Flag
    5
  }

//---  Register JPEG_DIR: JPEG data input register
  JPEG_DIR @offset 0x40 $u32 {
    DATAIN:32 // at 0: Data Input FIFO
  }

//---  Register JPEG_DOR: JPEG data output register
  JPEG_DOR @offset 0x44 @ro $u32 {
    DATAOUT:32 // at 0: Data Output FIFO
  }

//---  Register QMEM0_0: JPEG quantization tables
  QMEM0_0 @offset 0x50 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_1: JPEG quantization tables
  QMEM0_1 @offset 0x54 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_2: JPEG quantization tables
  QMEM0_2 @offset 0x58 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_3: JPEG quantization tables
  QMEM0_3 @offset 0x5c $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_4: JPEG quantization tables
  QMEM0_4 @offset 0x60 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_5: JPEG quantization tables
  QMEM0_5 @offset 0x64 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_6: JPEG quantization tables
  QMEM0_6 @offset 0x68 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_7: JPEG quantization tables
  QMEM0_7 @offset 0x6c $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_8: JPEG quantization tables
  QMEM0_8 @offset 0x70 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_9: JPEG quantization tables
  QMEM0_9 @offset 0x74 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_10: JPEG quantization tables
  QMEM0_10 @offset 0x78 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_11: JPEG quantization tables
  QMEM0_11 @offset 0x7c $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_12: JPEG quantization tables
  QMEM0_12 @offset 0x80 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_13: JPEG quantization tables
  QMEM0_13 @offset 0x84 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_14: JPEG quantization tables
  QMEM0_14 @offset 0x88 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM0_15: JPEG quantization tables
  QMEM0_15 @offset 0x8c $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_0: JPEG quantization tables
  QMEM1_0 @offset 0x90 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_1: JPEG quantization tables
  QMEM1_1 @offset 0x94 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_2: JPEG quantization tables
  QMEM1_2 @offset 0x98 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_3: JPEG quantization tables
  QMEM1_3 @offset 0x9c $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_4: JPEG quantization tables
  QMEM1_4 @offset 0xa0 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_5: JPEG quantization tables
  QMEM1_5 @offset 0xa4 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_6: JPEG quantization tables
  QMEM1_6 @offset 0xa8 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_7: JPEG quantization tables
  QMEM1_7 @offset 0xac $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_8: JPEG quantization tables
  QMEM1_8 @offset 0xb0 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_9: JPEG quantization tables
  QMEM1_9 @offset 0xb4 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_10: JPEG quantization tables
  QMEM1_10 @offset 0xb8 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_11: JPEG quantization tables
  QMEM1_11 @offset 0xbc $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_12: JPEG quantization tables
  QMEM1_12 @offset 0xc0 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_13: JPEG quantization tables
  QMEM1_13 @offset 0xc4 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_14: JPEG quantization tables
  QMEM1_14 @offset 0xc8 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM1_15: JPEG quantization tables
  QMEM1_15 @offset 0xcc $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_0: JPEG quantization tables
  QMEM2_0 @offset 0xd0 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_1: JPEG quantization tables
  QMEM2_1 @offset 0xd4 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_2: JPEG quantization tables
  QMEM2_2 @offset 0xd8 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_3: JPEG quantization tables
  QMEM2_3 @offset 0xdc $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_4: JPEG quantization tables
  QMEM2_4 @offset 0xe0 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_5: JPEG quantization tables
  QMEM2_5 @offset 0xe4 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_6: JPEG quantization tables
  QMEM2_6 @offset 0xe8 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_7: JPEG quantization tables
  QMEM2_7 @offset 0xec $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_8: JPEG quantization tables
  QMEM2_8 @offset 0xf0 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_9: JPEG quantization tables
  QMEM2_9 @offset 0xf4 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_10: JPEG quantization tables
  QMEM2_10 @offset 0xf8 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_11: JPEG quantization tables
  QMEM2_11 @offset 0xfc $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_12: JPEG quantization tables
  QMEM2_12 @offset 0x100 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_13: JPEG quantization tables
  QMEM2_13 @offset 0x104 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_14: JPEG quantization tables
  QMEM2_14 @offset 0x108 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM2_15: JPEG quantization tables
  QMEM2_15 @offset 0x10c $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_0: JPEG quantization tables
  QMEM3_0 @offset 0x110 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_1: JPEG quantization tables
  QMEM3_1 @offset 0x114 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_2: JPEG quantization tables
  QMEM3_2 @offset 0x118 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_3: JPEG quantization tables
  QMEM3_3 @offset 0x11c $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_4: JPEG quantization tables
  QMEM3_4 @offset 0x120 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_5: JPEG quantization tables
  QMEM3_5 @offset 0x124 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_6: JPEG quantization tables
  QMEM3_6 @offset 0x128 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_7: JPEG quantization tables
  QMEM3_7 @offset 0x12c $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_8: JPEG quantization tables
  QMEM3_8 @offset 0x130 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_9: JPEG quantization tables
  QMEM3_9 @offset 0x134 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_10: JPEG quantization tables
  QMEM3_10 @offset 0x138 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_11: JPEG quantization tables
  QMEM3_11 @offset 0x13c $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_12: JPEG quantization tables
  QMEM3_12 @offset 0x140 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_13: JPEG quantization tables
  QMEM3_13 @offset 0x144 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_14: JPEG quantization tables
  QMEM3_14 @offset 0x148 $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register QMEM3_15: JPEG quantization tables
  QMEM3_15 @offset 0x14c $u32 {
    QMem_RAM:32 // at 0: QMem RAM
  }

//---  Register HUFFMIN_0: JPEG HuffMin tables
  HUFFMIN_0 @offset 0x150 $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_1: JPEG HuffMin tables
  HUFFMIN_1 @offset 0x154 $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_2: JPEG HuffMin tables
  HUFFMIN_2 @offset 0x158 $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_3: JPEG HuffMin tables
  HUFFMIN_3 @offset 0x15c $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_4: JPEG HuffMin tables
  HUFFMIN_4 @offset 0x160 $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_5: JPEG HuffMin tables
  HUFFMIN_5 @offset 0x164 $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_6: JPEG HuffMin tables
  HUFFMIN_6 @offset 0x168 $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_7: JPEG HuffMin tables
  HUFFMIN_7 @offset 0x16c $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_8: JPEG HuffMin tables
  HUFFMIN_8 @offset 0x170 $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_9: JPEG HuffMin tables
  HUFFMIN_9 @offset 0x174 $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_10: JPEG HuffMin tables
  HUFFMIN_10 @offset 0x178 $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_11: JPEG HuffMin tables
  HUFFMIN_11 @offset 0x17c $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_12: JPEG HuffMin tables
  HUFFMIN_12 @offset 0x180 $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_13: JPEG HuffMin tables
  HUFFMIN_13 @offset 0x184 $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_14: JPEG HuffMin tables
  HUFFMIN_14 @offset 0x188 $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFMIN_15: JPEG HuffMin tables
  HUFFMIN_15 @offset 0x18c $u32 {
    HuffMin_RAM:32 // at 0: HuffMin RAM
  }

//---  Register HUFFBASE0: JPEG HuffSymb tables
  HUFFBASE0 @offset 0x190 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE1: JPEG HuffSymb tables
  HUFFBASE1 @offset 0x194 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE2: JPEG HuffSymb tables
  HUFFBASE2 @offset 0x198 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE3: JPEG HuffSymb tables
  HUFFBASE3 @offset 0x19c $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE4: JPEG HuffSymb tables
  HUFFBASE4 @offset 0x1a0 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE5: JPEG HuffSymb tables
  HUFFBASE5 @offset 0x1a4 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE6: JPEG HuffSymb tables
  HUFFBASE6 @offset 0x1a8 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE7: JPEG HuffSymb tables
  HUFFBASE7 @offset 0x1ac $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE8: JPEG HuffSymb tables
  HUFFBASE8 @offset 0x1b0 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE9: JPEG HuffSymb tables
  HUFFBASE9 @offset 0x1b4 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE10: JPEG HuffSymb tables
  HUFFBASE10 @offset 0x1b8 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE11: JPEG HuffSymb tables
  HUFFBASE11 @offset 0x1bc $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE12: JPEG HuffSymb tables
  HUFFBASE12 @offset 0x1c0 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE13: JPEG HuffSymb tables
  HUFFBASE13 @offset 0x1c4 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE14: JPEG HuffSymb tables
  HUFFBASE14 @offset 0x1c8 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE15: JPEG HuffSymb tables
  HUFFBASE15 @offset 0x1cc $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE16: JPEG HuffSymb tables
  HUFFBASE16 @offset 0x1d0 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE17: JPEG HuffSymb tables
  HUFFBASE17 @offset 0x1d4 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE18: JPEG HuffSymb tables
  HUFFBASE18 @offset 0x1d8 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE19: JPEG HuffSymb tables
  HUFFBASE19 @offset 0x1dc $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE20: JPEG HuffSymb tables
  HUFFBASE20 @offset 0x1e0 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE21: JPEG HuffSymb tables
  HUFFBASE21 @offset 0x1e4 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE22: JPEG HuffSymb tables
  HUFFBASE22 @offset 0x1e8 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE23: JPEG HuffSymb tables
  HUFFBASE23 @offset 0x1ec $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE24: JPEG HuffSymb tables
  HUFFBASE24 @offset 0x1f0 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE25: JPEG HuffSymb tables
  HUFFBASE25 @offset 0x1f4 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE26: JPEG HuffSymb tables
  HUFFBASE26 @offset 0x1f8 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE27: JPEG HuffSymb tables
  HUFFBASE27 @offset 0x1fc $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE28: JPEG HuffSymb tables
  HUFFBASE28 @offset 0x200 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE29: JPEG HuffSymb tables
  HUFFBASE29 @offset 0x204 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE30: JPEG HuffSymb tables
  HUFFBASE30 @offset 0x208 $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFBASE31: JPEG HuffSymb tables
  HUFFBASE31 @offset 0x20c $u32 {
    7
    HuffBase_RAM_1:9 // at 16: HuffBase RAM
    7
    HuffBase_RAM_0:9 // at 0: HuffBase RAM
  }

//---  Register HUFFSYMB0: JPEG HUFFSYMB tables
  HUFFSYMB0 @offset 0x210 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB1: JPEG HUFFSYMB tables
  HUFFSYMB1 @offset 0x214 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB2: JPEG HUFFSYMB tables
  HUFFSYMB2 @offset 0x218 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB3: JPEG HUFFSYMB tables
  HUFFSYMB3 @offset 0x21c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB4: JPEG HUFFSYMB tables
  HUFFSYMB4 @offset 0x220 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB5: JPEG HUFFSYMB tables
  HUFFSYMB5 @offset 0x224 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB6: JPEG HUFFSYMB tables
  HUFFSYMB6 @offset 0x228 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB7: JPEG HUFFSYMB tables
  HUFFSYMB7 @offset 0x22c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB8: JPEG HUFFSYMB tables
  HUFFSYMB8 @offset 0x230 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB9: JPEG HUFFSYMB tables
  HUFFSYMB9 @offset 0x234 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB10: JPEG HUFFSYMB tables
  HUFFSYMB10 @offset 0x238 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB11: JPEG HUFFSYMB tables
  HUFFSYMB11 @offset 0x23c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB12: JPEG HUFFSYMB tables
  HUFFSYMB12 @offset 0x240 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB13: JPEG HUFFSYMB tables
  HUFFSYMB13 @offset 0x244 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB14: JPEG HUFFSYMB tables
  HUFFSYMB14 @offset 0x248 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB15: JPEG HUFFSYMB tables
  HUFFSYMB15 @offset 0x24c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB16: JPEG HUFFSYMB tables
  HUFFSYMB16 @offset 0x250 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB17: JPEG HUFFSYMB tables
  HUFFSYMB17 @offset 0x254 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB18: JPEG HUFFSYMB tables
  HUFFSYMB18 @offset 0x258 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB19: JPEG HUFFSYMB tables
  HUFFSYMB19 @offset 0x25c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB20: JPEG HUFFSYMB tables
  HUFFSYMB20 @offset 0x260 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB21: JPEG HUFFSYMB tables
  HUFFSYMB21 @offset 0x264 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB22: JPEG HUFFSYMB tables
  HUFFSYMB22 @offset 0x268 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB23: JPEG HUFFSYMB tables
  HUFFSYMB23 @offset 0x26c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB24: JPEG HUFFSYMB tables
  HUFFSYMB24 @offset 0x270 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB25: JPEG HUFFSYMB tables
  HUFFSYMB25 @offset 0x274 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB26: JPEG HUFFSYMB tables
  HUFFSYMB26 @offset 0x278 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB27: JPEG HUFFSYMB tables
  HUFFSYMB27 @offset 0x27c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB28: JPEG HUFFSYMB tables
  HUFFSYMB28 @offset 0x280 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB29: JPEG HUFFSYMB tables
  HUFFSYMB29 @offset 0x284 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB30: JPEG HUFFSYMB tables
  HUFFSYMB30 @offset 0x288 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB31: JPEG HUFFSYMB tables
  HUFFSYMB31 @offset 0x28c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB32: JPEG HUFFSYMB tables
  HUFFSYMB32 @offset 0x290 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB33: JPEG HUFFSYMB tables
  HUFFSYMB33 @offset 0x294 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB34: JPEG HUFFSYMB tables
  HUFFSYMB34 @offset 0x298 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB35: JPEG HUFFSYMB tables
  HUFFSYMB35 @offset 0x29c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB36: JPEG HUFFSYMB tables
  HUFFSYMB36 @offset 0x2a0 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB37: JPEG HUFFSYMB tables
  HUFFSYMB37 @offset 0x2a4 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB38: JPEG HUFFSYMB tables
  HUFFSYMB38 @offset 0x2a8 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB39: JPEG HUFFSYMB tables
  HUFFSYMB39 @offset 0x2ac $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB40: JPEG HUFFSYMB tables
  HUFFSYMB40 @offset 0x2b0 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB41: JPEG HUFFSYMB tables
  HUFFSYMB41 @offset 0x2b4 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB42: JPEG HUFFSYMB tables
  HUFFSYMB42 @offset 0x2b8 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB43: JPEG HUFFSYMB tables
  HUFFSYMB43 @offset 0x2bc $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB44: JPEG HUFFSYMB tables
  HUFFSYMB44 @offset 0x2c0 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB45: JPEG HUFFSYMB tables
  HUFFSYMB45 @offset 0x2c4 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB46: JPEG HUFFSYMB tables
  HUFFSYMB46 @offset 0x2c8 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB47: JPEG HUFFSYMB tables
  HUFFSYMB47 @offset 0x2cc $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB48: JPEG HUFFSYMB tables
  HUFFSYMB48 @offset 0x2d0 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB49: JPEG HUFFSYMB tables
  HUFFSYMB49 @offset 0x2d4 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB50: JPEG HUFFSYMB tables
  HUFFSYMB50 @offset 0x2d8 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB51: JPEG HUFFSYMB tables
  HUFFSYMB51 @offset 0x2dc $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB52: JPEG HUFFSYMB tables
  HUFFSYMB52 @offset 0x2e0 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB53: JPEG HUFFSYMB tables
  HUFFSYMB53 @offset 0x2e4 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB54: JPEG HUFFSYMB tables
  HUFFSYMB54 @offset 0x2e8 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB55: JPEG HUFFSYMB tables
  HUFFSYMB55 @offset 0x2ec $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB56: JPEG HUFFSYMB tables
  HUFFSYMB56 @offset 0x2f0 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB57: JPEG HUFFSYMB tables
  HUFFSYMB57 @offset 0x2f4 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB58: JPEG HUFFSYMB tables
  HUFFSYMB58 @offset 0x2f8 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB59: JPEG HUFFSYMB tables
  HUFFSYMB59 @offset 0x2fc $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB60: JPEG HUFFSYMB tables
  HUFFSYMB60 @offset 0x300 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB61: JPEG HUFFSYMB tables
  HUFFSYMB61 @offset 0x304 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB62: JPEG HUFFSYMB tables
  HUFFSYMB62 @offset 0x308 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB63: JPEG HUFFSYMB tables
  HUFFSYMB63 @offset 0x30c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB64: JPEG HUFFSYMB tables
  HUFFSYMB64 @offset 0x310 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB65: JPEG HUFFSYMB tables
  HUFFSYMB65 @offset 0x314 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB66: JPEG HUFFSYMB tables
  HUFFSYMB66 @offset 0x318 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB67: JPEG HUFFSYMB tables
  HUFFSYMB67 @offset 0x31c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB68: JPEG HUFFSYMB tables
  HUFFSYMB68 @offset 0x320 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB69: JPEG HUFFSYMB tables
  HUFFSYMB69 @offset 0x324 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB70: JPEG HUFFSYMB tables
  HUFFSYMB70 @offset 0x328 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB71: JPEG HUFFSYMB tables
  HUFFSYMB71 @offset 0x32c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB72: JPEG HUFFSYMB tables
  HUFFSYMB72 @offset 0x330 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB73: JPEG HUFFSYMB tables
  HUFFSYMB73 @offset 0x334 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB74: JPEG HUFFSYMB tables
  HUFFSYMB74 @offset 0x338 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB75: JPEG HUFFSYMB tables
  HUFFSYMB75 @offset 0x33c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB76: JPEG HUFFSYMB tables
  HUFFSYMB76 @offset 0x340 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB77: JPEG HUFFSYMB tables
  HUFFSYMB77 @offset 0x344 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB78: JPEG HUFFSYMB tables
  HUFFSYMB78 @offset 0x348 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB79: JPEG HUFFSYMB tables
  HUFFSYMB79 @offset 0x34c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB80: JPEG HUFFSYMB tables
  HUFFSYMB80 @offset 0x350 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB81: JPEG HUFFSYMB tables
  HUFFSYMB81 @offset 0x354 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB82: JPEG HUFFSYMB tables
  HUFFSYMB82 @offset 0x358 $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register HUFFSYMB83: JPEG HUFFSYMB tables
  HUFFSYMB83 @offset 0x35c $u32 {
    HuffSymb_RAM:32 // at 0: DHTSymb RAM
  }

//---  Register DHTMEM0: JPEG DHTMem tables
  DHTMEM0 @offset 0x360 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM2: JPEG DHTMem tables
  DHTMEM2 @offset 0x364 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM3: JPEG DHTMem tables
  DHTMEM3 @offset 0x368 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM4: JPEG DHTMem tables
  DHTMEM4 @offset 0x36c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM5: JPEG DHTMem tables
  DHTMEM5 @offset 0x370 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM6: JPEG DHTMem tables
  DHTMEM6 @offset 0x374 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM7: JPEG DHTMem tables
  DHTMEM7 @offset 0x378 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM8: JPEG DHTMem tables
  DHTMEM8 @offset 0x37c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM9: JPEG DHTMem tables
  DHTMEM9 @offset 0x380 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM10: JPEG DHTMem tables
  DHTMEM10 @offset 0x384 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM11: JPEG DHTMem tables
  DHTMEM11 @offset 0x388 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM12: JPEG DHTMem tables
  DHTMEM12 @offset 0x38c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM13: JPEG DHTMem tables
  DHTMEM13 @offset 0x390 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM14: JPEG DHTMem tables
  DHTMEM14 @offset 0x394 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM15: JPEG DHTMem tables
  DHTMEM15 @offset 0x398 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM16: JPEG DHTMem tables
  DHTMEM16 @offset 0x39c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM17: JPEG DHTMem tables
  DHTMEM17 @offset 0x3a0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM18: JPEG DHTMem tables
  DHTMEM18 @offset 0x3a4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM19: JPEG DHTMem tables
  DHTMEM19 @offset 0x3a8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM20: JPEG DHTMem tables
  DHTMEM20 @offset 0x3ac $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM21: JPEG DHTMem tables
  DHTMEM21 @offset 0x3b0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM22: JPEG DHTMem tables
  DHTMEM22 @offset 0x3b4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM23: JPEG DHTMem tables
  DHTMEM23 @offset 0x3b8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM24: JPEG DHTMem tables
  DHTMEM24 @offset 0x3bc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM25: JPEG DHTMem tables
  DHTMEM25 @offset 0x3c0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM26: JPEG DHTMem tables
  DHTMEM26 @offset 0x3c4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM27: JPEG DHTMem tables
  DHTMEM27 @offset 0x3c8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM28: JPEG DHTMem tables
  DHTMEM28 @offset 0x3cc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM29: JPEG DHTMem tables
  DHTMEM29 @offset 0x3d0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM30: JPEG DHTMem tables
  DHTMEM30 @offset 0x3d4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM31: JPEG DHTMem tables
  DHTMEM31 @offset 0x3d8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM32: JPEG DHTMem tables
  DHTMEM32 @offset 0x3dc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM33: JPEG DHTMem tables
  DHTMEM33 @offset 0x3e0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM34: JPEG DHTMem tables
  DHTMEM34 @offset 0x3e4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM35: JPEG DHTMem tables
  DHTMEM35 @offset 0x3e8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM36: JPEG DHTMem tables
  DHTMEM36 @offset 0x3ec $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM37: JPEG DHTMem tables
  DHTMEM37 @offset 0x3f0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM38: JPEG DHTMem tables
  DHTMEM38 @offset 0x3f4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM39: JPEG DHTMem tables
  DHTMEM39 @offset 0x3f8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM40: JPEG DHTMem tables
  DHTMEM40 @offset 0x3fc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM41: JPEG DHTMem tables
  DHTMEM41 @offset 0x400 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM42: JPEG DHTMem tables
  DHTMEM42 @offset 0x404 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM43: JPEG DHTMem tables
  DHTMEM43 @offset 0x408 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM44: JPEG DHTMem tables
  DHTMEM44 @offset 0x40c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM45: JPEG DHTMem tables
  DHTMEM45 @offset 0x410 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM46: JPEG DHTMem tables
  DHTMEM46 @offset 0x414 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM47: JPEG DHTMem tables
  DHTMEM47 @offset 0x418 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM48: JPEG DHTMem tables
  DHTMEM48 @offset 0x41c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM49: JPEG DHTMem tables
  DHTMEM49 @offset 0x420 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM50: JPEG DHTMem tables
  DHTMEM50 @offset 0x424 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM51: JPEG DHTMem tables
  DHTMEM51 @offset 0x428 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM52: JPEG DHTMem tables
  DHTMEM52 @offset 0x42c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM53: JPEG DHTMem tables
  DHTMEM53 @offset 0x430 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM54: JPEG DHTMem tables
  DHTMEM54 @offset 0x434 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM55: JPEG DHTMem tables
  DHTMEM55 @offset 0x438 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM56: JPEG DHTMem tables
  DHTMEM56 @offset 0x43c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM57: JPEG DHTMem tables
  DHTMEM57 @offset 0x440 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM58: JPEG DHTMem tables
  DHTMEM58 @offset 0x444 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM59: JPEG DHTMem tables
  DHTMEM59 @offset 0x448 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM60: JPEG DHTMem tables
  DHTMEM60 @offset 0x44c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM61: JPEG DHTMem tables
  DHTMEM61 @offset 0x450 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM62: JPEG DHTMem tables
  DHTMEM62 @offset 0x454 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM63: JPEG DHTMem tables
  DHTMEM63 @offset 0x458 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM64: JPEG DHTMem tables
  DHTMEM64 @offset 0x45c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM65: JPEG DHTMem tables
  DHTMEM65 @offset 0x460 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM66: JPEG DHTMem tables
  DHTMEM66 @offset 0x464 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM67: JPEG DHTMem tables
  DHTMEM67 @offset 0x468 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM68: JPEG DHTMem tables
  DHTMEM68 @offset 0x46c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM69: JPEG DHTMem tables
  DHTMEM69 @offset 0x470 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM70: JPEG DHTMem tables
  DHTMEM70 @offset 0x474 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM71: JPEG DHTMem tables
  DHTMEM71 @offset 0x478 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM72: JPEG DHTMem tables
  DHTMEM72 @offset 0x47c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM73: JPEG DHTMem tables
  DHTMEM73 @offset 0x480 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM74: JPEG DHTMem tables
  DHTMEM74 @offset 0x484 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM75: JPEG DHTMem tables
  DHTMEM75 @offset 0x488 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM76: JPEG DHTMem tables
  DHTMEM76 @offset 0x48c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM77: JPEG DHTMem tables
  DHTMEM77 @offset 0x490 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM78: JPEG DHTMem tables
  DHTMEM78 @offset 0x494 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM79: JPEG DHTMem tables
  DHTMEM79 @offset 0x498 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM80: JPEG DHTMem tables
  DHTMEM80 @offset 0x49c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM81: JPEG DHTMem tables
  DHTMEM81 @offset 0x4a0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM82: JPEG DHTMem tables
  DHTMEM82 @offset 0x4a4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM83: JPEG DHTMem tables
  DHTMEM83 @offset 0x4a8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM84: JPEG DHTMem tables
  DHTMEM84 @offset 0x4ac $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM85: JPEG DHTMem tables
  DHTMEM85 @offset 0x4b0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM86: JPEG DHTMem tables
  DHTMEM86 @offset 0x4b4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM87: JPEG DHTMem tables
  DHTMEM87 @offset 0x4b8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM88: JPEG DHTMem tables
  DHTMEM88 @offset 0x4bc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM89: JPEG DHTMem tables
  DHTMEM89 @offset 0x4c0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM90: JPEG DHTMem tables
  DHTMEM90 @offset 0x4c4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM91: JPEG DHTMem tables
  DHTMEM91 @offset 0x4c8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM92: JPEG DHTMem tables
  DHTMEM92 @offset 0x4cc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM93: JPEG DHTMem tables
  DHTMEM93 @offset 0x4d0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM94: JPEG DHTMem tables
  DHTMEM94 @offset 0x4d4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM95: JPEG DHTMem tables
  DHTMEM95 @offset 0x4d8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM96: JPEG DHTMem tables
  DHTMEM96 @offset 0x4dc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM97: JPEG DHTMem tables
  DHTMEM97 @offset 0x4e0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM98: JPEG DHTMem tables
  DHTMEM98 @offset 0x4e4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM99: JPEG DHTMem tables
  DHTMEM99 @offset 0x4e8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM100: JPEG DHTMem tables
  DHTMEM100 @offset 0x4ec $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM101: JPEG DHTMem tables
  DHTMEM101 @offset 0x4f0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM102: JPEG DHTMem tables
  DHTMEM102 @offset 0x4f4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register DHTMEM103: JPEG DHTMem tables
  DHTMEM103 @offset 0x4f8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_0: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_0 @offset 0x500 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_1: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_1 @offset 0x504 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_2: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_2 @offset 0x508 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_3: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_3 @offset 0x50c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_4: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_4 @offset 0x510 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_5: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_5 @offset 0x514 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_6: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_6 @offset 0x518 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_7: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_7 @offset 0x51c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_8: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_8 @offset 0x520 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_9: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_9 @offset 0x524 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_10: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_10 @offset 0x528 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_11: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_11 @offset 0x52c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_12: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_12 @offset 0x530 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_13: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_13 @offset 0x534 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_14: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_14 @offset 0x538 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_15: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_15 @offset 0x53c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_16: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_16 @offset 0x540 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_17: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_17 @offset 0x544 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_18: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_18 @offset 0x548 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_19: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_19 @offset 0x54c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_20: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_20 @offset 0x550 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_21: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_21 @offset 0x554 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_22: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_22 @offset 0x558 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_23: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_23 @offset 0x55c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_24: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_24 @offset 0x560 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_25: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_25 @offset 0x564 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_26: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_26 @offset 0x568 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_27: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_27 @offset 0x56c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_28: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_28 @offset 0x570 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_29: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_29 @offset 0x574 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_30: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_30 @offset 0x578 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_31: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_31 @offset 0x57c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_32: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_32 @offset 0x580 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_33: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_33 @offset 0x584 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_34: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_34 @offset 0x588 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_35: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_35 @offset 0x58c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_36: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_36 @offset 0x590 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_37: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_37 @offset 0x594 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_38: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_38 @offset 0x598 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_39: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_39 @offset 0x59c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_40: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_40 @offset 0x5a0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_41: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_41 @offset 0x5a4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_42: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_42 @offset 0x5a8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_43: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_43 @offset 0x5ac $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_44: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_44 @offset 0x5b0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_45: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_45 @offset 0x5b4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_46: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_46 @offset 0x5b8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_47: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_47 @offset 0x5bc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_48: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_48 @offset 0x5c0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_49: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_49 @offset 0x5c4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_50: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_50 @offset 0x5c8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_51: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_51 @offset 0x5cc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_52: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_52 @offset 0x5d0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_53: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_53 @offset 0x5d4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_54: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_54 @offset 0x5d8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_55: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_55 @offset 0x5dc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_56: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_56 @offset 0x5e0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_57: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_57 @offset 0x5e4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_58: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_58 @offset 0x5e8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_59: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_59 @offset 0x5ec $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_60: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_60 @offset 0x5f0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_61: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_61 @offset 0x5f4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_62: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_62 @offset 0x5f8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_63: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_63 @offset 0x5fc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_64: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_64 @offset 0x600 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_65: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_65 @offset 0x604 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_66: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_66 @offset 0x608 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_67: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_67 @offset 0x60c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_68: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_68 @offset 0x610 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_69: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_69 @offset 0x614 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_70: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_70 @offset 0x618 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_71: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_71 @offset 0x61c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_72: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_72 @offset 0x620 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_73: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_73 @offset 0x624 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_74: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_74 @offset 0x628 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_75: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_75 @offset 0x62c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_76: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_76 @offset 0x630 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_77: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_77 @offset 0x634 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_78: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_78 @offset 0x638 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_79: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_79 @offset 0x63c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_80: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_80 @offset 0x640 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_81: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_81 @offset 0x644 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_82: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_82 @offset 0x648 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_83: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_83 @offset 0x64c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_84: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_84 @offset 0x650 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_85: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_85 @offset 0x654 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_86: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_86 @offset 0x658 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC0_87: JPEG encoder, AC Huffman table 0
  HUFFENC_AC0_87 @offset 0x65c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_0: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_0 @offset 0x660 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_1: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_1 @offset 0x664 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_2: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_2 @offset 0x668 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_3: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_3 @offset 0x66c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_4: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_4 @offset 0x670 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_5: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_5 @offset 0x674 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_6: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_6 @offset 0x678 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_7: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_7 @offset 0x67c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_8: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_8 @offset 0x680 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_9: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_9 @offset 0x684 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_10: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_10 @offset 0x688 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_11: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_11 @offset 0x68c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_12: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_12 @offset 0x690 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_13: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_13 @offset 0x694 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_14: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_14 @offset 0x698 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_15: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_15 @offset 0x69c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_16: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_16 @offset 0x6a0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_17: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_17 @offset 0x6a4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_18: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_18 @offset 0x6a8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_19: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_19 @offset 0x6ac $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_20: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_20 @offset 0x6b0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_21: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_21 @offset 0x6b4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_22: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_22 @offset 0x6b8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_23: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_23 @offset 0x6bc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_24: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_24 @offset 0x6c0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_25: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_25 @offset 0x6c4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_26: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_26 @offset 0x6c8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_27: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_27 @offset 0x6cc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_28: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_28 @offset 0x6d0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_29: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_29 @offset 0x6d4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_30: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_30 @offset 0x6d8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_31: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_31 @offset 0x6dc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_32: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_32 @offset 0x6e0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_33: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_33 @offset 0x6e4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_34: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_34 @offset 0x6e8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_35: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_35 @offset 0x6ec $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_36: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_36 @offset 0x6f0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_37: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_37 @offset 0x6f4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_38: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_38 @offset 0x6f8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_39: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_39 @offset 0x6fc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_40: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_40 @offset 0x700 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_41: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_41 @offset 0x704 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_42: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_42 @offset 0x708 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_43: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_43 @offset 0x70c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_44: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_44 @offset 0x710 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_45: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_45 @offset 0x714 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_46: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_46 @offset 0x718 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_47: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_47 @offset 0x71c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_48: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_48 @offset 0x720 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_49: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_49 @offset 0x724 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_50: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_50 @offset 0x728 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_51: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_51 @offset 0x72c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_52: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_52 @offset 0x730 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_53: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_53 @offset 0x734 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_54: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_54 @offset 0x738 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_55: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_55 @offset 0x73c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_56: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_56 @offset 0x740 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_57: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_57 @offset 0x744 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_58: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_58 @offset 0x748 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_59: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_59 @offset 0x74c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_60: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_60 @offset 0x750 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_61: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_61 @offset 0x754 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_62: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_62 @offset 0x758 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_63: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_63 @offset 0x75c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_64: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_64 @offset 0x760 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_65: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_65 @offset 0x764 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_66: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_66 @offset 0x768 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_67: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_67 @offset 0x76c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_68: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_68 @offset 0x770 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_69: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_69 @offset 0x774 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_70: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_70 @offset 0x778 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_71: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_71 @offset 0x77c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_72: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_72 @offset 0x780 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_73: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_73 @offset 0x784 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_74: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_74 @offset 0x788 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_75: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_75 @offset 0x78c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_76: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_76 @offset 0x790 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_77: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_77 @offset 0x794 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_78: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_78 @offset 0x798 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_79: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_79 @offset 0x79c $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_80: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_80 @offset 0x7a0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_81: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_81 @offset 0x7a4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_82: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_82 @offset 0x7a8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_83: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_83 @offset 0x7ac $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_84: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_84 @offset 0x7b0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_85: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_85 @offset 0x7b4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_86: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_86 @offset 0x7b8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_AC1_87: JPEG encoder, AC Huffman table 1
  HUFFENC_AC1_87 @offset 0x7bc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC0_0: JPEG encoder, DC Huffman table 0
  HUFFENC_DC0_0 @offset 0x7c0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC0_1: JPEG encoder, DC Huffman table 0
  HUFFENC_DC0_1 @offset 0x7c4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC0_2: JPEG encoder, DC Huffman table 0
  HUFFENC_DC0_2 @offset 0x7c8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC0_3: JPEG encoder, DC Huffman table 0
  HUFFENC_DC0_3 @offset 0x7cc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC0_4: JPEG encoder, DC Huffman table 0
  HUFFENC_DC0_4 @offset 0x7d0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC0_5: JPEG encoder, DC Huffman table 0
  HUFFENC_DC0_5 @offset 0x7d4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC0_6: JPEG encoder, DC Huffman table 0
  HUFFENC_DC0_6 @offset 0x7d8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC0_7: JPEG encoder, DC Huffman table 0
  HUFFENC_DC0_7 @offset 0x7dc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC1_0: JPEG encoder, DC Huffman table 1
  HUFFENC_DC1_0 @offset 0x7e0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC1_1: JPEG encoder, DC Huffman table 1
  HUFFENC_DC1_1 @offset 0x7e4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC1_2: JPEG encoder, DC Huffman table 1
  HUFFENC_DC1_2 @offset 0x7e8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC1_3: JPEG encoder, DC Huffman table 1
  HUFFENC_DC1_3 @offset 0x7ec $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC1_4: JPEG encoder, DC Huffman table 1
  HUFFENC_DC1_4 @offset 0x7f0 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC1_5: JPEG encoder, DC Huffman table 1
  HUFFENC_DC1_5 @offset 0x7f4 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC1_6: JPEG encoder, DC Huffman table 1
  HUFFENC_DC1_6 @offset 0x7f8 $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

//---  Register HUFFENC_DC1_7: JPEG encoder, DC Huffman table 1
  HUFFENC_DC1_7 @offset 0x7fc $u32 {
    DHTMem_RAM:32 // at 0: DHTMem RAM
  }

}

//------------------------------------------------------------------------------
// Peripheral LPTIM1: Low power timer
//------------------------------------------------------------------------------

registers ©LPTIM1 @at 0x40002400 {
//---  Register ISR: Interrupt and Status Register
  ISR @offset 0x0 @ro $u32 {
    25
    DOWN // at 6: Counter direction change up to down
    UP // at 5: Counter direction change down to up
    ARROK // at 4: Autoreload register update OK
    CMPOK // at 3: Compare register update OK
    EXTTRIG // at 2: External trigger edge event
    ARRM // at 1: Autoreload match
    CMPM // at 0: Compare match
  }

//---  Register ICR: Interrupt Clear Register
  ICR @offset 0x4 $u32 {
    25
    DOWNCF // at 6: Direction change to down Clear Flag
    UPCF // at 5: Direction change to UP Clear Flag
    ARROKCF // at 4: Autoreload register update OK Clear Flag
    CMPOKCF // at 3: Compare register update OK Clear Flag
    EXTTRIGCF // at 2: External trigger valid edge Clear Flag
    ARRMCF // at 1: Autoreload match Clear Flag
    CMPMCF // at 0: compare match Clear Flag
  }

//---  Register IER: Interrupt Enable Register
  IER @offset 0x8 $u32 {
    25
    DOWNIE // at 6: Direction change to down Interrupt Enable
    UPIE // at 5: Direction change to UP Interrupt Enable
    ARROKIE // at 4: Autoreload register update OK Interrupt Enable
    CMPOKIE // at 3: Compare register update OK Interrupt Enable
    EXTTRIGIE // at 2: External trigger valid edge Interrupt Enable
    ARRMIE // at 1: Autoreload match Interrupt Enable
    CMPMIE // at 0: Compare match Interrupt Enable
  }

//---  Register CFGR: Configuration Register
  CFGR @offset 0xc $u32 {
    7
    ENC // at 24: Encoder mode enable
    COUNTMODE // at 23: counter mode enabled
    PRELOAD // at 22: Registers update mode
    WAVPOL // at 21: Waveform shape polarity
    WAVE // at 20: Waveform shape
    TIMOUT // at 19: Timeout enable
    TRIGEN:2 // at 17: Trigger enable and polarity
    1
    TRIGSEL:3 // at 13: Trigger selector
    1
    PRESC:3 // at 9: Clock prescaler
    1
    TRGFLT:2 // at 6: Configurable digital filter for trigger
    1
    CKFLT:2 // at 3: Configurable digital filter for external clock
    CKPOL:2 // at 1: Clock Polarity
    CKSEL // at 0: Clock selector
  }

//---  Register CR: Control Register
  CR @offset 0x10 $u32 {
    29
    CNTSTRT // at 2: Timer start in continuous mode
    SNGSTRT // at 1: LPTIM start in single mode
    ENABLE // at 0: LPTIM Enable
  }

//---  Register CMP: Compare Register
  CMP @offset 0x14 $u32 {
    16
    CMP:16 // at 0: Compare value
  }

//---  Register ARR: Autoreload Register
  ARR @offset 0x18 $u32 {
    16
    ARR:16 // at 0: Auto reload value
  }

//---  Register CNT: Counter Register
  CNT @offset 0x1c @ro $u32 {
    16
    CNT:16 // at 0: Counter value
  }

}

//------------------------------------------------------------------------------
// Peripheral LTCD: LCD-TFT Controller
//------------------------------------------------------------------------------

registers ©LTCD @at 0x40016800 {
//---  Register SSCR: Synchronization Size Configuration Register
  SSCR @offset 0x8 $u32 {
    6
    HSW:10 // at 16: Horizontal Synchronization Width (in units of pixel clock period)
    5
    VSH:11 // at 0: Vertical Synchronization Height (in units of horizontal scan line)
  }

//---  Register BPCR: Back Porch Configuration Register
  BPCR @offset 0xc $u32 {
    6
    AHBP:10 // at 16: Accumulated Horizontal back porch (in units of pixel clock period)
    5
    AVBP:11 // at 0: Accumulated Vertical back porch (in units of horizontal scan line)
  }

//---  Register AWCR: Active Width Configuration Register
  AWCR @offset 0x10 $u32 {
    6
    AAV:10 // at 16: AAV
    5
    AAH:11 // at 0: Accumulated Active Height (in units of horizontal scan line)
  }

//---  Register TWCR: Total Width Configuration Register
  TWCR @offset 0x14 $u32 {
    6
    TOTALW:10 // at 16: Total Width (in units of pixel clock period)
    5
    TOTALH:11 // at 0: Total Height (in units of horizontal scan line)
  }

//---  Register GCR: Global Control Register
  GCR @offset 0x18 $u32 {
    HSPOL // at 31: Horizontal Synchronization Polarity
    VSPOL // at 30: Vertical Synchronization Polarity
    DEPOL // at 29: Data Enable Polarity
    PCPOL // at 28: Pixel Clock Polarity
    11
    DEN // at 16: Dither Enable
    1
    DRW:3 // at 12: Dither Red Width
    1
    DGW:3 // at 8: Dither Green Width
    1
    DBW:3 // at 4: Dither Blue Width
    3
    LTDCEN // at 0: LCD-TFT controller enable bit
  }

//---  Register SRCR: Shadow Reload Configuration Register
  SRCR @offset 0x24 $u32 {
    30
    VBR // at 1: Vertical Blanking Reload
    IMR // at 0: Immediate Reload
  }

//---  Register BCCR: Background Color Configuration Register
  BCCR @offset 0x2c $u32 {
    8
    BC:24 // at 0: Background Color Red value
  }

//---  Register IER: Interrupt Enable Register
  IER @offset 0x34 $u32 {
    28
    RRIE // at 3: Register Reload interrupt enable
    TERRIE // at 2: Transfer Error Interrupt Enable
    FUIE // at 1: FIFO Underrun Interrupt Enable
    LIE // at 0: Line Interrupt Enable
  }

//---  Register ISR: Interrupt Status Register
  ISR @offset 0x38 @ro $u32 {
    28
    RRIF // at 3: Register Reload Interrupt Flag
    TERRIF // at 2: Transfer Error interrupt flag
    FUIF // at 1: FIFO Underrun Interrupt flag
    LIF // at 0: Line Interrupt flag
  }

//---  Register ICR: Interrupt Clear Register
  ICR @offset 0x3c $u32 {
    28
    CRRIF // at 3: Clears Register Reload Interrupt Flag
    CTERRIF // at 2: Clears the Transfer Error Interrupt Flag
    CFUIF // at 1: Clears the FIFO Underrun Interrupt flag
    CLIF // at 0: Clears the Line Interrupt Flag
  }

//---  Register LIPCR: Line Interrupt Position Configuration Register
  LIPCR @offset 0x40 $u32 {
    21
    LIPOS:11 // at 0: Line Interrupt Position
  }

//---  Register CPSR: Current Position Status Register
  CPSR @offset 0x44 @ro $u32 {
    CXPOS:16 // at 16: Current X Position
    CYPOS:16 // at 0: Current Y Position
  }

//---  Register CDSR: Current Display Status Register
  CDSR @offset 0x48 @ro $u32 {
    28
    HSYNCS // at 3: Horizontal Synchronization display Status
    VSYNCS // at 2: Vertical Synchronization display Status
    HDES // at 1: Horizontal Data Enable display Status
    VDES // at 0: Vertical Data Enable display Status
  }

//---  Register L1CR: Layerx Control Register
  L1CR @offset 0x84 $u32 {
    27
    CLUTEN // at 4: Color Look-Up Table Enable
    2
    COLKEN // at 1: Color Keying Enable
    LEN // at 0: Layer Enable
  }

//---  Register L1WHPCR: Layerx Window Horizontal Position Configuration Register
  L1WHPCR @offset 0x88 $u32 {
    4
    WHSPPOS:12 // at 16: Window Horizontal Stop Position
    4
    WHSTPOS:12 // at 0: Window Horizontal Start Position
  }

//---  Register L1WVPCR: Layerx Window Vertical Position Configuration Register
  L1WVPCR @offset 0x8c $u32 {
    5
    WVSPPOS:11 // at 16: Window Vertical Stop Position
    5
    WVSTPOS:11 // at 0: Window Vertical Start Position
  }

//---  Register L1CKCR: Layerx Color Keying Configuration Register
  L1CKCR @offset 0x90 $u32 {
    8
    CKRED:8 // at 16: Color Key Red value
    CKGREEN:8 // at 8: Color Key Green value
    CKBLUE:8 // at 0: Color Key Blue value
  }

//---  Register L1PFCR: Layerx Pixel Format Configuration Register
  L1PFCR @offset 0x94 $u32 {
    29
    PF:3 // at 0: Pixel Format
  }

//---  Register L1CACR: Layerx Constant Alpha Configuration Register
  L1CACR @offset 0x98 $u32 {
    24
    CONSTA:8 // at 0: Constant Alpha
  }

//---  Register L1DCCR: Layerx Default Color Configuration Register
  L1DCCR @offset 0x9c $u32 {
    DCALPHA:8 // at 24: Default Color Alpha
    DCRED:8 // at 16: Default Color Red
    DCGREEN:8 // at 8: Default Color Green
    DCBLUE:8 // at 0: Default Color Blue
  }

//---  Register L1BFCR: Layerx Blending Factors Configuration Register
  L1BFCR @offset 0xa0 $u32 {
    21
    BF1:3 // at 8: Blending Factor 1
    5
    BF2:3 // at 0: Blending Factor 2
  }

//---  Register L1CFBAR: Layerx Color Frame Buffer Address Register
  L1CFBAR @offset 0xac $u32 {
    CFBADD:32 // at 0: Color Frame Buffer Start Address
  }

//---  Register L1CFBLR: Layerx Color Frame Buffer Length Register
  L1CFBLR @offset 0xb0 $u32 {
    3
    CFBP:13 // at 16: Color Frame Buffer Pitch in bytes
    3
    CFBLL:13 // at 0: Color Frame Buffer Line Length
  }

//---  Register L1CFBLNR: Layerx ColorFrame Buffer Line Number Register
  L1CFBLNR @offset 0xb4 $u32 {
    21
    CFBLNBR:11 // at 0: Frame Buffer Line Number
  }

//---  Register L1CLUTWR: Layerx CLUT Write Register
  L1CLUTWR @offset 0xc4 $u32 {
    CLUTADD:8 // at 24: CLUT Address
    RED:8 // at 16: Red value
    GREEN:8 // at 8: Green value
    BLUE:8 // at 0: Blue value
  }

//---  Register L2CR: Layerx Control Register
  L2CR @offset 0x104 $u32 {
    27
    CLUTEN // at 4: Color Look-Up Table Enable
    2
    COLKEN // at 1: Color Keying Enable
    LEN // at 0: Layer Enable
  }

//---  Register L2WHPCR: Layerx Window Horizontal Position Configuration Register
  L2WHPCR @offset 0x108 $u32 {
    4
    WHSPPOS:12 // at 16: Window Horizontal Stop Position
    4
    WHSTPOS:12 // at 0: Window Horizontal Start Position
  }

//---  Register L2WVPCR: Layerx Window Vertical Position Configuration Register
  L2WVPCR @offset 0x10c $u32 {
    5
    WVSPPOS:11 // at 16: Window Vertical Stop Position
    5
    WVSTPOS:11 // at 0: Window Vertical Start Position
  }

//---  Register L2CKCR: Layerx Color Keying Configuration Register
  L2CKCR @offset 0x110 $u32 {
    8
    CKRED:9 // at 15: Color Key Red value
    CKGREEN:7 // at 8: Color Key Green value
    CKBLUE:8 // at 0: Color Key Blue value
  }

//---  Register L2PFCR: Layerx Pixel Format Configuration Register
  L2PFCR @offset 0x114 $u32 {
    29
    PF:3 // at 0: Pixel Format
  }

//---  Register L2CACR: Layerx Constant Alpha Configuration Register
  L2CACR @offset 0x118 $u32 {
    24
    CONSTA:8 // at 0: Constant Alpha
  }

//---  Register L2DCCR: Layerx Default Color Configuration Register
  L2DCCR @offset 0x11c $u32 {
    DCALPHA:8 // at 24: Default Color Alpha
    DCRED:8 // at 16: Default Color Red
    DCGREEN:8 // at 8: Default Color Green
    DCBLUE:8 // at 0: Default Color Blue
  }

//---  Register L2BFCR: Layerx Blending Factors Configuration Register
  L2BFCR @offset 0x120 $u32 {
    21
    BF1:3 // at 8: Blending Factor 1
    5
    BF2:3 // at 0: Blending Factor 2
  }

//---  Register L2CFBAR: Layerx Color Frame Buffer Address Register
  L2CFBAR @offset 0x12c $u32 {
    CFBADD:32 // at 0: Color Frame Buffer Start Address
  }

//---  Register L2CFBLR: Layerx Color Frame Buffer Length Register
  L2CFBLR @offset 0x130 $u32 {
    3
    CFBP:13 // at 16: Color Frame Buffer Pitch in bytes
    3
    CFBLL:13 // at 0: Color Frame Buffer Line Length
  }

//---  Register L2CFBLNR: Layerx ColorFrame Buffer Line Number Register
  L2CFBLNR @offset 0x134 $u32 {
    21
    CFBLNBR:11 // at 0: Frame Buffer Line Number
  }

//---  Register L2CLUTWR: Layerx CLUT Write Register
  L2CLUTWR @offset 0x144 $u32 {
    CLUTADD:8 // at 24: CLUT Address
    RED:8 // at 16: Red value
    GREEN:8 // at 8: Green value
    BLUE:8 // at 0: Blue value
  }

}

//------------------------------------------------------------------------------
// Peripheral MDIOS: Management data input/output slave
//------------------------------------------------------------------------------

registers ©MDIOS @at 0x40017800 {
//---  Register MDIOS_CR: MDIOS configuration register
  MDIOS_CR @offset 0x0 $u32 {
    19
    PORT_ADDRESS:5 // at 8: Slaves's address
    DPC // at 7: Disable Preamble Check
    3
    EIE // at 3: Error interrupt enable
    RDIE // at 2: Register Read Interrupt Enable
    WRIE // at 1: Register write interrupt enable
    EN // at 0: Peripheral enable
  }

//---  Register MDIOS_WRFR: MDIOS write flag register
  MDIOS_WRFR @offset 0x4 @ro $u32 {
    WRF:32 // at 0: Write flags for MDIO registers 0 to 31
  }

//---  Register MDIOS_CWRFR: MDIOS clear write flag register
  MDIOS_CWRFR @offset 0x8 $u32 {
    CWRF:32 // at 0: Clear the write flag
  }

//---  Register MDIOS_RDFR: MDIOS read flag register
  MDIOS_RDFR @offset 0xc @ro $u32 {
    RDF:32 // at 0: Read flags for MDIO registers 0 to 31
  }

//---  Register MDIOS_CRDFR: MDIOS clear read flag register
  MDIOS_CRDFR @offset 0x10 $u32 {
    CRDF:32 // at 0: Clear the read flag
  }

//---  Register MDIOS_SR: MDIOS status register
  MDIOS_SR @offset 0x14 @ro $u32 {
    29
    TERF // at 2: Turnaround error flag
    SERF // at 1: Start error flag
    PERF // at 0: Preamble error flag
  }

//---  Register MDIOS_CLRFR: MDIOS clear flag register
  MDIOS_CLRFR @offset 0x18 $u32 {
    29
    CTERF // at 2: Clear the turnaround error flag
    CSERF // at 1: Clear the start error flag
    CPERF // at 0: Clear the preamble error flag
  }

//---  Register MDIOS_DINR0: MDIOS input data register 0
  MDIOS_DINR0 @offset 0x1c @ro $u32 {
    16
    DIN0:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR1: MDIOS input data register 1
  MDIOS_DINR1 @offset 0x20 @ro $u32 {
    16
    DIN1:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR2: MDIOS input data register 2
  MDIOS_DINR2 @offset 0x24 @ro $u32 {
    16
    DIN2:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR3: MDIOS input data register 3
  MDIOS_DINR3 @offset 0x28 @ro $u32 {
    16
    DIN3:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR4: MDIOS input data register 4
  MDIOS_DINR4 @offset 0x2c @ro $u32 {
    16
    DIN4:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR5: MDIOS input data register 5
  MDIOS_DINR5 @offset 0x30 @ro $u32 {
    16
    DIN5:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR6: MDIOS input data register 6
  MDIOS_DINR6 @offset 0x34 @ro $u32 {
    16
    DIN6:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR7: MDIOS input data register 7
  MDIOS_DINR7 @offset 0x38 @ro $u32 {
    16
    DIN7:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR8: MDIOS input data register 8
  MDIOS_DINR8 @offset 0x3c @ro $u32 {
    16
    DIN8:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR9: MDIOS input data register 9
  MDIOS_DINR9 @offset 0x40 @ro $u32 {
    16
    DIN9:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR10: MDIOS input data register 10
  MDIOS_DINR10 @offset 0x44 @ro $u32 {
    16
    DIN10:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR11: MDIOS input data register 11
  MDIOS_DINR11 @offset 0x48 @ro $u32 {
    16
    DIN11:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR12: MDIOS input data register 12
  MDIOS_DINR12 @offset 0x4c @ro $u32 {
    16
    DIN12:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR13: MDIOS input data register 13
  MDIOS_DINR13 @offset 0x50 @ro $u32 {
    16
    DIN13:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR14: MDIOS input data register 14
  MDIOS_DINR14 @offset 0x54 @ro $u32 {
    16
    DIN14:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR15: MDIOS input data register 15
  MDIOS_DINR15 @offset 0x58 @ro $u32 {
    16
    DIN15:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR16: MDIOS input data register 16
  MDIOS_DINR16 @offset 0x5c @ro $u32 {
    16
    DIN16:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR17: MDIOS input data register 17
  MDIOS_DINR17 @offset 0x60 @ro $u32 {
    16
    DIN17:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR18: MDIOS input data register 18
  MDIOS_DINR18 @offset 0x64 @ro $u32 {
    16
    DIN18:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR19: MDIOS input data register 19
  MDIOS_DINR19 @offset 0x68 @ro $u32 {
    16
    DIN19:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR20: MDIOS input data register 20
  MDIOS_DINR20 @offset 0x6c @ro $u32 {
    16
    DIN20:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR21: MDIOS input data register 21
  MDIOS_DINR21 @offset 0x70 @ro $u32 {
    16
    DIN21:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR22: MDIOS input data register 22
  MDIOS_DINR22 @offset 0x74 @ro $u32 {
    16
    DIN22:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR23: MDIOS input data register 23
  MDIOS_DINR23 @offset 0x78 @ro $u32 {
    16
    DIN23:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR24: MDIOS input data register 24
  MDIOS_DINR24 @offset 0x7c @ro $u32 {
    16
    DIN24:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR25: MDIOS input data register 25
  MDIOS_DINR25 @offset 0x80 @ro $u32 {
    16
    DIN25:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR26: MDIOS input data register 26
  MDIOS_DINR26 @offset 0x84 @ro $u32 {
    16
    DIN26:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR27: MDIOS input data register 27
  MDIOS_DINR27 @offset 0x88 @ro $u32 {
    16
    DIN27:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR28: MDIOS input data register 28
  MDIOS_DINR28 @offset 0x8c @ro $u32 {
    16
    DIN28:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR29: MDIOS input data register 29
  MDIOS_DINR29 @offset 0x90 @ro $u32 {
    16
    DIN29:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR30: MDIOS input data register 30
  MDIOS_DINR30 @offset 0x94 @ro $u32 {
    16
    DIN30:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DINR31: MDIOS input data register 31
  MDIOS_DINR31 @offset 0x98 @ro $u32 {
    16
    DIN31:16 // at 0: Input data received from MDIO Master during write frames
  }

//---  Register MDIOS_DOUTR0: MDIOS output data register 0
  MDIOS_DOUTR0 @offset 0x9c $u32 {
    16
    DOUT0:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR1: MDIOS output data register 1
  MDIOS_DOUTR1 @offset 0xa0 $u32 {
    16
    DOUT1:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR2: MDIOS output data register 2
  MDIOS_DOUTR2 @offset 0xa4 $u32 {
    16
    DOUT2:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR3: MDIOS output data register 3
  MDIOS_DOUTR3 @offset 0xa8 $u32 {
    16
    DOUT3:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR4: MDIOS output data register 4
  MDIOS_DOUTR4 @offset 0xac $u32 {
    16
    DOUT4:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR5: MDIOS output data register 5
  MDIOS_DOUTR5 @offset 0xb0 $u32 {
    16
    DOUT5:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR6: MDIOS output data register 6
  MDIOS_DOUTR6 @offset 0xb4 $u32 {
    16
    DOUT6:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR7: MDIOS output data register 7
  MDIOS_DOUTR7 @offset 0xb8 $u32 {
    16
    DOUT7:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR8: MDIOS output data register 8
  MDIOS_DOUTR8 @offset 0xbc $u32 {
    16
    DOUT8:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR9: MDIOS output data register 9
  MDIOS_DOUTR9 @offset 0xc0 $u32 {
    16
    DOUT9:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR10: MDIOS output data register 10
  MDIOS_DOUTR10 @offset 0xc4 $u32 {
    16
    DOUT10:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR11: MDIOS output data register 11
  MDIOS_DOUTR11 @offset 0xc8 $u32 {
    16
    DOUT11:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR12: MDIOS output data register 12
  MDIOS_DOUTR12 @offset 0xcc $u32 {
    16
    DOUT12:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR13: MDIOS output data register 13
  MDIOS_DOUTR13 @offset 0xd0 $u32 {
    16
    DOUT13:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR14: MDIOS output data register 14
  MDIOS_DOUTR14 @offset 0xd4 $u32 {
    16
    DOUT14:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR15: MDIOS output data register 15
  MDIOS_DOUTR15 @offset 0xd8 $u32 {
    16
    DOUT15:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR16: MDIOS output data register 16
  MDIOS_DOUTR16 @offset 0xdc $u32 {
    16
    DOUT16:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR17: MDIOS output data register 17
  MDIOS_DOUTR17 @offset 0xe0 $u32 {
    16
    DOUT17:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR18: MDIOS output data register 18
  MDIOS_DOUTR18 @offset 0xe4 $u32 {
    16
    DOUT18:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR19: MDIOS output data register 19
  MDIOS_DOUTR19 @offset 0xe8 $u32 {
    16
    DOUT19:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR20: MDIOS output data register 20
  MDIOS_DOUTR20 @offset 0xec $u32 {
    16
    DOUT20:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR21: MDIOS output data register 21
  MDIOS_DOUTR21 @offset 0xf0 $u32 {
    16
    DOUT21:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR22: MDIOS output data register 22
  MDIOS_DOUTR22 @offset 0xf4 $u32 {
    16
    DOUT22:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR23: MDIOS output data register 23
  MDIOS_DOUTR23 @offset 0xf8 $u32 {
    16
    DOUT23:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR24: MDIOS output data register 24
  MDIOS_DOUTR24 @offset 0xfc $u32 {
    16
    DOUT24:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR25: MDIOS output data register 25
  MDIOS_DOUTR25 @offset 0x100 $u32 {
    16
    DOUT25:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR26: MDIOS output data register 26
  MDIOS_DOUTR26 @offset 0x104 $u32 {
    16
    DOUT26:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR27: MDIOS output data register 27
  MDIOS_DOUTR27 @offset 0x108 $u32 {
    16
    DOUT27:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR28: MDIOS output data register 28
  MDIOS_DOUTR28 @offset 0x10c $u32 {
    16
    DOUT28:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR29: MDIOS output data register 29
  MDIOS_DOUTR29 @offset 0x110 $u32 {
    16
    DOUT29:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR30: MDIOS output data register 30
  MDIOS_DOUTR30 @offset 0x114 $u32 {
    16
    DOUT30:16 // at 0: Output data sent to MDIO Master during read frames
  }

//---  Register MDIOS_DOUTR31: MDIOS output data register 31
  MDIOS_DOUTR31 @offset 0x118 $u32 {
    16
    DOUT31:16 // at 0: Output data sent to MDIO Master during read frames
  }

}

//------------------------------------------------------------------------------
// Peripheral MPU: Memory protection unit
//------------------------------------------------------------------------------

registers ©MPU @at 0xe000ed90 {
//---  Register MPU_TYPER: MPU type register
  MPU_TYPER @offset 0x0 @ro $u32 {
    8
    IREGION:8 // at 16: Number of MPU instruction regions
    DREGION:8 // at 8: Number of MPU data regions
    7
    SEPARATE // at 0: Separate flag
  }

//---  Register MPU_CTRL: MPU control register
  MPU_CTRL @offset 0x4 @ro $u32 {
    29
    PRIVDEFENA // at 2: Enable priviliged software access to default memory map
    HFNMIENA // at 1: Enables the operation of MPU during hard fault
    ENABLE // at 0: Enables the MPU
  }

//---  Register MPU_RNR: MPU region number register
  MPU_RNR @offset 0x8 $u32 {
    24
    REGION:8 // at 0: MPU region
  }

//---  Register MPU_RBAR: MPU region base address register
  MPU_RBAR @offset 0xc $u32 {
    ADDR:27 // at 5: Region base address field
    VALID // at 4: MPU region number valid
    REGION:4 // at 0: MPU region field
  }

//---  Register MPU_RASR: MPU region attribute and size register
  MPU_RASR @offset 0x10 $u32 {
    3
    XN // at 28: Instruction access disable bit
    1
    AP:3 // at 24: Access permission
    2
    TEX:3 // at 19: memory attribute
    S // at 18: Shareable memory attribute
    C // at 17: memory attribute
    B // at 16: memory attribute
    SRD:8 // at 8: Subregion disable bits
    2
    SIZE:5 // at 1: Size of the MPU protection region
    ENABLE // at 0: Region enable bit.
  }

}

//------------------------------------------------------------------------------
// Peripheral NVIC: Nested Vectored Interrupt       Controller
//------------------------------------------------------------------------------

registers ©NVIC @at 0xe000e100 {
//---  Register ISER0: Interrupt Set-Enable Register
  ISER0 @offset 0x0 $u32 {
    SETENA:32 // at 0: SETENA
  }

//---  Register ISER1: Interrupt Set-Enable Register
  ISER1 @offset 0x4 $u32 {
    SETENA:32 // at 0: SETENA
  }

//---  Register ISER2: Interrupt Set-Enable Register
  ISER2 @offset 0x8 $u32 {
    SETENA:32 // at 0: SETENA
  }

//---  Register ICER0: Interrupt Clear-Enable Register
  ICER0 @offset 0x80 $u32 {
    CLRENA:32 // at 0: CLRENA
  }

//---  Register ICER1: Interrupt Clear-Enable Register
  ICER1 @offset 0x84 $u32 {
    CLRENA:32 // at 0: CLRENA
  }

//---  Register ICER2: Interrupt Clear-Enable Register
  ICER2 @offset 0x88 $u32 {
    CLRENA:32 // at 0: CLRENA
  }

//---  Register ISPR0: Interrupt Set-Pending Register
  ISPR0 @offset 0x100 $u32 {
    SETPEND:32 // at 0: SETPEND
  }

//---  Register ISPR1: Interrupt Set-Pending Register
  ISPR1 @offset 0x104 $u32 {
    SETPEND:32 // at 0: SETPEND
  }

//---  Register ISPR2: Interrupt Set-Pending Register
  ISPR2 @offset 0x108 $u32 {
    SETPEND:32 // at 0: SETPEND
  }

//---  Register ICPR0: Interrupt Clear-Pending Register
  ICPR0 @offset 0x180 $u32 {
    CLRPEND:32 // at 0: CLRPEND
  }

//---  Register ICPR1: Interrupt Clear-Pending Register
  ICPR1 @offset 0x184 $u32 {
    CLRPEND:32 // at 0: CLRPEND
  }

//---  Register ICPR2: Interrupt Clear-Pending Register
  ICPR2 @offset 0x188 $u32 {
    CLRPEND:32 // at 0: CLRPEND
  }

//---  Register IABR0: Interrupt Active Bit Register
  IABR0 @offset 0x200 @ro $u32 {
    ACTIVE:32 // at 0: ACTIVE
  }

//---  Register IABR1: Interrupt Active Bit Register
  IABR1 @offset 0x204 @ro $u32 {
    ACTIVE:32 // at 0: ACTIVE
  }

//---  Register IABR2: Interrupt Active Bit Register
  IABR2 @offset 0x208 @ro $u32 {
    ACTIVE:32 // at 0: ACTIVE
  }

//---  Register IPR0: Interrupt Priority Register
  IPR0 @offset 0x300 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR1: Interrupt Priority Register
  IPR1 @offset 0x304 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR2: Interrupt Priority Register
  IPR2 @offset 0x308 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR3: Interrupt Priority Register
  IPR3 @offset 0x30c $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR4: Interrupt Priority Register
  IPR4 @offset 0x310 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR5: Interrupt Priority Register
  IPR5 @offset 0x314 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR6: Interrupt Priority Register
  IPR6 @offset 0x318 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR7: Interrupt Priority Register
  IPR7 @offset 0x31c $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR8: Interrupt Priority Register
  IPR8 @offset 0x320 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR9: Interrupt Priority Register
  IPR9 @offset 0x324 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR10: Interrupt Priority Register
  IPR10 @offset 0x328 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR11: Interrupt Priority Register
  IPR11 @offset 0x32c $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR12: Interrupt Priority Register
  IPR12 @offset 0x330 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR13: Interrupt Priority Register
  IPR13 @offset 0x334 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR14: Interrupt Priority Register
  IPR14 @offset 0x338 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR15: Interrupt Priority Register
  IPR15 @offset 0x33c $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR16: Interrupt Priority Register
  IPR16 @offset 0x340 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR17: Interrupt Priority Register
  IPR17 @offset 0x344 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR18: Interrupt Priority Register
  IPR18 @offset 0x348 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR19: Interrupt Priority Register
  IPR19 @offset 0x34c $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR20: Interrupt Priority Register
  IPR20 @offset 0x350 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register ISER3: Interrupt Set-Enable Register
  ISER3 @offset 0xc $u32 {
    SETENA:32 // at 0: SETENA
  }

//---  Register ICER3: Interrupt Clear-Enable Register
  ICER3 @offset 0x8c $u32 {
    CLRENA:32 // at 0: CLRENA
  }

//---  Register ISPR3: Interrupt Set-Pending Register
  ISPR3 @offset 0x10c $u32 {
    SETPEND:32 // at 0: SETPEND
  }

//---  Register ICPR3: Interrupt Clear-Pending Register
  ICPR3 @offset 0x18c $u32 {
    CLRPEND:32 // at 0: CLRPEND
  }

//---  Register IABR3: Interrupt Active Bit Register
  IABR3 @offset 0x20c @ro $u32 {
    ACTIVE:32 // at 0: ACTIVE
  }

//---  Register IPR21: Interrupt Priority Register
  IPR21 @offset 0x354 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR22: Interrupt Priority Register
  IPR22 @offset 0x358 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR23: Interrupt Priority Register
  IPR23 @offset 0x35c $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR24: Interrupt Priority Register
  IPR24 @offset 0x360 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR25: Interrupt Priority Register
  IPR25 @offset 0x364 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR26: Interrupt Priority Register
  IPR26 @offset 0x368 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR27: Interrupt Priority Register
  IPR27 @offset 0x36c $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR28: Interrupt Priority Register
  IPR28 @offset 0x370 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

//---  Register IPR29: Interrupt Priority Register
  IPR29 @offset 0x374 $u32 {
    IPR_N3:8 // at 24: IPR_N3
    IPR_N2:8 // at 16: IPR_N2
    IPR_N1:8 // at 8: IPR_N1
    IPR_N0:8 // at 0: IPR_N0
  }

}

//------------------------------------------------------------------------------
// Peripheral NVIC_STIR: Nested vectored interrupt       controller
//------------------------------------------------------------------------------

registers ©NVIC_STIR @at 0xe000ef00 {
//---  Register STIR: Software trigger interrupt register
  STIR @offset 0x0 $u32 {
    23
    INTID:9 // at 0: Software generated interrupt ID
  }

}

//------------------------------------------------------------------------------
// Peripheral OTG_FS_DEVICE: USB on the go full speed
//------------------------------------------------------------------------------

registers ©OTG_FS_DEVICE @at 0x50000800 {
//---  Register OTG_FS_DCFG: OTG_FS device configuration register (OTG_FS_DCFG)
  OTG_FS_DCFG @offset 0x0 $u32 {
    19
    PFIVL:2 // at 11: Periodic frame interval
    DAD:7 // at 4: Device address
    1
    NZLSOHSK // at 2: Non-zero-length status OUT handshake
    DSPD:2 // at 0: Device speed
  }

//---  Register OTG_FS_DCTL: OTG_FS device control register (OTG_FS_DCTL)
  OTG_FS_DCTL @offset 0x4 $u32 {
    20
    POPRGDNE // at 11: Power-on programming done
    CGONAK // at 10: Clear global OUT NAK
    SGONAK // at 9: Set global OUT NAK
    CGINAK // at 8: Clear global IN NAK
    SGINAK // at 7: Set global IN NAK
    TCTL:3 // at 4: Test control
    GONSTS // at 3: Global OUT NAK status
    GINSTS // at 2: Global IN NAK status
    SDIS // at 1: Soft disconnect
    RWUSIG // at 0: Remote wakeup signaling
  }

//---  Register OTG_FS_DSTS: OTG_FS device status register (OTG_FS_DSTS)
  OTG_FS_DSTS @offset 0x8 @ro $u32 {
    10
    FNSOF:14 // at 8: Frame number of the received SOF
    4
    EERR // at 3: Erratic error
    ENUMSPD:2 // at 1: Enumerated speed
    SUSPSTS // at 0: Suspend status
  }

//---  Register OTG_FS_DIEPMSK: OTG_FS device IN endpoint common interrupt mask register (OTG_FS_DIEPMSK)
  OTG_FS_DIEPMSK @offset 0x10 $u32 {
    25
    INEPNEM // at 6: IN endpoint NAK effective mask
    INEPNMM // at 5: IN token received with EP mismatch mask
    ITTXFEMSK // at 4: IN token received when TxFIFO empty mask
    TOM // at 3: Timeout condition mask (Non-isochronous endpoints)
    1
    EPDM // at 1: Endpoint disabled interrupt mask
    XFRCM // at 0: Transfer completed interrupt mask
  }

//---  Register OTG_FS_DOEPMSK: OTG_FS device OUT endpoint common interrupt mask register (OTG_FS_DOEPMSK)
  OTG_FS_DOEPMSK @offset 0x14 $u32 {
    27
    OTEPDM // at 4: OUT token received when endpoint disabled mask
    STUPM // at 3: SETUP phase done mask
    1
    EPDM // at 1: Endpoint disabled interrupt mask
    XFRCM // at 0: Transfer completed interrupt mask
  }

//---  Register OTG_FS_DAINT: OTG_FS device all endpoints interrupt register (OTG_FS_DAINT)
  OTG_FS_DAINT @offset 0x18 @ro $u32 {
    OEPINT:16 // at 16: OUT endpoint interrupt bits
    IEPINT:16 // at 0: IN endpoint interrupt bits
  }

//---  Register OTG_FS_DAINTMSK: OTG_FS all endpoints interrupt mask register (OTG_FS_DAINTMSK)
  OTG_FS_DAINTMSK @offset 0x1c $u32 {
    OEPINT:16 // at 16: OUT endpoint interrupt bits
    IEPM:16 // at 0: IN EP interrupt mask bits
  }

//---  Register OTG_FS_DVBUSDIS: OTG_FS device VBUS discharge time register
  OTG_FS_DVBUSDIS @offset 0x28 $u32 {
    16
    VBUSDT:16 // at 0: Device VBUS discharge time
  }

//---  Register OTG_FS_DVBUSPULSE: OTG_FS device VBUS pulsing time register
  OTG_FS_DVBUSPULSE @offset 0x2c $u32 {
    20
    DVBUSP:12 // at 0: Device VBUS pulsing time
  }

//---  Register OTG_FS_DIEPEMPMSK: OTG_FS device IN endpoint FIFO empty interrupt mask register
  OTG_FS_DIEPEMPMSK @offset 0x34 $u32 {
    16
    INEPTXFEM:16 // at 0: IN EP Tx FIFO empty interrupt mask bits
  }

//---  Register OTG_FS_DIEPCTL0: OTG_FS device control IN endpoint 0 control register (OTG_FS_DIEPCTL0)
  OTG_FS_DIEPCTL0 @offset 0x100 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    2
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    TXFNUM:4 // at 22: TxFIFO number
    STALL // at 21: STALL handshake
    1
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    1
    USBAEP // at 15: USB active endpoint
    13
    MPSIZ:2 // at 0: Maximum packet size
  }

//---  Register OTG_FS_DIEPCTL1: OTG device endpoint-1 control register
  OTG_FS_DIEPCTL1 @offset 0x120 $u32 {
    EPENA // at 31: EPENA
    EPDIS // at 30: EPDIS
    SODDFRM_SD1PID // at 29: SODDFRM/SD1PID
    SD0PID_SEVNFRM // at 28: SD0PID/SEVNFRM
    SNAK // at 27: SNAK
    CNAK // at 26: CNAK
    TXFNUM:4 // at 22: TXFNUM
    Stall // at 21: Stall
    1
    EPTYP:2 // at 18: EPTYP
    NAKSTS // at 17: NAKSTS
    EONUM_DPID // at 16: EONUM/DPID
    USBAEP // at 15: USBAEP
    4
    MPSIZ:11 // at 0: MPSIZ
  }

//---  Register OTG_FS_DIEPCTL2: OTG device endpoint-2 control register
  OTG_FS_DIEPCTL2 @offset 0x140 $u32 {
    EPENA // at 31: EPENA
    EPDIS // at 30: EPDIS
    SODDFRM // at 29: SODDFRM
    SD0PID_SEVNFRM // at 28: SD0PID/SEVNFRM
    SNAK // at 27: SNAK
    CNAK // at 26: CNAK
    TXFNUM:4 // at 22: TXFNUM
    Stall // at 21: Stall
    1
    EPTYP:2 // at 18: EPTYP
    NAKSTS // at 17: NAKSTS
    EONUM_DPID // at 16: EONUM/DPID
    USBAEP // at 15: USBAEP
    4
    MPSIZ:11 // at 0: MPSIZ
  }

//---  Register OTG_FS_DIEPCTL3: OTG device endpoint-3 control register
  OTG_FS_DIEPCTL3 @offset 0x160 $u32 {
    EPENA // at 31: EPENA
    EPDIS // at 30: EPDIS
    SODDFRM // at 29: SODDFRM
    SD0PID_SEVNFRM // at 28: SD0PID/SEVNFRM
    SNAK // at 27: SNAK
    CNAK // at 26: CNAK
    TXFNUM:4 // at 22: TXFNUM
    Stall // at 21: Stall
    1
    EPTYP:2 // at 18: EPTYP
    NAKSTS // at 17: NAKSTS
    EONUM_DPID // at 16: EONUM/DPID
    USBAEP // at 15: USBAEP
    4
    MPSIZ:11 // at 0: MPSIZ
  }

//---  Register OTG_FS_DOEPCTL0: device endpoint-0 control register
  OTG_FS_DOEPCTL0 @offset 0x300 $u32 {
    EPENA // at 31: EPENA
    EPDIS // at 30: EPDIS
    2
    SNAK // at 27: SNAK
    CNAK // at 26: CNAK
    4
    Stall // at 21: Stall
    SNPM // at 20: SNPM
    EPTYP:2 // at 18: EPTYP
    NAKSTS // at 17: NAKSTS
    1
    USBAEP // at 15: USBAEP
    13
    MPSIZ:2 // at 0: MPSIZ
  }

//---  Register OTG_FS_DOEPCTL1: device endpoint-1 control register
  OTG_FS_DOEPCTL1 @offset 0x320 $u32 {
    EPENA // at 31: EPENA
    EPDIS // at 30: EPDIS
    SODDFRM // at 29: SODDFRM
    SD0PID_SEVNFRM // at 28: SD0PID/SEVNFRM
    SNAK // at 27: SNAK
    CNAK // at 26: CNAK
    4
    Stall // at 21: Stall
    SNPM // at 20: SNPM
    EPTYP:2 // at 18: EPTYP
    NAKSTS // at 17: NAKSTS
    EONUM_DPID // at 16: EONUM/DPID
    USBAEP // at 15: USBAEP
    4
    MPSIZ:11 // at 0: MPSIZ
  }

//---  Register OTG_FS_DOEPCTL2: device endpoint-2 control register
  OTG_FS_DOEPCTL2 @offset 0x340 $u32 {
    EPENA // at 31: EPENA
    EPDIS // at 30: EPDIS
    SODDFRM // at 29: SODDFRM
    SD0PID_SEVNFRM // at 28: SD0PID/SEVNFRM
    SNAK // at 27: SNAK
    CNAK // at 26: CNAK
    4
    Stall // at 21: Stall
    SNPM // at 20: SNPM
    EPTYP:2 // at 18: EPTYP
    NAKSTS // at 17: NAKSTS
    EONUM_DPID // at 16: EONUM/DPID
    USBAEP // at 15: USBAEP
    4
    MPSIZ:11 // at 0: MPSIZ
  }

//---  Register OTG_FS_DOEPCTL3: device endpoint-3 control register
  OTG_FS_DOEPCTL3 @offset 0x360 $u32 {
    EPENA // at 31: EPENA
    EPDIS // at 30: EPDIS
    SODDFRM // at 29: SODDFRM
    SD0PID_SEVNFRM // at 28: SD0PID/SEVNFRM
    SNAK // at 27: SNAK
    CNAK // at 26: CNAK
    4
    Stall // at 21: Stall
    SNPM // at 20: SNPM
    EPTYP:2 // at 18: EPTYP
    NAKSTS // at 17: NAKSTS
    EONUM_DPID // at 16: EONUM/DPID
    USBAEP // at 15: USBAEP
    4
    MPSIZ:11 // at 0: MPSIZ
  }

//---  Register OTG_FS_DIEPINT0: device endpoint-x interrupt register
  OTG_FS_DIEPINT0 @offset 0x108 $u32 {
    24
    TXFE // at 7: TXFE
    INEPNE // at 6: INEPNE
    1
    ITTXFE // at 4: ITTXFE
    TOC // at 3: TOC
    1
    EPDISD // at 1: EPDISD
    XFRC // at 0: XFRC
  }

//---  Register OTG_FS_DIEPINT1: device endpoint-1 interrupt register
  OTG_FS_DIEPINT1 @offset 0x128 $u32 {
    24
    TXFE // at 7: TXFE
    INEPNE // at 6: INEPNE
    1
    ITTXFE // at 4: ITTXFE
    TOC // at 3: TOC
    1
    EPDISD // at 1: EPDISD
    XFRC // at 0: XFRC
  }

//---  Register OTG_FS_DIEPINT2: device endpoint-2 interrupt register
  OTG_FS_DIEPINT2 @offset 0x148 $u32 {
    24
    TXFE // at 7: TXFE
    INEPNE // at 6: INEPNE
    1
    ITTXFE // at 4: ITTXFE
    TOC // at 3: TOC
    1
    EPDISD // at 1: EPDISD
    XFRC // at 0: XFRC
  }

//---  Register OTG_FS_DIEPINT3: device endpoint-3 interrupt register
  OTG_FS_DIEPINT3 @offset 0x168 $u32 {
    24
    TXFE // at 7: TXFE
    INEPNE // at 6: INEPNE
    1
    ITTXFE // at 4: ITTXFE
    TOC // at 3: TOC
    1
    EPDISD // at 1: EPDISD
    XFRC // at 0: XFRC
  }

//---  Register OTG_FS_DOEPINT0: device endpoint-0 interrupt register
  OTG_FS_DOEPINT0 @offset 0x308 $u32 {
    25
    B2BSTUP // at 6: B2BSTUP
    1
    OTEPDIS // at 4: OTEPDIS
    STUP // at 3: STUP
    1
    EPDISD // at 1: EPDISD
    XFRC // at 0: XFRC
  }

//---  Register OTG_FS_DOEPINT1: device endpoint-1 interrupt register
  OTG_FS_DOEPINT1 @offset 0x328 $u32 {
    25
    B2BSTUP // at 6: B2BSTUP
    1
    OTEPDIS // at 4: OTEPDIS
    STUP // at 3: STUP
    1
    EPDISD // at 1: EPDISD
    XFRC // at 0: XFRC
  }

//---  Register OTG_FS_DOEPINT2: device endpoint-2 interrupt register
  OTG_FS_DOEPINT2 @offset 0x348 $u32 {
    25
    B2BSTUP // at 6: B2BSTUP
    1
    OTEPDIS // at 4: OTEPDIS
    STUP // at 3: STUP
    1
    EPDISD // at 1: EPDISD
    XFRC // at 0: XFRC
  }

//---  Register OTG_FS_DOEPINT3: device endpoint-3 interrupt register
  OTG_FS_DOEPINT3 @offset 0x368 $u32 {
    25
    B2BSTUP // at 6: B2BSTUP
    1
    OTEPDIS // at 4: OTEPDIS
    STUP // at 3: STUP
    1
    EPDISD // at 1: EPDISD
    XFRC // at 0: XFRC
  }

//---  Register OTG_FS_DIEPTSIZ0: device endpoint-0 transfer size register
  OTG_FS_DIEPTSIZ0 @offset 0x110 $u32 {
    11
    PKTCNT:2 // at 19: Packet count
    12
    XFRSIZ:7 // at 0: Transfer size
  }

//---  Register OTG_FS_DOEPTSIZ0: device OUT endpoint-0 transfer size register
  OTG_FS_DOEPTSIZ0 @offset 0x310 $u32 {
    1
    STUPCNT:2 // at 29: SETUP packet count
    9
    PKTCNT // at 19: Packet count
    12
    XFRSIZ:7 // at 0: Transfer size
  }

//---  Register OTG_FS_DIEPTSIZ1: device endpoint-1 transfer size register
  OTG_FS_DIEPTSIZ1 @offset 0x130 $u32 {
    1
    MCNT:2 // at 29: Multi count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_DIEPTSIZ2: device endpoint-2 transfer size register
  OTG_FS_DIEPTSIZ2 @offset 0x150 $u32 {
    1
    MCNT:2 // at 29: Multi count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_DIEPTSIZ3: device endpoint-3 transfer size register
  OTG_FS_DIEPTSIZ3 @offset 0x170 $u32 {
    1
    MCNT:2 // at 29: Multi count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_DTXFSTS0: OTG_FS device IN endpoint transmit FIFO status register
  OTG_FS_DTXFSTS0 @offset 0x118 @ro $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space available
  }

//---  Register OTG_FS_DTXFSTS1: OTG_FS device IN endpoint transmit FIFO status register
  OTG_FS_DTXFSTS1 @offset 0x138 @ro $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space available
  }

//---  Register OTG_FS_DTXFSTS2: OTG_FS device IN endpoint transmit FIFO status register
  OTG_FS_DTXFSTS2 @offset 0x158 @ro $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space available
  }

//---  Register OTG_FS_DTXFSTS3: OTG_FS device IN endpoint transmit FIFO status register
  OTG_FS_DTXFSTS3 @offset 0x178 @ro $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space available
  }

//---  Register OTG_FS_DOEPTSIZ1: device OUT endpoint-1 transfer size register
  OTG_FS_DOEPTSIZ1 @offset 0x330 $u32 {
    1
    RXDPID_STUPCNT:2 // at 29: Received data PID/SETUP packet count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_DOEPTSIZ2: device OUT endpoint-2 transfer size register
  OTG_FS_DOEPTSIZ2 @offset 0x350 $u32 {
    1
    RXDPID_STUPCNT:2 // at 29: Received data PID/SETUP packet count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_DOEPTSIZ3: device OUT endpoint-3 transfer size register
  OTG_FS_DOEPTSIZ3 @offset 0x370 $u32 {
    1
    RXDPID_STUPCNT:2 // at 29: Received data PID/SETUP packet count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_DIEPCTL4: OTG device endpoint-4 control register
  OTG_FS_DIEPCTL4 @offset 0x180 $u32 {
    EPENA // at 31: EPENA
    EPDIS // at 30: EPDIS
    SODDFRM // at 29: SODDFRM
    SD0PID_SEVNFRM // at 28: SD0PID/SEVNFRM
    SNAK // at 27: SNAK
    CNAK // at 26: CNAK
    TXFNUM:4 // at 22: TXFNUM
    Stall // at 21: Stall
    1
    EPTYP:2 // at 18: EPTYP
    NAKSTS // at 17: NAKSTS
    EONUM_DPID // at 16: EONUM/DPID
    USBAEP // at 15: USBAEP
    4
    MPSIZ:11 // at 0: MPSIZ
  }

//---  Register OTG_FS_DIEPINT4: device endpoint-4 interrupt register
  OTG_FS_DIEPINT4 @offset 0x188 $u32 {
    24
    TXFE // at 7: TXFE
    INEPNE // at 6: INEPNE
    1
    ITTXFE // at 4: ITTXFE
    TOC // at 3: TOC
    1
    EPDISD // at 1: EPDISD
    XFRC // at 0: XFRC
  }

//---  Register OTG_FS_DIEPTSIZ4: device endpoint-4 transfer size register
  OTG_FS_DIEPTSIZ4 @offset 0x194 $u32 {
    1
    MCNT:2 // at 29: Multi count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_DTXFSTS4: OTG_FS device IN endpoint transmit FIFO status register
  OTG_FS_DTXFSTS4 @offset 0x19c $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space available
  }

//---  Register OTG_FS_DIEPCTL5: OTG device endpoint-5 control register
  OTG_FS_DIEPCTL5 @offset 0x1a0 $u32 {
    EPENA // at 31: EPENA
    EPDIS // at 30: EPDIS
    SODDFRM // at 29: SODDFRM
    SD0PID_SEVNFRM // at 28: SD0PID/SEVNFRM
    SNAK // at 27: SNAK
    CNAK // at 26: CNAK
    TXFNUM:4 // at 22: TXFNUM
    Stall // at 21: Stall
    1
    EPTYP:2 // at 18: EPTYP
    NAKSTS // at 17: NAKSTS
    EONUM_DPID // at 16: EONUM/DPID
    USBAEP // at 15: USBAEP
    4
    MPSIZ:11 // at 0: MPSIZ
  }

//---  Register OTG_FS_DIEPINT5: device endpoint-5 interrupt register
  OTG_FS_DIEPINT5 @offset 0x1a8 $u32 {
    24
    TXFE // at 7: TXFE
    INEPNE // at 6: INEPNE
    1
    ITTXFE // at 4: ITTXFE
    TOC // at 3: TOC
    1
    EPDISD // at 1: EPDISD
    XFRC // at 0: XFRC
  }

//---  Register OTG_FS_DIEPTSIZ55: device endpoint-5 transfer size register
  OTG_FS_DIEPTSIZ55 @offset 0x1b0 $u32 {
    1
    MCNT:2 // at 29: Multi count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_DTXFSTS55: OTG_FS device IN endpoint transmit FIFO status register
  OTG_FS_DTXFSTS55 @offset 0x1b8 $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space available
  }

//---  Register OTG_FS_DOEPCTL4: device endpoint-4 control register
  OTG_FS_DOEPCTL4 @offset 0x378 $u32 {
    EPENA // at 31: EPENA
    EPDIS // at 30: EPDIS
    SODDFRM // at 29: SODDFRM
    SD0PID_SEVNFRM // at 28: SD0PID/SEVNFRM
    SNAK // at 27: SNAK
    CNAK // at 26: CNAK
    4
    Stall // at 21: Stall
    SNPM // at 20: SNPM
    EPTYP:2 // at 18: EPTYP
    NAKSTS // at 17: NAKSTS
    EONUM_DPID // at 16: EONUM/DPID
    USBAEP // at 15: USBAEP
    4
    MPSIZ:11 // at 0: MPSIZ
  }

//---  Register OTG_FS_DOEPINT4: device endpoint-4 interrupt register
  OTG_FS_DOEPINT4 @offset 0x380 $u32 {
    25
    B2BSTUP // at 6: B2BSTUP
    1
    OTEPDIS // at 4: OTEPDIS
    STUP // at 3: STUP
    1
    EPDISD // at 1: EPDISD
    XFRC // at 0: XFRC
  }

//---  Register OTG_FS_DOEPTSIZ4: device OUT endpoint-4 transfer size register
  OTG_FS_DOEPTSIZ4 @offset 0x388 $u32 {
    1
    RXDPID_STUPCNT:2 // at 29: Received data PID/SETUP packet count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_DOEPCTL5: device endpoint-5 control register
  OTG_FS_DOEPCTL5 @offset 0x390 $u32 {
    EPENA // at 31: EPENA
    EPDIS // at 30: EPDIS
    SODDFRM // at 29: SODDFRM
    SD0PID_SEVNFRM // at 28: SD0PID/SEVNFRM
    SNAK // at 27: SNAK
    CNAK // at 26: CNAK
    4
    Stall // at 21: Stall
    SNPM // at 20: SNPM
    EPTYP:2 // at 18: EPTYP
    NAKSTS // at 17: NAKSTS
    EONUM_DPID // at 16: EONUM/DPID
    USBAEP // at 15: USBAEP
    4
    MPSIZ:11 // at 0: MPSIZ
  }

//---  Register OTG_FS_DOEPINT5: device endpoint-5 interrupt register
  OTG_FS_DOEPINT5 @offset 0x398 $u32 {
    25
    B2BSTUP // at 6: B2BSTUP
    1
    OTEPDIS // at 4: OTEPDIS
    STUP // at 3: STUP
    1
    EPDISD // at 1: EPDISD
    XFRC // at 0: XFRC
  }

//---  Register OTG_FS_DOEPTSIZ5: device OUT endpoint-5 transfer size register
  OTG_FS_DOEPTSIZ5 @offset 0x3a0 $u32 {
    1
    RXDPID_STUPCNT:2 // at 29: Received data PID/SETUP packet count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

}

//------------------------------------------------------------------------------
// Peripheral OTG_FS_GLOBAL: USB on the go full speed
//------------------------------------------------------------------------------

registers ©OTG_FS_GLOBAL @at 0x50000000 {
//---  Register OTG_FS_GOTGCTL: OTG_FS control and status register (OTG_FS_GOTGCTL)
  OTG_FS_GOTGCTL @offset 0x0 $u32 {
    11
    OTGVER // at 20: OTG version
    BSVLD // at 19: B-session valid
    ASVLD // at 18: A-session valid
    DBCT // at 17: Long/short debounce time
    CIDSTS // at 16: Connector ID status
    3
    EHEN // at 12: Embedded host enable
    DHNPEN // at 11: Device HNP enabled
    HSHNPEN // at 10: Host set HNP enable
    HNPRQ // at 9: HNP request
    HNGSCS // at 8: Host negotiation success
    BVALOVAL // at 7: B-peripheral session valid override value
    BVALOEN // at 6: B-peripheral session valid override enable
    AVALOVAL // at 5: A-peripheral session valid override value
    AVALOEN // at 4: A-peripheral session valid override enable
    VBVALOVAL // at 3: VBUS valid override value
    VBVALOEN // at 2: VBUS valid override enable
    SRQ // at 1: Session request
    SRQSCS // at 0: Session request success
  }

//---  Register OTG_FS_GOTGINT: OTG_FS interrupt register (OTG_FS_GOTGINT)
  OTG_FS_GOTGINT @offset 0x4 $u32 {
    11
    IDCHNG // at 20: ID input pin changed
    DBCDNE // at 19: Debounce done
    ADTOCHG // at 18: A-device timeout change
    HNGDET // at 17: Host negotiation detected
    7
    HNSSCHG // at 9: Host negotiation success status change
    SRSSCHG // at 8: Session request success status change
    5
    SEDET // at 2: Session end detected
    2
  }

//---  Register OTG_FS_GAHBCFG: OTG_FS AHB configuration register (OTG_FS_GAHBCFG)
  OTG_FS_GAHBCFG @offset 0x8 $u32 {
    23
    PTXFELVL // at 8: Periodic TxFIFO empty level
    TXFELVL // at 7: TxFIFO empty level
    6
    GINT // at 0: Global interrupt mask
  }

//---  Register OTG_FS_GUSBCFG: OTG_FS USB configuration register (OTG_FS_GUSBCFG)
  OTG_FS_GUSBCFG @offset 0xc $u32 {
    1
    FDMOD // at 30: Force device mode
    FHMOD // at 29: Force host mode
    15
    TRDT:4 // at 10: USB turnaround time
    HNPCAP // at 9: HNP-capable
    SRPCAP // at 8: SRP-capable
    1
    PHYSEL // at 6: Full Speed serial transceiver select
    3
    TOCAL:3 // at 0: FS timeout calibration
  }

//---  Register OTG_FS_GRSTCTL: OTG_FS reset register (OTG_FS_GRSTCTL)
  OTG_FS_GRSTCTL @offset 0x10 $u32 {
    AHBIDL // at 31: AHB master idle
    20
    TXFNUM:5 // at 6: TxFIFO number
    TXFFLSH // at 5: TxFIFO flush
    RXFFLSH // at 4: RxFIFO flush
    1
    FCRST // at 2: Host frame counter reset
    HSRST // at 1: HCLK soft reset
    CSRST // at 0: Core soft reset
  }

//---  Register OTG_FS_GINTSTS: OTG_FS core interrupt register (OTG_FS_GINTSTS)
  OTG_FS_GINTSTS @offset 0x14 $u32 {
    WKUPINT // at 31: Resume/remote wakeup detected interrupt
    SRQINT // at 30: Session request/new session detected interrupt
    DISCINT // at 29: Disconnect detected interrupt
    CIDSCHG // at 28: Connector ID status change
    1
    PTXFE // at 26: Periodic TxFIFO empty
    HCINT // at 25: Host channels interrupt
    HPRTINT // at 24: Host port interrupt
    RSTDET // at 23: Reset detected interrupt
    1
    IPXFR_INCOMPISOOUT // at 21: Incomplete periodic transfer(Host mode)/Incomplete isochronous OUT transfer(Device mode)
    IISOIXFR // at 20: Incomplete isochronous IN transfer
    OEPINT // at 19: OUT endpoint interrupt
    IEPINT // at 18: IN endpoint interrupt
    2
    EOPF // at 15: End of periodic frame interrupt
    ISOODRP // at 14: Isochronous OUT packet dropped interrupt
    ENUMDNE // at 13: Enumeration done
    USBRST // at 12: USB reset
    USBSUSP // at 11: USB suspend
    ESUSP // at 10: Early suspend
    2
    GOUTNAKEFF // at 7: Global OUT NAK effective
    GINAKEFF // at 6: Global IN non-periodic NAK effective
    NPTXFE // at 5: Non-periodic TxFIFO empty
    RXFLVL // at 4: RxFIFO non-empty
    SOF // at 3: Start of frame
    OTGINT // at 2: OTG interrupt
    MMIS // at 1: Mode mismatch interrupt
    CMOD // at 0: Current mode of operation
  }

//---  Register OTG_FS_GINTMSK: OTG_FS interrupt mask register (OTG_FS_GINTMSK)
  OTG_FS_GINTMSK @offset 0x18 $u32 {
    WUIM // at 31: Resume/remote wakeup detected interrupt mask
    SRQIM // at 30: Session request/new session detected interrupt mask
    DISCINT // at 29: Disconnect detected interrupt mask
    CIDSCHGM // at 28: Connector ID status change mask
    LPMIN // at 27: LPM interrupt mask
    PTXFEM // at 26: Periodic TxFIFO empty mask
    HCIM // at 25: Host channels interrupt mask
    PRTIM // at 24: Host port interrupt mask
    RSTDETM // at 23: Reset detected interrupt mask
    1
    IPXFRM_IISOOXFRM // at 21: Incomplete periodic transfer mask(Host mode)/Incomplete isochronous OUT transfer mask(Device mode)
    IISOIXFRM // at 20: Incomplete isochronous IN transfer mask
    OEPINT // at 19: OUT endpoints interrupt mask
    IEPINT // at 18: IN endpoints interrupt mask
    2
    EOPFM // at 15: End of periodic frame interrupt mask
    ISOODRPM // at 14: Isochronous OUT packet dropped interrupt mask
    ENUMDNEM // at 13: Enumeration done mask
    USBRST // at 12: USB reset mask
    USBSUSPM // at 11: USB suspend mask
    ESUSPM // at 10: Early suspend mask
    2
    GONAKEFFM // at 7: Global OUT NAK effective mask
    GINAKEFFM // at 6: Global non-periodic IN NAK effective mask
    NPTXFEM // at 5: Non-periodic TxFIFO empty mask
    RXFLVLM // at 4: Receive FIFO non-empty mask
    SOFM // at 3: Start of frame mask
    OTGINT // at 2: OTG interrupt mask
    MMISM // at 1: Mode mismatch interrupt mask
    1
  }

//---  Register OTG_FS_GRXSTSR_Device: OTG_FS Receive status debug read(Device mode)
  OTG_FS_GRXSTSR_Device @offset 0x1c @ro $u32 {
    7
    FRMNUM:4 // at 21: Frame number
    PKTSTS:4 // at 17: Packet status
    DPID:2 // at 15: Data PID
    BCNT:11 // at 4: Byte count
    EPNUM:4 // at 0: Endpoint number
  }

//---  Register OTG_FS_GRXSTSR_Host: OTG_FS Receive status debug read(Host mode)
  OTG_FS_GRXSTSR_Host @offset 0x1c @ro $u32 {
    11
    PKTSTS:4 // at 17: Packet status
    DPID:2 // at 15: Data PID
    BCNT:11 // at 4: Byte count
    CHNUM:4 // at 0: Endpoint number
  }

//---  Register OTG_FS_GRXFSIZ: OTG_FS Receive FIFO size register (OTG_FS_GRXFSIZ)
  OTG_FS_GRXFSIZ @offset 0x24 $u32 {
    16
    RXFD:16 // at 0: RxFIFO depth
  }

//---  Register OTG_FS_DIEPTXF0_Device: OTG_FS Endpoint 0 Transmit FIFO size
  OTG_FS_DIEPTXF0_Device @offset 0x28 $u32 {
    TX0FD:16 // at 16: Endpoint 0 TxFIFO depth
    TX0FSA:16 // at 0: Endpoint 0 transmit RAM start address
  }

//---  Register OTG_FS_HNPTXFSIZ_Host: OTG_FS Host non-periodic transmit FIFO size register
  OTG_FS_HNPTXFSIZ_Host @offset 0x28 $u32 {
    NPTXFD:16 // at 16: Non-periodic TxFIFO depth
    NPTXFSA:16 // at 0: Non-periodic transmit RAM start address
  }

//---  Register OTG_FS_HNPTXSTS: OTG_FS non-periodic transmit FIFO/queue status register (OTG_FS_GNPTXSTS)
  OTG_FS_HNPTXSTS @offset 0x2c @ro $u32 {
    1
    NPTXQTOP:7 // at 24: Top of the non-periodic transmit request queue
    NPTQXSAV:8 // at 16: Non-periodic transmit request queue space available
    NPTXFSAV:16 // at 0: Non-periodic TxFIFO space available
  }

//---  Register OTG_FS_GCCFG: OTG_FS general core configuration register (OTG_FS_GCCFG)
  OTG_FS_GCCFG @offset 0x38 $u32 {
    10
    VBDEN // at 21: USB VBUS detection enable
    SDEN // at 20: Secondary detection (SD) mode enable
    PDEN // at 19: Primary detection (PD) mode enable
    DCDEN // at 18: Data contact detection (DCD) mode enable
    BCDEN // at 17: Battery charging detector (BCD) enable
    PWRDWN // at 16: Power down
    12
    PS2DET // at 3: DM pull-up detection status
    SDET // at 2: Secondary detection (SD) status
    PDET // at 1: Primary detection (PD) status
    DCDET // at 0: Data contact detection (DCD) status
  }

//---  Register OTG_FS_CID: core ID register
  OTG_FS_CID @offset 0x3c $u32 {
    PRODUCT_ID:32 // at 0: Product ID field
  }

//---  Register OTG_FS_HPTXFSIZ: OTG_FS Host periodic transmit FIFO size register (OTG_FS_HPTXFSIZ)
  OTG_FS_HPTXFSIZ @offset 0x100 $u32 {
    PTXFSIZ:16 // at 16: Host periodic TxFIFO depth
    PTXSA:16 // at 0: Host periodic TxFIFO start address
  }

//---  Register OTG_FS_DIEPTXF1: OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF1)
  OTG_FS_DIEPTXF1 @offset 0x104 $u32 {
    INEPTXFD:16 // at 16: IN endpoint TxFIFO depth
    INEPTXSA:16 // at 0: IN endpoint FIFO2 transmit RAM start address
  }

//---  Register OTG_FS_DIEPTXF2: OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF2)
  OTG_FS_DIEPTXF2 @offset 0x108 $u32 {
    INEPTXFD:16 // at 16: IN endpoint TxFIFO depth
    INEPTXSA:16 // at 0: IN endpoint FIFO3 transmit RAM start address
  }

//---  Register OTG_FS_DIEPTXF3: OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF3)
  OTG_FS_DIEPTXF3 @offset 0x10c $u32 {
    INEPTXFD:16 // at 16: IN endpoint TxFIFO depth
    INEPTXSA:16 // at 0: IN endpoint FIFO4 transmit RAM start address
  }

//---  Register OTG_FS_GRXSTSP_Device: OTG status read and pop register (Device mode)
  OTG_FS_GRXSTSP_Device @offset 0x20 @ro $u32 {
    7
    FRMNUM:4 // at 21: Frame number
    PKTSTS:4 // at 17: Packet status
    DPID:2 // at 15: Data PID
    BCNT:11 // at 4: Byte count
    EPNUM:4 // at 0: Endpoint number
  }

//---  Register OTG_FS_GRXSTSP_Host: OTG status read and pop register (Host mode)
  OTG_FS_GRXSTSP_Host @offset 0x20 @ro $u32 {
    11
    PKTSTS:4 // at 17: Packet status
    DPID:2 // at 15: Data PID
    BCNT:11 // at 4: Byte count
    CHNUM:4 // at 0: Channel number
  }

//---  Register OTG_FS_GI2CCTL: OTG I2C access register
  OTG_FS_GI2CCTL @offset 0x30 $u32 {
    BSYDNE // at 31: I2C Busy/Done
    RW // at 30: Read/Write Indicator
    1
    I2CDATSE0 // at 28: I2C DatSe0 USB mode
    I2CDEVADR:2 // at 26: I2C Device Address
    1
    ACK // at 24: I2C ACK
    I2CEN // at 23: I2C Enable
    ADDR:7 // at 16: I2C Address
    REGADDR:8 // at 8: I2C Register Address
    RWDATA:8 // at 0: I2C Read/Write Data
  }

//---  Register OTG_FS_GPWRDN: OTG power down register
  OTG_FS_GPWRDN @offset 0x58 $u32 {
    8
    ADPIF // at 23: ADP interrupt flag
    22
    ADPMEN // at 0: ADP module enable
  }

//---  Register OTG_FS_GADPCTL: OTG ADP timer, control and status register
  OTG_FS_GADPCTL @offset 0x60 $u32 {
    3
    AR:2 // at 27: Access request
    ADPTOIM // at 26: ADP timeout interrupt mask
    ADPSNSIM // at 25: ADP sense interrupt mask
    ADPPRBIM // at 24: ADP probe interrupt mask
    ADPTOIF // at 23: ADP timeout interrupt flag
    ADPSNSIF // at 22: ADP sense interrupt flag
    ADPPRBIF // at 21: ADP probe interrupt flag
    ADPEN // at 20: ADP enable
    ADPRST // at 19: ADP reset
    ENASNS // at 18: Enable sense
    ENAPRB // at 17: Enable probe
    RTIM:11 // at 6: Ramp time
    PRBPER:2 // at 4: Probe period
    PRBDELTA:2 // at 2: Probe delta
    PRBDSCHG:2 // at 0: Probe discharge
  }

//---  Register OTG_FS_DIEPTXF4: OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF4)
  OTG_FS_DIEPTXF4 @offset 0x110 $u32 {
    INEPTXFD:16 // at 16: IN endpoint Tx FIFO depth
    INEPTXSA:16 // at 0: IN endpoint FIFOx transmit RAM start address
  }

//---  Register OTG_FS_DIEPTXF5: OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF5)
  OTG_FS_DIEPTXF5 @offset 0x114 $u32 {
    INEPTXFD:16 // at 16: IN endpoint Tx FIFO depth
    INEPTXSA:16 // at 0: IN endpoint FIFOx transmit RAM start address
  }

//---  Register OTG_FS_GLPMCFG: OTG core LPM configuration register
  OTG_FS_GLPMCFG @offset 0x54 $u32 {
    3
    ENBESL // at 28: Enable best effort service latency
    LPMRCNTSTS:3 // at 25: LPM retry count status
    SNDLPM // at 24: Send LPM transaction
    LPMRCNT:3 // at 21: LPM retry count
    LPMCHIDX:4 // at 17: LPM Channel Index
    L1RSMOK // at 16: Sleep State Resume OK
    SLPSTS // at 15: Port sleep status
    LPMRST:2 // at 13: LPM response
    L1DSEN // at 12: L1 deep sleep enable
    BESLTHRS:4 // at 8: BESL threshold
    L1SSEN // at 7: L1 Shallow Sleep enable
    REMWAKE // at 6: bRemoteWake value
    BESL:4 // at 2: Best effort service latency
    LPMACK // at 1: LPM token acknowledge enable
    LPMEN // at 0: LPM support enable
  }

}

//------------------------------------------------------------------------------
// Peripheral OTG_FS_HOST: USB on the go full speed
//------------------------------------------------------------------------------

registers ©OTG_FS_HOST @at 0x50000400 {
//---  Register OTG_FS_HCFG: OTG_FS host configuration register (OTG_FS_HCFG)
  OTG_FS_HCFG @offset 0x0 $u32 {
    29
    FSLSS // at 2: FS- and LS-only support
    FSLSPCS:2 // at 0: FS/LS PHY clock select
  }

//---  Register OTG_FS_HFIR: OTG_FS Host frame interval register
  OTG_FS_HFIR @offset 0x4 $u32 {
    16
    FRIVL:16 // at 0: Frame interval
  }

//---  Register OTG_FS_HFNUM: OTG_FS host frame number/frame time remaining register (OTG_FS_HFNUM)
  OTG_FS_HFNUM @offset 0x8 @ro $u32 {
    FTREM:16 // at 16: Frame time remaining
    FRNUM:16 // at 0: Frame number
  }

//---  Register OTG_FS_HPTXSTS: OTG_FS_Host periodic transmit FIFO/queue status register (OTG_FS_HPTXSTS)
  OTG_FS_HPTXSTS @offset 0x10 $u32 {
    PTXQTOP:8 // at 24: Top of the periodic transmit request queue
    PTXQSAV:8 // at 16: Periodic transmit request queue space available
    PTXFSAVL:16 // at 0: Periodic transmit data FIFO space available
  }

//---  Register OTG_FS_HAINT: OTG_FS Host all channels interrupt register
  OTG_FS_HAINT @offset 0x14 @ro $u32 {
    16
    HAINT:16 // at 0: Channel interrupts
  }

//---  Register OTG_FS_HAINTMSK: OTG_FS host all channels interrupt mask register
  OTG_FS_HAINTMSK @offset 0x18 $u32 {
    16
    HAINTM:16 // at 0: Channel interrupt mask
  }

//---  Register OTG_FS_HPRT: OTG_FS host port control and status register (OTG_FS_HPRT)
  OTG_FS_HPRT @offset 0x40 $u32 {
    13
    PSPD:2 // at 17: Port speed
    PTCTL:4 // at 13: Port test control
    PPWR // at 12: Port power
    PLSTS:2 // at 10: Port line status
    1
    PRST // at 8: Port reset
    PSUSP // at 7: Port suspend
    PRES // at 6: Port resume
    POCCHNG // at 5: Port overcurrent change
    POCA // at 4: Port overcurrent active
    PENCHNG // at 3: Port enable/disable change
    PENA // at 2: Port enable
    PCDET // at 1: Port connect detected
    PCSTS // at 0: Port connect status
  }

//---  Register OTG_FS_HCCHAR0: OTG_FS host channel-0 characteristics register (OTG_FS_HCCHAR0)
  OTG_FS_HCCHAR0 @offset 0x100 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MCNT:2 // at 20: Multicount
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_FS_HCCHAR1: OTG_FS host channel-1 characteristics register (OTG_FS_HCCHAR1)
  OTG_FS_HCCHAR1 @offset 0x120 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MCNT:2 // at 20: Multicount
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_FS_HCCHAR2: OTG_FS host channel-2 characteristics register (OTG_FS_HCCHAR2)
  OTG_FS_HCCHAR2 @offset 0x140 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MCNT:2 // at 20: Multicount
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_FS_HCCHAR3: OTG_FS host channel-3 characteristics register (OTG_FS_HCCHAR3)
  OTG_FS_HCCHAR3 @offset 0x160 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MCNT:2 // at 20: Multicount
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_FS_HCCHAR4: OTG_FS host channel-4 characteristics register (OTG_FS_HCCHAR4)
  OTG_FS_HCCHAR4 @offset 0x180 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MCNT:2 // at 20: Multicount
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_FS_HCCHAR5: OTG_FS host channel-5 characteristics register (OTG_FS_HCCHAR5)
  OTG_FS_HCCHAR5 @offset 0x1a0 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MCNT:2 // at 20: Multicount
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_FS_HCCHAR6: OTG_FS host channel-6 characteristics register (OTG_FS_HCCHAR6)
  OTG_FS_HCCHAR6 @offset 0x1c0 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MCNT:2 // at 20: Multicount
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_FS_HCCHAR7: OTG_FS host channel-7 characteristics register (OTG_FS_HCCHAR7)
  OTG_FS_HCCHAR7 @offset 0x1e0 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MCNT:2 // at 20: Multicount
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_FS_HCINT0: OTG_FS host channel-0 interrupt register (OTG_FS_HCINT0)
  OTG_FS_HCINT0 @offset 0x108 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    1
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    1
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_FS_HCINT1: OTG_FS host channel-1 interrupt register (OTG_FS_HCINT1)
  OTG_FS_HCINT1 @offset 0x128 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    1
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    1
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_FS_HCINT2: OTG_FS host channel-2 interrupt register (OTG_FS_HCINT2)
  OTG_FS_HCINT2 @offset 0x148 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    1
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    1
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_FS_HCINT3: OTG_FS host channel-3 interrupt register (OTG_FS_HCINT3)
  OTG_FS_HCINT3 @offset 0x168 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    1
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    1
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_FS_HCINT4: OTG_FS host channel-4 interrupt register (OTG_FS_HCINT4)
  OTG_FS_HCINT4 @offset 0x188 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    1
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    1
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_FS_HCINT5: OTG_FS host channel-5 interrupt register (OTG_FS_HCINT5)
  OTG_FS_HCINT5 @offset 0x1a8 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    1
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    1
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_FS_HCINT6: OTG_FS host channel-6 interrupt register (OTG_FS_HCINT6)
  OTG_FS_HCINT6 @offset 0x1c8 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    1
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    1
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_FS_HCINT7: OTG_FS host channel-7 interrupt register (OTG_FS_HCINT7)
  OTG_FS_HCINT7 @offset 0x1e8 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    1
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    1
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_FS_HCINTMSK0: OTG_FS host channel-0 mask register (OTG_FS_HCINTMSK0)
  OTG_FS_HCINTMSK0 @offset 0x10c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    1
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_FS_HCINTMSK1: OTG_FS host channel-1 mask register (OTG_FS_HCINTMSK1)
  OTG_FS_HCINTMSK1 @offset 0x12c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    1
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_FS_HCINTMSK2: OTG_FS host channel-2 mask register (OTG_FS_HCINTMSK2)
  OTG_FS_HCINTMSK2 @offset 0x14c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    1
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_FS_HCINTMSK3: OTG_FS host channel-3 mask register (OTG_FS_HCINTMSK3)
  OTG_FS_HCINTMSK3 @offset 0x16c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    1
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_FS_HCINTMSK4: OTG_FS host channel-4 mask register (OTG_FS_HCINTMSK4)
  OTG_FS_HCINTMSK4 @offset 0x18c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    1
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_FS_HCINTMSK5: OTG_FS host channel-5 mask register (OTG_FS_HCINTMSK5)
  OTG_FS_HCINTMSK5 @offset 0x1ac $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    1
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_FS_HCINTMSK6: OTG_FS host channel-6 mask register (OTG_FS_HCINTMSK6)
  OTG_FS_HCINTMSK6 @offset 0x1cc $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    1
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_FS_HCINTMSK7: OTG_FS host channel-7 mask register (OTG_FS_HCINTMSK7)
  OTG_FS_HCINTMSK7 @offset 0x1ec $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    1
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_FS_HCTSIZ0: OTG_FS host channel-0 transfer size register
  OTG_FS_HCTSIZ0 @offset 0x110 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_HCTSIZ1: OTG_FS host channel-1 transfer size register
  OTG_FS_HCTSIZ1 @offset 0x130 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_HCTSIZ2: OTG_FS host channel-2 transfer size register
  OTG_FS_HCTSIZ2 @offset 0x150 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_HCTSIZ3: OTG_FS host channel-3 transfer size register
  OTG_FS_HCTSIZ3 @offset 0x170 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_HCTSIZ4: OTG_FS host channel-x transfer size register
  OTG_FS_HCTSIZ4 @offset 0x190 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_HCTSIZ5: OTG_FS host channel-5 transfer size register
  OTG_FS_HCTSIZ5 @offset 0x1b0 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_HCTSIZ6: OTG_FS host channel-6 transfer size register
  OTG_FS_HCTSIZ6 @offset 0x1d0 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_HCTSIZ7: OTG_FS host channel-7 transfer size register
  OTG_FS_HCTSIZ7 @offset 0x1f0 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_HCCHAR8: OTG_FS host channel-8 characteristics register
  OTG_FS_HCCHAR8 @offset 0x1f4 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MCNT:2 // at 20: Multicount
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_FS_HCINT8: OTG_FS host channel-8 interrupt register
  OTG_FS_HCINT8 @offset 0x1f8 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    1
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    1
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_FS_HCINTMSK8: OTG_FS host channel-8 mask register
  OTG_FS_HCINTMSK8 @offset 0x1fc $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    1
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_FS_HCTSIZ8: OTG_FS host channel-8 transfer size register
  OTG_FS_HCTSIZ8 @offset 0x200 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_HCCHAR9: OTG_FS host channel-9 characteristics register
  OTG_FS_HCCHAR9 @offset 0x204 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MCNT:2 // at 20: Multicount
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_FS_HCINT9: OTG_FS host channel-9 interrupt register
  OTG_FS_HCINT9 @offset 0x208 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    1
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    1
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_FS_HCINTMSK9: OTG_FS host channel-9 mask register
  OTG_FS_HCINTMSK9 @offset 0x20c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    1
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_FS_HCTSIZ9: OTG_FS host channel-9 transfer size register
  OTG_FS_HCTSIZ9 @offset 0x210 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_HCCHAR10: OTG_FS host channel-10 characteristics register
  OTG_FS_HCCHAR10 @offset 0x214 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MCNT:2 // at 20: Multicount
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_FS_HCINT10: OTG_FS host channel-10 interrupt register
  OTG_FS_HCINT10 @offset 0x218 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    1
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    1
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_FS_HCINTMSK10: OTG_FS host channel-10 mask register
  OTG_FS_HCINTMSK10 @offset 0x21c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    1
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_FS_HCTSIZ10: OTG_FS host channel-10 transfer size register
  OTG_FS_HCTSIZ10 @offset 0x220 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_FS_HCCHAR11: OTG_FS host channel-11 characteristics register
  OTG_FS_HCCHAR11 @offset 0x224 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MCNT:2 // at 20: Multicount
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_FS_HCINT11: OTG_FS host channel-11 interrupt register
  OTG_FS_HCINT11 @offset 0x228 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    1
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    1
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_FS_HCINTMSK11: OTG_FS host channel-11 mask register
  OTG_FS_HCINTMSK11 @offset 0x22c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    1
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_FS_HCTSIZ11: OTG_FS host channel-11 transfer size register
  OTG_FS_HCTSIZ11 @offset 0x230 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

}

//------------------------------------------------------------------------------
// Peripheral OTG_FS_PWRCLK: USB on the go full speed
//------------------------------------------------------------------------------

registers ©OTG_FS_PWRCLK @at 0x50000e00 {
//---  Register OTG_FS_PCGCCTL: OTG_FS power and clock gating control register (OTG_FS_PCGCCTL)
  OTG_FS_PCGCCTL @offset 0x0 $u32 {
    27
    PHYSUSP // at 4: PHY Suspended
    2
    GATEHCLK // at 1: Gate HCLK
    STPPCLK // at 0: Stop PHY clock
  }

}

//------------------------------------------------------------------------------
// Peripheral OTG_HS_DEVICE: USB on the go high speed
//------------------------------------------------------------------------------

registers ©OTG_HS_DEVICE @at 0x40040800 {
//---  Register OTG_HS_DCFG: OTG_HS device configuration register
  OTG_HS_DCFG @offset 0x0 $u32 {
    6
    PERSCHIVL:2 // at 24: Periodic scheduling interval
    11
    PFIVL:2 // at 11: Periodic (micro)frame interval
    DAD:7 // at 4: Device address
    1
    NZLSOHSK // at 2: Nonzero-length status OUT handshake
    DSPD:2 // at 0: Device speed
  }

//---  Register OTG_HS_DCTL: OTG_HS device control register
  OTG_HS_DCTL @offset 0x4 $u32 {
    20
    POPRGDNE // at 11: Power-on programming done
    CGONAK // at 10: Clear global OUT NAK
    SGONAK // at 9: Set global OUT NAK
    CGINAK // at 8: Clear global IN NAK
    SGINAK // at 7: Set global IN NAK
    TCTL:3 // at 4: Test control
    GONSTS // at 3: Global OUT NAK status
    GINSTS // at 2: Global IN NAK status
    SDIS // at 1: Soft disconnect
    RWUSIG // at 0: Remote wakeup signaling
  }

//---  Register OTG_HS_DSTS: OTG_HS device status register
  OTG_HS_DSTS @offset 0x8 @ro $u32 {
    10
    FNSOF:14 // at 8: Frame number of the received SOF
    4
    EERR // at 3: Erratic error
    ENUMSPD:2 // at 1: Enumerated speed
    SUSPSTS // at 0: Suspend status
  }

//---  Register OTG_HS_DIEPMSK: OTG_HS device IN endpoint common interrupt mask register
  OTG_HS_DIEPMSK @offset 0x10 $u32 {
    22
    BIM // at 9: BNA interrupt mask
    TXFURM // at 8: FIFO underrun mask
    1
    INEPNEM // at 6: IN endpoint NAK effective mask
    INEPNMM // at 5: IN token received with EP mismatch mask
    ITTXFEMSK // at 4: IN token received when TxFIFO empty mask
    TOM // at 3: Timeout condition mask (nonisochronous endpoints)
    1
    EPDM // at 1: Endpoint disabled interrupt mask
    XFRCM // at 0: Transfer completed interrupt mask
  }

//---  Register OTG_HS_DOEPMSK: OTG_HS device OUT endpoint common interrupt mask register
  OTG_HS_DOEPMSK @offset 0x14 $u32 {
    22
    BOIM // at 9: BNA interrupt mask
    OPEM // at 8: OUT packet error mask
    1
    B2BSTUP // at 6: Back-to-back SETUP packets received mask
    1
    OTEPDM // at 4: OUT token received when endpoint disabled mask
    STUPM // at 3: SETUP phase done mask
    1
    EPDM // at 1: Endpoint disabled interrupt mask
    XFRCM // at 0: Transfer completed interrupt mask
  }

//---  Register OTG_HS_DAINT: OTG_HS device all endpoints interrupt register
  OTG_HS_DAINT @offset 0x18 @ro $u32 {
    OEPINT:16 // at 16: OUT endpoint interrupt bits
    IEPINT:16 // at 0: IN endpoint interrupt bits
  }

//---  Register OTG_HS_DAINTMSK: OTG_HS all endpoints interrupt mask register
  OTG_HS_DAINTMSK @offset 0x1c $u32 {
    OEPM:16 // at 16: OUT EP interrupt mask bits
    IEPM:16 // at 0: IN EP interrupt mask bits
  }

//---  Register OTG_HS_DVBUSDIS: OTG_HS device VBUS discharge time register
  OTG_HS_DVBUSDIS @offset 0x28 $u32 {
    16
    VBUSDT:16 // at 0: Device VBUS discharge time
  }

//---  Register OTG_HS_DVBUSPULSE: OTG_HS device VBUS pulsing time register
  OTG_HS_DVBUSPULSE @offset 0x2c $u32 {
    20
    DVBUSP:12 // at 0: Device VBUS pulsing time
  }

//---  Register OTG_HS_DTHRCTL: OTG_HS Device threshold control register
  OTG_HS_DTHRCTL @offset 0x30 $u32 {
    4
    ARPEN // at 27: Arbiter parking enable
    1
    RXTHRLEN:9 // at 17: Receive threshold length
    RXTHREN // at 16: Receive threshold enable
    5
    TXTHRLEN:9 // at 2: Transmit threshold length
    ISOTHREN // at 1: ISO IN endpoint threshold enable
    NONISOTHREN // at 0: Nonisochronous IN endpoints threshold enable
  }

//---  Register OTG_HS_DIEPEMPMSK: OTG_HS device IN endpoint FIFO empty interrupt mask register
  OTG_HS_DIEPEMPMSK @offset 0x34 $u32 {
    16
    INEPTXFEM:16 // at 0: IN EP Tx FIFO empty interrupt mask bits
  }

//---  Register OTG_HS_DEACHINT: OTG_HS device each endpoint interrupt register
  OTG_HS_DEACHINT @offset 0x38 $u32 {
    14
    OEP1INT // at 17: OUT endpoint 1 interrupt bit
    15
    IEP1INT // at 1: IN endpoint 1interrupt bit
    1
  }

//---  Register OTG_HS_DEACHINTMSK: OTG_HS device each endpoint interrupt register mask
  OTG_HS_DEACHINTMSK @offset 0x3c $u32 {
    14
    OEP1INTM // at 17: OUT Endpoint 1 interrupt mask bit
    15
    IEP1INTM // at 1: IN Endpoint 1 interrupt mask bit
    1
  }

//---  Register OTG_HS_DIEPCTL0: OTG device endpoint-0 control register
  OTG_HS_DIEPCTL0 @offset 0x100 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    TXFNUM:4 // at 22: TxFIFO number
    Stall // at 21: STALL handshake
    1
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even/odd frame
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DIEPCTL1: OTG device endpoint-1 control register
  OTG_HS_DIEPCTL1 @offset 0x120 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    TXFNUM:4 // at 22: TxFIFO number
    Stall // at 21: STALL handshake
    1
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even/odd frame
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DIEPCTL2: OTG device endpoint-2 control register
  OTG_HS_DIEPCTL2 @offset 0x140 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    TXFNUM:4 // at 22: TxFIFO number
    Stall // at 21: STALL handshake
    1
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even/odd frame
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DIEPCTL3: OTG device endpoint-3 control register
  OTG_HS_DIEPCTL3 @offset 0x160 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    TXFNUM:4 // at 22: TxFIFO number
    Stall // at 21: STALL handshake
    1
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even/odd frame
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DIEPCTL4: OTG device endpoint-4 control register
  OTG_HS_DIEPCTL4 @offset 0x180 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    TXFNUM:4 // at 22: TxFIFO number
    Stall // at 21: STALL handshake
    1
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even/odd frame
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DIEPCTL5: OTG device endpoint-5 control register
  OTG_HS_DIEPCTL5 @offset 0x1a0 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    TXFNUM:4 // at 22: TxFIFO number
    Stall // at 21: STALL handshake
    1
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even/odd frame
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DIEPCTL6: OTG device endpoint-6 control register
  OTG_HS_DIEPCTL6 @offset 0x1c0 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    TXFNUM:4 // at 22: TxFIFO number
    Stall // at 21: STALL handshake
    1
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even/odd frame
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DIEPCTL7: OTG device endpoint-7 control register
  OTG_HS_DIEPCTL7 @offset 0x1e0 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    TXFNUM:4 // at 22: TxFIFO number
    Stall // at 21: STALL handshake
    1
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even/odd frame
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DIEPINT0: OTG device endpoint-0 interrupt register
  OTG_HS_DIEPINT0 @offset 0x108 $u32 {
    18
    NAK // at 13: NAK interrupt
    BERR // at 12: Babble error interrupt
    PKTDRPSTS // at 11: Packet dropped status
    1
    BNA // at 9: Buffer not available interrupt
    TXFIFOUDRN // at 8: Transmit Fifo Underrun
    TXFE // at 7: Transmit FIFO empty
    INEPNE // at 6: IN endpoint NAK effective
    1
    ITTXFE // at 4: IN token received when TxFIFO is empty
    TOC // at 3: Timeout condition
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DIEPINT1: OTG device endpoint-1 interrupt register
  OTG_HS_DIEPINT1 @offset 0x128 $u32 {
    18
    NAK // at 13: NAK interrupt
    BERR // at 12: Babble error interrupt
    PKTDRPSTS // at 11: Packet dropped status
    1
    BNA // at 9: Buffer not available interrupt
    TXFIFOUDRN // at 8: Transmit Fifo Underrun
    TXFE // at 7: Transmit FIFO empty
    INEPNE // at 6: IN endpoint NAK effective
    1
    ITTXFE // at 4: IN token received when TxFIFO is empty
    TOC // at 3: Timeout condition
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DIEPINT2: OTG device endpoint-2 interrupt register
  OTG_HS_DIEPINT2 @offset 0x148 $u32 {
    18
    NAK // at 13: NAK interrupt
    BERR // at 12: Babble error interrupt
    PKTDRPSTS // at 11: Packet dropped status
    1
    BNA // at 9: Buffer not available interrupt
    TXFIFOUDRN // at 8: Transmit Fifo Underrun
    TXFE // at 7: Transmit FIFO empty
    INEPNE // at 6: IN endpoint NAK effective
    1
    ITTXFE // at 4: IN token received when TxFIFO is empty
    TOC // at 3: Timeout condition
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DIEPINT3: OTG device endpoint-3 interrupt register
  OTG_HS_DIEPINT3 @offset 0x168 $u32 {
    18
    NAK // at 13: NAK interrupt
    BERR // at 12: Babble error interrupt
    PKTDRPSTS // at 11: Packet dropped status
    1
    BNA // at 9: Buffer not available interrupt
    TXFIFOUDRN // at 8: Transmit Fifo Underrun
    TXFE // at 7: Transmit FIFO empty
    INEPNE // at 6: IN endpoint NAK effective
    1
    ITTXFE // at 4: IN token received when TxFIFO is empty
    TOC // at 3: Timeout condition
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DIEPINT4: OTG device endpoint-4 interrupt register
  OTG_HS_DIEPINT4 @offset 0x188 $u32 {
    18
    NAK // at 13: NAK interrupt
    BERR // at 12: Babble error interrupt
    PKTDRPSTS // at 11: Packet dropped status
    1
    BNA // at 9: Buffer not available interrupt
    TXFIFOUDRN // at 8: Transmit Fifo Underrun
    TXFE // at 7: Transmit FIFO empty
    INEPNE // at 6: IN endpoint NAK effective
    1
    ITTXFE // at 4: IN token received when TxFIFO is empty
    TOC // at 3: Timeout condition
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DIEPINT5: OTG device endpoint-5 interrupt register
  OTG_HS_DIEPINT5 @offset 0x1a8 $u32 {
    18
    NAK // at 13: NAK interrupt
    BERR // at 12: Babble error interrupt
    PKTDRPSTS // at 11: Packet dropped status
    1
    BNA // at 9: Buffer not available interrupt
    TXFIFOUDRN // at 8: Transmit Fifo Underrun
    TXFE // at 7: Transmit FIFO empty
    INEPNE // at 6: IN endpoint NAK effective
    1
    ITTXFE // at 4: IN token received when TxFIFO is empty
    TOC // at 3: Timeout condition
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DIEPINT6: OTG device endpoint-6 interrupt register
  OTG_HS_DIEPINT6 @offset 0x1c8 $u32 {
    18
    NAK // at 13: NAK interrupt
    BERR // at 12: Babble error interrupt
    PKTDRPSTS // at 11: Packet dropped status
    1
    BNA // at 9: Buffer not available interrupt
    TXFIFOUDRN // at 8: Transmit Fifo Underrun
    TXFE // at 7: Transmit FIFO empty
    INEPNE // at 6: IN endpoint NAK effective
    1
    ITTXFE // at 4: IN token received when TxFIFO is empty
    TOC // at 3: Timeout condition
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DIEPINT7: OTG device endpoint-7 interrupt register
  OTG_HS_DIEPINT7 @offset 0x1e8 $u32 {
    18
    NAK // at 13: NAK interrupt
    BERR // at 12: Babble error interrupt
    PKTDRPSTS // at 11: Packet dropped status
    1
    BNA // at 9: Buffer not available interrupt
    TXFIFOUDRN // at 8: Transmit Fifo Underrun
    TXFE // at 7: Transmit FIFO empty
    INEPNE // at 6: IN endpoint NAK effective
    1
    ITTXFE // at 4: IN token received when TxFIFO is empty
    TOC // at 3: Timeout condition
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DIEPTSIZ0: OTG_HS device IN endpoint 0 transfer size register
  OTG_HS_DIEPTSIZ0 @offset 0x110 $u32 {
    11
    PKTCNT:2 // at 19: Packet count
    12
    XFRSIZ:7 // at 0: Transfer size
  }

//---  Register OTG_HS_DIEPDMA1: OTG_HS device endpoint-1 DMA address register
  OTG_HS_DIEPDMA1 @offset 0x114 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_DIEPDMA2: OTG_HS device endpoint-2 DMA address register
  OTG_HS_DIEPDMA2 @offset 0x134 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_DIEPDMA3: OTG_HS device endpoint-3 DMA address register
  OTG_HS_DIEPDMA3 @offset 0x154 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_DIEPDMA4: OTG_HS device endpoint-4 DMA address register
  OTG_HS_DIEPDMA4 @offset 0x174 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_DIEPDMA5: OTG_HS device endpoint-5 DMA address register
  OTG_HS_DIEPDMA5 @offset 0x194 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_DTXFSTS0: OTG_HS device IN endpoint transmit FIFO status register
  OTG_HS_DTXFSTS0 @offset 0x118 @ro $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space avail
  }

//---  Register OTG_HS_DTXFSTS1: OTG_HS device IN endpoint transmit FIFO status register
  OTG_HS_DTXFSTS1 @offset 0x138 @ro $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space avail
  }

//---  Register OTG_HS_DTXFSTS2: OTG_HS device IN endpoint transmit FIFO status register
  OTG_HS_DTXFSTS2 @offset 0x158 @ro $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space avail
  }

//---  Register OTG_HS_DTXFSTS3: OTG_HS device IN endpoint transmit FIFO status register
  OTG_HS_DTXFSTS3 @offset 0x178 @ro $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space avail
  }

//---  Register OTG_HS_DTXFSTS4: OTG_HS device IN endpoint transmit FIFO status register
  OTG_HS_DTXFSTS4 @offset 0x198 @ro $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space avail
  }

//---  Register OTG_HS_DTXFSTS5: OTG_HS device IN endpoint transmit FIFO status register
  OTG_HS_DTXFSTS5 @offset 0x1b8 @ro $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space avail
  }

//---  Register OTG_HS_DIEPTSIZ1: OTG_HS device endpoint transfer size register
  OTG_HS_DIEPTSIZ1 @offset 0x130 $u32 {
    1
    MCNT:2 // at 29: Multi count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_DIEPTSIZ2: OTG_HS device endpoint transfer size register
  OTG_HS_DIEPTSIZ2 @offset 0x150 $u32 {
    1
    MCNT:2 // at 29: Multi count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_DIEPTSIZ3: OTG_HS device endpoint transfer size register
  OTG_HS_DIEPTSIZ3 @offset 0x170 $u32 {
    1
    MCNT:2 // at 29: Multi count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_DIEPTSIZ4: OTG_HS device endpoint transfer size register
  OTG_HS_DIEPTSIZ4 @offset 0x190 $u32 {
    1
    MCNT:2 // at 29: Multi count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_DIEPTSIZ5: OTG_HS device endpoint transfer size register
  OTG_HS_DIEPTSIZ5 @offset 0x1b0 $u32 {
    1
    MCNT:2 // at 29: Multi count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_DOEPCTL0: OTG_HS device control OUT endpoint 0 control register
  OTG_HS_DOEPCTL0 @offset 0x300 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    2
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    4
    Stall // at 21: STALL handshake
    SNPM // at 20: Snoop mode
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    1
    USBAEP // at 15: USB active endpoint
    13
    MPSIZ:2 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DOEPCTL1: OTG device endpoint-1 control register
  OTG_HS_DOEPCTL1 @offset 0x320 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID/Set even frame
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    4
    Stall // at 21: STALL handshake
    SNPM // at 20: Snoop mode
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even odd frame/Endpoint data PID
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DOEPCTL2: OTG device endpoint-2 control register
  OTG_HS_DOEPCTL2 @offset 0x340 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID/Set even frame
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    4
    Stall // at 21: STALL handshake
    SNPM // at 20: Snoop mode
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even odd frame/Endpoint data PID
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DOEPCTL3: OTG device endpoint-3 control register
  OTG_HS_DOEPCTL3 @offset 0x360 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID/Set even frame
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    4
    Stall // at 21: STALL handshake
    SNPM // at 20: Snoop mode
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even odd frame/Endpoint data PID
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DOEPINT0: OTG_HS device endpoint-0 interrupt register
  OTG_HS_DOEPINT0 @offset 0x308 $u32 {
    17
    NYET // at 14: NYET interrupt
    7
    B2BSTUP // at 6: Back-to-back SETUP packets received
    1
    OTEPDIS // at 4: OUT token received when endpoint disabled
    STUP // at 3: SETUP phase done
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DOEPINT1: OTG_HS device endpoint-1 interrupt register
  OTG_HS_DOEPINT1 @offset 0x328 $u32 {
    17
    NYET // at 14: NYET interrupt
    7
    B2BSTUP // at 6: Back-to-back SETUP packets received
    1
    OTEPDIS // at 4: OUT token received when endpoint disabled
    STUP // at 3: SETUP phase done
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DOEPINT2: OTG_HS device endpoint-2 interrupt register
  OTG_HS_DOEPINT2 @offset 0x348 $u32 {
    17
    NYET // at 14: NYET interrupt
    7
    B2BSTUP // at 6: Back-to-back SETUP packets received
    1
    OTEPDIS // at 4: OUT token received when endpoint disabled
    STUP // at 3: SETUP phase done
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DOEPINT3: OTG_HS device endpoint-3 interrupt register
  OTG_HS_DOEPINT3 @offset 0x368 $u32 {
    17
    NYET // at 14: NYET interrupt
    7
    B2BSTUP // at 6: Back-to-back SETUP packets received
    1
    OTEPDIS // at 4: OUT token received when endpoint disabled
    STUP // at 3: SETUP phase done
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DOEPINT4: OTG_HS device endpoint-4 interrupt register
  OTG_HS_DOEPINT4 @offset 0x388 $u32 {
    17
    NYET // at 14: NYET interrupt
    7
    B2BSTUP // at 6: Back-to-back SETUP packets received
    1
    OTEPDIS // at 4: OUT token received when endpoint disabled
    STUP // at 3: SETUP phase done
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DOEPINT5: OTG_HS device endpoint-5 interrupt register
  OTG_HS_DOEPINT5 @offset 0x3a8 $u32 {
    17
    NYET // at 14: NYET interrupt
    7
    B2BSTUP // at 6: Back-to-back SETUP packets received
    1
    OTEPDIS // at 4: OUT token received when endpoint disabled
    STUP // at 3: SETUP phase done
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DOEPINT6: OTG_HS device endpoint-6 interrupt register
  OTG_HS_DOEPINT6 @offset 0x3c8 $u32 {
    17
    NYET // at 14: NYET interrupt
    7
    B2BSTUP // at 6: Back-to-back SETUP packets received
    1
    OTEPDIS // at 4: OUT token received when endpoint disabled
    STUP // at 3: SETUP phase done
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DOEPINT7: OTG_HS device endpoint-7 interrupt register
  OTG_HS_DOEPINT7 @offset 0x3e8 $u32 {
    17
    NYET // at 14: NYET interrupt
    7
    B2BSTUP // at 6: Back-to-back SETUP packets received
    1
    OTEPDIS // at 4: OUT token received when endpoint disabled
    STUP // at 3: SETUP phase done
    1
    EPDISD // at 1: Endpoint disabled interrupt
    XFRC // at 0: Transfer completed interrupt
  }

//---  Register OTG_HS_DOEPTSIZ0: OTG_HS device endpoint-0 transfer size register
  OTG_HS_DOEPTSIZ0 @offset 0x310 $u32 {
    1
    STUPCNT:2 // at 29: SETUP packet count
    9
    PKTCNT // at 19: Packet count
    12
    XFRSIZ:7 // at 0: Transfer size
  }

//---  Register OTG_HS_DOEPTSIZ1: OTG_HS device endpoint-1 transfer size register
  OTG_HS_DOEPTSIZ1 @offset 0x330 $u32 {
    1
    RXDPID_STUPCNT:2 // at 29: Received data PID/SETUP packet count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_DOEPTSIZ2: OTG_HS device endpoint-2 transfer size register
  OTG_HS_DOEPTSIZ2 @offset 0x350 $u32 {
    1
    RXDPID_STUPCNT:2 // at 29: Received data PID/SETUP packet count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_DOEPTSIZ3: OTG_HS device endpoint-3 transfer size register
  OTG_HS_DOEPTSIZ3 @offset 0x370 $u32 {
    1
    RXDPID_STUPCNT:2 // at 29: Received data PID/SETUP packet count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_DOEPTSIZ4: OTG_HS device endpoint-4 transfer size register
  OTG_HS_DOEPTSIZ4 @offset 0x390 $u32 {
    1
    RXDPID_STUPCNT:2 // at 29: Received data PID/SETUP packet count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_DIEPTSIZ6: OTG_HS device endpoint transfer size register
  OTG_HS_DIEPTSIZ6 @offset 0x1a0 $u32 {
    1
    MCNT:2 // at 29: Multi count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_DTXFSTS6: OTG_HS device IN endpoint transmit FIFO status register
  OTG_HS_DTXFSTS6 @offset 0x1a4 $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space avail
  }

//---  Register OTG_HS_DIEPTSIZ7: OTG_HS device endpoint transfer size register
  OTG_HS_DIEPTSIZ7 @offset 0x1a8 $u32 {
    1
    MCNT:2 // at 29: Multi count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_DTXFSTS7: OTG_HS device IN endpoint transmit FIFO status register
  OTG_HS_DTXFSTS7 @offset 0x1ac $u32 {
    16
    INEPTFSAV:16 // at 0: IN endpoint TxFIFO space avail
  }

//---  Register OTG_HS_DOEPCTL4: OTG device endpoint-4 control register
  OTG_HS_DOEPCTL4 @offset 0x380 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID/Set even frame
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    4
    Stall // at 21: STALL handshake
    SNPM // at 20: Snoop mode
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even odd frame/Endpoint data PID
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DOEPCTL5: OTG device endpoint-5 control register
  OTG_HS_DOEPCTL5 @offset 0x3a0 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID/Set even frame
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    4
    Stall // at 21: STALL handshake
    SNPM // at 20: Snoop mode
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even odd frame/Endpoint data PID
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DOEPCTL6: OTG device endpoint-6 control register
  OTG_HS_DOEPCTL6 @offset 0x3c0 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID/Set even frame
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    4
    Stall // at 21: STALL handshake
    SNPM // at 20: Snoop mode
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even odd frame/Endpoint data PID
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DOEPCTL7: OTG device endpoint-7 control register
  OTG_HS_DOEPCTL7 @offset 0x3e0 $u32 {
    EPENA // at 31: Endpoint enable
    EPDIS // at 30: Endpoint disable
    SODDFRM // at 29: Set odd frame
    SD0PID_SEVNFRM // at 28: Set DATA0 PID/Set even frame
    SNAK // at 27: Set NAK
    CNAK // at 26: Clear NAK
    4
    Stall // at 21: STALL handshake
    SNPM // at 20: Snoop mode
    EPTYP:2 // at 18: Endpoint type
    NAKSTS // at 17: NAK status
    EONUM_DPID // at 16: Even odd frame/Endpoint data PID
    USBAEP // at 15: USB active endpoint
    4
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_DOEPTSIZ5: OTG_HS device endpoint-5 transfer size register
  OTG_HS_DOEPTSIZ5 @offset 0x3b0 $u32 {
    1
    RXDPID_STUPCNT:2 // at 29: Received data PID/SETUP packet count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_DOEPTSIZ6: OTG_HS device endpoint-6 transfer size register
  OTG_HS_DOEPTSIZ6 @offset 0x3d0 $u32 {
    1
    RXDPID_STUPCNT:2 // at 29: Received data PID/SETUP packet count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_DOEPTSIZ7: OTG_HS device endpoint-7 transfer size register
  OTG_HS_DOEPTSIZ7 @offset 0x3f0 $u32 {
    1
    RXDPID_STUPCNT:2 // at 29: Received data PID/SETUP packet count
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

}

//------------------------------------------------------------------------------
// Peripheral OTG_HS_GLOBAL: USB on the go high speed
//------------------------------------------------------------------------------

registers ©OTG_HS_GLOBAL @at 0x40040000 {
//---  Register OTG_HS_GOTGCTL: OTG_HS control and status register
  OTG_HS_GOTGCTL @offset 0x0 $u32 {
    12
    BSVLD // at 19: B-session valid
    ASVLD // at 18: A-session valid
    DBCT // at 17: Long/short debounce time
    CIDSTS // at 16: Connector ID status
    3
    EHEN // at 12: Embedded host enable
    DHNPEN // at 11: Device HNP enabled
    HSHNPEN // at 10: Host set HNP enable
    HNPRQ // at 9: HNP request
    HNGSCS // at 8: Host negotiation success
    6
    SRQ // at 1: Session request
    SRQSCS // at 0: Session request success
  }

//---  Register OTG_HS_GOTGINT: OTG_HS interrupt register
  OTG_HS_GOTGINT @offset 0x4 $u32 {
    11
    IDCHNG // at 20: ID input pin changed
    DBCDNE // at 19: Debounce done
    ADTOCHG // at 18: A-device timeout change
    HNGDET // at 17: Host negotiation detected
    7
    HNSSCHG // at 9: Host negotiation success status change
    SRSSCHG // at 8: Session request success status change
    5
    SEDET // at 2: Session end detected
    2
  }

//---  Register OTG_HS_GAHBCFG: OTG_HS AHB configuration register
  OTG_HS_GAHBCFG @offset 0x8 $u32 {
    23
    PTXFELVL // at 8: Periodic TxFIFO empty level
    TXFELVL // at 7: TxFIFO empty level
    1
    DMAEN // at 5: DMA enable
    HBSTLEN:4 // at 1: Burst length/type
    GINT // at 0: Global interrupt mask
  }

//---  Register OTG_HS_GUSBCFG: OTG_HS USB configuration register
  OTG_HS_GUSBCFG @offset 0xc $u32 {
    1
    FDMOD // at 30: Forced peripheral mode
    FHMOD // at 29: Forced host mode
    3
    ULPIIPD // at 25: ULPI interface protect disable
    PTCI // at 24: Indicator pass through
    PCCI // at 23: Indicator complement
    TSDPS // at 22: TermSel DLine pulsing selection
    ULPIEVBUSI // at 21: ULPI external VBUS indicator
    ULPIEVBUSD // at 20: ULPI External VBUS Drive
    ULPICSM // at 19: ULPI Clock SuspendM
    ULPIAR // at 18: ULPI Auto-resume
    ULPIFSLS // at 17: ULPI FS/LS select
    1
    PHYLPCS // at 15: PHY Low-power clock select
    1
    TRDT:4 // at 10: USB turnaround time
    HNPCAP // at 9: HNP-capable
    SRPCAP // at 8: SRP-capable
    1
    PHYSEL // at 6: USB 2.0 high-speed ULPI PHY or USB 1.1 full-speed serial transceiver select
    3
    TOCAL:3 // at 0: FS timeout calibration
  }

//---  Register OTG_HS_GRSTCTL: OTG_HS reset register
  OTG_HS_GRSTCTL @offset 0x10 $u32 {
    AHBIDL // at 31: AHB master idle
    DMAREQ // at 30: DMA request signal enabled for USB OTG HS
    19
    TXFNUM:5 // at 6: TxFIFO number
    TXFFLSH // at 5: TxFIFO flush
    RXFFLSH // at 4: RxFIFO flush
    1
    FCRST // at 2: Host frame counter reset
    HSRST // at 1: HCLK soft reset
    CSRST // at 0: Core soft reset
  }

//---  Register OTG_HS_GINTSTS: OTG_HS core interrupt register
  OTG_HS_GINTSTS @offset 0x14 $u32 {
    WKUINT // at 31: Resume/remote wakeup detected interrupt
    SRQINT // at 30: Session request/new session detected interrupt
    DISCINT // at 29: Disconnect detected interrupt
    CIDSCHG // at 28: Connector ID status change
    1
    PTXFE // at 26: Periodic TxFIFO empty
    HCINT // at 25: Host channels interrupt
    HPRTINT // at 24: Host port interrupt
    1
    DATAFSUSP // at 22: Data fetch suspended
    PXFR_INCOMPISOOUT // at 21: Incomplete periodic transfer
    IISOIXFR // at 20: Incomplete isochronous IN transfer
    OEPINT // at 19: OUT endpoint interrupt
    IEPINT // at 18: IN endpoint interrupt
    2
    EOPF // at 15: End of periodic frame interrupt
    ISOODRP // at 14: Isochronous OUT packet dropped interrupt
    ENUMDNE // at 13: Enumeration done
    USBRST // at 12: USB reset
    USBSUSP // at 11: USB suspend
    ESUSP // at 10: Early suspend
    2
    BOUTNAKEFF // at 7: Global OUT NAK effective
    GINAKEFF // at 6: Global IN nonperiodic NAK effective
    NPTXFE // at 5: Nonperiodic TxFIFO empty
    RXFLVL // at 4: RxFIFO nonempty
    SOF // at 3: Start of frame
    OTGINT // at 2: OTG interrupt
    MMIS // at 1: Mode mismatch interrupt
    CMOD // at 0: Current mode of operation
  }

//---  Register OTG_HS_GINTMSK: OTG_HS interrupt mask register
  OTG_HS_GINTMSK @offset 0x18 $u32 {
    WUIM // at 31: Resume/remote wakeup detected interrupt mask
    SRQIM // at 30: Session request/new session detected interrupt mask
    DISCINT // at 29: Disconnect detected interrupt mask
    CIDSCHGM // at 28: Connector ID status change mask
    LPMINTM // at 27: LPM interrupt mask
    PTXFEM // at 26: Periodic TxFIFO empty mask
    HCIM // at 25: Host channels interrupt mask
    PRTIM // at 24: Host port interrupt mask
    RSTDE // at 23: Reset detected interrupt mask
    FSUSPM // at 22: Data fetch suspended mask
    PXFRM_IISOOXFRM // at 21: Incomplete periodic transfer mask
    IISOIXFRM // at 20: Incomplete isochronous IN transfer mask
    OEPINT // at 19: OUT endpoints interrupt mask
    IEPINT // at 18: IN endpoints interrupt mask
    2
    EOPFM // at 15: End of periodic frame interrupt mask
    ISOODRPM // at 14: Isochronous OUT packet dropped interrupt mask
    ENUMDNEM // at 13: Enumeration done mask
    USBRST // at 12: USB reset mask
    USBSUSPM // at 11: USB suspend mask
    ESUSPM // at 10: Early suspend mask
    2
    GONAKEFFM // at 7: Global OUT NAK effective mask
    GINAKEFFM // at 6: Global nonperiodic IN NAK effective mask
    NPTXFEM // at 5: Nonperiodic TxFIFO empty mask
    RXFLVLM // at 4: Receive FIFO nonempty mask
    SOFM // at 3: Start of frame mask
    OTGINT // at 2: OTG interrupt mask
    MMISM // at 1: Mode mismatch interrupt mask
    1
  }

//---  Register OTG_HS_GRXSTSR_Host: OTG_HS Receive status debug read register (host mode)
  OTG_HS_GRXSTSR_Host @offset 0x1c @ro $u32 {
    11
    PKTSTS:4 // at 17: Packet status
    DPID:2 // at 15: Data PID
    BCNT:11 // at 4: Byte count
    CHNUM:4 // at 0: Channel number
  }

//---  Register OTG_HS_GRXSTSP_Host: OTG_HS status read and pop register (host mode)
  OTG_HS_GRXSTSP_Host @offset 0x20 @ro $u32 {
    11
    PKTSTS:4 // at 17: Packet status
    DPID:2 // at 15: Data PID
    BCNT:11 // at 4: Byte count
    CHNUM:4 // at 0: Channel number
  }

//---  Register OTG_HS_GRXFSIZ: OTG_HS Receive FIFO size register
  OTG_HS_GRXFSIZ @offset 0x24 $u32 {
    16
    RXFD:16 // at 0: RxFIFO depth
  }

//---  Register OTG_HS_HNPTXFSIZ_Host: OTG_HS nonperiodic transmit FIFO size register (host mode)
  OTG_HS_HNPTXFSIZ_Host @offset 0x28 $u32 {
    NPTXFD:16 // at 16: Nonperiodic TxFIFO depth
    NPTXFSA:16 // at 0: Nonperiodic transmit RAM start address
  }

//---  Register OTG_HS_DIEPTXF0_Device: Endpoint 0 transmit FIFO size (peripheral mode)
  OTG_HS_DIEPTXF0_Device @offset 0x28 $u32 {
    TX0FD:16 // at 16: Endpoint 0 TxFIFO depth
    TX0FSA:16 // at 0: Endpoint 0 transmit RAM start address
  }

//---  Register OTG_HS_GNPTXSTS: OTG_HS nonperiodic transmit FIFO/queue status register
  OTG_HS_GNPTXSTS @offset 0x2c @ro $u32 {
    1
    NPTXQTOP:7 // at 24: Top of the nonperiodic transmit request queue
    NPTQXSAV:8 // at 16: Nonperiodic transmit request queue space available
    NPTXFSAV:16 // at 0: Nonperiodic TxFIFO space available
  }

//---  Register OTG_HS_GCCFG: OTG_HS general core configuration register
  OTG_HS_GCCFG @offset 0x38 $u32 {
    10
    VBDEN // at 21: USB VBUS detection enable
    SDEN // at 20: Secondary detection (SD) mode enable
    PDEN // at 19: Primary detection (PD) mode enable
    DCDEN // at 18: Data contact detection (DCD) mode enable
    BCDEN // at 17: Battery charging detector (BCD) enable
    PWRDWN // at 16: Power down
    12
    PS2DET // at 3: DM pull-up detection status
    SDET // at 2: Secondary detection (SD) status
    PDET // at 1: Primary detection (PD) status
    DCDET // at 0: Data contact detection (DCD) status
  }

//---  Register OTG_HS_CID: OTG_HS core ID register
  OTG_HS_CID @offset 0x3c $u32 {
    PRODUCT_ID:32 // at 0: Product ID field
  }

//---  Register OTG_HS_HPTXFSIZ: OTG_HS Host periodic transmit FIFO size register
  OTG_HS_HPTXFSIZ @offset 0x100 $u32 {
    PTXFD:16 // at 16: Host periodic TxFIFO depth
    PTXSA:16 // at 0: Host periodic TxFIFO start address
  }

//---  Register OTG_HS_DIEPTXF1: OTG_HS device IN endpoint transmit FIFO size register
  OTG_HS_DIEPTXF1 @offset 0x104 $u32 {
    INEPTXFD:16 // at 16: IN endpoint TxFIFO depth
    INEPTXSA:16 // at 0: IN endpoint FIFOx transmit RAM start address
  }

//---  Register OTG_HS_DIEPTXF2: OTG_HS device IN endpoint transmit FIFO size register
  OTG_HS_DIEPTXF2 @offset 0x108 $u32 {
    INEPTXFD:16 // at 16: IN endpoint TxFIFO depth
    INEPTXSA:16 // at 0: IN endpoint FIFOx transmit RAM start address
  }

//---  Register OTG_HS_DIEPTXF3: OTG_HS device IN endpoint transmit FIFO size register
  OTG_HS_DIEPTXF3 @offset 0x11c $u32 {
    INEPTXFD:16 // at 16: IN endpoint TxFIFO depth
    INEPTXSA:16 // at 0: IN endpoint FIFOx transmit RAM start address
  }

//---  Register OTG_HS_DIEPTXF4: OTG_HS device IN endpoint transmit FIFO size register
  OTG_HS_DIEPTXF4 @offset 0x120 $u32 {
    INEPTXFD:16 // at 16: IN endpoint TxFIFO depth
    INEPTXSA:16 // at 0: IN endpoint FIFOx transmit RAM start address
  }

//---  Register OTG_HS_DIEPTXF5: OTG_HS device IN endpoint transmit FIFO size register
  OTG_HS_DIEPTXF5 @offset 0x124 $u32 {
    INEPTXFD:16 // at 16: IN endpoint TxFIFO depth
    INEPTXSA:16 // at 0: IN endpoint FIFOx transmit RAM start address
  }

//---  Register OTG_HS_DIEPTXF6: OTG_HS device IN endpoint transmit FIFO size register
  OTG_HS_DIEPTXF6 @offset 0x128 $u32 {
    INEPTXFD:16 // at 16: IN endpoint TxFIFO depth
    INEPTXSA:16 // at 0: IN endpoint FIFOx transmit RAM start address
  }

//---  Register OTG_HS_DIEPTXF7: OTG_HS device IN endpoint transmit FIFO size register
  OTG_HS_DIEPTXF7 @offset 0x12c $u32 {
    INEPTXFD:16 // at 16: IN endpoint TxFIFO depth
    INEPTXSA:16 // at 0: IN endpoint FIFOx transmit RAM start address
  }

//---  Register OTG_HS_GRXSTSR_Device: OTG_HS Receive status debug read register (peripheral mode mode)
  OTG_HS_GRXSTSR_Device @offset 0x1c @ro $u32 {
    7
    FRMNUM:4 // at 21: Frame number
    PKTSTS:4 // at 17: Packet status
    DPID:2 // at 15: Data PID
    BCNT:11 // at 4: Byte count
    EPNUM:4 // at 0: Endpoint number
  }

//---  Register OTG_HS_GRXSTSP_Device: OTG_HS status read and pop register (peripheral mode)
  OTG_HS_GRXSTSP_Device @offset 0x20 @ro $u32 {
    7
    FRMNUM:4 // at 21: Frame number
    PKTSTS:4 // at 17: Packet status
    DPID:2 // at 15: Data PID
    BCNT:11 // at 4: Byte count
    EPNUM:4 // at 0: Endpoint number
  }

//---  Register OTG_HS_GLPMCFG: OTG core LPM configuration register
  OTG_HS_GLPMCFG @offset 0x54 $u32 {
    3
    ENBESL // at 28: Enable best effort service latency
    LPMRCNTSTS:3 // at 25: LPM retry count status
    SNDLPM // at 24: Send LPM transaction
    LPMRCNT:3 // at 21: LPM retry count
    LPMCHIDX:4 // at 17: LPM Channel Index
    L1RSMOK // at 16: Sleep State Resume OK
    SLPSTS // at 15: Port sleep status
    LPMRST:2 // at 13: LPM response
    L1DSEN // at 12: L1 deep sleep enable
    BESLTHRS:4 // at 8: BESL threshold
    L1SSEN // at 7: L1 Shallow Sleep enable
    REMWAKE // at 6: bRemoteWake value
    BESL:4 // at 2: Best effort service latency
    LPMACK // at 1: LPM token acknowledge enable
    LPMEN // at 0: LPM support enable
  }

}

//------------------------------------------------------------------------------
// Peripheral OTG_HS_HOST: USB on the go high speed
//------------------------------------------------------------------------------

registers ©OTG_HS_HOST @at 0x40040400 {
//---  Register OTG_HS_HCFG: OTG_HS host configuration register
  OTG_HS_HCFG @offset 0x0 $u32 {
    29
    FSLSS // at 2: FS- and LS-only support
    FSLSPCS:2 // at 0: FS/LS PHY clock select
  }

//---  Register OTG_HS_HFIR: OTG_HS Host frame interval register
  OTG_HS_HFIR @offset 0x4 $u32 {
    16
    FRIVL:16 // at 0: Frame interval
  }

//---  Register OTG_HS_HFNUM: OTG_HS host frame number/frame time remaining register
  OTG_HS_HFNUM @offset 0x8 @ro $u32 {
    FTREM:16 // at 16: Frame time remaining
    FRNUM:16 // at 0: Frame number
  }

//---  Register OTG_HS_HPTXSTS: OTG_HS_Host periodic transmit FIFO/queue status register
  OTG_HS_HPTXSTS @offset 0x10 $u32 {
    PTXQTOP:8 // at 24: Top of the periodic transmit request queue
    PTXQSAV:8 // at 16: Periodic transmit request queue space available
    PTXFSAVL:16 // at 0: Periodic transmit data FIFO space available
  }

//---  Register OTG_HS_HAINT: OTG_HS Host all channels interrupt register
  OTG_HS_HAINT @offset 0x14 @ro $u32 {
    16
    HAINT:16 // at 0: Channel interrupts
  }

//---  Register OTG_HS_HAINTMSK: OTG_HS host all channels interrupt mask register
  OTG_HS_HAINTMSK @offset 0x18 $u32 {
    16
    HAINTM:16 // at 0: Channel interrupt mask
  }

//---  Register OTG_HS_HPRT: OTG_HS host port control and status register
  OTG_HS_HPRT @offset 0x40 $u32 {
    13
    PSPD:2 // at 17: Port speed
    PTCTL:4 // at 13: Port test control
    PPWR // at 12: Port power
    PLSTS:2 // at 10: Port line status
    1
    PRST // at 8: Port reset
    PSUSP // at 7: Port suspend
    PRES // at 6: Port resume
    POCCHNG // at 5: Port overcurrent change
    POCA // at 4: Port overcurrent active
    PENCHNG // at 3: Port enable/disable change
    PENA // at 2: Port enable
    PCDET // at 1: Port connect detected
    PCSTS // at 0: Port connect status
  }

//---  Register OTG_HS_HCCHAR0: OTG_HS host channel-0 characteristics register
  OTG_HS_HCCHAR0 @offset 0x100 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCCHAR1: OTG_HS host channel-1 characteristics register
  OTG_HS_HCCHAR1 @offset 0x120 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCCHAR2: OTG_HS host channel-2 characteristics register
  OTG_HS_HCCHAR2 @offset 0x140 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCCHAR3: OTG_HS host channel-3 characteristics register
  OTG_HS_HCCHAR3 @offset 0x160 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCCHAR4: OTG_HS host channel-4 characteristics register
  OTG_HS_HCCHAR4 @offset 0x180 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCCHAR5: OTG_HS host channel-5 characteristics register
  OTG_HS_HCCHAR5 @offset 0x1a0 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCCHAR6: OTG_HS host channel-6 characteristics register
  OTG_HS_HCCHAR6 @offset 0x1c0 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCCHAR7: OTG_HS host channel-7 characteristics register
  OTG_HS_HCCHAR7 @offset 0x1e0 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCCHAR8: OTG_HS host channel-8 characteristics register
  OTG_HS_HCCHAR8 @offset 0x200 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCCHAR9: OTG_HS host channel-9 characteristics register
  OTG_HS_HCCHAR9 @offset 0x220 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCCHAR10: OTG_HS host channel-10 characteristics register
  OTG_HS_HCCHAR10 @offset 0x240 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCCHAR11: OTG_HS host channel-11 characteristics register
  OTG_HS_HCCHAR11 @offset 0x260 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCSPLT0: OTG_HS host channel-0 split control register
  OTG_HS_HCSPLT0 @offset 0x104 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCSPLT1: OTG_HS host channel-1 split control register
  OTG_HS_HCSPLT1 @offset 0x124 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCSPLT2: OTG_HS host channel-2 split control register
  OTG_HS_HCSPLT2 @offset 0x144 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCSPLT3: OTG_HS host channel-3 split control register
  OTG_HS_HCSPLT3 @offset 0x164 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCSPLT4: OTG_HS host channel-4 split control register
  OTG_HS_HCSPLT4 @offset 0x184 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCSPLT5: OTG_HS host channel-5 split control register
  OTG_HS_HCSPLT5 @offset 0x1a4 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCSPLT6: OTG_HS host channel-6 split control register
  OTG_HS_HCSPLT6 @offset 0x1c4 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCSPLT7: OTG_HS host channel-7 split control register
  OTG_HS_HCSPLT7 @offset 0x1e4 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCSPLT8: OTG_HS host channel-8 split control register
  OTG_HS_HCSPLT8 @offset 0x204 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCSPLT9: OTG_HS host channel-9 split control register
  OTG_HS_HCSPLT9 @offset 0x224 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCSPLT10: OTG_HS host channel-10 split control register
  OTG_HS_HCSPLT10 @offset 0x244 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCSPLT11: OTG_HS host channel-11 split control register
  OTG_HS_HCSPLT11 @offset 0x264 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCINT0: OTG_HS host channel-11 interrupt register
  OTG_HS_HCINT0 @offset 0x108 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINT1: OTG_HS host channel-1 interrupt register
  OTG_HS_HCINT1 @offset 0x128 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINT2: OTG_HS host channel-2 interrupt register
  OTG_HS_HCINT2 @offset 0x148 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINT3: OTG_HS host channel-3 interrupt register
  OTG_HS_HCINT3 @offset 0x168 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINT4: OTG_HS host channel-4 interrupt register
  OTG_HS_HCINT4 @offset 0x188 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINT5: OTG_HS host channel-5 interrupt register
  OTG_HS_HCINT5 @offset 0x1a8 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINT6: OTG_HS host channel-6 interrupt register
  OTG_HS_HCINT6 @offset 0x1c8 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINT7: OTG_HS host channel-7 interrupt register
  OTG_HS_HCINT7 @offset 0x1e8 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINT8: OTG_HS host channel-8 interrupt register
  OTG_HS_HCINT8 @offset 0x208 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINT9: OTG_HS host channel-9 interrupt register
  OTG_HS_HCINT9 @offset 0x228 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINT10: OTG_HS host channel-10 interrupt register
  OTG_HS_HCINT10 @offset 0x248 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINT11: OTG_HS host channel-11 interrupt register
  OTG_HS_HCINT11 @offset 0x268 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINTMSK0: OTG_HS host channel-11 interrupt mask register
  OTG_HS_HCINTMSK0 @offset 0x10c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCINTMSK1: OTG_HS host channel-1 interrupt mask register
  OTG_HS_HCINTMSK1 @offset 0x12c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCINTMSK2: OTG_HS host channel-2 interrupt mask register
  OTG_HS_HCINTMSK2 @offset 0x14c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCINTMSK3: OTG_HS host channel-3 interrupt mask register
  OTG_HS_HCINTMSK3 @offset 0x16c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCINTMSK4: OTG_HS host channel-4 interrupt mask register
  OTG_HS_HCINTMSK4 @offset 0x18c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCINTMSK5: OTG_HS host channel-5 interrupt mask register
  OTG_HS_HCINTMSK5 @offset 0x1ac $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCINTMSK6: OTG_HS host channel-6 interrupt mask register
  OTG_HS_HCINTMSK6 @offset 0x1cc $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCINTMSK7: OTG_HS host channel-7 interrupt mask register
  OTG_HS_HCINTMSK7 @offset 0x1ec $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCINTMSK8: OTG_HS host channel-8 interrupt mask register
  OTG_HS_HCINTMSK8 @offset 0x20c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCINTMSK9: OTG_HS host channel-9 interrupt mask register
  OTG_HS_HCINTMSK9 @offset 0x22c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCINTMSK10: OTG_HS host channel-10 interrupt mask register
  OTG_HS_HCINTMSK10 @offset 0x24c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCINTMSK11: OTG_HS host channel-11 interrupt mask register
  OTG_HS_HCINTMSK11 @offset 0x26c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error mask
    TXERRM // at 7: Transaction error mask
    NYET // at 6: response received interrupt mask
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCTSIZ0: OTG_HS host channel-11 transfer size register
  OTG_HS_HCTSIZ0 @offset 0x110 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCTSIZ1: OTG_HS host channel-1 transfer size register
  OTG_HS_HCTSIZ1 @offset 0x130 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCTSIZ2: OTG_HS host channel-2 transfer size register
  OTG_HS_HCTSIZ2 @offset 0x150 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCTSIZ3: OTG_HS host channel-3 transfer size register
  OTG_HS_HCTSIZ3 @offset 0x170 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCTSIZ4: OTG_HS host channel-4 transfer size register
  OTG_HS_HCTSIZ4 @offset 0x190 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCTSIZ5: OTG_HS host channel-5 transfer size register
  OTG_HS_HCTSIZ5 @offset 0x1b0 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCTSIZ6: OTG_HS host channel-6 transfer size register
  OTG_HS_HCTSIZ6 @offset 0x1d0 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCTSIZ7: OTG_HS host channel-7 transfer size register
  OTG_HS_HCTSIZ7 @offset 0x1f0 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCTSIZ8: OTG_HS host channel-8 transfer size register
  OTG_HS_HCTSIZ8 @offset 0x210 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCTSIZ9: OTG_HS host channel-9 transfer size register
  OTG_HS_HCTSIZ9 @offset 0x230 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCTSIZ10: OTG_HS host channel-10 transfer size register
  OTG_HS_HCTSIZ10 @offset 0x250 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCTSIZ11: OTG_HS host channel-11 transfer size register
  OTG_HS_HCTSIZ11 @offset 0x270 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCDMA0: OTG_HS host channel-0 DMA address register
  OTG_HS_HCDMA0 @offset 0x114 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCDMA1: OTG_HS host channel-1 DMA address register
  OTG_HS_HCDMA1 @offset 0x134 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCDMA2: OTG_HS host channel-2 DMA address register
  OTG_HS_HCDMA2 @offset 0x154 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCDMA3: OTG_HS host channel-3 DMA address register
  OTG_HS_HCDMA3 @offset 0x174 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCDMA4: OTG_HS host channel-4 DMA address register
  OTG_HS_HCDMA4 @offset 0x194 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCDMA5: OTG_HS host channel-5 DMA address register
  OTG_HS_HCDMA5 @offset 0x1b4 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCDMA6: OTG_HS host channel-6 DMA address register
  OTG_HS_HCDMA6 @offset 0x1d4 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCDMA7: OTG_HS host channel-7 DMA address register
  OTG_HS_HCDMA7 @offset 0x1f4 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCDMA8: OTG_HS host channel-8 DMA address register
  OTG_HS_HCDMA8 @offset 0x214 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCDMA9: OTG_HS host channel-9 DMA address register
  OTG_HS_HCDMA9 @offset 0x234 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCDMA10: OTG_HS host channel-10 DMA address register
  OTG_HS_HCDMA10 @offset 0x254 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCDMA11: OTG_HS host channel-11 DMA address register
  OTG_HS_HCDMA11 @offset 0x274 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCCHAR12: OTG_HS host channel-12 characteristics register
  OTG_HS_HCCHAR12 @offset 0x278 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCSPLT12: OTG_HS host channel-12 split control register
  OTG_HS_HCSPLT12 @offset 0x27c $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCINT12: OTG_HS host channel-12 interrupt register
  OTG_HS_HCINT12 @offset 0x280 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINTMSK12: OTG_HS host channel-12 interrupt mask register
  OTG_HS_HCINTMSK12 @offset 0x284 $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error
    TXERRM // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCTSIZ12: OTG_HS host channel-12 transfer size register
  OTG_HS_HCTSIZ12 @offset 0x288 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCDMA12: OTG_HS host channel-12 DMA address register
  OTG_HS_HCDMA12 @offset 0x28c $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCCHAR13: OTG_HS host channel-13 characteristics register
  OTG_HS_HCCHAR13 @offset 0x290 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCSPLT13: OTG_HS host channel-13 split control register
  OTG_HS_HCSPLT13 @offset 0x294 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCINT13: OTG_HS host channel-13 interrupt register
  OTG_HS_HCINT13 @offset 0x298 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINTMSK13: OTG_HS host channel-13 interrupt mask register
  OTG_HS_HCINTMSK13 @offset 0x29c $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error
    TXERRM // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALLM // at 3: STALLM response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCTSIZ13: OTG_HS host channel-13 transfer size register
  OTG_HS_HCTSIZ13 @offset 0x2a0 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCDMA13: OTG_HS host channel-13 DMA address register
  OTG_HS_HCDMA13 @offset 0x2a4 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCCHAR14: OTG_HS host channel-14 characteristics register
  OTG_HS_HCCHAR14 @offset 0x2a8 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCSPLT14: OTG_HS host channel-14 split control register
  OTG_HS_HCSPLT14 @offset 0x2ac $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCINT14: OTG_HS host channel-14 interrupt register
  OTG_HS_HCINT14 @offset 0x2b0 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINTMSK14: OTG_HS host channel-14 interrupt mask register
  OTG_HS_HCINTMSK14 @offset 0x2b4 $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error
    TXERRM // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACKM // at 5: ACKM response received/transmitted interrupt mask
    NAKM // at 4: NAKM response received interrupt mask
    STALLM // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCTSIZ14: OTG_HS host channel-14 transfer size register
  OTG_HS_HCTSIZ14 @offset 0x2b8 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCDMA14: OTG_HS host channel-14 DMA address register
  OTG_HS_HCDMA14 @offset 0x2bc $u32 {
    DMAADDR:32 // at 0: DMA address
  }

//---  Register OTG_HS_HCCHAR15: OTG_HS host channel-15 characteristics register
  OTG_HS_HCCHAR15 @offset 0x2c0 $u32 {
    CHENA // at 31: Channel enable
    CHDIS // at 30: Channel disable
    ODDFRM // at 29: Odd frame
    DAD:7 // at 22: Device address
    MC:2 // at 20: Multi Count (MC) / Error Count (EC)
    EPTYP:2 // at 18: Endpoint type
    LSDEV // at 17: Low-speed device
    1
    EPDIR // at 15: Endpoint direction
    EPNUM:4 // at 11: Endpoint number
    MPSIZ:11 // at 0: Maximum packet size
  }

//---  Register OTG_HS_HCSPLT15: OTG_HS host channel-15 split control register
  OTG_HS_HCSPLT15 @offset 0x2c4 $u32 {
    SPLITEN // at 31: Split enable
    14
    COMPLSPLT // at 16: Do complete split
    XACTPOS:2 // at 14: XACTPOS
    HUBADDR:7 // at 7: Hub address
    PRTADDR:7 // at 0: Port address
  }

//---  Register OTG_HS_HCINT15: OTG_HS host channel-15 interrupt register
  OTG_HS_HCINT15 @offset 0x2c8 $u32 {
    21
    DTERR // at 10: Data toggle error
    FRMOR // at 9: Frame overrun
    BBERR // at 8: Babble error
    TXERR // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACK // at 5: ACK response received/transmitted interrupt
    NAK // at 4: NAK response received interrupt
    STALL // at 3: STALL response received interrupt
    AHBERR // at 2: AHB error
    CHH // at 1: Channel halted
    XFRC // at 0: Transfer completed
  }

//---  Register OTG_HS_HCINTMSK15: OTG_HS host channel-15 interrupt mask register
  OTG_HS_HCINTMSK15 @offset 0x2cc $u32 {
    21
    DTERRM // at 10: Data toggle error mask
    FRMORM // at 9: Frame overrun mask
    BBERRM // at 8: Babble error
    TXERRM // at 7: Transaction error
    NYET // at 6: Response received interrupt
    ACKM // at 5: ACK response received/transmitted interrupt mask
    NAKM // at 4: NAK response received interrupt mask
    STALL // at 3: STALL response received interrupt mask
    AHBERR // at 2: AHB error
    CHHM // at 1: Channel halted mask
    XFRCM // at 0: Transfer completed mask
  }

//---  Register OTG_HS_HCTSIZ15: OTG_HS host channel-15 transfer size register
  OTG_HS_HCTSIZ15 @offset 0x2d0 $u32 {
    1
    DPID:2 // at 29: Data PID
    PKTCNT:10 // at 19: Packet count
    XFRSIZ:19 // at 0: Transfer size
  }

//---  Register OTG_HS_HCDMA15: OTG_HS host channel-15 DMA address register
  OTG_HS_HCDMA15 @offset 0x2d4 $u32 {
    DMAADDR:32 // at 0: DMA address
  }

}

//------------------------------------------------------------------------------
// Peripheral OTG_HS_PWRCLK: USB on the go high speed
//------------------------------------------------------------------------------

registers ©OTG_HS_PWRCLK @at 0x40040e00 {
//---  Register OTG_HS_PCGCR: Power and clock gating control register
  OTG_HS_PCGCR @offset 0x0 $u32 {
    27
    PHYSUSP // at 4: PHY suspended
    2
    GATEHCLK // at 1: Gate HCLK
    STPPCLK // at 0: Stop PHY clock
  }

}

//------------------------------------------------------------------------------
// Peripheral PF: Processor features
//------------------------------------------------------------------------------

registers ©PF @at 0xe000ed78 {
//---  Register CLIDR: Cache Level ID register
  CLIDR @offset 0x0 @ro $u32 {
    2
    LoU:3 // at 27: LoU
    LoC:3 // at 24: LoC
    LoUIS:3 // at 21: LoUIS
    CL7:3 // at 18: CL7
    CL6:3 // at 15: CL6
    CL5:3 // at 12: CL5
    CL4:3 // at 9: CL4
    CL3:3 // at 6: CL3
    CL2:3 // at 3: CL2
    CL1:3 // at 0: CL1
  }

//---  Register CTR: Cache Type register
  CTR @offset 0x4 @ro $u32 {
    Format:3 // at 29: Format
    1
    CWG:4 // at 24: CWG
    ERG:4 // at 20: ERG
    DMinLine:4 // at 16: DMinLine
    12
    _IminLine:4 // at 0: IminLine
  }

//---  Register CCSIDR: Cache Size ID register
  CCSIDR @offset 0x8 @ro $u32 {
    WT // at 31: WT
    WB // at 30: WB
    RA // at 29: RA
    WA // at 28: WA
    NumSets:15 // at 13: NumSets
    Associativity:10 // at 3: Associativity
    LineSize:3 // at 0: LineSize
  }

}

//------------------------------------------------------------------------------
// Peripheral PWR: Power control
//------------------------------------------------------------------------------

registers ©PWR @at 0x40007000 {
//---  Register CR1: power control register
  CR1 @offset 0x0 $u32 {
    12
    UDEN:2 // at 18: Under-drive enable in stop mode
    ODSWEN // at 17: Over-drive switching enabled
    ODEN // at 16: Over-drive enable
    VOS:2 // at 14: Regulator voltage scaling output selection
    ADCDC1 // at 13: ADCDC1
    1
    MRUDS // at 11: Main regulator in deepsleep under-drive mode
    LPUDS // at 10: Low-power regulator in deepsleep under-drive mode
    FPDS // at 9: Flash power down in Stop mode
    DBP // at 8: Disable backup domain write protection
    PLS:3 // at 5: PVD level selection
    PVDE // at 4: Power voltage detector enable
    CSBF // at 3: Clear standby flag
    1
    PDDS // at 1: Power down deepsleep
    LPDS // at 0: Low-power deep sleep
  }

//---  Register CSR1: power control/status register
  CSR1 @offset 0x4 $u32 {
    12
    UDRDY:2 // at 18: Under-drive ready flag
    ODSWRDY // at 17: Over-drive mode switching ready
    ODRDY // at 16: Over-drive mode ready
    1
    VOSRDY // at 14: Regulator voltage scaling output selection ready bit
    4
    BRE // at 9: Backup regulator enable
    5
    BRR // at 3: Backup regulator ready
    PVDO // at 2: PVD output
    SBF // at 1: Standby flag
    WUIF // at 0: Wakeup internal flag
  }

//---  Register CR2: power control register
  CR2 @offset 0x8 $u32 {
    18
    WUPP6 // at 13: Wakeup pin polarity bit for PI11
    WUPP5 // at 12: Wakeup pin polarity bit for PI8
    WUPP4 // at 11: Wakeup pin polarity bit for PC13
    WUPP3 // at 10: Wakeup pin polarity bit for PC1
    WUPP2 // at 9: Wakeup pin polarity bit for PA2
    WUPP1 // at 8: Wakeup pin polarity bit for PA0
    2
    CWUPF6 // at 5: Clear Wakeup Pin flag for PI11
    CWUPF5 // at 4: Clear Wakeup Pin flag for PI8
    CWUPF4 // at 3: Clear Wakeup Pin flag for PC13
    CWUPF3 // at 2: Clear Wakeup Pin flag for PC1
    CWUPF2 // at 1: Clear Wakeup Pin flag for PA2
    CWUPF1 // at 0: Clear Wakeup Pin flag for PA0
  }

//---  Register CSR2: power control/status register
  CSR2 @offset 0xc $u32 {
    18
    EWUP6 // at 13: Enable Wakeup pin for PI11
    EWUP5 // at 12: Enable Wakeup pin for PI8
    EWUP4 // at 11: Enable Wakeup pin for PC13
    EWUP3 // at 10: Enable Wakeup pin for PC1
    EWUP2 // at 9: Enable Wakeup pin for PA2
    EWUP1 // at 8: Enable Wakeup pin for PA0
    2
    WUPF6 // at 5: Wakeup Pin flag for PI11
    WUPF5 // at 4: Wakeup Pin flag for PI8
    WUPF4 // at 3: Wakeup Pin flag for PC13
    WUPF3 // at 2: Wakeup Pin flag for PC1
    WUPF2 // at 1: Wakeup Pin flag for PA2
    WUPF1 // at 0: Wakeup Pin flag for PA0
  }

}

//------------------------------------------------------------------------------
// Peripheral QUADSPI: QuadSPI interface
//------------------------------------------------------------------------------

registers ©QUADSPI @at 0xa0001000 {
//---  Register CR: control register
  CR @offset 0x0 $u32 {
    PRESCALER:8 // at 24: Clock prescaler
    PMM // at 23: Polling match mode
    APMS // at 22: Automatic poll mode stop
    1
    TOIE // at 20: TimeOut interrupt enable
    SMIE // at 19: Status match interrupt enable
    FTIE // at 18: FIFO threshold interrupt enable
    TCIE // at 17: Transfer complete interrupt enable
    TEIE // at 16: Transfer error interrupt enable
    3
    FTHRES:5 // at 8: IFO threshold level
    FSEL // at 7: FLASH memory selection
    DFM // at 6: Dual-flash mode
    1
    SSHIFT // at 4: Sample shift
    TCEN // at 3: Timeout counter enable
    DMAEN // at 2: DMA enable
    ABORT // at 1: Abort request
    EN // at 0: Enable
  }

//---  Register DCR: device configuration register
  DCR @offset 0x4 $u32 {
    11
    FSIZE:5 // at 16: FLASH memory size
    5
    CSHT:3 // at 8: Chip select high time
    7
    CKMODE // at 0: Mode 0 / mode 3
  }

//---  Register SR: status register
  SR @offset 0x8 @ro $u32 {
    17
    FLEVEL:7 // at 8: FIFO level
    2
    BUSY // at 5: Busy
    TOF // at 4: Timeout flag
    SMF // at 3: Status match flag
    FTF // at 2: FIFO threshold flag
    TCF // at 1: Transfer complete flag
    TEF // at 0: Transfer error flag
  }

//---  Register FCR: flag clear register
  FCR @offset 0xc $u32 {
    27
    CTOF // at 4: Clear timeout flag
    CSMF // at 3: Clear status match flag
    1
    CTCF // at 1: Clear transfer complete flag
    CTEF // at 0: Clear transfer error flag
  }

//---  Register DLR: data length register
  DLR @offset 0x10 $u32 {
    DL:32 // at 0: Data length
  }

//---  Register CCR: communication configuration register
  CCR @offset 0x14 $u32 {
    DDRM // at 31: Double data rate mode
    DHHC // at 30: DDR hold half cycle
    1
    SIOO // at 28: Send instruction only once mode
    FMODE:2 // at 26: Functional mode
    DMODE:2 // at 24: Data mode
    1
    DCYC:5 // at 18: Number of dummy cycles
    ABSIZE:2 // at 16: Alternate bytes size
    ABMODE:2 // at 14: Alternate bytes mode
    ADSIZE:2 // at 12: Address size
    ADMODE:2 // at 10: Address mode
    IMODE:2 // at 8: Instruction mode
    INSTRUCTION:8 // at 0: Instruction
  }

//---  Register AR: address register
  AR @offset 0x18 $u32 {
    ADDRESS:32 // at 0: Address
  }

//---  Register ABR: ABR
  ABR @offset 0x1c $u32 {
    ALTERNATE:32 // at 0: ALTERNATE
  }

//---  Register DR: data register
  DR @offset 0x20 $u32 {
    DATA:32 // at 0: Data
  }

//---  Register PSMKR: polling status mask register
  PSMKR @offset 0x24 $u32 {
    MASK:32 // at 0: Status mask
  }

//---  Register PSMAR: polling status match register
  PSMAR @offset 0x28 $u32 {
    MATCH:32 // at 0: Status match
  }

//---  Register PIR: polling interval register
  PIR @offset 0x2c $u32 {
    16
    INTERVAL:16 // at 0: Polling interval
  }

//---  Register LPTR: low-power timeout register
  LPTR @offset 0x30 $u32 {
    16
    TIMEOUT:16 // at 0: Timeout period
  }

}

//------------------------------------------------------------------------------
// Peripheral RCC: Reset and clock control
//------------------------------------------------------------------------------

registers ©RCC @at 0x40023800 {
//---  Register CR: clock control register
  CR @offset 0x0 $u32 {
    4
    PLLI2SRDY // at 27: PLLI2S clock ready flag
    PLLI2SON // at 26: PLLI2S enable
    PLLRDY // at 25: Main PLL (PLL) clock ready flag
    PLLON // at 24: Main PLL (PLL) enable
    4
    CSSON // at 19: Clock security system enable
    HSEBYP // at 18: HSE clock bypass
    HSERDY // at 17: HSE clock ready flag
    HSEON // at 16: HSE clock enable
    HSICAL:8 // at 8: Internal high-speed clock calibration
    HSITRIM:5 // at 3: Internal high-speed clock trimming
    1
    HSIRDY // at 1: Internal high-speed clock ready flag
    HSION // at 0: Internal high-speed clock enable
  }

//---  Register PLLCFGR: PLL configuration register
  PLLCFGR @offset 0x4 $u32 {
    4
    PLLQ3 // at 27: Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
    PLLQ2 // at 26: Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
    PLLQ1 // at 25: Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
    PLLQ0 // at 24: Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
    1
    PLLSRC // at 22: Main PLL(PLL) and audio PLL (PLLI2S) entry clock source
    4
    PLLP1 // at 17: Main PLL (PLL) division factor for main system clock
    PLLP0 // at 16: Main PLL (PLL) division factor for main system clock
    1
    PLLN8 // at 14: Main PLL (PLL) multiplication factor for VCO
    PLLN7 // at 13: Main PLL (PLL) multiplication factor for VCO
    PLLN6 // at 12: Main PLL (PLL) multiplication factor for VCO
    PLLN5 // at 11: Main PLL (PLL) multiplication factor for VCO
    PLLN4 // at 10: Main PLL (PLL) multiplication factor for VCO
    PLLN3 // at 9: Main PLL (PLL) multiplication factor for VCO
    PLLN2 // at 8: Main PLL (PLL) multiplication factor for VCO
    PLLN1 // at 7: Main PLL (PLL) multiplication factor for VCO
    PLLN0 // at 6: Main PLL (PLL) multiplication factor for VCO
    PLLM5 // at 5: Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
    PLLM4 // at 4: Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
    PLLM3 // at 3: Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
    PLLM2 // at 2: Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
    PLLM1 // at 1: Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
    PLLM0 // at 0: Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
  }

//---  Register CFGR: clock configuration register
  CFGR @offset 0x8 $u32 {
    MCO2:2 // at 30: Microcontroller clock output 2
    MCO2PRE:3 // at 27: MCO2 prescaler
    MCO1PRE:3 // at 24: MCO1 prescaler
    I2SSRC // at 23: I2S clock selection
    MCO1:2 // at 21: Microcontroller clock output 1
    RTCPRE:5 // at 16: HSE division factor for RTC clock
    PPRE2:3 // at 13: APB high-speed prescaler (APB2)
    PPRE1:3 // at 10: APB Low speed prescaler (APB1)
    2
    HPRE:4 // at 4: AHB prescaler
    SWS1 // at 3: System clock switch status
    SWS0 // at 2: System clock switch status
    SW1 // at 1: System clock switch
    SW0 // at 0: System clock switch
  }

//---  Register CIR: clock interrupt register
  CIR @offset 0xc $u32 {
    8
    CSSC // at 23: Clock security system interrupt clear
    PLLSAIRDYC // at 22: PLLSAI Ready Interrupt Clear
    PLLI2SRDYC // at 21: PLLI2S ready interrupt clear
    PLLRDYC // at 20: Main PLL(PLL) ready interrupt clear
    HSERDYC // at 19: HSE ready interrupt clear
    HSIRDYC // at 18: HSI ready interrupt clear
    LSERDYC // at 17: LSE ready interrupt clear
    LSIRDYC // at 16: LSI ready interrupt clear
    1
    PLLSAIRDYIE // at 14: PLLSAI Ready Interrupt Enable
    PLLI2SRDYIE // at 13: PLLI2S ready interrupt enable
    PLLRDYIE // at 12: Main PLL (PLL) ready interrupt enable
    HSERDYIE // at 11: HSE ready interrupt enable
    HSIRDYIE // at 10: HSI ready interrupt enable
    LSERDYIE // at 9: LSE ready interrupt enable
    LSIRDYIE // at 8: LSI ready interrupt enable
    CSSF // at 7: Clock security system interrupt flag
    PLLSAIRDYF // at 6: PLLSAI ready interrupt flag
    PLLI2SRDYF // at 5: PLLI2S ready interrupt flag
    PLLRDYF // at 4: Main PLL (PLL) ready interrupt flag
    HSERDYF // at 3: HSE ready interrupt flag
    HSIRDYF // at 2: HSI ready interrupt flag
    LSERDYF // at 1: LSE ready interrupt flag
    LSIRDYF // at 0: LSI ready interrupt flag
  }

//---  Register AHB1RSTR: AHB1 peripheral reset register
  AHB1RSTR @offset 0x10 $u32 {
    2
    OTGHSRST // at 29: USB OTG HS module reset
    3
    ETHMACRST // at 25: Ethernet MAC reset
    1
    DMA2DRST // at 23: DMA2D reset
    DMA2RST // at 22: DMA2 reset
    DMA1RST // at 21: DMA2 reset
    8
    CRCRST // at 12: CRC reset
    1
    GPIOKRST // at 10: IO port K reset
    GPIOJRST // at 9: IO port J reset
    GPIOIRST // at 8: IO port I reset
    GPIOHRST // at 7: IO port H reset
    GPIOGRST // at 6: IO port G reset
    GPIOFRST // at 5: IO port F reset
    GPIOERST // at 4: IO port E reset
    GPIODRST // at 3: IO port D reset
    GPIOCRST // at 2: IO port C reset
    GPIOBRST // at 1: IO port B reset
    GPIOARST // at 0: IO port A reset
  }

//---  Register AHB2RSTR: AHB2 peripheral reset register
  AHB2RSTR @offset 0x14 $u32 {
    24
    OTGFSRST // at 7: USB OTG FS module reset
    RNGRST // at 6: Random number generator module reset
    HSAHRST // at 5: Hash module reset
    CRYPRST // at 4: Cryptographic module reset
    3
    DCMIRST // at 0: Camera interface reset
  }

//---  Register AHB3RSTR: AHB3 peripheral reset register
  AHB3RSTR @offset 0x18 $u32 {
    30
    QSPIRST // at 1: Quad SPI memory controller reset
    FMCRST // at 0: Flexible memory controller module reset
  }

//---  Register APB1RSTR: APB1 peripheral reset register
  APB1RSTR @offset 0x20 $u32 {
    UART8RST // at 31: UART8 reset
    UART7RST // at 30: UART7 reset
    DACRST // at 29: DAC reset
    PWRRST // at 28: Power interface reset
    CECRST // at 27: HDMI-CEC reset
    CAN2RST // at 26: CAN2 reset
    CAN1RST // at 25: CAN1 reset
    I2C4RST // at 24: I2C 4 reset
    I2C3RST // at 23: I2C3 reset
    I2C2RST // at 22: I2C 2 reset
    I2C1RST // at 21: I2C 1 reset
    UART5RST // at 20: USART 5 reset
    UART4RST // at 19: USART 4 reset
    UART3RST // at 18: USART 3 reset
    UART2RST // at 17: USART 2 reset
    SPDIFRXRST // at 16: SPDIF-RX reset
    SPI3RST // at 15: SPI 3 reset
    SPI2RST // at 14: SPI 2 reset
    CAN3RST // at 13: CAN3 reset
    1
    WWDGRST // at 11: Window watchdog reset
    1
    LPTIM1RST // at 9: Low power timer 1 reset
    TIM14RST // at 8: TIM14 reset
    TIM13RST // at 7: TIM13 reset
    TIM12RST // at 6: TIM12 reset
    TIM7RST // at 5: TIM7 reset
    TIM6RST // at 4: TIM6 reset
    TIM5RST // at 3: TIM5 reset
    TIM4RST // at 2: TIM4 reset
    TIM3RST // at 1: TIM3 reset
    TIM2RST // at 0: TIM2 reset
  }

//---  Register APB2RSTR: APB2 peripheral reset register
  APB2RSTR @offset 0x24 $u32 {
    5
    LTDCRST // at 26: LTDC reset
    2
    SAI2RST // at 23: SAI2 reset
    SAI1RST // at 22: SAI1 reset
    SPI6RST // at 21: SPI6 reset
    SPI5RST // at 20: SPI5 reset
    1
    TIM11RST // at 18: TIM11 reset
    TIM10RST // at 17: TIM10 reset
    TIM9RST // at 16: TIM9 reset
    1
    SYSCFGRST // at 14: System configuration controller reset
    SPI4RST // at 13: SPI4 reset
    SPI1RST // at 12: SPI 1 reset
    SDMMC1RST // at 11: SDMMC1 reset
    2
    ADCRST // at 8: ADC interface reset (common to all ADCs)
    2
    USART6RST // at 5: USART6 reset
    USART1RST // at 4: USART1 reset
    2
    TIM8RST // at 1: TIM8 reset
    TIM1RST // at 0: TIM1 reset
  }

//---  Register AHB1ENR: AHB1 peripheral clock register
  AHB1ENR @offset 0x30 $u32 {
    1
    OTGHSULPIEN // at 30: USB OTG HSULPI clock enable
    OTGHSEN // at 29: USB OTG HS clock enable
    ETHMACPTPEN // at 28: Ethernet PTP clock enable
    ETHMACRXEN // at 27: Ethernet Reception clock enable
    ETHMACTXEN // at 26: Ethernet Transmission clock enable
    ETHMACEN // at 25: Ethernet MAC clock enable
    1
    DMA2DEN // at 23: DMA2D clock enable
    DMA2EN // at 22: DMA2 clock enable
    DMA1EN // at 21: DMA1 clock enable
    CCMDATARAMEN // at 20: CCM data RAM clock enable
    1
    BKPSRAMEN // at 18: Backup SRAM interface clock enable
    5
    CRCEN // at 12: CRC clock enable
    1
    GPIOKEN // at 10: IO port K clock enable
    GPIOJEN // at 9: IO port J clock enable
    GPIOIEN // at 8: IO port I clock enable
    GPIOHEN // at 7: IO port H clock enable
    GPIOGEN // at 6: IO port G clock enable
    GPIOFEN // at 5: IO port F clock enable
    GPIOEEN // at 4: IO port E clock enable
    GPIODEN // at 3: IO port D clock enable
    GPIOCEN // at 2: IO port C clock enable
    GPIOBEN // at 1: IO port B clock enable
    GPIOAEN // at 0: IO port A clock enable
  }

//---  Register AHB2ENR: AHB2 peripheral clock enable register
  AHB2ENR @offset 0x34 $u32 {
    24
    OTGFSEN // at 7: USB OTG FS clock enable
    RNGEN // at 6: Random number generator clock enable
    HASHEN // at 5: Hash modules clock enable
    CRYPEN // at 4: Cryptographic modules clock enable
    3
    DCMIEN // at 0: Camera interface enable
  }

//---  Register AHB3ENR: AHB3 peripheral clock enable register
  AHB3ENR @offset 0x38 $u32 {
    30
    QSPIEN // at 1: Quad SPI memory controller clock enable
    FMCEN // at 0: Flexible memory controller module clock enable
  }

//---  Register APB1ENR: APB1 peripheral clock enable register
  APB1ENR @offset 0x40 $u32 {
    UART8ENR // at 31: UART8 clock enable
    UART7ENR // at 30: UART7 clock enable
    DACEN // at 29: DAC interface clock enable
    PWREN // at 28: Power interface clock enable
    CECEN // at 27: HDMI-CEN clock enable
    CAN2EN // at 26: CAN 2 clock enable
    CAN1EN // at 25: CAN 1 clock enable
    I2C4EN // at 24: I2C4 clock enable
    I2C3EN // at 23: I2C3 clock enable
    I2C2EN // at 22: I2C2 clock enable
    I2C1EN // at 21: I2C1 clock enable
    UART5EN // at 20: UART5 clock enable
    UART4EN // at 19: UART4 clock enable
    USART3EN // at 18: USART3 clock enable
    USART2EN // at 17: USART 2 clock enable
    SPDIFRXEN // at 16: SPDIF-RX clock enable
    SPI3EN // at 15: SPI3 clock enable
    SPI2EN // at 14: SPI2 clock enable
    CAN3EN // at 13: CAN3 clock enable
    1
    WWDGEN // at 11: Window watchdog clock enable
    1
    LPTMI1EN // at 9: Low power timer 1 clock enable
    TIM14EN // at 8: TIM14 clock enable
    TIM13EN // at 7: TIM13 clock enable
    TIM12EN // at 6: TIM12 clock enable
    TIM7EN // at 5: TIM7 clock enable
    TIM6EN // at 4: TIM6 clock enable
    TIM5EN // at 3: TIM5 clock enable
    TIM4EN // at 2: TIM4 clock enable
    TIM3EN // at 1: TIM3 clock enable
    TIM2EN // at 0: TIM2 clock enable
  }

//---  Register APB2ENR: APB2 peripheral clock enable register
  APB2ENR @offset 0x44 $u32 {
    5
    LTDCEN // at 26: LTDC clock enable
    2
    SAI2EN // at 23: SAI2 clock enable
    SAI1EN // at 22: SAI1 clock enable
    SPI6ENR // at 21: SPI6 clock enable
    SPI5ENR // at 20: SPI5 clock enable
    1
    TIM11EN // at 18: TIM11 clock enable
    TIM10EN // at 17: TIM10 clock enable
    TIM9EN // at 16: TIM9 clock enable
    1
    SYSCFGEN // at 14: System configuration controller clock enable
    SPI4ENR // at 13: SPI4 clock enable
    SPI1EN // at 12: SPI1 clock enable
    SDMMC1EN // at 11: SDMMC1 clock enable
    ADC3EN // at 10: ADC3 clock enable
    ADC2EN // at 9: ADC2 clock enable
    ADC1EN // at 8: ADC1 clock enable
    2
    USART6EN // at 5: USART6 clock enable
    USART1EN // at 4: USART1 clock enable
    2
    TIM8EN // at 1: TIM8 clock enable
    TIM1EN // at 0: TIM1 clock enable
  }

//---  Register AHB1LPENR: AHB1 peripheral clock enable in low power mode register
  AHB1LPENR @offset 0x50 $u32 {
    1
    OTGHSULPILPEN // at 30: USB OTG HS ULPI clock enable during Sleep mode
    OTGHSLPEN // at 29: USB OTG HS clock enable during Sleep mode
    ETHMACPTPLPEN // at 28: Ethernet PTP clock enable during Sleep mode
    ETHMACRXLPEN // at 27: Ethernet reception clock enable during Sleep mode
    ETHMACTXLPEN // at 26: Ethernet transmission clock enable during Sleep mode
    ETHMACLPEN // at 25: Ethernet MAC clock enable during Sleep mode
    1
    DMA2DLPEN // at 23: DMA2D clock enable during Sleep mode
    DMA2LPEN // at 22: DMA2 clock enable during Sleep mode
    DMA1LPEN // at 21: DMA1 clock enable during Sleep mode
    1
    SRAM3LPEN // at 19: SRAM 3 interface clock enable during Sleep mode
    BKPSRAMLPEN // at 18: Backup SRAM interface clock enable during Sleep mode
    SRAM2LPEN // at 17: SRAM 2 interface clock enable during Sleep mode
    SRAM1LPEN // at 16: SRAM 1interface clock enable during Sleep mode
    FLITFLPEN // at 15: Flash interface clock enable during Sleep mode
    2
    CRCLPEN // at 12: CRC clock enable during Sleep mode
    1
    GPIOKLPEN // at 10: IO port K clock enable during Sleep mode
    GPIOJLPEN // at 9: IO port J clock enable during Sleep mode
    GPIOILPEN // at 8: IO port I clock enable during Sleep mode
    GPIOHLPEN // at 7: IO port H clock enable during Sleep mode
    GPIOGLPEN // at 6: IO port G clock enable during Sleep mode
    GPIOFLPEN // at 5: IO port F clock enable during Sleep mode
    GPIOELPEN // at 4: IO port E clock enable during Sleep mode
    GPIODLPEN // at 3: IO port D clock enable during Sleep mode
    GPIOCLPEN // at 2: IO port C clock enable during Sleep mode
    GPIOBLPEN // at 1: IO port B clock enable during Sleep mode
    GPIOALPEN // at 0: IO port A clock enable during sleep mode
  }

//---  Register AHB2LPENR: AHB2 peripheral clock enable in low power mode register
  AHB2LPENR @offset 0x54 $u32 {
    24
    OTGFSLPEN // at 7: USB OTG FS clock enable during Sleep mode
    RNGLPEN // at 6: Random number generator clock enable during Sleep mode
    HASHLPEN // at 5: Hash modules clock enable during Sleep mode
    CRYPLPEN // at 4: Cryptography modules clock enable during Sleep mode
    3
    DCMILPEN // at 0: Camera interface enable during Sleep mode
  }

//---  Register AHB3LPENR: AHB3 peripheral clock enable in low power mode register
  AHB3LPENR @offset 0x58 $u32 {
    30
    QSPILPEN // at 1: Quand SPI memory controller clock enable during Sleep mode
    FMCLPEN // at 0: Flexible memory controller module clock enable during Sleep mode
  }

//---  Register APB1LPENR: APB1 peripheral clock enable in low power mode register
  APB1LPENR @offset 0x60 $u32 {
    UART8LPEN // at 31: UART8 clock enable during Sleep mode
    UART7LPEN // at 30: UART7 clock enable during Sleep mode
    DACLPEN // at 29: DAC interface clock enable during Sleep mode
    PWRLPEN // at 28: Power interface clock enable during Sleep mode
    CECLPEN // at 27: HDMI-CEN clock enable during Sleep mode
    CAN2LPEN // at 26: CAN 2 clock enable during Sleep mode
    CAN1LPEN // at 25: CAN 1 clock enable during Sleep mode
    I2C4LPEN // at 24: I2C4 clock enable during Sleep mode
    I2C3LPEN // at 23: I2C3 clock enable during Sleep mode
    I2C2LPEN // at 22: I2C2 clock enable during Sleep mode
    I2C1LPEN // at 21: I2C1 clock enable during Sleep mode
    UART5LPEN // at 20: UART5 clock enable during Sleep mode
    UART4LPEN // at 19: UART4 clock enable during Sleep mode
    USART3LPEN // at 18: USART3 clock enable during Sleep mode
    USART2LPEN // at 17: USART2 clock enable during Sleep mode
    SPDIFRXLPEN // at 16: SPDIF-RX clock enable during sleep mode
    SPI3LPEN // at 15: SPI3 clock enable during Sleep mode
    SPI2LPEN // at 14: SPI2 clock enable during Sleep mode
    2
    WWDGLPEN // at 11: Window watchdog clock enable during Sleep mode
    1
    LPTIM1LPEN // at 9: low power timer 1 clock enable during Sleep mode
    TIM14LPEN // at 8: TIM14 clock enable during Sleep mode
    TIM13LPEN // at 7: TIM13 clock enable during Sleep mode
    TIM12LPEN // at 6: TIM12 clock enable during Sleep mode
    TIM7LPEN // at 5: TIM7 clock enable during Sleep mode
    TIM6LPEN // at 4: TIM6 clock enable during Sleep mode
    TIM5LPEN // at 3: TIM5 clock enable during Sleep mode
    TIM4LPEN // at 2: TIM4 clock enable during Sleep mode
    TIM3LPEN // at 1: TIM3 clock enable during Sleep mode
    TIM2LPEN // at 0: TIM2 clock enable during Sleep mode
  }

//---  Register APB2LPENR: APB2 peripheral clock enabled in low power mode register
  APB2LPENR @offset 0x64 $u32 {
    5
    LTDCLPEN // at 26: LTDC clock enable during sleep mode
    2
    SAI2LPEN // at 23: SAI2 clock enable during sleep mode
    SAI1LPEN // at 22: SAI1 clock enable during sleep mode
    SPI6LPEN // at 21: SPI 6 clock enable during Sleep mode
    SPI5LPEN // at 20: SPI 5 clock enable during Sleep mode
    1
    TIM11LPEN // at 18: TIM11 clock enable during Sleep mode
    TIM10LPEN // at 17: TIM10 clock enable during Sleep mode
    TIM9LPEN // at 16: TIM9 clock enable during sleep mode
    1
    SYSCFGLPEN // at 14: System configuration controller clock enable during Sleep mode
    SPI4LPEN // at 13: SPI 4 clock enable during Sleep mode
    SPI1LPEN // at 12: SPI 1 clock enable during Sleep mode
    SDMMC1LPEN // at 11: SDMMC1 clock enable during Sleep mode
    ADC3LPEN // at 10: ADC 3 clock enable during Sleep mode
    ADC2LPEN // at 9: ADC2 clock enable during Sleep mode
    ADC1LPEN // at 8: ADC1 clock enable during Sleep mode
    2
    USART6LPEN // at 5: USART6 clock enable during Sleep mode
    USART1LPEN // at 4: USART1 clock enable during Sleep mode
    2
    TIM8LPEN // at 1: TIM8 clock enable during Sleep mode
    TIM1LPEN // at 0: TIM1 clock enable during Sleep mode
  }

//---  Register BDCR: Backup domain control register
  BDCR @offset 0x70 $u32 {
    15
    BDRST // at 16: Backup domain software reset
    RTCEN // at 15: RTC clock enable
    5
    RTCSEL1 // at 9: RTC clock source selection
    RTCSEL0 // at 8: RTC clock source selection
    5
    LSEBYP // at 2: External low-speed oscillator bypass
    LSERDY // at 1: External low-speed oscillator ready
    LSEON // at 0: External low-speed oscillator enable
  }

//---  Register CSR: clock control & status register
  CSR @offset 0x74 $u32 {
    LPWRRSTF // at 31: Low-power reset flag
    WWDGRSTF // at 30: Window watchdog reset flag
    WDGRSTF // at 29: Independent watchdog reset flag
    SFTRSTF // at 28: Software reset flag
    PORRSTF // at 27: POR/PDR reset flag
    PADRSTF // at 26: PIN reset flag
    BORRSTF // at 25: BOR reset flag
    RMVF // at 24: Remove reset flag
    22
    LSIRDY // at 1: Internal low-speed oscillator ready
    LSION // at 0: Internal low-speed oscillator enable
  }

//---  Register SSCGR: spread spectrum clock generation register
  SSCGR @offset 0x80 $u32 {
    SSCGEN // at 31: Spread spectrum modulation enable
    SPREADSEL // at 30: Spread Select
    2
    INCSTEP:15 // at 13: Incrementation step
    MODPER:13 // at 0: Modulation period
  }

//---  Register PLLI2SCFGR: PLLI2S configuration register
  PLLI2SCFGR @offset 0x84 $u32 {
    1
    PLLI2SR:3 // at 28: PLLI2S division factor for I2S clocks
    PLLI2SQ:4 // at 24: PLLI2S division factor for SAI1 clock
    9
    PLLI2SN:9 // at 6: PLLI2S multiplication factor for VCO
    6
  }

//---  Register PLLSAICFGR: PLL configuration register
  PLLSAICFGR @offset 0x88 $u32 {
    1
    PLLSAIR:3 // at 28: PLLSAI division factor for LCD clock
    PLLSAIQ:4 // at 24: PLLSAI division factor for SAI clock
    6
    PLLSAIP:2 // at 16: PLLSAI division factor for 48MHz clock
    1
    PLLSAIN:9 // at 6: PLLSAI division factor for VCO
    6
  }

//---  Register DKCFGR1: dedicated clocks configuration register
  DKCFGR1 @offset 0x8c $u32 {
    7
    TIMPRE // at 24: Timers clocks prescalers selection
    SAI2SEL:2 // at 22: SAI2 clock source selection
    SAI1SEL:2 // at 20: SAI1 clock source selection
    2
    PLLSAIDIVR:2 // at 16: division factor for LCD_CLK
    3
    PLLSAIDIVQ:5 // at 8: PLLSAI division factor for SAI1 clock
    3
    PLLI2SDIV:5 // at 0: PLLI2S division factor for SAI1 clock
  }

//---  Register DKCFGR2: dedicated clocks configuration register
  DKCFGR2 @offset 0x90 $u32 {
    1
    DSISEL // at 30: DSI clock source selection
    SDMMC2SEL // at 29: SDMMC2 clock source selection
    SDMMCSEL // at 28: SDMMC clock source selection
    CK48MSEL // at 27: 48MHz clock source selection
    CECSEL // at 26: HDMI-CEC clock source selection
    LPTIM1SEL:2 // at 24: Low power timer 1 clock source selection
    I2C4SEL:2 // at 22: I2C4 clock source selection
    I2C3SEL:2 // at 20: I2C3 clock source selection
    I2C2SEL:2 // at 18: I2C2 clock source selection
    I2C1SEL:2 // at 16: I2C1 clock source selection
    UART8SEL:2 // at 14: UART 8 clock source selection
    UART7SEL:2 // at 12: UART 7 clock source selection
    USART6SEL:2 // at 10: USART 6 clock source selection
    UART5SEL:2 // at 8: UART 5 clock source selection
    UART4SEL:2 // at 6: UART 4 clock source selection
    USART3SEL:2 // at 4: USART 3 clock source selection
    USART2SEL:2 // at 2: USART 2 clock source selection
    USART1SEL:2 // at 0: USART 1 clock source selection
  }

}

//------------------------------------------------------------------------------
// Peripheral RNG: Random number generator
//------------------------------------------------------------------------------

registers ©RNG @at 0x50060800 {
//---  Register CR: control register
  CR @offset 0x0 $u32 {
    28
    IE // at 3: Interrupt enable
    RNGEN // at 2: Random number generator enable
    2
  }

//---  Register SR: status register
  SR @offset 0x4 $u32 {
    25
    SEIS // at 6: Seed error interrupt status
    CEIS // at 5: Clock error interrupt status
    2
    SECS // at 2: Seed error current status
    CECS // at 1: Clock error current status
    DRDY // at 0: Data ready
  }

//---  Register DR: data register
  DR @offset 0x8 @ro $u32 {
    RNDATA:32 // at 0: Random data
  }

}

//------------------------------------------------------------------------------
// Peripheral RTC: Real-time clock
//------------------------------------------------------------------------------

registers ©RTC @at 0x40002800 {
//---  Register TR: time register
  TR @offset 0x0 $u32 {
    9
    PM // at 22: AM/PM notation
    HT:2 // at 20: Hour tens in BCD format
    HU:4 // at 16: Hour units in BCD format
    1
    MNT:3 // at 12: Minute tens in BCD format
    MNU:4 // at 8: Minute units in BCD format
    1
    ST:3 // at 4: Second tens in BCD format
    SU:4 // at 0: Second units in BCD format
  }

//---  Register DR: date register
  DR @offset 0x4 $u32 {
    8
    YT:4 // at 20: Year tens in BCD format
    YU:4 // at 16: Year units in BCD format
    WDU:3 // at 13: Week day units
    MT // at 12: Month tens in BCD format
    MU:4 // at 8: Month units in BCD format
    2
    DT:2 // at 4: Date tens in BCD format
    DU:4 // at 0: Date units in BCD format
  }

//---  Register CR: control register
  CR @offset 0x8 $u32 {
    7
    ITSE // at 24: timestamp on internal event enable
    COE // at 23: Calibration output enable
    OSEL:2 // at 21: Output selection
    POL // at 20: Output polarity
    COSEL // at 19: Calibration output selection
    BKP // at 18: Backup
    SUB1H // at 17: Subtract 1 hour (winter time change)
    ADD1H // at 16: Add 1 hour (summer time change)
    TSIE // at 15: Time-stamp interrupt enable
    WUTIE // at 14: Wakeup timer interrupt enable
    ALRBIE // at 13: Alarm B interrupt enable
    ALRAIE // at 12: Alarm A interrupt enable
    TSE // at 11: Time stamp enable
    WUTE // at 10: Wakeup timer enable
    ALRBE // at 9: Alarm B enable
    ALRAE // at 8: Alarm A enable
    1
    FMT // at 6: Hour format
    BYPSHAD // at 5: Bypass the shadow registers
    REFCKON // at 4: Reference clock detection enable (50 or 60 Hz)
    TSEDGE // at 3: Time-stamp event active edge
    WCKSEL:3 // at 0: Wakeup clock selection
  }

//---  Register ISR: initialization and status register
  ISR @offset 0xc $u32 {
    15
    RECALPF // at 16: Recalibration pending Flag
    TAMP3F // at 15: RTC_TAMP3 detection flag
    TAMP2F // at 14: RTC_TAMP2 detection flag
    TAMP1F // at 13: Tamper detection flag
    TSOVF // at 12: Time-stamp overflow flag
    TSF // at 11: Time-stamp flag
    WUTF // at 10: Wakeup timer flag
    ALRBF // at 9: Alarm B flag
    ALRAF // at 8: Alarm A flag
    INIT // at 7: Initialization mode
    INITF // at 6: Initialization flag
    RSF // at 5: Registers synchronization flag
    INITS // at 4: Initialization status flag
    SHPF // at 3: Shift operation pending
    WUTWF // at 2: Wakeup timer write flag
    ALRBWF // at 1: Alarm B write flag
    ALRAWF // at 0: Alarm A write flag
  }

//---  Register PRER: prescaler register
  PRER @offset 0x10 $u32 {
    9
    PREDIV_A:7 // at 16: Asynchronous prescaler factor
    1
    PREDIV_S:15 // at 0: Synchronous prescaler factor
  }

//---  Register WUTR: wakeup timer register
  WUTR @offset 0x14 $u32 {
    16
    WUT:16 // at 0: Wakeup auto-reload value bits
  }

//---  Register ALRMAR: alarm A register
  ALRMAR @offset 0x1c $u32 {
    MSK4 // at 31: Alarm A date mask
    WDSEL // at 30: Week day selection
    DT:2 // at 28: Date tens in BCD format
    DU:4 // at 24: Date units or day in BCD format
    MSK3 // at 23: Alarm A hours mask
    PM // at 22: AM/PM notation
    HT:2 // at 20: Hour tens in BCD format
    HU:4 // at 16: Hour units in BCD format
    MSK2 // at 15: Alarm A minutes mask
    MNT:3 // at 12: Minute tens in BCD format
    MNU:4 // at 8: Minute units in BCD format
    MSK1 // at 7: Alarm A seconds mask
    ST:3 // at 4: Second tens in BCD format
    SU:4 // at 0: Second units in BCD format
  }

//---  Register ALRMBR: alarm B register
  ALRMBR @offset 0x20 $u32 {
    MSK4 // at 31: Alarm B date mask
    WDSEL // at 30: Week day selection
    DT:2 // at 28: Date tens in BCD format
    DU:4 // at 24: Date units or day in BCD format
    MSK3 // at 23: Alarm B hours mask
    PM // at 22: AM/PM notation
    HT:2 // at 20: Hour tens in BCD format
    HU:4 // at 16: Hour units in BCD format
    MSK2 // at 15: Alarm B minutes mask
    MNT:3 // at 12: Minute tens in BCD format
    MNU:4 // at 8: Minute units in BCD format
    MSK1 // at 7: Alarm B seconds mask
    ST:3 // at 4: Second tens in BCD format
    SU:4 // at 0: Second units in BCD format
  }

//---  Register WPR: write protection register
  WPR @offset 0x24 $u32 {
    24
    KEY:8 // at 0: Write protection key
  }

//---  Register SSR: sub second register
  SSR @offset 0x28 @ro $u32 {
    16
    SS:16 // at 0: Sub second value
  }

//---  Register SHIFTR: shift control register
  SHIFTR @offset 0x2c $u32 {
    ADD1S // at 31: Add one second
    16
    SUBFS:15 // at 0: Subtract a fraction of a second
  }

//---  Register TSTR: time stamp time register
  TSTR @offset 0x30 @ro $u32 {
    9
    PM // at 22: AM/PM notation
    HT:2 // at 20: Hour tens in BCD format
    HU:4 // at 16: Hour units in BCD format
    1
    MNT:3 // at 12: Minute tens in BCD format
    MNU:4 // at 8: Minute units in BCD format
    1
    ST:3 // at 4: Second tens in BCD format
    SU:4 // at 0: Second units in BCD format
  }

//---  Register TSDR: time stamp date register
  TSDR @offset 0x34 @ro $u32 {
    16
    WDU:3 // at 13: Week day units
    MT // at 12: Month tens in BCD format
    MU:4 // at 8: Month units in BCD format
    2
    DT:2 // at 4: Date tens in BCD format
    DU:4 // at 0: Date units in BCD format
  }

//---  Register TSSSR: timestamp sub second register
  TSSSR @offset 0x38 @ro $u32 {
    16
    SS:16 // at 0: Sub second value
  }

//---  Register CALR: calibration register
  CALR @offset 0x3c $u32 {
    16
    CALP // at 15: Increase frequency of RTC by 488.5 ppm
    CALW8 // at 14: Use an 8-second calibration cycle period
    CALW16 // at 13: Use a 16-second calibration cycle period
    4
    CALM:9 // at 0: Calibration minus
  }

//---  Register TAMPCR: tamper configuration register
  TAMPCR @offset 0x40 $u32 {
    7
    TAMP3MF // at 24: Tamper 3 mask flag
    TAMP3NOERASE // at 23: Tamper 3 no erase
    TAMP3IE // at 22: Tamper 3 interrupt enable
    TAMP2MF // at 21: Tamper 2 mask flag
    TAMP2NOERASE // at 20: Tamper 2 no erase
    TAMP2IE // at 19: Tamper 2 interrupt enable
    TAMP1MF // at 18: Tamper 1 mask flag
    TAMP1NOERASE // at 17: Tamper 1 no erase
    TAMP1IE // at 16: Tamper 1 interrupt enable
    TAMPPUDIS // at 15: TAMPER pull-up disable
    TAMPPRCH:2 // at 13: Tamper precharge duration
    TAMPFLT:2 // at 11: Tamper filter count
    TAMPFREQ:3 // at 8: Tamper sampling frequency
    TAMPTS // at 7: Activate timestamp on tamper detection event
    TAMP3TRG // at 6: Active level for tamper 3
    TAMP3E // at 5: Tamper 3 detection enable
    TAMP2TRG // at 4: Active level for tamper 2
    TAMP2E // at 3: Tamper 2 detection enable
    TAMPIE // at 2: Tamper interrupt enable
    TAMP1TRG // at 1: Active level for tamper 1
    TAMP1E // at 0: Tamper 1 detection enable
  }

//---  Register ALRMASSR: alarm A sub second register
  ALRMASSR @offset 0x44 $u32 {
    4
    MASKSS:4 // at 24: Mask the most-significant bits starting at this bit
    9
    SS:15 // at 0: Sub seconds value
  }

//---  Register ALRMBSSR: alarm B sub second register
  ALRMBSSR @offset 0x48 $u32 {
    4
    MASKSS:4 // at 24: Mask the most-significant bits starting at this bit
    9
    SS:15 // at 0: Sub seconds value
  }

//---  Register OR: option register
  OR @offset 0x4c $u32 {
    30
    RTC_OUT_RMP // at 1: RTC_OUT remap
    RTC_ALARM_TYPE // at 0: RTC_ALARM on PC13 output type
  }

//---  Register BKP0R: backup register
  BKP0R @offset 0x50 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP1R: backup register
  BKP1R @offset 0x54 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP2R: backup register
  BKP2R @offset 0x58 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP3R: backup register
  BKP3R @offset 0x5c $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP4R: backup register
  BKP4R @offset 0x60 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP5R: backup register
  BKP5R @offset 0x64 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP6R: backup register
  BKP6R @offset 0x68 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP7R: backup register
  BKP7R @offset 0x6c $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP8R: backup register
  BKP8R @offset 0x70 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP9R: backup register
  BKP9R @offset 0x74 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP10R: backup register
  BKP10R @offset 0x78 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP11R: backup register
  BKP11R @offset 0x7c $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP12R: backup register
  BKP12R @offset 0x80 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP13R: backup register
  BKP13R @offset 0x84 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP14R: backup register
  BKP14R @offset 0x88 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP15R: backup register
  BKP15R @offset 0x8c $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP16R: backup register
  BKP16R @offset 0x90 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP17R: backup register
  BKP17R @offset 0x94 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP18R: backup register
  BKP18R @offset 0x98 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP19R: backup register
  BKP19R @offset 0x9c $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP20R: backup register
  BKP20R @offset 0xa0 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP21R: backup register
  BKP21R @offset 0xa4 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP22R: backup register
  BKP22R @offset 0xa8 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP23R: backup register
  BKP23R @offset 0xac $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP24R: backup register
  BKP24R @offset 0xb0 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP25R: backup register
  BKP25R @offset 0xb4 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP26R: backup register
  BKP26R @offset 0xb8 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP27R: backup register
  BKP27R @offset 0xbc $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP28R: backup register
  BKP28R @offset 0xc0 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP29R: backup register
  BKP29R @offset 0xc4 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP30R: backup register
  BKP30R @offset 0xc8 $u32 {
    BKP:32 // at 0: BKP
  }

//---  Register BKP31R: backup register
  BKP31R @offset 0xcc $u32 {
    BKP:32 // at 0: BKP
  }

}

//------------------------------------------------------------------------------
// Peripheral SAI1: Serial audio interface
//------------------------------------------------------------------------------

registers ©SAI1 @at 0x40015800 {
//---  Register BCR1: BConfiguration register 1
  BCR1 @offset 0x24 $u32 {
    8
    MCKDIV:4 // at 20: Master clock divider
    NODIV // at 19: No divider
    1
    DMAEN // at 17: DMA enable
    SAIBEN // at 16: Audio block B enable
    2
    OutDri // at 13: Output drive
    MONO // at 12: Mono mode
    SYNCEN:2 // at 10: Synchronization enable
    CKSTR // at 9: Clock strobing edge
    LSBFIRST // at 8: Least significant bit first
    DS:3 // at 5: Data size
    1
    PRTCFG:2 // at 2: Protocol configuration
    MODE:2 // at 0: Audio block mode
  }

//---  Register BCR2: BConfiguration register 2
  BCR2 @offset 0x28 $u32 {
    16
    COMP:2 // at 14: Companding mode
    CPL // at 13: Complement bit
    MUTECN:6 // at 7: Mute counter
    MUTEVAL // at 6: Mute value
    MUTE // at 5: Mute
    TRIS // at 4: Tristate management on data line
    FFLUS // at 3: FIFO flush
    FTH:3 // at 0: FIFO threshold
  }

//---  Register BFRCR: BFRCR
  BFRCR @offset 0x2c $u32 {
    13
    FSOFF // at 18: Frame synchronization offset
    FSPOL // at 17: Frame synchronization polarity
    FSDEF // at 16: Frame synchronization definition
    1
    FSALL:7 // at 8: Frame synchronization active level length
    FRL:8 // at 0: Frame length
  }

//---  Register BSLOTR: BSlot register
  BSLOTR @offset 0x30 $u32 {
    SLOTEN:16 // at 16: Slot enable
    4
    NBSLOT:4 // at 8: Number of slots in an audio frame
    SLOTSZ:2 // at 6: Slot size
    1
    FBOFF:5 // at 0: First bit offset
  }

//---  Register BIM: BInterrupt mask register2
  BIM @offset 0x34 $u32 {
    25
    LFSDETIE // at 6: Late frame synchronization detection interrupt enable
    AFSDETIE // at 5: Anticipated frame synchronization detection interrupt enable
    CNRDYIE // at 4: Codec not ready interrupt enable
    FREQIE // at 3: FIFO request interrupt enable
    WCKCFG // at 2: Wrong clock configuration interrupt enable
    MUTEDET // at 1: Mute detection interrupt enable
    OVRUDRIE // at 0: Overrun/underrun interrupt enable
  }

//---  Register BSR: BStatus register
  BSR @offset 0x38 @ro $u32 {
    13
    FLVL:3 // at 16: FIFO level threshold
    9
    LFSDET // at 6: Late frame synchronization detection
    AFSDET // at 5: Anticipated frame synchronization detection
    CNRDY // at 4: Codec not ready
    FREQ // at 3: FIFO request
    WCKCFG // at 2: Wrong clock configuration flag
    MUTEDET // at 1: Mute detection
    OVRUDR // at 0: Overrun / underrun
  }

//---  Register BCLRFR: BClear flag register
  BCLRFR @offset 0x3c $u32 {
    25
    LFSDET // at 6: Clear late frame synchronization detection flag
    CAFSDET // at 5: Clear anticipated frame synchronization detection flag
    CNRDY // at 4: Clear codec not ready flag
    1
    WCKCFG // at 2: Clear wrong clock configuration flag
    MUTEDET // at 1: Mute detection flag
    OVRUDR // at 0: Clear overrun / underrun
  }

//---  Register BDR: BData register
  BDR @offset 0x40 $u32 {
    DATA:32 // at 0: Data
  }

//---  Register ACR1: AConfiguration register 1
  ACR1 @offset 0x4 $u32 {
    8
    MCKDIV:4 // at 20: Master clock divider
    NODIV // at 19: No divider
    1
    DMAEN // at 17: DMA enable
    SAIAEN // at 16: Audio block A enable
    2
    OutDri // at 13: Output drive
    MONO // at 12: Mono mode
    SYNCEN:2 // at 10: Synchronization enable
    CKSTR // at 9: Clock strobing edge
    LSBFIRST // at 8: Least significant bit first
    DS:3 // at 5: Data size
    1
    PRTCFG:2 // at 2: Protocol configuration
    MODE:2 // at 0: Audio block mode
  }

//---  Register ACR2: AConfiguration register 2
  ACR2 @offset 0x8 $u32 {
    16
    COMP:2 // at 14: Companding mode
    CPL // at 13: Complement bit
    MUTECN:6 // at 7: Mute counter
    MUTEVAL // at 6: Mute value
    MUTE // at 5: Mute
    TRIS // at 4: Tristate management on data line
    FFLUS // at 3: FIFO flush
    FTH:3 // at 0: FIFO threshold
  }

//---  Register AFRCR: AFRCR
  AFRCR @offset 0xc $u32 {
    13
    FSOFF // at 18: Frame synchronization offset
    FSPOL // at 17: Frame synchronization polarity
    FSDEF // at 16: Frame synchronization definition
    1
    FSALL:7 // at 8: Frame synchronization active level length
    FRL:8 // at 0: Frame length
  }

//---  Register ASLOTR: ASlot register
  ASLOTR @offset 0x10 $u32 {
    SLOTEN:16 // at 16: Slot enable
    4
    NBSLOT:4 // at 8: Number of slots in an audio frame
    SLOTSZ:2 // at 6: Slot size
    1
    FBOFF:5 // at 0: First bit offset
  }

//---  Register AIM: AInterrupt mask register2
  AIM @offset 0x14 $u32 {
    25
    LFSDET // at 6: Late frame synchronization detection interrupt enable
    AFSDETIE // at 5: Anticipated frame synchronization detection interrupt enable
    CNRDYIE // at 4: Codec not ready interrupt enable
    FREQIE // at 3: FIFO request interrupt enable
    WCKCFG // at 2: Wrong clock configuration interrupt enable
    MUTEDET // at 1: Mute detection interrupt enable
    OVRUDRIE // at 0: Overrun/underrun interrupt enable
  }

//---  Register ASR: AStatus register
  ASR @offset 0x18 $u32 {
    13
    FLVL:3 // at 16: FIFO level threshold
    9
    LFSDET // at 6: Late frame synchronization detection
    AFSDET // at 5: Anticipated frame synchronization detection
    CNRDY // at 4: Codec not ready
    FREQ // at 3: FIFO request
    WCKCFG // at 2: Wrong clock configuration flag. This bit is read only.
    MUTEDET // at 1: Mute detection
    OVRUDR // at 0: Overrun / underrun
  }

//---  Register ACLRFR: AClear flag register
  ACLRFR @offset 0x1c $u32 {
    25
    LFSDET // at 6: Clear late frame synchronization detection flag
    CAFSDET // at 5: Clear anticipated frame synchronization detection flag.
    CNRDY // at 4: Clear codec not ready flag
    1
    WCKCFG // at 2: Clear wrong clock configuration flag
    MUTEDET // at 1: Mute detection flag
    OVRUDR // at 0: Clear overrun / underrun
  }

//---  Register ADR: AData register
  ADR @offset 0x20 $u32 {
    DATA:32 // at 0: Data
  }

//---  Register GCR: Global configuration register
  GCR @offset 0x0 $u32 {
    26
    SYNCOUT:2 // at 4: Synchronization outputs
    2
    SYNCIN:2 // at 0: Synchronization inputs
  }

}

//------------------------------------------------------------------------------
// Peripheral SAI2
//------------------------------------------------------------------------------

registers ©SAI2 @at 0x40015c00 {
//---  Register BCR1: BConfiguration register 1
  BCR1 @offset 0x24 $u32 {
    8
    MCKDIV:4 // at 20: Master clock divider
    NODIV // at 19: No divider
    1
    DMAEN // at 17: DMA enable
    SAIBEN // at 16: Audio block B enable
    2
    OutDri // at 13: Output drive
    MONO // at 12: Mono mode
    SYNCEN:2 // at 10: Synchronization enable
    CKSTR // at 9: Clock strobing edge
    LSBFIRST // at 8: Least significant bit first
    DS:3 // at 5: Data size
    1
    PRTCFG:2 // at 2: Protocol configuration
    MODE:2 // at 0: Audio block mode
  }

//---  Register BCR2: BConfiguration register 2
  BCR2 @offset 0x28 $u32 {
    16
    COMP:2 // at 14: Companding mode
    CPL // at 13: Complement bit
    MUTECN:6 // at 7: Mute counter
    MUTEVAL // at 6: Mute value
    MUTE // at 5: Mute
    TRIS // at 4: Tristate management on data line
    FFLUS // at 3: FIFO flush
    FTH:3 // at 0: FIFO threshold
  }

//---  Register BFRCR: BFRCR
  BFRCR @offset 0x2c $u32 {
    13
    FSOFF // at 18: Frame synchronization offset
    FSPOL // at 17: Frame synchronization polarity
    FSDEF // at 16: Frame synchronization definition
    1
    FSALL:7 // at 8: Frame synchronization active level length
    FRL:8 // at 0: Frame length
  }

//---  Register BSLOTR: BSlot register
  BSLOTR @offset 0x30 $u32 {
    SLOTEN:16 // at 16: Slot enable
    4
    NBSLOT:4 // at 8: Number of slots in an audio frame
    SLOTSZ:2 // at 6: Slot size
    1
    FBOFF:5 // at 0: First bit offset
  }

//---  Register BIM: BInterrupt mask register2
  BIM @offset 0x34 $u32 {
    25
    LFSDETIE // at 6: Late frame synchronization detection interrupt enable
    AFSDETIE // at 5: Anticipated frame synchronization detection interrupt enable
    CNRDYIE // at 4: Codec not ready interrupt enable
    FREQIE // at 3: FIFO request interrupt enable
    WCKCFG // at 2: Wrong clock configuration interrupt enable
    MUTEDET // at 1: Mute detection interrupt enable
    OVRUDRIE // at 0: Overrun/underrun interrupt enable
  }

//---  Register BSR: BStatus register
  BSR @offset 0x38 @ro $u32 {
    13
    FLVL:3 // at 16: FIFO level threshold
    9
    LFSDET // at 6: Late frame synchronization detection
    AFSDET // at 5: Anticipated frame synchronization detection
    CNRDY // at 4: Codec not ready
    FREQ // at 3: FIFO request
    WCKCFG // at 2: Wrong clock configuration flag
    MUTEDET // at 1: Mute detection
    OVRUDR // at 0: Overrun / underrun
  }

//---  Register BCLRFR: BClear flag register
  BCLRFR @offset 0x3c $u32 {
    25
    LFSDET // at 6: Clear late frame synchronization detection flag
    CAFSDET // at 5: Clear anticipated frame synchronization detection flag
    CNRDY // at 4: Clear codec not ready flag
    1
    WCKCFG // at 2: Clear wrong clock configuration flag
    MUTEDET // at 1: Mute detection flag
    OVRUDR // at 0: Clear overrun / underrun
  }

//---  Register BDR: BData register
  BDR @offset 0x40 $u32 {
    DATA:32 // at 0: Data
  }

//---  Register ACR1: AConfiguration register 1
  ACR1 @offset 0x4 $u32 {
    8
    MCKDIV:4 // at 20: Master clock divider
    NODIV // at 19: No divider
    1
    DMAEN // at 17: DMA enable
    SAIAEN // at 16: Audio block A enable
    2
    OutDri // at 13: Output drive
    MONO // at 12: Mono mode
    SYNCEN:2 // at 10: Synchronization enable
    CKSTR // at 9: Clock strobing edge
    LSBFIRST // at 8: Least significant bit first
    DS:3 // at 5: Data size
    1
    PRTCFG:2 // at 2: Protocol configuration
    MODE:2 // at 0: Audio block mode
  }

//---  Register ACR2: AConfiguration register 2
  ACR2 @offset 0x8 $u32 {
    16
    COMP:2 // at 14: Companding mode
    CPL // at 13: Complement bit
    MUTECN:6 // at 7: Mute counter
    MUTEVAL // at 6: Mute value
    MUTE // at 5: Mute
    TRIS // at 4: Tristate management on data line
    FFLUS // at 3: FIFO flush
    FTH:3 // at 0: FIFO threshold
  }

//---  Register AFRCR: AFRCR
  AFRCR @offset 0xc $u32 {
    13
    FSOFF // at 18: Frame synchronization offset
    FSPOL // at 17: Frame synchronization polarity
    FSDEF // at 16: Frame synchronization definition
    1
    FSALL:7 // at 8: Frame synchronization active level length
    FRL:8 // at 0: Frame length
  }

//---  Register ASLOTR: ASlot register
  ASLOTR @offset 0x10 $u32 {
    SLOTEN:16 // at 16: Slot enable
    4
    NBSLOT:4 // at 8: Number of slots in an audio frame
    SLOTSZ:2 // at 6: Slot size
    1
    FBOFF:5 // at 0: First bit offset
  }

//---  Register AIM: AInterrupt mask register2
  AIM @offset 0x14 $u32 {
    25
    LFSDET // at 6: Late frame synchronization detection interrupt enable
    AFSDETIE // at 5: Anticipated frame synchronization detection interrupt enable
    CNRDYIE // at 4: Codec not ready interrupt enable
    FREQIE // at 3: FIFO request interrupt enable
    WCKCFG // at 2: Wrong clock configuration interrupt enable
    MUTEDET // at 1: Mute detection interrupt enable
    OVRUDRIE // at 0: Overrun/underrun interrupt enable
  }

//---  Register ASR: AStatus register
  ASR @offset 0x18 $u32 {
    13
    FLVL:3 // at 16: FIFO level threshold
    9
    LFSDET // at 6: Late frame synchronization detection
    AFSDET // at 5: Anticipated frame synchronization detection
    CNRDY // at 4: Codec not ready
    FREQ // at 3: FIFO request
    WCKCFG // at 2: Wrong clock configuration flag. This bit is read only.
    MUTEDET // at 1: Mute detection
    OVRUDR // at 0: Overrun / underrun
  }

//---  Register ACLRFR: AClear flag register
  ACLRFR @offset 0x1c $u32 {
    25
    LFSDET // at 6: Clear late frame synchronization detection flag
    CAFSDET // at 5: Clear anticipated frame synchronization detection flag.
    CNRDY // at 4: Clear codec not ready flag
    1
    WCKCFG // at 2: Clear wrong clock configuration flag
    MUTEDET // at 1: Mute detection flag
    OVRUDR // at 0: Clear overrun / underrun
  }

//---  Register ADR: AData register
  ADR @offset 0x20 $u32 {
    DATA:32 // at 0: Data
  }

//---  Register GCR: Global configuration register
  GCR @offset 0x0 $u32 {
    26
    SYNCOUT:2 // at 4: Synchronization outputs
    2
    SYNCIN:2 // at 0: Synchronization inputs
  }

}

//------------------------------------------------------------------------------
// Peripheral SCB: System control block
//------------------------------------------------------------------------------

registers ©SCB @at 0xe000ed00 {
//---  Register CPUID: CPUID base register
  CPUID @offset 0x0 @ro $u32 {
    Implementer:8 // at 24: Implementer code
    Variant:4 // at 20: Variant number
    Constant:4 // at 16: Reads as 0xF
    PartNo:12 // at 4: Part number of the processor
    Revision:4 // at 0: Revision number
  }

//---  Register ICSR: Interrupt control and state register
  ICSR @offset 0x4 $u32 {
    NMIPENDSET // at 31: NMI set-pending bit.
    2
    PENDSVSET // at 28: PendSV set-pending bit
    PENDSVCLR // at 27: PendSV clear-pending bit
    PENDSTSET // at 26: SysTick exception set-pending bit
    PENDSTCLR // at 25: SysTick exception clear-pending bit
    2
    ISRPENDING // at 22: Interrupt pending flag
    3
    VECTPENDING:7 // at 12: Pending vector
    RETTOBASE // at 11: Return to base level
    2
    VECTACTIVE:9 // at 0: Active vector
  }

//---  Register VTOR: Vector table offset register
  VTOR @offset 0x8 $u32 {
    2
    TBLOFF:21 // at 9: Vector table base offset field
    9
  }

//---  Register AIRCR: Application interrupt and reset control register
  AIRCR @offset 0xc $u32 {
    VECTKEYSTAT:16 // at 16: Register key
    ENDIANESS // at 15: ENDIANESS
    4
    PRIGROUP:3 // at 8: PRIGROUP
    5
    SYSRESETREQ // at 2: SYSRESETREQ
    VECTCLRACTIVE // at 1: VECTCLRACTIVE
    VECTRESET // at 0: VECTRESET
  }

//---  Register SCR: System control register
  SCR @offset 0x10 $u32 {
    27
    SEVEONPEND // at 4: Send Event on Pending bit
    1
    SLEEPDEEP // at 2: SLEEPDEEP
    SLEEPONEXIT // at 1: SLEEPONEXIT
    1
  }

//---  Register CCR: Configuration and control register
  CCR @offset 0x14 $u32 {
    13
    BP // at 18: BP
    IC // at 17: IC
    DC // at 16: DC
    6
    STKALIGN // at 9: STKALIGN
    BFHFNMIGN // at 8: BFHFNMIGN
    3
    DIV_0_TRP // at 4: DIV_0_TRP
    UNALIGN__TRP // at 3: UNALIGN_ TRP
    1
    USERSETMPEND // at 1: USERSETMPEND
    NONBASETHRDENA // at 0: Configures how the processor enters Thread mode
  }

//---  Register SHPR1: System handler priority registers
  SHPR1 @offset 0x18 $u32 {
    8
    PRI_6:8 // at 16: Priority of system handler 6
    PRI_5:8 // at 8: Priority of system handler 5
    PRI_4:8 // at 0: Priority of system handler 4
  }

//---  Register SHPR2: System handler priority registers
  SHPR2 @offset 0x1c $u32 {
    PRI_11:8 // at 24: Priority of system handler 11
    24
  }

//---  Register SHPR3: System handler priority registers
  SHPR3 @offset 0x20 $u32 {
    PRI_15:8 // at 24: Priority of system handler 15
    PRI_14:8 // at 16: Priority of system handler 14
    16
  }

//---  Register SHCRS: System handler control and state register
  SHCRS @offset 0x24 $u32 {
    13
    USGFAULTENA // at 18: Usage fault enable bit
    BUSFAULTENA // at 17: Bus fault enable bit
    MEMFAULTENA // at 16: Memory management fault enable bit
    SVCALLPENDED // at 15: SVC call pending bit
    BUSFAULTPENDED // at 14: Bus fault exception pending bit
    MEMFAULTPENDED // at 13: Memory management fault exception pending bit
    USGFAULTPENDED // at 12: Usage fault exception pending bit
    SYSTICKACT // at 11: SysTick exception active bit
    PENDSVACT // at 10: PendSV exception active bit
    1
    MONITORACT // at 8: Debug monitor active bit
    SVCALLACT // at 7: SVC call active bit
    3
    USGFAULTACT // at 3: Usage fault exception active bit
    1
    BUSFAULTACT // at 1: Bus fault exception active bit
    MEMFAULTACT // at 0: Memory management fault exception active bit
  }

//---  Register CFSR_UFSR_BFSR_MMFSR: Configurable fault status register
  CFSR_UFSR_BFSR_MMFSR @offset 0x28 $u32 {
    6
    DIVBYZERO // at 25: Divide by zero usage fault
    UNALIGNED // at 24: Unaligned access usage fault
    4
    NOCP // at 19: No coprocessor usage fault.
    INVPC // at 18: Invalid PC load usage fault
    INVSTATE // at 17: Invalid state usage fault
    UNDEFINSTR // at 16: Undefined instruction usage fault
    BFARVALID // at 15: Bus Fault Address Register (BFAR) valid flag
    1
    LSPERR // at 13: Bus fault on floating-point lazy state preservation
    STKERR // at 12: Bus fault on stacking for exception entry
    UNSTKERR // at 11: Bus fault on unstacking for a return from exception
    IMPRECISERR // at 10: Imprecise data bus error
    PRECISERR // at 9: Precise data bus error
    IBUSERR // at 8: Instruction bus error
    MMARVALID // at 7: MMARVALID
    1
    MLSPERR // at 5: MLSPERR
    MSTKERR // at 4: MSTKERR
    MUNSTKERR // at 3: MUNSTKERR
    1
    DACCVIOL // at 1: DACCVIOL
    IACCVIOL // at 0: IACCVIOL
  }

//---  Register HFSR: Hard fault status register
  HFSR @offset 0x2c $u32 {
    DEBUG_VT // at 31: Reserved for Debug use
    FORCED // at 30: Forced hard fault
    28
    VECTTBL // at 1: Vector table hard fault
    1
  }

//---  Register MMFAR: Memory management fault address register
  MMFAR @offset 0x34 $u32 {
    ADDRESS:32 // at 0: Memory management fault address
  }

//---  Register BFAR: Bus fault address register
  BFAR @offset 0x38 $u32 {
    ADDRESS:32 // at 0: Bus fault address
  }

}

//------------------------------------------------------------------------------
// Peripheral SCB_ACTRL: System control block ACTLR
//------------------------------------------------------------------------------

registers ©SCB_ACTRL @at 0xe000e008 {
//---  Register ACTRL: Auxiliary control register
  ACTRL @offset 0x0 $u32 {
    19
    DISITMATBFLUSH // at 12: DISITMATBFLUSH
    DISRAMODE // at 11: DISRAMODE
    FPEXCODIS // at 10: FPEXCODIS
    7
    DISFOLD // at 2: DISFOLD
    2
  }

}

//------------------------------------------------------------------------------
// Peripheral SDMMC1: Secure digital input/output       interface
//------------------------------------------------------------------------------

registers ©SDMMC1 @at 0x40012c00 {
//---  Register POWER: power control register
  POWER @offset 0x0 $u32 {
    30
    PWRCTRL:2 // at 0: PWRCTRL
  }

//---  Register CLKCR: SDI clock control register
  CLKCR @offset 0x4 $u32 {
    17
    HWFC_EN // at 14: HW Flow Control enable
    NEGEDGE // at 13: SDIO_CK dephasing selection bit
    WIDBUS:2 // at 11: Wide bus mode enable bit
    BYPASS // at 10: Clock divider bypass enable bit
    PWRSAV // at 9: Power saving configuration bit
    CLKEN // at 8: Clock enable bit
    CLKDIV:8 // at 0: Clock divide factor
  }

//---  Register ARG: argument register
  ARG @offset 0x8 $u32 {
    CMDARG:32 // at 0: Command argument
  }

//---  Register CMD: command register
  CMD @offset 0xc $u32 {
    17
    CE_ATACMD // at 14: CE-ATA command
    nIEN // at 13: not Interrupt Enable
    ENCMDcompl // at 12: Enable CMD completion
    SDIOSuspend // at 11: SD I/O suspend command
    CPSMEN // at 10: Command path state machine (CPSM) Enable bit
    WAITPEND // at 9: CPSM Waits for ends of data transfer (CmdPend internal signal)
    WAITINT // at 8: CPSM waits for interrupt request
    WAITRESP:2 // at 6: Wait for response bits
    CMDINDEX:6 // at 0: Command index
  }

//---  Register RESPCMD: command response register
  RESPCMD @offset 0x10 @ro $u32 {
    26
    RESPCMD:6 // at 0: Response command index
  }

//---  Register RESP1: response 1..4 register
  RESP1 @offset 0x14 @ro $u32 {
    CARDSTATUS1:32 // at 0: see Table 132
  }

//---  Register RESP2: response 1..4 register
  RESP2 @offset 0x18 @ro $u32 {
    CARDSTATUS2:32 // at 0: see Table 132
  }

//---  Register RESP3: response 1..4 register
  RESP3 @offset 0x1c @ro $u32 {
    CARDSTATUS3:32 // at 0: see Table 132
  }

//---  Register RESP4: response 1..4 register
  RESP4 @offset 0x20 @ro $u32 {
    CARDSTATUS4:32 // at 0: see Table 132
  }

//---  Register DTIMER: data timer register
  DTIMER @offset 0x24 $u32 {
    DATATIME:32 // at 0: Data timeout period
  }

//---  Register DLEN: data length register
  DLEN @offset 0x28 $u32 {
    7
    DATALENGTH:25 // at 0: Data length value
  }

//---  Register DCTRL: data control register
  DCTRL @offset 0x2c $u32 {
    20
    SDIOEN // at 11: SD I/O enable functions
    RWMOD // at 10: Read wait mode
    RWSTOP // at 9: Read wait stop
    RWSTART // at 8: Read wait start
    DBLOCKSIZE:4 // at 4: Data block size
    DMAEN // at 3: DMA enable bit
    DTMODE // at 2: Data transfer mode selection 1: Stream or SDIO multibyte data transfer
    DTDIR // at 1: Data transfer direction selection
    DTEN // at 0: DTEN
  }

//---  Register DCOUNT: data counter register
  DCOUNT @offset 0x30 @ro $u32 {
    7
    DATACOUNT:25 // at 0: Data count value
  }

//---  Register STA: status register
  STA @offset 0x34 @ro $u32 {
    8
    CEATAEND // at 23: CE-ATA command completion signal received for CMD61
    SDIOIT // at 22: SDIO interrupt received
    RXDAVL // at 21: Data available in receive FIFO
    TXDAVL // at 20: Data available in transmit FIFO
    RXFIFOE // at 19: Receive FIFO empty
    TXFIFOE // at 18: Transmit FIFO empty
    RXFIFOF // at 17: Receive FIFO full
    TXFIFOF // at 16: Transmit FIFO full
    RXFIFOHF // at 15: Receive FIFO half full: there are at least 8 words in the FIFO
    TXFIFOHE // at 14: Transmit FIFO half empty: at least 8 words can be written into the FIFO
    RXACT // at 13: Data receive in progress
    TXACT // at 12: Data transmit in progress
    CMDACT // at 11: Command transfer in progress
    DBCKEND // at 10: Data block sent/received (CRC check passed)
    STBITERR // at 9: Start bit not detected on all data signals in wide bus mode
    DATAEND // at 8: Data end (data counter, SDIDCOUNT, is zero)
    CMDSENT // at 7: Command sent (no response required)
    CMDREND // at 6: Command response received (CRC check passed)
    RXOVERR // at 5: Received FIFO overrun error
    TXUNDERR // at 4: Transmit FIFO underrun error
    DTIMEOUT // at 3: Data timeout
    CTIMEOUT // at 2: Command response timeout
    DCRCFAIL // at 1: Data block sent/received (CRC check failed)
    CCRCFAIL // at 0: Command response received (CRC check failed)
  }

//---  Register ICR: interrupt clear register
  ICR @offset 0x38 $u32 {
    8
    CEATAENDC // at 23: CEATAEND flag clear bit
    SDIOITC // at 22: SDIOIT flag clear bit
    11
    DBCKENDC // at 10: DBCKEND flag clear bit
    STBITERRC // at 9: STBITERR flag clear bit
    DATAENDC // at 8: DATAEND flag clear bit
    CMDSENTC // at 7: CMDSENT flag clear bit
    CMDRENDC // at 6: CMDREND flag clear bit
    RXOVERRC // at 5: RXOVERR flag clear bit
    TXUNDERRC // at 4: TXUNDERR flag clear bit
    DTIMEOUTC // at 3: DTIMEOUT flag clear bit
    CTIMEOUTC // at 2: CTIMEOUT flag clear bit
    DCRCFAILC // at 1: DCRCFAIL flag clear bit
    CCRCFAILC // at 0: CCRCFAIL flag clear bit
  }

//---  Register MASK: mask register
  MASK @offset 0x3c $u32 {
    8
    CEATAENDIE // at 23: CE-ATA command completion signal received interrupt enable
    SDIOITIE // at 22: SDIO mode interrupt received interrupt enable
    RXDAVLIE // at 21: Data available in Rx FIFO interrupt enable
    TXDAVLIE // at 20: Data available in Tx FIFO interrupt enable
    RXFIFOEIE // at 19: Rx FIFO empty interrupt enable
    TXFIFOEIE // at 18: Tx FIFO empty interrupt enable
    RXFIFOFIE // at 17: Rx FIFO full interrupt enable
    TXFIFOFIE // at 16: Tx FIFO full interrupt enable
    RXFIFOHFIE // at 15: Rx FIFO half full interrupt enable
    TXFIFOHEIE // at 14: Tx FIFO half empty interrupt enable
    RXACTIE // at 13: Data receive acting interrupt enable
    TXACTIE // at 12: Data transmit acting interrupt enable
    CMDACTIE // at 11: Command acting interrupt enable
    DBCKENDIE // at 10: Data block end interrupt enable
    STBITERRIE // at 9: Start bit error interrupt enable
    DATAENDIE // at 8: Data end interrupt enable
    CMDSENTIE // at 7: Command sent interrupt enable
    CMDRENDIE // at 6: Command response received interrupt enable
    RXOVERRIE // at 5: Rx FIFO overrun error interrupt enable
    TXUNDERRIE // at 4: Tx FIFO underrun error interrupt enable
    DTIMEOUTIE // at 3: Data timeout interrupt enable
    CTIMEOUTIE // at 2: Command timeout interrupt enable
    DCRCFAILIE // at 1: Data CRC fail interrupt enable
    CCRCFAILIE // at 0: Command CRC fail interrupt enable
  }

//---  Register FIFOCNT: FIFO counter register
  FIFOCNT @offset 0x48 @ro $u32 {
    8
    FIFOCOUNT:24 // at 0: Remaining number of words to be written to or read from the FIFO
  }

//---  Register FIFO: data FIFO register
  FIFO @offset 0x80 $u32 {
    FIFOData:32 // at 0: Receive and transmit FIFO data
  }

}

//------------------------------------------------------------------------------
// Peripheral SDMMC2
//------------------------------------------------------------------------------

registers ©SDMMC2 @at 0x40011c00 {
//---  Register POWER: power control register
  POWER @offset 0x0 $u32 {
    30
    PWRCTRL:2 // at 0: PWRCTRL
  }

//---  Register CLKCR: SDI clock control register
  CLKCR @offset 0x4 $u32 {
    17
    HWFC_EN // at 14: HW Flow Control enable
    NEGEDGE // at 13: SDIO_CK dephasing selection bit
    WIDBUS:2 // at 11: Wide bus mode enable bit
    BYPASS // at 10: Clock divider bypass enable bit
    PWRSAV // at 9: Power saving configuration bit
    CLKEN // at 8: Clock enable bit
    CLKDIV:8 // at 0: Clock divide factor
  }

//---  Register ARG: argument register
  ARG @offset 0x8 $u32 {
    CMDARG:32 // at 0: Command argument
  }

//---  Register CMD: command register
  CMD @offset 0xc $u32 {
    17
    CE_ATACMD // at 14: CE-ATA command
    nIEN // at 13: not Interrupt Enable
    ENCMDcompl // at 12: Enable CMD completion
    SDIOSuspend // at 11: SD I/O suspend command
    CPSMEN // at 10: Command path state machine (CPSM) Enable bit
    WAITPEND // at 9: CPSM Waits for ends of data transfer (CmdPend internal signal)
    WAITINT // at 8: CPSM waits for interrupt request
    WAITRESP:2 // at 6: Wait for response bits
    CMDINDEX:6 // at 0: Command index
  }

//---  Register RESPCMD: command response register
  RESPCMD @offset 0x10 @ro $u32 {
    26
    RESPCMD:6 // at 0: Response command index
  }

//---  Register RESP1: response 1..4 register
  RESP1 @offset 0x14 @ro $u32 {
    CARDSTATUS1:32 // at 0: see Table 132
  }

//---  Register RESP2: response 1..4 register
  RESP2 @offset 0x18 @ro $u32 {
    CARDSTATUS2:32 // at 0: see Table 132
  }

//---  Register RESP3: response 1..4 register
  RESP3 @offset 0x1c @ro $u32 {
    CARDSTATUS3:32 // at 0: see Table 132
  }

//---  Register RESP4: response 1..4 register
  RESP4 @offset 0x20 @ro $u32 {
    CARDSTATUS4:32 // at 0: see Table 132
  }

//---  Register DTIMER: data timer register
  DTIMER @offset 0x24 $u32 {
    DATATIME:32 // at 0: Data timeout period
  }

//---  Register DLEN: data length register
  DLEN @offset 0x28 $u32 {
    7
    DATALENGTH:25 // at 0: Data length value
  }

//---  Register DCTRL: data control register
  DCTRL @offset 0x2c $u32 {
    20
    SDIOEN // at 11: SD I/O enable functions
    RWMOD // at 10: Read wait mode
    RWSTOP // at 9: Read wait stop
    RWSTART // at 8: Read wait start
    DBLOCKSIZE:4 // at 4: Data block size
    DMAEN // at 3: DMA enable bit
    DTMODE // at 2: Data transfer mode selection 1: Stream or SDIO multibyte data transfer
    DTDIR // at 1: Data transfer direction selection
    DTEN // at 0: DTEN
  }

//---  Register DCOUNT: data counter register
  DCOUNT @offset 0x30 @ro $u32 {
    7
    DATACOUNT:25 // at 0: Data count value
  }

//---  Register STA: status register
  STA @offset 0x34 @ro $u32 {
    8
    CEATAEND // at 23: CE-ATA command completion signal received for CMD61
    SDIOIT // at 22: SDIO interrupt received
    RXDAVL // at 21: Data available in receive FIFO
    TXDAVL // at 20: Data available in transmit FIFO
    RXFIFOE // at 19: Receive FIFO empty
    TXFIFOE // at 18: Transmit FIFO empty
    RXFIFOF // at 17: Receive FIFO full
    TXFIFOF // at 16: Transmit FIFO full
    RXFIFOHF // at 15: Receive FIFO half full: there are at least 8 words in the FIFO
    TXFIFOHE // at 14: Transmit FIFO half empty: at least 8 words can be written into the FIFO
    RXACT // at 13: Data receive in progress
    TXACT // at 12: Data transmit in progress
    CMDACT // at 11: Command transfer in progress
    DBCKEND // at 10: Data block sent/received (CRC check passed)
    STBITERR // at 9: Start bit not detected on all data signals in wide bus mode
    DATAEND // at 8: Data end (data counter, SDIDCOUNT, is zero)
    CMDSENT // at 7: Command sent (no response required)
    CMDREND // at 6: Command response received (CRC check passed)
    RXOVERR // at 5: Received FIFO overrun error
    TXUNDERR // at 4: Transmit FIFO underrun error
    DTIMEOUT // at 3: Data timeout
    CTIMEOUT // at 2: Command response timeout
    DCRCFAIL // at 1: Data block sent/received (CRC check failed)
    CCRCFAIL // at 0: Command response received (CRC check failed)
  }

//---  Register ICR: interrupt clear register
  ICR @offset 0x38 $u32 {
    8
    CEATAENDC // at 23: CEATAEND flag clear bit
    SDIOITC // at 22: SDIOIT flag clear bit
    11
    DBCKENDC // at 10: DBCKEND flag clear bit
    STBITERRC // at 9: STBITERR flag clear bit
    DATAENDC // at 8: DATAEND flag clear bit
    CMDSENTC // at 7: CMDSENT flag clear bit
    CMDRENDC // at 6: CMDREND flag clear bit
    RXOVERRC // at 5: RXOVERR flag clear bit
    TXUNDERRC // at 4: TXUNDERR flag clear bit
    DTIMEOUTC // at 3: DTIMEOUT flag clear bit
    CTIMEOUTC // at 2: CTIMEOUT flag clear bit
    DCRCFAILC // at 1: DCRCFAIL flag clear bit
    CCRCFAILC // at 0: CCRCFAIL flag clear bit
  }

//---  Register MASK: mask register
  MASK @offset 0x3c $u32 {
    8
    CEATAENDIE // at 23: CE-ATA command completion signal received interrupt enable
    SDIOITIE // at 22: SDIO mode interrupt received interrupt enable
    RXDAVLIE // at 21: Data available in Rx FIFO interrupt enable
    TXDAVLIE // at 20: Data available in Tx FIFO interrupt enable
    RXFIFOEIE // at 19: Rx FIFO empty interrupt enable
    TXFIFOEIE // at 18: Tx FIFO empty interrupt enable
    RXFIFOFIE // at 17: Rx FIFO full interrupt enable
    TXFIFOFIE // at 16: Tx FIFO full interrupt enable
    RXFIFOHFIE // at 15: Rx FIFO half full interrupt enable
    TXFIFOHEIE // at 14: Tx FIFO half empty interrupt enable
    RXACTIE // at 13: Data receive acting interrupt enable
    TXACTIE // at 12: Data transmit acting interrupt enable
    CMDACTIE // at 11: Command acting interrupt enable
    DBCKENDIE // at 10: Data block end interrupt enable
    STBITERRIE // at 9: Start bit error interrupt enable
    DATAENDIE // at 8: Data end interrupt enable
    CMDSENTIE // at 7: Command sent interrupt enable
    CMDRENDIE // at 6: Command response received interrupt enable
    RXOVERRIE // at 5: Rx FIFO overrun error interrupt enable
    TXUNDERRIE // at 4: Tx FIFO underrun error interrupt enable
    DTIMEOUTIE // at 3: Data timeout interrupt enable
    CTIMEOUTIE // at 2: Command timeout interrupt enable
    DCRCFAILIE // at 1: Data CRC fail interrupt enable
    CCRCFAILIE // at 0: Command CRC fail interrupt enable
  }

//---  Register FIFOCNT: FIFO counter register
  FIFOCNT @offset 0x48 @ro $u32 {
    8
    FIFOCOUNT:24 // at 0: Remaining number of words to be written to or read from the FIFO
  }

//---  Register FIFO: data FIFO register
  FIFO @offset 0x80 $u32 {
    FIFOData:32 // at 0: Receive and transmit FIFO data
  }

}

//------------------------------------------------------------------------------
// Peripheral SPDIFRX: Receiver Interface
//------------------------------------------------------------------------------

registers ©SPDIFRX @at 0x40004000 {
//---  Register CR: Control register
  CR @offset 0x0 $u32 {
    13
    INSEL:3 // at 16: input selection
    1
    WFA // at 14: Wait For Activity
    NBTR:2 // at 12: Maximum allowed re-tries during synchronization phase
    CHSEL // at 11: Channel Selection
    CBDMAEN // at 10: Control Buffer DMA ENable for control flow
    PTMSK // at 9: Mask of Preamble Type bits
    CUMSK // at 8: Mask of channel status and user bits
    VMSK // at 7: Mask of Validity bit
    PMSK // at 6: Mask Parity error bit
    DRFMT:2 // at 4: RX Data format
    RXSTEO // at 3: STerEO Mode
    RXDMAEN // at 2: Receiver DMA ENable for data flow
    SPDIFEN:2 // at 0: Peripheral Block Enable
  }

//---  Register IMR: Interrupt mask register
  IMR @offset 0x4 $u32 {
    25
    IFEIE // at 6: Serial Interface Error Interrupt Enable
    SYNCDIE // at 5: Synchronization Done
    SBLKIE // at 4: Synchronization Block Detected Interrupt Enable
    OVRIE // at 3: Overrun error Interrupt Enable
    PERRIE // at 2: Parity error interrupt enable
    CSRNEIE // at 1: Control Buffer Ready Interrupt Enable
    RXNEIE // at 0: RXNE interrupt enable
  }

//---  Register SR: Status register
  SR @offset 0x8 @ro $u32 {
    1
    WIDTH5:15 // at 16: Duration of 5 symbols counted with SPDIF_CLK
    7
    TERR // at 8: Time-out error
    SERR // at 7: Synchronization error
    FERR // at 6: Framing error
    SYNCD // at 5: Synchronization Done
    SBD // at 4: Synchronization Block Detected
    OVR // at 3: Overrun error
    PERR // at 2: Parity error
    CSRNE // at 1: Control Buffer register is not empty
    RXNE // at 0: Read data register not empty
  }

//---  Register IFCR: Interrupt Flag Clear register
  IFCR @offset 0xc $u32 {
    26
    SYNCDCF // at 5: Clears the Synchronization Done flag
    SBDCF // at 4: Clears the Synchronization Block Detected flag
    OVRCF // at 3: Clears the Overrun error flag
    PERRCF // at 2: Clears the Parity error flag
    2
  }

//---  Register DR: Data input register
  DR @offset 0x10 @ro $u32 {
    2
    PT:2 // at 28: Preamble Type
    C // at 27: Channel Status bit
    U // at 26: User bit
    V // at 25: Validity bit
    PE // at 24: Parity Error bit
    DR:24 // at 0: Parity Error bit
  }

//---  Register CSR: Channel Status register
  CSR @offset 0x14 @ro $u32 {
    7
    SOB // at 24: Start Of Block
    CS:8 // at 16: Channel A status information
    USR:16 // at 0: User data information
  }

//---  Register DIR: Debug Information register
  DIR @offset 0x18 @ro $u32 {
    3
    TLO:13 // at 16: Threshold LOW
    3
    THI:13 // at 0: Threshold HIGH
  }

}

//------------------------------------------------------------------------------
// Peripheral SPI1: Serial peripheral interface
//------------------------------------------------------------------------------

registers ©SPI1 @at 0x40013000 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    16
    BIDIMODE // at 15: Bidirectional data mode enable
    BIDIOE // at 14: Output enable in bidirectional mode
    CRCEN // at 13: Hardware CRC calculation enable
    CRCNEXT // at 12: CRC transfer next
    CRCL // at 11: CRC length
    RXONLY // at 10: Receive only
    SSM // at 9: Software slave management
    SSI // at 8: Internal slave select
    LSBFIRST // at 7: Frame format
    SPE // at 6: SPI enable
    BR:3 // at 3: Baud rate control
    MSTR // at 2: Master selection
    CPOL // at 1: Clock polarity
    CPHA // at 0: Clock phase
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    17
    LDMA_TX // at 14: Last DMA transfer for transmission
    LDMA_RX // at 13: Last DMA transfer for reception
    FRXTH // at 12: FIFO reception threshold
    DS:4 // at 8: Data size
    TXEIE // at 7: Tx buffer empty interrupt enable
    RXNEIE // at 6: RX buffer not empty interrupt enable
    ERRIE // at 5: Error interrupt enable
    FRF // at 4: Frame format
    NSSP // at 3: NSS pulse management
    SSOE // at 2: SS output enable
    TXDMAEN // at 1: Tx buffer DMA enable
    RXDMAEN // at 0: Rx buffer DMA enable
  }

//---  Register SR: status register
  SR @offset 0x8 $u32 {
    19
    FTLVL:2 // at 11: FIFO Transmission Level
    FRLVL:2 // at 9: FIFO reception level
    FRE // at 8: Frame format error
    BSY // at 7: Busy flag
    OVR // at 6: Overrun flag
    MODF // at 5: Mode fault
    CRCERR // at 4: CRC error flag
    UDR // at 3: Underrun flag
    CHSIDE // at 2: Channel side
    TXE // at 1: Transmit buffer empty
    RXNE // at 0: Receive buffer not empty
  }

//---  Register DR: data register
  DR @offset 0xc $u32 {
    16
    DR:16 // at 0: Data register
  }

//---  Register CRCPR: CRC polynomial register
  CRCPR @offset 0x10 $u32 {
    16
    CRCPOLY:16 // at 0: CRC polynomial register
  }

//---  Register RXCRCR: RX CRC register
  RXCRCR @offset 0x14 @ro $u32 {
    16
    RxCRC:16 // at 0: Rx CRC register
  }

//---  Register TXCRCR: TX CRC register
  TXCRCR @offset 0x18 @ro $u32 {
    16
    TxCRC:16 // at 0: Tx CRC register
  }

//---  Register I2SCFGR: I2S configuration register
  I2SCFGR @offset 0x1c $u32 {
    19
    ASTRTEN // at 12: Asynchronous start enable
    I2SMOD // at 11: I2S mode selection
    I2SE // at 10: I2S Enable
    I2SCFG:2 // at 8: I2S configuration mode
    PCMSYNC // at 7: PCM frame synchronization
    1
    I2SSTD:2 // at 4: I2S standard selection
    CKPOL // at 3: Steady state clock polarity
    DATLEN:2 // at 1: Data length to be transferred
    CHLEN // at 0: Channel length (number of bits per audio channel)
  }

//---  Register I2SPR: I2S prescaler register
  I2SPR @offset 0x20 $u32 {
    22
    MCKOE // at 9: Master clock output enable
    ODD // at 8: Odd factor for the prescaler
    I2SDIV:8 // at 0: I2S Linear prescaler
  }

}

//------------------------------------------------------------------------------
// Peripheral SPI2
//------------------------------------------------------------------------------

registers ©SPI2 @at 0x40003800 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    16
    BIDIMODE // at 15: Bidirectional data mode enable
    BIDIOE // at 14: Output enable in bidirectional mode
    CRCEN // at 13: Hardware CRC calculation enable
    CRCNEXT // at 12: CRC transfer next
    CRCL // at 11: CRC length
    RXONLY // at 10: Receive only
    SSM // at 9: Software slave management
    SSI // at 8: Internal slave select
    LSBFIRST // at 7: Frame format
    SPE // at 6: SPI enable
    BR:3 // at 3: Baud rate control
    MSTR // at 2: Master selection
    CPOL // at 1: Clock polarity
    CPHA // at 0: Clock phase
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    17
    LDMA_TX // at 14: Last DMA transfer for transmission
    LDMA_RX // at 13: Last DMA transfer for reception
    FRXTH // at 12: FIFO reception threshold
    DS:4 // at 8: Data size
    TXEIE // at 7: Tx buffer empty interrupt enable
    RXNEIE // at 6: RX buffer not empty interrupt enable
    ERRIE // at 5: Error interrupt enable
    FRF // at 4: Frame format
    NSSP // at 3: NSS pulse management
    SSOE // at 2: SS output enable
    TXDMAEN // at 1: Tx buffer DMA enable
    RXDMAEN // at 0: Rx buffer DMA enable
  }

//---  Register SR: status register
  SR @offset 0x8 $u32 {
    19
    FTLVL:2 // at 11: FIFO Transmission Level
    FRLVL:2 // at 9: FIFO reception level
    FRE // at 8: Frame format error
    BSY // at 7: Busy flag
    OVR // at 6: Overrun flag
    MODF // at 5: Mode fault
    CRCERR // at 4: CRC error flag
    UDR // at 3: Underrun flag
    CHSIDE // at 2: Channel side
    TXE // at 1: Transmit buffer empty
    RXNE // at 0: Receive buffer not empty
  }

//---  Register DR: data register
  DR @offset 0xc $u32 {
    16
    DR:16 // at 0: Data register
  }

//---  Register CRCPR: CRC polynomial register
  CRCPR @offset 0x10 $u32 {
    16
    CRCPOLY:16 // at 0: CRC polynomial register
  }

//---  Register RXCRCR: RX CRC register
  RXCRCR @offset 0x14 @ro $u32 {
    16
    RxCRC:16 // at 0: Rx CRC register
  }

//---  Register TXCRCR: TX CRC register
  TXCRCR @offset 0x18 @ro $u32 {
    16
    TxCRC:16 // at 0: Tx CRC register
  }

//---  Register I2SCFGR: I2S configuration register
  I2SCFGR @offset 0x1c $u32 {
    19
    ASTRTEN // at 12: Asynchronous start enable
    I2SMOD // at 11: I2S mode selection
    I2SE // at 10: I2S Enable
    I2SCFG:2 // at 8: I2S configuration mode
    PCMSYNC // at 7: PCM frame synchronization
    1
    I2SSTD:2 // at 4: I2S standard selection
    CKPOL // at 3: Steady state clock polarity
    DATLEN:2 // at 1: Data length to be transferred
    CHLEN // at 0: Channel length (number of bits per audio channel)
  }

//---  Register I2SPR: I2S prescaler register
  I2SPR @offset 0x20 $u32 {
    22
    MCKOE // at 9: Master clock output enable
    ODD // at 8: Odd factor for the prescaler
    I2SDIV:8 // at 0: I2S Linear prescaler
  }

}

//------------------------------------------------------------------------------
// Peripheral SPI3
//------------------------------------------------------------------------------

registers ©SPI3 @at 0x40003c00 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    16
    BIDIMODE // at 15: Bidirectional data mode enable
    BIDIOE // at 14: Output enable in bidirectional mode
    CRCEN // at 13: Hardware CRC calculation enable
    CRCNEXT // at 12: CRC transfer next
    CRCL // at 11: CRC length
    RXONLY // at 10: Receive only
    SSM // at 9: Software slave management
    SSI // at 8: Internal slave select
    LSBFIRST // at 7: Frame format
    SPE // at 6: SPI enable
    BR:3 // at 3: Baud rate control
    MSTR // at 2: Master selection
    CPOL // at 1: Clock polarity
    CPHA // at 0: Clock phase
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    17
    LDMA_TX // at 14: Last DMA transfer for transmission
    LDMA_RX // at 13: Last DMA transfer for reception
    FRXTH // at 12: FIFO reception threshold
    DS:4 // at 8: Data size
    TXEIE // at 7: Tx buffer empty interrupt enable
    RXNEIE // at 6: RX buffer not empty interrupt enable
    ERRIE // at 5: Error interrupt enable
    FRF // at 4: Frame format
    NSSP // at 3: NSS pulse management
    SSOE // at 2: SS output enable
    TXDMAEN // at 1: Tx buffer DMA enable
    RXDMAEN // at 0: Rx buffer DMA enable
  }

//---  Register SR: status register
  SR @offset 0x8 $u32 {
    19
    FTLVL:2 // at 11: FIFO Transmission Level
    FRLVL:2 // at 9: FIFO reception level
    FRE // at 8: Frame format error
    BSY // at 7: Busy flag
    OVR // at 6: Overrun flag
    MODF // at 5: Mode fault
    CRCERR // at 4: CRC error flag
    UDR // at 3: Underrun flag
    CHSIDE // at 2: Channel side
    TXE // at 1: Transmit buffer empty
    RXNE // at 0: Receive buffer not empty
  }

//---  Register DR: data register
  DR @offset 0xc $u32 {
    16
    DR:16 // at 0: Data register
  }

//---  Register CRCPR: CRC polynomial register
  CRCPR @offset 0x10 $u32 {
    16
    CRCPOLY:16 // at 0: CRC polynomial register
  }

//---  Register RXCRCR: RX CRC register
  RXCRCR @offset 0x14 @ro $u32 {
    16
    RxCRC:16 // at 0: Rx CRC register
  }

//---  Register TXCRCR: TX CRC register
  TXCRCR @offset 0x18 @ro $u32 {
    16
    TxCRC:16 // at 0: Tx CRC register
  }

//---  Register I2SCFGR: I2S configuration register
  I2SCFGR @offset 0x1c $u32 {
    19
    ASTRTEN // at 12: Asynchronous start enable
    I2SMOD // at 11: I2S mode selection
    I2SE // at 10: I2S Enable
    I2SCFG:2 // at 8: I2S configuration mode
    PCMSYNC // at 7: PCM frame synchronization
    1
    I2SSTD:2 // at 4: I2S standard selection
    CKPOL // at 3: Steady state clock polarity
    DATLEN:2 // at 1: Data length to be transferred
    CHLEN // at 0: Channel length (number of bits per audio channel)
  }

//---  Register I2SPR: I2S prescaler register
  I2SPR @offset 0x20 $u32 {
    22
    MCKOE // at 9: Master clock output enable
    ODD // at 8: Odd factor for the prescaler
    I2SDIV:8 // at 0: I2S Linear prescaler
  }

}

//------------------------------------------------------------------------------
// Peripheral SPI4
//------------------------------------------------------------------------------

registers ©SPI4 @at 0x40013400 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    16
    BIDIMODE // at 15: Bidirectional data mode enable
    BIDIOE // at 14: Output enable in bidirectional mode
    CRCEN // at 13: Hardware CRC calculation enable
    CRCNEXT // at 12: CRC transfer next
    CRCL // at 11: CRC length
    RXONLY // at 10: Receive only
    SSM // at 9: Software slave management
    SSI // at 8: Internal slave select
    LSBFIRST // at 7: Frame format
    SPE // at 6: SPI enable
    BR:3 // at 3: Baud rate control
    MSTR // at 2: Master selection
    CPOL // at 1: Clock polarity
    CPHA // at 0: Clock phase
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    17
    LDMA_TX // at 14: Last DMA transfer for transmission
    LDMA_RX // at 13: Last DMA transfer for reception
    FRXTH // at 12: FIFO reception threshold
    DS:4 // at 8: Data size
    TXEIE // at 7: Tx buffer empty interrupt enable
    RXNEIE // at 6: RX buffer not empty interrupt enable
    ERRIE // at 5: Error interrupt enable
    FRF // at 4: Frame format
    NSSP // at 3: NSS pulse management
    SSOE // at 2: SS output enable
    TXDMAEN // at 1: Tx buffer DMA enable
    RXDMAEN // at 0: Rx buffer DMA enable
  }

//---  Register SR: status register
  SR @offset 0x8 $u32 {
    19
    FTLVL:2 // at 11: FIFO Transmission Level
    FRLVL:2 // at 9: FIFO reception level
    FRE // at 8: Frame format error
    BSY // at 7: Busy flag
    OVR // at 6: Overrun flag
    MODF // at 5: Mode fault
    CRCERR // at 4: CRC error flag
    UDR // at 3: Underrun flag
    CHSIDE // at 2: Channel side
    TXE // at 1: Transmit buffer empty
    RXNE // at 0: Receive buffer not empty
  }

//---  Register DR: data register
  DR @offset 0xc $u32 {
    16
    DR:16 // at 0: Data register
  }

//---  Register CRCPR: CRC polynomial register
  CRCPR @offset 0x10 $u32 {
    16
    CRCPOLY:16 // at 0: CRC polynomial register
  }

//---  Register RXCRCR: RX CRC register
  RXCRCR @offset 0x14 @ro $u32 {
    16
    RxCRC:16 // at 0: Rx CRC register
  }

//---  Register TXCRCR: TX CRC register
  TXCRCR @offset 0x18 @ro $u32 {
    16
    TxCRC:16 // at 0: Tx CRC register
  }

//---  Register I2SCFGR: I2S configuration register
  I2SCFGR @offset 0x1c $u32 {
    19
    ASTRTEN // at 12: Asynchronous start enable
    I2SMOD // at 11: I2S mode selection
    I2SE // at 10: I2S Enable
    I2SCFG:2 // at 8: I2S configuration mode
    PCMSYNC // at 7: PCM frame synchronization
    1
    I2SSTD:2 // at 4: I2S standard selection
    CKPOL // at 3: Steady state clock polarity
    DATLEN:2 // at 1: Data length to be transferred
    CHLEN // at 0: Channel length (number of bits per audio channel)
  }

//---  Register I2SPR: I2S prescaler register
  I2SPR @offset 0x20 $u32 {
    22
    MCKOE // at 9: Master clock output enable
    ODD // at 8: Odd factor for the prescaler
    I2SDIV:8 // at 0: I2S Linear prescaler
  }

}

//------------------------------------------------------------------------------
// Peripheral SPI5
//------------------------------------------------------------------------------

registers ©SPI5 @at 0x40015000 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    16
    BIDIMODE // at 15: Bidirectional data mode enable
    BIDIOE // at 14: Output enable in bidirectional mode
    CRCEN // at 13: Hardware CRC calculation enable
    CRCNEXT // at 12: CRC transfer next
    CRCL // at 11: CRC length
    RXONLY // at 10: Receive only
    SSM // at 9: Software slave management
    SSI // at 8: Internal slave select
    LSBFIRST // at 7: Frame format
    SPE // at 6: SPI enable
    BR:3 // at 3: Baud rate control
    MSTR // at 2: Master selection
    CPOL // at 1: Clock polarity
    CPHA // at 0: Clock phase
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    17
    LDMA_TX // at 14: Last DMA transfer for transmission
    LDMA_RX // at 13: Last DMA transfer for reception
    FRXTH // at 12: FIFO reception threshold
    DS:4 // at 8: Data size
    TXEIE // at 7: Tx buffer empty interrupt enable
    RXNEIE // at 6: RX buffer not empty interrupt enable
    ERRIE // at 5: Error interrupt enable
    FRF // at 4: Frame format
    NSSP // at 3: NSS pulse management
    SSOE // at 2: SS output enable
    TXDMAEN // at 1: Tx buffer DMA enable
    RXDMAEN // at 0: Rx buffer DMA enable
  }

//---  Register SR: status register
  SR @offset 0x8 $u32 {
    19
    FTLVL:2 // at 11: FIFO Transmission Level
    FRLVL:2 // at 9: FIFO reception level
    FRE // at 8: Frame format error
    BSY // at 7: Busy flag
    OVR // at 6: Overrun flag
    MODF // at 5: Mode fault
    CRCERR // at 4: CRC error flag
    UDR // at 3: Underrun flag
    CHSIDE // at 2: Channel side
    TXE // at 1: Transmit buffer empty
    RXNE // at 0: Receive buffer not empty
  }

//---  Register DR: data register
  DR @offset 0xc $u32 {
    16
    DR:16 // at 0: Data register
  }

//---  Register CRCPR: CRC polynomial register
  CRCPR @offset 0x10 $u32 {
    16
    CRCPOLY:16 // at 0: CRC polynomial register
  }

//---  Register RXCRCR: RX CRC register
  RXCRCR @offset 0x14 @ro $u32 {
    16
    RxCRC:16 // at 0: Rx CRC register
  }

//---  Register TXCRCR: TX CRC register
  TXCRCR @offset 0x18 @ro $u32 {
    16
    TxCRC:16 // at 0: Tx CRC register
  }

//---  Register I2SCFGR: I2S configuration register
  I2SCFGR @offset 0x1c $u32 {
    19
    ASTRTEN // at 12: Asynchronous start enable
    I2SMOD // at 11: I2S mode selection
    I2SE // at 10: I2S Enable
    I2SCFG:2 // at 8: I2S configuration mode
    PCMSYNC // at 7: PCM frame synchronization
    1
    I2SSTD:2 // at 4: I2S standard selection
    CKPOL // at 3: Steady state clock polarity
    DATLEN:2 // at 1: Data length to be transferred
    CHLEN // at 0: Channel length (number of bits per audio channel)
  }

//---  Register I2SPR: I2S prescaler register
  I2SPR @offset 0x20 $u32 {
    22
    MCKOE // at 9: Master clock output enable
    ODD // at 8: Odd factor for the prescaler
    I2SDIV:8 // at 0: I2S Linear prescaler
  }

}

//------------------------------------------------------------------------------
// Peripheral SPI6
//------------------------------------------------------------------------------

registers ©SPI6 @at 0x40015400 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    16
    BIDIMODE // at 15: Bidirectional data mode enable
    BIDIOE // at 14: Output enable in bidirectional mode
    CRCEN // at 13: Hardware CRC calculation enable
    CRCNEXT // at 12: CRC transfer next
    CRCL // at 11: CRC length
    RXONLY // at 10: Receive only
    SSM // at 9: Software slave management
    SSI // at 8: Internal slave select
    LSBFIRST // at 7: Frame format
    SPE // at 6: SPI enable
    BR:3 // at 3: Baud rate control
    MSTR // at 2: Master selection
    CPOL // at 1: Clock polarity
    CPHA // at 0: Clock phase
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    17
    LDMA_TX // at 14: Last DMA transfer for transmission
    LDMA_RX // at 13: Last DMA transfer for reception
    FRXTH // at 12: FIFO reception threshold
    DS:4 // at 8: Data size
    TXEIE // at 7: Tx buffer empty interrupt enable
    RXNEIE // at 6: RX buffer not empty interrupt enable
    ERRIE // at 5: Error interrupt enable
    FRF // at 4: Frame format
    NSSP // at 3: NSS pulse management
    SSOE // at 2: SS output enable
    TXDMAEN // at 1: Tx buffer DMA enable
    RXDMAEN // at 0: Rx buffer DMA enable
  }

//---  Register SR: status register
  SR @offset 0x8 $u32 {
    19
    FTLVL:2 // at 11: FIFO Transmission Level
    FRLVL:2 // at 9: FIFO reception level
    FRE // at 8: Frame format error
    BSY // at 7: Busy flag
    OVR // at 6: Overrun flag
    MODF // at 5: Mode fault
    CRCERR // at 4: CRC error flag
    UDR // at 3: Underrun flag
    CHSIDE // at 2: Channel side
    TXE // at 1: Transmit buffer empty
    RXNE // at 0: Receive buffer not empty
  }

//---  Register DR: data register
  DR @offset 0xc $u32 {
    16
    DR:16 // at 0: Data register
  }

//---  Register CRCPR: CRC polynomial register
  CRCPR @offset 0x10 $u32 {
    16
    CRCPOLY:16 // at 0: CRC polynomial register
  }

//---  Register RXCRCR: RX CRC register
  RXCRCR @offset 0x14 @ro $u32 {
    16
    RxCRC:16 // at 0: Rx CRC register
  }

//---  Register TXCRCR: TX CRC register
  TXCRCR @offset 0x18 @ro $u32 {
    16
    TxCRC:16 // at 0: Tx CRC register
  }

//---  Register I2SCFGR: I2S configuration register
  I2SCFGR @offset 0x1c $u32 {
    19
    ASTRTEN // at 12: Asynchronous start enable
    I2SMOD // at 11: I2S mode selection
    I2SE // at 10: I2S Enable
    I2SCFG:2 // at 8: I2S configuration mode
    PCMSYNC // at 7: PCM frame synchronization
    1
    I2SSTD:2 // at 4: I2S standard selection
    CKPOL // at 3: Steady state clock polarity
    DATLEN:2 // at 1: Data length to be transferred
    CHLEN // at 0: Channel length (number of bits per audio channel)
  }

//---  Register I2SPR: I2S prescaler register
  I2SPR @offset 0x20 $u32 {
    22
    MCKOE // at 9: Master clock output enable
    ODD // at 8: Odd factor for the prescaler
    I2SDIV:8 // at 0: I2S Linear prescaler
  }

}

//------------------------------------------------------------------------------
// Peripheral SYSCFG: System configuration controller
//------------------------------------------------------------------------------

registers ©SYSCFG @at 0x40013800 {
//---  Register MEMRM: memory remap register
  MEMRM @offset 0x0 $u32 {
    20
    SWP_FMC:2 // at 10: FMC memory mapping swap
    1
    FB_MODE // at 8: Flash bank mode selection
    5
    MEM_MODE:3 // at 0: Memory mapping selection
  }

//---  Register PMC: peripheral mode configuration register
  PMC @offset 0x4 $u32 {
    8
    MII_RMII_SEL // at 23: Ethernet PHY interface selection
    4
    ADC3DC2 // at 18: ADC3DC2
    ADC2DC2 // at 17: ADC2DC2
    ADC1DC2 // at 16: ADC1DC2
    16
  }

//---  Register EXTICR1: external interrupt configuration register 1
  EXTICR1 @offset 0x8 $u32 {
    16
    EXTI3:4 // at 12: EXTI x configuration (x = 0 to 3)
    EXTI2:4 // at 8: EXTI x configuration (x = 0 to 3)
    EXTI1:4 // at 4: EXTI x configuration (x = 0 to 3)
    EXTI0:4 // at 0: EXTI x configuration (x = 0 to 3)
  }

//---  Register EXTICR2: external interrupt configuration register 2
  EXTICR2 @offset 0xc $u32 {
    16
    EXTI7:4 // at 12: EXTI x configuration (x = 4 to 7)
    EXTI6:4 // at 8: EXTI x configuration (x = 4 to 7)
    EXTI5:4 // at 4: EXTI x configuration (x = 4 to 7)
    EXTI4:4 // at 0: EXTI x configuration (x = 4 to 7)
  }

//---  Register EXTICR3: external interrupt configuration register 3
  EXTICR3 @offset 0x10 $u32 {
    16
    EXTI11:4 // at 12: EXTI x configuration (x = 8 to 11)
    EXTI10:4 // at 8: EXTI10
    EXTI9:4 // at 4: EXTI x configuration (x = 8 to 11)
    EXTI8:4 // at 0: EXTI x configuration (x = 8 to 11)
  }

//---  Register EXTICR4: external interrupt configuration register 4
  EXTICR4 @offset 0x14 $u32 {
    16
    EXTI15:4 // at 12: EXTI x configuration (x = 12 to 15)
    EXTI14:4 // at 8: EXTI x configuration (x = 12 to 15)
    EXTI13:4 // at 4: EXTI x configuration (x = 12 to 15)
    EXTI12:4 // at 0: EXTI x configuration (x = 12 to 15)
  }

//---  Register CMPCR: Compensation cell control register
  CMPCR @offset 0x20 @ro $u32 {
    23
    READY // at 8: READY
    7
    CMP_PD // at 0: Compensation cell power-down
  }

}

//------------------------------------------------------------------------------
// Peripheral SYST: SysTick timer
//------------------------------------------------------------------------------

registers ©SYST @at 0xe000e010 {
//---  Register CSR: SysTick control and status register
  CSR @offset 0x0 $u32 {
    15
    COUNTFLAG // at 16: COUNTFLAG
    13
    CLKSOURCE // at 2: Clock source selection
    TICKINT // at 1: SysTick exception request enable
    ENABLE // at 0: Counter enable
  }

//---  Register RVR: SysTick reload value register
  RVR @offset 0x4 $u32 {
    8
    RELOAD:24 // at 0: RELOAD value
  }

//---  Register CVR: SysTick current value register
  CVR @offset 0x8 $u32 {
    8
    CURRENT:24 // at 0: Current counter value
  }

//---  Register CALIB: SysTick calibration value register
  CALIB @offset 0xc $u32 {
    NOREF // at 31: NOREF flag. Reads as zero
    SKEW // at 30: SKEW flag: Indicates whether the TENMS value is exact
    6
    TENMS:24 // at 0: Calibration value
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM1: Advanced-timers
//------------------------------------------------------------------------------

registers ©TIM1 @at 0x40010000 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    22
    CKD:2 // at 8: Clock division
    ARPE // at 7: Auto-reload preload enable
    CMS:2 // at 5: Center-aligned mode selection
    DIR // at 4: Direction
    OPM // at 3: One-pulse mode
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    17
    OIS4 // at 14: Output Idle state 4
    OIS3N // at 13: Output Idle state 3
    OIS3 // at 12: Output Idle state 3
    OIS2N // at 11: Output Idle state 2
    OIS2 // at 10: Output Idle state 2
    OIS1N // at 9: Output Idle state 1
    OIS1 // at 8: Output Idle state 1
    TI1S // at 7: TI1 selection
    MMS:3 // at 4: Master mode selection
    CCDS // at 3: Capture/compare DMA selection
    CCUS // at 2: Capture/compare control update selection
    1
    CCPC // at 0: Capture/compare preloaded control
  }

//---  Register SMCR: slave mode control register
  SMCR @offset 0x8 $u32 {
    16
    ETP // at 15: External trigger polarity
    ECE // at 14: External clock enable
    ETPS:2 // at 12: External trigger prescaler
    ETF:4 // at 8: External trigger filter
    MSM // at 7: Master/Slave mode
    TS:3 // at 4: Trigger selection
    1
    SMS:3 // at 0: Slave mode selection
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    17
    TDE // at 14: Trigger DMA request enable
    COMDE // at 13: COM DMA request enable
    CC4DE // at 12: Capture/Compare 4 DMA request enable
    CC3DE // at 11: Capture/Compare 3 DMA request enable
    CC2DE // at 10: Capture/Compare 2 DMA request enable
    CC1DE // at 9: Capture/Compare 1 DMA request enable
    UDE // at 8: Update DMA request enable
    BIE // at 7: Break interrupt enable
    TIE // at 6: Trigger interrupt enable
    COMIE // at 5: COM interrupt enable
    CC4IE // at 4: Capture/Compare 4 interrupt enable
    CC3IE // at 3: Capture/Compare 3 interrupt enable
    CC2IE // at 2: Capture/Compare 2 interrupt enable
    CC1IE // at 1: Capture/Compare 1 interrupt enable
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    19
    CC4OF // at 12: Capture/Compare 4 overcapture flag
    CC3OF // at 11: Capture/Compare 3 overcapture flag
    CC2OF // at 10: Capture/compare 2 overcapture flag
    CC1OF // at 9: Capture/Compare 1 overcapture flag
    1
    BIF // at 7: Break interrupt flag
    TIF // at 6: Trigger interrupt flag
    COMIF // at 5: COM interrupt flag
    CC4IF // at 4: Capture/Compare 4 interrupt flag
    CC3IF // at 3: Capture/Compare 3 interrupt flag
    CC2IF // at 2: Capture/Compare 2 interrupt flag
    CC1IF // at 1: Capture/compare 1 interrupt flag
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    24
    BG // at 7: Break generation
    TG // at 6: Trigger generation
    COMG // at 5: Capture/Compare control update generation
    CC4G // at 4: Capture/compare 4 generation
    CC3G // at 3: Capture/compare 3 generation
    CC2G // at 2: Capture/compare 2 generation
    CC1G // at 1: Capture/compare 1 generation
    UG // at 0: Update generation
  }

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  CCMR1_Output @offset 0x18 $u32 {
    16
    OC2CE // at 15: Output Compare 2 clear enable
    OC2M:3 // at 12: Output Compare 2 mode
    OC2PE // at 11: Output Compare 2 preload enable
    OC2FE // at 10: Output Compare 2 fast enable
    CC2S:2 // at 8: Capture/Compare 2 selection
    OC1CE // at 7: Output Compare 1 clear enable
    OC1M:3 // at 4: Output Compare 1 mode
    OC1PE // at 3: Output Compare 1 preload enable
    OC1FE // at 2: Output Compare 1 fast enable
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  CCMR1_Input @offset 0x18 $u32 {
    16
    IC2F:4 // at 12: Input capture 2 filter
    IC2PCS:2 // at 10: Input capture 2 prescaler
    CC2S:2 // at 8: Capture/Compare 2 selection
    IC1F:4 // at 4: Input capture 1 filter
    ICPCS:2 // at 2: Input capture 1 prescaler
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR2_Output: capture/compare mode register 2 (output mode)
  CCMR2_Output @offset 0x1c $u32 {
    16
    OC4CE // at 15: Output compare 4 clear enable
    OC4M:3 // at 12: Output compare 4 mode
    OC4PE // at 11: Output compare 4 preload enable
    OC4FE // at 10: Output compare 4 fast enable
    CC4S:2 // at 8: Capture/Compare 4 selection
    OC3CE // at 7: Output compare 3 clear enable
    OC3M:3 // at 4: Output compare 3 mode
    OC3PE // at 3: Output compare 3 preload enable
    OC3FE // at 2: Output compare 3 fast enable
    CC3S:2 // at 0: Capture/Compare 3 selection
  }

//---  Register CCMR2_Input: capture/compare mode register 2 (input mode)
  CCMR2_Input @offset 0x1c $u32 {
    16
    IC4F:4 // at 12: Input capture 4 filter
    IC4PSC:2 // at 10: Input capture 4 prescaler
    CC4S:2 // at 8: Capture/Compare 4 selection
    IC3F:4 // at 4: Input capture 3 filter
    IC3PSC:2 // at 2: Input capture 3 prescaler
    CC3S:2 // at 0: Capture/compare 3 selection
  }

//---  Register CCER: capture/compare enable register
  CCER @offset 0x20 $u32 {
    18
    CC4P // at 13: Capture/Compare 3 output Polarity
    CC4E // at 12: Capture/Compare 4 output enable
    CC3NP // at 11: Capture/Compare 3 output Polarity
    CC3NE // at 10: Capture/Compare 3 complementary output enable
    CC3P // at 9: Capture/Compare 3 output Polarity
    CC3E // at 8: Capture/Compare 3 output enable
    CC2NP // at 7: Capture/Compare 2 output Polarity
    CC2NE // at 6: Capture/Compare 2 complementary output enable
    CC2P // at 5: Capture/Compare 2 output Polarity
    CC2E // at 4: Capture/Compare 2 output enable
    CC1NP // at 3: Capture/Compare 1 output Polarity
    CC1NE // at 2: Capture/Compare 1 complementary output enable
    CC1P // at 1: Capture/Compare 1 output Polarity
    CC1E // at 0: Capture/Compare 1 output enable
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    16
    CNT:16 // at 0: counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    16
    ARR:16 // at 0: Auto-reload value
  }

//---  Register CCR1: capture/compare register 1
  CCR1 @offset 0x34 $u32 {
    16
    CCR1:16 // at 0: Capture/Compare 1 value
  }

//---  Register CCR2: capture/compare register 2
  CCR2 @offset 0x38 $u32 {
    16
    CCR2:16 // at 0: Capture/Compare 2 value
  }

//---  Register CCR3: capture/compare register 3
  CCR3 @offset 0x3c $u32 {
    16
    CCR3:16 // at 0: Capture/Compare value
  }

//---  Register CCR4: capture/compare register 4
  CCR4 @offset 0x40 $u32 {
    16
    CCR4:16 // at 0: Capture/Compare value
  }

//---  Register DCR: DMA control register
  DCR @offset 0x48 $u32 {
    19
    DBL:5 // at 8: DMA burst length
    3
    DBA:5 // at 0: DMA base address
  }

//---  Register DMAR: DMA address for full transfer
  DMAR @offset 0x4c $u32 {
    16
    DMAB:16 // at 0: DMA register for burst accesses
  }

//---  Register RCR: repetition counter register
  RCR @offset 0x30 $u32 {
    24
    REP:8 // at 0: Repetition counter value
  }

//---  Register BDTR: break and dead-time register
  BDTR @offset 0x44 $u32 {
    6
    BK2P // at 25: Break 2 polarity
    BK2E // at 24: Break 2 enable
    BK2F:4 // at 20: Break 2 filter
    BKF:4 // at 16: Break filter
    MOE // at 15: Main output enable
    AOE // at 14: Automatic output enable
    BKP // at 13: Break polarity
    BKE // at 12: Break enable
    OSSR // at 11: Off-state selection for Run mode
    OSSI // at 10: Off-state selection for Idle mode
    LOCK:2 // at 8: Lock configuration
    DTG:8 // at 0: Dead-time generator setup
  }

//---  Register CCMR3_Output: capture/compare mode register 3 (output mode)
  CCMR3_Output @offset 0x54 $u32 {
    7
    OC6M3 // at 24: Output Compare 6 mode
    7
    OC5M3 // at 16: Output Compare 5 mode
    OC6CE // at 15: Output compare 6 clear enable
    OC6M:3 // at 12: Output compare 6 mode
    OC6PE // at 11: Output compare 6 preload enable
    OC6FE // at 10: Output compare 6 fast enable
    2
    OC5CE // at 7: Output compare 5 clear enable
    OC5M:3 // at 4: Output compare 5 mode
    OC5PE // at 3: Output compare 5 preload enable
    OC5FE // at 2: Output compare 5 fast enable
    2
  }

//---  Register CCR5: capture/compare register 5
  CCR5 @offset 0x58 $u32 {
    GC5C3 // at 31: Group Channel 5 and Channel 3
    GC5C2 // at 30: Group Channel 5 and Channel 2
    GC5C1 // at 29: Group Channel 5 and Channel 1
    13
    CCR5:16 // at 0: Capture/Compare 5 value
  }

//---  Register CRR6: capture/compare register 6
  CRR6 @offset 0x5c $u32 {
    16
    CCR6:16 // at 0: Capture/Compare 6 value
  }

//---  Register AF1: alternate function option register 1
  AF1 @offset 0x60 $u32 {
    22
    BKINP // at 9: BRK BKIN input polarity
    BKDFBKE // at 8: BRK DFSDM_BREAK[0] enable
    7
    BKINE // at 0: BRK BKIN input enable
  }

//---  Register AF2: alternate function option register 2
  AF2 @offset 0x64 $u32 {
    22
    BK2INP // at 9: BRK2 BKIN2 input polarity
    BK2DFBKE // at 8: BRK2 DFSDM_BREAK enable
    7
    BK2INE // at 0: BRK2 BKIN input enable
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM10: General-purpose-timers
//------------------------------------------------------------------------------

registers ©TIM10 @at 0x40014400 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    22
    CKD:2 // at 8: Clock division
    ARPE // at 7: Auto-reload preload enable
    4
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    30
    CC1IE // at 1: Capture/Compare 1 interrupt enable
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    22
    CC1OF // at 9: Capture/Compare 1 overcapture flag
    7
    CC1IF // at 1: Capture/compare 1 interrupt flag
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    30
    CC1G // at 1: Capture/compare 1 generation
    UG // at 0: Update generation
  }

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  CCMR1_Output @offset 0x18 $u32 {
    25
    OC1M:3 // at 4: Output Compare 1 mode
    OC1PE // at 3: Output Compare 1 preload enable
    OC1FE // at 2: Output Compare 1 fast enable
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  CCMR1_Input @offset 0x18 $u32 {
    24
    IC1F:4 // at 4: Input capture 1 filter
    ICPCS:2 // at 2: Input capture 1 prescaler
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCER: capture/compare enable register
  CCER @offset 0x20 $u32 {
    28
    CC1NP // at 3: Capture/Compare 1 output Polarity
    1
    CC1P // at 1: Capture/Compare 1 output Polarity
    CC1E // at 0: Capture/Compare 1 output enable
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    16
    CNT:16 // at 0: counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    16
    ARR:16 // at 0: Auto-reload value
  }

//---  Register CCR1: capture/compare register 1
  CCR1 @offset 0x34 $u32 {
    16
    CCR1:16 // at 0: Capture/Compare 1 value
  }

//---  Register SMCR: slave mode control register
  SMCR @offset 0x8 $u32 {
    15
    SMS3 // at 16: Slave mode selection
    ETP // at 15: External trigger polarity
    ECE // at 14: External clock enable
    ETPS:2 // at 12: External trigger prescaler
    ETF:4 // at 8: External trigger filter
    MSM // at 7: Master/slave mode
    TS:3 // at 4: Trigger selection
    1
    SMS:3 // at 0: Slave mode selection
  }

//---  Register OR: option register
  OR @offset 0x50 $u32 {
    30
    TI1_RMP:2 // at 0: TIM11 Input 1 remapping capability
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM11
//------------------------------------------------------------------------------

registers ©TIM11 @at 0x40014800 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    22
    CKD:2 // at 8: Clock division
    ARPE // at 7: Auto-reload preload enable
    4
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    30
    CC1IE // at 1: Capture/Compare 1 interrupt enable
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    22
    CC1OF // at 9: Capture/Compare 1 overcapture flag
    7
    CC1IF // at 1: Capture/compare 1 interrupt flag
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    30
    CC1G // at 1: Capture/compare 1 generation
    UG // at 0: Update generation
  }

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  CCMR1_Output @offset 0x18 $u32 {
    25
    OC1M:3 // at 4: Output Compare 1 mode
    OC1PE // at 3: Output Compare 1 preload enable
    OC1FE // at 2: Output Compare 1 fast enable
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  CCMR1_Input @offset 0x18 $u32 {
    24
    IC1F:4 // at 4: Input capture 1 filter
    ICPCS:2 // at 2: Input capture 1 prescaler
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCER: capture/compare enable register
  CCER @offset 0x20 $u32 {
    28
    CC1NP // at 3: Capture/Compare 1 output Polarity
    1
    CC1P // at 1: Capture/Compare 1 output Polarity
    CC1E // at 0: Capture/Compare 1 output enable
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    16
    CNT:16 // at 0: counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    16
    ARR:16 // at 0: Auto-reload value
  }

//---  Register CCR1: capture/compare register 1
  CCR1 @offset 0x34 $u32 {
    16
    CCR1:16 // at 0: Capture/Compare 1 value
  }

//---  Register SMCR: slave mode control register
  SMCR @offset 0x8 $u32 {
    15
    SMS3 // at 16: Slave mode selection
    ETP // at 15: External trigger polarity
    ECE // at 14: External clock enable
    ETPS:2 // at 12: External trigger prescaler
    ETF:4 // at 8: External trigger filter
    MSM // at 7: Master/slave mode
    TS:3 // at 4: Trigger selection
    1
    SMS:3 // at 0: Slave mode selection
  }

//---  Register OR: option register
  OR @offset 0x50 $u32 {
    30
    TI1_RMP:2 // at 0: TIM11 Input 1 remapping capability
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM12
//------------------------------------------------------------------------------

registers ©TIM12 @at 0x40001800 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    22
    CKD:2 // at 8: Clock division
    ARPE // at 7: Auto-reload preload enable
    3
    OPM // at 3: One-pulse mode
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register SMCR: slave mode control register
  SMCR @offset 0x8 $u32 {
    24
    MSM // at 7: Master/Slave mode
    TS:3 // at 4: Trigger selection
    1
    SMS:3 // at 0: Slave mode selection
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    25
    TIE // at 6: Trigger interrupt enable
    3
    CC2IE // at 2: Capture/Compare 2 interrupt enable
    CC1IE // at 1: Capture/Compare 1 interrupt enable
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    21
    CC2OF // at 10: Capture/compare 2 overcapture flag
    CC1OF // at 9: Capture/Compare 1 overcapture flag
    2
    TIF // at 6: Trigger interrupt flag
    3
    CC2IF // at 2: Capture/Compare 2 interrupt flag
    CC1IF // at 1: Capture/compare 1 interrupt flag
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    25
    TG // at 6: Trigger generation
    3
    CC2G // at 2: Capture/compare 2 generation
    CC1G // at 1: Capture/compare 1 generation
    UG // at 0: Update generation
  }

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  CCMR1_Output @offset 0x18 $u32 {
    17
    OC2M:3 // at 12: Output Compare 2 mode
    OC2PE // at 11: Output Compare 2 preload enable
    OC2FE // at 10: Output Compare 2 fast enable
    CC2S:2 // at 8: Capture/Compare 2 selection
    1
    OC1M:3 // at 4: Output Compare 1 mode
    OC1PE // at 3: Output Compare 1 preload enable
    OC1FE // at 2: Output Compare 1 fast enable
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  CCMR1_Input @offset 0x18 $u32 {
    17
    IC2F:3 // at 12: Input capture 2 filter
    IC2PCS:2 // at 10: Input capture 2 prescaler
    CC2S:2 // at 8: Capture/Compare 2 selection
    1
    IC1F:3 // at 4: Input capture 1 filter
    ICPCS:2 // at 2: Input capture 1 prescaler
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCER: capture/compare enable register
  CCER @offset 0x20 $u32 {
    24
    CC2NP // at 7: Capture/Compare 2 output Polarity
    1
    CC2P // at 5: Capture/Compare 2 output Polarity
    CC2E // at 4: Capture/Compare 2 output enable
    CC1NP // at 3: Capture/Compare 1 output Polarity
    1
    CC1P // at 1: Capture/Compare 1 output Polarity
    CC1E // at 0: Capture/Compare 1 output enable
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    16
    CNT:16 // at 0: counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    16
    ARR:16 // at 0: Auto-reload value
  }

//---  Register CCR1: capture/compare register 1
  CCR1 @offset 0x34 $u32 {
    16
    CCR1:16 // at 0: Capture/Compare 1 value
  }

//---  Register CCR2: capture/compare register 2
  CCR2 @offset 0x38 $u32 {
    16
    CCR2:16 // at 0: Capture/Compare 2 value
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM13
//------------------------------------------------------------------------------

registers ©TIM13 @at 0x40001c00 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    22
    CKD:2 // at 8: Clock division
    ARPE // at 7: Auto-reload preload enable
    4
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    30
    CC1IE // at 1: Capture/Compare 1 interrupt enable
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    22
    CC1OF // at 9: Capture/Compare 1 overcapture flag
    7
    CC1IF // at 1: Capture/compare 1 interrupt flag
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    30
    CC1G // at 1: Capture/compare 1 generation
    UG // at 0: Update generation
  }

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  CCMR1_Output @offset 0x18 $u32 {
    25
    OC1M:3 // at 4: Output Compare 1 mode
    OC1PE // at 3: Output Compare 1 preload enable
    OC1FE // at 2: Output Compare 1 fast enable
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  CCMR1_Input @offset 0x18 $u32 {
    24
    IC1F:4 // at 4: Input capture 1 filter
    ICPCS:2 // at 2: Input capture 1 prescaler
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCER: capture/compare enable register
  CCER @offset 0x20 $u32 {
    28
    CC1NP // at 3: Capture/Compare 1 output Polarity
    1
    CC1P // at 1: Capture/Compare 1 output Polarity
    CC1E // at 0: Capture/Compare 1 output enable
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    16
    CNT:16 // at 0: counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    16
    ARR:16 // at 0: Auto-reload value
  }

//---  Register CCR1: capture/compare register 1
  CCR1 @offset 0x34 $u32 {
    16
    CCR1:16 // at 0: Capture/Compare 1 value
  }

//---  Register SMCR: slave mode control register
  SMCR @offset 0x8 $u32 {
    15
    SMS3 // at 16: Slave mode selection
    ETP // at 15: External trigger polarity
    ECE // at 14: External clock enable
    ETPS:2 // at 12: External trigger prescaler
    ETF:4 // at 8: External trigger filter
    MSM // at 7: Master/slave mode
    TS:3 // at 4: Trigger selection
    1
    SMS:3 // at 0: Slave mode selection
  }

//---  Register OR: option register
  OR @offset 0x50 $u32 {
    30
    TI1_RMP:2 // at 0: TIM11 Input 1 remapping capability
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM14
//------------------------------------------------------------------------------

registers ©TIM14 @at 0x40002000 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    22
    CKD:2 // at 8: Clock division
    ARPE // at 7: Auto-reload preload enable
    4
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    30
    CC1IE // at 1: Capture/Compare 1 interrupt enable
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    22
    CC1OF // at 9: Capture/Compare 1 overcapture flag
    7
    CC1IF // at 1: Capture/compare 1 interrupt flag
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    30
    CC1G // at 1: Capture/compare 1 generation
    UG // at 0: Update generation
  }

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  CCMR1_Output @offset 0x18 $u32 {
    25
    OC1M:3 // at 4: Output Compare 1 mode
    OC1PE // at 3: Output Compare 1 preload enable
    OC1FE // at 2: Output Compare 1 fast enable
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  CCMR1_Input @offset 0x18 $u32 {
    24
    IC1F:4 // at 4: Input capture 1 filter
    ICPCS:2 // at 2: Input capture 1 prescaler
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCER: capture/compare enable register
  CCER @offset 0x20 $u32 {
    28
    CC1NP // at 3: Capture/Compare 1 output Polarity
    1
    CC1P // at 1: Capture/Compare 1 output Polarity
    CC1E // at 0: Capture/Compare 1 output enable
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    16
    CNT:16 // at 0: counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    16
    ARR:16 // at 0: Auto-reload value
  }

//---  Register CCR1: capture/compare register 1
  CCR1 @offset 0x34 $u32 {
    16
    CCR1:16 // at 0: Capture/Compare 1 value
  }

//---  Register SMCR: slave mode control register
  SMCR @offset 0x8 $u32 {
    15
    SMS3 // at 16: Slave mode selection
    ETP // at 15: External trigger polarity
    ECE // at 14: External clock enable
    ETPS:2 // at 12: External trigger prescaler
    ETF:4 // at 8: External trigger filter
    MSM // at 7: Master/slave mode
    TS:3 // at 4: Trigger selection
    1
    SMS:3 // at 0: Slave mode selection
  }

//---  Register OR: option register
  OR @offset 0x50 $u32 {
    30
    TI1_RMP:2 // at 0: TIM11 Input 1 remapping capability
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM2: General purpose timers
//------------------------------------------------------------------------------

registers ©TIM2 @at 0x40000000 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    22
    CKD:2 // at 8: Clock division
    ARPE // at 7: Auto-reload preload enable
    CMS:2 // at 5: Center-aligned mode selection
    DIR // at 4: Direction
    OPM // at 3: One-pulse mode
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    24
    TI1S // at 7: TI1 selection
    MMS:3 // at 4: Master mode selection
    CCDS // at 3: Capture/compare DMA selection
    3
  }

//---  Register SMCR: slave mode control register
  SMCR @offset 0x8 $u32 {
    16
    ETP // at 15: External trigger polarity
    ECE // at 14: External clock enable
    ETPS:2 // at 12: External trigger prescaler
    ETF:4 // at 8: External trigger filter
    MSM // at 7: Master/Slave mode
    TS:3 // at 4: Trigger selection
    1
    SMS:3 // at 0: Slave mode selection
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    17
    TDE // at 14: Trigger DMA request enable
    1
    CC4DE // at 12: Capture/Compare 4 DMA request enable
    CC3DE // at 11: Capture/Compare 3 DMA request enable
    CC2DE // at 10: Capture/Compare 2 DMA request enable
    CC1DE // at 9: Capture/Compare 1 DMA request enable
    UDE // at 8: Update DMA request enable
    1
    TIE // at 6: Trigger interrupt enable
    1
    CC4IE // at 4: Capture/Compare 4 interrupt enable
    CC3IE // at 3: Capture/Compare 3 interrupt enable
    CC2IE // at 2: Capture/Compare 2 interrupt enable
    CC1IE // at 1: Capture/Compare 1 interrupt enable
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    19
    CC4OF // at 12: Capture/Compare 4 overcapture flag
    CC3OF // at 11: Capture/Compare 3 overcapture flag
    CC2OF // at 10: Capture/compare 2 overcapture flag
    CC1OF // at 9: Capture/Compare 1 overcapture flag
    2
    TIF // at 6: Trigger interrupt flag
    1
    CC4IF // at 4: Capture/Compare 4 interrupt flag
    CC3IF // at 3: Capture/Compare 3 interrupt flag
    CC2IF // at 2: Capture/Compare 2 interrupt flag
    CC1IF // at 1: Capture/compare 1 interrupt flag
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    25
    TG // at 6: Trigger generation
    1
    CC4G // at 4: Capture/compare 4 generation
    CC3G // at 3: Capture/compare 3 generation
    CC2G // at 2: Capture/compare 2 generation
    CC1G // at 1: Capture/compare 1 generation
    UG // at 0: Update generation
  }

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  CCMR1_Output @offset 0x18 $u32 {
    16
    OC2CE // at 15: OC2CE
    OC2M:3 // at 12: OC2M
    OC2PE // at 11: OC2PE
    OC2FE // at 10: OC2FE
    CC2S:2 // at 8: CC2S
    OC1CE // at 7: OC1CE
    OC1M:3 // at 4: OC1M
    OC1PE // at 3: OC1PE
    OC1FE // at 2: OC1FE
    CC1S:2 // at 0: CC1S
  }

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  CCMR1_Input @offset 0x18 $u32 {
    16
    IC2F:4 // at 12: Input capture 2 filter
    IC2PCS:2 // at 10: Input capture 2 prescaler
    CC2S:2 // at 8: Capture/Compare 2 selection
    IC1F:4 // at 4: Input capture 1 filter
    ICPCS:2 // at 2: Input capture 1 prescaler
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR2_Output: capture/compare mode register 2 (output mode)
  CCMR2_Output @offset 0x1c $u32 {
    16
    O24CE // at 15: O24CE
    OC4M:3 // at 12: OC4M
    OC4PE // at 11: OC4PE
    OC4FE // at 10: OC4FE
    CC4S:2 // at 8: CC4S
    OC3CE // at 7: OC3CE
    OC3M:3 // at 4: OC3M
    OC3PE // at 3: OC3PE
    OC3FE // at 2: OC3FE
    CC3S:2 // at 0: CC3S
  }

//---  Register CCMR2_Input: capture/compare mode register 2 (input mode)
  CCMR2_Input @offset 0x1c $u32 {
    16
    IC4F:4 // at 12: Input capture 4 filter
    IC4PSC:2 // at 10: Input capture 4 prescaler
    CC4S:2 // at 8: Capture/Compare 4 selection
    IC3F:4 // at 4: Input capture 3 filter
    IC3PSC:2 // at 2: Input capture 3 prescaler
    CC3S:2 // at 0: Capture/compare 3 selection
  }

//---  Register CCER: capture/compare enable register
  CCER @offset 0x20 $u32 {
    16
    CC4NP // at 15: Capture/Compare 4 output Polarity
    1
    CC4P // at 13: Capture/Compare 3 output Polarity
    CC4E // at 12: Capture/Compare 4 output enable
    CC3NP // at 11: Capture/Compare 3 output Polarity
    1
    CC3P // at 9: Capture/Compare 3 output Polarity
    CC3E // at 8: Capture/Compare 3 output enable
    CC2NP // at 7: Capture/Compare 2 output Polarity
    1
    CC2P // at 5: Capture/Compare 2 output Polarity
    CC2E // at 4: Capture/Compare 2 output enable
    CC1NP // at 3: Capture/Compare 1 output Polarity
    1
    CC1P // at 1: Capture/Compare 1 output Polarity
    CC1E // at 0: Capture/Compare 1 output enable
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    CNT_H:16 // at 16: High counter value
    CNT_L:16 // at 0: Low counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    ARR_H:16 // at 16: High Auto-reload value
    ARR_L:16 // at 0: Low Auto-reload value
  }

//---  Register CCR1: capture/compare register 1
  CCR1 @offset 0x34 $u32 {
    CCR1_H:16 // at 16: High Capture/Compare 1 value
    CCR1_L:16 // at 0: Low Capture/Compare 1 value
  }

//---  Register CCR2: capture/compare register 2
  CCR2 @offset 0x38 $u32 {
    CCR2_H:16 // at 16: High Capture/Compare 2 value
    CCR2_L:16 // at 0: Low Capture/Compare 2 value
  }

//---  Register CCR3: capture/compare register 3
  CCR3 @offset 0x3c $u32 {
    CCR3_H:16 // at 16: High Capture/Compare value
    CCR3_L:16 // at 0: Low Capture/Compare value
  }

//---  Register CCR4: capture/compare register 4
  CCR4 @offset 0x40 $u32 {
    CCR4_H:16 // at 16: High Capture/Compare value
    CCR4_L:16 // at 0: Low Capture/Compare value
  }

//---  Register DCR: DMA control register
  DCR @offset 0x48 $u32 {
    19
    DBL:5 // at 8: DMA burst length
    3
    DBA:5 // at 0: DMA base address
  }

//---  Register DMAR: DMA address for full transfer
  DMAR @offset 0x4c $u32 {
    16
    DMAB:16 // at 0: DMA register for burst accesses
  }

//---  Register OR1: TIM2 option register 1
  OR1 @offset 0x50 $u32 {
    28
    TI4_RMP:2 // at 2: Input Capture 4 remap
    ETR1_RMP // at 1: External trigger remap
    ITR1_RMP // at 0: Internal trigger 1 remap
  }

//---  Register OR2: TIM2 option register 2
  OR2 @offset 0x60 $u32 {
    15
    ETRSEL:3 // at 14: ETR source selection
    14
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM3: General purpose timers
//------------------------------------------------------------------------------

registers ©TIM3 @at 0x40000400 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    22
    CKD:2 // at 8: Clock division
    ARPE // at 7: Auto-reload preload enable
    CMS:2 // at 5: Center-aligned mode selection
    DIR // at 4: Direction
    OPM // at 3: One-pulse mode
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    24
    TI1S // at 7: TI1 selection
    MMS:3 // at 4: Master mode selection
    CCDS // at 3: Capture/compare DMA selection
    3
  }

//---  Register SMCR: slave mode control register
  SMCR @offset 0x8 $u32 {
    16
    ETP // at 15: External trigger polarity
    ECE // at 14: External clock enable
    ETPS:2 // at 12: External trigger prescaler
    ETF:4 // at 8: External trigger filter
    MSM // at 7: Master/Slave mode
    TS:3 // at 4: Trigger selection
    1
    SMS:3 // at 0: Slave mode selection
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    17
    TDE // at 14: Trigger DMA request enable
    1
    CC4DE // at 12: Capture/Compare 4 DMA request enable
    CC3DE // at 11: Capture/Compare 3 DMA request enable
    CC2DE // at 10: Capture/Compare 2 DMA request enable
    CC1DE // at 9: Capture/Compare 1 DMA request enable
    UDE // at 8: Update DMA request enable
    1
    TIE // at 6: Trigger interrupt enable
    1
    CC4IE // at 4: Capture/Compare 4 interrupt enable
    CC3IE // at 3: Capture/Compare 3 interrupt enable
    CC2IE // at 2: Capture/Compare 2 interrupt enable
    CC1IE // at 1: Capture/Compare 1 interrupt enable
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    19
    CC4OF // at 12: Capture/Compare 4 overcapture flag
    CC3OF // at 11: Capture/Compare 3 overcapture flag
    CC2OF // at 10: Capture/compare 2 overcapture flag
    CC1OF // at 9: Capture/Compare 1 overcapture flag
    2
    TIF // at 6: Trigger interrupt flag
    1
    CC4IF // at 4: Capture/Compare 4 interrupt flag
    CC3IF // at 3: Capture/Compare 3 interrupt flag
    CC2IF // at 2: Capture/Compare 2 interrupt flag
    CC1IF // at 1: Capture/compare 1 interrupt flag
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    25
    TG // at 6: Trigger generation
    1
    CC4G // at 4: Capture/compare 4 generation
    CC3G // at 3: Capture/compare 3 generation
    CC2G // at 2: Capture/compare 2 generation
    CC1G // at 1: Capture/compare 1 generation
    UG // at 0: Update generation
  }

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  CCMR1_Output @offset 0x18 $u32 {
    16
    OC2CE // at 15: OC2CE
    OC2M:3 // at 12: OC2M
    OC2PE // at 11: OC2PE
    OC2FE // at 10: OC2FE
    CC2S:2 // at 8: CC2S
    OC1CE // at 7: OC1CE
    OC1M:3 // at 4: OC1M
    OC1PE // at 3: OC1PE
    OC1FE // at 2: OC1FE
    CC1S:2 // at 0: CC1S
  }

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  CCMR1_Input @offset 0x18 $u32 {
    16
    IC2F:4 // at 12: Input capture 2 filter
    IC2PCS:2 // at 10: Input capture 2 prescaler
    CC2S:2 // at 8: Capture/Compare 2 selection
    IC1F:4 // at 4: Input capture 1 filter
    ICPCS:2 // at 2: Input capture 1 prescaler
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR2_Output: capture/compare mode register 2 (output mode)
  CCMR2_Output @offset 0x1c $u32 {
    16
    O24CE // at 15: O24CE
    OC4M:3 // at 12: OC4M
    OC4PE // at 11: OC4PE
    OC4FE // at 10: OC4FE
    CC4S:2 // at 8: CC4S
    OC3CE // at 7: OC3CE
    OC3M:3 // at 4: OC3M
    OC3PE // at 3: OC3PE
    OC3FE // at 2: OC3FE
    CC3S:2 // at 0: CC3S
  }

//---  Register CCMR2_Input: capture/compare mode register 2 (input mode)
  CCMR2_Input @offset 0x1c $u32 {
    16
    IC4F:4 // at 12: Input capture 4 filter
    IC4PSC:2 // at 10: Input capture 4 prescaler
    CC4S:2 // at 8: Capture/Compare 4 selection
    IC3F:4 // at 4: Input capture 3 filter
    IC3PSC:2 // at 2: Input capture 3 prescaler
    CC3S:2 // at 0: Capture/compare 3 selection
  }

//---  Register CCER: capture/compare enable register
  CCER @offset 0x20 $u32 {
    16
    CC4NP // at 15: Capture/Compare 4 output Polarity
    1
    CC4P // at 13: Capture/Compare 3 output Polarity
    CC4E // at 12: Capture/Compare 4 output enable
    CC3NP // at 11: Capture/Compare 3 output Polarity
    1
    CC3P // at 9: Capture/Compare 3 output Polarity
    CC3E // at 8: Capture/Compare 3 output enable
    CC2NP // at 7: Capture/Compare 2 output Polarity
    1
    CC2P // at 5: Capture/Compare 2 output Polarity
    CC2E // at 4: Capture/Compare 2 output enable
    CC1NP // at 3: Capture/Compare 1 output Polarity
    1
    CC1P // at 1: Capture/Compare 1 output Polarity
    CC1E // at 0: Capture/Compare 1 output enable
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    CNT_H:16 // at 16: High counter value
    CNT_L:16 // at 0: Low counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    ARR_H:16 // at 16: High Auto-reload value
    ARR_L:16 // at 0: Low Auto-reload value
  }

//---  Register CCR1: capture/compare register 1
  CCR1 @offset 0x34 $u32 {
    CCR1_H:16 // at 16: High Capture/Compare 1 value
    CCR1_L:16 // at 0: Low Capture/Compare 1 value
  }

//---  Register CCR2: capture/compare register 2
  CCR2 @offset 0x38 $u32 {
    CCR2_H:16 // at 16: High Capture/Compare 2 value
    CCR2_L:16 // at 0: Low Capture/Compare 2 value
  }

//---  Register CCR3: capture/compare register 3
  CCR3 @offset 0x3c $u32 {
    CCR3_H:16 // at 16: High Capture/Compare value
    CCR3_L:16 // at 0: Low Capture/Compare value
  }

//---  Register CCR4: capture/compare register 4
  CCR4 @offset 0x40 $u32 {
    CCR4_H:16 // at 16: High Capture/Compare value
    CCR4_L:16 // at 0: Low Capture/Compare value
  }

//---  Register DCR: DMA control register
  DCR @offset 0x48 $u32 {
    19
    DBL:5 // at 8: DMA burst length
    3
    DBA:5 // at 0: DMA base address
  }

//---  Register DMAR: DMA address for full transfer
  DMAR @offset 0x4c $u32 {
    16
    DMAB:16 // at 0: DMA register for burst accesses
  }

//---  Register OR1: TIM3 option register 1
  OR1 @offset 0x50 $u32 {
    30
    TI1_RMP:2 // at 0: Input Capture 1 remap
  }

//---  Register OR2: TIM3 option register 2
  OR2 @offset 0x60 $u32 {
    15
    ETRSEL:3 // at 14: ETR source selection
    14
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM4: General purpose timers
//------------------------------------------------------------------------------

registers ©TIM4 @at 0x40000800 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    22
    CKD:2 // at 8: Clock division
    ARPE // at 7: Auto-reload preload enable
    CMS:2 // at 5: Center-aligned mode selection
    DIR // at 4: Direction
    OPM // at 3: One-pulse mode
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    24
    TI1S // at 7: TI1 selection
    MMS:3 // at 4: Master mode selection
    CCDS // at 3: Capture/compare DMA selection
    3
  }

//---  Register SMCR: slave mode control register
  SMCR @offset 0x8 $u32 {
    16
    ETP // at 15: External trigger polarity
    ECE // at 14: External clock enable
    ETPS:2 // at 12: External trigger prescaler
    ETF:4 // at 8: External trigger filter
    MSM // at 7: Master/Slave mode
    TS:3 // at 4: Trigger selection
    1
    SMS:3 // at 0: Slave mode selection
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    17
    TDE // at 14: Trigger DMA request enable
    1
    CC4DE // at 12: Capture/Compare 4 DMA request enable
    CC3DE // at 11: Capture/Compare 3 DMA request enable
    CC2DE // at 10: Capture/Compare 2 DMA request enable
    CC1DE // at 9: Capture/Compare 1 DMA request enable
    UDE // at 8: Update DMA request enable
    1
    TIE // at 6: Trigger interrupt enable
    1
    CC4IE // at 4: Capture/Compare 4 interrupt enable
    CC3IE // at 3: Capture/Compare 3 interrupt enable
    CC2IE // at 2: Capture/Compare 2 interrupt enable
    CC1IE // at 1: Capture/Compare 1 interrupt enable
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    19
    CC4OF // at 12: Capture/Compare 4 overcapture flag
    CC3OF // at 11: Capture/Compare 3 overcapture flag
    CC2OF // at 10: Capture/compare 2 overcapture flag
    CC1OF // at 9: Capture/Compare 1 overcapture flag
    2
    TIF // at 6: Trigger interrupt flag
    1
    CC4IF // at 4: Capture/Compare 4 interrupt flag
    CC3IF // at 3: Capture/Compare 3 interrupt flag
    CC2IF // at 2: Capture/Compare 2 interrupt flag
    CC1IF // at 1: Capture/compare 1 interrupt flag
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    25
    TG // at 6: Trigger generation
    1
    CC4G // at 4: Capture/compare 4 generation
    CC3G // at 3: Capture/compare 3 generation
    CC2G // at 2: Capture/compare 2 generation
    CC1G // at 1: Capture/compare 1 generation
    UG // at 0: Update generation
  }

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  CCMR1_Output @offset 0x18 $u32 {
    16
    OC2CE // at 15: OC2CE
    OC2M:3 // at 12: OC2M
    OC2PE // at 11: OC2PE
    OC2FE // at 10: OC2FE
    CC2S:2 // at 8: CC2S
    OC1CE // at 7: OC1CE
    OC1M:3 // at 4: OC1M
    OC1PE // at 3: OC1PE
    OC1FE // at 2: OC1FE
    CC1S:2 // at 0: CC1S
  }

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  CCMR1_Input @offset 0x18 $u32 {
    16
    IC2F:4 // at 12: Input capture 2 filter
    IC2PCS:2 // at 10: Input capture 2 prescaler
    CC2S:2 // at 8: Capture/Compare 2 selection
    IC1F:4 // at 4: Input capture 1 filter
    ICPCS:2 // at 2: Input capture 1 prescaler
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR2_Output: capture/compare mode register 2 (output mode)
  CCMR2_Output @offset 0x1c $u32 {
    16
    O24CE // at 15: O24CE
    OC4M:3 // at 12: OC4M
    OC4PE // at 11: OC4PE
    OC4FE // at 10: OC4FE
    CC4S:2 // at 8: CC4S
    OC3CE // at 7: OC3CE
    OC3M:3 // at 4: OC3M
    OC3PE // at 3: OC3PE
    OC3FE // at 2: OC3FE
    CC3S:2 // at 0: CC3S
  }

//---  Register CCMR2_Input: capture/compare mode register 2 (input mode)
  CCMR2_Input @offset 0x1c $u32 {
    16
    IC4F:4 // at 12: Input capture 4 filter
    IC4PSC:2 // at 10: Input capture 4 prescaler
    CC4S:2 // at 8: Capture/Compare 4 selection
    IC3F:4 // at 4: Input capture 3 filter
    IC3PSC:2 // at 2: Input capture 3 prescaler
    CC3S:2 // at 0: Capture/compare 3 selection
  }

//---  Register CCER: capture/compare enable register
  CCER @offset 0x20 $u32 {
    16
    CC4NP // at 15: Capture/Compare 4 output Polarity
    1
    CC4P // at 13: Capture/Compare 3 output Polarity
    CC4E // at 12: Capture/Compare 4 output enable
    CC3NP // at 11: Capture/Compare 3 output Polarity
    1
    CC3P // at 9: Capture/Compare 3 output Polarity
    CC3E // at 8: Capture/Compare 3 output enable
    CC2NP // at 7: Capture/Compare 2 output Polarity
    1
    CC2P // at 5: Capture/Compare 2 output Polarity
    CC2E // at 4: Capture/Compare 2 output enable
    CC1NP // at 3: Capture/Compare 1 output Polarity
    1
    CC1P // at 1: Capture/Compare 1 output Polarity
    CC1E // at 0: Capture/Compare 1 output enable
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    CNT_H:16 // at 16: High counter value
    CNT_L:16 // at 0: Low counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    ARR_H:16 // at 16: High Auto-reload value
    ARR_L:16 // at 0: Low Auto-reload value
  }

//---  Register CCR1: capture/compare register 1
  CCR1 @offset 0x34 $u32 {
    CCR1_H:16 // at 16: High Capture/Compare 1 value
    CCR1_L:16 // at 0: Low Capture/Compare 1 value
  }

//---  Register CCR2: capture/compare register 2
  CCR2 @offset 0x38 $u32 {
    CCR2_H:16 // at 16: High Capture/Compare 2 value
    CCR2_L:16 // at 0: Low Capture/Compare 2 value
  }

//---  Register CCR3: capture/compare register 3
  CCR3 @offset 0x3c $u32 {
    CCR3_H:16 // at 16: High Capture/Compare value
    CCR3_L:16 // at 0: Low Capture/Compare value
  }

//---  Register CCR4: capture/compare register 4
  CCR4 @offset 0x40 $u32 {
    CCR4_H:16 // at 16: High Capture/Compare value
    CCR4_L:16 // at 0: Low Capture/Compare value
  }

//---  Register DCR: DMA control register
  DCR @offset 0x48 $u32 {
    19
    DBL:5 // at 8: DMA burst length
    3
    DBA:5 // at 0: DMA base address
  }

//---  Register DMAR: DMA address for full transfer
  DMAR @offset 0x4c $u32 {
    16
    DMAB:16 // at 0: DMA register for burst accesses
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM5
//------------------------------------------------------------------------------

registers ©TIM5 @at 0x40000c00 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    22
    CKD:2 // at 8: Clock division
    ARPE // at 7: Auto-reload preload enable
    CMS:2 // at 5: Center-aligned mode selection
    DIR // at 4: Direction
    OPM // at 3: One-pulse mode
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    24
    TI1S // at 7: TI1 selection
    MMS:3 // at 4: Master mode selection
    CCDS // at 3: Capture/compare DMA selection
    3
  }

//---  Register SMCR: slave mode control register
  SMCR @offset 0x8 $u32 {
    16
    ETP // at 15: External trigger polarity
    ECE // at 14: External clock enable
    ETPS:2 // at 12: External trigger prescaler
    ETF:4 // at 8: External trigger filter
    MSM // at 7: Master/Slave mode
    TS:3 // at 4: Trigger selection
    1
    SMS:3 // at 0: Slave mode selection
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    17
    TDE // at 14: Trigger DMA request enable
    1
    CC4DE // at 12: Capture/Compare 4 DMA request enable
    CC3DE // at 11: Capture/Compare 3 DMA request enable
    CC2DE // at 10: Capture/Compare 2 DMA request enable
    CC1DE // at 9: Capture/Compare 1 DMA request enable
    UDE // at 8: Update DMA request enable
    1
    TIE // at 6: Trigger interrupt enable
    1
    CC4IE // at 4: Capture/Compare 4 interrupt enable
    CC3IE // at 3: Capture/Compare 3 interrupt enable
    CC2IE // at 2: Capture/Compare 2 interrupt enable
    CC1IE // at 1: Capture/Compare 1 interrupt enable
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    19
    CC4OF // at 12: Capture/Compare 4 overcapture flag
    CC3OF // at 11: Capture/Compare 3 overcapture flag
    CC2OF // at 10: Capture/compare 2 overcapture flag
    CC1OF // at 9: Capture/Compare 1 overcapture flag
    2
    TIF // at 6: Trigger interrupt flag
    1
    CC4IF // at 4: Capture/Compare 4 interrupt flag
    CC3IF // at 3: Capture/Compare 3 interrupt flag
    CC2IF // at 2: Capture/Compare 2 interrupt flag
    CC1IF // at 1: Capture/compare 1 interrupt flag
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    25
    TG // at 6: Trigger generation
    1
    CC4G // at 4: Capture/compare 4 generation
    CC3G // at 3: Capture/compare 3 generation
    CC2G // at 2: Capture/compare 2 generation
    CC1G // at 1: Capture/compare 1 generation
    UG // at 0: Update generation
  }

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  CCMR1_Output @offset 0x18 $u32 {
    16
    OC2CE // at 15: OC2CE
    OC2M:3 // at 12: OC2M
    OC2PE // at 11: OC2PE
    OC2FE // at 10: OC2FE
    CC2S:2 // at 8: CC2S
    OC1CE // at 7: OC1CE
    OC1M:3 // at 4: OC1M
    OC1PE // at 3: OC1PE
    OC1FE // at 2: OC1FE
    CC1S:2 // at 0: CC1S
  }

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  CCMR1_Input @offset 0x18 $u32 {
    16
    IC2F:4 // at 12: Input capture 2 filter
    IC2PCS:2 // at 10: Input capture 2 prescaler
    CC2S:2 // at 8: Capture/Compare 2 selection
    IC1F:4 // at 4: Input capture 1 filter
    ICPCS:2 // at 2: Input capture 1 prescaler
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR2_Output: capture/compare mode register 2 (output mode)
  CCMR2_Output @offset 0x1c $u32 {
    16
    O24CE // at 15: O24CE
    OC4M:3 // at 12: OC4M
    OC4PE // at 11: OC4PE
    OC4FE // at 10: OC4FE
    CC4S:2 // at 8: CC4S
    OC3CE // at 7: OC3CE
    OC3M:3 // at 4: OC3M
    OC3PE // at 3: OC3PE
    OC3FE // at 2: OC3FE
    CC3S:2 // at 0: CC3S
  }

//---  Register CCMR2_Input: capture/compare mode register 2 (input mode)
  CCMR2_Input @offset 0x1c $u32 {
    16
    IC4F:4 // at 12: Input capture 4 filter
    IC4PSC:2 // at 10: Input capture 4 prescaler
    CC4S:2 // at 8: Capture/Compare 4 selection
    IC3F:4 // at 4: Input capture 3 filter
    IC3PSC:2 // at 2: Input capture 3 prescaler
    CC3S:2 // at 0: Capture/compare 3 selection
  }

//---  Register CCER: capture/compare enable register
  CCER @offset 0x20 $u32 {
    16
    CC4NP // at 15: Capture/Compare 4 output Polarity
    1
    CC4P // at 13: Capture/Compare 3 output Polarity
    CC4E // at 12: Capture/Compare 4 output enable
    CC3NP // at 11: Capture/Compare 3 output Polarity
    1
    CC3P // at 9: Capture/Compare 3 output Polarity
    CC3E // at 8: Capture/Compare 3 output enable
    CC2NP // at 7: Capture/Compare 2 output Polarity
    1
    CC2P // at 5: Capture/Compare 2 output Polarity
    CC2E // at 4: Capture/Compare 2 output enable
    CC1NP // at 3: Capture/Compare 1 output Polarity
    1
    CC1P // at 1: Capture/Compare 1 output Polarity
    CC1E // at 0: Capture/Compare 1 output enable
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    CNT_H:16 // at 16: High counter value
    CNT_L:16 // at 0: Low counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    ARR_H:16 // at 16: High Auto-reload value
    ARR_L:16 // at 0: Low Auto-reload value
  }

//---  Register CCR1: capture/compare register 1
  CCR1 @offset 0x34 $u32 {
    CCR1_H:16 // at 16: High Capture/Compare 1 value
    CCR1_L:16 // at 0: Low Capture/Compare 1 value
  }

//---  Register CCR2: capture/compare register 2
  CCR2 @offset 0x38 $u32 {
    CCR2_H:16 // at 16: High Capture/Compare 2 value
    CCR2_L:16 // at 0: Low Capture/Compare 2 value
  }

//---  Register CCR3: capture/compare register 3
  CCR3 @offset 0x3c $u32 {
    CCR3_H:16 // at 16: High Capture/Compare value
    CCR3_L:16 // at 0: Low Capture/Compare value
  }

//---  Register CCR4: capture/compare register 4
  CCR4 @offset 0x40 $u32 {
    CCR4_H:16 // at 16: High Capture/Compare value
    CCR4_L:16 // at 0: Low Capture/Compare value
  }

//---  Register DCR: DMA control register
  DCR @offset 0x48 $u32 {
    19
    DBL:5 // at 8: DMA burst length
    3
    DBA:5 // at 0: DMA base address
  }

//---  Register DMAR: DMA address for full transfer
  DMAR @offset 0x4c $u32 {
    16
    DMAB:16 // at 0: DMA register for burst accesses
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM6: Basic timers
//------------------------------------------------------------------------------

registers ©TIM6 @at 0x40001000 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    24
    ARPE // at 7: Auto-reload preload enable
    3
    OPM // at 3: One-pulse mode
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    25
    MMS:3 // at 4: Master mode selection
    4
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    23
    UDE // at 8: Update DMA request enable
    7
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    31
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    31
    UG // at 0: Update generation
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    16
    CNT:16 // at 0: Low counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    16
    ARR:16 // at 0: Low Auto-reload value
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM7
//------------------------------------------------------------------------------

registers ©TIM7 @at 0x40001400 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    24
    ARPE // at 7: Auto-reload preload enable
    3
    OPM // at 3: One-pulse mode
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    25
    MMS:3 // at 4: Master mode selection
    4
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    23
    UDE // at 8: Update DMA request enable
    7
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    31
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    31
    UG // at 0: Update generation
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    16
    CNT:16 // at 0: Low counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    16
    ARR:16 // at 0: Low Auto-reload value
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM8
//------------------------------------------------------------------------------

registers ©TIM8 @at 0x40010400 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    22
    CKD:2 // at 8: Clock division
    ARPE // at 7: Auto-reload preload enable
    CMS:2 // at 5: Center-aligned mode selection
    DIR // at 4: Direction
    OPM // at 3: One-pulse mode
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register CR2: control register 2
  CR2 @offset 0x4 $u32 {
    17
    OIS4 // at 14: Output Idle state 4
    OIS3N // at 13: Output Idle state 3
    OIS3 // at 12: Output Idle state 3
    OIS2N // at 11: Output Idle state 2
    OIS2 // at 10: Output Idle state 2
    OIS1N // at 9: Output Idle state 1
    OIS1 // at 8: Output Idle state 1
    TI1S // at 7: TI1 selection
    MMS:3 // at 4: Master mode selection
    CCDS // at 3: Capture/compare DMA selection
    CCUS // at 2: Capture/compare control update selection
    1
    CCPC // at 0: Capture/compare preloaded control
  }

//---  Register SMCR: slave mode control register
  SMCR @offset 0x8 $u32 {
    16
    ETP // at 15: External trigger polarity
    ECE // at 14: External clock enable
    ETPS:2 // at 12: External trigger prescaler
    ETF:4 // at 8: External trigger filter
    MSM // at 7: Master/Slave mode
    TS:3 // at 4: Trigger selection
    1
    SMS:3 // at 0: Slave mode selection
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    17
    TDE // at 14: Trigger DMA request enable
    COMDE // at 13: COM DMA request enable
    CC4DE // at 12: Capture/Compare 4 DMA request enable
    CC3DE // at 11: Capture/Compare 3 DMA request enable
    CC2DE // at 10: Capture/Compare 2 DMA request enable
    CC1DE // at 9: Capture/Compare 1 DMA request enable
    UDE // at 8: Update DMA request enable
    BIE // at 7: Break interrupt enable
    TIE // at 6: Trigger interrupt enable
    COMIE // at 5: COM interrupt enable
    CC4IE // at 4: Capture/Compare 4 interrupt enable
    CC3IE // at 3: Capture/Compare 3 interrupt enable
    CC2IE // at 2: Capture/Compare 2 interrupt enable
    CC1IE // at 1: Capture/Compare 1 interrupt enable
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    19
    CC4OF // at 12: Capture/Compare 4 overcapture flag
    CC3OF // at 11: Capture/Compare 3 overcapture flag
    CC2OF // at 10: Capture/compare 2 overcapture flag
    CC1OF // at 9: Capture/Compare 1 overcapture flag
    1
    BIF // at 7: Break interrupt flag
    TIF // at 6: Trigger interrupt flag
    COMIF // at 5: COM interrupt flag
    CC4IF // at 4: Capture/Compare 4 interrupt flag
    CC3IF // at 3: Capture/Compare 3 interrupt flag
    CC2IF // at 2: Capture/Compare 2 interrupt flag
    CC1IF // at 1: Capture/compare 1 interrupt flag
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    24
    BG // at 7: Break generation
    TG // at 6: Trigger generation
    COMG // at 5: Capture/Compare control update generation
    CC4G // at 4: Capture/compare 4 generation
    CC3G // at 3: Capture/compare 3 generation
    CC2G // at 2: Capture/compare 2 generation
    CC1G // at 1: Capture/compare 1 generation
    UG // at 0: Update generation
  }

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  CCMR1_Output @offset 0x18 $u32 {
    16
    OC2CE // at 15: Output Compare 2 clear enable
    OC2M:3 // at 12: Output Compare 2 mode
    OC2PE // at 11: Output Compare 2 preload enable
    OC2FE // at 10: Output Compare 2 fast enable
    CC2S:2 // at 8: Capture/Compare 2 selection
    OC1CE // at 7: Output Compare 1 clear enable
    OC1M:3 // at 4: Output Compare 1 mode
    OC1PE // at 3: Output Compare 1 preload enable
    OC1FE // at 2: Output Compare 1 fast enable
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  CCMR1_Input @offset 0x18 $u32 {
    16
    IC2F:4 // at 12: Input capture 2 filter
    IC2PCS:2 // at 10: Input capture 2 prescaler
    CC2S:2 // at 8: Capture/Compare 2 selection
    IC1F:4 // at 4: Input capture 1 filter
    ICPCS:2 // at 2: Input capture 1 prescaler
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR2_Output: capture/compare mode register 2 (output mode)
  CCMR2_Output @offset 0x1c $u32 {
    16
    OC4CE // at 15: Output compare 4 clear enable
    OC4M:3 // at 12: Output compare 4 mode
    OC4PE // at 11: Output compare 4 preload enable
    OC4FE // at 10: Output compare 4 fast enable
    CC4S:2 // at 8: Capture/Compare 4 selection
    OC3CE // at 7: Output compare 3 clear enable
    OC3M:3 // at 4: Output compare 3 mode
    OC3PE // at 3: Output compare 3 preload enable
    OC3FE // at 2: Output compare 3 fast enable
    CC3S:2 // at 0: Capture/Compare 3 selection
  }

//---  Register CCMR2_Input: capture/compare mode register 2 (input mode)
  CCMR2_Input @offset 0x1c $u32 {
    16
    IC4F:4 // at 12: Input capture 4 filter
    IC4PSC:2 // at 10: Input capture 4 prescaler
    CC4S:2 // at 8: Capture/Compare 4 selection
    IC3F:4 // at 4: Input capture 3 filter
    IC3PSC:2 // at 2: Input capture 3 prescaler
    CC3S:2 // at 0: Capture/compare 3 selection
  }

//---  Register CCER: capture/compare enable register
  CCER @offset 0x20 $u32 {
    18
    CC4P // at 13: Capture/Compare 3 output Polarity
    CC4E // at 12: Capture/Compare 4 output enable
    CC3NP // at 11: Capture/Compare 3 output Polarity
    CC3NE // at 10: Capture/Compare 3 complementary output enable
    CC3P // at 9: Capture/Compare 3 output Polarity
    CC3E // at 8: Capture/Compare 3 output enable
    CC2NP // at 7: Capture/Compare 2 output Polarity
    CC2NE // at 6: Capture/Compare 2 complementary output enable
    CC2P // at 5: Capture/Compare 2 output Polarity
    CC2E // at 4: Capture/Compare 2 output enable
    CC1NP // at 3: Capture/Compare 1 output Polarity
    CC1NE // at 2: Capture/Compare 1 complementary output enable
    CC1P // at 1: Capture/Compare 1 output Polarity
    CC1E // at 0: Capture/Compare 1 output enable
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    16
    CNT:16 // at 0: counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    16
    ARR:16 // at 0: Auto-reload value
  }

//---  Register CCR1: capture/compare register 1
  CCR1 @offset 0x34 $u32 {
    16
    CCR1:16 // at 0: Capture/Compare 1 value
  }

//---  Register CCR2: capture/compare register 2
  CCR2 @offset 0x38 $u32 {
    16
    CCR2:16 // at 0: Capture/Compare 2 value
  }

//---  Register CCR3: capture/compare register 3
  CCR3 @offset 0x3c $u32 {
    16
    CCR3:16 // at 0: Capture/Compare value
  }

//---  Register CCR4: capture/compare register 4
  CCR4 @offset 0x40 $u32 {
    16
    CCR4:16 // at 0: Capture/Compare value
  }

//---  Register DCR: DMA control register
  DCR @offset 0x48 $u32 {
    19
    DBL:5 // at 8: DMA burst length
    3
    DBA:5 // at 0: DMA base address
  }

//---  Register DMAR: DMA address for full transfer
  DMAR @offset 0x4c $u32 {
    16
    DMAB:16 // at 0: DMA register for burst accesses
  }

//---  Register RCR: repetition counter register
  RCR @offset 0x30 $u32 {
    24
    REP:8 // at 0: Repetition counter value
  }

//---  Register BDTR: break and dead-time register
  BDTR @offset 0x44 $u32 {
    6
    BK2P // at 25: Break 2 polarity
    BK2E // at 24: Break 2 enable
    BK2F:4 // at 20: Break 2 filter
    BKF:4 // at 16: Break filter
    MOE // at 15: Main output enable
    AOE // at 14: Automatic output enable
    BKP // at 13: Break polarity
    BKE // at 12: Break enable
    OSSR // at 11: Off-state selection for Run mode
    OSSI // at 10: Off-state selection for Idle mode
    LOCK:2 // at 8: Lock configuration
    DTG:8 // at 0: Dead-time generator setup
  }

//---  Register CCMR3_Output: capture/compare mode register 3 (output mode)
  CCMR3_Output @offset 0x54 $u32 {
    7
    OC6M3 // at 24: Output Compare 6 mode
    7
    OC5M3 // at 16: Output Compare 5 mode
    OC6CE // at 15: Output compare 6 clear enable
    OC6M:3 // at 12: Output compare 6 mode
    OC6PE // at 11: Output compare 6 preload enable
    OC6FE // at 10: Output compare 6 fast enable
    2
    OC5CE // at 7: Output compare 5 clear enable
    OC5M:3 // at 4: Output compare 5 mode
    OC5PE // at 3: Output compare 5 preload enable
    OC5FE // at 2: Output compare 5 fast enable
    2
  }

//---  Register CCR5: capture/compare register 5
  CCR5 @offset 0x58 $u32 {
    GC5C3 // at 31: Group Channel 5 and Channel 3
    GC5C2 // at 30: Group Channel 5 and Channel 2
    GC5C1 // at 29: Group Channel 5 and Channel 1
    13
    CCR5:16 // at 0: Capture/Compare 5 value
  }

//---  Register CRR6: capture/compare register 6
  CRR6 @offset 0x5c $u32 {
    16
    CCR6:16 // at 0: Capture/Compare 6 value
  }

//---  Register AF1: alternate function option register 1
  AF1 @offset 0x60 $u32 {
    22
    BKINP // at 9: BRK BKIN input polarity
    BKDFBKE // at 8: BRK DFSDM_BREAK[0] enable
    7
    BKINE // at 0: BRK BKIN input enable
  }

//---  Register AF2: alternate function option register 2
  AF2 @offset 0x64 $u32 {
    22
    BK2INP // at 9: BRK2 BKIN2 input polarity
    BK2DFBKE // at 8: BRK2 DFSDM_BREAK enable
    7
    BK2INE // at 0: BRK2 BKIN input enable
  }

}

//------------------------------------------------------------------------------
// Peripheral TIM9: General purpose timers
//------------------------------------------------------------------------------

registers ©TIM9 @at 0x40014000 {
//---  Register CR1: control register 1
  CR1 @offset 0x0 $u32 {
    22
    CKD:2 // at 8: Clock division
    ARPE // at 7: Auto-reload preload enable
    3
    OPM // at 3: One-pulse mode
    URS // at 2: Update request source
    UDIS // at 1: Update disable
    CEN // at 0: Counter enable
  }

//---  Register SMCR: slave mode control register
  SMCR @offset 0x8 $u32 {
    24
    MSM // at 7: Master/Slave mode
    TS:3 // at 4: Trigger selection
    1
    SMS:3 // at 0: Slave mode selection
  }

//---  Register DIER: DMA/Interrupt enable register
  DIER @offset 0xc $u32 {
    25
    TIE // at 6: Trigger interrupt enable
    3
    CC2IE // at 2: Capture/Compare 2 interrupt enable
    CC1IE // at 1: Capture/Compare 1 interrupt enable
    UIE // at 0: Update interrupt enable
  }

//---  Register SR: status register
  SR @offset 0x10 $u32 {
    21
    CC2OF // at 10: Capture/compare 2 overcapture flag
    CC1OF // at 9: Capture/Compare 1 overcapture flag
    2
    TIF // at 6: Trigger interrupt flag
    3
    CC2IF // at 2: Capture/Compare 2 interrupt flag
    CC1IF // at 1: Capture/compare 1 interrupt flag
    UIF // at 0: Update interrupt flag
  }

//---  Register EGR: event generation register
  EGR @offset 0x14 $u32 {
    25
    TG // at 6: Trigger generation
    3
    CC2G // at 2: Capture/compare 2 generation
    CC1G // at 1: Capture/compare 1 generation
    UG // at 0: Update generation
  }

//---  Register CCMR1_Output: capture/compare mode register 1 (output mode)
  CCMR1_Output @offset 0x18 $u32 {
    17
    OC2M:3 // at 12: Output Compare 2 mode
    OC2PE // at 11: Output Compare 2 preload enable
    OC2FE // at 10: Output Compare 2 fast enable
    CC2S:2 // at 8: Capture/Compare 2 selection
    1
    OC1M:3 // at 4: Output Compare 1 mode
    OC1PE // at 3: Output Compare 1 preload enable
    OC1FE // at 2: Output Compare 1 fast enable
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCMR1_Input: capture/compare mode register 1 (input mode)
  CCMR1_Input @offset 0x18 $u32 {
    17
    IC2F:3 // at 12: Input capture 2 filter
    IC2PCS:2 // at 10: Input capture 2 prescaler
    CC2S:2 // at 8: Capture/Compare 2 selection
    1
    IC1F:3 // at 4: Input capture 1 filter
    ICPCS:2 // at 2: Input capture 1 prescaler
    CC1S:2 // at 0: Capture/Compare 1 selection
  }

//---  Register CCER: capture/compare enable register
  CCER @offset 0x20 $u32 {
    24
    CC2NP // at 7: Capture/Compare 2 output Polarity
    1
    CC2P // at 5: Capture/Compare 2 output Polarity
    CC2E // at 4: Capture/Compare 2 output enable
    CC1NP // at 3: Capture/Compare 1 output Polarity
    1
    CC1P // at 1: Capture/Compare 1 output Polarity
    CC1E // at 0: Capture/Compare 1 output enable
  }

//---  Register CNT: counter
  CNT @offset 0x24 $u32 {
    16
    CNT:16 // at 0: counter value
  }

//---  Register PSC: prescaler
  PSC @offset 0x28 $u32 {
    16
    PSC:16 // at 0: Prescaler value
  }

//---  Register ARR: auto-reload register
  ARR @offset 0x2c $u32 {
    16
    ARR:16 // at 0: Auto-reload value
  }

//---  Register CCR1: capture/compare register 1
  CCR1 @offset 0x34 $u32 {
    16
    CCR1:16 // at 0: Capture/Compare 1 value
  }

//---  Register CCR2: capture/compare register 2
  CCR2 @offset 0x38 $u32 {
    16
    CCR2:16 // at 0: Capture/Compare 2 value
  }

}

//------------------------------------------------------------------------------
// Peripheral UART4
//------------------------------------------------------------------------------

registers ©UART4 @at 0x40004c00 {
//---  Register CR1: Control register 1
  CR1 @offset 0x0 $u32 {
    3
    M1 // at 28: Word length
    EOBIE // at 27: End of Block interrupt enable
    RTOIE // at 26: Receiver timeout interrupt enable
    DEAT4 // at 25: Driver Enable assertion time
    DEAT3 // at 24: DEAT3
    DEAT2 // at 23: DEAT2
    DEAT1 // at 22: DEAT1
    DEAT0 // at 21: DEAT0
    DEDT4 // at 20: Driver Enable de-assertion time
    DEDT3 // at 19: DEDT3
    DEDT2 // at 18: DEDT2
    DEDT1 // at 17: DEDT1
    DEDT0 // at 16: DEDT0
    OVER8 // at 15: Oversampling mode
    CMIE // at 14: Character match interrupt enable
    MME // at 13: Mute mode enable
    M0 // at 12: Word length
    WAKE // at 11: Receiver wakeup method
    PCE // at 10: Parity control enable
    PS // at 9: Parity selection
    PEIE // at 8: PE interrupt enable
    TXEIE // at 7: interrupt enable
    TCIE // at 6: Transmission complete interrupt enable
    RXNEIE // at 5: RXNE interrupt enable
    IDLEIE // at 4: IDLE interrupt enable
    TE // at 3: Transmitter enable
    RE // at 2: Receiver enable
    UESM // at 1: USART enable in Stop mode
    UE // at 0: USART enable
  }

//---  Register CR2: Control register 2
  CR2 @offset 0x4 $u32 {
    ADD4_7:4 // at 28: Address of the USART node
    ADD0_3:4 // at 24: Address of the USART node
    RTOEN // at 23: Receiver timeout enable
    ABRMOD1 // at 22: Auto baud rate mode
    ABRMOD0 // at 21: ABRMOD0
    ABREN // at 20: Auto baud rate enable
    MSBFIRST // at 19: Most significant bit first
    TAINV // at 18: Binary data inversion
    TXINV // at 17: TX pin active level inversion
    RXINV // at 16: RX pin active level inversion
    SWAP // at 15: Swap TX/RX pins
    LINEN // at 14: LIN mode enable
    STOP:2 // at 12: STOP bits
    CLKEN // at 11: Clock enable
    CPOL // at 10: Clock polarity
    CPHA // at 9: Clock phase
    LBCL // at 8: Last bit clock pulse
    1
    LBDIE // at 6: LIN break detection interrupt enable
    LBDL // at 5: LIN break detection length
    ADDM7 // at 4: 7-bit Address Detection/4-bit Address Detection
    4
  }

//---  Register CR3: Control register 3
  CR3 @offset 0x8 $u32 {
    9
    WUFIE // at 22: Wakeup from Stop mode interrupt enable
    WUS:2 // at 20: Wakeup from Stop mode interrupt flag selection
    SCARCNT:3 // at 17: Smartcard auto-retry count
    1
    DEP // at 15: Driver enable polarity selection
    DEM // at 14: Driver enable mode
    DDRE // at 13: DMA Disable on Reception Error
    OVRDIS // at 12: Overrun Disable
    ONEBIT // at 11: One sample bit method enable
    CTSIE // at 10: CTS interrupt enable
    CTSE // at 9: CTS enable
    RTSE // at 8: RTS enable
    DMAT // at 7: DMA enable transmitter
    DMAR // at 6: DMA enable receiver
    SCEN // at 5: Smartcard mode enable
    NACK // at 4: Smartcard NACK enable
    HDSEL // at 3: Half-duplex selection
    IRLP // at 2: Ir low-power
    IREN // at 1: Ir mode enable
    EIE // at 0: Error interrupt enable
  }

//---  Register BRR: Baud rate register
  BRR @offset 0xc $u32 {
    16
    DIV_Mantissa:12 // at 4: DIV_Mantissa
    DIV_Fraction:4 // at 0: DIV_Fraction
  }

//---  Register GTPR: Guard time and prescaler register
  GTPR @offset 0x10 $u32 {
    16
    GT:8 // at 8: Guard time value
    PSC:8 // at 0: Prescaler value
  }

//---  Register RTOR: Receiver timeout register
  RTOR @offset 0x14 $u32 {
    BLEN:8 // at 24: Block Length
    RTO:24 // at 0: Receiver timeout value
  }

//---  Register RQR: Request register
  RQR @offset 0x18 $u32 {
    27
    TXFRQ // at 4: Transmit data flush request
    RXFRQ // at 3: Receive data flush request
    MMRQ // at 2: Mute mode request
    SBKRQ // at 1: Send break request
    ABRRQ // at 0: Auto baud rate request
  }

//---  Register ISR: Interrupt & status register
  ISR @offset 0x1c @ro $u32 {
    9
    REACK // at 22: REACK
    TEACK // at 21: TEACK
    WUF // at 20: WUF
    RWU // at 19: RWU
    SBKF // at 18: SBKF
    CMF // at 17: CMF
    BUSY // at 16: BUSY
    ABRF // at 15: ABRF
    ABRE // at 14: ABRE
    1
    EOBF // at 12: EOBF
    RTOF // at 11: RTOF
    CTS // at 10: CTS
    CTSIF // at 9: CTSIF
    LBDF // at 8: LBDF
    TXE // at 7: TXE
    TC // at 6: TC
    RXNE // at 5: RXNE
    IDLE // at 4: IDLE
    ORE // at 3: ORE
    NF // at 2: NF
    FE // at 1: FE
    PE // at 0: PE
  }

//---  Register ICR: Interrupt flag clear register
  ICR @offset 0x20 $u32 {
    11
    WUCF // at 20: Wakeup from Stop mode clear flag
    2
    CMCF // at 17: Character match clear flag
    4
    EOBCF // at 12: End of block clear flag
    RTOCF // at 11: Receiver timeout clear flag
    1
    CTSCF // at 9: CTS clear flag
    LBDCF // at 8: LIN break detection clear flag
    1
    TCCF // at 6: Transmission complete clear flag
    1
    IDLECF // at 4: Idle line detected clear flag
    ORECF // at 3: Overrun error clear flag
    NCF // at 2: Noise detected clear flag
    FECF // at 1: Framing error clear flag
    PECF // at 0: Parity error clear flag
  }

//---  Register RDR: Receive data register
  RDR @offset 0x24 @ro $u32 {
    23
    RDR:9 // at 0: Receive data value
  }

//---  Register TDR: Transmit data register
  TDR @offset 0x28 $u32 {
    23
    TDR:9 // at 0: Transmit data value
  }

}

//------------------------------------------------------------------------------
// Peripheral UART5
//------------------------------------------------------------------------------

registers ©UART5 @at 0x40005000 {
//---  Register CR1: Control register 1
  CR1 @offset 0x0 $u32 {
    3
    M1 // at 28: Word length
    EOBIE // at 27: End of Block interrupt enable
    RTOIE // at 26: Receiver timeout interrupt enable
    DEAT4 // at 25: Driver Enable assertion time
    DEAT3 // at 24: DEAT3
    DEAT2 // at 23: DEAT2
    DEAT1 // at 22: DEAT1
    DEAT0 // at 21: DEAT0
    DEDT4 // at 20: Driver Enable de-assertion time
    DEDT3 // at 19: DEDT3
    DEDT2 // at 18: DEDT2
    DEDT1 // at 17: DEDT1
    DEDT0 // at 16: DEDT0
    OVER8 // at 15: Oversampling mode
    CMIE // at 14: Character match interrupt enable
    MME // at 13: Mute mode enable
    M0 // at 12: Word length
    WAKE // at 11: Receiver wakeup method
    PCE // at 10: Parity control enable
    PS // at 9: Parity selection
    PEIE // at 8: PE interrupt enable
    TXEIE // at 7: interrupt enable
    TCIE // at 6: Transmission complete interrupt enable
    RXNEIE // at 5: RXNE interrupt enable
    IDLEIE // at 4: IDLE interrupt enable
    TE // at 3: Transmitter enable
    RE // at 2: Receiver enable
    UESM // at 1: USART enable in Stop mode
    UE // at 0: USART enable
  }

//---  Register CR2: Control register 2
  CR2 @offset 0x4 $u32 {
    ADD4_7:4 // at 28: Address of the USART node
    ADD0_3:4 // at 24: Address of the USART node
    RTOEN // at 23: Receiver timeout enable
    ABRMOD1 // at 22: Auto baud rate mode
    ABRMOD0 // at 21: ABRMOD0
    ABREN // at 20: Auto baud rate enable
    MSBFIRST // at 19: Most significant bit first
    TAINV // at 18: Binary data inversion
    TXINV // at 17: TX pin active level inversion
    RXINV // at 16: RX pin active level inversion
    SWAP // at 15: Swap TX/RX pins
    LINEN // at 14: LIN mode enable
    STOP:2 // at 12: STOP bits
    CLKEN // at 11: Clock enable
    CPOL // at 10: Clock polarity
    CPHA // at 9: Clock phase
    LBCL // at 8: Last bit clock pulse
    1
    LBDIE // at 6: LIN break detection interrupt enable
    LBDL // at 5: LIN break detection length
    ADDM7 // at 4: 7-bit Address Detection/4-bit Address Detection
    4
  }

//---  Register CR3: Control register 3
  CR3 @offset 0x8 $u32 {
    9
    WUFIE // at 22: Wakeup from Stop mode interrupt enable
    WUS:2 // at 20: Wakeup from Stop mode interrupt flag selection
    SCARCNT:3 // at 17: Smartcard auto-retry count
    1
    DEP // at 15: Driver enable polarity selection
    DEM // at 14: Driver enable mode
    DDRE // at 13: DMA Disable on Reception Error
    OVRDIS // at 12: Overrun Disable
    ONEBIT // at 11: One sample bit method enable
    CTSIE // at 10: CTS interrupt enable
    CTSE // at 9: CTS enable
    RTSE // at 8: RTS enable
    DMAT // at 7: DMA enable transmitter
    DMAR // at 6: DMA enable receiver
    SCEN // at 5: Smartcard mode enable
    NACK // at 4: Smartcard NACK enable
    HDSEL // at 3: Half-duplex selection
    IRLP // at 2: Ir low-power
    IREN // at 1: Ir mode enable
    EIE // at 0: Error interrupt enable
  }

//---  Register BRR: Baud rate register
  BRR @offset 0xc $u32 {
    16
    DIV_Mantissa:12 // at 4: DIV_Mantissa
    DIV_Fraction:4 // at 0: DIV_Fraction
  }

//---  Register GTPR: Guard time and prescaler register
  GTPR @offset 0x10 $u32 {
    16
    GT:8 // at 8: Guard time value
    PSC:8 // at 0: Prescaler value
  }

//---  Register RTOR: Receiver timeout register
  RTOR @offset 0x14 $u32 {
    BLEN:8 // at 24: Block Length
    RTO:24 // at 0: Receiver timeout value
  }

//---  Register RQR: Request register
  RQR @offset 0x18 $u32 {
    27
    TXFRQ // at 4: Transmit data flush request
    RXFRQ // at 3: Receive data flush request
    MMRQ // at 2: Mute mode request
    SBKRQ // at 1: Send break request
    ABRRQ // at 0: Auto baud rate request
  }

//---  Register ISR: Interrupt & status register
  ISR @offset 0x1c @ro $u32 {
    9
    REACK // at 22: REACK
    TEACK // at 21: TEACK
    WUF // at 20: WUF
    RWU // at 19: RWU
    SBKF // at 18: SBKF
    CMF // at 17: CMF
    BUSY // at 16: BUSY
    ABRF // at 15: ABRF
    ABRE // at 14: ABRE
    1
    EOBF // at 12: EOBF
    RTOF // at 11: RTOF
    CTS // at 10: CTS
    CTSIF // at 9: CTSIF
    LBDF // at 8: LBDF
    TXE // at 7: TXE
    TC // at 6: TC
    RXNE // at 5: RXNE
    IDLE // at 4: IDLE
    ORE // at 3: ORE
    NF // at 2: NF
    FE // at 1: FE
    PE // at 0: PE
  }

//---  Register ICR: Interrupt flag clear register
  ICR @offset 0x20 $u32 {
    11
    WUCF // at 20: Wakeup from Stop mode clear flag
    2
    CMCF // at 17: Character match clear flag
    4
    EOBCF // at 12: End of block clear flag
    RTOCF // at 11: Receiver timeout clear flag
    1
    CTSCF // at 9: CTS clear flag
    LBDCF // at 8: LIN break detection clear flag
    1
    TCCF // at 6: Transmission complete clear flag
    1
    IDLECF // at 4: Idle line detected clear flag
    ORECF // at 3: Overrun error clear flag
    NCF // at 2: Noise detected clear flag
    FECF // at 1: Framing error clear flag
    PECF // at 0: Parity error clear flag
  }

//---  Register RDR: Receive data register
  RDR @offset 0x24 @ro $u32 {
    23
    RDR:9 // at 0: Receive data value
  }

//---  Register TDR: Transmit data register
  TDR @offset 0x28 $u32 {
    23
    TDR:9 // at 0: Transmit data value
  }

}

//------------------------------------------------------------------------------
// Peripheral UART7
//------------------------------------------------------------------------------

registers ©UART7 @at 0x40007800 {
//---  Register CR1: Control register 1
  CR1 @offset 0x0 $u32 {
    3
    M1 // at 28: Word length
    EOBIE // at 27: End of Block interrupt enable
    RTOIE // at 26: Receiver timeout interrupt enable
    DEAT4 // at 25: Driver Enable assertion time
    DEAT3 // at 24: DEAT3
    DEAT2 // at 23: DEAT2
    DEAT1 // at 22: DEAT1
    DEAT0 // at 21: DEAT0
    DEDT4 // at 20: Driver Enable de-assertion time
    DEDT3 // at 19: DEDT3
    DEDT2 // at 18: DEDT2
    DEDT1 // at 17: DEDT1
    DEDT0 // at 16: DEDT0
    OVER8 // at 15: Oversampling mode
    CMIE // at 14: Character match interrupt enable
    MME // at 13: Mute mode enable
    M0 // at 12: Word length
    WAKE // at 11: Receiver wakeup method
    PCE // at 10: Parity control enable
    PS // at 9: Parity selection
    PEIE // at 8: PE interrupt enable
    TXEIE // at 7: interrupt enable
    TCIE // at 6: Transmission complete interrupt enable
    RXNEIE // at 5: RXNE interrupt enable
    IDLEIE // at 4: IDLE interrupt enable
    TE // at 3: Transmitter enable
    RE // at 2: Receiver enable
    UESM // at 1: USART enable in Stop mode
    UE // at 0: USART enable
  }

//---  Register CR2: Control register 2
  CR2 @offset 0x4 $u32 {
    ADD4_7:4 // at 28: Address of the USART node
    ADD0_3:4 // at 24: Address of the USART node
    RTOEN // at 23: Receiver timeout enable
    ABRMOD1 // at 22: Auto baud rate mode
    ABRMOD0 // at 21: ABRMOD0
    ABREN // at 20: Auto baud rate enable
    MSBFIRST // at 19: Most significant bit first
    TAINV // at 18: Binary data inversion
    TXINV // at 17: TX pin active level inversion
    RXINV // at 16: RX pin active level inversion
    SWAP // at 15: Swap TX/RX pins
    LINEN // at 14: LIN mode enable
    STOP:2 // at 12: STOP bits
    CLKEN // at 11: Clock enable
    CPOL // at 10: Clock polarity
    CPHA // at 9: Clock phase
    LBCL // at 8: Last bit clock pulse
    1
    LBDIE // at 6: LIN break detection interrupt enable
    LBDL // at 5: LIN break detection length
    ADDM7 // at 4: 7-bit Address Detection/4-bit Address Detection
    4
  }

//---  Register CR3: Control register 3
  CR3 @offset 0x8 $u32 {
    9
    WUFIE // at 22: Wakeup from Stop mode interrupt enable
    WUS:2 // at 20: Wakeup from Stop mode interrupt flag selection
    SCARCNT:3 // at 17: Smartcard auto-retry count
    1
    DEP // at 15: Driver enable polarity selection
    DEM // at 14: Driver enable mode
    DDRE // at 13: DMA Disable on Reception Error
    OVRDIS // at 12: Overrun Disable
    ONEBIT // at 11: One sample bit method enable
    CTSIE // at 10: CTS interrupt enable
    CTSE // at 9: CTS enable
    RTSE // at 8: RTS enable
    DMAT // at 7: DMA enable transmitter
    DMAR // at 6: DMA enable receiver
    SCEN // at 5: Smartcard mode enable
    NACK // at 4: Smartcard NACK enable
    HDSEL // at 3: Half-duplex selection
    IRLP // at 2: Ir low-power
    IREN // at 1: Ir mode enable
    EIE // at 0: Error interrupt enable
  }

//---  Register BRR: Baud rate register
  BRR @offset 0xc $u32 {
    16
    DIV_Mantissa:12 // at 4: DIV_Mantissa
    DIV_Fraction:4 // at 0: DIV_Fraction
  }

//---  Register GTPR: Guard time and prescaler register
  GTPR @offset 0x10 $u32 {
    16
    GT:8 // at 8: Guard time value
    PSC:8 // at 0: Prescaler value
  }

//---  Register RTOR: Receiver timeout register
  RTOR @offset 0x14 $u32 {
    BLEN:8 // at 24: Block Length
    RTO:24 // at 0: Receiver timeout value
  }

//---  Register RQR: Request register
  RQR @offset 0x18 $u32 {
    27
    TXFRQ // at 4: Transmit data flush request
    RXFRQ // at 3: Receive data flush request
    MMRQ // at 2: Mute mode request
    SBKRQ // at 1: Send break request
    ABRRQ // at 0: Auto baud rate request
  }

//---  Register ISR: Interrupt & status register
  ISR @offset 0x1c @ro $u32 {
    9
    REACK // at 22: REACK
    TEACK // at 21: TEACK
    WUF // at 20: WUF
    RWU // at 19: RWU
    SBKF // at 18: SBKF
    CMF // at 17: CMF
    BUSY // at 16: BUSY
    ABRF // at 15: ABRF
    ABRE // at 14: ABRE
    1
    EOBF // at 12: EOBF
    RTOF // at 11: RTOF
    CTS // at 10: CTS
    CTSIF // at 9: CTSIF
    LBDF // at 8: LBDF
    TXE // at 7: TXE
    TC // at 6: TC
    RXNE // at 5: RXNE
    IDLE // at 4: IDLE
    ORE // at 3: ORE
    NF // at 2: NF
    FE // at 1: FE
    PE // at 0: PE
  }

//---  Register ICR: Interrupt flag clear register
  ICR @offset 0x20 $u32 {
    11
    WUCF // at 20: Wakeup from Stop mode clear flag
    2
    CMCF // at 17: Character match clear flag
    4
    EOBCF // at 12: End of block clear flag
    RTOCF // at 11: Receiver timeout clear flag
    1
    CTSCF // at 9: CTS clear flag
    LBDCF // at 8: LIN break detection clear flag
    1
    TCCF // at 6: Transmission complete clear flag
    1
    IDLECF // at 4: Idle line detected clear flag
    ORECF // at 3: Overrun error clear flag
    NCF // at 2: Noise detected clear flag
    FECF // at 1: Framing error clear flag
    PECF // at 0: Parity error clear flag
  }

//---  Register RDR: Receive data register
  RDR @offset 0x24 @ro $u32 {
    23
    RDR:9 // at 0: Receive data value
  }

//---  Register TDR: Transmit data register
  TDR @offset 0x28 $u32 {
    23
    TDR:9 // at 0: Transmit data value
  }

}

//------------------------------------------------------------------------------
// Peripheral UART8
//------------------------------------------------------------------------------

registers ©UART8 @at 0x40007c00 {
//---  Register CR1: Control register 1
  CR1 @offset 0x0 $u32 {
    3
    M1 // at 28: Word length
    EOBIE // at 27: End of Block interrupt enable
    RTOIE // at 26: Receiver timeout interrupt enable
    DEAT4 // at 25: Driver Enable assertion time
    DEAT3 // at 24: DEAT3
    DEAT2 // at 23: DEAT2
    DEAT1 // at 22: DEAT1
    DEAT0 // at 21: DEAT0
    DEDT4 // at 20: Driver Enable de-assertion time
    DEDT3 // at 19: DEDT3
    DEDT2 // at 18: DEDT2
    DEDT1 // at 17: DEDT1
    DEDT0 // at 16: DEDT0
    OVER8 // at 15: Oversampling mode
    CMIE // at 14: Character match interrupt enable
    MME // at 13: Mute mode enable
    M0 // at 12: Word length
    WAKE // at 11: Receiver wakeup method
    PCE // at 10: Parity control enable
    PS // at 9: Parity selection
    PEIE // at 8: PE interrupt enable
    TXEIE // at 7: interrupt enable
    TCIE // at 6: Transmission complete interrupt enable
    RXNEIE // at 5: RXNE interrupt enable
    IDLEIE // at 4: IDLE interrupt enable
    TE // at 3: Transmitter enable
    RE // at 2: Receiver enable
    UESM // at 1: USART enable in Stop mode
    UE // at 0: USART enable
  }

//---  Register CR2: Control register 2
  CR2 @offset 0x4 $u32 {
    ADD4_7:4 // at 28: Address of the USART node
    ADD0_3:4 // at 24: Address of the USART node
    RTOEN // at 23: Receiver timeout enable
    ABRMOD1 // at 22: Auto baud rate mode
    ABRMOD0 // at 21: ABRMOD0
    ABREN // at 20: Auto baud rate enable
    MSBFIRST // at 19: Most significant bit first
    TAINV // at 18: Binary data inversion
    TXINV // at 17: TX pin active level inversion
    RXINV // at 16: RX pin active level inversion
    SWAP // at 15: Swap TX/RX pins
    LINEN // at 14: LIN mode enable
    STOP:2 // at 12: STOP bits
    CLKEN // at 11: Clock enable
    CPOL // at 10: Clock polarity
    CPHA // at 9: Clock phase
    LBCL // at 8: Last bit clock pulse
    1
    LBDIE // at 6: LIN break detection interrupt enable
    LBDL // at 5: LIN break detection length
    ADDM7 // at 4: 7-bit Address Detection/4-bit Address Detection
    4
  }

//---  Register CR3: Control register 3
  CR3 @offset 0x8 $u32 {
    9
    WUFIE // at 22: Wakeup from Stop mode interrupt enable
    WUS:2 // at 20: Wakeup from Stop mode interrupt flag selection
    SCARCNT:3 // at 17: Smartcard auto-retry count
    1
    DEP // at 15: Driver enable polarity selection
    DEM // at 14: Driver enable mode
    DDRE // at 13: DMA Disable on Reception Error
    OVRDIS // at 12: Overrun Disable
    ONEBIT // at 11: One sample bit method enable
    CTSIE // at 10: CTS interrupt enable
    CTSE // at 9: CTS enable
    RTSE // at 8: RTS enable
    DMAT // at 7: DMA enable transmitter
    DMAR // at 6: DMA enable receiver
    SCEN // at 5: Smartcard mode enable
    NACK // at 4: Smartcard NACK enable
    HDSEL // at 3: Half-duplex selection
    IRLP // at 2: Ir low-power
    IREN // at 1: Ir mode enable
    EIE // at 0: Error interrupt enable
  }

//---  Register BRR: Baud rate register
  BRR @offset 0xc $u32 {
    16
    DIV_Mantissa:12 // at 4: DIV_Mantissa
    DIV_Fraction:4 // at 0: DIV_Fraction
  }

//---  Register GTPR: Guard time and prescaler register
  GTPR @offset 0x10 $u32 {
    16
    GT:8 // at 8: Guard time value
    PSC:8 // at 0: Prescaler value
  }

//---  Register RTOR: Receiver timeout register
  RTOR @offset 0x14 $u32 {
    BLEN:8 // at 24: Block Length
    RTO:24 // at 0: Receiver timeout value
  }

//---  Register RQR: Request register
  RQR @offset 0x18 $u32 {
    27
    TXFRQ // at 4: Transmit data flush request
    RXFRQ // at 3: Receive data flush request
    MMRQ // at 2: Mute mode request
    SBKRQ // at 1: Send break request
    ABRRQ // at 0: Auto baud rate request
  }

//---  Register ISR: Interrupt & status register
  ISR @offset 0x1c @ro $u32 {
    9
    REACK // at 22: REACK
    TEACK // at 21: TEACK
    WUF // at 20: WUF
    RWU // at 19: RWU
    SBKF // at 18: SBKF
    CMF // at 17: CMF
    BUSY // at 16: BUSY
    ABRF // at 15: ABRF
    ABRE // at 14: ABRE
    1
    EOBF // at 12: EOBF
    RTOF // at 11: RTOF
    CTS // at 10: CTS
    CTSIF // at 9: CTSIF
    LBDF // at 8: LBDF
    TXE // at 7: TXE
    TC // at 6: TC
    RXNE // at 5: RXNE
    IDLE // at 4: IDLE
    ORE // at 3: ORE
    NF // at 2: NF
    FE // at 1: FE
    PE // at 0: PE
  }

//---  Register ICR: Interrupt flag clear register
  ICR @offset 0x20 $u32 {
    11
    WUCF // at 20: Wakeup from Stop mode clear flag
    2
    CMCF // at 17: Character match clear flag
    4
    EOBCF // at 12: End of block clear flag
    RTOCF // at 11: Receiver timeout clear flag
    1
    CTSCF // at 9: CTS clear flag
    LBDCF // at 8: LIN break detection clear flag
    1
    TCCF // at 6: Transmission complete clear flag
    1
    IDLECF // at 4: Idle line detected clear flag
    ORECF // at 3: Overrun error clear flag
    NCF // at 2: Noise detected clear flag
    FECF // at 1: Framing error clear flag
    PECF // at 0: Parity error clear flag
  }

//---  Register RDR: Receive data register
  RDR @offset 0x24 @ro $u32 {
    23
    RDR:9 // at 0: Receive data value
  }

//---  Register TDR: Transmit data register
  TDR @offset 0x28 $u32 {
    23
    TDR:9 // at 0: Transmit data value
  }

}

//------------------------------------------------------------------------------
// Peripheral USART1
//------------------------------------------------------------------------------

registers ©USART1 @at 0x40011000 {
//---  Register CR1: Control register 1
  CR1 @offset 0x0 $u32 {
    3
    M1 // at 28: Word length
    EOBIE // at 27: End of Block interrupt enable
    RTOIE // at 26: Receiver timeout interrupt enable
    DEAT4 // at 25: Driver Enable assertion time
    DEAT3 // at 24: DEAT3
    DEAT2 // at 23: DEAT2
    DEAT1 // at 22: DEAT1
    DEAT0 // at 21: DEAT0
    DEDT4 // at 20: Driver Enable de-assertion time
    DEDT3 // at 19: DEDT3
    DEDT2 // at 18: DEDT2
    DEDT1 // at 17: DEDT1
    DEDT0 // at 16: DEDT0
    OVER8 // at 15: Oversampling mode
    CMIE // at 14: Character match interrupt enable
    MME // at 13: Mute mode enable
    M0 // at 12: Word length
    WAKE // at 11: Receiver wakeup method
    PCE // at 10: Parity control enable
    PS // at 9: Parity selection
    PEIE // at 8: PE interrupt enable
    TXEIE // at 7: interrupt enable
    TCIE // at 6: Transmission complete interrupt enable
    RXNEIE // at 5: RXNE interrupt enable
    IDLEIE // at 4: IDLE interrupt enable
    TE // at 3: Transmitter enable
    RE // at 2: Receiver enable
    UESM // at 1: USART enable in Stop mode
    UE // at 0: USART enable
  }

//---  Register CR2: Control register 2
  CR2 @offset 0x4 $u32 {
    ADD4_7:4 // at 28: Address of the USART node
    ADD0_3:4 // at 24: Address of the USART node
    RTOEN // at 23: Receiver timeout enable
    ABRMOD1 // at 22: Auto baud rate mode
    ABRMOD0 // at 21: ABRMOD0
    ABREN // at 20: Auto baud rate enable
    MSBFIRST // at 19: Most significant bit first
    TAINV // at 18: Binary data inversion
    TXINV // at 17: TX pin active level inversion
    RXINV // at 16: RX pin active level inversion
    SWAP // at 15: Swap TX/RX pins
    LINEN // at 14: LIN mode enable
    STOP:2 // at 12: STOP bits
    CLKEN // at 11: Clock enable
    CPOL // at 10: Clock polarity
    CPHA // at 9: Clock phase
    LBCL // at 8: Last bit clock pulse
    1
    LBDIE // at 6: LIN break detection interrupt enable
    LBDL // at 5: LIN break detection length
    ADDM7 // at 4: 7-bit Address Detection/4-bit Address Detection
    4
  }

//---  Register CR3: Control register 3
  CR3 @offset 0x8 $u32 {
    9
    WUFIE // at 22: Wakeup from Stop mode interrupt enable
    WUS:2 // at 20: Wakeup from Stop mode interrupt flag selection
    SCARCNT:3 // at 17: Smartcard auto-retry count
    1
    DEP // at 15: Driver enable polarity selection
    DEM // at 14: Driver enable mode
    DDRE // at 13: DMA Disable on Reception Error
    OVRDIS // at 12: Overrun Disable
    ONEBIT // at 11: One sample bit method enable
    CTSIE // at 10: CTS interrupt enable
    CTSE // at 9: CTS enable
    RTSE // at 8: RTS enable
    DMAT // at 7: DMA enable transmitter
    DMAR // at 6: DMA enable receiver
    SCEN // at 5: Smartcard mode enable
    NACK // at 4: Smartcard NACK enable
    HDSEL // at 3: Half-duplex selection
    IRLP // at 2: Ir low-power
    IREN // at 1: Ir mode enable
    EIE // at 0: Error interrupt enable
  }

//---  Register BRR: Baud rate register
  BRR @offset 0xc $u32 {
    16
    DIV_Mantissa:12 // at 4: DIV_Mantissa
    DIV_Fraction:4 // at 0: DIV_Fraction
  }

//---  Register GTPR: Guard time and prescaler register
  GTPR @offset 0x10 $u32 {
    16
    GT:8 // at 8: Guard time value
    PSC:8 // at 0: Prescaler value
  }

//---  Register RTOR: Receiver timeout register
  RTOR @offset 0x14 $u32 {
    BLEN:8 // at 24: Block Length
    RTO:24 // at 0: Receiver timeout value
  }

//---  Register RQR: Request register
  RQR @offset 0x18 $u32 {
    27
    TXFRQ // at 4: Transmit data flush request
    RXFRQ // at 3: Receive data flush request
    MMRQ // at 2: Mute mode request
    SBKRQ // at 1: Send break request
    ABRRQ // at 0: Auto baud rate request
  }

//---  Register ISR: Interrupt & status register
  ISR @offset 0x1c @ro $u32 {
    9
    REACK // at 22: REACK
    TEACK // at 21: TEACK
    WUF // at 20: WUF
    RWU // at 19: RWU
    SBKF // at 18: SBKF
    CMF // at 17: CMF
    BUSY // at 16: BUSY
    ABRF // at 15: ABRF
    ABRE // at 14: ABRE
    1
    EOBF // at 12: EOBF
    RTOF // at 11: RTOF
    CTS // at 10: CTS
    CTSIF // at 9: CTSIF
    LBDF // at 8: LBDF
    TXE // at 7: TXE
    TC // at 6: TC
    RXNE // at 5: RXNE
    IDLE // at 4: IDLE
    ORE // at 3: ORE
    NF // at 2: NF
    FE // at 1: FE
    PE // at 0: PE
  }

//---  Register ICR: Interrupt flag clear register
  ICR @offset 0x20 $u32 {
    11
    WUCF // at 20: Wakeup from Stop mode clear flag
    2
    CMCF // at 17: Character match clear flag
    4
    EOBCF // at 12: End of block clear flag
    RTOCF // at 11: Receiver timeout clear flag
    1
    CTSCF // at 9: CTS clear flag
    LBDCF // at 8: LIN break detection clear flag
    1
    TCCF // at 6: Transmission complete clear flag
    1
    IDLECF // at 4: Idle line detected clear flag
    ORECF // at 3: Overrun error clear flag
    NCF // at 2: Noise detected clear flag
    FECF // at 1: Framing error clear flag
    PECF // at 0: Parity error clear flag
  }

//---  Register RDR: Receive data register
  RDR @offset 0x24 @ro $u32 {
    23
    RDR:9 // at 0: Receive data value
  }

//---  Register TDR: Transmit data register
  TDR @offset 0x28 $u32 {
    23
    TDR:9 // at 0: Transmit data value
  }

}

//------------------------------------------------------------------------------
// Peripheral USART2
//------------------------------------------------------------------------------

registers ©USART2 @at 0x40004400 {
//---  Register CR1: Control register 1
  CR1 @offset 0x0 $u32 {
    3
    M1 // at 28: Word length
    EOBIE // at 27: End of Block interrupt enable
    RTOIE // at 26: Receiver timeout interrupt enable
    DEAT4 // at 25: Driver Enable assertion time
    DEAT3 // at 24: DEAT3
    DEAT2 // at 23: DEAT2
    DEAT1 // at 22: DEAT1
    DEAT0 // at 21: DEAT0
    DEDT4 // at 20: Driver Enable de-assertion time
    DEDT3 // at 19: DEDT3
    DEDT2 // at 18: DEDT2
    DEDT1 // at 17: DEDT1
    DEDT0 // at 16: DEDT0
    OVER8 // at 15: Oversampling mode
    CMIE // at 14: Character match interrupt enable
    MME // at 13: Mute mode enable
    M0 // at 12: Word length
    WAKE // at 11: Receiver wakeup method
    PCE // at 10: Parity control enable
    PS // at 9: Parity selection
    PEIE // at 8: PE interrupt enable
    TXEIE // at 7: interrupt enable
    TCIE // at 6: Transmission complete interrupt enable
    RXNEIE // at 5: RXNE interrupt enable
    IDLEIE // at 4: IDLE interrupt enable
    TE // at 3: Transmitter enable
    RE // at 2: Receiver enable
    UESM // at 1: USART enable in Stop mode
    UE // at 0: USART enable
  }

//---  Register CR2: Control register 2
  CR2 @offset 0x4 $u32 {
    ADD4_7:4 // at 28: Address of the USART node
    ADD0_3:4 // at 24: Address of the USART node
    RTOEN // at 23: Receiver timeout enable
    ABRMOD1 // at 22: Auto baud rate mode
    ABRMOD0 // at 21: ABRMOD0
    ABREN // at 20: Auto baud rate enable
    MSBFIRST // at 19: Most significant bit first
    TAINV // at 18: Binary data inversion
    TXINV // at 17: TX pin active level inversion
    RXINV // at 16: RX pin active level inversion
    SWAP // at 15: Swap TX/RX pins
    LINEN // at 14: LIN mode enable
    STOP:2 // at 12: STOP bits
    CLKEN // at 11: Clock enable
    CPOL // at 10: Clock polarity
    CPHA // at 9: Clock phase
    LBCL // at 8: Last bit clock pulse
    1
    LBDIE // at 6: LIN break detection interrupt enable
    LBDL // at 5: LIN break detection length
    ADDM7 // at 4: 7-bit Address Detection/4-bit Address Detection
    4
  }

//---  Register CR3: Control register 3
  CR3 @offset 0x8 $u32 {
    9
    WUFIE // at 22: Wakeup from Stop mode interrupt enable
    WUS:2 // at 20: Wakeup from Stop mode interrupt flag selection
    SCARCNT:3 // at 17: Smartcard auto-retry count
    1
    DEP // at 15: Driver enable polarity selection
    DEM // at 14: Driver enable mode
    DDRE // at 13: DMA Disable on Reception Error
    OVRDIS // at 12: Overrun Disable
    ONEBIT // at 11: One sample bit method enable
    CTSIE // at 10: CTS interrupt enable
    CTSE // at 9: CTS enable
    RTSE // at 8: RTS enable
    DMAT // at 7: DMA enable transmitter
    DMAR // at 6: DMA enable receiver
    SCEN // at 5: Smartcard mode enable
    NACK // at 4: Smartcard NACK enable
    HDSEL // at 3: Half-duplex selection
    IRLP // at 2: Ir low-power
    IREN // at 1: Ir mode enable
    EIE // at 0: Error interrupt enable
  }

//---  Register BRR: Baud rate register
  BRR @offset 0xc $u32 {
    16
    DIV_Mantissa:12 // at 4: DIV_Mantissa
    DIV_Fraction:4 // at 0: DIV_Fraction
  }

//---  Register GTPR: Guard time and prescaler register
  GTPR @offset 0x10 $u32 {
    16
    GT:8 // at 8: Guard time value
    PSC:8 // at 0: Prescaler value
  }

//---  Register RTOR: Receiver timeout register
  RTOR @offset 0x14 $u32 {
    BLEN:8 // at 24: Block Length
    RTO:24 // at 0: Receiver timeout value
  }

//---  Register RQR: Request register
  RQR @offset 0x18 $u32 {
    27
    TXFRQ // at 4: Transmit data flush request
    RXFRQ // at 3: Receive data flush request
    MMRQ // at 2: Mute mode request
    SBKRQ // at 1: Send break request
    ABRRQ // at 0: Auto baud rate request
  }

//---  Register ISR: Interrupt & status register
  ISR @offset 0x1c @ro $u32 {
    9
    REACK // at 22: REACK
    TEACK // at 21: TEACK
    WUF // at 20: WUF
    RWU // at 19: RWU
    SBKF // at 18: SBKF
    CMF // at 17: CMF
    BUSY // at 16: BUSY
    ABRF // at 15: ABRF
    ABRE // at 14: ABRE
    1
    EOBF // at 12: EOBF
    RTOF // at 11: RTOF
    CTS // at 10: CTS
    CTSIF // at 9: CTSIF
    LBDF // at 8: LBDF
    TXE // at 7: TXE
    TC // at 6: TC
    RXNE // at 5: RXNE
    IDLE // at 4: IDLE
    ORE // at 3: ORE
    NF // at 2: NF
    FE // at 1: FE
    PE // at 0: PE
  }

//---  Register ICR: Interrupt flag clear register
  ICR @offset 0x20 $u32 {
    11
    WUCF // at 20: Wakeup from Stop mode clear flag
    2
    CMCF // at 17: Character match clear flag
    4
    EOBCF // at 12: End of block clear flag
    RTOCF // at 11: Receiver timeout clear flag
    1
    CTSCF // at 9: CTS clear flag
    LBDCF // at 8: LIN break detection clear flag
    1
    TCCF // at 6: Transmission complete clear flag
    1
    IDLECF // at 4: Idle line detected clear flag
    ORECF // at 3: Overrun error clear flag
    NCF // at 2: Noise detected clear flag
    FECF // at 1: Framing error clear flag
    PECF // at 0: Parity error clear flag
  }

//---  Register RDR: Receive data register
  RDR @offset 0x24 @ro $u32 {
    23
    RDR:9 // at 0: Receive data value
  }

//---  Register TDR: Transmit data register
  TDR @offset 0x28 $u32 {
    23
    TDR:9 // at 0: Transmit data value
  }

}

//------------------------------------------------------------------------------
// Peripheral USART3
//------------------------------------------------------------------------------

registers ©USART3 @at 0x40004800 {
//---  Register CR1: Control register 1
  CR1 @offset 0x0 $u32 {
    3
    M1 // at 28: Word length
    EOBIE // at 27: End of Block interrupt enable
    RTOIE // at 26: Receiver timeout interrupt enable
    DEAT4 // at 25: Driver Enable assertion time
    DEAT3 // at 24: DEAT3
    DEAT2 // at 23: DEAT2
    DEAT1 // at 22: DEAT1
    DEAT0 // at 21: DEAT0
    DEDT4 // at 20: Driver Enable de-assertion time
    DEDT3 // at 19: DEDT3
    DEDT2 // at 18: DEDT2
    DEDT1 // at 17: DEDT1
    DEDT0 // at 16: DEDT0
    OVER8 // at 15: Oversampling mode
    CMIE // at 14: Character match interrupt enable
    MME // at 13: Mute mode enable
    M0 // at 12: Word length
    WAKE // at 11: Receiver wakeup method
    PCE // at 10: Parity control enable
    PS // at 9: Parity selection
    PEIE // at 8: PE interrupt enable
    TXEIE // at 7: interrupt enable
    TCIE // at 6: Transmission complete interrupt enable
    RXNEIE // at 5: RXNE interrupt enable
    IDLEIE // at 4: IDLE interrupt enable
    TE // at 3: Transmitter enable
    RE // at 2: Receiver enable
    UESM // at 1: USART enable in Stop mode
    UE // at 0: USART enable
  }

//---  Register CR2: Control register 2
  CR2 @offset 0x4 $u32 {
    ADD4_7:4 // at 28: Address of the USART node
    ADD0_3:4 // at 24: Address of the USART node
    RTOEN // at 23: Receiver timeout enable
    ABRMOD1 // at 22: Auto baud rate mode
    ABRMOD0 // at 21: ABRMOD0
    ABREN // at 20: Auto baud rate enable
    MSBFIRST // at 19: Most significant bit first
    TAINV // at 18: Binary data inversion
    TXINV // at 17: TX pin active level inversion
    RXINV // at 16: RX pin active level inversion
    SWAP // at 15: Swap TX/RX pins
    LINEN // at 14: LIN mode enable
    STOP:2 // at 12: STOP bits
    CLKEN // at 11: Clock enable
    CPOL // at 10: Clock polarity
    CPHA // at 9: Clock phase
    LBCL // at 8: Last bit clock pulse
    1
    LBDIE // at 6: LIN break detection interrupt enable
    LBDL // at 5: LIN break detection length
    ADDM7 // at 4: 7-bit Address Detection/4-bit Address Detection
    4
  }

//---  Register CR3: Control register 3
  CR3 @offset 0x8 $u32 {
    9
    WUFIE // at 22: Wakeup from Stop mode interrupt enable
    WUS:2 // at 20: Wakeup from Stop mode interrupt flag selection
    SCARCNT:3 // at 17: Smartcard auto-retry count
    1
    DEP // at 15: Driver enable polarity selection
    DEM // at 14: Driver enable mode
    DDRE // at 13: DMA Disable on Reception Error
    OVRDIS // at 12: Overrun Disable
    ONEBIT // at 11: One sample bit method enable
    CTSIE // at 10: CTS interrupt enable
    CTSE // at 9: CTS enable
    RTSE // at 8: RTS enable
    DMAT // at 7: DMA enable transmitter
    DMAR // at 6: DMA enable receiver
    SCEN // at 5: Smartcard mode enable
    NACK // at 4: Smartcard NACK enable
    HDSEL // at 3: Half-duplex selection
    IRLP // at 2: Ir low-power
    IREN // at 1: Ir mode enable
    EIE // at 0: Error interrupt enable
  }

//---  Register BRR: Baud rate register
  BRR @offset 0xc $u32 {
    16
    DIV_Mantissa:12 // at 4: DIV_Mantissa
    DIV_Fraction:4 // at 0: DIV_Fraction
  }

//---  Register GTPR: Guard time and prescaler register
  GTPR @offset 0x10 $u32 {
    16
    GT:8 // at 8: Guard time value
    PSC:8 // at 0: Prescaler value
  }

//---  Register RTOR: Receiver timeout register
  RTOR @offset 0x14 $u32 {
    BLEN:8 // at 24: Block Length
    RTO:24 // at 0: Receiver timeout value
  }

//---  Register RQR: Request register
  RQR @offset 0x18 $u32 {
    27
    TXFRQ // at 4: Transmit data flush request
    RXFRQ // at 3: Receive data flush request
    MMRQ // at 2: Mute mode request
    SBKRQ // at 1: Send break request
    ABRRQ // at 0: Auto baud rate request
  }

//---  Register ISR: Interrupt & status register
  ISR @offset 0x1c @ro $u32 {
    9
    REACK // at 22: REACK
    TEACK // at 21: TEACK
    WUF // at 20: WUF
    RWU // at 19: RWU
    SBKF // at 18: SBKF
    CMF // at 17: CMF
    BUSY // at 16: BUSY
    ABRF // at 15: ABRF
    ABRE // at 14: ABRE
    1
    EOBF // at 12: EOBF
    RTOF // at 11: RTOF
    CTS // at 10: CTS
    CTSIF // at 9: CTSIF
    LBDF // at 8: LBDF
    TXE // at 7: TXE
    TC // at 6: TC
    RXNE // at 5: RXNE
    IDLE // at 4: IDLE
    ORE // at 3: ORE
    NF // at 2: NF
    FE // at 1: FE
    PE // at 0: PE
  }

//---  Register ICR: Interrupt flag clear register
  ICR @offset 0x20 $u32 {
    11
    WUCF // at 20: Wakeup from Stop mode clear flag
    2
    CMCF // at 17: Character match clear flag
    4
    EOBCF // at 12: End of block clear flag
    RTOCF // at 11: Receiver timeout clear flag
    1
    CTSCF // at 9: CTS clear flag
    LBDCF // at 8: LIN break detection clear flag
    1
    TCCF // at 6: Transmission complete clear flag
    1
    IDLECF // at 4: Idle line detected clear flag
    ORECF // at 3: Overrun error clear flag
    NCF // at 2: Noise detected clear flag
    FECF // at 1: Framing error clear flag
    PECF // at 0: Parity error clear flag
  }

//---  Register RDR: Receive data register
  RDR @offset 0x24 @ro $u32 {
    23
    RDR:9 // at 0: Receive data value
  }

//---  Register TDR: Transmit data register
  TDR @offset 0x28 $u32 {
    23
    TDR:9 // at 0: Transmit data value
  }

}

//------------------------------------------------------------------------------
// Peripheral USART6: Universal synchronous asynchronous receiver       transmitter
//------------------------------------------------------------------------------

registers ©USART6 @at 0x40011400 {
//---  Register CR1: Control register 1
  CR1 @offset 0x0 $u32 {
    3
    M1 // at 28: Word length
    EOBIE // at 27: End of Block interrupt enable
    RTOIE // at 26: Receiver timeout interrupt enable
    DEAT4 // at 25: Driver Enable assertion time
    DEAT3 // at 24: DEAT3
    DEAT2 // at 23: DEAT2
    DEAT1 // at 22: DEAT1
    DEAT0 // at 21: DEAT0
    DEDT4 // at 20: Driver Enable de-assertion time
    DEDT3 // at 19: DEDT3
    DEDT2 // at 18: DEDT2
    DEDT1 // at 17: DEDT1
    DEDT0 // at 16: DEDT0
    OVER8 // at 15: Oversampling mode
    CMIE // at 14: Character match interrupt enable
    MME // at 13: Mute mode enable
    M0 // at 12: Word length
    WAKE // at 11: Receiver wakeup method
    PCE // at 10: Parity control enable
    PS // at 9: Parity selection
    PEIE // at 8: PE interrupt enable
    TXEIE // at 7: interrupt enable
    TCIE // at 6: Transmission complete interrupt enable
    RXNEIE // at 5: RXNE interrupt enable
    IDLEIE // at 4: IDLE interrupt enable
    TE // at 3: Transmitter enable
    RE // at 2: Receiver enable
    UESM // at 1: USART enable in Stop mode
    UE // at 0: USART enable
  }

//---  Register CR2: Control register 2
  CR2 @offset 0x4 $u32 {
    ADD4_7:4 // at 28: Address of the USART node
    ADD0_3:4 // at 24: Address of the USART node
    RTOEN // at 23: Receiver timeout enable
    ABRMOD1 // at 22: Auto baud rate mode
    ABRMOD0 // at 21: ABRMOD0
    ABREN // at 20: Auto baud rate enable
    MSBFIRST // at 19: Most significant bit first
    TAINV // at 18: Binary data inversion
    TXINV // at 17: TX pin active level inversion
    RXINV // at 16: RX pin active level inversion
    SWAP // at 15: Swap TX/RX pins
    LINEN // at 14: LIN mode enable
    STOP:2 // at 12: STOP bits
    CLKEN // at 11: Clock enable
    CPOL // at 10: Clock polarity
    CPHA // at 9: Clock phase
    LBCL // at 8: Last bit clock pulse
    1
    LBDIE // at 6: LIN break detection interrupt enable
    LBDL // at 5: LIN break detection length
    ADDM7 // at 4: 7-bit Address Detection/4-bit Address Detection
    4
  }

//---  Register CR3: Control register 3
  CR3 @offset 0x8 $u32 {
    9
    WUFIE // at 22: Wakeup from Stop mode interrupt enable
    WUS:2 // at 20: Wakeup from Stop mode interrupt flag selection
    SCARCNT:3 // at 17: Smartcard auto-retry count
    1
    DEP // at 15: Driver enable polarity selection
    DEM // at 14: Driver enable mode
    DDRE // at 13: DMA Disable on Reception Error
    OVRDIS // at 12: Overrun Disable
    ONEBIT // at 11: One sample bit method enable
    CTSIE // at 10: CTS interrupt enable
    CTSE // at 9: CTS enable
    RTSE // at 8: RTS enable
    DMAT // at 7: DMA enable transmitter
    DMAR // at 6: DMA enable receiver
    SCEN // at 5: Smartcard mode enable
    NACK // at 4: Smartcard NACK enable
    HDSEL // at 3: Half-duplex selection
    IRLP // at 2: Ir low-power
    IREN // at 1: Ir mode enable
    EIE // at 0: Error interrupt enable
  }

//---  Register BRR: Baud rate register
  BRR @offset 0xc $u32 {
    16
    DIV_Mantissa:12 // at 4: DIV_Mantissa
    DIV_Fraction:4 // at 0: DIV_Fraction
  }

//---  Register GTPR: Guard time and prescaler register
  GTPR @offset 0x10 $u32 {
    16
    GT:8 // at 8: Guard time value
    PSC:8 // at 0: Prescaler value
  }

//---  Register RTOR: Receiver timeout register
  RTOR @offset 0x14 $u32 {
    BLEN:8 // at 24: Block Length
    RTO:24 // at 0: Receiver timeout value
  }

//---  Register RQR: Request register
  RQR @offset 0x18 $u32 {
    27
    TXFRQ // at 4: Transmit data flush request
    RXFRQ // at 3: Receive data flush request
    MMRQ // at 2: Mute mode request
    SBKRQ // at 1: Send break request
    ABRRQ // at 0: Auto baud rate request
  }

//---  Register ISR: Interrupt & status register
  ISR @offset 0x1c @ro $u32 {
    9
    REACK // at 22: REACK
    TEACK // at 21: TEACK
    WUF // at 20: WUF
    RWU // at 19: RWU
    SBKF // at 18: SBKF
    CMF // at 17: CMF
    BUSY // at 16: BUSY
    ABRF // at 15: ABRF
    ABRE // at 14: ABRE
    1
    EOBF // at 12: EOBF
    RTOF // at 11: RTOF
    CTS // at 10: CTS
    CTSIF // at 9: CTSIF
    LBDF // at 8: LBDF
    TXE // at 7: TXE
    TC // at 6: TC
    RXNE // at 5: RXNE
    IDLE // at 4: IDLE
    ORE // at 3: ORE
    NF // at 2: NF
    FE // at 1: FE
    PE // at 0: PE
  }

//---  Register ICR: Interrupt flag clear register
  ICR @offset 0x20 $u32 {
    11
    WUCF // at 20: Wakeup from Stop mode clear flag
    2
    CMCF // at 17: Character match clear flag
    4
    EOBCF // at 12: End of block clear flag
    RTOCF // at 11: Receiver timeout clear flag
    1
    CTSCF // at 9: CTS clear flag
    LBDCF // at 8: LIN break detection clear flag
    1
    TCCF // at 6: Transmission complete clear flag
    1
    IDLECF // at 4: Idle line detected clear flag
    ORECF // at 3: Overrun error clear flag
    NCF // at 2: Noise detected clear flag
    FECF // at 1: Framing error clear flag
    PECF // at 0: Parity error clear flag
  }

//---  Register RDR: Receive data register
  RDR @offset 0x24 @ro $u32 {
    23
    RDR:9 // at 0: Receive data value
  }

//---  Register TDR: Transmit data register
  TDR @offset 0x28 $u32 {
    23
    TDR:9 // at 0: Transmit data value
  }

}

//------------------------------------------------------------------------------
// Peripheral WWDG: Window watchdog
//------------------------------------------------------------------------------

registers ©WWDG @at 0x40002c00 {
//---  Register CR: Control register
  CR @offset 0x0 $u32 {
    24
    WDGA // at 7: Activation bit
    T:7 // at 0: 7-bit counter (MSB to LSB)
  }

//---  Register CFR: Configuration register
  CFR @offset 0x4 $u32 {
    22
    EWI // at 9: Early wakeup interrupt
    WDGTB1 // at 8: Timer base
    WDGTB0 // at 7: Timer base
    W:7 // at 0: 7-bit window value
  }

//---  Register SR: Status register
  SR @offset 0x8 $u32 {
    31
    EWIF // at 0: Early wakeup interrupt flag
  }

}

