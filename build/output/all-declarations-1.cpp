#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------------------------------------------------*

#include "all-declarations-1.h"


//---------------------------------------------------------------------------------------------------------------------*

cMapElement_labelMap::cMapElement_labelMap (const GALGAS_lstring & inKey
                                            COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_labelMap::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_labelMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_labelMap (mAttribute_lkey COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_labelMap::description (C_String & /* ioString */, const int32_t /* inIndentation */) const {
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_labelMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_labelMap * operand = (cMapElement_labelMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_labelMap::GALGAS_labelMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_labelMap::GALGAS_labelMap (const GALGAS_labelMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_labelMap & GALGAS_labelMap::operator = (const GALGAS_labelMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_labelMap GALGAS_labelMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_labelMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_labelMap GALGAS_labelMap::constructor_mapWithMapToOverride (const GALGAS_labelMap & inMapToOverride
                                                                   COMMA_LOCATION_ARGS) {
  GALGAS_labelMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_labelMap GALGAS_labelMap::reader_overriddenMap (C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) const {
  GALGAS_labelMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_labelMap::addAssign_operation (const GALGAS_lstring & inKey,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) {
  cMapElement_labelMap * p = NULL ;
  macroMyNew (p, cMapElement_labelMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@labelMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_labelMap::modifier_insertKey (GALGAS_lstring inKey,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) {
  cMapElement_labelMap * p = NULL ;
  macroMyNew (p, cMapElement_labelMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' label is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_labelMap * GALGAS_labelMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                           const GALGAS_string & inKey
                                                                           COMMA_LOCATION_ARGS) {
  cMapElement_labelMap * result = (cMapElement_labelMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_labelMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_labelMap::cEnumerator_labelMap (const GALGAS_labelMap & inEnumeratedObject,
                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_labelMap_2D_element cEnumerator_labelMap::current (LOCATION_ARGS) const {
  const cMapElement_labelMap * p = (const cMapElement_labelMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_labelMap) ;
  return GALGAS_labelMap_2D_element (p->mAttribute_lkey) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_labelMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                   @labelMap type                                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_labelMap ("labelMap",
                                 NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_labelMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_labelMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_labelMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_labelMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_labelMap GALGAS_labelMap::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  GALGAS_labelMap result ;
  const GALGAS_labelMap * p = (const GALGAS_labelMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_labelMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("labelMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_procedureMap::cMapElement_procedureMap (const GALGAS_lstring & inKey,
                                                    const GALGAS_bool & in_mMutating,
                                                    const GALGAS_modeMap & in_mProcedureModeMap,
                                                    const GALGAS_procedureSignature & in_mSignature,
                                                    const GALGAS_bool & in_mWeakProcedure
                                                    COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mMutating (in_mMutating),
mAttribute_mProcedureModeMap (in_mProcedureModeMap),
mAttribute_mSignature (in_mSignature),
mAttribute_mWeakProcedure (in_mWeakProcedure) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_procedureMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mMutating.isValid () && mAttribute_mProcedureModeMap.isValid () && mAttribute_mSignature.isValid () && mAttribute_mWeakProcedure.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_procedureMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_procedureMap (mAttribute_lkey, mAttribute_mMutating, mAttribute_mProcedureModeMap, mAttribute_mSignature, mAttribute_mWeakProcedure COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_procedureMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mMutating" ":" ;
  mAttribute_mMutating.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mProcedureModeMap" ":" ;
  mAttribute_mProcedureModeMap.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSignature" ":" ;
  mAttribute_mSignature.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mWeakProcedure" ":" ;
  mAttribute_mWeakProcedure.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_procedureMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_procedureMap * operand = (cMapElement_procedureMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mMutating.objectCompare (operand->mAttribute_mMutating) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mProcedureModeMap.objectCompare (operand->mAttribute_mProcedureModeMap) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSignature.objectCompare (operand->mAttribute_mSignature) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mWeakProcedure.objectCompare (operand->mAttribute_mWeakProcedure) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap::GALGAS_procedureMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap::GALGAS_procedureMap (const GALGAS_procedureMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap & GALGAS_procedureMap::operator = (const GALGAS_procedureMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap GALGAS_procedureMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_procedureMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap GALGAS_procedureMap::constructor_mapWithMapToOverride (const GALGAS_procedureMap & inMapToOverride
                                                                           COMMA_LOCATION_ARGS) {
  GALGAS_procedureMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap GALGAS_procedureMap::reader_overriddenMap (C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) const {
  GALGAS_procedureMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMap::addAssign_operation (const GALGAS_lstring & inKey,
                                               const GALGAS_bool & inArgument0,
                                               const GALGAS_modeMap & inArgument1,
                                               const GALGAS_procedureSignature & inArgument2,
                                               const GALGAS_bool & inArgument3,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  cMapElement_procedureMap * p = NULL ;
  macroMyNew (p, cMapElement_procedureMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@procedureMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMap::modifier_insertKey (GALGAS_lstring inKey,
                                              GALGAS_bool inArgument0,
                                              GALGAS_modeMap inArgument1,
                                              GALGAS_procedureSignature inArgument2,
                                              GALGAS_bool inArgument3,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  cMapElement_procedureMap * p = NULL ;
  macroMyNew (p, cMapElement_procedureMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' proc is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_procedureMap_searchKey = "there is no '%K' proc" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMap::method_searchKey (GALGAS_lstring inKey,
                                            GALGAS_bool & outArgument0,
                                            GALGAS_modeMap & outArgument1,
                                            GALGAS_procedureSignature & outArgument2,
                                            GALGAS_bool & outArgument3,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  const cMapElement_procedureMap * p = (const cMapElement_procedureMap *) performSearch (inKey,
                                                                                           inCompiler,
                                                                                           kSearchErrorMessage_procedureMap_searchKey
                                                                                           COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_procedureMap) ;
    outArgument0 = p->mAttribute_mMutating ;
    outArgument1 = p->mAttribute_mProcedureModeMap ;
    outArgument2 = p->mAttribute_mSignature ;
    outArgument3 = p->mAttribute_mWeakProcedure ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMap::modifier_removeKey (GALGAS_lstring inKey,
                                              GALGAS_bool & outArgument0,
                                              GALGAS_modeMap & outArgument1,
                                              GALGAS_procedureSignature & outArgument2,
                                              GALGAS_bool & outArgument3,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  const char * kRemoveErrorMessage = "there is no '%K' proc" ;
  capCollectionElement attributes ;
  performRemove (inKey, attributes, inCompiler, kRemoveErrorMessage COMMA_THERE) ;
  cMapElement_procedureMap * p = (cMapElement_procedureMap *) attributes.ptr () ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMap) ;
    outArgument0 = p->mAttribute_mMutating ;
    outArgument1 = p->mAttribute_mProcedureModeMap ;
    outArgument2 = p->mAttribute_mSignature ;
    outArgument3 = p->mAttribute_mWeakProcedure ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procedureMap::reader_mMutatingForKey (const GALGAS_string & inKey,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_procedureMap * p = (const cMapElement_procedureMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMap) ;
    result = p->mAttribute_mMutating ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_modeMap GALGAS_procedureMap::reader_mProcedureModeMapForKey (const GALGAS_string & inKey,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_procedureMap * p = (const cMapElement_procedureMap *) attributes ;
  GALGAS_modeMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMap) ;
    result = p->mAttribute_mProcedureModeMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureSignature GALGAS_procedureMap::reader_mSignatureForKey (const GALGAS_string & inKey,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_procedureMap * p = (const cMapElement_procedureMap *) attributes ;
  GALGAS_procedureSignature result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMap) ;
    result = p->mAttribute_mSignature ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procedureMap::reader_mWeakProcedureForKey (const GALGAS_string & inKey,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_procedureMap * p = (const cMapElement_procedureMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMap) ;
    result = p->mAttribute_mWeakProcedure ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMap::modifier_setMMutatingForKey (GALGAS_bool inAttributeValue,
                                                       GALGAS_string inKey,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_procedureMap * p = (cMapElement_procedureMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMap) ;
    p->mAttribute_mMutating = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMap::modifier_setMProcedureModeMapForKey (GALGAS_modeMap inAttributeValue,
                                                               GALGAS_string inKey,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_procedureMap * p = (cMapElement_procedureMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMap) ;
    p->mAttribute_mProcedureModeMap = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMap::modifier_setMSignatureForKey (GALGAS_procedureSignature inAttributeValue,
                                                        GALGAS_string inKey,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_procedureMap * p = (cMapElement_procedureMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMap) ;
    p->mAttribute_mSignature = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMap::modifier_setMWeakProcedureForKey (GALGAS_bool inAttributeValue,
                                                            GALGAS_string inKey,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_procedureMap * p = (cMapElement_procedureMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMap) ;
    p->mAttribute_mWeakProcedure = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_procedureMap * GALGAS_procedureMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                   const GALGAS_string & inKey
                                                                                   COMMA_LOCATION_ARGS) {
  cMapElement_procedureMap * result = (cMapElement_procedureMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_procedureMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_procedureMap::cEnumerator_procedureMap (const GALGAS_procedureMap & inEnumeratedObject,
                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap_2D_element cEnumerator_procedureMap::current (LOCATION_ARGS) const {
  const cMapElement_procedureMap * p = (const cMapElement_procedureMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_procedureMap) ;
  return GALGAS_procedureMap_2D_element (p->mAttribute_lkey, p->mAttribute_mMutating, p->mAttribute_mProcedureModeMap, p->mAttribute_mSignature, p->mAttribute_mWeakProcedure) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_procedureMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_procedureMap::current_mMutating (LOCATION_ARGS) const {
  const cMapElement_procedureMap * p = (const cMapElement_procedureMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_procedureMap) ;
  return p->mAttribute_mMutating ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_modeMap cEnumerator_procedureMap::current_mProcedureModeMap (LOCATION_ARGS) const {
  const cMapElement_procedureMap * p = (const cMapElement_procedureMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_procedureMap) ;
  return p->mAttribute_mProcedureModeMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureSignature cEnumerator_procedureMap::current_mSignature (LOCATION_ARGS) const {
  const cMapElement_procedureMap * p = (const cMapElement_procedureMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_procedureMap) ;
  return p->mAttribute_mSignature ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_procedureMap::current_mWeakProcedure (LOCATION_ARGS) const {
  const cMapElement_procedureMap * p = (const cMapElement_procedureMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_procedureMap) ;
  return p->mAttribute_mWeakProcedure ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 @procedureMap type                                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_procedureMap ("procedureMap",
                                     NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_procedureMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_procedureMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_procedureMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_procedureMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap GALGAS_procedureMap::extractObject (const GALGAS_object & inObject,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_procedureMap result ;
  const GALGAS_procedureMap * p = (const GALGAS_procedureMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_procedureMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("procedureMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   Class for element of '@procedureSignature' list                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_procedureSignature : public cCollectionElement {
  public : GALGAS_procedureSignature_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_procedureSignature (const GALGAS_procFormalArgumentPassingMode & in_mFormalArgumentPassingMode,
                                                  const GALGAS_lstring & in_mSelector,
                                                  const GALGAS_unifiedTypeMap_2D_proxy & in_mType
                                                  COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_procedureSignature::cCollectionElement_procedureSignature (const GALGAS_procFormalArgumentPassingMode & in_mFormalArgumentPassingMode,
                                                                              const GALGAS_lstring & in_mSelector,
                                                                              const GALGAS_unifiedTypeMap_2D_proxy & in_mType
                                                                              COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mFormalArgumentPassingMode, in_mSelector, in_mType) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_procedureSignature::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_procedureSignature::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_procedureSignature (mObject.mAttribute_mFormalArgumentPassingMode, mObject.mAttribute_mSelector, mObject.mAttribute_mType COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_procedureSignature::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFormalArgumentPassingMode" ":" ;
  mObject.mAttribute_mFormalArgumentPassingMode.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSelector" ":" ;
  mObject.mAttribute_mSelector.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mObject.mAttribute_mType.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_procedureSignature::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_procedureSignature * operand = (cCollectionElement_procedureSignature *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_procedureSignature) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureSignature::GALGAS_procedureSignature (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureSignature::GALGAS_procedureSignature (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureSignature GALGAS_procedureSignature::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_procedureSignature result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureSignature GALGAS_procedureSignature::constructor_listWithValue (const GALGAS_procFormalArgumentPassingMode & inOperand0,
                                                                                const GALGAS_lstring & inOperand1,
                                                                                const GALGAS_unifiedTypeMap_2D_proxy & inOperand2
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_procedureSignature result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_procedureSignature::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureSignature::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                           const GALGAS_procFormalArgumentPassingMode & in_mFormalArgumentPassingMode,
                                                           const GALGAS_lstring & in_mSelector,
                                                           const GALGAS_unifiedTypeMap_2D_proxy & in_mType
                                                           COMMA_LOCATION_ARGS) {
  cCollectionElement_procedureSignature * p = NULL ;
  macroMyNew (p, cCollectionElement_procedureSignature (in_mFormalArgumentPassingMode,
                                                        in_mSelector,
                                                        in_mType COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureSignature::addAssign_operation (const GALGAS_procFormalArgumentPassingMode & inOperand0,
                                                     const GALGAS_lstring & inOperand1,
                                                     const GALGAS_unifiedTypeMap_2D_proxy & inOperand2
                                                     COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_procedureSignature (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureSignature::modifier_insertAtIndex (const GALGAS_procFormalArgumentPassingMode inOperand0,
                                                        const GALGAS_lstring inOperand1,
                                                        const GALGAS_unifiedTypeMap_2D_proxy inOperand2,
                                                        const GALGAS_uint inInsertionIndex,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_procedureSignature (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureSignature::modifier_removeAtIndex (GALGAS_procFormalArgumentPassingMode & outOperand0,
                                                        GALGAS_lstring & outOperand1,
                                                        GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                                        const GALGAS_uint inRemoveIndex,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_procedureSignature * p = (cCollectionElement_procedureSignature *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_procedureSignature) ;
      outOperand0 = p->mObject.mAttribute_mFormalArgumentPassingMode ;
      outOperand1 = p->mObject.mAttribute_mSelector ;
      outOperand2 = p->mObject.mAttribute_mType ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureSignature::modifier_popFirst (GALGAS_procFormalArgumentPassingMode & outOperand0,
                                                   GALGAS_lstring & outOperand1,
                                                   GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procedureSignature * p = (cCollectionElement_procedureSignature *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procedureSignature) ;
    outOperand0 = p->mObject.mAttribute_mFormalArgumentPassingMode ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
    outOperand2 = p->mObject.mAttribute_mType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureSignature::modifier_popLast (GALGAS_procFormalArgumentPassingMode & outOperand0,
                                                  GALGAS_lstring & outOperand1,
                                                  GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procedureSignature * p = (cCollectionElement_procedureSignature *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procedureSignature) ;
    outOperand0 = p->mObject.mAttribute_mFormalArgumentPassingMode ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
    outOperand2 = p->mObject.mAttribute_mType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureSignature::method_first (GALGAS_procFormalArgumentPassingMode & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procedureSignature * p = (cCollectionElement_procedureSignature *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procedureSignature) ;
    outOperand0 = p->mObject.mAttribute_mFormalArgumentPassingMode ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
    outOperand2 = p->mObject.mAttribute_mType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureSignature::method_last (GALGAS_procFormalArgumentPassingMode & outOperand0,
                                             GALGAS_lstring & outOperand1,
                                             GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procedureSignature * p = (cCollectionElement_procedureSignature *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procedureSignature) ;
    outOperand0 = p->mObject.mAttribute_mFormalArgumentPassingMode ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
    outOperand2 = p->mObject.mAttribute_mType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureSignature GALGAS_procedureSignature::operator_concat (const GALGAS_procedureSignature & inOperand
                                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_procedureSignature result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureSignature GALGAS_procedureSignature::add_operation (const GALGAS_procedureSignature & inOperand,
                                                                    C_Compiler * /* inCompiler */
                                                                    COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_procedureSignature result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureSignature GALGAS_procedureSignature::reader_subListWithRange (const GALGAS_range & inRange,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_procedureSignature result = GALGAS_procedureSignature::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureSignature GALGAS_procedureSignature::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_procedureSignature result = GALGAS_procedureSignature::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureSignature::dotAssign_operation (const GALGAS_procedureSignature inOperand
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentPassingMode GALGAS_procedureSignature::reader_mFormalArgumentPassingModeAtIndex (const GALGAS_uint & inIndex,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procedureSignature * p = (cCollectionElement_procedureSignature *) attributes.ptr () ;
  GALGAS_procFormalArgumentPassingMode result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procedureSignature) ;
    result = p->mObject.mAttribute_mFormalArgumentPassingMode ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring GALGAS_procedureSignature::reader_mSelectorAtIndex (const GALGAS_uint & inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procedureSignature * p = (cCollectionElement_procedureSignature *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procedureSignature) ;
    result = p->mObject.mAttribute_mSelector ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_procedureSignature::reader_mTypeAtIndex (const GALGAS_uint & inIndex,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procedureSignature * p = (cCollectionElement_procedureSignature *) attributes.ptr () ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procedureSignature) ;
    result = p->mObject.mAttribute_mType ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_procedureSignature::cEnumerator_procedureSignature (const GALGAS_procedureSignature & inEnumeratedObject,
                                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureSignature_2D_element cEnumerator_procedureSignature::current (LOCATION_ARGS) const {
  const cCollectionElement_procedureSignature * p = (const cCollectionElement_procedureSignature *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procedureSignature) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentPassingMode cEnumerator_procedureSignature::current_mFormalArgumentPassingMode (LOCATION_ARGS) const {
  const cCollectionElement_procedureSignature * p = (const cCollectionElement_procedureSignature *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procedureSignature) ;
  return p->mObject.mAttribute_mFormalArgumentPassingMode ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_procedureSignature::current_mSelector (LOCATION_ARGS) const {
  const cCollectionElement_procedureSignature * p = (const cCollectionElement_procedureSignature *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procedureSignature) ;
  return p->mObject.mAttribute_mSelector ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_procedureSignature::current_mType (LOCATION_ARGS) const {
  const cCollectionElement_procedureSignature * p = (const cCollectionElement_procedureSignature *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procedureSignature) ;
  return p->mObject.mAttribute_mType ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              @procedureSignature type                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_procedureSignature ("procedureSignature",
                                           NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_procedureSignature::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_procedureSignature ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_procedureSignature::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_procedureSignature (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureSignature GALGAS_procedureSignature::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_procedureSignature result ;
  const GALGAS_procedureSignature * p = (const GALGAS_procedureSignature *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_procedureSignature *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("procedureSignature", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Class for element of '@procFormalArgumentListForGeneration' list                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_procFormalArgumentListForGeneration : public cCollectionElement {
  public : GALGAS_procFormalArgumentListForGeneration_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_procFormalArgumentListForGeneration (const GALGAS_procFormalArgumentPassingMode & in_mFormalArgumentKind,
                                                                   const GALGAS_unifiedTypeMap_2D_proxy & in_mFormalArgumentType,
                                                                   const GALGAS_string & in_mFormalArgumentName
                                                                   COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_procFormalArgumentListForGeneration::cCollectionElement_procFormalArgumentListForGeneration (const GALGAS_procFormalArgumentPassingMode & in_mFormalArgumentKind,
                                                                                                                const GALGAS_unifiedTypeMap_2D_proxy & in_mFormalArgumentType,
                                                                                                                const GALGAS_string & in_mFormalArgumentName
                                                                                                                COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mFormalArgumentKind, in_mFormalArgumentType, in_mFormalArgumentName) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_procFormalArgumentListForGeneration::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_procFormalArgumentListForGeneration::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_procFormalArgumentListForGeneration (mObject.mAttribute_mFormalArgumentKind, mObject.mAttribute_mFormalArgumentType, mObject.mAttribute_mFormalArgumentName COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_procFormalArgumentListForGeneration::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFormalArgumentKind" ":" ;
  mObject.mAttribute_mFormalArgumentKind.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFormalArgumentType" ":" ;
  mObject.mAttribute_mFormalArgumentType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFormalArgumentName" ":" ;
  mObject.mAttribute_mFormalArgumentName.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_procFormalArgumentListForGeneration::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_procFormalArgumentListForGeneration * operand = (cCollectionElement_procFormalArgumentListForGeneration *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_procFormalArgumentListForGeneration) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentListForGeneration::GALGAS_procFormalArgumentListForGeneration (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentListForGeneration::GALGAS_procFormalArgumentListForGeneration (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentListForGeneration GALGAS_procFormalArgumentListForGeneration::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_procFormalArgumentListForGeneration result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentListForGeneration GALGAS_procFormalArgumentListForGeneration::constructor_listWithValue (const GALGAS_procFormalArgumentPassingMode & inOperand0,
                                                                                                                  const GALGAS_unifiedTypeMap_2D_proxy & inOperand1,
                                                                                                                  const GALGAS_string & inOperand2
                                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_procFormalArgumentListForGeneration result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_procFormalArgumentListForGeneration::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procFormalArgumentListForGeneration::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                            const GALGAS_procFormalArgumentPassingMode & in_mFormalArgumentKind,
                                                                            const GALGAS_unifiedTypeMap_2D_proxy & in_mFormalArgumentType,
                                                                            const GALGAS_string & in_mFormalArgumentName
                                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement_procFormalArgumentListForGeneration * p = NULL ;
  macroMyNew (p, cCollectionElement_procFormalArgumentListForGeneration (in_mFormalArgumentKind,
                                                                         in_mFormalArgumentType,
                                                                         in_mFormalArgumentName COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procFormalArgumentListForGeneration::addAssign_operation (const GALGAS_procFormalArgumentPassingMode & inOperand0,
                                                                      const GALGAS_unifiedTypeMap_2D_proxy & inOperand1,
                                                                      const GALGAS_string & inOperand2
                                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_procFormalArgumentListForGeneration (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procFormalArgumentListForGeneration::modifier_insertAtIndex (const GALGAS_procFormalArgumentPassingMode inOperand0,
                                                                         const GALGAS_unifiedTypeMap_2D_proxy inOperand1,
                                                                         const GALGAS_string inOperand2,
                                                                         const GALGAS_uint inInsertionIndex,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_procFormalArgumentListForGeneration (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procFormalArgumentListForGeneration::modifier_removeAtIndex (GALGAS_procFormalArgumentPassingMode & outOperand0,
                                                                         GALGAS_unifiedTypeMap_2D_proxy & outOperand1,
                                                                         GALGAS_string & outOperand2,
                                                                         const GALGAS_uint inRemoveIndex,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_procFormalArgumentListForGeneration * p = (cCollectionElement_procFormalArgumentListForGeneration *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_procFormalArgumentListForGeneration) ;
      outOperand0 = p->mObject.mAttribute_mFormalArgumentKind ;
      outOperand1 = p->mObject.mAttribute_mFormalArgumentType ;
      outOperand2 = p->mObject.mAttribute_mFormalArgumentName ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procFormalArgumentListForGeneration::modifier_popFirst (GALGAS_procFormalArgumentPassingMode & outOperand0,
                                                                    GALGAS_unifiedTypeMap_2D_proxy & outOperand1,
                                                                    GALGAS_string & outOperand2,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procFormalArgumentListForGeneration * p = (cCollectionElement_procFormalArgumentListForGeneration *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procFormalArgumentListForGeneration) ;
    outOperand0 = p->mObject.mAttribute_mFormalArgumentKind ;
    outOperand1 = p->mObject.mAttribute_mFormalArgumentType ;
    outOperand2 = p->mObject.mAttribute_mFormalArgumentName ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procFormalArgumentListForGeneration::modifier_popLast (GALGAS_procFormalArgumentPassingMode & outOperand0,
                                                                   GALGAS_unifiedTypeMap_2D_proxy & outOperand1,
                                                                   GALGAS_string & outOperand2,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procFormalArgumentListForGeneration * p = (cCollectionElement_procFormalArgumentListForGeneration *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procFormalArgumentListForGeneration) ;
    outOperand0 = p->mObject.mAttribute_mFormalArgumentKind ;
    outOperand1 = p->mObject.mAttribute_mFormalArgumentType ;
    outOperand2 = p->mObject.mAttribute_mFormalArgumentName ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procFormalArgumentListForGeneration::method_first (GALGAS_procFormalArgumentPassingMode & outOperand0,
                                                               GALGAS_unifiedTypeMap_2D_proxy & outOperand1,
                                                               GALGAS_string & outOperand2,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procFormalArgumentListForGeneration * p = (cCollectionElement_procFormalArgumentListForGeneration *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procFormalArgumentListForGeneration) ;
    outOperand0 = p->mObject.mAttribute_mFormalArgumentKind ;
    outOperand1 = p->mObject.mAttribute_mFormalArgumentType ;
    outOperand2 = p->mObject.mAttribute_mFormalArgumentName ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procFormalArgumentListForGeneration::method_last (GALGAS_procFormalArgumentPassingMode & outOperand0,
                                                              GALGAS_unifiedTypeMap_2D_proxy & outOperand1,
                                                              GALGAS_string & outOperand2,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procFormalArgumentListForGeneration * p = (cCollectionElement_procFormalArgumentListForGeneration *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procFormalArgumentListForGeneration) ;
    outOperand0 = p->mObject.mAttribute_mFormalArgumentKind ;
    outOperand1 = p->mObject.mAttribute_mFormalArgumentType ;
    outOperand2 = p->mObject.mAttribute_mFormalArgumentName ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentListForGeneration GALGAS_procFormalArgumentListForGeneration::operator_concat (const GALGAS_procFormalArgumentListForGeneration & inOperand
                                                                                                        COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_procFormalArgumentListForGeneration result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentListForGeneration GALGAS_procFormalArgumentListForGeneration::add_operation (const GALGAS_procFormalArgumentListForGeneration & inOperand,
                                                                                                      C_Compiler * /* inCompiler */
                                                                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_procFormalArgumentListForGeneration result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentListForGeneration GALGAS_procFormalArgumentListForGeneration::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                                                C_Compiler * inCompiler
                                                                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_procFormalArgumentListForGeneration result = GALGAS_procFormalArgumentListForGeneration::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentListForGeneration GALGAS_procFormalArgumentListForGeneration::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                                                C_Compiler * inCompiler
                                                                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_procFormalArgumentListForGeneration result = GALGAS_procFormalArgumentListForGeneration::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procFormalArgumentListForGeneration::dotAssign_operation (const GALGAS_procFormalArgumentListForGeneration inOperand
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentPassingMode GALGAS_procFormalArgumentListForGeneration::reader_mFormalArgumentKindAtIndex (const GALGAS_uint & inIndex,
                                                                                                                    C_Compiler * inCompiler
                                                                                                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procFormalArgumentListForGeneration * p = (cCollectionElement_procFormalArgumentListForGeneration *) attributes.ptr () ;
  GALGAS_procFormalArgumentPassingMode result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procFormalArgumentListForGeneration) ;
    result = p->mObject.mAttribute_mFormalArgumentKind ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_procFormalArgumentListForGeneration::reader_mFormalArgumentTypeAtIndex (const GALGAS_uint & inIndex,
                                                                                                              C_Compiler * inCompiler
                                                                                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procFormalArgumentListForGeneration * p = (cCollectionElement_procFormalArgumentListForGeneration *) attributes.ptr () ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procFormalArgumentListForGeneration) ;
    result = p->mObject.mAttribute_mFormalArgumentType ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_procFormalArgumentListForGeneration::reader_mFormalArgumentNameAtIndex (const GALGAS_uint & inIndex,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procFormalArgumentListForGeneration * p = (cCollectionElement_procFormalArgumentListForGeneration *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procFormalArgumentListForGeneration) ;
    result = p->mObject.mAttribute_mFormalArgumentName ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_procFormalArgumentListForGeneration::cEnumerator_procFormalArgumentListForGeneration (const GALGAS_procFormalArgumentListForGeneration & inEnumeratedObject,
                                                                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentListForGeneration_2D_element cEnumerator_procFormalArgumentListForGeneration::current (LOCATION_ARGS) const {
  const cCollectionElement_procFormalArgumentListForGeneration * p = (const cCollectionElement_procFormalArgumentListForGeneration *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procFormalArgumentListForGeneration) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentPassingMode cEnumerator_procFormalArgumentListForGeneration::current_mFormalArgumentKind (LOCATION_ARGS) const {
  const cCollectionElement_procFormalArgumentListForGeneration * p = (const cCollectionElement_procFormalArgumentListForGeneration *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procFormalArgumentListForGeneration) ;
  return p->mObject.mAttribute_mFormalArgumentKind ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_procFormalArgumentListForGeneration::current_mFormalArgumentType (LOCATION_ARGS) const {
  const cCollectionElement_procFormalArgumentListForGeneration * p = (const cCollectionElement_procFormalArgumentListForGeneration *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procFormalArgumentListForGeneration) ;
  return p->mObject.mAttribute_mFormalArgumentType ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string cEnumerator_procFormalArgumentListForGeneration::current_mFormalArgumentName (LOCATION_ARGS) const {
  const cCollectionElement_procFormalArgumentListForGeneration * p = (const cCollectionElement_procFormalArgumentListForGeneration *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procFormalArgumentListForGeneration) ;
  return p->mObject.mAttribute_mFormalArgumentName ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      @procFormalArgumentListForGeneration type                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_procFormalArgumentListForGeneration ("procFormalArgumentListForGeneration",
                                                            NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_procFormalArgumentListForGeneration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_procFormalArgumentListForGeneration ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_procFormalArgumentListForGeneration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_procFormalArgumentListForGeneration (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentListForGeneration GALGAS_procFormalArgumentListForGeneration::extractObject (const GALGAS_object & inObject,
                                                                                                      C_Compiler * inCompiler
                                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_procFormalArgumentListForGeneration result ;
  const GALGAS_procFormalArgumentListForGeneration * p = (const GALGAS_procFormalArgumentListForGeneration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_procFormalArgumentListForGeneration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("procFormalArgumentListForGeneration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         '@subprogramInvocationGraph' graph                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_subprogramInvocationGraph::GALGAS_subprogramInvocationGraph (void) :
AC_GALGAS_graph () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_subprogramInvocationGraph GALGAS_subprogramInvocationGraph::constructor_emptyGraph (LOCATION_ARGS) {
  GALGAS_subprogramInvocationGraph result ;
  result.makeNewEmptyGraph (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_subprogramInvocationGraph::modifier_addNode (GALGAS_lstring inKey,
                                                         GALGAS_lstring inArgument_0,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  GALGAS_lstringlist::makeAttributesFromObjects (attributes, inArgument_0 COMMA_THERE) ;
  const char * kErrorMessage = "the '%K' subprogram is already declared at %L" ;
  internalAddNode (inKey, kErrorMessage, attributes, inCompiler COMMA_THERE) ;
}


//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_subprogramInvocationGraph::method_topologicalSort (GALGAS_lstringlist & outSortedList,
                                                               GALGAS_lstringlist & outSortedKeyList,
                                                               GALGAS_lstringlist & outUnsortedList,
                                                               GALGAS_lstringlist & outUnsortedKeyList,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) const {
  cSharedList * sortedList = NULL ;
  cSharedList * unsortedList = NULL ;
  internalTopologicalSort (sortedList, outSortedKeyList, unsortedList, outUnsortedKeyList, inCompiler COMMA_THERE) ;
  outSortedList = GALGAS_lstringlist (sortedList) ;
  outUnsortedList = GALGAS_lstringlist (unsortedList) ;
  GALGAS_lstringlist::detachSharedList (sortedList) ;
  GALGAS_lstringlist::detachSharedList (unsortedList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_subprogramInvocationGraph::method_depthFirstTopologicalSort (GALGAS_lstringlist & outSortedList,
                                                                         GALGAS_lstringlist & outSortedKeyList,
                                                                         GALGAS_lstringlist & outUnsortedList,
                                                                         GALGAS_lstringlist & outUnsortedKeyList,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  cSharedList * sortedList = NULL ;
  cSharedList * unsortedList = NULL ;
  internalDepthFirstTopologicalSort (sortedList, outSortedKeyList, unsortedList, outUnsortedKeyList, inCompiler COMMA_THERE) ;
  outSortedList = GALGAS_lstringlist (sortedList) ;
  outUnsortedList = GALGAS_lstringlist (unsortedList) ;
  GALGAS_lstringlist::detachSharedList (sortedList) ;
  GALGAS_lstringlist::detachSharedList (unsortedList) ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_subprogramInvocationGraph GALGAS_subprogramInvocationGraph::reader_reversedGraph (LOCATION_ARGS) const {
  GALGAS_subprogramInvocationGraph result ;
  result.reversedGraphFromGraph (*this COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_subprogramInvocationGraph::method_circularities (GALGAS_lstringlist & outInfoList,
                                                             GALGAS_lstringlist & outKeyList
                                                             COMMA_LOCATION_ARGS) const {
  cSharedList * infoList = NULL ;
  internalFindCircularities (infoList, outKeyList COMMA_THERE) ;
  outInfoList = GALGAS_lstringlist (infoList) ;
  GALGAS_lstringlist::detachSharedList (infoList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_subprogramInvocationGraph::method_nodesWithNoSuccessor (GALGAS_lstringlist & outInfoList,
                                                                    GALGAS_lstringlist & outKeyList
                                                                    COMMA_LOCATION_ARGS) const {
  cSharedList * infoList = NULL ;
  internalNodesWithNoSuccessor (infoList, outKeyList COMMA_THERE) ;
  outInfoList = GALGAS_lstringlist (infoList) ;
  GALGAS_lstringlist::detachSharedList (infoList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_subprogramInvocationGraph::method_nodesWithNoPredecessor (GALGAS_lstringlist & outInfoList,
                                                                      GALGAS_lstringlist & outKeyList
                                                                      COMMA_LOCATION_ARGS) const {
  cSharedList * infoList = NULL ;
  internalNodesWithNoPredecessor (infoList, outKeyList COMMA_THERE) ;
  outInfoList = GALGAS_lstringlist (infoList) ;
  GALGAS_lstringlist::detachSharedList (infoList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_subprogramInvocationGraph GALGAS_subprogramInvocationGraph::reader_subgraphFromNodes (const GALGAS_lstringlist & inStartKeyList,
                                                                                             const GALGAS_stringset & inKeysToExclude,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_LOCATION_ARGS) const {
  GALGAS_subprogramInvocationGraph result ;
  subGraph (result, inStartKeyList, inKeysToExclude, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_subprogramInvocationGraph::reader_accessibleNodesFromNodes (const GALGAS_lstringlist & inStartKeyList,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  GALGAS_subprogramInvocationGraph resultingGraph ;
  subGraph (resultingGraph,
            inStartKeyList,
            GALGAS_stringset::constructor_emptySet (HERE),
            inCompiler
            COMMA_THERE) ;
  if (resultingGraph.isValid ()) {
    result = resultingGraph.reader_lkeyList (THERE) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           @subprogramInvocationGraph type                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_subprogramInvocationGraph ("subprogramInvocationGraph",
                                                  NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_subprogramInvocationGraph::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_subprogramInvocationGraph ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_subprogramInvocationGraph::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_subprogramInvocationGraph (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_subprogramInvocationGraph GALGAS_subprogramInvocationGraph::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_subprogramInvocationGraph result ;
  const GALGAS_subprogramInvocationGraph * p = (const GALGAS_subprogramInvocationGraph *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_subprogramInvocationGraph *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("subprogramInvocationGraph", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                Class for element of '@registerDeclarationList' list                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_registerDeclarationList : public cCollectionElement {
  public : GALGAS_registerDeclarationList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_registerDeclarationList (const GALGAS_lstring & in_mRegisterName,
                                                       const GALGAS_lstringlist & in_mAttributeList,
                                                       const GALGAS_lbigint & in_mRegisterAddress
                                                       COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_registerDeclarationList::cCollectionElement_registerDeclarationList (const GALGAS_lstring & in_mRegisterName,
                                                                                        const GALGAS_lstringlist & in_mAttributeList,
                                                                                        const GALGAS_lbigint & in_mRegisterAddress
                                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mRegisterName, in_mAttributeList, in_mRegisterAddress) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_registerDeclarationList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_registerDeclarationList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_registerDeclarationList (mObject.mAttribute_mRegisterName, mObject.mAttribute_mAttributeList, mObject.mAttribute_mRegisterAddress COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_registerDeclarationList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterName" ":" ;
  mObject.mAttribute_mRegisterName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAttributeList" ":" ;
  mObject.mAttribute_mAttributeList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterAddress" ":" ;
  mObject.mAttribute_mRegisterAddress.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_registerDeclarationList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_registerDeclarationList * operand = (cCollectionElement_registerDeclarationList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_registerDeclarationList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerDeclarationList::GALGAS_registerDeclarationList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerDeclarationList::GALGAS_registerDeclarationList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerDeclarationList GALGAS_registerDeclarationList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_registerDeclarationList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerDeclarationList GALGAS_registerDeclarationList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_lstringlist & inOperand1,
                                                                                          const GALGAS_lbigint & inOperand2
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_registerDeclarationList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_registerDeclarationList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerDeclarationList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                const GALGAS_lstring & in_mRegisterName,
                                                                const GALGAS_lstringlist & in_mAttributeList,
                                                                const GALGAS_lbigint & in_mRegisterAddress
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement_registerDeclarationList * p = NULL ;
  macroMyNew (p, cCollectionElement_registerDeclarationList (in_mRegisterName,
                                                             in_mAttributeList,
                                                             in_mRegisterAddress COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerDeclarationList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                          const GALGAS_lstringlist & inOperand1,
                                                          const GALGAS_lbigint & inOperand2
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_registerDeclarationList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerDeclarationList::modifier_insertAtIndex (const GALGAS_lstring inOperand0,
                                                             const GALGAS_lstringlist inOperand1,
                                                             const GALGAS_lbigint inOperand2,
                                                             const GALGAS_uint inInsertionIndex,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_registerDeclarationList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerDeclarationList::modifier_removeAtIndex (GALGAS_lstring & outOperand0,
                                                             GALGAS_lstringlist & outOperand1,
                                                             GALGAS_lbigint & outOperand2,
                                                             const GALGAS_uint inRemoveIndex,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_registerDeclarationList * p = (cCollectionElement_registerDeclarationList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_registerDeclarationList) ;
      outOperand0 = p->mObject.mAttribute_mRegisterName ;
      outOperand1 = p->mObject.mAttribute_mAttributeList ;
      outOperand2 = p->mObject.mAttribute_mRegisterAddress ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerDeclarationList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                        GALGAS_lstringlist & outOperand1,
                                                        GALGAS_lbigint & outOperand2,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_registerDeclarationList * p = (cCollectionElement_registerDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_registerDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mRegisterName ;
    outOperand1 = p->mObject.mAttribute_mAttributeList ;
    outOperand2 = p->mObject.mAttribute_mRegisterAddress ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerDeclarationList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                       GALGAS_lstringlist & outOperand1,
                                                       GALGAS_lbigint & outOperand2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_registerDeclarationList * p = (cCollectionElement_registerDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_registerDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mRegisterName ;
    outOperand1 = p->mObject.mAttribute_mAttributeList ;
    outOperand2 = p->mObject.mAttribute_mRegisterAddress ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerDeclarationList::method_first (GALGAS_lstring & outOperand0,
                                                   GALGAS_lstringlist & outOperand1,
                                                   GALGAS_lbigint & outOperand2,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_registerDeclarationList * p = (cCollectionElement_registerDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_registerDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mRegisterName ;
    outOperand1 = p->mObject.mAttribute_mAttributeList ;
    outOperand2 = p->mObject.mAttribute_mRegisterAddress ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerDeclarationList::method_last (GALGAS_lstring & outOperand0,
                                                  GALGAS_lstringlist & outOperand1,
                                                  GALGAS_lbigint & outOperand2,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_registerDeclarationList * p = (cCollectionElement_registerDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_registerDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mRegisterName ;
    outOperand1 = p->mObject.mAttribute_mAttributeList ;
    outOperand2 = p->mObject.mAttribute_mRegisterAddress ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerDeclarationList GALGAS_registerDeclarationList::operator_concat (const GALGAS_registerDeclarationList & inOperand
                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_registerDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerDeclarationList GALGAS_registerDeclarationList::add_operation (const GALGAS_registerDeclarationList & inOperand,
                                                                              C_Compiler * /* inCompiler */
                                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_registerDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerDeclarationList GALGAS_registerDeclarationList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_registerDeclarationList result = GALGAS_registerDeclarationList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerDeclarationList GALGAS_registerDeclarationList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_registerDeclarationList result = GALGAS_registerDeclarationList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerDeclarationList::dotAssign_operation (const GALGAS_registerDeclarationList inOperand
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring GALGAS_registerDeclarationList::reader_mRegisterNameAtIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_registerDeclarationList * p = (cCollectionElement_registerDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_registerDeclarationList) ;
    result = p->mObject.mAttribute_mRegisterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_registerDeclarationList::reader_mAttributeListAtIndex (const GALGAS_uint & inIndex,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_registerDeclarationList * p = (cCollectionElement_registerDeclarationList *) attributes.ptr () ;
  GALGAS_lstringlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_registerDeclarationList) ;
    result = p->mObject.mAttribute_mAttributeList ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lbigint GALGAS_registerDeclarationList::reader_mRegisterAddressAtIndex (const GALGAS_uint & inIndex,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_registerDeclarationList * p = (cCollectionElement_registerDeclarationList *) attributes.ptr () ;
  GALGAS_lbigint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_registerDeclarationList) ;
    result = p->mObject.mAttribute_mRegisterAddress ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_registerDeclarationList::cEnumerator_registerDeclarationList (const GALGAS_registerDeclarationList & inEnumeratedObject,
                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerDeclarationList_2D_element cEnumerator_registerDeclarationList::current (LOCATION_ARGS) const {
  const cCollectionElement_registerDeclarationList * p = (const cCollectionElement_registerDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_registerDeclarationList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_registerDeclarationList::current_mRegisterName (LOCATION_ARGS) const {
  const cCollectionElement_registerDeclarationList * p = (const cCollectionElement_registerDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_registerDeclarationList) ;
  return p->mObject.mAttribute_mRegisterName ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstringlist cEnumerator_registerDeclarationList::current_mAttributeList (LOCATION_ARGS) const {
  const cCollectionElement_registerDeclarationList * p = (const cCollectionElement_registerDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_registerDeclarationList) ;
  return p->mObject.mAttribute_mAttributeList ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lbigint cEnumerator_registerDeclarationList::current_mRegisterAddress (LOCATION_ARGS) const {
  const cCollectionElement_registerDeclarationList * p = (const cCollectionElement_registerDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_registerDeclarationList) ;
  return p->mObject.mAttribute_mRegisterAddress ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            @registerDeclarationList type                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerDeclarationList ("registerDeclarationList",
                                                NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerDeclarationList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerDeclarationList ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerDeclarationList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerDeclarationList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerDeclarationList GALGAS_registerDeclarationList::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_registerDeclarationList result ;
  const GALGAS_registerDeclarationList * p = (const GALGAS_registerDeclarationList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerDeclarationList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("registerDeclarationList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  Class for element of '@registerBitSliceList' list                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_registerBitSliceList : public cCollectionElement {
  public : GALGAS_registerBitSliceList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_registerBitSliceList (const GALGAS_registerBitSlice & in_mRegisterBitSlice
                                                    COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_registerBitSliceList::cCollectionElement_registerBitSliceList (const GALGAS_registerBitSlice & in_mRegisterBitSlice
                                                                                  COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mRegisterBitSlice) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_registerBitSliceList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_registerBitSliceList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_registerBitSliceList (mObject.mAttribute_mRegisterBitSlice COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_registerBitSliceList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterBitSlice" ":" ;
  mObject.mAttribute_mRegisterBitSlice.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_registerBitSliceList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_registerBitSliceList * operand = (cCollectionElement_registerBitSliceList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_registerBitSliceList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceList::GALGAS_registerBitSliceList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceList::GALGAS_registerBitSliceList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceList GALGAS_registerBitSliceList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_registerBitSliceList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceList GALGAS_registerBitSliceList::constructor_listWithValue (const GALGAS_registerBitSlice & inOperand0
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_registerBitSliceList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_registerBitSliceList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                             const GALGAS_registerBitSlice & in_mRegisterBitSlice
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement_registerBitSliceList * p = NULL ;
  macroMyNew (p, cCollectionElement_registerBitSliceList (in_mRegisterBitSlice COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceList::addAssign_operation (const GALGAS_registerBitSlice & inOperand0
                                                       COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_registerBitSliceList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceList::modifier_insertAtIndex (const GALGAS_registerBitSlice inOperand0,
                                                          const GALGAS_uint inInsertionIndex,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_registerBitSliceList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceList::modifier_removeAtIndex (GALGAS_registerBitSlice & outOperand0,
                                                          const GALGAS_uint inRemoveIndex,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_registerBitSliceList * p = (cCollectionElement_registerBitSliceList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_registerBitSliceList) ;
      outOperand0 = p->mObject.mAttribute_mRegisterBitSlice ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceList::modifier_popFirst (GALGAS_registerBitSlice & outOperand0,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_registerBitSliceList * p = (cCollectionElement_registerBitSliceList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_registerBitSliceList) ;
    outOperand0 = p->mObject.mAttribute_mRegisterBitSlice ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceList::modifier_popLast (GALGAS_registerBitSlice & outOperand0,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_registerBitSliceList * p = (cCollectionElement_registerBitSliceList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_registerBitSliceList) ;
    outOperand0 = p->mObject.mAttribute_mRegisterBitSlice ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceList::method_first (GALGAS_registerBitSlice & outOperand0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_registerBitSliceList * p = (cCollectionElement_registerBitSliceList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_registerBitSliceList) ;
    outOperand0 = p->mObject.mAttribute_mRegisterBitSlice ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceList::method_last (GALGAS_registerBitSlice & outOperand0,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_registerBitSliceList * p = (cCollectionElement_registerBitSliceList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_registerBitSliceList) ;
    outOperand0 = p->mObject.mAttribute_mRegisterBitSlice ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceList GALGAS_registerBitSliceList::operator_concat (const GALGAS_registerBitSliceList & inOperand
                                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_registerBitSliceList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceList GALGAS_registerBitSliceList::add_operation (const GALGAS_registerBitSliceList & inOperand,
                                                                        C_Compiler * /* inCompiler */
                                                                        COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_registerBitSliceList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceList GALGAS_registerBitSliceList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_registerBitSliceList result = GALGAS_registerBitSliceList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceList GALGAS_registerBitSliceList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_registerBitSliceList result = GALGAS_registerBitSliceList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceList::dotAssign_operation (const GALGAS_registerBitSliceList inOperand
                                                       COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSlice GALGAS_registerBitSliceList::reader_mRegisterBitSliceAtIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_registerBitSliceList * p = (cCollectionElement_registerBitSliceList *) attributes.ptr () ;
  GALGAS_registerBitSlice result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_registerBitSliceList) ;
    result = p->mObject.mAttribute_mRegisterBitSlice ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_registerBitSliceList::cEnumerator_registerBitSliceList (const GALGAS_registerBitSliceList & inEnumeratedObject,
                                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceList_2D_element cEnumerator_registerBitSliceList::current (LOCATION_ARGS) const {
  const cCollectionElement_registerBitSliceList * p = (const cCollectionElement_registerBitSliceList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_registerBitSliceList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSlice cEnumerator_registerBitSliceList::current_mRegisterBitSlice (LOCATION_ARGS) const {
  const cCollectionElement_registerBitSliceList * p = (const cCollectionElement_registerBitSliceList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_registerBitSliceList) ;
  return p->mObject.mAttribute_mRegisterBitSlice ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             @registerBitSliceList type                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerBitSliceList ("registerBitSliceList",
                                             NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerBitSliceList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerBitSliceList ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerBitSliceList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerBitSliceList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceList GALGAS_registerBitSliceList::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_registerBitSliceList result ;
  const GALGAS_registerBitSliceList * p = (const GALGAS_registerBitSliceList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerBitSliceList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("registerBitSliceList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_registerFieldMap::cMapElement_registerFieldMap (const GALGAS_lstring & inKey,
                                                            const GALGAS_uint & in_mBitIndex,
                                                            const GALGAS_uint & in_mBitCount
                                                            COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mBitIndex (in_mBitIndex),
mAttribute_mBitCount (in_mBitCount) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_registerFieldMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mBitIndex.isValid () && mAttribute_mBitCount.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_registerFieldMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_registerFieldMap (mAttribute_lkey, mAttribute_mBitIndex, mAttribute_mBitCount COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_registerFieldMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBitIndex" ":" ;
  mAttribute_mBitIndex.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBitCount" ":" ;
  mAttribute_mBitCount.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_registerFieldMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_registerFieldMap * operand = (cMapElement_registerFieldMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBitIndex.objectCompare (operand->mAttribute_mBitIndex) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBitCount.objectCompare (operand->mAttribute_mBitCount) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerFieldMap::GALGAS_registerFieldMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerFieldMap::GALGAS_registerFieldMap (const GALGAS_registerFieldMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerFieldMap & GALGAS_registerFieldMap::operator = (const GALGAS_registerFieldMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerFieldMap GALGAS_registerFieldMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_registerFieldMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerFieldMap GALGAS_registerFieldMap::constructor_mapWithMapToOverride (const GALGAS_registerFieldMap & inMapToOverride
                                                                                   COMMA_LOCATION_ARGS) {
  GALGAS_registerFieldMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerFieldMap GALGAS_registerFieldMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  GALGAS_registerFieldMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerFieldMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                   const GALGAS_uint & inArgument0,
                                                   const GALGAS_uint & inArgument1,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_registerFieldMap * p = NULL ;
  macroMyNew (p, cMapElement_registerFieldMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@registerFieldMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerFieldMap::modifier_insertKey (GALGAS_lstring inKey,
                                                  GALGAS_uint inArgument0,
                                                  GALGAS_uint inArgument1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  cMapElement_registerFieldMap * p = NULL ;
  macroMyNew (p, cMapElement_registerFieldMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' register slice has been already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_registerFieldMap_searchKey = "the '%K' register slice is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerFieldMap::method_searchKey (GALGAS_lstring inKey,
                                                GALGAS_uint & outArgument0,
                                                GALGAS_uint & outArgument1,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  const cMapElement_registerFieldMap * p = (const cMapElement_registerFieldMap *) performSearch (inKey,
                                                                                                   inCompiler,
                                                                                                   kSearchErrorMessage_registerFieldMap_searchKey
                                                                                                   COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_registerFieldMap) ;
    outArgument0 = p->mAttribute_mBitIndex ;
    outArgument1 = p->mAttribute_mBitCount ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_registerFieldMap::reader_mBitIndexForKey (const GALGAS_string & inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerFieldMap * p = (const cMapElement_registerFieldMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerFieldMap) ;
    result = p->mAttribute_mBitIndex ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_registerFieldMap::reader_mBitCountForKey (const GALGAS_string & inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerFieldMap * p = (const cMapElement_registerFieldMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerFieldMap) ;
    result = p->mAttribute_mBitCount ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerFieldMap::modifier_setMBitIndexForKey (GALGAS_uint inAttributeValue,
                                                           GALGAS_string inKey,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerFieldMap * p = (cMapElement_registerFieldMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerFieldMap) ;
    p->mAttribute_mBitIndex = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerFieldMap::modifier_setMBitCountForKey (GALGAS_uint inAttributeValue,
                                                           GALGAS_string inKey,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerFieldMap * p = (cMapElement_registerFieldMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerFieldMap) ;
    p->mAttribute_mBitCount = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_registerFieldMap * GALGAS_registerFieldMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                           const GALGAS_string & inKey
                                                                                           COMMA_LOCATION_ARGS) {
  cMapElement_registerFieldMap * result = (cMapElement_registerFieldMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_registerFieldMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_registerFieldMap::cEnumerator_registerFieldMap (const GALGAS_registerFieldMap & inEnumeratedObject,
                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerFieldMap_2D_element cEnumerator_registerFieldMap::current (LOCATION_ARGS) const {
  const cMapElement_registerFieldMap * p = (const cMapElement_registerFieldMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerFieldMap) ;
  return GALGAS_registerFieldMap_2D_element (p->mAttribute_lkey, p->mAttribute_mBitIndex, p->mAttribute_mBitCount) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_registerFieldMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_registerFieldMap::current_mBitIndex (LOCATION_ARGS) const {
  const cMapElement_registerFieldMap * p = (const cMapElement_registerFieldMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerFieldMap) ;
  return p->mAttribute_mBitIndex ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_registerFieldMap::current_mBitCount (LOCATION_ARGS) const {
  const cMapElement_registerFieldMap * p = (const cMapElement_registerFieldMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerFieldMap) ;
  return p->mAttribute_mBitCount ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @registerFieldMap type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerFieldMap ("registerFieldMap",
                                         NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerFieldMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerFieldMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerFieldMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerFieldMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerFieldMap GALGAS_registerFieldMap::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_registerFieldMap result ;
  const GALGAS_registerFieldMap * p = (const GALGAS_registerFieldMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerFieldMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("registerFieldMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_registerBitSliceAccessMap::cMapElement_registerBitSliceAccessMap (const GALGAS_lstring & inKey,
                                                                              const GALGAS_string & in_mAccessOperator,
                                                                              const GALGAS_bigint & in_mAccessRightOperand,
                                                                              const GALGAS_registerBitSliceAccessMap & in_mSubMap,
                                                                              const GALGAS_unifiedTypeMap_2D_proxy & in_mResultType
                                                                              COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mAccessOperator (in_mAccessOperator),
mAttribute_mAccessRightOperand (in_mAccessRightOperand),
mAttribute_mSubMap (in_mSubMap),
mAttribute_mResultType (in_mResultType) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_registerBitSliceAccessMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mAccessOperator.isValid () && mAttribute_mAccessRightOperand.isValid () && mAttribute_mSubMap.isValid () && mAttribute_mResultType.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_registerBitSliceAccessMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_registerBitSliceAccessMap (mAttribute_lkey, mAttribute_mAccessOperator, mAttribute_mAccessRightOperand, mAttribute_mSubMap, mAttribute_mResultType COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_registerBitSliceAccessMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAccessOperator" ":" ;
  mAttribute_mAccessOperator.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAccessRightOperand" ":" ;
  mAttribute_mAccessRightOperand.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSubMap" ":" ;
  mAttribute_mSubMap.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mResultType" ":" ;
  mAttribute_mResultType.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_registerBitSliceAccessMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_registerBitSliceAccessMap * operand = (cMapElement_registerBitSliceAccessMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mAccessOperator.objectCompare (operand->mAttribute_mAccessOperator) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mAccessRightOperand.objectCompare (operand->mAttribute_mAccessRightOperand) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSubMap.objectCompare (operand->mAttribute_mSubMap) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mResultType.objectCompare (operand->mAttribute_mResultType) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap::GALGAS_registerBitSliceAccessMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap::GALGAS_registerBitSliceAccessMap (const GALGAS_registerBitSliceAccessMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap & GALGAS_registerBitSliceAccessMap::operator = (const GALGAS_registerBitSliceAccessMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap GALGAS_registerBitSliceAccessMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_registerBitSliceAccessMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap GALGAS_registerBitSliceAccessMap::constructor_mapWithMapToOverride (const GALGAS_registerBitSliceAccessMap & inMapToOverride
                                                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_registerBitSliceAccessMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap GALGAS_registerBitSliceAccessMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_registerBitSliceAccessMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceAccessMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                            const GALGAS_string & inArgument0,
                                                            const GALGAS_bigint & inArgument1,
                                                            const GALGAS_registerBitSliceAccessMap & inArgument2,
                                                            const GALGAS_unifiedTypeMap_2D_proxy & inArgument3,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  cMapElement_registerBitSliceAccessMap * p = NULL ;
  macroMyNew (p, cMapElement_registerBitSliceAccessMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@registerBitSliceAccessMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceAccessMap::modifier_insertKey (GALGAS_lstring inKey,
                                                           GALGAS_string inArgument0,
                                                           GALGAS_bigint inArgument1,
                                                           GALGAS_registerBitSliceAccessMap inArgument2,
                                                           GALGAS_unifiedTypeMap_2D_proxy inArgument3,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  cMapElement_registerBitSliceAccessMap * p = NULL ;
  macroMyNew (p, cMapElement_registerBitSliceAccessMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' register slice has been already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_registerBitSliceAccessMap_searchKey = "the '%K' register slice is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceAccessMap::method_searchKey (GALGAS_lstring inKey,
                                                         GALGAS_string & outArgument0,
                                                         GALGAS_bigint & outArgument1,
                                                         GALGAS_registerBitSliceAccessMap & outArgument2,
                                                         GALGAS_unifiedTypeMap_2D_proxy & outArgument3,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) const {
  const cMapElement_registerBitSliceAccessMap * p = (const cMapElement_registerBitSliceAccessMap *) performSearch (inKey,
                                                                                                                     inCompiler,
                                                                                                                     kSearchErrorMessage_registerBitSliceAccessMap_searchKey
                                                                                                                     COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
    outArgument0 = p->mAttribute_mAccessOperator ;
    outArgument1 = p->mAttribute_mAccessRightOperand ;
    outArgument2 = p->mAttribute_mSubMap ;
    outArgument3 = p->mAttribute_mResultType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_registerBitSliceAccessMap::reader_mAccessOperatorForKey (const GALGAS_string & inKey,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerBitSliceAccessMap * p = (const cMapElement_registerBitSliceAccessMap *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
    result = p->mAttribute_mAccessOperator ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bigint GALGAS_registerBitSliceAccessMap::reader_mAccessRightOperandForKey (const GALGAS_string & inKey,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerBitSliceAccessMap * p = (const cMapElement_registerBitSliceAccessMap *) attributes ;
  GALGAS_bigint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
    result = p->mAttribute_mAccessRightOperand ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap GALGAS_registerBitSliceAccessMap::reader_mSubMapForKey (const GALGAS_string & inKey,
                                                                                         C_Compiler * inCompiler
                                                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerBitSliceAccessMap * p = (const cMapElement_registerBitSliceAccessMap *) attributes ;
  GALGAS_registerBitSliceAccessMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
    result = p->mAttribute_mSubMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_registerBitSliceAccessMap::reader_mResultTypeForKey (const GALGAS_string & inKey,
                                                                                           C_Compiler * inCompiler
                                                                                           COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerBitSliceAccessMap * p = (const cMapElement_registerBitSliceAccessMap *) attributes ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
    result = p->mAttribute_mResultType ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceAccessMap::modifier_setMAccessOperatorForKey (GALGAS_string inAttributeValue,
                                                                          GALGAS_string inKey,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerBitSliceAccessMap * p = (cMapElement_registerBitSliceAccessMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
    p->mAttribute_mAccessOperator = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceAccessMap::modifier_setMAccessRightOperandForKey (GALGAS_bigint inAttributeValue,
                                                                              GALGAS_string inKey,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerBitSliceAccessMap * p = (cMapElement_registerBitSliceAccessMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
    p->mAttribute_mAccessRightOperand = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceAccessMap::modifier_setMSubMapForKey (GALGAS_registerBitSliceAccessMap inAttributeValue,
                                                                  GALGAS_string inKey,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerBitSliceAccessMap * p = (cMapElement_registerBitSliceAccessMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
    p->mAttribute_mSubMap = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSliceAccessMap::modifier_setMResultTypeForKey (GALGAS_unifiedTypeMap_2D_proxy inAttributeValue,
                                                                      GALGAS_string inKey,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerBitSliceAccessMap * p = (cMapElement_registerBitSliceAccessMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
    p->mAttribute_mResultType = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_registerBitSliceAccessMap * GALGAS_registerBitSliceAccessMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                             const GALGAS_string & inKey
                                                                                                             COMMA_LOCATION_ARGS) {
  cMapElement_registerBitSliceAccessMap * result = (cMapElement_registerBitSliceAccessMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_registerBitSliceAccessMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_registerBitSliceAccessMap::cEnumerator_registerBitSliceAccessMap (const GALGAS_registerBitSliceAccessMap & inEnumeratedObject,
                                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap_2D_element cEnumerator_registerBitSliceAccessMap::current (LOCATION_ARGS) const {
  const cMapElement_registerBitSliceAccessMap * p = (const cMapElement_registerBitSliceAccessMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
  return GALGAS_registerBitSliceAccessMap_2D_element (p->mAttribute_lkey, p->mAttribute_mAccessOperator, p->mAttribute_mAccessRightOperand, p->mAttribute_mSubMap, p->mAttribute_mResultType) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_registerBitSliceAccessMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string cEnumerator_registerBitSliceAccessMap::current_mAccessOperator (LOCATION_ARGS) const {
  const cMapElement_registerBitSliceAccessMap * p = (const cMapElement_registerBitSliceAccessMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
  return p->mAttribute_mAccessOperator ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bigint cEnumerator_registerBitSliceAccessMap::current_mAccessRightOperand (LOCATION_ARGS) const {
  const cMapElement_registerBitSliceAccessMap * p = (const cMapElement_registerBitSliceAccessMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
  return p->mAttribute_mAccessRightOperand ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap cEnumerator_registerBitSliceAccessMap::current_mSubMap (LOCATION_ARGS) const {
  const cMapElement_registerBitSliceAccessMap * p = (const cMapElement_registerBitSliceAccessMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
  return p->mAttribute_mSubMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_registerBitSliceAccessMap::current_mResultType (LOCATION_ARGS) const {
  const cMapElement_registerBitSliceAccessMap * p = (const cMapElement_registerBitSliceAccessMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerBitSliceAccessMap) ;
  return p->mAttribute_mResultType ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           @registerBitSliceAccessMap type                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerBitSliceAccessMap ("registerBitSliceAccessMap",
                                                  NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerBitSliceAccessMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerBitSliceAccessMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerBitSliceAccessMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerBitSliceAccessMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap GALGAS_registerBitSliceAccessMap::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_registerBitSliceAccessMap result ;
  const GALGAS_registerBitSliceAccessMap * p = (const GALGAS_registerBitSliceAccessMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerBitSliceAccessMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("registerBitSliceAccessMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_registerMap::cMapElement_registerMap (const GALGAS_lstring & inKey,
                                                  const GALGAS_unifiedTypeMap_2D_proxy & in_mType,
                                                  const GALGAS_bool & in_mIsReadOnly,
                                                  const GALGAS_registerBitSliceAccessMap & in_mRegisterFieldAccessMap,
                                                  const GALGAS_registerFieldMap & in_mRegisterFieldMap,
                                                  const GALGAS_bigint & in_mAddress
                                                  COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mType (in_mType),
mAttribute_mIsReadOnly (in_mIsReadOnly),
mAttribute_mRegisterFieldAccessMap (in_mRegisterFieldAccessMap),
mAttribute_mRegisterFieldMap (in_mRegisterFieldMap),
mAttribute_mAddress (in_mAddress) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_registerMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mType.isValid () && mAttribute_mIsReadOnly.isValid () && mAttribute_mRegisterFieldAccessMap.isValid () && mAttribute_mRegisterFieldMap.isValid () && mAttribute_mAddress.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_registerMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_registerMap (mAttribute_lkey, mAttribute_mType, mAttribute_mIsReadOnly, mAttribute_mRegisterFieldAccessMap, mAttribute_mRegisterFieldMap, mAttribute_mAddress COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_registerMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mAttribute_mType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIsReadOnly" ":" ;
  mAttribute_mIsReadOnly.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterFieldAccessMap" ":" ;
  mAttribute_mRegisterFieldAccessMap.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterFieldMap" ":" ;
  mAttribute_mRegisterFieldMap.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAddress" ":" ;
  mAttribute_mAddress.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_registerMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_registerMap * operand = (cMapElement_registerMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mType.objectCompare (operand->mAttribute_mType) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mIsReadOnly.objectCompare (operand->mAttribute_mIsReadOnly) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterFieldAccessMap.objectCompare (operand->mAttribute_mRegisterFieldAccessMap) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterFieldMap.objectCompare (operand->mAttribute_mRegisterFieldMap) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mAddress.objectCompare (operand->mAttribute_mAddress) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMap::GALGAS_registerMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMap::GALGAS_registerMap (const GALGAS_registerMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMap & GALGAS_registerMap::operator = (const GALGAS_registerMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMap GALGAS_registerMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_registerMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMap GALGAS_registerMap::constructor_mapWithMapToOverride (const GALGAS_registerMap & inMapToOverride
                                                                         COMMA_LOCATION_ARGS) {
  GALGAS_registerMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMap GALGAS_registerMap::reader_overriddenMap (C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  GALGAS_registerMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerMap::addAssign_operation (const GALGAS_lstring & inKey,
                                              const GALGAS_unifiedTypeMap_2D_proxy & inArgument0,
                                              const GALGAS_bool & inArgument1,
                                              const GALGAS_registerBitSliceAccessMap & inArgument2,
                                              const GALGAS_registerFieldMap & inArgument3,
                                              const GALGAS_bigint & inArgument4,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  cMapElement_registerMap * p = NULL ;
  macroMyNew (p, cMapElement_registerMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@registerMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerMap::modifier_insertKey (GALGAS_lstring inKey,
                                             GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                             GALGAS_bool inArgument1,
                                             GALGAS_registerBitSliceAccessMap inArgument2,
                                             GALGAS_registerFieldMap inArgument3,
                                             GALGAS_bigint inArgument4,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) {
  cMapElement_registerMap * p = NULL ;
  macroMyNew (p, cMapElement_registerMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' register has been already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_registerMap_searchKey = "** internal error **" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerMap::method_searchKey (GALGAS_lstring inKey,
                                           GALGAS_unifiedTypeMap_2D_proxy & outArgument0,
                                           GALGAS_bool & outArgument1,
                                           GALGAS_registerBitSliceAccessMap & outArgument2,
                                           GALGAS_registerFieldMap & outArgument3,
                                           GALGAS_bigint & outArgument4,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  const cMapElement_registerMap * p = (const cMapElement_registerMap *) performSearch (inKey,
                                                                                         inCompiler,
                                                                                         kSearchErrorMessage_registerMap_searchKey
                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
    outArgument4.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_registerMap) ;
    outArgument0 = p->mAttribute_mType ;
    outArgument1 = p->mAttribute_mIsReadOnly ;
    outArgument2 = p->mAttribute_mRegisterFieldAccessMap ;
    outArgument3 = p->mAttribute_mRegisterFieldMap ;
    outArgument4 = p->mAttribute_mAddress ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_registerMap::reader_mTypeForKey (const GALGAS_string & inKey,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerMap * p = (const cMapElement_registerMap *) attributes ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMap) ;
    result = p->mAttribute_mType ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_registerMap::reader_mIsReadOnlyForKey (const GALGAS_string & inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerMap * p = (const cMapElement_registerMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMap) ;
    result = p->mAttribute_mIsReadOnly ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap GALGAS_registerMap::reader_mRegisterFieldAccessMapForKey (const GALGAS_string & inKey,
                                                                                           C_Compiler * inCompiler
                                                                                           COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerMap * p = (const cMapElement_registerMap *) attributes ;
  GALGAS_registerBitSliceAccessMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMap) ;
    result = p->mAttribute_mRegisterFieldAccessMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerFieldMap GALGAS_registerMap::reader_mRegisterFieldMapForKey (const GALGAS_string & inKey,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerMap * p = (const cMapElement_registerMap *) attributes ;
  GALGAS_registerFieldMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMap) ;
    result = p->mAttribute_mRegisterFieldMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bigint GALGAS_registerMap::reader_mAddressForKey (const GALGAS_string & inKey,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerMap * p = (const cMapElement_registerMap *) attributes ;
  GALGAS_bigint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMap) ;
    result = p->mAttribute_mAddress ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerMap::modifier_setMTypeForKey (GALGAS_unifiedTypeMap_2D_proxy inAttributeValue,
                                                  GALGAS_string inKey,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerMap * p = (cMapElement_registerMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMap) ;
    p->mAttribute_mType = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerMap::modifier_setMIsReadOnlyForKey (GALGAS_bool inAttributeValue,
                                                        GALGAS_string inKey,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerMap * p = (cMapElement_registerMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMap) ;
    p->mAttribute_mIsReadOnly = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerMap::modifier_setMRegisterFieldAccessMapForKey (GALGAS_registerBitSliceAccessMap inAttributeValue,
                                                                    GALGAS_string inKey,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerMap * p = (cMapElement_registerMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMap) ;
    p->mAttribute_mRegisterFieldAccessMap = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerMap::modifier_setMRegisterFieldMapForKey (GALGAS_registerFieldMap inAttributeValue,
                                                              GALGAS_string inKey,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerMap * p = (cMapElement_registerMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMap) ;
    p->mAttribute_mRegisterFieldMap = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerMap::modifier_setMAddressForKey (GALGAS_bigint inAttributeValue,
                                                     GALGAS_string inKey,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerMap * p = (cMapElement_registerMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMap) ;
    p->mAttribute_mAddress = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_registerMap * GALGAS_registerMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                 const GALGAS_string & inKey
                                                                                 COMMA_LOCATION_ARGS) {
  cMapElement_registerMap * result = (cMapElement_registerMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_registerMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_registerMap::cEnumerator_registerMap (const GALGAS_registerMap & inEnumeratedObject,
                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMap_2D_element cEnumerator_registerMap::current (LOCATION_ARGS) const {
  const cMapElement_registerMap * p = (const cMapElement_registerMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerMap) ;
  return GALGAS_registerMap_2D_element (p->mAttribute_lkey, p->mAttribute_mType, p->mAttribute_mIsReadOnly, p->mAttribute_mRegisterFieldAccessMap, p->mAttribute_mRegisterFieldMap, p->mAttribute_mAddress) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_registerMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_registerMap::current_mType (LOCATION_ARGS) const {
  const cMapElement_registerMap * p = (const cMapElement_registerMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerMap) ;
  return p->mAttribute_mType ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_registerMap::current_mIsReadOnly (LOCATION_ARGS) const {
  const cMapElement_registerMap * p = (const cMapElement_registerMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerMap) ;
  return p->mAttribute_mIsReadOnly ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap cEnumerator_registerMap::current_mRegisterFieldAccessMap (LOCATION_ARGS) const {
  const cMapElement_registerMap * p = (const cMapElement_registerMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerMap) ;
  return p->mAttribute_mRegisterFieldAccessMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerFieldMap cEnumerator_registerMap::current_mRegisterFieldMap (LOCATION_ARGS) const {
  const cMapElement_registerMap * p = (const cMapElement_registerMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerMap) ;
  return p->mAttribute_mRegisterFieldMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bigint cEnumerator_registerMap::current_mAddress (LOCATION_ARGS) const {
  const cMapElement_registerMap * p = (const cMapElement_registerMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerMap) ;
  return p->mAttribute_mAddress ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                  @registerMap type                                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerMap ("registerMap",
                                    NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMap GALGAS_registerMap::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_registerMap result ;
  const GALGAS_registerMap * p = (const GALGAS_registerMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("registerMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator::GALGAS_infixOperator (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_equal (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_equal ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_nonEqual (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_nonEqual ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_strictInf (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_strictInf ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_strictSup (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_strictSup ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_infEqual (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_infEqual ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_supEqual (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_supEqual ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_andOp (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_andOp ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_booleanAnd (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_booleanAnd ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_orOp (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_orOp ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_booleanOrOp (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_booleanOrOp ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_xorOp (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_xorOp ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_booleanXorOp (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_booleanXorOp ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_addOp (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_addOp ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_addOpNoOvf (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_addOpNoOvf ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_subOp (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_subOp ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_subOpNoOvf (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_subOpNoOvf ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_mulOp (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_mulOp ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_mulOpNoOvf (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_mulOpNoOvf ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_divOp (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_divOp ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_divOpNoOvf (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_divOpNoOvf ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_modOp (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_modOp ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_modOpNoOvf (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_modOpNoOvf ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_leftShiftOp (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_leftShiftOp ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::constructor_rightShiftOp (UNUSED_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  result.mEnum = kEnum_rightShiftOp ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_infixOperator [25] = {
  "(not built)",
  "equal",
  "nonEqual",
  "strictInf",
  "strictSup",
  "infEqual",
  "supEqual",
  "andOp",
  "booleanAnd",
  "orOp",
  "booleanOrOp",
  "xorOp",
  "booleanXorOp",
  "addOp",
  "addOpNoOvf",
  "subOp",
  "subOpNoOvf",
  "mulOp",
  "mulOpNoOvf",
  "divOp",
  "divOpNoOvf",
  "modOp",
  "modOpNoOvf",
  "leftShiftOp",
  "rightShiftOp"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isEqual (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_equal == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isNonEqual (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_nonEqual == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isStrictInf (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_strictInf == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isStrictSup (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_strictSup == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isInfEqual (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_infEqual == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isSupEqual (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_supEqual == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isAndOp (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_andOp == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isBooleanAnd (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_booleanAnd == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isOrOp (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_orOp == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isBooleanOrOp (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_booleanOrOp == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isXorOp (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_xorOp == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isBooleanXorOp (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_booleanXorOp == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isAddOp (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_addOp == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isAddOpNoOvf (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_addOpNoOvf == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isSubOp (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_subOp == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isSubOpNoOvf (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_subOpNoOvf == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isMulOp (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_mulOp == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isMulOpNoOvf (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_mulOpNoOvf == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isDivOp (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_divOp == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isDivOpNoOvf (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_divOpNoOvf == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isModOp (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_modOp == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isModOpNoOvf (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_modOpNoOvf == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isLeftShiftOp (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_leftShiftOp == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperator::reader_isRightShiftOp (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_rightShiftOp == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_infixOperator::description (C_String & ioString,
                                        const int32_t /* inIndentation */) const {
  ioString << "<enum @infixOperator: " << gEnumNameArrayFor_infixOperator [mEnum] ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_infixOperator::objectCompare (const GALGAS_infixOperator & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 @infixOperator type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_infixOperator ("infixOperator",
                                      NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_infixOperator::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_infixOperator ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_infixOperator::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_infixOperator (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperator GALGAS_infixOperator::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_infixOperator result ;
  const GALGAS_infixOperator * p = (const GALGAS_infixOperator *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_infixOperator *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("infixOperator", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_infixOperatorMap::cMapElement_infixOperatorMap (const GALGAS_lstring & inKey,
                                                            const GALGAS_unifiedTypeMap_2D_proxy & in_mResultType
                                                            COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mResultType (in_mResultType) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_infixOperatorMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mResultType.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_infixOperatorMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_infixOperatorMap (mAttribute_lkey, mAttribute_mResultType COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_infixOperatorMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mResultType" ":" ;
  mAttribute_mResultType.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_infixOperatorMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_infixOperatorMap * operand = (cMapElement_infixOperatorMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mResultType.objectCompare (operand->mAttribute_mResultType) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorMap::GALGAS_infixOperatorMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorMap::GALGAS_infixOperatorMap (const GALGAS_infixOperatorMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorMap & GALGAS_infixOperatorMap::operator = (const GALGAS_infixOperatorMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorMap GALGAS_infixOperatorMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_infixOperatorMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorMap GALGAS_infixOperatorMap::constructor_mapWithMapToOverride (const GALGAS_infixOperatorMap & inMapToOverride
                                                                                   COMMA_LOCATION_ARGS) {
  GALGAS_infixOperatorMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorMap GALGAS_infixOperatorMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  GALGAS_infixOperatorMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_infixOperatorMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                   const GALGAS_unifiedTypeMap_2D_proxy & inArgument0,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_infixOperatorMap * p = NULL ;
  macroMyNew (p, cMapElement_infixOperatorMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@infixOperatorMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_infixOperatorMap::modifier_insertKey (GALGAS_lstring inKey,
                                                  GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  cMapElement_infixOperatorMap * p = NULL ;
  macroMyNew (p, cMapElement_infixOperatorMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "** internal error **" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_infixOperatorMap_searchKey = "** internal error **" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_infixOperatorMap::method_searchKey (GALGAS_lstring inKey,
                                                GALGAS_unifiedTypeMap_2D_proxy & outArgument0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  const cMapElement_infixOperatorMap * p = (const cMapElement_infixOperatorMap *) performSearch (inKey,
                                                                                                   inCompiler,
                                                                                                   kSearchErrorMessage_infixOperatorMap_searchKey
                                                                                                   COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_infixOperatorMap) ;
    outArgument0 = p->mAttribute_mResultType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_infixOperatorMap::reader_mResultTypeForKey (const GALGAS_string & inKey,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_infixOperatorMap * p = (const cMapElement_infixOperatorMap *) attributes ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_infixOperatorMap) ;
    result = p->mAttribute_mResultType ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_infixOperatorMap::modifier_setMResultTypeForKey (GALGAS_unifiedTypeMap_2D_proxy inAttributeValue,
                                                             GALGAS_string inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_infixOperatorMap * p = (cMapElement_infixOperatorMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_infixOperatorMap) ;
    p->mAttribute_mResultType = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_infixOperatorMap * GALGAS_infixOperatorMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                           const GALGAS_string & inKey
                                                                                           COMMA_LOCATION_ARGS) {
  cMapElement_infixOperatorMap * result = (cMapElement_infixOperatorMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_infixOperatorMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_infixOperatorMap::cEnumerator_infixOperatorMap (const GALGAS_infixOperatorMap & inEnumeratedObject,
                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorMap_2D_element cEnumerator_infixOperatorMap::current (LOCATION_ARGS) const {
  const cMapElement_infixOperatorMap * p = (const cMapElement_infixOperatorMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_infixOperatorMap) ;
  return GALGAS_infixOperatorMap_2D_element (p->mAttribute_lkey, p->mAttribute_mResultType) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_infixOperatorMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_infixOperatorMap::current_mResultType (LOCATION_ARGS) const {
  const cMapElement_infixOperatorMap * p = (const cMapElement_infixOperatorMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_infixOperatorMap) ;
  return p->mAttribute_mResultType ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @infixOperatorMap type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_infixOperatorMap ("infixOperatorMap",
                                         NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_infixOperatorMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_infixOperatorMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_infixOperatorMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_infixOperatorMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorMap GALGAS_infixOperatorMap::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_infixOperatorMap result ;
  const GALGAS_infixOperatorMap * p = (const GALGAS_infixOperatorMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_infixOperatorMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("infixOperatorMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_infixOperatorIR_infixNoOvf::cEnumAssociatedValues_infixOperatorIR_infixNoOvf (const GALGAS_string & inAssociatedValue0
                                                                                                    COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_infixOperatorIR_infixNoOvf::description (C_String & ioString,
                                                                    const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_infixOperatorIR_infixNoOvf::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_infixOperatorIR_infixNoOvf * ptr = dynamic_cast<const cEnumAssociatedValues_infixOperatorIR_infixNoOvf *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_infixOperatorIR_infixOvf::cEnumAssociatedValues_infixOperatorIR_infixOvf (const GALGAS_string & inAssociatedValue0,
                                                                                                const GALGAS_uint & inAssociatedValue1
                                                                                                COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_infixOperatorIR_infixOvf::description (C_String & ioString,
                                                                  const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_infixOperatorIR_infixOvf::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_infixOperatorIR_infixOvf * ptr = dynamic_cast<const cEnumAssociatedValues_infixOperatorIR_infixOvf *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_infixOperatorIR_infixUnsignedDivide::cEnumAssociatedValues_infixOperatorIR_infixUnsignedDivide (const GALGAS_uint & inAssociatedValue0
                                                                                                                      COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_infixOperatorIR_infixUnsignedDivide::description (C_String & ioString,
                                                                             const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_infixOperatorIR_infixUnsignedDivide::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_infixOperatorIR_infixUnsignedDivide * ptr = dynamic_cast<const cEnumAssociatedValues_infixOperatorIR_infixUnsignedDivide *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_infixOperatorIR_infixModulo::cEnumAssociatedValues_infixOperatorIR_infixModulo (const GALGAS_uint & inAssociatedValue0
                                                                                                      COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_infixOperatorIR_infixModulo::description (C_String & ioString,
                                                                     const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_infixOperatorIR_infixModulo::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_infixOperatorIR_infixModulo * ptr = dynamic_cast<const cEnumAssociatedValues_infixOperatorIR_infixModulo *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorIR::GALGAS_infixOperatorIR (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorIR GALGAS_infixOperatorIR::constructor_infixNoOvf (const GALGAS_string & inAssociatedValue0
                                                                       COMMA_LOCATION_ARGS) {
  GALGAS_infixOperatorIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_infixNoOvf ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_infixOperatorIR_infixNoOvf (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorIR GALGAS_infixOperatorIR::constructor_infixOvf (const GALGAS_string & inAssociatedValue0,
                                                                     const GALGAS_uint & inAssociatedValue1
                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_infixOperatorIR result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid ()) {
    result.mEnum = kEnum_infixOvf ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_infixOperatorIR_infixOvf (inAssociatedValue0, inAssociatedValue1 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorIR GALGAS_infixOperatorIR::constructor_infixUnsignedDivide (const GALGAS_uint & inAssociatedValue0
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_infixOperatorIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_infixUnsignedDivide ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_infixOperatorIR_infixUnsignedDivide (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorIR GALGAS_infixOperatorIR::constructor_infixModulo (const GALGAS_uint & inAssociatedValue0
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_infixOperatorIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_infixModulo ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_infixOperatorIR_infixModulo (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_infixOperatorIR::method_infixNoOvf (GALGAS_string & outAssociatedValue0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_infixNoOvf) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @infixOperatorIR infixNoOvf invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_infixOperatorIR_infixNoOvf * ptr = (const cEnumAssociatedValues_infixOperatorIR_infixNoOvf *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_infixOperatorIR::method_infixOvf (GALGAS_string & outAssociatedValue0,
                                              GALGAS_uint & outAssociatedValue1,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_infixOvf) {
    outAssociatedValue0.drop () ;
    outAssociatedValue1.drop () ;
    C_String s ;
    s << "method @infixOperatorIR infixOvf invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_infixOperatorIR_infixOvf * ptr = (const cEnumAssociatedValues_infixOperatorIR_infixOvf *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
    outAssociatedValue1 = ptr->mAssociatedValue1 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_infixOperatorIR::method_infixUnsignedDivide (GALGAS_uint & outAssociatedValue0,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_infixUnsignedDivide) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @infixOperatorIR infixUnsignedDivide invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_infixOperatorIR_infixUnsignedDivide * ptr = (const cEnumAssociatedValues_infixOperatorIR_infixUnsignedDivide *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_infixOperatorIR::method_infixModulo (GALGAS_uint & outAssociatedValue0,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_infixModulo) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @infixOperatorIR infixModulo invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_infixOperatorIR_infixModulo * ptr = (const cEnumAssociatedValues_infixOperatorIR_infixModulo *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_infixOperatorIR [5] = {
  "(not built)",
  "infixNoOvf",
  "infixOvf",
  "infixUnsignedDivide",
  "infixModulo"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperatorIR::reader_isInfixNoOvf (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_infixNoOvf == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperatorIR::reader_isInfixOvf (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_infixOvf == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperatorIR::reader_isInfixUnsignedDivide (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_infixUnsignedDivide == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_infixOperatorIR::reader_isInfixModulo (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_infixModulo == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_infixOperatorIR::description (C_String & ioString,
                                          const int32_t inIndentation) const {
  ioString << "<enum @infixOperatorIR: " << gEnumNameArrayFor_infixOperatorIR [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_infixOperatorIR::objectCompare (const GALGAS_infixOperatorIR & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                @infixOperatorIR type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_infixOperatorIR ("infixOperatorIR",
                                        NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_infixOperatorIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_infixOperatorIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_infixOperatorIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_infixOperatorIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_infixOperatorIR GALGAS_infixOperatorIR::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_infixOperatorIR result ;
  const GALGAS_infixOperatorIR * p = (const GALGAS_infixOperatorIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_infixOperatorIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("infixOperatorIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperator::GALGAS_prefixOperator (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperator GALGAS_prefixOperator::constructor_notOperator (UNUSED_LOCATION_ARGS) {
  GALGAS_prefixOperator result ;
  result.mEnum = kEnum_notOperator ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperator GALGAS_prefixOperator::constructor_minus (UNUSED_LOCATION_ARGS) {
  GALGAS_prefixOperator result ;
  result.mEnum = kEnum_minus ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperator GALGAS_prefixOperator::constructor_unsignedComplement (UNUSED_LOCATION_ARGS) {
  GALGAS_prefixOperator result ;
  result.mEnum = kEnum_unsignedComplement ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperator GALGAS_prefixOperator::constructor_minusNoOvf (UNUSED_LOCATION_ARGS) {
  GALGAS_prefixOperator result ;
  result.mEnum = kEnum_minusNoOvf ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_prefixOperator [5] = {
  "(not built)",
  "notOperator",
  "minus",
  "unsignedComplement",
  "minusNoOvf"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_prefixOperator::reader_isNotOperator (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_notOperator == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_prefixOperator::reader_isMinus (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_minus == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_prefixOperator::reader_isUnsignedComplement (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_unsignedComplement == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_prefixOperator::reader_isMinusNoOvf (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_minusNoOvf == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_prefixOperator::description (C_String & ioString,
                                         const int32_t /* inIndentation */) const {
  ioString << "<enum @prefixOperator: " << gEnumNameArrayFor_prefixOperator [mEnum] ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_prefixOperator::objectCompare (const GALGAS_prefixOperator & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                @prefixOperator type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_prefixOperator ("prefixOperator",
                                       NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_prefixOperator::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_prefixOperator ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_prefixOperator::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_prefixOperator (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperator GALGAS_prefixOperator::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_prefixOperator result ;
  const GALGAS_prefixOperator * p = (const GALGAS_prefixOperator *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_prefixOperator *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("prefixOperator", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_prefixOperatorMap::cMapElement_prefixOperatorMap (const GALGAS_lstring & inKey,
                                                              const GALGAS_unifiedTypeMap_2D_proxy & in_mResultType
                                                              COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mResultType (in_mResultType) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_prefixOperatorMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mResultType.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_prefixOperatorMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_prefixOperatorMap (mAttribute_lkey, mAttribute_mResultType COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_prefixOperatorMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mResultType" ":" ;
  mAttribute_mResultType.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_prefixOperatorMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_prefixOperatorMap * operand = (cMapElement_prefixOperatorMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mResultType.objectCompare (operand->mAttribute_mResultType) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperatorMap::GALGAS_prefixOperatorMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperatorMap::GALGAS_prefixOperatorMap (const GALGAS_prefixOperatorMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperatorMap & GALGAS_prefixOperatorMap::operator = (const GALGAS_prefixOperatorMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperatorMap GALGAS_prefixOperatorMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_prefixOperatorMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperatorMap GALGAS_prefixOperatorMap::constructor_mapWithMapToOverride (const GALGAS_prefixOperatorMap & inMapToOverride
                                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_prefixOperatorMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperatorMap GALGAS_prefixOperatorMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_prefixOperatorMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_prefixOperatorMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                    const GALGAS_unifiedTypeMap_2D_proxy & inArgument0,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cMapElement_prefixOperatorMap * p = NULL ;
  macroMyNew (p, cMapElement_prefixOperatorMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@prefixOperatorMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_prefixOperatorMap::modifier_insertKey (GALGAS_lstring inKey,
                                                   GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_prefixOperatorMap * p = NULL ;
  macroMyNew (p, cMapElement_prefixOperatorMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "** internal error **" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_prefixOperatorMap_searchKey = "** internal error **" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_prefixOperatorMap::method_searchKey (GALGAS_lstring inKey,
                                                 GALGAS_unifiedTypeMap_2D_proxy & outArgument0,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  const cMapElement_prefixOperatorMap * p = (const cMapElement_prefixOperatorMap *) performSearch (inKey,
                                                                                                     inCompiler,
                                                                                                     kSearchErrorMessage_prefixOperatorMap_searchKey
                                                                                                     COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_prefixOperatorMap) ;
    outArgument0 = p->mAttribute_mResultType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_prefixOperatorMap::reader_mResultTypeForKey (const GALGAS_string & inKey,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_prefixOperatorMap * p = (const cMapElement_prefixOperatorMap *) attributes ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_prefixOperatorMap) ;
    result = p->mAttribute_mResultType ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_prefixOperatorMap::modifier_setMResultTypeForKey (GALGAS_unifiedTypeMap_2D_proxy inAttributeValue,
                                                              GALGAS_string inKey,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_prefixOperatorMap * p = (cMapElement_prefixOperatorMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_prefixOperatorMap) ;
    p->mAttribute_mResultType = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_prefixOperatorMap * GALGAS_prefixOperatorMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                             const GALGAS_string & inKey
                                                                                             COMMA_LOCATION_ARGS) {
  cMapElement_prefixOperatorMap * result = (cMapElement_prefixOperatorMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_prefixOperatorMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_prefixOperatorMap::cEnumerator_prefixOperatorMap (const GALGAS_prefixOperatorMap & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperatorMap_2D_element cEnumerator_prefixOperatorMap::current (LOCATION_ARGS) const {
  const cMapElement_prefixOperatorMap * p = (const cMapElement_prefixOperatorMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_prefixOperatorMap) ;
  return GALGAS_prefixOperatorMap_2D_element (p->mAttribute_lkey, p->mAttribute_mResultType) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_prefixOperatorMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_prefixOperatorMap::current_mResultType (LOCATION_ARGS) const {
  const cMapElement_prefixOperatorMap * p = (const cMapElement_prefixOperatorMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_prefixOperatorMap) ;
  return p->mAttribute_mResultType ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @prefixOperatorMap type                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_prefixOperatorMap ("prefixOperatorMap",
                                          NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_prefixOperatorMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_prefixOperatorMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_prefixOperatorMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_prefixOperatorMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperatorMap GALGAS_prefixOperatorMap::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_prefixOperatorMap result ;
  const GALGAS_prefixOperatorMap * p = (const GALGAS_prefixOperatorMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_prefixOperatorMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("prefixOperatorMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_prefixOperatorIR_prefix::cEnumAssociatedValues_prefixOperatorIR_prefix (const GALGAS_string & inAssociatedValue0
                                                                                              COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_prefixOperatorIR_prefix::description (C_String & ioString,
                                                                 const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_prefixOperatorIR_prefix::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_prefixOperatorIR_prefix * ptr = dynamic_cast<const cEnumAssociatedValues_prefixOperatorIR_prefix *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_prefixOperatorIR_prefixMinusOvf::cEnumAssociatedValues_prefixOperatorIR_prefixMinusOvf (const GALGAS_uint & inAssociatedValue0
                                                                                                              COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_prefixOperatorIR_prefixMinusOvf::description (C_String & ioString,
                                                                         const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_prefixOperatorIR_prefixMinusOvf::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_prefixOperatorIR_prefixMinusOvf * ptr = dynamic_cast<const cEnumAssociatedValues_prefixOperatorIR_prefixMinusOvf *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperatorIR::GALGAS_prefixOperatorIR (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperatorIR GALGAS_prefixOperatorIR::constructor_prefix (const GALGAS_string & inAssociatedValue0
                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_prefixOperatorIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_prefix ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_prefixOperatorIR_prefix (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperatorIR GALGAS_prefixOperatorIR::constructor_prefixMinusOvf (const GALGAS_uint & inAssociatedValue0
                                                                             COMMA_LOCATION_ARGS) {
  GALGAS_prefixOperatorIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_prefixMinusOvf ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_prefixOperatorIR_prefixMinusOvf (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_prefixOperatorIR::method_prefix (GALGAS_string & outAssociatedValue0,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_prefix) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @prefixOperatorIR prefix invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_prefixOperatorIR_prefix * ptr = (const cEnumAssociatedValues_prefixOperatorIR_prefix *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_prefixOperatorIR::method_prefixMinusOvf (GALGAS_uint & outAssociatedValue0,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_prefixMinusOvf) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @prefixOperatorIR prefixMinusOvf invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_prefixOperatorIR_prefixMinusOvf * ptr = (const cEnumAssociatedValues_prefixOperatorIR_prefixMinusOvf *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_prefixOperatorIR [3] = {
  "(not built)",
  "prefix",
  "prefixMinusOvf"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_prefixOperatorIR::reader_isPrefix (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_prefix == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_prefixOperatorIR::reader_isPrefixMinusOvf (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_prefixMinusOvf == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_prefixOperatorIR::description (C_String & ioString,
                                           const int32_t inIndentation) const {
  ioString << "<enum @prefixOperatorIR: " << gEnumNameArrayFor_prefixOperatorIR [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_prefixOperatorIR::objectCompare (const GALGAS_prefixOperatorIR & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @prefixOperatorIR type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_prefixOperatorIR ("prefixOperatorIR",
                                         NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_prefixOperatorIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_prefixOperatorIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_prefixOperatorIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_prefixOperatorIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_prefixOperatorIR GALGAS_prefixOperatorIR::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_prefixOperatorIR result ;
  const GALGAS_prefixOperatorIR * p = (const GALGAS_prefixOperatorIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_prefixOperatorIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("prefixOperatorIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_operandIR_literalInteger::cEnumAssociatedValues_operandIR_literalInteger (const GALGAS_bigint & inAssociatedValue0
                                                                                                COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_operandIR_literalInteger::description (C_String & ioString,
                                                                  const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_operandIR_literalInteger::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_operandIR_literalInteger * ptr = dynamic_cast<const cEnumAssociatedValues_operandIR_literalInteger *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_operandIR_llvmLocalObject::cEnumAssociatedValues_operandIR_llvmLocalObject (const GALGAS_string & inAssociatedValue0
                                                                                                  COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_operandIR_llvmLocalObject::description (C_String & ioString,
                                                                   const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_operandIR_llvmLocalObject::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_operandIR_llvmLocalObject * ptr = dynamic_cast<const cEnumAssociatedValues_operandIR_llvmLocalObject *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_operandIR_llvmGlobalObject::cEnumAssociatedValues_operandIR_llvmGlobalObject (const GALGAS_string & inAssociatedValue0
                                                                                                    COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_operandIR_llvmGlobalObject::description (C_String & ioString,
                                                                    const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_operandIR_llvmGlobalObject::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_operandIR_llvmGlobalObject * ptr = dynamic_cast<const cEnumAssociatedValues_operandIR_llvmGlobalObject *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR::GALGAS_operandIR (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR GALGAS_operandIR::constructor_literalInteger (const GALGAS_bigint & inAssociatedValue0
                                                               COMMA_LOCATION_ARGS) {
  GALGAS_operandIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_literalInteger ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_operandIR_literalInteger (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR GALGAS_operandIR::constructor_llvmLocalObject (const GALGAS_string & inAssociatedValue0
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_operandIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_llvmLocalObject ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_operandIR_llvmLocalObject (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR GALGAS_operandIR::constructor_llvmGlobalObject (const GALGAS_string & inAssociatedValue0
                                                                 COMMA_LOCATION_ARGS) {
  GALGAS_operandIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_llvmGlobalObject ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_operandIR_llvmGlobalObject (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_operandIR::method_literalInteger (GALGAS_bigint & outAssociatedValue0,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_literalInteger) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @operandIR literalInteger invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_operandIR_literalInteger * ptr = (const cEnumAssociatedValues_operandIR_literalInteger *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_operandIR::method_llvmLocalObject (GALGAS_string & outAssociatedValue0,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_llvmLocalObject) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @operandIR llvmLocalObject invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_operandIR_llvmLocalObject * ptr = (const cEnumAssociatedValues_operandIR_llvmLocalObject *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_operandIR::method_llvmGlobalObject (GALGAS_string & outAssociatedValue0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_llvmGlobalObject) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @operandIR llvmGlobalObject invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_operandIR_llvmGlobalObject * ptr = (const cEnumAssociatedValues_operandIR_llvmGlobalObject *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_operandIR [4] = {
  "(not built)",
  "literalInteger",
  "llvmLocalObject",
  "llvmGlobalObject"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_operandIR::reader_isLiteralInteger (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_literalInteger == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_operandIR::reader_isLlvmLocalObject (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_llvmLocalObject == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_operandIR::reader_isLlvmGlobalObject (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_llvmGlobalObject == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_operandIR::description (C_String & ioString,
                                    const int32_t inIndentation) const {
  ioString << "<enum @operandIR: " << gEnumNameArrayFor_operandIR [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_operandIR::objectCompare (const GALGAS_operandIR & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                   @operandIR type                                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_operandIR ("operandIR",
                                  NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_operandIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_operandIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_operandIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_operandIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR GALGAS_operandIR::extractObject (const GALGAS_object & inObject,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  GALGAS_operandIR result ;
  const GALGAS_operandIR * p = (const GALGAS_operandIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_operandIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("operandIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_incDecKind::GALGAS_incDecKind (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_incDecKind GALGAS_incDecKind::constructor_incWithOverflowCheck (UNUSED_LOCATION_ARGS) {
  GALGAS_incDecKind result ;
  result.mEnum = kEnum_incWithOverflowCheck ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_incDecKind GALGAS_incDecKind::constructor_decWithOverflowCheck (UNUSED_LOCATION_ARGS) {
  GALGAS_incDecKind result ;
  result.mEnum = kEnum_decWithOverflowCheck ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_incDecKind GALGAS_incDecKind::constructor_incNoOverflowCheck (UNUSED_LOCATION_ARGS) {
  GALGAS_incDecKind result ;
  result.mEnum = kEnum_incNoOverflowCheck ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_incDecKind GALGAS_incDecKind::constructor_decNoOverflowCheck (UNUSED_LOCATION_ARGS) {
  GALGAS_incDecKind result ;
  result.mEnum = kEnum_decNoOverflowCheck ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_incDecKind [5] = {
  "(not built)",
  "incWithOverflowCheck",
  "decWithOverflowCheck",
  "incNoOverflowCheck",
  "decNoOverflowCheck"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_incDecKind::reader_isIncWithOverflowCheck (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_incWithOverflowCheck == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_incDecKind::reader_isDecWithOverflowCheck (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_decWithOverflowCheck == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_incDecKind::reader_isIncNoOverflowCheck (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_incNoOverflowCheck == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_incDecKind::reader_isDecNoOverflowCheck (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_decNoOverflowCheck == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_incDecKind::description (C_String & ioString,
                                     const int32_t /* inIndentation */) const {
  ioString << "<enum @incDecKind: " << gEnumNameArrayFor_incDecKind [mEnum] ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_incDecKind::objectCompare (const GALGAS_incDecKind & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                  @incDecKind type                                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_incDecKind ("incDecKind",
                                   NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_incDecKind::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_incDecKind ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_incDecKind::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_incDecKind (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_incDecKind GALGAS_incDecKind::extractObject (const GALGAS_object & inObject,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  GALGAS_incDecKind result ;
  const GALGAS_incDecKind * p = (const GALGAS_incDecKind *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_incDecKind *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("incDecKind", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operatorAssignKind::GALGAS_operatorAssignKind (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operatorAssignKind GALGAS_operatorAssignKind::constructor_bitWiseOrAssign (UNUSED_LOCATION_ARGS) {
  GALGAS_operatorAssignKind result ;
  result.mEnum = kEnum_bitWiseOrAssign ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operatorAssignKind GALGAS_operatorAssignKind::constructor_bitWiseAndAssign (UNUSED_LOCATION_ARGS) {
  GALGAS_operatorAssignKind result ;
  result.mEnum = kEnum_bitWiseAndAssign ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operatorAssignKind GALGAS_operatorAssignKind::constructor_bitWiseXorAssign (UNUSED_LOCATION_ARGS) {
  GALGAS_operatorAssignKind result ;
  result.mEnum = kEnum_bitWiseXorAssign ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_operatorAssignKind [4] = {
  "(not built)",
  "bitWiseOrAssign",
  "bitWiseAndAssign",
  "bitWiseXorAssign"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_operatorAssignKind::reader_isBitWiseOrAssign (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_bitWiseOrAssign == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_operatorAssignKind::reader_isBitWiseAndAssign (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_bitWiseAndAssign == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_operatorAssignKind::reader_isBitWiseXorAssign (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_bitWiseXorAssign == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_operatorAssignKind::description (C_String & ioString,
                                             const int32_t /* inIndentation */) const {
  ioString << "<enum @operatorAssignKind: " << gEnumNameArrayFor_operatorAssignKind [mEnum] ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_operatorAssignKind::objectCompare (const GALGAS_operatorAssignKind & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              @operatorAssignKind type                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_operatorAssignKind ("operatorAssignKind",
                                           NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_operatorAssignKind::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_operatorAssignKind ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_operatorAssignKind::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_operatorAssignKind (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operatorAssignKind GALGAS_operatorAssignKind::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_operatorAssignKind result ;
  const GALGAS_operatorAssignKind * p = (const GALGAS_operatorAssignKind *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_operatorAssignKind *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("operatorAssignKind", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             Class for element of '@procEffectiveParameterListAST' list                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_procEffectiveParameterListAST : public cCollectionElement {
  public : GALGAS_procEffectiveParameterListAST_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_procEffectiveParameterListAST (const GALGAS_procEffectiveParameterPassingModeAST & in_mEffectiveParameterKind,
                                                             const GALGAS_lstring & in_mSelector
                                                             COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_procEffectiveParameterListAST::cCollectionElement_procEffectiveParameterListAST (const GALGAS_procEffectiveParameterPassingModeAST & in_mEffectiveParameterKind,
                                                                                                    const GALGAS_lstring & in_mSelector
                                                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mEffectiveParameterKind, in_mSelector) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_procEffectiveParameterListAST::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_procEffectiveParameterListAST::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_procEffectiveParameterListAST (mObject.mAttribute_mEffectiveParameterKind, mObject.mAttribute_mSelector COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_procEffectiveParameterListAST::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mEffectiveParameterKind" ":" ;
  mObject.mAttribute_mEffectiveParameterKind.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSelector" ":" ;
  mObject.mAttribute_mSelector.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_procEffectiveParameterListAST::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_procEffectiveParameterListAST * operand = (cCollectionElement_procEffectiveParameterListAST *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_procEffectiveParameterListAST) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterListAST::GALGAS_procEffectiveParameterListAST (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterListAST::GALGAS_procEffectiveParameterListAST (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterListAST GALGAS_procEffectiveParameterListAST::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_procEffectiveParameterListAST result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterListAST GALGAS_procEffectiveParameterListAST::constructor_listWithValue (const GALGAS_procEffectiveParameterPassingModeAST & inOperand0,
                                                                                                      const GALGAS_lstring & inOperand1
                                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_procEffectiveParameterListAST result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_procEffectiveParameterListAST::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterListAST::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                      const GALGAS_procEffectiveParameterPassingModeAST & in_mEffectiveParameterKind,
                                                                      const GALGAS_lstring & in_mSelector
                                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement_procEffectiveParameterListAST * p = NULL ;
  macroMyNew (p, cCollectionElement_procEffectiveParameterListAST (in_mEffectiveParameterKind,
                                                                   in_mSelector COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterListAST::addAssign_operation (const GALGAS_procEffectiveParameterPassingModeAST & inOperand0,
                                                                const GALGAS_lstring & inOperand1
                                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_procEffectiveParameterListAST (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterListAST::modifier_insertAtIndex (const GALGAS_procEffectiveParameterPassingModeAST inOperand0,
                                                                   const GALGAS_lstring inOperand1,
                                                                   const GALGAS_uint inInsertionIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_procEffectiveParameterListAST (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterListAST::modifier_removeAtIndex (GALGAS_procEffectiveParameterPassingModeAST & outOperand0,
                                                                   GALGAS_lstring & outOperand1,
                                                                   const GALGAS_uint inRemoveIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_procEffectiveParameterListAST * p = (cCollectionElement_procEffectiveParameterListAST *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_procEffectiveParameterListAST) ;
      outOperand0 = p->mObject.mAttribute_mEffectiveParameterKind ;
      outOperand1 = p->mObject.mAttribute_mSelector ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterListAST::modifier_popFirst (GALGAS_procEffectiveParameterPassingModeAST & outOperand0,
                                                              GALGAS_lstring & outOperand1,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procEffectiveParameterListAST * p = (cCollectionElement_procEffectiveParameterListAST *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procEffectiveParameterListAST) ;
    outOperand0 = p->mObject.mAttribute_mEffectiveParameterKind ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterListAST::modifier_popLast (GALGAS_procEffectiveParameterPassingModeAST & outOperand0,
                                                             GALGAS_lstring & outOperand1,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procEffectiveParameterListAST * p = (cCollectionElement_procEffectiveParameterListAST *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procEffectiveParameterListAST) ;
    outOperand0 = p->mObject.mAttribute_mEffectiveParameterKind ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterListAST::method_first (GALGAS_procEffectiveParameterPassingModeAST & outOperand0,
                                                         GALGAS_lstring & outOperand1,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procEffectiveParameterListAST * p = (cCollectionElement_procEffectiveParameterListAST *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procEffectiveParameterListAST) ;
    outOperand0 = p->mObject.mAttribute_mEffectiveParameterKind ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterListAST::method_last (GALGAS_procEffectiveParameterPassingModeAST & outOperand0,
                                                        GALGAS_lstring & outOperand1,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procEffectiveParameterListAST * p = (cCollectionElement_procEffectiveParameterListAST *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procEffectiveParameterListAST) ;
    outOperand0 = p->mObject.mAttribute_mEffectiveParameterKind ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterListAST GALGAS_procEffectiveParameterListAST::operator_concat (const GALGAS_procEffectiveParameterListAST & inOperand
                                                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_procEffectiveParameterListAST result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterListAST GALGAS_procEffectiveParameterListAST::add_operation (const GALGAS_procEffectiveParameterListAST & inOperand,
                                                                                          C_Compiler * /* inCompiler */
                                                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_procEffectiveParameterListAST result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterListAST GALGAS_procEffectiveParameterListAST::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                                    C_Compiler * inCompiler
                                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_procEffectiveParameterListAST result = GALGAS_procEffectiveParameterListAST::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterListAST GALGAS_procEffectiveParameterListAST::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                                    C_Compiler * inCompiler
                                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_procEffectiveParameterListAST result = GALGAS_procEffectiveParameterListAST::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterListAST::dotAssign_operation (const GALGAS_procEffectiveParameterListAST inOperand
                                                                COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeAST GALGAS_procEffectiveParameterListAST::reader_mEffectiveParameterKindAtIndex (const GALGAS_uint & inIndex,
                                                                                                                         C_Compiler * inCompiler
                                                                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procEffectiveParameterListAST * p = (cCollectionElement_procEffectiveParameterListAST *) attributes.ptr () ;
  GALGAS_procEffectiveParameterPassingModeAST result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procEffectiveParameterListAST) ;
    result = p->mObject.mAttribute_mEffectiveParameterKind ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring GALGAS_procEffectiveParameterListAST::reader_mSelectorAtIndex (const GALGAS_uint & inIndex,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procEffectiveParameterListAST * p = (cCollectionElement_procEffectiveParameterListAST *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procEffectiveParameterListAST) ;
    result = p->mObject.mAttribute_mSelector ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_procEffectiveParameterListAST::cEnumerator_procEffectiveParameterListAST (const GALGAS_procEffectiveParameterListAST & inEnumeratedObject,
                                                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterListAST_2D_element cEnumerator_procEffectiveParameterListAST::current (LOCATION_ARGS) const {
  const cCollectionElement_procEffectiveParameterListAST * p = (const cCollectionElement_procEffectiveParameterListAST *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procEffectiveParameterListAST) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeAST cEnumerator_procEffectiveParameterListAST::current_mEffectiveParameterKind (LOCATION_ARGS) const {
  const cCollectionElement_procEffectiveParameterListAST * p = (const cCollectionElement_procEffectiveParameterListAST *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procEffectiveParameterListAST) ;
  return p->mObject.mAttribute_mEffectiveParameterKind ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_procEffectiveParameterListAST::current_mSelector (LOCATION_ARGS) const {
  const cCollectionElement_procEffectiveParameterListAST * p = (const cCollectionElement_procEffectiveParameterListAST *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procEffectiveParameterListAST) ;
  return p->mObject.mAttribute_mSelector ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         @procEffectiveParameterListAST type                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_procEffectiveParameterListAST ("procEffectiveParameterListAST",
                                                      NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_procEffectiveParameterListAST::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_procEffectiveParameterListAST ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_procEffectiveParameterListAST::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_procEffectiveParameterListAST (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterListAST GALGAS_procEffectiveParameterListAST::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_procEffectiveParameterListAST result ;
  const GALGAS_procEffectiveParameterListAST * p = (const GALGAS_procEffectiveParameterListAST *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_procEffectiveParameterListAST *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("procEffectiveParameterListAST", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               Class for element of '@procEffectiveParameterList' list                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_procEffectiveParameterList : public cCollectionElement {
  public : GALGAS_procEffectiveParameterList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_procEffectiveParameterList (const GALGAS_procEffectiveParameterPassingModeAST & in_mEffectiveParameterPassingMode,
                                                          const GALGAS_lstring & in_mSelector,
                                                          const GALGAS_unifiedTypeMap_2D_proxy & in_mParameterType
                                                          COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_procEffectiveParameterList::cCollectionElement_procEffectiveParameterList (const GALGAS_procEffectiveParameterPassingModeAST & in_mEffectiveParameterPassingMode,
                                                                                              const GALGAS_lstring & in_mSelector,
                                                                                              const GALGAS_unifiedTypeMap_2D_proxy & in_mParameterType
                                                                                              COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mEffectiveParameterPassingMode, in_mSelector, in_mParameterType) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_procEffectiveParameterList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_procEffectiveParameterList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_procEffectiveParameterList (mObject.mAttribute_mEffectiveParameterPassingMode, mObject.mAttribute_mSelector, mObject.mAttribute_mParameterType COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_procEffectiveParameterList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mEffectiveParameterPassingMode" ":" ;
  mObject.mAttribute_mEffectiveParameterPassingMode.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSelector" ":" ;
  mObject.mAttribute_mSelector.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mParameterType" ":" ;
  mObject.mAttribute_mParameterType.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_procEffectiveParameterList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_procEffectiveParameterList * operand = (cCollectionElement_procEffectiveParameterList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_procEffectiveParameterList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterList::GALGAS_procEffectiveParameterList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterList::GALGAS_procEffectiveParameterList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterList GALGAS_procEffectiveParameterList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_procEffectiveParameterList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterList GALGAS_procEffectiveParameterList::constructor_listWithValue (const GALGAS_procEffectiveParameterPassingModeAST & inOperand0,
                                                                                                const GALGAS_lstring & inOperand1,
                                                                                                const GALGAS_unifiedTypeMap_2D_proxy & inOperand2
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_procEffectiveParameterList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_procEffectiveParameterList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                   const GALGAS_procEffectiveParameterPassingModeAST & in_mEffectiveParameterPassingMode,
                                                                   const GALGAS_lstring & in_mSelector,
                                                                   const GALGAS_unifiedTypeMap_2D_proxy & in_mParameterType
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement_procEffectiveParameterList * p = NULL ;
  macroMyNew (p, cCollectionElement_procEffectiveParameterList (in_mEffectiveParameterPassingMode,
                                                                in_mSelector,
                                                                in_mParameterType COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterList::addAssign_operation (const GALGAS_procEffectiveParameterPassingModeAST & inOperand0,
                                                             const GALGAS_lstring & inOperand1,
                                                             const GALGAS_unifiedTypeMap_2D_proxy & inOperand2
                                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_procEffectiveParameterList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterList::modifier_insertAtIndex (const GALGAS_procEffectiveParameterPassingModeAST inOperand0,
                                                                const GALGAS_lstring inOperand1,
                                                                const GALGAS_unifiedTypeMap_2D_proxy inOperand2,
                                                                const GALGAS_uint inInsertionIndex,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_procEffectiveParameterList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterList::modifier_removeAtIndex (GALGAS_procEffectiveParameterPassingModeAST & outOperand0,
                                                                GALGAS_lstring & outOperand1,
                                                                GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                                                const GALGAS_uint inRemoveIndex,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_procEffectiveParameterList * p = (cCollectionElement_procEffectiveParameterList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_procEffectiveParameterList) ;
      outOperand0 = p->mObject.mAttribute_mEffectiveParameterPassingMode ;
      outOperand1 = p->mObject.mAttribute_mSelector ;
      outOperand2 = p->mObject.mAttribute_mParameterType ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterList::modifier_popFirst (GALGAS_procEffectiveParameterPassingModeAST & outOperand0,
                                                           GALGAS_lstring & outOperand1,
                                                           GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procEffectiveParameterList * p = (cCollectionElement_procEffectiveParameterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procEffectiveParameterList) ;
    outOperand0 = p->mObject.mAttribute_mEffectiveParameterPassingMode ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
    outOperand2 = p->mObject.mAttribute_mParameterType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterList::modifier_popLast (GALGAS_procEffectiveParameterPassingModeAST & outOperand0,
                                                          GALGAS_lstring & outOperand1,
                                                          GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procEffectiveParameterList * p = (cCollectionElement_procEffectiveParameterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procEffectiveParameterList) ;
    outOperand0 = p->mObject.mAttribute_mEffectiveParameterPassingMode ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
    outOperand2 = p->mObject.mAttribute_mParameterType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterList::method_first (GALGAS_procEffectiveParameterPassingModeAST & outOperand0,
                                                      GALGAS_lstring & outOperand1,
                                                      GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procEffectiveParameterList * p = (cCollectionElement_procEffectiveParameterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procEffectiveParameterList) ;
    outOperand0 = p->mObject.mAttribute_mEffectiveParameterPassingMode ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
    outOperand2 = p->mObject.mAttribute_mParameterType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterList::method_last (GALGAS_procEffectiveParameterPassingModeAST & outOperand0,
                                                     GALGAS_lstring & outOperand1,
                                                     GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procEffectiveParameterList * p = (cCollectionElement_procEffectiveParameterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procEffectiveParameterList) ;
    outOperand0 = p->mObject.mAttribute_mEffectiveParameterPassingMode ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
    outOperand2 = p->mObject.mAttribute_mParameterType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterList GALGAS_procEffectiveParameterList::operator_concat (const GALGAS_procEffectiveParameterList & inOperand
                                                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_procEffectiveParameterList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterList GALGAS_procEffectiveParameterList::add_operation (const GALGAS_procEffectiveParameterList & inOperand,
                                                                                    C_Compiler * /* inCompiler */
                                                                                    COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_procEffectiveParameterList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterList GALGAS_procEffectiveParameterList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_procEffectiveParameterList result = GALGAS_procEffectiveParameterList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterList GALGAS_procEffectiveParameterList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_procEffectiveParameterList result = GALGAS_procEffectiveParameterList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterList::dotAssign_operation (const GALGAS_procEffectiveParameterList inOperand
                                                             COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeAST GALGAS_procEffectiveParameterList::reader_mEffectiveParameterPassingModeAtIndex (const GALGAS_uint & inIndex,
                                                                                                                             C_Compiler * inCompiler
                                                                                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procEffectiveParameterList * p = (cCollectionElement_procEffectiveParameterList *) attributes.ptr () ;
  GALGAS_procEffectiveParameterPassingModeAST result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procEffectiveParameterList) ;
    result = p->mObject.mAttribute_mEffectiveParameterPassingMode ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring GALGAS_procEffectiveParameterList::reader_mSelectorAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procEffectiveParameterList * p = (cCollectionElement_procEffectiveParameterList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procEffectiveParameterList) ;
    result = p->mObject.mAttribute_mSelector ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_procEffectiveParameterList::reader_mParameterTypeAtIndex (const GALGAS_uint & inIndex,
                                                                                                C_Compiler * inCompiler
                                                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procEffectiveParameterList * p = (cCollectionElement_procEffectiveParameterList *) attributes.ptr () ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procEffectiveParameterList) ;
    result = p->mObject.mAttribute_mParameterType ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_procEffectiveParameterList::cEnumerator_procEffectiveParameterList (const GALGAS_procEffectiveParameterList & inEnumeratedObject,
                                                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterList_2D_element cEnumerator_procEffectiveParameterList::current (LOCATION_ARGS) const {
  const cCollectionElement_procEffectiveParameterList * p = (const cCollectionElement_procEffectiveParameterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procEffectiveParameterList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeAST cEnumerator_procEffectiveParameterList::current_mEffectiveParameterPassingMode (LOCATION_ARGS) const {
  const cCollectionElement_procEffectiveParameterList * p = (const cCollectionElement_procEffectiveParameterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procEffectiveParameterList) ;
  return p->mObject.mAttribute_mEffectiveParameterPassingMode ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_procEffectiveParameterList::current_mSelector (LOCATION_ARGS) const {
  const cCollectionElement_procEffectiveParameterList * p = (const cCollectionElement_procEffectiveParameterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procEffectiveParameterList) ;
  return p->mObject.mAttribute_mSelector ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_procEffectiveParameterList::current_mParameterType (LOCATION_ARGS) const {
  const cCollectionElement_procEffectiveParameterList * p = (const cCollectionElement_procEffectiveParameterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procEffectiveParameterList) ;
  return p->mObject.mAttribute_mParameterType ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          @procEffectiveParameterList type                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_procEffectiveParameterList ("procEffectiveParameterList",
                                                   NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_procEffectiveParameterList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_procEffectiveParameterList ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_procEffectiveParameterList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_procEffectiveParameterList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterList GALGAS_procEffectiveParameterList::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_procEffectiveParameterList result ;
  const GALGAS_procEffectiveParameterList * p = (const GALGAS_procEffectiveParameterList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_procEffectiveParameterList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("procEffectiveParameterList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeIR::GALGAS_procEffectiveParameterPassingModeIR (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeIR GALGAS_procEffectiveParameterPassingModeIR::constructor_input (UNUSED_LOCATION_ARGS) {
  GALGAS_procEffectiveParameterPassingModeIR result ;
  result.mEnum = kEnum_input ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeIR GALGAS_procEffectiveParameterPassingModeIR::constructor_output (UNUSED_LOCATION_ARGS) {
  GALGAS_procEffectiveParameterPassingModeIR result ;
  result.mEnum = kEnum_output ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeIR GALGAS_procEffectiveParameterPassingModeIR::constructor_outputInput (UNUSED_LOCATION_ARGS) {
  GALGAS_procEffectiveParameterPassingModeIR result ;
  result.mEnum = kEnum_outputInput ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_procEffectiveParameterPassingModeIR [4] = {
  "(not built)",
  "input",
  "output",
  "outputInput"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procEffectiveParameterPassingModeIR::reader_isInput (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_input == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procEffectiveParameterPassingModeIR::reader_isOutput (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_output == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procEffectiveParameterPassingModeIR::reader_isOutputInput (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_outputInput == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterPassingModeIR::description (C_String & ioString,
                                                              const int32_t /* inIndentation */) const {
  ioString << "<enum @procEffectiveParameterPassingModeIR: " << gEnumNameArrayFor_procEffectiveParameterPassingModeIR [mEnum] ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_procEffectiveParameterPassingModeIR::objectCompare (const GALGAS_procEffectiveParameterPassingModeIR & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      @procEffectiveParameterPassingModeIR type                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_procEffectiveParameterPassingModeIR ("procEffectiveParameterPassingModeIR",
                                                            NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_procEffectiveParameterPassingModeIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_procEffectiveParameterPassingModeIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_procEffectiveParameterPassingModeIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_procEffectiveParameterPassingModeIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeIR GALGAS_procEffectiveParameterPassingModeIR::extractObject (const GALGAS_object & inObject,
                                                                                                      C_Compiler * inCompiler
                                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_procEffectiveParameterPassingModeIR result ;
  const GALGAS_procEffectiveParameterPassingModeIR * p = (const GALGAS_procEffectiveParameterPassingModeIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_procEffectiveParameterPassingModeIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("procEffectiveParameterPassingModeIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            Class for element of '@procCallEffectiveParameterListIR' list                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_procCallEffectiveParameterListIR : public cCollectionElement {
  public : GALGAS_procCallEffectiveParameterListIR_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_procCallEffectiveParameterListIR (const GALGAS_procEffectiveParameterPassingModeIR & in_mEffectiveParameterPassingMode,
                                                                const GALGAS_lstring & in_mSelector,
                                                                const GALGAS_unifiedTypeMap_2D_proxy & in_mParameterType,
                                                                const GALGAS_operandIR & in_mParameter
                                                                COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_procCallEffectiveParameterListIR::cCollectionElement_procCallEffectiveParameterListIR (const GALGAS_procEffectiveParameterPassingModeIR & in_mEffectiveParameterPassingMode,
                                                                                                          const GALGAS_lstring & in_mSelector,
                                                                                                          const GALGAS_unifiedTypeMap_2D_proxy & in_mParameterType,
                                                                                                          const GALGAS_operandIR & in_mParameter
                                                                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mEffectiveParameterPassingMode, in_mSelector, in_mParameterType, in_mParameter) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_procCallEffectiveParameterListIR::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_procCallEffectiveParameterListIR::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_procCallEffectiveParameterListIR (mObject.mAttribute_mEffectiveParameterPassingMode, mObject.mAttribute_mSelector, mObject.mAttribute_mParameterType, mObject.mAttribute_mParameter COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_procCallEffectiveParameterListIR::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mEffectiveParameterPassingMode" ":" ;
  mObject.mAttribute_mEffectiveParameterPassingMode.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSelector" ":" ;
  mObject.mAttribute_mSelector.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mParameterType" ":" ;
  mObject.mAttribute_mParameterType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mParameter" ":" ;
  mObject.mAttribute_mParameter.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_procCallEffectiveParameterListIR::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_procCallEffectiveParameterListIR * operand = (cCollectionElement_procCallEffectiveParameterListIR *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_procCallEffectiveParameterListIR) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procCallEffectiveParameterListIR::GALGAS_procCallEffectiveParameterListIR (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procCallEffectiveParameterListIR::GALGAS_procCallEffectiveParameterListIR (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procCallEffectiveParameterListIR GALGAS_procCallEffectiveParameterListIR::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_procCallEffectiveParameterListIR result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procCallEffectiveParameterListIR GALGAS_procCallEffectiveParameterListIR::constructor_listWithValue (const GALGAS_procEffectiveParameterPassingModeIR & inOperand0,
                                                                                                            const GALGAS_lstring & inOperand1,
                                                                                                            const GALGAS_unifiedTypeMap_2D_proxy & inOperand2,
                                                                                                            const GALGAS_operandIR & inOperand3
                                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_procCallEffectiveParameterListIR result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_procCallEffectiveParameterListIR::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procCallEffectiveParameterListIR::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                         const GALGAS_procEffectiveParameterPassingModeIR & in_mEffectiveParameterPassingMode,
                                                                         const GALGAS_lstring & in_mSelector,
                                                                         const GALGAS_unifiedTypeMap_2D_proxy & in_mParameterType,
                                                                         const GALGAS_operandIR & in_mParameter
                                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement_procCallEffectiveParameterListIR * p = NULL ;
  macroMyNew (p, cCollectionElement_procCallEffectiveParameterListIR (in_mEffectiveParameterPassingMode,
                                                                      in_mSelector,
                                                                      in_mParameterType,
                                                                      in_mParameter COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procCallEffectiveParameterListIR::addAssign_operation (const GALGAS_procEffectiveParameterPassingModeIR & inOperand0,
                                                                   const GALGAS_lstring & inOperand1,
                                                                   const GALGAS_unifiedTypeMap_2D_proxy & inOperand2,
                                                                   const GALGAS_operandIR & inOperand3
                                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_procCallEffectiveParameterListIR (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procCallEffectiveParameterListIR::modifier_insertAtIndex (const GALGAS_procEffectiveParameterPassingModeIR inOperand0,
                                                                      const GALGAS_lstring inOperand1,
                                                                      const GALGAS_unifiedTypeMap_2D_proxy inOperand2,
                                                                      const GALGAS_operandIR inOperand3,
                                                                      const GALGAS_uint inInsertionIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_procCallEffectiveParameterListIR (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procCallEffectiveParameterListIR::modifier_removeAtIndex (GALGAS_procEffectiveParameterPassingModeIR & outOperand0,
                                                                      GALGAS_lstring & outOperand1,
                                                                      GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                                                      GALGAS_operandIR & outOperand3,
                                                                      const GALGAS_uint inRemoveIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_procCallEffectiveParameterListIR * p = (cCollectionElement_procCallEffectiveParameterListIR *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
      outOperand3.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
      outOperand0 = p->mObject.mAttribute_mEffectiveParameterPassingMode ;
      outOperand1 = p->mObject.mAttribute_mSelector ;
      outOperand2 = p->mObject.mAttribute_mParameterType ;
      outOperand3 = p->mObject.mAttribute_mParameter ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procCallEffectiveParameterListIR::modifier_popFirst (GALGAS_procEffectiveParameterPassingModeIR & outOperand0,
                                                                 GALGAS_lstring & outOperand1,
                                                                 GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                                                 GALGAS_operandIR & outOperand3,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procCallEffectiveParameterListIR * p = (cCollectionElement_procCallEffectiveParameterListIR *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
    outOperand0 = p->mObject.mAttribute_mEffectiveParameterPassingMode ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
    outOperand2 = p->mObject.mAttribute_mParameterType ;
    outOperand3 = p->mObject.mAttribute_mParameter ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procCallEffectiveParameterListIR::modifier_popLast (GALGAS_procEffectiveParameterPassingModeIR & outOperand0,
                                                                GALGAS_lstring & outOperand1,
                                                                GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                                                GALGAS_operandIR & outOperand3,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procCallEffectiveParameterListIR * p = (cCollectionElement_procCallEffectiveParameterListIR *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
    outOperand0 = p->mObject.mAttribute_mEffectiveParameterPassingMode ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
    outOperand2 = p->mObject.mAttribute_mParameterType ;
    outOperand3 = p->mObject.mAttribute_mParameter ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procCallEffectiveParameterListIR::method_first (GALGAS_procEffectiveParameterPassingModeIR & outOperand0,
                                                            GALGAS_lstring & outOperand1,
                                                            GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                                            GALGAS_operandIR & outOperand3,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procCallEffectiveParameterListIR * p = (cCollectionElement_procCallEffectiveParameterListIR *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
    outOperand0 = p->mObject.mAttribute_mEffectiveParameterPassingMode ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
    outOperand2 = p->mObject.mAttribute_mParameterType ;
    outOperand3 = p->mObject.mAttribute_mParameter ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procCallEffectiveParameterListIR::method_last (GALGAS_procEffectiveParameterPassingModeIR & outOperand0,
                                                           GALGAS_lstring & outOperand1,
                                                           GALGAS_unifiedTypeMap_2D_proxy & outOperand2,
                                                           GALGAS_operandIR & outOperand3,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_procCallEffectiveParameterListIR * p = (cCollectionElement_procCallEffectiveParameterListIR *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
    outOperand0 = p->mObject.mAttribute_mEffectiveParameterPassingMode ;
    outOperand1 = p->mObject.mAttribute_mSelector ;
    outOperand2 = p->mObject.mAttribute_mParameterType ;
    outOperand3 = p->mObject.mAttribute_mParameter ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procCallEffectiveParameterListIR GALGAS_procCallEffectiveParameterListIR::operator_concat (const GALGAS_procCallEffectiveParameterListIR & inOperand
                                                                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_procCallEffectiveParameterListIR result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procCallEffectiveParameterListIR GALGAS_procCallEffectiveParameterListIR::add_operation (const GALGAS_procCallEffectiveParameterListIR & inOperand,
                                                                                                C_Compiler * /* inCompiler */
                                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_procCallEffectiveParameterListIR result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procCallEffectiveParameterListIR GALGAS_procCallEffectiveParameterListIR::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_procCallEffectiveParameterListIR result = GALGAS_procCallEffectiveParameterListIR::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procCallEffectiveParameterListIR GALGAS_procCallEffectiveParameterListIR::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_procCallEffectiveParameterListIR result = GALGAS_procCallEffectiveParameterListIR::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procCallEffectiveParameterListIR::dotAssign_operation (const GALGAS_procCallEffectiveParameterListIR inOperand
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeIR GALGAS_procCallEffectiveParameterListIR::reader_mEffectiveParameterPassingModeAtIndex (const GALGAS_uint & inIndex,
                                                                                                                                  C_Compiler * inCompiler
                                                                                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procCallEffectiveParameterListIR * p = (cCollectionElement_procCallEffectiveParameterListIR *) attributes.ptr () ;
  GALGAS_procEffectiveParameterPassingModeIR result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
    result = p->mObject.mAttribute_mEffectiveParameterPassingMode ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring GALGAS_procCallEffectiveParameterListIR::reader_mSelectorAtIndex (const GALGAS_uint & inIndex,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procCallEffectiveParameterListIR * p = (cCollectionElement_procCallEffectiveParameterListIR *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
    result = p->mObject.mAttribute_mSelector ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_procCallEffectiveParameterListIR::reader_mParameterTypeAtIndex (const GALGAS_uint & inIndex,
                                                                                                      C_Compiler * inCompiler
                                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procCallEffectiveParameterListIR * p = (cCollectionElement_procCallEffectiveParameterListIR *) attributes.ptr () ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
    result = p->mObject.mAttribute_mParameterType ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR GALGAS_procCallEffectiveParameterListIR::reader_mParameterAtIndex (const GALGAS_uint & inIndex,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_procCallEffectiveParameterListIR * p = (cCollectionElement_procCallEffectiveParameterListIR *) attributes.ptr () ;
  GALGAS_operandIR result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
    result = p->mObject.mAttribute_mParameter ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_procCallEffectiveParameterListIR::cEnumerator_procCallEffectiveParameterListIR (const GALGAS_procCallEffectiveParameterListIR & inEnumeratedObject,
                                                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procCallEffectiveParameterListIR_2D_element cEnumerator_procCallEffectiveParameterListIR::current (LOCATION_ARGS) const {
  const cCollectionElement_procCallEffectiveParameterListIR * p = (const cCollectionElement_procCallEffectiveParameterListIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeIR cEnumerator_procCallEffectiveParameterListIR::current_mEffectiveParameterPassingMode (LOCATION_ARGS) const {
  const cCollectionElement_procCallEffectiveParameterListIR * p = (const cCollectionElement_procCallEffectiveParameterListIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
  return p->mObject.mAttribute_mEffectiveParameterPassingMode ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_procCallEffectiveParameterListIR::current_mSelector (LOCATION_ARGS) const {
  const cCollectionElement_procCallEffectiveParameterListIR * p = (const cCollectionElement_procCallEffectiveParameterListIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
  return p->mObject.mAttribute_mSelector ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_procCallEffectiveParameterListIR::current_mParameterType (LOCATION_ARGS) const {
  const cCollectionElement_procCallEffectiveParameterListIR * p = (const cCollectionElement_procCallEffectiveParameterListIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
  return p->mObject.mAttribute_mParameterType ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR cEnumerator_procCallEffectiveParameterListIR::current_mParameter (LOCATION_ARGS) const {
  const cCollectionElement_procCallEffectiveParameterListIR * p = (const cCollectionElement_procCallEffectiveParameterListIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_procCallEffectiveParameterListIR) ;
  return p->mObject.mAttribute_mParameter ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       @procCallEffectiveParameterListIR type                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_procCallEffectiveParameterListIR ("procCallEffectiveParameterListIR",
                                                         NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_procCallEffectiveParameterListIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_procCallEffectiveParameterListIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_procCallEffectiveParameterListIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_procCallEffectiveParameterListIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procCallEffectiveParameterListIR GALGAS_procCallEffectiveParameterListIR::extractObject (const GALGAS_object & inObject,
                                                                                                C_Compiler * inCompiler
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_procCallEffectiveParameterListIR result ;
  const GALGAS_procCallEffectiveParameterListIR * p = (const GALGAS_procCallEffectiveParameterListIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_procCallEffectiveParameterListIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("procCallEffectiveParameterListIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_valueIR_literalInteger::cEnumAssociatedValues_valueIR_literalInteger (const GALGAS_bigint & inAssociatedValue0
                                                                                            COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_valueIR_literalInteger::description (C_String & ioString,
                                                                const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_valueIR_literalInteger::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_valueIR_literalInteger * ptr = dynamic_cast<const cEnumAssociatedValues_valueIR_literalInteger *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_valueIR_llvmObject::cEnumAssociatedValues_valueIR_llvmObject (const GALGAS_string & inAssociatedValue0
                                                                                    COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_valueIR_llvmObject::description (C_String & ioString,
                                                            const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_valueIR_llvmObject::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_valueIR_llvmObject * ptr = dynamic_cast<const cEnumAssociatedValues_valueIR_llvmObject *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_valueIR::GALGAS_valueIR (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_valueIR GALGAS_valueIR::constructor_literalInteger (const GALGAS_bigint & inAssociatedValue0
                                                           COMMA_LOCATION_ARGS) {
  GALGAS_valueIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_literalInteger ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_valueIR_literalInteger (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_valueIR GALGAS_valueIR::constructor_llvmObject (const GALGAS_string & inAssociatedValue0
                                                       COMMA_LOCATION_ARGS) {
  GALGAS_valueIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_llvmObject ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_valueIR_llvmObject (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_valueIR::method_literalInteger (GALGAS_bigint & outAssociatedValue0,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_literalInteger) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @valueIR literalInteger invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_valueIR_literalInteger * ptr = (const cEnumAssociatedValues_valueIR_literalInteger *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_valueIR::method_llvmObject (GALGAS_string & outAssociatedValue0,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_llvmObject) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @valueIR llvmObject invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_valueIR_llvmObject * ptr = (const cEnumAssociatedValues_valueIR_llvmObject *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_valueIR [3] = {
  "(not built)",
  "literalInteger",
  "llvmObject"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_valueIR::reader_isLiteralInteger (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_literalInteger == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_valueIR::reader_isLlvmObject (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_llvmObject == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_valueIR::description (C_String & ioString,
                                  const int32_t inIndentation) const {
  ioString << "<enum @valueIR: " << gEnumNameArrayFor_valueIR [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_valueIR::objectCompare (const GALGAS_valueIR & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                    @valueIR type                                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_valueIR ("valueIR",
                                NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_valueIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_valueIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_valueIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_valueIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_valueIR GALGAS_valueIR::extractObject (const GALGAS_object & inObject,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  GALGAS_valueIR result ;
  const GALGAS_valueIR * p = (const GALGAS_valueIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_valueIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("valueIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     Class for element of '@variableListIR' list                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_variableListIR : public cCollectionElement {
  public : GALGAS_variableListIR_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_variableListIR (const GALGAS_variableKindIR & in_mVar
                                              COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_variableListIR::cCollectionElement_variableListIR (const GALGAS_variableKindIR & in_mVar
                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mVar) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_variableListIR::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_variableListIR::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_variableListIR (mObject.mAttribute_mVar COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_variableListIR::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mVar" ":" ;
  mObject.mAttribute_mVar.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_variableListIR::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_variableListIR * operand = (cCollectionElement_variableListIR *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_variableListIR) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableListIR::GALGAS_variableListIR (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableListIR::GALGAS_variableListIR (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableListIR GALGAS_variableListIR::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_variableListIR result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableListIR GALGAS_variableListIR::constructor_listWithValue (const GALGAS_variableKindIR & inOperand0
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_variableListIR result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_variableListIR::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableListIR::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                       const GALGAS_variableKindIR & in_mVar
                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement_variableListIR * p = NULL ;
  macroMyNew (p, cCollectionElement_variableListIR (in_mVar COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableListIR::addAssign_operation (const GALGAS_variableKindIR & inOperand0
                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_variableListIR (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableListIR::modifier_insertAtIndex (const GALGAS_variableKindIR inOperand0,
                                                    const GALGAS_uint inInsertionIndex,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_variableListIR (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableListIR::modifier_removeAtIndex (GALGAS_variableKindIR & outOperand0,
                                                    const GALGAS_uint inRemoveIndex,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_variableListIR * p = (cCollectionElement_variableListIR *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_variableListIR) ;
      outOperand0 = p->mObject.mAttribute_mVar ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableListIR::modifier_popFirst (GALGAS_variableKindIR & outOperand0,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_variableListIR * p = (cCollectionElement_variableListIR *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_variableListIR) ;
    outOperand0 = p->mObject.mAttribute_mVar ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableListIR::modifier_popLast (GALGAS_variableKindIR & outOperand0,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_variableListIR * p = (cCollectionElement_variableListIR *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_variableListIR) ;
    outOperand0 = p->mObject.mAttribute_mVar ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableListIR::method_first (GALGAS_variableKindIR & outOperand0,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_variableListIR * p = (cCollectionElement_variableListIR *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_variableListIR) ;
    outOperand0 = p->mObject.mAttribute_mVar ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableListIR::method_last (GALGAS_variableKindIR & outOperand0,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_variableListIR * p = (cCollectionElement_variableListIR *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_variableListIR) ;
    outOperand0 = p->mObject.mAttribute_mVar ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableListIR GALGAS_variableListIR::operator_concat (const GALGAS_variableListIR & inOperand
                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_variableListIR result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableListIR GALGAS_variableListIR::add_operation (const GALGAS_variableListIR & inOperand,
                                                            C_Compiler * /* inCompiler */
                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_variableListIR result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableListIR GALGAS_variableListIR::reader_subListWithRange (const GALGAS_range & inRange,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_variableListIR result = GALGAS_variableListIR::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableListIR GALGAS_variableListIR::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_variableListIR result = GALGAS_variableListIR::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableListIR::dotAssign_operation (const GALGAS_variableListIR inOperand
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableListIR::reader_mVarAtIndex (const GALGAS_uint & inIndex,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_variableListIR * p = (cCollectionElement_variableListIR *) attributes.ptr () ;
  GALGAS_variableKindIR result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_variableListIR) ;
    result = p->mObject.mAttribute_mVar ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_variableListIR::cEnumerator_variableListIR (const GALGAS_variableListIR & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableListIR_2D_element cEnumerator_variableListIR::current (LOCATION_ARGS) const {
  const cCollectionElement_variableListIR * p = (const cCollectionElement_variableListIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_variableListIR) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR cEnumerator_variableListIR::current_mVar (LOCATION_ARGS) const {
  const cCollectionElement_variableListIR * p = (const cCollectionElement_variableListIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_variableListIR) ;
  return p->mObject.mAttribute_mVar ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                @variableListIR type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_variableListIR ("variableListIR",
                                       NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_variableListIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_variableListIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_variableListIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_variableListIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableListIR GALGAS_variableListIR::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_variableListIR result ;
  const GALGAS_variableListIR * p = (const GALGAS_variableListIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_variableListIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("variableListIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_variableMap::cMapElement_variableMap (const GALGAS_lstring & inKey,
                                                  const GALGAS_unifiedTypeMap_2D_proxy & in_mType,
                                                  const GALGAS_bool & in_mAccessAllowed,
                                                  const GALGAS_variableKindIR & in_mVariableKind,
                                                  const GALGAS_bool & in_copiable,
                                                  const GALGAS_registerBitSliceAccessMap & in_fieldMap,
                                                  const GALGAS_bool & in_mCanBeUsedAsInputParameter
                                                  COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mType (in_mType),
mAttribute_mAccessAllowed (in_mAccessAllowed),
mAttribute_mVariableKind (in_mVariableKind),
mAttribute_copiable (in_copiable),
mAttribute_fieldMap (in_fieldMap),
mAttribute_mCanBeUsedAsInputParameter (in_mCanBeUsedAsInputParameter) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_variableMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mType.isValid () && mAttribute_mAccessAllowed.isValid () && mAttribute_mVariableKind.isValid () && mAttribute_copiable.isValid () && mAttribute_fieldMap.isValid () && mAttribute_mCanBeUsedAsInputParameter.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_variableMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_variableMap (mAttribute_lkey, mAttribute_mType, mAttribute_mAccessAllowed, mAttribute_mVariableKind, mAttribute_copiable, mAttribute_fieldMap, mAttribute_mCanBeUsedAsInputParameter COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_variableMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mAttribute_mType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAccessAllowed" ":" ;
  mAttribute_mAccessAllowed.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mVariableKind" ":" ;
  mAttribute_mVariableKind.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "copiable" ":" ;
  mAttribute_copiable.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "fieldMap" ":" ;
  mAttribute_fieldMap.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCanBeUsedAsInputParameter" ":" ;
  mAttribute_mCanBeUsedAsInputParameter.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_variableMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_variableMap * operand = (cMapElement_variableMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mType.objectCompare (operand->mAttribute_mType) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mAccessAllowed.objectCompare (operand->mAttribute_mAccessAllowed) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mVariableKind.objectCompare (operand->mAttribute_mVariableKind) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_copiable.objectCompare (operand->mAttribute_copiable) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_fieldMap.objectCompare (operand->mAttribute_fieldMap) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mCanBeUsedAsInputParameter.objectCompare (operand->mAttribute_mCanBeUsedAsInputParameter) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap::GALGAS_variableMap (void) :
AC_GALGAS_uniqueMap () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap::GALGAS_variableMap (const GALGAS_variableMap & inSource) :
AC_GALGAS_uniqueMap (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap & GALGAS_variableMap::operator = (const GALGAS_variableMap & inSource) {
  * ((AC_GALGAS_uniqueMap *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap GALGAS_variableMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_variableMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton states                                                       *
//---------------------------------------------------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const uint32_t kMapStateCount_variableMap = 24 ;
#endif
static const uint32_t kMapState_variableMap_constantInputFormalArgument = 14 ;
static const uint32_t kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused = 16 ;
static const uint32_t kMapState_variableMap_currentInstanceAttribute = 21 ;
static const uint32_t kMapState_variableMap_currentInstanceAttributeInModifier = 22 ;
static const uint32_t kMapState_variableMap_currentInstanceDroppedAttributeInModifier = 23 ;
static const uint32_t kMapState_variableMap_definedLocalVariable = 5 ;
static const uint32_t kMapState_variableMap_definedOutputFormalArgument = 9 ;
static const uint32_t kMapState_variableMap_droppedInputFormalArgument = 19 ;
static const uint32_t kMapState_variableMap_droppedInputOutputFormalArgument = 12 ;
static const uint32_t kMapState_variableMap_droppedLocalVariable = 7 ;
static const uint32_t kMapState_variableMap_globalVariable = 0 ;
static const uint32_t kMapState_variableMap_inputFormalArgumentDeclaredAsUnused = 20 ;
static const uint32_t kMapState_variableMap_inputFormalParameter = 17 ;
static const uint32_t kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused = 13 ;
static const uint32_t kMapState_variableMap_localConstant = 2 ;
static const uint32_t kMapState_variableMap_undefinedLocalConstant = 3 ;
static const uint32_t kMapState_variableMap_undefinedLocalVariable = 4 ;
static const uint32_t kMapState_variableMap_undefinedOutputFormalArgument = 8 ;
static const uint32_t kMapState_variableMap_unusedInputOutputFormalArgument = 10 ;
static const uint32_t kMapState_variableMap_usedConstantInputFormalArgument = 15 ;
static const uint32_t kMapState_variableMap_usedInputFormalArgument = 18 ;
static const uint32_t kMapState_variableMap_usedInputOutputFormalArgument = 11 ;
static const uint32_t kMapState_variableMap_usedLocalConstant = 1 ;
static const uint32_t kMapState_variableMap_usedLocalVariable = 6 ;

//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton state names                                                  *
//---------------------------------------------------------------------------------------------------------------------*

static const char * kMapStateNames_variableMap [24] = {
  "globalVariable",
  "usedLocalConstant",
  "localConstant",
  "undefinedLocalConstant",
  "undefinedLocalVariable",
  "definedLocalVariable",
  "usedLocalVariable",
  "droppedLocalVariable",
  "undefinedOutputFormalArgument",
  "definedOutputFormalArgument",
  "unusedInputOutputFormalArgument",
  "usedInputOutputFormalArgument",
  "droppedInputOutputFormalArgument",
  "inputOutputFormalArgumentDeclaredAsUnused",
  "constantInputFormalArgument",
  "usedConstantInputFormalArgument",
  "constantInputFormalArgumentDeclaredAsUnused",
  "inputFormalParameter",
  "usedInputFormalArgument",
  "droppedInputFormalArgument",
  "inputFormalArgumentDeclaredAsUnused",
  "currentInstanceAttribute",
  "currentInstanceAttributeInModifier",
  "currentInstanceDroppedAttributeInModifier"
} ;

//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton actions                                                    *
//---------------------------------------------------------------------------------------------------------------------*

static const uint32_t kMapActionCount_variableMap = 5 ;
static const uint32_t kMapAction_variableMap_dropAccess = 3 ;
static const uint32_t kMapAction_variableMap_neutralAccess = 4 ;
static const uint32_t kMapAction_variableMap_readAccess = 0 ;
static const uint32_t kMapAction_variableMap_readWriteAccess = 2 ;
static const uint32_t kMapAction_variableMap_writeAccess = 1 ;

//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton action names                                                 *
//---------------------------------------------------------------------------------------------------------------------*

static const char * kMapActionNames_variableMap [5] = {
  "dropAccess",
  "neutralAccess",
  "readAccess",
  "readWriteAccess",
  "writeAccess"
} ;

//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton transitions                                                  *
//---------------------------------------------------------------------------------------------------------------------*

static const cMapAutomatonTransition kMapTransitions_variableMap [24 * 5] = {
// State 'globalVariable', index 0 
  {kMapState_variableMap_globalVariable /* 0 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_globalVariable /* 0 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_globalVariable /* 0 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_globalVariable /* 0 */, kMapAutomatonIssueError, "a global variable cannot be drop"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_globalVariable /* 0 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'usedLocalConstant', index 1 
  {kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonIssueError, "a constant cannot be written"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonIssueError, "a constant cannot be written"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonIssueError, "a constant cannot be drop"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'localConstant', index 2 
  {kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonIssueError, "a constant cannot be written"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonIssueError, "a constant cannot be written"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonIssueError, "a constant cannot be drop"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_localConstant /* 2 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'undefinedLocalConstant', index 3 
  {kMapState_variableMap_undefinedLocalConstant /* 3 */, kMapAutomatonIssueError, "the constant is undefined"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_localConstant /* 2 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_undefinedLocalConstant /* 3 */, kMapAutomatonIssueError, "the constant is undefined"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_undefinedLocalConstant /* 3 */, kMapAutomatonIssueError, "the constant is undefined"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_undefinedLocalConstant /* 3 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'undefinedLocalVariable', index 4 
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapAutomatonIssueError, "an undefined local variable cannot be read"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapAutomatonIssueError, "an undefined local variable cannot be read"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapAutomatonIssueWarning, "the local variable has no value"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'definedLocalVariable', index 5 
  {kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonIssueWarning, "the local variable has been dropped without any read"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'usedLocalVariable', index 6 
  {kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'droppedLocalVariable', index 7 
  {kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonIssueError, "a dropped local variable cannot be read"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonIssueError, "a dropped local variable cannot be read"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonIssueWarning, "the local variable is already dropped"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'undefinedOutputFormalArgument', index 8 
  {kMapState_variableMap_undefinedOutputFormalArgument /* 8 */, kMapAutomatonIssueError, "an undefined output formal parameter cannot be read"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_undefinedOutputFormalArgument /* 8 */, kMapAutomatonIssueError, "an undefined output formal parameter cannot be read"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_undefinedOutputFormalArgument /* 8 */, kMapAutomatonIssueWarning, "the output formal parameter has no value"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_undefinedOutputFormalArgument /* 8 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'definedOutputFormalArgument', index 9 
  {kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_undefinedOutputFormalArgument /* 8 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'unusedInputOutputFormalArgument', index 10 
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'usedInputOutputFormalArgument', index 11 
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'droppedInputOutputFormalArgument', index 12 
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapAutomatonIssueError, "a dropped input/output formal argument cannot be read"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapAutomatonIssueError, "a dropped input/output formal argument cannot be read"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapAutomatonIssueWarning, "the input/output formal argument is already dropped"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'inputOutputFormalArgumentDeclaredAsUnused', index 13 
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonIssueWarning, "the input/output formal parameter has been declared as unused"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonIssueWarning, "the input/output formal parameter has been declared as unused"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonIssueWarning, "the input/output formal parameter has been declared as unused"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapAutomatonIssueWarning, "the input/output formal parameter has been declared as unused"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'constantInputFormalArgument', index 14 
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be written"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be written"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be dropped"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_constantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'usedConstantInputFormalArgument', index 15 
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be written"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be written"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be dropped"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'constantInputFormalArgumentDeclaredAsUnused', index 16 
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonIssueWarning, "the constant input formal parameter is declared as unused"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be written"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be written"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be dropped"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused /* 16 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'inputFormalParameter', index 17 
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_inputFormalParameter /* 17 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'usedInputFormalArgument', index 18 
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'droppedInputFormalArgument', index 19 
  {kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonIssueError, "a dropped input formal parameter cannot be read"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonIssueError, "a dropped input formal parameter cannot be read"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonIssueWarning, "the input formal parameter is already dropped"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'inputFormalArgumentDeclaredAsUnused', index 20 
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonIssueWarning, "the input formal parameter is declared as unused"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonIssueWarning, "the input formal parameter is declared as unused"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonIssueWarning, "the input formal parameter is declared as unused"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonIssueWarning, "the input formal parameter is declared as unused"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 20 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'currentInstanceAttribute', index 21 
  {kMapState_variableMap_currentInstanceAttribute /* 21 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_currentInstanceAttribute /* 21 */, kMapAutomatonIssueError, "an attribute cannot be written within a method or a reader"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_currentInstanceAttribute /* 21 */, kMapAutomatonIssueError, "an attribute cannot be modified within a method or a reader"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_currentInstanceAttribute /* 21 */, kMapAutomatonIssueError, "an attribute cannot be dropped within a method or a reader"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_currentInstanceAttribute /* 21 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'currentInstanceAttributeInModifier', index 22 
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
// State 'currentInstanceDroppedAttributeInModifier', index 23 
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapAutomatonIssueError, "the attribute cannot be read, it has been dropped"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapAutomatonIssueError, "the attribute cannot be read/written, it has been dropped"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapAutomatonIssueWarning, "the attribute is already dropped"}, // for action 'dropAccess', (index 3)
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapAutomatonNoIssue, ""}, // for action 'neutralAccess', (index 4)
} ;

//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton final state issues                                           *
//---------------------------------------------------------------------------------------------------------------------*

static const cMapAutomatonFinalIssue kMapAutomatonFinalIssue_variableMap [24] = {
  {kMapAutomatonNoIssue, ""},// state 'globalVariable' (index 0)
  {kMapAutomatonNoIssue, ""},// state 'usedLocalConstant' (index 1)
  {kMapAutomatonIssueWarning, "the '%K' constant value is unused"},// state 'localConstant' (index 2)
  {kMapAutomatonIssueWarning, "the '%K' constant value is unused"},// state 'undefinedLocalConstant' (index 3)
  {kMapAutomatonIssueWarning, "the '%K' local variable is unused"},// state 'undefinedLocalVariable' (index 4)
  {kMapAutomatonNoIssue, ""},// state 'definedLocalVariable' (index 5)
  {kMapAutomatonNoIssue, ""},// state 'usedLocalVariable' (index 6)
  {kMapAutomatonNoIssue, ""},// state 'droppedLocalVariable' (index 7)
  {kMapAutomatonIssueError, "the '%K' output formal parameter is undefined"},// state 'undefinedOutputFormalArgument' (index 8)
  {kMapAutomatonNoIssue, ""},// state 'definedOutputFormalArgument' (index 9)
  {kMapAutomatonIssueWarning, "the '%K' input/output formal parameter is unused"},// state 'unusedInputOutputFormalArgument' (index 10)
  {kMapAutomatonNoIssue, ""},// state 'usedInputOutputFormalArgument' (index 11)
  {kMapAutomatonIssueError, "the '%K' input/ouput formal argument should be valuated at the end of the routine"},// state 'droppedInputOutputFormalArgument' (index 12)
  {kMapAutomatonNoIssue, ""},// state 'inputOutputFormalArgumentDeclaredAsUnused' (index 13)
  {kMapAutomatonIssueWarning, "the constant '%K' input formal parameter is not used and is not declared as unused"},// state 'constantInputFormalArgument' (index 14)
  {kMapAutomatonNoIssue, ""},// state 'usedConstantInputFormalArgument' (index 15)
  {kMapAutomatonNoIssue, ""},// state 'constantInputFormalArgumentDeclaredAsUnused' (index 16)
  {kMapAutomatonIssueWarning, "the '%K' input formal parameter is not used and is not declared as unused"},// state 'inputFormalParameter' (index 17)
  {kMapAutomatonNoIssue, ""},// state 'usedInputFormalArgument' (index 18)
  {kMapAutomatonNoIssue, ""},// state 'droppedInputFormalArgument' (index 19)
  {kMapAutomatonNoIssue, ""},// state 'inputFormalArgumentDeclaredAsUnused' (index 20)
  {kMapAutomatonNoIssue, ""},// state 'currentInstanceAttribute' (index 21)
  {kMapAutomatonNoIssue, ""},// state 'currentInstanceAttributeInModifier' (index 22)
  {kMapAutomatonIssueWarning, "the '%K' attribute is in the dropped state at the end of the modifier"},// state 'currentInstanceDroppedAttributeInModifier' (index 23)
} ;
//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_closeBranch (GALGAS_location inErrorLocation,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  closeBranch (inErrorLocation,
               kMapAutomatonFinalIssue_variableMap,
               #ifndef DO_NOT_GENERATE_CHECKINGS
                 kMapStateCount_variableMap,
               #endif
               inCompiler COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::method_checkAutomatonStates (GALGAS_location inErrorLocation,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  checkAutomatonStates (inErrorLocation, kMapAutomatonFinalIssue_variableMap, inCompiler COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                             map override 'selectBlock'                                              *
//---------------------------------------------------------------------------------------------------------------------*

static const cBranchOverrideTransformationDescriptor kBranchBehaviourForOverride_variableMap_selectBlock [30] = {
  {kMapState_variableMap_localConstant /* 2 */, kMapState_variableMap_usedLocalConstant /* 1 */, kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedLocalConstant /* 3 */, kMapState_variableMap_usedLocalConstant /* 1 */, kMapState_variableMap_undefinedLocalConstant /* 3 */, kMapAutomatonIssueError, "this branch defines the '%K' variable, while previous ones let it undefined"},
  {kMapState_variableMap_undefinedLocalConstant /* 3 */, kMapState_variableMap_localConstant /* 2 */, kMapState_variableMap_undefinedLocalConstant /* 3 */, kMapAutomatonIssueError, "this branch defines the '%K' variable, while previous ones let it undefined"},
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedOutputFormalArgument /* 8 */, kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapState_variableMap_undefinedOutputFormalArgument /* 8 */, kMapState_variableMap_undefinedOutputFormalArgument /* 8 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_constantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused /* 16 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 17 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 20 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 20 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapAutomatonNoIssue, ""},
} ;

//---------------------------------------------------------------------------------------------------------------------*

static const cBranchOverrideCompatibilityDescriptor kBranchCombinationForOverride_variableMap_selectBlock [42] = {
  {kMapState_variableMap_usedLocalConstant /* 1 */, kMapState_variableMap_localConstant /* 2 */, kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_localConstant /* 2 */, kMapState_variableMap_usedLocalConstant /* 1 */, kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonIssueError, "this branch defines the '%K' variable, while previous ones let it undefined"},
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapAutomatonIssueError, "this branch defines the '%K' variable, while previous ones let it undefined"},
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonIssueError, "this branch lets the '%K' variable undefined, while previous ones define it"},
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonIssueError, "this branch drops the '%K' variable, while previous ones let it defined"},
  {kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonIssueError, "this branch lets the '%K' variable undefined, while previous defines let it"},
  {kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonIssueError, "this branch drops the '%K' variable, while previous ones let it defined"},
  {kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonIssueError, "this branch defines the '%K' variable, while previous ones drop it"},
  {kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonIssueError, "this branch defines the '%K' variable, while previous ones drop it"},
  {kMapState_variableMap_undefinedOutputFormalArgument /* 8 */, kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapAutomatonIssueError, "this branch defines the '%K' output formal argument, while previous ones let it undefined"},
  {kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapState_variableMap_undefinedOutputFormalArgument /* 8 */, kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapAutomatonIssueError, "this branch lets the '%K' variable undefined, while previous ones define it"},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapAutomatonIssueError, "this branch drops the '%K' input/output formal argument, while previous ones let it undefined"},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonIssueError, "this branch drops the '%K' input/output formal argument, while previous ones let it defined"},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapAutomatonIssueError, "this branch lets the '%K' input/output formal argument defined, while previous ones drop it"},
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonIssueError, "this branch lets the '%K' input/output formal argument defined, while previous ones drop it"},
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapAutomatonIssueError, "this branch lets the '%K' input formal argument defined, while previous ones drop it"},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapAutomatonIssueError, "this branch drops the '%K' input formal argument defined, while previous ones let it defined"},
  {kMapState_variableMap_constantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapState_variableMap_constantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused /* 16 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused /* 16 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 17 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_inputFormalParameter /* 17 */, kMapAutomatonIssueError, "this branch drops the '%K' input formal argument, while previous let it defined"},
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_inputFormalParameter /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonIssueError, "this branch drops the '%K' input formal argument, while previous ones let it defined"},
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 20 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_inputFormalParameter /* 17 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonIssueError, "this branch drops the '%K' input formal argument, while previous ones let it defined"},
  {kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonIssueError, "this branch defines the '%K' input formal argument, while previous ones let it dropped"},
  {kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 20 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 20 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 20 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapAutomatonIssueError, "this branch drops the '%K' attribute, while previous ones let it defined"},
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapAutomatonIssueError, "this branch lets the '%K' attribute defined, while previous ones drop it"},
} ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_openOverrideForSelectBlock (C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  openOverride (kBranchBehaviourForOverride_variableMap_selectBlock, 30,
                kBranchCombinationForOverride_variableMap_selectBlock, 42,
                "selectBlock",
                inCompiler
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                             map override 'repeatBlock'                                              *
//---------------------------------------------------------------------------------------------------------------------*

static const cBranchOverrideTransformationDescriptor kBranchBehaviourForOverride_variableMap_repeatBlock [30] = {
  {kMapState_variableMap_localConstant /* 2 */, kMapState_variableMap_usedLocalConstant /* 1 */, kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedLocalConstant /* 3 */, kMapState_variableMap_usedLocalConstant /* 1 */, kMapState_variableMap_undefinedLocalConstant /* 3 */, kMapAutomatonIssueError, "the repeated branch should not define the '%K' variable"},
  {kMapState_variableMap_undefinedLocalConstant /* 3 */, kMapState_variableMap_localConstant /* 2 */, kMapState_variableMap_undefinedLocalConstant /* 3 */, kMapAutomatonIssueError, "the repeated branch should not define the '%K' variable"},
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapAutomatonIssueError, "the repeated branch should not define the '%K' variable"},
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapAutomatonIssueError, "the repeated branch should not define the '%K' variable"},
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' variable"},
  {kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' variable"},
  {kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' variable"},
  {kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonIssueError, "the repeated branch should not define the dropped '%K' variable"},
  {kMapState_variableMap_undefinedOutputFormalArgument /* 8 */, kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapState_variableMap_undefinedOutputFormalArgument /* 8 */, kMapAutomatonIssueError, "the repeated branch should not define the '%K' output formal argument"},
  {kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapState_variableMap_undefinedOutputFormalArgument /* 8 */, kMapState_variableMap_definedOutputFormalArgument /* 9 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' output formal argument"},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input/output formal argument"},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input/output formal argument"},
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapAutomatonIssueError, "the repeated branch should define the '%K' input formal argument"},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 12 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input/output formal argument"},
  {kMapState_variableMap_constantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused /* 16 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 17 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_inputFormalParameter /* 17 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input formal argument"},
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input formal argument"},
  {kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input formal argument"},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 20 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 20 */, kMapState_variableMap_droppedInputFormalArgument /* 19 */, kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 20 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input formal argument"},
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' attribute"},
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapAutomatonNoIssue, ""},
} ;

//---------------------------------------------------------------------------------------------------------------------*

static const cBranchOverrideCompatibilityDescriptor kBranchCombinationForOverride_variableMap_repeatBlock [20] = {
  {kMapState_variableMap_usedLocalConstant /* 1 */, kMapState_variableMap_localConstant /* 2 */, kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_localConstant /* 2 */, kMapState_variableMap_usedLocalConstant /* 1 */, kMapState_variableMap_usedLocalConstant /* 1 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedLocalVariable /* 6 */, kMapState_variableMap_definedLocalVariable /* 5 */, kMapState_variableMap_usedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedLocalVariable /* 7 */, kMapState_variableMap_undefinedLocalVariable /* 4 */, kMapState_variableMap_droppedLocalVariable /* 7 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_unusedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 13 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_constantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapState_variableMap_constantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused /* 16 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused /* 16 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 15 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_inputFormalParameter /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 20 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 20 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 23 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 22 */, kMapAutomatonNoIssue, ""},
} ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_openOverrideForRepeatBlock (C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  openOverride (kBranchBehaviourForOverride_variableMap_repeatBlock, 30,
                kBranchCombinationForOverride_variableMap_repeatBlock, 20,
                "repeatBlock",
                inCompiler
                COMMA_THERE) ;
}


//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertGlobalVariable (GALGAS_lstring inKey,
                                                        GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                        GALGAS_bool inArgument1,
                                                        GALGAS_variableKindIR inArgument2,
                                                        GALGAS_bool inArgument3,
                                                        GALGAS_registerBitSliceAccessMap inArgument4,
                                                        GALGAS_bool inArgument5,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' global variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_globalVariable,
                        kMapStateNames_variableMap [kMapState_variableMap_globalVariable],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertMutableAttribute (GALGAS_lstring inKey,
                                                          GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                          GALGAS_bool inArgument1,
                                                          GALGAS_variableKindIR inArgument2,
                                                          GALGAS_bool inArgument3,
                                                          GALGAS_registerBitSliceAccessMap inArgument4,
                                                          GALGAS_bool inArgument5,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' attribute (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_currentInstanceAttributeInModifier,
                        kMapStateNames_variableMap [kMapState_variableMap_currentInstanceAttributeInModifier],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertNonMutableAttribute (GALGAS_lstring inKey,
                                                             GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                             GALGAS_bool inArgument1,
                                                             GALGAS_variableKindIR inArgument2,
                                                             GALGAS_bool inArgument3,
                                                             GALGAS_registerBitSliceAccessMap inArgument4,
                                                             GALGAS_bool inArgument5,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' attribute (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_currentInstanceAttribute,
                        kMapStateNames_variableMap [kMapState_variableMap_currentInstanceAttribute],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertUndefinedLocalVariable (GALGAS_lstring inKey,
                                                                GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                                GALGAS_bool inArgument1,
                                                                GALGAS_variableKindIR inArgument2,
                                                                GALGAS_bool inArgument3,
                                                                GALGAS_registerBitSliceAccessMap inArgument4,
                                                                GALGAS_bool inArgument5,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_undefinedLocalVariable,
                        kMapStateNames_variableMap [kMapState_variableMap_undefinedLocalVariable],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertDefinedLocalVariable (GALGAS_lstring inKey,
                                                              GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                              GALGAS_bool inArgument1,
                                                              GALGAS_variableKindIR inArgument2,
                                                              GALGAS_bool inArgument3,
                                                              GALGAS_registerBitSliceAccessMap inArgument4,
                                                              GALGAS_bool inArgument5,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_definedLocalVariable,
                        kMapStateNames_variableMap [kMapState_variableMap_definedLocalVariable],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertUndefinedLocalConstant (GALGAS_lstring inKey,
                                                                GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                                GALGAS_bool inArgument1,
                                                                GALGAS_variableKindIR inArgument2,
                                                                GALGAS_bool inArgument3,
                                                                GALGAS_registerBitSliceAccessMap inArgument4,
                                                                GALGAS_bool inArgument5,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_undefinedLocalConstant,
                        kMapStateNames_variableMap [kMapState_variableMap_undefinedLocalConstant],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertLocalConstant (GALGAS_lstring inKey,
                                                       GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                       GALGAS_bool inArgument1,
                                                       GALGAS_variableKindIR inArgument2,
                                                       GALGAS_bool inArgument3,
                                                       GALGAS_registerBitSliceAccessMap inArgument4,
                                                       GALGAS_bool inArgument5,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_localConstant,
                        kMapStateNames_variableMap [kMapState_variableMap_localConstant],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertUsedLocalConstant (GALGAS_lstring inKey,
                                                           GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                           GALGAS_bool inArgument1,
                                                           GALGAS_variableKindIR inArgument2,
                                                           GALGAS_bool inArgument3,
                                                           GALGAS_registerBitSliceAccessMap inArgument4,
                                                           GALGAS_bool inArgument5,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_usedLocalConstant,
                        kMapStateNames_variableMap [kMapState_variableMap_usedLocalConstant],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertInputFormalArgument (GALGAS_lstring inKey,
                                                             GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                             GALGAS_bool inArgument1,
                                                             GALGAS_variableKindIR inArgument2,
                                                             GALGAS_bool inArgument3,
                                                             GALGAS_registerBitSliceAccessMap inArgument4,
                                                             GALGAS_bool inArgument5,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_inputFormalParameter,
                        kMapStateNames_variableMap [kMapState_variableMap_inputFormalParameter],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertInputFormalArgumentDeclaredAsUnused (GALGAS_lstring inKey,
                                                                             GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                                             GALGAS_bool inArgument1,
                                                                             GALGAS_variableKindIR inArgument2,
                                                                             GALGAS_bool inArgument3,
                                                                             GALGAS_registerBitSliceAccessMap inArgument4,
                                                                             GALGAS_bool inArgument5,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_inputFormalArgumentDeclaredAsUnused,
                        kMapStateNames_variableMap [kMapState_variableMap_inputFormalArgumentDeclaredAsUnused],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertConstantInputFormalArgument (GALGAS_lstring inKey,
                                                                     GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                                     GALGAS_bool inArgument1,
                                                                     GALGAS_variableKindIR inArgument2,
                                                                     GALGAS_bool inArgument3,
                                                                     GALGAS_registerBitSliceAccessMap inArgument4,
                                                                     GALGAS_bool inArgument5,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_constantInputFormalArgument,
                        kMapStateNames_variableMap [kMapState_variableMap_constantInputFormalArgument],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertUsedConstantInputFormalArgument (GALGAS_lstring inKey,
                                                                         GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                                         GALGAS_bool inArgument1,
                                                                         GALGAS_variableKindIR inArgument2,
                                                                         GALGAS_bool inArgument3,
                                                                         GALGAS_registerBitSliceAccessMap inArgument4,
                                                                         GALGAS_bool inArgument5,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_usedConstantInputFormalArgument,
                        kMapStateNames_variableMap [kMapState_variableMap_usedConstantInputFormalArgument],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertConstantInputFormalArgumentDeclaredAsUnused (GALGAS_lstring inKey,
                                                                                     GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                                                     GALGAS_bool inArgument1,
                                                                                     GALGAS_variableKindIR inArgument2,
                                                                                     GALGAS_bool inArgument3,
                                                                                     GALGAS_registerBitSliceAccessMap inArgument4,
                                                                                     GALGAS_bool inArgument5,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused,
                        kMapStateNames_variableMap [kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertOutputFormalArgument (GALGAS_lstring inKey,
                                                              GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                              GALGAS_bool inArgument1,
                                                              GALGAS_variableKindIR inArgument2,
                                                              GALGAS_bool inArgument3,
                                                              GALGAS_registerBitSliceAccessMap inArgument4,
                                                              GALGAS_bool inArgument5,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_undefinedOutputFormalArgument,
                        kMapStateNames_variableMap [kMapState_variableMap_undefinedOutputFormalArgument],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertInputOutputFormalArgument (GALGAS_lstring inKey,
                                                                   GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                                   GALGAS_bool inArgument1,
                                                                   GALGAS_variableKindIR inArgument2,
                                                                   GALGAS_bool inArgument3,
                                                                   GALGAS_registerBitSliceAccessMap inArgument4,
                                                                   GALGAS_bool inArgument5,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_unusedInputOutputFormalArgument,
                        kMapStateNames_variableMap [kMapState_variableMap_unusedInputOutputFormalArgument],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertInputOutputFormalArgumentDeclaredAsUnused (GALGAS_lstring inKey,
                                                                                   GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                                                   GALGAS_bool inArgument1,
                                                                                   GALGAS_variableKindIR inArgument2,
                                                                                   GALGAS_bool inArgument3,
                                                                                   GALGAS_registerBitSliceAccessMap inArgument4,
                                                                                   GALGAS_bool inArgument5,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused,
                        kMapStateNames_variableMap [kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_variableMap_searchForReadAccess = "the '%K' variable is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_searchForReadAccess (GALGAS_lstring inKey,
                                                       GALGAS_unifiedTypeMap_2D_proxy & outArgument0,
                                                       GALGAS_bool & outArgument1,
                                                       GALGAS_variableKindIR & outArgument2,
                                                       GALGAS_bool & outArgument3,
                                                       GALGAS_registerBitSliceAccessMap & outArgument4,
                                                       GALGAS_bool & outArgument5,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) performSearch (inKey,
                                                                                         inCompiler,
                                                                                         kMapAction_variableMap_readAccess,
                                                                                         kMapTransitions_variableMap,
                                                                                         kMapActionCount_variableMap,
                                                                                         kMapStateNames_variableMap,
                                                                                         kMapActionNames_variableMap,
                                                                                         #ifndef DO_NOT_GENERATE_CHECKINGS
                                                                                           kMapStateCount_variableMap,
                                                                                         #endif
                                                                                         kSearchErrorMessage_variableMap_searchForReadAccess
                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
    outArgument4.drop () ;
    outArgument5.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_variableMap) ;
    outArgument0 = p->mAttribute_mType ;
    outArgument1 = p->mAttribute_mAccessAllowed ;
    outArgument2 = p->mAttribute_mVariableKind ;
    outArgument3 = p->mAttribute_copiable ;
    outArgument4 = p->mAttribute_fieldMap ;
    outArgument5 = p->mAttribute_mCanBeUsedAsInputParameter ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_variableMap_searchForWriteAccess = "the '%K' variable is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_searchForWriteAccess (GALGAS_lstring inKey,
                                                        GALGAS_unifiedTypeMap_2D_proxy & outArgument0,
                                                        GALGAS_bool & outArgument1,
                                                        GALGAS_variableKindIR & outArgument2,
                                                        GALGAS_bool & outArgument3,
                                                        GALGAS_registerBitSliceAccessMap & outArgument4,
                                                        GALGAS_bool & outArgument5,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) performSearch (inKey,
                                                                                         inCompiler,
                                                                                         kMapAction_variableMap_writeAccess,
                                                                                         kMapTransitions_variableMap,
                                                                                         kMapActionCount_variableMap,
                                                                                         kMapStateNames_variableMap,
                                                                                         kMapActionNames_variableMap,
                                                                                         #ifndef DO_NOT_GENERATE_CHECKINGS
                                                                                           kMapStateCount_variableMap,
                                                                                         #endif
                                                                                         kSearchErrorMessage_variableMap_searchForWriteAccess
                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
    outArgument4.drop () ;
    outArgument5.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_variableMap) ;
    outArgument0 = p->mAttribute_mType ;
    outArgument1 = p->mAttribute_mAccessAllowed ;
    outArgument2 = p->mAttribute_mVariableKind ;
    outArgument3 = p->mAttribute_copiable ;
    outArgument4 = p->mAttribute_fieldMap ;
    outArgument5 = p->mAttribute_mCanBeUsedAsInputParameter ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_variableMap_searchForReadWriteAccess = "the '%K' variable is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_searchForReadWriteAccess (GALGAS_lstring inKey,
                                                            GALGAS_unifiedTypeMap_2D_proxy & outArgument0,
                                                            GALGAS_bool & outArgument1,
                                                            GALGAS_variableKindIR & outArgument2,
                                                            GALGAS_bool & outArgument3,
                                                            GALGAS_registerBitSliceAccessMap & outArgument4,
                                                            GALGAS_bool & outArgument5,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) performSearch (inKey,
                                                                                         inCompiler,
                                                                                         kMapAction_variableMap_readWriteAccess,
                                                                                         kMapTransitions_variableMap,
                                                                                         kMapActionCount_variableMap,
                                                                                         kMapStateNames_variableMap,
                                                                                         kMapActionNames_variableMap,
                                                                                         #ifndef DO_NOT_GENERATE_CHECKINGS
                                                                                           kMapStateCount_variableMap,
                                                                                         #endif
                                                                                         kSearchErrorMessage_variableMap_searchForReadWriteAccess
                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
    outArgument4.drop () ;
    outArgument5.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_variableMap) ;
    outArgument0 = p->mAttribute_mType ;
    outArgument1 = p->mAttribute_mAccessAllowed ;
    outArgument2 = p->mAttribute_mVariableKind ;
    outArgument3 = p->mAttribute_copiable ;
    outArgument4 = p->mAttribute_fieldMap ;
    outArgument5 = p->mAttribute_mCanBeUsedAsInputParameter ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_variableMap_searchForDropAccess = "the '%K' variable is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_searchForDropAccess (GALGAS_lstring inKey,
                                                       GALGAS_unifiedTypeMap_2D_proxy & outArgument0,
                                                       GALGAS_bool & outArgument1,
                                                       GALGAS_variableKindIR & outArgument2,
                                                       GALGAS_bool & outArgument3,
                                                       GALGAS_registerBitSliceAccessMap & outArgument4,
                                                       GALGAS_bool & outArgument5,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) performSearch (inKey,
                                                                                         inCompiler,
                                                                                         kMapAction_variableMap_dropAccess,
                                                                                         kMapTransitions_variableMap,
                                                                                         kMapActionCount_variableMap,
                                                                                         kMapStateNames_variableMap,
                                                                                         kMapActionNames_variableMap,
                                                                                         #ifndef DO_NOT_GENERATE_CHECKINGS
                                                                                           kMapStateCount_variableMap,
                                                                                         #endif
                                                                                         kSearchErrorMessage_variableMap_searchForDropAccess
                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
    outArgument4.drop () ;
    outArgument5.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_variableMap) ;
    outArgument0 = p->mAttribute_mType ;
    outArgument1 = p->mAttribute_mAccessAllowed ;
    outArgument2 = p->mAttribute_mVariableKind ;
    outArgument3 = p->mAttribute_copiable ;
    outArgument4 = p->mAttribute_fieldMap ;
    outArgument5 = p->mAttribute_mCanBeUsedAsInputParameter ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_variableMap_neutralAccess = "the '%K' variable is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_neutralAccess (GALGAS_lstring inKey,
                                                 GALGAS_unifiedTypeMap_2D_proxy & outArgument0,
                                                 GALGAS_bool & outArgument1,
                                                 GALGAS_variableKindIR & outArgument2,
                                                 GALGAS_bool & outArgument3,
                                                 GALGAS_registerBitSliceAccessMap & outArgument4,
                                                 GALGAS_bool & outArgument5,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) performSearch (inKey,
                                                                                         inCompiler,
                                                                                         kMapAction_variableMap_neutralAccess,
                                                                                         kMapTransitions_variableMap,
                                                                                         kMapActionCount_variableMap,
                                                                                         kMapStateNames_variableMap,
                                                                                         kMapActionNames_variableMap,
                                                                                         #ifndef DO_NOT_GENERATE_CHECKINGS
                                                                                           kMapStateCount_variableMap,
                                                                                         #endif
                                                                                         kSearchErrorMessage_variableMap_neutralAccess
                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
    outArgument4.drop () ;
    outArgument5.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_variableMap) ;
    outArgument0 = p->mAttribute_mType ;
    outArgument1 = p->mAttribute_mAccessAllowed ;
    outArgument2 = p->mAttribute_mVariableKind ;
    outArgument3 = p->mAttribute_copiable ;
    outArgument4 = p->mAttribute_fieldMap ;
    outArgument5 = p->mAttribute_mCanBeUsedAsInputParameter ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_variableMap::reader_mTypeForKey (const GALGAS_string & inKey,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) attributes ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_mType ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableMap::reader_mAccessAllowedForKey (const GALGAS_string & inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_mAccessAllowed ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableMap::reader_mVariableKindForKey (const GALGAS_string & inKey,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) attributes ;
  GALGAS_variableKindIR result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_mVariableKind ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableMap::reader_copiableForKey (const GALGAS_string & inKey,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_copiable ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap GALGAS_variableMap::reader_fieldMapForKey (const GALGAS_string & inKey,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) attributes ;
  GALGAS_registerBitSliceAccessMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_fieldMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableMap::reader_mCanBeUsedAsInputParameterForKey (const GALGAS_string & inKey,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_mCanBeUsedAsInputParameter ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_setMTypeForKey (GALGAS_unifiedTypeMap_2D_proxy inAttributeValue,
                                                  GALGAS_string inKey,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_variableMap * p = (cMapElement_variableMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    p->mAttribute_mType = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_setMAccessAllowedForKey (GALGAS_bool inAttributeValue,
                                                           GALGAS_string inKey,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_variableMap * p = (cMapElement_variableMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    p->mAttribute_mAccessAllowed = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_setMVariableKindForKey (GALGAS_variableKindIR inAttributeValue,
                                                          GALGAS_string inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_variableMap * p = (cMapElement_variableMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    p->mAttribute_mVariableKind = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_setCopiableForKey (GALGAS_bool inAttributeValue,
                                                     GALGAS_string inKey,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_variableMap * p = (cMapElement_variableMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    p->mAttribute_copiable = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_setFieldMapForKey (GALGAS_registerBitSliceAccessMap inAttributeValue,
                                                     GALGAS_string inKey,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_variableMap * p = (cMapElement_variableMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    p->mAttribute_fieldMap = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_setMCanBeUsedAsInputParameterForKey (GALGAS_bool inAttributeValue,
                                                                       GALGAS_string inKey,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_variableMap * p = (cMapElement_variableMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    p->mAttribute_mCanBeUsedAsInputParameter = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_variableMap * GALGAS_variableMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                 const GALGAS_string & inKey
                                                                                 COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * result = (cMapElement_variableMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_variableMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_variableMap::cEnumerator_variableMap (const GALGAS_variableMap & inEnumeratedObject,
                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_variableMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_variableMap::current_mType (LOCATION_ARGS) const {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_variableMap) ;
  return p->mAttribute_mType ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_variableMap::current_mAccessAllowed (LOCATION_ARGS) const {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_variableMap) ;
  return p->mAttribute_mAccessAllowed ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR cEnumerator_variableMap::current_mVariableKind (LOCATION_ARGS) const {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_variableMap) ;
  return p->mAttribute_mVariableKind ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_variableMap::current_copiable (LOCATION_ARGS) const {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_variableMap) ;
  return p->mAttribute_copiable ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap cEnumerator_variableMap::current_fieldMap (LOCATION_ARGS) const {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_variableMap) ;
  return p->mAttribute_fieldMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_variableMap::current_mCanBeUsedAsInputParameter (LOCATION_ARGS) const {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_variableMap) ;
  return p->mAttribute_mCanBeUsedAsInputParameter ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                  @variableMap type                                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_variableMap ("variableMap",
                                    NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_variableMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_variableMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_variableMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_variableMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap GALGAS_variableMap::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_variableMap result ;
  const GALGAS_variableMap * p = (const GALGAS_variableMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_variableMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("variableMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap_2D_proxy::GALGAS_variableMap_2D_proxy (void) :
AC_GALGAS_uniqueMapProxy () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap_2D_proxy GALGAS_variableMap_2D_proxy::constructor_null (LOCATION_ARGS) {
  GALGAS_variableMap_2D_proxy result ;
  result.makeNullProxy (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap_2D_proxy::class_method_makeProxy (GALGAS_variableMap & ioMap,
                                                          GALGAS_lstring inKey,
                                                          GALGAS_variableMap_2D_proxy & outProxy
                                                          COMMA_LOCATION_ARGS) {
  outProxy.internalMakeProxy (ioMap, inKey COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableMap_2D_proxy::class_method_makeProxyFromString (GALGAS_variableMap & ioMap,
                                                                    GALGAS_string inKey,
                                                                    GALGAS_variableMap_2D_proxy & outProxy
                                                                    COMMA_LOCATION_ARGS) {
  outProxy.internalMakeProxyFromString (ioMap, inKey COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_variableMap_2D_proxy::reader_mType (C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_unifiedTypeMap_2D_proxy result ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) getAttributeListPointer (inCompiler, "mType" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_mType;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableMap_2D_proxy::reader_mAccessAllowed (C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_bool result ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) getAttributeListPointer (inCompiler, "mAccessAllowed" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_mAccessAllowed;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableMap_2D_proxy::reader_mVariableKind (C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_variableKindIR result ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) getAttributeListPointer (inCompiler, "mVariableKind" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_mVariableKind;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableMap_2D_proxy::reader_copiable (C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_bool result ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) getAttributeListPointer (inCompiler, "copiable" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_copiable;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSliceAccessMap GALGAS_variableMap_2D_proxy::reader_fieldMap (C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  GALGAS_registerBitSliceAccessMap result ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) getAttributeListPointer (inCompiler, "fieldMap" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_fieldMap;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableMap_2D_proxy::reader_mCanBeUsedAsInputParameter (C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_bool result ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) getAttributeListPointer (inCompiler, "mCanBeUsedAsInputParameter" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_mCanBeUsedAsInputParameter;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap_2D_proxy GALGAS_variableMap_2D_proxy::constructor_searchForReadAccess (const GALGAS_variableMap & inMap,
                                                                                          const GALGAS_lstring & inKey,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_variableMap_2D_proxy result ;
  result.internalMakeRegularProxyBySearchingKey (inMap, inKey, kSearchErrorMessage_variableMap_searchForReadAccess, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap_2D_proxy GALGAS_variableMap_2D_proxy::constructor_searchForWriteAccess (const GALGAS_variableMap & inMap,
                                                                                           const GALGAS_lstring & inKey,
                                                                                           C_Compiler * inCompiler
                                                                                           COMMA_LOCATION_ARGS) {
  GALGAS_variableMap_2D_proxy result ;
  result.internalMakeRegularProxyBySearchingKey (inMap, inKey, kSearchErrorMessage_variableMap_searchForWriteAccess, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap_2D_proxy GALGAS_variableMap_2D_proxy::constructor_searchForReadWriteAccess (const GALGAS_variableMap & inMap,
                                                                                               const GALGAS_lstring & inKey,
                                                                                               C_Compiler * inCompiler
                                                                                               COMMA_LOCATION_ARGS) {
  GALGAS_variableMap_2D_proxy result ;
  result.internalMakeRegularProxyBySearchingKey (inMap, inKey, kSearchErrorMessage_variableMap_searchForReadWriteAccess, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap_2D_proxy GALGAS_variableMap_2D_proxy::constructor_searchForDropAccess (const GALGAS_variableMap & inMap,
                                                                                          const GALGAS_lstring & inKey,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_variableMap_2D_proxy result ;
  result.internalMakeRegularProxyBySearchingKey (inMap, inKey, kSearchErrorMessage_variableMap_searchForDropAccess, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap_2D_proxy GALGAS_variableMap_2D_proxy::constructor_neutralAccess (const GALGAS_variableMap & inMap,
                                                                                    const GALGAS_lstring & inKey,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_variableMap_2D_proxy result ;
  result.internalMakeRegularProxyBySearchingKey (inMap, inKey, kSearchErrorMessage_variableMap_neutralAccess, inCompiler COMMA_THERE) ;
  return result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @variableMap-proxy type                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_variableMap_2D_proxy ("variableMap-proxy",
                                             NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_variableMap_2D_proxy::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_variableMap_2D_proxy ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_variableMap_2D_proxy::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_variableMap_2D_proxy (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap_2D_proxy GALGAS_variableMap_2D_proxy::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_variableMap_2D_proxy result ;
  const GALGAS_variableMap_2D_proxy * p = (const GALGAS_variableMap_2D_proxy *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_variableMap_2D_proxy *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("variableMap-proxy", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        '@semanticTypePrecedenceGraph' graph                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_semanticTypePrecedenceGraph::GALGAS_semanticTypePrecedenceGraph (void) :
AC_GALGAS_graph () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_semanticTypePrecedenceGraph GALGAS_semanticTypePrecedenceGraph::constructor_emptyGraph (LOCATION_ARGS) {
  GALGAS_semanticTypePrecedenceGraph result ;
  result.makeNewEmptyGraph (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_semanticTypePrecedenceGraph::modifier_addNode (GALGAS_lstring inKey,
                                                           GALGAS_abstractDeclaration inArgument_0,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  GALGAS_declarationListAST::makeAttributesFromObjects (attributes, inArgument_0 COMMA_THERE) ;
  const char * kErrorMessage = "the '%K' symbol is already declared at %L" ;
  internalAddNode (inKey, kErrorMessage, attributes, inCompiler COMMA_THERE) ;
}


//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_semanticTypePrecedenceGraph::method_topologicalSort (GALGAS_declarationListAST & outSortedList,
                                                                 GALGAS_lstringlist & outSortedKeyList,
                                                                 GALGAS_declarationListAST & outUnsortedList,
                                                                 GALGAS_lstringlist & outUnsortedKeyList,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  cSharedList * sortedList = NULL ;
  cSharedList * unsortedList = NULL ;
  internalTopologicalSort (sortedList, outSortedKeyList, unsortedList, outUnsortedKeyList, inCompiler COMMA_THERE) ;
  outSortedList = GALGAS_declarationListAST (sortedList) ;
  outUnsortedList = GALGAS_declarationListAST (unsortedList) ;
  GALGAS_declarationListAST::detachSharedList (sortedList) ;
  GALGAS_declarationListAST::detachSharedList (unsortedList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_semanticTypePrecedenceGraph::method_depthFirstTopologicalSort (GALGAS_declarationListAST & outSortedList,
                                                                           GALGAS_lstringlist & outSortedKeyList,
                                                                           GALGAS_declarationListAST & outUnsortedList,
                                                                           GALGAS_lstringlist & outUnsortedKeyList,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  cSharedList * sortedList = NULL ;
  cSharedList * unsortedList = NULL ;
  internalDepthFirstTopologicalSort (sortedList, outSortedKeyList, unsortedList, outUnsortedKeyList, inCompiler COMMA_THERE) ;
  outSortedList = GALGAS_declarationListAST (sortedList) ;
  outUnsortedList = GALGAS_declarationListAST (unsortedList) ;
  GALGAS_declarationListAST::detachSharedList (sortedList) ;
  GALGAS_declarationListAST::detachSharedList (unsortedList) ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_semanticTypePrecedenceGraph GALGAS_semanticTypePrecedenceGraph::reader_reversedGraph (LOCATION_ARGS) const {
  GALGAS_semanticTypePrecedenceGraph result ;
  result.reversedGraphFromGraph (*this COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_semanticTypePrecedenceGraph::method_circularities (GALGAS_declarationListAST & outInfoList,
                                                               GALGAS_lstringlist & outKeyList
                                                               COMMA_LOCATION_ARGS) const {
  cSharedList * infoList = NULL ;
  internalFindCircularities (infoList, outKeyList COMMA_THERE) ;
  outInfoList = GALGAS_declarationListAST (infoList) ;
  GALGAS_declarationListAST::detachSharedList (infoList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_semanticTypePrecedenceGraph::method_nodesWithNoSuccessor (GALGAS_declarationListAST & outInfoList,
                                                                      GALGAS_lstringlist & outKeyList
                                                                      COMMA_LOCATION_ARGS) const {
  cSharedList * infoList = NULL ;
  internalNodesWithNoSuccessor (infoList, outKeyList COMMA_THERE) ;
  outInfoList = GALGAS_declarationListAST (infoList) ;
  GALGAS_declarationListAST::detachSharedList (infoList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_semanticTypePrecedenceGraph::method_nodesWithNoPredecessor (GALGAS_declarationListAST & outInfoList,
                                                                        GALGAS_lstringlist & outKeyList
                                                                        COMMA_LOCATION_ARGS) const {
  cSharedList * infoList = NULL ;
  internalNodesWithNoPredecessor (infoList, outKeyList COMMA_THERE) ;
  outInfoList = GALGAS_declarationListAST (infoList) ;
  GALGAS_declarationListAST::detachSharedList (infoList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_semanticTypePrecedenceGraph GALGAS_semanticTypePrecedenceGraph::reader_subgraphFromNodes (const GALGAS_lstringlist & inStartKeyList,
                                                                                                 const GALGAS_stringset & inKeysToExclude,
                                                                                                 C_Compiler * inCompiler
                                                                                                 COMMA_LOCATION_ARGS) const {
  GALGAS_semanticTypePrecedenceGraph result ;
  subGraph (result, inStartKeyList, inKeysToExclude, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_semanticTypePrecedenceGraph::reader_accessibleNodesFromNodes (const GALGAS_lstringlist & inStartKeyList,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  GALGAS_semanticTypePrecedenceGraph resultingGraph ;
  subGraph (resultingGraph,
            inStartKeyList,
            GALGAS_stringset::constructor_emptySet (HERE),
            inCompiler
            COMMA_THERE) ;
  if (resultingGraph.isValid ()) {
    result = resultingGraph.reader_lkeyList (THERE) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          @semanticTypePrecedenceGraph type                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_semanticTypePrecedenceGraph ("semanticTypePrecedenceGraph",
                                                    NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_semanticTypePrecedenceGraph::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_semanticTypePrecedenceGraph ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_semanticTypePrecedenceGraph::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_semanticTypePrecedenceGraph (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_semanticTypePrecedenceGraph GALGAS_semanticTypePrecedenceGraph::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_semanticTypePrecedenceGraph result ;
  const GALGAS_semanticTypePrecedenceGraph * p = (const GALGAS_semanticTypePrecedenceGraph *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_semanticTypePrecedenceGraph *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("semanticTypePrecedenceGraph", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_typeKind_enumeration::cEnumAssociatedValues_typeKind_enumeration (const GALGAS_enumConstantMap & inAssociatedValue0
                                                                                        COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_typeKind_enumeration::description (C_String & ioString,
                                                              const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_typeKind_enumeration::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_typeKind_enumeration * ptr = dynamic_cast<const cEnumAssociatedValues_typeKind_enumeration *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_typeKind_structure::cEnumAssociatedValues_typeKind_structure (const GALGAS_propertyMap & inAssociatedValue0
                                                                                    COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_typeKind_structure::description (C_String & ioString,
                                                            const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_typeKind_structure::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_typeKind_structure * ptr = dynamic_cast<const cEnumAssociatedValues_typeKind_structure *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_typeKind_integer::cEnumAssociatedValues_typeKind_integer (const GALGAS_bigint & inAssociatedValue0,
                                                                                const GALGAS_bigint & inAssociatedValue1,
                                                                                const GALGAS_bool & inAssociatedValue2,
                                                                                const GALGAS_uint & inAssociatedValue3
                                                                                COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1),
mAssociatedValue2 (inAssociatedValue2),
mAssociatedValue3 (inAssociatedValue3) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_typeKind_integer::description (C_String & ioString,
                                                          const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  mAssociatedValue2.description (ioString, inIndentation) ;
  mAssociatedValue3.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_typeKind_integer::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_typeKind_integer * ptr = dynamic_cast<const cEnumAssociatedValues_typeKind_integer *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue2.objectCompare (ptr->mAssociatedValue2) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue3.objectCompare (ptr->mAssociatedValue3) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind::GALGAS_typeKind (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_boolean (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_boolean ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_boolset (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_boolset ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_literalString (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_literalString ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_enumeration (const GALGAS_enumConstantMap & inAssociatedValue0
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_enumeration ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_typeKind_enumeration (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_structure (const GALGAS_propertyMap & inAssociatedValue0
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_structure ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_typeKind_structure (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_integer (const GALGAS_bigint & inAssociatedValue0,
                                                      const GALGAS_bigint & inAssociatedValue1,
                                                      const GALGAS_bool & inAssociatedValue2,
                                                      const GALGAS_uint & inAssociatedValue3
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid () && inAssociatedValue2.isValid () && inAssociatedValue3.isValid ()) {
    result.mEnum = kEnum_integer ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_typeKind_integer (inAssociatedValue0, inAssociatedValue1, inAssociatedValue2, inAssociatedValue3 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeKind::method_enumeration (GALGAS_enumConstantMap & outAssociatedValue0,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_enumeration) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @typeKind enumeration invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_typeKind_enumeration * ptr = (const cEnumAssociatedValues_typeKind_enumeration *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeKind::method_structure (GALGAS_propertyMap & outAssociatedValue0,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_structure) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @typeKind structure invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_typeKind_structure * ptr = (const cEnumAssociatedValues_typeKind_structure *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeKind::method_integer (GALGAS_bigint & outAssociatedValue0,
                                      GALGAS_bigint & outAssociatedValue1,
                                      GALGAS_bool & outAssociatedValue2,
                                      GALGAS_uint & outAssociatedValue3,
                                      C_Compiler * inCompiler
                                      COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_integer) {
    outAssociatedValue0.drop () ;
    outAssociatedValue1.drop () ;
    outAssociatedValue2.drop () ;
    outAssociatedValue3.drop () ;
    C_String s ;
    s << "method @typeKind integer invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_typeKind_integer * ptr = (const cEnumAssociatedValues_typeKind_integer *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
    outAssociatedValue1 = ptr->mAssociatedValue1 ;
    outAssociatedValue2 = ptr->mAssociatedValue2 ;
    outAssociatedValue3 = ptr->mAssociatedValue3 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_typeKind [7] = {
  "(not built)",
  "boolean",
  "boolset",
  "literalString",
  "enumeration",
  "structure",
  "integer"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isBoolean (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_boolean == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isBoolset (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_boolset == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isLiteralString (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_literalString == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isEnumeration (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_enumeration == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isStructure (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_structure == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isInteger (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_integer == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeKind::description (C_String & ioString,
                                   const int32_t inIndentation) const {
  ioString << "<enum @typeKind: " << gEnumNameArrayFor_typeKind [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_typeKind::objectCompare (const GALGAS_typeKind & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                   @typeKind type                                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_typeKind ("typeKind",
                                 NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_typeKind::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_typeKind ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_typeKind::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_typeKind (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  const GALGAS_typeKind * p = (const GALGAS_typeKind *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_typeKind *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("typeKind", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_globalLiteralStringMap::cMapElement_globalLiteralStringMap (const GALGAS_lstring & inKey,
                                                                        const GALGAS_string & in_mLiteralStringCname
                                                                        COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mLiteralStringCname (in_mLiteralStringCname) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_globalLiteralStringMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mLiteralStringCname.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_globalLiteralStringMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_globalLiteralStringMap (mAttribute_lkey, mAttribute_mLiteralStringCname COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_globalLiteralStringMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mLiteralStringCname" ":" ;
  mAttribute_mLiteralStringCname.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_globalLiteralStringMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_globalLiteralStringMap * operand = (cMapElement_globalLiteralStringMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mLiteralStringCname.objectCompare (operand->mAttribute_mLiteralStringCname) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalLiteralStringMap::GALGAS_globalLiteralStringMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalLiteralStringMap::GALGAS_globalLiteralStringMap (const GALGAS_globalLiteralStringMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalLiteralStringMap & GALGAS_globalLiteralStringMap::operator = (const GALGAS_globalLiteralStringMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalLiteralStringMap GALGAS_globalLiteralStringMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_globalLiteralStringMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalLiteralStringMap GALGAS_globalLiteralStringMap::constructor_mapWithMapToOverride (const GALGAS_globalLiteralStringMap & inMapToOverride
                                                                                               COMMA_LOCATION_ARGS) {
  GALGAS_globalLiteralStringMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalLiteralStringMap GALGAS_globalLiteralStringMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  GALGAS_globalLiteralStringMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalLiteralStringMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                         const GALGAS_string & inArgument0,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
  cMapElement_globalLiteralStringMap * p = NULL ;
  macroMyNew (p, cMapElement_globalLiteralStringMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@globalLiteralStringMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalLiteralStringMap::modifier_insertKey (GALGAS_lstring inKey,
                                                        GALGAS_string inArgument0,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  cMapElement_globalLiteralStringMap * p = NULL ;
  macroMyNew (p, cMapElement_globalLiteralStringMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "** internal error **" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_globalLiteralStringMap_searchKey = "** internal error **" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalLiteralStringMap::method_searchKey (GALGAS_lstring inKey,
                                                      GALGAS_string & outArgument0,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  const cMapElement_globalLiteralStringMap * p = (const cMapElement_globalLiteralStringMap *) performSearch (inKey,
                                                                                                               inCompiler,
                                                                                                               kSearchErrorMessage_globalLiteralStringMap_searchKey
                                                                                                               COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_globalLiteralStringMap) ;
    outArgument0 = p->mAttribute_mLiteralStringCname ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_globalLiteralStringMap::reader_mLiteralStringCnameForKey (const GALGAS_string & inKey,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_globalLiteralStringMap * p = (const cMapElement_globalLiteralStringMap *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalLiteralStringMap) ;
    result = p->mAttribute_mLiteralStringCname ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalLiteralStringMap::modifier_setMLiteralStringCnameForKey (GALGAS_string inAttributeValue,
                                                                           GALGAS_string inKey,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_globalLiteralStringMap * p = (cMapElement_globalLiteralStringMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalLiteralStringMap) ;
    p->mAttribute_mLiteralStringCname = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_globalLiteralStringMap * GALGAS_globalLiteralStringMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                       const GALGAS_string & inKey
                                                                                                       COMMA_LOCATION_ARGS) {
  cMapElement_globalLiteralStringMap * result = (cMapElement_globalLiteralStringMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_globalLiteralStringMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_globalLiteralStringMap::cEnumerator_globalLiteralStringMap (const GALGAS_globalLiteralStringMap & inEnumeratedObject,
                                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalLiteralStringMap_2D_element cEnumerator_globalLiteralStringMap::current (LOCATION_ARGS) const {
  const cMapElement_globalLiteralStringMap * p = (const cMapElement_globalLiteralStringMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalLiteralStringMap) ;
  return GALGAS_globalLiteralStringMap_2D_element (p->mAttribute_lkey, p->mAttribute_mLiteralStringCname) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_globalLiteralStringMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string cEnumerator_globalLiteralStringMap::current_mLiteralStringCname (LOCATION_ARGS) const {
  const cMapElement_globalLiteralStringMap * p = (const cMapElement_globalLiteralStringMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalLiteralStringMap) ;
  return p->mAttribute_mLiteralStringCname ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            @globalLiteralStringMap type                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_globalLiteralStringMap ("globalLiteralStringMap",
                                               NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_globalLiteralStringMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_globalLiteralStringMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_globalLiteralStringMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_globalLiteralStringMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalLiteralStringMap GALGAS_globalLiteralStringMap::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_globalLiteralStringMap result ;
  const GALGAS_globalLiteralStringMap * p = (const GALGAS_globalLiteralStringMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_globalLiteralStringMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("globalLiteralStringMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_globalConstantMap::cMapElement_globalConstantMap (const GALGAS_lstring & inKey,
                                                              const GALGAS_unifiedTypeMap_2D_proxy & in_mConstantType,
                                                              const GALGAS_operandIR & in_mExpressionCode
                                                              COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mConstantType (in_mConstantType),
mAttribute_mExpressionCode (in_mExpressionCode) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_globalConstantMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mConstantType.isValid () && mAttribute_mExpressionCode.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_globalConstantMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_globalConstantMap (mAttribute_lkey, mAttribute_mConstantType, mAttribute_mExpressionCode COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_globalConstantMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mConstantType" ":" ;
  mAttribute_mConstantType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mExpressionCode" ":" ;
  mAttribute_mExpressionCode.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_globalConstantMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_globalConstantMap * operand = (cMapElement_globalConstantMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mConstantType.objectCompare (operand->mAttribute_mConstantType) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mExpressionCode.objectCompare (operand->mAttribute_mExpressionCode) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMap::GALGAS_globalConstantMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMap::GALGAS_globalConstantMap (const GALGAS_globalConstantMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMap & GALGAS_globalConstantMap::operator = (const GALGAS_globalConstantMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMap GALGAS_globalConstantMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_globalConstantMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMap GALGAS_globalConstantMap::constructor_mapWithMapToOverride (const GALGAS_globalConstantMap & inMapToOverride
                                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_globalConstantMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMap GALGAS_globalConstantMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_globalConstantMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalConstantMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                    const GALGAS_unifiedTypeMap_2D_proxy & inArgument0,
                                                    const GALGAS_operandIR & inArgument1,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cMapElement_globalConstantMap * p = NULL ;
  macroMyNew (p, cMapElement_globalConstantMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@globalConstantMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalConstantMap::modifier_insertKey (GALGAS_lstring inKey,
                                                   GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                   GALGAS_operandIR inArgument1,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_globalConstantMap * p = NULL ;
  macroMyNew (p, cMapElement_globalConstantMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' constant is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_globalConstantMap_searchKey = "there is no '%K' constant" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalConstantMap::method_searchKey (GALGAS_lstring inKey,
                                                 GALGAS_unifiedTypeMap_2D_proxy & outArgument0,
                                                 GALGAS_operandIR & outArgument1,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  const cMapElement_globalConstantMap * p = (const cMapElement_globalConstantMap *) performSearch (inKey,
                                                                                                     inCompiler,
                                                                                                     kSearchErrorMessage_globalConstantMap_searchKey
                                                                                                     COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_globalConstantMap) ;
    outArgument0 = p->mAttribute_mConstantType ;
    outArgument1 = p->mAttribute_mExpressionCode ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_globalConstantMap::reader_mConstantTypeForKey (const GALGAS_string & inKey,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_globalConstantMap * p = (const cMapElement_globalConstantMap *) attributes ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalConstantMap) ;
    result = p->mAttribute_mConstantType ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR GALGAS_globalConstantMap::reader_mExpressionCodeForKey (const GALGAS_string & inKey,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_globalConstantMap * p = (const cMapElement_globalConstantMap *) attributes ;
  GALGAS_operandIR result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalConstantMap) ;
    result = p->mAttribute_mExpressionCode ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalConstantMap::modifier_setMConstantTypeForKey (GALGAS_unifiedTypeMap_2D_proxy inAttributeValue,
                                                                GALGAS_string inKey,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_globalConstantMap * p = (cMapElement_globalConstantMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalConstantMap) ;
    p->mAttribute_mConstantType = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalConstantMap::modifier_setMExpressionCodeForKey (GALGAS_operandIR inAttributeValue,
                                                                  GALGAS_string inKey,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_globalConstantMap * p = (cMapElement_globalConstantMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalConstantMap) ;
    p->mAttribute_mExpressionCode = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_globalConstantMap * GALGAS_globalConstantMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                             const GALGAS_string & inKey
                                                                                             COMMA_LOCATION_ARGS) {
  cMapElement_globalConstantMap * result = (cMapElement_globalConstantMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_globalConstantMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_globalConstantMap::cEnumerator_globalConstantMap (const GALGAS_globalConstantMap & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMap_2D_element cEnumerator_globalConstantMap::current (LOCATION_ARGS) const {
  const cMapElement_globalConstantMap * p = (const cMapElement_globalConstantMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalConstantMap) ;
  return GALGAS_globalConstantMap_2D_element (p->mAttribute_lkey, p->mAttribute_mConstantType, p->mAttribute_mExpressionCode) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_globalConstantMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_globalConstantMap::current_mConstantType (LOCATION_ARGS) const {
  const cMapElement_globalConstantMap * p = (const cMapElement_globalConstantMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalConstantMap) ;
  return p->mAttribute_mConstantType ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR cEnumerator_globalConstantMap::current_mExpressionCode (LOCATION_ARGS) const {
  const cMapElement_globalConstantMap * p = (const cMapElement_globalConstantMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalConstantMap) ;
  return p->mAttribute_mExpressionCode ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @globalConstantMap type                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_globalConstantMap ("globalConstantMap",
                                          NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_globalConstantMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_globalConstantMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_globalConstantMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_globalConstantMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMap GALGAS_globalConstantMap::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_globalConstantMap result ;
  const GALGAS_globalConstantMap * p = (const GALGAS_globalConstantMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_globalConstantMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("globalConstantMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_targetBaseTypeMap::cMapElement_targetBaseTypeMap (const GALGAS_lstring & inKey,
                                                              const GALGAS_string & in_mCType,
                                                              const GALGAS_uint & in_mSize,
                                                              const GALGAS_bool & in_mIsSigned
                                                              COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mCType (in_mCType),
mAttribute_mSize (in_mSize),
mAttribute_mIsSigned (in_mIsSigned) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_targetBaseTypeMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mCType.isValid () && mAttribute_mSize.isValid () && mAttribute_mIsSigned.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_targetBaseTypeMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_targetBaseTypeMap (mAttribute_lkey, mAttribute_mCType, mAttribute_mSize, mAttribute_mIsSigned COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_targetBaseTypeMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCType" ":" ;
  mAttribute_mCType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSize" ":" ;
  mAttribute_mSize.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIsSigned" ":" ;
  mAttribute_mIsSigned.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_targetBaseTypeMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_targetBaseTypeMap * operand = (cMapElement_targetBaseTypeMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mCType.objectCompare (operand->mAttribute_mCType) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSize.objectCompare (operand->mAttribute_mSize) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mIsSigned.objectCompare (operand->mAttribute_mIsSigned) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_targetBaseTypeMap::GALGAS_targetBaseTypeMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_targetBaseTypeMap::GALGAS_targetBaseTypeMap (const GALGAS_targetBaseTypeMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_targetBaseTypeMap & GALGAS_targetBaseTypeMap::operator = (const GALGAS_targetBaseTypeMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_targetBaseTypeMap GALGAS_targetBaseTypeMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_targetBaseTypeMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_targetBaseTypeMap GALGAS_targetBaseTypeMap::constructor_mapWithMapToOverride (const GALGAS_targetBaseTypeMap & inMapToOverride
                                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_targetBaseTypeMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_targetBaseTypeMap GALGAS_targetBaseTypeMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_targetBaseTypeMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_targetBaseTypeMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                    const GALGAS_string & inArgument0,
                                                    const GALGAS_uint & inArgument1,
                                                    const GALGAS_bool & inArgument2,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cMapElement_targetBaseTypeMap * p = NULL ;
  macroMyNew (p, cMapElement_targetBaseTypeMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@targetBaseTypeMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_targetBaseTypeMap::modifier_insertKey (GALGAS_lstring inKey,
                                                   GALGAS_string inArgument0,
                                                   GALGAS_uint inArgument1,
                                                   GALGAS_bool inArgument2,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_targetBaseTypeMap * p = NULL ;
  macroMyNew (p, cMapElement_targetBaseTypeMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' base type is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_targetBaseTypeMap_searchKey = "there is no '%K' base type" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_targetBaseTypeMap::method_searchKey (GALGAS_lstring inKey,
                                                 GALGAS_string & outArgument0,
                                                 GALGAS_uint & outArgument1,
                                                 GALGAS_bool & outArgument2,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  const cMapElement_targetBaseTypeMap * p = (const cMapElement_targetBaseTypeMap *) performSearch (inKey,
                                                                                                     inCompiler,
                                                                                                     kSearchErrorMessage_targetBaseTypeMap_searchKey
                                                                                                     COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_targetBaseTypeMap) ;
    outArgument0 = p->mAttribute_mCType ;
    outArgument1 = p->mAttribute_mSize ;
    outArgument2 = p->mAttribute_mIsSigned ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_targetBaseTypeMap::reader_mCTypeForKey (const GALGAS_string & inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_targetBaseTypeMap * p = (const cMapElement_targetBaseTypeMap *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_targetBaseTypeMap) ;
    result = p->mAttribute_mCType ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_targetBaseTypeMap::reader_mSizeForKey (const GALGAS_string & inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_targetBaseTypeMap * p = (const cMapElement_targetBaseTypeMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_targetBaseTypeMap) ;
    result = p->mAttribute_mSize ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_targetBaseTypeMap::reader_mIsSignedForKey (const GALGAS_string & inKey,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_targetBaseTypeMap * p = (const cMapElement_targetBaseTypeMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_targetBaseTypeMap) ;
    result = p->mAttribute_mIsSigned ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_targetBaseTypeMap::modifier_setMCTypeForKey (GALGAS_string inAttributeValue,
                                                         GALGAS_string inKey,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_targetBaseTypeMap * p = (cMapElement_targetBaseTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_targetBaseTypeMap) ;
    p->mAttribute_mCType = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_targetBaseTypeMap::modifier_setMSizeForKey (GALGAS_uint inAttributeValue,
                                                        GALGAS_string inKey,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_targetBaseTypeMap * p = (cMapElement_targetBaseTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_targetBaseTypeMap) ;
    p->mAttribute_mSize = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_targetBaseTypeMap::modifier_setMIsSignedForKey (GALGAS_bool inAttributeValue,
                                                            GALGAS_string inKey,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_targetBaseTypeMap * p = (cMapElement_targetBaseTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_targetBaseTypeMap) ;
    p->mAttribute_mIsSigned = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_targetBaseTypeMap * GALGAS_targetBaseTypeMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                             const GALGAS_string & inKey
                                                                                             COMMA_LOCATION_ARGS) {
  cMapElement_targetBaseTypeMap * result = (cMapElement_targetBaseTypeMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_targetBaseTypeMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_targetBaseTypeMap::cEnumerator_targetBaseTypeMap (const GALGAS_targetBaseTypeMap & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_targetBaseTypeMap_2D_element cEnumerator_targetBaseTypeMap::current (LOCATION_ARGS) const {
  const cMapElement_targetBaseTypeMap * p = (const cMapElement_targetBaseTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_targetBaseTypeMap) ;
  return GALGAS_targetBaseTypeMap_2D_element (p->mAttribute_lkey, p->mAttribute_mCType, p->mAttribute_mSize, p->mAttribute_mIsSigned) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_targetBaseTypeMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string cEnumerator_targetBaseTypeMap::current_mCType (LOCATION_ARGS) const {
  const cMapElement_targetBaseTypeMap * p = (const cMapElement_targetBaseTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_targetBaseTypeMap) ;
  return p->mAttribute_mCType ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_targetBaseTypeMap::current_mSize (LOCATION_ARGS) const {
  const cMapElement_targetBaseTypeMap * p = (const cMapElement_targetBaseTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_targetBaseTypeMap) ;
  return p->mAttribute_mSize ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_targetBaseTypeMap::current_mIsSigned (LOCATION_ARGS) const {
  const cMapElement_targetBaseTypeMap * p = (const cMapElement_targetBaseTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_targetBaseTypeMap) ;
  return p->mAttribute_mIsSigned ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @targetBaseTypeMap type                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_targetBaseTypeMap ("targetBaseTypeMap",
                                          NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_targetBaseTypeMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_targetBaseTypeMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_targetBaseTypeMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_targetBaseTypeMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_targetBaseTypeMap GALGAS_targetBaseTypeMap::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_targetBaseTypeMap result ;
  const GALGAS_targetBaseTypeMap * p = (const GALGAS_targetBaseTypeMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_targetBaseTypeMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("targetBaseTypeMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_globalVariableMap::cMapElement_globalVariableMap (const GALGAS_lstring & inKey,
                                                              const GALGAS_unifiedTypeMap_2D_proxy & in_mVariableType,
                                                              const GALGAS_stringset & in_mExecutionModeSet,
                                                              const GALGAS_allowedRoutineMap & in_mAllowedProcedureMap,
                                                              const GALGAS_operandIR & in_mInitialValue
                                                              COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mVariableType (in_mVariableType),
mAttribute_mExecutionModeSet (in_mExecutionModeSet),
mAttribute_mAllowedProcedureMap (in_mAllowedProcedureMap),
mAttribute_mInitialValue (in_mInitialValue) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_globalVariableMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mVariableType.isValid () && mAttribute_mExecutionModeSet.isValid () && mAttribute_mAllowedProcedureMap.isValid () && mAttribute_mInitialValue.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_globalVariableMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_globalVariableMap (mAttribute_lkey, mAttribute_mVariableType, mAttribute_mExecutionModeSet, mAttribute_mAllowedProcedureMap, mAttribute_mInitialValue COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_globalVariableMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mVariableType" ":" ;
  mAttribute_mVariableType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mExecutionModeSet" ":" ;
  mAttribute_mExecutionModeSet.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAllowedProcedureMap" ":" ;
  mAttribute_mAllowedProcedureMap.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInitialValue" ":" ;
  mAttribute_mInitialValue.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_globalVariableMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_globalVariableMap * operand = (cMapElement_globalVariableMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mVariableType.objectCompare (operand->mAttribute_mVariableType) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mExecutionModeSet.objectCompare (operand->mAttribute_mExecutionModeSet) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mAllowedProcedureMap.objectCompare (operand->mAttribute_mAllowedProcedureMap) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mInitialValue.objectCompare (operand->mAttribute_mInitialValue) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMap::GALGAS_globalVariableMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMap::GALGAS_globalVariableMap (const GALGAS_globalVariableMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMap & GALGAS_globalVariableMap::operator = (const GALGAS_globalVariableMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMap GALGAS_globalVariableMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_globalVariableMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMap GALGAS_globalVariableMap::constructor_mapWithMapToOverride (const GALGAS_globalVariableMap & inMapToOverride
                                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_globalVariableMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMap GALGAS_globalVariableMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_globalVariableMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalVariableMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                    const GALGAS_unifiedTypeMap_2D_proxy & inArgument0,
                                                    const GALGAS_stringset & inArgument1,
                                                    const GALGAS_allowedRoutineMap & inArgument2,
                                                    const GALGAS_operandIR & inArgument3,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cMapElement_globalVariableMap * p = NULL ;
  macroMyNew (p, cMapElement_globalVariableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@globalVariableMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalVariableMap::modifier_insertKey (GALGAS_lstring inKey,
                                                   GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                   GALGAS_stringset inArgument1,
                                                   GALGAS_allowedRoutineMap inArgument2,
                                                   GALGAS_operandIR inArgument3,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_globalVariableMap * p = NULL ;
  macroMyNew (p, cMapElement_globalVariableMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' global variable is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_globalVariableMap_searchKey = "there is no '%K' global variable" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalVariableMap::method_searchKey (GALGAS_lstring inKey,
                                                 GALGAS_unifiedTypeMap_2D_proxy & outArgument0,
                                                 GALGAS_stringset & outArgument1,
                                                 GALGAS_allowedRoutineMap & outArgument2,
                                                 GALGAS_operandIR & outArgument3,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  const cMapElement_globalVariableMap * p = (const cMapElement_globalVariableMap *) performSearch (inKey,
                                                                                                     inCompiler,
                                                                                                     kSearchErrorMessage_globalVariableMap_searchKey
                                                                                                     COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_globalVariableMap) ;
    outArgument0 = p->mAttribute_mVariableType ;
    outArgument1 = p->mAttribute_mExecutionModeSet ;
    outArgument2 = p->mAttribute_mAllowedProcedureMap ;
    outArgument3 = p->mAttribute_mInitialValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_globalVariableMap::reader_mVariableTypeForKey (const GALGAS_string & inKey,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_globalVariableMap * p = (const cMapElement_globalVariableMap *) attributes ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMap) ;
    result = p->mAttribute_mVariableType ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_stringset GALGAS_globalVariableMap::reader_mExecutionModeSetForKey (const GALGAS_string & inKey,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_globalVariableMap * p = (const cMapElement_globalVariableMap *) attributes ;
  GALGAS_stringset result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMap) ;
    result = p->mAttribute_mExecutionModeSet ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_allowedRoutineMap GALGAS_globalVariableMap::reader_mAllowedProcedureMapForKey (const GALGAS_string & inKey,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_globalVariableMap * p = (const cMapElement_globalVariableMap *) attributes ;
  GALGAS_allowedRoutineMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMap) ;
    result = p->mAttribute_mAllowedProcedureMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR GALGAS_globalVariableMap::reader_mInitialValueForKey (const GALGAS_string & inKey,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_globalVariableMap * p = (const cMapElement_globalVariableMap *) attributes ;
  GALGAS_operandIR result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMap) ;
    result = p->mAttribute_mInitialValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalVariableMap::modifier_setMVariableTypeForKey (GALGAS_unifiedTypeMap_2D_proxy inAttributeValue,
                                                                GALGAS_string inKey,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_globalVariableMap * p = (cMapElement_globalVariableMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMap) ;
    p->mAttribute_mVariableType = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalVariableMap::modifier_setMExecutionModeSetForKey (GALGAS_stringset inAttributeValue,
                                                                    GALGAS_string inKey,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_globalVariableMap * p = (cMapElement_globalVariableMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMap) ;
    p->mAttribute_mExecutionModeSet = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalVariableMap::modifier_setMAllowedProcedureMapForKey (GALGAS_allowedRoutineMap inAttributeValue,
                                                                       GALGAS_string inKey,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_globalVariableMap * p = (cMapElement_globalVariableMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMap) ;
    p->mAttribute_mAllowedProcedureMap = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalVariableMap::modifier_setMInitialValueForKey (GALGAS_operandIR inAttributeValue,
                                                                GALGAS_string inKey,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_globalVariableMap * p = (cMapElement_globalVariableMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMap) ;
    p->mAttribute_mInitialValue = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_globalVariableMap * GALGAS_globalVariableMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                             const GALGAS_string & inKey
                                                                                             COMMA_LOCATION_ARGS) {
  cMapElement_globalVariableMap * result = (cMapElement_globalVariableMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_globalVariableMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_globalVariableMap::cEnumerator_globalVariableMap (const GALGAS_globalVariableMap & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMap_2D_element cEnumerator_globalVariableMap::current (LOCATION_ARGS) const {
  const cMapElement_globalVariableMap * p = (const cMapElement_globalVariableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalVariableMap) ;
  return GALGAS_globalVariableMap_2D_element (p->mAttribute_lkey, p->mAttribute_mVariableType, p->mAttribute_mExecutionModeSet, p->mAttribute_mAllowedProcedureMap, p->mAttribute_mInitialValue) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_globalVariableMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_globalVariableMap::current_mVariableType (LOCATION_ARGS) const {
  const cMapElement_globalVariableMap * p = (const cMapElement_globalVariableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalVariableMap) ;
  return p->mAttribute_mVariableType ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_stringset cEnumerator_globalVariableMap::current_mExecutionModeSet (LOCATION_ARGS) const {
  const cMapElement_globalVariableMap * p = (const cMapElement_globalVariableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalVariableMap) ;
  return p->mAttribute_mExecutionModeSet ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_allowedRoutineMap cEnumerator_globalVariableMap::current_mAllowedProcedureMap (LOCATION_ARGS) const {
  const cMapElement_globalVariableMap * p = (const cMapElement_globalVariableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalVariableMap) ;
  return p->mAttribute_mAllowedProcedureMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR cEnumerator_globalVariableMap::current_mInitialValue (LOCATION_ARGS) const {
  const cMapElement_globalVariableMap * p = (const cMapElement_globalVariableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalVariableMap) ;
  return p->mAttribute_mInitialValue ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @globalVariableMap type                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_globalVariableMap ("globalVariableMap",
                                          NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_globalVariableMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_globalVariableMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_globalVariableMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_globalVariableMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMap GALGAS_globalVariableMap::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_globalVariableMap result ;
  const GALGAS_globalVariableMap * p = (const GALGAS_globalVariableMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_globalVariableMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("globalVariableMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_unifiedTypeMap::cMapElement_unifiedTypeMap (const GALGAS_lstring & inKey,
                                                        const GALGAS_typeKind & in_kind,
                                                        const GALGAS_constructorMap & in_constructorMap,
                                                        const GALGAS_procedureMap & in_procedureMap,
                                                        const GALGAS_bool & in_copiable,
                                                        const GALGAS_bool & in_equatable,
                                                        const GALGAS_bool & in_comparable
                                                        COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_kind (in_kind),
mAttribute_constructorMap (in_constructorMap),
mAttribute_procedureMap (in_procedureMap),
mAttribute_copiable (in_copiable),
mAttribute_equatable (in_equatable),
mAttribute_comparable (in_comparable) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_unifiedTypeMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_kind.isValid () && mAttribute_constructorMap.isValid () && mAttribute_procedureMap.isValid () && mAttribute_copiable.isValid () && mAttribute_equatable.isValid () && mAttribute_comparable.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_unifiedTypeMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_unifiedTypeMap (mAttribute_lkey, mAttribute_kind, mAttribute_constructorMap, mAttribute_procedureMap, mAttribute_copiable, mAttribute_equatable, mAttribute_comparable COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_unifiedTypeMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "kind" ":" ;
  mAttribute_kind.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "constructorMap" ":" ;
  mAttribute_constructorMap.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "procedureMap" ":" ;
  mAttribute_procedureMap.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "copiable" ":" ;
  mAttribute_copiable.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "equatable" ":" ;
  mAttribute_equatable.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "comparable" ":" ;
  mAttribute_comparable.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_unifiedTypeMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_unifiedTypeMap * operand = (cMapElement_unifiedTypeMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_kind.objectCompare (operand->mAttribute_kind) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_constructorMap.objectCompare (operand->mAttribute_constructorMap) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_procedureMap.objectCompare (operand->mAttribute_procedureMap) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_copiable.objectCompare (operand->mAttribute_copiable) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_equatable.objectCompare (operand->mAttribute_equatable) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_comparable.objectCompare (operand->mAttribute_comparable) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap::GALGAS_unifiedTypeMap (void) :
AC_GALGAS_uniqueMap () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap::GALGAS_unifiedTypeMap (const GALGAS_unifiedTypeMap & inSource) :
AC_GALGAS_uniqueMap (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap & GALGAS_unifiedTypeMap::operator = (const GALGAS_unifiedTypeMap & inSource) {
  * ((AC_GALGAS_uniqueMap *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap GALGAS_unifiedTypeMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_unifiedTypeMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton states                                                       *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton state names                                                  *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton actions                                                    *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton action names                                                 *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton transitions                                                  *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton final state issues                                           *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_insertKey (GALGAS_lstring inKey,
                                                GALGAS_typeKind inArgument0,
                                                GALGAS_constructorMap inArgument1,
                                                GALGAS_procedureMap inArgument2,
                                                GALGAS_bool inArgument3,
                                                GALGAS_bool inArgument4,
                                                GALGAS_bool inArgument5,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  cMapElement_unifiedTypeMap * p = NULL ;
  macroMyNew (p, cMapElement_unifiedTypeMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' type is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        0,
                        NULL,
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_unifiedTypeMap_searchKey = "there is no '%K' type" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::method_searchKey (GALGAS_lstring inKey,
                                              GALGAS_typeKind & outArgument0,
                                              GALGAS_constructorMap & outArgument1,
                                              GALGAS_procedureMap & outArgument2,
                                              GALGAS_bool & outArgument3,
                                              GALGAS_bool & outArgument4,
                                              GALGAS_bool & outArgument5,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) performSearch (inKey,
                                                                                               inCompiler,
                                                                                               kSearchErrorMessage_unifiedTypeMap_searchKey
                                                                                               COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
    outArgument4.drop () ;
    outArgument5.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    outArgument0 = p->mAttribute_kind ;
    outArgument1 = p->mAttribute_constructorMap ;
    outArgument2 = p->mAttribute_procedureMap ;
    outArgument3 = p->mAttribute_copiable ;
    outArgument4 = p->mAttribute_equatable ;
    outArgument5 = p->mAttribute_comparable ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_unifiedTypeMap::reader_kindForKey (const GALGAS_string & inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) attributes ;
  GALGAS_typeKind result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_kind ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap GALGAS_unifiedTypeMap::reader_constructorMapForKey (const GALGAS_string & inKey,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) attributes ;
  GALGAS_constructorMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_constructorMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap GALGAS_unifiedTypeMap::reader_procedureMapForKey (const GALGAS_string & inKey,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) attributes ;
  GALGAS_procedureMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_procedureMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_unifiedTypeMap::reader_copiableForKey (const GALGAS_string & inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_copiable ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_unifiedTypeMap::reader_equatableForKey (const GALGAS_string & inKey,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_equatable ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_unifiedTypeMap::reader_comparableForKey (const GALGAS_string & inKey,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_comparable ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_setKindForKey (GALGAS_typeKind inAttributeValue,
                                                    GALGAS_string inKey,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_unifiedTypeMap * p = (cMapElement_unifiedTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    p->mAttribute_kind = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_setConstructorMapForKey (GALGAS_constructorMap inAttributeValue,
                                                              GALGAS_string inKey,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_unifiedTypeMap * p = (cMapElement_unifiedTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    p->mAttribute_constructorMap = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_setProcedureMapForKey (GALGAS_procedureMap inAttributeValue,
                                                            GALGAS_string inKey,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_unifiedTypeMap * p = (cMapElement_unifiedTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    p->mAttribute_procedureMap = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_setCopiableForKey (GALGAS_bool inAttributeValue,
                                                        GALGAS_string inKey,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_unifiedTypeMap * p = (cMapElement_unifiedTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    p->mAttribute_copiable = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_setEquatableForKey (GALGAS_bool inAttributeValue,
                                                         GALGAS_string inKey,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_unifiedTypeMap * p = (cMapElement_unifiedTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    p->mAttribute_equatable = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_setComparableForKey (GALGAS_bool inAttributeValue,
                                                          GALGAS_string inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_unifiedTypeMap * p = (cMapElement_unifiedTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    p->mAttribute_comparable = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_unifiedTypeMap * GALGAS_unifiedTypeMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                       const GALGAS_string & inKey
                                                                                       COMMA_LOCATION_ARGS) {
  cMapElement_unifiedTypeMap * result = (cMapElement_unifiedTypeMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_unifiedTypeMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_unifiedTypeMap::cEnumerator_unifiedTypeMap (const GALGAS_unifiedTypeMap & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_unifiedTypeMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind cEnumerator_unifiedTypeMap::current_kind (LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
  return p->mAttribute_kind ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap cEnumerator_unifiedTypeMap::current_constructorMap (LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
  return p->mAttribute_constructorMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap cEnumerator_unifiedTypeMap::current_procedureMap (LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
  return p->mAttribute_procedureMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_unifiedTypeMap::current_copiable (LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
  return p->mAttribute_copiable ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_unifiedTypeMap::current_equatable (LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
  return p->mAttribute_equatable ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_unifiedTypeMap::current_comparable (LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
  return p->mAttribute_comparable ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                @unifiedTypeMap type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_unifiedTypeMap ("unifiedTypeMap",
                                       NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_unifiedTypeMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_unifiedTypeMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_unifiedTypeMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_unifiedTypeMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap GALGAS_unifiedTypeMap::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap result ;
  const GALGAS_unifiedTypeMap * p = (const GALGAS_unifiedTypeMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_unifiedTypeMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("unifiedTypeMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_constructorMap::cMapElement_constructorMap (const GALGAS_lstring & inKey,
                                                        const GALGAS_operandIR & in_mValue
                                                        COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mValue (in_mValue) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_constructorMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mValue.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_constructorMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_constructorMap (mAttribute_lkey, mAttribute_mValue COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_constructorMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mValue" ":" ;
  mAttribute_mValue.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_constructorMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_constructorMap * operand = (cMapElement_constructorMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValue.objectCompare (operand->mAttribute_mValue) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap::GALGAS_constructorMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap::GALGAS_constructorMap (const GALGAS_constructorMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap & GALGAS_constructorMap::operator = (const GALGAS_constructorMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap GALGAS_constructorMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_constructorMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap GALGAS_constructorMap::constructor_mapWithMapToOverride (const GALGAS_constructorMap & inMapToOverride
                                                                               COMMA_LOCATION_ARGS) {
  GALGAS_constructorMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap GALGAS_constructorMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  GALGAS_constructorMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_constructorMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                 const GALGAS_operandIR & inArgument0,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  cMapElement_constructorMap * p = NULL ;
  macroMyNew (p, cMapElement_constructorMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@constructorMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_constructorMap::modifier_insertKey (GALGAS_lstring inKey,
                                                GALGAS_operandIR inArgument0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  cMapElement_constructorMap * p = NULL ;
  macroMyNew (p, cMapElement_constructorMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' constructor is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_constructorMap_searchKey = "there is no '%K' constructor" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_constructorMap::method_searchKey (GALGAS_lstring inKey,
                                              GALGAS_operandIR & outArgument0,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  const cMapElement_constructorMap * p = (const cMapElement_constructorMap *) performSearch (inKey,
                                                                                               inCompiler,
                                                                                               kSearchErrorMessage_constructorMap_searchKey
                                                                                               COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_constructorMap) ;
    outArgument0 = p->mAttribute_mValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR GALGAS_constructorMap::reader_mValueForKey (const GALGAS_string & inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_constructorMap * p = (const cMapElement_constructorMap *) attributes ;
  GALGAS_operandIR result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_constructorMap) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_constructorMap::modifier_setMValueForKey (GALGAS_operandIR inAttributeValue,
                                                      GALGAS_string inKey,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_constructorMap * p = (cMapElement_constructorMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_constructorMap) ;
    p->mAttribute_mValue = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_constructorMap * GALGAS_constructorMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                       const GALGAS_string & inKey
                                                                                       COMMA_LOCATION_ARGS) {
  cMapElement_constructorMap * result = (cMapElement_constructorMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_constructorMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_constructorMap::cEnumerator_constructorMap (const GALGAS_constructorMap & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap_2D_element cEnumerator_constructorMap::current (LOCATION_ARGS) const {
  const cMapElement_constructorMap * p = (const cMapElement_constructorMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_constructorMap) ;
  return GALGAS_constructorMap_2D_element (p->mAttribute_lkey, p->mAttribute_mValue) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_constructorMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR cEnumerator_constructorMap::current_mValue (LOCATION_ARGS) const {
  const cMapElement_constructorMap * p = (const cMapElement_constructorMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_constructorMap) ;
  return p->mAttribute_mValue ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                @constructorMap type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_constructorMap ("constructorMap",
                                       NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_constructorMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_constructorMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_constructorMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_constructorMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap GALGAS_constructorMap::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_constructorMap result ;
  const GALGAS_constructorMap * p = (const GALGAS_constructorMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_constructorMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("constructorMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Class for element of '@typeList' list                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_typeList : public cCollectionElement {
  public : GALGAS_typeList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_typeList (const GALGAS_unifiedTypeMap_2D_proxy & in_mActualType
                                        COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_typeList::cCollectionElement_typeList (const GALGAS_unifiedTypeMap_2D_proxy & in_mActualType
                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mActualType) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_typeList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_typeList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_typeList (mObject.mAttribute_mActualType COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_typeList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mActualType" ":" ;
  mObject.mAttribute_mActualType.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_typeList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_typeList * operand = (cCollectionElement_typeList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_typeList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList::GALGAS_typeList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList::GALGAS_typeList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_typeList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::constructor_listWithValue (const GALGAS_unifiedTypeMap_2D_proxy & inOperand0
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_typeList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_typeList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                 const GALGAS_unifiedTypeMap_2D_proxy & in_mActualType
                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement_typeList * p = NULL ;
  macroMyNew (p, cCollectionElement_typeList (in_mActualType COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::addAssign_operation (const GALGAS_unifiedTypeMap_2D_proxy & inOperand0
                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_typeList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::modifier_insertAtIndex (const GALGAS_unifiedTypeMap_2D_proxy inOperand0,
                                              const GALGAS_uint inInsertionIndex,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_typeList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::modifier_removeAtIndex (GALGAS_unifiedTypeMap_2D_proxy & outOperand0,
                                              const GALGAS_uint inRemoveIndex,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_typeList * p = (cCollectionElement_typeList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_typeList) ;
      outOperand0 = p->mObject.mAttribute_mActualType ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::modifier_popFirst (GALGAS_unifiedTypeMap_2D_proxy & outOperand0,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_typeList * p = (cCollectionElement_typeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_typeList) ;
    outOperand0 = p->mObject.mAttribute_mActualType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::modifier_popLast (GALGAS_unifiedTypeMap_2D_proxy & outOperand0,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_typeList * p = (cCollectionElement_typeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_typeList) ;
    outOperand0 = p->mObject.mAttribute_mActualType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::method_first (GALGAS_unifiedTypeMap_2D_proxy & outOperand0,
                                    C_Compiler * inCompiler
                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_typeList * p = (cCollectionElement_typeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_typeList) ;
    outOperand0 = p->mObject.mAttribute_mActualType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::method_last (GALGAS_unifiedTypeMap_2D_proxy & outOperand0,
                                   C_Compiler * inCompiler
                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_typeList * p = (cCollectionElement_typeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_typeList) ;
    outOperand0 = p->mObject.mAttribute_mActualType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::operator_concat (const GALGAS_typeList & inOperand
                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_typeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::add_operation (const GALGAS_typeList & inOperand,
                                                C_Compiler * /* inCompiler */
                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_typeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::reader_subListWithRange (const GALGAS_range & inRange,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_typeList result = GALGAS_typeList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_typeList result = GALGAS_typeList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::dotAssign_operation (const GALGAS_typeList inOperand
                                           COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_typeList::reader_mActualTypeAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_typeList * p = (cCollectionElement_typeList *) attributes.ptr () ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_typeList) ;
    result = p->mObject.mAttribute_mActualType ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_typeList::cEnumerator_typeList (const GALGAS_typeList & inEnumeratedObject,
                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList_2D_element cEnumerator_typeList::current (LOCATION_ARGS) const {
  const cCollectionElement_typeList * p = (const cCollectionElement_typeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_typeList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_typeList::current_mActualType (LOCATION_ARGS) const {
  const cCollectionElement_typeList * p = (const cCollectionElement_typeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_typeList) ;
  return p->mObject.mAttribute_mActualType ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                   @typeList type                                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_typeList ("typeList",
                                 NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_typeList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_typeList ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_typeList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_typeList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  GALGAS_typeList result ;
  const GALGAS_typeList * p = (const GALGAS_typeList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_typeList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("typeList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_registerMapIR::cMapElement_registerMapIR (const GALGAS_lstring & inKey,
                                                      const GALGAS_string & in_mRegisterTypeName,
                                                      const GALGAS_bigint & in_mRegisterAddress
                                                      COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mRegisterTypeName (in_mRegisterTypeName),
mAttribute_mRegisterAddress (in_mRegisterAddress) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_registerMapIR::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mRegisterTypeName.isValid () && mAttribute_mRegisterAddress.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_registerMapIR::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_registerMapIR (mAttribute_lkey, mAttribute_mRegisterTypeName, mAttribute_mRegisterAddress COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_registerMapIR::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterTypeName" ":" ;
  mAttribute_mRegisterTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterAddress" ":" ;
  mAttribute_mRegisterAddress.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_registerMapIR::compare (const cCollectionElement * inOperand) const {
  cMapElement_registerMapIR * operand = (cMapElement_registerMapIR *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterTypeName.objectCompare (operand->mAttribute_mRegisterTypeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterAddress.objectCompare (operand->mAttribute_mRegisterAddress) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMapIR::GALGAS_registerMapIR (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMapIR::GALGAS_registerMapIR (const GALGAS_registerMapIR & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMapIR & GALGAS_registerMapIR::operator = (const GALGAS_registerMapIR & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMapIR GALGAS_registerMapIR::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_registerMapIR result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMapIR GALGAS_registerMapIR::constructor_mapWithMapToOverride (const GALGAS_registerMapIR & inMapToOverride
                                                                             COMMA_LOCATION_ARGS) {
  GALGAS_registerMapIR result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMapIR GALGAS_registerMapIR::reader_overriddenMap (C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  GALGAS_registerMapIR result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerMapIR::addAssign_operation (const GALGAS_lstring & inKey,
                                                const GALGAS_string & inArgument0,
                                                const GALGAS_bigint & inArgument1,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  cMapElement_registerMapIR * p = NULL ;
  macroMyNew (p, cMapElement_registerMapIR (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@registerMapIR insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerMapIR::modifier_insertKey (GALGAS_lstring inKey,
                                               GALGAS_string inArgument0,
                                               GALGAS_bigint inArgument1,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  cMapElement_registerMapIR * p = NULL ;
  macroMyNew (p, cMapElement_registerMapIR (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "** internal error **" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_registerMapIR_searchKey = "** internal error **" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerMapIR::method_searchKey (GALGAS_lstring inKey,
                                             GALGAS_string & outArgument0,
                                             GALGAS_bigint & outArgument1,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  const cMapElement_registerMapIR * p = (const cMapElement_registerMapIR *) performSearch (inKey,
                                                                                             inCompiler,
                                                                                             kSearchErrorMessage_registerMapIR_searchKey
                                                                                             COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_registerMapIR) ;
    outArgument0 = p->mAttribute_mRegisterTypeName ;
    outArgument1 = p->mAttribute_mRegisterAddress ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_registerMapIR::reader_mRegisterTypeNameForKey (const GALGAS_string & inKey,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerMapIR * p = (const cMapElement_registerMapIR *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMapIR) ;
    result = p->mAttribute_mRegisterTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bigint GALGAS_registerMapIR::reader_mRegisterAddressForKey (const GALGAS_string & inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerMapIR * p = (const cMapElement_registerMapIR *) attributes ;
  GALGAS_bigint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMapIR) ;
    result = p->mAttribute_mRegisterAddress ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerMapIR::modifier_setMRegisterTypeNameForKey (GALGAS_string inAttributeValue,
                                                                GALGAS_string inKey,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerMapIR * p = (cMapElement_registerMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMapIR) ;
    p->mAttribute_mRegisterTypeName = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerMapIR::modifier_setMRegisterAddressForKey (GALGAS_bigint inAttributeValue,
                                                               GALGAS_string inKey,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerMapIR * p = (cMapElement_registerMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerMapIR) ;
    p->mAttribute_mRegisterAddress = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_registerMapIR * GALGAS_registerMapIR::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                     const GALGAS_string & inKey
                                                                                     COMMA_LOCATION_ARGS) {
  cMapElement_registerMapIR * result = (cMapElement_registerMapIR *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_registerMapIR) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_registerMapIR::cEnumerator_registerMapIR (const GALGAS_registerMapIR & inEnumeratedObject,
                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMapIR_2D_element cEnumerator_registerMapIR::current (LOCATION_ARGS) const {
  const cMapElement_registerMapIR * p = (const cMapElement_registerMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerMapIR) ;
  return GALGAS_registerMapIR_2D_element (p->mAttribute_lkey, p->mAttribute_mRegisterTypeName, p->mAttribute_mRegisterAddress) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_registerMapIR::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string cEnumerator_registerMapIR::current_mRegisterTypeName (LOCATION_ARGS) const {
  const cMapElement_registerMapIR * p = (const cMapElement_registerMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerMapIR) ;
  return p->mAttribute_mRegisterTypeName ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bigint cEnumerator_registerMapIR::current_mRegisterAddress (LOCATION_ARGS) const {
  const cMapElement_registerMapIR * p = (const cMapElement_registerMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerMapIR) ;
  return p->mAttribute_mRegisterAddress ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 @registerMapIR type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerMapIR ("registerMapIR",
                                      NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerMapIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerMapIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerMapIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerMapIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerMapIR GALGAS_registerMapIR::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_registerMapIR result ;
  const GALGAS_registerMapIR * p = (const GALGAS_registerMapIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerMapIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("registerMapIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_globalVariableMapIR::cMapElement_globalVariableMapIR (const GALGAS_lstring & inKey,
                                                                  const GALGAS_unifiedTypeMap_2D_proxy & in_mType,
                                                                  const GALGAS_bool & in_mGenerateVolatile,
                                                                  const GALGAS_operandIR & in_mInitialValue
                                                                  COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mType (in_mType),
mAttribute_mGenerateVolatile (in_mGenerateVolatile),
mAttribute_mInitialValue (in_mInitialValue) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_globalVariableMapIR::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mType.isValid () && mAttribute_mGenerateVolatile.isValid () && mAttribute_mInitialValue.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_globalVariableMapIR::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_globalVariableMapIR (mAttribute_lkey, mAttribute_mType, mAttribute_mGenerateVolatile, mAttribute_mInitialValue COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_globalVariableMapIR::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mAttribute_mType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mGenerateVolatile" ":" ;
  mAttribute_mGenerateVolatile.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInitialValue" ":" ;
  mAttribute_mInitialValue.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_globalVariableMapIR::compare (const cCollectionElement * inOperand) const {
  cMapElement_globalVariableMapIR * operand = (cMapElement_globalVariableMapIR *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mType.objectCompare (operand->mAttribute_mType) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mGenerateVolatile.objectCompare (operand->mAttribute_mGenerateVolatile) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mInitialValue.objectCompare (operand->mAttribute_mInitialValue) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMapIR::GALGAS_globalVariableMapIR (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMapIR::GALGAS_globalVariableMapIR (const GALGAS_globalVariableMapIR & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMapIR & GALGAS_globalVariableMapIR::operator = (const GALGAS_globalVariableMapIR & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMapIR GALGAS_globalVariableMapIR::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_globalVariableMapIR result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMapIR GALGAS_globalVariableMapIR::constructor_mapWithMapToOverride (const GALGAS_globalVariableMapIR & inMapToOverride
                                                                                         COMMA_LOCATION_ARGS) {
  GALGAS_globalVariableMapIR result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMapIR GALGAS_globalVariableMapIR::reader_overriddenMap (C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  GALGAS_globalVariableMapIR result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalVariableMapIR::addAssign_operation (const GALGAS_lstring & inKey,
                                                      const GALGAS_unifiedTypeMap_2D_proxy & inArgument0,
                                                      const GALGAS_bool & inArgument1,
                                                      const GALGAS_operandIR & inArgument2,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  cMapElement_globalVariableMapIR * p = NULL ;
  macroMyNew (p, cMapElement_globalVariableMapIR (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@globalVariableMapIR insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalVariableMapIR::modifier_insertKey (GALGAS_lstring inKey,
                                                     GALGAS_unifiedTypeMap_2D_proxy inArgument0,
                                                     GALGAS_bool inArgument1,
                                                     GALGAS_operandIR inArgument2,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  cMapElement_globalVariableMapIR * p = NULL ;
  macroMyNew (p, cMapElement_globalVariableMapIR (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "** internal error **" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_globalVariableMapIR_searchKey = "** internal error **" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalVariableMapIR::method_searchKey (GALGAS_lstring inKey,
                                                   GALGAS_unifiedTypeMap_2D_proxy & outArgument0,
                                                   GALGAS_bool & outArgument1,
                                                   GALGAS_operandIR & outArgument2,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  const cMapElement_globalVariableMapIR * p = (const cMapElement_globalVariableMapIR *) performSearch (inKey,
                                                                                                         inCompiler,
                                                                                                         kSearchErrorMessage_globalVariableMapIR_searchKey
                                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_globalVariableMapIR) ;
    outArgument0 = p->mAttribute_mType ;
    outArgument1 = p->mAttribute_mGenerateVolatile ;
    outArgument2 = p->mAttribute_mInitialValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_globalVariableMapIR::reader_mTypeForKey (const GALGAS_string & inKey,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_globalVariableMapIR * p = (const cMapElement_globalVariableMapIR *) attributes ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMapIR) ;
    result = p->mAttribute_mType ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_globalVariableMapIR::reader_mGenerateVolatileForKey (const GALGAS_string & inKey,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_globalVariableMapIR * p = (const cMapElement_globalVariableMapIR *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMapIR) ;
    result = p->mAttribute_mGenerateVolatile ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR GALGAS_globalVariableMapIR::reader_mInitialValueForKey (const GALGAS_string & inKey,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_globalVariableMapIR * p = (const cMapElement_globalVariableMapIR *) attributes ;
  GALGAS_operandIR result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMapIR) ;
    result = p->mAttribute_mInitialValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalVariableMapIR::modifier_setMTypeForKey (GALGAS_unifiedTypeMap_2D_proxy inAttributeValue,
                                                          GALGAS_string inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_globalVariableMapIR * p = (cMapElement_globalVariableMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMapIR) ;
    p->mAttribute_mType = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalVariableMapIR::modifier_setMGenerateVolatileForKey (GALGAS_bool inAttributeValue,
                                                                      GALGAS_string inKey,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_globalVariableMapIR * p = (cMapElement_globalVariableMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMapIR) ;
    p->mAttribute_mGenerateVolatile = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalVariableMapIR::modifier_setMInitialValueForKey (GALGAS_operandIR inAttributeValue,
                                                                  GALGAS_string inKey,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_globalVariableMapIR * p = (cMapElement_globalVariableMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalVariableMapIR) ;
    p->mAttribute_mInitialValue = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_globalVariableMapIR * GALGAS_globalVariableMapIR::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                 const GALGAS_string & inKey
                                                                                                 COMMA_LOCATION_ARGS) {
  cMapElement_globalVariableMapIR * result = (cMapElement_globalVariableMapIR *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_globalVariableMapIR) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_globalVariableMapIR::cEnumerator_globalVariableMapIR (const GALGAS_globalVariableMapIR & inEnumeratedObject,
                                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMapIR_2D_element cEnumerator_globalVariableMapIR::current (LOCATION_ARGS) const {
  const cMapElement_globalVariableMapIR * p = (const cMapElement_globalVariableMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalVariableMapIR) ;
  return GALGAS_globalVariableMapIR_2D_element (p->mAttribute_lkey, p->mAttribute_mType, p->mAttribute_mGenerateVolatile, p->mAttribute_mInitialValue) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_globalVariableMapIR::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_globalVariableMapIR::current_mType (LOCATION_ARGS) const {
  const cMapElement_globalVariableMapIR * p = (const cMapElement_globalVariableMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalVariableMapIR) ;
  return p->mAttribute_mType ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_globalVariableMapIR::current_mGenerateVolatile (LOCATION_ARGS) const {
  const cMapElement_globalVariableMapIR * p = (const cMapElement_globalVariableMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalVariableMapIR) ;
  return p->mAttribute_mGenerateVolatile ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR cEnumerator_globalVariableMapIR::current_mInitialValue (LOCATION_ARGS) const {
  const cMapElement_globalVariableMapIR * p = (const cMapElement_globalVariableMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalVariableMapIR) ;
  return p->mAttribute_mInitialValue ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              @globalVariableMapIR type                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_globalVariableMapIR ("globalVariableMapIR",
                                            NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_globalVariableMapIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_globalVariableMapIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_globalVariableMapIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_globalVariableMapIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalVariableMapIR GALGAS_globalVariableMapIR::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_globalVariableMapIR result ;
  const GALGAS_globalVariableMapIR * p = (const GALGAS_globalVariableMapIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_globalVariableMapIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("globalVariableMapIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_globalConstantMapIR::cMapElement_globalConstantMapIR (const GALGAS_lstring & inKey,
                                                                  const GALGAS_operandIR & in_mValueExpressionGeneration
                                                                  COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mValueExpressionGeneration (in_mValueExpressionGeneration) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_globalConstantMapIR::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mValueExpressionGeneration.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_globalConstantMapIR::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_globalConstantMapIR (mAttribute_lkey, mAttribute_mValueExpressionGeneration COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_globalConstantMapIR::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mValueExpressionGeneration" ":" ;
  mAttribute_mValueExpressionGeneration.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_globalConstantMapIR::compare (const cCollectionElement * inOperand) const {
  cMapElement_globalConstantMapIR * operand = (cMapElement_globalConstantMapIR *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValueExpressionGeneration.objectCompare (operand->mAttribute_mValueExpressionGeneration) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMapIR::GALGAS_globalConstantMapIR (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMapIR::GALGAS_globalConstantMapIR (const GALGAS_globalConstantMapIR & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMapIR & GALGAS_globalConstantMapIR::operator = (const GALGAS_globalConstantMapIR & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMapIR GALGAS_globalConstantMapIR::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_globalConstantMapIR result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMapIR GALGAS_globalConstantMapIR::constructor_mapWithMapToOverride (const GALGAS_globalConstantMapIR & inMapToOverride
                                                                                         COMMA_LOCATION_ARGS) {
  GALGAS_globalConstantMapIR result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMapIR GALGAS_globalConstantMapIR::reader_overriddenMap (C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  GALGAS_globalConstantMapIR result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalConstantMapIR::addAssign_operation (const GALGAS_lstring & inKey,
                                                      const GALGAS_operandIR & inArgument0,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  cMapElement_globalConstantMapIR * p = NULL ;
  macroMyNew (p, cMapElement_globalConstantMapIR (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@globalConstantMapIR insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalConstantMapIR::modifier_insertKey (GALGAS_lstring inKey,
                                                     GALGAS_operandIR inArgument0,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  cMapElement_globalConstantMapIR * p = NULL ;
  macroMyNew (p, cMapElement_globalConstantMapIR (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "** internal error **" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_globalConstantMapIR_searchKey = "** internal error **" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalConstantMapIR::method_searchKey (GALGAS_lstring inKey,
                                                   GALGAS_operandIR & outArgument0,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  const cMapElement_globalConstantMapIR * p = (const cMapElement_globalConstantMapIR *) performSearch (inKey,
                                                                                                         inCompiler,
                                                                                                         kSearchErrorMessage_globalConstantMapIR_searchKey
                                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_globalConstantMapIR) ;
    outArgument0 = p->mAttribute_mValueExpressionGeneration ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR GALGAS_globalConstantMapIR::reader_mValueExpressionGenerationForKey (const GALGAS_string & inKey,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_globalConstantMapIR * p = (const cMapElement_globalConstantMapIR *) attributes ;
  GALGAS_operandIR result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalConstantMapIR) ;
    result = p->mAttribute_mValueExpressionGeneration ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_globalConstantMapIR::modifier_setMValueExpressionGenerationForKey (GALGAS_operandIR inAttributeValue,
                                                                               GALGAS_string inKey,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_globalConstantMapIR * p = (cMapElement_globalConstantMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_globalConstantMapIR) ;
    p->mAttribute_mValueExpressionGeneration = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_globalConstantMapIR * GALGAS_globalConstantMapIR::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                 const GALGAS_string & inKey
                                                                                                 COMMA_LOCATION_ARGS) {
  cMapElement_globalConstantMapIR * result = (cMapElement_globalConstantMapIR *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_globalConstantMapIR) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_globalConstantMapIR::cEnumerator_globalConstantMapIR (const GALGAS_globalConstantMapIR & inEnumeratedObject,
                                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMapIR_2D_element cEnumerator_globalConstantMapIR::current (LOCATION_ARGS) const {
  const cMapElement_globalConstantMapIR * p = (const cMapElement_globalConstantMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalConstantMapIR) ;
  return GALGAS_globalConstantMapIR_2D_element (p->mAttribute_lkey, p->mAttribute_mValueExpressionGeneration) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_globalConstantMapIR::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_operandIR cEnumerator_globalConstantMapIR::current_mValueExpressionGeneration (LOCATION_ARGS) const {
  const cMapElement_globalConstantMapIR * p = (const cMapElement_globalConstantMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_globalConstantMapIR) ;
  return p->mAttribute_mValueExpressionGeneration ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              @globalConstantMapIR type                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_globalConstantMapIR ("globalConstantMapIR",
                                            NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_globalConstantMapIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_globalConstantMapIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_globalConstantMapIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_globalConstantMapIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_globalConstantMapIR GALGAS_globalConstantMapIR::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_globalConstantMapIR result ;
  const GALGAS_globalConstantMapIR * p = (const GALGAS_globalConstantMapIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_globalConstantMapIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("globalConstantMapIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_typeMapIR::cMapElement_typeMapIR (const GALGAS_lstring & inKey,
                                              const GALGAS_abstractTypeIR & in_mType
                                              COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mType (in_mType) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_typeMapIR::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mType.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_typeMapIR::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_typeMapIR (mAttribute_lkey, mAttribute_mType COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_typeMapIR::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mAttribute_mType.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_typeMapIR::compare (const cCollectionElement * inOperand) const {
  cMapElement_typeMapIR * operand = (cMapElement_typeMapIR *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mType.objectCompare (operand->mAttribute_mType) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeMapIR::GALGAS_typeMapIR (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeMapIR::GALGAS_typeMapIR (const GALGAS_typeMapIR & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeMapIR & GALGAS_typeMapIR::operator = (const GALGAS_typeMapIR & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeMapIR GALGAS_typeMapIR::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_typeMapIR result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeMapIR GALGAS_typeMapIR::constructor_mapWithMapToOverride (const GALGAS_typeMapIR & inMapToOverride
                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_typeMapIR result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeMapIR GALGAS_typeMapIR::reader_overriddenMap (C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_typeMapIR result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeMapIR::addAssign_operation (const GALGAS_lstring & inKey,
                                            const GALGAS_abstractTypeIR & inArgument0,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) {
  cMapElement_typeMapIR * p = NULL ;
  macroMyNew (p, cMapElement_typeMapIR (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@typeMapIR insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeMapIR::modifier_insertKey (GALGAS_lstring inKey,
                                           GALGAS_abstractTypeIR inArgument0,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) {
  cMapElement_typeMapIR * p = NULL ;
  macroMyNew (p, cMapElement_typeMapIR (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "** internal error **" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_typeMapIR_searchKey = "** internal error **" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeMapIR::method_searchKey (GALGAS_lstring inKey,
                                         GALGAS_abstractTypeIR & outArgument0,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  const cMapElement_typeMapIR * p = (const cMapElement_typeMapIR *) performSearch (inKey,
                                                                                     inCompiler,
                                                                                     kSearchErrorMessage_typeMapIR_searchKey
                                                                                     COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_typeMapIR) ;
    outArgument0 = p->mAttribute_mType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_abstractTypeIR GALGAS_typeMapIR::reader_mTypeForKey (const GALGAS_string & inKey,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_typeMapIR * p = (const cMapElement_typeMapIR *) attributes ;
  GALGAS_abstractTypeIR result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_typeMapIR) ;
    result = p->mAttribute_mType ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeMapIR::modifier_setMTypeForKey (GALGAS_abstractTypeIR inAttributeValue,
                                                GALGAS_string inKey,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_typeMapIR * p = (cMapElement_typeMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_typeMapIR) ;
    p->mAttribute_mType = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_typeMapIR * GALGAS_typeMapIR::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                             const GALGAS_string & inKey
                                                                             COMMA_LOCATION_ARGS) {
  cMapElement_typeMapIR * result = (cMapElement_typeMapIR *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_typeMapIR) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_typeMapIR::cEnumerator_typeMapIR (const GALGAS_typeMapIR & inEnumeratedObject,
                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeMapIR_2D_element cEnumerator_typeMapIR::current (LOCATION_ARGS) const {
  const cMapElement_typeMapIR * p = (const cMapElement_typeMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_typeMapIR) ;
  return GALGAS_typeMapIR_2D_element (p->mAttribute_lkey, p->mAttribute_mType) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_typeMapIR::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_abstractTypeIR cEnumerator_typeMapIR::current_mType (LOCATION_ARGS) const {
  const cMapElement_typeMapIR * p = (const cMapElement_typeMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_typeMapIR) ;
  return p->mAttribute_mType ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                   @typeMapIR type                                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_typeMapIR ("typeMapIR",
                                  NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_typeMapIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_typeMapIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_typeMapIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_typeMapIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeMapIR GALGAS_typeMapIR::extractObject (const GALGAS_object & inObject,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  GALGAS_typeMapIR result ;
  const GALGAS_typeMapIR * p = (const GALGAS_typeMapIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_typeMapIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("typeMapIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_procedureMapIR::cMapElement_procedureMapIR (const GALGAS_lstring & inKey,
                                                        const GALGAS_procFormalArgumentListForGeneration & in_mFormalArgumentListForGeneration,
                                                        const GALGAS_instructionListIR & in_mInstructionGenerationList,
                                                        const GALGAS_bool & in_mIsRequired,
                                                        const GALGAS_bool & in_mWarnIfUnused,
                                                        const GALGAS_bool & in_mWeak
                                                        COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mFormalArgumentListForGeneration (in_mFormalArgumentListForGeneration),
mAttribute_mInstructionGenerationList (in_mInstructionGenerationList),
mAttribute_mIsRequired (in_mIsRequired),
mAttribute_mWarnIfUnused (in_mWarnIfUnused),
mAttribute_mWeak (in_mWeak) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_procedureMapIR::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mFormalArgumentListForGeneration.isValid () && mAttribute_mInstructionGenerationList.isValid () && mAttribute_mIsRequired.isValid () && mAttribute_mWarnIfUnused.isValid () && mAttribute_mWeak.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_procedureMapIR::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_procedureMapIR (mAttribute_lkey, mAttribute_mFormalArgumentListForGeneration, mAttribute_mInstructionGenerationList, mAttribute_mIsRequired, mAttribute_mWarnIfUnused, mAttribute_mWeak COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_procedureMapIR::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFormalArgumentListForGeneration" ":" ;
  mAttribute_mFormalArgumentListForGeneration.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInstructionGenerationList" ":" ;
  mAttribute_mInstructionGenerationList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIsRequired" ":" ;
  mAttribute_mIsRequired.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mWarnIfUnused" ":" ;
  mAttribute_mWarnIfUnused.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mWeak" ":" ;
  mAttribute_mWeak.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_procedureMapIR::compare (const cCollectionElement * inOperand) const {
  cMapElement_procedureMapIR * operand = (cMapElement_procedureMapIR *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mFormalArgumentListForGeneration.objectCompare (operand->mAttribute_mFormalArgumentListForGeneration) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionGenerationList.objectCompare (operand->mAttribute_mInstructionGenerationList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mIsRequired.objectCompare (operand->mAttribute_mIsRequired) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mWarnIfUnused.objectCompare (operand->mAttribute_mWarnIfUnused) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mWeak.objectCompare (operand->mAttribute_mWeak) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMapIR::GALGAS_procedureMapIR (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMapIR::GALGAS_procedureMapIR (const GALGAS_procedureMapIR & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMapIR & GALGAS_procedureMapIR::operator = (const GALGAS_procedureMapIR & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMapIR GALGAS_procedureMapIR::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_procedureMapIR result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMapIR GALGAS_procedureMapIR::constructor_mapWithMapToOverride (const GALGAS_procedureMapIR & inMapToOverride
                                                                               COMMA_LOCATION_ARGS) {
  GALGAS_procedureMapIR result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMapIR GALGAS_procedureMapIR::reader_overriddenMap (C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  GALGAS_procedureMapIR result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMapIR::addAssign_operation (const GALGAS_lstring & inKey,
                                                 const GALGAS_procFormalArgumentListForGeneration & inArgument0,
                                                 const GALGAS_instructionListIR & inArgument1,
                                                 const GALGAS_bool & inArgument2,
                                                 const GALGAS_bool & inArgument3,
                                                 const GALGAS_bool & inArgument4,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  cMapElement_procedureMapIR * p = NULL ;
  macroMyNew (p, cMapElement_procedureMapIR (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@procedureMapIR insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMapIR::modifier_insertKey (GALGAS_lstring inKey,
                                                GALGAS_procFormalArgumentListForGeneration inArgument0,
                                                GALGAS_instructionListIR inArgument1,
                                                GALGAS_bool inArgument2,
                                                GALGAS_bool inArgument3,
                                                GALGAS_bool inArgument4,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  cMapElement_procedureMapIR * p = NULL ;
  macroMyNew (p, cMapElement_procedureMapIR (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "** internal error **" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_procedureMapIR_searchKey = "** internal error **" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMapIR::method_searchKey (GALGAS_lstring inKey,
                                              GALGAS_procFormalArgumentListForGeneration & outArgument0,
                                              GALGAS_instructionListIR & outArgument1,
                                              GALGAS_bool & outArgument2,
                                              GALGAS_bool & outArgument3,
                                              GALGAS_bool & outArgument4,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  const cMapElement_procedureMapIR * p = (const cMapElement_procedureMapIR *) performSearch (inKey,
                                                                                               inCompiler,
                                                                                               kSearchErrorMessage_procedureMapIR_searchKey
                                                                                               COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
    outArgument4.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_procedureMapIR) ;
    outArgument0 = p->mAttribute_mFormalArgumentListForGeneration ;
    outArgument1 = p->mAttribute_mInstructionGenerationList ;
    outArgument2 = p->mAttribute_mIsRequired ;
    outArgument3 = p->mAttribute_mWarnIfUnused ;
    outArgument4 = p->mAttribute_mWeak ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMapIR::modifier_removeKey (GALGAS_lstring inKey,
                                                GALGAS_procFormalArgumentListForGeneration & outArgument0,
                                                GALGAS_instructionListIR & outArgument1,
                                                GALGAS_bool & outArgument2,
                                                GALGAS_bool & outArgument3,
                                                GALGAS_bool & outArgument4,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  const char * kRemoveErrorMessage = "** internal error **" ;
  capCollectionElement attributes ;
  performRemove (inKey, attributes, inCompiler, kRemoveErrorMessage COMMA_THERE) ;
  cMapElement_procedureMapIR * p = (cMapElement_procedureMapIR *) attributes.ptr () ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMapIR) ;
    outArgument0 = p->mAttribute_mFormalArgumentListForGeneration ;
    outArgument1 = p->mAttribute_mInstructionGenerationList ;
    outArgument2 = p->mAttribute_mIsRequired ;
    outArgument3 = p->mAttribute_mWarnIfUnused ;
    outArgument4 = p->mAttribute_mWeak ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentListForGeneration GALGAS_procedureMapIR::reader_mFormalArgumentListForGenerationForKey (const GALGAS_string & inKey,
                                                                                                                 C_Compiler * inCompiler
                                                                                                                 COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_procedureMapIR * p = (const cMapElement_procedureMapIR *) attributes ;
  GALGAS_procFormalArgumentListForGeneration result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMapIR) ;
    result = p->mAttribute_mFormalArgumentListForGeneration ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_instructionListIR GALGAS_procedureMapIR::reader_mInstructionGenerationListForKey (const GALGAS_string & inKey,
                                                                                         C_Compiler * inCompiler
                                                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_procedureMapIR * p = (const cMapElement_procedureMapIR *) attributes ;
  GALGAS_instructionListIR result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMapIR) ;
    result = p->mAttribute_mInstructionGenerationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procedureMapIR::reader_mIsRequiredForKey (const GALGAS_string & inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_procedureMapIR * p = (const cMapElement_procedureMapIR *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMapIR) ;
    result = p->mAttribute_mIsRequired ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procedureMapIR::reader_mWarnIfUnusedForKey (const GALGAS_string & inKey,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_procedureMapIR * p = (const cMapElement_procedureMapIR *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMapIR) ;
    result = p->mAttribute_mWarnIfUnused ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procedureMapIR::reader_mWeakForKey (const GALGAS_string & inKey,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_procedureMapIR * p = (const cMapElement_procedureMapIR *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMapIR) ;
    result = p->mAttribute_mWeak ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMapIR::modifier_setMFormalArgumentListForGenerationForKey (GALGAS_procFormalArgumentListForGeneration inAttributeValue,
                                                                                GALGAS_string inKey,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_procedureMapIR * p = (cMapElement_procedureMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMapIR) ;
    p->mAttribute_mFormalArgumentListForGeneration = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMapIR::modifier_setMInstructionGenerationListForKey (GALGAS_instructionListIR inAttributeValue,
                                                                          GALGAS_string inKey,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_procedureMapIR * p = (cMapElement_procedureMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMapIR) ;
    p->mAttribute_mInstructionGenerationList = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMapIR::modifier_setMIsRequiredForKey (GALGAS_bool inAttributeValue,
                                                           GALGAS_string inKey,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_procedureMapIR * p = (cMapElement_procedureMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMapIR) ;
    p->mAttribute_mIsRequired = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMapIR::modifier_setMWarnIfUnusedForKey (GALGAS_bool inAttributeValue,
                                                             GALGAS_string inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_procedureMapIR * p = (cMapElement_procedureMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMapIR) ;
    p->mAttribute_mWarnIfUnused = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureMapIR::modifier_setMWeakForKey (GALGAS_bool inAttributeValue,
                                                     GALGAS_string inKey,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_procedureMapIR * p = (cMapElement_procedureMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_procedureMapIR) ;
    p->mAttribute_mWeak = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_procedureMapIR * GALGAS_procedureMapIR::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                       const GALGAS_string & inKey
                                                                                       COMMA_LOCATION_ARGS) {
  cMapElement_procedureMapIR * result = (cMapElement_procedureMapIR *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_procedureMapIR) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_procedureMapIR::cEnumerator_procedureMapIR (const GALGAS_procedureMapIR & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMapIR_2D_element cEnumerator_procedureMapIR::current (LOCATION_ARGS) const {
  const cMapElement_procedureMapIR * p = (const cMapElement_procedureMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_procedureMapIR) ;
  return GALGAS_procedureMapIR_2D_element (p->mAttribute_lkey, p->mAttribute_mFormalArgumentListForGeneration, p->mAttribute_mInstructionGenerationList, p->mAttribute_mIsRequired, p->mAttribute_mWarnIfUnused, p->mAttribute_mWeak) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_procedureMapIR::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procFormalArgumentListForGeneration cEnumerator_procedureMapIR::current_mFormalArgumentListForGeneration (LOCATION_ARGS) const {
  const cMapElement_procedureMapIR * p = (const cMapElement_procedureMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_procedureMapIR) ;
  return p->mAttribute_mFormalArgumentListForGeneration ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_instructionListIR cEnumerator_procedureMapIR::current_mInstructionGenerationList (LOCATION_ARGS) const {
  const cMapElement_procedureMapIR * p = (const cMapElement_procedureMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_procedureMapIR) ;
  return p->mAttribute_mInstructionGenerationList ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_procedureMapIR::current_mIsRequired (LOCATION_ARGS) const {
  const cMapElement_procedureMapIR * p = (const cMapElement_procedureMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_procedureMapIR) ;
  return p->mAttribute_mIsRequired ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_procedureMapIR::current_mWarnIfUnused (LOCATION_ARGS) const {
  const cMapElement_procedureMapIR * p = (const cMapElement_procedureMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_procedureMapIR) ;
  return p->mAttribute_mWarnIfUnused ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_procedureMapIR::current_mWeak (LOCATION_ARGS) const {
  const cMapElement_procedureMapIR * p = (const cMapElement_procedureMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_procedureMapIR) ;
  return p->mAttribute_mWeak ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                @procedureMapIR type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_procedureMapIR ("procedureMapIR",
                                       NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_procedureMapIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_procedureMapIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_procedureMapIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_procedureMapIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMapIR GALGAS_procedureMapIR::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_procedureMapIR result ;
  const GALGAS_procedureMapIR * p = (const GALGAS_procedureMapIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_procedureMapIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("procedureMapIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_functionMapIR::cMapElement_functionMapIR (const GALGAS_lstring & inKey,
                                                      const GALGAS_funcFormalArgumentListForGeneration & in_mFormalArgumentListForGeneration,
                                                      const GALGAS_instructionListIR & in_mInstructionGenerationList,
                                                      const GALGAS_unifiedTypeMap_2D_proxy & in_mResultType,
                                                      const GALGAS_string & in_mResultVarName
                                                      COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mFormalArgumentListForGeneration (in_mFormalArgumentListForGeneration),
mAttribute_mInstructionGenerationList (in_mInstructionGenerationList),
mAttribute_mResultType (in_mResultType),
mAttribute_mResultVarName (in_mResultVarName) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_functionMapIR::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mFormalArgumentListForGeneration.isValid () && mAttribute_mInstructionGenerationList.isValid () && mAttribute_mResultType.isValid () && mAttribute_mResultVarName.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_functionMapIR::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_functionMapIR (mAttribute_lkey, mAttribute_mFormalArgumentListForGeneration, mAttribute_mInstructionGenerationList, mAttribute_mResultType, mAttribute_mResultVarName COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_functionMapIR::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFormalArgumentListForGeneration" ":" ;
  mAttribute_mFormalArgumentListForGeneration.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInstructionGenerationList" ":" ;
  mAttribute_mInstructionGenerationList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mResultType" ":" ;
  mAttribute_mResultType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mResultVarName" ":" ;
  mAttribute_mResultVarName.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_functionMapIR::compare (const cCollectionElement * inOperand) const {
  cMapElement_functionMapIR * operand = (cMapElement_functionMapIR *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mFormalArgumentListForGeneration.objectCompare (operand->mAttribute_mFormalArgumentListForGeneration) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionGenerationList.objectCompare (operand->mAttribute_mInstructionGenerationList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mResultType.objectCompare (operand->mAttribute_mResultType) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mResultVarName.objectCompare (operand->mAttribute_mResultVarName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_functionMapIR::GALGAS_functionMapIR (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_functionMapIR::GALGAS_functionMapIR (const GALGAS_functionMapIR & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_functionMapIR & GALGAS_functionMapIR::operator = (const GALGAS_functionMapIR & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_functionMapIR GALGAS_functionMapIR::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_functionMapIR result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_functionMapIR GALGAS_functionMapIR::constructor_mapWithMapToOverride (const GALGAS_functionMapIR & inMapToOverride
                                                                             COMMA_LOCATION_ARGS) {
  GALGAS_functionMapIR result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_functionMapIR GALGAS_functionMapIR::reader_overriddenMap (C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  GALGAS_functionMapIR result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_functionMapIR::addAssign_operation (const GALGAS_lstring & inKey,
                                                const GALGAS_funcFormalArgumentListForGeneration & inArgument0,
                                                const GALGAS_instructionListIR & inArgument1,
                                                const GALGAS_unifiedTypeMap_2D_proxy & inArgument2,
                                                const GALGAS_string & inArgument3,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  cMapElement_functionMapIR * p = NULL ;
  macroMyNew (p, cMapElement_functionMapIR (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@functionMapIR insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_functionMapIR::modifier_insertKey (GALGAS_lstring inKey,
                                               GALGAS_funcFormalArgumentListForGeneration inArgument0,
                                               GALGAS_instructionListIR inArgument1,
                                               GALGAS_unifiedTypeMap_2D_proxy inArgument2,
                                               GALGAS_string inArgument3,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  cMapElement_functionMapIR * p = NULL ;
  macroMyNew (p, cMapElement_functionMapIR (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "** internal error **" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_functionMapIR_searchKey = "** internal error **" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_functionMapIR::method_searchKey (GALGAS_lstring inKey,
                                             GALGAS_funcFormalArgumentListForGeneration & outArgument0,
                                             GALGAS_instructionListIR & outArgument1,
                                             GALGAS_unifiedTypeMap_2D_proxy & outArgument2,
                                             GALGAS_string & outArgument3,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  const cMapElement_functionMapIR * p = (const cMapElement_functionMapIR *) performSearch (inKey,
                                                                                             inCompiler,
                                                                                             kSearchErrorMessage_functionMapIR_searchKey
                                                                                             COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_functionMapIR) ;
    outArgument0 = p->mAttribute_mFormalArgumentListForGeneration ;
    outArgument1 = p->mAttribute_mInstructionGenerationList ;
    outArgument2 = p->mAttribute_mResultType ;
    outArgument3 = p->mAttribute_mResultVarName ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_funcFormalArgumentListForGeneration GALGAS_functionMapIR::reader_mFormalArgumentListForGenerationForKey (const GALGAS_string & inKey,
                                                                                                                C_Compiler * inCompiler
                                                                                                                COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_functionMapIR * p = (const cMapElement_functionMapIR *) attributes ;
  GALGAS_funcFormalArgumentListForGeneration result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_functionMapIR) ;
    result = p->mAttribute_mFormalArgumentListForGeneration ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_instructionListIR GALGAS_functionMapIR::reader_mInstructionGenerationListForKey (const GALGAS_string & inKey,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_functionMapIR * p = (const cMapElement_functionMapIR *) attributes ;
  GALGAS_instructionListIR result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_functionMapIR) ;
    result = p->mAttribute_mInstructionGenerationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_functionMapIR::reader_mResultTypeForKey (const GALGAS_string & inKey,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_functionMapIR * p = (const cMapElement_functionMapIR *) attributes ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_functionMapIR) ;
    result = p->mAttribute_mResultType ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_functionMapIR::reader_mResultVarNameForKey (const GALGAS_string & inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_functionMapIR * p = (const cMapElement_functionMapIR *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_functionMapIR) ;
    result = p->mAttribute_mResultVarName ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_functionMapIR::modifier_setMFormalArgumentListForGenerationForKey (GALGAS_funcFormalArgumentListForGeneration inAttributeValue,
                                                                               GALGAS_string inKey,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_functionMapIR * p = (cMapElement_functionMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_functionMapIR) ;
    p->mAttribute_mFormalArgumentListForGeneration = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_functionMapIR::modifier_setMInstructionGenerationListForKey (GALGAS_instructionListIR inAttributeValue,
                                                                         GALGAS_string inKey,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_functionMapIR * p = (cMapElement_functionMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_functionMapIR) ;
    p->mAttribute_mInstructionGenerationList = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_functionMapIR::modifier_setMResultTypeForKey (GALGAS_unifiedTypeMap_2D_proxy inAttributeValue,
                                                          GALGAS_string inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_functionMapIR * p = (cMapElement_functionMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_functionMapIR) ;
    p->mAttribute_mResultType = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_functionMapIR::modifier_setMResultVarNameForKey (GALGAS_string inAttributeValue,
                                                             GALGAS_string inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_functionMapIR * p = (cMapElement_functionMapIR *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_functionMapIR) ;
    p->mAttribute_mResultVarName = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_functionMapIR * GALGAS_functionMapIR::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                     const GALGAS_string & inKey
                                                                                     COMMA_LOCATION_ARGS) {
  cMapElement_functionMapIR * result = (cMapElement_functionMapIR *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_functionMapIR) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_functionMapIR::cEnumerator_functionMapIR (const GALGAS_functionMapIR & inEnumeratedObject,
                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_functionMapIR_2D_element cEnumerator_functionMapIR::current (LOCATION_ARGS) const {
  const cMapElement_functionMapIR * p = (const cMapElement_functionMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_functionMapIR) ;
  return GALGAS_functionMapIR_2D_element (p->mAttribute_lkey, p->mAttribute_mFormalArgumentListForGeneration, p->mAttribute_mInstructionGenerationList, p->mAttribute_mResultType, p->mAttribute_mResultVarName) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_functionMapIR::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_funcFormalArgumentListForGeneration cEnumerator_functionMapIR::current_mFormalArgumentListForGeneration (LOCATION_ARGS) const {
  const cMapElement_functionMapIR * p = (const cMapElement_functionMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_functionMapIR) ;
  return p->mAttribute_mFormalArgumentListForGeneration ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_instructionListIR cEnumerator_functionMapIR::current_mInstructionGenerationList (LOCATION_ARGS) const {
  const cMapElement_functionMapIR * p = (const cMapElement_functionMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_functionMapIR) ;
  return p->mAttribute_mInstructionGenerationList ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_functionMapIR::current_mResultType (LOCATION_ARGS) const {
  const cMapElement_functionMapIR * p = (const cMapElement_functionMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_functionMapIR) ;
  return p->mAttribute_mResultType ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string cEnumerator_functionMapIR::current_mResultVarName (LOCATION_ARGS) const {
  const cMapElement_functionMapIR * p = (const cMapElement_functionMapIR *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_functionMapIR) ;
  return p->mAttribute_mResultVarName ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 @functionMapIR type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_functionMapIR ("functionMapIR",
                                      NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_functionMapIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_functionMapIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_functionMapIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_functionMapIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_functionMapIR GALGAS_functionMapIR::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_functionMapIR result ;
  const GALGAS_functionMapIR * p = (const GALGAS_functionMapIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_functionMapIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("functionMapIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"
#include "galgas2/C_galgas_CLI_Options.h"

#include "files/C_FileManager.h"

//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       N O N    T E R M I N A L    N A M E S                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const char * gNonTerminalNames_plm_grammar [71] = {
  "<start_symbol>",// Index 0
  "<declaration>",// Index 1
  "<procedure>",// Index 2
  "<procedure_header>",// Index 3
  "<procedure_formal_arguments>",// Index 4
  "<expression>",// Index 5
  "<expression_12>",// Index 6
  "<expression_11>",// Index 7
  "<expression_10>",// Index 8
  "<expression_9>",// Index 9
  "<expression_8>",// Index 10
  "<expression_7>",// Index 11
  "<expression_6>",// Index 12
  "<expression_5>",// Index 13
  "<expression_4>",// Index 14
  "<expression_3>",// Index 15
  "<expression_2>",// Index 16
  "<expression_1>",// Index 17
  "<primary>",// Index 18
  "<instruction>",// Index 19
  "<instructionList>",// Index 20
  "<if_instruction>",// Index 21
  "<select_common_5F_syntax_0>",// Index 22
  "<select_common_5F_syntax_1>",// Index 23
  "<select_common_5F_syntax_2>",// Index 24
  "<select_common_5F_syntax_3>",// Index 25
  "<select_common_5F_syntax_4>",// Index 26
  "<select_common_5F_syntax_5>",// Index 27
  "<select_common_5F_syntax_6>",// Index 28
  "<select_common_5F_syntax_7>",// Index 29
  "<select_common_5F_syntax_8>",// Index 30
  "<select_common_5F_syntax_9>",// Index 31
  "<select_common_5F_syntax_10>",// Index 32
  "<select_common_5F_syntax_11>",// Index 33
  "<select_common_5F_syntax_12>",// Index 34
  "<select_common_5F_syntax_13>",// Index 35
  "<select_common_5F_syntax_14>",// Index 36
  "<select_common_5F_syntax_15>",// Index 37
  "<select_common_5F_syntax_16>",// Index 38
  "<select_common_5F_syntax_17>",// Index 39
  "<select_common_5F_syntax_18>",// Index 40
  "<select_common_5F_syntax_19>",// Index 41
  "<select_common_5F_syntax_20>",// Index 42
  "<select_common_5F_syntax_21>",// Index 43
  "<select_common_5F_syntax_22>",// Index 44
  "<select_common_5F_syntax_23>",// Index 45
  "<select_common_5F_syntax_24>",// Index 46
  "<select_common_5F_syntax_25>",// Index 47
  "<select_common_5F_syntax_26>",// Index 48
  "<select_common_5F_syntax_27>",// Index 49
  "<select_common_5F_syntax_28>",// Index 50
  "<select_common_5F_syntax_29>",// Index 51
  "<select_common_5F_syntax_30>",// Index 52
  "<select_common_5F_syntax_31>",// Index 53
  "<select_common_5F_syntax_32>",// Index 54
  "<select_common_5F_syntax_33>",// Index 55
  "<select_common_5F_syntax_34>",// Index 56
  "<select_common_5F_syntax_35>",// Index 57
  "<select_common_5F_syntax_36>",// Index 58
  "<select_common_5F_syntax_37>",// Index 59
  "<select_common_5F_syntax_38>",// Index 60
  "<select_common_5F_syntax_39>",// Index 61
  "<select_common_5F_syntax_40>",// Index 62
  "<select_common_5F_syntax_41>",// Index 63
  "<select_common_5F_syntax_42>",// Index 64
  "<select_common_5F_syntax_43>",// Index 65
  "<select_common_5F_syntax_44>",// Index 66
  "<select_common_5F_syntax_45>",// Index 67
  "<select_common_5F_syntax_46>",// Index 68
  "<select_common_5F_syntax_47>",// Index 69
  "<>"// Index 70
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                S L R    A N A L Y Z E R    A C T I O N    T A B L E                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

// Action tables handle shift and reduce actions ;
//  - a shift action is (terminal_symbol, SHIFT (n)) : if shifts to state n ;
//  - the accept action is (terminal_symbol, ACCEPT) ;
//  - a reduce action is (terminal_symbol, REDUCE (n)) ; if reduces to state n.

#define SHIFT(a) ((a) + 2)
#define REDUCE(a) (-(a) - 1)
#define ACCEPT (1)
#define END (-1)

static const int16_t gActionTable_plm_grammar [] = {
// State S0 (index = 0)
  C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_booleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_struct, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_init, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_exception, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_boot, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_required, SHIFT (12)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (13)
, C_Lexique_plm_5F_lexique::kToken_target, SHIFT (14)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (58)
, END
// State S1 (index = 31)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (20)
, END
// State S2 (index = 34)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (21)
, END
// State S3 (index = 37)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (22)
, END
// State S4 (index = 40)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (23)
, END
// State S5 (index = 43)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (24)
, END
// State S6 (index = 46)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (25)
, END
// State S7 (index = 49)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (26)
, END
// State S8 (index = 52)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (27)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (28)
, END
// State S9 (index = 57)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (29)
, END
// State S10 (index = 60)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (30)
, END
// State S11 (index = 63)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (31)
, END
// State S12 (index = 66)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (6)
, END
// State S13 (index = 69)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (33)
, END
// State S14 (index = 72)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (34)
, END
// State S15 (index = 75)
, C_Lexique_plm_5F_lexique::kToken_, ACCEPT
, END
// State S16 (index = 78)
, C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_booleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_struct, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_init, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_exception, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_boot, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_required, SHIFT (12)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (13)
, C_Lexique_plm_5F_lexique::kToken_target, SHIFT (14)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (58)
, END
// State S17 (index = 109)
, C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_booleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_struct, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_init, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_exception, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_boot, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_required, SHIFT (12)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (13)
, C_Lexique_plm_5F_lexique::kToken_target, SHIFT (14)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (58)
, END
// State S18 (index = 140)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (37)
, END
// State S19 (index = 143)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (0)
, END
// State S20 (index = 146)
, C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_booleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_struct, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_init, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_exception, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_boot, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_required, SHIFT (12)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (13)
, C_Lexique_plm_5F_lexique::kToken_target, SHIFT (14)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (58)
, END
// State S21 (index = 177)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (39)
, END
// State S22 (index = 180)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (40)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (64)
, END
// State S23 (index = 185)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (42)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (68)
, END
// State S24 (index = 190)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (44)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (75)
, END
// State S25 (index = 195)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (46)
, END
// State S26 (index = 198)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (47)
, END
// State S27 (index = 201)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (48)
, END
// State S28 (index = 204)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (49)
, END
// State S29 (index = 207)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (50)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (84)
, END
// State S30 (index = 212)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (52)
, END
// State S31 (index = 215)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (86)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (53)
, END
// State S32 (index = 220)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (14)
, END
// State S33 (index = 251)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (55)
, C_Lexique_plm_5F_lexique::kToken_at, REDUCE (100)
, END
// State S34 (index = 256)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (57)
, END
// State S35 (index = 287)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (59)
, END
// State S36 (index = 290)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (60)
, END
// State S37 (index = 293)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (57)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (58)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (59)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (60)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (65)
, END
// State S38 (index = 320)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (61)
, END
// State S39 (index = 323)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (69)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (62)
, END
// State S40 (index = 356)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (40)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (64)
, END
// State S41 (index = 361)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (72)
, END
// State S42 (index = 364)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (42)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (68)
, END
// State S43 (index = 369)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (74)
, END
// State S44 (index = 372)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (76)
, END
// State S45 (index = 375)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (75)
, END
// State S46 (index = 378)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (90)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (76)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (90)
, END
// State S47 (index = 385)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (57)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (58)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (59)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (60)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (65)
, END
// State S48 (index = 412)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (79)
, END
// State S49 (index = 415)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (80)
, END
// State S50 (index = 418)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (85)
, END
// State S51 (index = 421)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (81)
, END
// State S52 (index = 424)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (57)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (58)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (59)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (60)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (65)
, END
// State S53 (index = 451)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (86)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (53)
, END
// State S54 (index = 456)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (84)
, END
// State S55 (index = 459)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (55)
, C_Lexique_plm_5F_lexique::kToken_at, REDUCE (100)
, END
// State S56 (index = 464)
, C_Lexique_plm_5F_lexique::kToken_at, SHIFT (86)
, END
// State S57 (index = 467)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (157)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (87)
, C_Lexique_plm_5F_lexique::kToken__2E_, SHIFT (88)
, C_Lexique_plm_5F_lexique::kToken__2B__2B_, SHIFT (89)
, C_Lexique_plm_5F_lexique::kToken__2D__2D_, SHIFT (90)
, C_Lexique_plm_5F_lexique::kToken__26__2B__2B_, SHIFT (91)
, C_Lexique_plm_5F_lexique::kToken__26__2D__2D_, SHIFT (92)
, C_Lexique_plm_5F_lexique::kToken__7C__3D_, SHIFT (93)
, C_Lexique_plm_5F_lexique::kToken__26__3D_, SHIFT (94)
, C_Lexique_plm_5F_lexique::kToken__5E__3D_, SHIFT (95)
, END
// State S58 (index = 488)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (98)
, END
// State S59 (index = 491)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (57)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (58)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (59)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (60)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (65)
, END
// State S60 (index = 518)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (100)
, END
// State S61 (index = 521)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S62 (index = 540)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S63 (index = 559)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S64 (index = 578)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (126)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (162)
, C_Lexique_plm_5F_lexique::kToken_integer, REDUCE (162)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (162)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (162)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (162)
, C_Lexique_plm_5F_lexique::kToken__7E_, REDUCE (162)
, C_Lexique_plm_5F_lexique::kToken_not, REDUCE (162)
, C_Lexique_plm_5F_lexique::kToken_true, REDUCE (162)
, C_Lexique_plm_5F_lexique::kToken_false, REDUCE (162)
, END
// State S65 (index = 599)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (128)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (177)
, C_Lexique_plm_5F_lexique::kToken_integer, REDUCE (177)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (177)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (177)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (177)
, C_Lexique_plm_5F_lexique::kToken__7E_, REDUCE (177)
, C_Lexique_plm_5F_lexique::kToken_not, REDUCE (177)
, C_Lexique_plm_5F_lexique::kToken_true, REDUCE (177)
, C_Lexique_plm_5F_lexique::kToken_false, REDUCE (177)
, END
// State S66 (index = 620)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (57)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (58)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (59)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (60)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (65)
, END
// State S67 (index = 647)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (131)
, END
// State S68 (index = 650)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (41)
, END
// State S69 (index = 659)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (69)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (62)
, END
// State S70 (index = 692)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (1)
, END
// State S71 (index = 723)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (65)
, END
// State S72 (index = 726)
, C_Lexique_plm_5F_lexique::kToken_case, SHIFT (133)
, END
// State S73 (index = 729)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (69)
, END
// State S74 (index = 732)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (70)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (134)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (135)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (136)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (6)
, END
// State S75 (index = 743)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S76 (index = 762)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (90)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (76)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (90)
, END
// State S77 (index = 769)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (141)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (92)
, END
// State S78 (index = 774)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (143)
, END
// State S79 (index = 777)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (9)
, END
// State S80 (index = 808)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (57)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (58)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (59)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (60)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (65)
, END
// State S81 (index = 835)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S82 (index = 854)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (146)
, END
// State S83 (index = 857)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (87)
, END
// State S84 (index = 860)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (147)
, END
// State S85 (index = 863)
, C_Lexique_plm_5F_lexique::kToken_at, REDUCE (101)
, END
// State S86 (index = 866)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (148)
, END
// State S87 (index = 869)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (149)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (173)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (150)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (151)
, END
// State S88 (index = 878)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (153)
, END
// State S89 (index = 881)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (42)
, END
// State S90 (index = 908)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (43)
, END
// State S91 (index = 935)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (44)
, END
// State S92 (index = 962)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (45)
, END
// State S93 (index = 989)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (159)
, C_Lexique_plm_5F_lexique::kToken_integer, REDUCE (159)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (159)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (159)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (159)
, C_Lexique_plm_5F_lexique::kToken__7E_, REDUCE (159)
, C_Lexique_plm_5F_lexique::kToken_not, REDUCE (159)
, C_Lexique_plm_5F_lexique::kToken_true, REDUCE (159)
, C_Lexique_plm_5F_lexique::kToken_false, REDUCE (159)
, END
// State S94 (index = 1008)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (160)
, C_Lexique_plm_5F_lexique::kToken_integer, REDUCE (160)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (160)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (160)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (160)
, C_Lexique_plm_5F_lexique::kToken__7E_, REDUCE (160)
, C_Lexique_plm_5F_lexique::kToken_not, REDUCE (160)
, C_Lexique_plm_5F_lexique::kToken_true, REDUCE (160)
, C_Lexique_plm_5F_lexique::kToken_false, REDUCE (160)
, END
// State S95 (index = 1027)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (161)
, C_Lexique_plm_5F_lexique::kToken_integer, REDUCE (161)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (161)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (161)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (161)
, C_Lexique_plm_5F_lexique::kToken__7E_, REDUCE (161)
, C_Lexique_plm_5F_lexique::kToken_not, REDUCE (161)
, C_Lexique_plm_5F_lexique::kToken_true, REDUCE (161)
, C_Lexique_plm_5F_lexique::kToken_false, REDUCE (161)
, END
// State S96 (index = 1046)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (154)
, END
// State S97 (index = 1049)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S98 (index = 1068)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (156)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (153)
, END
// State S99 (index = 1073)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (152)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (152)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (152)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (152)
, END
// State S100 (index = 1082)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (158)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (155)
, END
// State S101 (index = 1087)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__2E_, SHIFT (160)
, C_Lexique_plm_5F_lexique::kToken__3A__3A_, SHIFT (161)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (148)
, END
// State S102 (index = 1212)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (34)
, END
// State S103 (index = 1333)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S104 (index = 1352)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S105 (index = 1371)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S106 (index = 1390)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S107 (index = 1409)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S108 (index = 1428)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (35)
, END
// State S109 (index = 1549)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (36)
, END
// State S110 (index = 1670)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (40)
, END
// State S111 (index = 1697)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (16)
, END
// State S112 (index = 1766)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_or, SHIFT (168)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (110)
, END
// State S113 (index = 1837)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_xor, SHIFT (170)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (112)
, END
// State S114 (index = 1910)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_and, SHIFT (172)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (114)
, END
// State S115 (index = 1985)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (174)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (116)
, END
// State S116 (index = 2062)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (176)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (118)
, END
// State S117 (index = 2141)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (178)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (120)
, END
// State S118 (index = 2222)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, SHIFT (180)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, SHIFT (181)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (122)
, END
// State S119 (index = 2307)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, SHIFT (183)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, SHIFT (184)
, C_Lexique_plm_5F_lexique::kToken__3C_, SHIFT (185)
, C_Lexique_plm_5F_lexique::kToken__3E_, SHIFT (186)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (125)
, END
// State S120 (index = 2400)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (188)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (189)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (130)
, END
// State S121 (index = 2497)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (191)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, SHIFT (192)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (193)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (194)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (133)
, END
// State S122 (index = 2602)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (200)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (201)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (138)
, END
// State S123 (index = 2719)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__5C_, SHIFT (203)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, SHIFT (204)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (145)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (145)
, END
// State S124 (index = 2840)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (50)
, END
// State S125 (index = 2867)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (51)
, END
// State S126 (index = 2894)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (163)
, C_Lexique_plm_5F_lexique::kToken_integer, REDUCE (163)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (163)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (163)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (163)
, C_Lexique_plm_5F_lexique::kToken__7E_, REDUCE (163)
, C_Lexique_plm_5F_lexique::kToken_not, REDUCE (163)
, C_Lexique_plm_5F_lexique::kToken_true, REDUCE (163)
, C_Lexique_plm_5F_lexique::kToken_false, REDUCE (163)
, END
// State S127 (index = 2913)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S128 (index = 2932)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (178)
, C_Lexique_plm_5F_lexique::kToken_integer, REDUCE (178)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (178)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (178)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (178)
, C_Lexique_plm_5F_lexique::kToken__7E_, REDUCE (178)
, C_Lexique_plm_5F_lexique::kToken_not, REDUCE (178)
, C_Lexique_plm_5F_lexique::kToken_true, REDUCE (178)
, C_Lexique_plm_5F_lexique::kToken_false, REDUCE (178)
, END
// State S129 (index = 2951)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S130 (index = 2970)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (151)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (151)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (151)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (151)
, END
// State S131 (index = 2979)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (11)
, END
// State S132 (index = 3016)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (63)
, END
// State S133 (index = 3047)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (209)
, END
// State S134 (index = 3050)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (210)
, END
// State S135 (index = 3053)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (6)
, END
// State S136 (index = 3056)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (70)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (134)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (135)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (136)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (6)
, END
// State S137 (index = 3067)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (70)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (134)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (135)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (136)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (6)
, END
// State S138 (index = 3078)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (214)
, END
// State S139 (index = 3081)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (215)
, END
// State S140 (index = 3084)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (91)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (91)
, END
// State S141 (index = 3089)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (141)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (92)
, END
// State S142 (index = 3094)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (217)
, END
// State S143 (index = 3097)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (7)
, END
// State S144 (index = 3128)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (219)
, END
// State S145 (index = 3131)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (5)
, END
// State S146 (index = 3162)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (6)
, END
// State S147 (index = 3193)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (220)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (88)
, END
// State S148 (index = 3198)
, C_Lexique_plm_5F_lexique::kToken_typeName, REDUCE (98)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (222)
, END
// State S149 (index = 3203)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (224)
, END
// State S150 (index = 3206)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S151 (index = 3225)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (226)
, END
// State S152 (index = 3228)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (227)
, END
// State S153 (index = 3231)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (157)
, C_Lexique_plm_5F_lexique::kToken__2E_, SHIFT (88)
, END
// State S154 (index = 3236)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S155 (index = 3255)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (52)
, END
// State S156 (index = 3282)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (154)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (47)
, END
// State S157 (index = 3311)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (230)
, END
// State S158 (index = 3314)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (156)
, END
// State S159 (index = 3317)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (231)
, END
// State S160 (index = 3320)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (232)
, END
// State S161 (index = 3323)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (233)
, END
// State S162 (index = 3326)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (37)
, END
// State S163 (index = 3447)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (234)
, END
// State S164 (index = 3450)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (31)
, END
// State S165 (index = 3571)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (32)
, END
// State S166 (index = 3692)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (29)
, END
// State S167 (index = 3813)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (30)
, END
// State S168 (index = 3934)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S169 (index = 3953)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (17)
, END
// State S170 (index = 4022)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S171 (index = 4041)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (18)
, END
// State S172 (index = 4112)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S173 (index = 4131)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (19)
, END
// State S174 (index = 4204)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S175 (index = 4223)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (20)
, END
// State S176 (index = 4298)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S177 (index = 4317)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (21)
, END
// State S178 (index = 4394)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S179 (index = 4413)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (22)
, END
// State S180 (index = 4492)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S181 (index = 4511)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S182 (index = 4530)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (23)
, END
// State S183 (index = 4611)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S184 (index = 4630)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S185 (index = 4649)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S186 (index = 4668)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S187 (index = 4687)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (24)
, END
// State S188 (index = 4772)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S189 (index = 4791)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S190 (index = 4810)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (25)
, END
// State S191 (index = 4903)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S192 (index = 4922)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S193 (index = 4941)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S194 (index = 4960)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S195 (index = 4979)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (26)
, END
// State S196 (index = 5076)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S197 (index = 5095)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S198 (index = 5114)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S199 (index = 5133)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S200 (index = 5152)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S201 (index = 5171)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S202 (index = 5190)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (27)
, END
// State S203 (index = 5295)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (259)
, END
// State S204 (index = 5298)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (260)
, END
// State S205 (index = 5301)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (28)
, END
// State S206 (index = 5418)
, C_Lexique_plm_5F_lexique::kToken_then, SHIFT (261)
, END
// State S207 (index = 5421)
, C_Lexique_plm_5F_lexique::kToken_end, SHIFT (262)
, END
// State S208 (index = 5424)
, C_Lexique_plm_5F_lexique::kToken_do, SHIFT (263)
, END
// State S209 (index = 5427)
, C_Lexique_plm_5F_lexique::kToken_case, SHIFT (264)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (66)
, END
// State S210 (index = 5432)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (266)
, END
// State S211 (index = 5435)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (70)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (134)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (135)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (136)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (6)
, END
// State S212 (index = 5446)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (74)
, END
// State S213 (index = 5449)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (72)
, END
// State S214 (index = 5452)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (3)
, END
// State S215 (index = 5483)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (268)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (79)
, END
// State S216 (index = 5492)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (93)
, END
// State S217 (index = 5495)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (270)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (94)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (271)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (272)
, END
// State S218 (index = 5504)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (12)
, END
// State S219 (index = 5537)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (8)
, END
// State S220 (index = 5568)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (274)
, END
// State S221 (index = 5571)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (275)
, END
// State S222 (index = 5574)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (55)
, C_Lexique_plm_5F_lexique::kToken_at, REDUCE (100)
, END
// State S223 (index = 5579)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (277)
, END
// State S224 (index = 5582)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (149)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (173)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (150)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (151)
, END
// State S225 (index = 5591)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (149)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (173)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (150)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (151)
, END
// State S226 (index = 5600)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (149)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (173)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (150)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (151)
, END
// State S227 (index = 5609)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (55)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (55)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (55)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (55)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (55)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (55)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (55)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (55)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (55)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (55)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (55)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (55)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (55)
, END
// State S228 (index = 5636)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (158)
, END
// State S229 (index = 5639)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (49)
, END
// State S230 (index = 5666)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S231 (index = 5685)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S232 (index = 5704)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__2E_, SHIFT (160)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (148)
, END
// State S233 (index = 5827)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (284)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (38)
, END
// State S234 (index = 5950)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (33)
, END
// State S235 (index = 6071)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_or, SHIFT (168)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (110)
, END
// State S236 (index = 6142)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_xor, SHIFT (170)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (112)
, END
// State S237 (index = 6215)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_and, SHIFT (172)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (114)
, END
// State S238 (index = 6290)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (174)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (116)
, END
// State S239 (index = 6367)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (176)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (118)
, END
// State S240 (index = 6446)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (178)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (120)
, END
// State S241 (index = 6527)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (123)
, END
// State S242 (index = 6608)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (124)
, END
// State S243 (index = 6689)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (126)
, END
// State S244 (index = 6774)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (127)
, END
// State S245 (index = 6859)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (128)
, END
// State S246 (index = 6944)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (129)
, END
// State S247 (index = 7029)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (188)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (189)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (130)
, END
// State S248 (index = 7126)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (188)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (189)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (130)
, END
// State S249 (index = 7223)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (191)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, SHIFT (192)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (193)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (194)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (133)
, END
// State S250 (index = 7328)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (191)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, SHIFT (192)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (193)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (194)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (133)
, END
// State S251 (index = 7433)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (191)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, SHIFT (192)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (193)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (194)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (133)
, END
// State S252 (index = 7538)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (191)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, SHIFT (192)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (193)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (194)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (133)
, END
// State S253 (index = 7643)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (200)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (201)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (138)
, END
// State S254 (index = 7760)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (200)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (201)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (138)
, END
// State S255 (index = 7877)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (200)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (201)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (138)
, END
// State S256 (index = 7994)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (200)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (201)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (138)
, END
// State S257 (index = 8111)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (200)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (201)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (138)
, END
// State S258 (index = 8228)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (200)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (201)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (138)
, END
// State S259 (index = 8345)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (146)
, END
// State S260 (index = 8462)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (147)
, END
// State S261 (index = 8579)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (57)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (58)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (59)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (60)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (65)
, END
// State S262 (index = 8606)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (304)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (164)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (164)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (164)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (164)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (164)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (164)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (164)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (164)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (164)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (164)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (164)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (164)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (164)
, END
// State S263 (index = 8635)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (57)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (58)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (59)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (60)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (65)
, END
// State S264 (index = 8662)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (307)
, END
// State S265 (index = 8665)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (308)
, END
// State S266 (index = 8668)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (309)
, END
// State S267 (index = 8671)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (73)
, END
// State S268 (index = 8674)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (80)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (80)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (80)
, END
// State S269 (index = 8681)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (310)
, C_Lexique_plm_5F_lexique::kToken_init, SHIFT (311)
, C_Lexique_plm_5F_lexique::kToken_exception, SHIFT (312)
, END
// State S270 (index = 8688)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (314)
, END
// State S271 (index = 8691)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (315)
, END
// State S272 (index = 8694)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (316)
, END
// State S273 (index = 8697)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (317)
, END
// State S274 (index = 8700)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (318)
, END
// State S275 (index = 8703)
, C_Lexique_plm_5F_lexique::kToken__2D__3E_, SHIFT (319)
, END
// State S276 (index = 8706)
, C_Lexique_plm_5F_lexique::kToken_at, SHIFT (320)
, END
// State S277 (index = 8709)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (321)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (102)
, END
// State S278 (index = 8742)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (176)
, END
// State S279 (index = 8745)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (174)
, END
// State S280 (index = 8748)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (175)
, END
// State S281 (index = 8751)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (46)
, END
// State S282 (index = 8778)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (48)
, END
// State S283 (index = 8805)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (149)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (149)
, END
// State S284 (index = 8926)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S285 (index = 8945)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (111)
, END
// State S286 (index = 9014)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (113)
, END
// State S287 (index = 9085)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (115)
, END
// State S288 (index = 9158)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (117)
, END
// State S289 (index = 9233)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (119)
, END
// State S290 (index = 9310)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (121)
, END
// State S291 (index = 9389)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (131)
, END
// State S292 (index = 9482)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (132)
, END
// State S293 (index = 9575)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (134)
, END
// State S294 (index = 9672)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (135)
, END
// State S295 (index = 9769)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (136)
, END
// State S296 (index = 9866)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (137)
, END
// State S297 (index = 9963)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (139)
, END
// State S298 (index = 10068)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (140)
, END
// State S299 (index = 10173)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (141)
, END
// State S300 (index = 10278)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (142)
, END
// State S301 (index = 10383)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (143)
, END
// State S302 (index = 10488)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (144)
, END
// State S303 (index = 10593)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (166)
, C_Lexique_plm_5F_lexique::kToken_else, SHIFT (324)
, C_Lexique_plm_5F_lexique::kToken_elsif, SHIFT (325)
, END
// State S304 (index = 10600)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (165)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (165)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (165)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (165)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (165)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (165)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (165)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (165)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (165)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (165)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (165)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (165)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (165)
, END
// State S305 (index = 10627)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (53)
, END
// State S306 (index = 10654)
, C_Lexique_plm_5F_lexique::kToken_end, SHIFT (327)
, END
// State S307 (index = 10657)
, C_Lexique_plm_5F_lexique::kToken_case, SHIFT (264)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (66)
, END
// State S308 (index = 10662)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (2)
, END
// State S309 (index = 10693)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S310 (index = 10712)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (330)
, END
// State S311 (index = 10715)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (331)
, END
// State S312 (index = 10718)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (332)
, END
// State S313 (index = 10721)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (268)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (79)
, END
// State S314 (index = 10732)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (335)
, END
// State S315 (index = 10735)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (336)
, END
// State S316 (index = 10738)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (337)
, END
// State S317 (index = 10741)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (13)
, END
// State S318 (index = 10778)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (220)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (88)
, END
// State S319 (index = 10783)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (339)
, END
// State S320 (index = 10786)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (340)
, END
// State S321 (index = 10789)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (341)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (342)
, END
// State S322 (index = 10794)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (15)
, END
// State S323 (index = 10825)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (344)
, END
// State S324 (index = 10828)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (345)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (169)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (169)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (169)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (169)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (169)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (169)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (169)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (169)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (169)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (169)
, END
// State S325 (index = 10851)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (347)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (171)
, C_Lexique_plm_5F_lexique::kToken_integer, REDUCE (171)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (171)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (171)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (171)
, C_Lexique_plm_5F_lexique::kToken__7E_, REDUCE (171)
, C_Lexique_plm_5F_lexique::kToken_not, REDUCE (171)
, C_Lexique_plm_5F_lexique::kToken_true, REDUCE (171)
, C_Lexique_plm_5F_lexique::kToken_false, REDUCE (171)
, END
// State S326 (index = 10872)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (54)
, END
// State S327 (index = 10875)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (349)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (179)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (179)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (179)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (179)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (179)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (179)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (179)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (179)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (179)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (179)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (179)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (179)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (179)
, END
// State S328 (index = 10904)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (67)
, END
// State S329 (index = 10907)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (70)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (134)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (135)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (136)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (6)
, END
// State S330 (index = 10918)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (217)
, END
// State S331 (index = 10921)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (82)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (82)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (82)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (82)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (82)
, END
// State S332 (index = 10932)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (353)
, END
// State S333 (index = 10935)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (354)
, END
// State S334 (index = 10938)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (310)
, C_Lexique_plm_5F_lexique::kToken_init, SHIFT (311)
, C_Lexique_plm_5F_lexique::kToken_exception, SHIFT (312)
, END
// State S335 (index = 10945)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (270)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (94)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (271)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (272)
, END
// State S336 (index = 10954)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (270)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (94)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (271)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (272)
, END
// State S337 (index = 10963)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (270)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (94)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (271)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (272)
, END
// State S338 (index = 10972)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (89)
, END
// State S339 (index = 10975)
, C_Lexique_plm_5F_lexique::kToken_typeName, SHIFT (359)
, END
// State S340 (index = 10978)
, C_Lexique_plm_5F_lexique::kToken_typeName, REDUCE (98)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (222)
, END
// State S341 (index = 10983)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (361)
, C_Lexique_plm_5F_lexique::kToken__2C_, REDUCE (108)
, END
// State S342 (index = 10990)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__2C_, REDUCE (106)
, END
// State S343 (index = 10995)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__2C_, SHIFT (363)
, END
// State S344 (index = 11000)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (39)
, END
// State S345 (index = 11121)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (170)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (170)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (170)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (170)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (170)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (170)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (170)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (170)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (170)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (170)
, END
// State S346 (index = 11142)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (57)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (58)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (59)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (60)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (65)
, END
// State S347 (index = 11169)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (172)
, C_Lexique_plm_5F_lexique::kToken_integer, REDUCE (172)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (172)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (172)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (172)
, C_Lexique_plm_5F_lexique::kToken__7E_, REDUCE (172)
, C_Lexique_plm_5F_lexique::kToken_not, REDUCE (172)
, C_Lexique_plm_5F_lexique::kToken_true, REDUCE (172)
, C_Lexique_plm_5F_lexique::kToken_false, REDUCE (172)
, END
// State S348 (index = 11188)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (109)
, END
// State S349 (index = 11207)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (180)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (180)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (180)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (180)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (180)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (180)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (180)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (180)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (180)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (180)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (180)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (180)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (180)
, END
// State S350 (index = 11234)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (56)
, END
// State S351 (index = 11261)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (71)
, END
// State S352 (index = 11264)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (81)
, END
// State S353 (index = 11275)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (83)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (83)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (83)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (83)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (83)
, END
// State S354 (index = 11286)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (4)
, END
// State S355 (index = 11317)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (268)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (79)
, END
// State S356 (index = 11328)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (97)
, END
// State S357 (index = 11331)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (95)
, END
// State S358 (index = 11334)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (96)
, END
// State S359 (index = 11337)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (368)
, END
// State S360 (index = 11340)
, C_Lexique_plm_5F_lexique::kToken_typeName, REDUCE (99)
, END
// State S361 (index = 11343)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (369)
, END
// State S362 (index = 11346)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__2C_, REDUCE (107)
, END
// State S363 (index = 11351)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (341)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (342)
, END
// State S364 (index = 11356)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (371)
, END
// State S365 (index = 11359)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (167)
, END
// State S366 (index = 11362)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (168)
, END
// State S367 (index = 11365)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (78)
, END
// State S368 (index = 11368)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (57)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (58)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (59)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (60)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (65)
, END
// State S369 (index = 11395)
, C_Lexique_plm_5F_lexique::kToken__5D_, SHIFT (373)
, END
// State S370 (index = 11398)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__2C_, SHIFT (363)
, END
// State S371 (index = 11403)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (103)
, END
// State S372 (index = 11434)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (375)
, END
// State S373 (index = 11437)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__2C_, REDUCE (109)
, END
// State S374 (index = 11442)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (105)
, END
// State S375 (index = 11445)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (10)
, END} ;

static const uint32_t gActionTableIndex_plm_grammar [376] = {
  0  // S0
, 31  // S1
, 34  // S2
, 37  // S3
, 40  // S4
, 43  // S5
, 46  // S6
, 49  // S7
, 52  // S8
, 57  // S9
, 60  // S10
, 63  // S11
, 66  // S12
, 69  // S13
, 72  // S14
, 75  // S15
, 78  // S16
, 109  // S17
, 140  // S18
, 143  // S19
, 146  // S20
, 177  // S21
, 180  // S22
, 185  // S23
, 190  // S24
, 195  // S25
, 198  // S26
, 201  // S27
, 204  // S28
, 207  // S29
, 212  // S30
, 215  // S31
, 220  // S32
, 251  // S33
, 256  // S34
, 287  // S35
, 290  // S36
, 293  // S37
, 320  // S38
, 323  // S39
, 356  // S40
, 361  // S41
, 364  // S42
, 369  // S43
, 372  // S44
, 375  // S45
, 378  // S46
, 385  // S47
, 412  // S48
, 415  // S49
, 418  // S50
, 421  // S51
, 424  // S52
, 451  // S53
, 456  // S54
, 459  // S55
, 464  // S56
, 467  // S57
, 488  // S58
, 491  // S59
, 518  // S60
, 521  // S61
, 540  // S62
, 559  // S63
, 578  // S64
, 599  // S65
, 620  // S66
, 647  // S67
, 650  // S68
, 659  // S69
, 692  // S70
, 723  // S71
, 726  // S72
, 729  // S73
, 732  // S74
, 743  // S75
, 762  // S76
, 769  // S77
, 774  // S78
, 777  // S79
, 808  // S80
, 835  // S81
, 854  // S82
, 857  // S83
, 860  // S84
, 863  // S85
, 866  // S86
, 869  // S87
, 878  // S88
, 881  // S89
, 908  // S90
, 935  // S91
, 962  // S92
, 989  // S93
, 1008  // S94
, 1027  // S95
, 1046  // S96
, 1049  // S97
, 1068  // S98
, 1073  // S99
, 1082  // S100
, 1087  // S101
, 1212  // S102
, 1333  // S103
, 1352  // S104
, 1371  // S105
, 1390  // S106
, 1409  // S107
, 1428  // S108
, 1549  // S109
, 1670  // S110
, 1697  // S111
, 1766  // S112
, 1837  // S113
, 1910  // S114
, 1985  // S115
, 2062  // S116
, 2141  // S117
, 2222  // S118
, 2307  // S119
, 2400  // S120
, 2497  // S121
, 2602  // S122
, 2719  // S123
, 2840  // S124
, 2867  // S125
, 2894  // S126
, 2913  // S127
, 2932  // S128
, 2951  // S129
, 2970  // S130
, 2979  // S131
, 3016  // S132
, 3047  // S133
, 3050  // S134
, 3053  // S135
, 3056  // S136
, 3067  // S137
, 3078  // S138
, 3081  // S139
, 3084  // S140
, 3089  // S141
, 3094  // S142
, 3097  // S143
, 3128  // S144
, 3131  // S145
, 3162  // S146
, 3193  // S147
, 3198  // S148
, 3203  // S149
, 3206  // S150
, 3225  // S151
, 3228  // S152
, 3231  // S153
, 3236  // S154
, 3255  // S155
, 3282  // S156
, 3311  // S157
, 3314  // S158
, 3317  // S159
, 3320  // S160
, 3323  // S161
, 3326  // S162
, 3447  // S163
, 3450  // S164
, 3571  // S165
, 3692  // S166
, 3813  // S167
, 3934  // S168
, 3953  // S169
, 4022  // S170
, 4041  // S171
, 4112  // S172
, 4131  // S173
, 4204  // S174
, 4223  // S175
, 4298  // S176
, 4317  // S177
, 4394  // S178
, 4413  // S179
, 4492  // S180
, 4511  // S181
, 4530  // S182
, 4611  // S183
, 4630  // S184
, 4649  // S185
, 4668  // S186
, 4687  // S187
, 4772  // S188
, 4791  // S189
, 4810  // S190
, 4903  // S191
, 4922  // S192
, 4941  // S193
, 4960  // S194
, 4979  // S195
, 5076  // S196
, 5095  // S197
, 5114  // S198
, 5133  // S199
, 5152  // S200
, 5171  // S201
, 5190  // S202
, 5295  // S203
, 5298  // S204
, 5301  // S205
, 5418  // S206
, 5421  // S207
, 5424  // S208
, 5427  // S209
, 5432  // S210
, 5435  // S211
, 5446  // S212
, 5449  // S213
, 5452  // S214
, 5483  // S215
, 5492  // S216
, 5495  // S217
, 5504  // S218
, 5537  // S219
, 5568  // S220
, 5571  // S221
, 5574  // S222
, 5579  // S223
, 5582  // S224
, 5591  // S225
, 5600  // S226
, 5609  // S227
, 5636  // S228
, 5639  // S229
, 5666  // S230
, 5685  // S231
, 5704  // S232
, 5827  // S233
, 5950  // S234
, 6071  // S235
, 6142  // S236
, 6215  // S237
, 6290  // S238
, 6367  // S239
, 6446  // S240
, 6527  // S241
, 6608  // S242
, 6689  // S243
, 6774  // S244
, 6859  // S245
, 6944  // S246
, 7029  // S247
, 7126  // S248
, 7223  // S249
, 7328  // S250
, 7433  // S251
, 7538  // S252
, 7643  // S253
, 7760  // S254
, 7877  // S255
, 7994  // S256
, 8111  // S257
, 8228  // S258
, 8345  // S259
, 8462  // S260
, 8579  // S261
, 8606  // S262
, 8635  // S263
, 8662  // S264
, 8665  // S265
, 8668  // S266
, 8671  // S267
, 8674  // S268
, 8681  // S269
, 8688  // S270
, 8691  // S271
, 8694  // S272
, 8697  // S273
, 8700  // S274
, 8703  // S275
, 8706  // S276
, 8709  // S277
, 8742  // S278
, 8745  // S279
, 8748  // S280
, 8751  // S281
, 8778  // S282
, 8805  // S283
, 8926  // S284
, 8945  // S285
, 9014  // S286
, 9085  // S287
, 9158  // S288
, 9233  // S289
, 9310  // S290
, 9389  // S291
, 9482  // S292
, 9575  // S293
, 9672  // S294
, 9769  // S295
, 9866  // S296
, 9963  // S297
, 10068  // S298
, 10173  // S299
, 10278  // S300
, 10383  // S301
, 10488  // S302
, 10593  // S303
, 10600  // S304
, 10627  // S305
, 10654  // S306
, 10657  // S307
, 10662  // S308
, 10693  // S309
, 10712  // S310
, 10715  // S311
, 10718  // S312
, 10721  // S313
, 10732  // S314
, 10735  // S315
, 10738  // S316
, 10741  // S317
, 10778  // S318
, 10783  // S319
, 10786  // S320
, 10789  // S321
, 10794  // S322
, 10825  // S323
, 10828  // S324
, 10851  // S325
, 10872  // S326
, 10875  // S327
, 10904  // S328
, 10907  // S329
, 10918  // S330
, 10921  // S331
, 10932  // S332
, 10935  // S333
, 10938  // S334
, 10945  // S335
, 10954  // S336
, 10963  // S337
, 10972  // S338
, 10975  // S339
, 10978  // S340
, 10983  // S341
, 10990  // S342
, 10995  // S343
, 11000  // S344
, 11121  // S345
, 11142  // S346
, 11169  // S347
, 11188  // S348
, 11207  // S349
, 11234  // S350
, 11261  // S351
, 11264  // S352
, 11275  // S353
, 11286  // S354
, 11317  // S355
, 11328  // S356
, 11331  // S357
, 11334  // S358
, 11337  // S359
, 11340  // S360
, 11343  // S361
, 11346  // S362
, 11351  // S363
, 11356  // S364
, 11359  // S365
, 11362  // S366
, 11365  // S367
, 11368  // S368
, 11395  // S369
, 11398  // S370
, 11403  // S371
, 11434  // S372
, 11437  // S373
, 11442  // S374
, 11445  // S375
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            SLR states successors table                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

// Successor tables handle non terminal successors ;
// an entry is (non_terminal_symbol, n) ; successor is state n.

static const int16_t gSuccessorTable_plm_grammar_0 [11] = {0, 15,
  1, 16,
  2, 17,
  3, 18,
  22, 19, -1} ;

static const int16_t gSuccessorTable_plm_grammar_12 [3] = {3, 32, -1} ;

static const int16_t gSuccessorTable_plm_grammar_16 [9] = {1, 16,
  2, 17,
  3, 18,
  22, 35, -1} ;

static const int16_t gSuccessorTable_plm_grammar_17 [9] = {1, 16,
  2, 17,
  3, 18,
  22, 36, -1} ;

static const int16_t gSuccessorTable_plm_grammar_20 [9] = {1, 16,
  2, 17,
  3, 18,
  22, 38, -1} ;

static const int16_t gSuccessorTable_plm_grammar_22 [3] = {24, 41, -1} ;

static const int16_t gSuccessorTable_plm_grammar_23 [3] = {26, 43, -1} ;

static const int16_t gSuccessorTable_plm_grammar_24 [3] = {28, 45, -1} ;

static const int16_t gSuccessorTable_plm_grammar_29 [3] = {32, 51, -1} ;

static const int16_t gSuccessorTable_plm_grammar_31 [3] = {33, 54, -1} ;

static const int16_t gSuccessorTable_plm_grammar_33 [3] = {39, 56, -1} ;

static const int16_t gSuccessorTable_plm_grammar_37 [7] = {19, 66,
  20, 67,
  57, 68, -1} ;

static const int16_t gSuccessorTable_plm_grammar_39 [3] = {23, 70, -1} ;

static const int16_t gSuccessorTable_plm_grammar_40 [3] = {24, 71, -1} ;

static const int16_t gSuccessorTable_plm_grammar_42 [3] = {26, 73, -1} ;

static const int16_t gSuccessorTable_plm_grammar_46 [3] = {35, 77, -1} ;

static const int16_t gSuccessorTable_plm_grammar_47 [7] = {19, 66,
  20, 78,
  57, 68, -1} ;

static const int16_t gSuccessorTable_plm_grammar_52 [7] = {19, 66,
  20, 82,
  57, 68, -1} ;

static const int16_t gSuccessorTable_plm_grammar_53 [3] = {33, 83, -1} ;

static const int16_t gSuccessorTable_plm_grammar_55 [3] = {39, 85, -1} ;

static const int16_t gSuccessorTable_plm_grammar_57 [5] = {60, 96,
  61, 97, -1} ;

static const int16_t gSuccessorTable_plm_grammar_59 [5] = {19, 66,
  57, 99, -1} ;

static const int16_t gSuccessorTable_plm_grammar_61 [29] = {5, 110,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_62 [29] = {5, 124,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_63 [29] = {5, 125,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_64 [3] = {62, 127, -1} ;

static const int16_t gSuccessorTable_plm_grammar_65 [3] = {68, 129, -1} ;

static const int16_t gSuccessorTable_plm_grammar_66 [5] = {19, 66,
  57, 130, -1} ;

static const int16_t gSuccessorTable_plm_grammar_69 [3] = {23, 132, -1} ;

static const int16_t gSuccessorTable_plm_grammar_74 [7] = {2, 137,
  3, 18,
  27, 138, -1} ;

static const int16_t gSuccessorTable_plm_grammar_75 [29] = {5, 139,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_76 [3] = {35, 140, -1} ;

static const int16_t gSuccessorTable_plm_grammar_77 [3] = {36, 142, -1} ;

static const int16_t gSuccessorTable_plm_grammar_80 [7] = {19, 66,
  20, 144,
  57, 68, -1} ;

static const int16_t gSuccessorTable_plm_grammar_81 [29] = {5, 145,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_87 [3] = {67, 152, -1} ;

static const int16_t gSuccessorTable_plm_grammar_97 [29] = {5, 155,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_98 [3] = {58, 157, -1} ;

static const int16_t gSuccessorTable_plm_grammar_100 [3] = {59, 159, -1} ;

static const int16_t gSuccessorTable_plm_grammar_101 [3] = {56, 162, -1} ;

static const int16_t gSuccessorTable_plm_grammar_103 [29] = {5, 163,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_104 [3] = {18, 164, -1} ;

static const int16_t gSuccessorTable_plm_grammar_105 [3] = {18, 165, -1} ;

static const int16_t gSuccessorTable_plm_grammar_106 [3] = {18, 166, -1} ;

static const int16_t gSuccessorTable_plm_grammar_107 [3] = {18, 167, -1} ;

static const int16_t gSuccessorTable_plm_grammar_112 [3] = {44, 169, -1} ;

static const int16_t gSuccessorTable_plm_grammar_113 [3] = {45, 171, -1} ;

static const int16_t gSuccessorTable_plm_grammar_114 [3] = {46, 173, -1} ;

static const int16_t gSuccessorTable_plm_grammar_115 [3] = {47, 175, -1} ;

static const int16_t gSuccessorTable_plm_grammar_116 [3] = {48, 177, -1} ;

static const int16_t gSuccessorTable_plm_grammar_117 [3] = {49, 179, -1} ;

static const int16_t gSuccessorTable_plm_grammar_118 [3] = {50, 182, -1} ;

static const int16_t gSuccessorTable_plm_grammar_119 [3] = {51, 187, -1} ;

static const int16_t gSuccessorTable_plm_grammar_120 [3] = {52, 190, -1} ;

static const int16_t gSuccessorTable_plm_grammar_121 [3] = {53, 195, -1} ;

static const int16_t gSuccessorTable_plm_grammar_122 [3] = {54, 202, -1} ;

static const int16_t gSuccessorTable_plm_grammar_123 [3] = {55, 205, -1} ;

static const int16_t gSuccessorTable_plm_grammar_127 [31] = {5, 206,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123,
  21, 207, -1} ;

static const int16_t gSuccessorTable_plm_grammar_129 [29] = {5, 208,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_135 [5] = {2, 211,
  3, 18, -1} ;

static const int16_t gSuccessorTable_plm_grammar_136 [7] = {2, 137,
  3, 18,
  27, 212, -1} ;

static const int16_t gSuccessorTable_plm_grammar_137 [7] = {2, 137,
  3, 18,
  27, 213, -1} ;

static const int16_t gSuccessorTable_plm_grammar_141 [3] = {36, 216, -1} ;

static const int16_t gSuccessorTable_plm_grammar_142 [3] = {4, 218, -1} ;

static const int16_t gSuccessorTable_plm_grammar_147 [3] = {34, 221, -1} ;

static const int16_t gSuccessorTable_plm_grammar_148 [3] = {38, 223, -1} ;

static const int16_t gSuccessorTable_plm_grammar_150 [29] = {5, 225,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_153 [3] = {60, 228, -1} ;

static const int16_t gSuccessorTable_plm_grammar_154 [29] = {5, 229,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_168 [25] = {7, 235,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_170 [23] = {8, 236,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_172 [21] = {9, 237,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_174 [19] = {10, 238,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_176 [17] = {11, 239,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_178 [15] = {12, 240,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_180 [13] = {13, 241,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_181 [13] = {13, 242,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_183 [11] = {14, 243,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_184 [11] = {14, 244,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_185 [11] = {14, 245,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_186 [11] = {14, 246,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_188 [9] = {15, 247,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_189 [9] = {15, 248,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_191 [7] = {16, 249,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_192 [7] = {16, 250,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_193 [7] = {16, 251,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_194 [7] = {16, 252,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_196 [5] = {17, 253,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_197 [5] = {17, 254,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_198 [5] = {17, 255,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_199 [5] = {17, 256,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_200 [5] = {17, 257,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_201 [5] = {17, 258,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_209 [3] = {25, 265, -1} ;

static const int16_t gSuccessorTable_plm_grammar_211 [7] = {2, 137,
  3, 18,
  27, 267, -1} ;

static const int16_t gSuccessorTable_plm_grammar_215 [3] = {30, 269, -1} ;

static const int16_t gSuccessorTable_plm_grammar_217 [3] = {37, 273, -1} ;

static const int16_t gSuccessorTable_plm_grammar_222 [3] = {39, 276, -1} ;

static const int16_t gSuccessorTable_plm_grammar_224 [3] = {67, 278, -1} ;

static const int16_t gSuccessorTable_plm_grammar_225 [3] = {67, 279, -1} ;

static const int16_t gSuccessorTable_plm_grammar_226 [3] = {67, 280, -1} ;

static const int16_t gSuccessorTable_plm_grammar_230 [29] = {5, 281,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_231 [29] = {5, 282,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_232 [3] = {56, 283, -1} ;

static const int16_t gSuccessorTable_plm_grammar_235 [3] = {44, 285, -1} ;

static const int16_t gSuccessorTable_plm_grammar_236 [3] = {45, 286, -1} ;

static const int16_t gSuccessorTable_plm_grammar_237 [3] = {46, 287, -1} ;

static const int16_t gSuccessorTable_plm_grammar_238 [3] = {47, 288, -1} ;

static const int16_t gSuccessorTable_plm_grammar_239 [3] = {48, 289, -1} ;

static const int16_t gSuccessorTable_plm_grammar_240 [3] = {49, 290, -1} ;

static const int16_t gSuccessorTable_plm_grammar_247 [3] = {52, 291, -1} ;

static const int16_t gSuccessorTable_plm_grammar_248 [3] = {52, 292, -1} ;

static const int16_t gSuccessorTable_plm_grammar_249 [3] = {53, 293, -1} ;

static const int16_t gSuccessorTable_plm_grammar_250 [3] = {53, 294, -1} ;

static const int16_t gSuccessorTable_plm_grammar_251 [3] = {53, 295, -1} ;

static const int16_t gSuccessorTable_plm_grammar_252 [3] = {53, 296, -1} ;

static const int16_t gSuccessorTable_plm_grammar_253 [3] = {54, 297, -1} ;

static const int16_t gSuccessorTable_plm_grammar_254 [3] = {54, 298, -1} ;

static const int16_t gSuccessorTable_plm_grammar_255 [3] = {54, 299, -1} ;

static const int16_t gSuccessorTable_plm_grammar_256 [3] = {54, 300, -1} ;

static const int16_t gSuccessorTable_plm_grammar_257 [3] = {54, 301, -1} ;

static const int16_t gSuccessorTable_plm_grammar_258 [3] = {54, 302, -1} ;

static const int16_t gSuccessorTable_plm_grammar_261 [7] = {19, 66,
  20, 303,
  57, 68, -1} ;

static const int16_t gSuccessorTable_plm_grammar_262 [3] = {63, 305, -1} ;

static const int16_t gSuccessorTable_plm_grammar_263 [7] = {19, 66,
  20, 306,
  57, 68, -1} ;

static const int16_t gSuccessorTable_plm_grammar_269 [3] = {31, 313, -1} ;

static const int16_t gSuccessorTable_plm_grammar_277 [3] = {40, 322, -1} ;

static const int16_t gSuccessorTable_plm_grammar_284 [29] = {5, 323,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_303 [3] = {64, 326, -1} ;

static const int16_t gSuccessorTable_plm_grammar_307 [3] = {25, 328, -1} ;

static const int16_t gSuccessorTable_plm_grammar_309 [29] = {5, 329,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123, -1} ;

static const int16_t gSuccessorTable_plm_grammar_313 [5] = {29, 333,
  30, 334, -1} ;

static const int16_t gSuccessorTable_plm_grammar_318 [3] = {34, 338, -1} ;

static const int16_t gSuccessorTable_plm_grammar_321 [3] = {42, 343, -1} ;

static const int16_t gSuccessorTable_plm_grammar_324 [3] = {65, 346, -1} ;

static const int16_t gSuccessorTable_plm_grammar_325 [3] = {66, 348, -1} ;

static const int16_t gSuccessorTable_plm_grammar_327 [3] = {69, 350, -1} ;

static const int16_t gSuccessorTable_plm_grammar_329 [7] = {2, 137,
  3, 18,
  27, 351, -1} ;

static const int16_t gSuccessorTable_plm_grammar_330 [3] = {4, 352, -1} ;

static const int16_t gSuccessorTable_plm_grammar_334 [3] = {31, 355, -1} ;

static const int16_t gSuccessorTable_plm_grammar_335 [3] = {37, 356, -1} ;

static const int16_t gSuccessorTable_plm_grammar_336 [3] = {37, 357, -1} ;

static const int16_t gSuccessorTable_plm_grammar_337 [3] = {37, 358, -1} ;

static const int16_t gSuccessorTable_plm_grammar_340 [3] = {38, 360, -1} ;

static const int16_t gSuccessorTable_plm_grammar_341 [3] = {43, 362, -1} ;

static const int16_t gSuccessorTable_plm_grammar_343 [3] = {41, 364, -1} ;

static const int16_t gSuccessorTable_plm_grammar_346 [7] = {19, 66,
  20, 365,
  57, 68, -1} ;

static const int16_t gSuccessorTable_plm_grammar_348 [31] = {5, 206,
  6, 111,
  7, 112,
  8, 113,
  9, 114,
  10, 115,
  11, 116,
  12, 117,
  13, 118,
  14, 119,
  15, 120,
  16, 121,
  17, 122,
  18, 123,
  21, 366, -1} ;

static const int16_t gSuccessorTable_plm_grammar_355 [5] = {29, 367,
  30, 334, -1} ;

static const int16_t gSuccessorTable_plm_grammar_363 [3] = {42, 370, -1} ;

static const int16_t gSuccessorTable_plm_grammar_368 [7] = {19, 66,
  20, 372,
  57, 68, -1} ;

static const int16_t gSuccessorTable_plm_grammar_370 [3] = {41, 374, -1} ;

static const int16_t * gSuccessorTable_plm_grammar [376] = {
gSuccessorTable_plm_grammar_0, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_12, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_16, gSuccessorTable_plm_grammar_17, NULL, NULL, 
  gSuccessorTable_plm_grammar_20, NULL, gSuccessorTable_plm_grammar_22, gSuccessorTable_plm_grammar_23, 
  gSuccessorTable_plm_grammar_24, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_29, NULL, gSuccessorTable_plm_grammar_31, 
  NULL, gSuccessorTable_plm_grammar_33, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_37, NULL, gSuccessorTable_plm_grammar_39, 
  gSuccessorTable_plm_grammar_40, NULL, gSuccessorTable_plm_grammar_42, NULL, 
  NULL, NULL, gSuccessorTable_plm_grammar_46, gSuccessorTable_plm_grammar_47, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_52, gSuccessorTable_plm_grammar_53, NULL, gSuccessorTable_plm_grammar_55, 
  NULL, gSuccessorTable_plm_grammar_57, NULL, gSuccessorTable_plm_grammar_59, 
  NULL, gSuccessorTable_plm_grammar_61, gSuccessorTable_plm_grammar_62, gSuccessorTable_plm_grammar_63, 
  gSuccessorTable_plm_grammar_64, gSuccessorTable_plm_grammar_65, gSuccessorTable_plm_grammar_66, NULL, 
  NULL, gSuccessorTable_plm_grammar_69, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plm_grammar_74, gSuccessorTable_plm_grammar_75, 
  gSuccessorTable_plm_grammar_76, gSuccessorTable_plm_grammar_77, NULL, NULL, 
  gSuccessorTable_plm_grammar_80, gSuccessorTable_plm_grammar_81, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plm_grammar_87, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_97, gSuccessorTable_plm_grammar_98, NULL, 
  gSuccessorTable_plm_grammar_100, gSuccessorTable_plm_grammar_101, NULL, gSuccessorTable_plm_grammar_103, 
  gSuccessorTable_plm_grammar_104, gSuccessorTable_plm_grammar_105, gSuccessorTable_plm_grammar_106, gSuccessorTable_plm_grammar_107, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_112, gSuccessorTable_plm_grammar_113, gSuccessorTable_plm_grammar_114, gSuccessorTable_plm_grammar_115, 
  gSuccessorTable_plm_grammar_116, gSuccessorTable_plm_grammar_117, gSuccessorTable_plm_grammar_118, gSuccessorTable_plm_grammar_119, 
  gSuccessorTable_plm_grammar_120, gSuccessorTable_plm_grammar_121, gSuccessorTable_plm_grammar_122, gSuccessorTable_plm_grammar_123, 
  NULL, NULL, NULL, gSuccessorTable_plm_grammar_127, 
  NULL, gSuccessorTable_plm_grammar_129, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plm_grammar_135, 
  gSuccessorTable_plm_grammar_136, gSuccessorTable_plm_grammar_137, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_141, gSuccessorTable_plm_grammar_142, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plm_grammar_147, 
  gSuccessorTable_plm_grammar_148, NULL, gSuccessorTable_plm_grammar_150, NULL, 
  NULL, gSuccessorTable_plm_grammar_153, gSuccessorTable_plm_grammar_154, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_168, NULL, gSuccessorTable_plm_grammar_170, NULL, 
  gSuccessorTable_plm_grammar_172, NULL, gSuccessorTable_plm_grammar_174, NULL, 
  gSuccessorTable_plm_grammar_176, NULL, gSuccessorTable_plm_grammar_178, NULL, 
  gSuccessorTable_plm_grammar_180, gSuccessorTable_plm_grammar_181, NULL, gSuccessorTable_plm_grammar_183, 
  gSuccessorTable_plm_grammar_184, gSuccessorTable_plm_grammar_185, gSuccessorTable_plm_grammar_186, NULL, 
  gSuccessorTable_plm_grammar_188, gSuccessorTable_plm_grammar_189, NULL, gSuccessorTable_plm_grammar_191, 
  gSuccessorTable_plm_grammar_192, gSuccessorTable_plm_grammar_193, gSuccessorTable_plm_grammar_194, NULL, 
  gSuccessorTable_plm_grammar_196, gSuccessorTable_plm_grammar_197, gSuccessorTable_plm_grammar_198, gSuccessorTable_plm_grammar_199, 
  gSuccessorTable_plm_grammar_200, gSuccessorTable_plm_grammar_201, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_209, NULL, gSuccessorTable_plm_grammar_211, 
  NULL, NULL, NULL, gSuccessorTable_plm_grammar_215, 
  NULL, gSuccessorTable_plm_grammar_217, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plm_grammar_222, NULL, 
  gSuccessorTable_plm_grammar_224, gSuccessorTable_plm_grammar_225, gSuccessorTable_plm_grammar_226, NULL, 
  NULL, NULL, gSuccessorTable_plm_grammar_230, gSuccessorTable_plm_grammar_231, 
  gSuccessorTable_plm_grammar_232, NULL, NULL, gSuccessorTable_plm_grammar_235, 
  gSuccessorTable_plm_grammar_236, gSuccessorTable_plm_grammar_237, gSuccessorTable_plm_grammar_238, gSuccessorTable_plm_grammar_239, 
  gSuccessorTable_plm_grammar_240, NULL, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plm_grammar_247, 
  gSuccessorTable_plm_grammar_248, gSuccessorTable_plm_grammar_249, gSuccessorTable_plm_grammar_250, gSuccessorTable_plm_grammar_251, 
  gSuccessorTable_plm_grammar_252, gSuccessorTable_plm_grammar_253, gSuccessorTable_plm_grammar_254, gSuccessorTable_plm_grammar_255, 
  gSuccessorTable_plm_grammar_256, gSuccessorTable_plm_grammar_257, gSuccessorTable_plm_grammar_258, NULL, 
  NULL, gSuccessorTable_plm_grammar_261, gSuccessorTable_plm_grammar_262, gSuccessorTable_plm_grammar_263, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_269, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_277, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_284, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plm_grammar_303, 
  NULL, NULL, NULL, gSuccessorTable_plm_grammar_307, 
  NULL, gSuccessorTable_plm_grammar_309, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_313, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plm_grammar_318, NULL, 
  NULL, gSuccessorTable_plm_grammar_321, NULL, NULL, 
  gSuccessorTable_plm_grammar_324, gSuccessorTable_plm_grammar_325, NULL, gSuccessorTable_plm_grammar_327, 
  NULL, gSuccessorTable_plm_grammar_329, gSuccessorTable_plm_grammar_330, NULL, 
  NULL, NULL, gSuccessorTable_plm_grammar_334, gSuccessorTable_plm_grammar_335, 
  gSuccessorTable_plm_grammar_336, gSuccessorTable_plm_grammar_337, NULL, NULL, 
  gSuccessorTable_plm_grammar_340, gSuccessorTable_plm_grammar_341, NULL, gSuccessorTable_plm_grammar_343, 
  NULL, NULL, gSuccessorTable_plm_grammar_346, NULL, 
  gSuccessorTable_plm_grammar_348, NULL, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plm_grammar_355, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plm_grammar_363, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_368, NULL, gSuccessorTable_plm_grammar_370, NULL, 
  NULL, NULL, NULL, NULL} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Production rules infos (left non terminal, size of right string)                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gProductionsTable_plm_grammar [182 * 2] = {
  0, 1,
  1, 4,
  1, 8,
  1, 6,
  1, 10,
  1, 5,
  1, 5,
  1, 5,
  1, 6,
  1, 4,
  1, 13,
  2, 4,
  3, 6,
  4, 3,
  1, 2,
  1, 8,
  5, 1,
  6, 2,
  7, 2,
  8, 2,
  9, 2,
  10, 2,
  11, 2,
  12, 2,
  13, 2,
  14, 2,
  15, 2,
  16, 2,
  17, 2,
  18, 2,
  18, 2,
  18, 2,
  18, 2,
  18, 3,
  18, 1,
  18, 1,
  18, 1,
  18, 2,
  18, 3,
  18, 6,
  19, 2,
  20, 1,
  19, 2,
  19, 2,
  19, 2,
  19, 2,
  19, 5,
  19, 3,
  19, 5,
  19, 4,
  19, 2,
  19, 2,
  19, 3,
  19, 5,
  21, 4,
  19, 4,
  19, 7,
  1, 2,
  22, 0,
  22, 2,
  22, 2,
  22, 3,
  23, 0,
  23, 2,
  24, 0,
  24, 2,
  25, 0,
  25, 3,
  26, 0,
  26, 2,
  27, 0,
  27, 6,
  27, 2,
  27, 3,
  27, 2,
  28, 0,
  28, 1,
  29, 0,
  29, 3,
  30, 0,
  30, 1,
  31, 3,
  31, 2,
  31, 3,
  32, 0,
  32, 1,
  33, 0,
  33, 2,
  34, 0,
  34, 4,
  35, 0,
  35, 2,
  36, 0,
  36, 2,
  37, 0,
  37, 4,
  37, 4,
  37, 4,
  38, 0,
  38, 5,
  39, 0,
  39, 2,
  40, 0,
  40, 4,
  41, 0,
  41, 3,
  42, 1,
  42, 2,
  43, 0,
  43, 3,
  44, 0,
  44, 3,
  45, 0,
  45, 3,
  46, 0,
  46, 3,
  47, 0,
  47, 3,
  48, 0,
  48, 3,
  49, 0,
  49, 3,
  50, 0,
  50, 2,
  50, 2,
  51, 0,
  51, 2,
  51, 2,
  51, 2,
  51, 2,
  52, 0,
  52, 3,
  52, 3,
  53, 0,
  53, 3,
  53, 3,
  53, 3,
  53, 3,
  54, 0,
  54, 3,
  54, 3,
  54, 3,
  54, 3,
  54, 3,
  54, 3,
  55, 0,
  55, 2,
  55, 2,
  56, 0,
  56, 3,
  57, 0,
  57, 2,
  57, 2,
  58, 0,
  58, 1,
  59, 0,
  59, 1,
  60, 0,
  60, 3,
  61, 1,
  61, 1,
  61, 1,
  62, 0,
  62, 1,
  63, 0,
  63, 1,
  64, 0,
  64, 3,
  64, 3,
  65, 0,
  65, 1,
  66, 0,
  66, 1,
  67, 0,
  67, 3,
  67, 3,
  67, 3,
  68, 0,
  68, 1,
  69, 0,
  69, 1,
  70, 1
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'start_symbol' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_start_5F_symbol_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_common_5F_syntax_start_5F_symbol_i0_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_start_5F_symbol_ (GALGAS_ast &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_location &  parameter_3,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_common_5F_syntax_start_5F_symbol_i0_(parameter_1, parameter_2, parameter_3, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

void cGrammar_plm_5F_grammar::performIndexing (C_Compiler * /* inCompiler */,
             const C_String & /* inSourceFilePath */) {
}

void cGrammar_plm_5F_grammar::performOnlyLexicalAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_plm_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performLexicalAnalysis () ;
  }
  macroDetachSharedObject (scanner) ;
}

void cGrammar_plm_5F_grammar::performOnlySyntaxAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_plm_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performBottomUpParsing (gActionTable_plm_grammar, gNonTerminalNames_plm_grammar,
                                     gActionTableIndex_plm_grammar, gSuccessorTable_plm_grammar,
                                     gProductionsTable_plm_grammar) ;
  }
  macroDetachSharedObject (scanner) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Grammar start symbol implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::_performSourceFileParsing_ (C_Compiler * inCompiler,
                                GALGAS_lstring inFilePath,
                                GALGAS_ast &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_location &  parameter_3
                                COMMA_LOCATION_ARGS) {
  if (inFilePath.isValid ()) {
    const GALGAS_string filePathAsString = inFilePath.reader_string (HERE) ;
    C_String filePath = filePathAsString.stringValue () ;
    if (! C_FileManager::isAbsolutePath (filePath)) {
      filePath = inCompiler->sourceFilePath ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (filePath) ;
    }
    if (C_FileManager::fileExistsAtPath (filePath)) {
      C_Lexique_plm_5F_lexique * scanner = NULL ;
      macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, "", "", filePath COMMA_HERE)) ;
      if (scanner->sourceText () != NULL) {
        const bool ok = scanner->performBottomUpParsing (gActionTable_plm_grammar, gNonTerminalNames_plm_grammar,
                                                         gActionTableIndex_plm_grammar, gSuccessorTable_plm_grammar,
                                                         gProductionsTable_plm_grammar) ;
        if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
          cGrammar_plm_5F_grammar grammar ;
          grammar.nt_start_5F_symbol_ (parameter_1, parameter_2, parameter_3, scanner) ;
        }
      }else{
        C_String message ;
        message << "the '" << filePath << "' file exists, but cannot be read" ;
        const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
        inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
      }
      macroDetachSharedObject (scanner) ;
    }else{
      C_String message ;
      message << "the '" << filePath << "' file does not exist" ;
      const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
      inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::_performSourceStringParsing_ (C_Compiler * inCompiler,
                                GALGAS_string inSourceString,
                                GALGAS_ast &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_location &  parameter_3
                                COMMA_UNUSED_LOCATION_ARGS) {
  C_Lexique_plm_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, inSourceString.stringValue (), "" COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    const bool ok = scanner->performBottomUpParsing (gActionTable_plm_grammar, gNonTerminalNames_plm_grammar,
                                                     gActionTableIndex_plm_grammar, gSuccessorTable_plm_grammar,
                                                     gProductionsTable_plm_grammar) ;
    if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
      cGrammar_plm_5F_grammar grammar ;
      grammar.nt_start_5F_symbol_ (parameter_1, parameter_2, parameter_3, scanner) ;
      }
  }
  macroDetachSharedObject (scanner) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'declaration' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_declaration_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
      rule_common_5F_syntax_declaration_i1_parse(inLexique) ;
    break ;
  case 2 :
      rule_common_5F_syntax_declaration_i2_parse(inLexique) ;
    break ;
  case 3 :
      rule_common_5F_syntax_declaration_i3_parse(inLexique) ;
    break ;
  case 4 :
      rule_common_5F_syntax_declaration_i4_parse(inLexique) ;
    break ;
  case 5 :
      rule_common_5F_syntax_declaration_i5_parse(inLexique) ;
    break ;
  case 6 :
      rule_common_5F_syntax_declaration_i6_parse(inLexique) ;
    break ;
  case 7 :
      rule_common_5F_syntax_declaration_i7_parse(inLexique) ;
    break ;
  case 8 :
      rule_common_5F_syntax_declaration_i8_parse(inLexique) ;
    break ;
  case 9 :
      rule_common_5F_syntax_declaration_i9_parse(inLexique) ;
    break ;
  case 10 :
      rule_common_5F_syntax_declaration_i10_parse(inLexique) ;
    break ;
  case 14 :
      rule_common_5F_syntax_declaration_i14_parse(inLexique) ;
    break ;
  case 15 :
      rule_common_5F_syntax_declaration_i15_parse(inLexique) ;
    break ;
  case 57 :
      rule_plm_5F_specific_5F_syntax_declaration_i0_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_declaration_ (GALGAS_ast &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
      rule_common_5F_syntax_declaration_i1_(parameter_1, inLexique) ;
    break ;
  case 2 :
      rule_common_5F_syntax_declaration_i2_(parameter_1, inLexique) ;
    break ;
  case 3 :
      rule_common_5F_syntax_declaration_i3_(parameter_1, inLexique) ;
    break ;
  case 4 :
      rule_common_5F_syntax_declaration_i4_(parameter_1, inLexique) ;
    break ;
  case 5 :
      rule_common_5F_syntax_declaration_i5_(parameter_1, inLexique) ;
    break ;
  case 6 :
      rule_common_5F_syntax_declaration_i6_(parameter_1, inLexique) ;
    break ;
  case 7 :
      rule_common_5F_syntax_declaration_i7_(parameter_1, inLexique) ;
    break ;
  case 8 :
      rule_common_5F_syntax_declaration_i8_(parameter_1, inLexique) ;
    break ;
  case 9 :
      rule_common_5F_syntax_declaration_i9_(parameter_1, inLexique) ;
    break ;
  case 10 :
      rule_common_5F_syntax_declaration_i10_(parameter_1, inLexique) ;
    break ;
  case 14 :
      rule_common_5F_syntax_declaration_i14_(parameter_1, inLexique) ;
    break ;
  case 15 :
      rule_common_5F_syntax_declaration_i15_(parameter_1, inLexique) ;
    break ;
  case 57 :
      rule_plm_5F_specific_5F_syntax_declaration_i0_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'procedure' non terminal implementation                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_procedure_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 11 :
      rule_common_5F_syntax_procedure_i11_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_procedure_ (const GALGAS_procedureKindAST  parameter_1,
                                GALGAS_procedureDeclarationListAST &  parameter_2,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 11 :
      rule_common_5F_syntax_procedure_i11_(parameter_1, parameter_2, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'procedure_header' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_procedure_5F_header_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 12 :
      rule_common_5F_syntax_procedure_5F_header_i12_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_procedure_5F_header_ (GALGAS_lstringlist &  parameter_1,
                                GALGAS_lstring &  parameter_2,
                                GALGAS_lstringlist &  parameter_3,
                                GALGAS_procFormalArgumentList &  parameter_4,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 12 :
      rule_common_5F_syntax_procedure_5F_header_i12_(parameter_1, parameter_2, parameter_3, parameter_4, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'procedure_formal_arguments' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_procedure_5F_formal_5F_arguments_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 13 :
      rule_common_5F_syntax_procedure_5F_formal_5F_arguments_i13_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_procedure_5F_formal_5F_arguments_ (GALGAS_procFormalArgumentList &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 13 :
      rule_common_5F_syntax_procedure_5F_formal_5F_arguments_i13_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'expression' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 16 :
      rule_common_5F_syntax_expression_i16_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 16 :
      rule_common_5F_syntax_expression_i16_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'expression_12' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_5F__31__32__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 17 :
      rule_common_5F_syntax_expression_5F__31__32__i17_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_5F__31__32__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 17 :
      rule_common_5F_syntax_expression_5F__31__32__i17_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'expression_11' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_5F__31__31__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 18 :
      rule_common_5F_syntax_expression_5F__31__31__i18_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_5F__31__31__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 18 :
      rule_common_5F_syntax_expression_5F__31__31__i18_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'expression_10' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_5F__31__30__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 19 :
      rule_common_5F_syntax_expression_5F__31__30__i19_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_5F__31__30__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 19 :
      rule_common_5F_syntax_expression_5F__31__30__i19_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_9' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_5F__39__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 20 :
      rule_common_5F_syntax_expression_5F__39__i20_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_5F__39__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 20 :
      rule_common_5F_syntax_expression_5F__39__i20_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_8' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_5F__38__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 21 :
      rule_common_5F_syntax_expression_5F__38__i21_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_5F__38__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 21 :
      rule_common_5F_syntax_expression_5F__38__i21_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_7' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_5F__37__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 22 :
      rule_common_5F_syntax_expression_5F__37__i22_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_5F__37__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 22 :
      rule_common_5F_syntax_expression_5F__37__i22_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_6' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_5F__36__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 23 :
      rule_common_5F_syntax_expression_5F__36__i23_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_5F__36__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 23 :
      rule_common_5F_syntax_expression_5F__36__i23_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_5' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_5F__35__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 24 :
      rule_common_5F_syntax_expression_5F__35__i24_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_5F__35__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 24 :
      rule_common_5F_syntax_expression_5F__35__i24_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_4' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_5F__34__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 25 :
      rule_common_5F_syntax_expression_5F__34__i25_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_5F__34__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 25 :
      rule_common_5F_syntax_expression_5F__34__i25_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_3' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_5F__33__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 26 :
      rule_common_5F_syntax_expression_5F__33__i26_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_5F__33__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 26 :
      rule_common_5F_syntax_expression_5F__33__i26_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_2' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_5F__32__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 27 :
      rule_common_5F_syntax_expression_5F__32__i27_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_5F__32__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 27 :
      rule_common_5F_syntax_expression_5F__32__i27_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_1' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_5F__31__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 28 :
      rule_common_5F_syntax_expression_5F__31__i28_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_5F__31__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 28 :
      rule_common_5F_syntax_expression_5F__31__i28_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       'primary' non terminal implementation                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_primary_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 29 :
      rule_common_5F_syntax_primary_i29_parse(inLexique) ;
    break ;
  case 30 :
      rule_common_5F_syntax_primary_i30_parse(inLexique) ;
    break ;
  case 31 :
      rule_common_5F_syntax_primary_i31_parse(inLexique) ;
    break ;
  case 32 :
      rule_common_5F_syntax_primary_i32_parse(inLexique) ;
    break ;
  case 33 :
      rule_common_5F_syntax_primary_i33_parse(inLexique) ;
    break ;
  case 34 :
      rule_common_5F_syntax_primary_i34_parse(inLexique) ;
    break ;
  case 35 :
      rule_common_5F_syntax_primary_i35_parse(inLexique) ;
    break ;
  case 36 :
      rule_common_5F_syntax_primary_i36_parse(inLexique) ;
    break ;
  case 37 :
      rule_common_5F_syntax_primary_i37_parse(inLexique) ;
    break ;
  case 38 :
      rule_common_5F_syntax_primary_i38_parse(inLexique) ;
    break ;
  case 39 :
      rule_common_5F_syntax_primary_i39_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_primary_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 29 :
      rule_common_5F_syntax_primary_i29_(parameter_1, inLexique) ;
    break ;
  case 30 :
      rule_common_5F_syntax_primary_i30_(parameter_1, inLexique) ;
    break ;
  case 31 :
      rule_common_5F_syntax_primary_i31_(parameter_1, inLexique) ;
    break ;
  case 32 :
      rule_common_5F_syntax_primary_i32_(parameter_1, inLexique) ;
    break ;
  case 33 :
      rule_common_5F_syntax_primary_i33_(parameter_1, inLexique) ;
    break ;
  case 34 :
      rule_common_5F_syntax_primary_i34_(parameter_1, inLexique) ;
    break ;
  case 35 :
      rule_common_5F_syntax_primary_i35_(parameter_1, inLexique) ;
    break ;
  case 36 :
      rule_common_5F_syntax_primary_i36_(parameter_1, inLexique) ;
    break ;
  case 37 :
      rule_common_5F_syntax_primary_i37_(parameter_1, inLexique) ;
    break ;
  case 38 :
      rule_common_5F_syntax_primary_i38_(parameter_1, inLexique) ;
    break ;
  case 39 :
      rule_common_5F_syntax_primary_i39_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'instruction' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_instruction_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 40 :
      rule_common_5F_syntax_instruction_i40_parse(inLexique) ;
    break ;
  case 42 :
      rule_common_5F_syntax_instruction_i42_parse(inLexique) ;
    break ;
  case 43 :
      rule_common_5F_syntax_instruction_i43_parse(inLexique) ;
    break ;
  case 44 :
      rule_common_5F_syntax_instruction_i44_parse(inLexique) ;
    break ;
  case 45 :
      rule_common_5F_syntax_instruction_i45_parse(inLexique) ;
    break ;
  case 46 :
      rule_common_5F_syntax_instruction_i46_parse(inLexique) ;
    break ;
  case 47 :
      rule_common_5F_syntax_instruction_i47_parse(inLexique) ;
    break ;
  case 48 :
      rule_common_5F_syntax_instruction_i48_parse(inLexique) ;
    break ;
  case 49 :
      rule_common_5F_syntax_instruction_i49_parse(inLexique) ;
    break ;
  case 50 :
      rule_common_5F_syntax_instruction_i50_parse(inLexique) ;
    break ;
  case 51 :
      rule_common_5F_syntax_instruction_i51_parse(inLexique) ;
    break ;
  case 52 :
      rule_common_5F_syntax_instruction_i52_parse(inLexique) ;
    break ;
  case 53 :
      rule_common_5F_syntax_instruction_i53_parse(inLexique) ;
    break ;
  case 55 :
      rule_common_5F_syntax_instruction_i55_parse(inLexique) ;
    break ;
  case 56 :
      rule_common_5F_syntax_instruction_i56_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_instruction_ (GALGAS_instructionListAST &  parameter_1,
                                GALGAS_labelMap &  parameter_2,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 40 :
      rule_common_5F_syntax_instruction_i40_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 42 :
      rule_common_5F_syntax_instruction_i42_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 43 :
      rule_common_5F_syntax_instruction_i43_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 44 :
      rule_common_5F_syntax_instruction_i44_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 45 :
      rule_common_5F_syntax_instruction_i45_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 46 :
      rule_common_5F_syntax_instruction_i46_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 47 :
      rule_common_5F_syntax_instruction_i47_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 48 :
      rule_common_5F_syntax_instruction_i48_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 49 :
      rule_common_5F_syntax_instruction_i49_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 50 :
      rule_common_5F_syntax_instruction_i50_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 51 :
      rule_common_5F_syntax_instruction_i51_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 52 :
      rule_common_5F_syntax_instruction_i52_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 53 :
      rule_common_5F_syntax_instruction_i53_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 55 :
      rule_common_5F_syntax_instruction_i55_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 56 :
      rule_common_5F_syntax_instruction_i56_(parameter_1, parameter_2, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'instructionList' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_instructionList_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 41 :
      rule_common_5F_syntax_instructionList_i41_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_instructionList_ (GALGAS_instructionListAST &  parameter_1,
                                GALGAS_labelMap &  parameter_2,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 41 :
      rule_common_5F_syntax_instructionList_i41_(parameter_1, parameter_2, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'if_instruction' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_if_5F_instruction_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 54 :
      rule_common_5F_syntax_if_5F_instruction_i54_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_if_5F_instruction_ (GALGAS_ifInstructionAST &  parameter_1,
                                GALGAS_labelMap &  parameter_2,
                                const GALGAS_lstring  parameter_3,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 54 :
      rule_common_5F_syntax_if_5F_instruction_i54_(parameter_1, parameter_2, parameter_3, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_0' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_0 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 58 59 60 61
  return inLexique->nextProductionIndex () - 57 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_1' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_1 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 62 63
  return inLexique->nextProductionIndex () - 61 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_2' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_2 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 64 65
  return inLexique->nextProductionIndex () - 63 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_3' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_3 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 66 67
  return inLexique->nextProductionIndex () - 65 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_4' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_4 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 68 69
  return inLexique->nextProductionIndex () - 67 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_5' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_5 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 70 71 72 73 74
  return inLexique->nextProductionIndex () - 69 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_6' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_6 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 75 76
  return inLexique->nextProductionIndex () - 74 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_7' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_7 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 77 78
  return inLexique->nextProductionIndex () - 76 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_8' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_8 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 79 80
  return inLexique->nextProductionIndex () - 78 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_9' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_9 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 81 82 83
  return inLexique->nextProductionIndex () - 80 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_10' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_10 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 84 85
  return inLexique->nextProductionIndex () - 83 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_11' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_11 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 86 87
  return inLexique->nextProductionIndex () - 85 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_12' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_12 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 88 89
  return inLexique->nextProductionIndex () - 87 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_13' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_13 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 90 91
  return inLexique->nextProductionIndex () - 89 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_14' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_14 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 92 93
  return inLexique->nextProductionIndex () - 91 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_15' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_15 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 94 95 96 97
  return inLexique->nextProductionIndex () - 93 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_16' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_16 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 98 99
  return inLexique->nextProductionIndex () - 97 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_17' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_17 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 100 101
  return inLexique->nextProductionIndex () - 99 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_18' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_18 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 102 103
  return inLexique->nextProductionIndex () - 101 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_19' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_19 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 104 105
  return inLexique->nextProductionIndex () - 103 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_20' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_20 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 106 107
  return inLexique->nextProductionIndex () - 105 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_21' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_21 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 108 109
  return inLexique->nextProductionIndex () - 107 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_22' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_22 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 110 111
  return inLexique->nextProductionIndex () - 109 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_23' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_23 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 112 113
  return inLexique->nextProductionIndex () - 111 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_24' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_24 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 114 115
  return inLexique->nextProductionIndex () - 113 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_25' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_25 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 116 117
  return inLexique->nextProductionIndex () - 115 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_26' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_26 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 118 119
  return inLexique->nextProductionIndex () - 117 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_27' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_27 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 120 121
  return inLexique->nextProductionIndex () - 119 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_28' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_28 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 122 123 124
  return inLexique->nextProductionIndex () - 121 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_29' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_29 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 125 126 127 128 129
  return inLexique->nextProductionIndex () - 124 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_30' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_30 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 130 131 132
  return inLexique->nextProductionIndex () - 129 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_31' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_31 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 133 134 135 136 137
  return inLexique->nextProductionIndex () - 132 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_32' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_32 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 138 139 140 141 142 143 144
  return inLexique->nextProductionIndex () - 137 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_33' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_33 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 145 146 147
  return inLexique->nextProductionIndex () - 144 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_34' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_34 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 148 149
  return inLexique->nextProductionIndex () - 147 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_35' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_35 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 150 151 152
  return inLexique->nextProductionIndex () - 149 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_36' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_36 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 153 154
  return inLexique->nextProductionIndex () - 152 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_37' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_37 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 155 156
  return inLexique->nextProductionIndex () - 154 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_38' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_38 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 157 158
  return inLexique->nextProductionIndex () - 156 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_39' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_39 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 159 160 161
  return inLexique->nextProductionIndex () - 158 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_40' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_40 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 162 163
  return inLexique->nextProductionIndex () - 161 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_41' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_41 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 164 165
  return inLexique->nextProductionIndex () - 163 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_42' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_42 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 166 167 168
  return inLexique->nextProductionIndex () - 165 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_43' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_43 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 169 170
  return inLexique->nextProductionIndex () - 168 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_44' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_44 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 171 172
  return inLexique->nextProductionIndex () - 170 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_45' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_45 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 173 174 175 176
  return inLexique->nextProductionIndex () - 172 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_46' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_46 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 177 178
  return inLexique->nextProductionIndex () - 176 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_47' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_47 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 179 180
  return inLexique->nextProductionIndex () - 178 ;
}

//---------------------------------------------------------------------------------------------------------------------*

