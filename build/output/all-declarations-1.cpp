#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------------------------------------------------*

#include "all-declarations-1.h"


//---------------------------------------------------------------------------------------------------------------------*

cMapElement_modeMap::cMapElement_modeMap (const GALGAS_lstring & inKey
                                          COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_modeMap::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_modeMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_modeMap (mAttribute_lkey COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_modeMap::description (C_String & /* ioString */, const int32_t /* inIndentation */) const {
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_modeMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_modeMap * operand = (cMapElement_modeMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_modeMap::GALGAS_modeMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_modeMap::GALGAS_modeMap (const GALGAS_modeMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_modeMap & GALGAS_modeMap::operator = (const GALGAS_modeMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_modeMap GALGAS_modeMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_modeMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_modeMap GALGAS_modeMap::constructor_mapWithMapToOverride (const GALGAS_modeMap & inMapToOverride
                                                                 COMMA_LOCATION_ARGS) {
  GALGAS_modeMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_modeMap GALGAS_modeMap::reader_overriddenMap (C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) const {
  GALGAS_modeMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_modeMap::addAssign_operation (const GALGAS_lstring & inKey,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) {
  cMapElement_modeMap * p = NULL ;
  macroMyNew (p, cMapElement_modeMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@modeMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_modeMap::modifier_insertKey (GALGAS_lstring inKey,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) {
  cMapElement_modeMap * p = NULL ;
  macroMyNew (p, cMapElement_modeMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' mode is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_modeMap_searchKey = "there is no '%K' mode" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_modeMap::method_searchKey (GALGAS_lstring inKey,
                                       C_Compiler * inCompiler
                                       COMMA_LOCATION_ARGS) const {
  const cMapElement_modeMap * p = (const cMapElement_modeMap *) performSearch (inKey,
                                                                                 inCompiler,
                                                                                 kSearchErrorMessage_modeMap_searchKey
                                                                                 COMMA_THERE) ;
  if (NULL == p) {
  }else{
    macroValidSharedObject (p, cMapElement_modeMap) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_modeMap * GALGAS_modeMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                         const GALGAS_string & inKey
                                                                         COMMA_LOCATION_ARGS) {
  cMapElement_modeMap * result = (cMapElement_modeMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_modeMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_modeMap::cEnumerator_modeMap (const GALGAS_modeMap & inEnumeratedObject,
                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_modeMap_2D_element cEnumerator_modeMap::current (LOCATION_ARGS) const {
  const cMapElement_modeMap * p = (const cMapElement_modeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_modeMap) ;
  return GALGAS_modeMap_2D_element (p->mAttribute_lkey) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_modeMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                    @modeMap type                                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_modeMap ("modeMap",
                                NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_modeMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_modeMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_modeMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_modeMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_modeMap GALGAS_modeMap::extractObject (const GALGAS_object & inObject,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  GALGAS_modeMap result ;
  const GALGAS_modeMap * p = (const GALGAS_modeMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_modeMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("modeMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_unifiedTypeMap::cMapElement_unifiedTypeMap (const GALGAS_lstring & inKey,
                                                        const GALGAS_typeKind & in_kind,
                                                        const GALGAS_constructorMap & in_constructorMap,
                                                        const GALGAS_procedureMap & in_procedureMap,
                                                        const GALGAS_bool & in_copiable,
                                                        const GALGAS_bool & in_equatable,
                                                        const GALGAS_bool & in_comparable
                                                        COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_kind (in_kind),
mAttribute_constructorMap (in_constructorMap),
mAttribute_procedureMap (in_procedureMap),
mAttribute_copiable (in_copiable),
mAttribute_equatable (in_equatable),
mAttribute_comparable (in_comparable) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_unifiedTypeMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_kind.isValid () && mAttribute_constructorMap.isValid () && mAttribute_procedureMap.isValid () && mAttribute_copiable.isValid () && mAttribute_equatable.isValid () && mAttribute_comparable.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_unifiedTypeMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_unifiedTypeMap (mAttribute_lkey, mAttribute_kind, mAttribute_constructorMap, mAttribute_procedureMap, mAttribute_copiable, mAttribute_equatable, mAttribute_comparable COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_unifiedTypeMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "kind" ":" ;
  mAttribute_kind.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "constructorMap" ":" ;
  mAttribute_constructorMap.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "procedureMap" ":" ;
  mAttribute_procedureMap.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "copiable" ":" ;
  mAttribute_copiable.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "equatable" ":" ;
  mAttribute_equatable.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "comparable" ":" ;
  mAttribute_comparable.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_unifiedTypeMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_unifiedTypeMap * operand = (cMapElement_unifiedTypeMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_kind.objectCompare (operand->mAttribute_kind) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_constructorMap.objectCompare (operand->mAttribute_constructorMap) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_procedureMap.objectCompare (operand->mAttribute_procedureMap) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_copiable.objectCompare (operand->mAttribute_copiable) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_equatable.objectCompare (operand->mAttribute_equatable) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_comparable.objectCompare (operand->mAttribute_comparable) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap::GALGAS_unifiedTypeMap (void) :
AC_GALGAS_uniqueMap () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap::GALGAS_unifiedTypeMap (const GALGAS_unifiedTypeMap & inSource) :
AC_GALGAS_uniqueMap (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap & GALGAS_unifiedTypeMap::operator = (const GALGAS_unifiedTypeMap & inSource) {
  * ((AC_GALGAS_uniqueMap *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap GALGAS_unifiedTypeMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_unifiedTypeMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton states                                                       *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton state names                                                  *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton actions                                                    *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton action names                                                 *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton transitions                                                  *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//  Map automaton final state issues                                           *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_insertKey (GALGAS_lstring inKey,
                                                GALGAS_typeKind inArgument0,
                                                GALGAS_constructorMap inArgument1,
                                                GALGAS_procedureMap inArgument2,
                                                GALGAS_bool inArgument3,
                                                GALGAS_bool inArgument4,
                                                GALGAS_bool inArgument5,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  cMapElement_unifiedTypeMap * p = NULL ;
  macroMyNew (p, cMapElement_unifiedTypeMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4, inArgument5 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' type is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        0,
                        NULL,
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_unifiedTypeMap_searchKey = "there is no '%K' type" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::method_searchKey (GALGAS_lstring inKey,
                                              GALGAS_typeKind & outArgument0,
                                              GALGAS_constructorMap & outArgument1,
                                              GALGAS_procedureMap & outArgument2,
                                              GALGAS_bool & outArgument3,
                                              GALGAS_bool & outArgument4,
                                              GALGAS_bool & outArgument5,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) performSearch (inKey,
                                                                                               inCompiler,
                                                                                               kSearchErrorMessage_unifiedTypeMap_searchKey
                                                                                               COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
    outArgument4.drop () ;
    outArgument5.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    outArgument0 = p->mAttribute_kind ;
    outArgument1 = p->mAttribute_constructorMap ;
    outArgument2 = p->mAttribute_procedureMap ;
    outArgument3 = p->mAttribute_copiable ;
    outArgument4 = p->mAttribute_equatable ;
    outArgument5 = p->mAttribute_comparable ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_unifiedTypeMap::reader_kindForKey (const GALGAS_string & inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) attributes ;
  GALGAS_typeKind result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_kind ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap GALGAS_unifiedTypeMap::reader_constructorMapForKey (const GALGAS_string & inKey,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) attributes ;
  GALGAS_constructorMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_constructorMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap GALGAS_unifiedTypeMap::reader_procedureMapForKey (const GALGAS_string & inKey,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) attributes ;
  GALGAS_procedureMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_procedureMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_unifiedTypeMap::reader_copiableForKey (const GALGAS_string & inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_copiable ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_unifiedTypeMap::reader_equatableForKey (const GALGAS_string & inKey,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_equatable ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_unifiedTypeMap::reader_comparableForKey (const GALGAS_string & inKey,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_comparable ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_setKindForKey (GALGAS_typeKind inAttributeValue,
                                                    GALGAS_string inKey,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_unifiedTypeMap * p = (cMapElement_unifiedTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    p->mAttribute_kind = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_setConstructorMapForKey (GALGAS_constructorMap inAttributeValue,
                                                              GALGAS_string inKey,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_unifiedTypeMap * p = (cMapElement_unifiedTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    p->mAttribute_constructorMap = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_setProcedureMapForKey (GALGAS_procedureMap inAttributeValue,
                                                            GALGAS_string inKey,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_unifiedTypeMap * p = (cMapElement_unifiedTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    p->mAttribute_procedureMap = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_setCopiableForKey (GALGAS_bool inAttributeValue,
                                                        GALGAS_string inKey,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_unifiedTypeMap * p = (cMapElement_unifiedTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    p->mAttribute_copiable = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_setEquatableForKey (GALGAS_bool inAttributeValue,
                                                         GALGAS_string inKey,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_unifiedTypeMap * p = (cMapElement_unifiedTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    p->mAttribute_equatable = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap::modifier_setComparableForKey (GALGAS_bool inAttributeValue,
                                                          GALGAS_string inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_unifiedTypeMap * p = (cMapElement_unifiedTypeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    p->mAttribute_comparable = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_unifiedTypeMap * GALGAS_unifiedTypeMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                       const GALGAS_string & inKey
                                                                                       COMMA_LOCATION_ARGS) {
  cMapElement_unifiedTypeMap * result = (cMapElement_unifiedTypeMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_unifiedTypeMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_unifiedTypeMap::cEnumerator_unifiedTypeMap (const GALGAS_unifiedTypeMap & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_unifiedTypeMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind cEnumerator_unifiedTypeMap::current_kind (LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
  return p->mAttribute_kind ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap cEnumerator_unifiedTypeMap::current_constructorMap (LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
  return p->mAttribute_constructorMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap cEnumerator_unifiedTypeMap::current_procedureMap (LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
  return p->mAttribute_procedureMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_unifiedTypeMap::current_copiable (LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
  return p->mAttribute_copiable ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_unifiedTypeMap::current_equatable (LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
  return p->mAttribute_equatable ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_unifiedTypeMap::current_comparable (LOCATION_ARGS) const {
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
  return p->mAttribute_comparable ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                @unifiedTypeMap type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_unifiedTypeMap ("unifiedTypeMap",
                                       NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_unifiedTypeMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_unifiedTypeMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_unifiedTypeMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_unifiedTypeMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap GALGAS_unifiedTypeMap::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap result ;
  const GALGAS_unifiedTypeMap * p = (const GALGAS_unifiedTypeMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_unifiedTypeMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("unifiedTypeMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Class for element of '@typeList' list                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_typeList : public cCollectionElement {
  public : GALGAS_typeList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_typeList (const GALGAS_unifiedTypeMap_2D_proxy & in_mActualType
                                        COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_typeList::cCollectionElement_typeList (const GALGAS_unifiedTypeMap_2D_proxy & in_mActualType
                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mActualType) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_typeList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_typeList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_typeList (mObject.mAttribute_mActualType COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_typeList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mActualType" ":" ;
  mObject.mAttribute_mActualType.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_typeList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_typeList * operand = (cCollectionElement_typeList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_typeList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList::GALGAS_typeList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList::GALGAS_typeList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_typeList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::constructor_listWithValue (const GALGAS_unifiedTypeMap_2D_proxy & inOperand0
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_typeList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_typeList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                 const GALGAS_unifiedTypeMap_2D_proxy & in_mActualType
                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement_typeList * p = NULL ;
  macroMyNew (p, cCollectionElement_typeList (in_mActualType COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::addAssign_operation (const GALGAS_unifiedTypeMap_2D_proxy & inOperand0
                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_typeList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::modifier_insertAtIndex (const GALGAS_unifiedTypeMap_2D_proxy inOperand0,
                                              const GALGAS_uint inInsertionIndex,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_typeList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::modifier_removeAtIndex (GALGAS_unifiedTypeMap_2D_proxy & outOperand0,
                                              const GALGAS_uint inRemoveIndex,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_typeList * p = (cCollectionElement_typeList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_typeList) ;
      outOperand0 = p->mObject.mAttribute_mActualType ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::modifier_popFirst (GALGAS_unifiedTypeMap_2D_proxy & outOperand0,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_typeList * p = (cCollectionElement_typeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_typeList) ;
    outOperand0 = p->mObject.mAttribute_mActualType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::modifier_popLast (GALGAS_unifiedTypeMap_2D_proxy & outOperand0,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_typeList * p = (cCollectionElement_typeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_typeList) ;
    outOperand0 = p->mObject.mAttribute_mActualType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::method_first (GALGAS_unifiedTypeMap_2D_proxy & outOperand0,
                                    C_Compiler * inCompiler
                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_typeList * p = (cCollectionElement_typeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_typeList) ;
    outOperand0 = p->mObject.mAttribute_mActualType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::method_last (GALGAS_unifiedTypeMap_2D_proxy & outOperand0,
                                   C_Compiler * inCompiler
                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_typeList * p = (cCollectionElement_typeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_typeList) ;
    outOperand0 = p->mObject.mAttribute_mActualType ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::operator_concat (const GALGAS_typeList & inOperand
                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_typeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::add_operation (const GALGAS_typeList & inOperand,
                                                C_Compiler * /* inCompiler */
                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_typeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::reader_subListWithRange (const GALGAS_range & inRange,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_typeList result = GALGAS_typeList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_typeList result = GALGAS_typeList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeList::dotAssign_operation (const GALGAS_typeList inOperand
                                           COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_typeList::reader_mActualTypeAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_typeList * p = (cCollectionElement_typeList *) attributes.ptr () ;
  GALGAS_unifiedTypeMap_2D_proxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_typeList) ;
    result = p->mObject.mAttribute_mActualType ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_typeList::cEnumerator_typeList (const GALGAS_typeList & inEnumeratedObject,
                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList_2D_element cEnumerator_typeList::current (LOCATION_ARGS) const {
  const cCollectionElement_typeList * p = (const cCollectionElement_typeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_typeList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy cEnumerator_typeList::current_mActualType (LOCATION_ARGS) const {
  const cCollectionElement_typeList * p = (const cCollectionElement_typeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_typeList) ;
  return p->mObject.mAttribute_mActualType ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                   @typeList type                                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_typeList ("typeList",
                                 NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_typeList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_typeList ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_typeList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_typeList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeList GALGAS_typeList::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  GALGAS_typeList result ;
  const GALGAS_typeList * p = (const GALGAS_typeList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_typeList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("typeList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 Class for element of '@orderedGenerationList' list                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_orderedGenerationList : public cCollectionElement {
  public : GALGAS_orderedGenerationList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_orderedGenerationList (const GALGAS_abstractGeneration & in_mGeneration
                                                     COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_orderedGenerationList::cCollectionElement_orderedGenerationList (const GALGAS_abstractGeneration & in_mGeneration
                                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mGeneration) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_orderedGenerationList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_orderedGenerationList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_orderedGenerationList (mObject.mAttribute_mGeneration COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_orderedGenerationList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mGeneration" ":" ;
  mObject.mAttribute_mGeneration.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_orderedGenerationList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_orderedGenerationList * operand = (cCollectionElement_orderedGenerationList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_orderedGenerationList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_orderedGenerationList::GALGAS_orderedGenerationList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_orderedGenerationList::GALGAS_orderedGenerationList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_orderedGenerationList GALGAS_orderedGenerationList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_orderedGenerationList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_orderedGenerationList GALGAS_orderedGenerationList::constructor_listWithValue (const GALGAS_abstractGeneration & inOperand0
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_orderedGenerationList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_orderedGenerationList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_orderedGenerationList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                              const GALGAS_abstractGeneration & in_mGeneration
                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement_orderedGenerationList * p = NULL ;
  macroMyNew (p, cCollectionElement_orderedGenerationList (in_mGeneration COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_orderedGenerationList::addAssign_operation (const GALGAS_abstractGeneration & inOperand0
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_orderedGenerationList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_orderedGenerationList::modifier_insertAtIndex (const GALGAS_abstractGeneration inOperand0,
                                                           const GALGAS_uint inInsertionIndex,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_orderedGenerationList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_orderedGenerationList::modifier_removeAtIndex (GALGAS_abstractGeneration & outOperand0,
                                                           const GALGAS_uint inRemoveIndex,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_orderedGenerationList * p = (cCollectionElement_orderedGenerationList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_orderedGenerationList) ;
      outOperand0 = p->mObject.mAttribute_mGeneration ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_orderedGenerationList::modifier_popFirst (GALGAS_abstractGeneration & outOperand0,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_orderedGenerationList * p = (cCollectionElement_orderedGenerationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_orderedGenerationList) ;
    outOperand0 = p->mObject.mAttribute_mGeneration ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_orderedGenerationList::modifier_popLast (GALGAS_abstractGeneration & outOperand0,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_orderedGenerationList * p = (cCollectionElement_orderedGenerationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_orderedGenerationList) ;
    outOperand0 = p->mObject.mAttribute_mGeneration ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_orderedGenerationList::method_first (GALGAS_abstractGeneration & outOperand0,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_orderedGenerationList * p = (cCollectionElement_orderedGenerationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_orderedGenerationList) ;
    outOperand0 = p->mObject.mAttribute_mGeneration ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_orderedGenerationList::method_last (GALGAS_abstractGeneration & outOperand0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_orderedGenerationList * p = (cCollectionElement_orderedGenerationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_orderedGenerationList) ;
    outOperand0 = p->mObject.mAttribute_mGeneration ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_orderedGenerationList GALGAS_orderedGenerationList::operator_concat (const GALGAS_orderedGenerationList & inOperand
                                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_orderedGenerationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_orderedGenerationList GALGAS_orderedGenerationList::add_operation (const GALGAS_orderedGenerationList & inOperand,
                                                                          C_Compiler * /* inCompiler */
                                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_orderedGenerationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_orderedGenerationList GALGAS_orderedGenerationList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_orderedGenerationList result = GALGAS_orderedGenerationList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_orderedGenerationList GALGAS_orderedGenerationList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_orderedGenerationList result = GALGAS_orderedGenerationList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_orderedGenerationList::dotAssign_operation (const GALGAS_orderedGenerationList inOperand
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_abstractGeneration GALGAS_orderedGenerationList::reader_mGenerationAtIndex (const GALGAS_uint & inIndex,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_orderedGenerationList * p = (cCollectionElement_orderedGenerationList *) attributes.ptr () ;
  GALGAS_abstractGeneration result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_orderedGenerationList) ;
    result = p->mObject.mAttribute_mGeneration ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_orderedGenerationList::cEnumerator_orderedGenerationList (const GALGAS_orderedGenerationList & inEnumeratedObject,
                                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_orderedGenerationList_2D_element cEnumerator_orderedGenerationList::current (LOCATION_ARGS) const {
  const cCollectionElement_orderedGenerationList * p = (const cCollectionElement_orderedGenerationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_orderedGenerationList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_abstractGeneration cEnumerator_orderedGenerationList::current_mGeneration (LOCATION_ARGS) const {
  const cCollectionElement_orderedGenerationList * p = (const cCollectionElement_orderedGenerationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_orderedGenerationList) ;
  return p->mObject.mAttribute_mGeneration ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             @orderedGenerationList type                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_orderedGenerationList ("orderedGenerationList",
                                              NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_orderedGenerationList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_orderedGenerationList ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_orderedGenerationList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_orderedGenerationList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_orderedGenerationList GALGAS_orderedGenerationList::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_orderedGenerationList result ;
  const GALGAS_orderedGenerationList * p = (const GALGAS_orderedGenerationList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_orderedGenerationList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("orderedGenerationList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"
#include "galgas2/C_galgas_CLI_Options.h"

#include "files/C_FileManager.h"

//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       N O N    T E R M I N A L    N A M E S                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const char * gNonTerminalNames_plm_grammar [39] = {
  "<start_symbol>",// Index 0
  "<var_declaration>",// Index 1
  "<declaration>",// Index 2
  "<procedure>",// Index 3
  "<procedure_header>",// Index 4
  "<instructionList>",// Index 5
  "<instruction>",// Index 6
  "<if_instruction>",// Index 7
  "<expression>",// Index 8
  "<primary>",// Index 9
  "<comparison>",// Index 10
  "<multiplicative_expression>",// Index 11
  "<additive_expression>",// Index 12
  "<select_common_5F_syntax_0>",// Index 13
  "<select_common_5F_syntax_1>",// Index 14
  "<select_common_5F_syntax_2>",// Index 15
  "<select_common_5F_syntax_3>",// Index 16
  "<select_common_5F_syntax_4>",// Index 17
  "<select_common_5F_syntax_5>",// Index 18
  "<select_common_5F_syntax_6>",// Index 19
  "<select_common_5F_syntax_7>",// Index 20
  "<select_common_5F_syntax_8>",// Index 21
  "<select_common_5F_syntax_9>",// Index 22
  "<select_common_5F_syntax_10>",// Index 23
  "<select_common_5F_syntax_11>",// Index 24
  "<select_common_5F_syntax_12>",// Index 25
  "<select_common_5F_syntax_13>",// Index 26
  "<select_common_5F_syntax_14>",// Index 27
  "<select_common_5F_syntax_15>",// Index 28
  "<select_common_5F_syntax_16>",// Index 29
  "<select_common_5F_syntax_17>",// Index 30
  "<select_common_5F_syntax_18>",// Index 31
  "<select_common_5F_syntax_19>",// Index 32
  "<select_common_5F_syntax_20>",// Index 33
  "<select_common_5F_syntax_21>",// Index 34
  "<select_common_5F_syntax_22>",// Index 35
  "<select_common_5F_syntax_23>",// Index 36
  "<select_common_5F_syntax_24>",// Index 37
  "<>"// Index 38
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                S L R    A N A L Y Z E R    A C T I O N    T A B L E                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

// Action tables handle shift and reduce actions ;
//  - a shift action is (terminal_symbol, SHIFT (n)) : if shifts to state n ;
//  - the accept action is (terminal_symbol, ACCEPT) ;
//  - a reduce action is (terminal_symbol, REDUCE (n)) ; if reduces to state n.

#define SHIFT(a) ((a) + 2)
#define REDUCE(a) (-(a) - 1)
#define ACCEPT (1)
#define END (-1)

static const int16_t gActionTable_plm_grammar [] = {
// State S0 (index = 0)
  C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_boolset, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_struct, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_target, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (42)
, END
// State S1 (index = 25)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (17)
, END
// State S2 (index = 28)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (18)
, END
// State S3 (index = 31)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (19)
, END
// State S4 (index = 34)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (20)
, END
// State S5 (index = 37)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (21)
, END
// State S6 (index = 40)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (22)
, END
// State S7 (index = 43)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (23)
, END
// State S8 (index = 46)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (65)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (24)
, END
// State S9 (index = 51)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (69)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (26)
, END
// State S10 (index = 56)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (75)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (28)
, END
// State S11 (index = 61)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (30)
, END
// State S12 (index = 64)
, C_Lexique_plm_5F_lexique::kToken_, ACCEPT
, END
// State S13 (index = 67)
, C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_boolset, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_struct, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_target, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (42)
, END
// State S14 (index = 92)
, C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_boolset, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_struct, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_target, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (42)
, END
// State S15 (index = 117)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (33)
, END
// State S16 (index = 120)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (0)
, END
// State S17 (index = 123)
, C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_boolset, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_struct, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_target, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (42)
, END
// State S18 (index = 148)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (35)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (46)
, END
// State S19 (index = 175)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (37)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (48)
, END
// State S20 (index = 180)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (39)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (52)
, END
// State S21 (index = 185)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (41)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (56)
, END
// State S22 (index = 190)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (43)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (63)
, END
// State S23 (index = 197)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (45)
, END
// State S24 (index = 200)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (66)
, END
// State S25 (index = 203)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (46)
, END
// State S26 (index = 206)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (70)
, END
// State S27 (index = 209)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (47)
, END
// State S28 (index = 212)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (75)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (28)
, END
// State S29 (index = 217)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (49)
, END
// State S30 (index = 220)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (41)
, END
// State S31 (index = 245)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (43)
, END
// State S32 (index = 248)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (44)
, END
// State S33 (index = 251)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (50)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (51)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (52)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (53)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (54)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (55)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (56)
, END
// State S34 (index = 274)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (45)
, END
// State S35 (index = 277)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (35)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (46)
, END
// State S36 (index = 304)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (3)
, END
// State S37 (index = 329)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (37)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (48)
, END
// State S38 (index = 334)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (62)
, END
// State S39 (index = 337)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (39)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (52)
, END
// State S40 (index = 342)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (64)
, END
// State S41 (index = 345)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (41)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (56)
, END
// State S42 (index = 350)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (66)
, END
// State S43 (index = 353)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (63)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (43)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (63)
, END
// State S44 (index = 360)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (68)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S45 (index = 365)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (71)
, END
// State S46 (index = 368)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (72)
, END
// State S47 (index = 371)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (73)
, END
// State S48 (index = 374)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (76)
, END
// State S49 (index = 377)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (74)
, END
// State S50 (index = 380)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (75)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (76)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (77)
, C_Lexique_plm_5F_lexique::kToken__2B__2B_, SHIFT (78)
, C_Lexique_plm_5F_lexique::kToken__2D__2D_, SHIFT (79)
, END
// State S51 (index = 391)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (80)
, END
// State S52 (index = 394)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (50)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (51)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (52)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (53)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (54)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (55)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (56)
, END
// State S53 (index = 417)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S54 (index = 430)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (94)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S55 (index = 445)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S56 (index = 458)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (50)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (51)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (52)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (53)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (54)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (55)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (56)
, END
// State S57 (index = 481)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (98)
, END
// State S58 (index = 484)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (50)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (51)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (52)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (53)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (54)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (55)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (56)
, END
// State S59 (index = 507)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (13)
, END
// State S60 (index = 516)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (47)
, END
// State S61 (index = 541)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (49)
, END
// State S62 (index = 544)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (100)
, END
// State S63 (index = 547)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (53)
, END
// State S64 (index = 550)
, C_Lexique_plm_5F_lexique::kToken_case, SHIFT (101)
, END
// State S65 (index = 553)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (57)
, END
// State S66 (index = 556)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S67 (index = 567)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (64)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (64)
, END
// State S68 (index = 572)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (107)
, END
// State S69 (index = 575)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (108)
, END
// State S70 (index = 578)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (2)
, END
// State S71 (index = 581)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (109)
, END
// State S72 (index = 584)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (67)
, END
// State S73 (index = 589)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (71)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (113)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (114)
, END
// State S74 (index = 598)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (116)
, END
// State S75 (index = 601)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (117)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (20)
, END
// State S76 (index = 626)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S77 (index = 639)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (119)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (95)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (120)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (121)
, END
// State S78 (index = 648)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (14)
, END
// State S79 (index = 671)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (15)
, END
// State S80 (index = 694)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (123)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (124)
, END
// State S81 (index = 699)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (79)
, END
// State S82 (index = 708)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (37)
, END
// State S83 (index = 799)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (125)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (100)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (39)
, END
// State S84 (index = 894)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S85 (index = 907)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (36)
, END
// State S86 (index = 998)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (38)
, END
// State S87 (index = 1089)
, C_Lexique_plm_5F_lexique::kToken_end, SHIFT (127)
, END
// State S88 (index = 1092)
, C_Lexique_plm_5F_lexique::kToken_then, SHIFT (128)
, END
// State S89 (index = 1095)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (129)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (130)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (131)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (132)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (134)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (135)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (114)
, END
// State S90 (index = 1186)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (30)
, END
// State S91 (index = 1241)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, SHIFT (137)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, SHIFT (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, SHIFT (139)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, SHIFT (140)
, C_Lexique_plm_5F_lexique::kToken__3C_, SHIFT (141)
, C_Lexique_plm_5F_lexique::kToken__3E_, SHIFT (142)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (101)
, END
// State S92 (index = 1308)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__26__26_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (108)
, END
// State S93 (index = 1385)
, C_Lexique_plm_5F_lexique::kToken__2E_, SHIFT (150)
, END
// State S94 (index = 1388)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (151)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (152)
, END
// State S95 (index = 1393)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (153)
, END
// State S96 (index = 1396)
, C_Lexique_plm_5F_lexique::kToken_do, SHIFT (154)
, END
// State S97 (index = 1399)
, C_Lexique_plm_5F_lexique::kToken_end, SHIFT (155)
, END
// State S98 (index = 1402)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (10)
, END
// State S99 (index = 1433)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (78)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (78)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (78)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (78)
, END
// State S100 (index = 1442)
, C_Lexique_plm_5F_lexique::kToken__2C_, SHIFT (156)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (50)
, END
// State S101 (index = 1447)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (158)
, END
// State S102 (index = 1450)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (159)
, END
// State S103 (index = 1453)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S104 (index = 1456)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S105 (index = 1467)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S106 (index = 1478)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (163)
, END
// State S107 (index = 1481)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (164)
, END
// State S108 (index = 1484)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S109 (index = 1497)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S110 (index = 1510)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (167)
, END
// State S111 (index = 1513)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (168)
, END
// State S112 (index = 1516)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (169)
, END
// State S113 (index = 1519)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (170)
, END
// State S114 (index = 1522)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (171)
, END
// State S115 (index = 1525)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (172)
, END
// State S116 (index = 1528)
, C_Lexique_plm_5F_lexique::kToken_at, SHIFT (173)
, END
// State S117 (index = 1531)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S118 (index = 1544)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (21)
, END
// State S119 (index = 1567)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (175)
, END
// State S120 (index = 1570)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (176)
, END
// State S121 (index = 1573)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (177)
, END
// State S122 (index = 1576)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (178)
, END
// State S123 (index = 1579)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (179)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (18)
, END
// State S124 (index = 1604)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S125 (index = 1617)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (181)
, END
// State S126 (index = 1622)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (183)
, END
// State S127 (index = 1625)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (22)
, END
// State S128 (index = 1648)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (50)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (51)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (52)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (53)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (54)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (55)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (56)
, END
// State S129 (index = 1671)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S130 (index = 1684)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S131 (index = 1697)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S132 (index = 1710)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S133 (index = 1723)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S134 (index = 1736)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S135 (index = 1749)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S136 (index = 1762)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (35)
, END
// State S137 (index = 1839)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S138 (index = 1852)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S139 (index = 1865)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S140 (index = 1878)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S141 (index = 1891)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S142 (index = 1904)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S143 (index = 1917)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (33)
, END
// State S144 (index = 1972)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S145 (index = 1985)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S146 (index = 1998)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S147 (index = 2011)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S148 (index = 2024)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S149 (index = 2037)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (34)
, END
// State S150 (index = 2104)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (203)
, END
// State S151 (index = 2107)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (204)
, END
// State S152 (index = 2110)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (205)
, END
// State S153 (index = 2113)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (206)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (207)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (208)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (83)
, END
// State S154 (index = 2122)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (50)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (51)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (52)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (53)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (54)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (55)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (56)
, END
// State S155 (index = 2145)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (29)
, END
// State S156 (index = 2168)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (211)
, END
// State S157 (index = 2171)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (212)
, END
// State S158 (index = 2174)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken_case, SHIFT (213)
, END
// State S159 (index = 2179)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (215)
, END
// State S160 (index = 2182)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S161 (index = 2193)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (62)
, END
// State S162 (index = 2196)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (60)
, END
// State S163 (index = 2199)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (6)
, END
// State S164 (index = 2224)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (1)
, END
// State S165 (index = 2227)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (7)
, END
// State S166 (index = 2252)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (8)
, END
// State S167 (index = 2277)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (217)
, END
// State S168 (index = 2280)
, C_Lexique_plm_5F_lexique::kToken__2D__3E_, SHIFT (218)
, END
// State S169 (index = 2283)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (219)
, END
// State S170 (index = 2286)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (220)
, END
// State S171 (index = 2289)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (221)
, END
// State S172 (index = 2292)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (11)
, END
// State S173 (index = 2297)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (222)
, END
// State S174 (index = 2300)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (19)
, END
// State S175 (index = 2323)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (119)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (95)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (120)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (121)
, END
// State S176 (index = 2332)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (119)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (95)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (120)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (121)
, END
// State S177 (index = 2341)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (119)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (95)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (120)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (121)
, END
// State S178 (index = 2350)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (27)
, END
// State S179 (index = 2373)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S180 (index = 2386)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (17)
, END
// State S181 (index = 2409)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S182 (index = 2422)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (228)
, END
// State S183 (index = 2425)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (31)
, END
// State S184 (index = 2516)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (80)
, C_Lexique_plm_5F_lexique::kToken_else, SHIFT (229)
, C_Lexique_plm_5F_lexique::kToken_elsif, SHIFT (230)
, END
// State S185 (index = 2523)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (129)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (130)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (131)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (132)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (134)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (135)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (114)
, END
// State S186 (index = 2614)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (129)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (130)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (131)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (132)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (134)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (135)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (114)
, END
// State S187 (index = 2705)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (129)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (130)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (131)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (132)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (134)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (135)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (114)
, END
// State S188 (index = 2796)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (129)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (130)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (131)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (132)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (134)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (135)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (114)
, END
// State S189 (index = 2887)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (129)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (130)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (131)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (132)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (134)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (135)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (114)
, END
// State S190 (index = 2978)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (129)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (130)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (131)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (132)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (134)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (135)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (114)
, END
// State S191 (index = 3069)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (129)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (130)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (131)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (132)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (134)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (135)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (114)
, END
// State S192 (index = 3160)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (102)
, END
// State S193 (index = 3215)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (103)
, END
// State S194 (index = 3270)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (104)
, END
// State S195 (index = 3325)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (105)
, END
// State S196 (index = 3380)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (106)
, END
// State S197 (index = 3435)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (107)
, END
// State S198 (index = 3490)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__26__26_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (108)
, END
// State S199 (index = 3567)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__26__26_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (108)
, END
// State S200 (index = 3644)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__26__26_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (108)
, END
// State S201 (index = 3721)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__26__26_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (108)
, END
// State S202 (index = 3798)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__26__26_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (108)
, END
// State S203 (index = 3875)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (32)
, END
// State S204 (index = 3966)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (244)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (245)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (246)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (87)
, END
// State S205 (index = 3975)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (248)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (249)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (250)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (91)
, END
// State S206 (index = 3984)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (252)
, END
// State S207 (index = 3987)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (253)
, END
// State S208 (index = 3990)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (254)
, END
// State S209 (index = 3993)
, C_Lexique_plm_5F_lexique::kToken__5D_, SHIFT (255)
, END
// State S210 (index = 3996)
, C_Lexique_plm_5F_lexique::kToken_end, SHIFT (256)
, END
// State S211 (index = 3999)
, C_Lexique_plm_5F_lexique::kToken__2C_, SHIFT (156)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (50)
, END
// State S212 (index = 4004)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (4)
, END
// State S213 (index = 4029)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (258)
, END
// State S214 (index = 4032)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (259)
, END
// State S215 (index = 4035)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (260)
, END
// State S216 (index = 4038)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (61)
, END
// State S217 (index = 4041)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (67)
, END
// State S218 (index = 4046)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (262)
, END
// State S219 (index = 4049)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (71)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (113)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (114)
, END
// State S220 (index = 4058)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (71)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (113)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (114)
, END
// State S221 (index = 4067)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (71)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (113)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (114)
, END
// State S222 (index = 4076)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (12)
, END
// State S223 (index = 4101)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (98)
, END
// State S224 (index = 4104)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (96)
, END
// State S225 (index = 4107)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (97)
, END
// State S226 (index = 4110)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (16)
, END
// State S227 (index = 4133)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (181)
, END
// State S228 (index = 4138)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (40)
, END
// State S229 (index = 4229)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (50)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (51)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (52)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (53)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (54)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (55)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (56)
, END
// State S230 (index = 4252)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S231 (index = 4265)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (23)
, END
// State S232 (index = 4268)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (115)
, END
// State S233 (index = 4345)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (116)
, END
// State S234 (index = 4422)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (117)
, END
// State S235 (index = 4499)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (118)
, END
// State S236 (index = 4576)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (119)
, END
// State S237 (index = 4653)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (120)
, END
// State S238 (index = 4730)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (121)
, END
// State S239 (index = 4807)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (109)
, END
// State S240 (index = 4874)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (110)
, END
// State S241 (index = 4941)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (111)
, END
// State S242 (index = 5008)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (112)
, END
// State S243 (index = 5075)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (113)
, END
// State S244 (index = 5142)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (269)
, END
// State S245 (index = 5145)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (270)
, END
// State S246 (index = 5148)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (271)
, END
// State S247 (index = 5151)
, C_Lexique_plm_5F_lexique::kToken__5D_, SHIFT (272)
, END
// State S248 (index = 5154)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (273)
, END
// State S249 (index = 5157)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (274)
, END
// State S250 (index = 5160)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (275)
, END
// State S251 (index = 5163)
, C_Lexique_plm_5F_lexique::kToken__5D_, SHIFT (276)
, END
// State S252 (index = 5166)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (206)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (207)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (208)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (83)
, END
// State S253 (index = 5175)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (206)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (207)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (208)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (83)
, END
// State S254 (index = 5184)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (206)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (207)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (208)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (83)
, END
// State S255 (index = 5193)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (24)
, END
// State S256 (index = 5216)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (28)
, END
// State S257 (index = 5239)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (51)
, END
// State S258 (index = 5242)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken_case, SHIFT (213)
, END
// State S259 (index = 5247)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (5)
, END
// State S260 (index = 5272)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (85)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (86)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (99)
, END
// State S261 (index = 5285)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (68)
, END
// State S262 (index = 5288)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (282)
, END
// State S263 (index = 5291)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (74)
, END
// State S264 (index = 5294)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (72)
, END
// State S265 (index = 5297)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (73)
, END
// State S266 (index = 5300)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (123)
, END
// State S267 (index = 5303)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (81)
, END
// State S268 (index = 5306)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (82)
, END
// State S269 (index = 5309)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (244)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (245)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (246)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (87)
, END
// State S270 (index = 5318)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (244)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (245)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (246)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (87)
, END
// State S271 (index = 5327)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (244)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (245)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (246)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (87)
, END
// State S272 (index = 5336)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (25)
, END
// State S273 (index = 5359)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (248)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (249)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (250)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (91)
, END
// State S274 (index = 5368)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (248)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (249)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (250)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (91)
, END
// State S275 (index = 5377)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (248)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (249)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (250)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (91)
, END
// State S276 (index = 5386)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (26)
, END
// State S277 (index = 5409)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (86)
, END
// State S278 (index = 5412)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (84)
, END
// State S279 (index = 5415)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (85)
, END
// State S280 (index = 5418)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (55)
, END
// State S281 (index = 5421)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (102)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S282 (index = 5432)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (290)
, END
// State S283 (index = 5435)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (90)
, END
// State S284 (index = 5438)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (88)
, END
// State S285 (index = 5441)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (89)
, END
// State S286 (index = 5444)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (94)
, END
// State S287 (index = 5447)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (92)
, END
// State S288 (index = 5450)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (93)
, END
// State S289 (index = 5453)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (59)
, END
// State S290 (index = 5456)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (50)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (51)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (52)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (53)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (54)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (55)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (56)
, END
// State S291 (index = 5479)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (292)
, END
// State S292 (index = 5482)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_target, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (9)
, END} ;

static const uint32_t gActionTableIndex_plm_grammar [293] = {
  0  // S0
, 25  // S1
, 28  // S2
, 31  // S3
, 34  // S4
, 37  // S5
, 40  // S6
, 43  // S7
, 46  // S8
, 51  // S9
, 56  // S10
, 61  // S11
, 64  // S12
, 67  // S13
, 92  // S14
, 117  // S15
, 120  // S16
, 123  // S17
, 148  // S18
, 175  // S19
, 180  // S20
, 185  // S21
, 190  // S22
, 197  // S23
, 200  // S24
, 203  // S25
, 206  // S26
, 209  // S27
, 212  // S28
, 217  // S29
, 220  // S30
, 245  // S31
, 248  // S32
, 251  // S33
, 274  // S34
, 277  // S35
, 304  // S36
, 329  // S37
, 334  // S38
, 337  // S39
, 342  // S40
, 345  // S41
, 350  // S42
, 353  // S43
, 360  // S44
, 365  // S45
, 368  // S46
, 371  // S47
, 374  // S48
, 377  // S49
, 380  // S50
, 391  // S51
, 394  // S52
, 417  // S53
, 430  // S54
, 445  // S55
, 458  // S56
, 481  // S57
, 484  // S58
, 507  // S59
, 516  // S60
, 541  // S61
, 544  // S62
, 547  // S63
, 550  // S64
, 553  // S65
, 556  // S66
, 567  // S67
, 572  // S68
, 575  // S69
, 578  // S70
, 581  // S71
, 584  // S72
, 589  // S73
, 598  // S74
, 601  // S75
, 626  // S76
, 639  // S77
, 648  // S78
, 671  // S79
, 694  // S80
, 699  // S81
, 708  // S82
, 799  // S83
, 894  // S84
, 907  // S85
, 998  // S86
, 1089  // S87
, 1092  // S88
, 1095  // S89
, 1186  // S90
, 1241  // S91
, 1308  // S92
, 1385  // S93
, 1388  // S94
, 1393  // S95
, 1396  // S96
, 1399  // S97
, 1402  // S98
, 1433  // S99
, 1442  // S100
, 1447  // S101
, 1450  // S102
, 1453  // S103
, 1456  // S104
, 1467  // S105
, 1478  // S106
, 1481  // S107
, 1484  // S108
, 1497  // S109
, 1510  // S110
, 1513  // S111
, 1516  // S112
, 1519  // S113
, 1522  // S114
, 1525  // S115
, 1528  // S116
, 1531  // S117
, 1544  // S118
, 1567  // S119
, 1570  // S120
, 1573  // S121
, 1576  // S122
, 1579  // S123
, 1604  // S124
, 1617  // S125
, 1622  // S126
, 1625  // S127
, 1648  // S128
, 1671  // S129
, 1684  // S130
, 1697  // S131
, 1710  // S132
, 1723  // S133
, 1736  // S134
, 1749  // S135
, 1762  // S136
, 1839  // S137
, 1852  // S138
, 1865  // S139
, 1878  // S140
, 1891  // S141
, 1904  // S142
, 1917  // S143
, 1972  // S144
, 1985  // S145
, 1998  // S146
, 2011  // S147
, 2024  // S148
, 2037  // S149
, 2104  // S150
, 2107  // S151
, 2110  // S152
, 2113  // S153
, 2122  // S154
, 2145  // S155
, 2168  // S156
, 2171  // S157
, 2174  // S158
, 2179  // S159
, 2182  // S160
, 2193  // S161
, 2196  // S162
, 2199  // S163
, 2224  // S164
, 2227  // S165
, 2252  // S166
, 2277  // S167
, 2280  // S168
, 2283  // S169
, 2286  // S170
, 2289  // S171
, 2292  // S172
, 2297  // S173
, 2300  // S174
, 2323  // S175
, 2332  // S176
, 2341  // S177
, 2350  // S178
, 2373  // S179
, 2386  // S180
, 2409  // S181
, 2422  // S182
, 2425  // S183
, 2516  // S184
, 2523  // S185
, 2614  // S186
, 2705  // S187
, 2796  // S188
, 2887  // S189
, 2978  // S190
, 3069  // S191
, 3160  // S192
, 3215  // S193
, 3270  // S194
, 3325  // S195
, 3380  // S196
, 3435  // S197
, 3490  // S198
, 3567  // S199
, 3644  // S200
, 3721  // S201
, 3798  // S202
, 3875  // S203
, 3966  // S204
, 3975  // S205
, 3984  // S206
, 3987  // S207
, 3990  // S208
, 3993  // S209
, 3996  // S210
, 3999  // S211
, 4004  // S212
, 4029  // S213
, 4032  // S214
, 4035  // S215
, 4038  // S216
, 4041  // S217
, 4046  // S218
, 4049  // S219
, 4058  // S220
, 4067  // S221
, 4076  // S222
, 4101  // S223
, 4104  // S224
, 4107  // S225
, 4110  // S226
, 4133  // S227
, 4138  // S228
, 4229  // S229
, 4252  // S230
, 4265  // S231
, 4268  // S232
, 4345  // S233
, 4422  // S234
, 4499  // S235
, 4576  // S236
, 4653  // S237
, 4730  // S238
, 4807  // S239
, 4874  // S240
, 4941  // S241
, 5008  // S242
, 5075  // S243
, 5142  // S244
, 5145  // S245
, 5148  // S246
, 5151  // S247
, 5154  // S248
, 5157  // S249
, 5160  // S250
, 5163  // S251
, 5166  // S252
, 5175  // S253
, 5184  // S254
, 5193  // S255
, 5216  // S256
, 5239  // S257
, 5242  // S258
, 5247  // S259
, 5272  // S260
, 5285  // S261
, 5288  // S262
, 5291  // S263
, 5294  // S264
, 5297  // S265
, 5300  // S266
, 5303  // S267
, 5306  // S268
, 5309  // S269
, 5318  // S270
, 5327  // S271
, 5336  // S272
, 5359  // S273
, 5368  // S274
, 5377  // S275
, 5386  // S276
, 5409  // S277
, 5412  // S278
, 5415  // S279
, 5418  // S280
, 5421  // S281
, 5432  // S282
, 5435  // S283
, 5438  // S284
, 5441  // S285
, 5444  // S286
, 5447  // S287
, 5450  // S288
, 5453  // S289
, 5456  // S290
, 5479  // S291
, 5482  // S292
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            SLR states successors table                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

// Successor tables handle non terminal successors ;
// an entry is (non_terminal_symbol, n) ; successor is state n.

static const int16_t gSuccessorTable_plm_grammar_0 [11] = {0, 12,
  2, 13,
  3, 14,
  4, 15,
  13, 16, -1} ;

static const int16_t gSuccessorTable_plm_grammar_8 [3] = {22, 25, -1} ;

static const int16_t gSuccessorTable_plm_grammar_9 [3] = {24, 27, -1} ;

static const int16_t gSuccessorTable_plm_grammar_10 [3] = {26, 29, -1} ;

static const int16_t gSuccessorTable_plm_grammar_13 [9] = {2, 13,
  3, 14,
  4, 15,
  13, 31, -1} ;

static const int16_t gSuccessorTable_plm_grammar_14 [9] = {2, 13,
  3, 14,
  4, 15,
  13, 32, -1} ;

static const int16_t gSuccessorTable_plm_grammar_17 [9] = {2, 13,
  3, 14,
  4, 15,
  13, 34, -1} ;

static const int16_t gSuccessorTable_plm_grammar_18 [3] = {14, 36, -1} ;

static const int16_t gSuccessorTable_plm_grammar_19 [3] = {15, 38, -1} ;

static const int16_t gSuccessorTable_plm_grammar_20 [3] = {17, 40, -1} ;

static const int16_t gSuccessorTable_plm_grammar_21 [3] = {19, 42, -1} ;

static const int16_t gSuccessorTable_plm_grammar_22 [3] = {21, 44, -1} ;

static const int16_t gSuccessorTable_plm_grammar_28 [3] = {26, 48, -1} ;

static const int16_t gSuccessorTable_plm_grammar_33 [7] = {5, 57,
  6, 58,
  27, 59, -1} ;

static const int16_t gSuccessorTable_plm_grammar_35 [3] = {14, 60, -1} ;

static const int16_t gSuccessorTable_plm_grammar_37 [3] = {15, 61, -1} ;

static const int16_t gSuccessorTable_plm_grammar_39 [3] = {17, 63, -1} ;

static const int16_t gSuccessorTable_plm_grammar_41 [3] = {19, 65, -1} ;

static const int16_t gSuccessorTable_plm_grammar_43 [3] = {21, 67, -1} ;

static const int16_t gSuccessorTable_plm_grammar_44 [5] = {1, 69,
  4, 70, -1} ;

static const int16_t gSuccessorTable_plm_grammar_52 [5] = {6, 58,
  27, 81, -1} ;

static const int16_t gSuccessorTable_plm_grammar_53 [15] = {7, 87,
  8, 88,
  9, 89,
  10, 90,
  11, 91,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_54 [13] = {8, 95,
  9, 89,
  10, 90,
  11, 91,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_55 [13] = {8, 96,
  9, 89,
  10, 90,
  11, 91,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_56 [7] = {5, 97,
  6, 58,
  27, 59, -1} ;

static const int16_t gSuccessorTable_plm_grammar_58 [5] = {6, 58,
  27, 99, -1} ;

static const int16_t gSuccessorTable_plm_grammar_66 [7] = {3, 105,
  4, 15,
  20, 106, -1} ;

static const int16_t gSuccessorTable_plm_grammar_72 [3] = {23, 111, -1} ;

static const int16_t gSuccessorTable_plm_grammar_73 [3] = {25, 115, -1} ;

static const int16_t gSuccessorTable_plm_grammar_76 [13] = {8, 118,
  9, 89,
  10, 90,
  11, 91,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_77 [3] = {32, 122, -1} ;

static const int16_t gSuccessorTable_plm_grammar_84 [13] = {8, 126,
  9, 89,
  10, 90,
  11, 91,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_89 [3] = {36, 136, -1} ;

static const int16_t gSuccessorTable_plm_grammar_91 [3] = {34, 143, -1} ;

static const int16_t gSuccessorTable_plm_grammar_92 [3] = {35, 149, -1} ;

static const int16_t gSuccessorTable_plm_grammar_100 [3] = {16, 157, -1} ;

static const int16_t gSuccessorTable_plm_grammar_103 [5] = {3, 160,
  4, 15, -1} ;

static const int16_t gSuccessorTable_plm_grammar_104 [7] = {3, 105,
  4, 15,
  20, 161, -1} ;

static const int16_t gSuccessorTable_plm_grammar_105 [7] = {3, 105,
  4, 15,
  20, 162, -1} ;

static const int16_t gSuccessorTable_plm_grammar_108 [13] = {8, 165,
  9, 89,
  10, 90,
  11, 91,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_109 [13] = {8, 166,
  9, 89,
  10, 90,
  11, 91,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_117 [13] = {8, 174,
  9, 89,
  10, 90,
  11, 91,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_124 [13] = {8, 180,
  9, 89,
  10, 90,
  11, 91,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_125 [3] = {37, 182, -1} ;

static const int16_t gSuccessorTable_plm_grammar_128 [7] = {5, 184,
  6, 58,
  27, 59, -1} ;

static const int16_t gSuccessorTable_plm_grammar_129 [5] = {9, 185,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_130 [5] = {9, 186,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_131 [5] = {9, 187,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_132 [5] = {9, 188,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_133 [5] = {9, 189,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_134 [5] = {9, 190,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_135 [5] = {9, 191,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_137 [9] = {9, 89,
  11, 192,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_138 [9] = {9, 89,
  11, 193,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_139 [9] = {9, 89,
  11, 194,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_140 [9] = {9, 89,
  11, 195,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_141 [9] = {9, 89,
  11, 196,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_142 [9] = {9, 89,
  11, 197,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_144 [7] = {9, 89,
  12, 198,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_145 [7] = {9, 89,
  12, 199,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_146 [7] = {9, 89,
  12, 200,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_147 [7] = {9, 89,
  12, 201,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_148 [7] = {9, 89,
  12, 202,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_153 [3] = {29, 209, -1} ;

static const int16_t gSuccessorTable_plm_grammar_154 [7] = {5, 210,
  6, 58,
  27, 59, -1} ;

static const int16_t gSuccessorTable_plm_grammar_158 [3] = {18, 214, -1} ;

static const int16_t gSuccessorTable_plm_grammar_160 [7] = {3, 105,
  4, 15,
  20, 216, -1} ;

static const int16_t gSuccessorTable_plm_grammar_175 [3] = {32, 223, -1} ;

static const int16_t gSuccessorTable_plm_grammar_176 [3] = {32, 224, -1} ;

static const int16_t gSuccessorTable_plm_grammar_177 [3] = {32, 225, -1} ;

static const int16_t gSuccessorTable_plm_grammar_179 [13] = {8, 226,
  9, 89,
  10, 90,
  11, 91,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_181 [13] = {8, 227,
  9, 89,
  10, 90,
  11, 91,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_184 [3] = {28, 231, -1} ;

static const int16_t gSuccessorTable_plm_grammar_185 [3] = {36, 232, -1} ;

static const int16_t gSuccessorTable_plm_grammar_186 [3] = {36, 233, -1} ;

static const int16_t gSuccessorTable_plm_grammar_187 [3] = {36, 234, -1} ;

static const int16_t gSuccessorTable_plm_grammar_188 [3] = {36, 235, -1} ;

static const int16_t gSuccessorTable_plm_grammar_189 [3] = {36, 236, -1} ;

static const int16_t gSuccessorTable_plm_grammar_190 [3] = {36, 237, -1} ;

static const int16_t gSuccessorTable_plm_grammar_191 [3] = {36, 238, -1} ;

static const int16_t gSuccessorTable_plm_grammar_198 [3] = {35, 239, -1} ;

static const int16_t gSuccessorTable_plm_grammar_199 [3] = {35, 240, -1} ;

static const int16_t gSuccessorTable_plm_grammar_200 [3] = {35, 241, -1} ;

static const int16_t gSuccessorTable_plm_grammar_201 [3] = {35, 242, -1} ;

static const int16_t gSuccessorTable_plm_grammar_202 [3] = {35, 243, -1} ;

static const int16_t gSuccessorTable_plm_grammar_204 [3] = {30, 247, -1} ;

static const int16_t gSuccessorTable_plm_grammar_205 [3] = {31, 251, -1} ;

static const int16_t gSuccessorTable_plm_grammar_211 [3] = {16, 257, -1} ;

static const int16_t gSuccessorTable_plm_grammar_217 [3] = {23, 261, -1} ;

static const int16_t gSuccessorTable_plm_grammar_219 [3] = {25, 263, -1} ;

static const int16_t gSuccessorTable_plm_grammar_220 [3] = {25, 264, -1} ;

static const int16_t gSuccessorTable_plm_grammar_221 [3] = {25, 265, -1} ;

static const int16_t gSuccessorTable_plm_grammar_227 [3] = {37, 266, -1} ;

static const int16_t gSuccessorTable_plm_grammar_229 [7] = {5, 267,
  6, 58,
  27, 59, -1} ;

static const int16_t gSuccessorTable_plm_grammar_230 [15] = {7, 268,
  8, 88,
  9, 89,
  10, 90,
  11, 91,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_252 [3] = {29, 277, -1} ;

static const int16_t gSuccessorTable_plm_grammar_253 [3] = {29, 278, -1} ;

static const int16_t gSuccessorTable_plm_grammar_254 [3] = {29, 279, -1} ;

static const int16_t gSuccessorTable_plm_grammar_258 [3] = {18, 280, -1} ;

static const int16_t gSuccessorTable_plm_grammar_260 [13] = {8, 281,
  9, 89,
  10, 90,
  11, 91,
  12, 92,
  33, 93, -1} ;

static const int16_t gSuccessorTable_plm_grammar_269 [3] = {30, 283, -1} ;

static const int16_t gSuccessorTable_plm_grammar_270 [3] = {30, 284, -1} ;

static const int16_t gSuccessorTable_plm_grammar_271 [3] = {30, 285, -1} ;

static const int16_t gSuccessorTable_plm_grammar_273 [3] = {31, 286, -1} ;

static const int16_t gSuccessorTable_plm_grammar_274 [3] = {31, 287, -1} ;

static const int16_t gSuccessorTable_plm_grammar_275 [3] = {31, 288, -1} ;

static const int16_t gSuccessorTable_plm_grammar_281 [7] = {3, 105,
  4, 15,
  20, 289, -1} ;

static const int16_t gSuccessorTable_plm_grammar_290 [7] = {5, 291,
  6, 58,
  27, 59, -1} ;

static const int16_t * gSuccessorTable_plm_grammar [293] = {
gSuccessorTable_plm_grammar_0, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_8, gSuccessorTable_plm_grammar_9, gSuccessorTable_plm_grammar_10, NULL, 
  NULL, gSuccessorTable_plm_grammar_13, gSuccessorTable_plm_grammar_14, NULL, 
  NULL, gSuccessorTable_plm_grammar_17, gSuccessorTable_plm_grammar_18, gSuccessorTable_plm_grammar_19, 
  gSuccessorTable_plm_grammar_20, gSuccessorTable_plm_grammar_21, gSuccessorTable_plm_grammar_22, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_28, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_33, NULL, gSuccessorTable_plm_grammar_35, 
  NULL, gSuccessorTable_plm_grammar_37, NULL, gSuccessorTable_plm_grammar_39, 
  NULL, gSuccessorTable_plm_grammar_41, NULL, gSuccessorTable_plm_grammar_43, 
  gSuccessorTable_plm_grammar_44, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_52, gSuccessorTable_plm_grammar_53, gSuccessorTable_plm_grammar_54, gSuccessorTable_plm_grammar_55, 
  gSuccessorTable_plm_grammar_56, NULL, gSuccessorTable_plm_grammar_58, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plm_grammar_66, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_72, gSuccessorTable_plm_grammar_73, NULL, NULL, 
  gSuccessorTable_plm_grammar_76, gSuccessorTable_plm_grammar_77, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_84, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_89, NULL, gSuccessorTable_plm_grammar_91, 
  gSuccessorTable_plm_grammar_92, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_100, NULL, NULL, gSuccessorTable_plm_grammar_103, 
  gSuccessorTable_plm_grammar_104, gSuccessorTable_plm_grammar_105, NULL, NULL, 
  gSuccessorTable_plm_grammar_108, gSuccessorTable_plm_grammar_109, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_117, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_124, gSuccessorTable_plm_grammar_125, NULL, NULL, 
  gSuccessorTable_plm_grammar_128, gSuccessorTable_plm_grammar_129, gSuccessorTable_plm_grammar_130, gSuccessorTable_plm_grammar_131, 
  gSuccessorTable_plm_grammar_132, gSuccessorTable_plm_grammar_133, gSuccessorTable_plm_grammar_134, gSuccessorTable_plm_grammar_135, 
  NULL, gSuccessorTable_plm_grammar_137, gSuccessorTable_plm_grammar_138, gSuccessorTable_plm_grammar_139, 
  gSuccessorTable_plm_grammar_140, gSuccessorTable_plm_grammar_141, gSuccessorTable_plm_grammar_142, NULL, 
  gSuccessorTable_plm_grammar_144, gSuccessorTable_plm_grammar_145, gSuccessorTable_plm_grammar_146, gSuccessorTable_plm_grammar_147, 
  gSuccessorTable_plm_grammar_148, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_153, gSuccessorTable_plm_grammar_154, NULL, 
  NULL, NULL, gSuccessorTable_plm_grammar_158, NULL, 
  gSuccessorTable_plm_grammar_160, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plm_grammar_175, 
  gSuccessorTable_plm_grammar_176, gSuccessorTable_plm_grammar_177, NULL, gSuccessorTable_plm_grammar_179, 
  NULL, gSuccessorTable_plm_grammar_181, NULL, NULL, 
  gSuccessorTable_plm_grammar_184, gSuccessorTable_plm_grammar_185, gSuccessorTable_plm_grammar_186, gSuccessorTable_plm_grammar_187, 
  gSuccessorTable_plm_grammar_188, gSuccessorTable_plm_grammar_189, gSuccessorTable_plm_grammar_190, gSuccessorTable_plm_grammar_191, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plm_grammar_198, gSuccessorTable_plm_grammar_199, 
  gSuccessorTable_plm_grammar_200, gSuccessorTable_plm_grammar_201, gSuccessorTable_plm_grammar_202, NULL, 
  gSuccessorTable_plm_grammar_204, gSuccessorTable_plm_grammar_205, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plm_grammar_211, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_217, NULL, gSuccessorTable_plm_grammar_219, 
  gSuccessorTable_plm_grammar_220, gSuccessorTable_plm_grammar_221, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plm_grammar_227, 
  NULL, gSuccessorTable_plm_grammar_229, gSuccessorTable_plm_grammar_230, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_grammar_252, gSuccessorTable_plm_grammar_253, gSuccessorTable_plm_grammar_254, NULL, 
  NULL, NULL, gSuccessorTable_plm_grammar_258, NULL, 
  gSuccessorTable_plm_grammar_260, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_269, gSuccessorTable_plm_grammar_270, gSuccessorTable_plm_grammar_271, 
  NULL, gSuccessorTable_plm_grammar_273, gSuccessorTable_plm_grammar_274, gSuccessorTable_plm_grammar_275, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_grammar_281, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plm_grammar_290, NULL, 
  NULL} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Production rules infos (left non terminal, size of right string)                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gProductionsTable_plm_grammar [125 * 2] = {
  0, 1,
  1, 3,
  1, 1,
  2, 3,
  2, 7,
  2, 8,
  2, 6,
  2, 6,
  2, 6,
  2, 12,
  3, 4,
  4, 6,
  2, 7,
  5, 1,
  6, 2,
  6, 2,
  6, 5,
  6, 4,
  6, 3,
  6, 4,
  6, 2,
  6, 3,
  6, 3,
  7, 4,
  6, 5,
  6, 6,
  6, 6,
  6, 4,
  6, 5,
  6, 3,
  8, 1,
  9, 3,
  9, 3,
  10, 2,
  11, 2,
  12, 2,
  9, 1,
  9, 1,
  9, 1,
  9, 1,
  9, 4,
  2, 2,
  13, 0,
  13, 2,
  13, 2,
  13, 3,
  14, 0,
  14, 2,
  15, 0,
  15, 2,
  16, 0,
  16, 3,
  17, 0,
  17, 2,
  18, 0,
  18, 3,
  19, 0,
  19, 2,
  20, 0,
  20, 6,
  20, 2,
  20, 3,
  20, 2,
  21, 0,
  21, 2,
  22, 0,
  22, 1,
  23, 0,
  23, 4,
  24, 0,
  24, 1,
  25, 0,
  25, 4,
  25, 4,
  25, 4,
  26, 0,
  26, 2,
  27, 0,
  27, 2,
  27, 2,
  28, 0,
  28, 2,
  28, 2,
  29, 0,
  29, 3,
  29, 3,
  29, 3,
  30, 0,
  30, 3,
  30, 3,
  30, 3,
  31, 0,
  31, 3,
  31, 3,
  31, 3,
  32, 0,
  32, 3,
  32, 3,
  32, 3,
  33, 0,
  33, 1,
  34, 0,
  34, 2,
  34, 2,
  34, 2,
  34, 2,
  34, 2,
  34, 2,
  35, 0,
  35, 3,
  35, 3,
  35, 3,
  35, 3,
  35, 3,
  36, 0,
  36, 3,
  36, 3,
  36, 3,
  36, 3,
  36, 3,
  36, 3,
  36, 3,
  37, 0,
  37, 3,
  38, 1
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'start_symbol' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_start_5F_symbol_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_common_5F_syntax_start_5F_symbol_i0_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_start_5F_symbol_ (GALGAS_ast &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_location &  parameter_3,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_common_5F_syntax_start_5F_symbol_i0_(parameter_1, parameter_2, parameter_3, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

void cGrammar_plm_5F_grammar::performIndexing (C_Compiler * /* inCompiler */,
             const C_String & /* inSourceFilePath */) {
}

void cGrammar_plm_5F_grammar::performOnlyLexicalAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_plm_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performLexicalAnalysis () ;
  }
  macroDetachSharedObject (scanner) ;
}

void cGrammar_plm_5F_grammar::performOnlySyntaxAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_plm_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performBottomUpParsing (gActionTable_plm_grammar, gNonTerminalNames_plm_grammar,
                                     gActionTableIndex_plm_grammar, gSuccessorTable_plm_grammar,
                                     gProductionsTable_plm_grammar) ;
  }
  macroDetachSharedObject (scanner) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Grammar start symbol implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::_performSourceFileParsing_ (C_Compiler * inCompiler,
                                GALGAS_lstring inFilePath,
                                GALGAS_ast &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_location &  parameter_3
                                COMMA_LOCATION_ARGS) {
  if (inFilePath.isValid ()) {
    const GALGAS_string filePathAsString = inFilePath.reader_string (HERE) ;
    C_String filePath = filePathAsString.stringValue () ;
    if (! C_FileManager::isAbsolutePath (filePath)) {
      filePath = inCompiler->sourceFilePath ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (filePath) ;
    }
    if (C_FileManager::fileExistsAtPath (filePath)) {
      C_Lexique_plm_5F_lexique * scanner = NULL ;
      macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, "", "", filePath COMMA_HERE)) ;
      if (scanner->sourceText () != NULL) {
        const bool ok = scanner->performBottomUpParsing (gActionTable_plm_grammar, gNonTerminalNames_plm_grammar,
                                                         gActionTableIndex_plm_grammar, gSuccessorTable_plm_grammar,
                                                         gProductionsTable_plm_grammar) ;
        if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
          cGrammar_plm_5F_grammar grammar ;
          grammar.nt_start_5F_symbol_ (parameter_1, parameter_2, parameter_3, scanner) ;
        }
      }else{
        C_String message ;
        message << "the '" << filePath << "' file exists, but cannot be read" ;
        const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
        inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
      }
      macroDetachSharedObject (scanner) ;
    }else{
      C_String message ;
      message << "the '" << filePath << "' file does not exist" ;
      const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
      inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::_performSourceStringParsing_ (C_Compiler * inCompiler,
                                GALGAS_string inSourceString,
                                GALGAS_ast &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_location &  parameter_3
                                COMMA_UNUSED_LOCATION_ARGS) {
  C_Lexique_plm_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, inSourceString.stringValue (), "" COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    const bool ok = scanner->performBottomUpParsing (gActionTable_plm_grammar, gNonTerminalNames_plm_grammar,
                                                     gActionTableIndex_plm_grammar, gSuccessorTable_plm_grammar,
                                                     gProductionsTable_plm_grammar) ;
    if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
      cGrammar_plm_5F_grammar grammar ;
      grammar.nt_start_5F_symbol_ (parameter_1, parameter_2, parameter_3, scanner) ;
      }
  }
  macroDetachSharedObject (scanner) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'var_declaration' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_var_5F_declaration_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
      rule_common_5F_syntax_var_5F_declaration_i1_parse(inLexique) ;
    break ;
  case 2 :
      rule_common_5F_syntax_var_5F_declaration_i2_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_var_5F_declaration_ (GALGAS_generalizedTypeEnumAST &  parameter_1,
                                GALGAS_lstring &  parameter_2,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
      rule_common_5F_syntax_var_5F_declaration_i1_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 2 :
      rule_common_5F_syntax_var_5F_declaration_i2_(parameter_1, parameter_2, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'declaration' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_declaration_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 3 :
      rule_common_5F_syntax_declaration_i3_parse(inLexique) ;
    break ;
  case 4 :
      rule_common_5F_syntax_declaration_i4_parse(inLexique) ;
    break ;
  case 5 :
      rule_common_5F_syntax_declaration_i5_parse(inLexique) ;
    break ;
  case 6 :
      rule_common_5F_syntax_declaration_i6_parse(inLexique) ;
    break ;
  case 7 :
      rule_common_5F_syntax_declaration_i7_parse(inLexique) ;
    break ;
  case 8 :
      rule_common_5F_syntax_declaration_i8_parse(inLexique) ;
    break ;
  case 9 :
      rule_common_5F_syntax_declaration_i9_parse(inLexique) ;
    break ;
  case 12 :
      rule_common_5F_syntax_declaration_i12_parse(inLexique) ;
    break ;
  case 41 :
      rule_plm_5F_specific_5F_syntax_declaration_i0_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_declaration_ (GALGAS_ast &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 3 :
      rule_common_5F_syntax_declaration_i3_(parameter_1, inLexique) ;
    break ;
  case 4 :
      rule_common_5F_syntax_declaration_i4_(parameter_1, inLexique) ;
    break ;
  case 5 :
      rule_common_5F_syntax_declaration_i5_(parameter_1, inLexique) ;
    break ;
  case 6 :
      rule_common_5F_syntax_declaration_i6_(parameter_1, inLexique) ;
    break ;
  case 7 :
      rule_common_5F_syntax_declaration_i7_(parameter_1, inLexique) ;
    break ;
  case 8 :
      rule_common_5F_syntax_declaration_i8_(parameter_1, inLexique) ;
    break ;
  case 9 :
      rule_common_5F_syntax_declaration_i9_(parameter_1, inLexique) ;
    break ;
  case 12 :
      rule_common_5F_syntax_declaration_i12_(parameter_1, inLexique) ;
    break ;
  case 41 :
      rule_plm_5F_specific_5F_syntax_declaration_i0_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'procedure' non terminal implementation                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_procedure_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 10 :
      rule_common_5F_syntax_procedure_i10_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_procedure_ (const GALGAS_procedureKindAST  parameter_1,
                                GALGAS_procedureDeclarationListAST &  parameter_2,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 10 :
      rule_common_5F_syntax_procedure_i10_(parameter_1, parameter_2, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'procedure_header' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_procedure_5F_header_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 11 :
      rule_common_5F_syntax_procedure_5F_header_i11_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_procedure_5F_header_ (GALGAS_lstring &  parameter_1,
                                GALGAS_lstring &  parameter_2,
                                GALGAS_procFormalArgumentList &  parameter_3,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 11 :
      rule_common_5F_syntax_procedure_5F_header_i11_(parameter_1, parameter_2, parameter_3, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'instructionList' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_instructionList_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 13 :
      rule_common_5F_syntax_instructionList_i13_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_instructionList_ (GALGAS_instructionListAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 13 :
      rule_common_5F_syntax_instructionList_i13_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'instruction' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_instruction_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 14 :
      rule_common_5F_syntax_instruction_i14_parse(inLexique) ;
    break ;
  case 15 :
      rule_common_5F_syntax_instruction_i15_parse(inLexique) ;
    break ;
  case 16 :
      rule_common_5F_syntax_instruction_i16_parse(inLexique) ;
    break ;
  case 17 :
      rule_common_5F_syntax_instruction_i17_parse(inLexique) ;
    break ;
  case 18 :
      rule_common_5F_syntax_instruction_i18_parse(inLexique) ;
    break ;
  case 19 :
      rule_common_5F_syntax_instruction_i19_parse(inLexique) ;
    break ;
  case 20 :
      rule_common_5F_syntax_instruction_i20_parse(inLexique) ;
    break ;
  case 21 :
      rule_common_5F_syntax_instruction_i21_parse(inLexique) ;
    break ;
  case 22 :
      rule_common_5F_syntax_instruction_i22_parse(inLexique) ;
    break ;
  case 24 :
      rule_common_5F_syntax_instruction_i24_parse(inLexique) ;
    break ;
  case 25 :
      rule_common_5F_syntax_instruction_i25_parse(inLexique) ;
    break ;
  case 26 :
      rule_common_5F_syntax_instruction_i26_parse(inLexique) ;
    break ;
  case 27 :
      rule_common_5F_syntax_instruction_i27_parse(inLexique) ;
    break ;
  case 28 :
      rule_common_5F_syntax_instruction_i28_parse(inLexique) ;
    break ;
  case 29 :
      rule_common_5F_syntax_instruction_i29_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_instruction_ (GALGAS_instructionListAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 14 :
      rule_common_5F_syntax_instruction_i14_(parameter_1, inLexique) ;
    break ;
  case 15 :
      rule_common_5F_syntax_instruction_i15_(parameter_1, inLexique) ;
    break ;
  case 16 :
      rule_common_5F_syntax_instruction_i16_(parameter_1, inLexique) ;
    break ;
  case 17 :
      rule_common_5F_syntax_instruction_i17_(parameter_1, inLexique) ;
    break ;
  case 18 :
      rule_common_5F_syntax_instruction_i18_(parameter_1, inLexique) ;
    break ;
  case 19 :
      rule_common_5F_syntax_instruction_i19_(parameter_1, inLexique) ;
    break ;
  case 20 :
      rule_common_5F_syntax_instruction_i20_(parameter_1, inLexique) ;
    break ;
  case 21 :
      rule_common_5F_syntax_instruction_i21_(parameter_1, inLexique) ;
    break ;
  case 22 :
      rule_common_5F_syntax_instruction_i22_(parameter_1, inLexique) ;
    break ;
  case 24 :
      rule_common_5F_syntax_instruction_i24_(parameter_1, inLexique) ;
    break ;
  case 25 :
      rule_common_5F_syntax_instruction_i25_(parameter_1, inLexique) ;
    break ;
  case 26 :
      rule_common_5F_syntax_instruction_i26_(parameter_1, inLexique) ;
    break ;
  case 27 :
      rule_common_5F_syntax_instruction_i27_(parameter_1, inLexique) ;
    break ;
  case 28 :
      rule_common_5F_syntax_instruction_i28_(parameter_1, inLexique) ;
    break ;
  case 29 :
      rule_common_5F_syntax_instruction_i29_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'if_instruction' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_if_5F_instruction_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 23 :
      rule_common_5F_syntax_if_5F_instruction_i23_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_if_5F_instruction_ (GALGAS_ifInstructionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 23 :
      rule_common_5F_syntax_if_5F_instruction_i23_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'expression' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_expression_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 30 :
      rule_common_5F_syntax_expression_i30_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_expression_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 30 :
      rule_common_5F_syntax_expression_i30_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       'primary' non terminal implementation                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_primary_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 31 :
      rule_common_5F_syntax_primary_i31_parse(inLexique) ;
    break ;
  case 32 :
      rule_common_5F_syntax_primary_i32_parse(inLexique) ;
    break ;
  case 36 :
      rule_common_5F_syntax_primary_i36_parse(inLexique) ;
    break ;
  case 37 :
      rule_common_5F_syntax_primary_i37_parse(inLexique) ;
    break ;
  case 38 :
      rule_common_5F_syntax_primary_i38_parse(inLexique) ;
    break ;
  case 39 :
      rule_common_5F_syntax_primary_i39_parse(inLexique) ;
    break ;
  case 40 :
      rule_common_5F_syntax_primary_i40_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_primary_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 31 :
      rule_common_5F_syntax_primary_i31_(parameter_1, inLexique) ;
    break ;
  case 32 :
      rule_common_5F_syntax_primary_i32_(parameter_1, inLexique) ;
    break ;
  case 36 :
      rule_common_5F_syntax_primary_i36_(parameter_1, inLexique) ;
    break ;
  case 37 :
      rule_common_5F_syntax_primary_i37_(parameter_1, inLexique) ;
    break ;
  case 38 :
      rule_common_5F_syntax_primary_i38_(parameter_1, inLexique) ;
    break ;
  case 39 :
      rule_common_5F_syntax_primary_i39_(parameter_1, inLexique) ;
    break ;
  case 40 :
      rule_common_5F_syntax_primary_i40_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'comparison' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_comparison_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 33 :
      rule_common_5F_syntax_comparison_i33_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_comparison_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 33 :
      rule_common_5F_syntax_comparison_i33_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'multiplicative_expression' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_multiplicative_5F_expression_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 34 :
      rule_common_5F_syntax_multiplicative_5F_expression_i34_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_multiplicative_5F_expression_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 34 :
      rule_common_5F_syntax_multiplicative_5F_expression_i34_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 'additive_expression' non terminal implementation                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_grammar::nt_additive_5F_expression_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 35 :
      rule_common_5F_syntax_additive_5F_expression_i35_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_grammar::nt_additive_5F_expression_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 35 :
      rule_common_5F_syntax_additive_5F_expression_i35_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_0' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_0 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 42 43 44 45
  return inLexique->nextProductionIndex () - 41 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_1' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_1 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 46 47
  return inLexique->nextProductionIndex () - 45 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_2' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_2 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 48 49
  return inLexique->nextProductionIndex () - 47 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_3' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_3 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 50 51
  return inLexique->nextProductionIndex () - 49 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_4' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_4 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 52 53
  return inLexique->nextProductionIndex () - 51 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_5' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_5 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 54 55
  return inLexique->nextProductionIndex () - 53 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_6' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_6 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 56 57
  return inLexique->nextProductionIndex () - 55 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_7' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_7 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 58 59 60 61 62
  return inLexique->nextProductionIndex () - 57 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_8' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_8 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 63 64
  return inLexique->nextProductionIndex () - 62 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_9' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_9 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 65 66
  return inLexique->nextProductionIndex () - 64 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_10' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_10 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 67 68
  return inLexique->nextProductionIndex () - 66 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_11' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_11 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 69 70
  return inLexique->nextProductionIndex () - 68 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_12' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_12 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 71 72 73 74
  return inLexique->nextProductionIndex () - 70 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_13' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_13 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 75 76
  return inLexique->nextProductionIndex () - 74 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_14' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_14 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 77 78 79
  return inLexique->nextProductionIndex () - 76 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_15' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_15 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 80 81 82
  return inLexique->nextProductionIndex () - 79 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_16' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_16 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 83 84 85 86
  return inLexique->nextProductionIndex () - 82 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_17' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_17 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 87 88 89 90
  return inLexique->nextProductionIndex () - 86 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_18' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_18 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 91 92 93 94
  return inLexique->nextProductionIndex () - 90 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_19' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_19 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 95 96 97 98
  return inLexique->nextProductionIndex () - 94 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_20' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_20 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 99 100
  return inLexique->nextProductionIndex () - 98 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_21' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_21 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 101 102 103 104 105 106 107
  return inLexique->nextProductionIndex () - 100 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_22' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_22 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 108 109 110 111 112 113
  return inLexique->nextProductionIndex () - 107 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_23' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_23 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 114 115 116 117 118 119 120 121
  return inLexique->nextProductionIndex () - 113 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_24' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_grammar::select_common_5F_syntax_24 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 122 123
  return inLexique->nextProductionIndex () - 121 ;
}

//---------------------------------------------------------------------------------------------------------------------*

//---------------------------------------------------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"
#include "galgas2/C_galgas_CLI_Options.h"

#include "files/C_FileManager.h"

//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       N O N    T E R M I N A L    N A M E S                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const char * gNonTerminalNames_plms_grammar [39] = {
  "<start_symbol>",// Index 0
  "<var_declaration>",// Index 1
  "<declaration>",// Index 2
  "<procedure>",// Index 3
  "<procedure_header>",// Index 4
  "<instructionList>",// Index 5
  "<instruction>",// Index 6
  "<if_instruction>",// Index 7
  "<expression>",// Index 8
  "<primary>",// Index 9
  "<comparison>",// Index 10
  "<multiplicative_expression>",// Index 11
  "<additive_expression>",// Index 12
  "<select_common_5F_syntax_0>",// Index 13
  "<select_common_5F_syntax_1>",// Index 14
  "<select_common_5F_syntax_2>",// Index 15
  "<select_common_5F_syntax_3>",// Index 16
  "<select_common_5F_syntax_4>",// Index 17
  "<select_common_5F_syntax_5>",// Index 18
  "<select_common_5F_syntax_6>",// Index 19
  "<select_common_5F_syntax_7>",// Index 20
  "<select_common_5F_syntax_8>",// Index 21
  "<select_common_5F_syntax_9>",// Index 22
  "<select_common_5F_syntax_10>",// Index 23
  "<select_common_5F_syntax_11>",// Index 24
  "<select_common_5F_syntax_12>",// Index 25
  "<select_common_5F_syntax_13>",// Index 26
  "<select_common_5F_syntax_14>",// Index 27
  "<select_common_5F_syntax_15>",// Index 28
  "<select_common_5F_syntax_16>",// Index 29
  "<select_common_5F_syntax_17>",// Index 30
  "<select_common_5F_syntax_18>",// Index 31
  "<select_common_5F_syntax_19>",// Index 32
  "<select_common_5F_syntax_20>",// Index 33
  "<select_common_5F_syntax_21>",// Index 34
  "<select_common_5F_syntax_22>",// Index 35
  "<select_common_5F_syntax_23>",// Index 36
  "<select_common_5F_syntax_24>",// Index 37
  "<>"// Index 38
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                S L R    A N A L Y Z E R    A C T I O N    T A B L E                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

// Action tables handle shift and reduce actions ;
//  - a shift action is (terminal_symbol, SHIFT (n)) : if shifts to state n ;
//  - the accept action is (terminal_symbol, ACCEPT) ;
//  - a reduce action is (terminal_symbol, REDUCE (n)) ; if reduces to state n.

#define SHIFT(a) ((a) + 2)
#define REDUCE(a) (-(a) - 1)
#define ACCEPT (1)
#define END (-1)

static const int16_t gActionTable_plms_grammar [] = {
// State S0 (index = 0)
  C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_boolset, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_struct, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, SHIFT (12)
, C_Lexique_plm_5F_lexique::kToken_mode, SHIFT (13)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, SHIFT (14)
, C_Lexique_plm_5F_lexique::kToken_required, SHIFT (15)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (46)
, END
// State S1 (index = 33)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (21)
, END
// State S2 (index = 36)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (22)
, END
// State S3 (index = 39)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (23)
, END
// State S4 (index = 42)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (24)
, END
// State S5 (index = 45)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (25)
, END
// State S6 (index = 48)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (26)
, END
// State S7 (index = 51)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (27)
, END
// State S8 (index = 54)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (69)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (28)
, END
// State S9 (index = 59)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (73)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (30)
, END
// State S10 (index = 64)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (32)
, END
// State S11 (index = 69)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (34)
, END
// State S12 (index = 72)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (35)
, END
// State S13 (index = 75)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (36)
, END
// State S14 (index = 78)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (37)
, END
// State S15 (index = 81)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S16 (index = 84)
, C_Lexique_plm_5F_lexique::kToken_, ACCEPT
, END
// State S17 (index = 87)
, C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_boolset, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_struct, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, SHIFT (12)
, C_Lexique_plm_5F_lexique::kToken_mode, SHIFT (13)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, SHIFT (14)
, C_Lexique_plm_5F_lexique::kToken_required, SHIFT (15)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (46)
, END
// State S18 (index = 120)
, C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_boolset, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_struct, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, SHIFT (12)
, C_Lexique_plm_5F_lexique::kToken_mode, SHIFT (13)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, SHIFT (14)
, C_Lexique_plm_5F_lexique::kToken_required, SHIFT (15)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (46)
, END
// State S19 (index = 153)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (41)
, END
// State S20 (index = 156)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (0)
, END
// State S21 (index = 159)
, C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_boolset, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_struct, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, SHIFT (12)
, C_Lexique_plm_5F_lexique::kToken_mode, SHIFT (13)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, SHIFT (14)
, C_Lexique_plm_5F_lexique::kToken_required, SHIFT (15)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (46)
, END
// State S22 (index = 192)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (43)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (50)
, END
// State S23 (index = 227)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (45)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (52)
, END
// State S24 (index = 232)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (47)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (56)
, END
// State S25 (index = 237)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (49)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (60)
, END
// State S26 (index = 242)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (51)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (67)
, END
// State S27 (index = 249)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (53)
, END
// State S28 (index = 252)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (70)
, END
// State S29 (index = 255)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (54)
, END
// State S30 (index = 258)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (74)
, END
// State S31 (index = 261)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (55)
, END
// State S32 (index = 264)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (32)
, END
// State S33 (index = 269)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (57)
, END
// State S34 (index = 272)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (58)
, END
// State S35 (index = 275)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (59)
, END
// State S36 (index = 278)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (43)
, END
// State S37 (index = 311)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (60)
, END
// State S38 (index = 314)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (45)
, END
// State S39 (index = 347)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (47)
, END
// State S40 (index = 350)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (48)
, END
// State S41 (index = 353)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (67)
, END
// State S42 (index = 376)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (49)
, END
// State S43 (index = 379)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (43)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (50)
, END
// State S44 (index = 414)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (3)
, END
// State S45 (index = 447)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (45)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (52)
, END
// State S46 (index = 452)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (73)
, END
// State S47 (index = 455)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (47)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (56)
, END
// State S48 (index = 460)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (75)
, END
// State S49 (index = 463)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (49)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (60)
, END
// State S50 (index = 468)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (77)
, END
// State S51 (index = 471)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (51)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (67)
, END
// State S52 (index = 478)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (79)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S53 (index = 483)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (82)
, END
// State S54 (index = 486)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (83)
, END
// State S55 (index = 489)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (84)
, END
// State S56 (index = 492)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (80)
, END
// State S57 (index = 495)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (85)
, END
// State S58 (index = 498)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (86)
, END
// State S59 (index = 501)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (87)
, END
// State S60 (index = 504)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (44)
, END
// State S61 (index = 537)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (88)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (89)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (90)
, C_Lexique_plm_5F_lexique::kToken__2B__2B_, SHIFT (91)
, C_Lexique_plm_5F_lexique::kToken__2D__2D_, SHIFT (92)
, END
// State S62 (index = 548)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (93)
, END
// State S63 (index = 551)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (67)
, END
// State S64 (index = 574)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S65 (index = 587)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S66 (index = 602)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S67 (index = 615)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (67)
, END
// State S68 (index = 638)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (111)
, END
// State S69 (index = 641)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (67)
, END
// State S70 (index = 664)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (13)
, END
// State S71 (index = 673)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (51)
, END
// State S72 (index = 706)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (53)
, END
// State S73 (index = 709)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (113)
, END
// State S74 (index = 712)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (57)
, END
// State S75 (index = 715)
, C_Lexique_plm_5F_lexique::kToken_case, SHIFT (114)
, END
// State S76 (index = 718)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (61)
, END
// State S77 (index = 721)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (115)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (116)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (117)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S78 (index = 732)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (68)
, END
// State S79 (index = 737)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (120)
, END
// State S80 (index = 740)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (121)
, END
// State S81 (index = 743)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (2)
, END
// State S82 (index = 746)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (122)
, END
// State S83 (index = 749)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (123)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (71)
, END
// State S84 (index = 754)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (125)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (75)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (126)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (127)
, END
// State S85 (index = 763)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (129)
, END
// State S86 (index = 766)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (41)
, END
// State S87 (index = 799)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (42)
, END
// State S88 (index = 832)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (130)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (20)
, END
// State S89 (index = 857)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S90 (index = 870)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (132)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (99)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (133)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (134)
, END
// State S91 (index = 879)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (14)
, END
// State S92 (index = 902)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (15)
, END
// State S93 (index = 925)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (136)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (137)
, END
// State S94 (index = 930)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (83)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (83)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (83)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (83)
, END
// State S95 (index = 939)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (37)
, END
// State S96 (index = 1038)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (138)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (39)
, END
// State S97 (index = 1141)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S98 (index = 1154)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (36)
, END
// State S99 (index = 1253)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (38)
, END
// State S100 (index = 1352)
, C_Lexique_plm_5F_lexique::kToken_end, SHIFT (140)
, END
// State S101 (index = 1355)
, C_Lexique_plm_5F_lexique::kToken_then, SHIFT (141)
, END
// State S102 (index = 1358)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (142)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (143)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (118)
, END
// State S103 (index = 1457)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (30)
, END
// State S104 (index = 1520)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, SHIFT (150)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, SHIFT (151)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, SHIFT (152)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, SHIFT (153)
, C_Lexique_plm_5F_lexique::kToken__3C_, SHIFT (154)
, C_Lexique_plm_5F_lexique::kToken__3E_, SHIFT (155)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (105)
, END
// State S105 (index = 1595)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (157)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (158)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (159)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (160)
, C_Lexique_plm_5F_lexique::kToken__26__26_, SHIFT (161)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (112)
, END
// State S106 (index = 1680)
, C_Lexique_plm_5F_lexique::kToken__2E_, SHIFT (163)
, END
// State S107 (index = 1683)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (164)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (165)
, END
// State S108 (index = 1688)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (166)
, END
// State S109 (index = 1691)
, C_Lexique_plm_5F_lexique::kToken_do, SHIFT (167)
, END
// State S110 (index = 1694)
, C_Lexique_plm_5F_lexique::kToken_end, SHIFT (168)
, END
// State S111 (index = 1697)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (10)
, END
// State S112 (index = 1736)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (82)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (82)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (82)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (82)
, END
// State S113 (index = 1745)
, C_Lexique_plm_5F_lexique::kToken__2C_, SHIFT (169)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (54)
, END
// State S114 (index = 1750)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (171)
, END
// State S115 (index = 1753)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (172)
, END
// State S116 (index = 1756)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S117 (index = 1759)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (115)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (116)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (117)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S118 (index = 1770)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (115)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (116)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (117)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S119 (index = 1781)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (176)
, END
// State S120 (index = 1784)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (177)
, END
// State S121 (index = 1787)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S122 (index = 1800)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S123 (index = 1813)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (180)
, END
// State S124 (index = 1816)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (181)
, END
// State S125 (index = 1819)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (182)
, END
// State S126 (index = 1822)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (183)
, END
// State S127 (index = 1825)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (184)
, END
// State S128 (index = 1828)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (185)
, END
// State S129 (index = 1831)
, C_Lexique_plm_5F_lexique::kToken_at, SHIFT (186)
, END
// State S130 (index = 1834)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S131 (index = 1847)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (21)
, END
// State S132 (index = 1870)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (188)
, END
// State S133 (index = 1873)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (189)
, END
// State S134 (index = 1876)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (190)
, END
// State S135 (index = 1879)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (191)
, END
// State S136 (index = 1882)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (192)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (18)
, END
// State S137 (index = 1907)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S138 (index = 1920)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (194)
, END
// State S139 (index = 1925)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (196)
, END
// State S140 (index = 1928)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (22)
, END
// State S141 (index = 1951)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (67)
, END
// State S142 (index = 1974)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S143 (index = 1987)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S144 (index = 2000)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S145 (index = 2013)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S146 (index = 2026)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S147 (index = 2039)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S148 (index = 2052)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S149 (index = 2065)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (35)
, END
// State S150 (index = 2150)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S151 (index = 2163)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S152 (index = 2176)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S153 (index = 2189)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S154 (index = 2202)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S155 (index = 2215)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S156 (index = 2228)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (33)
, END
// State S157 (index = 2291)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S158 (index = 2304)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S159 (index = 2317)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S160 (index = 2330)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S161 (index = 2343)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S162 (index = 2356)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (34)
, END
// State S163 (index = 2431)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (216)
, END
// State S164 (index = 2434)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (217)
, END
// State S165 (index = 2437)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (218)
, END
// State S166 (index = 2440)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (219)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (220)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (221)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (87)
, END
// State S167 (index = 2449)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (67)
, END
// State S168 (index = 2472)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (29)
, END
// State S169 (index = 2495)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (224)
, END
// State S170 (index = 2498)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (225)
, END
// State S171 (index = 2501)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_case, SHIFT (226)
, END
// State S172 (index = 2506)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (228)
, END
// State S173 (index = 2509)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (115)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (116)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (117)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S174 (index = 2520)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (66)
, END
// State S175 (index = 2523)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (64)
, END
// State S176 (index = 2526)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (6)
, END
// State S177 (index = 2559)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (1)
, END
// State S178 (index = 2562)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (7)
, END
// State S179 (index = 2595)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (8)
, END
// State S180 (index = 2628)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (230)
, END
// State S181 (index = 2631)
, C_Lexique_plm_5F_lexique::kToken__2D__3E_, SHIFT (231)
, END
// State S182 (index = 2634)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (232)
, END
// State S183 (index = 2637)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (233)
, END
// State S184 (index = 2640)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (234)
, END
// State S185 (index = 2643)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (11)
, END
// State S186 (index = 2680)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (235)
, END
// State S187 (index = 2683)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (19)
, END
// State S188 (index = 2706)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (132)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (99)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (133)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (134)
, END
// State S189 (index = 2715)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (132)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (99)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (133)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (134)
, END
// State S190 (index = 2724)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (132)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (99)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (133)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (134)
, END
// State S191 (index = 2733)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (27)
, END
// State S192 (index = 2756)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S193 (index = 2769)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (17)
, END
// State S194 (index = 2792)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S195 (index = 2805)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (241)
, END
// State S196 (index = 2808)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (31)
, END
// State S197 (index = 2907)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (84)
, C_Lexique_plm_5F_lexique::kToken_else, SHIFT (242)
, C_Lexique_plm_5F_lexique::kToken_elsif, SHIFT (243)
, END
// State S198 (index = 2914)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (142)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (143)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (118)
, END
// State S199 (index = 3013)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (142)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (143)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (118)
, END
// State S200 (index = 3112)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (142)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (143)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (118)
, END
// State S201 (index = 3211)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (142)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (143)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (118)
, END
// State S202 (index = 3310)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (142)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (143)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (118)
, END
// State S203 (index = 3409)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (142)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (143)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (118)
, END
// State S204 (index = 3508)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (142)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (143)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (144)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (145)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, SHIFT (146)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (147)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (118)
, END
// State S205 (index = 3607)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (106)
, END
// State S206 (index = 3670)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (107)
, END
// State S207 (index = 3733)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (108)
, END
// State S208 (index = 3796)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (109)
, END
// State S209 (index = 3859)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (110)
, END
// State S210 (index = 3922)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (111)
, END
// State S211 (index = 3985)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (157)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (158)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (159)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (160)
, C_Lexique_plm_5F_lexique::kToken__26__26_, SHIFT (161)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (112)
, END
// State S212 (index = 4070)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (157)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (158)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (159)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (160)
, C_Lexique_plm_5F_lexique::kToken__26__26_, SHIFT (161)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (112)
, END
// State S213 (index = 4155)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (157)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (158)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (159)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (160)
, C_Lexique_plm_5F_lexique::kToken__26__26_, SHIFT (161)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (112)
, END
// State S214 (index = 4240)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (157)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (158)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (159)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (160)
, C_Lexique_plm_5F_lexique::kToken__26__26_, SHIFT (161)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (112)
, END
// State S215 (index = 4325)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (157)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (158)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (159)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (160)
, C_Lexique_plm_5F_lexique::kToken__26__26_, SHIFT (161)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (112)
, END
// State S216 (index = 4410)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (32)
, END
// State S217 (index = 4509)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (257)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (258)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (259)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (91)
, END
// State S218 (index = 4518)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (261)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (262)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (263)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (95)
, END
// State S219 (index = 4527)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (265)
, END
// State S220 (index = 4530)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (266)
, END
// State S221 (index = 4533)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (267)
, END
// State S222 (index = 4536)
, C_Lexique_plm_5F_lexique::kToken__5D_, SHIFT (268)
, END
// State S223 (index = 4539)
, C_Lexique_plm_5F_lexique::kToken_end, SHIFT (269)
, END
// State S224 (index = 4542)
, C_Lexique_plm_5F_lexique::kToken__2C_, SHIFT (169)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (54)
, END
// State S225 (index = 4547)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (4)
, END
// State S226 (index = 4580)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (271)
, END
// State S227 (index = 4583)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (272)
, END
// State S228 (index = 4586)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (273)
, END
// State S229 (index = 4589)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (65)
, END
// State S230 (index = 4592)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (123)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (71)
, END
// State S231 (index = 4597)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (275)
, END
// State S232 (index = 4600)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (125)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (75)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (126)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (127)
, END
// State S233 (index = 4609)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (125)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (75)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (126)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (127)
, END
// State S234 (index = 4618)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (125)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (75)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (126)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (127)
, END
// State S235 (index = 4627)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (12)
, END
// State S236 (index = 4660)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (102)
, END
// State S237 (index = 4663)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (100)
, END
// State S238 (index = 4666)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (101)
, END
// State S239 (index = 4669)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (16)
, END
// State S240 (index = 4692)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (194)
, END
// State S241 (index = 4697)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__7C__7C_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (40)
, END
// State S242 (index = 4796)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (67)
, END
// State S243 (index = 4819)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S244 (index = 4832)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (23)
, END
// State S245 (index = 4835)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (119)
, END
// State S246 (index = 4920)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (120)
, END
// State S247 (index = 5005)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (121)
, END
// State S248 (index = 5090)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (122)
, END
// State S249 (index = 5175)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (123)
, END
// State S250 (index = 5260)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (124)
, END
// State S251 (index = 5345)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__26__26_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (125)
, END
// State S252 (index = 5430)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (113)
, END
// State S253 (index = 5505)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (114)
, END
// State S254 (index = 5580)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (115)
, END
// State S255 (index = 5655)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (116)
, END
// State S256 (index = 5730)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_mutating, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (117)
, END
// State S257 (index = 5805)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (282)
, END
// State S258 (index = 5808)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (283)
, END
// State S259 (index = 5811)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (284)
, END
// State S260 (index = 5814)
, C_Lexique_plm_5F_lexique::kToken__5D_, SHIFT (285)
, END
// State S261 (index = 5817)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (286)
, END
// State S262 (index = 5820)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (287)
, END
// State S263 (index = 5823)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (288)
, END
// State S264 (index = 5826)
, C_Lexique_plm_5F_lexique::kToken__5D_, SHIFT (289)
, END
// State S265 (index = 5829)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (219)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (220)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (221)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (87)
, END
// State S266 (index = 5838)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (219)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (220)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (221)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (87)
, END
// State S267 (index = 5847)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (219)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (220)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (221)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (87)
, END
// State S268 (index = 5856)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (24)
, END
// State S269 (index = 5879)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (28)
, END
// State S270 (index = 5902)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (55)
, END
// State S271 (index = 5905)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_case, SHIFT (226)
, END
// State S272 (index = 5910)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (5)
, END
// State S273 (index = 5943)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken_self, SHIFT (99)
, C_Lexique_plm_5F_lexique::kToken__2E_, REDUCE (103)
, END
// State S274 (index = 5956)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (72)
, END
// State S275 (index = 5959)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (295)
, END
// State S276 (index = 5962)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (78)
, END
// State S277 (index = 5965)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (76)
, END
// State S278 (index = 5968)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (77)
, END
// State S279 (index = 5971)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (127)
, END
// State S280 (index = 5974)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (85)
, END
// State S281 (index = 5977)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (86)
, END
// State S282 (index = 5980)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (257)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (258)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (259)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (91)
, END
// State S283 (index = 5989)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (257)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (258)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (259)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (91)
, END
// State S284 (index = 5998)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (257)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (258)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (259)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (91)
, END
// State S285 (index = 6007)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (25)
, END
// State S286 (index = 6030)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (261)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (262)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (263)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (95)
, END
// State S287 (index = 6039)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (261)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (262)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (263)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (95)
, END
// State S288 (index = 6048)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (261)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (262)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (263)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (95)
, END
// State S289 (index = 6057)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__5B_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (26)
, END
// State S290 (index = 6080)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (90)
, END
// State S291 (index = 6083)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (88)
, END
// State S292 (index = 6086)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (89)
, END
// State S293 (index = 6089)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (59)
, END
// State S294 (index = 6092)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (115)
, C_Lexique_plm_5F_lexique::kToken_mutating, SHIFT (116)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (117)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (9)
, END
// State S295 (index = 6103)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (303)
, END
// State S296 (index = 6106)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (94)
, END
// State S297 (index = 6109)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (92)
, END
// State S298 (index = 6112)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (93)
, END
// State S299 (index = 6115)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (98)
, END
// State S300 (index = 6118)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (96)
, END
// State S301 (index = 6121)
, C_Lexique_plm_5F_lexique::kToken__5D_, REDUCE (97)
, END
// State S302 (index = 6124)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (63)
, END
// State S303 (index = 6127)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (81)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (67)
, END
// State S304 (index = 6150)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (305)
, END
// State S305 (index = 6153)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_newBooleanType, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_boolset, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_struct, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_newSignedBaseType, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedBaseType, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (9)
, END} ;

static const uint32_t gActionTableIndex_plms_grammar [306] = {
  0  // S0
, 33  // S1
, 36  // S2
, 39  // S3
, 42  // S4
, 45  // S5
, 48  // S6
, 51  // S7
, 54  // S8
, 59  // S9
, 64  // S10
, 69  // S11
, 72  // S12
, 75  // S13
, 78  // S14
, 81  // S15
, 84  // S16
, 87  // S17
, 120  // S18
, 153  // S19
, 156  // S20
, 159  // S21
, 192  // S22
, 227  // S23
, 232  // S24
, 237  // S25
, 242  // S26
, 249  // S27
, 252  // S28
, 255  // S29
, 258  // S30
, 261  // S31
, 264  // S32
, 269  // S33
, 272  // S34
, 275  // S35
, 278  // S36
, 311  // S37
, 314  // S38
, 347  // S39
, 350  // S40
, 353  // S41
, 376  // S42
, 379  // S43
, 414  // S44
, 447  // S45
, 452  // S46
, 455  // S47
, 460  // S48
, 463  // S49
, 468  // S50
, 471  // S51
, 478  // S52
, 483  // S53
, 486  // S54
, 489  // S55
, 492  // S56
, 495  // S57
, 498  // S58
, 501  // S59
, 504  // S60
, 537  // S61
, 548  // S62
, 551  // S63
, 574  // S64
, 587  // S65
, 602  // S66
, 615  // S67
, 638  // S68
, 641  // S69
, 664  // S70
, 673  // S71
, 706  // S72
, 709  // S73
, 712  // S74
, 715  // S75
, 718  // S76
, 721  // S77
, 732  // S78
, 737  // S79
, 740  // S80
, 743  // S81
, 746  // S82
, 749  // S83
, 754  // S84
, 763  // S85
, 766  // S86
, 799  // S87
, 832  // S88
, 857  // S89
, 870  // S90
, 879  // S91
, 902  // S92
, 925  // S93
, 930  // S94
, 939  // S95
, 1038  // S96
, 1141  // S97
, 1154  // S98
, 1253  // S99
, 1352  // S100
, 1355  // S101
, 1358  // S102
, 1457  // S103
, 1520  // S104
, 1595  // S105
, 1680  // S106
, 1683  // S107
, 1688  // S108
, 1691  // S109
, 1694  // S110
, 1697  // S111
, 1736  // S112
, 1745  // S113
, 1750  // S114
, 1753  // S115
, 1756  // S116
, 1759  // S117
, 1770  // S118
, 1781  // S119
, 1784  // S120
, 1787  // S121
, 1800  // S122
, 1813  // S123
, 1816  // S124
, 1819  // S125
, 1822  // S126
, 1825  // S127
, 1828  // S128
, 1831  // S129
, 1834  // S130
, 1847  // S131
, 1870  // S132
, 1873  // S133
, 1876  // S134
, 1879  // S135
, 1882  // S136
, 1907  // S137
, 1920  // S138
, 1925  // S139
, 1928  // S140
, 1951  // S141
, 1974  // S142
, 1987  // S143
, 2000  // S144
, 2013  // S145
, 2026  // S146
, 2039  // S147
, 2052  // S148
, 2065  // S149
, 2150  // S150
, 2163  // S151
, 2176  // S152
, 2189  // S153
, 2202  // S154
, 2215  // S155
, 2228  // S156
, 2291  // S157
, 2304  // S158
, 2317  // S159
, 2330  // S160
, 2343  // S161
, 2356  // S162
, 2431  // S163
, 2434  // S164
, 2437  // S165
, 2440  // S166
, 2449  // S167
, 2472  // S168
, 2495  // S169
, 2498  // S170
, 2501  // S171
, 2506  // S172
, 2509  // S173
, 2520  // S174
, 2523  // S175
, 2526  // S176
, 2559  // S177
, 2562  // S178
, 2595  // S179
, 2628  // S180
, 2631  // S181
, 2634  // S182
, 2637  // S183
, 2640  // S184
, 2643  // S185
, 2680  // S186
, 2683  // S187
, 2706  // S188
, 2715  // S189
, 2724  // S190
, 2733  // S191
, 2756  // S192
, 2769  // S193
, 2792  // S194
, 2805  // S195
, 2808  // S196
, 2907  // S197
, 2914  // S198
, 3013  // S199
, 3112  // S200
, 3211  // S201
, 3310  // S202
, 3409  // S203
, 3508  // S204
, 3607  // S205
, 3670  // S206
, 3733  // S207
, 3796  // S208
, 3859  // S209
, 3922  // S210
, 3985  // S211
, 4070  // S212
, 4155  // S213
, 4240  // S214
, 4325  // S215
, 4410  // S216
, 4509  // S217
, 4518  // S218
, 4527  // S219
, 4530  // S220
, 4533  // S221
, 4536  // S222
, 4539  // S223
, 4542  // S224
, 4547  // S225
, 4580  // S226
, 4583  // S227
, 4586  // S228
, 4589  // S229
, 4592  // S230
, 4597  // S231
, 4600  // S232
, 4609  // S233
, 4618  // S234
, 4627  // S235
, 4660  // S236
, 4663  // S237
, 4666  // S238
, 4669  // S239
, 4692  // S240
, 4697  // S241
, 4796  // S242
, 4819  // S243
, 4832  // S244
, 4835  // S245
, 4920  // S246
, 5005  // S247
, 5090  // S248
, 5175  // S249
, 5260  // S250
, 5345  // S251
, 5430  // S252
, 5505  // S253
, 5580  // S254
, 5655  // S255
, 5730  // S256
, 5805  // S257
, 5808  // S258
, 5811  // S259
, 5814  // S260
, 5817  // S261
, 5820  // S262
, 5823  // S263
, 5826  // S264
, 5829  // S265
, 5838  // S266
, 5847  // S267
, 5856  // S268
, 5879  // S269
, 5902  // S270
, 5905  // S271
, 5910  // S272
, 5943  // S273
, 5956  // S274
, 5959  // S275
, 5962  // S276
, 5965  // S277
, 5968  // S278
, 5971  // S279
, 5974  // S280
, 5977  // S281
, 5980  // S282
, 5989  // S283
, 5998  // S284
, 6007  // S285
, 6030  // S286
, 6039  // S287
, 6048  // S288
, 6057  // S289
, 6080  // S290
, 6083  // S291
, 6086  // S292
, 6089  // S293
, 6092  // S294
, 6103  // S295
, 6106  // S296
, 6109  // S297
, 6112  // S298
, 6115  // S299
, 6118  // S300
, 6121  // S301
, 6124  // S302
, 6127  // S303
, 6150  // S304
, 6153  // S305
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            SLR states successors table                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

// Successor tables handle non terminal successors ;
// an entry is (non_terminal_symbol, n) ; successor is state n.

static const int16_t gSuccessorTable_plms_grammar_0 [11] = {0, 16,
  2, 17,
  3, 18,
  4, 19,
  13, 20, -1} ;

static const int16_t gSuccessorTable_plms_grammar_8 [3] = {22, 29, -1} ;

static const int16_t gSuccessorTable_plms_grammar_9 [3] = {24, 31, -1} ;

static const int16_t gSuccessorTable_plms_grammar_10 [3] = {26, 33, -1} ;

static const int16_t gSuccessorTable_plms_grammar_15 [3] = {4, 38, -1} ;

static const int16_t gSuccessorTable_plms_grammar_17 [9] = {2, 17,
  3, 18,
  4, 19,
  13, 39, -1} ;

static const int16_t gSuccessorTable_plms_grammar_18 [9] = {2, 17,
  3, 18,
  4, 19,
  13, 40, -1} ;

static const int16_t gSuccessorTable_plms_grammar_21 [9] = {2, 17,
  3, 18,
  4, 19,
  13, 42, -1} ;

static const int16_t gSuccessorTable_plms_grammar_22 [3] = {14, 44, -1} ;

static const int16_t gSuccessorTable_plms_grammar_23 [3] = {15, 46, -1} ;

static const int16_t gSuccessorTable_plms_grammar_24 [3] = {17, 48, -1} ;

static const int16_t gSuccessorTable_plms_grammar_25 [3] = {19, 50, -1} ;

static const int16_t gSuccessorTable_plms_grammar_26 [3] = {21, 52, -1} ;

static const int16_t gSuccessorTable_plms_grammar_32 [3] = {26, 56, -1} ;

static const int16_t gSuccessorTable_plms_grammar_41 [7] = {5, 68,
  6, 69,
  27, 70, -1} ;

static const int16_t gSuccessorTable_plms_grammar_43 [3] = {14, 71, -1} ;

static const int16_t gSuccessorTable_plms_grammar_45 [3] = {15, 72, -1} ;

static const int16_t gSuccessorTable_plms_grammar_47 [3] = {17, 74, -1} ;

static const int16_t gSuccessorTable_plms_grammar_49 [3] = {19, 76, -1} ;

static const int16_t gSuccessorTable_plms_grammar_51 [3] = {21, 78, -1} ;

static const int16_t gSuccessorTable_plms_grammar_52 [5] = {1, 80,
  4, 81, -1} ;

static const int16_t gSuccessorTable_plms_grammar_63 [5] = {6, 69,
  27, 94, -1} ;

static const int16_t gSuccessorTable_plms_grammar_64 [15] = {7, 100,
  8, 101,
  9, 102,
  10, 103,
  11, 104,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_65 [13] = {8, 108,
  9, 102,
  10, 103,
  11, 104,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_66 [13] = {8, 109,
  9, 102,
  10, 103,
  11, 104,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_67 [7] = {5, 110,
  6, 69,
  27, 70, -1} ;

static const int16_t gSuccessorTable_plms_grammar_69 [5] = {6, 69,
  27, 112, -1} ;

static const int16_t gSuccessorTable_plms_grammar_77 [7] = {3, 118,
  4, 19,
  20, 119, -1} ;

static const int16_t gSuccessorTable_plms_grammar_83 [3] = {23, 124, -1} ;

static const int16_t gSuccessorTable_plms_grammar_84 [3] = {25, 128, -1} ;

static const int16_t gSuccessorTable_plms_grammar_89 [13] = {8, 131,
  9, 102,
  10, 103,
  11, 104,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_90 [3] = {32, 135, -1} ;

static const int16_t gSuccessorTable_plms_grammar_97 [13] = {8, 139,
  9, 102,
  10, 103,
  11, 104,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_102 [3] = {36, 149, -1} ;

static const int16_t gSuccessorTable_plms_grammar_104 [3] = {34, 156, -1} ;

static const int16_t gSuccessorTable_plms_grammar_105 [3] = {35, 162, -1} ;

static const int16_t gSuccessorTable_plms_grammar_113 [3] = {16, 170, -1} ;

static const int16_t gSuccessorTable_plms_grammar_116 [5] = {3, 173,
  4, 19, -1} ;

static const int16_t gSuccessorTable_plms_grammar_117 [7] = {3, 118,
  4, 19,
  20, 174, -1} ;

static const int16_t gSuccessorTable_plms_grammar_118 [7] = {3, 118,
  4, 19,
  20, 175, -1} ;

static const int16_t gSuccessorTable_plms_grammar_121 [13] = {8, 178,
  9, 102,
  10, 103,
  11, 104,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_122 [13] = {8, 179,
  9, 102,
  10, 103,
  11, 104,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_130 [13] = {8, 187,
  9, 102,
  10, 103,
  11, 104,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_137 [13] = {8, 193,
  9, 102,
  10, 103,
  11, 104,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_138 [3] = {37, 195, -1} ;

static const int16_t gSuccessorTable_plms_grammar_141 [7] = {5, 197,
  6, 69,
  27, 70, -1} ;

static const int16_t gSuccessorTable_plms_grammar_142 [5] = {9, 198,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_143 [5] = {9, 199,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_144 [5] = {9, 200,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_145 [5] = {9, 201,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_146 [5] = {9, 202,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_147 [5] = {9, 203,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_148 [5] = {9, 204,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_150 [9] = {9, 102,
  11, 205,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_151 [9] = {9, 102,
  11, 206,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_152 [9] = {9, 102,
  11, 207,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_153 [9] = {9, 102,
  11, 208,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_154 [9] = {9, 102,
  11, 209,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_155 [9] = {9, 102,
  11, 210,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_157 [7] = {9, 102,
  12, 211,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_158 [7] = {9, 102,
  12, 212,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_159 [7] = {9, 102,
  12, 213,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_160 [7] = {9, 102,
  12, 214,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_161 [7] = {9, 102,
  12, 215,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_166 [3] = {29, 222, -1} ;

static const int16_t gSuccessorTable_plms_grammar_167 [7] = {5, 223,
  6, 69,
  27, 70, -1} ;

static const int16_t gSuccessorTable_plms_grammar_171 [3] = {18, 227, -1} ;

static const int16_t gSuccessorTable_plms_grammar_173 [7] = {3, 118,
  4, 19,
  20, 229, -1} ;

static const int16_t gSuccessorTable_plms_grammar_188 [3] = {32, 236, -1} ;

static const int16_t gSuccessorTable_plms_grammar_189 [3] = {32, 237, -1} ;

static const int16_t gSuccessorTable_plms_grammar_190 [3] = {32, 238, -1} ;

static const int16_t gSuccessorTable_plms_grammar_192 [13] = {8, 239,
  9, 102,
  10, 103,
  11, 104,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_194 [13] = {8, 240,
  9, 102,
  10, 103,
  11, 104,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_197 [3] = {28, 244, -1} ;

static const int16_t gSuccessorTable_plms_grammar_198 [3] = {36, 245, -1} ;

static const int16_t gSuccessorTable_plms_grammar_199 [3] = {36, 246, -1} ;

static const int16_t gSuccessorTable_plms_grammar_200 [3] = {36, 247, -1} ;

static const int16_t gSuccessorTable_plms_grammar_201 [3] = {36, 248, -1} ;

static const int16_t gSuccessorTable_plms_grammar_202 [3] = {36, 249, -1} ;

static const int16_t gSuccessorTable_plms_grammar_203 [3] = {36, 250, -1} ;

static const int16_t gSuccessorTable_plms_grammar_204 [3] = {36, 251, -1} ;

static const int16_t gSuccessorTable_plms_grammar_211 [3] = {35, 252, -1} ;

static const int16_t gSuccessorTable_plms_grammar_212 [3] = {35, 253, -1} ;

static const int16_t gSuccessorTable_plms_grammar_213 [3] = {35, 254, -1} ;

static const int16_t gSuccessorTable_plms_grammar_214 [3] = {35, 255, -1} ;

static const int16_t gSuccessorTable_plms_grammar_215 [3] = {35, 256, -1} ;

static const int16_t gSuccessorTable_plms_grammar_217 [3] = {30, 260, -1} ;

static const int16_t gSuccessorTable_plms_grammar_218 [3] = {31, 264, -1} ;

static const int16_t gSuccessorTable_plms_grammar_224 [3] = {16, 270, -1} ;

static const int16_t gSuccessorTable_plms_grammar_230 [3] = {23, 274, -1} ;

static const int16_t gSuccessorTable_plms_grammar_232 [3] = {25, 276, -1} ;

static const int16_t gSuccessorTable_plms_grammar_233 [3] = {25, 277, -1} ;

static const int16_t gSuccessorTable_plms_grammar_234 [3] = {25, 278, -1} ;

static const int16_t gSuccessorTable_plms_grammar_240 [3] = {37, 279, -1} ;

static const int16_t gSuccessorTable_plms_grammar_242 [7] = {5, 280,
  6, 69,
  27, 70, -1} ;

static const int16_t gSuccessorTable_plms_grammar_243 [15] = {7, 281,
  8, 101,
  9, 102,
  10, 103,
  11, 104,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_265 [3] = {29, 290, -1} ;

static const int16_t gSuccessorTable_plms_grammar_266 [3] = {29, 291, -1} ;

static const int16_t gSuccessorTable_plms_grammar_267 [3] = {29, 292, -1} ;

static const int16_t gSuccessorTable_plms_grammar_271 [3] = {18, 293, -1} ;

static const int16_t gSuccessorTable_plms_grammar_273 [13] = {8, 294,
  9, 102,
  10, 103,
  11, 104,
  12, 105,
  33, 106, -1} ;

static const int16_t gSuccessorTable_plms_grammar_282 [3] = {30, 296, -1} ;

static const int16_t gSuccessorTable_plms_grammar_283 [3] = {30, 297, -1} ;

static const int16_t gSuccessorTable_plms_grammar_284 [3] = {30, 298, -1} ;

static const int16_t gSuccessorTable_plms_grammar_286 [3] = {31, 299, -1} ;

static const int16_t gSuccessorTable_plms_grammar_287 [3] = {31, 300, -1} ;

static const int16_t gSuccessorTable_plms_grammar_288 [3] = {31, 301, -1} ;

static const int16_t gSuccessorTable_plms_grammar_294 [7] = {3, 118,
  4, 19,
  20, 302, -1} ;

static const int16_t gSuccessorTable_plms_grammar_303 [7] = {5, 304,
  6, 69,
  27, 70, -1} ;

static const int16_t * gSuccessorTable_plms_grammar [306] = {
gSuccessorTable_plms_grammar_0, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plms_grammar_8, gSuccessorTable_plms_grammar_9, gSuccessorTable_plms_grammar_10, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plms_grammar_15, 
  NULL, gSuccessorTable_plms_grammar_17, gSuccessorTable_plms_grammar_18, NULL, 
  NULL, gSuccessorTable_plms_grammar_21, gSuccessorTable_plms_grammar_22, gSuccessorTable_plms_grammar_23, 
  gSuccessorTable_plms_grammar_24, gSuccessorTable_plms_grammar_25, gSuccessorTable_plms_grammar_26, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plms_grammar_32, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plms_grammar_41, NULL, gSuccessorTable_plms_grammar_43, 
  NULL, gSuccessorTable_plms_grammar_45, NULL, gSuccessorTable_plms_grammar_47, 
  NULL, gSuccessorTable_plms_grammar_49, NULL, gSuccessorTable_plms_grammar_51, 
  gSuccessorTable_plms_grammar_52, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plms_grammar_63, 
  gSuccessorTable_plms_grammar_64, gSuccessorTable_plms_grammar_65, gSuccessorTable_plms_grammar_66, gSuccessorTable_plms_grammar_67, 
  NULL, gSuccessorTable_plms_grammar_69, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plms_grammar_77, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plms_grammar_83, 
  gSuccessorTable_plms_grammar_84, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plms_grammar_89, gSuccessorTable_plms_grammar_90, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plms_grammar_97, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plms_grammar_102, NULL, 
  gSuccessorTable_plms_grammar_104, gSuccessorTable_plms_grammar_105, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plms_grammar_113, NULL, NULL, 
  gSuccessorTable_plms_grammar_116, gSuccessorTable_plms_grammar_117, gSuccessorTable_plms_grammar_118, NULL, 
  NULL, gSuccessorTable_plms_grammar_121, gSuccessorTable_plms_grammar_122, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plms_grammar_130, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plms_grammar_137, gSuccessorTable_plms_grammar_138, NULL, 
  NULL, gSuccessorTable_plms_grammar_141, gSuccessorTable_plms_grammar_142, gSuccessorTable_plms_grammar_143, 
  gSuccessorTable_plms_grammar_144, gSuccessorTable_plms_grammar_145, gSuccessorTable_plms_grammar_146, gSuccessorTable_plms_grammar_147, 
  gSuccessorTable_plms_grammar_148, NULL, gSuccessorTable_plms_grammar_150, gSuccessorTable_plms_grammar_151, 
  gSuccessorTable_plms_grammar_152, gSuccessorTable_plms_grammar_153, gSuccessorTable_plms_grammar_154, gSuccessorTable_plms_grammar_155, 
  NULL, gSuccessorTable_plms_grammar_157, gSuccessorTable_plms_grammar_158, gSuccessorTable_plms_grammar_159, 
  gSuccessorTable_plms_grammar_160, gSuccessorTable_plms_grammar_161, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plms_grammar_166, gSuccessorTable_plms_grammar_167, 
  NULL, NULL, NULL, gSuccessorTable_plms_grammar_171, 
  NULL, gSuccessorTable_plms_grammar_173, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plms_grammar_188, gSuccessorTable_plms_grammar_189, gSuccessorTable_plms_grammar_190, NULL, 
  gSuccessorTable_plms_grammar_192, NULL, gSuccessorTable_plms_grammar_194, NULL, 
  NULL, gSuccessorTable_plms_grammar_197, gSuccessorTable_plms_grammar_198, gSuccessorTable_plms_grammar_199, 
  gSuccessorTable_plms_grammar_200, gSuccessorTable_plms_grammar_201, gSuccessorTable_plms_grammar_202, gSuccessorTable_plms_grammar_203, 
  gSuccessorTable_plms_grammar_204, NULL, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plms_grammar_211, 
  gSuccessorTable_plms_grammar_212, gSuccessorTable_plms_grammar_213, gSuccessorTable_plms_grammar_214, gSuccessorTable_plms_grammar_215, 
  NULL, gSuccessorTable_plms_grammar_217, gSuccessorTable_plms_grammar_218, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plms_grammar_224, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plms_grammar_230, NULL, 
  gSuccessorTable_plms_grammar_232, gSuccessorTable_plms_grammar_233, gSuccessorTable_plms_grammar_234, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plms_grammar_240, NULL, gSuccessorTable_plms_grammar_242, gSuccessorTable_plms_grammar_243, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plms_grammar_265, gSuccessorTable_plms_grammar_266, gSuccessorTable_plms_grammar_267, 
  NULL, NULL, NULL, gSuccessorTable_plms_grammar_271, 
  NULL, gSuccessorTable_plms_grammar_273, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plms_grammar_282, gSuccessorTable_plms_grammar_283, 
  gSuccessorTable_plms_grammar_284, NULL, gSuccessorTable_plms_grammar_286, gSuccessorTable_plms_grammar_287, 
  gSuccessorTable_plms_grammar_288, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plms_grammar_294, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plms_grammar_303, 
  NULL, NULL} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Production rules infos (left non terminal, size of right string)                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gProductionsTable_plms_grammar [129 * 2] = {
  0, 1,
  1, 3,
  1, 1,
  2, 3,
  2, 7,
  2, 8,
  2, 6,
  2, 6,
  2, 6,
  2, 12,
  3, 4,
  4, 6,
  2, 7,
  5, 1,
  6, 2,
  6, 2,
  6, 5,
  6, 4,
  6, 3,
  6, 4,
  6, 2,
  6, 3,
  6, 3,
  7, 4,
  6, 5,
  6, 6,
  6, 6,
  6, 4,
  6, 5,
  6, 3,
  8, 1,
  9, 3,
  9, 3,
  10, 2,
  11, 2,
  12, 2,
  9, 1,
  9, 1,
  9, 1,
  9, 1,
  9, 4,
  2, 4,
  2, 4,
  2, 2,
  2, 3,
  2, 2,
  13, 0,
  13, 2,
  13, 2,
  13, 3,
  14, 0,
  14, 2,
  15, 0,
  15, 2,
  16, 0,
  16, 3,
  17, 0,
  17, 2,
  18, 0,
  18, 3,
  19, 0,
  19, 2,
  20, 0,
  20, 6,
  20, 2,
  20, 3,
  20, 2,
  21, 0,
  21, 2,
  22, 0,
  22, 1,
  23, 0,
  23, 4,
  24, 0,
  24, 1,
  25, 0,
  25, 4,
  25, 4,
  25, 4,
  26, 0,
  26, 2,
  27, 0,
  27, 2,
  27, 2,
  28, 0,
  28, 2,
  28, 2,
  29, 0,
  29, 3,
  29, 3,
  29, 3,
  30, 0,
  30, 3,
  30, 3,
  30, 3,
  31, 0,
  31, 3,
  31, 3,
  31, 3,
  32, 0,
  32, 3,
  32, 3,
  32, 3,
  33, 0,
  33, 1,
  34, 0,
  34, 2,
  34, 2,
  34, 2,
  34, 2,
  34, 2,
  34, 2,
  35, 0,
  35, 3,
  35, 3,
  35, 3,
  35, 3,
  35, 3,
  36, 0,
  36, 3,
  36, 3,
  36, 3,
  36, 3,
  36, 3,
  36, 3,
  36, 3,
  37, 0,
  37, 3,
  38, 1
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'start_symbol' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::nt_start_5F_symbol_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_common_5F_syntax_start_5F_symbol_i0_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plms_5F_grammar::nt_start_5F_symbol_ (GALGAS_ast &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_location &  parameter_3,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_common_5F_syntax_start_5F_symbol_i0_(parameter_1, parameter_2, parameter_3, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

void cGrammar_plms_5F_grammar::performIndexing (C_Compiler * /* inCompiler */,
             const C_String & /* inSourceFilePath */) {
}

void cGrammar_plms_5F_grammar::performOnlyLexicalAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_plm_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performLexicalAnalysis () ;
  }
  macroDetachSharedObject (scanner) ;
}

void cGrammar_plms_5F_grammar::performOnlySyntaxAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_plm_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performBottomUpParsing (gActionTable_plms_grammar, gNonTerminalNames_plms_grammar,
                                     gActionTableIndex_plms_grammar, gSuccessorTable_plms_grammar,
                                     gProductionsTable_plms_grammar) ;
  }
  macroDetachSharedObject (scanner) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Grammar start symbol implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::_performSourceFileParsing_ (C_Compiler * inCompiler,
                                GALGAS_lstring inFilePath,
                                GALGAS_ast &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_location &  parameter_3
                                COMMA_LOCATION_ARGS) {
  if (inFilePath.isValid ()) {
    const GALGAS_string filePathAsString = inFilePath.reader_string (HERE) ;
    C_String filePath = filePathAsString.stringValue () ;
    if (! C_FileManager::isAbsolutePath (filePath)) {
      filePath = inCompiler->sourceFilePath ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (filePath) ;
    }
    if (C_FileManager::fileExistsAtPath (filePath)) {
      C_Lexique_plm_5F_lexique * scanner = NULL ;
      macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, "", "", filePath COMMA_HERE)) ;
      if (scanner->sourceText () != NULL) {
        const bool ok = scanner->performBottomUpParsing (gActionTable_plms_grammar, gNonTerminalNames_plms_grammar,
                                                         gActionTableIndex_plms_grammar, gSuccessorTable_plms_grammar,
                                                         gProductionsTable_plms_grammar) ;
        if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
          cGrammar_plms_5F_grammar grammar ;
          grammar.nt_start_5F_symbol_ (parameter_1, parameter_2, parameter_3, scanner) ;
        }
      }else{
        C_String message ;
        message << "the '" << filePath << "' file exists, but cannot be read" ;
        const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
        inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
      }
      macroDetachSharedObject (scanner) ;
    }else{
      C_String message ;
      message << "the '" << filePath << "' file does not exist" ;
      const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
      inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::_performSourceStringParsing_ (C_Compiler * inCompiler,
                                GALGAS_string inSourceString,
                                GALGAS_ast &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_location &  parameter_3
                                COMMA_UNUSED_LOCATION_ARGS) {
  C_Lexique_plm_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, inSourceString.stringValue (), "" COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    const bool ok = scanner->performBottomUpParsing (gActionTable_plms_grammar, gNonTerminalNames_plms_grammar,
                                                     gActionTableIndex_plms_grammar, gSuccessorTable_plms_grammar,
                                                     gProductionsTable_plms_grammar) ;
    if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
      cGrammar_plms_5F_grammar grammar ;
      grammar.nt_start_5F_symbol_ (parameter_1, parameter_2, parameter_3, scanner) ;
      }
  }
  macroDetachSharedObject (scanner) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'var_declaration' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::nt_var_5F_declaration_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
      rule_common_5F_syntax_var_5F_declaration_i1_parse(inLexique) ;
    break ;
  case 2 :
      rule_common_5F_syntax_var_5F_declaration_i2_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plms_5F_grammar::nt_var_5F_declaration_ (GALGAS_generalizedTypeEnumAST &  parameter_1,
                                GALGAS_lstring &  parameter_2,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
      rule_common_5F_syntax_var_5F_declaration_i1_(parameter_1, parameter_2, inLexique) ;
    break ;
  case 2 :
      rule_common_5F_syntax_var_5F_declaration_i2_(parameter_1, parameter_2, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'declaration' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::nt_declaration_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 3 :
      rule_common_5F_syntax_declaration_i3_parse(inLexique) ;
    break ;
  case 4 :
      rule_common_5F_syntax_declaration_i4_parse(inLexique) ;
    break ;
  case 5 :
      rule_common_5F_syntax_declaration_i5_parse(inLexique) ;
    break ;
  case 6 :
      rule_common_5F_syntax_declaration_i6_parse(inLexique) ;
    break ;
  case 7 :
      rule_common_5F_syntax_declaration_i7_parse(inLexique) ;
    break ;
  case 8 :
      rule_common_5F_syntax_declaration_i8_parse(inLexique) ;
    break ;
  case 9 :
      rule_common_5F_syntax_declaration_i9_parse(inLexique) ;
    break ;
  case 12 :
      rule_common_5F_syntax_declaration_i12_parse(inLexique) ;
    break ;
  case 41 :
      rule_plms_5F_specific_5F_syntax_declaration_i0_parse(inLexique) ;
    break ;
  case 42 :
      rule_plms_5F_specific_5F_syntax_declaration_i1_parse(inLexique) ;
    break ;
  case 43 :
      rule_plms_5F_specific_5F_syntax_declaration_i2_parse(inLexique) ;
    break ;
  case 44 :
      rule_plms_5F_specific_5F_syntax_declaration_i3_parse(inLexique) ;
    break ;
  case 45 :
      rule_plms_5F_specific_5F_syntax_declaration_i4_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plms_5F_grammar::nt_declaration_ (GALGAS_ast &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 3 :
      rule_common_5F_syntax_declaration_i3_(parameter_1, inLexique) ;
    break ;
  case 4 :
      rule_common_5F_syntax_declaration_i4_(parameter_1, inLexique) ;
    break ;
  case 5 :
      rule_common_5F_syntax_declaration_i5_(parameter_1, inLexique) ;
    break ;
  case 6 :
      rule_common_5F_syntax_declaration_i6_(parameter_1, inLexique) ;
    break ;
  case 7 :
      rule_common_5F_syntax_declaration_i7_(parameter_1, inLexique) ;
    break ;
  case 8 :
      rule_common_5F_syntax_declaration_i8_(parameter_1, inLexique) ;
    break ;
  case 9 :
      rule_common_5F_syntax_declaration_i9_(parameter_1, inLexique) ;
    break ;
  case 12 :
      rule_common_5F_syntax_declaration_i12_(parameter_1, inLexique) ;
    break ;
  case 41 :
      rule_plms_5F_specific_5F_syntax_declaration_i0_(parameter_1, inLexique) ;
    break ;
  case 42 :
      rule_plms_5F_specific_5F_syntax_declaration_i1_(parameter_1, inLexique) ;
    break ;
  case 43 :
      rule_plms_5F_specific_5F_syntax_declaration_i2_(parameter_1, inLexique) ;
    break ;
  case 44 :
      rule_plms_5F_specific_5F_syntax_declaration_i3_(parameter_1, inLexique) ;
    break ;
  case 45 :
      rule_plms_5F_specific_5F_syntax_declaration_i4_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'procedure' non terminal implementation                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::nt_procedure_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 10 :
      rule_common_5F_syntax_procedure_i10_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plms_5F_grammar::nt_procedure_ (const GALGAS_procedureKindAST  parameter_1,
                                GALGAS_procedureDeclarationListAST &  parameter_2,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 10 :
      rule_common_5F_syntax_procedure_i10_(parameter_1, parameter_2, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'procedure_header' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::nt_procedure_5F_header_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 11 :
      rule_common_5F_syntax_procedure_5F_header_i11_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plms_5F_grammar::nt_procedure_5F_header_ (GALGAS_lstring &  parameter_1,
                                GALGAS_lstring &  parameter_2,
                                GALGAS_procFormalArgumentList &  parameter_3,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 11 :
      rule_common_5F_syntax_procedure_5F_header_i11_(parameter_1, parameter_2, parameter_3, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'instructionList' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::nt_instructionList_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 13 :
      rule_common_5F_syntax_instructionList_i13_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plms_5F_grammar::nt_instructionList_ (GALGAS_instructionListAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 13 :
      rule_common_5F_syntax_instructionList_i13_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'instruction' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::nt_instruction_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 14 :
      rule_common_5F_syntax_instruction_i14_parse(inLexique) ;
    break ;
  case 15 :
      rule_common_5F_syntax_instruction_i15_parse(inLexique) ;
    break ;
  case 16 :
      rule_common_5F_syntax_instruction_i16_parse(inLexique) ;
    break ;
  case 17 :
      rule_common_5F_syntax_instruction_i17_parse(inLexique) ;
    break ;
  case 18 :
      rule_common_5F_syntax_instruction_i18_parse(inLexique) ;
    break ;
  case 19 :
      rule_common_5F_syntax_instruction_i19_parse(inLexique) ;
    break ;
  case 20 :
      rule_common_5F_syntax_instruction_i20_parse(inLexique) ;
    break ;
  case 21 :
      rule_common_5F_syntax_instruction_i21_parse(inLexique) ;
    break ;
  case 22 :
      rule_common_5F_syntax_instruction_i22_parse(inLexique) ;
    break ;
  case 24 :
      rule_common_5F_syntax_instruction_i24_parse(inLexique) ;
    break ;
  case 25 :
      rule_common_5F_syntax_instruction_i25_parse(inLexique) ;
    break ;
  case 26 :
      rule_common_5F_syntax_instruction_i26_parse(inLexique) ;
    break ;
  case 27 :
      rule_common_5F_syntax_instruction_i27_parse(inLexique) ;
    break ;
  case 28 :
      rule_common_5F_syntax_instruction_i28_parse(inLexique) ;
    break ;
  case 29 :
      rule_common_5F_syntax_instruction_i29_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plms_5F_grammar::nt_instruction_ (GALGAS_instructionListAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 14 :
      rule_common_5F_syntax_instruction_i14_(parameter_1, inLexique) ;
    break ;
  case 15 :
      rule_common_5F_syntax_instruction_i15_(parameter_1, inLexique) ;
    break ;
  case 16 :
      rule_common_5F_syntax_instruction_i16_(parameter_1, inLexique) ;
    break ;
  case 17 :
      rule_common_5F_syntax_instruction_i17_(parameter_1, inLexique) ;
    break ;
  case 18 :
      rule_common_5F_syntax_instruction_i18_(parameter_1, inLexique) ;
    break ;
  case 19 :
      rule_common_5F_syntax_instruction_i19_(parameter_1, inLexique) ;
    break ;
  case 20 :
      rule_common_5F_syntax_instruction_i20_(parameter_1, inLexique) ;
    break ;
  case 21 :
      rule_common_5F_syntax_instruction_i21_(parameter_1, inLexique) ;
    break ;
  case 22 :
      rule_common_5F_syntax_instruction_i22_(parameter_1, inLexique) ;
    break ;
  case 24 :
      rule_common_5F_syntax_instruction_i24_(parameter_1, inLexique) ;
    break ;
  case 25 :
      rule_common_5F_syntax_instruction_i25_(parameter_1, inLexique) ;
    break ;
  case 26 :
      rule_common_5F_syntax_instruction_i26_(parameter_1, inLexique) ;
    break ;
  case 27 :
      rule_common_5F_syntax_instruction_i27_(parameter_1, inLexique) ;
    break ;
  case 28 :
      rule_common_5F_syntax_instruction_i28_(parameter_1, inLexique) ;
    break ;
  case 29 :
      rule_common_5F_syntax_instruction_i29_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'if_instruction' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::nt_if_5F_instruction_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 23 :
      rule_common_5F_syntax_if_5F_instruction_i23_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plms_5F_grammar::nt_if_5F_instruction_ (GALGAS_ifInstructionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 23 :
      rule_common_5F_syntax_if_5F_instruction_i23_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'expression' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::nt_expression_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 30 :
      rule_common_5F_syntax_expression_i30_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plms_5F_grammar::nt_expression_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 30 :
      rule_common_5F_syntax_expression_i30_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       'primary' non terminal implementation                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::nt_primary_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 31 :
      rule_common_5F_syntax_primary_i31_parse(inLexique) ;
    break ;
  case 32 :
      rule_common_5F_syntax_primary_i32_parse(inLexique) ;
    break ;
  case 36 :
      rule_common_5F_syntax_primary_i36_parse(inLexique) ;
    break ;
  case 37 :
      rule_common_5F_syntax_primary_i37_parse(inLexique) ;
    break ;
  case 38 :
      rule_common_5F_syntax_primary_i38_parse(inLexique) ;
    break ;
  case 39 :
      rule_common_5F_syntax_primary_i39_parse(inLexique) ;
    break ;
  case 40 :
      rule_common_5F_syntax_primary_i40_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plms_5F_grammar::nt_primary_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 31 :
      rule_common_5F_syntax_primary_i31_(parameter_1, inLexique) ;
    break ;
  case 32 :
      rule_common_5F_syntax_primary_i32_(parameter_1, inLexique) ;
    break ;
  case 36 :
      rule_common_5F_syntax_primary_i36_(parameter_1, inLexique) ;
    break ;
  case 37 :
      rule_common_5F_syntax_primary_i37_(parameter_1, inLexique) ;
    break ;
  case 38 :
      rule_common_5F_syntax_primary_i38_(parameter_1, inLexique) ;
    break ;
  case 39 :
      rule_common_5F_syntax_primary_i39_(parameter_1, inLexique) ;
    break ;
  case 40 :
      rule_common_5F_syntax_primary_i40_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'comparison' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::nt_comparison_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 33 :
      rule_common_5F_syntax_comparison_i33_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plms_5F_grammar::nt_comparison_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 33 :
      rule_common_5F_syntax_comparison_i33_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'multiplicative_expression' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::nt_multiplicative_5F_expression_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 34 :
      rule_common_5F_syntax_multiplicative_5F_expression_i34_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plms_5F_grammar::nt_multiplicative_5F_expression_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 34 :
      rule_common_5F_syntax_multiplicative_5F_expression_i34_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 'additive_expression' non terminal implementation                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plms_5F_grammar::nt_additive_5F_expression_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 35 :
      rule_common_5F_syntax_additive_5F_expression_i35_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plms_5F_grammar::nt_additive_5F_expression_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 35 :
      rule_common_5F_syntax_additive_5F_expression_i35_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_0' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_0 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 46 47 48 49
  return inLexique->nextProductionIndex () - 45 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_1' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_1 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 50 51
  return inLexique->nextProductionIndex () - 49 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_2' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_2 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 52 53
  return inLexique->nextProductionIndex () - 51 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_3' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_3 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 54 55
  return inLexique->nextProductionIndex () - 53 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_4' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_4 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 56 57
  return inLexique->nextProductionIndex () - 55 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_5' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_5 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 58 59
  return inLexique->nextProductionIndex () - 57 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_6' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_6 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 60 61
  return inLexique->nextProductionIndex () - 59 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_7' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_7 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 62 63 64 65 66
  return inLexique->nextProductionIndex () - 61 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_8' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_8 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 67 68
  return inLexique->nextProductionIndex () - 66 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_9' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_9 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 69 70
  return inLexique->nextProductionIndex () - 68 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_10' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_10 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 71 72
  return inLexique->nextProductionIndex () - 70 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_11' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_11 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 73 74
  return inLexique->nextProductionIndex () - 72 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_12' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_12 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 75 76 77 78
  return inLexique->nextProductionIndex () - 74 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_13' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_13 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 79 80
  return inLexique->nextProductionIndex () - 78 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_14' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_14 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 81 82 83
  return inLexique->nextProductionIndex () - 80 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_15' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_15 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 84 85 86
  return inLexique->nextProductionIndex () - 83 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_16' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_16 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 87 88 89 90
  return inLexique->nextProductionIndex () - 86 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_17' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_17 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 91 92 93 94
  return inLexique->nextProductionIndex () - 90 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_18' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_18 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 95 96 97 98
  return inLexique->nextProductionIndex () - 94 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_19' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_19 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 99 100 101 102
  return inLexique->nextProductionIndex () - 98 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_20' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_20 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 103 104
  return inLexique->nextProductionIndex () - 102 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_21' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_21 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 105 106 107 108 109 110 111
  return inLexique->nextProductionIndex () - 104 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_22' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_22 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 112 113 114 115 116 117
  return inLexique->nextProductionIndex () - 111 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_23' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_23 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 118 119 120 121 122 123 124 125
  return inLexique->nextProductionIndex () - 117 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_24' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plms_5F_grammar::select_common_5F_syntax_24 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 126 127
  return inLexique->nextProductionIndex () - 125 ;
}

//---------------------------------------------------------------------------------------------------------------------*

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy::GALGAS_unifiedTypeMap_2D_proxy (void) :
AC_GALGAS_uniqueMapProxy () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_unifiedTypeMap_2D_proxy::constructor_null (LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy result ;
  result.makeNullProxy (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (GALGAS_unifiedTypeMap & ioMap,
                                                             GALGAS_lstring inKey,
                                                             GALGAS_unifiedTypeMap_2D_proxy & outProxy
                                                             COMMA_LOCATION_ARGS) {
  outProxy.internalMakeProxy (ioMap, inKey COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxyFromString (GALGAS_unifiedTypeMap & ioMap,
                                                                       GALGAS_string inKey,
                                                                       GALGAS_unifiedTypeMap_2D_proxy & outProxy
                                                                       COMMA_LOCATION_ARGS) {
  outProxy.internalMakeProxyFromString (ioMap, inKey COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_unifiedTypeMap_2D_proxy::reader_kind (C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  GALGAS_typeKind result ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) getAttributeListPointer (inCompiler, "kind" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_kind;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap GALGAS_unifiedTypeMap_2D_proxy::reader_constructorMap (C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  GALGAS_constructorMap result ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) getAttributeListPointer (inCompiler, "constructorMap" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_constructorMap;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap GALGAS_unifiedTypeMap_2D_proxy::reader_procedureMap (C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_procedureMap result ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) getAttributeListPointer (inCompiler, "procedureMap" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_procedureMap;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_unifiedTypeMap_2D_proxy::reader_copiable (C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  GALGAS_bool result ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) getAttributeListPointer (inCompiler, "copiable" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_copiable;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_unifiedTypeMap_2D_proxy::reader_equatable (C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_bool result ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) getAttributeListPointer (inCompiler, "equatable" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_equatable;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_unifiedTypeMap_2D_proxy::reader_comparable (C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) const {
  GALGAS_bool result ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) getAttributeListPointer (inCompiler, "comparable" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_comparable;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_unifiedTypeMap_2D_proxy::constructor_searchKey (const GALGAS_unifiedTypeMap & inMap,
                                                                                      const GALGAS_lstring & inKey,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy result ;
  result.internalMakeRegularProxyBySearchingKey (inMap, inKey, kSearchErrorMessage_unifiedTypeMap_searchKey, inCompiler COMMA_THERE) ;
  return result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             @unifiedTypeMap-proxy type                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_unifiedTypeMap_2D_proxy ("unifiedTypeMap-proxy",
                                                NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_unifiedTypeMap_2D_proxy::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_unifiedTypeMap_2D_proxy ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_unifiedTypeMap_2D_proxy::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_unifiedTypeMap_2D_proxy (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_unifiedTypeMap_2D_proxy::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy result ;
  const GALGAS_unifiedTypeMap_2D_proxy * p = (const GALGAS_unifiedTypeMap_2D_proxy *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_unifiedTypeMap_2D_proxy *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("unifiedTypeMap-proxy", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_procedureKindAST_structureProc::cEnumAssociatedValues_procedureKindAST_structureProc (const GALGAS_lstring & inAssociatedValue0,
                                                                                                            const GALGAS_bool & inAssociatedValue1
                                                                                                            COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_procedureKindAST_structureProc::description (C_String & ioString,
                                                                        const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_procedureKindAST_structureProc::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_procedureKindAST_structureProc * ptr = dynamic_cast<const cEnumAssociatedValues_procedureKindAST_structureProc *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureKindAST::GALGAS_procedureKindAST (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureKindAST GALGAS_procedureKindAST::constructor_standAloneProc (UNUSED_LOCATION_ARGS) {
  GALGAS_procedureKindAST result ;
  result.mEnum = kEnum_standAloneProc ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureKindAST GALGAS_procedureKindAST::constructor_structureProc (const GALGAS_lstring & inAssociatedValue0,
                                                                            const GALGAS_bool & inAssociatedValue1
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_procedureKindAST result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid ()) {
    result.mEnum = kEnum_structureProc ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_procedureKindAST_structureProc (inAssociatedValue0, inAssociatedValue1 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_procedureKindAST [3] = {
  "(not built)",
  "standAloneProc",
  "structureProc"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procedureKindAST::reader_isStandAloneProc (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_standAloneProc == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procedureKindAST::reader_isStructureProc (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_structureProc == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureKindAST::description (C_String & ioString,
                                           const int32_t inIndentation) const {
  ioString << "<enum @procedureKindAST: " << gEnumNameArrayFor_procedureKindAST [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_procedureKindAST::objectCompare (const GALGAS_procedureKindAST & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @procedureKindAST type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_procedureKindAST ("procedureKindAST",
                                         NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_procedureKindAST::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_procedureKindAST ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_procedureKindAST::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_procedureKindAST (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureKindAST GALGAS_procedureKindAST::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_procedureKindAST result ;
  const GALGAS_procedureKindAST * p = (const GALGAS_procedureKindAST *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_procedureKindAST *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("procedureKindAST", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_receiverType_receiver::cEnumAssociatedValues_receiverType_receiver (const GALGAS_unifiedTypeMap_2D_proxy & inAssociatedValue0,
                                                                                          const GALGAS_string & inAssociatedValue1
                                                                                          COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_receiverType_receiver::description (C_String & ioString,
                                                               const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_receiverType_receiver::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_receiverType_receiver * ptr = dynamic_cast<const cEnumAssociatedValues_receiverType_receiver *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_receiverType_mutatingReceiver::cEnumAssociatedValues_receiverType_mutatingReceiver (const GALGAS_unifiedTypeMap_2D_proxy & inAssociatedValue0,
                                                                                                          const GALGAS_string & inAssociatedValue1
                                                                                                          COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_receiverType_mutatingReceiver::description (C_String & ioString,
                                                                       const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_receiverType_mutatingReceiver::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_receiverType_mutatingReceiver * ptr = dynamic_cast<const cEnumAssociatedValues_receiverType_mutatingReceiver *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_receiverType::GALGAS_receiverType (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_receiverType GALGAS_receiverType::constructor_noReceiver (UNUSED_LOCATION_ARGS) {
  GALGAS_receiverType result ;
  result.mEnum = kEnum_noReceiver ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_receiverType GALGAS_receiverType::constructor_receiver (const GALGAS_unifiedTypeMap_2D_proxy & inAssociatedValue0,
                                                               const GALGAS_string & inAssociatedValue1
                                                               COMMA_LOCATION_ARGS) {
  GALGAS_receiverType result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid ()) {
    result.mEnum = kEnum_receiver ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_receiverType_receiver (inAssociatedValue0, inAssociatedValue1 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_receiverType GALGAS_receiverType::constructor_mutatingReceiver (const GALGAS_unifiedTypeMap_2D_proxy & inAssociatedValue0,
                                                                       const GALGAS_string & inAssociatedValue1
                                                                       COMMA_LOCATION_ARGS) {
  GALGAS_receiverType result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid ()) {
    result.mEnum = kEnum_mutatingReceiver ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_receiverType_mutatingReceiver (inAssociatedValue0, inAssociatedValue1 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_receiverType [4] = {
  "(not built)",
  "noReceiver",
  "receiver",
  "mutatingReceiver"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_receiverType::reader_isNoReceiver (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_noReceiver == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_receiverType::reader_isReceiver (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_receiver == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_receiverType::reader_isMutatingReceiver (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_mutatingReceiver == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_receiverType::description (C_String & ioString,
                                       const int32_t inIndentation) const {
  ioString << "<enum @receiverType: " << gEnumNameArrayFor_receiverType [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_receiverType::objectCompare (const GALGAS_receiverType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 @receiverType type                                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_receiverType ("receiverType",
                                     NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_receiverType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_receiverType ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_receiverType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_receiverType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_receiverType GALGAS_receiverType::extractObject (const GALGAS_object & inObject,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_receiverType result ;
  const GALGAS_receiverType * p = (const GALGAS_receiverType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_receiverType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("receiverType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_typeKind_enumeration::cEnumAssociatedValues_typeKind_enumeration (const GALGAS_enumConstantMap & inAssociatedValue0
                                                                                        COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_typeKind_enumeration::description (C_String & ioString,
                                                              const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_typeKind_enumeration::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_typeKind_enumeration * ptr = dynamic_cast<const cEnumAssociatedValues_typeKind_enumeration *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_typeKind_structure::cEnumAssociatedValues_typeKind_structure (const GALGAS_propertyList & inAssociatedValue0
                                                                                    COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_typeKind_structure::description (C_String & ioString,
                                                            const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_typeKind_structure::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_typeKind_structure * ptr = dynamic_cast<const cEnumAssociatedValues_typeKind_structure *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_typeKind_integer::cEnumAssociatedValues_typeKind_integer (const GALGAS_sint_36__34_ & inAssociatedValue0,
                                                                                const GALGAS_uint_36__34_ & inAssociatedValue1
                                                                                COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_typeKind_integer::description (C_String & ioString,
                                                          const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_typeKind_integer::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_typeKind_integer * ptr = dynamic_cast<const cEnumAssociatedValues_typeKind_integer *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind::GALGAS_typeKind (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_boolean (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_boolean ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_boolset (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_boolset ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_literalString (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_literalString ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_enumeration (const GALGAS_enumConstantMap & inAssociatedValue0
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_enumeration ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_typeKind_enumeration (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_structure (const GALGAS_propertyList & inAssociatedValue0
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_structure ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_typeKind_structure (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_integer (const GALGAS_sint_36__34_ & inAssociatedValue0,
                                                      const GALGAS_uint_36__34_ & inAssociatedValue1
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid ()) {
    result.mEnum = kEnum_integer ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_typeKind_integer (inAssociatedValue0, inAssociatedValue1 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_typeKind [7] = {
  "(not built)",
  "boolean",
  "boolset",
  "literalString",
  "enumeration",
  "structure",
  "integer"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isBoolean (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_boolean == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isBoolset (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_boolset == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isLiteralString (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_literalString == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isEnumeration (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_enumeration == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isStructure (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_structure == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isInteger (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_integer == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeKind::description (C_String & ioString,
                                   const int32_t inIndentation) const {
  ioString << "<enum @typeKind: " << gEnumNameArrayFor_typeKind [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_typeKind::objectCompare (const GALGAS_typeKind & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                   @typeKind type                                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_typeKind ("typeKind",
                                 NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_typeKind::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_typeKind ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_typeKind::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_typeKind (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  const GALGAS_typeKind * p = (const GALGAS_typeKind *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_typeKind *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("typeKind", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_generalizedTypeEnumAST_valueType::cEnumAssociatedValues_generalizedTypeEnumAST_valueType (const GALGAS_lstring & inAssociatedValue0
                                                                                                                COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_generalizedTypeEnumAST_valueType::description (C_String & ioString,
                                                                          const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_generalizedTypeEnumAST_valueType::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_generalizedTypeEnumAST_valueType * ptr = dynamic_cast<const cEnumAssociatedValues_generalizedTypeEnumAST_valueType *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_generalizedTypeEnumAST_procType::cEnumAssociatedValues_generalizedTypeEnumAST_procType (const GALGAS_lstring & inAssociatedValue0,
                                                                                                              const GALGAS_procFormalArgumentList & inAssociatedValue1
                                                                                                              COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_generalizedTypeEnumAST_procType::description (C_String & ioString,
                                                                         const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_generalizedTypeEnumAST_procType::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_generalizedTypeEnumAST_procType * ptr = dynamic_cast<const cEnumAssociatedValues_generalizedTypeEnumAST_procType *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generalizedTypeEnumAST::GALGAS_generalizedTypeEnumAST (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generalizedTypeEnumAST GALGAS_generalizedTypeEnumAST::constructor_valueType (const GALGAS_lstring & inAssociatedValue0
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_generalizedTypeEnumAST result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_valueType ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_generalizedTypeEnumAST_valueType (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generalizedTypeEnumAST GALGAS_generalizedTypeEnumAST::constructor_procType (const GALGAS_lstring & inAssociatedValue0,
                                                                                   const GALGAS_procFormalArgumentList & inAssociatedValue1
                                                                                   COMMA_LOCATION_ARGS) {
  GALGAS_generalizedTypeEnumAST result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid ()) {
    result.mEnum = kEnum_procType ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_generalizedTypeEnumAST_procType (inAssociatedValue0, inAssociatedValue1 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_generalizedTypeEnumAST [3] = {
  "(not built)",
  "valueType",
  "procType"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_generalizedTypeEnumAST::reader_isValueType (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_valueType == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_generalizedTypeEnumAST::reader_isProcType (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_procType == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_generalizedTypeEnumAST::description (C_String & ioString,
                                                 const int32_t inIndentation) const {
  ioString << "<enum @generalizedTypeEnumAST: " << gEnumNameArrayFor_generalizedTypeEnumAST [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_generalizedTypeEnumAST::objectCompare (const GALGAS_generalizedTypeEnumAST & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            @generalizedTypeEnumAST type                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_generalizedTypeEnumAST ("generalizedTypeEnumAST",
                                               NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_generalizedTypeEnumAST::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_generalizedTypeEnumAST ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_generalizedTypeEnumAST::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_generalizedTypeEnumAST (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generalizedTypeEnumAST GALGAS_generalizedTypeEnumAST::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_generalizedTypeEnumAST result ;
  const GALGAS_generalizedTypeEnumAST * p = (const GALGAS_generalizedTypeEnumAST *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_generalizedTypeEnumAST *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("generalizedTypeEnumAST", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               Bool options                                                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               UInt options                                                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              String options                                                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              String List options                                                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

C_StringListCommandLineOption gOption_plm_5F_options_pathList ("plm_options",
                                         "pathList",
                                         0,
                                         "path",
                                         "search pathes for source files") ;

//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'enterNodeInPrecedenceGraph'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_enterNodeInPrecedenceGraph (GALGAS_lstring inArgument_inNodeName,
                                         GALGAS_abstractDeclaration inArgument_inInfo,
                                         GALGAS_generalizedTypeEnumAST inArgument_inType,
                                         GALGAS_semanticTypePrecedenceGraph & ioArgument_ioGraph,
                                         C_Compiler * inCompiler
                                         COMMA_UNUSED_LOCATION_ARGS) {
  {
  ioArgument_ioGraph.modifier_addNode (inArgument_inNodeName, inArgument_inInfo, inCompiler COMMA_SOURCE_FILE ("generalized-type.galgas", 52)) ;
  }
  switch (inArgument_inType.enumValue ()) {
  case GALGAS_generalizedTypeEnumAST::kNotBuilt:
    break ;
  case GALGAS_generalizedTypeEnumAST::kEnum_valueType:
    {
      const cEnumAssociatedValues_generalizedTypeEnumAST_valueType * extractPtr_2598 = (const cEnumAssociatedValues_generalizedTypeEnumAST_valueType *) (inArgument_inType.unsafePointer ()) ;
      const GALGAS_lstring extractedValue_typeName = extractPtr_2598->mAssociatedValue0 ;
      {
      ioArgument_ioGraph.modifier_addEdge (inArgument_inNodeName, extractedValue_typeName COMMA_SOURCE_FILE ("generalized-type.galgas", 55)) ;
      }
    }
    break ;
  case GALGAS_generalizedTypeEnumAST::kEnum_procType:
    {
      const cEnumAssociatedValues_generalizedTypeEnumAST_procType * extractPtr_2769 = (const cEnumAssociatedValues_generalizedTypeEnumAST_procType *) (inArgument_inType.unsafePointer ()) ;
      const GALGAS_procFormalArgumentList extractedValue_procFormalArgumentList = extractPtr_2769->mAssociatedValue1 ;
      cEnumerator_procFormalArgumentList enumerator_2686 (extractedValue_procFormalArgumentList, kEnumeration_up) ;
      while (enumerator_2686.hasCurrentObject ()) {
        {
        ioArgument_ioGraph.modifier_addEdge (inArgument_inNodeName, enumerator_2686.current (HERE).mAttribute_mFormalArgumentTypeName COMMA_SOURCE_FILE ("generalized-type.galgas", 58)) ;
        }
        enumerator_2686.gotoNextObject () ;
      }
    }
    break ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Routine 'enterBooleanOperators'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_enterBooleanOperators (GALGAS_lstring inArgument_inBooleanTypeName,
                                    GALGAS_semanticContext & ioArgument_ioContext,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy var_selfTypeProxy ;
  {
  GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (ioArgument_ioContext.mAttribute_mTypeMap, inArgument_inBooleanTypeName, var_selfTypeProxy COMMA_SOURCE_FILE ("bool-type.galgas", 105)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 107)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 107)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 107)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 107)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("==")  COMMA_SOURCE_FILE ("bool-type.galgas", 109)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 106)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mNonEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 112)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 112)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 112)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 112)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("!=")  COMMA_SOURCE_FILE ("bool-type.galgas", 114)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 111)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictInfOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 117)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 117)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 117)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 117)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("<")  COMMA_SOURCE_FILE ("bool-type.galgas", 119)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 116)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mInfEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 122)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 122)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 122)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 122)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("<=")  COMMA_SOURCE_FILE ("bool-type.galgas", 124)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 121)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictSupOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 127)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 127)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 127)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 127)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string (">")  COMMA_SOURCE_FILE ("bool-type.galgas", 129)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 126)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mSupEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 132)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 132)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 132)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 132)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string (">=")  COMMA_SOURCE_FILE ("bool-type.galgas", 134)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 131)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mAndOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 137)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 137)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 137)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 137)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("&")  COMMA_SOURCE_FILE ("bool-type.galgas", 139)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 136)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mAndShortCircuitOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 142)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 142)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 142)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 142)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("&&")  COMMA_SOURCE_FILE ("bool-type.galgas", 144)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 141)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mOrOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 147)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 147)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 147)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 147)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("|")  COMMA_SOURCE_FILE ("bool-type.galgas", 149)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 146)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mOrShortCircuitOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 152)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 152)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 152)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 152)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("||")  COMMA_SOURCE_FILE ("bool-type.galgas", 154)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 151)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mXorOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 157)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 157)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 157)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 157)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("^")  COMMA_SOURCE_FILE ("bool-type.galgas", 159)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 156)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Filewrapper 'booleanGenerationTemplate'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_booleanGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_booleanGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_booleanGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_booleanGenerationTemplate_0,
  0,
  gWrapperAllDirectories_booleanGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            Filewrapper template 'booleanGenerationTemplate declaration'                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_booleanGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                         const GALGAS_string & in_ENUMERATION_5F_NAME,
                                                                         const GALGAS_string & in_ACTUAL_5F_TYPE_5F_NAME
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("boolean ").add_operation (in_ENUMERATION_5F_NAME, inCompiler COMMA_SOURCE_FILE ("boolean-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("boolean-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "typedef " ;
  result << in_ACTUAL_5F_TYPE_5F_NAME.stringValue () ;
  result << " " ;
  result << function_mangledNameForType (in_ENUMERATION_5F_NAME, inCompiler COMMA_SOURCE_FILE ("boolean-declaration.galgasTemplate", 5)).stringValue () ;
  result << " ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Routine 'enterBoolsetOperators'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_enterBoolsetOperators (const GALGAS_lstring constinArgument_inBoolsetTypeName,
                                    const GALGAS_uint constinArgument_inMask,
                                    GALGAS_semanticContext & ioArgument_ioContext,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy var_selfTypeProxy ;
  {
  GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (ioArgument_ioContext.mAttribute_mTypeMap, constinArgument_inBoolsetTypeName, var_selfTypeProxy COMMA_SOURCE_FILE ("boolset-type.galgas", 128)) ;
  }
  GALGAS_unifiedTypeMap_2D_proxy var_BoolTypeProxy ;
  {
  GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (ioArgument_ioContext.mAttribute_mTypeMap, GALGAS_string ("Bool").reader_nowhere (SOURCE_FILE ("boolset-type.galgas", 129)), var_BoolTypeProxy COMMA_SOURCE_FILE ("boolset-type.galgas", 129)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inBoolsetTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 131)).add_operation (constinArgument_inBoolsetTypeName.reader_string (SOURCE_FILE ("boolset-type.galgas", 131)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 131)), constinArgument_inBoolsetTypeName.mAttribute_location  COMMA_SOURCE_FILE ("boolset-type.galgas", 131)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("==")  COMMA_SOURCE_FILE ("boolset-type.galgas", 133)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 130)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mNonEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inBoolsetTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 136)).add_operation (constinArgument_inBoolsetTypeName.reader_string (SOURCE_FILE ("boolset-type.galgas", 136)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 136)), constinArgument_inBoolsetTypeName.mAttribute_location  COMMA_SOURCE_FILE ("boolset-type.galgas", 136)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("!=")  COMMA_SOURCE_FILE ("boolset-type.galgas", 138)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 135)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictInfOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inBoolsetTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 141)).add_operation (constinArgument_inBoolsetTypeName.reader_string (SOURCE_FILE ("boolset-type.galgas", 141)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 141)), constinArgument_inBoolsetTypeName.mAttribute_location  COMMA_SOURCE_FILE ("boolset-type.galgas", 141)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("<")  COMMA_SOURCE_FILE ("boolset-type.galgas", 143)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 140)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mInfEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inBoolsetTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 146)).add_operation (constinArgument_inBoolsetTypeName.reader_string (SOURCE_FILE ("boolset-type.galgas", 146)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 146)), constinArgument_inBoolsetTypeName.mAttribute_location  COMMA_SOURCE_FILE ("boolset-type.galgas", 146)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("<=")  COMMA_SOURCE_FILE ("boolset-type.galgas", 148)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 145)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictSupOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inBoolsetTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 151)).add_operation (constinArgument_inBoolsetTypeName.reader_string (SOURCE_FILE ("boolset-type.galgas", 151)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 151)), constinArgument_inBoolsetTypeName.mAttribute_location  COMMA_SOURCE_FILE ("boolset-type.galgas", 151)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string (">")  COMMA_SOURCE_FILE ("boolset-type.galgas", 153)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 150)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mSupEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inBoolsetTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 156)).add_operation (constinArgument_inBoolsetTypeName.reader_string (SOURCE_FILE ("boolset-type.galgas", 156)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 156)), constinArgument_inBoolsetTypeName.mAttribute_location  COMMA_SOURCE_FILE ("boolset-type.galgas", 156)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string (">=")  COMMA_SOURCE_FILE ("boolset-type.galgas", 158)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 155)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mAddOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inBoolsetTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 161)).add_operation (constinArgument_inBoolsetTypeName.reader_string (SOURCE_FILE ("boolset-type.galgas", 161)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 161)), constinArgument_inBoolsetTypeName.mAttribute_location  COMMA_SOURCE_FILE ("boolset-type.galgas", 161)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("|")  COMMA_SOURCE_FILE ("boolset-type.galgas", 163)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 160)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mSubOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inBoolsetTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 166)).add_operation (constinArgument_inBoolsetTypeName.reader_string (SOURCE_FILE ("boolset-type.galgas", 166)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 166)), constinArgument_inBoolsetTypeName.mAttribute_location  COMMA_SOURCE_FILE ("boolset-type.galgas", 166)), var_selfTypeProxy, GALGAS_minusOperatorForBoolsetGeneration::constructor_new (constinArgument_inMask  COMMA_SOURCE_FILE ("boolset-type.galgas", 168)), inCompiler COMMA_SOURCE_FILE ("boolset-type.galgas", 165)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Filewrapper 'boolsetGenerationTemplate'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_boolsetGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_boolsetGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_boolsetGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_boolsetGenerationTemplate_0,
  0,
  gWrapperAllDirectories_boolsetGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            Filewrapper template 'boolsetGenerationTemplate declaration'                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_boolsetGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                         const GALGAS_string & in_BOOLSET_5F_NAME,
                                                                         const GALGAS_string & in_ACTUAL_5F_TYPE_5F_NAME
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("boolset ").add_operation (in_BOOLSET_5F_NAME, inCompiler COMMA_SOURCE_FILE ("boolset-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("boolset-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "typedef " ;
  result << in_ACTUAL_5F_TYPE_5F_NAME.stringValue () ;
  result << " " ;
  result << function_mangledNameForType (in_BOOLSET_5F_NAME, inCompiler COMMA_SOURCE_FILE ("boolset-declaration.galgasTemplate", 5)).stringValue () ;
  result << " ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Routine 'enterEnumerationOperators'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_enterEnumerationOperators (GALGAS_lstring inArgument_inEnumerationTypeName,
                                        GALGAS_semanticContext & ioArgument_ioContext,
                                        C_Compiler * inCompiler
                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy var_BoolTypeProxy ;
  {
  GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (ioArgument_ioContext.mAttribute_mTypeMap, GALGAS_string ("Bool").reader_nowhere (SOURCE_FILE ("enumeration-declaration.galgas", 126)), var_BoolTypeProxy COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 126)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inEnumerationTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 128)).add_operation (inArgument_inEnumerationTypeName.reader_string (SOURCE_FILE ("enumeration-declaration.galgas", 128)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 128)), inArgument_inEnumerationTypeName.mAttribute_location  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 128)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("==")  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 130)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 127)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mNonEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inEnumerationTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 133)).add_operation (inArgument_inEnumerationTypeName.reader_string (SOURCE_FILE ("enumeration-declaration.galgas", 133)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 133)), inArgument_inEnumerationTypeName.mAttribute_location  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 133)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("!=")  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 135)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 132)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictInfOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inEnumerationTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 138)).add_operation (inArgument_inEnumerationTypeName.reader_string (SOURCE_FILE ("enumeration-declaration.galgas", 138)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 138)), inArgument_inEnumerationTypeName.mAttribute_location  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 138)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("<")  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 140)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 137)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mInfEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inEnumerationTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 143)).add_operation (inArgument_inEnumerationTypeName.reader_string (SOURCE_FILE ("enumeration-declaration.galgas", 143)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 143)), inArgument_inEnumerationTypeName.mAttribute_location  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 143)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("<=")  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 145)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 142)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictSupOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inEnumerationTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 148)).add_operation (inArgument_inEnumerationTypeName.reader_string (SOURCE_FILE ("enumeration-declaration.galgas", 148)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 148)), inArgument_inEnumerationTypeName.mAttribute_location  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 148)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string (">")  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 150)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 147)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mSupEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inEnumerationTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 153)).add_operation (inArgument_inEnumerationTypeName.reader_string (SOURCE_FILE ("enumeration-declaration.galgas", 153)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 153)), inArgument_inEnumerationTypeName.mAttribute_location  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 153)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string (">=")  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 155)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 152)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     Filewrapper 'enumerationGenerationTemplate'                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_enumerationGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_enumerationGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_enumerationGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_enumerationGenerationTemplate_0,
  0,
  gWrapperAllDirectories_enumerationGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Filewrapper template 'enumerationGenerationTemplate declaration'                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_enumerationGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                             const GALGAS_string & in_ENUMERATION_5F_NAME,
                                                                             const GALGAS_string & in_ACTUAL_5F_TYPE_5F_NAME
                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("enumeration ").add_operation (in_ENUMERATION_5F_NAME, inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("enumeration-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "typedef " ;
  result << in_ACTUAL_5F_TYPE_5F_NAME.stringValue () ;
  result << " " ;
  result << function_mangledNameForType (in_ENUMERATION_5F_NAME, inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgasTemplate", 5)).stringValue () ;
  result << " ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Filewrapper 'structureGenerationTemplate'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_structureGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_structureGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_structureGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_structureGenerationTemplate_0,
  0,
  gWrapperAllDirectories_structureGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                           Filewrapper template 'structureGenerationTemplate declaration'                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_structureGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                           const GALGAS_string & in_STRUCTURE_5F_NAME,
                                                                           const GALGAS_structureFieldListForGeneration & in_FIELD_5F_LIST
                                                                           COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("structure ").add_operation (in_STRUCTURE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("structure-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("structure-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "typedef struct {\n" ;
  GALGAS_uint index_360_ (0) ;
  if (in_FIELD_5F_LIST.isValid ()) {
    cEnumerator_structureFieldListForGeneration enumerator_360 (in_FIELD_5F_LIST, kEnumeration_up) ;
    while (enumerator_360.hasCurrentObject ()) {
      result << "  " ;
      result << function_mangledNameForType (enumerator_360.current_mFieldType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("structure-declaration.galgasTemplate", 8)), inCompiler COMMA_SOURCE_FILE ("structure-declaration.galgasTemplate", 8)).stringValue () ;
      result << " " ;
      result << function_mangledNameForProperty (enumerator_360.current_mFieldName (HERE), inCompiler COMMA_SOURCE_FILE ("structure-declaration.galgasTemplate", 8)).stringValue () ;
      result << " ;\n" ;
      index_360_.increment () ;
      enumerator_360.gotoNextObject () ;
    }
  }
  result << "} " ;
  result << function_mangledNameForType (in_STRUCTURE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("structure-declaration.galgasTemplate", 10)).stringValue () ;
  result << " ;\n"
    "\n" ;
  result << function_mangledNameForType (in_STRUCTURE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("structure-declaration.galgasTemplate", 12)).stringValue () ;
  result << " " ;
  result << function_structureInitRoutinePrefix (inCompiler COMMA_SOURCE_FILE ("structure-declaration.galgasTemplate", 12)).stringValue () ;
  result << in_STRUCTURE_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("structure-declaration.galgasTemplate", 12)).stringValue () ;
  result << " (void) ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Filewrapper template 'structureGenerationTemplate implementation'                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_structureGenerationTemplate_implementation (C_Compiler * inCompiler,
                                                                              const GALGAS_string & in_STRUCTURE_5F_NAME,
                                                                              const GALGAS_structureFieldListForGeneration & in_FIELD_5F_LIST
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("structure ").add_operation (in_STRUCTURE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("structure-implementation.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("structure-implementation.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n" ;
  result << function_mangledNameForType (in_STRUCTURE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("structure-implementation.galgasTemplate", 5)).stringValue () ;
  result << " " ;
  result << function_structureInitRoutinePrefix (inCompiler COMMA_SOURCE_FILE ("structure-implementation.galgasTemplate", 5)).stringValue () ;
  result << in_STRUCTURE_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("structure-implementation.galgasTemplate", 5)).stringValue () ;
  result << " (void) {\n"
    "  " ;
  result << function_mangledNameForType (in_STRUCTURE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("structure-implementation.galgasTemplate", 6)).stringValue () ;
  result << " result ;\n" ;
  GALGAS_uint index_529_ (0) ;
  if (in_FIELD_5F_LIST.isValid ()) {
    cEnumerator_structureFieldListForGeneration enumerator_529 (in_FIELD_5F_LIST, kEnumeration_up) ;
    while (enumerator_529.hasCurrentObject ()) {
      result << "  result." ;
      result << function_mangledNameForProperty (enumerator_529.current_mFieldName (HERE), inCompiler COMMA_SOURCE_FILE ("structure-implementation.galgasTemplate", 9)).stringValue () ;
      result << " = " ;
      result << callCategoryReader_expressionCode ((const cPtr_abstractExpressionGeneration *) enumerator_529.current_mInitExpression (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("structure-implementation.galgasTemplate", 9)).stringValue () ;
      result << " ;\n" ;
      index_529_.increment () ;
      enumerator_529.gotoNextObject () ;
    }
  }
  result << "  return result ;\n"
    "}\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   Filewrapper 'globalVariableGenerationTemplate'                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_globalVariableGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_globalVariableGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_globalVariableGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_globalVariableGenerationTemplate_0,
  0,
  gWrapperAllDirectories_globalVariableGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       Filewrapper template 'globalVariableGenerationTemplate implementation'                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_globalVariableGenerationTemplate_implementation (C_Compiler * inCompiler,
                                                                                   const GALGAS_string & in_GLOBAL_5F_VAR_5F_NAME,
                                                                                   const GALGAS_string & in_GLOBAL_5F_TYPE_5F_NAME,
                                                                                   const GALGAS_bool & in_GENERATE_5F_VOLATILE,
                                                                                   const GALGAS_string & in_INITIAL_5F_VALUE_5F_STRING
                                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("global variable ").add_operation (in_GLOBAL_5F_VAR_5F_NAME, inCompiler COMMA_SOURCE_FILE ("global-var-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("global-var-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n" ;
  const enumGalgasBool test_0 = in_GENERATE_5F_VOLATILE.boolEnum () ;
  if (kBoolTrue == test_0) {
    result << "volatile " ;
  }else if (kBoolFalse == test_0) {
  }
  result << function_mangledNameForType (in_GLOBAL_5F_TYPE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("global-var-declaration.galgasTemplate", 9)).stringValue () ;
  result << " " ;
  result << function_mangledNameForGlobalVariable (in_GLOBAL_5F_VAR_5F_NAME, inCompiler COMMA_SOURCE_FILE ("global-var-declaration.galgasTemplate", 11)).stringValue () ;
  result << " = " ;
  result << in_INITIAL_5F_VALUE_5F_STRING.stringValue () ;
  result << " ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   Filewrapper 'globalConstantGenerationTemplate'                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_globalConstantGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_globalConstantGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_globalConstantGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_globalConstantGenerationTemplate_0,
  0,
  gWrapperAllDirectories_globalConstantGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                         Filewrapper template 'globalConstantGenerationTemplate declaration'                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_globalConstantGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                                const GALGAS_string & in_GLOBAL_5F_CONSTANT_5F_NAME,
                                                                                const GALGAS_string & in_CONSTANT_5F_VALUE
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("global constant ").add_operation (in_GLOBAL_5F_CONSTANT_5F_NAME, inCompiler COMMA_SOURCE_FILE ("global-constant-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("global-constant-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "#define " ;
  result << function_mangledNameForConstant (in_GLOBAL_5F_CONSTANT_5F_NAME, inCompiler COMMA_SOURCE_FILE ("global-constant-declaration.galgasTemplate", 5)).stringValue () ;
  result << " (" ;
  result << in_CONSTANT_5F_VALUE.stringValue () ;
  result << ")\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Routine 'enterIntegerOperators'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_enterIntegerOperators (GALGAS_lstring inArgument_inIntegerTypeName,
                                    GALGAS_semanticContext & ioArgument_ioContext,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  ioArgument_ioContext.mAttribute_mTypeNameSetForIncDec.addAssign_operation (inArgument_inIntegerTypeName.mAttribute_string  COMMA_SOURCE_FILE ("type-integer.galgas", 124)) ;
  GALGAS_unifiedTypeMap_2D_proxy var_selfTypeProxy ;
  {
  GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (ioArgument_ioContext.mAttribute_mTypeMap, inArgument_inIntegerTypeName, var_selfTypeProxy COMMA_SOURCE_FILE ("type-integer.galgas", 126)) ;
  }
  GALGAS_unifiedTypeMap_2D_proxy var_BoolTypeProxy ;
  {
  GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (ioArgument_ioContext.mAttribute_mTypeMap, GALGAS_string ("Bool").reader_nowhere (SOURCE_FILE ("type-integer.galgas", 127)), var_BoolTypeProxy COMMA_SOURCE_FILE ("type-integer.galgas", 127)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 129)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 129)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 129)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 129)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("==")  COMMA_SOURCE_FILE ("type-integer.galgas", 131)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 128)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mNonEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 134)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 134)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 134)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 134)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("!=")  COMMA_SOURCE_FILE ("type-integer.galgas", 136)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 133)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictInfOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 139)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 139)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 139)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 139)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("<")  COMMA_SOURCE_FILE ("type-integer.galgas", 141)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 138)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mInfEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 144)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 144)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 144)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 144)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("<=")  COMMA_SOURCE_FILE ("type-integer.galgas", 146)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 143)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictSupOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 149)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 149)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 149)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 149)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string (">")  COMMA_SOURCE_FILE ("type-integer.galgas", 151)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 148)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mSupEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 154)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 154)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 154)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 154)), var_BoolTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string (">=")  COMMA_SOURCE_FILE ("type-integer.galgas", 156)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 153)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mAndOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 159)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 159)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 159)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 159)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("&")  COMMA_SOURCE_FILE ("type-integer.galgas", 161)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 158)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mOrOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 164)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 164)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 164)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 164)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("^")  COMMA_SOURCE_FILE ("type-integer.galgas", 166)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 163)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mXorOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 169)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 169)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 169)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 169)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("^")  COMMA_SOURCE_FILE ("type-integer.galgas", 171)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 168)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mAddOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 174)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 174)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 174)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 174)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("+")  COMMA_SOURCE_FILE ("type-integer.galgas", 176)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 173)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mSubOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 179)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 179)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 179)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 179)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("-")  COMMA_SOURCE_FILE ("type-integer.galgas", 181)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 178)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mMulOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 184)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 184)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 184)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 184)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("*")  COMMA_SOURCE_FILE ("type-integer.galgas", 186)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 183)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mDivOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 189)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 189)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 189)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 189)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("/")  COMMA_SOURCE_FILE ("type-integer.galgas", 191)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 188)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mModOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 194)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 194)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 194)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 194)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("%")  COMMA_SOURCE_FILE ("type-integer.galgas", 196)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 193)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mLeftShiftOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 199)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 199)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 199)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 199)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("<<")  COMMA_SOURCE_FILE ("type-integer.galgas", 201)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 198)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mRightShiftOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 204)).add_operation (inArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 204)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 204)), inArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 204)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string (">>")  COMMA_SOURCE_FILE ("type-integer.galgas", 206)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 203)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Filewrapper 'integerGenerationTemplate'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_integerGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_integerGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_integerGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_integerGenerationTemplate_0,
  0,
  gWrapperAllDirectories_integerGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            Filewrapper template 'integerGenerationTemplate declaration'                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_integerGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                         const GALGAS_string & in_INTEGER_5F_TYPE_5F_NAME,
                                                                         const GALGAS_string & in_ACTUAL_5F_TYPE_5F_NAME
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("integer ").add_operation (in_INTEGER_5F_TYPE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("integer-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("integer-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "typedef " ;
  result << in_ACTUAL_5F_TYPE_5F_NAME.stringValue () ;
  result << " " ;
  result << function_mangledNameForType (in_INTEGER_5F_TYPE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("integer-declaration.galgasTemplate", 5)).stringValue () ;
  result << " ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'enterStaticStringOperators'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_enterStaticStringOperators (GALGAS_lstring inArgument_inBooleanTypeName,
                                         GALGAS_semanticContext & ioArgument_ioContext,
                                         C_Compiler * inCompiler
                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy var_selfTypeProxy ;
  {
  GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (ioArgument_ioContext.mAttribute_mTypeMap, inArgument_inBooleanTypeName, var_selfTypeProxy COMMA_SOURCE_FILE ("type-static-string.galgas", 63)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 65)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 65)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 65)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 65)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("==")  COMMA_SOURCE_FILE ("type-static-string.galgas", 67)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 64)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mNonEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 70)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 70)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 70)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 70)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("!=")  COMMA_SOURCE_FILE ("type-static-string.galgas", 72)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 69)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictInfOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 75)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 75)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 75)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 75)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("<")  COMMA_SOURCE_FILE ("type-static-string.galgas", 77)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 74)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mInfEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 80)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 80)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 80)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 80)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("<=")  COMMA_SOURCE_FILE ("type-static-string.galgas", 82)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 79)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictSupOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 85)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 85)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 85)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 85)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string (">")  COMMA_SOURCE_FILE ("type-static-string.galgas", 87)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 84)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mSupEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 90)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 90)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 90)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 90)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string (">=")  COMMA_SOURCE_FILE ("type-static-string.galgas", 92)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 89)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mAndOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 95)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 95)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 95)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 95)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("&")  COMMA_SOURCE_FILE ("type-static-string.galgas", 97)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 94)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mAndShortCircuitOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 100)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 100)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 100)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 100)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("&&")  COMMA_SOURCE_FILE ("type-static-string.galgas", 102)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 99)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mOrOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 105)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 105)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 105)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 105)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("|")  COMMA_SOURCE_FILE ("type-static-string.galgas", 107)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 104)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mOrShortCircuitOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 110)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 110)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 110)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 110)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("||")  COMMA_SOURCE_FILE ("type-static-string.galgas", 112)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 109)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mXorOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 115)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 115)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 115)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 115)), var_selfTypeProxy, GALGAS_standardInfixOperatorGeneration::constructor_new (GALGAS_string ("^")  COMMA_SOURCE_FILE ("type-static-string.galgas", 117)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 114)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    Filewrapper 'literalStringGenerationTemplate'                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_literalStringGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_literalStringGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_literalStringGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_literalStringGenerationTemplate_0,
  0,
  gWrapperAllDirectories_literalStringGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                         Filewrapper template 'literalStringGenerationTemplate declaration'                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_literalStringGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                               const GALGAS_string & in_STATIC_5F_STRING_5F_NAME
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("literal string ").add_operation (in_STATIC_5F_STRING_5F_NAME, inCompiler COMMA_SOURCE_FILE ("literal-string-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("literal-string-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "typedef const char * " ;
  result << function_mangledNameForType (in_STATIC_5F_STRING_5F_NAME, inCompiler COMMA_SOURCE_FILE ("literal-string-declaration.galgasTemplate", 5)).stringValue () ;
  result << " ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Filewrapper 'functionGenerationTemplate'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_functionGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_functionGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_functionGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_functionGenerationTemplate_0,
  0,
  gWrapperAllDirectories_functionGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            Filewrapper template 'functionGenerationTemplate declaration'                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_functionGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                          const GALGAS_string & in_FUNCTION_5F_MANGLED_5F_NAME,
                                                                          const GALGAS_funcFormalArgumentListForGeneration & in_FORMAL_5F_ARGUMENT_5F_LIST,
                                                                          const GALGAS_unifiedTypeMap_2D_proxy & in_RESULT_5F_TYPE
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  uint32_t columnMarker = 0 ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("proc ").add_operation (in_FUNCTION_5F_MANGLED_5F_NAME, inCompiler COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n" ;
  result << function_mangledNameForType (in_RESULT_5F_TYPE.reader_key (inCompiler COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 5)), inCompiler COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 5)).stringValue () ;
  result << " " ;
  result << function_mangledNameForFunction (in_FUNCTION_5F_MANGLED_5F_NAME, inCompiler COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 5)).stringValue () ;
  result << " (" ;
  columnMarker = result.currentColumn () ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, in_FORMAL_5F_ARGUMENT_5F_LIST.reader_length (SOURCE_FILE ("function-declaration.galgasTemplate", 6)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << "void" ;
  }else if (kBoolFalse == test_0) {
    GALGAS_uint index_523_ (0) ;
    if (in_FORMAL_5F_ARGUMENT_5F_LIST.isValid ()) {
      cEnumerator_funcFormalArgumentListForGeneration enumerator_523 (in_FORMAL_5F_ARGUMENT_5F_LIST, kEnumeration_up) ;
      while (enumerator_523.hasCurrentObject ()) {
        result << function_mangledNameForType (enumerator_523.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 11)), inCompiler COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 11)).stringValue () ;
        result << " " ;
        result << enumerator_523.current_mFormalArgumentName (HERE).stringValue () ;
        if (enumerator_523.hasNextObject ()) {
          result << ",\n" ;
          result.appendSpacesUntilColumn (columnMarker) ;
        }
        index_523_.increment () ;
        enumerator_523.gotoNextObject () ;
      }
    }
  }
  result << ") ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Filewrapper template 'functionGenerationTemplate implementation'                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_functionGenerationTemplate_implementation (C_Compiler * inCompiler,
                                                                             const GALGAS_string & in_FUNCTION_5F_MANGLED_5F_NAME,
                                                                             const GALGAS_funcFormalArgumentListForGeneration & in_FORMAL_5F_ARGUMENT_5F_LIST,
                                                                             const GALGAS_instructionGenerationList & in_INSTRUCTION_5F_GENERATION_5F_LIST,
                                                                             const GALGAS_unifiedTypeMap_2D_proxy & in_RESULT_5F_TYPE,
                                                                             const GALGAS_string & in_RESULT_5F_VAR_5F_NAME
                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  uint32_t columnMarker = 0 ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("func ").add_operation (in_FUNCTION_5F_MANGLED_5F_NAME, inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n" ;
  result << function_mangledNameForType (in_RESULT_5F_TYPE.reader_key (inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 5)), inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 5)).stringValue () ;
  result << " " ;
  result << function_mangledNameForFunction (in_FUNCTION_5F_MANGLED_5F_NAME, inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 5)).stringValue () ;
  result << " (" ;
  columnMarker = result.currentColumn () ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, in_FORMAL_5F_ARGUMENT_5F_LIST.reader_length (SOURCE_FILE ("function-implementation.galgasTemplate", 6)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << "void" ;
  }else if (kBoolFalse == test_0) {
    GALGAS_uint index_523_ (0) ;
    if (in_FORMAL_5F_ARGUMENT_5F_LIST.isValid ()) {
      cEnumerator_funcFormalArgumentListForGeneration enumerator_523 (in_FORMAL_5F_ARGUMENT_5F_LIST, kEnumeration_up) ;
      while (enumerator_523.hasCurrentObject ()) {
        result << function_mangledNameForType (enumerator_523.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 11)), inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 11)).stringValue () ;
        result << " " ;
        result << enumerator_523.current_mFormalArgumentName (HERE).stringValue () ;
        if (enumerator_523.hasNextObject ()) {
          result << ",\n" ;
          result.appendSpacesUntilColumn (columnMarker) ;
        }
        index_523_.increment () ;
        enumerator_523.gotoNextObject () ;
      }
    }
  }
  result << ") {\n"
    "  " ;
  result << function_mangledNameForType (in_RESULT_5F_TYPE.reader_key (inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 18)), inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 18)).stringValue () ;
  result << " " ;
  result << in_RESULT_5F_VAR_5F_NAME.stringValue () ;
  result << " ;\n" ;
  result << categoryReader_instructionListCode (in_INSTRUCTION_5F_GENERATION_5F_LIST, inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 19)).stringValue () ;
  result << "  return " ;
  result << in_RESULT_5F_VAR_5F_NAME.stringValue () ;
  result << " ;\n"
    "}\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Function 'mangledName'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledName (const GALGAS_procedureKindAST & constinArgument_inProcedureKind,
                                    const GALGAS_string & constinArgument_inProcedureName,
                                    GALGAS_procFormalArgumentList inArgument_inProcFormalArgumentList,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outMangledName ; // Returned variable
  result_outMangledName = GALGAS_string::makeEmptyString () ;
  switch (constinArgument_inProcedureKind.enumValue ()) {
  case GALGAS_procedureKindAST::kNotBuilt:
    break ;
  case GALGAS_procedureKindAST::kEnum_standAloneProc:
    {
    }
    break ;
  case GALGAS_procedureKindAST::kEnum_structureProc:
    {
      const cEnumAssociatedValues_procedureKindAST_structureProc * extractPtr_6329 = (const cEnumAssociatedValues_procedureKindAST_structureProc *) (constinArgument_inProcedureKind.unsafePointer ()) ;
      const GALGAS_lstring extractedValue_structureTypeName = extractPtr_6329->mAssociatedValue0 ;
      result_outMangledName.dotAssign_operation (extractedValue_structureTypeName.mAttribute_string.add_operation (GALGAS_string ("_"), inCompiler COMMA_SOURCE_FILE ("proc-declaration.galgas", 175))  COMMA_SOURCE_FILE ("proc-declaration.galgas", 175)) ;
    }
    break ;
  }
  result_outMangledName.dotAssign_operation (constinArgument_inProcedureName  COMMA_SOURCE_FILE ("proc-declaration.galgas", 177)) ;
  cEnumerator_procFormalArgumentList enumerator_6435 (inArgument_inProcFormalArgumentList, kEnumeration_up) ;
  while (enumerator_6435.hasCurrentObject ()) {
    result_outMangledName.dotAssign_operation (GALGAS_string (" ")  COMMA_SOURCE_FILE ("proc-declaration.galgas", 179)) ;
    switch (enumerator_6435.current_mFormalArgumentPassingMode (HERE).enumValue ()) {
    case GALGAS_procFormalArgumentPassingMode::kNotBuilt:
      break ;
    case GALGAS_procFormalArgumentPassingMode::kEnum_input:
      {
        result_outMangledName.dotAssign_operation (GALGAS_string ("\?")  COMMA_SOURCE_FILE ("proc-declaration.galgas", 181)) ;
      }
      break ;
    case GALGAS_procFormalArgumentPassingMode::kEnum_output:
      {
        result_outMangledName.dotAssign_operation (GALGAS_string ("!")  COMMA_SOURCE_FILE ("proc-declaration.galgas", 182)) ;
      }
      break ;
    case GALGAS_procFormalArgumentPassingMode::kEnum_inputOutput:
      {
        result_outMangledName.dotAssign_operation (GALGAS_string ("\?!")  COMMA_SOURCE_FILE ("proc-declaration.galgas", 183)) ;
      }
      break ;
    }
    result_outMangledName.dotAssign_operation (enumerator_6435.current_mSelector (HERE).mAttribute_string  COMMA_SOURCE_FILE ("proc-declaration.galgas", 185)) ;
    enumerator_6435.gotoNextObject () ;
  }
//---
  return result_outMangledName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledName [4] = {
  & kTypeDescriptor_GALGAS_procedureKindAST,
  & kTypeDescriptor_GALGAS_string,
  & kTypeDescriptor_GALGAS_procFormalArgumentList,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledName (C_Compiler * inCompiler,
                                                            const cObjectArray & inEffectiveParameterArray,
                                                            const GALGAS_location & /* §§ inErrorLocation */
                                                            COMMA_LOCATION_ARGS) {
  const GALGAS_procedureKindAST operand0 = GALGAS_procedureKindAST::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                   inCompiler
                                                                                   COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  const GALGAS_procFormalArgumentList operand2 = GALGAS_procFormalArgumentList::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                                                               inCompiler
                                                                                               COMMA_THERE) ;
  return function_mangledName (operand0,
                               operand1,
                               operand2,
                               inCompiler
                               COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledName ("mangledName",
                                                             functionWithGenericHeader_mangledName,
                                                             & kTypeDescriptor_GALGAS_string,
                                                             3,
                                                             functionArgs_mangledName) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Filewrapper 'procedureGenerationTemplate'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_procedureGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_procedureGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_procedureGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_procedureGenerationTemplate_0,
  0,
  gWrapperAllDirectories_procedureGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                           Filewrapper template 'procedureGenerationTemplate declaration'                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_procedureGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                           const GALGAS_string & in_PROCEDURE_5F_MANGLED_5F_NAME,
                                                                           const GALGAS_procFormalArgumentListForGeneration & in_FORMAL_5F_ARGUMENT_5F_LIST
                                                                           COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  uint32_t columnMarker = 0 ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("proc ").add_operation (in_PROCEDURE_5F_MANGLED_5F_NAME, inCompiler COMMA_SOURCE_FILE ("procedure-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("procedure-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "void " ;
  result << in_PROCEDURE_5F_MANGLED_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("procedure-declaration.galgasTemplate", 5)).stringValue () ;
  result << " (" ;
  columnMarker = result.currentColumn () ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, in_FORMAL_5F_ARGUMENT_5F_LIST.reader_length (SOURCE_FILE ("procedure-declaration.galgasTemplate", 6)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << "void" ;
  }else if (kBoolFalse == test_0) {
    GALGAS_uint index_478_ (0) ;
    if (in_FORMAL_5F_ARGUMENT_5F_LIST.isValid ()) {
      cEnumerator_procFormalArgumentListForGeneration enumerator_478 (in_FORMAL_5F_ARGUMENT_5F_LIST, kEnumeration_up) ;
      while (enumerator_478.hasCurrentObject ()) {
        result << function_mangledNameForType (enumerator_478.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("procedure-declaration.galgasTemplate", 11)), inCompiler COMMA_SOURCE_FILE ("procedure-declaration.galgasTemplate", 11)).stringValue () ;
        switch (enumerator_478.current_mFormalArgumentKind (HERE).enumValue ()) {
        case GALGAS_procFormalArgumentPassingMode::kNotBuilt :
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_input :
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_output :
        case GALGAS_procFormalArgumentPassingMode::kEnum_inputOutput :
          {
            result << " *" ;
          }
          break ;
        }
        result << " " ;
        result << enumerator_478.current_mFormalArgumentName (HERE).stringValue () ;
        if (enumerator_478.hasNextObject ()) {
          result << ",\n" ;
          result.appendSpacesUntilColumn (columnMarker) ;
        }
        index_478_.increment () ;
        enumerator_478.gotoNextObject () ;
      }
    }
  }
  result << ") ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Filewrapper template 'procedureGenerationTemplate implementation'                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_procedureGenerationTemplate_implementation (C_Compiler * inCompiler,
                                                                              const GALGAS_string & in_PROCEDURE_5F_MANGLED_5F_NAME,
                                                                              const GALGAS_procFormalArgumentListForGeneration & in_FORMAL_5F_ARGUMENT_5F_LIST,
                                                                              const GALGAS_instructionGenerationList & in_INSTRUCTION_5F_GENERATION_5F_LIST
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  uint32_t columnMarker = 0 ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("proc ").add_operation (in_PROCEDURE_5F_MANGLED_5F_NAME, inCompiler COMMA_SOURCE_FILE ("procedure-implementation.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("procedure-implementation.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "void " ;
  result << in_PROCEDURE_5F_MANGLED_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("procedure-implementation.galgasTemplate", 5)).stringValue () ;
  result << " (" ;
  columnMarker = result.currentColumn () ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, in_FORMAL_5F_ARGUMENT_5F_LIST.reader_length (SOURCE_FILE ("procedure-implementation.galgasTemplate", 6)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << "void" ;
  }else if (kBoolFalse == test_0) {
    GALGAS_uint index_478_ (0) ;
    if (in_FORMAL_5F_ARGUMENT_5F_LIST.isValid ()) {
      cEnumerator_procFormalArgumentListForGeneration enumerator_478 (in_FORMAL_5F_ARGUMENT_5F_LIST, kEnumeration_up) ;
      while (enumerator_478.hasCurrentObject ()) {
        result << function_mangledNameForType (enumerator_478.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("procedure-implementation.galgasTemplate", 11)), inCompiler COMMA_SOURCE_FILE ("procedure-implementation.galgasTemplate", 11)).stringValue () ;
        switch (enumerator_478.current_mFormalArgumentKind (HERE).enumValue ()) {
        case GALGAS_procFormalArgumentPassingMode::kNotBuilt :
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_input :
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_output :
        case GALGAS_procFormalArgumentPassingMode::kEnum_inputOutput :
          {
            result << " *" ;
          }
          break ;
        }
        result << " " ;
        result << enumerator_478.current_mFormalArgumentName (HERE).stringValue () ;
        if (enumerator_478.hasNextObject ()) {
          result << ",\n" ;
          result.appendSpacesUntilColumn (columnMarker) ;
        }
        index_478_.increment () ;
        enumerator_478.gotoNextObject () ;
      }
    }
  }
  result << ") {\n" ;
  result << categoryReader_instructionListCode (in_INSTRUCTION_5F_GENERATION_5F_LIST, inCompiler COMMA_SOURCE_FILE ("procedure-implementation.galgasTemplate", 22)).stringValue () ;
  result << "}\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Filewrapper 'registerGenerationTemplate'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_registerGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_registerGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_registerGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_registerGenerationTemplate_0,
  0,
  gWrapperAllDirectories_registerGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            Filewrapper template 'registerGenerationTemplate declaration'                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_registerGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                          const GALGAS_string & in_REGISTER_5F_TYPE_5F_NAME,
                                                                          const GALGAS_string & in_REGISTER_5F_NAME,
                                                                          const GALGAS_uint_36__34_ & in_REGISTER_5F_ADDRESS
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("register ").add_operation (in_REGISTER_5F_NAME, inCompiler COMMA_SOURCE_FILE ("register-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("register-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "#define " ;
  result << function_mangledNameForRegister (in_REGISTER_5F_NAME, inCompiler COMMA_SOURCE_FILE ("register-declaration.galgasTemplate", 5)).stringValue () ;
  result << " (* ((volatile " ;
  result << function_mangledNameForType (in_REGISTER_5F_TYPE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("register-declaration.galgasTemplate", 5)).stringValue () ;
  result << " *) " ;
  result << in_REGISTER_5F_ADDRESS.reader_hexString (SOURCE_FILE ("register-declaration.galgasTemplate", 5)).stringValue () ;
  result << "))\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Function 'initialVariableMap'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap function_initialVariableMap (const GALGAS_semanticContext & constinArgument_inContext,
                                                GALGAS_bool inArgument_inGlobalsAreConstant,
                                                C_Compiler * inCompiler
                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_variableMap result_outVariableMap ; // Returned variable
  GALGAS_stringset var_allModeSet = constinArgument_inContext.mAttribute_mModeMap.reader_keySet (SOURCE_FILE ("variable-map.galgas", 13)) ;
  result_outVariableMap = GALGAS_variableMap::constructor_emptyMap (SOURCE_FILE ("variable-map.galgas", 15)) ;
  GALGAS_procFormalArgumentListForGeneration var_formalArguments = GALGAS_procFormalArgumentListForGeneration::constructor_emptyList (SOURCE_FILE ("variable-map.galgas", 16)) ;
  cEnumerator_registerMap enumerator_964 (constinArgument_inContext.mAttribute_mRegisterMap, kEnumeration_up) ;
  while (enumerator_964.hasCurrentObject ()) {
    GALGAS_bool test_0 = enumerator_964.current_mIsReadOnly (HERE) ;
    if (kBoolTrue != test_0.boolEnum ()) {
      test_0 = inArgument_inGlobalsAreConstant ;
    }
    const enumGalgasBool test_1 = test_0.boolEnum () ;
    if (kBoolTrue == test_1) {
      {
      result_outVariableMap.modifier_insertUsedLocalConstant (enumerator_964.current_lkey (HERE), enumerator_964.current_mType (HERE), var_allModeSet, function_mangledNameForRegister (enumerator_964.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 23)), GALGAS_bool (true), inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 19)) ;
      }
    }else if (kBoolFalse == test_1) {
      {
      result_outVariableMap.modifier_insertDefinedLocalVariable (enumerator_964.current_lkey (HERE), enumerator_964.current_mType (HERE), var_allModeSet, function_mangledNameForRegister (enumerator_964.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 31)), GALGAS_bool (true), inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 27)) ;
      }
    }
    enumerator_964.gotoNextObject () ;
  }
  cEnumerator_globalConstantMap enumerator_1496 (constinArgument_inContext.mAttribute_mGlobalConstantMap, kEnumeration_up) ;
  while (enumerator_1496.hasCurrentObject ()) {
    {
    result_outVariableMap.modifier_insertUsedLocalConstant (enumerator_1496.current_lkey (HERE), enumerator_1496.current_mConstantType (HERE), var_allModeSet, function_mangledNameForConstant (enumerator_1496.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 42)), GALGAS_bool (true), inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 38)) ;
    }
    enumerator_1496.gotoNextObject () ;
  }
  cEnumerator_globalVariableMap enumerator_1787 (constinArgument_inContext.mAttribute_mGlobalVariableMap, kEnumeration_up) ;
  while (enumerator_1787.hasCurrentObject ()) {
    const enumGalgasBool test_2 = inArgument_inGlobalsAreConstant.boolEnum () ;
    if (kBoolTrue == test_2) {
      {
      result_outVariableMap.modifier_insertUsedLocalConstant (enumerator_1787.current_lkey (HERE), enumerator_1787.current_mVariableType (HERE), enumerator_1787.current_mExecutionModeSet (HERE), function_mangledNameForGlobalVariable (enumerator_1787.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 53)), GALGAS_bool (true), inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 49)) ;
      }
    }else if (kBoolFalse == test_2) {
      {
      result_outVariableMap.modifier_insertGlobalVariable (enumerator_1787.current_lkey (HERE), enumerator_1787.current_mVariableType (HERE), enumerator_1787.current_mExecutionModeSet (HERE), function_mangledNameForGlobalVariable (enumerator_1787.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 61)), GALGAS_bool (true), inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 57)) ;
      }
    }
    enumerator_1787.gotoNextObject () ;
  }
//---
  return result_outVariableMap ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_initialVariableMap [3] = {
  & kTypeDescriptor_GALGAS_semanticContext,
  & kTypeDescriptor_GALGAS_bool,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_initialVariableMap (C_Compiler * inCompiler,
                                                                   const cObjectArray & inEffectiveParameterArray,
                                                                   const GALGAS_location & /* §§ inErrorLocation */
                                                                   COMMA_LOCATION_ARGS) {
  const GALGAS_semanticContext operand0 = GALGAS_semanticContext::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                 inCompiler
                                                                                 COMMA_THERE) ;
  const GALGAS_bool operand1 = GALGAS_bool::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                           inCompiler
                                                           COMMA_THERE) ;
  return function_initialVariableMap (operand0,
                                      operand1,
                                      inCompiler
                                      COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_initialVariableMap ("initialVariableMap",
                                                                    functionWithGenericHeader_initialVariableMap,
                                                                    & kTypeDescriptor_GALGAS_variableMap,
                                                                    2,
                                                                    functionArgs_initialVariableMap) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'buildOrderedDeclarationList'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_buildOrderedDeclarationList (GALGAS_declarationListAST inArgument_inDeclarationListAST,
                                          const GALGAS_procedureDeclarationListAST constinArgument_inProcedureListAST,
                                          GALGAS_location inArgument_inEndOfSourceFile,
                                          GALGAS_declarationListAST & outArgument_outDeclarationListAST,
                                          C_Compiler * inCompiler
                                          COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outDeclarationListAST.drop () ; // Release 'out' argument
  GALGAS_semanticTypePrecedenceGraph var_precedenceGraph = GALGAS_semanticTypePrecedenceGraph::constructor_emptyGraph (SOURCE_FILE ("ordered-declaration-list.galgas", 28)) ;
  cEnumerator_declarationListAST enumerator_1704 (inArgument_inDeclarationListAST, kEnumeration_up) ;
  while (enumerator_1704.hasCurrentObject ()) {
    callCategoryMethod_enterInPrecedenceGraph ((const cPtr_abstractDeclaration *) enumerator_1704.current_mDeclaration (HERE).ptr (), var_precedenceGraph, inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 30)) ;
    enumerator_1704.gotoNextObject () ;
  }
  cEnumerator_procedureDeclarationListAST enumerator_1813 (constinArgument_inProcedureListAST, kEnumeration_up) ;
  while (enumerator_1813.hasCurrentObject ()) {
    categoryMethod_enterInPrecedenceGraph (enumerator_1813.current (HERE), var_precedenceGraph, inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 33)) ;
    enumerator_1813.gotoNextObject () ;
  }
  outArgument_outDeclarationListAST = GALGAS_declarationListAST::constructor_emptyList (SOURCE_FILE ("ordered-declaration-list.galgas", 36)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, var_precedenceGraph.reader_undefinedNodeCount (SOURCE_FILE ("ordered-declaration-list.galgas", 37)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    cEnumerator_lstringlist enumerator_2026 (var_precedenceGraph.reader_undefinedNodeReferenceList (SOURCE_FILE ("ordered-declaration-list.galgas", 38)), kEnumeration_up) ;
    while (enumerator_2026.hasCurrentObject ()) {
      GALGAS_location location_1 (enumerator_2026.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, GALGAS_string ("the '").add_operation (enumerator_2026.current_mValue (HERE).reader_string (SOURCE_FILE ("ordered-declaration-list.galgas", 39)), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 39)).add_operation (GALGAS_string ("' type is not defined"), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 39))  COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 39)) ;
      enumerator_2026.gotoNextObject () ;
    }
  }else if (kBoolFalse == test_0) {
    GALGAS_declarationListAST var_unsortedSemanticDeclarationListAST ;
    GALGAS_lstringlist joker_2182 ; // Joker input parameter
    GALGAS_lstringlist joker_2257 ; // Joker input parameter
    var_precedenceGraph.method_topologicalSort (outArgument_outDeclarationListAST, joker_2182, var_unsortedSemanticDeclarationListAST, joker_2257, inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 42)) ;
    const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, var_unsortedSemanticDeclarationListAST.reader_length (SOURCE_FILE ("ordered-declaration-list.galgas", 48)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_string var_s = GALGAS_string ("semantic analysis not performed, ").add_operation (var_unsortedSemanticDeclarationListAST.reader_length (SOURCE_FILE ("ordered-declaration-list.galgas", 50)).reader_string (SOURCE_FILE ("ordered-declaration-list.galgas", 49)), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 49)).add_operation (GALGAS_string (" declarations are involved in circular definition:"), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 50)) ;
      cEnumerator_declarationListAST enumerator_2551 (var_unsortedSemanticDeclarationListAST, kEnumeration_up) ;
      while (enumerator_2551.hasCurrentObject ()) {
        var_s.dotAssign_operation (GALGAS_string ("\n"
          "-  ").add_operation (callCategoryReader_keyRepresentation ((const cPtr_abstractDeclaration *) enumerator_2551.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 53)), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 53))  COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 53)) ;
        enumerator_2551.gotoNextObject () ;
      }
      inCompiler->emitSemanticError (inArgument_inEndOfSourceFile, var_s  COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 55)) ;
      cEnumerator_declarationListAST enumerator_2706 (var_unsortedSemanticDeclarationListAST, kEnumeration_up) ;
      while (enumerator_2706.hasCurrentObject ()) {
        inCompiler->emitSemanticError (callCategoryReader_location ((const cPtr_abstractDeclaration *) enumerator_2706.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 57)), GALGAS_string ("the ").add_operation (callCategoryReader_keyRepresentation ((const cPtr_abstractDeclaration *) enumerator_2706.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 57)), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 57)).add_operation (GALGAS_string (" type is declared here"), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 57))  COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 57)) ;
        enumerator_2706.gotoNextObject () ;
      }
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Routine 'buildSemanticContext'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_buildSemanticContext (const GALGAS_declarationListAST constinArgument_inDeclarationListAST,
                                   const GALGAS_procedureDeclarationListAST constinArgument_inProcedureListAST,
                                   const GALGAS_functionDeclarationListAST constinArgument_inFunctionListAST,
                                   const GALGAS_requiredProcedureDeclarationListAST constinArgument_inRequiredProcedureDeclarationListAST,
                                   GALGAS_globalLiteralStringMap & ioArgument_ioGlobalLiteralStringMap,
                                   GALGAS_semanticContext & outArgument_outSemanticContext,
                                   C_Compiler * inCompiler
                                   COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outSemanticContext.drop () ; // Release 'out' argument
  outArgument_outSemanticContext = GALGAS_semanticContext::constructor_default (SOURCE_FILE ("semantic-context.galgas", 174)) ;
  cEnumerator_declarationListAST enumerator_7222 (constinArgument_inDeclarationListAST, kEnumeration_up) ;
  while (enumerator_7222.hasCurrentObject ()) {
    callCategoryMethod_enterInContext ((const cPtr_abstractDeclaration *) enumerator_7222.current_mDeclaration (HERE).ptr (), constinArgument_inProcedureListAST, outArgument_outSemanticContext, ioArgument_ioGlobalLiteralStringMap, inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 176)) ;
    enumerator_7222.gotoNextObject () ;
  }
  cEnumerator_procedureDeclarationListAST enumerator_7448 (constinArgument_inProcedureListAST, kEnumeration_up) ;
  while (enumerator_7448.hasCurrentObject ()) {
    categoryMethod_enterInContext (enumerator_7448.current (HERE), outArgument_outSemanticContext, inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 184)) ;
    enumerator_7448.gotoNextObject () ;
  }
  cEnumerator_functionDeclarationListAST enumerator_7559 (constinArgument_inFunctionListAST, kEnumeration_up) ;
  while (enumerator_7559.hasCurrentObject ()) {
    categoryMethod_enterInContext (enumerator_7559.current (HERE), outArgument_outSemanticContext, inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 188)) ;
    enumerator_7559.gotoNextObject () ;
  }
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("semantic-context.galgas", 191)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    cEnumerator_requiredProcedureDeclarationListAST enumerator_7753 (constinArgument_inRequiredProcedureDeclarationListAST, kEnumeration_up) ;
    while (enumerator_7753.hasCurrentObject ()) {
      const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, enumerator_7753.current (HERE).mAttribute_mRequiredMode.mAttribute_string.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_1) {
        outArgument_outSemanticContext.mAttribute_mModeMap.method_searchKey (enumerator_7753.current (HERE).mAttribute_mRequiredMode, inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 194)) ;
      }
      enumerator_7753.gotoNextObject () ;
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Function 'solveInferredType'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy function_solveInferredType (const GALGAS_unifiedTypeMap_2D_proxy & constinArgument_inTargetType,
                                                           const GALGAS_unifiedTypeMap_2D_proxy & constinArgument_inSourceType,
                                                           const GALGAS_location & constinArgument_inErrorLocation,
                                                           C_Compiler * inCompiler
                                                           COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy result_outType ; // Returned variable
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, constinArgument_inSourceType.objectCompare (GALGAS_unifiedTypeMap_2D_proxy::constructor_null (SOURCE_FILE ("semantic-context.galgas", 208)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, constinArgument_inTargetType.objectCompare (GALGAS_unifiedTypeMap_2D_proxy::constructor_null (SOURCE_FILE ("semantic-context.galgas", 209)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      inCompiler->emitSemanticError (constinArgument_inErrorLocation, GALGAS_string ("Cannot infer type")  COMMA_SOURCE_FILE ("semantic-context.galgas", 210)) ;
      result_outType.drop () ; // Release error dropped variable
    }else if (kBoolFalse == test_1) {
      result_outType = constinArgument_inTargetType ;
    }
  }else if (kBoolFalse == test_0) {
    result_outType = constinArgument_inSourceType ;
  }
//---
  return result_outType ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_solveInferredType [4] = {
  & kTypeDescriptor_GALGAS_unifiedTypeMap_2D_proxy,
  & kTypeDescriptor_GALGAS_unifiedTypeMap_2D_proxy,
  & kTypeDescriptor_GALGAS_location,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_solveInferredType (C_Compiler * inCompiler,
                                                                  const cObjectArray & inEffectiveParameterArray,
                                                                  const GALGAS_location & /* §§ inErrorLocation */
                                                                  COMMA_LOCATION_ARGS) {
  const GALGAS_unifiedTypeMap_2D_proxy operand0 = GALGAS_unifiedTypeMap_2D_proxy::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                                 inCompiler
                                                                                                 COMMA_THERE) ;
  const GALGAS_unifiedTypeMap_2D_proxy operand1 = GALGAS_unifiedTypeMap_2D_proxy::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                                                 inCompiler
                                                                                                 COMMA_THERE) ;
  const GALGAS_location operand2 = GALGAS_location::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                                   inCompiler
                                                                   COMMA_THERE) ;
  return function_solveInferredType (operand0,
                                     operand1,
                                     operand2,
                                     inCompiler
                                     COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_solveInferredType ("solveInferredType",
                                                                   functionWithGenericHeader_solveInferredType,
                                                                   & kTypeDescriptor_GALGAS_unifiedTypeMap_2D_proxy,
                                                                   3,
                                                                   functionArgs_solveInferredType) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             Routine 'semanticAnalysis'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_semanticAnalysis (const GALGAS_declarationListAST constinArgument_inDeclarationListAST,
                               const GALGAS_procedureDeclarationListAST constinArgument_inProcedureListAST,
                               const GALGAS_functionDeclarationListAST constinArgument_inFunctionListAST,
                               const GALGAS_semanticContext constinArgument_inSemanticContext,
                               const GALGAS_requiredProcedureDeclarationListAST constinArgument_inRequiredProcedureDeclarationListAST,
                               const GALGAS_location constinArgument_inEndOfSourceFile,
                               GALGAS_globalLiteralStringMap & ioArgument_ioGlobalLiteralStringMap,
                               GALGAS_orderedGenerationList & outArgument_outGenerationList,
                               C_Compiler * inCompiler
                               COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outGenerationList.drop () ; // Release 'out' argument
  outArgument_outGenerationList = GALGAS_orderedGenerationList::constructor_emptyList (SOURCE_FILE ("semantic-analysis.galgas", 24)) ;
  cEnumerator_declarationListAST enumerator_1599 (constinArgument_inDeclarationListAST, kEnumeration_up) ;
  while (enumerator_1599.hasCurrentObject ()) {
    callCategoryMethod_semanticAnalysis ((const cPtr_abstractDeclaration *) enumerator_1599.current_mDeclaration (HERE).ptr (), constinArgument_inSemanticContext, outArgument_outGenerationList, ioArgument_ioGlobalLiteralStringMap, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 26)) ;
    enumerator_1599.gotoNextObject () ;
  }
  cEnumerator_procedureDeclarationListAST enumerator_1809 (constinArgument_inProcedureListAST, kEnumeration_up) ;
  while (enumerator_1809.hasCurrentObject ()) {
    categoryMethod_semanticAnalysis (enumerator_1809.current (HERE), constinArgument_inSemanticContext, outArgument_outGenerationList, ioArgument_ioGlobalLiteralStringMap, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 33)) ;
    enumerator_1809.gotoNextObject () ;
  }
  cEnumerator_functionDeclarationListAST enumerator_2011 (constinArgument_inFunctionListAST, kEnumeration_up) ;
  while (enumerator_2011.hasCurrentObject ()) {
    categoryMethod_semanticAnalysis (enumerator_2011.current (HERE), constinArgument_inSemanticContext, outArgument_outGenerationList, ioArgument_ioGlobalLiteralStringMap, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 40)) ;
    enumerator_2011.gotoNextObject () ;
  }
  cEnumerator_requiredProcedureDeclarationListAST enumerator_2278 (constinArgument_inRequiredProcedureDeclarationListAST, kEnumeration_up) ;
  while (enumerator_2278.hasCurrentObject ()) {
    GALGAS_string var_requiredProcMangledName = function_mangledName (GALGAS_procedureKindAST::constructor_standAloneProc (SOURCE_FILE ("semantic-analysis.galgas", 49)), enumerator_2278.current (HERE).mAttribute_mRequiredProcedureName.mAttribute_string, enumerator_2278.current (HERE).mAttribute_mProcFormalArgumentList, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 48)) ;
    const enumGalgasBool test_0 = constinArgument_inSemanticContext.mAttribute_mProcedureMap.reader_hasKey (var_requiredProcMangledName COMMA_SOURCE_FILE ("semantic-analysis.galgas", 53)).operator_not (SOURCE_FILE ("semantic-analysis.galgas", 53)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_string temp_1 ;
      const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, enumerator_2278.current (HERE).mAttribute_mRequiredMode.mAttribute_string.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_2) {
        temp_1 = GALGAS_string ("$").add_operation (enumerator_2278.current (HERE).mAttribute_mRequiredMode.reader_string (SOURCE_FILE ("semantic-analysis.galgas", 55)), inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 55)).add_operation (GALGAS_string (" "), inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 55)) ;
      }else if (kBoolFalse == test_2) {
        temp_1 = GALGAS_string::makeEmptyString () ;
      }
      GALGAS_string var_s = GALGAS_string ("the '").add_operation (enumerator_2278.current (HERE).mAttribute_mRequiredProcedureName.reader_string (SOURCE_FILE ("semantic-analysis.galgas", 54)), inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 54)).add_operation (GALGAS_string ("' should be defined as: proc "), inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 54)).add_operation (temp_1, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 54)).add_operation (enumerator_2278.current (HERE).mAttribute_mRequiredProcedureName.reader_string (SOURCE_FILE ("semantic-analysis.galgas", 55)), inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 55)) ;
      cEnumerator_procFormalArgumentList enumerator_2887 (enumerator_2278.current (HERE).mAttribute_mProcFormalArgumentList, kEnumeration_up) ;
      while (enumerator_2887.hasCurrentObject ()) {
        var_s.dotAssign_operation (GALGAS_string (" ")  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 58)) ;
        switch (enumerator_2887.current (HERE).mAttribute_mFormalArgumentPassingMode.enumValue ()) {
        case GALGAS_procFormalArgumentPassingMode::kNotBuilt:
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_input:
          {
            var_s.dotAssign_operation (GALGAS_string ("\?")  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 60)) ;
          }
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_output:
          {
            var_s.dotAssign_operation (GALGAS_string ("!")  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 61)) ;
          }
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_inputOutput:
          {
            var_s.dotAssign_operation (GALGAS_string ("\?!")  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 62)) ;
          }
          break ;
        }
        const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, enumerator_2887.current (HERE).mAttribute_mSelector.mAttribute_string.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
        if (kBoolTrue == test_3) {
          var_s.dotAssign_operation (enumerator_2887.current (HERE).mAttribute_mSelector.mAttribute_string.add_operation (GALGAS_string (":"), inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 65))  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 65)) ;
        }
        var_s.dotAssign_operation (enumerator_2887.current (HERE).mAttribute_mFormalArgumentTypeName.mAttribute_string  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 67)) ;
        enumerator_2887.gotoNextObject () ;
      }
      inCompiler->emitSemanticError (constinArgument_inEndOfSourceFile, var_s  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 69)) ;
    }else if (kBoolFalse == test_0) {
      GALGAS_lstring var_procMode ;
      GALGAS_bool joker_3347 ; // Joker input parameter
      GALGAS_procedureSignature joker_3364 ; // Joker input parameter
      constinArgument_inSemanticContext.mAttribute_mProcedureMap.method_searchKey (var_requiredProcMangledName.reader_nowhere (SOURCE_FILE ("semantic-analysis.galgas", 71)), joker_3347, var_procMode, joker_3364, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 71)) ;
      const enumGalgasBool test_4 = GALGAS_bool (kIsNotEqual, var_procMode.mAttribute_string.objectCompare (enumerator_2278.current (HERE).mAttribute_mRequiredMode.mAttribute_string)).boolEnum () ;
      if (kBoolTrue == test_4) {
        const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, enumerator_2278.current (HERE).mAttribute_mRequiredMode.mAttribute_string.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
        if (kBoolTrue == test_5) {
          GALGAS_location location_6 (var_procMode.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_6, GALGAS_string ("the procedure mode should be empty")  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 74)) ;
        }else if (kBoolFalse == test_5) {
          GALGAS_location location_7 (var_procMode.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_7, GALGAS_string ("the procedure mode should be $").add_operation (enumerator_2278.current (HERE).mAttribute_mRequiredMode.reader_string (SOURCE_FILE ("semantic-analysis.galgas", 76)), inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 76))  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 76)) ;
        }
      }
    }
    enumerator_2278.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'mangledNameForProperty'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForProperty (GALGAS_string inArgument_inName,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outPrefix ; // Returned variable
  result_outPrefix = GALGAS_string ("property_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 6)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 6)) ;
//---
  return result_outPrefix ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForProperty [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForProperty (C_Compiler * inCompiler,
                                                                       const cObjectArray & inEffectiveParameterArray,
                                                                       const GALGAS_location & /* §§ inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForProperty (operand0,
                                          inCompiler
                                          COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForProperty ("mangledNameForProperty",
                                                                        functionWithGenericHeader_mangledNameForProperty,
                                                                        & kTypeDescriptor_GALGAS_string,
                                                                        1,
                                                                        functionArgs_mangledNameForProperty) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Function 'mangledNameForInArgument'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForInArgument (GALGAS_string inArgument_inName,
                                                 C_Compiler * inCompiler
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outPrefix ; // Returned variable
  result_outPrefix = GALGAS_string ("in_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 12)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 12)) ;
//---
  return result_outPrefix ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForInArgument [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForInArgument (C_Compiler * inCompiler,
                                                                         const cObjectArray & inEffectiveParameterArray,
                                                                         const GALGAS_location & /* §§ inErrorLocation */
                                                                         COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForInArgument (operand0,
                                            inCompiler
                                            COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForInArgument ("mangledNameForInArgument",
                                                                          functionWithGenericHeader_mangledNameForInArgument,
                                                                          & kTypeDescriptor_GALGAS_string,
                                                                          1,
                                                                          functionArgs_mangledNameForInArgument) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Function 'mangledNameForInOutArgument'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForInOutArgument (GALGAS_string inArgument_inName,
                                                    C_Compiler * inCompiler
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outPrefix ; // Returned variable
  result_outPrefix = GALGAS_string ("inout_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 18)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 18)) ;
//---
  return result_outPrefix ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForInOutArgument [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForInOutArgument (C_Compiler * inCompiler,
                                                                            const cObjectArray & inEffectiveParameterArray,
                                                                            const GALGAS_location & /* §§ inErrorLocation */
                                                                            COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForInOutArgument (operand0,
                                               inCompiler
                                               COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForInOutArgument ("mangledNameForInOutArgument",
                                                                             functionWithGenericHeader_mangledNameForInOutArgument,
                                                                             & kTypeDescriptor_GALGAS_string,
                                                                             1,
                                                                             functionArgs_mangledNameForInOutArgument) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Function 'mangledNameForOutArgument'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForOutArgument (GALGAS_string inArgument_inName,
                                                  C_Compiler * inCompiler
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outPrefix ; // Returned variable
  result_outPrefix = GALGAS_string ("out_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 24)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 24)) ;
//---
  return result_outPrefix ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForOutArgument [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForOutArgument (C_Compiler * inCompiler,
                                                                          const cObjectArray & inEffectiveParameterArray,
                                                                          const GALGAS_location & /* §§ inErrorLocation */
                                                                          COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForOutArgument (operand0,
                                             inCompiler
                                             COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForOutArgument ("mangledNameForOutArgument",
                                                                           functionWithGenericHeader_mangledNameForOutArgument,
                                                                           & kTypeDescriptor_GALGAS_string,
                                                                           1,
                                                                           functionArgs_mangledNameForOutArgument) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Once function 'receiverName'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_receiverName (C_Compiler * /* inCompiler */
                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("receiver") ;
//---
  return result_outName ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_receiverName = false ;
static GALGAS_string gOnceFunctionResult_receiverName ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_receiverName (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_receiverName) {
    gOnceFunctionResult_receiverName = onceFunction_receiverName (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_receiverName = true ;
  }
  return gOnceFunctionResult_receiverName ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_receiverName (void) {
  gOnceFunctionResult_receiverName.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_receiverName (NULL,
                                                          releaseOnceFunctionResult_receiverName) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_receiverName [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_receiverName (C_Compiler * inCompiler,
                                                             const cObjectArray & /* inEffectiveParameterArray */,
                                                             const GALGAS_location & /* inErrorLocation */
                                                             COMMA_LOCATION_ARGS) {
  return function_receiverName (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_receiverName ("receiverName",
                                                              functionWithGenericHeader_receiverName,
                                                              & kTypeDescriptor_GALGAS_string,
                                                              0,
                                                              functionArgs_receiverName) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Once function 'receiverPtrName'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_receiverPtrName (C_Compiler * /* inCompiler */
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("receiverPtr") ;
//---
  return result_outName ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_receiverPtrName = false ;
static GALGAS_string gOnceFunctionResult_receiverPtrName ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_receiverPtrName (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_receiverPtrName) {
    gOnceFunctionResult_receiverPtrName = onceFunction_receiverPtrName (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_receiverPtrName = true ;
  }
  return gOnceFunctionResult_receiverPtrName ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_receiverPtrName (void) {
  gOnceFunctionResult_receiverPtrName.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_receiverPtrName (NULL,
                                                             releaseOnceFunctionResult_receiverPtrName) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_receiverPtrName [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_receiverPtrName (C_Compiler * inCompiler,
                                                                const cObjectArray & /* inEffectiveParameterArray */,
                                                                const GALGAS_location & /* inErrorLocation */
                                                                COMMA_LOCATION_ARGS) {
  return function_receiverPtrName (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_receiverPtrName ("receiverPtrName",
                                                                 functionWithGenericHeader_receiverPtrName,
                                                                 & kTypeDescriptor_GALGAS_string,
                                                                 0,
                                                                 functionArgs_receiverPtrName) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Function 'mangledNameForType'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForType (GALGAS_string inArgument_inName,
                                           C_Compiler * inCompiler
                                           COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outPrefix ; // Returned variable
  result_outPrefix = GALGAS_string ("type_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 42)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 42)) ;
//---
  return result_outPrefix ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForType [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForType (C_Compiler * inCompiler,
                                                                   const cObjectArray & inEffectiveParameterArray,
                                                                   const GALGAS_location & /* §§ inErrorLocation */
                                                                   COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForType (operand0,
                                      inCompiler
                                      COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForType ("mangledNameForType",
                                                                    functionWithGenericHeader_mangledNameForType,
                                                                    & kTypeDescriptor_GALGAS_string,
                                                                    1,
                                                                    functionArgs_mangledNameForType) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     Once function 'structureInitRoutinePrefix'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_structureInitRoutinePrefix (C_Compiler * /* inCompiler */
                                                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("init_") ;
//---
  return result_outName ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_structureInitRoutinePrefix = false ;
static GALGAS_string gOnceFunctionResult_structureInitRoutinePrefix ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_structureInitRoutinePrefix (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_structureInitRoutinePrefix) {
    gOnceFunctionResult_structureInitRoutinePrefix = onceFunction_structureInitRoutinePrefix (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_structureInitRoutinePrefix = true ;
  }
  return gOnceFunctionResult_structureInitRoutinePrefix ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_structureInitRoutinePrefix (void) {
  gOnceFunctionResult_structureInitRoutinePrefix.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_structureInitRoutinePrefix (NULL,
                                                                        releaseOnceFunctionResult_structureInitRoutinePrefix) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_structureInitRoutinePrefix [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_structureInitRoutinePrefix (C_Compiler * inCompiler,
                                                                           const cObjectArray & /* inEffectiveParameterArray */,
                                                                           const GALGAS_location & /* inErrorLocation */
                                                                           COMMA_LOCATION_ARGS) {
  return function_structureInitRoutinePrefix (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_structureInitRoutinePrefix ("structureInitRoutinePrefix",
                                                                            functionWithGenericHeader_structureInitRoutinePrefix,
                                                                            & kTypeDescriptor_GALGAS_string,
                                                                            0,
                                                                            functionArgs_structureInitRoutinePrefix) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Once function 'literalStringPrefix'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_literalStringPrefix (C_Compiler * /* inCompiler */
                                                       COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("str_") ;
//---
  return result_outName ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_literalStringPrefix = false ;
static GALGAS_string gOnceFunctionResult_literalStringPrefix ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_literalStringPrefix (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_literalStringPrefix) {
    gOnceFunctionResult_literalStringPrefix = onceFunction_literalStringPrefix (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_literalStringPrefix = true ;
  }
  return gOnceFunctionResult_literalStringPrefix ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_literalStringPrefix (void) {
  gOnceFunctionResult_literalStringPrefix.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_literalStringPrefix (NULL,
                                                                 releaseOnceFunctionResult_literalStringPrefix) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_literalStringPrefix [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_literalStringPrefix (C_Compiler * inCompiler,
                                                                    const cObjectArray & /* inEffectiveParameterArray */,
                                                                    const GALGAS_location & /* inErrorLocation */
                                                                    COMMA_LOCATION_ARGS) {
  return function_literalStringPrefix (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_literalStringPrefix ("literalStringPrefix",
                                                                     functionWithGenericHeader_literalStringPrefix,
                                                                     & kTypeDescriptor_GALGAS_string,
                                                                     0,
                                                                     functionArgs_literalStringPrefix) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Once function 'staticStringTypeName'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_staticStringTypeName (C_Compiler * /* inCompiler */
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("StaticString") ;
//---
  return result_outName ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_staticStringTypeName = false ;
static GALGAS_string gOnceFunctionResult_staticStringTypeName ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_staticStringTypeName (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_staticStringTypeName) {
    gOnceFunctionResult_staticStringTypeName = onceFunction_staticStringTypeName (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_staticStringTypeName = true ;
  }
  return gOnceFunctionResult_staticStringTypeName ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_staticStringTypeName (void) {
  gOnceFunctionResult_staticStringTypeName.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_staticStringTypeName (NULL,
                                                                  releaseOnceFunctionResult_staticStringTypeName) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_staticStringTypeName [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_staticStringTypeName (C_Compiler * inCompiler,
                                                                     const cObjectArray & /* inEffectiveParameterArray */,
                                                                     const GALGAS_location & /* inErrorLocation */
                                                                     COMMA_LOCATION_ARGS) {
  return function_staticStringTypeName (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_staticStringTypeName ("staticStringTypeName",
                                                                      functionWithGenericHeader_staticStringTypeName,
                                                                      & kTypeDescriptor_GALGAS_string,
                                                                      0,
                                                                      functionArgs_staticStringTypeName) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'mangledNameForFunction'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForFunction (GALGAS_string inArgument_inName,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("func_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 66)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 66)) ;
//---
  return result_outName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForFunction [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForFunction (C_Compiler * inCompiler,
                                                                       const cObjectArray & inEffectiveParameterArray,
                                                                       const GALGAS_location & /* §§ inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForFunction (operand0,
                                          inCompiler
                                          COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForFunction ("mangledNameForFunction",
                                                                        functionWithGenericHeader_mangledNameForFunction,
                                                                        & kTypeDescriptor_GALGAS_string,
                                                                        1,
                                                                        functionArgs_mangledNameForFunction) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'mangledNameForVariable'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForVariable (GALGAS_string inArgument_inName,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("var_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 72)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 72)) ;
//---
  return result_outName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForVariable [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForVariable (C_Compiler * inCompiler,
                                                                       const cObjectArray & inEffectiveParameterArray,
                                                                       const GALGAS_location & /* §§ inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForVariable (operand0,
                                          inCompiler
                                          COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForVariable ("mangledNameForVariable",
                                                                        functionWithGenericHeader_mangledNameForVariable,
                                                                        & kTypeDescriptor_GALGAS_string,
                                                                        1,
                                                                        functionArgs_mangledNameForVariable) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Function 'mangledNameForGlobalVariable'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForGlobalVariable (GALGAS_string inArgument_inName,
                                                     C_Compiler * inCompiler
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("gvar_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 78)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 78)) ;
//---
  return result_outName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForGlobalVariable [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForGlobalVariable (C_Compiler * inCompiler,
                                                                             const cObjectArray & inEffectiveParameterArray,
                                                                             const GALGAS_location & /* §§ inErrorLocation */
                                                                             COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForGlobalVariable (operand0,
                                                inCompiler
                                                COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForGlobalVariable ("mangledNameForGlobalVariable",
                                                                              functionWithGenericHeader_mangledNameForGlobalVariable,
                                                                              & kTypeDescriptor_GALGAS_string,
                                                                              1,
                                                                              functionArgs_mangledNameForGlobalVariable) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'mangledNameForConstant'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForConstant (GALGAS_string inArgument_inName,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("const_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 84)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 84)) ;
//---
  return result_outName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForConstant [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForConstant (C_Compiler * inCompiler,
                                                                       const cObjectArray & inEffectiveParameterArray,
                                                                       const GALGAS_location & /* §§ inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForConstant (operand0,
                                          inCompiler
                                          COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForConstant ("mangledNameForConstant",
                                                                        functionWithGenericHeader_mangledNameForConstant,
                                                                        & kTypeDescriptor_GALGAS_string,
                                                                        1,
                                                                        functionArgs_mangledNameForConstant) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'mangledNameForRegister'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForRegister (GALGAS_string inArgument_inName,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("register_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 90)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 90)) ;
//---
  return result_outName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForRegister [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForRegister (C_Compiler * inCompiler,
                                                                       const cObjectArray & inEffectiveParameterArray,
                                                                       const GALGAS_location & /* §§ inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForRegister (operand0,
                                          inCompiler
                                          COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForRegister ("mangledNameForRegister",
                                                                        functionWithGenericHeader_mangledNameForRegister,
                                                                        & kTypeDescriptor_GALGAS_string,
                                                                        1,
                                                                        functionArgs_mangledNameForRegister) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Routine 'codeGeneration'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_codeGeneration (const GALGAS_string constinArgument_inSourceFileName,
                             const GALGAS_globalLiteralStringMap constinArgument_inGlobalLiteralStringMap,
                             const GALGAS_orderedGenerationList constinArgument_inGenerationList,
                             const GALGAS_lstring constinArgument_inTargetName,
                             C_Compiler * inCompiler
                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_targetDirectory = constinArgument_inSourceFileName.reader_stringByDeletingPathExtension (SOURCE_FILE ("code-generation.galgas", 81)).add_operation (GALGAS_string ("+"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 81)).add_operation (constinArgument_inTargetName.reader_string (SOURCE_FILE ("code-generation.galgas", 81)), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 81)) ;
  GALGAS_string var_sourceDirectory = var_targetDirectory.add_operation (GALGAS_string ("/sources"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 82)) ;
  var_sourceDirectory.method_makeDirectory (inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 83)) ;
  GALGAS_string var_baseName = var_sourceDirectory.add_operation (GALGAS_string ("/plm"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 85)) ;
  GALGAS_string var_header = GALGAS_string ("#ifndef PLM_HEADER_DEFINED\n") ;
  var_header.dotAssign_operation (GALGAS_string ("#define PLM_HEADER_DEFINED\n"
    "\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 87)) ;
  var_header.dotAssign_operation (GALGAS_string ("//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 88)) ;
  var_header.dotAssign_operation (GALGAS_string ("#include <stdint.h>\n"
    "\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 89)) ;
  cEnumerator_orderedGenerationList enumerator_4502 (constinArgument_inGenerationList, kEnumeration_up) ;
  while (enumerator_4502.hasCurrentObject ()) {
    var_header.dotAssign_operation (callCategoryReader_headerCodeGeneration ((const cPtr_abstractGeneration *) enumerator_4502.current_mGeneration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 91))  COMMA_SOURCE_FILE ("code-generation.galgas", 91)) ;
    enumerator_4502.gotoNextObject () ;
  }
  var_header.dotAssign_operation (GALGAS_string ("//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 93)) ;
  var_header.dotAssign_operation (GALGAS_string ("#endif\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 94)) ;
  GALGAS_bool joker_4783 ; // Joker input parameter
  var_header.method_writeToFileWhenDifferentContents (var_baseName.add_operation (GALGAS_string (".h"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 95)), joker_4783, inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 95)) ;
  GALGAS_string var_code = GALGAS_string ("#include \"plm.h\"\n"
    "\n") ;
  var_code.dotAssign_operation (GALGAS_string ("//---------------------------------------------------------------------------------------------------------------------*\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 98)) ;
  var_code.dotAssign_operation (GALGAS_string ("//   Static Strings                                                                                                    *\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 99)) ;
  var_code.dotAssign_operation (GALGAS_string ("//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 100)) ;
  cEnumerator_globalLiteralStringMap enumerator_5289 (constinArgument_inGlobalLiteralStringMap, kEnumeration_up) ;
  while (enumerator_5289.hasCurrentObject ()) {
    var_code.dotAssign_operation (GALGAS_string ("static const char * ").add_operation (enumerator_5289.current_mLiteralStringCname (HERE), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 102)).add_operation (GALGAS_string (" = "), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 102)).add_operation (enumerator_5289.current_lkey (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE ("code-generation.galgas", 102)), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 102)).add_operation (GALGAS_string (" ;\n"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 102))  COMMA_SOURCE_FILE ("code-generation.galgas", 102)) ;
    enumerator_5289.gotoNextObject () ;
  }
  var_code.dotAssign_operation (GALGAS_string ("\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 104)) ;
  cEnumerator_orderedGenerationList enumerator_5461 (constinArgument_inGenerationList, kEnumeration_up) ;
  while (enumerator_5461.hasCurrentObject ()) {
    var_code.dotAssign_operation (callCategoryReader_implementationCodeGeneration ((const cPtr_abstractGeneration *) enumerator_5461.current_mGeneration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 106))  COMMA_SOURCE_FILE ("code-generation.galgas", 106)) ;
    enumerator_5461.gotoNextObject () ;
  }
  var_code.dotAssign_operation (GALGAS_string ("//---------------------------------------------------------------------------------------------------------------------*\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 108)) ;
  GALGAS_bool joker_5719 ; // Joker input parameter
  var_code.method_writeToFileWhenDifferentContents (var_baseName.add_operation (GALGAS_string (".c"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 109)), joker_5719, inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 109)) ;
  {
  routine_generateTargets (var_targetDirectory, constinArgument_inTargetName, inCompiler  COMMA_SOURCE_FILE ("code-generation.galgas", 111)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Filewrapper 'targetTemplates'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- File 'microcontrollers/mk20dx256.plm'

const char * gWrapperFileContent_0_targetTemplates = "// Teensyduino Core Library\n"
  "// http://www.pjrc.com/teensy/\n"
  "// Copyright (c) 2013 PJRC.COM, LLC.\n"
  "//\n"
  "// Permission is hereby granted, free of charge, to any person obtaining\n"
  "// a copy of this software and associated documentation files (the\n"
  "// \"Software\"), to deal in the Software without restriction, including\n"
  "// without limitation the rights to use, copy, modify, merge, publish,\n"
  "// distribute, sublicense, and/or sell copies of the Software, and to\n"
  "// permit persons to whom the Software is furnished to do so, subject to\n"
  "// the following conditions:\n"
  "//\n"
  "// 1. The above copyright notice and this permission notice shall be \n"
  "// included in all copies or substantial portions of the Software.\n"
  "//\n"
  "// 2. If the Software is incorporated into a build system thallows \n"
  "// selection among a list of target devices, then similar target\n"
  "// devices manufactured by PJRC.COM must be included in the list of\n"
  "// target devices and selectable in the same manner.\n"
  "//\n"
  "// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
  "// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
  "// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
  "// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n"
  "// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n"
  "// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n"
  "// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n"
  "// SOFTWARE.\n"
  "\n"
  "let f_cpu : UInt32 = 96_000_000\n"
  "\n"
  "let f_bus : UInt32 = 48_000_000\n"
  "let f_mem  : UInt32= 24_000_000\n"
  "\n"
  "// chapter 11: Port control and interrupts (PORT)\n"
  "register PORTA_PCR0 : UInt32 at 0x40049000 // Pin Control Register n\n"
  "let PORT_PCR_ISF  : UInt32  = 0x01000000  // Interrupt Status Flag\n"
  "//register UInt32 PORT_PCR_IRQC(n)   (((n) & 15) << 16) // Interrupt Configuration\n"
  "let PORT_PCR_IRQC_MASK  : UInt32 = 0x000F0000\n"
  "let PORT_PCR_LK   : UInt32 = 0x00008000  // Lock Register\n"
  "//register UInt32 PORT_PCR_MUX(n)    (((n) & 7) << 8) // Pin Mux Control\n"
  "let PORT_PCR_MUX_MASK : UInt32 = 0x00000700\n"
  "let PORT_PCR_DSE      : UInt32 = 0x00000040  // Drive Strength Enable\n"
  "let PORT_PCR_ODE      : UInt32 = 0x00000020  // Open Drain Enable\n"
  "let PORT_PCR_PFE      : UInt32 = 0x00000010  // Passive Filter Enable\n"
  "let PORT_PCR_SRE      : UInt32 = 0x00000004  // Slew Rate Enable\n"
  "let PORT_PCR_PE       : UInt32 = 0x00000002  // Pull Enable\n"
  "let PORT_PCR_PS       : UInt32 = 0x00000001  // Pull Select\n"
  "\n"
  "register PORTA_PCR1   : UInt32 at 0x40049004 // Pin Control Register n\n"
  "register PORTA_PCR2   : UInt32 at 0x40049008 // Pin Control Register n\n"
  "register PORTA_PCR3   : UInt32 at 0x4004900C // Pin Control Register n\n"
  "register PORTA_PCR4   : UInt32 at 0x40049010 // Pin Control Register n\n"
  "register PORTA_PCR5   : UInt32 at 0x40049014 // Pin Control Register n\n"
  "register PORTA_PCR6   : UInt32 at 0x40049018 // Pin Control Register n\n"
  "register PORTA_PCR7   : UInt32 at 0x4004901C // Pin Control Register n\n"
  "register PORTA_PCR8   : UInt32 at 0x40049020 // Pin Control Register n\n"
  "register PORTA_PCR9   : UInt32 at 0x40049024 // Pin Control Register n\n"
  "register PORTA_PCR10  : UInt32 at 0x40049028 // Pin Control Register n\n"
  "register PORTA_PCR11  : UInt32 at 0x4004902C // Pin Control Register n\n"
  "register PORTA_PCR12  : UInt32 at 0x40049030 // Pin Control Register n\n"
  "register PORTA_PCR13  : UInt32 at 0x40049034 // Pin Control Register n\n"
  "register PORTA_PCR14  : UInt32 at 0x40049038 // Pin Control Register n\n"
  "register PORTA_PCR15  : UInt32 at 0x4004903C // Pin Control Register n\n"
  "register PORTA_PCR16  : UInt32 at 0x40049040 // Pin Control Register n\n"
  "register PORTA_PCR17  : UInt32 at 0x40049044 // Pin Control Register n\n"
  "register PORTA_PCR18  : UInt32 at 0x40049048 // Pin Control Register n\n"
  "register PORTA_PCR19  : UInt32 at 0x4004904C // Pin Control Register n\n"
  "register PORTA_PCR20  : UInt32 at 0x40049050 // Pin Control Register n\n"
  "register PORTA_PCR21  : UInt32 at 0x40049054 // Pin Control Register n\n"
  "register PORTA_PCR22  : UInt32 at 0x40049058 // Pin Control Register n\n"
  "register PORTA_PCR23  : UInt32 at 0x4004905C // Pin Control Register n\n"
  "register PORTA_PCR24  : UInt32 at 0x40049060 // Pin Control Register n\n"
  "register PORTA_PCR25  : UInt32 at 0x40049064 // Pin Control Register n\n"
  "register PORTA_PCR26  : UInt32 at 0x40049068 // Pin Control Register n\n"
  "register PORTA_PCR27  : UInt32 at 0x4004906C // Pin Control Register n\n"
  "register PORTA_PCR28  : UInt32 at 0x40049070 // Pin Control Register n\n"
  "register PORTA_PCR29  : UInt32 at 0x40049074 // Pin Control Register n\n"
  "register PORTA_PCR30  : UInt32 at 0x40049078 // Pin Control Register n\n"
  "register PORTA_PCR31  : UInt32 at 0x4004907C // Pin Control Register n\n"
  "register PORTA_GPCLR  : UInt32 at 0x40049080 // Global Pin Control Low Register\n"
  "register PORTA_GPCHR  : UInt32 at 0x40049084 // Global Pin Control High Register\n"
  "register PORTA_ISFR   : UInt32 at 0x400490A0 // Interrupt Status Flag Register\n"
  "register PORTB_PCR0   : UInt32 at 0x4004A000 // Pin Control Register n\n"
  "register PORTB_PCR1   : UInt32 at 0x4004A004 // Pin Control Register n\n"
  "register PORTB_PCR2   : UInt32 at 0x4004A008 // Pin Control Register n\n"
  "register PORTB_PCR3   : UInt32 at 0x4004A00C // Pin Control Register n\n"
  "register PORTB_PCR4   : UInt32 at 0x4004A010 // Pin Control Register n\n"
  "register PORTB_PCR5   : UInt32 at 0x4004A014 // Pin Control Register n\n"
  "register PORTB_PCR6   : UInt32 at 0x4004A018 // Pin Control Register n\n"
  "register PORTB_PCR7   : UInt32 at 0x4004A01C // Pin Control Register n\n"
  "register PORTB_PCR8   : UInt32 at 0x4004A020 // Pin Control Register n\n"
  "register PORTB_PCR9   : UInt32 at 0x4004A024 // Pin Control Register n\n"
  "register PORTB_PCR10  : UInt32 at 0x4004A028 // Pin Control Register n\n"
  "register PORTB_PCR11  : UInt32 at 0x4004A02C // Pin Control Register n\n"
  "register PORTB_PCR12  : UInt32 at 0x4004A030 // Pin Control Register n\n"
  "register PORTB_PCR13  : UInt32 at 0x4004A034 // Pin Control Register n\n"
  "register PORTB_PCR14  : UInt32 at 0x4004A038 // Pin Control Register n\n"
  "register PORTB_PCR15  : UInt32 at 0x4004A03C // Pin Control Register n\n"
  "register PORTB_PCR16  : UInt32 at 0x4004A040 // Pin Control Register n\n"
  "register PORTB_PCR17  : UInt32 at 0x4004A044 // Pin Control Register n\n"
  "register PORTB_PCR18  : UInt32 at 0x4004A048 // Pin Control Register n\n"
  "register PORTB_PCR19  : UInt32 at 0x4004A04C // Pin Control Register n\n"
  "register PORTB_PCR20  : UInt32 at 0x4004A050 // Pin Control Register n\n"
  "register PORTB_PCR21  : UInt32 at 0x4004A054 // Pin Control Register n\n"
  "register PORTB_PCR22  : UInt32 at 0x4004A058 // Pin Control Register n\n"
  "register PORTB_PCR23  : UInt32 at 0x4004A05C // Pin Control Register n\n"
  "register PORTB_PCR24  : UInt32 at 0x4004A060 // Pin Control Register n\n"
  "register PORTB_PCR25  : UInt32 at 0x4004A064 // Pin Control Register n\n"
  "register PORTB_PCR26  : UInt32 at 0x4004A068 // Pin Control Register n\n"
  "register PORTB_PCR27  : UInt32 at 0x4004A06C // Pin Control Register n\n"
  "register PORTB_PCR28  : UInt32 at 0x4004A070 // Pin Control Register n\n"
  "register PORTB_PCR29  : UInt32 at 0x4004A074 // Pin Control Register n\n"
  "register PORTB_PCR30  : UInt32 at 0x4004A078 // Pin Control Register n\n"
  "register PORTB_PCR31  : UInt32 at 0x4004A07C // Pin Control Register n\n"
  "register PORTB_GPCLR  : UInt32 at 0x4004A080 // Global Pin Control Low Register\n"
  "register PORTB_GPCHR  : UInt32 at 0x4004A084 // Global Pin Control High Register\n"
  "register PORTB_ISFR   : UInt32 at 0x4004A0A0 // Interrupt Status Flag Register\n"
  "register PORTC_PCR0   : UInt32 at 0x4004B000 // Pin Control Register n\n"
  "register PORTC_PCR1   : UInt32 at 0x4004B004 // Pin Control Register n\n"
  "register PORTC_PCR2   : UInt32 at 0x4004B008 // Pin Control Register n\n"
  "register PORTC_PCR3   : UInt32 at 0x4004B00C // Pin Control Register n\n"
  "register PORTC_PCR4   : UInt32 at 0x4004B010 // Pin Control Register n\n"
  "register PORTC_PCR5   : UInt32 at 0x4004B014 // Pin Control Register n\n"
  "register PORTC_PCR6   : UInt32 at 0x4004B018 // Pin Control Register n\n"
  "register PORTC_PCR7   : UInt32 at 0x4004B01C // Pin Control Register n\n"
  "register PORTC_PCR8   : UInt32 at 0x4004B020 // Pin Control Register n\n"
  "register PORTC_PCR9   : UInt32 at 0x4004B024 // Pin Control Register n\n"
  "register PORTC_PCR10  : UInt32 at 0x4004B028 // Pin Control Register n\n"
  "register PORTC_PCR11  : UInt32 at 0x4004B02C // Pin Control Register n\n"
  "register PORTC_PCR12  : UInt32 at 0x4004B030 // Pin Control Register n\n"
  "register PORTC_PCR13  : UInt32 at 0x4004B034 // Pin Control Register n\n"
  "register PORTC_PCR14  : UInt32 at 0x4004B038 // Pin Control Register n\n"
  "register PORTC_PCR15  : UInt32 at 0x4004B03C // Pin Control Register n\n"
  "register PORTC_PCR16  : UInt32 at 0x4004B040 // Pin Control Register n\n"
  "register PORTC_PCR17  : UInt32 at 0x4004B044 // Pin Control Register n\n"
  "register PORTC_PCR18  : UInt32 at 0x4004B048 // Pin Control Register n\n"
  "register PORTC_PCR19  : UInt32 at 0x4004B04C // Pin Control Register n\n"
  "register PORTC_PCR20  : UInt32 at 0x4004B050 // Pin Control Register n\n"
  "register PORTC_PCR21  : UInt32 at 0x4004B054 // Pin Control Register n\n"
  "register PORTC_PCR22  : UInt32 at 0x4004B058 // Pin Control Register n\n"
  "register PORTC_PCR23  : UInt32 at 0x4004B05C // Pin Control Register n\n"
  "register PORTC_PCR24  : UInt32 at 0x4004B060 // Pin Control Register n\n"
  "register PORTC_PCR25  : UInt32 at 0x4004B064 // Pin Control Register n\n"
  "register PORTC_PCR26  : UInt32 at 0x4004B068 // Pin Control Register n\n"
  "register PORTC_PCR27  : UInt32 at 0x4004B06C // Pin Control Register n\n"
  "register PORTC_PCR28  : UInt32 at 0x4004B070 // Pin Control Register n\n"
  "register PORTC_PCR29  : UInt32 at 0x4004B074 // Pin Control Register n\n"
  "register PORTC_PCR30  : UInt32 at 0x4004B078 // Pin Control Register n\n"
  "register PORTC_PCR31  : UInt32 at 0x4004B07C // Pin Control Register n\n"
  "register PORTC_GPCLR  : UInt32 at 0x4004B080 // Global Pin Control Low Register\n"
  "register PORTC_GPCHR  : UInt32 at 0x4004B084 // Global Pin Control High Register\n"
  "register PORTC_ISFR   : UInt32 at 0x4004B0A0 // Interrupt Status Flag Register\n"
  "register PORTD_PCR0   : UInt32 at 0x4004C000 // Pin Control Register n\n"
  "register PORTD_PCR1   : UInt32 at 0x4004C004 // Pin Control Register n\n"
  "register PORTD_PCR2   : UInt32 at 0x4004C008 // Pin Control Register n\n"
  "register PORTD_PCR3   : UInt32 at 0x4004C00C // Pin Control Register n\n"
  "register PORTD_PCR4   : UInt32 at 0x4004C010 // Pin Control Register n\n"
  "register PORTD_PCR5   : UInt32 at 0x4004C014 // Pin Control Register n\n"
  "register PORTD_PCR6   : UInt32 at 0x4004C018 // Pin Control Register n\n"
  "register PORTD_PCR7   : UInt32 at 0x4004C01C // Pin Control Register n\n"
  "register PORTD_PCR8   : UInt32 at 0x4004C020 // Pin Control Register n\n"
  "register PORTD_PCR9   : UInt32 at 0x4004C024 // Pin Control Register n\n"
  "register PORTD_PCR10  : UInt32 at 0x4004C028 // Pin Control Register n\n"
  "register PORTD_PCR11  : UInt32 at 0x4004C02C // Pin Control Register n\n"
  "register PORTD_PCR12  : UInt32 at 0x4004C030 // Pin Control Register n\n"
  "register PORTD_PCR13  : UInt32 at 0x4004C034 // Pin Control Register n\n"
  "register PORTD_PCR14  : UInt32 at 0x4004C038 // Pin Control Register n\n"
  "register PORTD_PCR15  : UInt32 at 0x4004C03C // Pin Control Register n\n"
  "register PORTD_PCR16  : UInt32 at 0x4004C040 // Pin Control Register n\n"
  "register PORTD_PCR17  : UInt32 at 0x4004C044 // Pin Control Register n\n"
  "register PORTD_PCR18  : UInt32 at 0x4004C048 // Pin Control Register n\n"
  "register PORTD_PCR19  : UInt32 at 0x4004C04C // Pin Control Register n\n"
  "register PORTD_PCR20  : UInt32 at 0x4004C050 // Pin Control Register n\n"
  "register PORTD_PCR21  : UInt32 at 0x4004C054 // Pin Control Register n\n"
  "register PORTD_PCR22  : UInt32 at 0x4004C058 // Pin Control Register n\n"
  "register PORTD_PCR23  : UInt32 at 0x4004C05C // Pin Control Register n\n"
  "register PORTD_PCR24  : UInt32 at 0x4004C060 // Pin Control Register n\n"
  "register PORTD_PCR25  : UInt32 at 0x4004C064 // Pin Control Register n\n"
  "register PORTD_PCR26  : UInt32 at 0x4004C068 // Pin Control Register n\n"
  "register PORTD_PCR27  : UInt32 at 0x4004C06C // Pin Control Register n\n"
  "register PORTD_PCR28  : UInt32 at 0x4004C070 // Pin Control Register n\n"
  "register PORTD_PCR29  : UInt32 at 0x4004C074 // Pin Control Register n\n"
  "register PORTD_PCR30  : UInt32 at 0x4004C078 // Pin Control Register n\n"
  "register PORTD_PCR31  : UInt32 at 0x4004C07C // Pin Control Register n\n"
  "register PORTD_GPCLR  : UInt32 at 0x4004C080 // Global Pin Control Low Register\n"
  "register PORTD_GPCHR  : UInt32 at 0x4004C084 // Global Pin Control High Register\n"
  "register PORTD_ISFR   : UInt32 at 0x4004C0A0 // Interrupt Status Flag Register\n"
  "register PORTE_PCR0   : UInt32 at 0x4004D000 // Pin Control Register n\n"
  "register PORTE_PCR1   : UInt32 at 0x4004D004 // Pin Control Register n\n"
  "register PORTE_PCR2   : UInt32 at 0x4004D008 // Pin Control Register n\n"
  "register PORTE_PCR3   : UInt32 at 0x4004D00C // Pin Control Register n\n"
  "register PORTE_PCR4   : UInt32 at 0x4004D010 // Pin Control Register n\n"
  "register PORTE_PCR5   : UInt32 at 0x4004D014 // Pin Control Register n\n"
  "register PORTE_PCR6   : UInt32 at 0x4004D018 // Pin Control Register n\n"
  "register PORTE_PCR7   : UInt32 at 0x4004D01C // Pin Control Register n\n"
  "register PORTE_PCR8   : UInt32 at 0x4004D020 // Pin Control Register n\n"
  "register PORTE_PCR9   : UInt32 at 0x4004D024 // Pin Control Register n\n"
  "register PORTE_PCR10  : UInt32 at 0x4004D028 // Pin Control Register n\n"
  "register PORTE_PCR11  : UInt32 at 0x4004D02C // Pin Control Register n\n"
  "register PORTE_PCR12  : UInt32 at 0x4004D030 // Pin Control Register n\n"
  "register PORTE_PCR13  : UInt32 at 0x4004D034 // Pin Control Register n\n"
  "register PORTE_PCR14  : UInt32 at 0x4004D038 // Pin Control Register n\n"
  "register PORTE_PCR15  : UInt32 at 0x4004D03C // Pin Control Register n\n"
  "register PORTE_PCR16  : UInt32 at 0x4004D040 // Pin Control Register n\n"
  "register PORTE_PCR17  : UInt32 at 0x4004D044 // Pin Control Register n\n"
  "register PORTE_PCR18  : UInt32 at 0x4004D048 // Pin Control Register n\n"
  "register PORTE_PCR19  : UInt32 at 0x4004D04C // Pin Control Register n\n"
  "register PORTE_PCR20  : UInt32 at 0x4004D050 // Pin Control Register n\n"
  "register PORTE_PCR21  : UInt32 at 0x4004D054 // Pin Control Register n\n"
  "register PORTE_PCR22  : UInt32 at 0x4004D058 // Pin Control Register n\n"
  "register PORTE_PCR23  : UInt32 at 0x4004D05C // Pin Control Register n\n"
  "register PORTE_PCR24  : UInt32 at 0x4004D060 // Pin Control Register n\n"
  "register PORTE_PCR25  : UInt32 at 0x4004D064 // Pin Control Register n\n"
  "register PORTE_PCR26  : UInt32 at 0x4004D068 // Pin Control Register n\n"
  "register PORTE_PCR27  : UInt32 at 0x4004D06C // Pin Control Register n\n"
  "register PORTE_PCR28  : UInt32 at 0x4004D070 // Pin Control Register n\n"
  "register PORTE_PCR29  : UInt32 at 0x4004D074 // Pin Control Register n\n"
  "register PORTE_PCR30  : UInt32 at 0x4004D078 // Pin Control Register n\n"
  "register PORTE_PCR31  : UInt32 at 0x4004D07C // Pin Control Register n\n"
  "register PORTE_GPCLR  : UInt32 at 0x4004D080 // Global Pin Control Low Register\n"
  "register PORTE_GPCHR  : UInt32 at 0x4004D084 // Global Pin Control High Register\n"
  "register PORTE_ISFR   : UInt32 at 0x4004D0A0 // Interrupt Status Flag Register\n"
  "\n"
  "// Chapter 12: System Integration Module (SIM)\n"
  "register SIM_SOPT1    : UInt32 at 0x40047000 // System Options Register 1\n"
  "register SIM_SOPT1CFG : UInt32 at 0x40047004 // SOPT1 Configuration Register\n"
  "register SIM_SOPT2    : UInt32 at 0x40048004 // System Options Register 2\n"
  "register SIM_SOPT2_USBSRC : UInt32 at 0x00040000  // 0=USB_CLKIN, 1=FFL/PLL \n"
  "register SIM_SOPT2_PLLFLLSEL : UInt32 at 0x00010000  // 0=FLL, 1=PLL\n"
  "register SIM_SOPT2_TRACECLKSEL : UInt32 at 0x00001000  // 0=MCGOUTCLK, 1=CPU\n"
  "register SIM_SOPT2_PTD7PAD : UInt32 at 0x00000800  // 0=normal, 1=double drive PTD7\n"
  "//register UInt32 SIM_SOPT2_CLKOUTSEL(n)   (((n) & 7) << 5) // Selects the clock to output on the CLKOUT pin.\n"
  "let SIM_SOPT2_RTCCLKOUTSEL : UInt32 = 0x00000010  // RTC clock out select\n"
  "register SIM_SOPT4   : UInt32 at 0x4004800C // System Options Register 4\n"
  "register SIM_SOPT5   : UInt32 at 0x40048010 // System Options Register 5\n"
  "register SIM_SOPT7   : UInt32 at 0x40048018 // System Options Register 7\n"
  "register @ro SIM_SDID  : UInt32 at 0x40048024 // System Device Identification Register\n"
  "register SIM_SCGC2  : UInt32 at 0x4004802C // System Clock Gating Control Register 2\n"
  "let SIM_SCGC2_DAC0  : UInt32 =  0x00001000  // DAC0 Clock Gate Control\n"
  "register SIM_SCGC3  : UInt32 at 0x40048030 // System Clock Gating Control Register 3\n"
  "let SIM_SCGC3_ADC1 : UInt32 =  0x08000000  // ADC1 Clock Gate Control\n"
  "let SIM_SCGC3_FTM2 : UInt32 =  0x01000000  // FTM2 Clock Gate Control\n"
  "register SIM_SCGC4 : UInt32 at 0x40048034 // System Clock Gating Control Register 4\n"
  "let SIM_SCGC4_VREF  : UInt32 =  0x00100000  // VREF Clock Gate Control\n"
  "let SIM_SCGC4_CMP   : UInt32 = 0x00080000  // Comparator Clock Gate Control\n"
  "let SIM_SCGC4_USBOTG  : UInt32 = 0x00040000  // USB Clock Gate Control\n"
  "let SIM_SCGC4_UART2  : UInt32 =  0x00001000  // UART2 Clock Gate Control\n"
  "let SIM_SCGC4_UART1  : UInt32 =  0x00000800  // UART1 Clock Gate Control\n"
  "let SIM_SCGC4_UART0  : UInt32 =  0x00000400  // UART0 Clock Gate Control\n"
  "let SIM_SCGC4_I2C1  : UInt32 =  0x00000080  // I2C1 Clock Gate Control\n"
  "let SIM_SCGC4_I2C0  : UInt32 =  0x00000040  // I2C0 Clock Gate Control\n"
  "let SIM_SCGC4_CMT  : UInt32 =  0x00000004  // CMT Clock Gate Control\n"
  "let SIM_SCGC4_EWM  : UInt32 =  0x00000002  // EWM Clock Gate Control\n"
  "register SIM_SCGC5 : UInt32 at 0x40048038 // System Clock Gating Control Register 5\n"
  "let SIM_SCGC5_PORTE  : UInt32 =  0x00002000  // Port E Clock Gate Control\n"
  "let SIM_SCGC5_PORTD  : UInt32 =  0x00001000  // Port D Clock Gate Control\n"
  "let SIM_SCGC5_PORTC  : UInt32 =  0x00000800  // Port C Clock Gate Control\n"
  "let SIM_SCGC5_PORTB  : UInt32 =  0x00000400  // Port B Clock Gate Control\n"
  "let SIM_SCGC5_PORTA  : UInt32 =  0x00000200  // Port A Clock Gate Control\n"
  "let SIM_SCGC5_TSI  : UInt32 =  0x00000020  // Touch Sense Input TSI Clock Gate Control\n"
  "let SIM_SCGC5_LPTIMER  : UInt32 =  0x00000001  // Low Power Timer Access Control\n"
  "register SIM_SCGC6 : UInt32 at 0x4004803C // System Clock Gating Control Register 6\n"
  "let SIM_SCGC6_RTC   : UInt32 = 0x20000000  // RTC Access\n"
  "let SIM_SCGC6_ADC0  : UInt32 =   0x08000000  // ADC0 Clock Gate Control\n"
  "let SIM_SCGC6_FTM1  : UInt32 =   0x02000000  // FTM1 Clock Gate Control\n"
  "let SIM_SCGC6_FTM0  : UInt32=   0x01000000  // FTM0 Clock Gate Control\n"
  "let SIM_SCGC6_PIT  : UInt32 =  0x00800000  // PIT Clock Gate Control\n"
  "let SIM_SCGC6_PDB  : UInt32 =  0x00400000  // PDB Clock Gate Control\n"
  "let SIM_SCGC6_USBDCD  : UInt32=  0x00200000  // USB DCD Clock Gate Control\n"
  "let SIM_SCGC6_CRC  : UInt32 =  0x00040000  // CRC Clock Gate Control\n"
  "let SIM_SCGC6_I2S  : UInt32 =  0x00008000  // I2S Clock Gate Control\n"
  "let SIM_SCGC6_SPI1  : UInt32=   0x00002000  // SPI1 Clock Gate Control\n"
  "let SIM_SCGC6_SPI0  : UInt32=   0x00001000  // SPI0 Clock Gate Control\n"
  "let SIM_SCGC6_FLEXCAN0  : UInt32 =  0x00000010  // FlexCAN0 Clock Gate Control\n"
  "let SIM_SCGC6_DMAMUX : UInt32 =  0x00000002  // DMA Mux Clock Gate Control\n"
  "let SIM_SCGC6_FTFL  : UInt32 =  0x00000001  // Flash Memory Clock Gate Control\n"
  "register SIM_SCGC7 : UInt32 at 0x40048040 // System Clock Gating Control Register 7\n"
  "let SIM_SCGC7_DMA  : UInt32 =  0x00000002  // DMA Clock Gate Control\n"
  "register SIM_CLKDIV1 : UInt32 at 0x40048044 // System Clock Divider Register 1\n"
  "//register UInt32 SIM_CLKDIV1_OUTDIV1(n)   (((n) & 0x0F) << 28) // divide value for the core/system clock\n"
  "//register UInt32 SIM_CLKDIV1_OUTDIV2(n)   (((n) & 0x0F) << 24) // divide value for the peripheral clock\n"
  "//register UInt32 SIM_CLKDIV1_OUTDIV4(n)   (((n) & 0x0F) << 16) // divide value for the flash clock\n"
  "register SIM_CLKDIV2 : UInt32 at 0x40048048 // System Clock Divider Register 2\n"
  "//register UInt32 SIM_CLKDIV2_USBDIV(n)   (((n) & 0x07) << 1)\n"
  "let SIM_CLKDIV2_USBFRAC  : UInt32 =  0x01\n"
  "register @ro SIM_FCFG1 : UInt32 at 0x4004804C // Flash Configuration Register 1\n"
  "register @ro SIM_FCFG2 : UInt32 at 0x40048050 // Flash Configuration Register 2\n"
  "register @ro SIM_UIDH  : UInt32 at 0x40048054 // Unique Identification Register High\n"
  "register @ro SIM_UIDMH : UInt32 at 0x40048058 // Unique Identification Register Mid-High\n"
  "register @ro SIM_UIDML : UInt32 at 0x4004805C // Unique Identification Register Mid Low\n"
  "register @ro SIM_UIDL  : UInt32 at 0x40048060 // Unique Identification Register Low\n"
  "\n"
  "// Chapter 13: Reset Control Module (RCM)\n"
  "register RCM_SRS0 : UInt8 at 0x4007F000 // System Reset Status Register 0\n"
  "register RCM_SRS1 : UInt8 at 0x4007F001 // System Reset Status Register 1\n"
  "register RCM_RPFC : UInt8 at 0x4007F004 // Reset Pin Filter Control Register\n"
  "register RCM_RPFW : UInt8 at 0x4007F005 // Reset Pin Filter Width Register\n"
  "register RCM_MR   : UInt8 at 0x4007F007 // Mode Register\n"
  "\n"
  "// Chapter 14: System Mode Controller\n"
  "register SMC_PMPROT  : UInt8 at 0x4007E000 // Power Mode Protection Register\n"
  "let SMC_PMPROT_AVLP  : UInt8 = 0x20   // Allow very low power modes\n"
  "let SMC_PMPROT_ALLS : UInt8  = 0x08   // Allow low leakage stop mode\n"
  "let SMC_PMPROT_AVLLS : UInt8 = 0x02   // Allow very low leakage stop mode\n"
  "\n"
  "register SMC_PMCTRL  : UInt8 at 0x4007E001 // Power Mode Control Register\n"
  "let SMC_PMCTRL_LPWUI : UInt8  = 0x80   // Low Power Wake Up on Interrupt\n"
  "//register UInt8 SMC_PMCTRL_RUNM(n)  (uint8_t)(((n) & 0x03) << 5) // Run Mode Control\n"
  "let SMC_PMCTRL_STOPA : UInt8  = 0x08   // Stop Aborted\n"
  "//register UInt8 SMC_PMCTRL_STOPM(n)  (uint8_t)((n) & 0x07)  // Stop Mode Control\n"
  "\n"
  "register SMC_VLLSCTRL : UInt8 at 0x4007E002 // VLLS Control Register\n"
  "let SMC_VLLSCTRL_PORPO : UInt8 = 0x20   // POR Power Option\n"
  "//let UInt8 SMC_VLLSCTRL_VLLSM(n)  (uint8_t)((n) & 0x07)  // VLLS Mode Control\n"
  "\n"
  "register SMC_PMST : UInt8 at 0x4007E003 // Power Mode Status Register\n"
  "let SMC_PMSTAT_RUN  : UInt8 = 0x01   // Current power mode is RUN\n"
  "let SMC_PMSTAT_STOP : UInt8 = 0x02   // Current power mode is STOP\n"
  "let SMC_PMSTAT_VLPR : UInt8 = 0x04   // Current power mode is VLPR\n"
  "let SMC_PMSTAT_VLPW : UInt8 = 0x08   // Current power mode is VLPW\n"
  "let SMC_PMSTAT_VLPS : UInt8 = 0x10   // Current power mode is VLPS\n"
  "let SMC_PMSTAT_LLS  : UInt8 = 0x20   // Current power mode is LLS\n"
  "let SMC_PMSTAT_VLLS : UInt8 = 0x40   // Current power mode is VLLS\n"
  "\n"
  "// Chapter 15: Power Management Controller\n"
  "register PMC_LVDSC1 : UInt8 at 0x4007D000 // Low Voltage Detect Status And Control 1 register\n"
  "let PMC_LVDSC1_LVDF : UInt8 = 0x80   // Low-Voltage Detect Flag\n"
  "let PMC_LVDSC1_LVDACK : UInt8 = 0x40   // Low-Voltage Detect Acknowledge\n"
  "let PMC_LVDSC1_LVDIE : UInt8 = 0x20   // Low-Voltage Detect Interrupt Enable\n"
  "let PMC_LVDSC1_LVDRE : UInt8 = 0x10   // Low-Voltage Detect Reset Enable\n"
  "//let UInt8 PMC_LVDSC1_LVDV(n)  (uint8_t)((n) & 0x03)  // Low-Voltage Detect Voltage Select\n"
  "register PMC_LVDSC2 : UInt8 at 0x4007D001 // Low Voltage Detect Status And Control 2 register\n"
  "let PMC_LVDSC2_LVWF : UInt8  = 0x80   // Low-Voltage Warning Flag\n"
  "let PMC_LVDSC2_LVWACK : UInt8 = 0x40   // Low-Voltage Warning Acknowledge\n"
  "let PMC_LVDSC2_LVWIE : UInt8 = 0x20   // Low-Voltage Warning Interrupt Enable\n"
  "//let UInt8 PMC_LVDSC2_LVWV(n)  (uint8_t)((n) & 0x03)  // Low-Voltage Warning Voltage Select\n"
  "register PMC_REGSC : UInt8 at 0x4007D002 // Regulator Status And Control register\n"
  "let PMC_REGSC_BGEN  : UInt8 = 0x10   // Bandgap Enable In VLPx Operation\n"
  "let PMC_REGSC_ACKISO : UInt8 = 0x08   // Acknowledge Isolation\n"
  "let PMC_REGSC_REGONS : UInt8 = 0x04   // Regulator In Run Regulation Status\n"
  "let PMC_REGSC_BGBE  : UInt8 = 0x01   // Bandgap Buffer Enable\n"
  "\n"
  "// Chapter 16: Low-Leakage Wakeup Unit (LLWU)\n"
  "register LLWU_PE1  : UInt8 at 0x4007C000 // LLWU Pin Enable 1 register\n"
  "register LLWU_PE2  : UInt8 at 0x4007C001 // LLWU Pin Enable 2 register\n"
  "register LLWU_PE3  : UInt8 at 0x4007C002 // LLWU Pin Enable 3 register\n"
  "register LLWU_PE4  : UInt8 at 0x4007C003 // LLWU Pin Enable 4 register\n"
  "register LLWU_ME   : UInt8 at 0x4007C004 // LLWU Module Enable register\n"
  "register LLWU_F1   : UInt8 at 0x4007C005 // LLWU Flag 1 register\n"
  "register LLWU_F2   : UInt8 at 0x4007C006 // LLWU Flag 2 register\n"
  "register LLWU_F3   : UInt8 at 0x4007C007 // LLWU Flag 3 register\n"
  "register LLWU_FILT1: UInt8 at 0x4007C008 // LLWU Pin Filter 1 register\n"
  "register LLWU_FILT2: UInt8 at 0x4007C009 // LLWU Pin Filter 2 register\n"
  "register LLWU_RST  : UInt8 at 0x4007C00A // LLWU Reset Enable register\n"
  "\n"
  "// Chapter 17: Miscellaneous Control Module (MCM)\n"
  "register MCM_PLASC : UInt16 at 0xE0080008 // Crossbar Switch (AXBS) Slave Configuration\n"
  "\n"
  "register MCM_PLAMC : UInt16 at 0xE008000A // Crossbar Switch (AXBS) Master Configuration\n"
  "\n"
  "register MCM_PLACR : UInt32 at 0xE008000C // Crossbar Switch (AXBS) Control Register (MK20DX128)\n"
  "let MCM_PLACR_ARG   : UInt32 = 0x00000200  // Arbitration select, 0=fixed, 1=round-robin\n"
  "\n"
  "register MCM_CR : UInt32 at 0xE008000C // RAM arbitration control register (MK20DX256)\n"
  "let MCM_CR_SRAMLWP  : UInt32 =  0x4000_0000  // SRAM_L write protect\n"
  "//let UInt32 MCM_CR_SRAMLAP(n)   (((n) & 0x03) << 28) // SRAM_L priority, 0=RR, 1=favor DMA, 2=CPU, 3=DMA\n"
  "let MCM_CR_SRAMUWP  : UInt32 =  0x0400_0000  // SRAM_U write protect\n"
  "//let UInt32 MCM_CR_SRAMUAP(n)   (((n) & 0x03) << 24) // SRAM_U priority, 0=RR, 1=favor DMA, 2=CPU, 3=DMA\n"
  "\n"
  "// Crossbar Switch (AXBS) - only programmable on MK20DX256\n"
  "register AXBS_PRS0   : UInt32 at 0x40004000 // Priority Registers Slave 0\n"
  "register AXBS_CRS0   : UInt32 at 0x40004010 // Control Register 0\n"
  "register AXBS_PRS1   : UInt32 at 0x40004100 // Priority Registers Slave 1\n"
  "register AXBS_CRS1   : UInt32 at 0x40004110 // Control Register 1\n"
  "register AXBS_PRS2   : UInt32 at 0x40004200 // Priority Registers Slave 2\n"
  "register AXBS_CRS2   : UInt32 at 0x40004210 // Control Register 2\n"
  "register AXBS_PRS3   : UInt32 at 0x40004300 // Priority Registers Slave 3\n"
  "register AXBS_CRS3   : UInt32 at 0x40004310 // Control Register 3\n"
  "register AXBS_PRS4   : UInt32 at 0x40004400 // Priority Registers Slave 4\n"
  "register AXBS_CRS4   : UInt32 at 0x40004410 // Control Register 4\n"
  "register AXBS_PRS5   : UInt32 at 0x40004500 // Priority Registers Slave 5\n"
  "register AXBS_CRS5   : UInt32 at 0x40004510 // Control Register 5\n"
  "register AXBS_PRS6   : UInt32 at 0x40004600 // Priority Registers Slave 6\n"
  "register AXBS_CRS6   : UInt32 at 0x40004610 // Control Register 6\n"
  "register AXBS_PRS7   : UInt32 at 0x40004700 // Priority Registers Slave 7\n"
  "register AXBS_CRS7   : UInt32 at 0x40004710 // Control Register 7\n"
  "register AXBS_MGPCR0 : UInt32 at 0x40004800 // Master 0 General Purpose Control Register\n"
  "register AXBS_MGPCR1 : UInt32 at 0x40004900 // Master 1 General Purpose Control Register\n"
  "register AXBS_MGPCR2 : UInt32 at 0x40004A00 // Master 2 General Purpose Control Register\n"
  "register AXBS_MGPCR3 : UInt32 at 0x40004B00 // Master 3 General Purpose Control Register\n"
  "register AXBS_MGPCR4 : UInt32 at 0x40004C00 // Master 4 General Purpose Control Register\n"
  "register AXBS_MGPCR5 : UInt32 at 0x40004D00 // Master 5 General Purpose Control Register\n"
  "register AXBS_MGPCR6 : UInt32 at 0x40004E00 // Master 6 General Purpose Control Register\n"
  "register AXBS_MGPCR7 : UInt32 at 0x40004F00 // Master 7 General Purpose Control Register\n"
  "let AXBS_CRS_READONLY  : UInt32=  0x80000000\n"
  "let AXBS_CRS_HALTLOWPRIORITY  : UInt32 = 0x40000000\n"
  "let AXBS_CRS_ARB_FIXED  : UInt32 = 0x00000000\n"
  "let AXBS_CRS_ARB_ROUNDROBIN  : UInt32 = 0x00010000\n"
  "let AXBS_CRS_PARK_FIXED  : UInt32 =  0x00000000\n"
  "let AXBS_CRS_PARK_PREVIOUS  : UInt32 =  0x00000010\n"
  "let AXBS_CRS_PARK_NONE  : UInt32 =  0x00000020\n"
  "//let UInt32 AXBS_CRS_PARK(n)   (((n) & 7) << 0)\n"
  "\n"
  "\n"
  "\n"
  "// Chapter 20: Direct Memory Access Multiplexer (DMAMUX)\n"
  "register DMAMUX0_CHCFG0  : UInt8 at 0x40021000 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG1  : UInt8 at 0x40021001 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG2  : UInt8 at 0x40021002 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG3  : UInt8 at 0x40021003 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG4  : UInt8 at 0x40021004 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG5  : UInt8 at 0x40021005 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG6  : UInt8 at 0x40021006 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG7  : UInt8 at 0x40021007 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG8  : UInt8 at 0x40021008 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG9  : UInt8 at 0x40021009 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG10 : UInt8 at 0x4002100A // Channel Configuration register\n"
  "register DMAMUX0_CHCFG11 : UInt8 at 0x4002100B // Channel Configuration register\n"
  "register DMAMUX0_CHCFG12 : UInt8 at 0x4002100C // Channel Configuration register\n"
  "register DMAMUX0_CHCFG13 : UInt8 at 0x4002100D // Channel Configuration register\n"
  "register DMAMUX0_CHCFG14 : UInt8 at 0x4002100E // Channel Configuration register\n"
  "register DMAMUX0_CHCFG15 : UInt8 at 0x4002100F // Channel Configuration register\n"
  "let DMAMUX_DISABLE : UInt8 =  0\n"
  "let DMAMUX_TRIG  : UInt8 = 64\n"
  "let DMAMUX_ENABLE : UInt8 =  128\n"
  "let DMAMUX_SOURCE_UART0_RX : UInt8 = 2\n"
  "let DMAMUX_SOURCE_UART0_TX : UInt8 = 3\n"
  "let DMAMUX_SOURCE_UART1_RX : UInt8 = 4\n"
  "let DMAMUX_SOURCE_UART1_TX : UInt8 = 5\n"
  "let DMAMUX_SOURCE_UART2_RX : UInt8 = 6\n"
  "let DMAMUX_SOURCE_UART2_TX : UInt8 = 7\n"
  "let DMAMUX_SOURCE_I2S0_RX  : UInt8 =14\n"
  "let DMAMUX_SOURCE_I2S0_TX  : UInt8 =15\n"
  "let DMAMUX_SOURCE_SPI0_RX  : UInt8 =16\n"
  "let DMAMUX_SOURCE_SPI0_TX  : UInt8 =17\n"
  "let DMAMUX_SOURCE_I2C0  : UInt8 =22\n"
  "let DMAMUX_SOURCE_I2C1  : UInt8 =23\n"
  "let DMAMUX_SOURCE_FTM0_CH0 : UInt8 = 24\n"
  "let DMAMUX_SOURCE_FTM0_CH1 : UInt8 = 25\n"
  "let DMAMUX_SOURCE_FTM0_CH2 : UInt8 = 26\n"
  "let DMAMUX_SOURCE_FTM0_CH3 : UInt8 = 27\n"
  "let DMAMUX_SOURCE_FTM0_CH4 : UInt8 = 28\n"
  "let DMAMUX_SOURCE_FTM0_CH5 : UInt8 = 29\n"
  "let DMAMUX_SOURCE_FTM0_CH6 : UInt8 = 30\n"
  "let DMAMUX_SOURCE_FTM0_CH7 : UInt8 = 31\n"
  "let DMAMUX_SOURCE_FTM1_CH0 : UInt8 = 32\n"
  "let DMAMUX_SOURCE_FTM1_CH1 : UInt8 = 33\n"
  "let DMAMUX_SOURCE_FTM2_CH0 : UInt8 = 34\n"
  "let DMAMUX_SOURCE_FTM2_CH1 : UInt8 = 35\n"
  "let DMAMUX_SOURCE_ADC0 : UInt8 = 40\n"
  "let DMAMUX_SOURCE_ADC1 : UInt8 = 41\n"
  "let DMAMUX_SOURCE_CMP0 : UInt8 = 42\n"
  "let DMAMUX_SOURCE_CMP1 : UInt8 = 43\n"
  "let DMAMUX_SOURCE_CMP2 : UInt8 = 44\n"
  "let DMAMUX_SOURCE_DAC0 : UInt8 = 45\n"
  "let DMAMUX_SOURCE_CMT  : UInt8 = 47\n"
  "let DMAMUX_SOURCE_PDB  : UInt8 = 48\n"
  "let DMAMUX_SOURCE_PORTA : UInt8 = 49\n"
  "let DMAMUX_SOURCE_PORTB : UInt8 = 50\n"
  "let DMAMUX_SOURCE_PORTC : UInt8 = 51\n"
  "let DMAMUX_SOURCE_PORTD : UInt8 = 52\n"
  "let DMAMUX_SOURCE_PORTE : UInt8 = 53\n"
  "let DMAMUX_SOURCE_ALWAYS0 : UInt8 = 54\n"
  "let DMAMUX_SOURCE_ALWAYS1 : UInt8 = 55\n"
  "let DMAMUX_SOURCE_ALWAYS2 : UInt8 = 56\n"
  "let DMAMUX_SOURCE_ALWAYS3 : UInt8 = 57\n"
  "let DMAMUX_SOURCE_ALWAYS4 : UInt8 = 58\n"
  "let DMAMUX_SOURCE_ALWAYS5 : UInt8 = 59\n"
  "let DMAMUX_SOURCE_ALWAYS6 : UInt8 = 60\n"
  "let DMAMUX_SOURCE_ALWAYS7 : UInt8 = 61\n"
  "let DMAMUX_SOURCE_ALWAYS8 : UInt8 = 62\n"
  "let DMAMUX_SOURCE_ALWAYS9 : UInt8 = 63\n"
  "\n"
  "// Chapter 21: Direct Memory Access Controller (eDMA)\n"
  "register DMA_CR : UInt32 at 0x40008000 // Control Register\n"
  "let DMA_CR_CX   : UInt32  = 0x2_0000 // Cancel Transfer\n"
  "let DMA_CR_ECX   : UInt32 = 0x1_0000 // Error Cancel Transfer\n"
  "let DMA_CR_EMLM   : UInt32= 0x80 // Enable Minor Loop Mapping\n"
  "let DMA_CR_CLM   : UInt32 = 0x40 // Continuous Link Mode\n"
  "let DMA_CR_HALT  : UInt32 = 0x20 // Halt DMA Operations\n"
  "let DMA_CR_HOE   : UInt32 = 0x10 // Halt On Error\n"
  "let DMA_CR_ERCA  : UInt32 = 0x04 // Enable Round Robin Channel Arbitration\n"
  "let DMA_CR_EDBG   : UInt32= 0x02 // Enable Debug\n"
  "register DMA_ES  : UInt32 at 0x40008004 // Error Status Register\n"
  "register DMA_ERQ : UInt32 at 0x4000800C // Enable Request Register\n"
  "let DMA_ERQ_ERQ0   : UInt32 = 1 // Enable DMA Request 0\n"
  "let DMA_ERQ_ERQ1   : UInt32 = 2 // Enable DMA Request 1\n"
  "let DMA_ERQ_ERQ2   : UInt32 = 4 // Enable DMA Request 2\n"
  "let DMA_ERQ_ERQ3   : UInt32 = 8 // Enable DMA Request 3\n"
  "register DMA_EEI : UInt32 at 0x40008014 // Enable Error Interrupt Register\n"
  "let DMA_EEI_EEI0   : UInt32 = 1 // Enable Error Interrupt 0\n"
  "let DMA_EEI_EEI1   : UInt32 = 2 // Enable Error Interrupt 1\n"
  "let DMA_EEI_EEI2   : UInt32 = 4 // Enable Error Interrupt 2\n"
  "let DMA_EEI_EEI3   : UInt32 = 8 // Enable Error Interrupt 3\n"
  "//register UInt8 DMA_CEEI  *(volatile uint8_t  *)0x40008018 // Clear Enable Error Interrupt Register\n"
  "//register UInt32 DMA_CEEI_CEEI(n)  ((uint8_t)(n & 3)<<0) // Clear Enable Error Interrupt\n"
  "//register UInt32 DMA_CEEI_CAEE   ((uint8_t)1<<6)  // Clear All Enable Error Interrupts\n"
  "//register UInt32 DMA_CEEI_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_SEEI  *(volatile uint8_t  *)0x40008019 // Set Enable Error Interrupt Register\n"
  "//register UInt32 DMA_SEEI_SEEI(n)  ((uint8_t)(n & 3)<<0) // Set Enable Error Interrupt\n"
  "//register UInt32 DMA_SEEI_SAEE   ((uint8_t)1<<6)  // Set All Enable Error Interrupts\n"
  "//register UInt32 DMA_SEEI_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_CERQ  *(volatile uint8_t  *)0x4000801A // Clear Enable Request Register\n"
  "//register UInt32 DMA_CERQ_CERQ(n)  ((uint8_t)(n & 3)<<0) // Clear Enable Request\n"
  "//register UInt32 DMA_CERQ_CAER   ((uint8_t)1<<6)  // Clear All Enable Requests\n"
  "//register UInt32 DMA_CERQ_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_SERQ  *(volatile uint8_t  *)0x4000801B // Set Enable Request Register\n"
  "//register UInt32 DMA_SERQ_SERQ(n)  ((uint8_t)(n & 3)<<0) // Set Enable Request\n"
  "//register UInt32 DMA_SERQ_SAER   ((uint8_t)1<<6)  // Set All Enable Requests\n"
  "//register UInt32 DMA_SERQ_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_CDNE  *(volatile uint8_t  *)0x4000801C // Clear DONE Status Bit Register\n"
  "//register UInt32 DMA_CDNE_CDNE(n)  ((uint8_t)(n & 3)<<0) // Clear Done Bit\n"
  "//register UInt32 DMA_CDNE_CADN   ((uint8_t)1<<6)  // Clear All Done Bits\n"
  "//register UInt32 DMA_CDNE_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_SSRT  *(volatile uint8_t  *)0x4000801D // Set START Bit Register\n"
  "//register UInt32 DMA_SSRT_SSRT(n)  ((uint8_t)(n & 3)<<0) // Set Start Bit\n"
  "//register UInt32 DMA_SSRT_SAST   ((uint8_t)1<<6)  // Set All Start Bits\n"
  "//register UInt32 DMA_SSRT_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_CERR  *(volatile uint8_t  *)0x4000801E // Clear Error Register\n"
  "//register UInt32 DMA_CERR_CERR(n)  ((uint8_t)(n & 3)<<0) // Clear Error Indicator\n"
  "//register UInt32 DMA_CERR_CAEI   ((uint8_t)1<<6)  // Clear All Error Indicators\n"
  "//register UInt32 DMA_CERR_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_CINT  *(volatile uint8_t  *)0x4000801F // Clear Interrupt Request Register\n"
  "//register UInt32 DMA_CINT_CINT(n)  ((uint8_t)(n & 3)<<0) // Clear Interrupt Request\n"
  "//register UInt32 DMA_CINT_CAIR   ((uint8_t)1<<6)  // Clear All Interrupt Requests\n"
  "//register UInt32 DMA_CINT_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_INT    0x40008024 // Interrupt Request Register\n"
  "//register UInt32 DMA_INT_INT0   ( 1<<0) // Interrupt Request 0\n"
  "//register UInt32 DMA_INT_INT1   ( 1<<1) // Interrupt Request 1\n"
  "//register UInt32 DMA_INT_INT2   ( 1<<2) // Interrupt Request 2\n"
  "//register UInt32 DMA_INT_INT3   ( 1<<3) // Interrupt Request 3\n"
  "//register UInt32 DMA_ERR    0x4000802C // Error Register\n"
  "//register UInt32 DMA_ERR_ERR0   ( 1<<0) // Error in Channel 0\n"
  "//register UInt32 DMA_ERR_ERR1   ( 1<<1) // Error in Channel 1\n"
  "//register UInt32 DMA_ERR_ERR2   ( 1<<2) // Error in Channel 2\n"
  "//register UInt32 DMA_ERR_ERR3   ( 1<<3) // Error in Channel 3\n"
  "//register UInt32 DMA_HRS    0x40008034 // Hardware Request Status Register\n"
  "//register UInt32 DMA_HRS_HRS0   ( 1<<0) // Hardware Request Status Channel 0\n"
  "//register UInt32 DMA_HRS_HRS1   ( 1<<1) // Hardware Request Status Channel 1\n"
  "//register UInt32 DMA_HRS_HRS2   ( 1<<2) // Hardware Request Status Channel 2\n"
  "//register UInt32 DMA_HRS_HRS3   ( 1<<3) // Hardware Request Status Channel 3\n"
  "//register UInt32 DMA_DCHPRI3  *(volatile uint8_t  *)0x40008100 // Channel n Priority Register\n"
  "//register UInt32 DMA_DCHPRI2  *(volatile uint8_t  *)0x40008101 // Channel n Priority Register\n"
  "//register UInt32 DMA_DCHPRI1  *(volatile uint8_t  *)0x40008102 // Channel n Priority Register\n"
  "//register UInt32 DMA_DCHPRI0  *(volatile uint8_t  *)0x40008103 // Channel n Priority Register\n"
  "//register UInt32 DMA_DCHPRI_CHPRI(n)  ((uint8_t)(n & 3)<<0) // Channel Arbitration Priority\n"
  "//register UInt32 DMA_DCHPRI_DPA   ((uint8_t)1<<6)  // Disable PreEmpt Ability\n"
  "//register UInt32 DMA_DCHPRI_ECP   ((uint8_t)1<<7)  // Enable PreEmption\n"
  "//\n"
  "//\n"
  "//register DMA_TCD_ATTR_SMOD(n)  (((n) & 0x1F) << 11)\n"
  "//register DMA_TCD_ATTR_SSIZE(n)  (((n) & 0x7) << 8)\n"
  "//register DMA_TCD_ATTR_DMOD(n)  (((n) & 0x1F) << 3)\n"
  "//register DMA_TCD_ATTR_DSIZE(n)  (((n) & 0x7) << 0)\n"
  "//register DMA_TCD_ATTR_SIZE_8BIT  0\n"
  "//register DMA_TCD_ATTR_SIZE_16BIT  1\n"
  "//register DMA_TCD_ATTR_SIZE_32BIT  2\n"
  "//register DMA_TCD_ATTR_SIZE_16BYTE 4\n"
  "//register DMA_TCD_ATTR_SIZE_32BYTE 5\n"
  "//register DMA_TCD_CSR_BWC(n)  (((n) & 0x3) << 14)\n"
  "//register DMA_TCD_CSR_MAJORLINKCH(n) (((n) & 0x3) << 8)\n"
  "//register DMA_TCD_CSR_DONE  0x0080\n"
  "//register DMA_TCD_CSR_ACTIVE  0x0040\n"
  "//register DMA_TCD_CSR_MAJORELINK  0x0020\n"
  "//register DMA_TCD_CSR_ESG   0x0010\n"
  "//register DMA_TCD_CSR_DREQ  0x0008\n"
  "//register DMA_TCD_CSR_INTHALF  0x0004\n"
  "//register DMA_TCD_CSR_INTMAJOR  0x0002\n"
  "//register DMA_TCD_CSR_START  0x0001\n"
  "//register DMA_TCD_CITER_MASK      ((uint16_t)0x7FFF)    // Loop count mask\n"
  "//register DMA_TCD_CITER_ELINK      ((uint16_t)1<<15)    // Enable channel linking on minor-loop complete\n"
  "//register DMA_TCD_BITER_MASK      ((uint16_t)0x7FFF)    // Loop count mask\n"
  "//register DMA_TCD_BITER_ELINK      ((uint16_t)1<<15)    // Enable channel linking on minor-loop complete\n"
  "//register DMA_TCD_NBYTES_SMLOE      ( 1<<31)      // Source Minor Loop Offset Enable\n"
  "//register DMA_TCD_NBYTES_DMLOE      ( 1<<30)      // Destination Minor Loop Offset Enable\n"
  "//register DMA_TCD_NBYTES_MLOFFNO_NBYTES(n)    ( (n))      // NBytes transfer count when minor loop disabled\n"
  "//register DMA_TCD_NBYTES_MLOFFYES_NBYTES(n)   ( (n & 0x1F))     // NBytes transfer count when minor loop enabled\n"
  "//register DMA_TCD_NBYTES_MLOFFYES_MLOFF(n)    ( (n & 0xFFFFF)<<10)   // Offset \n"
  "//\n"
  "//register DMA_TCD0_SADDR  *(volatile const void * volatile *)0x40009000 // TCD Source Address\n"
  "//register DMA_TCD0_SOFF  *(volatile int16_t *)0x40009004  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD0_ATTR  *(volatile uint16_t *)0x40009006 // TCD Transfer Attributes\n"
  "//register DMA_TCD0_NBYTES_MLNO  0x40009008 // TCD Minor Byte Count (Minor Loop Disabled)\n"
  "//register DMA_TCD0_NBYTES_MLOFFNO  0x40009008 // TCD Signed Minor Loop Offset (Minor Loop Enabled and Offset Disabled)\n"
  "//register DMA_TCD0_NBYTES_MLOFFYES  0x40009008 // TCD Signed Minor Loop Offset (Minor Loop and Offset Enabled)\n"
  "//register DMA_TCD0_SLAST  *(volatile int32_t *)0x4000900C  // TCD Last Source Address Adjustment\n"
  "//register DMA_TCD0_DADDR  *(volatile void * volatile *)0x40009010 // TCD Destination Address\n"
  "//register DMA_TCD0_DOFF  *(volatile int16_t *)0x40009014  // TCD Signed Destination Address Offset\n"
  "//register DMA_TCD0_CITER_ELINKYES *(volatile uint16_t *)0x40009016 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "//register DMA_TCD0_CITER_ELINKNO *(volatile uint16_t *)0x40009016 // \?\?\n"
  "//register DMA_TCD0_DLASTSGA *(volatile int32_t *)0x40009018  // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "//register DMA_TCD0_CSR  *(volatile uint16_t *)0x4000901C // TCD Control and Status\n"
  "//register DMA_TCD0_BITER_ELINKYES *(volatile uint16_t *)0x4000901E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "//register DMA_TCD0_BITER_ELINKNO *(volatile uint16_t *)0x4000901E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled\n"
  "//\n"
  "//register DMA_TCD1_SADDR  *(volatile const void * volatile *)0x40009020 // TCD Source Address\n"
  "//register DMA_TCD1_SOFF  *(volatile int16_t *)0x40009024  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD1_ATTR  *(volatile uint16_t *)0x40009026 // TCD Transfer Attributes\n"
  "//register DMA_TCD1_NBYTES_MLNO  0x40009028 // TCD Minor Byte Count, Minor Loop Disabled\n"
  "//register DMA_TCD1_NBYTES_MLOFFNO  0x40009028 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled\n"
  "//register DMA_TCD1_NBYTES_MLOFFYES  0x40009028 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled\n"
  "//register DMA_TCD1_SLAST  *(volatile int32_t *)0x4000902C  // TCD Last Source Address Adjustment\n"
  "//register DMA_TCD1_DADDR  *(volatile void * volatile *)0x40009030 // TCD Destination Address\n"
  "//register DMA_TCD1_DOFF  *(volatile int16_t *)0x40009034  // TCD Signed Destination Address Offset\n"
  "//register DMA_TCD1_CITER_ELINKYES *(volatile uint16_t *)0x40009036 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "//register DMA_TCD1_CITER_ELINKNO *(volatile uint16_t *)0x40009036 // \?\?\n"
  "//register DMA_TCD1_DLASTSGA *(volatile int32_t *)0x40009038  // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "//register DMA_TCD1_CSR  *(volatile uint16_t *)0x4000903C // TCD Control and Status\n"
  "//register DMA_TCD1_BITER_ELINKYES *(volatile uint16_t *)0x4000903E // TCD Beginning Minor Loop Link, Major Loop Count Channel Linking Enabled\n"
  "//register DMA_TCD1_BITER_ELINKNO *(volatile uint16_t *)0x4000903E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled\n"
  "//\n"
  "//register DMA_TCD2_SADDR  *(volatile const void * volatile *)0x40009040 // TCD Source Address\n"
  "//register DMA_TCD2_SOFF  *(volatile int16_t *)0x40009044  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD2_ATTR  *(volatile uint16_t *)0x40009046 // TCD Transfer Attributes\n"
  "//register DMA_TCD2_NBYTES_MLNO  0x40009048 // TCD Minor Byte Count, Minor Loop Disabled\n"
  "//register DMA_TCD2_NBYTES_MLOFFNO  0x40009048 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled\n"
  "//register DMA_TCD2_NBYTES_MLOFFYES  0x40009048 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled\n"
  "//register DMA_TCD2_SLAST  *(volatile int32_t *)0x4000904C  // TCD Last Source Address Adjustment\n"
  "//register DMA_TCD2_DADDR  *(volatile void * volatile *)0x40009050 // TCD Destination Address\n"
  "//register DMA_TCD2_DOFF  *(volatile int16_t *)0x40009054  // TCD Signed Destination Address Offset\n"
  "//register DMA_TCD2_CITER_ELINKYES *(volatile uint16_t *)0x40009056 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "//register DMA_TCD2_CITER_ELINKNO *(volatile uint16_t *)0x40009056 // \?\?\n"
  "//register DMA_TCD2_DLASTSGA *(volatile int32_t *)0x40009058  // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "//register DMA_TCD2_CSR  *(volatile uint16_t *)0x4000905C // TCD Control and Status\n"
  "//register DMA_TCD2_BITER_ELINKYES *(volatile uint16_t *)0x4000905E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "//register DMA_TCD2_BITER_ELINKNO *(volatile uint16_t *)0x4000905E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled\n"
  "//\n"
  "//register DMA_TCD3_SADDR  *(volatile const void * volatile *)0x40009060 // TCD Source Address\n"
  "//register DMA_TCD3_SOFF  *(volatile int16_t *)0x40009064  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD3_ATTR  *(volatile uint16_t *)0x40009066 // TCD Transfer Attributes\n"
  "//register DMA_TCD3_NBYTES_MLNO  0x40009068 // TCD Minor Byte Count, Minor Loop Disabled\n"
  "//register DMA_TCD3_NBYTES_MLOFFNO  0x40009068 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled\n"
  "//register DMA_TCD3_NBYTES_MLOFFYES  0x40009068 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled\n"
  "//register DMA_TCD3_SLAST  *(volatile int32_t *)0x4000906C  // TCD Last Source Address Adjustment\n"
  "//register DMA_TCD3_DADDR  *(volatile void * volatile *)0x40009070 // TCD Destination Address\n"
  "//register DMA_TCD3_DOFF  *(volatile int16_t *)0x40009074  // TCD Signed Destination Address Offset\n"
  "//register DMA_TCD3_CITER_ELINKYES *(volatile uint16_t *)0x40009076 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "//register DMA_TCD3_CITER_ELINKNO *(volatile uint16_t *)0x40009076 // \?\?\n"
  "//register DMA_TCD3_DLASTSGA *(volatile int32_t *)0x40009078  // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "//register DMA_TCD3_CSR  *(volatile uint16_t *)0x4000907C // TCD Control and Status\n"
  "//register DMA_TCD3_BITER_ELINKYES *(volatile uint16_t *)0x4000907E // TCD Beginning Minor Loop Link, Major Loop Count ,Channel Linking Enabled\n"
  "//register DMA_TCD3_BITER_ELINKNO *(volatile uint16_t *)0x4000907E // TCD Beginning Minor Loop Link, Major Loop Count ,Channel Linking Disabled\n"
  "//\n"
  "//register DMA_TCD4_SADDR  *(volatile const void * volatile *)0x40009080 // TCD Source Addr\n"
  "//register DMA_TCD4_SOFF  *(volatile int16_t *)0x40009084  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD4_ATTR  *(volatile uint16_t *)0x40009086 // TCD Transfer Attributes\n"
  "//register DMA_TCD4_NBYTES_MLNO  0x40009088 // TCD Minor Byte Count\n"
  "//register DMA_TCD4_NBYTES_MLOFFNO  0x40009088 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD4_NBYTES_MLOFFYES  0x40009088 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD4_SLAST  *(volatile int32_t *)0x4000908C  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD4_DADDR  *(volatile void * volatile *)0x40009090 // TCD Destination Address\n"
  "//register DMA_TCD4_DOFF  *(volatile int16_t *)0x40009094  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD4_CITER_ELINKYES *(volatile uint16_t *)0x40009096 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD4_CITER_ELINKNO *(volatile uint16_t *)0x40009096 // \?\?\n"
  "//register DMA_TCD4_DLASTSGA *(volatile int32_t *)0x40009098  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD4_CSR  *(volatile uint16_t *)0x4000909C // TCD Control and Status\n"
  "//register DMA_TCD4_BITER_ELINKYES *(volatile uint16_t *)0x4000909E // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD4_BITER_ELINKNO *(volatile uint16_t *)0x4000909E // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD5_SADDR  *(volatile const void * volatile *)0x400090A0 // TCD Source Addr\n"
  "//register DMA_TCD5_SOFF  *(volatile int16_t *)0x400090A4  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD5_ATTR  *(volatile uint16_t *)0x400090A6 // TCD Transfer Attributes\n"
  "//register DMA_TCD5_NBYTES_MLNO  0x400090A8 // TCD Minor Byte Count\n"
  "//register DMA_TCD5_NBYTES_MLOFFNO  0x400090A8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD5_NBYTES_MLOFFYES  0x400090A8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD5_SLAST  *(volatile int32_t *)0x400090AC  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD5_DADDR  *(volatile void * volatile *)0x400090B0 // TCD Destination Address\n"
  "//register DMA_TCD5_DOFF  *(volatile int16_t *)0x400090B4  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD5_CITER_ELINKYES *(volatile uint16_t *)0x400090B6 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD5_CITER_ELINKNO *(volatile uint16_t *)0x400090B6 // \?\?\n"
  "//register DMA_TCD5_DLASTSGA *(volatile int32_t *)0x400090B8  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD5_CSR  *(volatile uint16_t *)0x400090BC // TCD Control and Status\n"
  "//register DMA_TCD5_BITER_ELINKYES *(volatile uint16_t *)0x400090BE // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD5_BITER_ELINKNO *(volatile uint16_t *)0x400090BE // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD6_SADDR  *(volatile const void * volatile *)0x400090C0 // TCD Source Addr\n"
  "//register DMA_TCD6_SOFF  *(volatile int16_t *)0x400090C4  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD6_ATTR  *(volatile uint16_t *)0x400090C6 // TCD Transfer Attributes\n"
  "//register DMA_TCD6_NBYTES_MLNO  0x400090C8 // TCD Minor Byte Count\n"
  "//register DMA_TCD6_NBYTES_MLOFFNO  0x400090C8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD6_NBYTES_MLOFFYES  0x400090C8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD6_SLAST  *(volatile int32_t *)0x400090CC  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD6_DADDR  *(volatile void * volatile *)0x400090D0 // TCD Destination Address\n"
  "//register DMA_TCD6_DOFF  *(volatile int16_t *)0x400090D4  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD6_CITER_ELINKYES *(volatile uint16_t *)0x400090D6 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD6_CITER_ELINKNO *(volatile uint16_t *)0x400090D6 // \?\?\n"
  "//register DMA_TCD6_DLASTSGA *(volatile int32_t *)0x400090D8  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD6_CSR  *(volatile uint16_t *)0x400090DC // TCD Control and Status\n"
  "//register DMA_TCD6_BITER_ELINKYES *(volatile uint16_t *)0x400090DE // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD6_BITER_ELINKNO *(volatile uint16_t *)0x400090DE // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD7_SADDR  *(volatile const void * volatile *)0x400090E0 // TCD Source Addr\n"
  "//register DMA_TCD7_SOFF  *(volatile int16_t *)0x400090E4  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD7_ATTR  *(volatile uint16_t *)0x400090E6 // TCD Transfer Attributes\n"
  "//register DMA_TCD7_NBYTES_MLNO  0x400090E8 // TCD Minor Byte Count\n"
  "//register DMA_TCD7_NBYTES_MLOFFNO  0x400090E8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD7_NBYTES_MLOFFYES  0x400090E8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD7_SLAST  *(volatile int32_t *)0x400090EC  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD7_DADDR  *(volatile void * volatile *)0x400090F0 // TCD Destination Address\n"
  "//register DMA_TCD7_DOFF  *(volatile int16_t *)0x400090F4  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD7_CITER_ELINKYES *(volatile uint16_t *)0x400090F6 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD7_CITER_ELINKNO *(volatile uint16_t *)0x400090F6 // \?\?\n"
  "//register DMA_TCD7_DLASTSGA *(volatile int32_t *)0x400090F8  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD7_CSR  *(volatile uint16_t *)0x400090FC // TCD Control and Status\n"
  "//register DMA_TCD7_BITER_ELINKYES *(volatile uint16_t *)0x400090FE // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD7_BITER_ELINKNO *(volatile uint16_t *)0x400090FE // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD8_SADDR  *(volatile const void * volatile *)0x40009100 // TCD Source Addr\n"
  "//register DMA_TCD8_SOFF  *(volatile int16_t *)0x40009104  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD8_ATTR  *(volatile uint16_t *)0x40009106 // TCD Transfer Attributes\n"
  "//register DMA_TCD8_NBYTES_MLNO  0x40009108 // TCD Minor Byte Count\n"
  "//register DMA_TCD8_NBYTES_MLOFFNO  0x40009108 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD8_NBYTES_MLOFFYES  0x40009108 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD8_SLAST  *(volatile int32_t *)0x4000910C  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD8_DADDR  *(volatile void * volatile *)0x40009110 // TCD Destination Address\n"
  "//register DMA_TCD8_DOFF  *(volatile int16_t *)0x40009114  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD8_CITER_ELINKYES *(volatile uint16_t *)0x40009116 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD8_CITER_ELINKNO *(volatile uint16_t *)0x40009116 // \?\?\n"
  "//register DMA_TCD8_DLASTSGA *(volatile int32_t *)0x40009118  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD8_CSR  *(volatile uint16_t *)0x4000911C // TCD Control and Status\n"
  "//register DMA_TCD8_BITER_ELINKYES *(volatile uint16_t *)0x4000911E // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD8_BITER_ELINKNO *(volatile uint16_t *)0x4000911E // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD9_SADDR  *(volatile const void * volatile *)0x40009120 // TCD Source Addr\n"
  "//register DMA_TCD9_SOFF  *(volatile int16_t *)0x40009124  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD9_ATTR  *(volatile uint16_t *)0x40009126 // TCD Transfer Attributes\n"
  "//register DMA_TCD9_NBYTES_MLNO  0x40009128 // TCD Minor Byte Count\n"
  "//register DMA_TCD9_NBYTES_MLOFFNO  0x40009128 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD9_NBYTES_MLOFFYES  0x40009128 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD9_SLAST  *(volatile int32_t *)0x4000912C  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD9_DADDR  *(volatile void * volatile *)0x40009130 // TCD Destination Address\n"
  "//register DMA_TCD9_DOFF  *(volatile int16_t *)0x40009134  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD9_CITER_ELINKYES *(volatile uint16_t *)0x40009136 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD9_CITER_ELINKNO *(volatile uint16_t *)0x40009136 // \?\?\n"
  "//register DMA_TCD9_DLASTSGA *(volatile int32_t *)0x40009138  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD9_CSR  *(volatile uint16_t *)0x4000913C // TCD Control and Status\n"
  "//register DMA_TCD9_BITER_ELINKYES *(volatile uint16_t *)0x4000913E // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD9_BITER_ELINKNO *(volatile uint16_t *)0x4000913E // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD10_SADDR  *(volatile const void * volatile *)0x40009140 // TCD Source Addr\n"
  "//register DMA_TCD10_SOFF  *(volatile int16_t *)0x40009144  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD10_ATTR  *(volatile uint16_t *)0x40009146 // TCD Transfer Attributes\n"
  "//register DMA_TCD10_NBYTES_MLNO  0x40009148 // TCD Minor Byte Count\n"
  "//register DMA_TCD10_NBYTES_MLOFFNO  0x40009148 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD10_NBYTES_MLOFFYES  0x40009148 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD10_SLAST  *(volatile int32_t *)0x4000914C  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD10_DADDR  *(volatile void * volatile *)0x40009150 // TCD Destination Address\n"
  "//register DMA_TCD10_DOFF  *(volatile int16_t *)0x40009154  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD10_CITER_ELINKYES *(volatile uint16_t *)0x40009156 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD10_CITER_ELINKNO *(volatile uint16_t *)0x40009156 // \?\?\n"
  "//register DMA_TCD10_DLASTSGA *(volatile int32_t *)0x40009158  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD10_CSR  *(volatile uint16_t *)0x4000915C // TCD Control and Status\n"
  "//register DMA_TCD10_BITER_ELINKYES *(volatile uint16_t *)0x4000915E // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD10_BITER_ELINKNO *(volatile uint16_t *)0x4000915E // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD11_SADDR  *(volatile const void * volatile *)0x40009160 // TCD Source Addr\n"
  "//register DMA_TCD11_SOFF  *(volatile int16_t *)0x40009164  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD11_ATTR  *(volatile uint16_t *)0x40009166 // TCD Transfer Attributes\n"
  "//register DMA_TCD11_NBYTES_MLNO  0x40009168 // TCD Minor Byte Count\n"
  "//register DMA_TCD11_NBYTES_MLOFFNO  0x40009168 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD11_NBYTES_MLOFFYES  0x40009168 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD11_SLAST  *(volatile int32_t *)0x4000916C  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD11_DADDR  *(volatile void * volatile *)0x40009170 // TCD Destination Address\n"
  "//register DMA_TCD11_DOFF  *(volatile int16_t *)0x40009174  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD11_CITER_ELINKYES *(volatile uint16_t *)0x40009176 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD11_CITER_ELINKNO *(volatile uint16_t *)0x40009176 // \?\?\n"
  "//register DMA_TCD11_DLASTSGA *(volatile int32_t *)0x40009178  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD11_CSR  *(volatile uint16_t *)0x4000917C // TCD Control and Status\n"
  "//register DMA_TCD11_BITER_ELINKYES *(volatile uint16_t *)0x4000917E // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD11_BITER_ELINKNO *(volatile uint16_t *)0x4000917E // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD12_SADDR  *(volatile const void * volatile *)0x40009180 // TCD Source Addr\n"
  "//register DMA_TCD12_SOFF  *(volatile int16_t *)0x40009184  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD12_ATTR  *(volatile uint16_t *)0x40009186 // TCD Transfer Attributes\n"
  "//register DMA_TCD12_NBYTES_MLNO  0x40009188 // TCD Minor Byte Count\n"
  "//register DMA_TCD12_NBYTES_MLOFFNO  0x40009188 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD12_NBYTES_MLOFFYES  0x40009188 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD12_SLAST  *(volatile int32_t *)0x4000918C  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD12_DADDR  *(volatile void * volatile *)0x40009190 // TCD Destination Address\n"
  "//register DMA_TCD12_DOFF  *(volatile int16_t *)0x40009194  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD12_CITER_ELINKYES *(volatile uint16_t *)0x40009196 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD12_CITER_ELINKNO *(volatile uint16_t *)0x40009196 // \?\?\n"
  "//register DMA_TCD12_DLASTSGA *(volatile int32_t *)0x40009198  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD12_CSR  *(volatile uint16_t *)0x4000919C // TCD Control and Status\n"
  "//register DMA_TCD12_BITER_ELINKYES *(volatile uint16_t *)0x4000919E // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD12_BITER_ELINKNO *(volatile uint16_t *)0x4000919E // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD13_SADDR  *(volatile const void * volatile *)0x400091A0 // TCD Source Addr\n"
  "//register DMA_TCD13_SOFF  *(volatile int16_t *)0x400091A4  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD13_ATTR  *(volatile uint16_t *)0x400091A6 // TCD Transfer Attributes\n"
  "//register DMA_TCD13_NBYTES_MLNO  0x400091A8 // TCD Minor Byte Count\n"
  "//register DMA_TCD13_NBYTES_MLOFFNO  0x400091A8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD13_NBYTES_MLOFFYES  0x400091A8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD13_SLAST  *(volatile int32_t *)0x400091AC  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD13_DADDR  *(volatile void * volatile *)0x400091B0 // TCD Destination Address\n"
  "//register DMA_TCD13_DOFF  *(volatile int16_t *)0x400091B4  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD13_CITER_ELINKYES *(volatile uint16_t *)0x400091B6 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD13_CITER_ELINKNO *(volatile uint16_t *)0x400091B6 // \?\?\n"
  "//register DMA_TCD13_DLASTSGA *(volatile int32_t *)0x400091B8  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD13_CSR  *(volatile uint16_t *)0x400091BC // TCD Control and Status\n"
  "//register DMA_TCD13_BITER_ELINKYES *(volatile uint16_t *)0x400091BE // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD13_BITER_ELINKNO *(volatile uint16_t *)0x400091BE // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD14_SADDR  *(volatile const void * volatile *)0x400091C0 // TCD Source Addr\n"
  "//register DMA_TCD14_SOFF  *(volatile int16_t *)0x400091C4  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD14_ATTR  *(volatile uint16_t *)0x400091C6 // TCD Transfer Attributes\n"
  "//register DMA_TCD14_NBYTES_MLNO  0x400091C8 // TCD Minor Byte Count\n"
  "//register DMA_TCD14_NBYTES_MLOFFNO  0x400091C8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD14_NBYTES_MLOFFYES  0x400091C8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD14_SLAST  *(volatile int32_t *)0x400091CC  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD14_DADDR  *(volatile void * volatile *)0x400091D0 // TCD Destination Address\n"
  "//register DMA_TCD14_DOFF  *(volatile int16_t *)0x400091D4  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD14_CITER_ELINKYES *(volatile uint16_t *)0x400091D6 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD14_CITER_ELINKNO *(volatile uint16_t *)0x400091D6 // \?\?\n"
  "//register DMA_TCD14_DLASTSGA *(volatile int32_t *)0x400091D8  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD14_CSR  *(volatile uint16_t *)0x400091DC // TCD Control and Status\n"
  "//register DMA_TCD14_BITER_ELINKYES *(volatile uint16_t *)0x400091DE // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD14_BITER_ELINKNO *(volatile uint16_t *)0x400091DE // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD15_SADDR  *(volatile const void * volatile *)0x400091E0 // TCD Source Addr\n"
  "//register DMA_TCD15_SOFF  *(volatile int16_t *)0x400091E4  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD15_ATTR  *(volatile uint16_t *)0x400091E6 // TCD Transfer Attributes\n"
  "//register DMA_TCD15_NBYTES_MLNO  0x400091E8 // TCD Minor Byte Count\n"
  "//register DMA_TCD15_NBYTES_MLOFFNO  0x400091E8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD15_NBYTES_MLOFFYES  0x400091E8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD15_SLAST  *(volatile int32_t *)0x400091EC  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD15_DADDR  *(volatile void * volatile *)0x400091F0 // TCD Destination Address\n"
  "//register DMA_TCD15_DOFF  *(volatile int16_t *)0x400091F4  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD15_CITER_ELINKYES *(volatile uint16_t *)0x400091F6 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD15_CITER_ELINKNO *(volatile uint16_t *)0x400091F6 // \?\?\n"
  "//register DMA_TCD15_DLASTSGA *(volatile int32_t *)0x400091F8  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD15_CSR  *(volatile uint16_t *)0x400091FC // TCD Control and Status\n"
  "//register DMA_TCD15_BITER_ELINKYES *(volatile uint16_t *)0x400091FE // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD15_BITER_ELINKNO *(volatile uint16_t *)0x400091FE // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//\n"
  "//// Chapter 22: External Watchdog Monitor (EWM)\n"
  "//register EWM_CTRL  *(volatile uint8_t  *)0x40061000 // Control Register\n"
  "//register EWM_SERV  *(volatile uint8_t  *)0x40061001 // Service Register\n"
  "//register EWM_CMPL  *(volatile uint8_t  *)0x40061002 // Compare Low Register\n"
  "//register EWM_CMPH  *(volatile uint8_t  *)0x40061003 // Compare High Register\n"
  "//\n"
  "//// Chapter 23: Watchdog Timer (WDOG)\n"
  "register WDOG_STCTRLH : UInt16 at 0x40052000 // Watchdog Status and Control Register High\n"
  "let WDOG_STCTRLH_DISTESTWDOG : UInt16 = 0x4000  // Allows the WDOG's functional test mode to be disabled permanently.\n"
  "//register WDOG_STCTRLH_BYTESEL(n)  (uint16_t)(((n) & 3) << 12) // selects the byte to be tested when the watchdog is in the byte test mode.\n"
  "let WDOG_STCTRLH_TESTSEL  : UInt16 = 0x0800\n"
  "let WDOG_STCTRLH_TESTWDOG : UInt16 = 0x0400\n"
  "let WDOG_STCTRLH_WAITEN : UInt16 = 0x0080\n"
  "let WDOG_STCTRLH_STOPEN : UInt16 = 0x0040\n"
  "let WDOG_STCTRLH_DBGEN  : UInt16 = 0x0020\n"
  "let WDOG_STCTRLH_ALLOWUPDATE : UInt16 = 0x0010\n"
  "let WDOG_STCTRLH_WINEN : UInt16 = 0x0008\n"
  "let WDOG_STCTRLH_IRQRSTEN : UInt16 = 0x0004\n"
  "let WDOG_STCTRLH_CLKSRC : UInt16 = 0x0002\n"
  "let WDOG_STCTRLH_WDOGEN : UInt16 = 0x0001\n"
  "register WDOG_STCTRLL  : UInt16 at 0x40052002 // Watchdog Status and Control Register Low\n"
  "register WDOG_TOVALH   : UInt16 at 0x40052004 // Watchdog Time-out Value Register High\n"
  "register WDOG_TOVALL   : UInt16 at 0x40052006 // Watchdog Time-out Value Register Low\n"
  "register WDOG_WINH     : UInt16 at 0x40052008 // Watchdog Window Register High\n"
  "register WDOG_WINL     : UInt16 at 0x4005200A // Watchdog Window Register Low\n"
  "register WDOG_REFRESH  : UInt16 at 0x4005200C // Watchdog Refresh register\n"
  "register WDOG_UNLOCK   : UInt16 at 0x4005200E // Watchdog Unlock register\n"
  "let WDOG_UNLOCK_SEQ1 : UInt16   = 0xC520\n"
  "let WDOG_UNLOCK_SEQ2 : UInt16   = 0xD928\n"
  "register WDOG_TMROUTH  : UInt16 at 0x40052010 // Watchdog Timer Output Register High\n"
  "register WDOG_TMROUTL  : UInt16 at 0x40052012 // Watchdog Timer Output Register Low\n"
  "register WDOG_RSTCNT   : UInt16 at 0x40052014 // Watchdog Reset Count register\n"
  "register WDOG_PRESC    : UInt16 at 0x40052016 // Watchdog Prescaler register\n"
  "//\n"
  "//// Chapter 24: Multipurpose Clock Generator (MCG)\n"
  "register MCG_C1 : UInt8 at 0x40064000 // MCG Control 1 Register\n"
  "let MCG_C1_IREFSTEN : UInt8 = 0x01   // Internal Reference Stop Enable, Controls whether or not the internal reference clock remains enabled when the "
  "MCG enters Stop mode.\n"
  "let MCG_C1_IRCLKEN : UInt8 = 0x02   // Internal Reference Clock Enable, Enables the internal reference clock for use as MCGIRCLK.\n"
  "let MCG_C1_IREFS : UInt8 = 0x04   // Internal Reference Select, Selects the reference clock source for the FLL.\n"
  "//register MCG_C1_FRDIV(n)   (uint8_t)(((n) & 0x07) << 3) // FLL External Reference Divider, Selects the amount to divide down the external reference "
  "clock for the FLL\n"
  "//register MCG_C1_CLKS(n)   (uint8_t)(((n) & 0x03) << 6) // Clock Source Select, Selects the clock source for MCGOUTCLK\n"
  "register MCG_C2 : UInt8 at 0x40064001 // MCG Control 2 Register\n"
  "let MCG_C2_IRCS : UInt8  = 0x01   // Internal Reference Clock Select, Selects between the fast or slow internal reference clock source.\n"
  "let MCG_C2_LP : UInt8 = 0x02   // Low Power Select, Controls whether the FLL or PLL is disabled in BLPI and BLPE modes.\n"
  "let MCG_C2_EREFS : UInt8 = 0x04   // External Reference Select, Selects the source for the external reference clock. \n"
  "let MCG_C2_HGO0 : UInt8 = 0x08   // High Gain Oscillator Select, Controls the crystal oscillator mode of operation\n"
  "//register MCG_C2_RANGE0(n)  (uint8_t)(((n) & 0x03) << 4) // Frequency Range Select, Selects the frequency range for the crystal oscillator\n"
  "let MCG_C2_LOCRE0 : UInt8 = 0x80   // Loss of Clock Reset Enable, Determines whether an interrupt or a reset request is made following a loss of OSC0 "
  "\n"
  "register MCG_C3 : UInt8 at 0x40064002 // MCG Control 3 Register\n"
  "//register MCG_C3_SCTRIM(n)  (uint8_t)(n)   // Slow Internal Reference Clock Trim Setting\n"
  "register MCG_C4 : UInt8 at 0x40064003 // MCG Control 4 Register\n"
  "let MCG_C4_SCFTRIM : UInt8 = 0x01   // Slow Internal Reference Clock Fine Trim\n"
  "//register MCG_C4_FCTRIM(n)  (uint8_t)(((n) & 0x0F) << 1) // Fast Internal Reference Clock Trim Setting\n"
  "//register MCG_C4_DRST_DRS(n)  (uint8_t)(((n) & 0x03) << 5) // DCO Range Select\n"
  "let MCG_C4_DMX32 : UInt8 = 0x80   // DCO Maximum Frequency with 32.768 kHz Reference, controls whether the DCO frequency range is narrowed\n"
  "register MCG_C5 : UInt8 at 0x40064004 // MCG Control 5 Register\n"
  "//register MCG_C5_PRDIV0(n)  (uint8_t)((n) & 0x1F)  // PLL External Reference Divider\n"
  "let MCG_C5_PLLSTEN0 : UInt8 = 0x20   // PLL Stop Enable\n"
  "let MCG_C5_PLLCLKEN0 : UInt8 = 0x40   // PLL Clock Enable\n"
  "register MCG_C6 : UInt8 at 0x40064005 // MCG Control 6 Register\n"
  "//register MCG_C6_VDIV0(n)   (uint8_t)((n) & 0x1F)  // VCO 0 Divider\n"
  "let MCG_C6_CME0 : UInt8 = 0x20   // Clock Monitor Enable\n"
  "let MCG_C6_PLLS : UInt8 = 0x40   // PLL Select, Controls whether the PLL or FLL output is selected as the MCG source when CLKS[1:0]=00. \n"
  "//register MCG_C6_LOLIE0   (uint8_t)0x80   // Loss of Lock Interrrupt Enable\n"
  "register MCG_S  : UInt8 at 0x40064006 // MCG Status Register\n"
  "let MCG_S_IRCST : UInt8 = 0x01   // Internal Reference Clock Status\n"
  "let MCG_S_OSCINIT0 : UInt8 = 0x02   // OSC Initialization, resets to 0, is set to 1 after the initialization cycles of the crystal oscillator\n"
  "//register MCG_S_CLKST(n)   (uint8_t)(((n) & 0x03) << 2) // Clock Mode Status, 0=FLL is selected, 1= Internal ref, 2=External ref, 3=PLL\n"
  "let MCG_S_CLKST_MASK : UInt8 = 0x0C\n"
  "let MCG_S_IREFST : UInt8 = 0x10   // Internal Reference Status\n"
  "let MCG_S_PLLST : UInt8 = 0x20   // PLL Select Status\n"
  "let MCG_S_LOCK0 : UInt8  = 0x40   // Lock Status, 0=PLL Unlocked, 1=PLL Locked\n"
  "let MCG_S_LOLS0 : UInt8  = 0x80   // Loss of Lock Status\n"
  "\n"
  "register MCG_SC : UInt8 at 0x40064008 // MCG Status and Control Register\n"
  "let MCG_SC_LOCS0 : UInt8 = 0x01   // OSC0 Loss of Clock Status\n"
  "//register MCG_SC_FCRDIV(n)  (uint8_t)(((n) & 0x07) << 1) // Fast Clock Internal Reference Divider\n"
  "let MCG_SC_FLTPRSRV : UInt8 = 0x10   // FLL Filter Preserve Enable\n"
  "let MCG_SC_ATMF : UInt8 = 0x20   // Automatic Trim Machine Fail Flag\n"
  "let MCG_SC_ATMS : UInt8 = 0x40   // Automatic Trim Machine Select\n"
  "let MCG_SC_ATME : UInt8 = 0x80   // Automatic Trim Machine Enable\n"
  "\n"
  "register MCG_ATCVH : UInt8 at 0x4006400A // MCG Auto Trim Compare Value High Register\n"
  "register MCG_ATCVL : UInt8 at 0x4006400B // MCG Auto Trim Compare Value Low Register\n"
  "register MCG_C7    : UInt8 at 0x4006400C // MCG Control 7 Register\n"
  "register MCG_C8    : UInt8 at 0x4006400D // MCG Control 8 Register\n"
  "//\n"
  "//// Chapter 25: Oscillator (OSC)\n"
  "register OSC0_CR : UInt8 at 0x40065000 // OSC Control Register\n"
  "let OSC_SC16P  : UInt8 = 0x01   // Oscillator 16 pF Capacitor Load Configure\n"
  "let OSC_SC8P   : UInt8 = 0x02   // Oscillator 8 pF Capacitor Load Configure\n"
  "let OSC_SC4P   : UInt8 = 0x04   // Oscillator 4 pF Capacitor Load Configure\n"
  "let OSC_SC2P   : UInt8 = 0x08   // Oscillator 2 pF Capacitor Load Configure\n"
  "let OSC_EREFSTEN : UInt8 = 0x20   // External Reference Stop Enable, Controls whether or not the external reference clock (OSCERCLK) remains enabled w"
  "hen MCU enters Stop mode.\n"
  "let OSC_ERCLKEN : UInt8 = 0x80   // External Reference Enable, Enables external reference clock (OSCERCLK).\n"
  "//\n"
  "//// Chapter 27: Flash Memory Controller (FMC)\n"
  "register FMC_PFAPR     : UInt32 at 0x4001F000 // Flash Access Protection\n"
  "register FMC_PFB0CR    : UInt32 at 0x4001F004 // Flash Control\n"
  "register FMC_TAGVDW0S0 : UInt32 at 0x4001F100 // Cache Tag Storage\n"
  "register FMC_TAGVDW0S1 : UInt32 at 0x4001F104 // Cache Tag Storage\n"
  "register FMC_TAGVDW1S0 : UInt32 at 0x4001F108 // Cache Tag Storage\n"
  "register FMC_TAGVDW1S1 : UInt32 at 0x4001F10C // Cache Tag Storage\n"
  "register FMC_TAGVDW2S0 : UInt32 at 0x4001F110 // Cache Tag Storage\n"
  "register FMC_TAGVDW2S1 : UInt32 at 0x4001F114 // Cache Tag Storage\n"
  "register FMC_TAGVDW3S0 : UInt32 at 0x4001F118 // Cache Tag Storage\n"
  "register FMC_TAGVDW3S1 : UInt32 at 0x4001F11C // Cache Tag Storage\n"
  "register FMC_DATAW0S0  : UInt32 at 0x4001F200 // Cache Data Storage\n"
  "register FMC_DATAW0S1  : UInt32 at 0x4001F204 // Cache Data Storage\n"
  "register FMC_DATAW1S0  : UInt32 at 0x4001F208 // Cache Data Storage\n"
  "register FMC_DATAW1S1  : UInt32 at 0x4001F20C // Cache Data Storage\n"
  "register FMC_DATAW2S0  : UInt32 at 0x4001F210 // Cache Data Storage\n"
  "register FMC_DATAW2S1  : UInt32 at 0x4001F214 // Cache Data Storage\n"
  "register FMC_DATAW3S0  : UInt32 at 0x4001F218 // Cache Data Storage\n"
  "register FMC_DATAW3S1  : UInt32 at 0x4001F21C // Cache Data Storage\n"
  "//\n"
  "//// Chapter 28: Flash Memory Module (FTFL)\n"
  "//register FTFL_FST *(volatile uint8_t  *)0x40020000      // Flash Status Register\n"
  "//register FTFL_FSTAT_CCIF   (uint8_t)0x80   // Command Complete Interrupt Flag\n"
  "//register FTFL_FSTAT_RDCOLERR  (uint8_t)0x40   // Flash Read Collision Error Flag\n"
  "//register FTFL_FSTAT_ACCERR  (uint8_t)0x20   // Flash Access Error Flag\n"
  "//register FTFL_FSTAT_FPVIOL  (uint8_t)0x10   // Flash Protection Violation Flag\n"
  "//register FTFL_FSTAT_MGSTAT0  (uint8_t)0x01   // Memory Controller Command Completion Status Flag\n"
  "//register FTFL_FCNFG  *(volatile uint8_t  *)0x40020001      // Flash Configuration Register\n"
  "//register FTFL_FCNFG_CCIE   (uint8_t)0x80   // Command Complete Interrupt Enable\n"
  "//register FTFL_FCNFG_RDCOLLIE  (uint8_t)0x40   // Read Collision Error Interrupt Enable\n"
  "//register FTFL_FCNFG_ERSAREQ  (uint8_t)0x20   // Erase All Request\n"
  "//register FTFL_FCNFG_ERSSUSP  (uint8_t)0x10   // Erase Suspend\n"
  "//register FTFL_FCNFG_PFLSH  (uint8_t)0x04   // Flash memory configuration\n"
  "//register FTFL_FCNFG_RAMRDY  (uint8_t)0x02   // RAM Ready\n"
  "//register FTFL_FCNFG_EEERDY  (uint8_t)0x01   // EEPROM Ready\n"
  "//register FTFL_FSEC  *(const    uint8_t  *)0x40020002      // Flash Security Register\n"
  "//register FTFL_FOPT  *(const    uint8_t  *)0x40020003      // Flash Option Register\n"
  "//register FTFL_FCCOB3  *(volatile uint8_t  *)0x40020004      // Flash Common Command Object Registers\n"
  "//register FTFL_FCCOB2  *(volatile uint8_t  *)0x40020005\n"
  "//register FTFL_FCCOB1  *(volatile uint8_t  *)0x40020006\n"
  "//register FTFL_FCCOB0  *(volatile uint8_t  *)0x40020007\n"
  "//register FTFL_FCCOB7  *(volatile uint8_t  *)0x40020008\n"
  "//register FTFL_FCCOB6  *(volatile uint8_t  *)0x40020009\n"
  "//register FTFL_FCCOB5  *(volatile uint8_t  *)0x4002000A\n"
  "//register FTFL_FCCOB4  *(volatile uint8_t  *)0x4002000B\n"
  "//register FTFL_FCCOBB  *(volatile uint8_t  *)0x4002000C\n"
  "//register FTFL_FCCOBA  *(volatile uint8_t  *)0x4002000D\n"
  "//register FTFL_FCCOB9  *(volatile uint8_t  *)0x4002000E\n"
  "//register FTFL_FCCOB8  *(volatile uint8_t  *)0x4002000F\n"
  "//register FTFL_FPROT3  *(volatile uint8_t  *)0x40020010      // Program Flash Protection Registers\n"
  "//register FTFL_FPROT2  *(volatile uint8_t  *)0x40020011      // Program Flash Protection Registers\n"
  "//register FTFL_FPROT1  *(volatile uint8_t  *)0x40020012      // Program Flash Protection Registers\n"
  "//register FTFL_FPROT0  *(volatile uint8_t  *)0x40020013      // Program Flash Protection Registers\n"
  "//register FTFL_FEPROT  *(volatile uint8_t  *)0x40020016      // EEPROM Protection Register\n"
  "//register FTFL_FDPROT  *(volatile uint8_t  *)0x40020017      // Data Flash Protection Register\n"
  "//\n"
  "//// Chapter 30: Cyclic Redundancy Check (CRC)\n"
  "register CRC_CRC   : UInt32 at 0x40032000 // CRC Data register\n"
  "register CRC_GPOLY : UInt32 at 0x40032004 // CRC Polynomial register\n"
  "register CRC_CTRL  : UInt32 at 0x40032008 // CRC Control register\n"
  "//\n"
  "//// Chapter 31: Analog-to-Digital Converter (ADC)\n"
  "register ADC0_SC1A   : UInt32 at 0x4003B000 // ADC status and control registers 1\n"
  "register ADC0_SC1B   : UInt32 at 0x4003B004 // ADC status and control registers 1\n"
  "let ADC_SC1_COCO  : UInt32 = 0x80   // Conversion complete flag\n"
  "let ADC_SC1_AIEN  : UInt32 = 0x40   // Interrupt enable\n"
  "let ADC_SC1_DIFF  : UInt32 = 0x20   // Differential mode enable\n"
  "//register ADC_SC1_ADCH(n)    ((n) & 0x1F)  // Input channel select\n"
  "register ADC0_CFG1   : UInt32 at 0x4003B008 // ADC configuration register 1\n"
  "let ADC_CFG1_ADLPC  : UInt32 = 0x80   // Low-power configuration\n"
  "//register ADC_CFG1_ADIV(n)   (((n) & 3) << 5) // Clock divide select, 0=direct, 1=div2, 2=div4, 3=div8\n"
  "let ADC_CFG1_ADLSMP  : UInt32 = 0x10   // Sample time configuration, 0=Short, 1=Long\n"
  "//register ADC_CFG1_MODE(n)   (((n) & 3) << 2) // Conversion mode, 0=8 bit, 1=12 bit, 2=10 bit, 3=16 bit\n"
  "//register ADC_CFG1_ADICLK(n)   (((n) & 3) << 0) // Input clock, 0=bus, 1=bus/2, 2=OSCERCLK, 3=async\n"
  "register ADC0_CFG2  : UInt32 at 0x4003B00C // Configuration register 2\n"
  "let ADC_CFG2_MUXSEL  : UInt32 = 0x10   // 0=a channels, 1=b channels\n"
  "let ADC_CFG2_ADACKEN  : UInt32 = 0x08   // async clock enable\n"
  "let ADC_CFG2_ADHSC   : UInt32 = 0x04   // High speed configuration\n"
  "//register ADC_CFG2_ADLSTS(n)   (((n) & 3) << 0) // Sample time, 0=24 cycles, 1=12 cycles, 2=6 cycles, 3=2 cycles\n"
  "register ADC0_RA    : UInt32 at 0x4003B010 // ADC data result register\n"
  "register ADC0_RB    : UInt32 at 0x4003B014 // ADC data result register\n"
  "register ADC0_CV1   : UInt32 at 0x4003B018 // Compare value registers\n"
  "register ADC0_CV2   : UInt32 at 0x4003B01C // Compare value registers\n"
  "register ADC0_SC2   : UInt32 at 0x4003B020 // Status and control register 2\n"
  "let ADC_SC2_ADACT  : UInt32 = 0x80   // Conversion active\n"
  "let ADC_SC2_ADTRG  : UInt32 = 0x40   // Conversion trigger select, 0=software, 1=hardware\n"
  "let ADC_SC2_ACFE   : UInt32 = 0x20   // Compare function enable\n"
  "let ADC_SC2_ACFGT  : UInt32 = 0x10   // Compare function greater than enable\n"
  "let ADC_SC2_ACREN  : UInt32 = 0x08   // Compare function range enable\n"
  "let ADC_SC2_DMAEN  : UInt32= 0x04   // DMA enable\n"
  "//register ADC_SC2_REFSEL(n)   (((n) & 3) << 0) // Voltage reference, 0=vcc/external, 1=1.2 volts\n"
  "register ADC0_SC3   : UInt32 at 0x4003B024 // Status and control register 3\n"
  "let ADC_SC3_CAL  : UInt32 = 0x80   // Calibration, 1=begin, stays set while cal in progress\n"
  "let ADC_SC3_CALF  : UInt32= 0x40   // Calibration failed flag\n"
  "let ADC_SC3_ADCO  : UInt32= 0x08   // Continuous conversion enable\n"
  "let ADC_SC3_AVGE  : UInt32= 0x04   // Hardware average enable\n"
  "//register ADC_SC3_AVGS(n)    (((n) & 3) << 0) // avg select, 0=4 samples, 1=8 samples, 2=16 samples, 3=32 samples\n"
  "register ADC0_OFS   : UInt32 at 0x4003B028 // ADC offset correction register\n"
  "register ADC0_PG    : UInt32 at 0x4003B02C // ADC plus-side gain register\n"
  "register ADC0_MG    : UInt32 at 0x4003B030 // ADC minus-side gain register\n"
  "register ADC0_CLPD  : UInt32 at 0x4003B034 // ADC plus-side general calibration value register\n"
  "register ADC0_CLPS  : UInt32 at 0x4003B038 // ADC plus-side general calibration value register\n"
  "register ADC0_CLP4  : UInt32 at 0x4003B03C // ADC plus-side general calibration value register\n"
  "register ADC0_CLP3  : UInt32 at 0x4003B040 // ADC plus-side general calibration value register\n"
  "register ADC0_CLP2  : UInt32 at 0x4003B044 // ADC plus-side general calibration value register\n"
  "register ADC0_CLP1  : UInt32 at 0x4003B048 // ADC plus-side general calibration value register\n"
  "register ADC0_CLP0  : UInt32 at 0x4003B04C // ADC plus-side general calibration value register\n"
  "register ADC0_PGA   : UInt32 at 0x4003B050 // ADC Programmable Gain Amplifier\n"
  "let ADC0_PGA_PGAEN  : UInt32 = 0x00800000  // Enable\n"
  "let ADC0_PGA_PGALPB  : UInt32 = 0x00100000  // Low-Power Mode Control, 0=low power, 1=normal\n"
  "//register ADC0_PGA_PGAG(n)   (((n) & 15) << 16) // Gain, 0=1X, 1=2X, 2=4X, 3=8X, 4=16X, 5=32X, 6=64X\n"
  "register ADC0_CLMD   : UInt32 at 0x4003B054 // ADC minus-side general calibration value register\n"
  "register ADC0_CLMS   : UInt32 at 0x4003B058 // ADC minus-side general calibration value register\n"
  "register ADC0_CLM4   : UInt32 at 0x4003B05C // ADC minus-side general calibration value register\n"
  "register ADC0_CLM3   : UInt32 at 0x4003B060 // ADC minus-side general calibration value register\n"
  "register ADC0_CLM2   : UInt32 at 0x4003B064 // ADC minus-side general calibration value register\n"
  "register ADC0_CLM1   : UInt32 at 0x4003B068 // ADC minus-side general calibration value register\n"
  "register ADC0_CLM0   : UInt32 at 0x4003B06C // ADC minus-side general calibration value register\n"
  "//\n"
  "register ADC1_SC1A   : UInt32 at 0x400BB000 // ADC status and control registers 1\n"
  "register ADC1_SC1B   : UInt32 at 0x400BB004 // ADC status and control registers 1\n"
  "register ADC1_CFG1   : UInt32 at 0x400BB008 // ADC configuration register 1\n"
  "register ADC1_CFG2   : UInt32 at 0x400BB00C // Configuration register 2\n"
  "register ADC1_RA     : UInt32 at 0x400BB010 // ADC data result register\n"
  "register ADC1_RB     : UInt32 at 0x400BB014 // ADC data result register\n"
  "register ADC1_CV1    : UInt32 at 0x400BB018 // Compare value registers\n"
  "register ADC1_CV2    : UInt32 at 0x400BB01C // Compare value registers\n"
  "register ADC1_SC2    : UInt32 at 0x400BB020 // Status and control register 2\n"
  "register ADC1_SC3    : UInt32 at 0x400BB024 // Status and control register 3\n"
  "register ADC1_OFS    : UInt32 at 0x400BB028 // ADC offset correction register\n"
  "register ADC1_PG     : UInt32 at 0x400BB02C // ADC plus-side gain register\n"
  "register ADC1_MG     : UInt32 at 0x400BB030 // ADC minus-side gain register\n"
  "register ADC1_CLPD   : UInt32 at 0x400BB034 // ADC plus-side general calibration value register\n"
  "register ADC1_CLPS   : UInt32 at 0x400BB038 // ADC plus-side general calibration value register\n"
  "register ADC1_CLP4   : UInt32 at 0x400BB03C // ADC plus-side general calibration value register\n"
  "register ADC1_CLP3   : UInt32 at 0x400BB040 // ADC plus-side general calibration value register\n"
  "register ADC1_CLP2   : UInt32 at 0x400BB044 // ADC plus-side general calibration value register\n"
  "register ADC1_CLP1   : UInt32 at 0x400BB048 // ADC plus-side general calibration value register\n"
  "register ADC1_CLP0   : UInt32 at 0x400BB04C // ADC plus-side general calibration value register\n"
  "register ADC1_PGA    : UInt32 at 0x400BB050 // ADC Programmable Gain Amplifier\n"
  "register ADC1_CLMD   : UInt32 at 0x400BB054 // ADC minus-side general calibration value register\n"
  "register ADC1_CLMS   : UInt32 at 0x400BB058 // ADC minus-side general calibration value register\n"
  "register ADC1_CLM4   : UInt32 at 0x400BB05C // ADC minus-side general calibration value register\n"
  "register ADC1_CLM3   : UInt32 at 0x400BB060 // ADC minus-side general calibration value register\n"
  "register ADC1_CLM2   : UInt32 at 0x400BB064 // ADC minus-side general calibration value register\n"
  "register ADC1_CLM1   : UInt32 at 0x400BB068 // ADC minus-side general calibration value register\n"
  "register ADC1_CLM0   : UInt32 at 0x400BB06C // ADC minus-side general calibration value register\n"
  "\n"
  "register DAC0_DAT0L : UInt8 at 0x400CC000 // DAC Data Low Register \n"
  "register DAC0_DATH  : UInt8 at 0x400CC001 // DAC Data High Register \n"
  "register DAC0_DAT1L : UInt8 at 0x400CC002 // DAC Data Low Register \n"
  "register DAC0_DAT2L : UInt8 at 0x400CC004 // DAC Data Low Register \n"
  "register DAC0_DAT3L : UInt8 at 0x400CC006 // DAC Data Low Register \n"
  "register DAC0_DAT4L : UInt8 at 0x400CC008 // DAC Data Low Register \n"
  "register DAC0_DAT5L : UInt8 at 0x400CC00A // DAC Data Low Register \n"
  "register DAC0_DAT6L : UInt8 at 0x400CC00C // DAC Data Low Register \n"
  "register DAC0_DAT7L : UInt8 at 0x400CC00E // DAC Data Low Register \n"
  "register DAC0_DAT8L : UInt8 at 0x400CC010 // DAC Data Low Register \n"
  "register DAC0_DAT9L : UInt8 at 0x400CC012 // DAC Data Low Register \n"
  "register DAC0_DAT10L : UInt8 at 0x400CC014 // DAC Data Low Register \n"
  "register DAC0_DAT11L : UInt8 at 0x400CC016 // DAC Data Low Register \n"
  "register DAC0_DAT12L : UInt8 at 0x400CC018 // DAC Data Low Register \n"
  "register DAC0_DAT13L : UInt8 at 0x400CC01A // DAC Data Low Register \n"
  "register DAC0_DAT14L : UInt8 at 0x400CC01C // DAC Data Low Register \n"
  "register DAC0_DAT15L : UInt8 at 0x400CC01E // DAC Data Low Register \n"
  "register DAC0_SR     : UInt8 at 0x400CC020 // DAC Status Register \n"
  "register DAC0_C0     : UInt8 at 0x400CC021 // DAC Control Register \n"
  "let DAC_C0_DACEN  : UInt8 = 0x80    // DAC Enable\n"
  "let DAC_C0_DACRFS : UInt8 = 0x40    // DAC Reference Select\n"
  "let DAC_C0_DACTRGSEL : UInt8 = 0x20    // DAC Trigger Select\n"
  "let DAC_C0_DACSWTRG  : UInt8 = 0x10    // DAC Software Trigger\n"
  "let DAC_C0_LPEN  : UInt8 = 0x08    // DAC Low Power Control\n"
  "let DAC_C0_DACBWIEN  : UInt8 = 0x04    // DAC Buffer Watermark Interrupt Enable\n"
  "let DAC_C0_DACBTIEN : UInt8 = 0x02    // DAC Buffer Read Pointer Top Flag Interrupt Enable\n"
  "let DAC_C0_DACBBIEN : UInt8 = 0x01    // DAC Buffer Read Pointer Bottom Flag Interrupt Enable\n"
  "\n"
  "register DAC0_C1  : UInt8 at 0x400CC022 // DAC Control Register 1 \n"
  "let DAC_C1_DMAEN : UInt8 = 0x80    // DMA Enable Select\n"
  "//register DAC_C1_DACBFWM(n)  (((n) & 3) << 3)  // DAC Buffer Watermark Select\n"
  "//register DAC_C1_DACBFMD(n)  (((n) & 3) << 0)  // DAC Buffer Work Mode Select\n"
  "let DAC_C1_DACBFEN : UInt8 = 0x00    // DAC Buffer Enable\n"
  "//\n"
  "register DAC0_C2  : UInt8 at 0x400CC023 // DAC Control Register 2 \n"
  "//register DAC_C2_DACBFRP(n)  (((n) & 15) << 4)  // DAC Buffer Read Pointer\n"
  "//register DAC_C2_DACBFUP(n)  (((n) & 15) << 0)  // DAC Buffer Upper Limit\n"
  "//\n"
  "//\n"
  "////register MCG_C2_RANGE0(n)  (uint8_t)(((n) & 0x03) << 4) // Frequency Range Select, Selects the frequency range for the crystal oscillator\n"
  "////register MCG_C2_LOCRE0   (uint8_t)0x80   // Loss of Clock Reset Enable, Determines whether an interrupt or a reset request is made following a los"
  "s of OSC0 \n"
  "//\n"
  "//// Chapter 32: Comparator (CMP)\n"
  "register CMP0_CR0   : UInt8 at 0x40073000 // CMP Control Register 0\n"
  "register CMP0_CR1   : UInt8 at 0x40073001 // CMP Control Register 1\n"
  "register CMP0_FPR   : UInt8 at 0x40073002 // CMP Filter Period Register\n"
  "register CMP0_SCR   : UInt8 at 0x40073003 // CMP Status and Control Register\n"
  "register CMP0_DACCR : UInt8 at 0x40073004 // DAC Control Register\n"
  "register CMP0_MUXCR : UInt8 at 0x40073005 // MUX Control Register\n"
  "register CMP1_CR0   : UInt8 at 0x40073008 // CMP Control Register 0\n"
  "register CMP1_CR1   : UInt8 at 0x40073009 // CMP Control Register 1\n"
  "register CMP1_FPR   : UInt8 at 0x4007300A // CMP Filter Period Register\n"
  "register CMP1_SCR   : UInt8 at 0x4007300B // CMP Status and Control Register\n"
  "register CMP1_DACCR : UInt8 at 0x4007300C // DAC Control Register\n"
  "register CMP1_MUXCR : UInt8 at 0x4007300D // MUX Control Register\n"
  "//\n"
  "//// Chapter 33: Voltage Reference (VREFV1)\n"
  "register VREF_TRM  : UInt8 at 0x40074000 // VREF Trim Register\n"
  "register VREF_SC   : UInt8 at 0x40074001 // VREF Status and Control Register\n"
  "//\n"
  "//// Chapter 34: Programmable Delay Block (PDB)\n"
  "//register PDB0_SC    0x40036000 // Status and Control Register\n"
  "//register PDB_SC_LDMOD(n)   (((n) & 3) << 18) // Load Mode Select\n"
  "//register PDB_SC_PDBEIE   0x00020000  // Sequence Error Interrupt Enable\n"
  "//register PDB_SC_SWTRIG   0x00010000  // Software Trigger\n"
  "//register PDB_SC_DMAEN   0x00008000  // DMA Enable\n"
  "//register PDB_SC_PRESCALER(n)  (((n) & 7) << 12) // Prescaler Divider Select\n"
  "//register PDB_SC_TRGSEL(n)  (((n) & 15) << 8) // Trigger Input Source Select\n"
  "//register PDB_SC_PDBEN   0x00000080  // PDB Enable\n"
  "//register PDB_SC_PDBIF   0x00000040  // PDB Interrupt Flag\n"
  "//register PDB_SC_PDBIE   0x00000020  // PDB Interrupt Enable.\n"
  "//register PDB_SC_MULT(n)   (((n) & 3) << 2) // Multiplication Factor\n"
  "//register PDB_SC_CONT   0x00000002  // Continuous Mode Enable\n"
  "//register PDB_SC_LDOK   0x00000001  // Load OK\n"
  "//register PDB0_MOD   0x40036004 // Modulus Register\n"
  "//register PDB0_CNT   0x40036008 // Counter Register\n"
  "//register PDB0_IDLY   0x4003600C // Interrupt Delay Register\n"
  "//register PDB0_CH0C1   0x40036010 // Channel n Control Register 1\n"
  "//register PDB0_CH0S   0x40036014 // Channel n Status Register\n"
  "//register PDB0_CH0DLY0   0x40036018 // Channel n Delay 0 Register\n"
  "//register PDB0_CH0DLY1   0x4003601C // Channel n Delay 1 Register\n"
  "//register PDB0_POEN   0x40036190 // Pulse-Out n Enable Register\n"
  "//register PDB0_PO0DLY   0x40036194 // Pulse-Out n Delay Register\n"
  "//register PDB0_PO1DLY   0x40036198 // Pulse-Out n Delay Register\n"
  "//\n"
  "//// Chapter 35: FlexTimer Module (FTM)\n"
  "//register FTM0_SC    0x40038000 // Status And Control\n"
  "//register FTM_SC_TOF   0x80    // Timer Overflow Flag\n"
  "//register FTM_SC_TOIE   0x40    // Timer Overflow Interrupt Enable\n"
  "//register FTM_SC_CPWMS   0x20    // Center-Aligned PWM Select\n"
  "//register FTM_SC_CLKS(n)   (((n) & 3) << 3)  // Clock Source Selection\n"
  "//register FTM_SC_PS(n)   (((n) & 7) << 0)  // Prescale Factor Selection\n"
  "//register FTM0_CNT   0x40038004 // Counter\n"
  "//register FTM0_MOD   0x40038008 // Modulo\n"
  "//register FTM0_C0SC   0x4003800C // Channel 0 Status And Control\n"
  "//register FTM0_C0V   0x40038010 // Channel 0 Value\n"
  "//register FTM0_C1SC   0x40038014 // Channel 1 Status And Control\n"
  "//register FTM0_C1V   0x40038018 // Channel 1 Value\n"
  "//register FTM0_C2SC   0x4003801C // Channel 2 Status And Control\n"
  "//register FTM0_C2V   0x40038020 // Channel 2 Value\n"
  "//register FTM0_C3SC   0x40038024 // Channel 3 Status And Control\n"
  "//register FTM0_C3V   0x40038028 // Channel 3 Value\n"
  "//register FTM0_C4SC   0x4003802C // Channel 4 Status And Control\n"
  "//register FTM0_C4V   0x40038030 // Channel 4 Value\n"
  "//register FTM0_C5SC   0x40038034 // Channel 5 Status And Control\n"
  "//register FTM0_C5V   0x40038038 // Channel 5 Value\n"
  "//register FTM0_C6SC   0x4003803C // Channel 6 Status And Control\n"
  "//register FTM0_C6V   0x40038040 // Channel 6 Value\n"
  "//register FTM0_C7SC   0x40038044 // Channel 7 Status And Control\n"
  "//register FTM0_C7V   0x40038048 // Channel 7 Value\n"
  "//register FTM0_CNTIN   0x4003804C // Counter Initial Value\n"
  "//register FTM0_STATUS   0x40038050 // Capture And Compare Status\n"
  "//register FTM0_MODE   0x40038054 // Features Mode Selection\n"
  "//register FTM_MODE_FAULTIE  0x80    // Fault Interrupt Enable\n"
  "//register FTM_MODE_FAULTM(n)  (((n) & 3) << 5)  // Fault Control Mode\n"
  "//register FTM_MODE_CAPTEST  0x10    // Capture Test Mode Enable\n"
  "//register FTM_MODE_PWMSYNC  0x08    // PWM Synchronization Mode\n"
  "//register FTM_MODE_WPDIS   0x04    // Write Protection Disable\n"
  "//register FTM_MODE_INIT   0x02    // Initialize The Channels Output\n"
  "//register FTM_MODE_FTMEN   0x01    // FTM Enable\n"
  "//register FTM0_SYNC   0x40038058 // Synchronization\n"
  "//register FTM_SYNC_SWSYNC   0x80    // \n"
  "//register FTM_SYNC_TRIG2   0x40    // \n"
  "//register FTM_SYNC_TRIG1   0x20    // \n"
  "//register FTM_SYNC_TRIG0   0x10    // \n"
  "//register FTM_SYNC_SYNCHOM  0x08    // \n"
  "//register FTM_SYNC_REINIT   0x04    // \n"
  "//register FTM_SYNC_CNTMAX   0x02    // \n"
  "//register FTM_SYNC_CNTMIN   0x01    // \n"
  "//register FTM0_OUTINIT   0x4003805C // Initial State For Channels Output\n"
  "//register FTM0_OUTMASK   0x40038060 // Output Mask\n"
  "//register FTM0_COMBINE   0x40038064 // Function For Linked Channels\n"
  "//register FTM0_DEADTIME   0x40038068 // Deadtime Insertion Control\n"
  "//register FTM0_EXTTRIG   0x4003806C // FTM External Trigger\n"
  "//register FTM0_POL   0x40038070 // Channels Polarity\n"
  "//register FTM0_FMS   0x40038074 // Fault Mode Status\n"
  "//register FTM0_FILTER   0x40038078 // Input Capture Filter Control\n"
  "//register FTM0_FLTCTRL   0x4003807C // Fault Control\n"
  "//register FTM0_QDCTRL   0x40038080 // Quadrature Decoder Control And Status\n"
  "//register FTM0_CONF   0x40038084 // Configuration\n"
  "//register FTM0_FLTPOL   0x40038088 // FTM Fault Input Polarity\n"
  "//register FTM0_SYNCONF   0x4003808C // Synchronization Configuration\n"
  "//register FTM0_INVCTRL   0x40038090 // FTM Inverting Control\n"
  "//register FTM0_SWOCTRL   0x40038094 // FTM Software Output Control\n"
  "//register FTM0_PWMLOAD   0x40038098 // FTM PWM Load\n"
  "//register FTM1_SC    0x40039000 // Status And Control\n"
  "//register FTM1_CNT   0x40039004 // Counter\n"
  "//register FTM1_MOD   0x40039008 // Modulo\n"
  "//register FTM1_C0SC   0x4003900C // Channel 0 Status And Control\n"
  "//register FTM1_C0V   0x40039010 // Channel 0 Value\n"
  "//register FTM1_C1SC   0x40039014 // Channel 1 Status And Control\n"
  "//register FTM1_C1V   0x40039018 // Channel 1 Value\n"
  "//register FTM1_CNTIN   0x4003904C // Counter Initial Value\n"
  "//register FTM1_STATUS   0x40039050 // Capture And Compare Status\n"
  "//register FTM1_MODE   0x40039054 // Features Mode Selection\n"
  "//register FTM1_SYNC   0x40039058 // Synchronization\n"
  "//register FTM1_OUTINIT   0x4003905C // Initial State For Channels Output\n"
  "//register FTM1_OUTMASK   0x40039060 // Output Mask\n"
  "//register FTM1_COMBINE   0x40039064 // Function For Linked Channels\n"
  "//register FTM1_DEADTIME   0x40039068 // Deadtime Insertion Control\n"
  "//register FTM1_EXTTRIG   0x4003906C // FTM External Trigger\n"
  "//register FTM1_POL   0x40039070 // Channels Polarity\n"
  "//register FTM1_FMS   0x40039074 // Fault Mode Status\n"
  "//register FTM1_FILTER   0x40039078 // Input Capture Filter Control\n"
  "//register FTM1_FLTCTRL   0x4003907C // Fault Control\n"
  "//register FTM1_QDCTRL   0x40039080 // Quadrature Decoder Control And Status\n"
  "//register FTM1_CONF   0x40039084 // Configuration\n"
  "//register FTM1_FLTPOL   0x40039088 // FTM Fault Input Polarity\n"
  "//register FTM1_SYNCONF   0x4003908C // Synchronization Configuration\n"
  "//register FTM1_INVCTRL   0x40039090 // FTM Inverting Control\n"
  "//register FTM1_SWOCTRL   0x40039094 // FTM Software Output Control\n"
  "//register FTM1_PWMLOAD   0x40039098 // FTM PWM Load\n"
  "//register FTM2_SC    0x400B8000 // Status And Control\n"
  "//register FTM2_CNT   0x400B8004 // Counter\n"
  "//register FTM2_MOD   0x400B8008 // Modulo\n"
  "//register FTM2_C0SC   0x400B800C // Channel 0 Status And Control\n"
  "//register FTM2_C0V   0x400B8010 // Channel 0 Value\n"
  "//register FTM2_C1SC   0x400B8014 // Channel 1 Status And Control\n"
  "//register FTM2_C1V   0x400B8018 // Channel 1 Value\n"
  "//register FTM2_CNTIN   0x400B804C // Counter Initial Value\n"
  "//register FTM2_STATUS   0x400B8050 // Capture And Compare Status\n"
  "//register FTM2_MODE   0x400B8054 // Features Mode Selection\n"
  "//register FTM2_SYNC   0x400B8058 // Synchronization\n"
  "//register FTM2_OUTINIT   0x400B805C // Initial State For Channels Output\n"
  "//register FTM2_OUTMASK   0x400B8060 // Output Mask\n"
  "//register FTM2_COMBINE   0x400B8064 // Function For Linked Channels\n"
  "//register FTM2_DEADTIME   0x400B8068 // Deadtime Insertion Control\n"
  "//register FTM2_EXTTRIG   0x400B806C // FTM External Trigger\n"
  "//register FTM2_POL   0x400B8070 // Channels Polarity\n"
  "//register FTM2_FMS   0x400B8074 // Fault Mode Status\n"
  "//register FTM2_FILTER   0x400B8078 // Input Capture Filter Control\n"
  "//register FTM2_FLTCTRL   0x400B807C // Fault Control\n"
  "//register FTM2_QDCTRL   0x400B8080 // Quadrature Decoder Control And Status\n"
  "//register FTM2_CONF   0x400B8084 // Configuration\n"
  "//register FTM2_FLTPOL   0x400B8088 // FTM Fault Input Polarity\n"
  "//register FTM2_SYNCONF   0x400B808C // Synchronization Configuration\n"
  "//register FTM2_INVCTRL   0x400B8090 // FTM Inverting Control\n"
  "//register FTM2_SWOCTRL   0x400B8094 // FTM Software Output Control\n"
  "//register FTM2_PWMLOAD   0x400B8098 // FTM PWM Load\n"
  "//\n"
  "//// Chapter 36: Periodic Interrupt Timer (PIT)\n"
  "//register PIT_MCR    0x40037000 // PIT Module Control Register\n"
  "//register PIT_LDVAL0   0x40037100 // Timer Load Value Register\n"
  "//register PIT_CVAL0   0x40037104 // Current Timer Value Register\n"
  "//register PIT_TCTRL0   0x40037108 // Timer Control Register\n"
  "//register PIT_TFLG0   0x4003710C // Timer Flag Register\n"
  "//register PIT_LDVAL1   0x40037110 // Timer Load Value Register\n"
  "//register PIT_CVAL1   0x40037114 // Current Timer Value Register\n"
  "//register PIT_TCTRL1   0x40037118 // Timer Control Register\n"
  "//register PIT_TFLG1   0x4003711C // Timer Flag Register\n"
  "//register PIT_LDVAL2   0x40037120 // Timer Load Value Register\n"
  "//register PIT_CVAL2   0x40037124 // Current Timer Value Register\n"
  "//register PIT_TCTRL2   0x40037128 // Timer Control Register\n"
  "//register PIT_TFLG2   0x4003712C // Timer Flag Register\n"
  "//register PIT_LDVAL3   0x40037130 // Timer Load Value Register\n"
  "//register PIT_CVAL3   0x40037134 // Current Timer Value Register\n"
  "//register PIT_TCTRL3   0x40037138 // Timer Control Register\n"
  "//register PIT_TFLG3   0x4003713C // Timer Flag Register\n"
  "//\n"
  "//// Chapter 37: Low-Power Timer (LPTMR)\n"
  "//register LPTMR0_CSR   0x40040000 // Low Power Timer Control Status Register\n"
  "//register LPTMR0_PSR   0x40040004 // Low Power Timer Prescale Register\n"
  "//register LPTMR0_CMR   0x40040008 // Low Power Timer Compare Register\n"
  "//register LPTMR0_CNR   0x4004000C // Low Power Timer Counter Register\n"
  "//\n"
  "//// Chapter 38: Carrier Modulator Transmitter (CMT)\n"
  "//register CMT_CGH1  *(volatile uint8_t  *)0x40062000 // CMT Carrier Generator High Data Register 1\n"
  "//register CMT_CGL1  *(volatile uint8_t  *)0x40062001 // CMT Carrier Generator Low Data Register 1\n"
  "//register CMT_CGH2  *(volatile uint8_t  *)0x40062002 // CMT Carrier Generator High Data Register 2\n"
  "//register CMT_CGL2  *(volatile uint8_t  *)0x40062003 // CMT Carrier Generator Low Data Register 2\n"
  "//register CMT_OC   *(volatile uint8_t  *)0x40062004 // CMT Output Control Register\n"
  "//register CMT_MSC   *(volatile uint8_t  *)0x40062005 // CMT Modulator Status and Control Register\n"
  "//register CMT_CMD1  *(volatile uint8_t  *)0x40062006 // CMT Modulator Data Register Mark High\n"
  "//register CMT_CMD2  *(volatile uint8_t  *)0x40062007 // CMT Modulator Data Register Mark Low\n"
  "//register CMT_CMD3  *(volatile uint8_t  *)0x40062008 // CMT Modulator Data Register Space High\n"
  "//register CMT_CMD4  *(volatile uint8_t  *)0x40062009 // CMT Modulator Data Register Space Low\n"
  "//register CMT_PPS   *(volatile uint8_t  *)0x4006200A // CMT Primary Prescaler Register\n"
  "//register CMT_DMA   *(volatile uint8_t  *)0x4006200B // CMT Direct Memory Access Register\n"
  "//\n"
  "//// Chapter 39: Real Time Clock (RTC)\n"
  "//register RTC_TSR    0x4003D000 // RTC Time Seconds Register\n"
  "//register RTC_TPR    0x4003D004 // RTC Time Prescaler Register\n"
  "//register RTC_TAR    0x4003D008 // RTC Time Alarm Register\n"
  "//register RTC_TCR    0x4003D00C // RTC Time Compensation Register\n"
  "//register RTC_TCR_CIC(n)   (((n) & 255) << 24)  // Compensation Interval Counter\n"
  "//register RTC_TCR_TCV(n)   (((n) & 255) << 16)  // Time Compensation Value\n"
  "//register RTC_TCR_CIR(n)   (((n) & 255) << 8)  // Compensation Interval Register\n"
  "//register RTC_TCR_TCR(n)   (((n) & 255) << 0)  // Time Compensation Register\n"
  "//register RTC_CR    0x4003D010 // RTC Control Register\n"
  "//register RTC_CR_SC2P    0x00002000  // \n"
  "//register RTC_CR_SC4P    0x00001000  // \n"
  "//register RTC_CR_SC8P    0x00000800  // \n"
  "//register RTC_CR_SC16P    0x00000400  // \n"
  "//register RTC_CR_CLKO    0x00000200  // \n"
  "//register RTC_CR_OSCE    0x00000100  // \n"
  "//register RTC_CR_UM    0x00000008  // \n"
  "//register RTC_CR_SUP    0x00000004  // \n"
  "//register RTC_CR_WPE    0x00000002  // \n"
  "//register RTC_CR_SWR    0x00000001  // \n"
  "//register RTC_SR    0x4003D014 // RTC Status Register\n"
  "//register RTC_SR_TCE    0x00000010  // \n"
  "//register RTC_SR_TAF    0x00000004  // \n"
  "//register RTC_SR_TOF    0x00000002  // \n"
  "//register RTC_SR_TIF    0x00000001  // \n"
  "//register RTC_LR    0x4003D018 // RTC Lock Register\n"
  "//register RTC_IER    0x4003D01C // RTC Interrupt Enable Register\n"
  "//register RTC_WAR    0x4003D800 // RTC Write Access Register\n"
  "//register RTC_RAR    0x4003D804 // RTC Read Access Register\n"
  "//\n"
  "//// Chapter 40: Universal Serial Bus OTG Controller (USBOTG)\n"
  "//register USB0_PERID  *(const    uint8_t  *)0x40072000 // Peripheral ID register\n"
  "//register USB0_IDCOMP  *(const    uint8_t  *)0x40072004 // Peripheral ID Complement register\n"
  "//register USB0_REV  *(const    uint8_t  *)0x40072008 // Peripheral Revision register\n"
  "//register USB0_ADDINFO  *(volatile uint8_t  *)0x4007200C // Peripheral Additional Info register\n"
  "//register USB0_OTGIST *(volatile uint8_t  *)0x40072010 // OTG Interrupt Status register\n"
  "//register USB_OTGISTAT_IDCHG  (uint8_t)0x80   //\n"
  "//register USB_OTGISTAT_ONEMSEC  (uint8_t)0x40   //\n"
  "//register USB_OTGISTAT_LINE_STATE_CHG (uint8_t)0x20   //\n"
  "//register USB_OTGISTAT_SESSVLDCHG  (uint8_t)0x08   //\n"
  "//register USB_OTGISTAT_B_SESS_CHG  (uint8_t)0x04   //\n"
  "//register USB_OTGISTAT_AVBUSCHG  (uint8_t)0x01   //\n"
  "//register USB0_OTGICR  *(volatile uint8_t  *)0x40072014 // OTG Interrupt Control Register\n"
  "//register USB_OTGICR_IDEN   (uint8_t)0x80   // \n"
  "//register USB_OTGICR_ONEMSECEN  (uint8_t)0x40   // \n"
  "//register USB_OTGICR_LINESTATEEN  (uint8_t)0x20   // \n"
  "//register USB_OTGICR_SESSVLDEN  (uint8_t)0x08   // \n"
  "//register USB_OTGICR_BSESSEN  (uint8_t)0x04   // \n"
  "//register USB_OTGICR_AVBUSEN  (uint8_t)0x01   // \n"
  "//register USB0_OTGST *(volatile uint8_t  *)0x40072018 // OTG Status register\n"
  "//register USB_OTGSTAT_ID   (uint8_t)0x80   // \n"
  "//register USB_OTGSTAT_ONEMSECEN  (uint8_t)0x40   // \n"
  "//register USB_OTGSTAT_LINESTATESTABLE (uint8_t)0x20   // \n"
  "//register USB_OTGSTAT_SESS_VLD  (uint8_t)0x08   // \n"
  "//register USB_OTGSTAT_BSESSEND  (uint8_t)0x04   // \n"
  "//register USB_OTGSTAT_AVBUSVLD  (uint8_t)0x01   // \n"
  "//register USB0_OTGCTL  *(volatile uint8_t  *)0x4007201C // OTG Control Register\n"
  "//register USB_OTGCTL_DPHIGH  (uint8_t)0x80   // \n"
  "//register USB_OTGCTL_DPLOW  (uint8_t)0x20   // \n"
  "//register USB_OTGCTL_DMLOW  (uint8_t)0x10   // \n"
  "//register USB_OTGCTL_OTGEN  (uint8_t)0x04   // \n"
  "//register USB0_IST *(volatile uint8_t  *)0x40072080 // Interrupt Status Register\n"
  "//register USB_ISTAT_STALL   (uint8_t)0x80   // \n"
  "//register USB_ISTAT_ATTACH  (uint8_t)0x40   // \n"
  "//register USB_ISTAT_RESUME  (uint8_t)0x20   // \n"
  "//register USB_ISTAT_SLEEP   (uint8_t)0x10   // \n"
  "//register USB_ISTAT_TOKDNE  (uint8_t)0x08   // \n"
  "//register USB_ISTAT_SOFTOK  (uint8_t)0x04   // \n"
  "//register USB_ISTAT_ERROR   (uint8_t)0x02   // \n"
  "//register USB_ISTAT_USBRST  (uint8_t)0x01   // \n"
  "//register USB0_INTEN  *(volatile uint8_t  *)0x40072084 // Interrupt Enable Register\n"
  "//register USB_INTEN_STALLEN  (uint8_t)0x80   // \n"
  "//register USB_INTEN_ATTACHEN  (uint8_t)0x40   // \n"
  "//register USB_INTEN_RESUMEEN  (uint8_t)0x20   // \n"
  "//register USB_INTEN_SLEEPEN  (uint8_t)0x10   // \n"
  "//register USB_INTEN_TOKDNEEN  (uint8_t)0x08   // \n"
  "//register USB_INTEN_SOFTOKEN  (uint8_t)0x04   // \n"
  "//register USB_INTEN_ERROREN  (uint8_t)0x02   // \n"
  "//register USB_INTEN_USBRSTEN  (uint8_t)0x01   // \n"
  "//register USB0_ERRST *(volatile uint8_t  *)0x40072088 // Error Interrupt Status Register\n"
  "//register USB_ERRSTAT_BTSERR  (uint8_t)0x80   // \n"
  "//register USB_ERRSTAT_DMAERR  (uint8_t)0x20   // \n"
  "//register USB_ERRSTAT_BTOERR  (uint8_t)0x10   // \n"
  "//register USB_ERRSTAT_DFN8  (uint8_t)0x08   // \n"
  "//register USB_ERRSTAT_CRC16  (uint8_t)0x04   // \n"
  "//register USB_ERRSTAT_CRC5EOF  (uint8_t)0x02   // \n"
  "//register USB_ERRSTAT_PIDERR  (uint8_t)0x01   // \n"
  "//register USB0_ERREN  *(volatile uint8_t  *)0x4007208C // Error Interrupt Enable Register\n"
  "//register USB_ERREN_BTSERREN  (uint8_t)0x80   // \n"
  "//register USB_ERREN_DMAERREN  (uint8_t)0x20   // \n"
  "//register USB_ERREN_BTOERREN  (uint8_t)0x10   // \n"
  "//register USB_ERREN_DFN8EN  (uint8_t)0x08   // \n"
  "//register USB_ERREN_CRC16EN  (uint8_t)0x04   // \n"
  "//register USB_ERREN_CRC5EOFEN  (uint8_t)0x02   // \n"
  "//register USB_ERREN_PIDERREN  (uint8_t)0x01   // \n"
  "//register USB0_ST *(volatile uint8_t  *)0x40072090 // Status Register\n"
  "//register USB_STAT_TX   (uint8_t)0x08   // \n"
  "//register USB_STAT_ODD   (uint8_t)0x04   // \n"
  "//register USB_STAT_ENDP(n)  (uint8_t)((n) >> 4)  // \n"
  "//register USB0_CTL  *(volatile uint8_t  *)0x40072094 // Control Register\n"
  "//register USB_CTL_JSTATE   (uint8_t)0x80   // \n"
  "//register USB_CTL_SE0   (uint8_t)0x40   // \n"
  "//register USB_CTL_TXSUSPENDTOKENBUSY (uint8_t)0x20   // \n"
  "//register USB_CTL_RESET   (uint8_t)0x10   // \n"
  "//register USB_CTL_HOSTMODEEN  (uint8_t)0x08   // \n"
  "//register USB_CTL_RESUME   (uint8_t)0x04   // \n"
  "//register USB_CTL_ODDRST   (uint8_t)0x02   // \n"
  "//register USB_CTL_USBENSOFEN  (uint8_t)0x01   // \n"
  "//register USB0_ADDR  *(volatile uint8_t  *)0x40072098 // Address Register\n"
  "//register USB0_BDTPAGE1  *(volatile uint8_t  *)0x4007209C // BDT Page Register 1\n"
  "//register USB0_FRMNUML  *(volatile uint8_t  *)0x400720A0 // Frame Number Register Low\n"
  "//register USB0_FRMNUMH  *(volatile uint8_t  *)0x400720A4 // Frame Number Register High\n"
  "//register USB0_TOKEN  *(volatile uint8_t  *)0x400720A8 // Token Register\n"
  "//register USB0_SOFTHLD  *(volatile uint8_t  *)0x400720AC // SOF Threshold Register\n"
  "//register USB0_BDTPAGE2  *(volatile uint8_t  *)0x400720B0 // BDT Page Register 2\n"
  "//register USB0_BDTPAGE3  *(volatile uint8_t  *)0x400720B4 // BDT Page Register 3\n"
  "//register USB0_ENDPT0  *(volatile uint8_t  *)0x400720C0 // Endpoint Control Register\n"
  "//register USB_ENDPT_HOSTWOHUB  (uint8_t)0x80   // host only, enable low speed\n"
  "//register USB_ENDPT_RETRYDIS  (uint8_t)0x40   // host only, set to disable NAK retry\n"
  "//register USB_ENDPT_EPCTLDIS  (uint8_t)0x10   // 0=control, 1=bulk, interrupt, isync\n"
  "//register USB_ENDPT_EPRXEN  (uint8_t)0x08   // enables the endpoint for RX transfers.\n"
  "//register USB_ENDPT_EPTXEN  (uint8_t)0x04   // enables the endpoint for TX transfers.\n"
  "//register USB_ENDPT_EPSTALL  (uint8_t)0x02   // set to stall endpoint\n"
  "//register USB_ENDPT_EPHSHK  (uint8_t)0x01   // enable handshaking during a transaction, generally set unless Isochronous\n"
  "//register USB0_ENDPT1  *(volatile uint8_t  *)0x400720C4 // Endpoint Control Register\n"
  "//register USB0_ENDPT2  *(volatile uint8_t  *)0x400720C8 // Endpoint Control Register\n"
  "//register USB0_ENDPT3  *(volatile uint8_t  *)0x400720CC // Endpoint Control Register\n"
  "//register USB0_ENDPT4  *(volatile uint8_t  *)0x400720D0 // Endpoint Control Register\n"
  "//register USB0_ENDPT5  *(volatile uint8_t  *)0x400720D4 // Endpoint Control Register\n"
  "//register USB0_ENDPT6  *(volatile uint8_t  *)0x400720D8 // Endpoint Control Register\n"
  "//register USB0_ENDPT7  *(volatile uint8_t  *)0x400720DC // Endpoint Control Register\n"
  "//register USB0_ENDPT8  *(volatile uint8_t  *)0x400720E0 // Endpoint Control Register\n"
  "//register USB0_ENDPT9  *(volatile uint8_t  *)0x400720E4 // Endpoint Control Register\n"
  "//register USB0_ENDPT10  *(volatile uint8_t  *)0x400720E8 // Endpoint Control Register\n"
  "//register USB0_ENDPT11  *(volatile uint8_t  *)0x400720EC // Endpoint Control Register\n"
  "//register USB0_ENDPT12  *(volatile uint8_t  *)0x400720F0 // Endpoint Control Register\n"
  "//register USB0_ENDPT13  *(volatile uint8_t  *)0x400720F4 // Endpoint Control Register\n"
  "//register USB0_ENDPT14  *(volatile uint8_t  *)0x400720F8 // Endpoint Control Register\n"
  "//register USB0_ENDPT15  *(volatile uint8_t  *)0x400720FC // Endpoint Control Register\n"
  "//register USB0_USBCTRL  *(volatile uint8_t  *)0x40072100 // USB Control Register\n"
  "//register USB_USBCTRL_SUSP  (uint8_t)0x80   // Places the USB transceiver into the suspend state.\n"
  "//register USB_USBCTRL_PDE   (uint8_t)0x40   // Enables the weak pulldowns on the USB transceiver.\n"
  "//register USB0_OBSERVE  *(volatile uint8_t  *)0x40072104 // USB OTG Observe Register\n"
  "//register USB_OBSERVE_DPPU  (uint8_t)0x80   // \n"
  "//register USB_OBSERVE_DPPD  (uint8_t)0x40   // \n"
  "//register USB_OBSERVE_DMPD  (uint8_t)0x10   // \n"
  "//register USB0_CONTROL  *(volatile uint8_t  *)0x40072108 // USB OTG Control Register\n"
  "//register USB_CONTROL_DPPULLUPNONOTG (uint8_t)0x10   //  Provides control of the DP PULLUP in the USB OTG module, if USB is configured in non-OTG dev"
  "ice mode.\n"
  "//register USB0_USBTRC0  *(volatile uint8_t  *)0x4007210C // USB Transceiver Control Register 0\n"
  "//register USB_USBTRC_USBRESET  (uint8_t)0x80   //\n"
  "//register USB_USBTRC_USBRESMEN  (uint8_t)0x20   //\n"
  "//register USB_USBTRC_SYNC_DET  (uint8_t)0x02   //\n"
  "//register USB_USBTRC_USB_RESUME_INT (uint8_t)0x01   //\n"
  "//register USB0_USBFRMADJUST *(volatile uint8_t  *)0x40072114 // Frame Adjust Register\n"
  "//\n"
  "//// Chapter 41: USB Device Charger Detection Module (USBDCD)\n"
  "//register USBDCD_CONTROL   0x40035000 // Control register\n"
  "//register USBDCD_CLOCK   0x40035004 // Clock register\n"
  "//register USBDCD_STATUS   0x40035008 // Status register\n"
  "//register USBDCD_TIMER0   0x40035010 // TIMER0 register\n"
  "//register USBDCD_TIMER1   0x40035014 // TIMER1 register\n"
  "//register USBDCD_TIMER2   0x40035018 // TIMER2 register\n"
  "//\n"
  "//// Chapter 43: SPI (DSPI)\n"
  "//register SPI0_MCR   0x4002C000 // DSPI Module Configuration Register\n"
  "//register SPI_MCR_MSTR    0x80000000  // Master/Slave Mode Select\n"
  "//register SPI_MCR_CONT_SCKE   0x40000000  // \n"
  "//register SPI_MCR_DCONF(n)  (((n) & 3) << 28)  // \n"
  "//register SPI_MCR_FRZ    0x08000000  // \n"
  "//register SPI_MCR_MTFE    0x04000000  // \n"
  "//register SPI_MCR_ROOE    0x01000000  // \n"
  "//register SPI_MCR_PCSIS(n)  (((n) & 0x1F) << 16)  //\n"
  "//register SPI_MCR_DOZE    0x00008000  // \n"
  "//register SPI_MCR_MDIS    0x00004000  // \n"
  "//register SPI_MCR_DIS_TXF    0x00002000  // \n"
  "//register SPI_MCR_DIS_RXF    0x00001000  // \n"
  "//register SPI_MCR_CLR_TXF    0x00000800  // \n"
  "//register SPI_MCR_CLR_RXF    0x00000400  // \n"
  "//register SPI_MCR_SMPL_PT(n)  (((n) & 3) << 8)  //\n"
  "//register SPI_MCR_HALT    0x00000001  // \n"
  "//register SPI0_TCR   0x4002C008 // DSPI Transfer Count Register\n"
  "//register SPI0_CTAR0   0x4002C00C // DSPI Clock and Transfer Attributes Register, In Master Mode\n"
  "//register SPI_CTAR_DBR    0x80000000  // Double Baud Rate\n"
  "//register SPI_CTAR_FMSZ(n)  (((n) & 15) << 27)  // Frame Size (+1)\n"
  "//register SPI_CTAR_CPOL    0x04000000  // Clock Polarity\n"
  "//register SPI_CTAR_CPHA    0x02000000  // Clock Phase\n"
  "//register SPI_CTAR_LSBFE    0x01000000  // LSB First\n"
  "//register SPI_CTAR_PCSSCK(n)  (((n) & 3) << 22)  // PCS to SCK Delay Prescaler\n"
  "//register SPI_CTAR_PASC(n)  (((n) & 3) << 20)  // After SCK Delay Prescaler\n"
  "//register SPI_CTAR_PDT(n)   (((n) & 3) << 18)  // Delay after Transfer Prescaler\n"
  "//register SPI_CTAR_PBR(n)   (((n) & 3) << 16)  // Baud Rate Prescaler\n"
  "//register SPI_CTAR_CSSCK(n)  (((n) & 15) << 12)  // PCS to SCK Delay Scaler\n"
  "//register SPI_CTAR_ASC(n)   (((n) & 15) << 8)  // After SCK Delay Scaler\n"
  "//register SPI_CTAR_DT(n)   (((n) & 15) << 4)  // Delay After Transfer Scaler\n"
  "//register SPI_CTAR_BR(n)   (((n) & 15) << 0)  // Baud Rate Scaler\n"
  "//register SPI0_CTAR0_SLAVE  0x4002C00C // DSPI Clock and Transfer Attributes Register, In Slave Mode\n"
  "//register SPI0_CTAR1   0x4002C010 // DSPI Clock and Transfer Attributes Register, In Master Mode\n"
  "//register SPI0_SR    0x4002C02C // DSPI Status Register\n"
  "//register SPI_SR_TCF    0x80000000  // Transfer Complete Flag\n"
  "//register SPI_SR_TXRXS    0x40000000  // TX and RX Status\n"
  "//register SPI_SR_EOQF    0x10000000  // End of Queue Flag\n"
  "//register SPI_SR_TFUF    0x08000000  // Transmit FIFO Underflow Flag\n"
  "//register SPI_SR_TFFF    0x02000000  // Transmit FIFO Fill Flag\n"
  "//register SPI_SR_RFOF    0x00080000  // Receive FIFO Overflow Flag\n"
  "//register SPI_SR_RFDF    0x00020000  // Receive FIFO Drain Flag\n"
  "//register SPI0_RSER   0x4002C030 // DSPI DMA/Interrupt Request Select and Enable Register\n"
  "//register SPI_RSER_TCF_RE    0x80000000  // Transmission Complete Request Enable\n"
  "//register SPI_RSER_EOQF_RE   0x10000000  // DSPI Finished Request Request Enable\n"
  "//register SPI_RSER_TFUF_RE   0x08000000  // Transmit FIFO Underflow Request Enable\n"
  "//register SPI_RSER_TFFF_RE   0x02000000  // Transmit FIFO Fill Request Enable\n"
  "//register SPI_RSER_TFFF_DIRS   0x01000000  // Transmit FIFO FIll Dma or Interrupt Request Select\n"
  "//register SPI_RSER_RFOF_RE   0x00080000  // Receive FIFO Overflow Request Enable\n"
  "//register SPI_RSER_RFDF_RE   0x00020000  // Receive FIFO Drain Request Enable\n"
  "//register SPI_RSER_RFDF_DIRS   0x00010000  // Receive FIFO Drain DMA or Interrupt Request Select\n"
  "//register SPI0_PUSHR   0x4002C034 // DSPI PUSH TX FIFO Register In Master Mode\n"
  "//register SPI_PUSHR_CONT    0x80000000  // \n"
  "//register SPI_PUSHR_CTAS(n)  (((n) & 7) << 28)  // \n"
  "//register SPI_PUSHR_EOQ    0x08000000  // \n"
  "//register SPI_PUSHR_CTCNT    0x04000000  // \n"
  "//register SPI_PUSHR_PCS(n)  (((n) & 31) << 16)  //\n"
  "//register SPI0_PUSHR_SLAVE  0x4002C034 // DSPI PUSH TX FIFO Register In Slave Mode\n"
  "//register SPI0_POPR   0x4002C038 // DSPI POP RX FIFO Register\n"
  "//register SPI0_TXFR0   0x4002C03C // DSPI Transmit FIFO Registers\n"
  "//register SPI0_TXFR1   0x4002C040 // DSPI Transmit FIFO Registers\n"
  "//register SPI0_TXFR2   0x4002C044 // DSPI Transmit FIFO Registers\n"
  "//register SPI0_TXFR3   0x4002C048 // DSPI Transmit FIFO Registers\n"
  "//register SPI0_RXFR0   0x4002C07C // DSPI Receive FIFO Registers\n"
  "//register SPI0_RXFR1   0x4002C080 // DSPI Receive FIFO Registers\n"
  "//register SPI0_RXFR2   0x4002C084 // DSPI Receive FIFO Registers\n"
  "//register SPI0_RXFR3   0x4002C088 // DSPI Receive FIFO Registers\n"
  "//typedef struct {\n"
  "// volatile uint32_t MCR; // 0\n"
  "// volatile uint32_t unused1;// 4\n"
  "// volatile uint32_t TCR; // 8\n"
  "// volatile uint32_t CTAR0; // c\n"
  "// volatile uint32_t CTAR1; // 10\n"
  "// volatile uint32_t CTAR2; // 14\n"
  "// volatile uint32_t CTAR3; // 18\n"
  "// volatile uint32_t CTAR4; // 1c\n"
  "// volatile uint32_t CTAR5; // 20\n"
  "// volatile uint32_t CTAR6; // 24\n"
  "// volatile uint32_t CTAR7; // 28\n"
  "// volatile uint32_t SR; // 2c\n"
  "// volatile uint32_t RSER; // 30\n"
  "// volatile uint32_t PUSHR; // 34\n"
  "// volatile uint32_t POPR; // 38\n"
  "// volatile uint32_t TXFR[16]; // 3c\n"
  "// volatile uint32_t RXFR[16]; // 7c\n"
  "//} SPI_t;\n"
  "//register SPI0  (*(SPI_t *)0x4002C000)\n"
  "//\n"
  "//// Chapter 44: Inter-Integrated Circuit (I2C)\n"
  "//register I2C0_A1   *(volatile uint8_t  *)0x40066000 // I2C Address Register 1\n"
  "//register I2C0_F   *(volatile uint8_t  *)0x40066001 // I2C Frequency Divider register\n"
  "//register I2C0_C1   *(volatile uint8_t  *)0x40066002 // I2C Control Register 1\n"
  "//register I2C_C1_IICEN   (uint8_t)0x80   // I2C Enable\n"
  "//register I2C_C1_IICIE   (uint8_t)0x40   // I2C Interrupt Enable\n"
  "//register I2C_C1_MST   (uint8_t)0x20   // Master Mode Select\n"
  "//register I2C_C1_TX   (uint8_t)0x10   // Transmit Mode Select\n"
  "//register I2C_C1_TXAK   (uint8_t)0x08   // Transmit Acknowledge Enable\n"
  "//register I2C_C1_RSTA   (uint8_t)0x04   // RepeSTART\n"
  "//register I2C_C1_WUEN   (uint8_t)0x02   // Wakeup Enable\n"
  "//register I2C_C1_DMAEN   (uint8_t)0x01   // DMA Enable\n"
  "//register I2C0_S   *(volatile uint8_t  *)0x40066003 // I2C Status register\n"
  "//register I2C_S_TCF   (uint8_t)0x80   // Transfer Complete Flag\n"
  "//register I2C_S_IAAS   (uint8_t)0x40   // Addressed As A Slave\n"
  "//register I2C_S_BUSY   (uint8_t)0x20   // Bus Busy\n"
  "//register I2C_S_ARBL   (uint8_t)0x10   // Arbitration Lost\n"
  "//register I2C_S_RAM   (uint8_t)0x08   // Range Address Match\n"
  "//register I2C_S_SRW   (uint8_t)0x04   // Slave Read/Write\n"
  "//register I2C_S_IICIF   (uint8_t)0x02   // Interrupt Flag\n"
  "//register I2C_S_RXAK   (uint8_t)0x01   // Receive Acknowledge\n"
  "//register I2C0_D   *(volatile uint8_t  *)0x40066004 // I2C Data I/O register\n"
  "//register I2C0_C2   *(volatile uint8_t  *)0x40066005 // I2C Control Register 2\n"
  "//register I2C_C2_GCAEN   (uint8_t)0x80   // General Call Address Enable\n"
  "//register I2C_C2_ADEXT   (uint8_t)0x40   // Address Extension\n"
  "//register I2C_C2_HDRS   (uint8_t)0x20   // High Drive Select\n"
  "//register I2C_C2_SBRC   (uint8_t)0x10   // Slave Baud Rate Control\n"
  "//register I2C_C2_RMEN   (uint8_t)0x08   // Range Address Matching Enable\n"
  "//register I2C_C2_AD(n)   ((n) & 7)   // Slave Address, upper 3 bits\n"
  "//register I2C0_FLT  *(volatile uint8_t  *)0x40066006 // I2C Programmable Input Glitch Filter register\n"
  "//register I2C0_RA   *(volatile uint8_t  *)0x40066007 // I2C Range Address register\n"
  "//register I2C0_SMB  *(volatile uint8_t  *)0x40066008 // I2C SMBus Control and Status register\n"
  "//register I2C0_A2   *(volatile uint8_t  *)0x40066009 // I2C Address Register 2\n"
  "//register I2C0_SLTH  *(volatile uint8_t  *)0x4006600A // I2C SCL Low Timeout Register High\n"
  "//register I2C0_SLTL  *(volatile uint8_t  *)0x4006600B // I2C SCL Low Timeout Register Low\n"
  "//\n"
  "//register I2C1_A1   *(volatile uint8_t  *)0x40067000 // I2C Address Register 1\n"
  "//register I2C1_F   *(volatile uint8_t  *)0x40067001 // I2C Frequency Divider register\n"
  "//register I2C1_C1   *(volatile uint8_t  *)0x40067002 // I2C Control Register 1\n"
  "//register I2C1_S   *(volatile uint8_t  *)0x40067003 // I2C Status register\n"
  "//register I2C1_D   *(volatile uint8_t  *)0x40067004 // I2C Data I/O register\n"
  "//register I2C1_C2   *(volatile uint8_t  *)0x40067005 // I2C Control Register 2\n"
  "//register I2C1_FLT  *(volatile uint8_t  *)0x40067006 // I2C Programmable Input Glitch Filter register\n"
  "//register I2C1_RA   *(volatile uint8_t  *)0x40067007 // I2C Range Address register\n"
  "//register I2C1_SMB  *(volatile uint8_t  *)0x40067008 // I2C SMBus Control and Status register\n"
  "//register I2C1_A2   *(volatile uint8_t  *)0x40067009 // I2C Address Register 2\n"
  "//register I2C1_SLTH  *(volatile uint8_t  *)0x4006700A // I2C SCL Low Timeout Register High\n"
  "//register I2C1_SLTL  *(volatile uint8_t  *)0x4006700B // I2C SCL Low Timeout Register Low\n"
  "//\n"
  "//// Chapter 45: Universal Asynchronous Receiver/Transmitter (UART)\n"
  "//register UART0_BDH  *(volatile uint8_t  *)0x4006A000 // UART Baud Rate Registers: High\n"
  "//register UART0_BDL  *(volatile uint8_t  *)0x4006A001 // UART Baud Rate Registers: Low\n"
  "//register UART0_C1  *(volatile uint8_t  *)0x4006A002 // UART Control Register 1\n"
  "//register UART_C1_LOOPS   (uint8_t)0x80   // When LOOPS is set, the RxD pin is disconnected from the UART and the transmitter output is internally co"
  "nnected to the receiver input\n"
  "//register UART_C1_UARTSWAI  (uint8_t)0x40   // UART Stops in Wait Mode\n"
  "//register UART_C1_RSRC   (uint8_t)0x20   // When LOOPS is set, the RSRC field determines the source for the receiver shift register input\n"
  "//register UART_C1_M   (uint8_t)0x10   // 9-bit or 8-bit Mode Select\n"
  "//register UART_C1_WAKE   (uint8_t)0x08   // Determines which condition wakes the UART\n"
  "//register UART_C1_ILT   (uint8_t)0x04   // Idle Line Type Select\n"
  "//register UART_C1_PE   (uint8_t)0x02   // Parity Enable\n"
  "//register UART_C1_PT   (uint8_t)0x01   // Parity Type, 0=even, 1=odd\n"
  "//register UART0_C2  *(volatile uint8_t  *)0x4006A003 // UART Control Register 2\n"
  "//register UART_C2_TIE   (uint8_t)0x80   // Transmitter Interrupt or DMA Transfer Enable.\n"
  "//register UART_C2_TCIE   (uint8_t)0x40   // Transmission Complete Interrupt Enable\n"
  "//register UART_C2_RIE   (uint8_t)0x20   // Receiver Full Interrupt or DMA Transfer Enable\n"
  "//register UART_C2_ILIE   (uint8_t)0x10   // Idle Line Interrupt Enable\n"
  "//register UART_C2_TE   (uint8_t)0x08   // Transmitter Enable\n"
  "//register UART_C2_RE   (uint8_t)0x04   // Receiver Enable\n"
  "//register UART_C2_RWU   (uint8_t)0x02   // Receiver Wakeup Control\n"
  "//register UART_C2_SBK   (uint8_t)0x01   // Send Break\n"
  "//register UART0_S1  *(volatile uint8_t  *)0x4006A004 // UART Status Register 1\n"
  "//register UART_S1_TDRE   (uint8_t)0x80   // Transmit Data Register Empty Flag\n"
  "//register UART_S1_TC   (uint8_t)0x40   // Transmit Complete Flag\n"
  "//register UART_S1_RDRF   (uint8_t)0x20   // Receive Data Register Full Flag\n"
  "//register UART_S1_IDLE   (uint8_t)0x10   // Idle Line Flag\n"
  "//register UART_S1_OR   (uint8_t)0x08   // Receiver Overrun Flag\n"
  "//register UART_S1_NF   (uint8_t)0x04   // Noise Flag\n"
  "//register UART_S1_FE   (uint8_t)0x02   // Framing Error Flag\n"
  "//register UART_S1_PF   (uint8_t)0x01   // Parity Error Flag\n"
  "//register UART0_S2  *(volatile uint8_t  *)0x4006A005 // UART Status Register 2\n"
  "//register UART0_C3  *(volatile uint8_t  *)0x4006A006 // UART Control Register 3\n"
  "//register UART0_D   *(volatile uint8_t  *)0x4006A007 // UART Data Register\n"
  "//register UART0_MA1  *(volatile uint8_t  *)0x4006A008 // UART Match Address Registers 1\n"
  "//register UART0_MA2  *(volatile uint8_t  *)0x4006A009 // UART Match Address Registers 2\n"
  "//register UART0_C4  *(volatile uint8_t  *)0x4006A00A // UART Control Register 4\n"
  "//register UART0_C5  *(volatile uint8_t  *)0x4006A00B // UART Control Register 5\n"
  "//register UART0_ED  *(volatile uint8_t  *)0x4006A00C // UART Extended Data Register\n"
  "//register UART0_MODEM  *(volatile uint8_t  *)0x4006A00D // UART Modem Register\n"
  "//register UART0_IR  *(volatile uint8_t  *)0x4006A00E // UART Infrared Register\n"
  "//register UART0_PFIFO  *(volatile uint8_t  *)0x4006A010 // UART FIFO Parameters\n"
  "//register UART_PFIFO_TXFE   (uint8_t)0x80\n"
  "//register UART_PFIFO_RXFE   (uint8_t)0x08\n"
  "//register UART0_CFIFO  *(volatile uint8_t  *)0x4006A011 // UART FIFO Control Register\n"
  "//register UART_CFIFO_TXFLUSH  (uint8_t)0x80   // \n"
  "//register UART_CFIFO_RXFLUSH  (uint8_t)0x40   // \n"
  "//register UART_CFIFO_RXOFE  (uint8_t)0x04   // \n"
  "//register UART_CFIFO_TXOFE  (uint8_t)0x02   // \n"
  "//register UART_CFIFO_RXUFE  (uint8_t)0x01   // \n"
  "//register UART0_SFIFO  *(volatile uint8_t  *)0x4006A012 // UART FIFO Status Register\n"
  "//register UART_SFIFO_TXEMPT  (uint8_t)0x80\n"
  "//register UART_SFIFO_RXEMPT  (uint8_t)0x40\n"
  "//register UART_SFIFO_RXOF   (uint8_t)0x04\n"
  "//register UART_SFIFO_TXOF   (uint8_t)0x02\n"
  "//register UART_SFIFO_RXUF   (uint8_t)0x01\n"
  "//register UART0_TWFIFO  *(volatile uint8_t  *)0x4006A013 // UART FIFO Transmit Watermark\n"
  "//register UART0_TCFIFO  *(volatile uint8_t  *)0x4006A014 // UART FIFO Transmit Count\n"
  "//register UART0_RWFIFO  *(volatile uint8_t  *)0x4006A015 // UART FIFO Receive Watermark\n"
  "//register UART0_RCFIFO  *(volatile uint8_t  *)0x4006A016 // UART FIFO Receive Count\n"
  "//register UART0_C7816  *(volatile uint8_t  *)0x4006A018 // UART 7816 Control Register\n"
  "//register UART0_IE7816  *(volatile uint8_t  *)0x4006A019 // UART 7816 Interrupt Enable Register\n"
  "//register UART0_IS7816  *(volatile uint8_t  *)0x4006A01A // UART 7816 Interrupt Status Register\n"
  "//register UART0_WP7816T0  *(volatile uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register\n"
  "//register UART0_WP7816T1  *(volatile uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register\n"
  "//register UART0_WN7816  *(volatile uint8_t  *)0x4006A01C // UART 7816 Wait N Register\n"
  "//register UART0_WF7816  *(volatile uint8_t  *)0x4006A01D // UART 7816 Wait FD Register\n"
  "//register UART0_ET7816  *(volatile uint8_t  *)0x4006A01E // UART 7816 Error Threshold Register\n"
  "//register UART0_TL7816  *(volatile uint8_t  *)0x4006A01F // UART 7816 Transmit Length Register\n"
  "//register UART0_C6  *(volatile uint8_t  *)0x4006A021 // UART CEA709.1-B Control Register 6\n"
  "//register UART0_PCTH  *(volatile uint8_t  *)0x4006A022 // UART CEA709.1-B Packet Cycle Time Counter High\n"
  "//register UART0_PCTL  *(volatile uint8_t  *)0x4006A023 // UART CEA709.1-B Packet Cycle Time Counter Low\n"
  "//register UART0_B1T  *(volatile uint8_t  *)0x4006A024 // UART CEA709.1-B Beta1 Timer\n"
  "//register UART0_SDTH  *(volatile uint8_t  *)0x4006A025 // UART CEA709.1-B Secondary Delay Timer High\n"
  "//register UART0_SDTL  *(volatile uint8_t  *)0x4006A026 // UART CEA709.1-B Secondary Delay Timer Low\n"
  "//register UART0_PRE  *(volatile uint8_t  *)0x4006A027 // UART CEA709.1-B Preamble\n"
  "//register UART0_TPL  *(volatile uint8_t  *)0x4006A028 // UART CEA709.1-B Transmit Packet Length\n"
  "//register UART0_IE  *(volatile uint8_t  *)0x4006A029 // UART CEA709.1-B Interrupt Enable Register\n"
  "//register UART0_WB  *(volatile uint8_t  *)0x4006A02A // UART CEA709.1-B WBASE\n"
  "//register UART0_S3  *(volatile uint8_t  *)0x4006A02B // UART CEA709.1-B Status Register\n"
  "//register UART0_S4  *(volatile uint8_t  *)0x4006A02C // UART CEA709.1-B Status Register\n"
  "//register UART0_RPL  *(volatile uint8_t  *)0x4006A02D // UART CEA709.1-B Received Packet Length\n"
  "//register UART0_RPREL  *(volatile uint8_t  *)0x4006A02E // UART CEA709.1-B Received Preamble Length\n"
  "//register UART0_CPW  *(volatile uint8_t  *)0x4006A02F // UART CEA709.1-B Collision Pulse Width\n"
  "//register UART0_RIDT  *(volatile uint8_t  *)0x4006A030 // UART CEA709.1-B Receive Indeterminate Time\n"
  "//register UART0_TIDT  *(volatile uint8_t  *)0x4006A031 // UART CEA709.1-B Transmit Indeterminate Time\n"
  "//register UART1_BDH  *(volatile uint8_t  *)0x4006B000 // UART Baud Rate Registers: High\n"
  "//register UART1_BDL  *(volatile uint8_t  *)0x4006B001 // UART Baud Rate Registers: Low\n"
  "//register UART1_C1  *(volatile uint8_t  *)0x4006B002 // UART Control Register 1\n"
  "//register UART1_C2  *(volatile uint8_t  *)0x4006B003 // UART Control Register 2\n"
  "//register UART1_S1  *(volatile uint8_t  *)0x4006B004 // UART Status Register 1\n"
  "//register UART1_S2  *(volatile uint8_t  *)0x4006B005 // UART Status Register 2\n"
  "//register UART1_C3  *(volatile uint8_t  *)0x4006B006 // UART Control Register 3\n"
  "//register UART1_D   *(volatile uint8_t  *)0x4006B007 // UART Data Register\n"
  "//register UART1_MA1  *(volatile uint8_t  *)0x4006B008 // UART Match Address Registers 1\n"
  "//register UART1_MA2  *(volatile uint8_t  *)0x4006B009 // UART Match Address Registers 2\n"
  "//register UART1_C4  *(volatile uint8_t  *)0x4006B00A // UART Control Register 4\n"
  "//register UART1_C5  *(volatile uint8_t  *)0x4006B00B // UART Control Register 5\n"
  "//register UART1_ED  *(volatile uint8_t  *)0x4006B00C // UART Extended Data Register\n"
  "//register UART1_MODEM  *(volatile uint8_t  *)0x4006B00D // UART Modem Register\n"
  "//register UART1_IR  *(volatile uint8_t  *)0x4006B00E // UART Infrared Register\n"
  "//register UART1_PFIFO  *(volatile uint8_t  *)0x4006B010 // UART FIFO Parameters\n"
  "//register UART1_CFIFO  *(volatile uint8_t  *)0x4006B011 // UART FIFO Control Register\n"
  "//register UART1_SFIFO  *(volatile uint8_t  *)0x4006B012 // UART FIFO Status Register\n"
  "//register UART1_TWFIFO  *(volatile uint8_t  *)0x4006B013 // UART FIFO Transmit Watermark\n"
  "//register UART1_TCFIFO  *(volatile uint8_t  *)0x4006B014 // UART FIFO Transmit Count\n"
  "//register UART1_RWFIFO  *(volatile uint8_t  *)0x4006B015 // UART FIFO Receive Watermark\n"
  "//register UART1_RCFIFO  *(volatile uint8_t  *)0x4006B016 // UART FIFO Receive Count\n"
  "//register UART1_C7816  *(volatile uint8_t  *)0x4006B018 // UART 7816 Control Register\n"
  "//register UART1_IE7816  *(volatile uint8_t  *)0x4006B019 // UART 7816 Interrupt Enable Register\n"
  "//register UART1_IS7816  *(volatile uint8_t  *)0x4006B01A // UART 7816 Interrupt Status Register\n"
  "//register UART1_WP7816T0  *(volatile uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register\n"
  "//register UART1_WP7816T1  *(volatile uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register\n"
  "//register UART1_WN7816  *(volatile uint8_t  *)0x4006B01C // UART 7816 Wait N Register\n"
  "//register UART1_WF7816  *(volatile uint8_t  *)0x4006B01D // UART 7816 Wait FD Register\n"
  "//register UART1_ET7816  *(volatile uint8_t  *)0x4006B01E // UART 7816 Error Threshold Register\n"
  "//register UART1_TL7816  *(volatile uint8_t  *)0x4006B01F // UART 7816 Transmit Length Register\n"
  "//register UART1_C6  *(volatile uint8_t  *)0x4006B021 // UART CEA709.1-B Control Register 6\n"
  "//register UART1_PCTH  *(volatile uint8_t  *)0x4006B022 // UART CEA709.1-B Packet Cycle Time Counter High\n"
  "//register UART1_PCTL  *(volatile uint8_t  *)0x4006B023 // UART CEA709.1-B Packet Cycle Time Counter Low\n"
  "//register UART1_B1T  *(volatile uint8_t  *)0x4006B024 // UART CEA709.1-B Beta1 Timer\n"
  "//register UART1_SDTH  *(volatile uint8_t  *)0x4006B025 // UART CEA709.1-B Secondary Delay Timer High\n"
  "//register UART1_SDTL  *(volatile uint8_t  *)0x4006B026 // UART CEA709.1-B Secondary Delay Timer Low\n"
  "//register UART1_PRE  *(volatile uint8_t  *)0x4006B027 // UART CEA709.1-B Preamble\n"
  "//register UART1_TPL  *(volatile uint8_t  *)0x4006B028 // UART CEA709.1-B Transmit Packet Length\n"
  "//register UART1_IE  *(volatile uint8_t  *)0x4006B029 // UART CEA709.1-B Interrupt Enable Register\n"
  "//register UART1_WB  *(volatile uint8_t  *)0x4006B02A // UART CEA709.1-B WBASE\n"
  "//register UART1_S3  *(volatile uint8_t  *)0x4006B02B // UART CEA709.1-B Status Register\n"
  "//register UART1_S4  *(volatile uint8_t  *)0x4006B02C // UART CEA709.1-B Status Register\n"
  "//register UART1_RPL  *(volatile uint8_t  *)0x4006B02D // UART CEA709.1-B Received Packet Length\n"
  "//register UART1_RPREL  *(volatile uint8_t  *)0x4006B02E // UART CEA709.1-B Received Preamble Length\n"
  "//register UART1_CPW  *(volatile uint8_t  *)0x4006B02F // UART CEA709.1-B Collision Pulse Width\n"
  "//register UART1_RIDT  *(volatile uint8_t  *)0x4006B030 // UART CEA709.1-B Receive Indeterminate Time\n"
  "//register UART1_TIDT  *(volatile uint8_t  *)0x4006B031 // UART CEA709.1-B Transmit Indeterminate Time\n"
  "//register UART2_BDH  *(volatile uint8_t  *)0x4006C000 // UART Baud Rate Registers: High\n"
  "//register UART2_BDL  *(volatile uint8_t  *)0x4006C001 // UART Baud Rate Registers: Low\n"
  "//register UART2_C1  *(volatile uint8_t  *)0x4006C002 // UART Control Register 1\n"
  "//register UART2_C2  *(volatile uint8_t  *)0x4006C003 // UART Control Register 2\n"
  "//register UART2_S1  *(volatile uint8_t  *)0x4006C004 // UART Status Register 1\n"
  "//register UART2_S2  *(volatile uint8_t  *)0x4006C005 // UART Status Register 2\n"
  "//register UART2_C3  *(volatile uint8_t  *)0x4006C006 // UART Control Register 3\n"
  "//register UART2_D   *(volatile uint8_t  *)0x4006C007 // UART Data Register\n"
  "//register UART2_MA1  *(volatile uint8_t  *)0x4006C008 // UART Match Address Registers 1\n"
  "//register UART2_MA2  *(volatile uint8_t  *)0x4006C009 // UART Match Address Registers 2\n"
  "//register UART2_C4  *(volatile uint8_t  *)0x4006C00A // UART Control Register 4\n"
  "//register UART2_C5  *(volatile uint8_t  *)0x4006C00B // UART Control Register 5\n"
  "//register UART2_ED  *(volatile uint8_t  *)0x4006C00C // UART Extended Data Register\n"
  "//register UART2_MODEM  *(volatile uint8_t  *)0x4006C00D // UART Modem Register\n"
  "//register UART2_IR  *(volatile uint8_t  *)0x4006C00E // UART Infrared Register\n"
  "//register UART2_PFIFO  *(volatile uint8_t  *)0x4006C010 // UART FIFO Parameters\n"
  "//register UART2_CFIFO  *(volatile uint8_t  *)0x4006C011 // UART FIFO Control Register\n"
  "//register UART2_SFIFO  *(volatile uint8_t  *)0x4006C012 // UART FIFO Status Register\n"
  "//register UART2_TWFIFO  *(volatile uint8_t  *)0x4006C013 // UART FIFO Transmit Watermark\n"
  "//register UART2_TCFIFO  *(volatile uint8_t  *)0x4006C014 // UART FIFO Transmit Count\n"
  "//register UART2_RWFIFO  *(volatile uint8_t  *)0x4006C015 // UART FIFO Receive Watermark\n"
  "//register UART2_RCFIFO  *(volatile uint8_t  *)0x4006C016 // UART FIFO Receive Count\n"
  "//register UART2_C7816  *(volatile uint8_t  *)0x4006C018 // UART 7816 Control Register\n"
  "//register UART2_IE7816  *(volatile uint8_t  *)0x4006C019 // UART 7816 Interrupt Enable Register\n"
  "//register UART2_IS7816  *(volatile uint8_t  *)0x4006C01A // UART 7816 Interrupt Status Register\n"
  "//register UART2_WP7816T0  *(volatile uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register\n"
  "//register UART2_WP7816T1  *(volatile uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register\n"
  "//register UART2_WN7816  *(volatile uint8_t  *)0x4006C01C // UART 7816 Wait N Register\n"
  "//register UART2_WF7816  *(volatile uint8_t  *)0x4006C01D // UART 7816 Wait FD Register\n"
  "//register UART2_ET7816  *(volatile uint8_t  *)0x4006C01E // UART 7816 Error Threshold Register\n"
  "//register UART2_TL7816  *(volatile uint8_t  *)0x4006C01F // UART 7816 Transmit Length Register\n"
  "//register UART2_C6  *(volatile uint8_t  *)0x4006C021 // UART CEA709.1-B Control Register 6\n"
  "//register UART2_PCTH  *(volatile uint8_t  *)0x4006C022 // UART CEA709.1-B Packet Cycle Time Counter High\n"
  "//register UART2_PCTL  *(volatile uint8_t  *)0x4006C023 // UART CEA709.1-B Packet Cycle Time Counter Low\n"
  "//register UART2_B1T  *(volatile uint8_t  *)0x4006C024 // UART CEA709.1-B Beta1 Timer\n"
  "//register UART2_SDTH  *(volatile uint8_t  *)0x4006C025 // UART CEA709.1-B Secondary Delay Timer High\n"
  "//register UART2_SDTL  *(volatile uint8_t  *)0x4006C026 // UART CEA709.1-B Secondary Delay Timer Low\n"
  "//register UART2_PRE  *(volatile uint8_t  *)0x4006C027 // UART CEA709.1-B Preamble\n"
  "//register UART2_TPL  *(volatile uint8_t  *)0x4006C028 // UART CEA709.1-B Transmit Packet Length\n"
  "//register UART2_IE  *(volatile uint8_t  *)0x4006C029 // UART CEA709.1-B Interrupt Enable Register\n"
  "//register UART2_WB  *(volatile uint8_t  *)0x4006C02A // UART CEA709.1-B WBASE\n"
  "//register UART2_S3  *(volatile uint8_t  *)0x4006C02B // UART CEA709.1-B Status Register\n"
  "//register UART2_S4  *(volatile uint8_t  *)0x4006C02C // UART CEA709.1-B Status Register\n"
  "//register UART2_RPL  *(volatile uint8_t  *)0x4006C02D // UART CEA709.1-B Received Packet Length\n"
  "//register UART2_RPREL  *(volatile uint8_t  *)0x4006C02E // UART CEA709.1-B Received Preamble Length\n"
  "//register UART2_CPW  *(volatile uint8_t  *)0x4006C02F // UART CEA709.1-B Collision Pulse Width\n"
  "//register UART2_RIDT  *(volatile uint8_t  *)0x4006C030 // UART CEA709.1-B Receive Indeterminate Time\n"
  "//register UART2_TIDT  *(volatile uint8_t  *)0x4006C031 // UART CEA709.1-B Transmit Indeterminate Time\n"
  "//\n"
  "//// Chapter 46: Synchronous Audio Interface (SAI)\n"
  "//register I2S0_TCSR   0x4002F000 // SAI Transmit Control Register\n"
  "//register I2S_TCSR_TE    0x80000000 // Transmitter Enable\n"
  "//register I2S_TCSR_STOPE    0x40000000 // Transmitter Enable in Stop mode\n"
  "//register I2S_TCSR_DBGE    0x20000000 // Transmitter Enable in Debug mode\n"
  "//register I2S_TCSR_BCE    0x10000000 // Bit Clock Enable\n"
  "//register I2S_TCSR_FR    0x02000000 // FIFO Reset\n"
  "//register I2S_TCSR_SR    0x01000000 // Software Reset\n"
  "//register I2S_TCSR_WSF    0x00100000 // Word Start Flag\n"
  "//register I2S_TCSR_SEF    0x00080000 // Sync Error Flag\n"
  "//register I2S_TCSR_FEF    0x00040000 // FIFO Error Flag (underrun)\n"
  "//register I2S_TCSR_FWF    0x00020000 // FIFO Warning Flag (empty)\n"
  "//register I2S_TCSR_FRF    0x00010000 // FIFO Request Flag (Data Ready)\n"
  "//register I2S_TCSR_WSIE    0x00001000 // Word Start Interrupt Enable\n"
  "//register I2S_TCSR_SEIE    0x00000800 // Sync Error Interrupt Enable\n"
  "//register I2S_TCSR_FEIE    0x00000400 // FIFO Error Interrupt Enable\n"
  "//register I2S_TCSR_FWIE    0x00000200 // FIFO Warning Interrupt Enable\n"
  "//register I2S_TCSR_FRIE    0x00000100 // FIFO Request Interrupt Enable\n"
  "//register I2S_TCSR_FWDE    0x00000002 // FIFO Warning DMA Enable\n"
  "//register I2S_TCSR_FRDE    0x00000001 // FIFO Request DMA Enable\n"
  "//register I2S0_TCR1   0x4002F004 // SAI Transmit Configuration 1 Register\n"
  "//register I2S_TCR1_TFW(n)   ( n & 0x03)       // Transmit FIFO watermark\n"
  "//register I2S0_TCR2   0x4002F008 // SAI Transmit Configuration 2 Register\n"
  "//register I2S_TCR2_DIV(n)   ( n & 0xff)       // Bit clock divide by (DIV+1)*2\n"
  "//register I2S_TCR2_BCD   ( 1<<24)       // Bit clock direction\n"
  "//register I2S_TCR2_BCP   ( 1<<25)       // Bit clock polarity\n"
  "//register I2S_TCR2_MSEL(n)  ( (n & 3)<<26)       // MCLK select, 0=bus clock, 1=I2S0_MCLK\n"
  "//register I2S_TCR2_BCI   ( 1<<28)       // Bit clock input\n"
  "//register I2S_TCR2_BCS   ( 1<<29)       // Bit clock swap\n"
  "//register I2S_TCR2_SYNC(n)  ( (n & 3)<<30)       // 0=async 1=sync with receiver\n"
  "//register I2S0_TCR3   0x4002F00C // SAI Transmit Configuration 3 Register\n"
  "//register I2S_TCR3_WDFL(n)  ( n & 0x0f)       // word flag configuration\n"
  "//register I2S_TCR3_TCE   ( 0x10000)       // transmit channel enable\n"
  "//register I2S0_TCR4   0x4002F010 // SAI Transmit Configuration 4 Register\n"
  "//register I2S_TCR4_FSD   ( 1)        // Frame Sync Direction\n"
  "//register I2S_TCR4_FSP   ( 2)        // Frame Sync Polarity\n"
  "//register I2S_TCR4_FSE   ( 8)        // Frame Sync Early\n"
  "//register I2S_TCR4_MF   ( 0x10)       // MSB First\n"
  "//register I2S_TCR4_SYWD(n)  ( (n & 0x1f)<<8)     // Sync Width\n"
  "//register I2S_TCR4_FRSZ(n)  ( (n & 0x0f)<<16)    // Frame Size\n"
  "//register I2S0_TCR5   0x4002F014 // SAI Transmit Configuration 5 Register\n"
  "//register I2S_TCR5_FBT(n)   ( (n & 0x1f)<<8)     // First Bit Shifted\n"
  "//register I2S_TCR5_W0W(n)   ( (n & 0x1f)<<16)    // Word 0 Width\n"
  "//register I2S_TCR5_WNW(n)   ( (n & 0x1f)<<24)    // Word N Width\n"
  "//register I2S0_TDR0   0x4002F020 // SAI Transmit Data Register\n"
  "//register I2S0_TDR1   0x4002F024 // SAI Transmit Data Register\n"
  "//register I2S0_TFR0   0x4002F040 // SAI Transmit FIFO Register\n"
  "//register I2S0_TFR1   0x4002F044 // SAI Transmit FIFO Register\n"
  "//register I2S_TFR_RFP(n)   ( n & 7)       // read FIFO pointer\n"
  "//register I2S_TFR_WFP(n)   ( (n & 7)<<16)       // write FIFO pointer\n"
  "//register I2S0_TMR   0x4002F060 // SAI Transmit Mask Register\n"
  "//register I2S_TMR_TWM(n)   ( n & 0xFFFFFFFF)\n"
  "//register I2S0_RCSR   0x4002F080 // SAI Receive Control Register\n"
  "//register I2S_RCSR_RE    0x80000000 // Receiver Enable\n"
  "//register I2S_RCSR_STOPE    0x40000000 // Receiver Enable in Stop mode\n"
  "//register I2S_RCSR_DBGE    0x20000000 // Receiver Enable in Debug mode\n"
  "//register I2S_RCSR_BCE    0x10000000 // Bit Clock Enable\n"
  "//register I2S_RCSR_FR    0x02000000 // FIFO Reset\n"
  "//register I2S_RCSR_SR    0x01000000 // Software Reset\n"
  "//register I2S_RCSR_WSF    0x00100000 // Word Start Flag\n"
  "//register I2S_RCSR_SEF    0x00080000 // Sync Error Flag\n"
  "//register I2S_RCSR_FEF    0x00040000 // FIFO Error Flag (underrun)\n"
  "//register I2S_RCSR_FWF    0x00020000 // FIFO Warning Flag (empty)\n"
  "//register I2S_RCSR_FRF    0x00010000 // FIFO Request Flag (Data Ready)\n"
  "//register I2S_RCSR_WSIE    0x00001000 // Word Start Interrupt Enable\n"
  "//register I2S_RCSR_SEIE    0x00000800 // Sync Error Interrupt Enable\n"
  "//register I2S_RCSR_FEIE    0x00000400 // FIFO Error Interrupt Enable\n"
  "//register I2S_RCSR_FWIE    0x00000200 // FIFO Warning Interrupt Enable\n"
  "//register I2S_RCSR_FRIE    0x00000100 // FIFO Request Interrupt Enable\n"
  "//register I2S_RCSR_FWDE    0x00000002 // FIFO Warning DMA Enable\n"
  "//register I2S_RCSR_FRDE    0x00000001 // FIFO Request DMA Enable\n"
  "//register I2S0_RCR1   0x4002F084 // SAI Receive Configuration 1 Register\n"
  "//register I2S_RCR1_RFW(n)   ( n & 0x03)       // Receive FIFO watermark\n"
  "//register I2S0_RCR2   0x4002F088 // SAI Receive Configuration 2 Register\n"
  "//register I2S_RCR2_DIV(n)   ( n & 0xff)       // Bit clock divide by (DIV+1)*2\n"
  "//register I2S_RCR2_BCD   ( 1<<24)       // Bit clock direction\n"
  "//register I2S_RCR2_BCP   ( 1<<25)       // Bit clock polarity\n"
  "//register I2S_RCR2_MSEL(n)  ( (n & 3)<<26)       // MCLK select, 0=bus clock, 1=I2S0_MCLK\n"
  "//register I2S_RCR2_BCI   ( 1<<28)       // Bit clock input\n"
  "//register I2S_RCR2_BCS   ( 1<<29)       // Bit clock swap\n"
  "//register I2S_RCR2_SYNC(n)  ( (n & 3)<<30)       // 0=async 1=sync with receiver\n"
  "//register I2S0_RCR3   0x4002F08C // SAI Receive Configuration 3 Register\n"
  "//register I2S_RCR3_WDFL(n)  ( n & 0x0f)       // word flag configuration\n"
  "//register I2S_RCR3_RCE   ( 0x10000)       // receive channel enable\n"
  "//register I2S0_RCR4   0x4002F090 // SAI Receive Configuration 4 Register\n"
  "//register I2S_RCR4_FSD   ( 1)        // Frame Sync Direction\n"
  "//register I2S_RCR4_FSP   ( 2)        // Frame Sync Polarity\n"
  "//register I2S_RCR4_FSE   ( 8)        // Frame Sync Early\n"
  "//register I2S_RCR4_MF   ( 0x10)       // MSB First\n"
  "//register I2S_RCR4_SYWD(n)  ( (n & 0x1f)<<8)     // Sync Width\n"
  "//register I2S_RCR4_FRSZ(n)  ( (n & 0x0f)<<16)    // Frame Size\n"
  "//register I2S0_RCR5   0x4002F094 // SAI Receive Configuration 5 Register\n"
  "//register I2S_RCR5_FBT(n)   ( (n & 0x1f)<<8)     // First Bit Shifted\n"
  "//register I2S_RCR5_W0W(n)   ( (n & 0x1f)<<16)    // Word 0 Width\n"
  "//register I2S_RCR5_WNW(n)   ( (n & 0x1f)<<24)    // Word N Width\n"
  "//register I2S0_RDR0   0x4002F0A0 // SAI Receive Data Register\n"
  "//register I2S0_RDR1   0x4002F0A4 // SAI Receive Data Register\n"
  "//register I2S0_RFR0   0x4002F0C0 // SAI Receive FIFO Register\n"
  "//register I2S0_RFR1   0x4002F0C4 // SAI Receive FIFO Register\n"
  "//register I2S_RFR_RFP(n)   ( n & 7)       // read FIFO pointer\n"
  "//register I2S_RFR_WFP(n)   ( (n & 7)<<16)       // write FIFO pointer\n"
  "//register I2S0_RMR   0x4002F0E0 // SAI Receive Mask Register\n"
  "//register I2S_RMR_RWM(n)   ( n & 0xFFFFFFFF)\n"
  "//register I2S0_MCR   0x4002F100 // SAI MCLK Control Register\n"
  "//register I2S_MCR_DUF   ( 1<<31)       // Divider Update Flag\n"
  "//register I2S_MCR_MOE   ( 1<<30)       // MCLK Output Enable\n"
  "//register I2S_MCR_MICS(n)   ( (n & 3)<<24)       // MCLK Input Clock Select\n"
  "//register I2S0_MDR   0x4002F104 // SAI MCLK Divide Register\n"
  "//register I2S_MDR_FRACT(n)  ( (n & 0xff)<<12)    // MCLK Fraction\n"
  "//register I2S_MDR_DIVIDE(n)  ( (n & 0xfff))       // MCLK Divide\n"
  "//\n"
  "//// Chapter 47: General-Purpose Input/Output (GPIO)\n"
  "register GPIOA_PDOR   : UInt32 at 0x400FF000 // Port Data Output Register\n"
  "register GPIOA_PSOR   : UInt32 at 0x400FF004 // Port Set Output Register\n"
  "register GPIOA_PCOR   : UInt32 at 0x400FF008 // Port Clear Output Register\n"
  "register GPIOA_PTOR   : UInt32 at 0x400FF00C // Port Toggle Output Register\n"
  "register GPIOA_PDIR   : UInt32 at 0x400FF010 // Port Data Input Register\n"
  "register GPIOA_PDDR   : UInt32 at 0x400FF014 // Port Data Direction Register\n"
  "register GPIOB_PDOR   : UInt32 at 0x400FF040 // Port Data Output Register\n"
  "register GPIOB_PSOR   : UInt32 at 0x400FF044 // Port Set Output Register\n"
  "register GPIOB_PCOR   : UInt32 at 0x400FF048 // Port Clear Output Register\n"
  "register GPIOB_PTOR   : UInt32 at 0x400FF04C // Port Toggle Output Register\n"
  "register GPIOB_PDIR   : UInt32 at 0x400FF050 // Port Data Input Register\n"
  "register GPIOB_PDDR   : UInt32 at 0x400FF054 // Port Data Direction Register\n"
  "register GPIOC_PDOR   : UInt32 at 0x400FF080 // Port Data Output Register\n"
  "register GPIOC_PSOR   : UInt32 at 0x400FF084 // Port Set Output Register\n"
  "register GPIOC_PCOR   : UInt32 at 0x400FF088 // Port Clear Output Register\n"
  "register GPIOC_PTOR   : UInt32 at 0x400FF08C // Port Toggle Output Register\n"
  "register GPIOC_PDIR   : UInt32 at 0x400FF090 // Port Data Input Register\n"
  "register GPIOC_PDDR   : UInt32 at 0x400FF094 // Port Data Direction Register\n"
  "register GPIOD_PDOR   : UInt32 at 0x400FF0C0 // Port Data Output Register\n"
  "register GPIOD_PSOR   : UInt32 at 0x400FF0C4 // Port Set Output Register\n"
  "register GPIOD_PCOR   : UInt32 at 0x400FF0C8 // Port Clear Output Register\n"
  "register GPIOD_PTOR   : UInt32 at 0x400FF0CC // Port Toggle Output Register\n"
  "register GPIOD_PDIR   : UInt32 at 0x400FF0D0 // Port Data Input Register\n"
  "register GPIOD_PDDR   : UInt32 at 0x400FF0D4 // Port Data Direction Register\n"
  "register GPIOE_PDOR   : UInt32 at 0x400FF100 // Port Data Output Register\n"
  "register GPIOE_PSOR   : UInt32 at 0x400FF104 // Port Set Output Register\n"
  "register GPIOE_PCOR   : UInt32 at 0x400FF108 // Port Clear Output Register\n"
  "register GPIOE_PTOR   : UInt32 at 0x400FF10C // Port Toggle Output Register\n"
  "register GPIOE_PDIR   : UInt32 at 0x400FF110 // Port Data Input Register\n"
  "register GPIOE_PDDR   : UInt32 at 0x400FF114 // Port Data Direction Register\n"
  "//\n"
  "//// Chapter 48: Touch sense input (TSI)\n"
  "//register TSI0_GENCS   0x40045000 // General Control and Status Register\n"
  "//register TSI_GENCS_LPCLKS   0x10000000  // \n"
  "//register TSI_GENCS_LPSCNITV(n)  (((n) & 15) << 24)  // \n"
  "//register TSI_GENCS_NSCN(n)  (((n) & 31) << 19)  // \n"
  "//register TSI_GENCS_PS(n)   (((n) & 7) << 16)  // \n"
  "//register TSI_GENCS_EOSF    0x00008000  // \n"
  "//register TSI_GENCS_OUTRGF   0x00004000  // \n"
  "//register TSI_GENCS_EXTERF   0x00002000  // \n"
  "//register TSI_GENCS_OVRF    0x00001000  // \n"
  "//register TSI_GENCS_SCNIP    0x00000200  // \n"
  "//register TSI_GENCS_SWTS    0x00000100  // \n"
  "//register TSI_GENCS_TSIEN    0x00000080  // \n"
  "//register TSI_GENCS_TSIIE    0x00000040  // \n"
  "//register TSI_GENCS_ERIE    0x00000020  // \n"
  "//register TSI_GENCS_ESOR    0x00000010  // \n"
  "//register TSI_GENCS_STM    0x00000002  // \n"
  "//register TSI_GENCS_STPE    0x00000001  // \n"
  "//register TSI0_SCANC   0x40045004 // SCAN Control Register\n"
  "//register TSI_SCANC_REFCHRG(n)  (((n) & 15) << 24)  // \n"
  "//register TSI_SCANC_EXTCHRG(n)  (((n) & 7) << 16)  // \n"
  "//register TSI_SCANC_SMOD(n)  (((n) & 255) << 8)  // \n"
  "//register TSI_SCANC_AMCLKS(n)  (((n) & 3) << 3)  // \n"
  "//register TSI_SCANC_AMPSC(n)  (((n) & 7) << 0)  // \n"
  "//register TSI0_PEN   0x40045008 // Pin Enable Register\n"
  "//register TSI0_WUCNTR   0x4004500C // Wake-Up Channel Counter Register\n"
  "//register TSI0_CNTR1   0x40045100 // Counter Register\n"
  "//register TSI0_CNTR3   0x40045104 // Counter Register\n"
  "//register TSI0_CNTR5   0x40045108 // Counter Register\n"
  "//register TSI0_CNTR7   0x4004510C // Counter Register\n"
  "//register TSI0_CNTR9   0x40045110 // Counter Register\n"
  "//register TSI0_CNTR11   0x40045114 // Counter Register\n"
  "//register TSI0_CNTR13   0x40045118 // Counter Register\n"
  "//register TSI0_CNTR15   0x4004511C // Counter Register\n"
  "//register TSI0_THRESHOLD   0x40045120 // Low Power Channel Threshold Register\n"
  "//\n"
  "//// Nested Vectored Interrupt Controller, Table 3-4 & ARMv7 ref, appendix B3.4 (page 750)\n"
  "//register NVIC_ENABLE_IRQ(n) (*((volatile uint32_t *)0xE000E100 + (n >> 5)) = (1 << (n & 31)))\n"
  "//register NVIC_DISABLE_IRQ(n) (*((volatile uint32_t *)0xE000E180 + (n >> 5)) = (1 << (n & 31)))\n"
  "//register NVIC_SET_PENDING(n) (*((volatile uint32_t *)0xE000E200 + (n >> 5)) = (1 << (n & 31)))\n"
  "//register NVIC_CLEAR_PENDING(n) (*((volatile uint32_t *)0xE000E280 + (n >> 5)) = (1 << (n & 31)))\n"
  "//\n"
  "//register NVIC_ISER0   0xE000E100\n"
  "//register NVIC_ISER1   0xE000E104\n"
  "//register NVIC_ICER0   0xE000E180\n"
  "//register NVIC_ICER1   0xE000E184\n"
  "//\n"
  "//// 0 = highest priority\n"
  "//// Cortex-M4: 0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240\n"
  "//// Cortex-M0: 0,64,128,192\n"
  "//register NVIC_SET_PRIORITY(irqnum, priority)  (*((volatile uint8_t *)0xE000E400 + (irqnum)) = (uint8_t)(priority))\n"
  "//register NVIC_GET_PRIORITY(irqnum) (*((uint8_t *)0xE000E400 + (irqnum)))\n"
  "//\n"
  "//register IRQ_DMA_CH0  0\n"
  "//register IRQ_DMA_CH1  1\n"
  "//register IRQ_DMA_CH2  2\n"
  "//register IRQ_DMA_CH3  3\n"
  "//register IRQ_DMA_CH4  4\n"
  "//register IRQ_DMA_CH5  5\n"
  "//register IRQ_DMA_CH6  6\n"
  "//register IRQ_DMA_CH7  7\n"
  "//register IRQ_DMA_CH8  8\n"
  "//register IRQ_DMA_CH9  9\n"
  "//register IRQ_DMA_CH10  10\n"
  "//register IRQ_DMA_CH11  11\n"
  "//register IRQ_DMA_CH12  12\n"
  "//register IRQ_DMA_CH13  13\n"
  "//register IRQ_DMA_CH14  14\n"
  "//register IRQ_DMA_CH15  15\n"
  "//register IRQ_DMA_ERROR  16\n"
  "//register IRQ_FTFL_COMPLETE 18\n"
  "//register IRQ_FTFL_COLLISION 19\n"
  "//register IRQ_LOW_VOLTAGE  20\n"
  "//register IRQ_LLWU  21\n"
  "//register IRQ_WDOG  22\n"
  "//register IRQ_I2C0  24\n"
  "//register IRQ_I2C1  25\n"
  "//register IRQ_SPI0  26\n"
  "//register IRQ_SPI1  27\n"
  "//register IRQ_CAN_MESSAGE  29\n"
  "//register IRQ_CAN_BUS_OFF  30\n"
  "//register IRQ_CAN_ERROR  31\n"
  "//register IRQ_CAN_TX_WARN  32\n"
  "//register IRQ_CAN_RX_WARN  33\n"
  "//register IRQ_CAN_WAKEUP  34\n"
  "//register IRQ_I2S0_TX  35\n"
  "//register IRQ_I2S0_RX  36\n"
  "//register IRQ_UART0_LON  44\n"
  "//register IRQ_UART0_STATUS 45\n"
  "//register IRQ_UART0_ERROR  46\n"
  "//register IRQ_UART1_STATUS 47\n"
  "//register IRQ_UART1_ERROR  48\n"
  "//register IRQ_UART2_STATUS 49\n"
  "//register IRQ_UART2_ERROR  50\n"
  "//register IRQ_ADC0  57\n"
  "//register IRQ_ADC1  58\n"
  "//register IRQ_CMP0  59\n"
  "//register IRQ_CMP1  60\n"
  "//register IRQ_CMP2  61\n"
  "//register IRQ_FTM0  62\n"
  "//register IRQ_FTM1  63\n"
  "//register IRQ_FTM2  64\n"
  "//register IRQ_CMT   65\n"
  "//register IRQ_RTC_ALARM  66\n"
  "//register IRQ_RTC_SECOND  67\n"
  "//register IRQ_PIT_CH0  68\n"
  "//register IRQ_PIT_CH1  69\n"
  "//register IRQ_PIT_CH2  70\n"
  "//register IRQ_PIT_CH3  71\n"
  "//register IRQ_PDB   72\n"
  "//register IRQ_USBOTG  73\n"
  "//register IRQ_USBDCD  74\n"
  "//register IRQ_DAC0  81\n"
  "//register IRQ_TSI   83\n"
  "//register IRQ_MCG   84\n"
  "//register IRQ_LPTMR  85\n"
  "//register IRQ_PORTA  87\n"
  "//register IRQ_PORTB  88\n"
  "//register IRQ_PORTC  89\n"
  "//register IRQ_PORTD  90\n"
  "//register IRQ_PORTE  91\n"
  "//register IRQ_SOFTWARE  94\n"
  "//register NVIC_NUM_INTERRUPTS 95\n"
  "//\n"
  "//// System Control Space (SCS), ARMv7 ref manual, B3.2, page 708\n"
  "//register SCB_CPUID  *(const    uint32_t *)0xE000ED00 // CPUID Base Register\n"
  "//register SCB_ICSR   0xE000ED04 // Interrupt Control and State\n"
  "//register SCB_ICSR_PENDSTSET   0x04000000\n"
  "//register SCB_VTOR   0xE000ED08 // Vector Table Offset\n"
  "//register SCB_AIRCR   0xE000ED0C // Application Interrupt and Reset Control\n"
  "//register SCB_SCR    0xE000ED10 // System Control Register\n"
  "//register SCB_CCR    0xE000ED14 // Configuration and Control\n"
  "//register SCB_SHPR1   0xE000ED18 // System Handler Priority Register 1\n"
  "//register SCB_SHPR2   0xE000ED1C // System Handler Priority Register 2\n"
  "//register SCB_SHPR3   0xE000ED20 // System Handler Priority Register 3\n"
  "//register SCB_SHCSR   0xE000ED24 // System Handler Control and State\n"
  "//register SCB_CFSR   0xE000ED28 // Configurable Fault Status Register\n"
  "//register SCB_HFSR   0xE000ED2C // HardFault Status\n"
  "//register SCB_DFSR   0xE000ED30 // Debug Fault Status\n"
  "//register SCB_MMFAR   0xE000ED34 // MemManage Fault Address\n"
  "\n"
  "register SYST_CSR : UInt32 at 0xE000E010 // SysTick Control and Status\n"
  "let SYST_CSR_COUNTFLAG  : UInt32 = 0x00010000\n"
  "let SYST_CSR_CLKSOURCE   : UInt32= 0x00000004\n"
  "let SYST_CSR_TICKINT  : UInt32 = 0x00000002\n"
  "let SYST_CSR_ENABLE   : UInt32 =  0x00000001\n"
  "register SYST_RVR   : UInt32 at 0xE000E014 // SysTick Reload Value Register\n"
  "register SYST_CVR   : UInt32 at 0xE000E018 // SysTick Current Value Register\n"
  "register @ro SYST_CALIB : UInt32 at 0xE000E01C // SysTick Calibration Value\n"
  "\n"
  "\n"
  "//register ARM_DEMCR   0xE000EDFC // Debug Exception and Monitor Control\n"
  "//register ARM_DEMCR_TRCENA  (1 << 24)  // Enable debugging & monitoring blocks\n"
  "//register ARM_DWT_CTRL   0xE0001000 // DWT control register\n"
  "//register ARM_DWT_CTRL_CYCCNTENA  (1 << 0)  // Enable cycle count\n"
  "//register ARM_DWT_CYCCNT   0xE0001004 // Cycle count register\n" ;

const cRegularFileWrapper gWrapperFile_0_targetTemplates (
  "mk20dx256.plm",
  "plm",
  true, // Text file
  143369, // Text length
  gWrapperFileContent_0_targetTemplates
) ;

//--- All files of 'microcontrollers' directory

static const cRegularFileWrapper * gWrapperAllFiles_targetTemplates_1 [2] = {
  & gWrapperFile_0_targetTemplates,
  NULL
} ;

//--- All sub-directories of 'microcontrollers' directory

static const cDirectoryWrapper * gWrapperAllDirectories_targetTemplates_1 [1] = {
  NULL
} ;

//--- Directory 'microcontrollers'

const cDirectoryWrapper gWrapperDirectory_1_targetTemplates (
  "microcontrollers",
  1,
  gWrapperAllFiles_targetTemplates_1,
  0,
  gWrapperAllDirectories_targetTemplates_1
) ;

//--- File 'targets/target-teensy-sequential-systick.plms'

const char * gWrapperFileContent_1_targetTemplates = "newUnsignedBaseType @unsigned8  \"uint8_t\"   8\n"
  "newUnsignedBaseType @unsigned16 \"uint16_t\" 16\n"
  "newUnsignedBaseType @unsigned32 \"uint32_t\" 32\n"
  "newUnsignedBaseType @unsigned64 \"uint64_t\" 64\n"
  "\n"
  "newSignedBaseType @signed8  \"int8_t\"   8\n"
  "newSignedBaseType @signed16 \"int16_t\" 16\n"
  "newSignedBaseType @signed32 \"int32_t\" 32\n"
  "newSignedBaseType @signed64 \"int64_t\" 64\n"
  "\n"
  "newUnsignedBaseType @size \"uint32_t\" 32\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "newBooleanType Bool @unsigned8\n"
  "\n"
  "newIntegerType UInt8  @unsigned8\n"
  "newIntegerType UInt16 @unsigned16\n"
  "newIntegerType UInt32 @unsigned32\n"
  "newIntegerType UInt64 @unsigned64\n"
  "\n"
  "newIntegerType Int8  @signed8\n"
  "newIntegerType Int16 @signed16\n"
  "newIntegerType Int32 @signed32\n"
  "newIntegerType Int64 @signed64\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "import \"microcontrollers/mk20dx256.plm\"\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "mode $isr\n"
  "mode $user\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc $user setup ()\n"
  "required proc $user loop ()\n"
  "required proc $isr systickHandler ()\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "var $isr $user gUpTimeInMilliseconds : UInt32 = 0\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc $isr systickHandler () {\n"
  "  gUpTimeInMilliseconds ++\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "func $user uptimeMS () ->UInt32 outUpTimeInMilliseconds {\n"
  "  outUpTimeInMilliseconds = gUpTimeInMilliseconds\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc $user busyWaitingDuringMS (\?UInt32 inDurationInMS) {\n"
  "  var deadline = uptimeMS () + inDurationInMS\n"
  "  while (uptimeMS () < deadline) do\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n" ;

const cRegularFileWrapper gWrapperFile_1_targetTemplates (
  "target-teensy-sequential-systick.plms",
  "plms",
  true, // Text file
  1950, // Text length
  gWrapperFileContent_1_targetTemplates
) ;

//--- File 'targets/target-teensy-sequential.plms'

const char * gWrapperFileContent_2_targetTemplates = "newUnsignedBaseType @unsigned8  \"uint8_t\"   8\n"
  "newUnsignedBaseType @unsigned16 \"uint16_t\" 16\n"
  "newUnsignedBaseType @unsigned32 \"uint32_t\" 32\n"
  "newUnsignedBaseType @unsigned64 \"uint64_t\" 64\n"
  "\n"
  "newSignedBaseType @signed8  \"int8_t\"   8\n"
  "newSignedBaseType @signed16 \"int16_t\" 16\n"
  "newSignedBaseType @signed32 \"int32_t\" 32\n"
  "newSignedBaseType @signed64 \"int64_t\" 64\n"
  "\n"
  "newUnsignedBaseType @size \"uint32_t\" 32\n"
  "\n"
  "newBooleanType Bool @unsigned8\n"
  "\n"
  "newIntegerType UInt8  @unsigned8\n"
  "newIntegerType UInt16 @unsigned16\n"
  "newIntegerType UInt32 @unsigned32\n"
  "newIntegerType UInt64 @unsigned64\n"
  "\n"
  "newIntegerType Int8  @signed8\n"
  "newIntegerType Int16 @signed16\n"
  "newIntegerType Int32 @signed32\n"
  "newIntegerType Int64 @signed64\n"
  "\n"
  "import \"microcontrollers/mk20dx256.plm\"\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "mode $isr\n"
  "mode $user\n"
  "\n"
  "required proc $user setup ()\n"
  "required proc $user loop ()\n"
  "\n" ;

const cRegularFileWrapper gWrapperFile_2_targetTemplates (
  "target-teensy-sequential.plms",
  "plms",
  true, // Text file
  885, // Text length
  gWrapperFileContent_2_targetTemplates
) ;

//--- File 'target-teensy-sequential/build-as.py'

const char * gWrapperFileContent_3_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"as\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_3_targetTemplates (
  "build-as.py",
  "py",
  true, // Text file
  996, // Text length
  gWrapperFileContent_3_targetTemplates
) ;

//--- File 'target-teensy-sequential/build-verbose.py'

const char * gWrapperFileContent_4_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"all\", \"1\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_4_targetTemplates (
  "build-verbose.py",
  "py",
  true, // Text file
  1002, // Text length
  gWrapperFileContent_4_targetTemplates
) ;

//--- File 'target-teensy-sequential/build.py'

const char * gWrapperFileContent_5_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess, sys, os, copy\n"
  "import urllib, shutil\n"
  "import subprocess, re\n"
  "from time import time\n"
  "import platform\n"
  "import json\n"
  "import threading, operator\n"
  "\n"
  "if sys.version_info >= (2, 6) :\n"
  "  import multiprocessing\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   processorCount                                                                                                     *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def processorCount () :\n"
  "  if sys.version_info >= (2, 6) :\n"
  "    coreCount = multiprocessing.cpu_count ()\n"
  "  else:\n"
  "    coreCount = 1\n"
  "  return coreCount\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   FOR PRINTING IN COLOR                                                                                              *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BLACK () :\n"
  "  return '\\033[90m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def RED () :\n"
  "  return '\\033[91m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def GREEN () :\n"
  "  return '\\033[92m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def YELLOW () :\n"
  "  return '\\033[93m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BLUE () :\n"
  "  return '\\033[94m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def MAGENTA () :\n"
  "  return '\\033[95m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def CYAN () :\n"
  "  return '\\033[96m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def WHITE () :\n"
  "  return '\\033[97m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def ENDC () :\n"
  "  return '\\033[0m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD () :\n"
  "  return '\\033[1m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def UNDERLINE () :\n"
  "  return '\\033[4m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BLINK () :\n"
  "  return '\\033[5m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_BLUE () :\n"
  "  return BOLD () + BLUE ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_GREEN () :\n"
  "  return BOLD () + GREEN ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_RED () :\n"
  "  return BOLD () + RED ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runHiddenCommand                                                                                                   *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runHiddenCommand (cmd) :\n"
  "  result = \"\"\n"
  "  childProcess = subprocess.Popen (cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n"
  "  while True:\n"
  "    line = childProcess.stdout.readline ()\n"
  "    if line != \"\":\n"
  "      result += line\n"
  "    else:\n"
  "      childProcess.wait ()\n"
  "      if childProcess.returncode != 0 :\n"
  "        sys.exit (childProcess.returncode)\n"
  "      return result\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runSingleCommand                                                                                                   *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runSingleCommand (cmd) :\n"
  "  cmdAsString = \"\"\n"
  "  for s in cmd:\n"
  "    if (s == \"\") or (s.find (\" \") >= 0):\n"
  "      cmdAsString += '\"' + s + '\" '\n"
  "    else:\n"
  "      cmdAsString += s + ' '\n"
  "  print cmdAsString\n"
  "  childProcess = subprocess.Popen (cmd)\n"
  "  childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    sys.exit (childProcess.returncode)\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runCommand                                                                                                         *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runCommand (cmd, title, showCommand) :\n"
  "  if title != \"\":\n"
  "    print BOLD_BLUE () + title + ENDC ()\n"
  "  if (title == \"\") or showCommand :\n"
  "    cmdAsString = \"\"\n"
  "    for s in cmd:\n"
  "      if (s == \"\") or (s.find (\" \") >= 0):\n"
  "        cmdAsString += '\"' + s + '\" '\n"
  "      else:\n"
  "        cmdAsString += s + ' '\n"
  "    print cmdAsString\n"
  "  childProcess = subprocess.Popen (cmd)\n"
  "  childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    sys.exit (childProcess.returncode)\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runInThread                                                                                                        *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runInThread (job, displayLock, terminationSemaphore):\n"
  "  childProcess = subprocess.Popen (job.mCommand, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n"
  "  while True:\n"
  "    line = childProcess.stdout.readline ()\n"
  "    if line != \"\":\n"
  "      displayLock.acquire ()\n"
  "      sys.stdout.write (line) # Print without newline\n"
  "      displayLock.release ()\n"
  "    else:\n"
  "      childProcess.wait ()\n"
  "      job.mReturnCode = childProcess.returncode\n"
  "      terminationSemaphore.release ()\n"
  "      break\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   modificationDateForFile                                                                                            *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def modificationDateForFile (dateCacheDictionary, file):\n"
  "  absFilePath = os.path.abspath (file)\n"
  "  if dateCacheDictionary.has_key (absFilePath) :\n"
  "    return dateCacheDictionary [absFilePath]\n"
  "  elif not os.path.exists (absFilePath):\n"
  "    date = sys.float_info.max # Very far in future\n"
  "    dateCacheDictionary [absFilePath] = date\n"
  "    return date\n"
  "  else:\n"
  "    date = os.path.getmtime (absFilePath)\n"
  "    dateCacheDictionary [absFilePath] = date\n"
  "    return date\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class PostCommand                                                                                                  *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class PostCommand:\n"
  "  mCommand = []\n"
  "  mTitle = \"\"\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, title = \"\"):\n"
  "    self.mCommand = []\n"
  "    self.mTitle = title\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class Job                                                                                                          *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class Job:\n"
  "  mTarget = \"\"\n"
  "  mCommand = []\n"
  "  mTitle = \"\"\n"
  "  mRequiredFiles = []\n"
  "  mPostCommands = []\n"
  "  mReturnCode = None\n"
  "  mPriority = 0\n"
  "  mState = 0 # 0: waiting for execution\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, target, requiredFiles, command, postCommands, priority, title):\n"
  "    self.mTarget = copy.deepcopy (target)\n"
  "    self.mCommand = copy.deepcopy (command)\n"
  "    self.mRequiredFiles = copy.deepcopy (requiredFiles)\n"
  "    self.mTitle = copy.deepcopy (title)\n"
  "    self.mPostCommands = copy.deepcopy (postCommands)\n"
  "    self.mPriority = priority\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def run (self, displayLock, terminationSemaphore, showCommand):\n"
  "    displayLock.acquire ()\n"
  "    if self.mTitle != \"\":\n"
  "      print BOLD_BLUE () + self.mTitle + ENDC ()\n"
  "    if (self.mTitle == \"\") or showCommand :\n"
  "      cmdAsString = \"\"\n"
  "      for s in self.mCommand:\n"
  "        if (s == \"\") or (s.find (\" \") >= 0):\n"
  "          cmdAsString += '\"' + s + '\" '\n"
  "        else:\n"
  "          cmdAsString += s + ' '\n"
  "      print cmdAsString\n"
  "    displayLock.release ()\n"
  "    thread = threading.Thread (target=runInThread, args=(self, displayLock, terminationSemaphore))\n"
  "    thread.start()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def runPostCommand (self, displayLock, terminationSemaphore, showCommand):\n"
  "    postCommand = self.mPostCommands [0]\n"
  "    self.mCommand = postCommand.mCommand\n"
  "    displayLock.acquire ()\n"
  "    print BOLD_BLUE () + postCommand.mTitle + ENDC ()\n"
  "    if showCommand:\n"
  "      cmdAsString = \"\"\n"
  "      for s in self.mCommand:\n"
  "        if (s == \"\") or (s.find (\" \") >= 0):\n"
  "          cmdAsString += '\"' + s + '\" '\n"
  "        else:\n"
  "          cmdAsString += s + ' '\n"
  "      print cmdAsString\n"
  "    displayLock.release ()\n"
  "    thread = threading.Thread (target=runInThread, args=(self, displayLock, terminationSemaphore))\n"
  "    thread.start()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class Rule                                                                                                         *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class Rule:\n"
  "  mTarget = \"\"\n"
  "  mDependences = []\n"
  "  mCommand = []\n"
  "  mSecondaryMostRecentModificationDate = 0.0 # Far in the past\n"
  "  mTitle = \"\"\n"
  "  mPostCommands = []\n"
  "  mPriority = 0\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, target, title = \"\"):\n"
  "    self.mTarget = copy.deepcopy (target)\n"
  "    self.mDependences = []\n"
  "    self.mCommand = []\n"
  "    self.mSecondaryMostRecentModificationDate = 0.0\n"
  "    self.mPostCommands = []\n"
  "    self.mPriority = 0\n"
  "    if title == \"\":\n"
  "      self.mTitle = \"Building \" + target\n"
  "    else:\n"
  "      self.mTitle = copy.deepcopy (title)\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def enterSecondaryDependanceFile (self, secondaryDependanceFile):\n"
  "    if secondaryDependanceFile != \"\":\n"
  "      filePath = os.path.abspath (secondaryDependanceFile)\n"
  "      if os.path.exists (filePath):\n"
  "        f = open (filePath, \"r\")\n"
  "        s = f.read ().replace (\"\\\\ \", \"\\x01\") # Read and replace escaped spaces by \\0x01\n"
  "        f.close ()\n"
  "        s = s.replace (\"\\\\\\n\", \"\")\n"
  "        liste = s.split (\"\\n\\n\")\n"
  "        dateCacheDictionary = {}\n"
  "        for s in liste:\n"
  "          components = s.split (':')\n"
  "          target = components [0].replace (\"\\x01\", \" \")\n"
  "          #print \"------- Optional dependency rules for target '\" + target + \"'\"\n"
  "          #print \"Secondary target '\" + target + \"'\"\n"
  "          for src in components [1].split ():\n"
  "            secondarySource = src.replace (\"\\x01\", \" \")\n"
  "            #print \"  '\" + secondarySource + \"'\"\n"
  "            modifDate = modificationDateForFile (dateCacheDictionary, secondarySource)\n"
  "            if self.mSecondaryMostRecentModificationDate < modifDate :\n"
  "              self.mSecondaryMostRecentModificationDate = modifDate\n"
  "              #print BOLD_BLUE () + str (modifDate) + ENDC ()\n"
  "    \n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class Make                                                                                                         *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class Make:\n"
  "  mRuleList = []\n"
  "  mJobList = []\n"
  "  mErrorCount = 0\n"
  "  mModificationDateDictionary = {}\n"
  "  mGoals = {}\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def addRule (self, rule):\n"
  "    self.mRuleList.append (copy.deepcopy (rule))\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printRules (self):\n"
  "    print BOLD_BLUE () + \"--- Print the \" + str (len (self.mRuleList)) + \" rule\" + (\"s\" if len (self.mRuleList) > 1 else \"\") + \" ---\" + ENDC ()\n"
  "    for rule in self.mRuleList:\n"
  "      print BOLD_GREEN () + \"Target: '\" + rule.mTarget + \"'\" + ENDC ()\n"
  "      for dep in rule.mDependences:\n"
  "        print \"  Dependence: '\" + dep + \"'\"\n"
  "      s = \"  Command: \"\n"
  "      for cmd in rule.mCommand:\n"
  "        s += \" \\\"\" + cmd + \"\\\"\"\n"
  "      print s\n"
  "      print \"  Title: '\" + rule.mTitle + \"'\"\n"
  "      index = 0\n"
  "      for (command, title) in rule.mPostCommands:\n"
  "        index = index + 1\n"
  "        s = \"  Post command \" + str (index) + \": \"\n"
  "        for cmd in command:\n"
  "          s += \" \\\"\" + cmd + \"\\\"\"\n"
  "        print s\n"
  "        print \"  Its title: '\" + title + \"'\"\n"
  "        \n"
  "    print BOLD_BLUE () + \"--- End of print rule ---\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def writeRuleDependancesInDotFile (self, dotFileName):\n"
  "    s = \"digraph G {\\n\"\n"
  "    s += \"  node [fontname=courier]\\n\"\n"
  "    arrowSet = set ()\n"
  "    for rule in self.mRuleList:\n"
  "      s += '  \"' + rule.mTarget + '\" [shape=rectangle]\\n'\n"
  "      for dep in rule.mDependences:\n"
  "        arrowSet.add ('  \"' + rule.mTarget + '\" -> \"' + dep + '\"\\n')\n"
  "    for arrow in arrowSet:\n"
  "      s += arrow\n"
  "    s += \"}\\n\"\n"
  "    f = open (dotFileName, \"w\")\n"
  "    f.write (s)\n"
  "    f.close ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def checkRules (self):\n"
  "    if self.mErrorCount == 0:\n"
  "      ruleList = copy.deepcopy (self.mRuleList)\n"
  "      index = 0\n"
  "      looping = True\n"
  "    #--- loop on rules\n"
  "      while looping:\n"
  "        looping = False\n"
  "        while index < len (ruleList):\n"
  "          aRule = ruleList [index]\n"
  "          index = index + 1\n"
  "        #--- Check dependance files have rule for building, or does exist\n"
  "          depIdx = 0\n"
  "          while depIdx < len (aRule.mDependences):\n"
  "            dep = aRule.mDependences [depIdx]\n"
  "            depIdx = depIdx + 1\n"
  "            hasBuildRule = False\n"
  "            for r in ruleList:\n"
  "              if dep == r.mTarget:\n"
  "                hasBuildRule = True\n"
  "                break\n"
  "            if not hasBuildRule:\n"
  "              looping = True\n"
  "              if not os.path.exists (os.path.abspath (dep)):\n"
  "                self.mErrorCount = self.mErrorCount + 1\n"
  "                print BOLD_RED () + \"Check rules error: '\" + dep + \"' does not exist, and there is no rule for building it.\" + ENDC ()\n"
  "              depIdx = depIdx - 1\n"
  "              aRule.mDependences.pop (depIdx)\n"
  "        #--- Rule with no dependances\n"
  "          if len (aRule.mDependences) == 0 :\n"
  "            looping = True\n"
  "            index = index - 1\n"
  "            ruleList.pop (index)\n"
  "            idx = 0\n"
  "            while idx < len (ruleList):\n"
  "              r = ruleList [idx]\n"
  "              idx = idx + 1\n"
  "              while r.mDependences.count (aRule.mTarget) > 0 :\n"
  "                r.mDependences.remove (aRule.mTarget)\n"
  "    #--- Error if rules remain\n"
  "      if len (ruleList) > 0:\n"
  "        self.mErrorCount = self.mErrorCount + 1\n"
  "        print BOLD_RED () + \"Check rules error; circulary dependances between:\" + ENDC ()\n"
  "        for aRule in ruleList: \n"
  "          print BOLD_RED () + \"  - '\" + aRule.mTarget + \"', depends from:\" + ENDC ()\n"
  "          for dep in aRule.mDependences:\n"
  "            print BOLD_RED () + \"      '\" + dep + \"'\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def existsJobForTarget (self, target):\n"
  "    for job in self.mJobList:\n"
  "      if job.mTarget == target:\n"
  "        return True\n"
  "    return False\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def makeJob (self, target): # Return a bool indicating wheither the target should be built\n"
  "  #--- If there are errors, return immediatly\n"
  "    if self.mErrorCount != 0:\n"
  "      return False\n"
  "  #--- Target already in job list \?\n"
  "    if self.existsJobForTarget (target):\n"
  "      return True # yes, return target will be built\n"
  "  #--- Find a rule for making the target\n"
  "    absTarget = os.path.abspath (target)\n"
  "    rule = None\n"
  "    matchCount = 0\n"
  "    for r in self.mRuleList:\n"
  "      if target == r.mTarget:\n"
  "        matchCount = matchCount + 1\n"
  "        rule = r\n"
  "    if matchCount == 0:\n"
  "      absTarget = os.path.abspath (target)\n"
  "      if not os.path.exists (absTarget):\n"
  "        print BOLD_RED () + \"No rule for making '\" + target + \"'\" + ENDC ()\n"
  "        self.mErrorCount = self.mErrorCount + 1\n"
  "      return False # Error or target exists, and no rule for building it\n"
  "    elif matchCount > 1:\n"
  "      print BOLD_RED () + str (matchCount) + \" rules for making '\" + target + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "      return False # Error\n"
  "  #--- Target file does not exist, and 'rule' variable indicates how build it\n"
  "    appendToJobList = not os.path.exists (absTarget)\n"
  "  #--- Build primary dependences\n"
  "    jobDependenceFiles = []\n"
  "    for dependence in rule.mDependences:\n"
  "      willBeBuilt = self.makeJob (dependence)\n"
  "      if willBeBuilt:\n"
  "        jobDependenceFiles.append (dependence)\n"
  "        appendToJobList = True\n"
  "  #--- Check primary file modification dates\n"
  "    if not appendToJobList:\n"
  "      targetDateModification = os.path.getmtime (absTarget)\n"
  "      for source in rule.mDependences:\n"
  "        sourceDateModification = os.path.getmtime (source)\n"
  "        if targetDateModification < sourceDateModification:\n"
  "          appendToJobList = True\n"
  "          break\n"
  "  #--- Check for secondary dependancy files\n"
  "    if not appendToJobList:\n"
  "      targetDateModification = os.path.getmtime (absTarget)\n"
  "      if targetDateModification < rule.mSecondaryMostRecentModificationDate:\n"
  "        appendToJobList = True\n"
  "  #--- Append to job list\n"
  "    if appendToJobList:\n"
  "      self.mJobList.append (Job (target, jobDependenceFiles, rule.mCommand, rule.mPostCommands, rule.mPriority, rule.mTitle))\n"
  "  #--- Return\n"
  "    return appendToJobList\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "  #Job state\n"
  "  # 0: waiting\n"
  "  # 1:running\n"
  "  # 2: waiting for executing post command\n"
  "  # 3:executing for executing post command\n"
  "  # 4: completed\n"
  "\n"
  "  def runJobs (self, maxConcurrentJobs, showCommand):\n"
  "    if self.mErrorCount == 0:\n"
  "      if len (self.mJobList) == 0:\n"
  "        print BOLD_BLUE () + \"Nothing to make.\" + ENDC ()\n"
  "      else:\n"
  "      #--- Sort jobs following their priorities\n"
  "        self.mJobList = sorted (self.mJobList, key=operator.attrgetter(\"mPriority\"), reverse=True)\n"
  "      #--- Run\n"
  "        if maxConcurrentJobs <= 0:\n"
  "          maxConcurrentJobs = processorCount () - maxConcurrentJobs\n"
  "        jobCount = 0 ;\n"
  "        terminationSemaphore = threading.Semaphore (0)\n"
  "        displayLock = threading.Lock ()\n"
  "        loop = True\n"
  "        returnCode = 0\n"
  "        while loop:\n"
  "        #--- Launch jobs in parallel\n"
  "          for job in self.mJobList:\n"
  "            if (returnCode == 0) and (jobCount < maxConcurrentJobs):\n"
  "              if (job.mState == 0) and (len (job.mRequiredFiles) == 0):\n"
  "                #--- Create target directory if does not exist\n"
  "                absTargetDirectory = os.path.dirname (os.path.abspath (job.mTarget))\n"
  "                if not os.path.exists (absTargetDirectory):\n"
  "                  displayLock.acquire ()\n"
  "                  runCommand ([\"mkdir\", \"-p\", absTargetDirectory], \"Making \" + absTargetDirectory + \" directory\", showCommand)\n"
  "                  displayLock.release ()\n"
  "                #--- Run job\n"
  "                job.run (displayLock, terminationSemaphore, showCommand)\n"
  "                jobCount = jobCount + 1\n"
  "                job.mState = 1 # Means is running\n"
  "              elif job.mState == 2: # Waiting for executing post command\n"
  "                job.mReturnCode = None # Means post command not terminated\n"
  "                job.runPostCommand (displayLock, terminationSemaphore, showCommand)\n"
  "                jobCount = jobCount + 1\n"
  "                job.mState = 3 # Means post command is running\n"
  "        #--- Wait for a job termination\n"
  "          #print \"wait \" + str (jobCount) + \" \" + str (len (self.mJobList))\n"
  "          terminationSemaphore.acquire ()\n"
  "        #--- Checks for terminated jobs\n"
  "          index = 0\n"
  "          while index < len (self.mJobList):\n"
  "            job = self.mJobList [index]\n"
  "            index = index + 1\n"
  "            if (job.mState == 1) and (job.mReturnCode == 0) : # Terminated without error\n"
  "              jobCount = jobCount - 1\n"
  "              if len (job.mPostCommands) > 0:\n"
  "                job.mState = 2 # Ready to execute next post command\n"
  "              else:\n"
  "                job.mState = 4 # Completed\n"
  "                index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 1) and (job.mReturnCode > 0) : # terminated with error : exit\n"
  "              jobCount = jobCount - 1\n"
  "              job.mState = 4 # Means Terminated\n"
  "              index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 3) and (job.mReturnCode == 0): # post command is terminated without error\n"
  "              jobCount = jobCount - 1\n"
  "              job.mPostCommands.pop (0) # Remove completed post command\n"
  "              if len (job.mPostCommands) > 0:\n"
  "                job.mState = 2 # Ready to execute next post command\n"
  "              else:\n"
  "                job.mState = 4 # Completed\n"
  "                index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 3) and (job.mReturnCode > 0): # post command is terminated with error\n"
  "              jobCount = jobCount - 1\n"
  "              job.mState = 4 # Completed\n"
  "              index = index - 1 # For removing job from list\n"
  "            elif job.mState == 4: # Completed: delete job\n"
  "              index = index - 1\n"
  "              self.mJobList.pop (index) # Remove terminated job\n"
  "              #displayLock.acquire ()\n"
  "              #print \"Completed '\" + job.mTitle + \"'\"\n"
  "              #--- Remove dependences from this job\n"
  "              idx = 0\n"
  "              while idx < len (self.mJobList):\n"
  "                aJob = self.mJobList [idx]\n"
  "                idx = idx + 1\n"
  "                while aJob.mRequiredFiles.count (job.mTarget) > 0 :\n"
  "                  aJob.mRequiredFiles.remove (job.mTarget)\n"
  "                  #print \"  Removed from '\" + aJob.mTitle + \"': \" + str (len (aJob.mRequiredFiles))\n"
  "              #displayLock.release ()\n"
  "              #--- Signal error \?\n"
  "              if (job.mReturnCode > 0) and (returnCode == 0):\n"
  "                self.mErrorCount = self.mErrorCount + 1\n"
  "                print BOLD_RED () + \"Return code: \" + str (job.mReturnCode) + ENDC ()\n"
  "                if (returnCode == 0) and (jobCount > 0) :\n"
  "                  print \"Wait for job termination...\"\n"
  "                returnCode = job.mReturnCode\n"
  "          loop = (len (self.mJobList) > 0) if (returnCode == 0) else (jobCount > 0)\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def searchFileInDirectories (self, file, directoryList): # returns \"\" if not found, register error\n"
  "    matchCount = 0\n"
  "    result = \"\"\n"
  "    for sourceDir in directoryList:\n"
  "      sourcePath = sourceDir + \"/\" + file\n"
  "      if os.path.exists (os.path.abspath (sourcePath)):\n"
  "        matchCount = matchCount + 1\n"
  "        result = sourcePath\n"
  "    if matchCount == 0:\n"
  "      print BOLD_RED () + \"Cannot find '\" + file + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "    elif matchCount > 1:\n"
  "      print BOLD_RED () + str (matchCount) + \" source files for making '\" + file + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "      result = \"\"\n"
  "    return result\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def addGoal (self, goal, targetList, message):\n"
  "    self.mGoals [goal] = (targetList, message)\n"
  "    #print '%s' % ', '.join(map(str, self.mGoals))\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printGoals (self):\n"
  "    print BOLD_BLUE () + \"--- Print the \" + str (len (self.mGoals)) + \" goal\" + (\"s\" if len (self.mGoals) > 1 else \"\") + \" ---\" + ENDC ()\n"
  "    for goalKey in self.mGoals.keys ():\n"
  "      print BOLD_GREEN () + \"Goal: '\" + goalKey + \"'\" + ENDC ()\n"
  "      (targetList, message) = self.mGoals [goalKey]\n"
  "      for target in targetList:\n"
  "        print \"  Target: '\" + target + \"'\"\n"
  "      print \"  Message: '\" + message + \"'\"\n"
  "        \n"
  "    print BOLD_BLUE () + \"--- End of print goals ---\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def runGoal (self, goal, maxConcurrentJobs, showCommand):\n"
  "    if self.mGoals.has_key (goal) :\n"
  "      (targetList, message) = self.mGoals [goal]\n"
  "      for target in targetList:\n"
  "        self.makeJob (target)\n"
  "      self.runJobs (maxConcurrentJobs, showCommand)\n"
  "    else:\n"
  "      errorMessage = \"The '\" + goal + \"' goal is not defined; defined goals:\"\n"
  "      for key in self.mGoals:\n"
  "        (targetList, message) = self.mGoals [key]\n"
  "        errorMessage += \"\\n  '\" + key + \"': \" + message\n"
  "      print BOLD_RED () + errorMessage + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def enterError (self, message):\n"
  "    print BOLD_RED () + message + ENDC ()\n"
  "    self.mErrorCount = self.mErrorCount + 1\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printErrorCountAndExitOnError (self):\n"
  "    if self.mErrorCount == 1:\n"
  "      print BOLD_RED () + \"1 error.\" + ENDC ()\n"
  "      sys.exit (1)\n"
  "    elif self.mErrorCount > 1:\n"
  "      print BOLD_RED () + str (self.mErrorCount) + \" errors.\" + ENDC ()\n"
  "      sys.exit (1)\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printErrorCount (self):\n"
  "    if self.mErrorCount == 1:\n"
  "      print BOLD_RED () + \"1 error.\" + ENDC ()\n"
  "    elif self.mErrorCount > 1:\n"
  "      print BOLD_RED () + str (self.mErrorCount) + \" errors.\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def errorCount (self):\n"
  "    return self.mErrorCount\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Source files                                                                                                       *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def sourceList ():\n"
  "  return [\"plm.c\", \"startup-sequential.c\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Product directory                                                                                                  *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def productDir ():\n"
  "  return \"product\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#                         Object files directories                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def objectDir ():\n"
  "  return \"objects\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#                         Object files directories                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def asDir ():\n"
  "  return \"as\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Tool dir                                                                                                           *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def toolDir ():\n"
  "  return os.path.expanduser (\"~/plm-tools/teensy-Intel-Darwin-binutils-2.25-gcc-4.9.2-newlib-2.2.0-libusb-1.0.19\")\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Compiler invocation                                                                                                *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def compiler ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-gcc\", \"-mthumb\", \"-mcpu=cortex-m4\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#    C Compiler options                                                                                                *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def cCompilerOptions ():\n"
  "  result = []\n"
  "  result.append (\"-Wall\")\n"
  "  result.append (\"-Werror\")\n"
  "  result.append (\"-Wreturn-type\")\n"
  "  result.append (\"-Wformat\")\n"
  "  result.append (\"-Wsign-compare\")\n"
  "  result.append (\"-Wpointer-arith\")\n"
  "  result.append (\"-Wparentheses\")\n"
  "  result.append (\"-Wcast-align\")\n"
  "  result.append (\"-Wcast-qual\")\n"
  "  result.append (\"-Wwrite-strings\")\n"
  "  result.append (\"-Wswitch\")\n"
  "  result.append (\"-Wuninitialized\")\n"
  "  result.append (\"-fno-builtin\")\n"
  "  result.append (\"-Wno-aggressive-loop-optimizations\")\n"
  "  result.append (\"-ffunction-sections\")\n"
  "  result.append (\"-fdata-sections\")\n"
  "  result.append (\"-std=c99\")\n"
  "  result.append (\"-Wstrict-prototypes\")\n"
  "  result.append (\"-Wbad-function-cast\")\n"
  "  result.append (\"-Wmissing-declarations\")\n"
  "  result.append (\"-Wimplicit-function-declaration\")\n"
  "  result.append (\"-Wno-int-to-pointer-cast\")\n"
  "  result.append (\"-Wno-pointer-to-int-cast\")\n"
  "  result.append (\"-Wmissing-prototypes\")\n"
  "  result.append (\"-Os\")\n"
  "  result.append (\"-fomit-frame-pointer\")\n"
  "  result.append (\"-foptimize-register-move\") \n"
  "  result.append (\"-I../build\")\n"
  "  return result\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Linker invocation                                                                                                  *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def linker ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-gcc\", \"-mthumb\", \"-mcpu=cortex-m4\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Linker options                                                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def linkerOptions ():\n"
  "  result = []\n"
  "  result.append (\"-nostartfiles\")\n"
  "  result.append (\"-Wl,--fatal-warnings\")\n"
  "  result.append (\"-Wl,--warn-common\")\n"
  "  result.append (\"-Wl,--no-undefined\")\n"
  "  result.append (\"-Wl,--cref\")\n"
  "  result.append (\"-lc\")\n"
  "  result.append (\"-lgcc\")\n"
  "  result.append (\"-Wl,-static\")\n"
  "  result.append (\"-Wl,-s\")\n"
  "  result.append (\"-Wl,--gc-sections\")\n"
  "  return result\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   objcopy invocation                                                                                                 *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def objcopy ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-objcopy\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Teensy loader                                                                                                      *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def teensyLoader ():\n"
  "  return toolDir () + \"/bin/teensy-loader-cli\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   ARCHIVE DOWNLOAD                                                                                                   *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def downloadReportHook (a,b,fileSize): \n"
  "  if fileSize < (1 << 10):\n"
  "    sizeString = str (fileSize)\n"
  "  else:\n"
  "    if fileSize < (1 << 20):\n"
  "      sizeString = str (fileSize >> 10) + \"Ki\"\n"
  "    else:\n"
  "      sizeString = str (fileSize >> 20) + \"Mi\"\n"
  "  # \",\" at the end of the line is important!\n"
  "  print \"% 3.1f%% of %sB\\r\" % (min(100.0, float(a * b) / fileSize * 100.0), sizeString),\n"
  "  sys.stdout.flush()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def downloadArchive (archiveURL, archivePath):\n"
  "  runSingleCommand ([\"rm\", \"-f\", archivePath + \".downloading\"])\n"
  "  runSingleCommand ([\"rm\", \"-f\", archivePath + \".tar.bz2\"])\n"
  "  runSingleCommand ([\"mkdir\", \"-p\", os.path.dirname (archivePath)])\n"
  "  print \"URL: \"+ archiveURL\n"
  "  print \"Downloading... \" + archivePath + \".downloading\"\n"
  "  urllib.urlretrieve (archiveURL,  archivePath + \".downloading\", downloadReportHook)\n"
  "  print \"\"\n"
  "  fileSize = os.path.getsize (archivePath + \".downloading\")\n"
  "  ok = fileSize > 1000000\n"
  "  if ok:\n"
  "    runSingleCommand ([\"mv\", archivePath + \".downloading\", archivePath + \".tar.bz2\"])\n"
  "  else:\n"
  "    print BOLD_RED () + \"Error: cannot download file\" + ENDC ()\n"
  "    sys.exit (1)\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   MAIN                                                                                                               *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Get max parallel jobs as first argument\n"
  "goal = \"all\"\n"
  "if len (sys.argv) > 1 :\n"
  "  goal = sys.argv [1]\n"
  "#--- Get max parallel jobs as first argument\n"
  "maxParallelJobs = 0 # 0 means use host processor count\n"
  "if len (sys.argv) > 2 :\n"
  "  maxParallelJobs = int (sys.argv [2])\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "#--- Download compiler tool if needed\n"
  "toolDirectory = toolDir ()\n"
  "if not os.path.exists (toolDirectory):\n"
  "  print BOLD_GREEN () + \"Downloading compiler tool chain\" + ENDC ()\n"
  "  archiveName = os.path.basename (toolDirectory)\n"
  "  archiveURL = \"http://crossgcc.rts-software.org/downloads/plm-tools/\" + archiveName + \".tar.bz2\"\n"
  "  downloadArchive (archiveURL, toolDirectory)\n"
  "  installDir = os.path.normpath (toolDirectory + \"/..\")\n"
  "  os.chdir (installDir)\n"
  "  runSingleCommand ([\"bunzip2\", \"-k\", archiveName + \".tar.bz2\"])\n"
  "  runSingleCommand ([\"rm\", archiveName + \".tar.bz2\"])\n"
  "  runSingleCommand ([\"tar\", \"xf\", archiveName + \".tar\"])\n"
  "  runSingleCommand ([\"rm\", archiveName + \".tar\"])\n"
  "#---\n"
  "os.chdir (scriptDir)\n"
  "#--- Build python makefile\n"
  "makefile = Make ()\n"
  "#--- Add C files compile rule\n"
  "objectList = []\n"
  "asObjectList = []\n"
  "for source in sourceList ():\n"
  "#--- Compile\n"
  "  object = objectDir () + \"/\" + source + \".o\"\n"
  "  rule = Rule (object, \"Compiling \" + source)\n"
  "  rule.mDependences.append (\"sources/\" + source)\n"
  "  rule.mCommand += compiler ()\n"
  "  rule.mCommand += cCompilerOptions ()\n"
  "  rule.mCommand += [\"-c\", \"sources/\" + source]\n"
  "  rule.mCommand += [\"-o\", object]\n"
  "  makefile.addRule (rule)\n"
  "  objectList.append (object)\n"
  "#--- Assembling\n"
  "  asObject = asDir () + \"/\" + source + \".s\"\n"
  "  rule = Rule (asObject, \"Assembling \" + source)\n"
  "  rule.mDependences.append (\"sources/\" + source)\n"
  "  rule.mCommand += compiler ()\n"
  "  rule.mCommand += cCompilerOptions ()\n"
  "  rule.mCommand += [\"-S\", \"sources/\" + source]\n"
  "  rule.mCommand += [\"-o\", asObject]\n"
  "  makefile.addRule (rule)\n"
  "  asObjectList.append (asObject)\n"
  "#--- Add linker rule\n"
  "productELF = productDir () + \"/product.elf\"\n"
  "rule = Rule (productELF, \"Linking \" + productELF)\n"
  "rule.mDependences += objectList\n"
  "rule.mCommand += linker ()\n"
  "rule.mCommand += linkerOptions ()\n"
  "rule.mCommand += objectList\n"
  "rule.mCommand += [\"-o\", productELF]\n"
  "rule.mCommand += [\"-Tsources/linker-script.ld\"]\n"
  "rule.mCommand += [\"-Wl,-Map=\" + productELF + \".map\"]\n"
  "makefile.addRule (rule)\n"
  "#--- Add objcopy rule\n"
  "productHEX = productDir () + \"/product.ihex\"\n"
  "rule = Rule (productHEX, \"Hexing \" + productHEX)\n"
  "rule.mDependences += [productELF]\n"
  "rule.mCommand += objcopy ()\n"
  "rule.mCommand += [\"-O\", \"ihex\"]\n"
  "rule.mCommand += [productELF]\n"
  "rule.mCommand += [productHEX]\n"
  "makefile.addRule (rule)\n"
  "#--- Add goals\n"
  "makefile.addGoal (\"run\", [productHEX], \"Building all and run\")\n"
  "makefile.addGoal (\"all\", [productHEX], \"Building all\")\n"
  "makefile.addGoal (\"as\", asObjectList, \"Assembling C files\")\n"
  "#--- Build\n"
  "#makefile.printRules ()\n"
  "makefile.runGoal (goal, maxParallelJobs, maxParallelJobs == 1)\n"
  "#--- Build Ok \?\n"
  "makefile.printErrorCountAndExitOnError ()\n"
  "#--- Run \?\n"
  "if goal == \"run\":\n"
  "  print BOLD_BLUE () + \"Loading Teensy...\" + ENDC ()\n"
  "  childProcess = subprocess.Popen ([teensyLoader (), \"-w\", \"-v\", \"-mmcu=mk20dx128\", productHEX])\n"
  "#--- Wait for subprocess termination\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    print BOLD_RED () + \"Error \" + str (childProcess.returncode) + ENDC ()\n"
  "    sys.exit (childProcess.returncode)\n"
  "  else:\n"
  "    print BOLD_GREEN () + \"Success\" + ENDC ()\n" ;

const cRegularFileWrapper gWrapperFile_5_targetTemplates (
  "build.py",
  "py",
  true, // Text file
  41653, // Text length
  gWrapperFileContent_5_targetTemplates
) ;

//--- File 'target-teensy-sequential/clean.py'

const char * gWrapperFileContent_6_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "#--- Directories to clean\n"
  "dir1 = scriptDir + \"/objects\"\n"
  "dir2 = scriptDir + \"/product\"\n"
  "dir3 = scriptDir + \"/as\"\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"rm\", \"-fr\", dir1, dir2, dir3], cwd=scriptDir)\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_6_targetTemplates (
  "clean.py",
  "py",
  true, // Text file
  1264, // Text length
  gWrapperFileContent_6_targetTemplates
) ;

//--- File 'target-teensy-sequential/flash-teensy-and-run.py'

const char * gWrapperFileContent_7_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"run\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_7_targetTemplates (
  "flash-teensy-and-run.py",
  "py",
  true, // Text file
  997, // Text length
  gWrapperFileContent_7_targetTemplates
) ;

//--- File 'sources/linker-script.ld'

const char * gWrapperFileContent_8_targetTemplates = "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                   Memory                                   */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "MEMORY {\n"
  "  flash (rx) : ORIGIN = 0, LENGTH = 256k \n"
  "  sram_u (rwx) : ORIGIN = 0x20000000, LENGTH = 32k \n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "__sram_u_end = 0x20000000 + 32k ;\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                ISR Vectors                                 */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .vectors : {\n"
  "    __vectors_start = . ;\n"
  "    KEEP (*(.isr_vector)) ;\n"
  "    __vectors_end = . ;\n"
  "  } > flash\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                    Code                                    */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .text : {\n"
  "    FILL(0xff)\n"
  "    __code_start = . ;\n"
  "  /*--- Tableau des routines d'initialisation */\n"
  "    . = ALIGN (4) ;\n"
  "    __init_routine_array_start = . ;\n"
  "    KEEP (*(init_routine_array)) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __init_routine_array_end = . ;\n"
  "  /*--- Initialisation des objets globaux C++ */\n"
  "    . = ALIGN (4) ;\n"
  "    __constructor_array_start = . ;\n"
  "    KEEP (*(.init_array)) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __constructor_array_end = . ;\n"
  "  /*--- Real Interrupt Service Routine Array */\n"
  "    . = ALIGN (4) ;\n"
  "    __real_time_isr_array_start = . ;\n"
  "    KEEP (*(real_time_isr_array)) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __real_time_isr_array_end = . ;\n"
  "  /*--- Code */\n"
  "    *(.text.*) ;\n"
  "    *(.text) ;\n"
  "    *(text) ;\n"
  "    *(.gnu.linkonce.t.*) ;\n"
  "  /*---- ROM data ----*/\n"
  "    . = ALIGN(4);\n"
  "    *(.rodata);\n"
  "    . = ALIGN(4);\n"
  "    *(.rodata*);\n"
  "    . = ALIGN(4);\n"
  "    *(.gnu.linkonce.r.*);\n"
  "    . = ALIGN(4);\n"
  "    *(.glue_7t);\n"
  "    . = ALIGN(4);\n"
  "    *(.glue_7);\n"
  "    . = ALIGN(4);\n"
  "  } > flash\n"
  "\n"
  "  .ARM.exidx : {\n"
  "    *(.ARM.exidx* .gnu.linkonce.armexidx.*);\n"
  "    __code_end = . ;\n"
  "  } > flash\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                          Data (initialized data)                           */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .data : {\n"
  "    FILL (0xFF)\n"
  "    . = ALIGN (4) ;\n"
  "    __data_start = . ;\n"
  "    * (.data.*init*) ;\n"
  "    * (.data*) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __data_end = . ;\n"
  "  } > sram_u AT > flash\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "__data_load_start = LOADADDR (.data) ;\n"
  "__data_load_end   = LOADADDR (.data) + SIZEOF (.data) ;\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                          BSS (uninitialized data)                          */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .bss : {\n"
  "    . = ALIGN(4);\n"
  "    __bss_start = . ;\n"
  "    * (.bss.*) ;\n"
  "    * (.bss) ;\n"
  "    * (COMMON) ;\n"
  "    . = ALIGN(4);\n"
  "    __bss_end = . ;\n"
  "  } > sram_u\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                System stack                                */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .system_stack :{\n"
  "    . = ALIGN (4) ;\n"
  "    __system_stack_start = . ;\n"
  "    . += 1k ;\n"
  "    . = ALIGN (4) ;\n"
  "    __system_stack_end = . ;\n"
  "  } > sram_u\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                    Heap                                    */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .heap : {\n"
  "    . = ALIGN (4) ;\n"
  "    __heap_start = . ;\n"
  "  } > sram_u\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "__heap_end = __sram_u_end ;\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n" ;

const cRegularFileWrapper gWrapperFile_8_targetTemplates (
  "linker-script.ld",
  "ld",
  true, // Text file
  5218, // Text length
  gWrapperFileContent_8_targetTemplates
) ;

//--- File 'sources/mk20dx256.h'

const char * gWrapperFileContent_9_targetTemplates = "/* Teensyduino Core Library\n"
  " * http://www.pjrc.com/teensy/\n"
  " * Copyright (c) 2013 PJRC.COM, LLC.\n"
  " *\n"
  " * Permission is hereby granted, free of charge, to any person obtaining\n"
  " * a copy of this software and associated documentation files (the\n"
  " * \"Software\"), to deal in the Software without restriction, including\n"
  " * without limitation the rights to use, copy, modify, merge, publish,\n"
  " * distribute, sublicense, and/or sell copies of the Software, and to\n"
  " * permit persons to whom the Software is furnished to do so, subject to\n"
  " * the following conditions:\n"
  " *\n"
  " * 1. The above copyright notice and this permission notice shall be \n"
  " * included in all copies or substantial portions of the Software.\n"
  " *\n"
  " * 2. If the Software is incorporated into a build system that allows \n"
  " * selection among a list of target devices, then similar target\n"
  " * devices manufactured by PJRC.COM must be included in the list of\n"
  " * target devices and selectable in the same manner.\n"
  " *\n"
  " * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
  " * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
  " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
  " * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n"
  " * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n"
  " * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n"
  " * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n"
  " * SOFTWARE.\n"
  " */\n"
  "\n"
  "#ifndef _mk20dx128_h_\n"
  "#define _mk20dx128_h_\n"
  "\n"
  "#define F_CPU 96000000\n"
  "#define __MK20DX256__\n"
  "//#define F_CPU 48000000\n"
  "//#define F_CPU 24000000\n"
  "//#define F_BUS 48000000\n"
  "//#define F_BUS 24000000\n"
  "//#define F_MEM 24000000\n"
  "\n"
  "#if (F_CPU == 96000000)\n"
  " #define F_BUS 48000000\n"
  " #define F_MEM 24000000\n"
  "#elif (F_CPU == 48000000)\n"
  " #define F_BUS 48000000\n"
  " #define F_MEM 24000000\n"
  "#elif (F_CPU == 24000000)\n"
  " #define F_BUS 24000000\n"
  " #define F_MEM 24000000\n"
  "#endif\n"
  "\n"
  "\n"
  "#include <stdint.h>\n"
  "\n"
  "#ifdef __cplusplus\n"
  "extern \"C\" {\n"
  "#endif\n"
  "\n"
  "// chapter 11: Port control and interrupts (PORT)\n"
  "#define PORTA_PCR0\t\t*(volatile uint32_t *)0x40049000 // Pin Control Register n\n"
  "#define PORT_PCR_ISF\t\t\t(uint32_t)0x01000000\t\t// Interrupt Status Flag\n"
  "#define PORT_PCR_IRQC(n)\t\t(uint32_t)(((n) & 15) << 16)\t// Interrupt Configuration\n"
  "#define PORT_PCR_IRQC_MASK\t\t(uint32_t)0x000F0000\n"
  "#define PORT_PCR_LK\t\t\t(uint32_t)0x00008000\t\t// Lock Register\n"
  "#define PORT_PCR_MUX(n)\t\t\t(uint32_t)(((n) & 7) << 8)\t// Pin Mux Control\n"
  "#define PORT_PCR_MUX_MASK\t\t(uint32_t)0x00000700\n"
  "#define PORT_PCR_DSE\t\t\t(uint32_t)0x00000040\t\t// Drive Strength Enable\n"
  "#define PORT_PCR_ODE\t\t\t(uint32_t)0x00000020\t\t// Open Drain Enable\n"
  "#define PORT_PCR_PFE\t\t\t(uint32_t)0x00000010\t\t// Passive Filter Enable\n"
  "#define PORT_PCR_SRE\t\t\t(uint32_t)0x00000004\t\t// Slew Rate Enable\n"
  "#define PORT_PCR_PE\t\t\t(uint32_t)0x00000002\t\t// Pull Enable\n"
  "#define PORT_PCR_PS\t\t\t(uint32_t)0x00000001\t\t// Pull Select\n"
  "#define PORTA_PCR1\t\t*(volatile uint32_t *)0x40049004 // Pin Control Register n\n"
  "#define PORTA_PCR2\t\t*(volatile uint32_t *)0x40049008 // Pin Control Register n\n"
  "#define PORTA_PCR3\t\t*(volatile uint32_t *)0x4004900C // Pin Control Register n\n"
  "#define PORTA_PCR4\t\t*(volatile uint32_t *)0x40049010 // Pin Control Register n\n"
  "#define PORTA_PCR5\t\t*(volatile uint32_t *)0x40049014 // Pin Control Register n\n"
  "#define PORTA_PCR6\t\t*(volatile uint32_t *)0x40049018 // Pin Control Register n\n"
  "#define PORTA_PCR7\t\t*(volatile uint32_t *)0x4004901C // Pin Control Register n\n"
  "#define PORTA_PCR8\t\t*(volatile uint32_t *)0x40049020 // Pin Control Register n\n"
  "#define PORTA_PCR9\t\t*(volatile uint32_t *)0x40049024 // Pin Control Register n\n"
  "#define PORTA_PCR10\t\t*(volatile uint32_t *)0x40049028 // Pin Control Register n\n"
  "#define PORTA_PCR11\t\t*(volatile uint32_t *)0x4004902C // Pin Control Register n\n"
  "#define PORTA_PCR12\t\t*(volatile uint32_t *)0x40049030 // Pin Control Register n\n"
  "#define PORTA_PCR13\t\t*(volatile uint32_t *)0x40049034 // Pin Control Register n\n"
  "#define PORTA_PCR14\t\t*(volatile uint32_t *)0x40049038 // Pin Control Register n\n"
  "#define PORTA_PCR15\t\t*(volatile uint32_t *)0x4004903C // Pin Control Register n\n"
  "#define PORTA_PCR16\t\t*(volatile uint32_t *)0x40049040 // Pin Control Register n\n"
  "#define PORTA_PCR17\t\t*(volatile uint32_t *)0x40049044 // Pin Control Register n\n"
  "#define PORTA_PCR18\t\t*(volatile uint32_t *)0x40049048 // Pin Control Register n\n"
  "#define PORTA_PCR19\t\t*(volatile uint32_t *)0x4004904C // Pin Control Register n\n"
  "#define PORTA_PCR20\t\t*(volatile uint32_t *)0x40049050 // Pin Control Register n\n"
  "#define PORTA_PCR21\t\t*(volatile uint32_t *)0x40049054 // Pin Control Register n\n"
  "#define PORTA_PCR22\t\t*(volatile uint32_t *)0x40049058 // Pin Control Register n\n"
  "#define PORTA_PCR23\t\t*(volatile uint32_t *)0x4004905C // Pin Control Register n\n"
  "#define PORTA_PCR24\t\t*(volatile uint32_t *)0x40049060 // Pin Control Register n\n"
  "#define PORTA_PCR25\t\t*(volatile uint32_t *)0x40049064 // Pin Control Register n\n"
  "#define PORTA_PCR26\t\t*(volatile uint32_t *)0x40049068 // Pin Control Register n\n"
  "#define PORTA_PCR27\t\t*(volatile uint32_t *)0x4004906C // Pin Control Register n\n"
  "#define PORTA_PCR28\t\t*(volatile uint32_t *)0x40049070 // Pin Control Register n\n"
  "#define PORTA_PCR29\t\t*(volatile uint32_t *)0x40049074 // Pin Control Register n\n"
  "#define PORTA_PCR30\t\t*(volatile uint32_t *)0x40049078 // Pin Control Register n\n"
  "#define PORTA_PCR31\t\t*(volatile uint32_t *)0x4004907C // Pin Control Register n\n"
  "#define PORTA_GPCLR\t\t*(volatile uint32_t *)0x40049080 // Global Pin Control Low Register\n"
  "#define PORTA_GPCHR\t\t*(volatile uint32_t *)0x40049084 // Global Pin Control High Register\n"
  "#define PORTA_ISFR\t\t*(volatile uint32_t *)0x400490A0 // Interrupt Status Flag Register\n"
  "#define PORTB_PCR0\t\t*(volatile uint32_t *)0x4004A000 // Pin Control Register n\n"
  "#define PORTB_PCR1\t\t*(volatile uint32_t *)0x4004A004 // Pin Control Register n\n"
  "#define PORTB_PCR2\t\t*(volatile uint32_t *)0x4004A008 // Pin Control Register n\n"
  "#define PORTB_PCR3\t\t*(volatile uint32_t *)0x4004A00C // Pin Control Register n\n"
  "#define PORTB_PCR4\t\t*(volatile uint32_t *)0x4004A010 // Pin Control Register n\n"
  "#define PORTB_PCR5\t\t*(volatile uint32_t *)0x4004A014 // Pin Control Register n\n"
  "#define PORTB_PCR6\t\t*(volatile uint32_t *)0x4004A018 // Pin Control Register n\n"
  "#define PORTB_PCR7\t\t*(volatile uint32_t *)0x4004A01C // Pin Control Register n\n"
  "#define PORTB_PCR8\t\t*(volatile uint32_t *)0x4004A020 // Pin Control Register n\n"
  "#define PORTB_PCR9\t\t*(volatile uint32_t *)0x4004A024 // Pin Control Register n\n"
  "#define PORTB_PCR10\t\t*(volatile uint32_t *)0x4004A028 // Pin Control Register n\n"
  "#define PORTB_PCR11\t\t*(volatile uint32_t *)0x4004A02C // Pin Control Register n\n"
  "#define PORTB_PCR12\t\t*(volatile uint32_t *)0x4004A030 // Pin Control Register n\n"
  "#define PORTB_PCR13\t\t*(volatile uint32_t *)0x4004A034 // Pin Control Register n\n"
  "#define PORTB_PCR14\t\t*(volatile uint32_t *)0x4004A038 // Pin Control Register n\n"
  "#define PORTB_PCR15\t\t*(volatile uint32_t *)0x4004A03C // Pin Control Register n\n"
  "#define PORTB_PCR16\t\t*(volatile uint32_t *)0x4004A040 // Pin Control Register n\n"
  "#define PORTB_PCR17\t\t*(volatile uint32_t *)0x4004A044 // Pin Control Register n\n"
  "#define PORTB_PCR18\t\t*(volatile uint32_t *)0x4004A048 // Pin Control Register n\n"
  "#define PORTB_PCR19\t\t*(volatile uint32_t *)0x4004A04C // Pin Control Register n\n"
  "#define PORTB_PCR20\t\t*(volatile uint32_t *)0x4004A050 // Pin Control Register n\n"
  "#define PORTB_PCR21\t\t*(volatile uint32_t *)0x4004A054 // Pin Control Register n\n"
  "#define PORTB_PCR22\t\t*(volatile uint32_t *)0x4004A058 // Pin Control Register n\n"
  "#define PORTB_PCR23\t\t*(volatile uint32_t *)0x4004A05C // Pin Control Register n\n"
  "#define PORTB_PCR24\t\t*(volatile uint32_t *)0x4004A060 // Pin Control Register n\n"
  "#define PORTB_PCR25\t\t*(volatile uint32_t *)0x4004A064 // Pin Control Register n\n"
  "#define PORTB_PCR26\t\t*(volatile uint32_t *)0x4004A068 // Pin Control Register n\n"
  "#define PORTB_PCR27\t\t*(volatile uint32_t *)0x4004A06C // Pin Control Register n\n"
  "#define PORTB_PCR28\t\t*(volatile uint32_t *)0x4004A070 // Pin Control Register n\n"
  "#define PORTB_PCR29\t\t*(volatile uint32_t *)0x4004A074 // Pin Control Register n\n"
  "#define PORTB_PCR30\t\t*(volatile uint32_t *)0x4004A078 // Pin Control Register n\n"
  "#define PORTB_PCR31\t\t*(volatile uint32_t *)0x4004A07C // Pin Control Register n\n"
  "#define PORTB_GPCLR\t\t*(volatile uint32_t *)0x4004A080 // Global Pin Control Low Register\n"
  "#define PORTB_GPCHR\t\t*(volatile uint32_t *)0x4004A084 // Global Pin Control High Register\n"
  "#define PORTB_ISFR\t\t*(volatile uint32_t *)0x4004A0A0 // Interrupt Status Flag Register\n"
  "#define PORTC_PCR0\t\t*(volatile uint32_t *)0x4004B000 // Pin Control Register n\n"
  "#define PORTC_PCR1\t\t*(volatile uint32_t *)0x4004B004 // Pin Control Register n\n"
  "#define PORTC_PCR2\t\t*(volatile uint32_t *)0x4004B008 // Pin Control Register n\n"
  "#define PORTC_PCR3\t\t*(volatile uint32_t *)0x4004B00C // Pin Control Register n\n"
  "#define PORTC_PCR4\t\t*(volatile uint32_t *)0x4004B010 // Pin Control Register n\n"
  "#define PORTC_PCR5\t\t*(volatile uint32_t *)0x4004B014 // Pin Control Register n\n"
  "#define PORTC_PCR6\t\t*(volatile uint32_t *)0x4004B018 // Pin Control Register n\n"
  "#define PORTC_PCR7\t\t*(volatile uint32_t *)0x4004B01C // Pin Control Register n\n"
  "#define PORTC_PCR8\t\t*(volatile uint32_t *)0x4004B020 // Pin Control Register n\n"
  "#define PORTC_PCR9\t\t*(volatile uint32_t *)0x4004B024 // Pin Control Register n\n"
  "#define PORTC_PCR10\t\t*(volatile uint32_t *)0x4004B028 // Pin Control Register n\n"
  "#define PORTC_PCR11\t\t*(volatile uint32_t *)0x4004B02C // Pin Control Register n\n"
  "#define PORTC_PCR12\t\t*(volatile uint32_t *)0x4004B030 // Pin Control Register n\n"
  "#define PORTC_PCR13\t\t*(volatile uint32_t *)0x4004B034 // Pin Control Register n\n"
  "#define PORTC_PCR14\t\t*(volatile uint32_t *)0x4004B038 // Pin Control Register n\n"
  "#define PORTC_PCR15\t\t*(volatile uint32_t *)0x4004B03C // Pin Control Register n\n"
  "#define PORTC_PCR16\t\t*(volatile uint32_t *)0x4004B040 // Pin Control Register n\n"
  "#define PORTC_PCR17\t\t*(volatile uint32_t *)0x4004B044 // Pin Control Register n\n"
  "#define PORTC_PCR18\t\t*(volatile uint32_t *)0x4004B048 // Pin Control Register n\n"
  "#define PORTC_PCR19\t\t*(volatile uint32_t *)0x4004B04C // Pin Control Register n\n"
  "#define PORTC_PCR20\t\t*(volatile uint32_t *)0x4004B050 // Pin Control Register n\n"
  "#define PORTC_PCR21\t\t*(volatile uint32_t *)0x4004B054 // Pin Control Register n\n"
  "#define PORTC_PCR22\t\t*(volatile uint32_t *)0x4004B058 // Pin Control Register n\n"
  "#define PORTC_PCR23\t\t*(volatile uint32_t *)0x4004B05C // Pin Control Register n\n"
  "#define PORTC_PCR24\t\t*(volatile uint32_t *)0x4004B060 // Pin Control Register n\n"
  "#define PORTC_PCR25\t\t*(volatile uint32_t *)0x4004B064 // Pin Control Register n\n"
  "#define PORTC_PCR26\t\t*(volatile uint32_t *)0x4004B068 // Pin Control Register n\n"
  "#define PORTC_PCR27\t\t*(volatile uint32_t *)0x4004B06C // Pin Control Register n\n"
  "#define PORTC_PCR28\t\t*(volatile uint32_t *)0x4004B070 // Pin Control Register n\n"
  "#define PORTC_PCR29\t\t*(volatile uint32_t *)0x4004B074 // Pin Control Register n\n"
  "#define PORTC_PCR30\t\t*(volatile uint32_t *)0x4004B078 // Pin Control Register n\n"
  "#define PORTC_PCR31\t\t*(volatile uint32_t *)0x4004B07C // Pin Control Register n\n"
  "#define PORTC_GPCLR\t\t*(volatile uint32_t *)0x4004B080 // Global Pin Control Low Register\n"
  "#define PORTC_GPCHR\t\t*(volatile uint32_t *)0x4004B084 // Global Pin Control High Register\n"
  "#define PORTC_ISFR\t\t*(volatile uint32_t *)0x4004B0A0 // Interrupt Status Flag Register\n"
  "#define PORTD_PCR0\t\t*(volatile uint32_t *)0x4004C000 // Pin Control Register n\n"
  "#define PORTD_PCR1\t\t*(volatile uint32_t *)0x4004C004 // Pin Control Register n\n"
  "#define PORTD_PCR2\t\t*(volatile uint32_t *)0x4004C008 // Pin Control Register n\n"
  "#define PORTD_PCR3\t\t*(volatile uint32_t *)0x4004C00C // Pin Control Register n\n"
  "#define PORTD_PCR4\t\t*(volatile uint32_t *)0x4004C010 // Pin Control Register n\n"
  "#define PORTD_PCR5\t\t*(volatile uint32_t *)0x4004C014 // Pin Control Register n\n"
  "#define PORTD_PCR6\t\t*(volatile uint32_t *)0x4004C018 // Pin Control Register n\n"
  "#define PORTD_PCR7\t\t*(volatile uint32_t *)0x4004C01C // Pin Control Register n\n"
  "#define PORTD_PCR8\t\t*(volatile uint32_t *)0x4004C020 // Pin Control Register n\n"
  "#define PORTD_PCR9\t\t*(volatile uint32_t *)0x4004C024 // Pin Control Register n\n"
  "#define PORTD_PCR10\t\t*(volatile uint32_t *)0x4004C028 // Pin Control Register n\n"
  "#define PORTD_PCR11\t\t*(volatile uint32_t *)0x4004C02C // Pin Control Register n\n"
  "#define PORTD_PCR12\t\t*(volatile uint32_t *)0x4004C030 // Pin Control Register n\n"
  "#define PORTD_PCR13\t\t*(volatile uint32_t *)0x4004C034 // Pin Control Register n\n"
  "#define PORTD_PCR14\t\t*(volatile uint32_t *)0x4004C038 // Pin Control Register n\n"
  "#define PORTD_PCR15\t\t*(volatile uint32_t *)0x4004C03C // Pin Control Register n\n"
  "#define PORTD_PCR16\t\t*(volatile uint32_t *)0x4004C040 // Pin Control Register n\n"
  "#define PORTD_PCR17\t\t*(volatile uint32_t *)0x4004C044 // Pin Control Register n\n"
  "#define PORTD_PCR18\t\t*(volatile uint32_t *)0x4004C048 // Pin Control Register n\n"
  "#define PORTD_PCR19\t\t*(volatile uint32_t *)0x4004C04C // Pin Control Register n\n"
  "#define PORTD_PCR20\t\t*(volatile uint32_t *)0x4004C050 // Pin Control Register n\n"
  "#define PORTD_PCR21\t\t*(volatile uint32_t *)0x4004C054 // Pin Control Register n\n"
  "#define PORTD_PCR22\t\t*(volatile uint32_t *)0x4004C058 // Pin Control Register n\n"
  "#define PORTD_PCR23\t\t*(volatile uint32_t *)0x4004C05C // Pin Control Register n\n"
  "#define PORTD_PCR24\t\t*(volatile uint32_t *)0x4004C060 // Pin Control Register n\n"
  "#define PORTD_PCR25\t\t*(volatile uint32_t *)0x4004C064 // Pin Control Register n\n"
  "#define PORTD_PCR26\t\t*(volatile uint32_t *)0x4004C068 // Pin Control Register n\n"
  "#define PORTD_PCR27\t\t*(volatile uint32_t *)0x4004C06C // Pin Control Register n\n"
  "#define PORTD_PCR28\t\t*(volatile uint32_t *)0x4004C070 // Pin Control Register n\n"
  "#define PORTD_PCR29\t\t*(volatile uint32_t *)0x4004C074 // Pin Control Register n\n"
  "#define PORTD_PCR30\t\t*(volatile uint32_t *)0x4004C078 // Pin Control Register n\n"
  "#define PORTD_PCR31\t\t*(volatile uint32_t *)0x4004C07C // Pin Control Register n\n"
  "#define PORTD_GPCLR\t\t*(volatile uint32_t *)0x4004C080 // Global Pin Control Low Register\n"
  "#define PORTD_GPCHR\t\t*(volatile uint32_t *)0x4004C084 // Global Pin Control High Register\n"
  "#define PORTD_ISFR\t\t*(volatile uint32_t *)0x4004C0A0 // Interrupt Status Flag Register\n"
  "#define PORTE_PCR0\t\t*(volatile uint32_t *)0x4004D000 // Pin Control Register n\n"
  "#define PORTE_PCR1\t\t*(volatile uint32_t *)0x4004D004 // Pin Control Register n\n"
  "#define PORTE_PCR2\t\t*(volatile uint32_t *)0x4004D008 // Pin Control Register n\n"
  "#define PORTE_PCR3\t\t*(volatile uint32_t *)0x4004D00C // Pin Control Register n\n"
  "#define PORTE_PCR4\t\t*(volatile uint32_t *)0x4004D010 // Pin Control Register n\n"
  "#define PORTE_PCR5\t\t*(volatile uint32_t *)0x4004D014 // Pin Control Register n\n"
  "#define PORTE_PCR6\t\t*(volatile uint32_t *)0x4004D018 // Pin Control Register n\n"
  "#define PORTE_PCR7\t\t*(volatile uint32_t *)0x4004D01C // Pin Control Register n\n"
  "#define PORTE_PCR8\t\t*(volatile uint32_t *)0x4004D020 // Pin Control Register n\n"
  "#define PORTE_PCR9\t\t*(volatile uint32_t *)0x4004D024 // Pin Control Register n\n"
  "#define PORTE_PCR10\t\t*(volatile uint32_t *)0x4004D028 // Pin Control Register n\n"
  "#define PORTE_PCR11\t\t*(volatile uint32_t *)0x4004D02C // Pin Control Register n\n"
  "#define PORTE_PCR12\t\t*(volatile uint32_t *)0x4004D030 // Pin Control Register n\n"
  "#define PORTE_PCR13\t\t*(volatile uint32_t *)0x4004D034 // Pin Control Register n\n"
  "#define PORTE_PCR14\t\t*(volatile uint32_t *)0x4004D038 // Pin Control Register n\n"
  "#define PORTE_PCR15\t\t*(volatile uint32_t *)0x4004D03C // Pin Control Register n\n"
  "#define PORTE_PCR16\t\t*(volatile uint32_t *)0x4004D040 // Pin Control Register n\n"
  "#define PORTE_PCR17\t\t*(volatile uint32_t *)0x4004D044 // Pin Control Register n\n"
  "#define PORTE_PCR18\t\t*(volatile uint32_t *)0x4004D048 // Pin Control Register n\n"
  "#define PORTE_PCR19\t\t*(volatile uint32_t *)0x4004D04C // Pin Control Register n\n"
  "#define PORTE_PCR20\t\t*(volatile uint32_t *)0x4004D050 // Pin Control Register n\n"
  "#define PORTE_PCR21\t\t*(volatile uint32_t *)0x4004D054 // Pin Control Register n\n"
  "#define PORTE_PCR22\t\t*(volatile uint32_t *)0x4004D058 // Pin Control Register n\n"
  "#define PORTE_PCR23\t\t*(volatile uint32_t *)0x4004D05C // Pin Control Register n\n"
  "#define PORTE_PCR24\t\t*(volatile uint32_t *)0x4004D060 // Pin Control Register n\n"
  "#define PORTE_PCR25\t\t*(volatile uint32_t *)0x4004D064 // Pin Control Register n\n"
  "#define PORTE_PCR26\t\t*(volatile uint32_t *)0x4004D068 // Pin Control Register n\n"
  "#define PORTE_PCR27\t\t*(volatile uint32_t *)0x4004D06C // Pin Control Register n\n"
  "#define PORTE_PCR28\t\t*(volatile uint32_t *)0x4004D070 // Pin Control Register n\n"
  "#define PORTE_PCR29\t\t*(volatile uint32_t *)0x4004D074 // Pin Control Register n\n"
  "#define PORTE_PCR30\t\t*(volatile uint32_t *)0x4004D078 // Pin Control Register n\n"
  "#define PORTE_PCR31\t\t*(volatile uint32_t *)0x4004D07C // Pin Control Register n\n"
  "#define PORTE_GPCLR\t\t*(volatile uint32_t *)0x4004D080 // Global Pin Control Low Register\n"
  "#define PORTE_GPCHR\t\t*(volatile uint32_t *)0x4004D084 // Global Pin Control High Register\n"
  "#define PORTE_ISFR\t\t*(volatile uint32_t *)0x4004D0A0 // Interrupt Status Flag Register\n"
  "\n"
  "// Chapter 12: System Integration Module (SIM)\n"
  "#define SIM_SOPT1\t\t*(volatile uint32_t *)0x40047000 // System Options Register 1\n"
  "#define SIM_SOPT1CFG\t\t*(volatile uint32_t *)0x40047004 // SOPT1 Configuration Register\n"
  "#define SIM_SOPT2\t\t*(volatile uint32_t *)0x40048004 // System Options Register 2\n"
  "#define SIM_SOPT2_USBSRC\t\t(uint32_t)0x00040000\t\t// 0=USB_CLKIN, 1=FFL/PLL \n"
  "#define SIM_SOPT2_PLLFLLSEL\t\t(uint32_t)0x00010000\t\t// 0=FLL, 1=PLL\n"
  "#define SIM_SOPT2_TRACECLKSEL\t\t(uint32_t)0x00001000\t\t// 0=MCGOUTCLK, 1=CPU\n"
  "#define SIM_SOPT2_PTD7PAD\t\t(uint32_t)0x00000800\t\t// 0=normal, 1=double drive PTD7\n"
  "#define SIM_SOPT2_CLKOUTSEL(n)\t\t(uint32_t)(((n) & 7) << 5)\t// Selects the clock to output on the CLKOUT pin.\n"
  "#define SIM_SOPT2_RTCCLKOUTSEL\t\t(uint32_t)0x00000010\t\t// RTC clock out select\n"
  "#define SIM_SOPT4\t\t*(volatile uint32_t *)0x4004800C // System Options Register 4\n"
  "#define SIM_SOPT5\t\t*(volatile uint32_t *)0x40048010 // System Options Register 5\n"
  "#define SIM_SOPT7\t\t*(volatile uint32_t *)0x40048018 // System Options Register 7\n"
  "#define SIM_SDID\t\t*(const\t   uint32_t *)0x40048024 // System Device Identification Register\n"
  "#define SIM_SCGC2\t\t*(volatile uint32_t *)0x4004802C // System Clock Gating Control Register 2\n"
  "#define SIM_SCGC2_DAC0\t\t\t(uint32_t)0x00001000\t\t// DAC0 Clock Gate Control\n"
  "#define SIM_SCGC3\t\t*(volatile uint32_t *)0x40048030 // System Clock Gating Control Register 3\n"
  "#define SIM_SCGC3_ADC1\t\t\t(uint32_t)0x08000000\t\t// ADC1 Clock Gate Control\n"
  "#define SIM_SCGC3_FTM2\t\t\t(uint32_t)0x01000000\t\t// FTM2 Clock Gate Control\n"
  "#define SIM_SCGC4\t\t*(volatile uint32_t *)0x40048034 // System Clock Gating Control Register 4\n"
  "#define SIM_SCGC4_VREF\t\t\t(uint32_t)0x00100000\t\t// VREF Clock Gate Control\n"
  "#define SIM_SCGC4_CMP\t\t\t(uint32_t)0x00080000\t\t// Comparator Clock Gate Control\n"
  "#define SIM_SCGC4_USBOTG\t\t(uint32_t)0x00040000\t\t// USB Clock Gate Control\n"
  "#define SIM_SCGC4_UART2\t\t\t(uint32_t)0x00001000\t\t// UART2 Clock Gate Control\n"
  "#define SIM_SCGC4_UART1\t\t\t(uint32_t)0x00000800\t\t// UART1 Clock Gate Control\n"
  "#define SIM_SCGC4_UART0\t\t\t(uint32_t)0x00000400\t\t// UART0 Clock Gate Control\n"
  "#define SIM_SCGC4_I2C1\t\t\t(uint32_t)0x00000080\t\t// I2C1 Clock Gate Control\n"
  "#define SIM_SCGC4_I2C0\t\t\t(uint32_t)0x00000040\t\t// I2C0 Clock Gate Control\n"
  "#define SIM_SCGC4_CMT\t\t\t(uint32_t)0x00000004\t\t// CMT Clock Gate Control\n"
  "#define SIM_SCGC4_EWM\t\t\t(uint32_t)0x00000002\t\t// EWM Clock Gate Control\n"
  "#define SIM_SCGC5\t\t*(volatile uint32_t *)0x40048038 // System Clock Gating Control Register 5\n"
  "#define SIM_SCGC5_PORTE\t\t\t(uint32_t)0x00002000\t\t// Port E Clock Gate Control\n"
  "#define SIM_SCGC5_PORTD\t\t\t(uint32_t)0x00001000\t\t// Port D Clock Gate Control\n"
  "#define SIM_SCGC5_PORTC\t\t\t(uint32_t)0x00000800\t\t// Port C Clock Gate Control\n"
  "#define SIM_SCGC5_PORTB\t\t\t(uint32_t)0x00000400\t\t// Port B Clock Gate Control\n"
  "#define SIM_SCGC5_PORTA\t\t\t(uint32_t)0x00000200\t\t// Port A Clock Gate Control\n"
  "#define SIM_SCGC5_TSI\t\t\t(uint32_t)0x00000020\t\t// Touch Sense Input TSI Clock Gate Control\n"
  "#define SIM_SCGC5_LPTIMER\t\t(uint32_t)0x00000001\t\t// Low Power Timer Access Control\n"
  "#define SIM_SCGC6\t\t*(volatile uint32_t *)0x4004803C // System Clock Gating Control Register 6\n"
  "#define SIM_SCGC6_RTC\t\t\t(uint32_t)0x20000000\t\t// RTC Access\n"
  "#define SIM_SCGC6_ADC0\t\t\t(uint32_t)0x08000000\t\t// ADC0 Clock Gate Control\n"
  "#define SIM_SCGC6_FTM1\t\t\t(uint32_t)0x02000000\t\t// FTM1 Clock Gate Control\n"
  "#define SIM_SCGC6_FTM0\t\t\t(uint32_t)0x01000000\t\t// FTM0 Clock Gate Control\n"
  "#define SIM_SCGC6_PIT\t\t\t(uint32_t)0x00800000\t\t// PIT Clock Gate Control\n"
  "#define SIM_SCGC6_PDB\t\t\t(uint32_t)0x00400000\t\t// PDB Clock Gate Control\n"
  "#define SIM_SCGC6_USBDCD\t\t(uint32_t)0x00200000\t\t// USB DCD Clock Gate Control\n"
  "#define SIM_SCGC6_CRC\t\t\t(uint32_t)0x00040000\t\t// CRC Clock Gate Control\n"
  "#define SIM_SCGC6_I2S\t\t\t(uint32_t)0x00008000\t\t// I2S Clock Gate Control\n"
  "#define SIM_SCGC6_SPI1\t\t\t(uint32_t)0x00002000\t\t// SPI1 Clock Gate Control\n"
  "#define SIM_SCGC6_SPI0\t\t\t(uint32_t)0x00001000\t\t// SPI0 Clock Gate Control\n"
  "#define SIM_SCGC6_FLEXCAN0\t\t(uint32_t)0x00000010\t\t// FlexCAN0 Clock Gate Control\n"
  "#define SIM_SCGC6_DMAMUX\t\t(uint32_t)0x00000002\t\t// DMA Mux Clock Gate Control\n"
  "#define SIM_SCGC6_FTFL\t\t\t(uint32_t)0x00000001\t\t// Flash Memory Clock Gate Control\n"
  "#define SIM_SCGC7\t\t*(volatile uint32_t *)0x40048040 // System Clock Gating Control Register 7\n"
  "#define SIM_SCGC7_DMA\t\t\t(uint32_t)0x00000002\t\t// DMA Clock Gate Control\n"
  "#define SIM_CLKDIV1\t\t*(volatile uint32_t *)0x40048044 // System Clock Divider Register 1\n"
  "#define SIM_CLKDIV1_OUTDIV1(n)\t\t(uint32_t)(((n) & 0x0F) << 28)\t// divide value for the core/system clock\n"
  "#define SIM_CLKDIV1_OUTDIV2(n)\t\t(uint32_t)(((n) & 0x0F) << 24)\t// divide value for the peripheral clock\n"
  "#define SIM_CLKDIV1_OUTDIV4(n)\t\t(uint32_t)(((n) & 0x0F) << 16)\t// divide value for the flash clock\n"
  "#define SIM_CLKDIV2\t\t*(volatile uint32_t *)0x40048048 // System Clock Divider Register 2\n"
  "#define SIM_CLKDIV2_USBDIV(n)\t\t(uint32_t)(((n) & 0x07) << 1)\n"
  "#define SIM_CLKDIV2_USBFRAC\t\t(uint32_t)0x01\n"
  "#define SIM_FCFG1\t\t*(const\t   uint32_t *)0x4004804C // Flash Configuration Register 1\n"
  "#define SIM_FCFG2\t\t*(const\t   uint32_t *)0x40048050 // Flash Configuration Register 2\n"
  "#define SIM_UIDH\t\t*(const\t   uint32_t *)0x40048054 // Unique Identification Register High\n"
  "#define SIM_UIDMH\t\t*(const\t   uint32_t *)0x40048058 // Unique Identification Register Mid-High\n"
  "#define SIM_UIDML\t\t*(const\t   uint32_t *)0x4004805C // Unique Identification Register Mid Low\n"
  "#define SIM_UIDL\t\t*(const\t   uint32_t *)0x40048060 // Unique Identification Register Low\n"
  "\n"
  "// Chapter 13: Reset Control Module (RCM)\n"
  "#define RCM_SRS0\t\t*(volatile uint8_t  *)0x4007F000 // System Reset Status Register 0\n"
  "#define RCM_SRS1\t\t*(volatile uint8_t  *)0x4007F001 // System Reset Status Register 1\n"
  "#define RCM_RPFC\t\t*(volatile uint8_t  *)0x4007F004 // Reset Pin Filter Control Register\n"
  "#define RCM_RPFW\t\t*(volatile uint8_t  *)0x4007F005 // Reset Pin Filter Width Register\n"
  "#define RCM_MR\t\t\t*(volatile uint8_t  *)0x4007F007 // Mode Register\n"
  "\n"
  "// Chapter 14: System Mode Controller\n"
  "#define SMC_PMPROT\t\t*(volatile uint8_t  *)0x4007E000 // Power Mode Protection Register\n"
  "#define SMC_PMPROT_AVLP\t\t\t(uint8_t)0x20\t\t\t// Allow very low power modes\n"
  "#define SMC_PMPROT_ALLS\t\t\t(uint8_t)0x08\t\t\t// Allow low leakage stop mode\n"
  "#define SMC_PMPROT_AVLLS\t\t(uint8_t)0x02\t\t\t// Allow very low leakage stop mode\n"
  "#define SMC_PMCTRL\t\t*(volatile uint8_t  *)0x4007E001 // Power Mode Control Register\n"
  "#define SMC_PMCTRL_LPWUI\t\t(uint8_t)0x80\t\t\t// Low Power Wake Up on Interrupt\n"
  "#define SMC_PMCTRL_RUNM(n)\t\t(uint8_t)(((n) & 0x03) << 5)\t// Run Mode Control\n"
  "#define SMC_PMCTRL_STOPA\t\t(uint8_t)0x08\t\t\t// Stop Aborted\n"
  "#define SMC_PMCTRL_STOPM(n)\t\t(uint8_t)((n) & 0x07)\t\t// Stop Mode Control\n"
  "#define SMC_VLLSCTRL\t\t*(volatile uint8_t  *)0x4007E002 // VLLS Control Register\n"
  "#define SMC_VLLSCTRL_PORPO\t\t(uint8_t)0x20\t\t\t// POR Power Option\n"
  "#define SMC_VLLSCTRL_VLLSM(n)\t\t(uint8_t)((n) & 0x07)\t\t// VLLS Mode Control\n"
  "#define SMC_PMSTAT\t\t*(volatile uint8_t  *)0x4007E003 // Power Mode Status Register\n"
  "#define SMC_PMSTAT_RUN\t\t\t(uint8_t)0x01\t\t\t// Current power mode is RUN\n"
  "#define SMC_PMSTAT_STOP\t\t\t(uint8_t)0x02\t\t\t// Current power mode is STOP\n"
  "#define SMC_PMSTAT_VLPR\t\t\t(uint8_t)0x04\t\t\t// Current power mode is VLPR\n"
  "#define SMC_PMSTAT_VLPW\t\t\t(uint8_t)0x08\t\t\t// Current power mode is VLPW\n"
  "#define SMC_PMSTAT_VLPS\t\t\t(uint8_t)0x10\t\t\t// Current power mode is VLPS\n"
  "#define SMC_PMSTAT_LLS\t\t\t(uint8_t)0x20\t\t\t// Current power mode is LLS\n"
  "#define SMC_PMSTAT_VLLS\t\t\t(uint8_t)0x40\t\t\t// Current power mode is VLLS\n"
  "\n"
  "// Chapter 15: Power Management Controller\n"
  "#define PMC_LVDSC1\t\t*(volatile uint8_t  *)0x4007D000 // Low Voltage Detect Status And Control 1 register\n"
  "#define PMC_LVDSC1_LVDF\t\t\t(uint8_t)0x80\t\t\t// Low-Voltage Detect Flag\n"
  "#define PMC_LVDSC1_LVDACK\t\t(uint8_t)0x40\t\t\t// Low-Voltage Detect Acknowledge\n"
  "#define PMC_LVDSC1_LVDIE\t\t(uint8_t)0x20\t\t\t// Low-Voltage Detect Interrupt Enable\n"
  "#define PMC_LVDSC1_LVDRE\t\t(uint8_t)0x10\t\t\t// Low-Voltage Detect Reset Enable\n"
  "#define PMC_LVDSC1_LVDV(n)\t\t(uint8_t)((n) & 0x03)\t\t// Low-Voltage Detect Voltage Select\n"
  "#define PMC_LVDSC2\t\t*(volatile uint8_t  *)0x4007D001 // Low Voltage Detect Status And Control 2 register\n"
  "#define PMC_LVDSC2_LVWF\t\t\t(uint8_t)0x80\t\t\t// Low-Voltage Warning Flag\n"
  "#define PMC_LVDSC2_LVWACK\t\t(uint8_t)0x40\t\t\t// Low-Voltage Warning Acknowledge\n"
  "#define PMC_LVDSC2_LVWIE\t\t(uint8_t)0x20\t\t\t// Low-Voltage Warning Interrupt Enable\n"
  "#define PMC_LVDSC2_LVWV(n)\t\t(uint8_t)((n) & 0x03)\t\t// Low-Voltage Warning Voltage Select\n"
  "#define PMC_REGSC\t\t*(volatile uint8_t  *)0x4007D002 // Regulator Status And Control register\n"
  "#define PMC_REGSC_BGEN\t\t\t(uint8_t)0x10\t\t\t// Bandgap Enable In VLPx Operation\n"
  "#define PMC_REGSC_ACKISO\t\t(uint8_t)0x08\t\t\t// Acknowledge Isolation\n"
  "#define PMC_REGSC_REGONS\t\t(uint8_t)0x04\t\t\t// Regulator In Run Regulation Status\n"
  "#define PMC_REGSC_BGBE\t\t\t(uint8_t)0x01\t\t\t// Bandgap Buffer Enable\n"
  "\n"
  "// Chapter 16: Low-Leakage Wakeup Unit (LLWU)\n"
  "#define LLWU_PE1\t\t*(volatile uint8_t  *)0x4007C000 // LLWU Pin Enable 1 register\n"
  "#define LLWU_PE2\t\t*(volatile uint8_t  *)0x4007C001 // LLWU Pin Enable 2 register\n"
  "#define LLWU_PE3\t\t*(volatile uint8_t  *)0x4007C002 // LLWU Pin Enable 3 register\n"
  "#define LLWU_PE4\t\t*(volatile uint8_t  *)0x4007C003 // LLWU Pin Enable 4 register\n"
  "#define LLWU_ME\t\t\t*(volatile uint8_t  *)0x4007C004 // LLWU Module Enable register\n"
  "#define LLWU_F1\t\t\t*(volatile uint8_t  *)0x4007C005 // LLWU Flag 1 register\n"
  "#define LLWU_F2\t\t\t*(volatile uint8_t  *)0x4007C006 // LLWU Flag 2 register\n"
  "#define LLWU_F3\t\t\t*(volatile uint8_t  *)0x4007C007 // LLWU Flag 3 register\n"
  "#define LLWU_FILT1\t\t*(volatile uint8_t  *)0x4007C008 // LLWU Pin Filter 1 register\n"
  "#define LLWU_FILT2\t\t*(volatile uint8_t  *)0x4007C009 // LLWU Pin Filter 2 register\n"
  "#define LLWU_RST\t\t*(volatile uint8_t  *)0x4007C00A // LLWU Reset Enable register\n"
  "\n"
  "// Chapter 17: Miscellaneous Control Module (MCM)\n"
  "#define MCM_PLASC\t\t*(volatile uint16_t *)0xE0080008 // Crossbar Switch (AXBS) Slave Configuration\n"
  "#define MCM_PLAMC\t\t*(volatile uint16_t *)0xE008000A // Crossbar Switch (AXBS) Master Configuration\n"
  "#define MCM_PLACR\t\t*(volatile uint32_t *)0xE008000C // Crossbar Switch (AXBS) Control Register (MK20DX128)\n"
  "#define MCM_PLACR_ARG\t\t\t(uint32_t)0x00000200\t\t// Arbitration select, 0=fixed, 1=round-robin\n"
  "#define MCM_CR\t\t\t*(volatile uint32_t *)0xE008000C // RAM arbitration control register (MK20DX256)\n"
  "#define MCM_CR_SRAMLWP\t\t\t(uint32_t)0x40000000\t\t// SRAM_L write protect\n"
  "#define MCM_CR_SRAMLAP(n)\t\t(uint32_t)(((n) & 0x03) << 28)\t// SRAM_L priority, 0=RR, 1=favor DMA, 2=CPU, 3=DMA\n"
  "#define MCM_CR_SRAMUWP\t\t\t(uint32_t)0x04000000\t\t// SRAM_U write protect\n"
  "#define MCM_CR_SRAMUAP(n)\t\t(uint32_t)(((n) & 0x03) << 24)\t// SRAM_U priority, 0=RR, 1=favor DMA, 2=CPU, 3=DMA\n"
  "\n"
  "// Crossbar Switch (AXBS) - only programmable on MK20DX256\n"
  "#define AXBS_PRS0\t\t*(volatile uint32_t *)0x40004000 // Priority Registers Slave 0\n"
  "#define AXBS_CRS0\t\t*(volatile uint32_t *)0x40004010 // Control Register 0\n"
  "#define AXBS_PRS1\t\t*(volatile uint32_t *)0x40004100 // Priority Registers Slave 1\n"
  "#define AXBS_CRS1\t\t*(volatile uint32_t *)0x40004110 // Control Register 1\n"
  "#define AXBS_PRS2\t\t*(volatile uint32_t *)0x40004200 // Priority Registers Slave 2\n"
  "#define AXBS_CRS2\t\t*(volatile uint32_t *)0x40004210 // Control Register 2\n"
  "#define AXBS_PRS3\t\t*(volatile uint32_t *)0x40004300 // Priority Registers Slave 3\n"
  "#define AXBS_CRS3\t\t*(volatile uint32_t *)0x40004310 // Control Register 3\n"
  "#define AXBS_PRS4\t\t*(volatile uint32_t *)0x40004400 // Priority Registers Slave 4\n"
  "#define AXBS_CRS4\t\t*(volatile uint32_t *)0x40004410 // Control Register 4\n"
  "#define AXBS_PRS5\t\t*(volatile uint32_t *)0x40004500 // Priority Registers Slave 5\n"
  "#define AXBS_CRS5\t\t*(volatile uint32_t *)0x40004510 // Control Register 5\n"
  "#define AXBS_PRS6\t\t*(volatile uint32_t *)0x40004600 // Priority Registers Slave 6\n"
  "#define AXBS_CRS6\t\t*(volatile uint32_t *)0x40004610 // Control Register 6\n"
  "#define AXBS_PRS7\t\t*(volatile uint32_t *)0x40004700 // Priority Registers Slave 7\n"
  "#define AXBS_CRS7\t\t*(volatile uint32_t *)0x40004710 // Control Register 7\n"
  "#define AXBS_MGPCR0\t\t*(volatile uint32_t *)0x40004800 // Master 0 General Purpose Control Register\n"
  "#define AXBS_MGPCR1\t\t*(volatile uint32_t *)0x40004900 // Master 1 General Purpose Control Register\n"
  "#define AXBS_MGPCR2\t\t*(volatile uint32_t *)0x40004A00 // Master 2 General Purpose Control Register\n"
  "#define AXBS_MGPCR3\t\t*(volatile uint32_t *)0x40004B00 // Master 3 General Purpose Control Register\n"
  "#define AXBS_MGPCR4\t\t*(volatile uint32_t *)0x40004C00 // Master 4 General Purpose Control Register\n"
  "#define AXBS_MGPCR5\t\t*(volatile uint32_t *)0x40004D00 // Master 5 General Purpose Control Register\n"
  "#define AXBS_MGPCR6\t\t*(volatile uint32_t *)0x40004E00 // Master 6 General Purpose Control Register\n"
  "#define AXBS_MGPCR7\t\t*(volatile uint32_t *)0x40004F00 // Master 7 General Purpose Control Register\n"
  "#define AXBS_CRS_READONLY\t\t(uint32_t)0x80000000\n"
  "#define AXBS_CRS_HALTLOWPRIORITY\t(uint32_t)0x40000000\n"
  "#define AXBS_CRS_ARB_FIXED\t\t(uint32_t)0x00000000\n"
  "#define AXBS_CRS_ARB_ROUNDROBIN\t\t(uint32_t)0x00010000\n"
  "#define AXBS_CRS_PARK_FIXED\t\t(uint32_t)0x00000000\n"
  "#define AXBS_CRS_PARK_PREVIOUS\t\t(uint32_t)0x00000010\n"
  "#define AXBS_CRS_PARK_NONE\t\t(uint32_t)0x00000020\n"
  "#define AXBS_CRS_PARK(n)\t\t(uint32_t)(((n) & 7) << 0)\n"
  "\n"
  "\n"
  "\n"
  "// Chapter 20: Direct Memory Access Multiplexer (DMAMUX)\n"
  "#define DMAMUX0_CHCFG0\t\t*(volatile uint8_t  *)0x40021000 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG1\t\t*(volatile uint8_t  *)0x40021001 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG2\t\t*(volatile uint8_t  *)0x40021002 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG3\t\t*(volatile uint8_t  *)0x40021003 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG4\t\t*(volatile uint8_t  *)0x40021004 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG5\t\t*(volatile uint8_t  *)0x40021005 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG6\t\t*(volatile uint8_t  *)0x40021006 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG7\t\t*(volatile uint8_t  *)0x40021007 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG8\t\t*(volatile uint8_t  *)0x40021008 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG9\t\t*(volatile uint8_t  *)0x40021009 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG10\t\t*(volatile uint8_t  *)0x4002100A // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG11\t\t*(volatile uint8_t  *)0x4002100B // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG12\t\t*(volatile uint8_t  *)0x4002100C // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG13\t\t*(volatile uint8_t  *)0x4002100D // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG14\t\t*(volatile uint8_t  *)0x4002100E // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG15\t\t*(volatile uint8_t  *)0x4002100F // Channel Configuration register\n"
  "#define DMAMUX_DISABLE\t\t\t0\n"
  "#define DMAMUX_TRIG\t\t\t64\n"
  "#define DMAMUX_ENABLE\t\t\t128\n"
  "#define DMAMUX_SOURCE_UART0_RX\t\t2\n"
  "#define DMAMUX_SOURCE_UART0_TX\t\t3\n"
  "#define DMAMUX_SOURCE_UART1_RX\t\t4\n"
  "#define DMAMUX_SOURCE_UART1_TX\t\t5\n"
  "#define DMAMUX_SOURCE_UART2_RX\t\t6\n"
  "#define DMAMUX_SOURCE_UART2_TX\t\t7\n"
  "#define DMAMUX_SOURCE_I2S0_RX\t\t14\n"
  "#define DMAMUX_SOURCE_I2S0_TX\t\t15\n"
  "#define DMAMUX_SOURCE_SPI0_RX\t\t16\n"
  "#define DMAMUX_SOURCE_SPI0_TX\t\t17\n"
  "#define DMAMUX_SOURCE_I2C0\t\t22\n"
  "#define DMAMUX_SOURCE_I2C1\t\t23\n"
  "#define DMAMUX_SOURCE_FTM0_CH0\t\t24\n"
  "#define DMAMUX_SOURCE_FTM0_CH1\t\t25\n"
  "#define DMAMUX_SOURCE_FTM0_CH2\t\t26\n"
  "#define DMAMUX_SOURCE_FTM0_CH3\t\t27\n"
  "#define DMAMUX_SOURCE_FTM0_CH4\t\t28\n"
  "#define DMAMUX_SOURCE_FTM0_CH5\t\t29\n"
  "#define DMAMUX_SOURCE_FTM0_CH6\t\t30\n"
  "#define DMAMUX_SOURCE_FTM0_CH7\t\t31\n"
  "#define DMAMUX_SOURCE_FTM1_CH0\t\t32\n"
  "#define DMAMUX_SOURCE_FTM1_CH1\t\t33\n"
  "#define DMAMUX_SOURCE_FTM2_CH0\t\t34\n"
  "#define DMAMUX_SOURCE_FTM2_CH1\t\t35\n"
  "#define DMAMUX_SOURCE_ADC0\t\t40\n"
  "#define DMAMUX_SOURCE_ADC1\t\t41\n"
  "#define DMAMUX_SOURCE_CMP0\t\t42\n"
  "#define DMAMUX_SOURCE_CMP1\t\t43\n"
  "#define DMAMUX_SOURCE_CMP2\t\t44\n"
  "#define DMAMUX_SOURCE_DAC0\t\t45\n"
  "#define DMAMUX_SOURCE_CMT\t\t47\n"
  "#define DMAMUX_SOURCE_PDB\t\t48\n"
  "#define DMAMUX_SOURCE_PORTA\t\t49\n"
  "#define DMAMUX_SOURCE_PORTB\t\t50\n"
  "#define DMAMUX_SOURCE_PORTC\t\t51\n"
  "#define DMAMUX_SOURCE_PORTD\t\t52\n"
  "#define DMAMUX_SOURCE_PORTE\t\t53\n"
  "#define DMAMUX_SOURCE_ALWAYS0\t\t54\n"
  "#define DMAMUX_SOURCE_ALWAYS1\t\t55\n"
  "#define DMAMUX_SOURCE_ALWAYS2\t\t56\n"
  "#define DMAMUX_SOURCE_ALWAYS3\t\t57\n"
  "#define DMAMUX_SOURCE_ALWAYS4\t\t58\n"
  "#define DMAMUX_SOURCE_ALWAYS5\t\t59\n"
  "#define DMAMUX_SOURCE_ALWAYS6\t\t60\n"
  "#define DMAMUX_SOURCE_ALWAYS7\t\t61\n"
  "#define DMAMUX_SOURCE_ALWAYS8\t\t62\n"
  "#define DMAMUX_SOURCE_ALWAYS9\t\t63\n"
  "\n"
  "// Chapter 21: Direct Memory Access Controller (eDMA)\n"
  "#define DMA_CR\t\t\t*(volatile uint32_t *)0x40008000 // Control Register\n"
  "#define DMA_CR_CX\t\t\t((uint32_t)(1<<17))\t// Cancel Transfer\n"
  "#define DMA_CR_ECX\t\t\t((uint32_t)(1<<16))\t// Error Cancel Transfer\n"
  "#define DMA_CR_EMLM\t\t\t((uint32_t)0x80)\t// Enable Minor Loop Mapping\n"
  "#define DMA_CR_CLM\t\t\t((uint32_t)0x40)\t// Continuous Link Mode\n"
  "#define DMA_CR_HALT\t\t\t((uint32_t)0x20)\t// Halt DMA Operations\n"
  "#define DMA_CR_HOE\t\t\t((uint32_t)0x10)\t// Halt On Error\n"
  "#define DMA_CR_ERCA\t\t\t((uint32_t)0x04)\t// Enable Round Robin Channel Arbitration\n"
  "#define DMA_CR_EDBG\t\t\t((uint32_t)0x02)\t// Enable Debug\n"
  "#define DMA_ES\t\t\t*(volatile uint32_t *)0x40008004 // Error Status Register\n"
  "#define DMA_ERQ\t\t\t*(volatile uint32_t *)0x4000800C // Enable Request Register\n"
  "#define DMA_ERQ_ERQ0\t\t\t((uint32_t)1<<0)\t// Enable DMA Request 0\n"
  "#define DMA_ERQ_ERQ1\t\t\t((uint32_t)1<<1)\t// Enable DMA Request 1\n"
  "#define DMA_ERQ_ERQ2\t\t\t((uint32_t)1<<2)\t// Enable DMA Request 2\n"
  "#define DMA_ERQ_ERQ3\t\t\t((uint32_t)1<<3)\t// Enable DMA Request 3\n"
  "#define DMA_EEI\t\t\t*(volatile uint32_t *)0x40008014 // Enable Error Interrupt Register\n"
  "#define DMA_EEI_EEI0\t\t\t((uint32_t)1<<0)\t// Enable Error Interrupt 0\n"
  "#define DMA_EEI_EEI1\t\t\t((uint32_t)1<<1)\t// Enable Error Interrupt 1\n"
  "#define DMA_EEI_EEI2\t\t\t((uint32_t)1<<2)\t// Enable Error Interrupt 2\n"
  "#define DMA_EEI_EEI3\t\t\t((uint32_t)1<<3)\t// Enable Error Interrupt 3\n"
  "#define DMA_CEEI\t\t*(volatile uint8_t  *)0x40008018 // Clear Enable Error Interrupt Register\n"
  "#define DMA_CEEI_CEEI(n)\t\t((uint8_t)(n & 3)<<0)\t// Clear Enable Error Interrupt\n"
  "#define DMA_CEEI_CAEE\t\t\t((uint8_t)1<<6)\t\t// Clear All Enable Error Interrupts\n"
  "#define DMA_CEEI_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_SEEI\t\t*(volatile uint8_t  *)0x40008019 // Set Enable Error Interrupt Register\n"
  "#define DMA_SEEI_SEEI(n)\t\t((uint8_t)(n & 3)<<0)\t// Set Enable Error Interrupt\n"
  "#define DMA_SEEI_SAEE\t\t\t((uint8_t)1<<6)\t\t// Set All Enable Error Interrupts\n"
  "#define DMA_SEEI_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_CERQ\t\t*(volatile uint8_t  *)0x4000801A // Clear Enable Request Register\n"
  "#define DMA_CERQ_CERQ(n)\t\t((uint8_t)(n & 3)<<0)\t// Clear Enable Request\n"
  "#define DMA_CERQ_CAER\t\t\t((uint8_t)1<<6)\t\t// Clear All Enable Requests\n"
  "#define DMA_CERQ_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_SERQ\t\t*(volatile uint8_t  *)0x4000801B // Set Enable Request Register\n"
  "#define DMA_SERQ_SERQ(n)\t\t((uint8_t)(n & 3)<<0)\t// Set Enable Request\n"
  "#define DMA_SERQ_SAER\t\t\t((uint8_t)1<<6)\t\t// Set All Enable Requests\n"
  "#define DMA_SERQ_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_CDNE\t\t*(volatile uint8_t  *)0x4000801C // Clear DONE Status Bit Register\n"
  "#define DMA_CDNE_CDNE(n)\t\t((uint8_t)(n & 3)<<0)\t// Clear Done Bit\n"
  "#define DMA_CDNE_CADN\t\t\t((uint8_t)1<<6)\t\t// Clear All Done Bits\n"
  "#define DMA_CDNE_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_SSRT\t\t*(volatile uint8_t  *)0x4000801D // Set START Bit Register\n"
  "#define DMA_SSRT_SSRT(n)\t\t((uint8_t)(n & 3)<<0)\t// Set Start Bit\n"
  "#define DMA_SSRT_SAST\t\t\t((uint8_t)1<<6)\t\t// Set All Start Bits\n"
  "#define DMA_SSRT_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_CERR\t\t*(volatile uint8_t  *)0x4000801E // Clear Error Register\n"
  "#define DMA_CERR_CERR(n)\t\t((uint8_t)(n & 3)<<0)\t// Clear Error Indicator\n"
  "#define DMA_CERR_CAEI\t\t\t((uint8_t)1<<6)\t\t// Clear All Error Indicators\n"
  "#define DMA_CERR_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_CINT\t\t*(volatile uint8_t  *)0x4000801F // Clear Interrupt Request Register\n"
  "#define DMA_CINT_CINT(n)\t\t((uint8_t)(n & 3)<<0)\t// Clear Interrupt Request\n"
  "#define DMA_CINT_CAIR\t\t\t((uint8_t)1<<6)\t\t// Clear All Interrupt Requests\n"
  "#define DMA_CINT_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_INT\t\t\t*(volatile uint32_t *)0x40008024 // Interrupt Request Register\n"
  "#define DMA_INT_INT0\t\t\t((uint32_t)1<<0)\t// Interrupt Request 0\n"
  "#define DMA_INT_INT1\t\t\t((uint32_t)1<<1)\t// Interrupt Request 1\n"
  "#define DMA_INT_INT2\t\t\t((uint32_t)1<<2)\t// Interrupt Request 2\n"
  "#define DMA_INT_INT3\t\t\t((uint32_t)1<<3)\t// Interrupt Request 3\n"
  "#define DMA_ERR\t\t\t*(volatile uint32_t *)0x4000802C // Error Register\n"
  "#define DMA_ERR_ERR0\t\t\t((uint32_t)1<<0)\t// Error in Channel 0\n"
  "#define DMA_ERR_ERR1\t\t\t((uint32_t)1<<1)\t// Error in Channel 1\n"
  "#define DMA_ERR_ERR2\t\t\t((uint32_t)1<<2)\t// Error in Channel 2\n"
  "#define DMA_ERR_ERR3\t\t\t((uint32_t)1<<3)\t// Error in Channel 3\n"
  "#define DMA_HRS\t\t\t*(volatile uint32_t *)0x40008034 // Hardware Request Status Register\n"
  "#define DMA_HRS_HRS0\t\t\t((uint32_t)1<<0)\t// Hardware Request Status Channel 0\n"
  "#define DMA_HRS_HRS1\t\t\t((uint32_t)1<<1)\t// Hardware Request Status Channel 1\n"
  "#define DMA_HRS_HRS2\t\t\t((uint32_t)1<<2)\t// Hardware Request Status Channel 2\n"
  "#define DMA_HRS_HRS3\t\t\t((uint32_t)1<<3)\t// Hardware Request Status Channel 3\n"
  "#define DMA_DCHPRI3\t\t*(volatile uint8_t  *)0x40008100 // Channel n Priority Register\n"
  "#define DMA_DCHPRI2\t\t*(volatile uint8_t  *)0x40008101 // Channel n Priority Register\n"
  "#define DMA_DCHPRI1\t\t*(volatile uint8_t  *)0x40008102 // Channel n Priority Register\n"
  "#define DMA_DCHPRI0\t\t*(volatile uint8_t  *)0x40008103 // Channel n Priority Register\n"
  "#define DMA_DCHPRI_CHPRI(n)\t\t((uint8_t)(n & 3)<<0)\t// Channel Arbitration Priority\n"
  "#define DMA_DCHPRI_DPA\t\t\t((uint8_t)1<<6)\t\t// Disable PreEmpt Ability\n"
  "#define DMA_DCHPRI_ECP\t\t\t((uint8_t)1<<7)\t\t// Enable PreEmption\n"
  "\n"
  "\n"
  "#define DMA_TCD_ATTR_SMOD(n)\t\t(((n) & 0x1F) << 11)\n"
  "#define DMA_TCD_ATTR_SSIZE(n)\t\t(((n) & 0x7) << 8)\n"
  "#define DMA_TCD_ATTR_DMOD(n)\t\t(((n) & 0x1F) << 3)\n"
  "#define DMA_TCD_ATTR_DSIZE(n)\t\t(((n) & 0x7) << 0)\n"
  "#define DMA_TCD_ATTR_SIZE_8BIT\t\t0\n"
  "#define DMA_TCD_ATTR_SIZE_16BIT\t\t1\n"
  "#define DMA_TCD_ATTR_SIZE_32BIT\t\t2\n"
  "#define DMA_TCD_ATTR_SIZE_16BYTE\t4\n"
  "#define DMA_TCD_ATTR_SIZE_32BYTE\t5\n"
  "#define DMA_TCD_CSR_BWC(n)\t\t(((n) & 0x3) << 14)\n"
  "#define DMA_TCD_CSR_MAJORLINKCH(n)\t(((n) & 0x3) << 8)\n"
  "#define DMA_TCD_CSR_DONE\t\t0x0080\n"
  "#define DMA_TCD_CSR_ACTIVE\t\t0x0040\n"
  "#define DMA_TCD_CSR_MAJORELINK\t\t0x0020\n"
  "#define DMA_TCD_CSR_ESG\t\t\t0x0010\n"
  "#define DMA_TCD_CSR_DREQ\t\t0x0008\n"
  "#define DMA_TCD_CSR_INTHALF\t\t0x0004\n"
  "#define DMA_TCD_CSR_INTMAJOR\t\t0x0002\n"
  "#define DMA_TCD_CSR_START\t\t0x0001\n"
  "#define DMA_TCD_CITER_MASK\t\t    ((uint16_t)0x7FFF)\t   // Loop count mask\n"
  "#define DMA_TCD_CITER_ELINK\t\t    ((uint16_t)1<<15)\t   // Enable channel linking on minor-loop complete\n"
  "#define DMA_TCD_BITER_MASK\t\t    ((uint16_t)0x7FFF)\t   // Loop count mask\n"
  "#define DMA_TCD_BITER_ELINK\t\t    ((uint16_t)1<<15)\t   // Enable channel linking on minor-loop complete\n"
  "#define DMA_TCD_NBYTES_SMLOE\t\t    ((uint32_t)1<<31)\t\t    // Source Minor Loop Offset Enable\n"
  "#define DMA_TCD_NBYTES_DMLOE\t\t    ((uint32_t)1<<30)\t\t    // Destination Minor Loop Offset Enable\n"
  "#define DMA_TCD_NBYTES_MLOFFNO_NBYTES(n)    ((uint32_t)(n))\t\t    // NBytes transfer count when minor loop disabled\n"
  "#define DMA_TCD_NBYTES_MLOFFYES_NBYTES(n)   ((uint32_t)(n & 0x1F))\t    // NBytes transfer count when minor loop enabled\n"
  "#define DMA_TCD_NBYTES_MLOFFYES_MLOFF(n)    ((uint32_t)(n & 0xFFFFF)<<10)   // Offset \n"
  "\n"
  "#define DMA_TCD0_SADDR\t\t*(volatile const void * volatile *)0x40009000 // TCD Source Address\n"
  "#define DMA_TCD0_SOFF\t\t*(volatile int16_t *)0x40009004\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD0_ATTR\t\t*(volatile uint16_t *)0x40009006 // TCD Transfer Attributes\n"
  "#define DMA_TCD0_NBYTES_MLNO\t*(volatile uint32_t *)0x40009008 // TCD Minor Byte Count (Minor Loop Disabled)\n"
  "#define DMA_TCD0_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009008 // TCD Signed Minor Loop Offset (Minor Loop Enabled and Offset Disabled)\n"
  "#define DMA_TCD0_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009008 // TCD Signed Minor Loop Offset (Minor Loop and Offset Enabled)\n"
  "#define DMA_TCD0_SLAST\t\t*(volatile int32_t *)0x4000900C\t // TCD Last Source Address Adjustment\n"
  "#define DMA_TCD0_DADDR\t\t*(volatile void * volatile *)0x40009010 // TCD Destination Address\n"
  "#define DMA_TCD0_DOFF\t\t*(volatile int16_t *)0x40009014\t // TCD Signed Destination Address Offset\n"
  "#define DMA_TCD0_CITER_ELINKYES *(volatile uint16_t *)0x40009016 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "#define DMA_TCD0_CITER_ELINKNO\t*(volatile uint16_t *)0x40009016 // \?\?\n"
  "#define DMA_TCD0_DLASTSGA\t*(volatile int32_t *)0x40009018\t // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "#define DMA_TCD0_CSR\t\t*(volatile uint16_t *)0x4000901C // TCD Control and Status\n"
  "#define DMA_TCD0_BITER_ELINKYES *(volatile uint16_t *)0x4000901E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "#define DMA_TCD0_BITER_ELINKNO\t*(volatile uint16_t *)0x4000901E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled\n"
  "\n"
  "#define DMA_TCD1_SADDR\t\t*(volatile const void * volatile *)0x40009020 // TCD Source Address\n"
  "#define DMA_TCD1_SOFF\t\t*(volatile int16_t *)0x40009024\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD1_ATTR\t\t*(volatile uint16_t *)0x40009026 // TCD Transfer Attributes\n"
  "#define DMA_TCD1_NBYTES_MLNO\t*(volatile uint32_t *)0x40009028 // TCD Minor Byte Count, Minor Loop Disabled\n"
  "#define DMA_TCD1_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009028 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled\n"
  "#define DMA_TCD1_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009028 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled\n"
  "#define DMA_TCD1_SLAST\t\t*(volatile int32_t *)0x4000902C\t // TCD Last Source Address Adjustment\n"
  "#define DMA_TCD1_DADDR\t\t*(volatile void * volatile *)0x40009030 // TCD Destination Address\n"
  "#define DMA_TCD1_DOFF\t\t*(volatile int16_t *)0x40009034\t // TCD Signed Destination Address Offset\n"
  "#define DMA_TCD1_CITER_ELINKYES *(volatile uint16_t *)0x40009036 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "#define DMA_TCD1_CITER_ELINKNO\t*(volatile uint16_t *)0x40009036 // \?\?\n"
  "#define DMA_TCD1_DLASTSGA\t*(volatile int32_t *)0x40009038\t // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "#define DMA_TCD1_CSR\t\t*(volatile uint16_t *)0x4000903C // TCD Control and Status\n"
  "#define DMA_TCD1_BITER_ELINKYES *(volatile uint16_t *)0x4000903E // TCD Beginning Minor Loop Link, Major Loop Count Channel Linking Enabled\n"
  "#define DMA_TCD1_BITER_ELINKNO\t*(volatile uint16_t *)0x4000903E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled\n"
  "\n"
  "#define DMA_TCD2_SADDR\t\t*(volatile const void * volatile *)0x40009040 // TCD Source Address\n"
  "#define DMA_TCD2_SOFF\t\t*(volatile int16_t *)0x40009044\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD2_ATTR\t\t*(volatile uint16_t *)0x40009046 // TCD Transfer Attributes\n"
  "#define DMA_TCD2_NBYTES_MLNO\t*(volatile uint32_t *)0x40009048 // TCD Minor Byte Count, Minor Loop Disabled\n"
  "#define DMA_TCD2_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009048 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled\n"
  "#define DMA_TCD2_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009048 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled\n"
  "#define DMA_TCD2_SLAST\t\t*(volatile int32_t *)0x4000904C\t // TCD Last Source Address Adjustment\n"
  "#define DMA_TCD2_DADDR\t\t*(volatile void * volatile *)0x40009050 // TCD Destination Address\n"
  "#define DMA_TCD2_DOFF\t\t*(volatile int16_t *)0x40009054\t // TCD Signed Destination Address Offset\n"
  "#define DMA_TCD2_CITER_ELINKYES *(volatile uint16_t *)0x40009056 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "#define DMA_TCD2_CITER_ELINKNO\t*(volatile uint16_t *)0x40009056 // \?\?\n"
  "#define DMA_TCD2_DLASTSGA\t*(volatile int32_t *)0x40009058\t // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "#define DMA_TCD2_CSR\t\t*(volatile uint16_t *)0x4000905C // TCD Control and Status\n"
  "#define DMA_TCD2_BITER_ELINKYES *(volatile uint16_t *)0x4000905E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "#define DMA_TCD2_BITER_ELINKNO\t*(volatile uint16_t *)0x4000905E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled\n"
  "\n"
  "#define DMA_TCD3_SADDR\t\t*(volatile const void * volatile *)0x40009060 // TCD Source Address\n"
  "#define DMA_TCD3_SOFF\t\t*(volatile int16_t *)0x40009064\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD3_ATTR\t\t*(volatile uint16_t *)0x40009066 // TCD Transfer Attributes\n"
  "#define DMA_TCD3_NBYTES_MLNO\t*(volatile uint32_t *)0x40009068 // TCD Minor Byte Count, Minor Loop Disabled\n"
  "#define DMA_TCD3_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009068 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled\n"
  "#define DMA_TCD3_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009068 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled\n"
  "#define DMA_TCD3_SLAST\t\t*(volatile int32_t *)0x4000906C\t // TCD Last Source Address Adjustment\n"
  "#define DMA_TCD3_DADDR\t\t*(volatile void * volatile *)0x40009070 // TCD Destination Address\n"
  "#define DMA_TCD3_DOFF\t\t*(volatile int16_t *)0x40009074\t // TCD Signed Destination Address Offset\n"
  "#define DMA_TCD3_CITER_ELINKYES *(volatile uint16_t *)0x40009076 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "#define DMA_TCD3_CITER_ELINKNO\t*(volatile uint16_t *)0x40009076 // \?\?\n"
  "#define DMA_TCD3_DLASTSGA\t*(volatile int32_t *)0x40009078\t // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "#define DMA_TCD3_CSR\t\t*(volatile uint16_t *)0x4000907C // TCD Control and Status\n"
  "#define DMA_TCD3_BITER_ELINKYES *(volatile uint16_t *)0x4000907E // TCD Beginning Minor Loop Link, Major Loop Count ,Channel Linking Enabled\n"
  "#define DMA_TCD3_BITER_ELINKNO\t*(volatile uint16_t *)0x4000907E // TCD Beginning Minor Loop Link, Major Loop Count ,Channel Linking Disabled\n"
  "\n"
  "#define DMA_TCD4_SADDR\t\t*(volatile const void * volatile *)0x40009080 // TCD Source Addr\n"
  "#define DMA_TCD4_SOFF\t\t*(volatile int16_t *)0x40009084\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD4_ATTR\t\t*(volatile uint16_t *)0x40009086 // TCD Transfer Attributes\n"
  "#define DMA_TCD4_NBYTES_MLNO\t*(volatile uint32_t *)0x40009088 // TCD Minor Byte Count\n"
  "#define DMA_TCD4_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009088 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD4_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009088 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD4_SLAST\t\t*(volatile int32_t *)0x4000908C\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD4_DADDR\t\t*(volatile void * volatile *)0x40009090 // TCD Destination Address\n"
  "#define DMA_TCD4_DOFF\t\t*(volatile int16_t *)0x40009094\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD4_CITER_ELINKYES *(volatile uint16_t *)0x40009096 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD4_CITER_ELINKNO\t*(volatile uint16_t *)0x40009096 // \?\?\n"
  "#define DMA_TCD4_DLASTSGA\t*(volatile int32_t *)0x40009098\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD4_CSR\t\t*(volatile uint16_t *)0x4000909C // TCD Control and Status\n"
  "#define DMA_TCD4_BITER_ELINKYES *(volatile uint16_t *)0x4000909E // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD4_BITER_ELINKNO\t*(volatile uint16_t *)0x4000909E // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD5_SADDR\t\t*(volatile const void * volatile *)0x400090A0 // TCD Source Addr\n"
  "#define DMA_TCD5_SOFF\t\t*(volatile int16_t *)0x400090A4\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD5_ATTR\t\t*(volatile uint16_t *)0x400090A6 // TCD Transfer Attributes\n"
  "#define DMA_TCD5_NBYTES_MLNO\t*(volatile uint32_t *)0x400090A8 // TCD Minor Byte Count\n"
  "#define DMA_TCD5_NBYTES_MLOFFNO *(volatile uint32_t *)0x400090A8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD5_NBYTES_MLOFFYES *(volatile uint32_t *)0x400090A8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD5_SLAST\t\t*(volatile int32_t *)0x400090AC\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD5_DADDR\t\t*(volatile void * volatile *)0x400090B0 // TCD Destination Address\n"
  "#define DMA_TCD5_DOFF\t\t*(volatile int16_t *)0x400090B4\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD5_CITER_ELINKYES *(volatile uint16_t *)0x400090B6 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD5_CITER_ELINKNO\t*(volatile uint16_t *)0x400090B6 // \?\?\n"
  "#define DMA_TCD5_DLASTSGA\t*(volatile int32_t *)0x400090B8\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD5_CSR\t\t*(volatile uint16_t *)0x400090BC // TCD Control and Status\n"
  "#define DMA_TCD5_BITER_ELINKYES *(volatile uint16_t *)0x400090BE // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD5_BITER_ELINKNO\t*(volatile uint16_t *)0x400090BE // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD6_SADDR\t\t*(volatile const void * volatile *)0x400090C0 // TCD Source Addr\n"
  "#define DMA_TCD6_SOFF\t\t*(volatile int16_t *)0x400090C4\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD6_ATTR\t\t*(volatile uint16_t *)0x400090C6 // TCD Transfer Attributes\n"
  "#define DMA_TCD6_NBYTES_MLNO\t*(volatile uint32_t *)0x400090C8 // TCD Minor Byte Count\n"
  "#define DMA_TCD6_NBYTES_MLOFFNO *(volatile uint32_t *)0x400090C8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD6_NBYTES_MLOFFYES *(volatile uint32_t *)0x400090C8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD6_SLAST\t\t*(volatile int32_t *)0x400090CC\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD6_DADDR\t\t*(volatile void * volatile *)0x400090D0 // TCD Destination Address\n"
  "#define DMA_TCD6_DOFF\t\t*(volatile int16_t *)0x400090D4\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD6_CITER_ELINKYES *(volatile uint16_t *)0x400090D6 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD6_CITER_ELINKNO\t*(volatile uint16_t *)0x400090D6 // \?\?\n"
  "#define DMA_TCD6_DLASTSGA\t*(volatile int32_t *)0x400090D8\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD6_CSR\t\t*(volatile uint16_t *)0x400090DC // TCD Control and Status\n"
  "#define DMA_TCD6_BITER_ELINKYES *(volatile uint16_t *)0x400090DE // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD6_BITER_ELINKNO\t*(volatile uint16_t *)0x400090DE // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD7_SADDR\t\t*(volatile const void * volatile *)0x400090E0 // TCD Source Addr\n"
  "#define DMA_TCD7_SOFF\t\t*(volatile int16_t *)0x400090E4\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD7_ATTR\t\t*(volatile uint16_t *)0x400090E6 // TCD Transfer Attributes\n"
  "#define DMA_TCD7_NBYTES_MLNO\t*(volatile uint32_t *)0x400090E8 // TCD Minor Byte Count\n"
  "#define DMA_TCD7_NBYTES_MLOFFNO *(volatile uint32_t *)0x400090E8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD7_NBYTES_MLOFFYES *(volatile uint32_t *)0x400090E8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD7_SLAST\t\t*(volatile int32_t *)0x400090EC\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD7_DADDR\t\t*(volatile void * volatile *)0x400090F0 // TCD Destination Address\n"
  "#define DMA_TCD7_DOFF\t\t*(volatile int16_t *)0x400090F4\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD7_CITER_ELINKYES *(volatile uint16_t *)0x400090F6 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD7_CITER_ELINKNO\t*(volatile uint16_t *)0x400090F6 // \?\?\n"
  "#define DMA_TCD7_DLASTSGA\t*(volatile int32_t *)0x400090F8\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD7_CSR\t\t*(volatile uint16_t *)0x400090FC // TCD Control and Status\n"
  "#define DMA_TCD7_BITER_ELINKYES *(volatile uint16_t *)0x400090FE // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD7_BITER_ELINKNO\t*(volatile uint16_t *)0x400090FE // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD8_SADDR\t\t*(volatile const void * volatile *)0x40009100 // TCD Source Addr\n"
  "#define DMA_TCD8_SOFF\t\t*(volatile int16_t *)0x40009104\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD8_ATTR\t\t*(volatile uint16_t *)0x40009106 // TCD Transfer Attributes\n"
  "#define DMA_TCD8_NBYTES_MLNO\t*(volatile uint32_t *)0x40009108 // TCD Minor Byte Count\n"
  "#define DMA_TCD8_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009108 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD8_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009108 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD8_SLAST\t\t*(volatile int32_t *)0x4000910C\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD8_DADDR\t\t*(volatile void * volatile *)0x40009110 // TCD Destination Address\n"
  "#define DMA_TCD8_DOFF\t\t*(volatile int16_t *)0x40009114\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD8_CITER_ELINKYES *(volatile uint16_t *)0x40009116 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD8_CITER_ELINKNO\t*(volatile uint16_t *)0x40009116 // \?\?\n"
  "#define DMA_TCD8_DLASTSGA\t*(volatile int32_t *)0x40009118\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD8_CSR\t\t*(volatile uint16_t *)0x4000911C // TCD Control and Status\n"
  "#define DMA_TCD8_BITER_ELINKYES *(volatile uint16_t *)0x4000911E // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD8_BITER_ELINKNO\t*(volatile uint16_t *)0x4000911E // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD9_SADDR\t\t*(volatile const void * volatile *)0x40009120 // TCD Source Addr\n"
  "#define DMA_TCD9_SOFF\t\t*(volatile int16_t *)0x40009124\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD9_ATTR\t\t*(volatile uint16_t *)0x40009126 // TCD Transfer Attributes\n"
  "#define DMA_TCD9_NBYTES_MLNO\t*(volatile uint32_t *)0x40009128 // TCD Minor Byte Count\n"
  "#define DMA_TCD9_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009128 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD9_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009128 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD9_SLAST\t\t*(volatile int32_t *)0x4000912C\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD9_DADDR\t\t*(volatile void * volatile *)0x40009130 // TCD Destination Address\n"
  "#define DMA_TCD9_DOFF\t\t*(volatile int16_t *)0x40009134\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD9_CITER_ELINKYES *(volatile uint16_t *)0x40009136 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD9_CITER_ELINKNO\t*(volatile uint16_t *)0x40009136 // \?\?\n"
  "#define DMA_TCD9_DLASTSGA\t*(volatile int32_t *)0x40009138\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD9_CSR\t\t*(volatile uint16_t *)0x4000913C // TCD Control and Status\n"
  "#define DMA_TCD9_BITER_ELINKYES *(volatile uint16_t *)0x4000913E // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD9_BITER_ELINKNO\t*(volatile uint16_t *)0x4000913E // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD10_SADDR\t\t*(volatile const void * volatile *)0x40009140 // TCD Source Addr\n"
  "#define DMA_TCD10_SOFF\t\t*(volatile int16_t *)0x40009144\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD10_ATTR\t\t*(volatile uint16_t *)0x40009146 // TCD Transfer Attributes\n"
  "#define DMA_TCD10_NBYTES_MLNO\t*(volatile uint32_t *)0x40009148 // TCD Minor Byte Count\n"
  "#define DMA_TCD10_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009148 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD10_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009148 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD10_SLAST\t\t*(volatile int32_t *)0x4000914C\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD10_DADDR\t\t*(volatile void * volatile *)0x40009150 // TCD Destination Address\n"
  "#define DMA_TCD10_DOFF\t\t*(volatile int16_t *)0x40009154\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD10_CITER_ELINKYES *(volatile uint16_t *)0x40009156 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD10_CITER_ELINKNO\t*(volatile uint16_t *)0x40009156 // \?\?\n"
  "#define DMA_TCD10_DLASTSGA\t*(volatile int32_t *)0x40009158\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD10_CSR\t\t*(volatile uint16_t *)0x4000915C // TCD Control and Status\n"
  "#define DMA_TCD10_BITER_ELINKYES *(volatile uint16_t *)0x4000915E // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD10_BITER_ELINKNO\t*(volatile uint16_t *)0x4000915E // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD11_SADDR\t\t*(volatile const void * volatile *)0x40009160 // TCD Source Addr\n"
  "#define DMA_TCD11_SOFF\t\t*(volatile int16_t *)0x40009164\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD11_ATTR\t\t*(volatile uint16_t *)0x40009166 // TCD Transfer Attributes\n"
  "#define DMA_TCD11_NBYTES_MLNO\t*(volatile uint32_t *)0x40009168 // TCD Minor Byte Count\n"
  "#define DMA_TCD11_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009168 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD11_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009168 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD11_SLAST\t\t*(volatile int32_t *)0x4000916C\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD11_DADDR\t\t*(volatile void * volatile *)0x40009170 // TCD Destination Address\n"
  "#define DMA_TCD11_DOFF\t\t*(volatile int16_t *)0x40009174\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD11_CITER_ELINKYES *(volatile uint16_t *)0x40009176 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD11_CITER_ELINKNO\t*(volatile uint16_t *)0x40009176 // \?\?\n"
  "#define DMA_TCD11_DLASTSGA\t*(volatile int32_t *)0x40009178\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD11_CSR\t\t*(volatile uint16_t *)0x4000917C // TCD Control and Status\n"
  "#define DMA_TCD11_BITER_ELINKYES *(volatile uint16_t *)0x4000917E // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD11_BITER_ELINKNO\t*(volatile uint16_t *)0x4000917E // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD12_SADDR\t\t*(volatile const void * volatile *)0x40009180 // TCD Source Addr\n"
  "#define DMA_TCD12_SOFF\t\t*(volatile int16_t *)0x40009184\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD12_ATTR\t\t*(volatile uint16_t *)0x40009186 // TCD Transfer Attributes\n"
  "#define DMA_TCD12_NBYTES_MLNO\t*(volatile uint32_t *)0x40009188 // TCD Minor Byte Count\n"
  "#define DMA_TCD12_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009188 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD12_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009188 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD12_SLAST\t\t*(volatile int32_t *)0x4000918C\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD12_DADDR\t\t*(volatile void * volatile *)0x40009190 // TCD Destination Address\n"
  "#define DMA_TCD12_DOFF\t\t*(volatile int16_t *)0x40009194\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD12_CITER_ELINKYES *(volatile uint16_t *)0x40009196 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD12_CITER_ELINKNO\t*(volatile uint16_t *)0x40009196 // \?\?\n"
  "#define DMA_TCD12_DLASTSGA\t*(volatile int32_t *)0x40009198\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD12_CSR\t\t*(volatile uint16_t *)0x4000919C // TCD Control and Status\n"
  "#define DMA_TCD12_BITER_ELINKYES *(volatile uint16_t *)0x4000919E // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD12_BITER_ELINKNO\t*(volatile uint16_t *)0x4000919E // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD13_SADDR\t\t*(volatile const void * volatile *)0x400091A0 // TCD Source Addr\n"
  "#define DMA_TCD13_SOFF\t\t*(volatile int16_t *)0x400091A4\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD13_ATTR\t\t*(volatile uint16_t *)0x400091A6 // TCD Transfer Attributes\n"
  "#define DMA_TCD13_NBYTES_MLNO\t*(volatile uint32_t *)0x400091A8 // TCD Minor Byte Count\n"
  "#define DMA_TCD13_NBYTES_MLOFFNO *(volatile uint32_t *)0x400091A8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD13_NBYTES_MLOFFYES *(volatile uint32_t *)0x400091A8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD13_SLAST\t\t*(volatile int32_t *)0x400091AC\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD13_DADDR\t\t*(volatile void * volatile *)0x400091B0 // TCD Destination Address\n"
  "#define DMA_TCD13_DOFF\t\t*(volatile int16_t *)0x400091B4\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD13_CITER_ELINKYES *(volatile uint16_t *)0x400091B6 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD13_CITER_ELINKNO\t*(volatile uint16_t *)0x400091B6 // \?\?\n"
  "#define DMA_TCD13_DLASTSGA\t*(volatile int32_t *)0x400091B8\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD13_CSR\t\t*(volatile uint16_t *)0x400091BC // TCD Control and Status\n"
  "#define DMA_TCD13_BITER_ELINKYES *(volatile uint16_t *)0x400091BE // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD13_BITER_ELINKNO\t*(volatile uint16_t *)0x400091BE // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD14_SADDR\t\t*(volatile const void * volatile *)0x400091C0 // TCD Source Addr\n"
  "#define DMA_TCD14_SOFF\t\t*(volatile int16_t *)0x400091C4\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD14_ATTR\t\t*(volatile uint16_t *)0x400091C6 // TCD Transfer Attributes\n"
  "#define DMA_TCD14_NBYTES_MLNO\t*(volatile uint32_t *)0x400091C8 // TCD Minor Byte Count\n"
  "#define DMA_TCD14_NBYTES_MLOFFNO *(volatile uint32_t *)0x400091C8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD14_NBYTES_MLOFFYES *(volatile uint32_t *)0x400091C8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD14_SLAST\t\t*(volatile int32_t *)0x400091CC\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD14_DADDR\t\t*(volatile void * volatile *)0x400091D0 // TCD Destination Address\n"
  "#define DMA_TCD14_DOFF\t\t*(volatile int16_t *)0x400091D4\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD14_CITER_ELINKYES *(volatile uint16_t *)0x400091D6 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD14_CITER_ELINKNO\t*(volatile uint16_t *)0x400091D6 // \?\?\n"
  "#define DMA_TCD14_DLASTSGA\t*(volatile int32_t *)0x400091D8\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD14_CSR\t\t*(volatile uint16_t *)0x400091DC // TCD Control and Status\n"
  "#define DMA_TCD14_BITER_ELINKYES *(volatile uint16_t *)0x400091DE // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD14_BITER_ELINKNO\t*(volatile uint16_t *)0x400091DE // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD15_SADDR\t\t*(volatile const void * volatile *)0x400091E0 // TCD Source Addr\n"
  "#define DMA_TCD15_SOFF\t\t*(volatile int16_t *)0x400091E4\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD15_ATTR\t\t*(volatile uint16_t *)0x400091E6 // TCD Transfer Attributes\n"
  "#define DMA_TCD15_NBYTES_MLNO\t*(volatile uint32_t *)0x400091E8 // TCD Minor Byte Count\n"
  "#define DMA_TCD15_NBYTES_MLOFFNO *(volatile uint32_t *)0x400091E8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD15_NBYTES_MLOFFYES *(volatile uint32_t *)0x400091E8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD15_SLAST\t\t*(volatile int32_t *)0x400091EC\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD15_DADDR\t\t*(volatile void * volatile *)0x400091F0 // TCD Destination Address\n"
  "#define DMA_TCD15_DOFF\t\t*(volatile int16_t *)0x400091F4\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD15_CITER_ELINKYES *(volatile uint16_t *)0x400091F6 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD15_CITER_ELINKNO\t*(volatile uint16_t *)0x400091F6 // \?\?\n"
  "#define DMA_TCD15_DLASTSGA\t*(volatile int32_t *)0x400091F8\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD15_CSR\t\t*(volatile uint16_t *)0x400091FC // TCD Control and Status\n"
  "#define DMA_TCD15_BITER_ELINKYES *(volatile uint16_t *)0x400091FE // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD15_BITER_ELINKNO\t*(volatile uint16_t *)0x400091FE // TCD Beginning Minor Loop Link\n"
  "\n"
  "\n"
  "// Chapter 22: External Watchdog Monitor (EWM)\n"
  "#define EWM_CTRL\t\t*(volatile uint8_t  *)0x40061000 // Control Register\n"
  "#define EWM_SERV\t\t*(volatile uint8_t  *)0x40061001 // Service Register\n"
  "#define EWM_CMPL\t\t*(volatile uint8_t  *)0x40061002 // Compare Low Register\n"
  "#define EWM_CMPH\t\t*(volatile uint8_t  *)0x40061003 // Compare High Register\n"
  "\n"
  "// Chapter 23: Watchdog Timer (WDOG)\n"
  "#define WDOG_STCTRLH\t\t*(volatile uint16_t *)0x40052000 // Watchdog Status and Control Register High\n"
  "#define WDOG_STCTRLH_DISTESTWDOG\t(uint16_t)0x4000\t\t// Allows the WDOG's functional test mode to be disabled permanently.\n"
  "#define WDOG_STCTRLH_BYTESEL(n)\t\t(uint16_t)(((n) & 3) << 12)\t// selects the byte to be tested when the watchdog is in the byte test mode.\n"
  "#define WDOG_STCTRLH_TESTSEL\t\t(uint16_t)0x0800\n"
  "#define WDOG_STCTRLH_TESTWDOG\t\t(uint16_t)0x0400\n"
  "#define WDOG_STCTRLH_WAITEN\t\t(uint16_t)0x0080\n"
  "#define WDOG_STCTRLH_STOPEN\t\t(uint16_t)0x0040\n"
  "#define WDOG_STCTRLH_DBGEN\t\t(uint16_t)0x0020\n"
  "#define WDOG_STCTRLH_ALLOWUPDATE\t(uint16_t)0x0010\n"
  "#define WDOG_STCTRLH_WINEN\t\t(uint16_t)0x0008\n"
  "#define WDOG_STCTRLH_IRQRSTEN\t\t(uint16_t)0x0004\n"
  "#define WDOG_STCTRLH_CLKSRC\t\t(uint16_t)0x0002\n"
  "#define WDOG_STCTRLH_WDOGEN\t\t(uint16_t)0x0001\n"
  "#define WDOG_STCTRLL\t\t*(volatile uint16_t *)0x40052002 // Watchdog Status and Control Register Low\n"
  "#define WDOG_TOVALH\t\t*(volatile uint16_t *)0x40052004 // Watchdog Time-out Value Register High\n"
  "#define WDOG_TOVALL\t\t*(volatile uint16_t *)0x40052006 // Watchdog Time-out Value Register Low\n"
  "#define WDOG_WINH\t\t*(volatile uint16_t *)0x40052008 // Watchdog Window Register High\n"
  "#define WDOG_WINL\t\t*(volatile uint16_t *)0x4005200A // Watchdog Window Register Low\n"
  "#define WDOG_REFRESH\t\t*(volatile uint16_t *)0x4005200C // Watchdog Refresh register\n"
  "#define WDOG_UNLOCK\t\t*(volatile uint16_t *)0x4005200E // Watchdog Unlock register\n"
  "#define WDOG_UNLOCK_SEQ1\t\t(uint16_t)0xC520\n"
  "#define WDOG_UNLOCK_SEQ2\t\t(uint16_t)0xD928\n"
  "#define WDOG_TMROUTH\t\t*(volatile uint16_t *)0x40052010 // Watchdog Timer Output Register High\n"
  "#define WDOG_TMROUTL\t\t*(volatile uint16_t *)0x40052012 // Watchdog Timer Output Register Low\n"
  "#define WDOG_RSTCNT\t\t*(volatile uint16_t *)0x40052014 // Watchdog Reset Count register\n"
  "#define WDOG_PRESC\t\t*(volatile uint16_t *)0x40052016 // Watchdog Prescaler register\n"
  "\n"
  "// Chapter 24: Multipurpose Clock Generator (MCG)\n"
  "#define MCG_C1\t\t\t*(volatile uint8_t  *)0x40064000 // MCG Control 1 Register\n"
  "#define MCG_C1_IREFSTEN\t\t\t(uint8_t)0x01\t\t\t// Internal Reference Stop Enable, Controls whether or not the internal reference clock remains enabled when"
  " the MCG enters Stop mode.\n"
  "#define MCG_C1_IRCLKEN\t\t\t(uint8_t)0x02\t\t\t// Internal Reference Clock Enable, Enables the internal reference clock for use as MCGIRCLK.\n"
  "#define MCG_C1_IREFS\t\t\t(uint8_t)0x04\t\t\t// Internal Reference Select, Selects the reference clock source for the FLL.\n"
  "#define MCG_C1_FRDIV(n)\t\t\t(uint8_t)(((n) & 0x07) << 3)\t// FLL External Reference Divider, Selects the amount to divide down the external reference clo"
  "ck for the FLL\n"
  "#define MCG_C1_CLKS(n)\t\t\t(uint8_t)(((n) & 0x03) << 6)\t// Clock Source Select, Selects the clock source for MCGOUTCLK\n"
  "#define MCG_C2\t\t\t*(volatile uint8_t  *)0x40064001 // MCG Control 2 Register\n"
  "#define MCG_C2_IRCS\t\t\t(uint8_t)0x01\t\t\t// Internal Reference Clock Select, Selects between the fast or slow internal reference clock source.\n"
  "#define MCG_C2_LP\t\t\t(uint8_t)0x02\t\t\t// Low Power Select, Controls whether the FLL or PLL is disabled in BLPI and BLPE modes.\n"
  "#define MCG_C2_EREFS\t\t\t(uint8_t)0x04\t\t\t// External Reference Select, Selects the source for the external reference clock. \n"
  "#define MCG_C2_HGO0\t\t\t(uint8_t)0x08\t\t\t// High Gain Oscillator Select, Controls the crystal oscillator mode of operation\n"
  "#define MCG_C2_RANGE0(n)\t\t(uint8_t)(((n) & 0x03) << 4)\t// Frequency Range Select, Selects the frequency range for the crystal oscillator\n"
  "#define MCG_C2_LOCRE0\t\t\t(uint8_t)0x80\t\t\t// Loss of Clock Reset Enable, Determines whether an interrupt or a reset request is made following a loss of "
  "OSC0 \n"
  "#define MCG_C3\t\t\t*(volatile uint8_t  *)0x40064002 // MCG Control 3 Register\n"
  "#define MCG_C3_SCTRIM(n)\t\t(uint8_t)(n)\t\t\t// Slow Internal Reference Clock Trim Setting\n"
  "#define MCG_C4\t\t\t*(volatile uint8_t  *)0x40064003 // MCG Control 4 Register\n"
  "#define MCG_C4_SCFTRIM\t\t\t(uint8_t)0x01\t\t\t// Slow Internal Reference Clock Fine Trim\n"
  "#define MCG_C4_FCTRIM(n)\t\t(uint8_t)(((n) & 0x0F) << 1)\t// Fast Internal Reference Clock Trim Setting\n"
  "#define MCG_C4_DRST_DRS(n)\t\t(uint8_t)(((n) & 0x03) << 5)\t// DCO Range Select\n"
  "#define MCG_C4_DMX32\t\t\t(uint8_t)0x80\t\t\t// DCO Maximum Frequency with 32.768 kHz Reference, controls whether the DCO frequency range is narrowed\n"
  "#define MCG_C5\t\t\t*(volatile uint8_t  *)0x40064004 // MCG Control 5 Register\n"
  "#define MCG_C5_PRDIV0(n)\t\t(uint8_t)((n) & 0x1F)\t\t// PLL External Reference Divider\n"
  "#define MCG_C5_PLLSTEN0\t\t\t(uint8_t)0x20\t\t\t// PLL Stop Enable\n"
  "#define MCG_C5_PLLCLKEN0\t\t(uint8_t)0x40\t\t\t// PLL Clock Enable\n"
  "#define MCG_C6\t\t\t*(volatile uint8_t  *)0x40064005 // MCG Control 6 Register\n"
  "#define MCG_C6_VDIV0(n)\t\t\t(uint8_t)((n) & 0x1F)\t\t// VCO 0 Divider\n"
  "#define MCG_C6_CME0\t\t\t(uint8_t)0x20\t\t\t// Clock Monitor Enable\n"
  "#define MCG_C6_PLLS\t\t\t(uint8_t)0x40\t\t\t// PLL Select, Controls whether the PLL or FLL output is selected as the MCG source when CLKS[1:0]=00. \n"
  "#define MCG_C6_LOLIE0\t\t\t(uint8_t)0x80\t\t\t// Loss of Lock Interrrupt Enable\n"
  "#define MCG_S\t\t\t*(volatile uint8_t  *)0x40064006 // MCG Status Register\n"
  "#define MCG_S_IRCST\t\t\t(uint8_t)0x01\t\t\t// Internal Reference Clock Status\n"
  "#define MCG_S_OSCINIT0\t\t\t(uint8_t)0x02\t\t\t// OSC Initialization,\tresets to 0, is set to 1 after the initialization cycles of the crystal oscillator\n"
  "#define MCG_S_CLKST(n)\t\t\t(uint8_t)(((n) & 0x03) << 2)\t// Clock Mode Status, 0=FLL is selected, 1= Internal ref, 2=External ref, 3=PLL\n"
  "#define MCG_S_CLKST_MASK\t\t(uint8_t)0x0C\n"
  "#define MCG_S_IREFST\t\t\t(uint8_t)0x10\t\t\t// Internal Reference Status\n"
  "#define MCG_S_PLLST\t\t\t(uint8_t)0x20\t\t\t// PLL Select Status\n"
  "#define MCG_S_LOCK0\t\t\t(uint8_t)0x40\t\t\t// Lock Status, 0=PLL Unlocked, 1=PLL Locked\n"
  "#define MCG_S_LOLS0\t\t\t(uint8_t)0x80\t\t\t// Loss of Lock Status\n"
  "#define MCG_SC\t\t\t*(volatile uint8_t  *)0x40064008 // MCG Status and Control Register\n"
  "#define MCG_SC_LOCS0\t\t\t(uint8_t)0x01\t\t\t// OSC0 Loss of Clock Status\n"
  "#define MCG_SC_FCRDIV(n)\t\t(uint8_t)(((n) & 0x07) << 1)\t// Fast Clock Internal Reference Divider\n"
  "#define MCG_SC_FLTPRSRV\t\t\t(uint8_t)0x10\t\t\t// FLL Filter Preserve Enable\n"
  "#define MCG_SC_ATMF\t\t\t(uint8_t)0x20\t\t\t// Automatic Trim Machine Fail Flag\n"
  "#define MCG_SC_ATMS\t\t\t(uint8_t)0x40\t\t\t// Automatic Trim Machine Select\n"
  "#define MCG_SC_ATME\t\t\t(uint8_t)0x80\t\t\t// Automatic Trim Machine Enable\n"
  "#define MCG_ATCVH\t\t*(volatile uint8_t  *)0x4006400A // MCG Auto Trim Compare Value High Register\n"
  "#define MCG_ATCVL\t\t*(volatile uint8_t  *)0x4006400B // MCG Auto Trim Compare Value Low Register\n"
  "#define MCG_C7\t\t\t*(volatile uint8_t  *)0x4006400C // MCG Control 7 Register\n"
  "#define MCG_C8\t\t\t*(volatile uint8_t  *)0x4006400D // MCG Control 8 Register\n"
  "\n"
  "// Chapter 25: Oscillator (OSC)\n"
  "#define OSC0_CR\t\t\t*(volatile uint8_t  *)0x40065000 // OSC Control Register\n"
  "#define OSC_SC16P\t\t\t(uint8_t)0x01\t\t\t// Oscillator 16 pF Capacitor Load Configure\n"
  "#define OSC_SC8P\t\t\t(uint8_t)0x02\t\t\t// Oscillator 8 pF Capacitor Load Configure\n"
  "#define OSC_SC4P\t\t\t(uint8_t)0x04\t\t\t// Oscillator 4 pF Capacitor Load Configure\n"
  "#define OSC_SC2P\t\t\t(uint8_t)0x08\t\t\t// Oscillator 2 pF Capacitor Load Configure\n"
  "#define OSC_EREFSTEN\t\t\t(uint8_t)0x20\t\t\t// External Reference Stop Enable, Controls whether or not the external reference clock (OSCERCLK) remains enab"
  "led when MCU enters Stop mode.\n"
  "#define OSC_ERCLKEN\t\t\t(uint8_t)0x80\t\t\t// External Reference Enable, Enables external reference clock (OSCERCLK).\n"
  "\n"
  "// Chapter 27: Flash Memory Controller (FMC)\n"
  "#define FMC_PFAPR\t\t*(volatile uint32_t *)0x4001F000\t// Flash Access Protection\n"
  "#define FMC_PFB0CR\t\t*(volatile uint32_t *)0x4001F004\t// Flash Control\n"
  "#define FMC_TAGVDW0S0\t\t*(volatile uint32_t *)0x4001F100\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW0S1\t\t*(volatile uint32_t *)0x4001F104\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW1S0\t\t*(volatile uint32_t *)0x4001F108\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW1S1\t\t*(volatile uint32_t *)0x4001F10C\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW2S0\t\t*(volatile uint32_t *)0x4001F110\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW2S1\t\t*(volatile uint32_t *)0x4001F114\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW3S0\t\t*(volatile uint32_t *)0x4001F118\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW3S1\t\t*(volatile uint32_t *)0x4001F11C\t// Cache Tag Storage\n"
  "#define FMC_DATAW0S0\t\t*(volatile uint32_t *)0x4001F200\t// Cache Data Storage\n"
  "#define FMC_DATAW0S1\t\t*(volatile uint32_t *)0x4001F204\t// Cache Data Storage\n"
  "#define FMC_DATAW1S0\t\t*(volatile uint32_t *)0x4001F208\t// Cache Data Storage\n"
  "#define FMC_DATAW1S1\t\t*(volatile uint32_t *)0x4001F20C\t// Cache Data Storage\n"
  "#define FMC_DATAW2S0\t\t*(volatile uint32_t *)0x4001F210\t// Cache Data Storage\n"
  "#define FMC_DATAW2S1\t\t*(volatile uint32_t *)0x4001F214\t// Cache Data Storage\n"
  "#define FMC_DATAW3S0\t\t*(volatile uint32_t *)0x4001F218\t// Cache Data Storage\n"
  "#define FMC_DATAW3S1\t\t*(volatile uint32_t *)0x4001F21C\t// Cache Data Storage\n"
  "\n"
  "// Chapter 28: Flash Memory Module (FTFL)\n"
  "#define FTFL_FSTAT\t\t*(volatile uint8_t  *)0x40020000      // Flash Status Register\n"
  "#define FTFL_FSTAT_CCIF\t\t\t(uint8_t)0x80\t\t\t// Command Complete Interrupt Flag\n"
  "#define FTFL_FSTAT_RDCOLERR\t\t(uint8_t)0x40\t\t\t// Flash Read Collision Error Flag\n"
  "#define FTFL_FSTAT_ACCERR\t\t(uint8_t)0x20\t\t\t// Flash Access Error Flag\n"
  "#define FTFL_FSTAT_FPVIOL\t\t(uint8_t)0x10\t\t\t// Flash Protection Violation Flag\n"
  "#define FTFL_FSTAT_MGSTAT0\t\t(uint8_t)0x01\t\t\t// Memory Controller Command Completion Status Flag\n"
  "#define FTFL_FCNFG\t\t*(volatile uint8_t  *)0x40020001      // Flash Configuration Register\n"
  "#define FTFL_FCNFG_CCIE\t\t\t(uint8_t)0x80\t\t\t// Command Complete Interrupt Enable\n"
  "#define FTFL_FCNFG_RDCOLLIE\t\t(uint8_t)0x40\t\t\t// Read Collision Error Interrupt Enable\n"
  "#define FTFL_FCNFG_ERSAREQ\t\t(uint8_t)0x20\t\t\t// Erase All Request\n"
  "#define FTFL_FCNFG_ERSSUSP\t\t(uint8_t)0x10\t\t\t// Erase Suspend\n"
  "#define FTFL_FCNFG_PFLSH\t\t(uint8_t)0x04\t\t\t// Flash memory configuration\n"
  "#define FTFL_FCNFG_RAMRDY\t\t(uint8_t)0x02\t\t\t// RAM Ready\n"
  "#define FTFL_FCNFG_EEERDY\t\t(uint8_t)0x01\t\t\t// EEPROM Ready\n"
  "#define FTFL_FSEC\t\t*(const\t   uint8_t  *)0x40020002      // Flash Security Register\n"
  "#define FTFL_FOPT\t\t*(const\t   uint8_t  *)0x40020003      // Flash Option Register\n"
  "#define FTFL_FCCOB3\t\t*(volatile uint8_t  *)0x40020004      // Flash Common Command Object Registers\n"
  "#define FTFL_FCCOB2\t\t*(volatile uint8_t  *)0x40020005\n"
  "#define FTFL_FCCOB1\t\t*(volatile uint8_t  *)0x40020006\n"
  "#define FTFL_FCCOB0\t\t*(volatile uint8_t  *)0x40020007\n"
  "#define FTFL_FCCOB7\t\t*(volatile uint8_t  *)0x40020008\n"
  "#define FTFL_FCCOB6\t\t*(volatile uint8_t  *)0x40020009\n"
  "#define FTFL_FCCOB5\t\t*(volatile uint8_t  *)0x4002000A\n"
  "#define FTFL_FCCOB4\t\t*(volatile uint8_t  *)0x4002000B\n"
  "#define FTFL_FCCOBB\t\t*(volatile uint8_t  *)0x4002000C\n"
  "#define FTFL_FCCOBA\t\t*(volatile uint8_t  *)0x4002000D\n"
  "#define FTFL_FCCOB9\t\t*(volatile uint8_t  *)0x4002000E\n"
  "#define FTFL_FCCOB8\t\t*(volatile uint8_t  *)0x4002000F\n"
  "#define FTFL_FPROT3\t\t*(volatile uint8_t  *)0x40020010      // Program Flash Protection Registers\n"
  "#define FTFL_FPROT2\t\t*(volatile uint8_t  *)0x40020011      // Program Flash Protection Registers\n"
  "#define FTFL_FPROT1\t\t*(volatile uint8_t  *)0x40020012      // Program Flash Protection Registers\n"
  "#define FTFL_FPROT0\t\t*(volatile uint8_t  *)0x40020013      // Program Flash Protection Registers\n"
  "#define FTFL_FEPROT\t\t*(volatile uint8_t  *)0x40020016      // EEPROM Protection Register\n"
  "#define FTFL_FDPROT\t\t*(volatile uint8_t  *)0x40020017      // Data Flash Protection Register\n"
  "\n"
  "// Chapter 30: Cyclic Redundancy Check (CRC)\n"
  "#define CRC_CRC\t\t\t*(volatile uint32_t *)0x40032000 // CRC Data register\n"
  "#define CRC_GPOLY\t\t*(volatile uint32_t *)0x40032004 // CRC Polynomial register\n"
  "#define CRC_CTRL\t\t*(volatile uint32_t *)0x40032008 // CRC Control register\n"
  "\n"
  "// Chapter 31: Analog-to-Digital Converter (ADC)\n"
  "#define ADC0_SC1A\t\t*(volatile uint32_t *)0x4003B000 // ADC status and control registers 1\n"
  "#define ADC0_SC1B\t\t*(volatile uint32_t *)0x4003B004 // ADC status and control registers 1\n"
  "#define ADC_SC1_COCO\t\t\t(uint32_t)0x80\t\t\t// Conversion complete flag\n"
  "#define ADC_SC1_AIEN\t\t\t(uint32_t)0x40\t\t\t// Interrupt enable\n"
  "#define ADC_SC1_DIFF\t\t\t(uint32_t)0x20\t\t\t// Differential mode enable\n"
  "#define ADC_SC1_ADCH(n)\t\t\t(uint32_t)((n) & 0x1F)\t\t// Input channel select\n"
  "#define ADC0_CFG1\t\t*(volatile uint32_t *)0x4003B008 // ADC configuration register 1\n"
  "#define ADC_CFG1_ADLPC\t\t\t(uint32_t)0x80\t\t\t// Low-power configuration\n"
  "#define ADC_CFG1_ADIV(n)\t\t(uint32_t)(((n) & 3) << 5)\t// Clock divide select, 0=direct, 1=div2, 2=div4, 3=div8\n"
  "#define ADC_CFG1_ADLSMP\t\t\t(uint32_t)0x10\t\t\t// Sample time configuration, 0=Short, 1=Long\n"
  "#define ADC_CFG1_MODE(n)\t\t(uint32_t)(((n) & 3) << 2)\t// Conversion mode, 0=8 bit, 1=12 bit, 2=10 bit, 3=16 bit\n"
  "#define ADC_CFG1_ADICLK(n)\t\t(uint32_t)(((n) & 3) << 0)\t// Input clock, 0=bus, 1=bus/2, 2=OSCERCLK, 3=async\n"
  "#define ADC0_CFG2\t\t*(volatile uint32_t *)0x4003B00C // Configuration register 2\n"
  "#define ADC_CFG2_MUXSEL\t\t\t(uint32_t)0x10\t\t\t// 0=a channels, 1=b channels\n"
  "#define ADC_CFG2_ADACKEN\t\t(uint32_t)0x08\t\t\t// async clock enable\n"
  "#define ADC_CFG2_ADHSC\t\t\t(uint32_t)0x04\t\t\t// High speed configuration\n"
  "#define ADC_CFG2_ADLSTS(n)\t\t(uint32_t)(((n) & 3) << 0)\t// Sample time, 0=24 cycles, 1=12 cycles, 2=6 cycles, 3=2 cycles\n"
  "#define ADC0_RA\t\t\t*(volatile uint32_t *)0x4003B010 // ADC data result register\n"
  "#define ADC0_RB\t\t\t*(volatile uint32_t *)0x4003B014 // ADC data result register\n"
  "#define ADC0_CV1\t\t*(volatile uint32_t *)0x4003B018 // Compare value registers\n"
  "#define ADC0_CV2\t\t*(volatile uint32_t *)0x4003B01C // Compare value registers\n"
  "#define ADC0_SC2\t\t*(volatile uint32_t *)0x4003B020 // Status and control register 2\n"
  "#define ADC_SC2_ADACT\t\t\t(uint32_t)0x80\t\t\t// Conversion active\n"
  "#define ADC_SC2_ADTRG\t\t\t(uint32_t)0x40\t\t\t// Conversion trigger select, 0=software, 1=hardware\n"
  "#define ADC_SC2_ACFE\t\t\t(uint32_t)0x20\t\t\t// Compare function enable\n"
  "#define ADC_SC2_ACFGT\t\t\t(uint32_t)0x10\t\t\t// Compare function greater than enable\n"
  "#define ADC_SC2_ACREN\t\t\t(uint32_t)0x08\t\t\t// Compare function range enable\n"
  "#define ADC_SC2_DMAEN\t\t\t(uint32_t)0x04\t\t\t// DMA enable\n"
  "#define ADC_SC2_REFSEL(n)\t\t(uint32_t)(((n) & 3) << 0)\t// Voltage reference, 0=vcc/external, 1=1.2 volts\n"
  "#define ADC0_SC3\t\t*(volatile uint32_t *)0x4003B024 // Status and control register 3\n"
  "#define ADC_SC3_CAL\t\t\t(uint32_t)0x80\t\t\t// Calibration, 1=begin, stays set while cal in progress\n"
  "#define ADC_SC3_CALF\t\t\t(uint32_t)0x40\t\t\t// Calibration failed flag\n"
  "#define ADC_SC3_ADCO\t\t\t(uint32_t)0x08\t\t\t// Continuous conversion enable\n"
  "#define ADC_SC3_AVGE\t\t\t(uint32_t)0x04\t\t\t// Hardware average enable\n"
  "#define ADC_SC3_AVGS(n)\t\t\t(uint32_t)(((n) & 3) << 0)\t// avg select, 0=4 samples, 1=8 samples, 2=16 samples, 3=32 samples\n"
  "#define ADC0_OFS\t\t*(volatile uint32_t *)0x4003B028 // ADC offset correction register\n"
  "#define ADC0_PG\t\t\t*(volatile uint32_t *)0x4003B02C // ADC plus-side gain register\n"
  "#define ADC0_MG\t\t\t*(volatile uint32_t *)0x4003B030 // ADC minus-side gain register\n"
  "#define ADC0_CLPD\t\t*(volatile uint32_t *)0x4003B034 // ADC plus-side general calibration value register\n"
  "#define ADC0_CLPS\t\t*(volatile uint32_t *)0x4003B038 // ADC plus-side general calibration value register\n"
  "#define ADC0_CLP4\t\t*(volatile uint32_t *)0x4003B03C // ADC plus-side general calibration value register\n"
  "#define ADC0_CLP3\t\t*(volatile uint32_t *)0x4003B040 // ADC plus-side general calibration value register\n"
  "#define ADC0_CLP2\t\t*(volatile uint32_t *)0x4003B044 // ADC plus-side general calibration value register\n"
  "#define ADC0_CLP1\t\t*(volatile uint32_t *)0x4003B048 // ADC plus-side general calibration value register\n"
  "#define ADC0_CLP0\t\t*(volatile uint32_t *)0x4003B04C // ADC plus-side general calibration value register\n"
  "#define ADC0_PGA\t\t*(volatile uint32_t *)0x4003B050 // ADC Programmable Gain Amplifier\n"
  "#define ADC0_PGA_PGAEN\t\t\t(uint32_t)0x00800000\t\t// Enable\n"
  "#define ADC0_PGA_PGALPB\t\t\t(uint32_t)0x00100000\t\t// Low-Power Mode Control, 0=low power, 1=normal\n"
  "#define ADC0_PGA_PGAG(n)\t\t(uint32_t)(((n) & 15) << 16)\t// Gain, 0=1X, 1=2X, 2=4X, 3=8X, 4=16X, 5=32X, 6=64X\n"
  "#define ADC0_CLMD\t\t*(volatile uint32_t *)0x4003B054 // ADC minus-side general calibration value register\n"
  "#define ADC0_CLMS\t\t*(volatile uint32_t *)0x4003B058 // ADC minus-side general calibration value register\n"
  "#define ADC0_CLM4\t\t*(volatile uint32_t *)0x4003B05C // ADC minus-side general calibration value register\n"
  "#define ADC0_CLM3\t\t*(volatile uint32_t *)0x4003B060 // ADC minus-side general calibration value register\n"
  "#define ADC0_CLM2\t\t*(volatile uint32_t *)0x4003B064 // ADC minus-side general calibration value register\n"
  "#define ADC0_CLM1\t\t*(volatile uint32_t *)0x4003B068 // ADC minus-side general calibration value register\n"
  "#define ADC0_CLM0\t\t*(volatile uint32_t *)0x4003B06C // ADC minus-side general calibration value register\n"
  "\n"
  "#define ADC1_SC1A\t\t*(volatile uint32_t *)0x400BB000 // ADC status and control registers 1\n"
  "#define ADC1_SC1B\t\t*(volatile uint32_t *)0x400BB004 // ADC status and control registers 1\n"
  "#define ADC1_CFG1\t\t*(volatile uint32_t *)0x400BB008 // ADC configuration register 1\n"
  "#define ADC1_CFG2\t\t*(volatile uint32_t *)0x400BB00C // Configuration register 2\n"
  "#define ADC1_RA\t\t\t*(volatile uint32_t *)0x400BB010 // ADC data result register\n"
  "#define ADC1_RB\t\t\t*(volatile uint32_t *)0x400BB014 // ADC data result register\n"
  "#define ADC1_CV1\t\t*(volatile uint32_t *)0x400BB018 // Compare value registers\n"
  "#define ADC1_CV2\t\t*(volatile uint32_t *)0x400BB01C // Compare value registers\n"
  "#define ADC1_SC2\t\t*(volatile uint32_t *)0x400BB020 // Status and control register 2\n"
  "#define ADC1_SC3\t\t*(volatile uint32_t *)0x400BB024 // Status and control register 3\n"
  "#define ADC1_OFS\t\t*(volatile uint32_t *)0x400BB028 // ADC offset correction register\n"
  "#define ADC1_PG\t\t\t*(volatile uint32_t *)0x400BB02C // ADC plus-side gain register\n"
  "#define ADC1_MG\t\t\t*(volatile uint32_t *)0x400BB030 // ADC minus-side gain register\n"
  "#define ADC1_CLPD\t\t*(volatile uint32_t *)0x400BB034 // ADC plus-side general calibration value register\n"
  "#define ADC1_CLPS\t\t*(volatile uint32_t *)0x400BB038 // ADC plus-side general calibration value register\n"
  "#define ADC1_CLP4\t\t*(volatile uint32_t *)0x400BB03C // ADC plus-side general calibration value register\n"
  "#define ADC1_CLP3\t\t*(volatile uint32_t *)0x400BB040 // ADC plus-side general calibration value register\n"
  "#define ADC1_CLP2\t\t*(volatile uint32_t *)0x400BB044 // ADC plus-side general calibration value register\n"
  "#define ADC1_CLP1\t\t*(volatile uint32_t *)0x400BB048 // ADC plus-side general calibration value register\n"
  "#define ADC1_CLP0\t\t*(volatile uint32_t *)0x400BB04C // ADC plus-side general calibration value register\n"
  "#define ADC1_PGA\t\t*(volatile uint32_t *)0x400BB050 // ADC Programmable Gain Amplifier\n"
  "#define ADC1_CLMD\t\t*(volatile uint32_t *)0x400BB054 // ADC minus-side general calibration value register\n"
  "#define ADC1_CLMS\t\t*(volatile uint32_t *)0x400BB058 // ADC minus-side general calibration value register\n"
  "#define ADC1_CLM4\t\t*(volatile uint32_t *)0x400BB05C // ADC minus-side general calibration value register\n"
  "#define ADC1_CLM3\t\t*(volatile uint32_t *)0x400BB060 // ADC minus-side general calibration value register\n"
  "#define ADC1_CLM2\t\t*(volatile uint32_t *)0x400BB064 // ADC minus-side general calibration value register\n"
  "#define ADC1_CLM1\t\t*(volatile uint32_t *)0x400BB068 // ADC minus-side general calibration value register\n"
  "#define ADC1_CLM0\t\t*(volatile uint32_t *)0x400BB06C // ADC minus-side general calibration value register\n"
  "\n"
  "#define DAC0_DAT0L\t\t*(volatile uint8_t  *)0x400CC000 // DAC Data Low Register \n"
  "#define DAC0_DATH\t\t*(volatile uint8_t  *)0x400CC001 // DAC Data High Register \n"
  "#define DAC0_DAT1L\t\t*(volatile uint8_t  *)0x400CC002 // DAC Data Low Register \n"
  "#define DAC0_DAT2L\t\t*(volatile uint8_t  *)0x400CC004 // DAC Data Low Register \n"
  "#define DAC0_DAT3L\t\t*(volatile uint8_t  *)0x400CC006 // DAC Data Low Register \n"
  "#define DAC0_DAT4L\t\t*(volatile uint8_t  *)0x400CC008 // DAC Data Low Register \n"
  "#define DAC0_DAT5L\t\t*(volatile uint8_t  *)0x400CC00A // DAC Data Low Register \n"
  "#define DAC0_DAT6L\t\t*(volatile uint8_t  *)0x400CC00C // DAC Data Low Register \n"
  "#define DAC0_DAT7L\t\t*(volatile uint8_t  *)0x400CC00E // DAC Data Low Register \n"
  "#define DAC0_DAT8L\t\t*(volatile uint8_t  *)0x400CC010 // DAC Data Low Register \n"
  "#define DAC0_DAT9L\t\t*(volatile uint8_t  *)0x400CC012 // DAC Data Low Register \n"
  "#define DAC0_DAT10L\t\t*(volatile uint8_t  *)0x400CC014 // DAC Data Low Register \n"
  "#define DAC0_DAT11L\t\t*(volatile uint8_t  *)0x400CC016 // DAC Data Low Register \n"
  "#define DAC0_DAT12L\t\t*(volatile uint8_t  *)0x400CC018 // DAC Data Low Register \n"
  "#define DAC0_DAT13L\t\t*(volatile uint8_t  *)0x400CC01A // DAC Data Low Register \n"
  "#define DAC0_DAT14L\t\t*(volatile uint8_t  *)0x400CC01C // DAC Data Low Register \n"
  "#define DAC0_DAT15L\t\t*(volatile uint8_t  *)0x400CC01E // DAC Data Low Register \n"
  "#define DAC0_SR\t\t\t*(volatile uint8_t  *)0x400CC020 // DAC Status Register \n"
  "#define DAC0_C0\t\t\t*(volatile uint8_t  *)0x400CC021 // DAC Control Register \n"
  "#define DAC_C0_DACEN\t\t\t0x80\t\t\t\t// DAC Enable\n"
  "#define DAC_C0_DACRFS\t\t\t0x40\t\t\t\t// DAC Reference Select\n"
  "#define DAC_C0_DACTRGSEL\t\t0x20\t\t\t\t// DAC Trigger Select\n"
  "#define DAC_C0_DACSWTRG\t\t\t0x10\t\t\t\t// DAC Software Trigger\n"
  "#define DAC_C0_LPEN\t\t\t0x08\t\t\t\t// DAC Low Power Control\n"
  "#define DAC_C0_DACBWIEN\t\t\t0x04\t\t\t\t// DAC Buffer Watermark Interrupt Enable\n"
  "#define DAC_C0_DACBTIEN\t\t\t0x02\t\t\t\t// DAC Buffer Read Pointer Top Flag Interrupt Enable\n"
  "#define DAC_C0_DACBBIEN\t\t\t0x01\t\t\t\t// DAC Buffer Read Pointer Bottom Flag Interrupt Enable\n"
  "#define DAC0_C1\t\t\t*(volatile uint8_t  *)0x400CC022 // DAC Control Register 1 \n"
  "#define DAC_C1_DMAEN\t\t\t0x80\t\t\t\t// DMA Enable Select\n"
  "#define DAC_C1_DACBFWM(n)\t\t(((n) & 3) << 3)\t\t// DAC Buffer Watermark Select\n"
  "#define DAC_C1_DACBFMD(n)\t\t(((n) & 3) << 0)\t\t// DAC Buffer Work Mode Select\n"
  "#define DAC_C1_DACBFEN\t\t\t0x00\t\t\t\t// DAC Buffer Enable\n"
  "\n"
  "#define DAC0_C2\t\t\t*(volatile uint8_t  *)0x400CC023 // DAC Control Register 2 \n"
  "#define DAC_C2_DACBFRP(n)\t\t(((n) & 15) << 4)\t\t// DAC Buffer Read Pointer\n"
  "#define DAC_C2_DACBFUP(n)\t\t(((n) & 15) << 0)\t\t// DAC Buffer Upper Limit\n"
  "\n"
  "\n"
  "//#define MCG_C2_RANGE0(n)\t\t(uint8_t)(((n) & 0x03) << 4)\t// Frequency Range Select, Selects the frequency range for the crystal oscillator\n"
  "//#define MCG_C2_LOCRE0\t\t\t(uint8_t)0x80\t\t\t// Loss of Clock Reset Enable, Determines whether an interrupt or a reset request is made following a loss o"
  "f OSC0 \n"
  "\n"
  "// Chapter 32: Comparator (CMP)\n"
  "#define CMP0_CR0\t\t*(volatile uint8_t  *)0x40073000 // CMP Control Register 0\n"
  "#define CMP0_CR1\t\t*(volatile uint8_t  *)0x40073001 // CMP Control Register 1\n"
  "#define CMP0_FPR\t\t*(volatile uint8_t  *)0x40073002 // CMP Filter Period Register\n"
  "#define CMP0_SCR\t\t*(volatile uint8_t  *)0x40073003 // CMP Status and Control Register\n"
  "#define CMP0_DACCR\t\t*(volatile uint8_t  *)0x40073004 // DAC Control Register\n"
  "#define CMP0_MUXCR\t\t*(volatile uint8_t  *)0x40073005 // MUX Control Register\n"
  "#define CMP1_CR0\t\t*(volatile uint8_t  *)0x40073008 // CMP Control Register 0\n"
  "#define CMP1_CR1\t\t*(volatile uint8_t  *)0x40073009 // CMP Control Register 1\n"
  "#define CMP1_FPR\t\t*(volatile uint8_t  *)0x4007300A // CMP Filter Period Register\n"
  "#define CMP1_SCR\t\t*(volatile uint8_t  *)0x4007300B // CMP Status and Control Register\n"
  "#define CMP1_DACCR\t\t*(volatile uint8_t  *)0x4007300C // DAC Control Register\n"
  "#define CMP1_MUXCR\t\t*(volatile uint8_t  *)0x4007300D // MUX Control Register\n"
  "\n"
  "// Chapter 33: Voltage Reference (VREFV1)\n"
  "#define VREF_TRM\t\t*(volatile uint8_t  *)0x40074000 // VREF Trim Register\n"
  "#define VREF_SC\t\t\t*(volatile uint8_t  *)0x40074001 // VREF Status and Control Register\n"
  "\n"
  "// Chapter 34: Programmable Delay Block (PDB)\n"
  "#define PDB0_SC\t\t\t*(volatile uint32_t *)0x40036000 // Status and Control Register\n"
  "#define PDB_SC_LDMOD(n)\t\t\t(((n) & 3) << 18)\t// Load Mode Select\n"
  "#define PDB_SC_PDBEIE\t\t\t0x00020000\t\t// Sequence Error Interrupt Enable\n"
  "#define PDB_SC_SWTRIG\t\t\t0x00010000\t\t// Software Trigger\n"
  "#define PDB_SC_DMAEN\t\t\t0x00008000\t\t// DMA Enable\n"
  "#define PDB_SC_PRESCALER(n)\t\t(((n) & 7) << 12)\t// Prescaler Divider Select\n"
  "#define PDB_SC_TRGSEL(n)\t\t(((n) & 15) << 8)\t// Trigger Input Source Select\n"
  "#define PDB_SC_PDBEN\t\t\t0x00000080\t\t// PDB Enable\n"
  "#define PDB_SC_PDBIF\t\t\t0x00000040\t\t// PDB Interrupt Flag\n"
  "#define PDB_SC_PDBIE\t\t\t0x00000020\t\t// PDB Interrupt Enable.\n"
  "#define PDB_SC_MULT(n)\t\t\t(((n) & 3) << 2)\t// Multiplication Factor\n"
  "#define PDB_SC_CONT\t\t\t0x00000002\t\t// Continuous Mode Enable\n"
  "#define PDB_SC_LDOK\t\t\t0x00000001\t\t// Load OK\n"
  "#define PDB0_MOD\t\t*(volatile uint32_t *)0x40036004 // Modulus Register\n"
  "#define PDB0_CNT\t\t*(volatile uint32_t *)0x40036008 // Counter Register\n"
  "#define PDB0_IDLY\t\t*(volatile uint32_t *)0x4003600C // Interrupt Delay Register\n"
  "#define PDB0_CH0C1\t\t*(volatile uint32_t *)0x40036010 // Channel n Control Register 1\n"
  "#define PDB0_CH0S\t\t*(volatile uint32_t *)0x40036014 // Channel n Status Register\n"
  "#define PDB0_CH0DLY0\t\t*(volatile uint32_t *)0x40036018 // Channel n Delay 0 Register\n"
  "#define PDB0_CH0DLY1\t\t*(volatile uint32_t *)0x4003601C // Channel n Delay 1 Register\n"
  "#define PDB0_POEN\t\t*(volatile uint32_t *)0x40036190 // Pulse-Out n Enable Register\n"
  "#define PDB0_PO0DLY\t\t*(volatile uint32_t *)0x40036194 // Pulse-Out n Delay Register\n"
  "#define PDB0_PO1DLY\t\t*(volatile uint32_t *)0x40036198 // Pulse-Out n Delay Register\n"
  "\n"
  "// Chapter 35: FlexTimer Module (FTM)\n"
  "#define FTM0_SC\t\t\t*(volatile uint32_t *)0x40038000 // Status And Control\n"
  "#define FTM_SC_TOF\t\t\t0x80\t\t\t\t// Timer Overflow Flag\n"
  "#define FTM_SC_TOIE\t\t\t0x40\t\t\t\t// Timer Overflow Interrupt Enable\n"
  "#define FTM_SC_CPWMS\t\t\t0x20\t\t\t\t// Center-Aligned PWM Select\n"
  "#define FTM_SC_CLKS(n)\t\t\t(((n) & 3) << 3)\t\t// Clock Source Selection\n"
  "#define FTM_SC_PS(n)\t\t\t(((n) & 7) << 0)\t\t// Prescale Factor Selection\n"
  "#define FTM0_CNT\t\t*(volatile uint32_t *)0x40038004 // Counter\n"
  "#define FTM0_MOD\t\t*(volatile uint32_t *)0x40038008 // Modulo\n"
  "#define FTM0_C0SC\t\t*(volatile uint32_t *)0x4003800C // Channel 0 Status And Control\n"
  "#define FTM0_C0V\t\t*(volatile uint32_t *)0x40038010 // Channel 0 Value\n"
  "#define FTM0_C1SC\t\t*(volatile uint32_t *)0x40038014 // Channel 1 Status And Control\n"
  "#define FTM0_C1V\t\t*(volatile uint32_t *)0x40038018 // Channel 1 Value\n"
  "#define FTM0_C2SC\t\t*(volatile uint32_t *)0x4003801C // Channel 2 Status And Control\n"
  "#define FTM0_C2V\t\t*(volatile uint32_t *)0x40038020 // Channel 2 Value\n"
  "#define FTM0_C3SC\t\t*(volatile uint32_t *)0x40038024 // Channel 3 Status And Control\n"
  "#define FTM0_C3V\t\t*(volatile uint32_t *)0x40038028 // Channel 3 Value\n"
  "#define FTM0_C4SC\t\t*(volatile uint32_t *)0x4003802C // Channel 4 Status And Control\n"
  "#define FTM0_C4V\t\t*(volatile uint32_t *)0x40038030 // Channel 4 Value\n"
  "#define FTM0_C5SC\t\t*(volatile uint32_t *)0x40038034 // Channel 5 Status And Control\n"
  "#define FTM0_C5V\t\t*(volatile uint32_t *)0x40038038 // Channel 5 Value\n"
  "#define FTM0_C6SC\t\t*(volatile uint32_t *)0x4003803C // Channel 6 Status And Control\n"
  "#define FTM0_C6V\t\t*(volatile uint32_t *)0x40038040 // Channel 6 Value\n"
  "#define FTM0_C7SC\t\t*(volatile uint32_t *)0x40038044 // Channel 7 Status And Control\n"
  "#define FTM0_C7V\t\t*(volatile uint32_t *)0x40038048 // Channel 7 Value\n"
  "#define FTM0_CNTIN\t\t*(volatile uint32_t *)0x4003804C // Counter Initial Value\n"
  "#define FTM0_STATUS\t\t*(volatile uint32_t *)0x40038050 // Capture And Compare Status\n"
  "#define FTM0_MODE\t\t*(volatile uint32_t *)0x40038054 // Features Mode Selection\n"
  "#define FTM_MODE_FAULTIE\t\t0x80\t\t\t\t// Fault Interrupt Enable\n"
  "#define FTM_MODE_FAULTM(n)\t\t(((n) & 3) << 5)\t\t// Fault Control Mode\n"
  "#define FTM_MODE_CAPTEST\t\t0x10\t\t\t\t// Capture Test Mode Enable\n"
  "#define FTM_MODE_PWMSYNC\t\t0x08\t\t\t\t// PWM Synchronization Mode\n"
  "#define FTM_MODE_WPDIS\t\t\t0x04\t\t\t\t// Write Protection Disable\n"
  "#define FTM_MODE_INIT\t\t\t0x02\t\t\t\t// Initialize The Channels Output\n"
  "#define FTM_MODE_FTMEN\t\t\t0x01\t\t\t\t// FTM Enable\n"
  "#define FTM0_SYNC\t\t*(volatile uint32_t *)0x40038058 // Synchronization\n"
  "#define FTM_SYNC_SWSYNC\t\t\t0x80\t\t\t\t// \n"
  "#define FTM_SYNC_TRIG2\t\t\t0x40\t\t\t\t// \n"
  "#define FTM_SYNC_TRIG1\t\t\t0x20\t\t\t\t// \n"
  "#define FTM_SYNC_TRIG0\t\t\t0x10\t\t\t\t// \n"
  "#define FTM_SYNC_SYNCHOM\t\t0x08\t\t\t\t// \n"
  "#define FTM_SYNC_REINIT\t\t\t0x04\t\t\t\t// \n"
  "#define FTM_SYNC_CNTMAX\t\t\t0x02\t\t\t\t// \n"
  "#define FTM_SYNC_CNTMIN\t\t\t0x01\t\t\t\t// \n"
  "#define FTM0_OUTINIT\t\t*(volatile uint32_t *)0x4003805C // Initial State For Channels Output\n"
  "#define FTM0_OUTMASK\t\t*(volatile uint32_t *)0x40038060 // Output Mask\n"
  "#define FTM0_COMBINE\t\t*(volatile uint32_t *)0x40038064 // Function For Linked Channels\n"
  "#define FTM0_DEADTIME\t\t*(volatile uint32_t *)0x40038068 // Deadtime Insertion Control\n"
  "#define FTM0_EXTTRIG\t\t*(volatile uint32_t *)0x4003806C // FTM External Trigger\n"
  "#define FTM0_POL\t\t*(volatile uint32_t *)0x40038070 // Channels Polarity\n"
  "#define FTM0_FMS\t\t*(volatile uint32_t *)0x40038074 // Fault Mode Status\n"
  "#define FTM0_FILTER\t\t*(volatile uint32_t *)0x40038078 // Input Capture Filter Control\n"
  "#define FTM0_FLTCTRL\t\t*(volatile uint32_t *)0x4003807C // Fault Control\n"
  "#define FTM0_QDCTRL\t\t*(volatile uint32_t *)0x40038080 // Quadrature Decoder Control And Status\n"
  "#define FTM0_CONF\t\t*(volatile uint32_t *)0x40038084 // Configuration\n"
  "#define FTM0_FLTPOL\t\t*(volatile uint32_t *)0x40038088 // FTM Fault Input Polarity\n"
  "#define FTM0_SYNCONF\t\t*(volatile uint32_t *)0x4003808C // Synchronization Configuration\n"
  "#define FTM0_INVCTRL\t\t*(volatile uint32_t *)0x40038090 // FTM Inverting Control\n"
  "#define FTM0_SWOCTRL\t\t*(volatile uint32_t *)0x40038094 // FTM Software Output Control\n"
  "#define FTM0_PWMLOAD\t\t*(volatile uint32_t *)0x40038098 // FTM PWM Load\n"
  "#define FTM1_SC\t\t\t*(volatile uint32_t *)0x40039000 // Status And Control\n"
  "#define FTM1_CNT\t\t*(volatile uint32_t *)0x40039004 // Counter\n"
  "#define FTM1_MOD\t\t*(volatile uint32_t *)0x40039008 // Modulo\n"
  "#define FTM1_C0SC\t\t*(volatile uint32_t *)0x4003900C // Channel 0 Status And Control\n"
  "#define FTM1_C0V\t\t*(volatile uint32_t *)0x40039010 // Channel 0 Value\n"
  "#define FTM1_C1SC\t\t*(volatile uint32_t *)0x40039014 // Channel 1 Status And Control\n"
  "#define FTM1_C1V\t\t*(volatile uint32_t *)0x40039018 // Channel 1 Value\n"
  "#define FTM1_CNTIN\t\t*(volatile uint32_t *)0x4003904C // Counter Initial Value\n"
  "#define FTM1_STATUS\t\t*(volatile uint32_t *)0x40039050 // Capture And Compare Status\n"
  "#define FTM1_MODE\t\t*(volatile uint32_t *)0x40039054 // Features Mode Selection\n"
  "#define FTM1_SYNC\t\t*(volatile uint32_t *)0x40039058 // Synchronization\n"
  "#define FTM1_OUTINIT\t\t*(volatile uint32_t *)0x4003905C // Initial State For Channels Output\n"
  "#define FTM1_OUTMASK\t\t*(volatile uint32_t *)0x40039060 // Output Mask\n"
  "#define FTM1_COMBINE\t\t*(volatile uint32_t *)0x40039064 // Function For Linked Channels\n"
  "#define FTM1_DEADTIME\t\t*(volatile uint32_t *)0x40039068 // Deadtime Insertion Control\n"
  "#define FTM1_EXTTRIG\t\t*(volatile uint32_t *)0x4003906C // FTM External Trigger\n"
  "#define FTM1_POL\t\t*(volatile uint32_t *)0x40039070 // Channels Polarity\n"
  "#define FTM1_FMS\t\t*(volatile uint32_t *)0x40039074 // Fault Mode Status\n"
  "#define FTM1_FILTER\t\t*(volatile uint32_t *)0x40039078 // Input Capture Filter Control\n"
  "#define FTM1_FLTCTRL\t\t*(volatile uint32_t *)0x4003907C // Fault Control\n"
  "#define FTM1_QDCTRL\t\t*(volatile uint32_t *)0x40039080 // Quadrature Decoder Control And Status\n"
  "#define FTM1_CONF\t\t*(volatile uint32_t *)0x40039084 // Configuration\n"
  "#define FTM1_FLTPOL\t\t*(volatile uint32_t *)0x40039088 // FTM Fault Input Polarity\n"
  "#define FTM1_SYNCONF\t\t*(volatile uint32_t *)0x4003908C // Synchronization Configuration\n"
  "#define FTM1_INVCTRL\t\t*(volatile uint32_t *)0x40039090 // FTM Inverting Control\n"
  "#define FTM1_SWOCTRL\t\t*(volatile uint32_t *)0x40039094 // FTM Software Output Control\n"
  "#define FTM1_PWMLOAD\t\t*(volatile uint32_t *)0x40039098 // FTM PWM Load\n"
  "#define FTM2_SC\t\t\t*(volatile uint32_t *)0x400B8000 // Status And Control\n"
  "#define FTM2_CNT\t\t*(volatile uint32_t *)0x400B8004 // Counter\n"
  "#define FTM2_MOD\t\t*(volatile uint32_t *)0x400B8008 // Modulo\n"
  "#define FTM2_C0SC\t\t*(volatile uint32_t *)0x400B800C // Channel 0 Status And Control\n"
  "#define FTM2_C0V\t\t*(volatile uint32_t *)0x400B8010 // Channel 0 Value\n"
  "#define FTM2_C1SC\t\t*(volatile uint32_t *)0x400B8014 // Channel 1 Status And Control\n"
  "#define FTM2_C1V\t\t*(volatile uint32_t *)0x400B8018 // Channel 1 Value\n"
  "#define FTM2_CNTIN\t\t*(volatile uint32_t *)0x400B804C // Counter Initial Value\n"
  "#define FTM2_STATUS\t\t*(volatile uint32_t *)0x400B8050 // Capture And Compare Status\n"
  "#define FTM2_MODE\t\t*(volatile uint32_t *)0x400B8054 // Features Mode Selection\n"
  "#define FTM2_SYNC\t\t*(volatile uint32_t *)0x400B8058 // Synchronization\n"
  "#define FTM2_OUTINIT\t\t*(volatile uint32_t *)0x400B805C // Initial State For Channels Output\n"
  "#define FTM2_OUTMASK\t\t*(volatile uint32_t *)0x400B8060 // Output Mask\n"
  "#define FTM2_COMBINE\t\t*(volatile uint32_t *)0x400B8064 // Function For Linked Channels\n"
  "#define FTM2_DEADTIME\t\t*(volatile uint32_t *)0x400B8068 // Deadtime Insertion Control\n"
  "#define FTM2_EXTTRIG\t\t*(volatile uint32_t *)0x400B806C // FTM External Trigger\n"
  "#define FTM2_POL\t\t*(volatile uint32_t *)0x400B8070 // Channels Polarity\n"
  "#define FTM2_FMS\t\t*(volatile uint32_t *)0x400B8074 // Fault Mode Status\n"
  "#define FTM2_FILTER\t\t*(volatile uint32_t *)0x400B8078 // Input Capture Filter Control\n"
  "#define FTM2_FLTCTRL\t\t*(volatile uint32_t *)0x400B807C // Fault Control\n"
  "#define FTM2_QDCTRL\t\t*(volatile uint32_t *)0x400B8080 // Quadrature Decoder Control And Status\n"
  "#define FTM2_CONF\t\t*(volatile uint32_t *)0x400B8084 // Configuration\n"
  "#define FTM2_FLTPOL\t\t*(volatile uint32_t *)0x400B8088 // FTM Fault Input Polarity\n"
  "#define FTM2_SYNCONF\t\t*(volatile uint32_t *)0x400B808C // Synchronization Configuration\n"
  "#define FTM2_INVCTRL\t\t*(volatile uint32_t *)0x400B8090 // FTM Inverting Control\n"
  "#define FTM2_SWOCTRL\t\t*(volatile uint32_t *)0x400B8094 // FTM Software Output Control\n"
  "#define FTM2_PWMLOAD\t\t*(volatile uint32_t *)0x400B8098 // FTM PWM Load\n"
  "\n"
  "// Chapter 36: Periodic Interrupt Timer (PIT)\n"
  "#define PIT_MCR\t\t\t*(volatile uint32_t *)0x40037000 // PIT Module Control Register\n"
  "#define PIT_LDVAL0\t\t*(volatile uint32_t *)0x40037100 // Timer Load Value Register\n"
  "#define PIT_CVAL0\t\t*(volatile uint32_t *)0x40037104 // Current Timer Value Register\n"
  "#define PIT_TCTRL0\t\t*(volatile uint32_t *)0x40037108 // Timer Control Register\n"
  "#define PIT_TFLG0\t\t*(volatile uint32_t *)0x4003710C // Timer Flag Register\n"
  "#define PIT_LDVAL1\t\t*(volatile uint32_t *)0x40037110 // Timer Load Value Register\n"
  "#define PIT_CVAL1\t\t*(volatile uint32_t *)0x40037114 // Current Timer Value Register\n"
  "#define PIT_TCTRL1\t\t*(volatile uint32_t *)0x40037118 // Timer Control Register\n"
  "#define PIT_TFLG1\t\t*(volatile uint32_t *)0x4003711C // Timer Flag Register\n"
  "#define PIT_LDVAL2\t\t*(volatile uint32_t *)0x40037120 // Timer Load Value Register\n"
  "#define PIT_CVAL2\t\t*(volatile uint32_t *)0x40037124 // Current Timer Value Register\n"
  "#define PIT_TCTRL2\t\t*(volatile uint32_t *)0x40037128 // Timer Control Register\n"
  "#define PIT_TFLG2\t\t*(volatile uint32_t *)0x4003712C // Timer Flag Register\n"
  "#define PIT_LDVAL3\t\t*(volatile uint32_t *)0x40037130 // Timer Load Value Register\n"
  "#define PIT_CVAL3\t\t*(volatile uint32_t *)0x40037134 // Current Timer Value Register\n"
  "#define PIT_TCTRL3\t\t*(volatile uint32_t *)0x40037138 // Timer Control Register\n"
  "#define PIT_TFLG3\t\t*(volatile uint32_t *)0x4003713C // Timer Flag Register\n"
  "\n"
  "// Chapter 37: Low-Power Timer (LPTMR)\n"
  "#define LPTMR0_CSR\t\t*(volatile uint32_t *)0x40040000 // Low Power Timer Control Status Register\n"
  "#define LPTMR0_PSR\t\t*(volatile uint32_t *)0x40040004 // Low Power Timer Prescale Register\n"
  "#define LPTMR0_CMR\t\t*(volatile uint32_t *)0x40040008 // Low Power Timer Compare Register\n"
  "#define LPTMR0_CNR\t\t*(volatile uint32_t *)0x4004000C // Low Power Timer Counter Register\n"
  "\n"
  "// Chapter 38: Carrier Modulator Transmitter (CMT)\n"
  "#define CMT_CGH1\t\t*(volatile uint8_t  *)0x40062000 // CMT Carrier Generator High Data Register 1\n"
  "#define CMT_CGL1\t\t*(volatile uint8_t  *)0x40062001 // CMT Carrier Generator Low Data Register 1\n"
  "#define CMT_CGH2\t\t*(volatile uint8_t  *)0x40062002 // CMT Carrier Generator High Data Register 2\n"
  "#define CMT_CGL2\t\t*(volatile uint8_t  *)0x40062003 // CMT Carrier Generator Low Data Register 2\n"
  "#define CMT_OC\t\t\t*(volatile uint8_t  *)0x40062004 // CMT Output Control Register\n"
  "#define CMT_MSC\t\t\t*(volatile uint8_t  *)0x40062005 // CMT Modulator Status and Control Register\n"
  "#define CMT_CMD1\t\t*(volatile uint8_t  *)0x40062006 // CMT Modulator Data Register Mark High\n"
  "#define CMT_CMD2\t\t*(volatile uint8_t  *)0x40062007 // CMT Modulator Data Register Mark Low\n"
  "#define CMT_CMD3\t\t*(volatile uint8_t  *)0x40062008 // CMT Modulator Data Register Space High\n"
  "#define CMT_CMD4\t\t*(volatile uint8_t  *)0x40062009 // CMT Modulator Data Register Space Low\n"
  "#define CMT_PPS\t\t\t*(volatile uint8_t  *)0x4006200A // CMT Primary Prescaler Register\n"
  "#define CMT_DMA\t\t\t*(volatile uint8_t  *)0x4006200B // CMT Direct Memory Access Register\n"
  "\n"
  "// Chapter 39: Real Time Clock (RTC)\n"
  "#define RTC_TSR\t\t\t*(volatile uint32_t *)0x4003D000 // RTC Time Seconds Register\n"
  "#define RTC_TPR\t\t\t*(volatile uint32_t *)0x4003D004 // RTC Time Prescaler Register\n"
  "#define RTC_TAR\t\t\t*(volatile uint32_t *)0x4003D008 // RTC Time Alarm Register\n"
  "#define RTC_TCR\t\t\t*(volatile uint32_t *)0x4003D00C // RTC Time Compensation Register\n"
  "#define RTC_TCR_CIC(n)\t\t\t(((n) & 255) << 24)\t\t// Compensation Interval Counter\n"
  "#define RTC_TCR_TCV(n)\t\t\t(((n) & 255) << 16)\t\t// Time Compensation Value\n"
  "#define RTC_TCR_CIR(n)\t\t\t(((n) & 255) << 8)\t\t// Compensation Interval Register\n"
  "#define RTC_TCR_TCR(n)\t\t\t(((n) & 255) << 0)\t\t// Time Compensation Register\n"
  "#define RTC_CR\t\t\t*(volatile uint32_t *)0x4003D010 // RTC Control Register\n"
  "#define RTC_CR_SC2P\t\t\t(uint32_t)0x00002000\t\t// \n"
  "#define RTC_CR_SC4P\t\t\t(uint32_t)0x00001000\t\t// \n"
  "#define RTC_CR_SC8P\t\t\t(uint32_t)0x00000800\t\t// \n"
  "#define RTC_CR_SC16P\t\t\t(uint32_t)0x00000400\t\t// \n"
  "#define RTC_CR_CLKO\t\t\t(uint32_t)0x00000200\t\t// \n"
  "#define RTC_CR_OSCE\t\t\t(uint32_t)0x00000100\t\t// \n"
  "#define RTC_CR_UM\t\t\t(uint32_t)0x00000008\t\t// \n"
  "#define RTC_CR_SUP\t\t\t(uint32_t)0x00000004\t\t// \n"
  "#define RTC_CR_WPE\t\t\t(uint32_t)0x00000002\t\t// \n"
  "#define RTC_CR_SWR\t\t\t(uint32_t)0x00000001\t\t// \n"
  "#define RTC_SR\t\t\t*(volatile uint32_t *)0x4003D014 // RTC Status Register\n"
  "#define RTC_SR_TCE\t\t\t(uint32_t)0x00000010\t\t// \n"
  "#define RTC_SR_TAF\t\t\t(uint32_t)0x00000004\t\t// \n"
  "#define RTC_SR_TOF\t\t\t(uint32_t)0x00000002\t\t// \n"
  "#define RTC_SR_TIF\t\t\t(uint32_t)0x00000001\t\t// \n"
  "#define RTC_LR\t\t\t*(volatile uint32_t *)0x4003D018 // RTC Lock Register\n"
  "#define RTC_IER\t\t\t*(volatile uint32_t *)0x4003D01C // RTC Interrupt Enable Register\n"
  "#define RTC_WAR\t\t\t*(volatile uint32_t *)0x4003D800 // RTC Write Access Register\n"
  "#define RTC_RAR\t\t\t*(volatile uint32_t *)0x4003D804 // RTC Read Access Register\n"
  "\n"
  "// Chapter 40: Universal Serial Bus OTG Controller (USBOTG)\n"
  "#define USB0_PERID\t\t*(const\t   uint8_t  *)0x40072000 // Peripheral ID register\n"
  "#define USB0_IDCOMP\t\t*(const\t   uint8_t  *)0x40072004 // Peripheral ID Complement register\n"
  "#define USB0_REV\t\t*(const\t   uint8_t  *)0x40072008 // Peripheral Revision register\n"
  "#define USB0_ADDINFO\t\t*(volatile uint8_t  *)0x4007200C // Peripheral Additional Info register\n"
  "#define USB0_OTGISTAT\t\t*(volatile uint8_t  *)0x40072010 // OTG Interrupt Status register\n"
  "#define USB_OTGISTAT_IDCHG\t\t(uint8_t)0x80\t\t\t//\n"
  "#define USB_OTGISTAT_ONEMSEC\t\t(uint8_t)0x40\t\t\t//\n"
  "#define USB_OTGISTAT_LINE_STATE_CHG\t(uint8_t)0x20\t\t\t//\n"
  "#define USB_OTGISTAT_SESSVLDCHG\t\t(uint8_t)0x08\t\t\t//\n"
  "#define USB_OTGISTAT_B_SESS_CHG\t\t(uint8_t)0x04\t\t\t//\n"
  "#define USB_OTGISTAT_AVBUSCHG\t\t(uint8_t)0x01\t\t\t//\n"
  "#define USB0_OTGICR\t\t*(volatile uint8_t  *)0x40072014 // OTG Interrupt Control Register\n"
  "#define USB_OTGICR_IDEN\t\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_OTGICR_ONEMSECEN\t\t(uint8_t)0x40\t\t\t// \n"
  "#define USB_OTGICR_LINESTATEEN\t\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_OTGICR_SESSVLDEN\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_OTGICR_BSESSEN\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_OTGICR_AVBUSEN\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_OTGSTAT\t\t*(volatile uint8_t  *)0x40072018 // OTG Status register\n"
  "#define USB_OTGSTAT_ID\t\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_OTGSTAT_ONEMSECEN\t\t(uint8_t)0x40\t\t\t// \n"
  "#define USB_OTGSTAT_LINESTATESTABLE\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_OTGSTAT_SESS_VLD\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_OTGSTAT_BSESSEND\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_OTGSTAT_AVBUSVLD\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_OTGCTL\t\t*(volatile uint8_t  *)0x4007201C // OTG Control Register\n"
  "#define USB_OTGCTL_DPHIGH\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_OTGCTL_DPLOW\t\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_OTGCTL_DMLOW\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB_OTGCTL_OTGEN\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB0_ISTAT\t\t*(volatile uint8_t  *)0x40072080 // Interrupt Status Register\n"
  "#define USB_ISTAT_STALL\t\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_ISTAT_ATTACH\t\t(uint8_t)0x40\t\t\t// \n"
  "#define USB_ISTAT_RESUME\t\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_ISTAT_SLEEP\t\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB_ISTAT_TOKDNE\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_ISTAT_SOFTOK\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_ISTAT_ERROR\t\t\t(uint8_t)0x02\t\t\t// \n"
  "#define USB_ISTAT_USBRST\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_INTEN\t\t*(volatile uint8_t  *)0x40072084 // Interrupt Enable Register\n"
  "#define USB_INTEN_STALLEN\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_INTEN_ATTACHEN\t\t(uint8_t)0x40\t\t\t// \n"
  "#define USB_INTEN_RESUMEEN\t\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_INTEN_SLEEPEN\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB_INTEN_TOKDNEEN\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_INTEN_SOFTOKEN\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_INTEN_ERROREN\t\t(uint8_t)0x02\t\t\t// \n"
  "#define USB_INTEN_USBRSTEN\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_ERRSTAT\t\t*(volatile uint8_t  *)0x40072088 // Error Interrupt Status Register\n"
  "#define USB_ERRSTAT_BTSERR\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_ERRSTAT_DMAERR\t\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_ERRSTAT_BTOERR\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB_ERRSTAT_DFN8\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_ERRSTAT_CRC16\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_ERRSTAT_CRC5EOF\t\t(uint8_t)0x02\t\t\t// \n"
  "#define USB_ERRSTAT_PIDERR\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_ERREN\t\t*(volatile uint8_t  *)0x4007208C // Error Interrupt Enable Register\n"
  "#define USB_ERREN_BTSERREN\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_ERREN_DMAERREN\t\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_ERREN_BTOERREN\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB_ERREN_DFN8EN\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_ERREN_CRC16EN\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_ERREN_CRC5EOFEN\t\t(uint8_t)0x02\t\t\t// \n"
  "#define USB_ERREN_PIDERREN\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_STAT\t\t*(volatile uint8_t  *)0x40072090 // Status Register\n"
  "#define USB_STAT_TX\t\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_STAT_ODD\t\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_STAT_ENDP(n)\t\t(uint8_t)((n) >> 4)\t\t// \n"
  "#define USB0_CTL\t\t*(volatile uint8_t  *)0x40072094 // Control Register\n"
  "#define USB_CTL_JSTATE\t\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_CTL_SE0\t\t\t(uint8_t)0x40\t\t\t// \n"
  "#define USB_CTL_TXSUSPENDTOKENBUSY\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_CTL_RESET\t\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB_CTL_HOSTMODEEN\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_CTL_RESUME\t\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_CTL_ODDRST\t\t\t(uint8_t)0x02\t\t\t// \n"
  "#define USB_CTL_USBENSOFEN\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_ADDR\t\t*(volatile uint8_t  *)0x40072098 // Address Register\n"
  "#define USB0_BDTPAGE1\t\t*(volatile uint8_t  *)0x4007209C // BDT Page Register 1\n"
  "#define USB0_FRMNUML\t\t*(volatile uint8_t  *)0x400720A0 // Frame Number Register Low\n"
  "#define USB0_FRMNUMH\t\t*(volatile uint8_t  *)0x400720A4 // Frame Number Register High\n"
  "#define USB0_TOKEN\t\t*(volatile uint8_t  *)0x400720A8 // Token Register\n"
  "#define USB0_SOFTHLD\t\t*(volatile uint8_t  *)0x400720AC // SOF Threshold Register\n"
  "#define USB0_BDTPAGE2\t\t*(volatile uint8_t  *)0x400720B0 // BDT Page Register 2\n"
  "#define USB0_BDTPAGE3\t\t*(volatile uint8_t  *)0x400720B4 // BDT Page Register 3\n"
  "#define USB0_ENDPT0\t\t*(volatile uint8_t  *)0x400720C0 // Endpoint Control Register\n"
  "#define USB_ENDPT_HOSTWOHUB\t\t(uint8_t)0x80\t\t\t// host only, enable low speed\n"
  "#define USB_ENDPT_RETRYDIS\t\t(uint8_t)0x40\t\t\t// host only, set to disable NAK retry\n"
  "#define USB_ENDPT_EPCTLDIS\t\t(uint8_t)0x10\t\t\t// 0=control, 1=bulk, interrupt, isync\n"
  "#define USB_ENDPT_EPRXEN\t\t(uint8_t)0x08\t\t\t// enables the endpoint for RX transfers.\n"
  "#define USB_ENDPT_EPTXEN\t\t(uint8_t)0x04\t\t\t// enables the endpoint for TX transfers.\n"
  "#define USB_ENDPT_EPSTALL\t\t(uint8_t)0x02\t\t\t// set to stall endpoint\n"
  "#define USB_ENDPT_EPHSHK\t\t(uint8_t)0x01\t\t\t// enable handshaking during a transaction, generally set unless Isochronous\n"
  "#define USB0_ENDPT1\t\t*(volatile uint8_t  *)0x400720C4 // Endpoint Control Register\n"
  "#define USB0_ENDPT2\t\t*(volatile uint8_t  *)0x400720C8 // Endpoint Control Register\n"
  "#define USB0_ENDPT3\t\t*(volatile uint8_t  *)0x400720CC // Endpoint Control Register\n"
  "#define USB0_ENDPT4\t\t*(volatile uint8_t  *)0x400720D0 // Endpoint Control Register\n"
  "#define USB0_ENDPT5\t\t*(volatile uint8_t  *)0x400720D4 // Endpoint Control Register\n"
  "#define USB0_ENDPT6\t\t*(volatile uint8_t  *)0x400720D8 // Endpoint Control Register\n"
  "#define USB0_ENDPT7\t\t*(volatile uint8_t  *)0x400720DC // Endpoint Control Register\n"
  "#define USB0_ENDPT8\t\t*(volatile uint8_t  *)0x400720E0 // Endpoint Control Register\n"
  "#define USB0_ENDPT9\t\t*(volatile uint8_t  *)0x400720E4 // Endpoint Control Register\n"
  "#define USB0_ENDPT10\t\t*(volatile uint8_t  *)0x400720E8 // Endpoint Control Register\n"
  "#define USB0_ENDPT11\t\t*(volatile uint8_t  *)0x400720EC // Endpoint Control Register\n"
  "#define USB0_ENDPT12\t\t*(volatile uint8_t  *)0x400720F0 // Endpoint Control Register\n"
  "#define USB0_ENDPT13\t\t*(volatile uint8_t  *)0x400720F4 // Endpoint Control Register\n"
  "#define USB0_ENDPT14\t\t*(volatile uint8_t  *)0x400720F8 // Endpoint Control Register\n"
  "#define USB0_ENDPT15\t\t*(volatile uint8_t  *)0x400720FC // Endpoint Control Register\n"
  "#define USB0_USBCTRL\t\t*(volatile uint8_t  *)0x40072100 // USB Control Register\n"
  "#define USB_USBCTRL_SUSP\t\t(uint8_t)0x80\t\t\t// Places the USB transceiver into the suspend state.\n"
  "#define USB_USBCTRL_PDE\t\t\t(uint8_t)0x40\t\t\t// Enables the weak pulldowns on the USB transceiver.\n"
  "#define USB0_OBSERVE\t\t*(volatile uint8_t  *)0x40072104 // USB OTG Observe Register\n"
  "#define USB_OBSERVE_DPPU\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_OBSERVE_DPPD\t\t(uint8_t)0x40\t\t\t// \n"
  "#define USB_OBSERVE_DMPD\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB0_CONTROL\t\t*(volatile uint8_t  *)0x40072108 // USB OTG Control Register\n"
  "#define USB_CONTROL_DPPULLUPNONOTG\t(uint8_t)0x10\t\t\t//  Provides control of the DP PULLUP in the USB OTG module, if USB is configured in non-OTG device"
  " mode.\n"
  "#define USB0_USBTRC0\t\t*(volatile uint8_t  *)0x4007210C // USB Transceiver Control Register 0\n"
  "#define USB_USBTRC_USBRESET\t\t(uint8_t)0x80\t\t\t//\n"
  "#define USB_USBTRC_USBRESMEN\t\t(uint8_t)0x20\t\t\t//\n"
  "#define USB_USBTRC_SYNC_DET\t\t(uint8_t)0x02\t\t\t//\n"
  "#define USB_USBTRC_USB_RESUME_INT\t(uint8_t)0x01\t\t\t//\n"
  "#define USB0_USBFRMADJUST\t*(volatile uint8_t  *)0x40072114 // Frame Adjust Register\n"
  "\n"
  "// Chapter 41: USB Device Charger Detection Module (USBDCD)\n"
  "#define USBDCD_CONTROL\t\t*(volatile uint32_t *)0x40035000 // Control register\n"
  "#define USBDCD_CLOCK\t\t*(volatile uint32_t *)0x40035004 // Clock register\n"
  "#define USBDCD_STATUS\t\t*(volatile uint32_t *)0x40035008 // Status register\n"
  "#define USBDCD_TIMER0\t\t*(volatile uint32_t *)0x40035010 // TIMER0 register\n"
  "#define USBDCD_TIMER1\t\t*(volatile uint32_t *)0x40035014 // TIMER1 register\n"
  "#define USBDCD_TIMER2\t\t*(volatile uint32_t *)0x40035018 // TIMER2 register\n"
  "\n"
  "// Chapter 43: SPI (DSPI)\n"
  "#define SPI0_MCR\t\t*(volatile uint32_t *)0x4002C000 // DSPI Module Configuration Register\n"
  "#define SPI_MCR_MSTR\t\t\t(uint32_t)0x80000000\t\t// Master/Slave Mode Select\n"
  "#define SPI_MCR_CONT_SCKE\t\t(uint32_t)0x40000000\t\t// \n"
  "#define SPI_MCR_DCONF(n)\t\t(((n) & 3) << 28)\t\t// \n"
  "#define SPI_MCR_FRZ\t\t\t(uint32_t)0x08000000\t\t// \n"
  "#define SPI_MCR_MTFE\t\t\t(uint32_t)0x04000000\t\t// \n"
  "#define SPI_MCR_ROOE\t\t\t(uint32_t)0x01000000\t\t// \n"
  "#define SPI_MCR_PCSIS(n)\t\t(((n) & 0x1F) << 16)\t\t//\n"
  "#define SPI_MCR_DOZE\t\t\t(uint32_t)0x00008000\t\t// \n"
  "#define SPI_MCR_MDIS\t\t\t(uint32_t)0x00004000\t\t// \n"
  "#define SPI_MCR_DIS_TXF\t\t\t(uint32_t)0x00002000\t\t// \n"
  "#define SPI_MCR_DIS_RXF\t\t\t(uint32_t)0x00001000\t\t// \n"
  "#define SPI_MCR_CLR_TXF\t\t\t(uint32_t)0x00000800\t\t// \n"
  "#define SPI_MCR_CLR_RXF\t\t\t(uint32_t)0x00000400\t\t// \n"
  "#define SPI_MCR_SMPL_PT(n)\t\t(((n) & 3) << 8)\t\t//\n"
  "#define SPI_MCR_HALT\t\t\t(uint32_t)0x00000001\t\t// \n"
  "#define SPI0_TCR\t\t*(volatile uint32_t *)0x4002C008 // DSPI Transfer Count Register\n"
  "#define SPI0_CTAR0\t\t*(volatile uint32_t *)0x4002C00C // DSPI Clock and Transfer Attributes Register, In Master Mode\n"
  "#define SPI_CTAR_DBR\t\t\t(uint32_t)0x80000000\t\t// Double Baud Rate\n"
  "#define SPI_CTAR_FMSZ(n)\t\t(((n) & 15) << 27)\t\t// Frame Size (+1)\n"
  "#define SPI_CTAR_CPOL\t\t\t(uint32_t)0x04000000\t\t// Clock Polarity\n"
  "#define SPI_CTAR_CPHA\t\t\t(uint32_t)0x02000000\t\t// Clock Phase\n"
  "#define SPI_CTAR_LSBFE\t\t\t(uint32_t)0x01000000\t\t// LSB First\n"
  "#define SPI_CTAR_PCSSCK(n)\t\t(((n) & 3) << 22)\t\t// PCS to SCK Delay Prescaler\n"
  "#define SPI_CTAR_PASC(n)\t\t(((n) & 3) << 20)\t\t// After SCK Delay Prescaler\n"
  "#define SPI_CTAR_PDT(n)\t\t\t(((n) & 3) << 18)\t\t// Delay after Transfer Prescaler\n"
  "#define SPI_CTAR_PBR(n)\t\t\t(((n) & 3) << 16)\t\t// Baud Rate Prescaler\n"
  "#define SPI_CTAR_CSSCK(n)\t\t(((n) & 15) << 12)\t\t// PCS to SCK Delay Scaler\n"
  "#define SPI_CTAR_ASC(n)\t\t\t(((n) & 15) << 8)\t\t// After SCK Delay Scaler\n"
  "#define SPI_CTAR_DT(n)\t\t\t(((n) & 15) << 4)\t\t// Delay After Transfer Scaler\n"
  "#define SPI_CTAR_BR(n)\t\t\t(((n) & 15) << 0)\t\t// Baud Rate Scaler\n"
  "#define SPI0_CTAR0_SLAVE\t*(volatile uint32_t *)0x4002C00C // DSPI Clock and Transfer Attributes Register, In Slave Mode\n"
  "#define SPI0_CTAR1\t\t*(volatile uint32_t *)0x4002C010 // DSPI Clock and Transfer Attributes Register, In Master Mode\n"
  "#define SPI0_SR\t\t\t*(volatile uint32_t *)0x4002C02C // DSPI Status Register\n"
  "#define SPI_SR_TCF\t\t\t(uint32_t)0x80000000\t\t// Transfer Complete Flag\n"
  "#define SPI_SR_TXRXS\t\t\t(uint32_t)0x40000000\t\t// TX and RX Status\n"
  "#define SPI_SR_EOQF\t\t\t(uint32_t)0x10000000\t\t// End of Queue Flag\n"
  "#define SPI_SR_TFUF\t\t\t(uint32_t)0x08000000\t\t// Transmit FIFO Underflow Flag\n"
  "#define SPI_SR_TFFF\t\t\t(uint32_t)0x02000000\t\t// Transmit FIFO Fill Flag\n"
  "#define SPI_SR_RFOF\t\t\t(uint32_t)0x00080000\t\t// Receive FIFO Overflow Flag\n"
  "#define SPI_SR_RFDF\t\t\t(uint32_t)0x00020000\t\t// Receive FIFO Drain Flag\n"
  "#define SPI0_RSER\t\t*(volatile uint32_t *)0x4002C030 // DSPI DMA/Interrupt Request Select and Enable Register\n"
  "#define SPI_RSER_TCF_RE\t\t\t(uint32_t)0x80000000\t\t// Transmission Complete Request Enable\n"
  "#define SPI_RSER_EOQF_RE\t\t(uint32_t)0x10000000\t\t// DSPI Finished Request Request Enable\n"
  "#define SPI_RSER_TFUF_RE\t\t(uint32_t)0x08000000\t\t// Transmit FIFO Underflow Request Enable\n"
  "#define SPI_RSER_TFFF_RE\t\t(uint32_t)0x02000000\t\t// Transmit FIFO Fill Request Enable\n"
  "#define SPI_RSER_TFFF_DIRS\t\t(uint32_t)0x01000000\t\t// Transmit FIFO FIll Dma or Interrupt Request Select\n"
  "#define SPI_RSER_RFOF_RE\t\t(uint32_t)0x00080000\t\t// Receive FIFO Overflow Request Enable\n"
  "#define SPI_RSER_RFDF_RE\t\t(uint32_t)0x00020000\t\t// Receive FIFO Drain Request Enable\n"
  "#define SPI_RSER_RFDF_DIRS\t\t(uint32_t)0x00010000\t\t// Receive FIFO Drain DMA or Interrupt Request Select\n"
  "#define SPI0_PUSHR\t\t*(volatile uint32_t *)0x4002C034 // DSPI PUSH TX FIFO Register In Master Mode\n"
  "#define SPI_PUSHR_CONT\t\t\t(uint32_t)0x80000000\t\t// \n"
  "#define SPI_PUSHR_CTAS(n)\t\t(((n) & 7) << 28)\t\t// \n"
  "#define SPI_PUSHR_EOQ\t\t\t(uint32_t)0x08000000\t\t// \n"
  "#define SPI_PUSHR_CTCNT\t\t\t(uint32_t)0x04000000\t\t// \n"
  "#define SPI_PUSHR_PCS(n)\t\t(((n) & 31) << 16)\t\t//\n"
  "#define SPI0_PUSHR_SLAVE\t*(volatile uint32_t *)0x4002C034 // DSPI PUSH TX FIFO Register In Slave Mode\n"
  "#define SPI0_POPR\t\t*(volatile uint32_t *)0x4002C038 // DSPI POP RX FIFO Register\n"
  "#define SPI0_TXFR0\t\t*(volatile uint32_t *)0x4002C03C // DSPI Transmit FIFO Registers\n"
  "#define SPI0_TXFR1\t\t*(volatile uint32_t *)0x4002C040 // DSPI Transmit FIFO Registers\n"
  "#define SPI0_TXFR2\t\t*(volatile uint32_t *)0x4002C044 // DSPI Transmit FIFO Registers\n"
  "#define SPI0_TXFR3\t\t*(volatile uint32_t *)0x4002C048 // DSPI Transmit FIFO Registers\n"
  "#define SPI0_RXFR0\t\t*(volatile uint32_t *)0x4002C07C // DSPI Receive FIFO Registers\n"
  "#define SPI0_RXFR1\t\t*(volatile uint32_t *)0x4002C080 // DSPI Receive FIFO Registers\n"
  "#define SPI0_RXFR2\t\t*(volatile uint32_t *)0x4002C084 // DSPI Receive FIFO Registers\n"
  "#define SPI0_RXFR3\t\t*(volatile uint32_t *)0x4002C088 // DSPI Receive FIFO Registers\n"
  "typedef struct {\n"
  "\tvolatile uint32_t\tMCR;\t// 0\n"
  "\tvolatile uint32_t\tunused1;// 4\n"
  "\tvolatile uint32_t\tTCR;\t// 8\n"
  "\tvolatile uint32_t\tCTAR0;\t// c\n"
  "\tvolatile uint32_t\tCTAR1;\t// 10\n"
  "\tvolatile uint32_t\tCTAR2;\t// 14\n"
  "\tvolatile uint32_t\tCTAR3;\t// 18\n"
  "\tvolatile uint32_t\tCTAR4;\t// 1c\n"
  "\tvolatile uint32_t\tCTAR5;\t// 20\n"
  "\tvolatile uint32_t\tCTAR6;\t// 24\n"
  "\tvolatile uint32_t\tCTAR7;\t// 28\n"
  "\tvolatile uint32_t\tSR;\t// 2c\n"
  "\tvolatile uint32_t\tRSER;\t// 30\n"
  "\tvolatile uint32_t\tPUSHR;\t// 34\n"
  "\tvolatile uint32_t\tPOPR;\t// 38\n"
  "\tvolatile uint32_t\tTXFR[16]; // 3c\n"
  "\tvolatile uint32_t\tRXFR[16]; // 7c\n"
  "} SPI_t;\n"
  "#define SPI0\t\t(*(SPI_t *)0x4002C000)\n"
  "\n"
  "// Chapter 44: Inter-Integrated Circuit (I2C)\n"
  "#define I2C0_A1\t\t\t*(volatile uint8_t  *)0x40066000 // I2C Address Register 1\n"
  "#define I2C0_F\t\t\t*(volatile uint8_t  *)0x40066001 // I2C Frequency Divider register\n"
  "#define I2C0_C1\t\t\t*(volatile uint8_t  *)0x40066002 // I2C Control Register 1\n"
  "#define I2C_C1_IICEN\t\t\t(uint8_t)0x80\t\t\t// I2C Enable\n"
  "#define I2C_C1_IICIE\t\t\t(uint8_t)0x40\t\t\t// I2C Interrupt Enable\n"
  "#define I2C_C1_MST\t\t\t(uint8_t)0x20\t\t\t// Master Mode Select\n"
  "#define I2C_C1_TX\t\t\t(uint8_t)0x10\t\t\t// Transmit Mode Select\n"
  "#define I2C_C1_TXAK\t\t\t(uint8_t)0x08\t\t\t// Transmit Acknowledge Enable\n"
  "#define I2C_C1_RSTA\t\t\t(uint8_t)0x04\t\t\t// Repeat START\n"
  "#define I2C_C1_WUEN\t\t\t(uint8_t)0x02\t\t\t// Wakeup Enable\n"
  "#define I2C_C1_DMAEN\t\t\t(uint8_t)0x01\t\t\t// DMA Enable\n"
  "#define I2C0_S\t\t\t*(volatile uint8_t  *)0x40066003 // I2C Status register\n"
  "#define I2C_S_TCF\t\t\t(uint8_t)0x80\t\t\t// Transfer Complete Flag\n"
  "#define I2C_S_IAAS\t\t\t(uint8_t)0x40\t\t\t// Addressed As A Slave\n"
  "#define I2C_S_BUSY\t\t\t(uint8_t)0x20\t\t\t// Bus Busy\n"
  "#define I2C_S_ARBL\t\t\t(uint8_t)0x10\t\t\t// Arbitration Lost\n"
  "#define I2C_S_RAM\t\t\t(uint8_t)0x08\t\t\t// Range Address Match\n"
  "#define I2C_S_SRW\t\t\t(uint8_t)0x04\t\t\t// Slave Read/Write\n"
  "#define I2C_S_IICIF\t\t\t(uint8_t)0x02\t\t\t// Interrupt Flag\n"
  "#define I2C_S_RXAK\t\t\t(uint8_t)0x01\t\t\t// Receive Acknowledge\n"
  "#define I2C0_D\t\t\t*(volatile uint8_t  *)0x40066004 // I2C Data I/O register\n"
  "#define I2C0_C2\t\t\t*(volatile uint8_t  *)0x40066005 // I2C Control Register 2\n"
  "#define I2C_C2_GCAEN\t\t\t(uint8_t)0x80\t\t\t// General Call Address Enable\n"
  "#define I2C_C2_ADEXT\t\t\t(uint8_t)0x40\t\t\t// Address Extension\n"
  "#define I2C_C2_HDRS\t\t\t(uint8_t)0x20\t\t\t// High Drive Select\n"
  "#define I2C_C2_SBRC\t\t\t(uint8_t)0x10\t\t\t// Slave Baud Rate Control\n"
  "#define I2C_C2_RMEN\t\t\t(uint8_t)0x08\t\t\t// Range Address Matching Enable\n"
  "#define I2C_C2_AD(n)\t\t\t((n) & 7)\t\t\t// Slave Address, upper 3 bits\n"
  "#define I2C0_FLT\t\t*(volatile uint8_t  *)0x40066006 // I2C Programmable Input Glitch Filter register\n"
  "#define I2C0_RA\t\t\t*(volatile uint8_t  *)0x40066007 // I2C Range Address register\n"
  "#define I2C0_SMB\t\t*(volatile uint8_t  *)0x40066008 // I2C SMBus Control and Status register\n"
  "#define I2C0_A2\t\t\t*(volatile uint8_t  *)0x40066009 // I2C Address Register 2\n"
  "#define I2C0_SLTH\t\t*(volatile uint8_t  *)0x4006600A // I2C SCL Low Timeout Register High\n"
  "#define I2C0_SLTL\t\t*(volatile uint8_t  *)0x4006600B // I2C SCL Low Timeout Register Low\n"
  "\n"
  "#define I2C1_A1\t\t\t*(volatile uint8_t  *)0x40067000 // I2C Address Register 1\n"
  "#define I2C1_F\t\t\t*(volatile uint8_t  *)0x40067001 // I2C Frequency Divider register\n"
  "#define I2C1_C1\t\t\t*(volatile uint8_t  *)0x40067002 // I2C Control Register 1\n"
  "#define I2C1_S\t\t\t*(volatile uint8_t  *)0x40067003 // I2C Status register\n"
  "#define I2C1_D\t\t\t*(volatile uint8_t  *)0x40067004 // I2C Data I/O register\n"
  "#define I2C1_C2\t\t\t*(volatile uint8_t  *)0x40067005 // I2C Control Register 2\n"
  "#define I2C1_FLT\t\t*(volatile uint8_t  *)0x40067006 // I2C Programmable Input Glitch Filter register\n"
  "#define I2C1_RA\t\t\t*(volatile uint8_t  *)0x40067007 // I2C Range Address register\n"
  "#define I2C1_SMB\t\t*(volatile uint8_t  *)0x40067008 // I2C SMBus Control and Status register\n"
  "#define I2C1_A2\t\t\t*(volatile uint8_t  *)0x40067009 // I2C Address Register 2\n"
  "#define I2C1_SLTH\t\t*(volatile uint8_t  *)0x4006700A // I2C SCL Low Timeout Register High\n"
  "#define I2C1_SLTL\t\t*(volatile uint8_t  *)0x4006700B // I2C SCL Low Timeout Register Low\n"
  "\n"
  "// Chapter 45: Universal Asynchronous Receiver/Transmitter (UART)\n"
  "#define UART0_BDH\t\t*(volatile uint8_t  *)0x4006A000 // UART Baud Rate Registers: High\n"
  "#define UART0_BDL\t\t*(volatile uint8_t  *)0x4006A001 // UART Baud Rate Registers: Low\n"
  "#define UART0_C1\t\t*(volatile uint8_t  *)0x4006A002 // UART Control Register 1\n"
  "#define UART_C1_LOOPS\t\t\t(uint8_t)0x80\t\t\t// When LOOPS is set, the RxD pin is disconnected from the UART and the transmitter output is internally conne"
  "cted to the receiver input\n"
  "#define UART_C1_UARTSWAI\t\t(uint8_t)0x40\t\t\t// UART Stops in Wait Mode\n"
  "#define UART_C1_RSRC\t\t\t(uint8_t)0x20\t\t\t// When LOOPS is set, the RSRC field determines the source for the receiver shift register input\n"
  "#define UART_C1_M\t\t\t(uint8_t)0x10\t\t\t// 9-bit or 8-bit Mode Select\n"
  "#define UART_C1_WAKE\t\t\t(uint8_t)0x08\t\t\t// Determines which condition wakes the UART\n"
  "#define UART_C1_ILT\t\t\t(uint8_t)0x04\t\t\t// Idle Line Type Select\n"
  "#define UART_C1_PE\t\t\t(uint8_t)0x02\t\t\t// Parity Enable\n"
  "#define UART_C1_PT\t\t\t(uint8_t)0x01\t\t\t// Parity Type, 0=even, 1=odd\n"
  "#define UART0_C2\t\t*(volatile uint8_t  *)0x4006A003 // UART Control Register 2\n"
  "#define UART_C2_TIE\t\t\t(uint8_t)0x80\t\t\t// Transmitter Interrupt or DMA Transfer Enable.\n"
  "#define UART_C2_TCIE\t\t\t(uint8_t)0x40\t\t\t// Transmission Complete Interrupt Enable\n"
  "#define UART_C2_RIE\t\t\t(uint8_t)0x20\t\t\t// Receiver Full Interrupt or DMA Transfer Enable\n"
  "#define UART_C2_ILIE\t\t\t(uint8_t)0x10\t\t\t// Idle Line Interrupt Enable\n"
  "#define UART_C2_TE\t\t\t(uint8_t)0x08\t\t\t// Transmitter Enable\n"
  "#define UART_C2_RE\t\t\t(uint8_t)0x04\t\t\t// Receiver Enable\n"
  "#define UART_C2_RWU\t\t\t(uint8_t)0x02\t\t\t// Receiver Wakeup Control\n"
  "#define UART_C2_SBK\t\t\t(uint8_t)0x01\t\t\t// Send Break\n"
  "#define UART0_S1\t\t*(volatile uint8_t  *)0x4006A004 // UART Status Register 1\n"
  "#define UART_S1_TDRE\t\t\t(uint8_t)0x80\t\t\t// Transmit Data Register Empty Flag\n"
  "#define UART_S1_TC\t\t\t(uint8_t)0x40\t\t\t// Transmit Complete Flag\n"
  "#define UART_S1_RDRF\t\t\t(uint8_t)0x20\t\t\t// Receive Data Register Full Flag\n"
  "#define UART_S1_IDLE\t\t\t(uint8_t)0x10\t\t\t// Idle Line Flag\n"
  "#define UART_S1_OR\t\t\t(uint8_t)0x08\t\t\t// Receiver Overrun Flag\n"
  "#define UART_S1_NF\t\t\t(uint8_t)0x04\t\t\t// Noise Flag\n"
  "#define UART_S1_FE\t\t\t(uint8_t)0x02\t\t\t// Framing Error Flag\n"
  "#define UART_S1_PF\t\t\t(uint8_t)0x01\t\t\t// Parity Error Flag\n"
  "#define UART0_S2\t\t*(volatile uint8_t  *)0x4006A005 // UART Status Register 2\n"
  "#define UART0_C3\t\t*(volatile uint8_t  *)0x4006A006 // UART Control Register 3\n"
  "#define UART0_D\t\t\t*(volatile uint8_t  *)0x4006A007 // UART Data Register\n"
  "#define UART0_MA1\t\t*(volatile uint8_t  *)0x4006A008 // UART Match Address Registers 1\n"
  "#define UART0_MA2\t\t*(volatile uint8_t  *)0x4006A009 // UART Match Address Registers 2\n"
  "#define UART0_C4\t\t*(volatile uint8_t  *)0x4006A00A // UART Control Register 4\n"
  "#define UART0_C5\t\t*(volatile uint8_t  *)0x4006A00B // UART Control Register 5\n"
  "#define UART0_ED\t\t*(volatile uint8_t  *)0x4006A00C // UART Extended Data Register\n"
  "#define UART0_MODEM\t\t*(volatile uint8_t  *)0x4006A00D // UART Modem Register\n"
  "#define UART0_IR\t\t*(volatile uint8_t  *)0x4006A00E // UART Infrared Register\n"
  "#define UART0_PFIFO\t\t*(volatile uint8_t  *)0x4006A010 // UART FIFO Parameters\n"
  "#define UART_PFIFO_TXFE\t\t\t(uint8_t)0x80\n"
  "#define UART_PFIFO_RXFE\t\t\t(uint8_t)0x08\n"
  "#define UART0_CFIFO\t\t*(volatile uint8_t  *)0x4006A011 // UART FIFO Control Register\n"
  "#define UART_CFIFO_TXFLUSH\t\t(uint8_t)0x80\t\t\t// \n"
  "#define UART_CFIFO_RXFLUSH\t\t(uint8_t)0x40\t\t\t// \n"
  "#define UART_CFIFO_RXOFE\t\t(uint8_t)0x04\t\t\t// \n"
  "#define UART_CFIFO_TXOFE\t\t(uint8_t)0x02\t\t\t// \n"
  "#define UART_CFIFO_RXUFE\t\t(uint8_t)0x01\t\t\t// \n"
  "#define UART0_SFIFO\t\t*(volatile uint8_t  *)0x4006A012 // UART FIFO Status Register\n"
  "#define UART_SFIFO_TXEMPT\t\t(uint8_t)0x80\n"
  "#define UART_SFIFO_RXEMPT\t\t(uint8_t)0x40\n"
  "#define UART_SFIFO_RXOF\t\t\t(uint8_t)0x04\n"
  "#define UART_SFIFO_TXOF\t\t\t(uint8_t)0x02\n"
  "#define UART_SFIFO_RXUF\t\t\t(uint8_t)0x01\n"
  "#define UART0_TWFIFO\t\t*(volatile uint8_t  *)0x4006A013 // UART FIFO Transmit Watermark\n"
  "#define UART0_TCFIFO\t\t*(volatile uint8_t  *)0x4006A014 // UART FIFO Transmit Count\n"
  "#define UART0_RWFIFO\t\t*(volatile uint8_t  *)0x4006A015 // UART FIFO Receive Watermark\n"
  "#define UART0_RCFIFO\t\t*(volatile uint8_t  *)0x4006A016 // UART FIFO Receive Count\n"
  "#define UART0_C7816\t\t*(volatile uint8_t  *)0x4006A018 // UART 7816 Control Register\n"
  "#define UART0_IE7816\t\t*(volatile uint8_t  *)0x4006A019 // UART 7816 Interrupt Enable Register\n"
  "#define UART0_IS7816\t\t*(volatile uint8_t  *)0x4006A01A // UART 7816 Interrupt Status Register\n"
  "#define UART0_WP7816T0\t\t*(volatile uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register\n"
  "#define UART0_WP7816T1\t\t*(volatile uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register\n"
  "#define UART0_WN7816\t\t*(volatile uint8_t  *)0x4006A01C // UART 7816 Wait N Register\n"
  "#define UART0_WF7816\t\t*(volatile uint8_t  *)0x4006A01D // UART 7816 Wait FD Register\n"
  "#define UART0_ET7816\t\t*(volatile uint8_t  *)0x4006A01E // UART 7816 Error Threshold Register\n"
  "#define UART0_TL7816\t\t*(volatile uint8_t  *)0x4006A01F // UART 7816 Transmit Length Register\n"
  "#define UART0_C6\t\t*(volatile uint8_t  *)0x4006A021 // UART CEA709.1-B Control Register 6\n"
  "#define UART0_PCTH\t\t*(volatile uint8_t  *)0x4006A022 // UART CEA709.1-B Packet Cycle Time Counter High\n"
  "#define UART0_PCTL\t\t*(volatile uint8_t  *)0x4006A023 // UART CEA709.1-B Packet Cycle Time Counter Low\n"
  "#define UART0_B1T\t\t*(volatile uint8_t  *)0x4006A024 // UART CEA709.1-B Beta1 Timer\n"
  "#define UART0_SDTH\t\t*(volatile uint8_t  *)0x4006A025 // UART CEA709.1-B Secondary Delay Timer High\n"
  "#define UART0_SDTL\t\t*(volatile uint8_t  *)0x4006A026 // UART CEA709.1-B Secondary Delay Timer Low\n"
  "#define UART0_PRE\t\t*(volatile uint8_t  *)0x4006A027 // UART CEA709.1-B Preamble\n"
  "#define UART0_TPL\t\t*(volatile uint8_t  *)0x4006A028 // UART CEA709.1-B Transmit Packet Length\n"
  "#define UART0_IE\t\t*(volatile uint8_t  *)0x4006A029 // UART CEA709.1-B Interrupt Enable Register\n"
  "#define UART0_WB\t\t*(volatile uint8_t  *)0x4006A02A // UART CEA709.1-B WBASE\n"
  "#define UART0_S3\t\t*(volatile uint8_t  *)0x4006A02B // UART CEA709.1-B Status Register\n"
  "#define UART0_S4\t\t*(volatile uint8_t  *)0x4006A02C // UART CEA709.1-B Status Register\n"
  "#define UART0_RPL\t\t*(volatile uint8_t  *)0x4006A02D // UART CEA709.1-B Received Packet Length\n"
  "#define UART0_RPREL\t\t*(volatile uint8_t  *)0x4006A02E // UART CEA709.1-B Received Preamble Length\n"
  "#define UART0_CPW\t\t*(volatile uint8_t  *)0x4006A02F // UART CEA709.1-B Collision Pulse Width\n"
  "#define UART0_RIDT\t\t*(volatile uint8_t  *)0x4006A030 // UART CEA709.1-B Receive Indeterminate Time\n"
  "#define UART0_TIDT\t\t*(volatile uint8_t  *)0x4006A031 // UART CEA709.1-B Transmit Indeterminate Time\n"
  "#define UART1_BDH\t\t*(volatile uint8_t  *)0x4006B000 // UART Baud Rate Registers: High\n"
  "#define UART1_BDL\t\t*(volatile uint8_t  *)0x4006B001 // UART Baud Rate Registers: Low\n"
  "#define UART1_C1\t\t*(volatile uint8_t  *)0x4006B002 // UART Control Register 1\n"
  "#define UART1_C2\t\t*(volatile uint8_t  *)0x4006B003 // UART Control Register 2\n"
  "#define UART1_S1\t\t*(volatile uint8_t  *)0x4006B004 // UART Status Register 1\n"
  "#define UART1_S2\t\t*(volatile uint8_t  *)0x4006B005 // UART Status Register 2\n"
  "#define UART1_C3\t\t*(volatile uint8_t  *)0x4006B006 // UART Control Register 3\n"
  "#define UART1_D\t\t\t*(volatile uint8_t  *)0x4006B007 // UART Data Register\n"
  "#define UART1_MA1\t\t*(volatile uint8_t  *)0x4006B008 // UART Match Address Registers 1\n"
  "#define UART1_MA2\t\t*(volatile uint8_t  *)0x4006B009 // UART Match Address Registers 2\n"
  "#define UART1_C4\t\t*(volatile uint8_t  *)0x4006B00A // UART Control Register 4\n"
  "#define UART1_C5\t\t*(volatile uint8_t  *)0x4006B00B // UART Control Register 5\n"
  "#define UART1_ED\t\t*(volatile uint8_t  *)0x4006B00C // UART Extended Data Register\n"
  "#define UART1_MODEM\t\t*(volatile uint8_t  *)0x4006B00D // UART Modem Register\n"
  "#define UART1_IR\t\t*(volatile uint8_t  *)0x4006B00E // UART Infrared Register\n"
  "#define UART1_PFIFO\t\t*(volatile uint8_t  *)0x4006B010 // UART FIFO Parameters\n"
  "#define UART1_CFIFO\t\t*(volatile uint8_t  *)0x4006B011 // UART FIFO Control Register\n"
  "#define UART1_SFIFO\t\t*(volatile uint8_t  *)0x4006B012 // UART FIFO Status Register\n"
  "#define UART1_TWFIFO\t\t*(volatile uint8_t  *)0x4006B013 // UART FIFO Transmit Watermark\n"
  "#define UART1_TCFIFO\t\t*(volatile uint8_t  *)0x4006B014 // UART FIFO Transmit Count\n"
  "#define UART1_RWFIFO\t\t*(volatile uint8_t  *)0x4006B015 // UART FIFO Receive Watermark\n"
  "#define UART1_RCFIFO\t\t*(volatile uint8_t  *)0x4006B016 // UART FIFO Receive Count\n"
  "#define UART1_C7816\t\t*(volatile uint8_t  *)0x4006B018 // UART 7816 Control Register\n"
  "#define UART1_IE7816\t\t*(volatile uint8_t  *)0x4006B019 // UART 7816 Interrupt Enable Register\n"
  "#define UART1_IS7816\t\t*(volatile uint8_t  *)0x4006B01A // UART 7816 Interrupt Status Register\n"
  "#define UART1_WP7816T0\t\t*(volatile uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register\n"
  "#define UART1_WP7816T1\t\t*(volatile uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register\n"
  "#define UART1_WN7816\t\t*(volatile uint8_t  *)0x4006B01C // UART 7816 Wait N Register\n"
  "#define UART1_WF7816\t\t*(volatile uint8_t  *)0x4006B01D // UART 7816 Wait FD Register\n"
  "#define UART1_ET7816\t\t*(volatile uint8_t  *)0x4006B01E // UART 7816 Error Threshold Register\n"
  "#define UART1_TL7816\t\t*(volatile uint8_t  *)0x4006B01F // UART 7816 Transmit Length Register\n"
  "#define UART1_C6\t\t*(volatile uint8_t  *)0x4006B021 // UART CEA709.1-B Control Register 6\n"
  "#define UART1_PCTH\t\t*(volatile uint8_t  *)0x4006B022 // UART CEA709.1-B Packet Cycle Time Counter High\n"
  "#define UART1_PCTL\t\t*(volatile uint8_t  *)0x4006B023 // UART CEA709.1-B Packet Cycle Time Counter Low\n"
  "#define UART1_B1T\t\t*(volatile uint8_t  *)0x4006B024 // UART CEA709.1-B Beta1 Timer\n"
  "#define UART1_SDTH\t\t*(volatile uint8_t  *)0x4006B025 // UART CEA709.1-B Secondary Delay Timer High\n"
  "#define UART1_SDTL\t\t*(volatile uint8_t  *)0x4006B026 // UART CEA709.1-B Secondary Delay Timer Low\n"
  "#define UART1_PRE\t\t*(volatile uint8_t  *)0x4006B027 // UART CEA709.1-B Preamble\n"
  "#define UART1_TPL\t\t*(volatile uint8_t  *)0x4006B028 // UART CEA709.1-B Transmit Packet Length\n"
  "#define UART1_IE\t\t*(volatile uint8_t  *)0x4006B029 // UART CEA709.1-B Interrupt Enable Register\n"
  "#define UART1_WB\t\t*(volatile uint8_t  *)0x4006B02A // UART CEA709.1-B WBASE\n"
  "#define UART1_S3\t\t*(volatile uint8_t  *)0x4006B02B // UART CEA709.1-B Status Register\n"
  "#define UART1_S4\t\t*(volatile uint8_t  *)0x4006B02C // UART CEA709.1-B Status Register\n"
  "#define UART1_RPL\t\t*(volatile uint8_t  *)0x4006B02D // UART CEA709.1-B Received Packet Length\n"
  "#define UART1_RPREL\t\t*(volatile uint8_t  *)0x4006B02E // UART CEA709.1-B Received Preamble Length\n"
  "#define UART1_CPW\t\t*(volatile uint8_t  *)0x4006B02F // UART CEA709.1-B Collision Pulse Width\n"
  "#define UART1_RIDT\t\t*(volatile uint8_t  *)0x4006B030 // UART CEA709.1-B Receive Indeterminate Time\n"
  "#define UART1_TIDT\t\t*(volatile uint8_t  *)0x4006B031 // UART CEA709.1-B Transmit Indeterminate Time\n"
  "#define UART2_BDH\t\t*(volatile uint8_t  *)0x4006C000 // UART Baud Rate Registers: High\n"
  "#define UART2_BDL\t\t*(volatile uint8_t  *)0x4006C001 // UART Baud Rate Registers: Low\n"
  "#define UART2_C1\t\t*(volatile uint8_t  *)0x4006C002 // UART Control Register 1\n"
  "#define UART2_C2\t\t*(volatile uint8_t  *)0x4006C003 // UART Control Register 2\n"
  "#define UART2_S1\t\t*(volatile uint8_t  *)0x4006C004 // UART Status Register 1\n"
  "#define UART2_S2\t\t*(volatile uint8_t  *)0x4006C005 // UART Status Register 2\n"
  "#define UART2_C3\t\t*(volatile uint8_t  *)0x4006C006 // UART Control Register 3\n"
  "#define UART2_D\t\t\t*(volatile uint8_t  *)0x4006C007 // UART Data Register\n"
  "#define UART2_MA1\t\t*(volatile uint8_t  *)0x4006C008 // UART Match Address Registers 1\n"
  "#define UART2_MA2\t\t*(volatile uint8_t  *)0x4006C009 // UART Match Address Registers 2\n"
  "#define UART2_C4\t\t*(volatile uint8_t  *)0x4006C00A // UART Control Register 4\n"
  "#define UART2_C5\t\t*(volatile uint8_t  *)0x4006C00B // UART Control Register 5\n"
  "#define UART2_ED\t\t*(volatile uint8_t  *)0x4006C00C // UART Extended Data Register\n"
  "#define UART2_MODEM\t\t*(volatile uint8_t  *)0x4006C00D // UART Modem Register\n"
  "#define UART2_IR\t\t*(volatile uint8_t  *)0x4006C00E // UART Infrared Register\n"
  "#define UART2_PFIFO\t\t*(volatile uint8_t  *)0x4006C010 // UART FIFO Parameters\n"
  "#define UART2_CFIFO\t\t*(volatile uint8_t  *)0x4006C011 // UART FIFO Control Register\n"
  "#define UART2_SFIFO\t\t*(volatile uint8_t  *)0x4006C012 // UART FIFO Status Register\n"
  "#define UART2_TWFIFO\t\t*(volatile uint8_t  *)0x4006C013 // UART FIFO Transmit Watermark\n"
  "#define UART2_TCFIFO\t\t*(volatile uint8_t  *)0x4006C014 // UART FIFO Transmit Count\n"
  "#define UART2_RWFIFO\t\t*(volatile uint8_t  *)0x4006C015 // UART FIFO Receive Watermark\n"
  "#define UART2_RCFIFO\t\t*(volatile uint8_t  *)0x4006C016 // UART FIFO Receive Count\n"
  "#define UART2_C7816\t\t*(volatile uint8_t  *)0x4006C018 // UART 7816 Control Register\n"
  "#define UART2_IE7816\t\t*(volatile uint8_t  *)0x4006C019 // UART 7816 Interrupt Enable Register\n"
  "#define UART2_IS7816\t\t*(volatile uint8_t  *)0x4006C01A // UART 7816 Interrupt Status Register\n"
  "#define UART2_WP7816T0\t\t*(volatile uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register\n"
  "#define UART2_WP7816T1\t\t*(volatile uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register\n"
  "#define UART2_WN7816\t\t*(volatile uint8_t  *)0x4006C01C // UART 7816 Wait N Register\n"
  "#define UART2_WF7816\t\t*(volatile uint8_t  *)0x4006C01D // UART 7816 Wait FD Register\n"
  "#define UART2_ET7816\t\t*(volatile uint8_t  *)0x4006C01E // UART 7816 Error Threshold Register\n"
  "#define UART2_TL7816\t\t*(volatile uint8_t  *)0x4006C01F // UART 7816 Transmit Length Register\n"
  "#define UART2_C6\t\t*(volatile uint8_t  *)0x4006C021 // UART CEA709.1-B Control Register 6\n"
  "#define UART2_PCTH\t\t*(volatile uint8_t  *)0x4006C022 // UART CEA709.1-B Packet Cycle Time Counter High\n"
  "#define UART2_PCTL\t\t*(volatile uint8_t  *)0x4006C023 // UART CEA709.1-B Packet Cycle Time Counter Low\n"
  "#define UART2_B1T\t\t*(volatile uint8_t  *)0x4006C024 // UART CEA709.1-B Beta1 Timer\n"
  "#define UART2_SDTH\t\t*(volatile uint8_t  *)0x4006C025 // UART CEA709.1-B Secondary Delay Timer High\n"
  "#define UART2_SDTL\t\t*(volatile uint8_t  *)0x4006C026 // UART CEA709.1-B Secondary Delay Timer Low\n"
  "#define UART2_PRE\t\t*(volatile uint8_t  *)0x4006C027 // UART CEA709.1-B Preamble\n"
  "#define UART2_TPL\t\t*(volatile uint8_t  *)0x4006C028 // UART CEA709.1-B Transmit Packet Length\n"
  "#define UART2_IE\t\t*(volatile uint8_t  *)0x4006C029 // UART CEA709.1-B Interrupt Enable Register\n"
  "#define UART2_WB\t\t*(volatile uint8_t  *)0x4006C02A // UART CEA709.1-B WBASE\n"
  "#define UART2_S3\t\t*(volatile uint8_t  *)0x4006C02B // UART CEA709.1-B Status Register\n"
  "#define UART2_S4\t\t*(volatile uint8_t  *)0x4006C02C // UART CEA709.1-B Status Register\n"
  "#define UART2_RPL\t\t*(volatile uint8_t  *)0x4006C02D // UART CEA709.1-B Received Packet Length\n"
  "#define UART2_RPREL\t\t*(volatile uint8_t  *)0x4006C02E // UART CEA709.1-B Received Preamble Length\n"
  "#define UART2_CPW\t\t*(volatile uint8_t  *)0x4006C02F // UART CEA709.1-B Collision Pulse Width\n"
  "#define UART2_RIDT\t\t*(volatile uint8_t  *)0x4006C030 // UART CEA709.1-B Receive Indeterminate Time\n"
  "#define UART2_TIDT\t\t*(volatile uint8_t  *)0x4006C031 // UART CEA709.1-B Transmit Indeterminate Time\n"
  "\n"
  "// Chapter 46: Synchronous Audio Interface (SAI)\n"
  "#define I2S0_TCSR\t\t*(volatile uint32_t *)0x4002F000 // SAI Transmit Control Register\n"
  "#define I2S_TCSR_TE\t\t\t(uint32_t)0x80000000\t// Transmitter Enable\n"
  "#define I2S_TCSR_STOPE\t\t\t(uint32_t)0x40000000\t// Transmitter Enable in Stop mode\n"
  "#define I2S_TCSR_DBGE\t\t\t(uint32_t)0x20000000\t// Transmitter Enable in Debug mode\n"
  "#define I2S_TCSR_BCE\t\t\t(uint32_t)0x10000000\t// Bit Clock Enable\n"
  "#define I2S_TCSR_FR\t\t\t(uint32_t)0x02000000\t// FIFO Reset\n"
  "#define I2S_TCSR_SR\t\t\t(uint32_t)0x01000000\t// Software Reset\n"
  "#define I2S_TCSR_WSF\t\t\t(uint32_t)0x00100000\t// Word Start Flag\n"
  "#define I2S_TCSR_SEF\t\t\t(uint32_t)0x00080000\t// Sync Error Flag\n"
  "#define I2S_TCSR_FEF\t\t\t(uint32_t)0x00040000\t// FIFO Error Flag (underrun)\n"
  "#define I2S_TCSR_FWF\t\t\t(uint32_t)0x00020000\t// FIFO Warning Flag (empty)\n"
  "#define I2S_TCSR_FRF\t\t\t(uint32_t)0x00010000\t// FIFO Request Flag (Data Ready)\n"
  "#define I2S_TCSR_WSIE\t\t\t(uint32_t)0x00001000\t// Word Start Interrupt Enable\n"
  "#define I2S_TCSR_SEIE\t\t\t(uint32_t)0x00000800\t// Sync Error Interrupt Enable\n"
  "#define I2S_TCSR_FEIE\t\t\t(uint32_t)0x00000400\t// FIFO Error Interrupt Enable\n"
  "#define I2S_TCSR_FWIE\t\t\t(uint32_t)0x00000200\t// FIFO Warning Interrupt Enable\n"
  "#define I2S_TCSR_FRIE\t\t\t(uint32_t)0x00000100\t// FIFO Request Interrupt Enable\n"
  "#define I2S_TCSR_FWDE\t\t\t(uint32_t)0x00000002\t// FIFO Warning DMA Enable\n"
  "#define I2S_TCSR_FRDE\t\t\t(uint32_t)0x00000001\t// FIFO Request DMA Enable\n"
  "#define I2S0_TCR1\t\t*(volatile uint32_t *)0x4002F004 // SAI Transmit Configuration 1 Register\n"
  "#define I2S_TCR1_TFW(n)\t\t\t((uint32_t)n & 0x03)\t      // Transmit FIFO watermark\n"
  "#define I2S0_TCR2\t\t*(volatile uint32_t *)0x4002F008 // SAI Transmit Configuration 2 Register\n"
  "#define I2S_TCR2_DIV(n)\t\t\t((uint32_t)n & 0xff)\t      // Bit clock divide by (DIV+1)*2\n"
  "#define I2S_TCR2_BCD\t\t\t((uint32_t)1<<24)\t      // Bit clock direction\n"
  "#define I2S_TCR2_BCP\t\t\t((uint32_t)1<<25)\t      // Bit clock polarity\n"
  "#define I2S_TCR2_MSEL(n)\t\t((uint32_t)(n & 3)<<26)\t      // MCLK select, 0=bus clock, 1=I2S0_MCLK\n"
  "#define I2S_TCR2_BCI\t\t\t((uint32_t)1<<28)\t      // Bit clock input\n"
  "#define I2S_TCR2_BCS\t\t\t((uint32_t)1<<29)\t      // Bit clock swap\n"
  "#define I2S_TCR2_SYNC(n)\t\t((uint32_t)(n & 3)<<30)\t      // 0=async 1=sync with receiver\n"
  "#define I2S0_TCR3\t\t*(volatile uint32_t *)0x4002F00C // SAI Transmit Configuration 3 Register\n"
  "#define I2S_TCR3_WDFL(n)\t\t((uint32_t)n & 0x0f)\t      // word flag configuration\n"
  "#define I2S_TCR3_TCE\t\t\t((uint32_t)0x10000)\t      // transmit channel enable\n"
  "#define I2S0_TCR4\t\t*(volatile uint32_t *)0x4002F010 // SAI Transmit Configuration 4 Register\n"
  "#define I2S_TCR4_FSD\t\t\t((uint32_t)1)\t\t      // Frame Sync Direction\n"
  "#define I2S_TCR4_FSP\t\t\t((uint32_t)2)\t\t      // Frame Sync Polarity\n"
  "#define I2S_TCR4_FSE\t\t\t((uint32_t)8)\t\t      // Frame Sync Early\n"
  "#define I2S_TCR4_MF\t\t\t((uint32_t)0x10)\t      // MSB First\n"
  "#define I2S_TCR4_SYWD(n)\t\t((uint32_t)(n & 0x1f)<<8)     // Sync Width\n"
  "#define I2S_TCR4_FRSZ(n)\t\t((uint32_t)(n & 0x0f)<<16)    // Frame Size\n"
  "#define I2S0_TCR5\t\t*(volatile uint32_t *)0x4002F014 // SAI Transmit Configuration 5 Register\n"
  "#define I2S_TCR5_FBT(n)\t\t\t((uint32_t)(n & 0x1f)<<8)     // First Bit Shifted\n"
  "#define I2S_TCR5_W0W(n)\t\t\t((uint32_t)(n & 0x1f)<<16)    // Word 0 Width\n"
  "#define I2S_TCR5_WNW(n)\t\t\t((uint32_t)(n & 0x1f)<<24)    // Word N Width\n"
  "#define I2S0_TDR0\t\t*(volatile uint32_t *)0x4002F020 // SAI Transmit Data Register\n"
  "#define I2S0_TDR1\t\t*(volatile uint32_t *)0x4002F024 // SAI Transmit Data Register\n"
  "#define I2S0_TFR0\t\t*(volatile uint32_t *)0x4002F040 // SAI Transmit FIFO Register\n"
  "#define I2S0_TFR1\t\t*(volatile uint32_t *)0x4002F044 // SAI Transmit FIFO Register\n"
  "#define I2S_TFR_RFP(n)\t\t\t((uint32_t)n & 7)\t      // read FIFO pointer\n"
  "#define I2S_TFR_WFP(n)\t\t\t((uint32_t)(n & 7)<<16)\t      // write FIFO pointer\n"
  "#define I2S0_TMR\t\t*(volatile uint32_t *)0x4002F060 // SAI Transmit Mask Register\n"
  "#define I2S_TMR_TWM(n)\t\t\t((uint32_t)n & 0xFFFFFFFF)\n"
  "#define I2S0_RCSR\t\t*(volatile uint32_t *)0x4002F080 // SAI Receive Control Register\n"
  "#define I2S_RCSR_RE\t\t\t(uint32_t)0x80000000\t// Receiver Enable\n"
  "#define I2S_RCSR_STOPE\t\t\t(uint32_t)0x40000000\t// Receiver Enable in Stop mode\n"
  "#define I2S_RCSR_DBGE\t\t\t(uint32_t)0x20000000\t// Receiver Enable in Debug mode\n"
  "#define I2S_RCSR_BCE\t\t\t(uint32_t)0x10000000\t// Bit Clock Enable\n"
  "#define I2S_RCSR_FR\t\t\t(uint32_t)0x02000000\t// FIFO Reset\n"
  "#define I2S_RCSR_SR\t\t\t(uint32_t)0x01000000\t// Software Reset\n"
  "#define I2S_RCSR_WSF\t\t\t(uint32_t)0x00100000\t// Word Start Flag\n"
  "#define I2S_RCSR_SEF\t\t\t(uint32_t)0x00080000\t// Sync Error Flag\n"
  "#define I2S_RCSR_FEF\t\t\t(uint32_t)0x00040000\t// FIFO Error Flag (underrun)\n"
  "#define I2S_RCSR_FWF\t\t\t(uint32_t)0x00020000\t// FIFO Warning Flag (empty)\n"
  "#define I2S_RCSR_FRF\t\t\t(uint32_t)0x00010000\t// FIFO Request Flag (Data Ready)\n"
  "#define I2S_RCSR_WSIE\t\t\t(uint32_t)0x00001000\t// Word Start Interrupt Enable\n"
  "#define I2S_RCSR_SEIE\t\t\t(uint32_t)0x00000800\t// Sync Error Interrupt Enable\n"
  "#define I2S_RCSR_FEIE\t\t\t(uint32_t)0x00000400\t// FIFO Error Interrupt Enable\n"
  "#define I2S_RCSR_FWIE\t\t\t(uint32_t)0x00000200\t// FIFO Warning Interrupt Enable\n"
  "#define I2S_RCSR_FRIE\t\t\t(uint32_t)0x00000100\t// FIFO Request Interrupt Enable\n"
  "#define I2S_RCSR_FWDE\t\t\t(uint32_t)0x00000002\t// FIFO Warning DMA Enable\n"
  "#define I2S_RCSR_FRDE\t\t\t(uint32_t)0x00000001\t// FIFO Request DMA Enable\n"
  "#define I2S0_RCR1\t\t*(volatile uint32_t *)0x4002F084 // SAI Receive Configuration 1 Register\n"
  "#define I2S_RCR1_RFW(n)\t\t\t((uint32_t)n & 0x03)\t      // Receive FIFO watermark\n"
  "#define I2S0_RCR2\t\t*(volatile uint32_t *)0x4002F088 // SAI Receive Configuration 2 Register\n"
  "#define I2S_RCR2_DIV(n)\t\t\t((uint32_t)n & 0xff)\t      // Bit clock divide by (DIV+1)*2\n"
  "#define I2S_RCR2_BCD\t\t\t((uint32_t)1<<24)\t      // Bit clock direction\n"
  "#define I2S_RCR2_BCP\t\t\t((uint32_t)1<<25)\t      // Bit clock polarity\n"
  "#define I2S_RCR2_MSEL(n)\t\t((uint32_t)(n & 3)<<26)\t      // MCLK select, 0=bus clock, 1=I2S0_MCLK\n"
  "#define I2S_RCR2_BCI\t\t\t((uint32_t)1<<28)\t      // Bit clock input\n"
  "#define I2S_RCR2_BCS\t\t\t((uint32_t)1<<29)\t      // Bit clock swap\n"
  "#define I2S_RCR2_SYNC(n)\t\t((uint32_t)(n & 3)<<30)\t      // 0=async 1=sync with receiver\n"
  "#define I2S0_RCR3\t\t*(volatile uint32_t *)0x4002F08C // SAI Receive Configuration 3 Register\n"
  "#define I2S_RCR3_WDFL(n)\t\t((uint32_t)n & 0x0f)\t      // word flag configuration\n"
  "#define I2S_RCR3_RCE\t\t\t((uint32_t)0x10000)\t      // receive channel enable\n"
  "#define I2S0_RCR4\t\t*(volatile uint32_t *)0x4002F090 // SAI Receive Configuration 4 Register\n"
  "#define I2S_RCR4_FSD\t\t\t((uint32_t)1)\t\t      // Frame Sync Direction\n"
  "#define I2S_RCR4_FSP\t\t\t((uint32_t)2)\t\t      // Frame Sync Polarity\n"
  "#define I2S_RCR4_FSE\t\t\t((uint32_t)8)\t\t      // Frame Sync Early\n"
  "#define I2S_RCR4_MF\t\t\t((uint32_t)0x10)\t      // MSB First\n"
  "#define I2S_RCR4_SYWD(n)\t\t((uint32_t)(n & 0x1f)<<8)     // Sync Width\n"
  "#define I2S_RCR4_FRSZ(n)\t\t((uint32_t)(n & 0x0f)<<16)    // Frame Size\n"
  "#define I2S0_RCR5\t\t*(volatile uint32_t *)0x4002F094 // SAI Receive Configuration 5 Register\n"
  "#define I2S_RCR5_FBT(n)\t\t\t((uint32_t)(n & 0x1f)<<8)     // First Bit Shifted\n"
  "#define I2S_RCR5_W0W(n)\t\t\t((uint32_t)(n & 0x1f)<<16)    // Word 0 Width\n"
  "#define I2S_RCR5_WNW(n)\t\t\t((uint32_t)(n & 0x1f)<<24)    // Word N Width\n"
  "#define I2S0_RDR0\t\t*(volatile uint32_t *)0x4002F0A0 // SAI Receive Data Register\n"
  "#define I2S0_RDR1\t\t*(volatile uint32_t *)0x4002F0A4 // SAI Receive Data Register\n"
  "#define I2S0_RFR0\t\t*(volatile uint32_t *)0x4002F0C0 // SAI Receive FIFO Register\n"
  "#define I2S0_RFR1\t\t*(volatile uint32_t *)0x4002F0C4 // SAI Receive FIFO Register\n"
  "#define I2S_RFR_RFP(n)\t\t\t((uint32_t)n & 7)\t      // read FIFO pointer\n"
  "#define I2S_RFR_WFP(n)\t\t\t((uint32_t)(n & 7)<<16)\t      // write FIFO pointer\n"
  "#define I2S0_RMR\t\t*(volatile uint32_t *)0x4002F0E0 // SAI Receive Mask Register\n"
  "#define I2S_RMR_RWM(n)\t\t\t((uint32_t)n & 0xFFFFFFFF)\n"
  "#define I2S0_MCR\t\t*(volatile uint32_t *)0x4002F100 // SAI MCLK Control Register\n"
  "#define I2S_MCR_DUF\t\t\t((uint32_t)1<<31)\t      // Divider Update Flag\n"
  "#define I2S_MCR_MOE\t\t\t((uint32_t)1<<30)\t      // MCLK Output Enable\n"
  "#define I2S_MCR_MICS(n)\t\t\t((uint32_t)(n & 3)<<24)\t      // MCLK Input Clock Select\n"
  "#define I2S0_MDR\t\t*(volatile uint32_t *)0x4002F104 // SAI MCLK Divide Register\n"
  "#define I2S_MDR_FRACT(n)\t\t((uint32_t)(n & 0xff)<<12)    // MCLK Fraction\n"
  "#define I2S_MDR_DIVIDE(n)\t\t((uint32_t)(n & 0xfff))\t      // MCLK Divide\n"
  "\n"
  "// Chapter 47: General-Purpose Input/Output (GPIO)\n"
  "#define GPIOA_PDOR\t\t*(volatile uint32_t *)0x400FF000 // Port Data Output Register\n"
  "#define GPIOA_PSOR\t\t*(volatile uint32_t *)0x400FF004 // Port Set Output Register\n"
  "#define GPIOA_PCOR\t\t*(volatile uint32_t *)0x400FF008 // Port Clear Output Register\n"
  "#define GPIOA_PTOR\t\t*(volatile uint32_t *)0x400FF00C // Port Toggle Output Register\n"
  "#define GPIOA_PDIR\t\t*(volatile uint32_t *)0x400FF010 // Port Data Input Register\n"
  "#define GPIOA_PDDR\t\t*(volatile uint32_t *)0x400FF014 // Port Data Direction Register\n"
  "#define GPIOB_PDOR\t\t*(volatile uint32_t *)0x400FF040 // Port Data Output Register\n"
  "#define GPIOB_PSOR\t\t*(volatile uint32_t *)0x400FF044 // Port Set Output Register\n"
  "#define GPIOB_PCOR\t\t*(volatile uint32_t *)0x400FF048 // Port Clear Output Register\n"
  "#define GPIOB_PTOR\t\t*(volatile uint32_t *)0x400FF04C // Port Toggle Output Register\n"
  "#define GPIOB_PDIR\t\t*(volatile uint32_t *)0x400FF050 // Port Data Input Register\n"
  "#define GPIOB_PDDR\t\t*(volatile uint32_t *)0x400FF054 // Port Data Direction Register\n"
  "#define GPIOC_PDOR\t\t*(volatile uint32_t *)0x400FF080 // Port Data Output Register\n"
  "#define GPIOC_PSOR\t\t*(volatile uint32_t *)0x400FF084 // Port Set Output Register\n"
  "#define GPIOC_PCOR\t\t*(volatile uint32_t *)0x400FF088 // Port Clear Output Register\n"
  "#define GPIOC_PTOR\t\t*(volatile uint32_t *)0x400FF08C // Port Toggle Output Register\n"
  "#define GPIOC_PDIR\t\t*(volatile uint32_t *)0x400FF090 // Port Data Input Register\n"
  "#define GPIOC_PDDR\t\t*(volatile uint32_t *)0x400FF094 // Port Data Direction Register\n"
  "#define GPIOD_PDOR\t\t*(volatile uint32_t *)0x400FF0C0 // Port Data Output Register\n"
  "#define GPIOD_PSOR\t\t*(volatile uint32_t *)0x400FF0C4 // Port Set Output Register\n"
  "#define GPIOD_PCOR\t\t*(volatile uint32_t *)0x400FF0C8 // Port Clear Output Register\n"
  "#define GPIOD_PTOR\t\t*(volatile uint32_t *)0x400FF0CC // Port Toggle Output Register\n"
  "#define GPIOD_PDIR\t\t*(volatile uint32_t *)0x400FF0D0 // Port Data Input Register\n"
  "#define GPIOD_PDDR\t\t*(volatile uint32_t *)0x400FF0D4 // Port Data Direction Register\n"
  "#define GPIOE_PDOR\t\t*(volatile uint32_t *)0x400FF100 // Port Data Output Register\n"
  "#define GPIOE_PSOR\t\t*(volatile uint32_t *)0x400FF104 // Port Set Output Register\n"
  "#define GPIOE_PCOR\t\t*(volatile uint32_t *)0x400FF108 // Port Clear Output Register\n"
  "#define GPIOE_PTOR\t\t*(volatile uint32_t *)0x400FF10C // Port Toggle Output Register\n"
  "#define GPIOE_PDIR\t\t*(volatile uint32_t *)0x400FF110 // Port Data Input Register\n"
  "#define GPIOE_PDDR\t\t*(volatile uint32_t *)0x400FF114 // Port Data Direction Register\n"
  "\n"
  "// Chapter 48: Touch sense input (TSI)\n"
  "#define TSI0_GENCS\t\t*(volatile uint32_t *)0x40045000 // General Control and Status Register\n"
  "#define TSI_GENCS_LPCLKS\t\t(uint32_t)0x10000000\t\t// \n"
  "#define TSI_GENCS_LPSCNITV(n)\t\t(((n) & 15) << 24)\t\t// \n"
  "#define TSI_GENCS_NSCN(n)\t\t(((n) & 31) << 19)\t\t// \n"
  "#define TSI_GENCS_PS(n)\t\t\t(((n) & 7) << 16)\t\t// \n"
  "#define TSI_GENCS_EOSF\t\t\t(uint32_t)0x00008000\t\t// \n"
  "#define TSI_GENCS_OUTRGF\t\t(uint32_t)0x00004000\t\t// \n"
  "#define TSI_GENCS_EXTERF\t\t(uint32_t)0x00002000\t\t// \n"
  "#define TSI_GENCS_OVRF\t\t\t(uint32_t)0x00001000\t\t// \n"
  "#define TSI_GENCS_SCNIP\t\t\t(uint32_t)0x00000200\t\t// \n"
  "#define TSI_GENCS_SWTS\t\t\t(uint32_t)0x00000100\t\t// \n"
  "#define TSI_GENCS_TSIEN\t\t\t(uint32_t)0x00000080\t\t// \n"
  "#define TSI_GENCS_TSIIE\t\t\t(uint32_t)0x00000040\t\t// \n"
  "#define TSI_GENCS_ERIE\t\t\t(uint32_t)0x00000020\t\t// \n"
  "#define TSI_GENCS_ESOR\t\t\t(uint32_t)0x00000010\t\t// \n"
  "#define TSI_GENCS_STM\t\t\t(uint32_t)0x00000002\t\t// \n"
  "#define TSI_GENCS_STPE\t\t\t(uint32_t)0x00000001\t\t// \n"
  "#define TSI0_SCANC\t\t*(volatile uint32_t *)0x40045004 // SCAN Control Register\n"
  "#define TSI_SCANC_REFCHRG(n)\t\t(((n) & 15) << 24)\t\t// \n"
  "#define TSI_SCANC_EXTCHRG(n)\t\t(((n) & 7) << 16)\t\t// \n"
  "#define TSI_SCANC_SMOD(n)\t\t(((n) & 255) << 8)\t\t// \n"
  "#define TSI_SCANC_AMCLKS(n)\t\t(((n) & 3) << 3)\t\t// \n"
  "#define TSI_SCANC_AMPSC(n)\t\t(((n) & 7) << 0)\t\t// \n"
  "#define TSI0_PEN\t\t*(volatile uint32_t *)0x40045008 // Pin Enable Register\n"
  "#define TSI0_WUCNTR\t\t*(volatile uint32_t *)0x4004500C // Wake-Up Channel Counter Register\n"
  "#define TSI0_CNTR1\t\t*(volatile uint32_t *)0x40045100 // Counter Register\n"
  "#define TSI0_CNTR3\t\t*(volatile uint32_t *)0x40045104 // Counter Register\n"
  "#define TSI0_CNTR5\t\t*(volatile uint32_t *)0x40045108 // Counter Register\n"
  "#define TSI0_CNTR7\t\t*(volatile uint32_t *)0x4004510C // Counter Register\n"
  "#define TSI0_CNTR9\t\t*(volatile uint32_t *)0x40045110 // Counter Register\n"
  "#define TSI0_CNTR11\t\t*(volatile uint32_t *)0x40045114 // Counter Register\n"
  "#define TSI0_CNTR13\t\t*(volatile uint32_t *)0x40045118 // Counter Register\n"
  "#define TSI0_CNTR15\t\t*(volatile uint32_t *)0x4004511C // Counter Register\n"
  "#define TSI0_THRESHOLD\t\t*(volatile uint32_t *)0x40045120 // Low Power Channel Threshold Register\n"
  "\n"
  "// Nested Vectored Interrupt Controller, Table 3-4 & ARMv7 ref, appendix B3.4 (page 750)\n"
  "#define NVIC_ENABLE_IRQ(n)\t(*((volatile uint32_t *)0xE000E100 + (n >> 5)) = (1 << (n & 31)))\n"
  "#define NVIC_DISABLE_IRQ(n)\t(*((volatile uint32_t *)0xE000E180 + (n >> 5)) = (1 << (n & 31)))\n"
  "#define NVIC_SET_PENDING(n)\t(*((volatile uint32_t *)0xE000E200 + (n >> 5)) = (1 << (n & 31)))\n"
  "#define NVIC_CLEAR_PENDING(n)\t(*((volatile uint32_t *)0xE000E280 + (n >> 5)) = (1 << (n & 31)))\n"
  "\n"
  "#define NVIC_ISER0\t\t*(volatile uint32_t *)0xE000E100\n"
  "#define NVIC_ISER1\t\t*(volatile uint32_t *)0xE000E104\n"
  "#define NVIC_ICER0\t\t*(volatile uint32_t *)0xE000E180\n"
  "#define NVIC_ICER1\t\t*(volatile uint32_t *)0xE000E184\n"
  "\n"
  "// 0 = highest priority\n"
  "// Cortex-M4: 0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240\n"
  "// Cortex-M0: 0,64,128,192\n"
  "#define NVIC_SET_PRIORITY(irqnum, priority)  (*((volatile uint8_t *)0xE000E400 + (irqnum)) = (uint8_t)(priority))\n"
  "#define NVIC_GET_PRIORITY(irqnum) (*((uint8_t *)0xE000E400 + (irqnum)))\n"
  "\n"
  "#if defined(__MK20DX128__)\n"
  "#define IRQ_DMA_CH0\t\t0\n"
  "#define IRQ_DMA_CH1\t\t1\n"
  "#define IRQ_DMA_CH2\t\t2\n"
  "#define IRQ_DMA_CH3\t\t3\n"
  "#define IRQ_DMA_ERROR\t\t4\n"
  "#define IRQ_FTFL_COMPLETE\t6\n"
  "#define IRQ_FTFL_COLLISION\t7\n"
  "#define IRQ_LOW_VOLTAGE\t\t8\n"
  "#define IRQ_LLWU\t\t9\n"
  "#define IRQ_WDOG\t\t10\n"
  "#define IRQ_I2C0\t\t11\n"
  "#define IRQ_SPI0\t\t12\n"
  "#define IRQ_I2S0_TX\t\t13\n"
  "#define IRQ_I2S0_RX\t\t14\n"
  "#define IRQ_UART0_LON\t\t15\n"
  "#define IRQ_UART0_STATUS\t16\n"
  "#define IRQ_UART0_ERROR\t\t17\n"
  "#define IRQ_UART1_STATUS\t18\n"
  "#define IRQ_UART1_ERROR\t\t19\n"
  "#define IRQ_UART2_STATUS\t20\n"
  "#define IRQ_UART2_ERROR\t\t21\n"
  "#define IRQ_ADC0\t\t22\n"
  "#define IRQ_CMP0\t\t23\n"
  "#define IRQ_CMP1\t\t24\n"
  "#define IRQ_FTM0\t\t25\n"
  "#define IRQ_FTM1\t\t26\n"
  "#define IRQ_CMT\t\t\t27\n"
  "#define IRQ_RTC_ALARM\t\t28\n"
  "#define IRQ_RTC_SECOND\t\t29\n"
  "#define IRQ_PIT_CH0\t\t30\n"
  "#define IRQ_PIT_CH1\t\t31\n"
  "#define IRQ_PIT_CH2\t\t32\n"
  "#define IRQ_PIT_CH3\t\t33\n"
  "#define IRQ_PDB\t\t\t34\n"
  "#define IRQ_USBOTG\t\t35\n"
  "#define IRQ_USBDCD\t\t36\n"
  "#define IRQ_TSI\t\t\t37\n"
  "#define IRQ_MCG\t\t\t38\n"
  "#define IRQ_LPTMR\t\t39\n"
  "#define IRQ_PORTA\t\t40\n"
  "#define IRQ_PORTB\t\t41\n"
  "#define IRQ_PORTC\t\t42\n"
  "#define IRQ_PORTD\t\t43\n"
  "#define IRQ_PORTE\t\t44\n"
  "#define IRQ_SOFTWARE\t\t45\n"
  "#define NVIC_NUM_INTERRUPTS\t46\n"
  "\n"
  "#elif defined(__MK20DX256__)\n"
  "#define IRQ_DMA_CH0\t\t0\n"
  "#define IRQ_DMA_CH1\t\t1\n"
  "#define IRQ_DMA_CH2\t\t2\n"
  "#define IRQ_DMA_CH3\t\t3\n"
  "#define IRQ_DMA_CH4\t\t4\n"
  "#define IRQ_DMA_CH5\t\t5\n"
  "#define IRQ_DMA_CH6\t\t6\n"
  "#define IRQ_DMA_CH7\t\t7\n"
  "#define IRQ_DMA_CH8\t\t8\n"
  "#define IRQ_DMA_CH9\t\t9\n"
  "#define IRQ_DMA_CH10\t\t10\n"
  "#define IRQ_DMA_CH11\t\t11\n"
  "#define IRQ_DMA_CH12\t\t12\n"
  "#define IRQ_DMA_CH13\t\t13\n"
  "#define IRQ_DMA_CH14\t\t14\n"
  "#define IRQ_DMA_CH15\t\t15\n"
  "#define IRQ_DMA_ERROR\t\t16\n"
  "#define IRQ_FTFL_COMPLETE\t18\n"
  "#define IRQ_FTFL_COLLISION\t19\n"
  "#define IRQ_LOW_VOLTAGE\t\t20\n"
  "#define IRQ_LLWU\t\t21\n"
  "#define IRQ_WDOG\t\t22\n"
  "#define IRQ_I2C0\t\t24\n"
  "#define IRQ_I2C1\t\t25\n"
  "#define IRQ_SPI0\t\t26\n"
  "#define IRQ_SPI1\t\t27\n"
  "#define IRQ_CAN_MESSAGE\t\t29\n"
  "#define IRQ_CAN_BUS_OFF\t\t30\n"
  "#define IRQ_CAN_ERROR\t\t31\n"
  "#define IRQ_CAN_TX_WARN\t\t32\n"
  "#define IRQ_CAN_RX_WARN\t\t33\n"
  "#define IRQ_CAN_WAKEUP\t\t34\n"
  "#define IRQ_I2S0_TX\t\t35\n"
  "#define IRQ_I2S0_RX\t\t36\n"
  "#define IRQ_UART0_LON\t\t44\n"
  "#define IRQ_UART0_STATUS\t45\n"
  "#define IRQ_UART0_ERROR\t\t46\n"
  "#define IRQ_UART1_STATUS\t47\n"
  "#define IRQ_UART1_ERROR\t\t48\n"
  "#define IRQ_UART2_STATUS\t49\n"
  "#define IRQ_UART2_ERROR\t\t50\n"
  "#define IRQ_ADC0\t\t57\n"
  "#define IRQ_ADC1\t\t58\n"
  "#define IRQ_CMP0\t\t59\n"
  "#define IRQ_CMP1\t\t60\n"
  "#define IRQ_CMP2\t\t61\n"
  "#define IRQ_FTM0\t\t62\n"
  "#define IRQ_FTM1\t\t63\n"
  "#define IRQ_FTM2\t\t64\n"
  "#define IRQ_CMT\t\t\t65\n"
  "#define IRQ_RTC_ALARM\t\t66\n"
  "#define IRQ_RTC_SECOND\t\t67\n"
  "#define IRQ_PIT_CH0\t\t68\n"
  "#define IRQ_PIT_CH1\t\t69\n"
  "#define IRQ_PIT_CH2\t\t70\n"
  "#define IRQ_PIT_CH3\t\t71\n"
  "#define IRQ_PDB\t\t\t72\n"
  "#define IRQ_USBOTG\t\t73\n"
  "#define IRQ_USBDCD\t\t74\n"
  "#define IRQ_DAC0\t\t81\n"
  "#define IRQ_TSI\t\t\t83\n"
  "#define IRQ_MCG\t\t\t84\n"
  "#define IRQ_LPTMR\t\t85\n"
  "#define IRQ_PORTA\t\t87\n"
  "#define IRQ_PORTB\t\t88\n"
  "#define IRQ_PORTC\t\t89\n"
  "#define IRQ_PORTD\t\t90\n"
  "#define IRQ_PORTE\t\t91\n"
  "#define IRQ_SOFTWARE\t\t94\n"
  "#define NVIC_NUM_INTERRUPTS\t95\n"
  "\n"
  "#endif\n"
  "\n"
  "\n"
  "\n"
  "\n"
  "\n"
  "#define __disable_irq() asm volatile(\"CPSID i\");\n"
  "#define __enable_irq()\tasm volatile(\"CPSIE i\");\n"
  "\n"
  "// System Control Space (SCS), ARMv7 ref manual, B3.2, page 708\n"
  "#define SCB_CPUID\t\t*(const\t   uint32_t *)0xE000ED00 // CPUID Base Register\n"
  "#define SCB_ICSR\t\t*(volatile uint32_t *)0xE000ED04 // Interrupt Control and State\n"
  "#define SCB_ICSR_PENDSTSET\t\t(uint32_t)0x04000000\n"
  "#define SCB_VTOR\t\t*(volatile uint32_t *)0xE000ED08 // Vector Table Offset\n"
  "#define SCB_AIRCR\t\t*(volatile uint32_t *)0xE000ED0C // Application Interrupt and Reset Control\n"
  "#define SCB_SCR\t\t\t*(volatile uint32_t *)0xE000ED10 // System Control Register\n"
  "#define SCB_CCR\t\t\t*(volatile uint32_t *)0xE000ED14 // Configuration and Control\n"
  "#define SCB_SHPR1\t\t*(volatile uint32_t *)0xE000ED18 // System Handler Priority Register 1\n"
  "#define SCB_SHPR2\t\t*(volatile uint32_t *)0xE000ED1C // System Handler Priority Register 2\n"
  "#define SCB_SHPR3\t\t*(volatile uint32_t *)0xE000ED20 // System Handler Priority Register 3\n"
  "#define SCB_SHCSR\t\t*(volatile uint32_t *)0xE000ED24 // System Handler Control and State\n"
  "#define SCB_CFSR\t\t*(volatile uint32_t *)0xE000ED28 // Configurable Fault Status Register\n"
  "#define SCB_HFSR\t\t*(volatile uint32_t *)0xE000ED2C // HardFault Status\n"
  "#define SCB_DFSR\t\t*(volatile uint32_t *)0xE000ED30 // Debug Fault Status\n"
  "#define SCB_MMFAR\t\t*(volatile uint32_t *)0xE000ED34 // MemManage Fault Address\n"
  "\n"
  "#define SYST_CSR\t\t*(volatile uint32_t *)0xE000E010 // SysTick Control and Status\n"
  "#define SYST_CSR_COUNTFLAG\t\t(uint32_t)0x00010000\n"
  "#define SYST_CSR_CLKSOURCE\t\t(uint32_t)0x00000004\n"
  "#define SYST_CSR_TICKINT\t\t(uint32_t)0x00000002\n"
  "#define SYST_CSR_ENABLE\t\t\t(uint32_t)0x00000001\n"
  "#define SYST_RVR\t\t*(volatile uint32_t *)0xE000E014 // SysTick Reload Value Register\n"
  "#define SYST_CVR\t\t*(volatile uint32_t *)0xE000E018 // SysTick Current Value Register\n"
  "#define SYST_CALIB\t*(const\t   uint32_t *)0xE000E01C // SysTick Calibration Value\n"
  "\n"
  "\n"
  "#define ARM_DEMCR\t\t*(volatile uint32_t *)0xE000EDFC // Debug Exception and Monitor Control\n"
  "#define ARM_DEMCR_TRCENA\t\t(1 << 24)\t // Enable debugging & monitoring blocks\n"
  "#define ARM_DWT_CTRL\t\t*(volatile uint32_t *)0xE0001000 // DWT control register\n"
  "#define ARM_DWT_CTRL_CYCCNTENA\t\t(1 << 0)\t\t// Enable cycle count\n"
  "#define ARM_DWT_CYCCNT\t\t*(volatile uint32_t *)0xE0001004 // Cycle count register\n"
  "\n"
  "\n"
  "#ifdef __cplusplus\n"
  "}\n"
  "#endif\n"
  "#endif\n" ;

const cRegularFileWrapper gWrapperFile_9_targetTemplates (
  "mk20dx256.h",
  "h",
  true, // Text file
  152136, // Text length
  gWrapperFileContent_9_targetTemplates
) ;

//--- File 'sources/startup-sequential.c'

const char * gWrapperFileContent_10_targetTemplates = "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "#include <stddef.h>\n"
  "\n"
  "#include \"plm.h\"\n"
  "#include \"mk20dx256.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "static void ResetISR (void) {\n"
  "//---------1- Inhiber le chien de garde\n"
  "  WDOG_UNLOCK = 0xC520 ;\n"
  "  WDOG_UNLOCK = 0xD928 ;\n"
  "  WDOG_STCTRLH = 0x0010 ;\n"
  "  // enable clocks to always-used peripherals\n"
  "  SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;\n"
  "  SIM_SCGC5 = 0x00043F82;    // clocks active to all GPIO\n"
  "  SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;\n"
  "  // if the RTC oscillator isn't enabled, get it started early\n"
  "  if (!(RTC_CR & RTC_CR_OSCE)) {\n"
  "    RTC_SR = 0;\n"
  "    RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;\n"
  "  }\n"
  "\n"
  "  // release I/O pins hold, if we woke up from VLLS mode\n"
  "  if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;\n"
  "\n"
  "  // TODO: do this while the PLL is waiting to lock....\n"
  "//  SCB_VTOR = 0;  // use vector table in flash\n"
  "\n"
  "  // default all interrupts to medium priority level\n"
  "//  for (int32_t i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);\n"
  "//---------2- Initialisation de la PLL\n"
  "  // start in FEI mode\n"
  "  // enable capacitors for crystal\n"
  "  OSC0_CR = OSC_SC8P | OSC_SC2P;\n"
  "  // enable osc, 8-32 MHz range, low power mode\n"
  "  MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;\n"
  "  // switch to crystal as clock source, FLL input = 16 MHz / 512\n"
  "  MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);\n"
  "  // wait for crystal oscillator to begin\n"
  "  while ((MCG_S & MCG_S_OSCINIT0) == 0) ;\n"
  "  // wait for FLL to use oscillator\n"
  "  while ((MCG_S & MCG_S_IREFST) != 0) ;\n"
  "  // wait for MCGOUT to use oscillator\n"
  "  while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;\n"
  "  // now we're in FBE mode\n"
  "  // config PLL input for 16 MHz Crystal / 4 = 4 MHz\n"
  "  MCG_C5 = MCG_C5_PRDIV0(3);\n"
  "  // config PLL for 96 MHz output\n"
  "  MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0);\n"
  "  // wait for PLL to start using xtal as its input\n"
  "  while (!(MCG_S & MCG_S_PLLST)) ;\n"
  "  // wait for PLL to lock\n"
  "  while (!(MCG_S & MCG_S_LOCK0)) ;\n"
  "  // now we're in PBE mode\n"
  "#if F_CPU == 96000000\n"
  "  // config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash\n"
  "  SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) |   SIM_CLKDIV1_OUTDIV4(3);\n"
  "#elif F_CPU == 48000000\n"
  "  // config divisors: 48 MHz core, 48 MHz bus, 24 MHz flash\n"
  "  SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(1) | SIM_CLKDIV1_OUTDIV2(1) |   SIM_CLKDIV1_OUTDIV4(3);\n"
  "#elif F_CPU == 24000000\n"
  "  // config divisors: 24 MHz core, 24 MHz bus, 24 MHz flash\n"
  "  SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(3) | SIM_CLKDIV1_OUTDIV2(3) |   SIM_CLKDIV1_OUTDIV4(3);\n"
  "#else\n"
  "#error \"Error, F_CPU must be 96000000, 48000000, or 24000000\"\n"
  "#endif\n"
  "  // switch to PLL as clock source, FLL input = 16 MHz / 512\n"
  "  MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);\n"
  "  // wait for PLL clock to be used\n"
  "  while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;\n"
  "  // now we're in PEE mode\n"
  "  // configure USB for 48 MHz clock\n"
  "//  SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1); // USB = 96 MHz PLL / 2\n"
  "  // USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0\n"
  "//  SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);\n"
  "\n"
  "//---------3- Initialisation de la section .bss\n"
  "  extern unsigned __bss_start ;\n"
  "  extern unsigned __bss_end ;\n"
  "  unsigned * p = & __bss_start ;\n"
  "  while (p != & __bss_end) {\n"
  "    * p = 0 ;\n"
  "    p ++ ;\n"
  "  }\n"
  "//---------4- Copy de la section .data\n"
  "  extern unsigned __data_start ;\n"
  "  extern unsigned __data_end ;\n"
  "  extern unsigned __data_load_start ;\n"
  "  unsigned * pSrc = & __data_load_start ;\n"
  "  unsigned * pDest = & __data_start ;\n"
  "  while (pDest != & __data_end) {\n"
  "    * pDest = * pSrc ;\n"
  "    pDest ++ ;\n"
  "    pSrc ++ ;\n"
  "  }\n"
  "//---------5- Ex\xC3""\xA9""cuter les constructeurs des variables globales\n"
  "  extern void (* __constructor_array_start) (void) ;\n"
  "  extern void (* __constructor_array_end) (void) ;\n"
  "  void (** ptr) (void) = & __constructor_array_start ;\n"
  "  while (ptr != & __constructor_array_end) {\n"
  "    (* ptr) () ;\n"
  "    ptr ++ ;\n"
  "  }\n"
  "//---------6- Ex\xC3""\xA9""cuter les routines d'initialisation de la section init_routine_array\n"
  "  extern void (* __init_routine_array_start) (void) ;\n"
  "  extern void (* __init_routine_array_end) (void) ;\n"
  "  ptr = & __init_routine_array_start ;\n"
  "  while (ptr != & __init_routine_array_end) {\n"
  "    (* ptr) () ;\n"
  "    ptr ++ ;\n"
  "  }\n"
  "//---------7- Ex\xC3""\xA9""cuter le programme utilisateur\n"
  "  setup () ;\n"
  "  while (1) {\n"
  "    loop () ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "//   Vector table                                                                                                      *\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "typedef struct {\n"
  "  unsigned * mStackPointer ;\n"
  "//--- ARM Core System Handler Vectors\n"
  "  void (* mCoreSystemHandlerVector [15]) (void) ;\n"
  "//--- Non-Core Vectors\n"
  "  void (* mNonCoreHandlerVector [240]) (void) ;\n"
  "//--- Flash magic values\n"
  "  int mFlash [4] ;\n"
  "} vectorStructSeq ;\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "extern unsigned __system_stack_end ;\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "const vectorStructSeq vector __attribute__ ((section (\".isr_vector\"))) = {\n"
  "  & __system_stack_end, // 0\n"
  "//--- ARM Core System Handler Vectors\n"
  "  { ResetISR, // 1\n"
  "    NULL, // 2\n"
  "    NULL, // 3\n"
  "    NULL, // 4\n"
  "    NULL, // 5\n"
  "    NULL, // 6\n"
  "    NULL, // 7\n"
  "    NULL, // 8\n"
  "    NULL, // 9\n"
  "    NULL, // 10\n"
  "    NULL, // 11\n"
  "    NULL, // 12\n"
  "    NULL, // 13\n"
  "    NULL, // 14\n"
  "    NULL // 15\n"
  "  },\n"
  "//--- Non-Core Vectors\n"
  "  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n"
  "  },\n"
  "//--- Flash magic values\n"
  "  {-1, -1, -1, -2}\n"
  "} ;\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_10_targetTemplates (
  "startup-sequential.c",
  "c",
  true, // Text file
  7492, // Text length
  gWrapperFileContent_10_targetTemplates
) ;

//--- All files of 'sources' directory

static const cRegularFileWrapper * gWrapperAllFiles_targetTemplates_4 [4] = {
  & gWrapperFile_8_targetTemplates,
  & gWrapperFile_9_targetTemplates,
  & gWrapperFile_10_targetTemplates,
  NULL
} ;

//--- All sub-directories of 'sources' directory

static const cDirectoryWrapper * gWrapperAllDirectories_targetTemplates_4 [1] = {
  NULL
} ;

//--- Directory 'sources'

const cDirectoryWrapper gWrapperDirectory_4_targetTemplates (
  "sources",
  3,
  gWrapperAllFiles_targetTemplates_4,
  0,
  gWrapperAllDirectories_targetTemplates_4
) ;

//--- All files of 'target-teensy-sequential' directory

static const cRegularFileWrapper * gWrapperAllFiles_targetTemplates_3 [6] = {
  & gWrapperFile_3_targetTemplates,
  & gWrapperFile_4_targetTemplates,
  & gWrapperFile_5_targetTemplates,
  & gWrapperFile_6_targetTemplates,
  & gWrapperFile_7_targetTemplates,
  NULL
} ;

//--- All sub-directories of 'target-teensy-sequential' directory

static const cDirectoryWrapper * gWrapperAllDirectories_targetTemplates_3 [2] = {
  & gWrapperDirectory_4_targetTemplates,
  NULL
} ;

//--- Directory 'target-teensy-sequential'

const cDirectoryWrapper gWrapperDirectory_3_targetTemplates (
  "target-teensy-sequential",
  5,
  gWrapperAllFiles_targetTemplates_3,
  1,
  gWrapperAllDirectories_targetTemplates_3
) ;

//--- File 'target-teensy-sequential-systick/build-as.py'

const char * gWrapperFileContent_11_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"as\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_11_targetTemplates (
  "build-as.py",
  "py",
  true, // Text file
  996, // Text length
  gWrapperFileContent_11_targetTemplates
) ;

//--- File 'target-teensy-sequential-systick/build-verbose.py'

const char * gWrapperFileContent_12_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"all\", \"1\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_12_targetTemplates (
  "build-verbose.py",
  "py",
  true, // Text file
  1002, // Text length
  gWrapperFileContent_12_targetTemplates
) ;

//--- File 'target-teensy-sequential-systick/build.py'

const char * gWrapperFileContent_13_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess, sys, os, copy\n"
  "import urllib, shutil\n"
  "import subprocess, re\n"
  "from time import time\n"
  "import platform\n"
  "import json\n"
  "import threading, operator\n"
  "\n"
  "if sys.version_info >= (2, 6) :\n"
  "  import multiprocessing\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   processorCount                                                                                                     *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def processorCount () :\n"
  "  if sys.version_info >= (2, 6) :\n"
  "    coreCount = multiprocessing.cpu_count ()\n"
  "  else:\n"
  "    coreCount = 1\n"
  "  return coreCount\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   FOR PRINTING IN COLOR                                                                                              *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BLACK () :\n"
  "  return '\\033[90m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def RED () :\n"
  "  return '\\033[91m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def GREEN () :\n"
  "  return '\\033[92m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def YELLOW () :\n"
  "  return '\\033[93m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BLUE () :\n"
  "  return '\\033[94m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def MAGENTA () :\n"
  "  return '\\033[95m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def CYAN () :\n"
  "  return '\\033[96m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def WHITE () :\n"
  "  return '\\033[97m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def ENDC () :\n"
  "  return '\\033[0m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD () :\n"
  "  return '\\033[1m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def UNDERLINE () :\n"
  "  return '\\033[4m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BLINK () :\n"
  "  return '\\033[5m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_BLUE () :\n"
  "  return BOLD () + BLUE ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_GREEN () :\n"
  "  return BOLD () + GREEN ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_RED () :\n"
  "  return BOLD () + RED ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runHiddenCommand                                                                                                   *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runHiddenCommand (cmd) :\n"
  "  result = \"\"\n"
  "  childProcess = subprocess.Popen (cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n"
  "  while True:\n"
  "    line = childProcess.stdout.readline ()\n"
  "    if line != \"\":\n"
  "      result += line\n"
  "    else:\n"
  "      childProcess.wait ()\n"
  "      if childProcess.returncode != 0 :\n"
  "        sys.exit (childProcess.returncode)\n"
  "      return result\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runSingleCommand                                                                                                   *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runSingleCommand (cmd) :\n"
  "  cmdAsString = \"\"\n"
  "  for s in cmd:\n"
  "    if (s == \"\") or (s.find (\" \") >= 0):\n"
  "      cmdAsString += '\"' + s + '\" '\n"
  "    else:\n"
  "      cmdAsString += s + ' '\n"
  "  print cmdAsString\n"
  "  childProcess = subprocess.Popen (cmd)\n"
  "  childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    sys.exit (childProcess.returncode)\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runCommand                                                                                                         *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runCommand (cmd, title, showCommand) :\n"
  "  if title != \"\":\n"
  "    print BOLD_BLUE () + title + ENDC ()\n"
  "  if (title == \"\") or showCommand :\n"
  "    cmdAsString = \"\"\n"
  "    for s in cmd:\n"
  "      if (s == \"\") or (s.find (\" \") >= 0):\n"
  "        cmdAsString += '\"' + s + '\" '\n"
  "      else:\n"
  "        cmdAsString += s + ' '\n"
  "    print cmdAsString\n"
  "  childProcess = subprocess.Popen (cmd)\n"
  "  childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    sys.exit (childProcess.returncode)\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runInThread                                                                                                        *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runInThread (job, displayLock, terminationSemaphore):\n"
  "  childProcess = subprocess.Popen (job.mCommand, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n"
  "  while True:\n"
  "    line = childProcess.stdout.readline ()\n"
  "    if line != \"\":\n"
  "      displayLock.acquire ()\n"
  "      sys.stdout.write (line) # Print without newline\n"
  "      displayLock.release ()\n"
  "    else:\n"
  "      childProcess.wait ()\n"
  "      job.mReturnCode = childProcess.returncode\n"
  "      terminationSemaphore.release ()\n"
  "      break\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   modificationDateForFile                                                                                            *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def modificationDateForFile (dateCacheDictionary, file):\n"
  "  absFilePath = os.path.abspath (file)\n"
  "  if dateCacheDictionary.has_key (absFilePath) :\n"
  "    return dateCacheDictionary [absFilePath]\n"
  "  elif not os.path.exists (absFilePath):\n"
  "    date = sys.float_info.max # Very far in future\n"
  "    dateCacheDictionary [absFilePath] = date\n"
  "    return date\n"
  "  else:\n"
  "    date = os.path.getmtime (absFilePath)\n"
  "    dateCacheDictionary [absFilePath] = date\n"
  "    return date\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class PostCommand                                                                                                  *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class PostCommand:\n"
  "  mCommand = []\n"
  "  mTitle = \"\"\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, title = \"\"):\n"
  "    self.mCommand = []\n"
  "    self.mTitle = title\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class Job                                                                                                          *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class Job:\n"
  "  mTarget = \"\"\n"
  "  mCommand = []\n"
  "  mTitle = \"\"\n"
  "  mRequiredFiles = []\n"
  "  mPostCommands = []\n"
  "  mReturnCode = None\n"
  "  mPriority = 0\n"
  "  mState = 0 # 0: waiting for execution\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, target, requiredFiles, command, postCommands, priority, title):\n"
  "    self.mTarget = copy.deepcopy (target)\n"
  "    self.mCommand = copy.deepcopy (command)\n"
  "    self.mRequiredFiles = copy.deepcopy (requiredFiles)\n"
  "    self.mTitle = copy.deepcopy (title)\n"
  "    self.mPostCommands = copy.deepcopy (postCommands)\n"
  "    self.mPriority = priority\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def run (self, displayLock, terminationSemaphore, showCommand):\n"
  "    displayLock.acquire ()\n"
  "    if self.mTitle != \"\":\n"
  "      print BOLD_BLUE () + self.mTitle + ENDC ()\n"
  "    if (self.mTitle == \"\") or showCommand :\n"
  "      cmdAsString = \"\"\n"
  "      for s in self.mCommand:\n"
  "        if (s == \"\") or (s.find (\" \") >= 0):\n"
  "          cmdAsString += '\"' + s + '\" '\n"
  "        else:\n"
  "          cmdAsString += s + ' '\n"
  "      print cmdAsString\n"
  "    displayLock.release ()\n"
  "    thread = threading.Thread (target=runInThread, args=(self, displayLock, terminationSemaphore))\n"
  "    thread.start()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def runPostCommand (self, displayLock, terminationSemaphore, showCommand):\n"
  "    postCommand = self.mPostCommands [0]\n"
  "    self.mCommand = postCommand.mCommand\n"
  "    displayLock.acquire ()\n"
  "    print BOLD_BLUE () + postCommand.mTitle + ENDC ()\n"
  "    if showCommand:\n"
  "      cmdAsString = \"\"\n"
  "      for s in self.mCommand:\n"
  "        if (s == \"\") or (s.find (\" \") >= 0):\n"
  "          cmdAsString += '\"' + s + '\" '\n"
  "        else:\n"
  "          cmdAsString += s + ' '\n"
  "      print cmdAsString\n"
  "    displayLock.release ()\n"
  "    thread = threading.Thread (target=runInThread, args=(self, displayLock, terminationSemaphore))\n"
  "    thread.start()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class Rule                                                                                                         *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class Rule:\n"
  "  mTarget = \"\"\n"
  "  mDependences = []\n"
  "  mCommand = []\n"
  "  mSecondaryMostRecentModificationDate = 0.0 # Far in the past\n"
  "  mTitle = \"\"\n"
  "  mPostCommands = []\n"
  "  mPriority = 0\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, target, title = \"\"):\n"
  "    self.mTarget = copy.deepcopy (target)\n"
  "    self.mDependences = []\n"
  "    self.mCommand = []\n"
  "    self.mSecondaryMostRecentModificationDate = 0.0\n"
  "    self.mPostCommands = []\n"
  "    self.mPriority = 0\n"
  "    if title == \"\":\n"
  "      self.mTitle = \"Building \" + target\n"
  "    else:\n"
  "      self.mTitle = copy.deepcopy (title)\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def enterSecondaryDependanceFile (self, secondaryDependanceFile):\n"
  "    if secondaryDependanceFile != \"\":\n"
  "      filePath = os.path.abspath (secondaryDependanceFile)\n"
  "      if os.path.exists (filePath):\n"
  "        f = open (filePath, \"r\")\n"
  "        s = f.read ().replace (\"\\\\ \", \"\\x01\") # Read and replace escaped spaces by \\0x01\n"
  "        f.close ()\n"
  "        s = s.replace (\"\\\\\\n\", \"\")\n"
  "        liste = s.split (\"\\n\\n\")\n"
  "        dateCacheDictionary = {}\n"
  "        for s in liste:\n"
  "          components = s.split (':')\n"
  "          target = components [0].replace (\"\\x01\", \" \")\n"
  "          #print \"------- Optional dependency rules for target '\" + target + \"'\"\n"
  "          #print \"Secondary target '\" + target + \"'\"\n"
  "          for src in components [1].split ():\n"
  "            secondarySource = src.replace (\"\\x01\", \" \")\n"
  "            #print \"  '\" + secondarySource + \"'\"\n"
  "            modifDate = modificationDateForFile (dateCacheDictionary, secondarySource)\n"
  "            if self.mSecondaryMostRecentModificationDate < modifDate :\n"
  "              self.mSecondaryMostRecentModificationDate = modifDate\n"
  "              #print BOLD_BLUE () + str (modifDate) + ENDC ()\n"
  "    \n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class Make                                                                                                         *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class Make:\n"
  "  mRuleList = []\n"
  "  mJobList = []\n"
  "  mErrorCount = 0\n"
  "  mModificationDateDictionary = {}\n"
  "  mGoals = {}\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def addRule (self, rule):\n"
  "    self.mRuleList.append (copy.deepcopy (rule))\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printRules (self):\n"
  "    print BOLD_BLUE () + \"--- Print the \" + str (len (self.mRuleList)) + \" rule\" + (\"s\" if len (self.mRuleList) > 1 else \"\") + \" ---\" + ENDC ()\n"
  "    for rule in self.mRuleList:\n"
  "      print BOLD_GREEN () + \"Target: '\" + rule.mTarget + \"'\" + ENDC ()\n"
  "      for dep in rule.mDependences:\n"
  "        print \"  Dependence: '\" + dep + \"'\"\n"
  "      s = \"  Command: \"\n"
  "      for cmd in rule.mCommand:\n"
  "        s += \" \\\"\" + cmd + \"\\\"\"\n"
  "      print s\n"
  "      print \"  Title: '\" + rule.mTitle + \"'\"\n"
  "      index = 0\n"
  "      for (command, title) in rule.mPostCommands:\n"
  "        index = index + 1\n"
  "        s = \"  Post command \" + str (index) + \": \"\n"
  "        for cmd in command:\n"
  "          s += \" \\\"\" + cmd + \"\\\"\"\n"
  "        print s\n"
  "        print \"  Its title: '\" + title + \"'\"\n"
  "        \n"
  "    print BOLD_BLUE () + \"--- End of print rule ---\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def writeRuleDependancesInDotFile (self, dotFileName):\n"
  "    s = \"digraph G {\\n\"\n"
  "    s += \"  node [fontname=courier]\\n\"\n"
  "    arrowSet = set ()\n"
  "    for rule in self.mRuleList:\n"
  "      s += '  \"' + rule.mTarget + '\" [shape=rectangle]\\n'\n"
  "      for dep in rule.mDependences:\n"
  "        arrowSet.add ('  \"' + rule.mTarget + '\" -> \"' + dep + '\"\\n')\n"
  "    for arrow in arrowSet:\n"
  "      s += arrow\n"
  "    s += \"}\\n\"\n"
  "    f = open (dotFileName, \"w\")\n"
  "    f.write (s)\n"
  "    f.close ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def checkRules (self):\n"
  "    if self.mErrorCount == 0:\n"
  "      ruleList = copy.deepcopy (self.mRuleList)\n"
  "      index = 0\n"
  "      looping = True\n"
  "    #--- loop on rules\n"
  "      while looping:\n"
  "        looping = False\n"
  "        while index < len (ruleList):\n"
  "          aRule = ruleList [index]\n"
  "          index = index + 1\n"
  "        #--- Check dependance files have rule for building, or does exist\n"
  "          depIdx = 0\n"
  "          while depIdx < len (aRule.mDependences):\n"
  "            dep = aRule.mDependences [depIdx]\n"
  "            depIdx = depIdx + 1\n"
  "            hasBuildRule = False\n"
  "            for r in ruleList:\n"
  "              if dep == r.mTarget:\n"
  "                hasBuildRule = True\n"
  "                break\n"
  "            if not hasBuildRule:\n"
  "              looping = True\n"
  "              if not os.path.exists (os.path.abspath (dep)):\n"
  "                self.mErrorCount = self.mErrorCount + 1\n"
  "                print BOLD_RED () + \"Check rules error: '\" + dep + \"' does not exist, and there is no rule for building it.\" + ENDC ()\n"
  "              depIdx = depIdx - 1\n"
  "              aRule.mDependences.pop (depIdx)\n"
  "        #--- Rule with no dependances\n"
  "          if len (aRule.mDependences) == 0 :\n"
  "            looping = True\n"
  "            index = index - 1\n"
  "            ruleList.pop (index)\n"
  "            idx = 0\n"
  "            while idx < len (ruleList):\n"
  "              r = ruleList [idx]\n"
  "              idx = idx + 1\n"
  "              while r.mDependences.count (aRule.mTarget) > 0 :\n"
  "                r.mDependences.remove (aRule.mTarget)\n"
  "    #--- Error if rules remain\n"
  "      if len (ruleList) > 0:\n"
  "        self.mErrorCount = self.mErrorCount + 1\n"
  "        print BOLD_RED () + \"Check rules error; circulary dependances between:\" + ENDC ()\n"
  "        for aRule in ruleList: \n"
  "          print BOLD_RED () + \"  - '\" + aRule.mTarget + \"', depends from:\" + ENDC ()\n"
  "          for dep in aRule.mDependences:\n"
  "            print BOLD_RED () + \"      '\" + dep + \"'\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def existsJobForTarget (self, target):\n"
  "    for job in self.mJobList:\n"
  "      if job.mTarget == target:\n"
  "        return True\n"
  "    return False\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def makeJob (self, target): # Return a bool indicating wheither the target should be built\n"
  "  #--- If there are errors, return immediatly\n"
  "    if self.mErrorCount != 0:\n"
  "      return False\n"
  "  #--- Target already in job list \?\n"
  "    if self.existsJobForTarget (target):\n"
  "      return True # yes, return target will be built\n"
  "  #--- Find a rule for making the target\n"
  "    absTarget = os.path.abspath (target)\n"
  "    rule = None\n"
  "    matchCount = 0\n"
  "    for r in self.mRuleList:\n"
  "      if target == r.mTarget:\n"
  "        matchCount = matchCount + 1\n"
  "        rule = r\n"
  "    if matchCount == 0:\n"
  "      absTarget = os.path.abspath (target)\n"
  "      if not os.path.exists (absTarget):\n"
  "        print BOLD_RED () + \"No rule for making '\" + target + \"'\" + ENDC ()\n"
  "        self.mErrorCount = self.mErrorCount + 1\n"
  "      return False # Error or target exists, and no rule for building it\n"
  "    elif matchCount > 1:\n"
  "      print BOLD_RED () + str (matchCount) + \" rules for making '\" + target + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "      return False # Error\n"
  "  #--- Target file does not exist, and 'rule' variable indicates how build it\n"
  "    appendToJobList = not os.path.exists (absTarget)\n"
  "  #--- Build primary dependences\n"
  "    jobDependenceFiles = []\n"
  "    for dependence in rule.mDependences:\n"
  "      willBeBuilt = self.makeJob (dependence)\n"
  "      if willBeBuilt:\n"
  "        jobDependenceFiles.append (dependence)\n"
  "        appendToJobList = True\n"
  "  #--- Check primary file modification dates\n"
  "    if not appendToJobList:\n"
  "      targetDateModification = os.path.getmtime (absTarget)\n"
  "      for source in rule.mDependences:\n"
  "        sourceDateModification = os.path.getmtime (source)\n"
  "        if targetDateModification < sourceDateModification:\n"
  "          appendToJobList = True\n"
  "          break\n"
  "  #--- Check for secondary dependancy files\n"
  "    if not appendToJobList:\n"
  "      targetDateModification = os.path.getmtime (absTarget)\n"
  "      if targetDateModification < rule.mSecondaryMostRecentModificationDate:\n"
  "        appendToJobList = True\n"
  "  #--- Append to job list\n"
  "    if appendToJobList:\n"
  "      self.mJobList.append (Job (target, jobDependenceFiles, rule.mCommand, rule.mPostCommands, rule.mPriority, rule.mTitle))\n"
  "  #--- Return\n"
  "    return appendToJobList\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "  #Job state\n"
  "  # 0: waiting\n"
  "  # 1:running\n"
  "  # 2: waiting for executing post command\n"
  "  # 3:executing for executing post command\n"
  "  # 4: completed\n"
  "\n"
  "  def runJobs (self, maxConcurrentJobs, showCommand):\n"
  "    if self.mErrorCount == 0:\n"
  "      if len (self.mJobList) == 0:\n"
  "        print BOLD_BLUE () + \"Nothing to make.\" + ENDC ()\n"
  "      else:\n"
  "      #--- Sort jobs following their priorities\n"
  "        self.mJobList = sorted (self.mJobList, key=operator.attrgetter(\"mPriority\"), reverse=True)\n"
  "      #--- Run\n"
  "        if maxConcurrentJobs <= 0:\n"
  "          maxConcurrentJobs = processorCount () - maxConcurrentJobs\n"
  "        jobCount = 0 ;\n"
  "        terminationSemaphore = threading.Semaphore (0)\n"
  "        displayLock = threading.Lock ()\n"
  "        loop = True\n"
  "        returnCode = 0\n"
  "        while loop:\n"
  "        #--- Launch jobs in parallel\n"
  "          for job in self.mJobList:\n"
  "            if (returnCode == 0) and (jobCount < maxConcurrentJobs):\n"
  "              if (job.mState == 0) and (len (job.mRequiredFiles) == 0):\n"
  "                #--- Create target directory if does not exist\n"
  "                absTargetDirectory = os.path.dirname (os.path.abspath (job.mTarget))\n"
  "                if not os.path.exists (absTargetDirectory):\n"
  "                  displayLock.acquire ()\n"
  "                  runCommand ([\"mkdir\", \"-p\", absTargetDirectory], \"Making \" + absTargetDirectory + \" directory\", showCommand)\n"
  "                  displayLock.release ()\n"
  "                #--- Run job\n"
  "                job.run (displayLock, terminationSemaphore, showCommand)\n"
  "                jobCount = jobCount + 1\n"
  "                job.mState = 1 # Means is running\n"
  "              elif job.mState == 2: # Waiting for executing post command\n"
  "                job.mReturnCode = None # Means post command not terminated\n"
  "                job.runPostCommand (displayLock, terminationSemaphore, showCommand)\n"
  "                jobCount = jobCount + 1\n"
  "                job.mState = 3 # Means post command is running\n"
  "        #--- Wait for a job termination\n"
  "          #print \"wait \" + str (jobCount) + \" \" + str (len (self.mJobList))\n"
  "          terminationSemaphore.acquire ()\n"
  "        #--- Checks for terminated jobs\n"
  "          index = 0\n"
  "          while index < len (self.mJobList):\n"
  "            job = self.mJobList [index]\n"
  "            index = index + 1\n"
  "            if (job.mState == 1) and (job.mReturnCode == 0) : # Terminated without error\n"
  "              jobCount = jobCount - 1\n"
  "              if len (job.mPostCommands) > 0:\n"
  "                job.mState = 2 # Ready to execute next post command\n"
  "              else:\n"
  "                job.mState = 4 # Completed\n"
  "                index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 1) and (job.mReturnCode > 0) : # terminated with error : exit\n"
  "              jobCount = jobCount - 1\n"
  "              job.mState = 4 # Means Terminated\n"
  "              index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 3) and (job.mReturnCode == 0): # post command is terminated without error\n"
  "              jobCount = jobCount - 1\n"
  "              job.mPostCommands.pop (0) # Remove completed post command\n"
  "              if len (job.mPostCommands) > 0:\n"
  "                job.mState = 2 # Ready to execute next post command\n"
  "              else:\n"
  "                job.mState = 4 # Completed\n"
  "                index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 3) and (job.mReturnCode > 0): # post command is terminated with error\n"
  "              jobCount = jobCount - 1\n"
  "              job.mState = 4 # Completed\n"
  "              index = index - 1 # For removing job from list\n"
  "            elif job.mState == 4: # Completed: delete job\n"
  "              index = index - 1\n"
  "              self.mJobList.pop (index) # Remove terminated job\n"
  "              #displayLock.acquire ()\n"
  "              #print \"Completed '\" + job.mTitle + \"'\"\n"
  "              #--- Remove dependences from this job\n"
  "              idx = 0\n"
  "              while idx < len (self.mJobList):\n"
  "                aJob = self.mJobList [idx]\n"
  "                idx = idx + 1\n"
  "                while aJob.mRequiredFiles.count (job.mTarget) > 0 :\n"
  "                  aJob.mRequiredFiles.remove (job.mTarget)\n"
  "                  #print \"  Removed from '\" + aJob.mTitle + \"': \" + str (len (aJob.mRequiredFiles))\n"
  "              #displayLock.release ()\n"
  "              #--- Signal error \?\n"
  "              if (job.mReturnCode > 0) and (returnCode == 0):\n"
  "                self.mErrorCount = self.mErrorCount + 1\n"
  "                print BOLD_RED () + \"Return code: \" + str (job.mReturnCode) + ENDC ()\n"
  "                if (returnCode == 0) and (jobCount > 0) :\n"
  "                  print \"Wait for job termination...\"\n"
  "                returnCode = job.mReturnCode\n"
  "          loop = (len (self.mJobList) > 0) if (returnCode == 0) else (jobCount > 0)\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def searchFileInDirectories (self, file, directoryList): # returns \"\" if not found, register error\n"
  "    matchCount = 0\n"
  "    result = \"\"\n"
  "    for sourceDir in directoryList:\n"
  "      sourcePath = sourceDir + \"/\" + file\n"
  "      if os.path.exists (os.path.abspath (sourcePath)):\n"
  "        matchCount = matchCount + 1\n"
  "        result = sourcePath\n"
  "    if matchCount == 0:\n"
  "      print BOLD_RED () + \"Cannot find '\" + file + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "    elif matchCount > 1:\n"
  "      print BOLD_RED () + str (matchCount) + \" source files for making '\" + file + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "      result = \"\"\n"
  "    return result\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def addGoal (self, goal, targetList, message):\n"
  "    self.mGoals [goal] = (targetList, message)\n"
  "    #print '%s' % ', '.join(map(str, self.mGoals))\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printGoals (self):\n"
  "    print BOLD_BLUE () + \"--- Print the \" + str (len (self.mGoals)) + \" goal\" + (\"s\" if len (self.mGoals) > 1 else \"\") + \" ---\" + ENDC ()\n"
  "    for goalKey in self.mGoals.keys ():\n"
  "      print BOLD_GREEN () + \"Goal: '\" + goalKey + \"'\" + ENDC ()\n"
  "      (targetList, message) = self.mGoals [goalKey]\n"
  "      for target in targetList:\n"
  "        print \"  Target: '\" + target + \"'\"\n"
  "      print \"  Message: '\" + message + \"'\"\n"
  "        \n"
  "    print BOLD_BLUE () + \"--- End of print goals ---\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def runGoal (self, goal, maxConcurrentJobs, showCommand):\n"
  "    if self.mGoals.has_key (goal) :\n"
  "      (targetList, message) = self.mGoals [goal]\n"
  "      for target in targetList:\n"
  "        self.makeJob (target)\n"
  "      self.runJobs (maxConcurrentJobs, showCommand)\n"
  "    else:\n"
  "      errorMessage = \"The '\" + goal + \"' goal is not defined; defined goals:\"\n"
  "      for key in self.mGoals:\n"
  "        (targetList, message) = self.mGoals [key]\n"
  "        errorMessage += \"\\n  '\" + key + \"': \" + message\n"
  "      print BOLD_RED () + errorMessage + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def enterError (self, message):\n"
  "    print BOLD_RED () + message + ENDC ()\n"
  "    self.mErrorCount = self.mErrorCount + 1\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printErrorCountAndExitOnError (self):\n"
  "    if self.mErrorCount == 1:\n"
  "      print BOLD_RED () + \"1 error.\" + ENDC ()\n"
  "      sys.exit (1)\n"
  "    elif self.mErrorCount > 1:\n"
  "      print BOLD_RED () + str (self.mErrorCount) + \" errors.\" + ENDC ()\n"
  "      sys.exit (1)\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printErrorCount (self):\n"
  "    if self.mErrorCount == 1:\n"
  "      print BOLD_RED () + \"1 error.\" + ENDC ()\n"
  "    elif self.mErrorCount > 1:\n"
  "      print BOLD_RED () + str (self.mErrorCount) + \" errors.\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def errorCount (self):\n"
  "    return self.mErrorCount\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Source files                                                                                                       *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def sourceList ():\n"
  "  return [\"plm.c\", \"startup-sequential.c\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Product directory                                                                                                  *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def productDir ():\n"
  "  return \"product\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#                         Object files directories                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def objectDir ():\n"
  "  return \"objects\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#                         Object files directories                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def asDir ():\n"
  "  return \"as\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Tool dir                                                                                                           *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def toolDir ():\n"
  "  return os.path.expanduser (\"~/plm-tools/teensy-Intel-Darwin-binutils-2.25-gcc-4.9.2-newlib-2.2.0-libusb-1.0.19\")\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Compiler invocation                                                                                                *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def compiler ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-gcc\", \"-mthumb\", \"-mcpu=cortex-m4\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#    C Compiler options                                                                                                *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def cCompilerOptions ():\n"
  "  result = []\n"
  "  result.append (\"-Wall\")\n"
  "  result.append (\"-Werror\")\n"
  "  result.append (\"-Wreturn-type\")\n"
  "  result.append (\"-Wformat\")\n"
  "  result.append (\"-Wsign-compare\")\n"
  "  result.append (\"-Wpointer-arith\")\n"
  "  result.append (\"-Wparentheses\")\n"
  "  result.append (\"-Wcast-align\")\n"
  "  result.append (\"-Wcast-qual\")\n"
  "  result.append (\"-Wwrite-strings\")\n"
  "  result.append (\"-Wswitch\")\n"
  "  result.append (\"-Wuninitialized\")\n"
  "  result.append (\"-fno-builtin\")\n"
  "  result.append (\"-Wno-aggressive-loop-optimizations\")\n"
  "  result.append (\"-ffunction-sections\")\n"
  "  result.append (\"-fdata-sections\")\n"
  "  result.append (\"-std=c99\")\n"
  "  result.append (\"-Wstrict-prototypes\")\n"
  "  result.append (\"-Wbad-function-cast\")\n"
  "  result.append (\"-Wmissing-declarations\")\n"
  "  result.append (\"-Wimplicit-function-declaration\")\n"
  "  result.append (\"-Wno-int-to-pointer-cast\")\n"
  "  result.append (\"-Wno-pointer-to-int-cast\")\n"
  "  result.append (\"-Wmissing-prototypes\")\n"
  "  result.append (\"-Os\")\n"
  "  result.append (\"-fomit-frame-pointer\")\n"
  "  result.append (\"-foptimize-register-move\") \n"
  "  result.append (\"-I../build\")\n"
  "  return result\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Linker invocation                                                                                                  *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def linker ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-gcc\", \"-mthumb\", \"-mcpu=cortex-m4\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Linker options                                                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def linkerOptions ():\n"
  "  result = []\n"
  "  result.append (\"-nostartfiles\")\n"
  "  result.append (\"-Wl,--fatal-warnings\")\n"
  "  result.append (\"-Wl,--warn-common\")\n"
  "  result.append (\"-Wl,--no-undefined\")\n"
  "  result.append (\"-Wl,--cref\")\n"
  "  result.append (\"-lc\")\n"
  "  result.append (\"-lgcc\")\n"
  "  result.append (\"-Wl,-static\")\n"
  "  result.append (\"-Wl,-s\")\n"
  "  result.append (\"-Wl,--gc-sections\")\n"
  "  return result\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   objcopy invocation                                                                                                 *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def objcopy ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-objcopy\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Teensy loader                                                                                                      *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def teensyLoader ():\n"
  "  return toolDir () + \"/bin/teensy-loader-cli\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   ARCHIVE DOWNLOAD                                                                                                   *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def downloadReportHook (a,b,fileSize): \n"
  "  if fileSize < (1 << 10):\n"
  "    sizeString = str (fileSize)\n"
  "  else:\n"
  "    if fileSize < (1 << 20):\n"
  "      sizeString = str (fileSize >> 10) + \"Ki\"\n"
  "    else:\n"
  "      sizeString = str (fileSize >> 20) + \"Mi\"\n"
  "  # \",\" at the end of the line is important!\n"
  "  print \"% 3.1f%% of %sB\\r\" % (min(100.0, float(a * b) / fileSize * 100.0), sizeString),\n"
  "  sys.stdout.flush()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def downloadArchive (archiveURL, archivePath):\n"
  "  runSingleCommand ([\"rm\", \"-f\", archivePath + \".downloading\"])\n"
  "  runSingleCommand ([\"rm\", \"-f\", archivePath + \".tar.bz2\"])\n"
  "  runSingleCommand ([\"mkdir\", \"-p\", os.path.dirname (archivePath)])\n"
  "  print \"URL: \"+ archiveURL\n"
  "  print \"Downloading... \" + archivePath + \".downloading\"\n"
  "  urllib.urlretrieve (archiveURL,  archivePath + \".downloading\", downloadReportHook)\n"
  "  print \"\"\n"
  "  fileSize = os.path.getsize (archivePath + \".downloading\")\n"
  "  ok = fileSize > 1000000\n"
  "  if ok:\n"
  "    runSingleCommand ([\"mv\", archivePath + \".downloading\", archivePath + \".tar.bz2\"])\n"
  "  else:\n"
  "    print BOLD_RED () + \"Error: cannot download file\" + ENDC ()\n"
  "    sys.exit (1)\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   MAIN                                                                                                               *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Get max parallel jobs as first argument\n"
  "goal = \"all\"\n"
  "if len (sys.argv) > 1 :\n"
  "  goal = sys.argv [1]\n"
  "#--- Get max parallel jobs as first argument\n"
  "maxParallelJobs = 0 # 0 means use host processor count\n"
  "if len (sys.argv) > 2 :\n"
  "  maxParallelJobs = int (sys.argv [2])\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "#--- Download compiler tool if needed\n"
  "toolDirectory = toolDir ()\n"
  "if not os.path.exists (toolDirectory):\n"
  "  print BOLD_GREEN () + \"Downloading compiler tool chain\" + ENDC ()\n"
  "  archiveName = os.path.basename (toolDirectory)\n"
  "  archiveURL = \"http://crossgcc.rts-software.org/downloads/plm-tools/\" + archiveName + \".tar.bz2\"\n"
  "  downloadArchive (archiveURL, toolDirectory)\n"
  "  installDir = os.path.normpath (toolDirectory + \"/..\")\n"
  "  os.chdir (installDir)\n"
  "  runSingleCommand ([\"bunzip2\", \"-k\", archiveName + \".tar.bz2\"])\n"
  "  runSingleCommand ([\"rm\", archiveName + \".tar.bz2\"])\n"
  "  runSingleCommand ([\"tar\", \"xf\", archiveName + \".tar\"])\n"
  "  runSingleCommand ([\"rm\", archiveName + \".tar\"])\n"
  "#---\n"
  "os.chdir (scriptDir)\n"
  "#--- Build python makefile\n"
  "makefile = Make ()\n"
  "#--- Add C files compile rule\n"
  "objectList = []\n"
  "asObjectList = []\n"
  "for source in sourceList ():\n"
  "#--- Compile\n"
  "  object = objectDir () + \"/\" + source + \".o\"\n"
  "  rule = Rule (object, \"Compiling \" + source)\n"
  "  rule.mDependences.append (\"sources/\" + source)\n"
  "  rule.mCommand += compiler ()\n"
  "  rule.mCommand += cCompilerOptions ()\n"
  "  rule.mCommand += [\"-c\", \"sources/\" + source]\n"
  "  rule.mCommand += [\"-o\", object]\n"
  "  makefile.addRule (rule)\n"
  "  objectList.append (object)\n"
  "#--- Assembling\n"
  "  asObject = asDir () + \"/\" + source + \".s\"\n"
  "  rule = Rule (asObject, \"Assembling \" + source)\n"
  "  rule.mDependences.append (\"sources/\" + source)\n"
  "  rule.mCommand += compiler ()\n"
  "  rule.mCommand += cCompilerOptions ()\n"
  "  rule.mCommand += [\"-S\", \"sources/\" + source]\n"
  "  rule.mCommand += [\"-o\", asObject]\n"
  "  makefile.addRule (rule)\n"
  "  asObjectList.append (asObject)\n"
  "#--- Add linker rule\n"
  "productELF = productDir () + \"/product.elf\"\n"
  "rule = Rule (productELF, \"Linking \" + productELF)\n"
  "rule.mDependences += objectList\n"
  "rule.mCommand += linker ()\n"
  "rule.mCommand += linkerOptions ()\n"
  "rule.mCommand += objectList\n"
  "rule.mCommand += [\"-o\", productELF]\n"
  "rule.mCommand += [\"-Tsources/linker-script.ld\"]\n"
  "rule.mCommand += [\"-Wl,-Map=\" + productELF + \".map\"]\n"
  "makefile.addRule (rule)\n"
  "#--- Add objcopy rule\n"
  "productHEX = productDir () + \"/product.ihex\"\n"
  "rule = Rule (productHEX, \"Hexing \" + productHEX)\n"
  "rule.mDependences += [productELF]\n"
  "rule.mCommand += objcopy ()\n"
  "rule.mCommand += [\"-O\", \"ihex\"]\n"
  "rule.mCommand += [productELF]\n"
  "rule.mCommand += [productHEX]\n"
  "makefile.addRule (rule)\n"
  "#--- Add goals\n"
  "makefile.addGoal (\"run\", [productHEX], \"Building all and run\")\n"
  "makefile.addGoal (\"all\", [productHEX], \"Building all\")\n"
  "makefile.addGoal (\"as\", asObjectList, \"Assembling C files\")\n"
  "#--- Build\n"
  "#makefile.printRules ()\n"
  "makefile.runGoal (goal, maxParallelJobs, maxParallelJobs == 1)\n"
  "#--- Build Ok \?\n"
  "makefile.printErrorCountAndExitOnError ()\n"
  "#--- Run \?\n"
  "if goal == \"run\":\n"
  "  print BOLD_BLUE () + \"Loading Teensy...\" + ENDC ()\n"
  "  childProcess = subprocess.Popen ([teensyLoader (), \"-w\", \"-v\", \"-mmcu=mk20dx128\", productHEX])\n"
  "#--- Wait for subprocess termination\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    print BOLD_RED () + \"Error \" + str (childProcess.returncode) + ENDC ()\n"
  "    sys.exit (childProcess.returncode)\n"
  "  else:\n"
  "    print BOLD_GREEN () + \"Success\" + ENDC ()\n" ;

const cRegularFileWrapper gWrapperFile_13_targetTemplates (
  "build.py",
  "py",
  true, // Text file
  41653, // Text length
  gWrapperFileContent_13_targetTemplates
) ;

//--- File 'target-teensy-sequential-systick/clean.py'

const char * gWrapperFileContent_14_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "#--- Directories to clean\n"
  "dir1 = scriptDir + \"/objects\"\n"
  "dir2 = scriptDir + \"/product\"\n"
  "dir3 = scriptDir + \"/as\"\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"rm\", \"-fr\", dir1, dir2, dir3], cwd=scriptDir)\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_14_targetTemplates (
  "clean.py",
  "py",
  true, // Text file
  1264, // Text length
  gWrapperFileContent_14_targetTemplates
) ;

//--- File 'target-teensy-sequential-systick/flash-teensy-and-run.py'

const char * gWrapperFileContent_15_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"run\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_15_targetTemplates (
  "flash-teensy-and-run.py",
  "py",
  true, // Text file
  997, // Text length
  gWrapperFileContent_15_targetTemplates
) ;

//--- File 'sources/linker-script.ld'

const char * gWrapperFileContent_16_targetTemplates = "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                   Memory                                   */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "MEMORY {\n"
  "  flash (rx) : ORIGIN = 0, LENGTH = 256k \n"
  "  sram_u (rwx) : ORIGIN = 0x20000000, LENGTH = 32k \n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "__sram_u_end = 0x20000000 + 32k ;\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                ISR Vectors                                 */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .vectors : {\n"
  "    __vectors_start = . ;\n"
  "    KEEP (*(.isr_vector)) ;\n"
  "    __vectors_end = . ;\n"
  "  } > flash\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                    Code                                    */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .text : {\n"
  "    FILL(0xff)\n"
  "    __code_start = . ;\n"
  "  /*--- Tableau des routines d'initialisation */\n"
  "    . = ALIGN (4) ;\n"
  "    __init_routine_array_start = . ;\n"
  "    KEEP (*(init_routine_array)) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __init_routine_array_end = . ;\n"
  "  /*--- Initialisation des objets globaux C++ */\n"
  "    . = ALIGN (4) ;\n"
  "    __constructor_array_start = . ;\n"
  "    KEEP (*(.init_array)) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __constructor_array_end = . ;\n"
  "  /*--- Real Interrupt Service Routine Array */\n"
  "    . = ALIGN (4) ;\n"
  "    __real_time_isr_array_start = . ;\n"
  "    KEEP (*(real_time_isr_array)) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __real_time_isr_array_end = . ;\n"
  "  /*--- Code */\n"
  "    *(.text.*) ;\n"
  "    *(.text) ;\n"
  "    *(text) ;\n"
  "    *(.gnu.linkonce.t.*) ;\n"
  "  /*---- ROM data ----*/\n"
  "    . = ALIGN(4);\n"
  "    *(.rodata);\n"
  "    . = ALIGN(4);\n"
  "    *(.rodata*);\n"
  "    . = ALIGN(4);\n"
  "    *(.gnu.linkonce.r.*);\n"
  "    . = ALIGN(4);\n"
  "    *(.glue_7t);\n"
  "    . = ALIGN(4);\n"
  "    *(.glue_7);\n"
  "    . = ALIGN(4);\n"
  "  } > flash\n"
  "\n"
  "  .ARM.exidx : {\n"
  "    *(.ARM.exidx* .gnu.linkonce.armexidx.*);\n"
  "    __code_end = . ;\n"
  "  } > flash\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                          Data (initialized data)                           */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .data : {\n"
  "    FILL (0xFF)\n"
  "    . = ALIGN (4) ;\n"
  "    __data_start = . ;\n"
  "    * (.data.*init*) ;\n"
  "    * (.data*) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __data_end = . ;\n"
  "  } > sram_u AT > flash\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "__data_load_start = LOADADDR (.data) ;\n"
  "__data_load_end   = LOADADDR (.data) + SIZEOF (.data) ;\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                          BSS (uninitialized data)                          */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .bss : {\n"
  "    . = ALIGN(4);\n"
  "    __bss_start = . ;\n"
  "    * (.bss.*) ;\n"
  "    * (.bss) ;\n"
  "    * (COMMON) ;\n"
  "    . = ALIGN(4);\n"
  "    __bss_end = . ;\n"
  "  } > sram_u\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                System stack                                */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .system_stack :{\n"
  "    . = ALIGN (4) ;\n"
  "    __system_stack_start = . ;\n"
  "    . += 1k ;\n"
  "    . = ALIGN (4) ;\n"
  "    __system_stack_end = . ;\n"
  "  } > sram_u\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                    Heap                                    */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .heap : {\n"
  "    . = ALIGN (4) ;\n"
  "    __heap_start = . ;\n"
  "  } > sram_u\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "__heap_end = __sram_u_end ;\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n" ;

const cRegularFileWrapper gWrapperFile_16_targetTemplates (
  "linker-script.ld",
  "ld",
  true, // Text file
  5218, // Text length
  gWrapperFileContent_16_targetTemplates
) ;

//--- File 'sources/mk20dx256.h'

const char * gWrapperFileContent_17_targetTemplates = "/* Teensyduino Core Library\n"
  " * http://www.pjrc.com/teensy/\n"
  " * Copyright (c) 2013 PJRC.COM, LLC.\n"
  " *\n"
  " * Permission is hereby granted, free of charge, to any person obtaining\n"
  " * a copy of this software and associated documentation files (the\n"
  " * \"Software\"), to deal in the Software without restriction, including\n"
  " * without limitation the rights to use, copy, modify, merge, publish,\n"
  " * distribute, sublicense, and/or sell copies of the Software, and to\n"
  " * permit persons to whom the Software is furnished to do so, subject to\n"
  " * the following conditions:\n"
  " *\n"
  " * 1. The above copyright notice and this permission notice shall be \n"
  " * included in all copies or substantial portions of the Software.\n"
  " *\n"
  " * 2. If the Software is incorporated into a build system that allows \n"
  " * selection among a list of target devices, then similar target\n"
  " * devices manufactured by PJRC.COM must be included in the list of\n"
  " * target devices and selectable in the same manner.\n"
  " *\n"
  " * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
  " * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
  " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
  " * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n"
  " * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n"
  " * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n"
  " * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n"
  " * SOFTWARE.\n"
  " */\n"
  "\n"
  "#ifndef _mk20dx128_h_\n"
  "#define _mk20dx128_h_\n"
  "\n"
  "#define F_CPU 96000000\n"
  "#define __MK20DX256__\n"
  "//#define F_CPU 48000000\n"
  "//#define F_CPU 24000000\n"
  "//#define F_BUS 48000000\n"
  "//#define F_BUS 24000000\n"
  "//#define F_MEM 24000000\n"
  "\n"
  "#if (F_CPU == 96000000)\n"
  " #define F_BUS 48000000\n"
  " #define F_MEM 24000000\n"
  "#elif (F_CPU == 48000000)\n"
  " #define F_BUS 48000000\n"
  " #define F_MEM 24000000\n"
  "#elif (F_CPU == 24000000)\n"
  " #define F_BUS 24000000\n"
  " #define F_MEM 24000000\n"
  "#endif\n"
  "\n"
  "\n"
  "#include <stdint.h>\n"
  "\n"
  "#ifdef __cplusplus\n"
  "extern \"C\" {\n"
  "#endif\n"
  "\n"
  "// chapter 11: Port control and interrupts (PORT)\n"
  "#define PORTA_PCR0\t\t*(volatile uint32_t *)0x40049000 // Pin Control Register n\n"
  "#define PORT_PCR_ISF\t\t\t(uint32_t)0x01000000\t\t// Interrupt Status Flag\n"
  "#define PORT_PCR_IRQC(n)\t\t(uint32_t)(((n) & 15) << 16)\t// Interrupt Configuration\n"
  "#define PORT_PCR_IRQC_MASK\t\t(uint32_t)0x000F0000\n"
  "#define PORT_PCR_LK\t\t\t(uint32_t)0x00008000\t\t// Lock Register\n"
  "#define PORT_PCR_MUX(n)\t\t\t(uint32_t)(((n) & 7) << 8)\t// Pin Mux Control\n"
  "#define PORT_PCR_MUX_MASK\t\t(uint32_t)0x00000700\n"
  "#define PORT_PCR_DSE\t\t\t(uint32_t)0x00000040\t\t// Drive Strength Enable\n"
  "#define PORT_PCR_ODE\t\t\t(uint32_t)0x00000020\t\t// Open Drain Enable\n"
  "#define PORT_PCR_PFE\t\t\t(uint32_t)0x00000010\t\t// Passive Filter Enable\n"
  "#define PORT_PCR_SRE\t\t\t(uint32_t)0x00000004\t\t// Slew Rate Enable\n"
  "#define PORT_PCR_PE\t\t\t(uint32_t)0x00000002\t\t// Pull Enable\n"
  "#define PORT_PCR_PS\t\t\t(uint32_t)0x00000001\t\t// Pull Select\n"
  "#define PORTA_PCR1\t\t*(volatile uint32_t *)0x40049004 // Pin Control Register n\n"
  "#define PORTA_PCR2\t\t*(volatile uint32_t *)0x40049008 // Pin Control Register n\n"
  "#define PORTA_PCR3\t\t*(volatile uint32_t *)0x4004900C // Pin Control Register n\n"
  "#define PORTA_PCR4\t\t*(volatile uint32_t *)0x40049010 // Pin Control Register n\n"
  "#define PORTA_PCR5\t\t*(volatile uint32_t *)0x40049014 // Pin Control Register n\n"
  "#define PORTA_PCR6\t\t*(volatile uint32_t *)0x40049018 // Pin Control Register n\n"
  "#define PORTA_PCR7\t\t*(volatile uint32_t *)0x4004901C // Pin Control Register n\n"
  "#define PORTA_PCR8\t\t*(volatile uint32_t *)0x40049020 // Pin Control Register n\n"
  "#define PORTA_PCR9\t\t*(volatile uint32_t *)0x40049024 // Pin Control Register n\n"
  "#define PORTA_PCR10\t\t*(volatile uint32_t *)0x40049028 // Pin Control Register n\n"
  "#define PORTA_PCR11\t\t*(volatile uint32_t *)0x4004902C // Pin Control Register n\n"
  "#define PORTA_PCR12\t\t*(volatile uint32_t *)0x40049030 // Pin Control Register n\n"
  "#define PORTA_PCR13\t\t*(volatile uint32_t *)0x40049034 // Pin Control Register n\n"
  "#define PORTA_PCR14\t\t*(volatile uint32_t *)0x40049038 // Pin Control Register n\n"
  "#define PORTA_PCR15\t\t*(volatile uint32_t *)0x4004903C // Pin Control Register n\n"
  "#define PORTA_PCR16\t\t*(volatile uint32_t *)0x40049040 // Pin Control Register n\n"
  "#define PORTA_PCR17\t\t*(volatile uint32_t *)0x40049044 // Pin Control Register n\n"
  "#define PORTA_PCR18\t\t*(volatile uint32_t *)0x40049048 // Pin Control Register n\n"
  "#define PORTA_PCR19\t\t*(volatile uint32_t *)0x4004904C // Pin Control Register n\n"
  "#define PORTA_PCR20\t\t*(volatile uint32_t *)0x40049050 // Pin Control Register n\n"
  "#define PORTA_PCR21\t\t*(volatile uint32_t *)0x40049054 // Pin Control Register n\n"
  "#define PORTA_PCR22\t\t*(volatile uint32_t *)0x40049058 // Pin Control Register n\n"
  "#define PORTA_PCR23\t\t*(volatile uint32_t *)0x4004905C // Pin Control Register n\n"
  "#define PORTA_PCR24\t\t*(volatile uint32_t *)0x40049060 // Pin Control Register n\n"
  "#define PORTA_PCR25\t\t*(volatile uint32_t *)0x40049064 // Pin Control Register n\n"
  "#define PORTA_PCR26\t\t*(volatile uint32_t *)0x40049068 // Pin Control Register n\n"
  "#define PORTA_PCR27\t\t*(volatile uint32_t *)0x4004906C // Pin Control Register n\n"
  "#define PORTA_PCR28\t\t*(volatile uint32_t *)0x40049070 // Pin Control Register n\n"
  "#define PORTA_PCR29\t\t*(volatile uint32_t *)0x40049074 // Pin Control Register n\n"
  "#define PORTA_PCR30\t\t*(volatile uint32_t *)0x40049078 // Pin Control Register n\n"
  "#define PORTA_PCR31\t\t*(volatile uint32_t *)0x4004907C // Pin Control Register n\n"
  "#define PORTA_GPCLR\t\t*(volatile uint32_t *)0x40049080 // Global Pin Control Low Register\n"
  "#define PORTA_GPCHR\t\t*(volatile uint32_t *)0x40049084 // Global Pin Control High Register\n"
  "#define PORTA_ISFR\t\t*(volatile uint32_t *)0x400490A0 // Interrupt Status Flag Register\n"
  "#define PORTB_PCR0\t\t*(volatile uint32_t *)0x4004A000 // Pin Control Register n\n"
  "#define PORTB_PCR1\t\t*(volatile uint32_t *)0x4004A004 // Pin Control Register n\n"
  "#define PORTB_PCR2\t\t*(volatile uint32_t *)0x4004A008 // Pin Control Register n\n"
  "#define PORTB_PCR3\t\t*(volatile uint32_t *)0x4004A00C // Pin Control Register n\n"
  "#define PORTB_PCR4\t\t*(volatile uint32_t *)0x4004A010 // Pin Control Register n\n"
  "#define PORTB_PCR5\t\t*(volatile uint32_t *)0x4004A014 // Pin Control Register n\n"
  "#define PORTB_PCR6\t\t*(volatile uint32_t *)0x4004A018 // Pin Control Register n\n"
  "#define PORTB_PCR7\t\t*(volatile uint32_t *)0x4004A01C // Pin Control Register n\n"
  "#define PORTB_PCR8\t\t*(volatile uint32_t *)0x4004A020 // Pin Control Register n\n"
  "#define PORTB_PCR9\t\t*(volatile uint32_t *)0x4004A024 // Pin Control Register n\n"
  "#define PORTB_PCR10\t\t*(volatile uint32_t *)0x4004A028 // Pin Control Register n\n"
  "#define PORTB_PCR11\t\t*(volatile uint32_t *)0x4004A02C // Pin Control Register n\n"
  "#define PORTB_PCR12\t\t*(volatile uint32_t *)0x4004A030 // Pin Control Register n\n"
  "#define PORTB_PCR13\t\t*(volatile uint32_t *)0x4004A034 // Pin Control Register n\n"
  "#define PORTB_PCR14\t\t*(volatile uint32_t *)0x4004A038 // Pin Control Register n\n"
  "#define PORTB_PCR15\t\t*(volatile uint32_t *)0x4004A03C // Pin Control Register n\n"
  "#define PORTB_PCR16\t\t*(volatile uint32_t *)0x4004A040 // Pin Control Register n\n"
  "#define PORTB_PCR17\t\t*(volatile uint32_t *)0x4004A044 // Pin Control Register n\n"
  "#define PORTB_PCR18\t\t*(volatile uint32_t *)0x4004A048 // Pin Control Register n\n"
  "#define PORTB_PCR19\t\t*(volatile uint32_t *)0x4004A04C // Pin Control Register n\n"
  "#define PORTB_PCR20\t\t*(volatile uint32_t *)0x4004A050 // Pin Control Register n\n"
  "#define PORTB_PCR21\t\t*(volatile uint32_t *)0x4004A054 // Pin Control Register n\n"
  "#define PORTB_PCR22\t\t*(volatile uint32_t *)0x4004A058 // Pin Control Register n\n"
  "#define PORTB_PCR23\t\t*(volatile uint32_t *)0x4004A05C // Pin Control Register n\n"
  "#define PORTB_PCR24\t\t*(volatile uint32_t *)0x4004A060 // Pin Control Register n\n"
  "#define PORTB_PCR25\t\t*(volatile uint32_t *)0x4004A064 // Pin Control Register n\n"
  "#define PORTB_PCR26\t\t*(volatile uint32_t *)0x4004A068 // Pin Control Register n\n"
  "#define PORTB_PCR27\t\t*(volatile uint32_t *)0x4004A06C // Pin Control Register n\n"
  "#define PORTB_PCR28\t\t*(volatile uint32_t *)0x4004A070 // Pin Control Register n\n"
  "#define PORTB_PCR29\t\t*(volatile uint32_t *)0x4004A074 // Pin Control Register n\n"
  "#define PORTB_PCR30\t\t*(volatile uint32_t *)0x4004A078 // Pin Control Register n\n"
  "#define PORTB_PCR31\t\t*(volatile uint32_t *)0x4004A07C // Pin Control Register n\n"
  "#define PORTB_GPCLR\t\t*(volatile uint32_t *)0x4004A080 // Global Pin Control Low Register\n"
  "#define PORTB_GPCHR\t\t*(volatile uint32_t *)0x4004A084 // Global Pin Control High Register\n"
  "#define PORTB_ISFR\t\t*(volatile uint32_t *)0x4004A0A0 // Interrupt Status Flag Register\n"
  "#define PORTC_PCR0\t\t*(volatile uint32_t *)0x4004B000 // Pin Control Register n\n"
  "#define PORTC_PCR1\t\t*(volatile uint32_t *)0x4004B004 // Pin Control Register n\n"
  "#define PORTC_PCR2\t\t*(volatile uint32_t *)0x4004B008 // Pin Control Register n\n"
  "#define PORTC_PCR3\t\t*(volatile uint32_t *)0x4004B00C // Pin Control Register n\n"
  "#define PORTC_PCR4\t\t*(volatile uint32_t *)0x4004B010 // Pin Control Register n\n"
  "#define PORTC_PCR5\t\t*(volatile uint32_t *)0x4004B014 // Pin Control Register n\n"
  "#define PORTC_PCR6\t\t*(volatile uint32_t *)0x4004B018 // Pin Control Register n\n"
  "#define PORTC_PCR7\t\t*(volatile uint32_t *)0x4004B01C // Pin Control Register n\n"
  "#define PORTC_PCR8\t\t*(volatile uint32_t *)0x4004B020 // Pin Control Register n\n"
  "#define PORTC_PCR9\t\t*(volatile uint32_t *)0x4004B024 // Pin Control Register n\n"
  "#define PORTC_PCR10\t\t*(volatile uint32_t *)0x4004B028 // Pin Control Register n\n"
  "#define PORTC_PCR11\t\t*(volatile uint32_t *)0x4004B02C // Pin Control Register n\n"
  "#define PORTC_PCR12\t\t*(volatile uint32_t *)0x4004B030 // Pin Control Register n\n"
  "#define PORTC_PCR13\t\t*(volatile uint32_t *)0x4004B034 // Pin Control Register n\n"
  "#define PORTC_PCR14\t\t*(volatile uint32_t *)0x4004B038 // Pin Control Register n\n"
  "#define PORTC_PCR15\t\t*(volatile uint32_t *)0x4004B03C // Pin Control Register n\n"
  "#define PORTC_PCR16\t\t*(volatile uint32_t *)0x4004B040 // Pin Control Register n\n"
  "#define PORTC_PCR17\t\t*(volatile uint32_t *)0x4004B044 // Pin Control Register n\n"
  "#define PORTC_PCR18\t\t*(volatile uint32_t *)0x4004B048 // Pin Control Register n\n"
  "#define PORTC_PCR19\t\t*(volatile uint32_t *)0x4004B04C // Pin Control Register n\n"
  "#define PORTC_PCR20\t\t*(volatile uint32_t *)0x4004B050 // Pin Control Register n\n"
  "#define PORTC_PCR21\t\t*(volatile uint32_t *)0x4004B054 // Pin Control Register n\n"
  "#define PORTC_PCR22\t\t*(volatile uint32_t *)0x4004B058 // Pin Control Register n\n"
  "#define PORTC_PCR23\t\t*(volatile uint32_t *)0x4004B05C // Pin Control Register n\n"
  "#define PORTC_PCR24\t\t*(volatile uint32_t *)0x4004B060 // Pin Control Register n\n"
  "#define PORTC_PCR25\t\t*(volatile uint32_t *)0x4004B064 // Pin Control Register n\n"
  "#define PORTC_PCR26\t\t*(volatile uint32_t *)0x4004B068 // Pin Control Register n\n"
  "#define PORTC_PCR27\t\t*(volatile uint32_t *)0x4004B06C // Pin Control Register n\n"
  "#define PORTC_PCR28\t\t*(volatile uint32_t *)0x4004B070 // Pin Control Register n\n"
  "#define PORTC_PCR29\t\t*(volatile uint32_t *)0x4004B074 // Pin Control Register n\n"
  "#define PORTC_PCR30\t\t*(volatile uint32_t *)0x4004B078 // Pin Control Register n\n"
  "#define PORTC_PCR31\t\t*(volatile uint32_t *)0x4004B07C // Pin Control Register n\n"
  "#define PORTC_GPCLR\t\t*(volatile uint32_t *)0x4004B080 // Global Pin Control Low Register\n"
  "#define PORTC_GPCHR\t\t*(volatile uint32_t *)0x4004B084 // Global Pin Control High Register\n"
  "#define PORTC_ISFR\t\t*(volatile uint32_t *)0x4004B0A0 // Interrupt Status Flag Register\n"
  "#define PORTD_PCR0\t\t*(volatile uint32_t *)0x4004C000 // Pin Control Register n\n"
  "#define PORTD_PCR1\t\t*(volatile uint32_t *)0x4004C004 // Pin Control Register n\n"
  "#define PORTD_PCR2\t\t*(volatile uint32_t *)0x4004C008 // Pin Control Register n\n"
  "#define PORTD_PCR3\t\t*(volatile uint32_t *)0x4004C00C // Pin Control Register n\n"
  "#define PORTD_PCR4\t\t*(volatile uint32_t *)0x4004C010 // Pin Control Register n\n"
  "#define PORTD_PCR5\t\t*(volatile uint32_t *)0x4004C014 // Pin Control Register n\n"
  "#define PORTD_PCR6\t\t*(volatile uint32_t *)0x4004C018 // Pin Control Register n\n"
  "#define PORTD_PCR7\t\t*(volatile uint32_t *)0x4004C01C // Pin Control Register n\n"
  "#define PORTD_PCR8\t\t*(volatile uint32_t *)0x4004C020 // Pin Control Register n\n"
  "#define PORTD_PCR9\t\t*(volatile uint32_t *)0x4004C024 // Pin Control Register n\n"
  "#define PORTD_PCR10\t\t*(volatile uint32_t *)0x4004C028 // Pin Control Register n\n"
  "#define PORTD_PCR11\t\t*(volatile uint32_t *)0x4004C02C // Pin Control Register n\n"
  "#define PORTD_PCR12\t\t*(volatile uint32_t *)0x4004C030 // Pin Control Register n\n"
  "#define PORTD_PCR13\t\t*(volatile uint32_t *)0x4004C034 // Pin Control Register n\n"
  "#define PORTD_PCR14\t\t*(volatile uint32_t *)0x4004C038 // Pin Control Register n\n"
  "#define PORTD_PCR15\t\t*(volatile uint32_t *)0x4004C03C // Pin Control Register n\n"
  "#define PORTD_PCR16\t\t*(volatile uint32_t *)0x4004C040 // Pin Control Register n\n"
  "#define PORTD_PCR17\t\t*(volatile uint32_t *)0x4004C044 // Pin Control Register n\n"
  "#define PORTD_PCR18\t\t*(volatile uint32_t *)0x4004C048 // Pin Control Register n\n"
  "#define PORTD_PCR19\t\t*(volatile uint32_t *)0x4004C04C // Pin Control Register n\n"
  "#define PORTD_PCR20\t\t*(volatile uint32_t *)0x4004C050 // Pin Control Register n\n"
  "#define PORTD_PCR21\t\t*(volatile uint32_t *)0x4004C054 // Pin Control Register n\n"
  "#define PORTD_PCR22\t\t*(volatile uint32_t *)0x4004C058 // Pin Control Register n\n"
  "#define PORTD_PCR23\t\t*(volatile uint32_t *)0x4004C05C // Pin Control Register n\n"
  "#define PORTD_PCR24\t\t*(volatile uint32_t *)0x4004C060 // Pin Control Register n\n"
  "#define PORTD_PCR25\t\t*(volatile uint32_t *)0x4004C064 // Pin Control Register n\n"
  "#define PORTD_PCR26\t\t*(volatile uint32_t *)0x4004C068 // Pin Control Register n\n"
  "#define PORTD_PCR27\t\t*(volatile uint32_t *)0x4004C06C // Pin Control Register n\n"
  "#define PORTD_PCR28\t\t*(volatile uint32_t *)0x4004C070 // Pin Control Register n\n"
  "#define PORTD_PCR29\t\t*(volatile uint32_t *)0x4004C074 // Pin Control Register n\n"
  "#define PORTD_PCR30\t\t*(volatile uint32_t *)0x4004C078 // Pin Control Register n\n"
  "#define PORTD_PCR31\t\t*(volatile uint32_t *)0x4004C07C // Pin Control Register n\n"
  "#define PORTD_GPCLR\t\t*(volatile uint32_t *)0x4004C080 // Global Pin Control Low Register\n"
  "#define PORTD_GPCHR\t\t*(volatile uint32_t *)0x4004C084 // Global Pin Control High Register\n"
  "#define PORTD_ISFR\t\t*(volatile uint32_t *)0x4004C0A0 // Interrupt Status Flag Register\n"
  "#define PORTE_PCR0\t\t*(volatile uint32_t *)0x4004D000 // Pin Control Register n\n"
  "#define PORTE_PCR1\t\t*(volatile uint32_t *)0x4004D004 // Pin Control Register n\n"
  "#define PORTE_PCR2\t\t*(volatile uint32_t *)0x4004D008 // Pin Control Register n\n"
  "#define PORTE_PCR3\t\t*(volatile uint32_t *)0x4004D00C // Pin Control Register n\n"
  "#define PORTE_PCR4\t\t*(volatile uint32_t *)0x4004D010 // Pin Control Register n\n"
  "#define PORTE_PCR5\t\t*(volatile uint32_t *)0x4004D014 // Pin Control Register n\n"
  "#define PORTE_PCR6\t\t*(volatile uint32_t *)0x4004D018 // Pin Control Register n\n"
  "#define PORTE_PCR7\t\t*(volatile uint32_t *)0x4004D01C // Pin Control Register n\n"
  "#define PORTE_PCR8\t\t*(volatile uint32_t *)0x4004D020 // Pin Control Register n\n"
  "#define PORTE_PCR9\t\t*(volatile uint32_t *)0x4004D024 // Pin Control Register n\n"
  "#define PORTE_PCR10\t\t*(volatile uint32_t *)0x4004D028 // Pin Control Register n\n"
  "#define PORTE_PCR11\t\t*(volatile uint32_t *)0x4004D02C // Pin Control Register n\n"
  "#define PORTE_PCR12\t\t*(volatile uint32_t *)0x4004D030 // Pin Control Register n\n"
  "#define PORTE_PCR13\t\t*(volatile uint32_t *)0x4004D034 // Pin Control Register n\n"
  "#define PORTE_PCR14\t\t*(volatile uint32_t *)0x4004D038 // Pin Control Register n\n"
  "#define PORTE_PCR15\t\t*(volatile uint32_t *)0x4004D03C // Pin Control Register n\n"
  "#define PORTE_PCR16\t\t*(volatile uint32_t *)0x4004D040 // Pin Control Register n\n"
  "#define PORTE_PCR17\t\t*(volatile uint32_t *)0x4004D044 // Pin Control Register n\n"
  "#define PORTE_PCR18\t\t*(volatile uint32_t *)0x4004D048 // Pin Control Register n\n"
  "#define PORTE_PCR19\t\t*(volatile uint32_t *)0x4004D04C // Pin Control Register n\n"
  "#define PORTE_PCR20\t\t*(volatile uint32_t *)0x4004D050 // Pin Control Register n\n"
  "#define PORTE_PCR21\t\t*(volatile uint32_t *)0x4004D054 // Pin Control Register n\n"
  "#define PORTE_PCR22\t\t*(volatile uint32_t *)0x4004D058 // Pin Control Register n\n"
  "#define PORTE_PCR23\t\t*(volatile uint32_t *)0x4004D05C // Pin Control Register n\n"
  "#define PORTE_PCR24\t\t*(volatile uint32_t *)0x4004D060 // Pin Control Register n\n"
  "#define PORTE_PCR25\t\t*(volatile uint32_t *)0x4004D064 // Pin Control Register n\n"
  "#define PORTE_PCR26\t\t*(volatile uint32_t *)0x4004D068 // Pin Control Register n\n"
  "#define PORTE_PCR27\t\t*(volatile uint32_t *)0x4004D06C // Pin Control Register n\n"
  "#define PORTE_PCR28\t\t*(volatile uint32_t *)0x4004D070 // Pin Control Register n\n"
  "#define PORTE_PCR29\t\t*(volatile uint32_t *)0x4004D074 // Pin Control Register n\n"
  "#define PORTE_PCR30\t\t*(volatile uint32_t *)0x4004D078 // Pin Control Register n\n"
  "#define PORTE_PCR31\t\t*(volatile uint32_t *)0x4004D07C // Pin Control Register n\n"
  "#define PORTE_GPCLR\t\t*(volatile uint32_t *)0x4004D080 // Global Pin Control Low Register\n"
  "#define PORTE_GPCHR\t\t*(volatile uint32_t *)0x4004D084 // Global Pin Control High Register\n"
  "#define PORTE_ISFR\t\t*(volatile uint32_t *)0x4004D0A0 // Interrupt Status Flag Register\n"
  "\n"
  "// Chapter 12: System Integration Module (SIM)\n"
  "#define SIM_SOPT1\t\t*(volatile uint32_t *)0x40047000 // System Options Register 1\n"
  "#define SIM_SOPT1CFG\t\t*(volatile uint32_t *)0x40047004 // SOPT1 Configuration Register\n"
  "#define SIM_SOPT2\t\t*(volatile uint32_t *)0x40048004 // System Options Register 2\n"
  "#define SIM_SOPT2_USBSRC\t\t(uint32_t)0x00040000\t\t// 0=USB_CLKIN, 1=FFL/PLL \n"
  "#define SIM_SOPT2_PLLFLLSEL\t\t(uint32_t)0x00010000\t\t// 0=FLL, 1=PLL\n"
  "#define SIM_SOPT2_TRACECLKSEL\t\t(uint32_t)0x00001000\t\t// 0=MCGOUTCLK, 1=CPU\n"
  "#define SIM_SOPT2_PTD7PAD\t\t(uint32_t)0x00000800\t\t// 0=normal, 1=double drive PTD7\n"
  "#define SIM_SOPT2_CLKOUTSEL(n)\t\t(uint32_t)(((n) & 7) << 5)\t// Selects the clock to output on the CLKOUT pin.\n"
  "#define SIM_SOPT2_RTCCLKOUTSEL\t\t(uint32_t)0x00000010\t\t// RTC clock out select\n"
  "#define SIM_SOPT4\t\t*(volatile uint32_t *)0x4004800C // System Options Register 4\n"
  "#define SIM_SOPT5\t\t*(volatile uint32_t *)0x40048010 // System Options Register 5\n"
  "#define SIM_SOPT7\t\t*(volatile uint32_t *)0x40048018 // System Options Register 7\n"
  "#define SIM_SDID\t\t*(const\t   uint32_t *)0x40048024 // System Device Identification Register\n"
  "#define SIM_SCGC2\t\t*(volatile uint32_t *)0x4004802C // System Clock Gating Control Register 2\n"
  "#define SIM_SCGC2_DAC0\t\t\t(uint32_t)0x00001000\t\t// DAC0 Clock Gate Control\n"
  "#define SIM_SCGC3\t\t*(volatile uint32_t *)0x40048030 // System Clock Gating Control Register 3\n"
  "#define SIM_SCGC3_ADC1\t\t\t(uint32_t)0x08000000\t\t// ADC1 Clock Gate Control\n"
  "#define SIM_SCGC3_FTM2\t\t\t(uint32_t)0x01000000\t\t// FTM2 Clock Gate Control\n"
  "#define SIM_SCGC4\t\t*(volatile uint32_t *)0x40048034 // System Clock Gating Control Register 4\n"
  "#define SIM_SCGC4_VREF\t\t\t(uint32_t)0x00100000\t\t// VREF Clock Gate Control\n"
  "#define SIM_SCGC4_CMP\t\t\t(uint32_t)0x00080000\t\t// Comparator Clock Gate Control\n"
  "#define SIM_SCGC4_USBOTG\t\t(uint32_t)0x00040000\t\t// USB Clock Gate Control\n"
  "#define SIM_SCGC4_UART2\t\t\t(uint32_t)0x00001000\t\t// UART2 Clock Gate Control\n"
  "#define SIM_SCGC4_UART1\t\t\t(uint32_t)0x00000800\t\t// UART1 Clock Gate Control\n"
  "#define SIM_SCGC4_UART0\t\t\t(uint32_t)0x00000400\t\t// UART0 Clock Gate Control\n"
  "#define SIM_SCGC4_I2C1\t\t\t(uint32_t)0x00000080\t\t// I2C1 Clock Gate Control\n"
  "#define SIM_SCGC4_I2C0\t\t\t(uint32_t)0x00000040\t\t// I2C0 Clock Gate Control\n"
  "#define SIM_SCGC4_CMT\t\t\t(uint32_t)0x00000004\t\t// CMT Clock Gate Control\n"
  "#define SIM_SCGC4_EWM\t\t\t(uint32_t)0x00000002\t\t// EWM Clock Gate Control\n"
  "#define SIM_SCGC5\t\t*(volatile uint32_t *)0x40048038 // System Clock Gating Control Register 5\n"
  "#define SIM_SCGC5_PORTE\t\t\t(uint32_t)0x00002000\t\t// Port E Clock Gate Control\n"
  "#define SIM_SCGC5_PORTD\t\t\t(uint32_t)0x00001000\t\t// Port D Clock Gate Control\n"
  "#define SIM_SCGC5_PORTC\t\t\t(uint32_t)0x00000800\t\t// Port C Clock Gate Control\n"
  "#define SIM_SCGC5_PORTB\t\t\t(uint32_t)0x00000400\t\t// Port B Clock Gate Control\n"
  "#define SIM_SCGC5_PORTA\t\t\t(uint32_t)0x00000200\t\t// Port A Clock Gate Control\n"
  "#define SIM_SCGC5_TSI\t\t\t(uint32_t)0x00000020\t\t// Touch Sense Input TSI Clock Gate Control\n"
  "#define SIM_SCGC5_LPTIMER\t\t(uint32_t)0x00000001\t\t// Low Power Timer Access Control\n"
  "#define SIM_SCGC6\t\t*(volatile uint32_t *)0x4004803C // System Clock Gating Control Register 6\n"
  "#define SIM_SCGC6_RTC\t\t\t(uint32_t)0x20000000\t\t// RTC Access\n"
  "#define SIM_SCGC6_ADC0\t\t\t(uint32_t)0x08000000\t\t// ADC0 Clock Gate Control\n"
  "#define SIM_SCGC6_FTM1\t\t\t(uint32_t)0x02000000\t\t// FTM1 Clock Gate Control\n"
  "#define SIM_SCGC6_FTM0\t\t\t(uint32_t)0x01000000\t\t// FTM0 Clock Gate Control\n"
  "#define SIM_SCGC6_PIT\t\t\t(uint32_t)0x00800000\t\t// PIT Clock Gate Control\n"
  "#define SIM_SCGC6_PDB\t\t\t(uint32_t)0x00400000\t\t// PDB Clock Gate Control\n"
  "#define SIM_SCGC6_USBDCD\t\t(uint32_t)0x00200000\t\t// USB DCD Clock Gate Control\n"
  "#define SIM_SCGC6_CRC\t\t\t(uint32_t)0x00040000\t\t// CRC Clock Gate Control\n"
  "#define SIM_SCGC6_I2S\t\t\t(uint32_t)0x00008000\t\t// I2S Clock Gate Control\n"
  "#define SIM_SCGC6_SPI1\t\t\t(uint32_t)0x00002000\t\t// SPI1 Clock Gate Control\n"
  "#define SIM_SCGC6_SPI0\t\t\t(uint32_t)0x00001000\t\t// SPI0 Clock Gate Control\n"
  "#define SIM_SCGC6_FLEXCAN0\t\t(uint32_t)0x00000010\t\t// FlexCAN0 Clock Gate Control\n"
  "#define SIM_SCGC6_DMAMUX\t\t(uint32_t)0x00000002\t\t// DMA Mux Clock Gate Control\n"
  "#define SIM_SCGC6_FTFL\t\t\t(uint32_t)0x00000001\t\t// Flash Memory Clock Gate Control\n"
  "#define SIM_SCGC7\t\t*(volatile uint32_t *)0x40048040 // System Clock Gating Control Register 7\n"
  "#define SIM_SCGC7_DMA\t\t\t(uint32_t)0x00000002\t\t// DMA Clock Gate Control\n"
  "#define SIM_CLKDIV1\t\t*(volatile uint32_t *)0x40048044 // System Clock Divider Register 1\n"
  "#define SIM_CLKDIV1_OUTDIV1(n)\t\t(uint32_t)(((n) & 0x0F) << 28)\t// divide value for the core/system clock\n"
  "#define SIM_CLKDIV1_OUTDIV2(n)\t\t(uint32_t)(((n) & 0x0F) << 24)\t// divide value for the peripheral clock\n"
  "#define SIM_CLKDIV1_OUTDIV4(n)\t\t(uint32_t)(((n) & 0x0F) << 16)\t// divide value for the flash clock\n"
  "#define SIM_CLKDIV2\t\t*(volatile uint32_t *)0x40048048 // System Clock Divider Register 2\n"
  "#define SIM_CLKDIV2_USBDIV(n)\t\t(uint32_t)(((n) & 0x07) << 1)\n"
  "#define SIM_CLKDIV2_USBFRAC\t\t(uint32_t)0x01\n"
  "#define SIM_FCFG1\t\t*(const\t   uint32_t *)0x4004804C // Flash Configuration Register 1\n"
  "#define SIM_FCFG2\t\t*(const\t   uint32_t *)0x40048050 // Flash Configuration Register 2\n"
  "#define SIM_UIDH\t\t*(const\t   uint32_t *)0x40048054 // Unique Identification Register High\n"
  "#define SIM_UIDMH\t\t*(const\t   uint32_t *)0x40048058 // Unique Identification Register Mid-High\n"
  "#define SIM_UIDML\t\t*(const\t   uint32_t *)0x4004805C // Unique Identification Register Mid Low\n"
  "#define SIM_UIDL\t\t*(const\t   uint32_t *)0x40048060 // Unique Identification Register Low\n"
  "\n"
  "// Chapter 13: Reset Control Module (RCM)\n"
  "#define RCM_SRS0\t\t*(volatile uint8_t  *)0x4007F000 // System Reset Status Register 0\n"
  "#define RCM_SRS1\t\t*(volatile uint8_t  *)0x4007F001 // System Reset Status Register 1\n"
  "#define RCM_RPFC\t\t*(volatile uint8_t  *)0x4007F004 // Reset Pin Filter Control Register\n"
  "#define RCM_RPFW\t\t*(volatile uint8_t  *)0x4007F005 // Reset Pin Filter Width Register\n"
  "#define RCM_MR\t\t\t*(volatile uint8_t  *)0x4007F007 // Mode Register\n"
  "\n"
  "// Chapter 14: System Mode Controller\n"
  "#define SMC_PMPROT\t\t*(volatile uint8_t  *)0x4007E000 // Power Mode Protection Register\n"
  "#define SMC_PMPROT_AVLP\t\t\t(uint8_t)0x20\t\t\t// Allow very low power modes\n"
  "#define SMC_PMPROT_ALLS\t\t\t(uint8_t)0x08\t\t\t// Allow low leakage stop mode\n"
  "#define SMC_PMPROT_AVLLS\t\t(uint8_t)0x02\t\t\t// Allow very low leakage stop mode\n"
  "#define SMC_PMCTRL\t\t*(volatile uint8_t  *)0x4007E001 // Power Mode Control Register\n"
  "#define SMC_PMCTRL_LPWUI\t\t(uint8_t)0x80\t\t\t// Low Power Wake Up on Interrupt\n"
  "#define SMC_PMCTRL_RUNM(n)\t\t(uint8_t)(((n) & 0x03) << 5)\t// Run Mode Control\n"
  "#define SMC_PMCTRL_STOPA\t\t(uint8_t)0x08\t\t\t// Stop Aborted\n"
  "#define SMC_PMCTRL_STOPM(n)\t\t(uint8_t)((n) & 0x07)\t\t// Stop Mode Control\n"
  "#define SMC_VLLSCTRL\t\t*(volatile uint8_t  *)0x4007E002 // VLLS Control Register\n"
  "#define SMC_VLLSCTRL_PORPO\t\t(uint8_t)0x20\t\t\t// POR Power Option\n"
  "#define SMC_VLLSCTRL_VLLSM(n)\t\t(uint8_t)((n) & 0x07)\t\t// VLLS Mode Control\n"
  "#define SMC_PMSTAT\t\t*(volatile uint8_t  *)0x4007E003 // Power Mode Status Register\n"
  "#define SMC_PMSTAT_RUN\t\t\t(uint8_t)0x01\t\t\t// Current power mode is RUN\n"
  "#define SMC_PMSTAT_STOP\t\t\t(uint8_t)0x02\t\t\t// Current power mode is STOP\n"
  "#define SMC_PMSTAT_VLPR\t\t\t(uint8_t)0x04\t\t\t// Current power mode is VLPR\n"
  "#define SMC_PMSTAT_VLPW\t\t\t(uint8_t)0x08\t\t\t// Current power mode is VLPW\n"
  "#define SMC_PMSTAT_VLPS\t\t\t(uint8_t)0x10\t\t\t// Current power mode is VLPS\n"
  "#define SMC_PMSTAT_LLS\t\t\t(uint8_t)0x20\t\t\t// Current power mode is LLS\n"
  "#define SMC_PMSTAT_VLLS\t\t\t(uint8_t)0x40\t\t\t// Current power mode is VLLS\n"
  "\n"
  "// Chapter 15: Power Management Controller\n"
  "#define PMC_LVDSC1\t\t*(volatile uint8_t  *)0x4007D000 // Low Voltage Detect Status And Control 1 register\n"
  "#define PMC_LVDSC1_LVDF\t\t\t(uint8_t)0x80\t\t\t// Low-Voltage Detect Flag\n"
  "#define PMC_LVDSC1_LVDACK\t\t(uint8_t)0x40\t\t\t// Low-Voltage Detect Acknowledge\n"
  "#define PMC_LVDSC1_LVDIE\t\t(uint8_t)0x20\t\t\t// Low-Voltage Detect Interrupt Enable\n"
  "#define PMC_LVDSC1_LVDRE\t\t(uint8_t)0x10\t\t\t// Low-Voltage Detect Reset Enable\n"
  "#define PMC_LVDSC1_LVDV(n)\t\t(uint8_t)((n) & 0x03)\t\t// Low-Voltage Detect Voltage Select\n"
  "#define PMC_LVDSC2\t\t*(volatile uint8_t  *)0x4007D001 // Low Voltage Detect Status And Control 2 register\n"
  "#define PMC_LVDSC2_LVWF\t\t\t(uint8_t)0x80\t\t\t// Low-Voltage Warning Flag\n"
  "#define PMC_LVDSC2_LVWACK\t\t(uint8_t)0x40\t\t\t// Low-Voltage Warning Acknowledge\n"
  "#define PMC_LVDSC2_LVWIE\t\t(uint8_t)0x20\t\t\t// Low-Voltage Warning Interrupt Enable\n"
  "#define PMC_LVDSC2_LVWV(n)\t\t(uint8_t)((n) & 0x03)\t\t// Low-Voltage Warning Voltage Select\n"
  "#define PMC_REGSC\t\t*(volatile uint8_t  *)0x4007D002 // Regulator Status And Control register\n"
  "#define PMC_REGSC_BGEN\t\t\t(uint8_t)0x10\t\t\t// Bandgap Enable In VLPx Operation\n"
  "#define PMC_REGSC_ACKISO\t\t(uint8_t)0x08\t\t\t// Acknowledge Isolation\n"
  "#define PMC_REGSC_REGONS\t\t(uint8_t)0x04\t\t\t// Regulator In Run Regulation Status\n"
  "#define PMC_REGSC_BGBE\t\t\t(uint8_t)0x01\t\t\t// Bandgap Buffer Enable\n"
  "\n"
  "// Chapter 16: Low-Leakage Wakeup Unit (LLWU)\n"
  "#define LLWU_PE1\t\t*(volatile uint8_t  *)0x4007C000 // LLWU Pin Enable 1 register\n"
  "#define LLWU_PE2\t\t*(volatile uint8_t  *)0x4007C001 // LLWU Pin Enable 2 register\n"
  "#define LLWU_PE3\t\t*(volatile uint8_t  *)0x4007C002 // LLWU Pin Enable 3 register\n"
  "#define LLWU_PE4\t\t*(volatile uint8_t  *)0x4007C003 // LLWU Pin Enable 4 register\n"
  "#define LLWU_ME\t\t\t*(volatile uint8_t  *)0x4007C004 // LLWU Module Enable register\n"
  "#define LLWU_F1\t\t\t*(volatile uint8_t  *)0x4007C005 // LLWU Flag 1 register\n"
  "#define LLWU_F2\t\t\t*(volatile uint8_t  *)0x4007C006 // LLWU Flag 2 register\n"
  "#define LLWU_F3\t\t\t*(volatile uint8_t  *)0x4007C007 // LLWU Flag 3 register\n"
  "#define LLWU_FILT1\t\t*(volatile uint8_t  *)0x4007C008 // LLWU Pin Filter 1 register\n"
  "#define LLWU_FILT2\t\t*(volatile uint8_t  *)0x4007C009 // LLWU Pin Filter 2 register\n"
  "#define LLWU_RST\t\t*(volatile uint8_t  *)0x4007C00A // LLWU Reset Enable register\n"
  "\n"
  "// Chapter 17: Miscellaneous Control Module (MCM)\n"
  "#define MCM_PLASC\t\t*(volatile uint16_t *)0xE0080008 // Crossbar Switch (AXBS) Slave Configuration\n"
  "#define MCM_PLAMC\t\t*(volatile uint16_t *)0xE008000A // Crossbar Switch (AXBS) Master Configuration\n"
  "#define MCM_PLACR\t\t*(volatile uint32_t *)0xE008000C // Crossbar Switch (AXBS) Control Register (MK20DX128)\n"
  "#define MCM_PLACR_ARG\t\t\t(uint32_t)0x00000200\t\t// Arbitration select, 0=fixed, 1=round-robin\n"
  "#define MCM_CR\t\t\t*(volatile uint32_t *)0xE008000C // RAM arbitration control register (MK20DX256)\n"
  "#define MCM_CR_SRAMLWP\t\t\t(uint32_t)0x40000000\t\t// SRAM_L write protect\n"
  "#define MCM_CR_SRAMLAP(n)\t\t(uint32_t)(((n) & 0x03) << 28)\t// SRAM_L priority, 0=RR, 1=favor DMA, 2=CPU, 3=DMA\n"
  "#define MCM_CR_SRAMUWP\t\t\t(uint32_t)0x04000000\t\t// SRAM_U write protect\n"
  "#define MCM_CR_SRAMUAP(n)\t\t(uint32_t)(((n) & 0x03) << 24)\t// SRAM_U priority, 0=RR, 1=favor DMA, 2=CPU, 3=DMA\n"
  "\n"
  "// Crossbar Switch (AXBS) - only programmable on MK20DX256\n"
  "#define AXBS_PRS0\t\t*(volatile uint32_t *)0x40004000 // Priority Registers Slave 0\n"
  "#define AXBS_CRS0\t\t*(volatile uint32_t *)0x40004010 // Control Register 0\n"
  "#define AXBS_PRS1\t\t*(volatile uint32_t *)0x40004100 // Priority Registers Slave 1\n"
  "#define AXBS_CRS1\t\t*(volatile uint32_t *)0x40004110 // Control Register 1\n"
  "#define AXBS_PRS2\t\t*(volatile uint32_t *)0x40004200 // Priority Registers Slave 2\n"
  "#define AXBS_CRS2\t\t*(volatile uint32_t *)0x40004210 // Control Register 2\n"
  "#define AXBS_PRS3\t\t*(volatile uint32_t *)0x40004300 // Priority Registers Slave 3\n"
  "#define AXBS_CRS3\t\t*(volatile uint32_t *)0x40004310 // Control Register 3\n"
  "#define AXBS_PRS4\t\t*(volatile uint32_t *)0x40004400 // Priority Registers Slave 4\n"
  "#define AXBS_CRS4\t\t*(volatile uint32_t *)0x40004410 // Control Register 4\n"
  "#define AXBS_PRS5\t\t*(volatile uint32_t *)0x40004500 // Priority Registers Slave 5\n"
  "#define AXBS_CRS5\t\t*(volatile uint32_t *)0x40004510 // Control Register 5\n"
  "#define AXBS_PRS6\t\t*(volatile uint32_t *)0x40004600 // Priority Registers Slave 6\n"
  "#define AXBS_CRS6\t\t*(volatile uint32_t *)0x40004610 // Control Register 6\n"
  "#define AXBS_PRS7\t\t*(volatile uint32_t *)0x40004700 // Priority Registers Slave 7\n"
  "#define AXBS_CRS7\t\t*(volatile uint32_t *)0x40004710 // Control Register 7\n"
  "#define AXBS_MGPCR0\t\t*(volatile uint32_t *)0x40004800 // Master 0 General Purpose Control Register\n"
  "#define AXBS_MGPCR1\t\t*(volatile uint32_t *)0x40004900 // Master 1 General Purpose Control Register\n"
  "#define AXBS_MGPCR2\t\t*(volatile uint32_t *)0x40004A00 // Master 2 General Purpose Control Register\n"
  "#define AXBS_MGPCR3\t\t*(volatile uint32_t *)0x40004B00 // Master 3 General Purpose Control Register\n"
  "#define AXBS_MGPCR4\t\t*(volatile uint32_t *)0x40004C00 // Master 4 General Purpose Control Register\n"
  "#define AXBS_MGPCR5\t\t*(volatile uint32_t *)0x40004D00 // Master 5 General Purpose Control Register\n"
  "#define AXBS_MGPCR6\t\t*(volatile uint32_t *)0x40004E00 // Master 6 General Purpose Control Register\n"
  "#define AXBS_MGPCR7\t\t*(volatile uint32_t *)0x40004F00 // Master 7 General Purpose Control Register\n"
  "#define AXBS_CRS_READONLY\t\t(uint32_t)0x80000000\n"
  "#define AXBS_CRS_HALTLOWPRIORITY\t(uint32_t)0x40000000\n"
  "#define AXBS_CRS_ARB_FIXED\t\t(uint32_t)0x00000000\n"
  "#define AXBS_CRS_ARB_ROUNDROBIN\t\t(uint32_t)0x00010000\n"
  "#define AXBS_CRS_PARK_FIXED\t\t(uint32_t)0x00000000\n"
  "#define AXBS_CRS_PARK_PREVIOUS\t\t(uint32_t)0x00000010\n"
  "#define AXBS_CRS_PARK_NONE\t\t(uint32_t)0x00000020\n"
  "#define AXBS_CRS_PARK(n)\t\t(uint32_t)(((n) & 7) << 0)\n"
  "\n"
  "\n"
  "\n"
  "// Chapter 20: Direct Memory Access Multiplexer (DMAMUX)\n"
  "#define DMAMUX0_CHCFG0\t\t*(volatile uint8_t  *)0x40021000 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG1\t\t*(volatile uint8_t  *)0x40021001 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG2\t\t*(volatile uint8_t  *)0x40021002 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG3\t\t*(volatile uint8_t  *)0x40021003 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG4\t\t*(volatile uint8_t  *)0x40021004 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG5\t\t*(volatile uint8_t  *)0x40021005 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG6\t\t*(volatile uint8_t  *)0x40021006 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG7\t\t*(volatile uint8_t  *)0x40021007 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG8\t\t*(volatile uint8_t  *)0x40021008 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG9\t\t*(volatile uint8_t  *)0x40021009 // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG10\t\t*(volatile uint8_t  *)0x4002100A // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG11\t\t*(volatile uint8_t  *)0x4002100B // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG12\t\t*(volatile uint8_t  *)0x4002100C // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG13\t\t*(volatile uint8_t  *)0x4002100D // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG14\t\t*(volatile uint8_t  *)0x4002100E // Channel Configuration register\n"
  "#define DMAMUX0_CHCFG15\t\t*(volatile uint8_t  *)0x4002100F // Channel Configuration register\n"
  "#define DMAMUX_DISABLE\t\t\t0\n"
  "#define DMAMUX_TRIG\t\t\t64\n"
  "#define DMAMUX_ENABLE\t\t\t128\n"
  "#define DMAMUX_SOURCE_UART0_RX\t\t2\n"
  "#define DMAMUX_SOURCE_UART0_TX\t\t3\n"
  "#define DMAMUX_SOURCE_UART1_RX\t\t4\n"
  "#define DMAMUX_SOURCE_UART1_TX\t\t5\n"
  "#define DMAMUX_SOURCE_UART2_RX\t\t6\n"
  "#define DMAMUX_SOURCE_UART2_TX\t\t7\n"
  "#define DMAMUX_SOURCE_I2S0_RX\t\t14\n"
  "#define DMAMUX_SOURCE_I2S0_TX\t\t15\n"
  "#define DMAMUX_SOURCE_SPI0_RX\t\t16\n"
  "#define DMAMUX_SOURCE_SPI0_TX\t\t17\n"
  "#define DMAMUX_SOURCE_I2C0\t\t22\n"
  "#define DMAMUX_SOURCE_I2C1\t\t23\n"
  "#define DMAMUX_SOURCE_FTM0_CH0\t\t24\n"
  "#define DMAMUX_SOURCE_FTM0_CH1\t\t25\n"
  "#define DMAMUX_SOURCE_FTM0_CH2\t\t26\n"
  "#define DMAMUX_SOURCE_FTM0_CH3\t\t27\n"
  "#define DMAMUX_SOURCE_FTM0_CH4\t\t28\n"
  "#define DMAMUX_SOURCE_FTM0_CH5\t\t29\n"
  "#define DMAMUX_SOURCE_FTM0_CH6\t\t30\n"
  "#define DMAMUX_SOURCE_FTM0_CH7\t\t31\n"
  "#define DMAMUX_SOURCE_FTM1_CH0\t\t32\n"
  "#define DMAMUX_SOURCE_FTM1_CH1\t\t33\n"
  "#define DMAMUX_SOURCE_FTM2_CH0\t\t34\n"
  "#define DMAMUX_SOURCE_FTM2_CH1\t\t35\n"
  "#define DMAMUX_SOURCE_ADC0\t\t40\n"
  "#define DMAMUX_SOURCE_ADC1\t\t41\n"
  "#define DMAMUX_SOURCE_CMP0\t\t42\n"
  "#define DMAMUX_SOURCE_CMP1\t\t43\n"
  "#define DMAMUX_SOURCE_CMP2\t\t44\n"
  "#define DMAMUX_SOURCE_DAC0\t\t45\n"
  "#define DMAMUX_SOURCE_CMT\t\t47\n"
  "#define DMAMUX_SOURCE_PDB\t\t48\n"
  "#define DMAMUX_SOURCE_PORTA\t\t49\n"
  "#define DMAMUX_SOURCE_PORTB\t\t50\n"
  "#define DMAMUX_SOURCE_PORTC\t\t51\n"
  "#define DMAMUX_SOURCE_PORTD\t\t52\n"
  "#define DMAMUX_SOURCE_PORTE\t\t53\n"
  "#define DMAMUX_SOURCE_ALWAYS0\t\t54\n"
  "#define DMAMUX_SOURCE_ALWAYS1\t\t55\n"
  "#define DMAMUX_SOURCE_ALWAYS2\t\t56\n"
  "#define DMAMUX_SOURCE_ALWAYS3\t\t57\n"
  "#define DMAMUX_SOURCE_ALWAYS4\t\t58\n"
  "#define DMAMUX_SOURCE_ALWAYS5\t\t59\n"
  "#define DMAMUX_SOURCE_ALWAYS6\t\t60\n"
  "#define DMAMUX_SOURCE_ALWAYS7\t\t61\n"
  "#define DMAMUX_SOURCE_ALWAYS8\t\t62\n"
  "#define DMAMUX_SOURCE_ALWAYS9\t\t63\n"
  "\n"
  "// Chapter 21: Direct Memory Access Controller (eDMA)\n"
  "#define DMA_CR\t\t\t*(volatile uint32_t *)0x40008000 // Control Register\n"
  "#define DMA_CR_CX\t\t\t((uint32_t)(1<<17))\t// Cancel Transfer\n"
  "#define DMA_CR_ECX\t\t\t((uint32_t)(1<<16))\t// Error Cancel Transfer\n"
  "#define DMA_CR_EMLM\t\t\t((uint32_t)0x80)\t// Enable Minor Loop Mapping\n"
  "#define DMA_CR_CLM\t\t\t((uint32_t)0x40)\t// Continuous Link Mode\n"
  "#define DMA_CR_HALT\t\t\t((uint32_t)0x20)\t// Halt DMA Operations\n"
  "#define DMA_CR_HOE\t\t\t((uint32_t)0x10)\t// Halt On Error\n"
  "#define DMA_CR_ERCA\t\t\t((uint32_t)0x04)\t// Enable Round Robin Channel Arbitration\n"
  "#define DMA_CR_EDBG\t\t\t((uint32_t)0x02)\t// Enable Debug\n"
  "#define DMA_ES\t\t\t*(volatile uint32_t *)0x40008004 // Error Status Register\n"
  "#define DMA_ERQ\t\t\t*(volatile uint32_t *)0x4000800C // Enable Request Register\n"
  "#define DMA_ERQ_ERQ0\t\t\t((uint32_t)1<<0)\t// Enable DMA Request 0\n"
  "#define DMA_ERQ_ERQ1\t\t\t((uint32_t)1<<1)\t// Enable DMA Request 1\n"
  "#define DMA_ERQ_ERQ2\t\t\t((uint32_t)1<<2)\t// Enable DMA Request 2\n"
  "#define DMA_ERQ_ERQ3\t\t\t((uint32_t)1<<3)\t// Enable DMA Request 3\n"
  "#define DMA_EEI\t\t\t*(volatile uint32_t *)0x40008014 // Enable Error Interrupt Register\n"
  "#define DMA_EEI_EEI0\t\t\t((uint32_t)1<<0)\t// Enable Error Interrupt 0\n"
  "#define DMA_EEI_EEI1\t\t\t((uint32_t)1<<1)\t// Enable Error Interrupt 1\n"
  "#define DMA_EEI_EEI2\t\t\t((uint32_t)1<<2)\t// Enable Error Interrupt 2\n"
  "#define DMA_EEI_EEI3\t\t\t((uint32_t)1<<3)\t// Enable Error Interrupt 3\n"
  "#define DMA_CEEI\t\t*(volatile uint8_t  *)0x40008018 // Clear Enable Error Interrupt Register\n"
  "#define DMA_CEEI_CEEI(n)\t\t((uint8_t)(n & 3)<<0)\t// Clear Enable Error Interrupt\n"
  "#define DMA_CEEI_CAEE\t\t\t((uint8_t)1<<6)\t\t// Clear All Enable Error Interrupts\n"
  "#define DMA_CEEI_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_SEEI\t\t*(volatile uint8_t  *)0x40008019 // Set Enable Error Interrupt Register\n"
  "#define DMA_SEEI_SEEI(n)\t\t((uint8_t)(n & 3)<<0)\t// Set Enable Error Interrupt\n"
  "#define DMA_SEEI_SAEE\t\t\t((uint8_t)1<<6)\t\t// Set All Enable Error Interrupts\n"
  "#define DMA_SEEI_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_CERQ\t\t*(volatile uint8_t  *)0x4000801A // Clear Enable Request Register\n"
  "#define DMA_CERQ_CERQ(n)\t\t((uint8_t)(n & 3)<<0)\t// Clear Enable Request\n"
  "#define DMA_CERQ_CAER\t\t\t((uint8_t)1<<6)\t\t// Clear All Enable Requests\n"
  "#define DMA_CERQ_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_SERQ\t\t*(volatile uint8_t  *)0x4000801B // Set Enable Request Register\n"
  "#define DMA_SERQ_SERQ(n)\t\t((uint8_t)(n & 3)<<0)\t// Set Enable Request\n"
  "#define DMA_SERQ_SAER\t\t\t((uint8_t)1<<6)\t\t// Set All Enable Requests\n"
  "#define DMA_SERQ_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_CDNE\t\t*(volatile uint8_t  *)0x4000801C // Clear DONE Status Bit Register\n"
  "#define DMA_CDNE_CDNE(n)\t\t((uint8_t)(n & 3)<<0)\t// Clear Done Bit\n"
  "#define DMA_CDNE_CADN\t\t\t((uint8_t)1<<6)\t\t// Clear All Done Bits\n"
  "#define DMA_CDNE_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_SSRT\t\t*(volatile uint8_t  *)0x4000801D // Set START Bit Register\n"
  "#define DMA_SSRT_SSRT(n)\t\t((uint8_t)(n & 3)<<0)\t// Set Start Bit\n"
  "#define DMA_SSRT_SAST\t\t\t((uint8_t)1<<6)\t\t// Set All Start Bits\n"
  "#define DMA_SSRT_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_CERR\t\t*(volatile uint8_t  *)0x4000801E // Clear Error Register\n"
  "#define DMA_CERR_CERR(n)\t\t((uint8_t)(n & 3)<<0)\t// Clear Error Indicator\n"
  "#define DMA_CERR_CAEI\t\t\t((uint8_t)1<<6)\t\t// Clear All Error Indicators\n"
  "#define DMA_CERR_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_CINT\t\t*(volatile uint8_t  *)0x4000801F // Clear Interrupt Request Register\n"
  "#define DMA_CINT_CINT(n)\t\t((uint8_t)(n & 3)<<0)\t// Clear Interrupt Request\n"
  "#define DMA_CINT_CAIR\t\t\t((uint8_t)1<<6)\t\t// Clear All Interrupt Requests\n"
  "#define DMA_CINT_NOP\t\t\t((uint8_t)1<<7)\t\t// NOP\n"
  "#define DMA_INT\t\t\t*(volatile uint32_t *)0x40008024 // Interrupt Request Register\n"
  "#define DMA_INT_INT0\t\t\t((uint32_t)1<<0)\t// Interrupt Request 0\n"
  "#define DMA_INT_INT1\t\t\t((uint32_t)1<<1)\t// Interrupt Request 1\n"
  "#define DMA_INT_INT2\t\t\t((uint32_t)1<<2)\t// Interrupt Request 2\n"
  "#define DMA_INT_INT3\t\t\t((uint32_t)1<<3)\t// Interrupt Request 3\n"
  "#define DMA_ERR\t\t\t*(volatile uint32_t *)0x4000802C // Error Register\n"
  "#define DMA_ERR_ERR0\t\t\t((uint32_t)1<<0)\t// Error in Channel 0\n"
  "#define DMA_ERR_ERR1\t\t\t((uint32_t)1<<1)\t// Error in Channel 1\n"
  "#define DMA_ERR_ERR2\t\t\t((uint32_t)1<<2)\t// Error in Channel 2\n"
  "#define DMA_ERR_ERR3\t\t\t((uint32_t)1<<3)\t// Error in Channel 3\n"
  "#define DMA_HRS\t\t\t*(volatile uint32_t *)0x40008034 // Hardware Request Status Register\n"
  "#define DMA_HRS_HRS0\t\t\t((uint32_t)1<<0)\t// Hardware Request Status Channel 0\n"
  "#define DMA_HRS_HRS1\t\t\t((uint32_t)1<<1)\t// Hardware Request Status Channel 1\n"
  "#define DMA_HRS_HRS2\t\t\t((uint32_t)1<<2)\t// Hardware Request Status Channel 2\n"
  "#define DMA_HRS_HRS3\t\t\t((uint32_t)1<<3)\t// Hardware Request Status Channel 3\n"
  "#define DMA_DCHPRI3\t\t*(volatile uint8_t  *)0x40008100 // Channel n Priority Register\n"
  "#define DMA_DCHPRI2\t\t*(volatile uint8_t  *)0x40008101 // Channel n Priority Register\n"
  "#define DMA_DCHPRI1\t\t*(volatile uint8_t  *)0x40008102 // Channel n Priority Register\n"
  "#define DMA_DCHPRI0\t\t*(volatile uint8_t  *)0x40008103 // Channel n Priority Register\n"
  "#define DMA_DCHPRI_CHPRI(n)\t\t((uint8_t)(n & 3)<<0)\t// Channel Arbitration Priority\n"
  "#define DMA_DCHPRI_DPA\t\t\t((uint8_t)1<<6)\t\t// Disable PreEmpt Ability\n"
  "#define DMA_DCHPRI_ECP\t\t\t((uint8_t)1<<7)\t\t// Enable PreEmption\n"
  "\n"
  "\n"
  "#define DMA_TCD_ATTR_SMOD(n)\t\t(((n) & 0x1F) << 11)\n"
  "#define DMA_TCD_ATTR_SSIZE(n)\t\t(((n) & 0x7) << 8)\n"
  "#define DMA_TCD_ATTR_DMOD(n)\t\t(((n) & 0x1F) << 3)\n"
  "#define DMA_TCD_ATTR_DSIZE(n)\t\t(((n) & 0x7) << 0)\n"
  "#define DMA_TCD_ATTR_SIZE_8BIT\t\t0\n"
  "#define DMA_TCD_ATTR_SIZE_16BIT\t\t1\n"
  "#define DMA_TCD_ATTR_SIZE_32BIT\t\t2\n"
  "#define DMA_TCD_ATTR_SIZE_16BYTE\t4\n"
  "#define DMA_TCD_ATTR_SIZE_32BYTE\t5\n"
  "#define DMA_TCD_CSR_BWC(n)\t\t(((n) & 0x3) << 14)\n"
  "#define DMA_TCD_CSR_MAJORLINKCH(n)\t(((n) & 0x3) << 8)\n"
  "#define DMA_TCD_CSR_DONE\t\t0x0080\n"
  "#define DMA_TCD_CSR_ACTIVE\t\t0x0040\n"
  "#define DMA_TCD_CSR_MAJORELINK\t\t0x0020\n"
  "#define DMA_TCD_CSR_ESG\t\t\t0x0010\n"
  "#define DMA_TCD_CSR_DREQ\t\t0x0008\n"
  "#define DMA_TCD_CSR_INTHALF\t\t0x0004\n"
  "#define DMA_TCD_CSR_INTMAJOR\t\t0x0002\n"
  "#define DMA_TCD_CSR_START\t\t0x0001\n"
  "#define DMA_TCD_CITER_MASK\t\t    ((uint16_t)0x7FFF)\t   // Loop count mask\n"
  "#define DMA_TCD_CITER_ELINK\t\t    ((uint16_t)1<<15)\t   // Enable channel linking on minor-loop complete\n"
  "#define DMA_TCD_BITER_MASK\t\t    ((uint16_t)0x7FFF)\t   // Loop count mask\n"
  "#define DMA_TCD_BITER_ELINK\t\t    ((uint16_t)1<<15)\t   // Enable channel linking on minor-loop complete\n"
  "#define DMA_TCD_NBYTES_SMLOE\t\t    ((uint32_t)1<<31)\t\t    // Source Minor Loop Offset Enable\n"
  "#define DMA_TCD_NBYTES_DMLOE\t\t    ((uint32_t)1<<30)\t\t    // Destination Minor Loop Offset Enable\n"
  "#define DMA_TCD_NBYTES_MLOFFNO_NBYTES(n)    ((uint32_t)(n))\t\t    // NBytes transfer count when minor loop disabled\n"
  "#define DMA_TCD_NBYTES_MLOFFYES_NBYTES(n)   ((uint32_t)(n & 0x1F))\t    // NBytes transfer count when minor loop enabled\n"
  "#define DMA_TCD_NBYTES_MLOFFYES_MLOFF(n)    ((uint32_t)(n & 0xFFFFF)<<10)   // Offset \n"
  "\n"
  "#define DMA_TCD0_SADDR\t\t*(volatile const void * volatile *)0x40009000 // TCD Source Address\n"
  "#define DMA_TCD0_SOFF\t\t*(volatile int16_t *)0x40009004\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD0_ATTR\t\t*(volatile uint16_t *)0x40009006 // TCD Transfer Attributes\n"
  "#define DMA_TCD0_NBYTES_MLNO\t*(volatile uint32_t *)0x40009008 // TCD Minor Byte Count (Minor Loop Disabled)\n"
  "#define DMA_TCD0_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009008 // TCD Signed Minor Loop Offset (Minor Loop Enabled and Offset Disabled)\n"
  "#define DMA_TCD0_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009008 // TCD Signed Minor Loop Offset (Minor Loop and Offset Enabled)\n"
  "#define DMA_TCD0_SLAST\t\t*(volatile int32_t *)0x4000900C\t // TCD Last Source Address Adjustment\n"
  "#define DMA_TCD0_DADDR\t\t*(volatile void * volatile *)0x40009010 // TCD Destination Address\n"
  "#define DMA_TCD0_DOFF\t\t*(volatile int16_t *)0x40009014\t // TCD Signed Destination Address Offset\n"
  "#define DMA_TCD0_CITER_ELINKYES *(volatile uint16_t *)0x40009016 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "#define DMA_TCD0_CITER_ELINKNO\t*(volatile uint16_t *)0x40009016 // \?\?\n"
  "#define DMA_TCD0_DLASTSGA\t*(volatile int32_t *)0x40009018\t // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "#define DMA_TCD0_CSR\t\t*(volatile uint16_t *)0x4000901C // TCD Control and Status\n"
  "#define DMA_TCD0_BITER_ELINKYES *(volatile uint16_t *)0x4000901E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "#define DMA_TCD0_BITER_ELINKNO\t*(volatile uint16_t *)0x4000901E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled\n"
  "\n"
  "#define DMA_TCD1_SADDR\t\t*(volatile const void * volatile *)0x40009020 // TCD Source Address\n"
  "#define DMA_TCD1_SOFF\t\t*(volatile int16_t *)0x40009024\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD1_ATTR\t\t*(volatile uint16_t *)0x40009026 // TCD Transfer Attributes\n"
  "#define DMA_TCD1_NBYTES_MLNO\t*(volatile uint32_t *)0x40009028 // TCD Minor Byte Count, Minor Loop Disabled\n"
  "#define DMA_TCD1_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009028 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled\n"
  "#define DMA_TCD1_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009028 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled\n"
  "#define DMA_TCD1_SLAST\t\t*(volatile int32_t *)0x4000902C\t // TCD Last Source Address Adjustment\n"
  "#define DMA_TCD1_DADDR\t\t*(volatile void * volatile *)0x40009030 // TCD Destination Address\n"
  "#define DMA_TCD1_DOFF\t\t*(volatile int16_t *)0x40009034\t // TCD Signed Destination Address Offset\n"
  "#define DMA_TCD1_CITER_ELINKYES *(volatile uint16_t *)0x40009036 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "#define DMA_TCD1_CITER_ELINKNO\t*(volatile uint16_t *)0x40009036 // \?\?\n"
  "#define DMA_TCD1_DLASTSGA\t*(volatile int32_t *)0x40009038\t // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "#define DMA_TCD1_CSR\t\t*(volatile uint16_t *)0x4000903C // TCD Control and Status\n"
  "#define DMA_TCD1_BITER_ELINKYES *(volatile uint16_t *)0x4000903E // TCD Beginning Minor Loop Link, Major Loop Count Channel Linking Enabled\n"
  "#define DMA_TCD1_BITER_ELINKNO\t*(volatile uint16_t *)0x4000903E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled\n"
  "\n"
  "#define DMA_TCD2_SADDR\t\t*(volatile const void * volatile *)0x40009040 // TCD Source Address\n"
  "#define DMA_TCD2_SOFF\t\t*(volatile int16_t *)0x40009044\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD2_ATTR\t\t*(volatile uint16_t *)0x40009046 // TCD Transfer Attributes\n"
  "#define DMA_TCD2_NBYTES_MLNO\t*(volatile uint32_t *)0x40009048 // TCD Minor Byte Count, Minor Loop Disabled\n"
  "#define DMA_TCD2_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009048 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled\n"
  "#define DMA_TCD2_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009048 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled\n"
  "#define DMA_TCD2_SLAST\t\t*(volatile int32_t *)0x4000904C\t // TCD Last Source Address Adjustment\n"
  "#define DMA_TCD2_DADDR\t\t*(volatile void * volatile *)0x40009050 // TCD Destination Address\n"
  "#define DMA_TCD2_DOFF\t\t*(volatile int16_t *)0x40009054\t // TCD Signed Destination Address Offset\n"
  "#define DMA_TCD2_CITER_ELINKYES *(volatile uint16_t *)0x40009056 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "#define DMA_TCD2_CITER_ELINKNO\t*(volatile uint16_t *)0x40009056 // \?\?\n"
  "#define DMA_TCD2_DLASTSGA\t*(volatile int32_t *)0x40009058\t // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "#define DMA_TCD2_CSR\t\t*(volatile uint16_t *)0x4000905C // TCD Control and Status\n"
  "#define DMA_TCD2_BITER_ELINKYES *(volatile uint16_t *)0x4000905E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "#define DMA_TCD2_BITER_ELINKNO\t*(volatile uint16_t *)0x4000905E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled\n"
  "\n"
  "#define DMA_TCD3_SADDR\t\t*(volatile const void * volatile *)0x40009060 // TCD Source Address\n"
  "#define DMA_TCD3_SOFF\t\t*(volatile int16_t *)0x40009064\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD3_ATTR\t\t*(volatile uint16_t *)0x40009066 // TCD Transfer Attributes\n"
  "#define DMA_TCD3_NBYTES_MLNO\t*(volatile uint32_t *)0x40009068 // TCD Minor Byte Count, Minor Loop Disabled\n"
  "#define DMA_TCD3_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009068 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled\n"
  "#define DMA_TCD3_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009068 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled\n"
  "#define DMA_TCD3_SLAST\t\t*(volatile int32_t *)0x4000906C\t // TCD Last Source Address Adjustment\n"
  "#define DMA_TCD3_DADDR\t\t*(volatile void * volatile *)0x40009070 // TCD Destination Address\n"
  "#define DMA_TCD3_DOFF\t\t*(volatile int16_t *)0x40009074\t // TCD Signed Destination Address Offset\n"
  "#define DMA_TCD3_CITER_ELINKYES *(volatile uint16_t *)0x40009076 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "#define DMA_TCD3_CITER_ELINKNO\t*(volatile uint16_t *)0x40009076 // \?\?\n"
  "#define DMA_TCD3_DLASTSGA\t*(volatile int32_t *)0x40009078\t // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "#define DMA_TCD3_CSR\t\t*(volatile uint16_t *)0x4000907C // TCD Control and Status\n"
  "#define DMA_TCD3_BITER_ELINKYES *(volatile uint16_t *)0x4000907E // TCD Beginning Minor Loop Link, Major Loop Count ,Channel Linking Enabled\n"
  "#define DMA_TCD3_BITER_ELINKNO\t*(volatile uint16_t *)0x4000907E // TCD Beginning Minor Loop Link, Major Loop Count ,Channel Linking Disabled\n"
  "\n"
  "#define DMA_TCD4_SADDR\t\t*(volatile const void * volatile *)0x40009080 // TCD Source Addr\n"
  "#define DMA_TCD4_SOFF\t\t*(volatile int16_t *)0x40009084\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD4_ATTR\t\t*(volatile uint16_t *)0x40009086 // TCD Transfer Attributes\n"
  "#define DMA_TCD4_NBYTES_MLNO\t*(volatile uint32_t *)0x40009088 // TCD Minor Byte Count\n"
  "#define DMA_TCD4_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009088 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD4_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009088 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD4_SLAST\t\t*(volatile int32_t *)0x4000908C\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD4_DADDR\t\t*(volatile void * volatile *)0x40009090 // TCD Destination Address\n"
  "#define DMA_TCD4_DOFF\t\t*(volatile int16_t *)0x40009094\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD4_CITER_ELINKYES *(volatile uint16_t *)0x40009096 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD4_CITER_ELINKNO\t*(volatile uint16_t *)0x40009096 // \?\?\n"
  "#define DMA_TCD4_DLASTSGA\t*(volatile int32_t *)0x40009098\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD4_CSR\t\t*(volatile uint16_t *)0x4000909C // TCD Control and Status\n"
  "#define DMA_TCD4_BITER_ELINKYES *(volatile uint16_t *)0x4000909E // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD4_BITER_ELINKNO\t*(volatile uint16_t *)0x4000909E // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD5_SADDR\t\t*(volatile const void * volatile *)0x400090A0 // TCD Source Addr\n"
  "#define DMA_TCD5_SOFF\t\t*(volatile int16_t *)0x400090A4\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD5_ATTR\t\t*(volatile uint16_t *)0x400090A6 // TCD Transfer Attributes\n"
  "#define DMA_TCD5_NBYTES_MLNO\t*(volatile uint32_t *)0x400090A8 // TCD Minor Byte Count\n"
  "#define DMA_TCD5_NBYTES_MLOFFNO *(volatile uint32_t *)0x400090A8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD5_NBYTES_MLOFFYES *(volatile uint32_t *)0x400090A8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD5_SLAST\t\t*(volatile int32_t *)0x400090AC\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD5_DADDR\t\t*(volatile void * volatile *)0x400090B0 // TCD Destination Address\n"
  "#define DMA_TCD5_DOFF\t\t*(volatile int16_t *)0x400090B4\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD5_CITER_ELINKYES *(volatile uint16_t *)0x400090B6 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD5_CITER_ELINKNO\t*(volatile uint16_t *)0x400090B6 // \?\?\n"
  "#define DMA_TCD5_DLASTSGA\t*(volatile int32_t *)0x400090B8\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD5_CSR\t\t*(volatile uint16_t *)0x400090BC // TCD Control and Status\n"
  "#define DMA_TCD5_BITER_ELINKYES *(volatile uint16_t *)0x400090BE // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD5_BITER_ELINKNO\t*(volatile uint16_t *)0x400090BE // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD6_SADDR\t\t*(volatile const void * volatile *)0x400090C0 // TCD Source Addr\n"
  "#define DMA_TCD6_SOFF\t\t*(volatile int16_t *)0x400090C4\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD6_ATTR\t\t*(volatile uint16_t *)0x400090C6 // TCD Transfer Attributes\n"
  "#define DMA_TCD6_NBYTES_MLNO\t*(volatile uint32_t *)0x400090C8 // TCD Minor Byte Count\n"
  "#define DMA_TCD6_NBYTES_MLOFFNO *(volatile uint32_t *)0x400090C8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD6_NBYTES_MLOFFYES *(volatile uint32_t *)0x400090C8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD6_SLAST\t\t*(volatile int32_t *)0x400090CC\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD6_DADDR\t\t*(volatile void * volatile *)0x400090D0 // TCD Destination Address\n"
  "#define DMA_TCD6_DOFF\t\t*(volatile int16_t *)0x400090D4\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD6_CITER_ELINKYES *(volatile uint16_t *)0x400090D6 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD6_CITER_ELINKNO\t*(volatile uint16_t *)0x400090D6 // \?\?\n"
  "#define DMA_TCD6_DLASTSGA\t*(volatile int32_t *)0x400090D8\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD6_CSR\t\t*(volatile uint16_t *)0x400090DC // TCD Control and Status\n"
  "#define DMA_TCD6_BITER_ELINKYES *(volatile uint16_t *)0x400090DE // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD6_BITER_ELINKNO\t*(volatile uint16_t *)0x400090DE // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD7_SADDR\t\t*(volatile const void * volatile *)0x400090E0 // TCD Source Addr\n"
  "#define DMA_TCD7_SOFF\t\t*(volatile int16_t *)0x400090E4\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD7_ATTR\t\t*(volatile uint16_t *)0x400090E6 // TCD Transfer Attributes\n"
  "#define DMA_TCD7_NBYTES_MLNO\t*(volatile uint32_t *)0x400090E8 // TCD Minor Byte Count\n"
  "#define DMA_TCD7_NBYTES_MLOFFNO *(volatile uint32_t *)0x400090E8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD7_NBYTES_MLOFFYES *(volatile uint32_t *)0x400090E8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD7_SLAST\t\t*(volatile int32_t *)0x400090EC\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD7_DADDR\t\t*(volatile void * volatile *)0x400090F0 // TCD Destination Address\n"
  "#define DMA_TCD7_DOFF\t\t*(volatile int16_t *)0x400090F4\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD7_CITER_ELINKYES *(volatile uint16_t *)0x400090F6 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD7_CITER_ELINKNO\t*(volatile uint16_t *)0x400090F6 // \?\?\n"
  "#define DMA_TCD7_DLASTSGA\t*(volatile int32_t *)0x400090F8\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD7_CSR\t\t*(volatile uint16_t *)0x400090FC // TCD Control and Status\n"
  "#define DMA_TCD7_BITER_ELINKYES *(volatile uint16_t *)0x400090FE // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD7_BITER_ELINKNO\t*(volatile uint16_t *)0x400090FE // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD8_SADDR\t\t*(volatile const void * volatile *)0x40009100 // TCD Source Addr\n"
  "#define DMA_TCD8_SOFF\t\t*(volatile int16_t *)0x40009104\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD8_ATTR\t\t*(volatile uint16_t *)0x40009106 // TCD Transfer Attributes\n"
  "#define DMA_TCD8_NBYTES_MLNO\t*(volatile uint32_t *)0x40009108 // TCD Minor Byte Count\n"
  "#define DMA_TCD8_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009108 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD8_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009108 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD8_SLAST\t\t*(volatile int32_t *)0x4000910C\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD8_DADDR\t\t*(volatile void * volatile *)0x40009110 // TCD Destination Address\n"
  "#define DMA_TCD8_DOFF\t\t*(volatile int16_t *)0x40009114\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD8_CITER_ELINKYES *(volatile uint16_t *)0x40009116 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD8_CITER_ELINKNO\t*(volatile uint16_t *)0x40009116 // \?\?\n"
  "#define DMA_TCD8_DLASTSGA\t*(volatile int32_t *)0x40009118\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD8_CSR\t\t*(volatile uint16_t *)0x4000911C // TCD Control and Status\n"
  "#define DMA_TCD8_BITER_ELINKYES *(volatile uint16_t *)0x4000911E // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD8_BITER_ELINKNO\t*(volatile uint16_t *)0x4000911E // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD9_SADDR\t\t*(volatile const void * volatile *)0x40009120 // TCD Source Addr\n"
  "#define DMA_TCD9_SOFF\t\t*(volatile int16_t *)0x40009124\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD9_ATTR\t\t*(volatile uint16_t *)0x40009126 // TCD Transfer Attributes\n"
  "#define DMA_TCD9_NBYTES_MLNO\t*(volatile uint32_t *)0x40009128 // TCD Minor Byte Count\n"
  "#define DMA_TCD9_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009128 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD9_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009128 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD9_SLAST\t\t*(volatile int32_t *)0x4000912C\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD9_DADDR\t\t*(volatile void * volatile *)0x40009130 // TCD Destination Address\n"
  "#define DMA_TCD9_DOFF\t\t*(volatile int16_t *)0x40009134\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD9_CITER_ELINKYES *(volatile uint16_t *)0x40009136 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD9_CITER_ELINKNO\t*(volatile uint16_t *)0x40009136 // \?\?\n"
  "#define DMA_TCD9_DLASTSGA\t*(volatile int32_t *)0x40009138\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD9_CSR\t\t*(volatile uint16_t *)0x4000913C // TCD Control and Status\n"
  "#define DMA_TCD9_BITER_ELINKYES *(volatile uint16_t *)0x4000913E // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD9_BITER_ELINKNO\t*(volatile uint16_t *)0x4000913E // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD10_SADDR\t\t*(volatile const void * volatile *)0x40009140 // TCD Source Addr\n"
  "#define DMA_TCD10_SOFF\t\t*(volatile int16_t *)0x40009144\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD10_ATTR\t\t*(volatile uint16_t *)0x40009146 // TCD Transfer Attributes\n"
  "#define DMA_TCD10_NBYTES_MLNO\t*(volatile uint32_t *)0x40009148 // TCD Minor Byte Count\n"
  "#define DMA_TCD10_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009148 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD10_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009148 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD10_SLAST\t\t*(volatile int32_t *)0x4000914C\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD10_DADDR\t\t*(volatile void * volatile *)0x40009150 // TCD Destination Address\n"
  "#define DMA_TCD10_DOFF\t\t*(volatile int16_t *)0x40009154\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD10_CITER_ELINKYES *(volatile uint16_t *)0x40009156 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD10_CITER_ELINKNO\t*(volatile uint16_t *)0x40009156 // \?\?\n"
  "#define DMA_TCD10_DLASTSGA\t*(volatile int32_t *)0x40009158\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD10_CSR\t\t*(volatile uint16_t *)0x4000915C // TCD Control and Status\n"
  "#define DMA_TCD10_BITER_ELINKYES *(volatile uint16_t *)0x4000915E // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD10_BITER_ELINKNO\t*(volatile uint16_t *)0x4000915E // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD11_SADDR\t\t*(volatile const void * volatile *)0x40009160 // TCD Source Addr\n"
  "#define DMA_TCD11_SOFF\t\t*(volatile int16_t *)0x40009164\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD11_ATTR\t\t*(volatile uint16_t *)0x40009166 // TCD Transfer Attributes\n"
  "#define DMA_TCD11_NBYTES_MLNO\t*(volatile uint32_t *)0x40009168 // TCD Minor Byte Count\n"
  "#define DMA_TCD11_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009168 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD11_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009168 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD11_SLAST\t\t*(volatile int32_t *)0x4000916C\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD11_DADDR\t\t*(volatile void * volatile *)0x40009170 // TCD Destination Address\n"
  "#define DMA_TCD11_DOFF\t\t*(volatile int16_t *)0x40009174\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD11_CITER_ELINKYES *(volatile uint16_t *)0x40009176 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD11_CITER_ELINKNO\t*(volatile uint16_t *)0x40009176 // \?\?\n"
  "#define DMA_TCD11_DLASTSGA\t*(volatile int32_t *)0x40009178\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD11_CSR\t\t*(volatile uint16_t *)0x4000917C // TCD Control and Status\n"
  "#define DMA_TCD11_BITER_ELINKYES *(volatile uint16_t *)0x4000917E // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD11_BITER_ELINKNO\t*(volatile uint16_t *)0x4000917E // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD12_SADDR\t\t*(volatile const void * volatile *)0x40009180 // TCD Source Addr\n"
  "#define DMA_TCD12_SOFF\t\t*(volatile int16_t *)0x40009184\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD12_ATTR\t\t*(volatile uint16_t *)0x40009186 // TCD Transfer Attributes\n"
  "#define DMA_TCD12_NBYTES_MLNO\t*(volatile uint32_t *)0x40009188 // TCD Minor Byte Count\n"
  "#define DMA_TCD12_NBYTES_MLOFFNO *(volatile uint32_t *)0x40009188 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD12_NBYTES_MLOFFYES *(volatile uint32_t *)0x40009188 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD12_SLAST\t\t*(volatile int32_t *)0x4000918C\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD12_DADDR\t\t*(volatile void * volatile *)0x40009190 // TCD Destination Address\n"
  "#define DMA_TCD12_DOFF\t\t*(volatile int16_t *)0x40009194\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD12_CITER_ELINKYES *(volatile uint16_t *)0x40009196 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD12_CITER_ELINKNO\t*(volatile uint16_t *)0x40009196 // \?\?\n"
  "#define DMA_TCD12_DLASTSGA\t*(volatile int32_t *)0x40009198\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD12_CSR\t\t*(volatile uint16_t *)0x4000919C // TCD Control and Status\n"
  "#define DMA_TCD12_BITER_ELINKYES *(volatile uint16_t *)0x4000919E // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD12_BITER_ELINKNO\t*(volatile uint16_t *)0x4000919E // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD13_SADDR\t\t*(volatile const void * volatile *)0x400091A0 // TCD Source Addr\n"
  "#define DMA_TCD13_SOFF\t\t*(volatile int16_t *)0x400091A4\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD13_ATTR\t\t*(volatile uint16_t *)0x400091A6 // TCD Transfer Attributes\n"
  "#define DMA_TCD13_NBYTES_MLNO\t*(volatile uint32_t *)0x400091A8 // TCD Minor Byte Count\n"
  "#define DMA_TCD13_NBYTES_MLOFFNO *(volatile uint32_t *)0x400091A8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD13_NBYTES_MLOFFYES *(volatile uint32_t *)0x400091A8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD13_SLAST\t\t*(volatile int32_t *)0x400091AC\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD13_DADDR\t\t*(volatile void * volatile *)0x400091B0 // TCD Destination Address\n"
  "#define DMA_TCD13_DOFF\t\t*(volatile int16_t *)0x400091B4\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD13_CITER_ELINKYES *(volatile uint16_t *)0x400091B6 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD13_CITER_ELINKNO\t*(volatile uint16_t *)0x400091B6 // \?\?\n"
  "#define DMA_TCD13_DLASTSGA\t*(volatile int32_t *)0x400091B8\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD13_CSR\t\t*(volatile uint16_t *)0x400091BC // TCD Control and Status\n"
  "#define DMA_TCD13_BITER_ELINKYES *(volatile uint16_t *)0x400091BE // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD13_BITER_ELINKNO\t*(volatile uint16_t *)0x400091BE // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD14_SADDR\t\t*(volatile const void * volatile *)0x400091C0 // TCD Source Addr\n"
  "#define DMA_TCD14_SOFF\t\t*(volatile int16_t *)0x400091C4\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD14_ATTR\t\t*(volatile uint16_t *)0x400091C6 // TCD Transfer Attributes\n"
  "#define DMA_TCD14_NBYTES_MLNO\t*(volatile uint32_t *)0x400091C8 // TCD Minor Byte Count\n"
  "#define DMA_TCD14_NBYTES_MLOFFNO *(volatile uint32_t *)0x400091C8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD14_NBYTES_MLOFFYES *(volatile uint32_t *)0x400091C8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD14_SLAST\t\t*(volatile int32_t *)0x400091CC\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD14_DADDR\t\t*(volatile void * volatile *)0x400091D0 // TCD Destination Address\n"
  "#define DMA_TCD14_DOFF\t\t*(volatile int16_t *)0x400091D4\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD14_CITER_ELINKYES *(volatile uint16_t *)0x400091D6 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD14_CITER_ELINKNO\t*(volatile uint16_t *)0x400091D6 // \?\?\n"
  "#define DMA_TCD14_DLASTSGA\t*(volatile int32_t *)0x400091D8\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD14_CSR\t\t*(volatile uint16_t *)0x400091DC // TCD Control and Status\n"
  "#define DMA_TCD14_BITER_ELINKYES *(volatile uint16_t *)0x400091DE // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD14_BITER_ELINKNO\t*(volatile uint16_t *)0x400091DE // TCD Beginning Minor Loop Link\n"
  "\n"
  "#define DMA_TCD15_SADDR\t\t*(volatile const void * volatile *)0x400091E0 // TCD Source Addr\n"
  "#define DMA_TCD15_SOFF\t\t*(volatile int16_t *)0x400091E4\t // TCD Signed Source Address Offset\n"
  "#define DMA_TCD15_ATTR\t\t*(volatile uint16_t *)0x400091E6 // TCD Transfer Attributes\n"
  "#define DMA_TCD15_NBYTES_MLNO\t*(volatile uint32_t *)0x400091E8 // TCD Minor Byte Count\n"
  "#define DMA_TCD15_NBYTES_MLOFFNO *(volatile uint32_t *)0x400091E8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD15_NBYTES_MLOFFYES *(volatile uint32_t *)0x400091E8 // TCD Signed Minor Loop Offset\n"
  "#define DMA_TCD15_SLAST\t\t*(volatile int32_t *)0x400091EC\t // TCD Last Source Addr Adj.\n"
  "#define DMA_TCD15_DADDR\t\t*(volatile void * volatile *)0x400091F0 // TCD Destination Address\n"
  "#define DMA_TCD15_DOFF\t\t*(volatile int16_t *)0x400091F4\t // TCD Signed Dest Address Offset\n"
  "#define DMA_TCD15_CITER_ELINKYES *(volatile uint16_t *)0x400091F6 // TCD Current Minor Loop Link\n"
  "#define DMA_TCD15_CITER_ELINKNO\t*(volatile uint16_t *)0x400091F6 // \?\?\n"
  "#define DMA_TCD15_DLASTSGA\t*(volatile int32_t *)0x400091F8\t // TCD Last Destination Addr Adj\n"
  "#define DMA_TCD15_CSR\t\t*(volatile uint16_t *)0x400091FC // TCD Control and Status\n"
  "#define DMA_TCD15_BITER_ELINKYES *(volatile uint16_t *)0x400091FE // TCD Beginning Minor Loop Link\n"
  "#define DMA_TCD15_BITER_ELINKNO\t*(volatile uint16_t *)0x400091FE // TCD Beginning Minor Loop Link\n"
  "\n"
  "\n"
  "// Chapter 22: External Watchdog Monitor (EWM)\n"
  "#define EWM_CTRL\t\t*(volatile uint8_t  *)0x40061000 // Control Register\n"
  "#define EWM_SERV\t\t*(volatile uint8_t  *)0x40061001 // Service Register\n"
  "#define EWM_CMPL\t\t*(volatile uint8_t  *)0x40061002 // Compare Low Register\n"
  "#define EWM_CMPH\t\t*(volatile uint8_t  *)0x40061003 // Compare High Register\n"
  "\n"
  "// Chapter 23: Watchdog Timer (WDOG)\n"
  "#define WDOG_STCTRLH\t\t*(volatile uint16_t *)0x40052000 // Watchdog Status and Control Register High\n"
  "#define WDOG_STCTRLH_DISTESTWDOG\t(uint16_t)0x4000\t\t// Allows the WDOG's functional test mode to be disabled permanently.\n"
  "#define WDOG_STCTRLH_BYTESEL(n)\t\t(uint16_t)(((n) & 3) << 12)\t// selects the byte to be tested when the watchdog is in the byte test mode.\n"
  "#define WDOG_STCTRLH_TESTSEL\t\t(uint16_t)0x0800\n"
  "#define WDOG_STCTRLH_TESTWDOG\t\t(uint16_t)0x0400\n"
  "#define WDOG_STCTRLH_WAITEN\t\t(uint16_t)0x0080\n"
  "#define WDOG_STCTRLH_STOPEN\t\t(uint16_t)0x0040\n"
  "#define WDOG_STCTRLH_DBGEN\t\t(uint16_t)0x0020\n"
  "#define WDOG_STCTRLH_ALLOWUPDATE\t(uint16_t)0x0010\n"
  "#define WDOG_STCTRLH_WINEN\t\t(uint16_t)0x0008\n"
  "#define WDOG_STCTRLH_IRQRSTEN\t\t(uint16_t)0x0004\n"
  "#define WDOG_STCTRLH_CLKSRC\t\t(uint16_t)0x0002\n"
  "#define WDOG_STCTRLH_WDOGEN\t\t(uint16_t)0x0001\n"
  "#define WDOG_STCTRLL\t\t*(volatile uint16_t *)0x40052002 // Watchdog Status and Control Register Low\n"
  "#define WDOG_TOVALH\t\t*(volatile uint16_t *)0x40052004 // Watchdog Time-out Value Register High\n"
  "#define WDOG_TOVALL\t\t*(volatile uint16_t *)0x40052006 // Watchdog Time-out Value Register Low\n"
  "#define WDOG_WINH\t\t*(volatile uint16_t *)0x40052008 // Watchdog Window Register High\n"
  "#define WDOG_WINL\t\t*(volatile uint16_t *)0x4005200A // Watchdog Window Register Low\n"
  "#define WDOG_REFRESH\t\t*(volatile uint16_t *)0x4005200C // Watchdog Refresh register\n"
  "#define WDOG_UNLOCK\t\t*(volatile uint16_t *)0x4005200E // Watchdog Unlock register\n"
  "#define WDOG_UNLOCK_SEQ1\t\t(uint16_t)0xC520\n"
  "#define WDOG_UNLOCK_SEQ2\t\t(uint16_t)0xD928\n"
  "#define WDOG_TMROUTH\t\t*(volatile uint16_t *)0x40052010 // Watchdog Timer Output Register High\n"
  "#define WDOG_TMROUTL\t\t*(volatile uint16_t *)0x40052012 // Watchdog Timer Output Register Low\n"
  "#define WDOG_RSTCNT\t\t*(volatile uint16_t *)0x40052014 // Watchdog Reset Count register\n"
  "#define WDOG_PRESC\t\t*(volatile uint16_t *)0x40052016 // Watchdog Prescaler register\n"
  "\n"
  "// Chapter 24: Multipurpose Clock Generator (MCG)\n"
  "#define MCG_C1\t\t\t*(volatile uint8_t  *)0x40064000 // MCG Control 1 Register\n"
  "#define MCG_C1_IREFSTEN\t\t\t(uint8_t)0x01\t\t\t// Internal Reference Stop Enable, Controls whether or not the internal reference clock remains enabled when"
  " the MCG enters Stop mode.\n"
  "#define MCG_C1_IRCLKEN\t\t\t(uint8_t)0x02\t\t\t// Internal Reference Clock Enable, Enables the internal reference clock for use as MCGIRCLK.\n"
  "#define MCG_C1_IREFS\t\t\t(uint8_t)0x04\t\t\t// Internal Reference Select, Selects the reference clock source for the FLL.\n"
  "#define MCG_C1_FRDIV(n)\t\t\t(uint8_t)(((n) & 0x07) << 3)\t// FLL External Reference Divider, Selects the amount to divide down the external reference clo"
  "ck for the FLL\n"
  "#define MCG_C1_CLKS(n)\t\t\t(uint8_t)(((n) & 0x03) << 6)\t// Clock Source Select, Selects the clock source for MCGOUTCLK\n"
  "#define MCG_C2\t\t\t*(volatile uint8_t  *)0x40064001 // MCG Control 2 Register\n"
  "#define MCG_C2_IRCS\t\t\t(uint8_t)0x01\t\t\t// Internal Reference Clock Select, Selects between the fast or slow internal reference clock source.\n"
  "#define MCG_C2_LP\t\t\t(uint8_t)0x02\t\t\t// Low Power Select, Controls whether the FLL or PLL is disabled in BLPI and BLPE modes.\n"
  "#define MCG_C2_EREFS\t\t\t(uint8_t)0x04\t\t\t// External Reference Select, Selects the source for the external reference clock. \n"
  "#define MCG_C2_HGO0\t\t\t(uint8_t)0x08\t\t\t// High Gain Oscillator Select, Controls the crystal oscillator mode of operation\n"
  "#define MCG_C2_RANGE0(n)\t\t(uint8_t)(((n) & 0x03) << 4)\t// Frequency Range Select, Selects the frequency range for the crystal oscillator\n"
  "#define MCG_C2_LOCRE0\t\t\t(uint8_t)0x80\t\t\t// Loss of Clock Reset Enable, Determines whether an interrupt or a reset request is made following a loss of "
  "OSC0 \n"
  "#define MCG_C3\t\t\t*(volatile uint8_t  *)0x40064002 // MCG Control 3 Register\n"
  "#define MCG_C3_SCTRIM(n)\t\t(uint8_t)(n)\t\t\t// Slow Internal Reference Clock Trim Setting\n"
  "#define MCG_C4\t\t\t*(volatile uint8_t  *)0x40064003 // MCG Control 4 Register\n"
  "#define MCG_C4_SCFTRIM\t\t\t(uint8_t)0x01\t\t\t// Slow Internal Reference Clock Fine Trim\n"
  "#define MCG_C4_FCTRIM(n)\t\t(uint8_t)(((n) & 0x0F) << 1)\t// Fast Internal Reference Clock Trim Setting\n"
  "#define MCG_C4_DRST_DRS(n)\t\t(uint8_t)(((n) & 0x03) << 5)\t// DCO Range Select\n"
  "#define MCG_C4_DMX32\t\t\t(uint8_t)0x80\t\t\t// DCO Maximum Frequency with 32.768 kHz Reference, controls whether the DCO frequency range is narrowed\n"
  "#define MCG_C5\t\t\t*(volatile uint8_t  *)0x40064004 // MCG Control 5 Register\n"
  "#define MCG_C5_PRDIV0(n)\t\t(uint8_t)((n) & 0x1F)\t\t// PLL External Reference Divider\n"
  "#define MCG_C5_PLLSTEN0\t\t\t(uint8_t)0x20\t\t\t// PLL Stop Enable\n"
  "#define MCG_C5_PLLCLKEN0\t\t(uint8_t)0x40\t\t\t// PLL Clock Enable\n"
  "#define MCG_C6\t\t\t*(volatile uint8_t  *)0x40064005 // MCG Control 6 Register\n"
  "#define MCG_C6_VDIV0(n)\t\t\t(uint8_t)((n) & 0x1F)\t\t// VCO 0 Divider\n"
  "#define MCG_C6_CME0\t\t\t(uint8_t)0x20\t\t\t// Clock Monitor Enable\n"
  "#define MCG_C6_PLLS\t\t\t(uint8_t)0x40\t\t\t// PLL Select, Controls whether the PLL or FLL output is selected as the MCG source when CLKS[1:0]=00. \n"
  "#define MCG_C6_LOLIE0\t\t\t(uint8_t)0x80\t\t\t// Loss of Lock Interrrupt Enable\n"
  "#define MCG_S\t\t\t*(volatile uint8_t  *)0x40064006 // MCG Status Register\n"
  "#define MCG_S_IRCST\t\t\t(uint8_t)0x01\t\t\t// Internal Reference Clock Status\n"
  "#define MCG_S_OSCINIT0\t\t\t(uint8_t)0x02\t\t\t// OSC Initialization,\tresets to 0, is set to 1 after the initialization cycles of the crystal oscillator\n"
  "#define MCG_S_CLKST(n)\t\t\t(uint8_t)(((n) & 0x03) << 2)\t// Clock Mode Status, 0=FLL is selected, 1= Internal ref, 2=External ref, 3=PLL\n"
  "#define MCG_S_CLKST_MASK\t\t(uint8_t)0x0C\n"
  "#define MCG_S_IREFST\t\t\t(uint8_t)0x10\t\t\t// Internal Reference Status\n"
  "#define MCG_S_PLLST\t\t\t(uint8_t)0x20\t\t\t// PLL Select Status\n"
  "#define MCG_S_LOCK0\t\t\t(uint8_t)0x40\t\t\t// Lock Status, 0=PLL Unlocked, 1=PLL Locked\n"
  "#define MCG_S_LOLS0\t\t\t(uint8_t)0x80\t\t\t// Loss of Lock Status\n"
  "#define MCG_SC\t\t\t*(volatile uint8_t  *)0x40064008 // MCG Status and Control Register\n"
  "#define MCG_SC_LOCS0\t\t\t(uint8_t)0x01\t\t\t// OSC0 Loss of Clock Status\n"
  "#define MCG_SC_FCRDIV(n)\t\t(uint8_t)(((n) & 0x07) << 1)\t// Fast Clock Internal Reference Divider\n"
  "#define MCG_SC_FLTPRSRV\t\t\t(uint8_t)0x10\t\t\t// FLL Filter Preserve Enable\n"
  "#define MCG_SC_ATMF\t\t\t(uint8_t)0x20\t\t\t// Automatic Trim Machine Fail Flag\n"
  "#define MCG_SC_ATMS\t\t\t(uint8_t)0x40\t\t\t// Automatic Trim Machine Select\n"
  "#define MCG_SC_ATME\t\t\t(uint8_t)0x80\t\t\t// Automatic Trim Machine Enable\n"
  "#define MCG_ATCVH\t\t*(volatile uint8_t  *)0x4006400A // MCG Auto Trim Compare Value High Register\n"
  "#define MCG_ATCVL\t\t*(volatile uint8_t  *)0x4006400B // MCG Auto Trim Compare Value Low Register\n"
  "#define MCG_C7\t\t\t*(volatile uint8_t  *)0x4006400C // MCG Control 7 Register\n"
  "#define MCG_C8\t\t\t*(volatile uint8_t  *)0x4006400D // MCG Control 8 Register\n"
  "\n"
  "// Chapter 25: Oscillator (OSC)\n"
  "#define OSC0_CR\t\t\t*(volatile uint8_t  *)0x40065000 // OSC Control Register\n"
  "#define OSC_SC16P\t\t\t(uint8_t)0x01\t\t\t// Oscillator 16 pF Capacitor Load Configure\n"
  "#define OSC_SC8P\t\t\t(uint8_t)0x02\t\t\t// Oscillator 8 pF Capacitor Load Configure\n"
  "#define OSC_SC4P\t\t\t(uint8_t)0x04\t\t\t// Oscillator 4 pF Capacitor Load Configure\n"
  "#define OSC_SC2P\t\t\t(uint8_t)0x08\t\t\t// Oscillator 2 pF Capacitor Load Configure\n"
  "#define OSC_EREFSTEN\t\t\t(uint8_t)0x20\t\t\t// External Reference Stop Enable, Controls whether or not the external reference clock (OSCERCLK) remains enab"
  "led when MCU enters Stop mode.\n"
  "#define OSC_ERCLKEN\t\t\t(uint8_t)0x80\t\t\t// External Reference Enable, Enables external reference clock (OSCERCLK).\n"
  "\n"
  "// Chapter 27: Flash Memory Controller (FMC)\n"
  "#define FMC_PFAPR\t\t*(volatile uint32_t *)0x4001F000\t// Flash Access Protection\n"
  "#define FMC_PFB0CR\t\t*(volatile uint32_t *)0x4001F004\t// Flash Control\n"
  "#define FMC_TAGVDW0S0\t\t*(volatile uint32_t *)0x4001F100\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW0S1\t\t*(volatile uint32_t *)0x4001F104\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW1S0\t\t*(volatile uint32_t *)0x4001F108\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW1S1\t\t*(volatile uint32_t *)0x4001F10C\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW2S0\t\t*(volatile uint32_t *)0x4001F110\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW2S1\t\t*(volatile uint32_t *)0x4001F114\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW3S0\t\t*(volatile uint32_t *)0x4001F118\t// Cache Tag Storage\n"
  "#define FMC_TAGVDW3S1\t\t*(volatile uint32_t *)0x4001F11C\t// Cache Tag Storage\n"
  "#define FMC_DATAW0S0\t\t*(volatile uint32_t *)0x4001F200\t// Cache Data Storage\n"
  "#define FMC_DATAW0S1\t\t*(volatile uint32_t *)0x4001F204\t// Cache Data Storage\n"
  "#define FMC_DATAW1S0\t\t*(volatile uint32_t *)0x4001F208\t// Cache Data Storage\n"
  "#define FMC_DATAW1S1\t\t*(volatile uint32_t *)0x4001F20C\t// Cache Data Storage\n"
  "#define FMC_DATAW2S0\t\t*(volatile uint32_t *)0x4001F210\t// Cache Data Storage\n"
  "#define FMC_DATAW2S1\t\t*(volatile uint32_t *)0x4001F214\t// Cache Data Storage\n"
  "#define FMC_DATAW3S0\t\t*(volatile uint32_t *)0x4001F218\t// Cache Data Storage\n"
  "#define FMC_DATAW3S1\t\t*(volatile uint32_t *)0x4001F21C\t// Cache Data Storage\n"
  "\n"
  "// Chapter 28: Flash Memory Module (FTFL)\n"
  "#define FTFL_FSTAT\t\t*(volatile uint8_t  *)0x40020000      // Flash Status Register\n"
  "#define FTFL_FSTAT_CCIF\t\t\t(uint8_t)0x80\t\t\t// Command Complete Interrupt Flag\n"
  "#define FTFL_FSTAT_RDCOLERR\t\t(uint8_t)0x40\t\t\t// Flash Read Collision Error Flag\n"
  "#define FTFL_FSTAT_ACCERR\t\t(uint8_t)0x20\t\t\t// Flash Access Error Flag\n"
  "#define FTFL_FSTAT_FPVIOL\t\t(uint8_t)0x10\t\t\t// Flash Protection Violation Flag\n"
  "#define FTFL_FSTAT_MGSTAT0\t\t(uint8_t)0x01\t\t\t// Memory Controller Command Completion Status Flag\n"
  "#define FTFL_FCNFG\t\t*(volatile uint8_t  *)0x40020001      // Flash Configuration Register\n"
  "#define FTFL_FCNFG_CCIE\t\t\t(uint8_t)0x80\t\t\t// Command Complete Interrupt Enable\n"
  "#define FTFL_FCNFG_RDCOLLIE\t\t(uint8_t)0x40\t\t\t// Read Collision Error Interrupt Enable\n"
  "#define FTFL_FCNFG_ERSAREQ\t\t(uint8_t)0x20\t\t\t// Erase All Request\n"
  "#define FTFL_FCNFG_ERSSUSP\t\t(uint8_t)0x10\t\t\t// Erase Suspend\n"
  "#define FTFL_FCNFG_PFLSH\t\t(uint8_t)0x04\t\t\t// Flash memory configuration\n"
  "#define FTFL_FCNFG_RAMRDY\t\t(uint8_t)0x02\t\t\t// RAM Ready\n"
  "#define FTFL_FCNFG_EEERDY\t\t(uint8_t)0x01\t\t\t// EEPROM Ready\n"
  "#define FTFL_FSEC\t\t*(const\t   uint8_t  *)0x40020002      // Flash Security Register\n"
  "#define FTFL_FOPT\t\t*(const\t   uint8_t  *)0x40020003      // Flash Option Register\n"
  "#define FTFL_FCCOB3\t\t*(volatile uint8_t  *)0x40020004      // Flash Common Command Object Registers\n"
  "#define FTFL_FCCOB2\t\t*(volatile uint8_t  *)0x40020005\n"
  "#define FTFL_FCCOB1\t\t*(volatile uint8_t  *)0x40020006\n"
  "#define FTFL_FCCOB0\t\t*(volatile uint8_t  *)0x40020007\n"
  "#define FTFL_FCCOB7\t\t*(volatile uint8_t  *)0x40020008\n"
  "#define FTFL_FCCOB6\t\t*(volatile uint8_t  *)0x40020009\n"
  "#define FTFL_FCCOB5\t\t*(volatile uint8_t  *)0x4002000A\n"
  "#define FTFL_FCCOB4\t\t*(volatile uint8_t  *)0x4002000B\n"
  "#define FTFL_FCCOBB\t\t*(volatile uint8_t  *)0x4002000C\n"
  "#define FTFL_FCCOBA\t\t*(volatile uint8_t  *)0x4002000D\n"
  "#define FTFL_FCCOB9\t\t*(volatile uint8_t  *)0x4002000E\n"
  "#define FTFL_FCCOB8\t\t*(volatile uint8_t  *)0x4002000F\n"
  "#define FTFL_FPROT3\t\t*(volatile uint8_t  *)0x40020010      // Program Flash Protection Registers\n"
  "#define FTFL_FPROT2\t\t*(volatile uint8_t  *)0x40020011      // Program Flash Protection Registers\n"
  "#define FTFL_FPROT1\t\t*(volatile uint8_t  *)0x40020012      // Program Flash Protection Registers\n"
  "#define FTFL_FPROT0\t\t*(volatile uint8_t  *)0x40020013      // Program Flash Protection Registers\n"
  "#define FTFL_FEPROT\t\t*(volatile uint8_t  *)0x40020016      // EEPROM Protection Register\n"
  "#define FTFL_FDPROT\t\t*(volatile uint8_t  *)0x40020017      // Data Flash Protection Register\n"
  "\n"
  "// Chapter 30: Cyclic Redundancy Check (CRC)\n"
  "#define CRC_CRC\t\t\t*(volatile uint32_t *)0x40032000 // CRC Data register\n"
  "#define CRC_GPOLY\t\t*(volatile uint32_t *)0x40032004 // CRC Polynomial register\n"
  "#define CRC_CTRL\t\t*(volatile uint32_t *)0x40032008 // CRC Control register\n"
  "\n"
  "// Chapter 31: Analog-to-Digital Converter (ADC)\n"
  "#define ADC0_SC1A\t\t*(volatile uint32_t *)0x4003B000 // ADC status and control registers 1\n"
  "#define ADC0_SC1B\t\t*(volatile uint32_t *)0x4003B004 // ADC status and control registers 1\n"
  "#define ADC_SC1_COCO\t\t\t(uint32_t)0x80\t\t\t// Conversion complete flag\n"
  "#define ADC_SC1_AIEN\t\t\t(uint32_t)0x40\t\t\t// Interrupt enable\n"
  "#define ADC_SC1_DIFF\t\t\t(uint32_t)0x20\t\t\t// Differential mode enable\n"
  "#define ADC_SC1_ADCH(n)\t\t\t(uint32_t)((n) & 0x1F)\t\t// Input channel select\n"
  "#define ADC0_CFG1\t\t*(volatile uint32_t *)0x4003B008 // ADC configuration register 1\n"
  "#define ADC_CFG1_ADLPC\t\t\t(uint32_t)0x80\t\t\t// Low-power configuration\n"
  "#define ADC_CFG1_ADIV(n)\t\t(uint32_t)(((n) & 3) << 5)\t// Clock divide select, 0=direct, 1=div2, 2=div4, 3=div8\n"
  "#define ADC_CFG1_ADLSMP\t\t\t(uint32_t)0x10\t\t\t// Sample time configuration, 0=Short, 1=Long\n"
  "#define ADC_CFG1_MODE(n)\t\t(uint32_t)(((n) & 3) << 2)\t// Conversion mode, 0=8 bit, 1=12 bit, 2=10 bit, 3=16 bit\n"
  "#define ADC_CFG1_ADICLK(n)\t\t(uint32_t)(((n) & 3) << 0)\t// Input clock, 0=bus, 1=bus/2, 2=OSCERCLK, 3=async\n"
  "#define ADC0_CFG2\t\t*(volatile uint32_t *)0x4003B00C // Configuration register 2\n"
  "#define ADC_CFG2_MUXSEL\t\t\t(uint32_t)0x10\t\t\t// 0=a channels, 1=b channels\n"
  "#define ADC_CFG2_ADACKEN\t\t(uint32_t)0x08\t\t\t// async clock enable\n"
  "#define ADC_CFG2_ADHSC\t\t\t(uint32_t)0x04\t\t\t// High speed configuration\n"
  "#define ADC_CFG2_ADLSTS(n)\t\t(uint32_t)(((n) & 3) << 0)\t// Sample time, 0=24 cycles, 1=12 cycles, 2=6 cycles, 3=2 cycles\n"
  "#define ADC0_RA\t\t\t*(volatile uint32_t *)0x4003B010 // ADC data result register\n"
  "#define ADC0_RB\t\t\t*(volatile uint32_t *)0x4003B014 // ADC data result register\n"
  "#define ADC0_CV1\t\t*(volatile uint32_t *)0x4003B018 // Compare value registers\n"
  "#define ADC0_CV2\t\t*(volatile uint32_t *)0x4003B01C // Compare value registers\n"
  "#define ADC0_SC2\t\t*(volatile uint32_t *)0x4003B020 // Status and control register 2\n"
  "#define ADC_SC2_ADACT\t\t\t(uint32_t)0x80\t\t\t// Conversion active\n"
  "#define ADC_SC2_ADTRG\t\t\t(uint32_t)0x40\t\t\t// Conversion trigger select, 0=software, 1=hardware\n"
  "#define ADC_SC2_ACFE\t\t\t(uint32_t)0x20\t\t\t// Compare function enable\n"
  "#define ADC_SC2_ACFGT\t\t\t(uint32_t)0x10\t\t\t// Compare function greater than enable\n"
  "#define ADC_SC2_ACREN\t\t\t(uint32_t)0x08\t\t\t// Compare function range enable\n"
  "#define ADC_SC2_DMAEN\t\t\t(uint32_t)0x04\t\t\t// DMA enable\n"
  "#define ADC_SC2_REFSEL(n)\t\t(uint32_t)(((n) & 3) << 0)\t// Voltage reference, 0=vcc/external, 1=1.2 volts\n"
  "#define ADC0_SC3\t\t*(volatile uint32_t *)0x4003B024 // Status and control register 3\n"
  "#define ADC_SC3_CAL\t\t\t(uint32_t)0x80\t\t\t// Calibration, 1=begin, stays set while cal in progress\n"
  "#define ADC_SC3_CALF\t\t\t(uint32_t)0x40\t\t\t// Calibration failed flag\n"
  "#define ADC_SC3_ADCO\t\t\t(uint32_t)0x08\t\t\t// Continuous conversion enable\n"
  "#define ADC_SC3_AVGE\t\t\t(uint32_t)0x04\t\t\t// Hardware average enable\n"
  "#define ADC_SC3_AVGS(n)\t\t\t(uint32_t)(((n) & 3) << 0)\t// avg select, 0=4 samples, 1=8 samples, 2=16 samples, 3=32 samples\n"
  "#define ADC0_OFS\t\t*(volatile uint32_t *)0x4003B028 // ADC offset correction register\n"
  "#define ADC0_PG\t\t\t*(volatile uint32_t *)0x4003B02C // ADC plus-side gain register\n"
  "#define ADC0_MG\t\t\t*(volatile uint32_t *)0x4003B030 // ADC minus-side gain register\n"
  "#define ADC0_CLPD\t\t*(volatile uint32_t *)0x4003B034 // ADC plus-side general calibration value register\n"
  "#define ADC0_CLPS\t\t*(volatile uint32_t *)0x4003B038 // ADC plus-side general calibration value register\n"
  "#define ADC0_CLP4\t\t*(volatile uint32_t *)0x4003B03C // ADC plus-side general calibration value register\n"
  "#define ADC0_CLP3\t\t*(volatile uint32_t *)0x4003B040 // ADC plus-side general calibration value register\n"
  "#define ADC0_CLP2\t\t*(volatile uint32_t *)0x4003B044 // ADC plus-side general calibration value register\n"
  "#define ADC0_CLP1\t\t*(volatile uint32_t *)0x4003B048 // ADC plus-side general calibration value register\n"
  "#define ADC0_CLP0\t\t*(volatile uint32_t *)0x4003B04C // ADC plus-side general calibration value register\n"
  "#define ADC0_PGA\t\t*(volatile uint32_t *)0x4003B050 // ADC Programmable Gain Amplifier\n"
  "#define ADC0_PGA_PGAEN\t\t\t(uint32_t)0x00800000\t\t// Enable\n"
  "#define ADC0_PGA_PGALPB\t\t\t(uint32_t)0x00100000\t\t// Low-Power Mode Control, 0=low power, 1=normal\n"
  "#define ADC0_PGA_PGAG(n)\t\t(uint32_t)(((n) & 15) << 16)\t// Gain, 0=1X, 1=2X, 2=4X, 3=8X, 4=16X, 5=32X, 6=64X\n"
  "#define ADC0_CLMD\t\t*(volatile uint32_t *)0x4003B054 // ADC minus-side general calibration value register\n"
  "#define ADC0_CLMS\t\t*(volatile uint32_t *)0x4003B058 // ADC minus-side general calibration value register\n"
  "#define ADC0_CLM4\t\t*(volatile uint32_t *)0x4003B05C // ADC minus-side general calibration value register\n"
  "#define ADC0_CLM3\t\t*(volatile uint32_t *)0x4003B060 // ADC minus-side general calibration value register\n"
  "#define ADC0_CLM2\t\t*(volatile uint32_t *)0x4003B064 // ADC minus-side general calibration value register\n"
  "#define ADC0_CLM1\t\t*(volatile uint32_t *)0x4003B068 // ADC minus-side general calibration value register\n"
  "#define ADC0_CLM0\t\t*(volatile uint32_t *)0x4003B06C // ADC minus-side general calibration value register\n"
  "\n"
  "#define ADC1_SC1A\t\t*(volatile uint32_t *)0x400BB000 // ADC status and control registers 1\n"
  "#define ADC1_SC1B\t\t*(volatile uint32_t *)0x400BB004 // ADC status and control registers 1\n"
  "#define ADC1_CFG1\t\t*(volatile uint32_t *)0x400BB008 // ADC configuration register 1\n"
  "#define ADC1_CFG2\t\t*(volatile uint32_t *)0x400BB00C // Configuration register 2\n"
  "#define ADC1_RA\t\t\t*(volatile uint32_t *)0x400BB010 // ADC data result register\n"
  "#define ADC1_RB\t\t\t*(volatile uint32_t *)0x400BB014 // ADC data result register\n"
  "#define ADC1_CV1\t\t*(volatile uint32_t *)0x400BB018 // Compare value registers\n"
  "#define ADC1_CV2\t\t*(volatile uint32_t *)0x400BB01C // Compare value registers\n"
  "#define ADC1_SC2\t\t*(volatile uint32_t *)0x400BB020 // Status and control register 2\n"
  "#define ADC1_SC3\t\t*(volatile uint32_t *)0x400BB024 // Status and control register 3\n"
  "#define ADC1_OFS\t\t*(volatile uint32_t *)0x400BB028 // ADC offset correction register\n"
  "#define ADC1_PG\t\t\t*(volatile uint32_t *)0x400BB02C // ADC plus-side gain register\n"
  "#define ADC1_MG\t\t\t*(volatile uint32_t *)0x400BB030 // ADC minus-side gain register\n"
  "#define ADC1_CLPD\t\t*(volatile uint32_t *)0x400BB034 // ADC plus-side general calibration value register\n"
  "#define ADC1_CLPS\t\t*(volatile uint32_t *)0x400BB038 // ADC plus-side general calibration value register\n"
  "#define ADC1_CLP4\t\t*(volatile uint32_t *)0x400BB03C // ADC plus-side general calibration value register\n"
  "#define ADC1_CLP3\t\t*(volatile uint32_t *)0x400BB040 // ADC plus-side general calibration value register\n"
  "#define ADC1_CLP2\t\t*(volatile uint32_t *)0x400BB044 // ADC plus-side general calibration value register\n"
  "#define ADC1_CLP1\t\t*(volatile uint32_t *)0x400BB048 // ADC plus-side general calibration value register\n"
  "#define ADC1_CLP0\t\t*(volatile uint32_t *)0x400BB04C // ADC plus-side general calibration value register\n"
  "#define ADC1_PGA\t\t*(volatile uint32_t *)0x400BB050 // ADC Programmable Gain Amplifier\n"
  "#define ADC1_CLMD\t\t*(volatile uint32_t *)0x400BB054 // ADC minus-side general calibration value register\n"
  "#define ADC1_CLMS\t\t*(volatile uint32_t *)0x400BB058 // ADC minus-side general calibration value register\n"
  "#define ADC1_CLM4\t\t*(volatile uint32_t *)0x400BB05C // ADC minus-side general calibration value register\n"
  "#define ADC1_CLM3\t\t*(volatile uint32_t *)0x400BB060 // ADC minus-side general calibration value register\n"
  "#define ADC1_CLM2\t\t*(volatile uint32_t *)0x400BB064 // ADC minus-side general calibration value register\n"
  "#define ADC1_CLM1\t\t*(volatile uint32_t *)0x400BB068 // ADC minus-side general calibration value register\n"
  "#define ADC1_CLM0\t\t*(volatile uint32_t *)0x400BB06C // ADC minus-side general calibration value register\n"
  "\n"
  "#define DAC0_DAT0L\t\t*(volatile uint8_t  *)0x400CC000 // DAC Data Low Register \n"
  "#define DAC0_DATH\t\t*(volatile uint8_t  *)0x400CC001 // DAC Data High Register \n"
  "#define DAC0_DAT1L\t\t*(volatile uint8_t  *)0x400CC002 // DAC Data Low Register \n"
  "#define DAC0_DAT2L\t\t*(volatile uint8_t  *)0x400CC004 // DAC Data Low Register \n"
  "#define DAC0_DAT3L\t\t*(volatile uint8_t  *)0x400CC006 // DAC Data Low Register \n"
  "#define DAC0_DAT4L\t\t*(volatile uint8_t  *)0x400CC008 // DAC Data Low Register \n"
  "#define DAC0_DAT5L\t\t*(volatile uint8_t  *)0x400CC00A // DAC Data Low Register \n"
  "#define DAC0_DAT6L\t\t*(volatile uint8_t  *)0x400CC00C // DAC Data Low Register \n"
  "#define DAC0_DAT7L\t\t*(volatile uint8_t  *)0x400CC00E // DAC Data Low Register \n"
  "#define DAC0_DAT8L\t\t*(volatile uint8_t  *)0x400CC010 // DAC Data Low Register \n"
  "#define DAC0_DAT9L\t\t*(volatile uint8_t  *)0x400CC012 // DAC Data Low Register \n"
  "#define DAC0_DAT10L\t\t*(volatile uint8_t  *)0x400CC014 // DAC Data Low Register \n"
  "#define DAC0_DAT11L\t\t*(volatile uint8_t  *)0x400CC016 // DAC Data Low Register \n"
  "#define DAC0_DAT12L\t\t*(volatile uint8_t  *)0x400CC018 // DAC Data Low Register \n"
  "#define DAC0_DAT13L\t\t*(volatile uint8_t  *)0x400CC01A // DAC Data Low Register \n"
  "#define DAC0_DAT14L\t\t*(volatile uint8_t  *)0x400CC01C // DAC Data Low Register \n"
  "#define DAC0_DAT15L\t\t*(volatile uint8_t  *)0x400CC01E // DAC Data Low Register \n"
  "#define DAC0_SR\t\t\t*(volatile uint8_t  *)0x400CC020 // DAC Status Register \n"
  "#define DAC0_C0\t\t\t*(volatile uint8_t  *)0x400CC021 // DAC Control Register \n"
  "#define DAC_C0_DACEN\t\t\t0x80\t\t\t\t// DAC Enable\n"
  "#define DAC_C0_DACRFS\t\t\t0x40\t\t\t\t// DAC Reference Select\n"
  "#define DAC_C0_DACTRGSEL\t\t0x20\t\t\t\t// DAC Trigger Select\n"
  "#define DAC_C0_DACSWTRG\t\t\t0x10\t\t\t\t// DAC Software Trigger\n"
  "#define DAC_C0_LPEN\t\t\t0x08\t\t\t\t// DAC Low Power Control\n"
  "#define DAC_C0_DACBWIEN\t\t\t0x04\t\t\t\t// DAC Buffer Watermark Interrupt Enable\n"
  "#define DAC_C0_DACBTIEN\t\t\t0x02\t\t\t\t// DAC Buffer Read Pointer Top Flag Interrupt Enable\n"
  "#define DAC_C0_DACBBIEN\t\t\t0x01\t\t\t\t// DAC Buffer Read Pointer Bottom Flag Interrupt Enable\n"
  "#define DAC0_C1\t\t\t*(volatile uint8_t  *)0x400CC022 // DAC Control Register 1 \n"
  "#define DAC_C1_DMAEN\t\t\t0x80\t\t\t\t// DMA Enable Select\n"
  "#define DAC_C1_DACBFWM(n)\t\t(((n) & 3) << 3)\t\t// DAC Buffer Watermark Select\n"
  "#define DAC_C1_DACBFMD(n)\t\t(((n) & 3) << 0)\t\t// DAC Buffer Work Mode Select\n"
  "#define DAC_C1_DACBFEN\t\t\t0x00\t\t\t\t// DAC Buffer Enable\n"
  "\n"
  "#define DAC0_C2\t\t\t*(volatile uint8_t  *)0x400CC023 // DAC Control Register 2 \n"
  "#define DAC_C2_DACBFRP(n)\t\t(((n) & 15) << 4)\t\t// DAC Buffer Read Pointer\n"
  "#define DAC_C2_DACBFUP(n)\t\t(((n) & 15) << 0)\t\t// DAC Buffer Upper Limit\n"
  "\n"
  "\n"
  "//#define MCG_C2_RANGE0(n)\t\t(uint8_t)(((n) & 0x03) << 4)\t// Frequency Range Select, Selects the frequency range for the crystal oscillator\n"
  "//#define MCG_C2_LOCRE0\t\t\t(uint8_t)0x80\t\t\t// Loss of Clock Reset Enable, Determines whether an interrupt or a reset request is made following a loss o"
  "f OSC0 \n"
  "\n"
  "// Chapter 32: Comparator (CMP)\n"
  "#define CMP0_CR0\t\t*(volatile uint8_t  *)0x40073000 // CMP Control Register 0\n"
  "#define CMP0_CR1\t\t*(volatile uint8_t  *)0x40073001 // CMP Control Register 1\n"
  "#define CMP0_FPR\t\t*(volatile uint8_t  *)0x40073002 // CMP Filter Period Register\n"
  "#define CMP0_SCR\t\t*(volatile uint8_t  *)0x40073003 // CMP Status and Control Register\n"
  "#define CMP0_DACCR\t\t*(volatile uint8_t  *)0x40073004 // DAC Control Register\n"
  "#define CMP0_MUXCR\t\t*(volatile uint8_t  *)0x40073005 // MUX Control Register\n"
  "#define CMP1_CR0\t\t*(volatile uint8_t  *)0x40073008 // CMP Control Register 0\n"
  "#define CMP1_CR1\t\t*(volatile uint8_t  *)0x40073009 // CMP Control Register 1\n"
  "#define CMP1_FPR\t\t*(volatile uint8_t  *)0x4007300A // CMP Filter Period Register\n"
  "#define CMP1_SCR\t\t*(volatile uint8_t  *)0x4007300B // CMP Status and Control Register\n"
  "#define CMP1_DACCR\t\t*(volatile uint8_t  *)0x4007300C // DAC Control Register\n"
  "#define CMP1_MUXCR\t\t*(volatile uint8_t  *)0x4007300D // MUX Control Register\n"
  "\n"
  "// Chapter 33: Voltage Reference (VREFV1)\n"
  "#define VREF_TRM\t\t*(volatile uint8_t  *)0x40074000 // VREF Trim Register\n"
  "#define VREF_SC\t\t\t*(volatile uint8_t  *)0x40074001 // VREF Status and Control Register\n"
  "\n"
  "// Chapter 34: Programmable Delay Block (PDB)\n"
  "#define PDB0_SC\t\t\t*(volatile uint32_t *)0x40036000 // Status and Control Register\n"
  "#define PDB_SC_LDMOD(n)\t\t\t(((n) & 3) << 18)\t// Load Mode Select\n"
  "#define PDB_SC_PDBEIE\t\t\t0x00020000\t\t// Sequence Error Interrupt Enable\n"
  "#define PDB_SC_SWTRIG\t\t\t0x00010000\t\t// Software Trigger\n"
  "#define PDB_SC_DMAEN\t\t\t0x00008000\t\t// DMA Enable\n"
  "#define PDB_SC_PRESCALER(n)\t\t(((n) & 7) << 12)\t// Prescaler Divider Select\n"
  "#define PDB_SC_TRGSEL(n)\t\t(((n) & 15) << 8)\t// Trigger Input Source Select\n"
  "#define PDB_SC_PDBEN\t\t\t0x00000080\t\t// PDB Enable\n"
  "#define PDB_SC_PDBIF\t\t\t0x00000040\t\t// PDB Interrupt Flag\n"
  "#define PDB_SC_PDBIE\t\t\t0x00000020\t\t// PDB Interrupt Enable.\n"
  "#define PDB_SC_MULT(n)\t\t\t(((n) & 3) << 2)\t// Multiplication Factor\n"
  "#define PDB_SC_CONT\t\t\t0x00000002\t\t// Continuous Mode Enable\n"
  "#define PDB_SC_LDOK\t\t\t0x00000001\t\t// Load OK\n"
  "#define PDB0_MOD\t\t*(volatile uint32_t *)0x40036004 // Modulus Register\n"
  "#define PDB0_CNT\t\t*(volatile uint32_t *)0x40036008 // Counter Register\n"
  "#define PDB0_IDLY\t\t*(volatile uint32_t *)0x4003600C // Interrupt Delay Register\n"
  "#define PDB0_CH0C1\t\t*(volatile uint32_t *)0x40036010 // Channel n Control Register 1\n"
  "#define PDB0_CH0S\t\t*(volatile uint32_t *)0x40036014 // Channel n Status Register\n"
  "#define PDB0_CH0DLY0\t\t*(volatile uint32_t *)0x40036018 // Channel n Delay 0 Register\n"
  "#define PDB0_CH0DLY1\t\t*(volatile uint32_t *)0x4003601C // Channel n Delay 1 Register\n"
  "#define PDB0_POEN\t\t*(volatile uint32_t *)0x40036190 // Pulse-Out n Enable Register\n"
  "#define PDB0_PO0DLY\t\t*(volatile uint32_t *)0x40036194 // Pulse-Out n Delay Register\n"
  "#define PDB0_PO1DLY\t\t*(volatile uint32_t *)0x40036198 // Pulse-Out n Delay Register\n"
  "\n"
  "// Chapter 35: FlexTimer Module (FTM)\n"
  "#define FTM0_SC\t\t\t*(volatile uint32_t *)0x40038000 // Status And Control\n"
  "#define FTM_SC_TOF\t\t\t0x80\t\t\t\t// Timer Overflow Flag\n"
  "#define FTM_SC_TOIE\t\t\t0x40\t\t\t\t// Timer Overflow Interrupt Enable\n"
  "#define FTM_SC_CPWMS\t\t\t0x20\t\t\t\t// Center-Aligned PWM Select\n"
  "#define FTM_SC_CLKS(n)\t\t\t(((n) & 3) << 3)\t\t// Clock Source Selection\n"
  "#define FTM_SC_PS(n)\t\t\t(((n) & 7) << 0)\t\t// Prescale Factor Selection\n"
  "#define FTM0_CNT\t\t*(volatile uint32_t *)0x40038004 // Counter\n"
  "#define FTM0_MOD\t\t*(volatile uint32_t *)0x40038008 // Modulo\n"
  "#define FTM0_C0SC\t\t*(volatile uint32_t *)0x4003800C // Channel 0 Status And Control\n"
  "#define FTM0_C0V\t\t*(volatile uint32_t *)0x40038010 // Channel 0 Value\n"
  "#define FTM0_C1SC\t\t*(volatile uint32_t *)0x40038014 // Channel 1 Status And Control\n"
  "#define FTM0_C1V\t\t*(volatile uint32_t *)0x40038018 // Channel 1 Value\n"
  "#define FTM0_C2SC\t\t*(volatile uint32_t *)0x4003801C // Channel 2 Status And Control\n"
  "#define FTM0_C2V\t\t*(volatile uint32_t *)0x40038020 // Channel 2 Value\n"
  "#define FTM0_C3SC\t\t*(volatile uint32_t *)0x40038024 // Channel 3 Status And Control\n"
  "#define FTM0_C3V\t\t*(volatile uint32_t *)0x40038028 // Channel 3 Value\n"
  "#define FTM0_C4SC\t\t*(volatile uint32_t *)0x4003802C // Channel 4 Status And Control\n"
  "#define FTM0_C4V\t\t*(volatile uint32_t *)0x40038030 // Channel 4 Value\n"
  "#define FTM0_C5SC\t\t*(volatile uint32_t *)0x40038034 // Channel 5 Status And Control\n"
  "#define FTM0_C5V\t\t*(volatile uint32_t *)0x40038038 // Channel 5 Value\n"
  "#define FTM0_C6SC\t\t*(volatile uint32_t *)0x4003803C // Channel 6 Status And Control\n"
  "#define FTM0_C6V\t\t*(volatile uint32_t *)0x40038040 // Channel 6 Value\n"
  "#define FTM0_C7SC\t\t*(volatile uint32_t *)0x40038044 // Channel 7 Status And Control\n"
  "#define FTM0_C7V\t\t*(volatile uint32_t *)0x40038048 // Channel 7 Value\n"
  "#define FTM0_CNTIN\t\t*(volatile uint32_t *)0x4003804C // Counter Initial Value\n"
  "#define FTM0_STATUS\t\t*(volatile uint32_t *)0x40038050 // Capture And Compare Status\n"
  "#define FTM0_MODE\t\t*(volatile uint32_t *)0x40038054 // Features Mode Selection\n"
  "#define FTM_MODE_FAULTIE\t\t0x80\t\t\t\t// Fault Interrupt Enable\n"
  "#define FTM_MODE_FAULTM(n)\t\t(((n) & 3) << 5)\t\t// Fault Control Mode\n"
  "#define FTM_MODE_CAPTEST\t\t0x10\t\t\t\t// Capture Test Mode Enable\n"
  "#define FTM_MODE_PWMSYNC\t\t0x08\t\t\t\t// PWM Synchronization Mode\n"
  "#define FTM_MODE_WPDIS\t\t\t0x04\t\t\t\t// Write Protection Disable\n"
  "#define FTM_MODE_INIT\t\t\t0x02\t\t\t\t// Initialize The Channels Output\n"
  "#define FTM_MODE_FTMEN\t\t\t0x01\t\t\t\t// FTM Enable\n"
  "#define FTM0_SYNC\t\t*(volatile uint32_t *)0x40038058 // Synchronization\n"
  "#define FTM_SYNC_SWSYNC\t\t\t0x80\t\t\t\t// \n"
  "#define FTM_SYNC_TRIG2\t\t\t0x40\t\t\t\t// \n"
  "#define FTM_SYNC_TRIG1\t\t\t0x20\t\t\t\t// \n"
  "#define FTM_SYNC_TRIG0\t\t\t0x10\t\t\t\t// \n"
  "#define FTM_SYNC_SYNCHOM\t\t0x08\t\t\t\t// \n"
  "#define FTM_SYNC_REINIT\t\t\t0x04\t\t\t\t// \n"
  "#define FTM_SYNC_CNTMAX\t\t\t0x02\t\t\t\t// \n"
  "#define FTM_SYNC_CNTMIN\t\t\t0x01\t\t\t\t// \n"
  "#define FTM0_OUTINIT\t\t*(volatile uint32_t *)0x4003805C // Initial State For Channels Output\n"
  "#define FTM0_OUTMASK\t\t*(volatile uint32_t *)0x40038060 // Output Mask\n"
  "#define FTM0_COMBINE\t\t*(volatile uint32_t *)0x40038064 // Function For Linked Channels\n"
  "#define FTM0_DEADTIME\t\t*(volatile uint32_t *)0x40038068 // Deadtime Insertion Control\n"
  "#define FTM0_EXTTRIG\t\t*(volatile uint32_t *)0x4003806C // FTM External Trigger\n"
  "#define FTM0_POL\t\t*(volatile uint32_t *)0x40038070 // Channels Polarity\n"
  "#define FTM0_FMS\t\t*(volatile uint32_t *)0x40038074 // Fault Mode Status\n"
  "#define FTM0_FILTER\t\t*(volatile uint32_t *)0x40038078 // Input Capture Filter Control\n"
  "#define FTM0_FLTCTRL\t\t*(volatile uint32_t *)0x4003807C // Fault Control\n"
  "#define FTM0_QDCTRL\t\t*(volatile uint32_t *)0x40038080 // Quadrature Decoder Control And Status\n"
  "#define FTM0_CONF\t\t*(volatile uint32_t *)0x40038084 // Configuration\n"
  "#define FTM0_FLTPOL\t\t*(volatile uint32_t *)0x40038088 // FTM Fault Input Polarity\n"
  "#define FTM0_SYNCONF\t\t*(volatile uint32_t *)0x4003808C // Synchronization Configuration\n"
  "#define FTM0_INVCTRL\t\t*(volatile uint32_t *)0x40038090 // FTM Inverting Control\n"
  "#define FTM0_SWOCTRL\t\t*(volatile uint32_t *)0x40038094 // FTM Software Output Control\n"
  "#define FTM0_PWMLOAD\t\t*(volatile uint32_t *)0x40038098 // FTM PWM Load\n"
  "#define FTM1_SC\t\t\t*(volatile uint32_t *)0x40039000 // Status And Control\n"
  "#define FTM1_CNT\t\t*(volatile uint32_t *)0x40039004 // Counter\n"
  "#define FTM1_MOD\t\t*(volatile uint32_t *)0x40039008 // Modulo\n"
  "#define FTM1_C0SC\t\t*(volatile uint32_t *)0x4003900C // Channel 0 Status And Control\n"
  "#define FTM1_C0V\t\t*(volatile uint32_t *)0x40039010 // Channel 0 Value\n"
  "#define FTM1_C1SC\t\t*(volatile uint32_t *)0x40039014 // Channel 1 Status And Control\n"
  "#define FTM1_C1V\t\t*(volatile uint32_t *)0x40039018 // Channel 1 Value\n"
  "#define FTM1_CNTIN\t\t*(volatile uint32_t *)0x4003904C // Counter Initial Value\n"
  "#define FTM1_STATUS\t\t*(volatile uint32_t *)0x40039050 // Capture And Compare Status\n"
  "#define FTM1_MODE\t\t*(volatile uint32_t *)0x40039054 // Features Mode Selection\n"
  "#define FTM1_SYNC\t\t*(volatile uint32_t *)0x40039058 // Synchronization\n"
  "#define FTM1_OUTINIT\t\t*(volatile uint32_t *)0x4003905C // Initial State For Channels Output\n"
  "#define FTM1_OUTMASK\t\t*(volatile uint32_t *)0x40039060 // Output Mask\n"
  "#define FTM1_COMBINE\t\t*(volatile uint32_t *)0x40039064 // Function For Linked Channels\n"
  "#define FTM1_DEADTIME\t\t*(volatile uint32_t *)0x40039068 // Deadtime Insertion Control\n"
  "#define FTM1_EXTTRIG\t\t*(volatile uint32_t *)0x4003906C // FTM External Trigger\n"
  "#define FTM1_POL\t\t*(volatile uint32_t *)0x40039070 // Channels Polarity\n"
  "#define FTM1_FMS\t\t*(volatile uint32_t *)0x40039074 // Fault Mode Status\n"
  "#define FTM1_FILTER\t\t*(volatile uint32_t *)0x40039078 // Input Capture Filter Control\n"
  "#define FTM1_FLTCTRL\t\t*(volatile uint32_t *)0x4003907C // Fault Control\n"
  "#define FTM1_QDCTRL\t\t*(volatile uint32_t *)0x40039080 // Quadrature Decoder Control And Status\n"
  "#define FTM1_CONF\t\t*(volatile uint32_t *)0x40039084 // Configuration\n"
  "#define FTM1_FLTPOL\t\t*(volatile uint32_t *)0x40039088 // FTM Fault Input Polarity\n"
  "#define FTM1_SYNCONF\t\t*(volatile uint32_t *)0x4003908C // Synchronization Configuration\n"
  "#define FTM1_INVCTRL\t\t*(volatile uint32_t *)0x40039090 // FTM Inverting Control\n"
  "#define FTM1_SWOCTRL\t\t*(volatile uint32_t *)0x40039094 // FTM Software Output Control\n"
  "#define FTM1_PWMLOAD\t\t*(volatile uint32_t *)0x40039098 // FTM PWM Load\n"
  "#define FTM2_SC\t\t\t*(volatile uint32_t *)0x400B8000 // Status And Control\n"
  "#define FTM2_CNT\t\t*(volatile uint32_t *)0x400B8004 // Counter\n"
  "#define FTM2_MOD\t\t*(volatile uint32_t *)0x400B8008 // Modulo\n"
  "#define FTM2_C0SC\t\t*(volatile uint32_t *)0x400B800C // Channel 0 Status And Control\n"
  "#define FTM2_C0V\t\t*(volatile uint32_t *)0x400B8010 // Channel 0 Value\n"
  "#define FTM2_C1SC\t\t*(volatile uint32_t *)0x400B8014 // Channel 1 Status And Control\n"
  "#define FTM2_C1V\t\t*(volatile uint32_t *)0x400B8018 // Channel 1 Value\n"
  "#define FTM2_CNTIN\t\t*(volatile uint32_t *)0x400B804C // Counter Initial Value\n"
  "#define FTM2_STATUS\t\t*(volatile uint32_t *)0x400B8050 // Capture And Compare Status\n"
  "#define FTM2_MODE\t\t*(volatile uint32_t *)0x400B8054 // Features Mode Selection\n"
  "#define FTM2_SYNC\t\t*(volatile uint32_t *)0x400B8058 // Synchronization\n"
  "#define FTM2_OUTINIT\t\t*(volatile uint32_t *)0x400B805C // Initial State For Channels Output\n"
  "#define FTM2_OUTMASK\t\t*(volatile uint32_t *)0x400B8060 // Output Mask\n"
  "#define FTM2_COMBINE\t\t*(volatile uint32_t *)0x400B8064 // Function For Linked Channels\n"
  "#define FTM2_DEADTIME\t\t*(volatile uint32_t *)0x400B8068 // Deadtime Insertion Control\n"
  "#define FTM2_EXTTRIG\t\t*(volatile uint32_t *)0x400B806C // FTM External Trigger\n"
  "#define FTM2_POL\t\t*(volatile uint32_t *)0x400B8070 // Channels Polarity\n"
  "#define FTM2_FMS\t\t*(volatile uint32_t *)0x400B8074 // Fault Mode Status\n"
  "#define FTM2_FILTER\t\t*(volatile uint32_t *)0x400B8078 // Input Capture Filter Control\n"
  "#define FTM2_FLTCTRL\t\t*(volatile uint32_t *)0x400B807C // Fault Control\n"
  "#define FTM2_QDCTRL\t\t*(volatile uint32_t *)0x400B8080 // Quadrature Decoder Control And Status\n"
  "#define FTM2_CONF\t\t*(volatile uint32_t *)0x400B8084 // Configuration\n"
  "#define FTM2_FLTPOL\t\t*(volatile uint32_t *)0x400B8088 // FTM Fault Input Polarity\n"
  "#define FTM2_SYNCONF\t\t*(volatile uint32_t *)0x400B808C // Synchronization Configuration\n"
  "#define FTM2_INVCTRL\t\t*(volatile uint32_t *)0x400B8090 // FTM Inverting Control\n"
  "#define FTM2_SWOCTRL\t\t*(volatile uint32_t *)0x400B8094 // FTM Software Output Control\n"
  "#define FTM2_PWMLOAD\t\t*(volatile uint32_t *)0x400B8098 // FTM PWM Load\n"
  "\n"
  "// Chapter 36: Periodic Interrupt Timer (PIT)\n"
  "#define PIT_MCR\t\t\t*(volatile uint32_t *)0x40037000 // PIT Module Control Register\n"
  "#define PIT_LDVAL0\t\t*(volatile uint32_t *)0x40037100 // Timer Load Value Register\n"
  "#define PIT_CVAL0\t\t*(volatile uint32_t *)0x40037104 // Current Timer Value Register\n"
  "#define PIT_TCTRL0\t\t*(volatile uint32_t *)0x40037108 // Timer Control Register\n"
  "#define PIT_TFLG0\t\t*(volatile uint32_t *)0x4003710C // Timer Flag Register\n"
  "#define PIT_LDVAL1\t\t*(volatile uint32_t *)0x40037110 // Timer Load Value Register\n"
  "#define PIT_CVAL1\t\t*(volatile uint32_t *)0x40037114 // Current Timer Value Register\n"
  "#define PIT_TCTRL1\t\t*(volatile uint32_t *)0x40037118 // Timer Control Register\n"
  "#define PIT_TFLG1\t\t*(volatile uint32_t *)0x4003711C // Timer Flag Register\n"
  "#define PIT_LDVAL2\t\t*(volatile uint32_t *)0x40037120 // Timer Load Value Register\n"
  "#define PIT_CVAL2\t\t*(volatile uint32_t *)0x40037124 // Current Timer Value Register\n"
  "#define PIT_TCTRL2\t\t*(volatile uint32_t *)0x40037128 // Timer Control Register\n"
  "#define PIT_TFLG2\t\t*(volatile uint32_t *)0x4003712C // Timer Flag Register\n"
  "#define PIT_LDVAL3\t\t*(volatile uint32_t *)0x40037130 // Timer Load Value Register\n"
  "#define PIT_CVAL3\t\t*(volatile uint32_t *)0x40037134 // Current Timer Value Register\n"
  "#define PIT_TCTRL3\t\t*(volatile uint32_t *)0x40037138 // Timer Control Register\n"
  "#define PIT_TFLG3\t\t*(volatile uint32_t *)0x4003713C // Timer Flag Register\n"
  "\n"
  "// Chapter 37: Low-Power Timer (LPTMR)\n"
  "#define LPTMR0_CSR\t\t*(volatile uint32_t *)0x40040000 // Low Power Timer Control Status Register\n"
  "#define LPTMR0_PSR\t\t*(volatile uint32_t *)0x40040004 // Low Power Timer Prescale Register\n"
  "#define LPTMR0_CMR\t\t*(volatile uint32_t *)0x40040008 // Low Power Timer Compare Register\n"
  "#define LPTMR0_CNR\t\t*(volatile uint32_t *)0x4004000C // Low Power Timer Counter Register\n"
  "\n"
  "// Chapter 38: Carrier Modulator Transmitter (CMT)\n"
  "#define CMT_CGH1\t\t*(volatile uint8_t  *)0x40062000 // CMT Carrier Generator High Data Register 1\n"
  "#define CMT_CGL1\t\t*(volatile uint8_t  *)0x40062001 // CMT Carrier Generator Low Data Register 1\n"
  "#define CMT_CGH2\t\t*(volatile uint8_t  *)0x40062002 // CMT Carrier Generator High Data Register 2\n"
  "#define CMT_CGL2\t\t*(volatile uint8_t  *)0x40062003 // CMT Carrier Generator Low Data Register 2\n"
  "#define CMT_OC\t\t\t*(volatile uint8_t  *)0x40062004 // CMT Output Control Register\n"
  "#define CMT_MSC\t\t\t*(volatile uint8_t  *)0x40062005 // CMT Modulator Status and Control Register\n"
  "#define CMT_CMD1\t\t*(volatile uint8_t  *)0x40062006 // CMT Modulator Data Register Mark High\n"
  "#define CMT_CMD2\t\t*(volatile uint8_t  *)0x40062007 // CMT Modulator Data Register Mark Low\n"
  "#define CMT_CMD3\t\t*(volatile uint8_t  *)0x40062008 // CMT Modulator Data Register Space High\n"
  "#define CMT_CMD4\t\t*(volatile uint8_t  *)0x40062009 // CMT Modulator Data Register Space Low\n"
  "#define CMT_PPS\t\t\t*(volatile uint8_t  *)0x4006200A // CMT Primary Prescaler Register\n"
  "#define CMT_DMA\t\t\t*(volatile uint8_t  *)0x4006200B // CMT Direct Memory Access Register\n"
  "\n"
  "// Chapter 39: Real Time Clock (RTC)\n"
  "#define RTC_TSR\t\t\t*(volatile uint32_t *)0x4003D000 // RTC Time Seconds Register\n"
  "#define RTC_TPR\t\t\t*(volatile uint32_t *)0x4003D004 // RTC Time Prescaler Register\n"
  "#define RTC_TAR\t\t\t*(volatile uint32_t *)0x4003D008 // RTC Time Alarm Register\n"
  "#define RTC_TCR\t\t\t*(volatile uint32_t *)0x4003D00C // RTC Time Compensation Register\n"
  "#define RTC_TCR_CIC(n)\t\t\t(((n) & 255) << 24)\t\t// Compensation Interval Counter\n"
  "#define RTC_TCR_TCV(n)\t\t\t(((n) & 255) << 16)\t\t// Time Compensation Value\n"
  "#define RTC_TCR_CIR(n)\t\t\t(((n) & 255) << 8)\t\t// Compensation Interval Register\n"
  "#define RTC_TCR_TCR(n)\t\t\t(((n) & 255) << 0)\t\t// Time Compensation Register\n"
  "#define RTC_CR\t\t\t*(volatile uint32_t *)0x4003D010 // RTC Control Register\n"
  "#define RTC_CR_SC2P\t\t\t(uint32_t)0x00002000\t\t// \n"
  "#define RTC_CR_SC4P\t\t\t(uint32_t)0x00001000\t\t// \n"
  "#define RTC_CR_SC8P\t\t\t(uint32_t)0x00000800\t\t// \n"
  "#define RTC_CR_SC16P\t\t\t(uint32_t)0x00000400\t\t// \n"
  "#define RTC_CR_CLKO\t\t\t(uint32_t)0x00000200\t\t// \n"
  "#define RTC_CR_OSCE\t\t\t(uint32_t)0x00000100\t\t// \n"
  "#define RTC_CR_UM\t\t\t(uint32_t)0x00000008\t\t// \n"
  "#define RTC_CR_SUP\t\t\t(uint32_t)0x00000004\t\t// \n"
  "#define RTC_CR_WPE\t\t\t(uint32_t)0x00000002\t\t// \n"
  "#define RTC_CR_SWR\t\t\t(uint32_t)0x00000001\t\t// \n"
  "#define RTC_SR\t\t\t*(volatile uint32_t *)0x4003D014 // RTC Status Register\n"
  "#define RTC_SR_TCE\t\t\t(uint32_t)0x00000010\t\t// \n"
  "#define RTC_SR_TAF\t\t\t(uint32_t)0x00000004\t\t// \n"
  "#define RTC_SR_TOF\t\t\t(uint32_t)0x00000002\t\t// \n"
  "#define RTC_SR_TIF\t\t\t(uint32_t)0x00000001\t\t// \n"
  "#define RTC_LR\t\t\t*(volatile uint32_t *)0x4003D018 // RTC Lock Register\n"
  "#define RTC_IER\t\t\t*(volatile uint32_t *)0x4003D01C // RTC Interrupt Enable Register\n"
  "#define RTC_WAR\t\t\t*(volatile uint32_t *)0x4003D800 // RTC Write Access Register\n"
  "#define RTC_RAR\t\t\t*(volatile uint32_t *)0x4003D804 // RTC Read Access Register\n"
  "\n"
  "// Chapter 40: Universal Serial Bus OTG Controller (USBOTG)\n"
  "#define USB0_PERID\t\t*(const\t   uint8_t  *)0x40072000 // Peripheral ID register\n"
  "#define USB0_IDCOMP\t\t*(const\t   uint8_t  *)0x40072004 // Peripheral ID Complement register\n"
  "#define USB0_REV\t\t*(const\t   uint8_t  *)0x40072008 // Peripheral Revision register\n"
  "#define USB0_ADDINFO\t\t*(volatile uint8_t  *)0x4007200C // Peripheral Additional Info register\n"
  "#define USB0_OTGISTAT\t\t*(volatile uint8_t  *)0x40072010 // OTG Interrupt Status register\n"
  "#define USB_OTGISTAT_IDCHG\t\t(uint8_t)0x80\t\t\t//\n"
  "#define USB_OTGISTAT_ONEMSEC\t\t(uint8_t)0x40\t\t\t//\n"
  "#define USB_OTGISTAT_LINE_STATE_CHG\t(uint8_t)0x20\t\t\t//\n"
  "#define USB_OTGISTAT_SESSVLDCHG\t\t(uint8_t)0x08\t\t\t//\n"
  "#define USB_OTGISTAT_B_SESS_CHG\t\t(uint8_t)0x04\t\t\t//\n"
  "#define USB_OTGISTAT_AVBUSCHG\t\t(uint8_t)0x01\t\t\t//\n"
  "#define USB0_OTGICR\t\t*(volatile uint8_t  *)0x40072014 // OTG Interrupt Control Register\n"
  "#define USB_OTGICR_IDEN\t\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_OTGICR_ONEMSECEN\t\t(uint8_t)0x40\t\t\t// \n"
  "#define USB_OTGICR_LINESTATEEN\t\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_OTGICR_SESSVLDEN\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_OTGICR_BSESSEN\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_OTGICR_AVBUSEN\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_OTGSTAT\t\t*(volatile uint8_t  *)0x40072018 // OTG Status register\n"
  "#define USB_OTGSTAT_ID\t\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_OTGSTAT_ONEMSECEN\t\t(uint8_t)0x40\t\t\t// \n"
  "#define USB_OTGSTAT_LINESTATESTABLE\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_OTGSTAT_SESS_VLD\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_OTGSTAT_BSESSEND\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_OTGSTAT_AVBUSVLD\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_OTGCTL\t\t*(volatile uint8_t  *)0x4007201C // OTG Control Register\n"
  "#define USB_OTGCTL_DPHIGH\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_OTGCTL_DPLOW\t\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_OTGCTL_DMLOW\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB_OTGCTL_OTGEN\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB0_ISTAT\t\t*(volatile uint8_t  *)0x40072080 // Interrupt Status Register\n"
  "#define USB_ISTAT_STALL\t\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_ISTAT_ATTACH\t\t(uint8_t)0x40\t\t\t// \n"
  "#define USB_ISTAT_RESUME\t\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_ISTAT_SLEEP\t\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB_ISTAT_TOKDNE\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_ISTAT_SOFTOK\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_ISTAT_ERROR\t\t\t(uint8_t)0x02\t\t\t// \n"
  "#define USB_ISTAT_USBRST\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_INTEN\t\t*(volatile uint8_t  *)0x40072084 // Interrupt Enable Register\n"
  "#define USB_INTEN_STALLEN\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_INTEN_ATTACHEN\t\t(uint8_t)0x40\t\t\t// \n"
  "#define USB_INTEN_RESUMEEN\t\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_INTEN_SLEEPEN\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB_INTEN_TOKDNEEN\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_INTEN_SOFTOKEN\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_INTEN_ERROREN\t\t(uint8_t)0x02\t\t\t// \n"
  "#define USB_INTEN_USBRSTEN\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_ERRSTAT\t\t*(volatile uint8_t  *)0x40072088 // Error Interrupt Status Register\n"
  "#define USB_ERRSTAT_BTSERR\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_ERRSTAT_DMAERR\t\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_ERRSTAT_BTOERR\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB_ERRSTAT_DFN8\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_ERRSTAT_CRC16\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_ERRSTAT_CRC5EOF\t\t(uint8_t)0x02\t\t\t// \n"
  "#define USB_ERRSTAT_PIDERR\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_ERREN\t\t*(volatile uint8_t  *)0x4007208C // Error Interrupt Enable Register\n"
  "#define USB_ERREN_BTSERREN\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_ERREN_DMAERREN\t\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_ERREN_BTOERREN\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB_ERREN_DFN8EN\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_ERREN_CRC16EN\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_ERREN_CRC5EOFEN\t\t(uint8_t)0x02\t\t\t// \n"
  "#define USB_ERREN_PIDERREN\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_STAT\t\t*(volatile uint8_t  *)0x40072090 // Status Register\n"
  "#define USB_STAT_TX\t\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_STAT_ODD\t\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_STAT_ENDP(n)\t\t(uint8_t)((n) >> 4)\t\t// \n"
  "#define USB0_CTL\t\t*(volatile uint8_t  *)0x40072094 // Control Register\n"
  "#define USB_CTL_JSTATE\t\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_CTL_SE0\t\t\t(uint8_t)0x40\t\t\t// \n"
  "#define USB_CTL_TXSUSPENDTOKENBUSY\t(uint8_t)0x20\t\t\t// \n"
  "#define USB_CTL_RESET\t\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB_CTL_HOSTMODEEN\t\t(uint8_t)0x08\t\t\t// \n"
  "#define USB_CTL_RESUME\t\t\t(uint8_t)0x04\t\t\t// \n"
  "#define USB_CTL_ODDRST\t\t\t(uint8_t)0x02\t\t\t// \n"
  "#define USB_CTL_USBENSOFEN\t\t(uint8_t)0x01\t\t\t// \n"
  "#define USB0_ADDR\t\t*(volatile uint8_t  *)0x40072098 // Address Register\n"
  "#define USB0_BDTPAGE1\t\t*(volatile uint8_t  *)0x4007209C // BDT Page Register 1\n"
  "#define USB0_FRMNUML\t\t*(volatile uint8_t  *)0x400720A0 // Frame Number Register Low\n"
  "#define USB0_FRMNUMH\t\t*(volatile uint8_t  *)0x400720A4 // Frame Number Register High\n"
  "#define USB0_TOKEN\t\t*(volatile uint8_t  *)0x400720A8 // Token Register\n"
  "#define USB0_SOFTHLD\t\t*(volatile uint8_t  *)0x400720AC // SOF Threshold Register\n"
  "#define USB0_BDTPAGE2\t\t*(volatile uint8_t  *)0x400720B0 // BDT Page Register 2\n"
  "#define USB0_BDTPAGE3\t\t*(volatile uint8_t  *)0x400720B4 // BDT Page Register 3\n"
  "#define USB0_ENDPT0\t\t*(volatile uint8_t  *)0x400720C0 // Endpoint Control Register\n"
  "#define USB_ENDPT_HOSTWOHUB\t\t(uint8_t)0x80\t\t\t// host only, enable low speed\n"
  "#define USB_ENDPT_RETRYDIS\t\t(uint8_t)0x40\t\t\t// host only, set to disable NAK retry\n"
  "#define USB_ENDPT_EPCTLDIS\t\t(uint8_t)0x10\t\t\t// 0=control, 1=bulk, interrupt, isync\n"
  "#define USB_ENDPT_EPRXEN\t\t(uint8_t)0x08\t\t\t// enables the endpoint for RX transfers.\n"
  "#define USB_ENDPT_EPTXEN\t\t(uint8_t)0x04\t\t\t// enables the endpoint for TX transfers.\n"
  "#define USB_ENDPT_EPSTALL\t\t(uint8_t)0x02\t\t\t// set to stall endpoint\n"
  "#define USB_ENDPT_EPHSHK\t\t(uint8_t)0x01\t\t\t// enable handshaking during a transaction, generally set unless Isochronous\n"
  "#define USB0_ENDPT1\t\t*(volatile uint8_t  *)0x400720C4 // Endpoint Control Register\n"
  "#define USB0_ENDPT2\t\t*(volatile uint8_t  *)0x400720C8 // Endpoint Control Register\n"
  "#define USB0_ENDPT3\t\t*(volatile uint8_t  *)0x400720CC // Endpoint Control Register\n"
  "#define USB0_ENDPT4\t\t*(volatile uint8_t  *)0x400720D0 // Endpoint Control Register\n"
  "#define USB0_ENDPT5\t\t*(volatile uint8_t  *)0x400720D4 // Endpoint Control Register\n"
  "#define USB0_ENDPT6\t\t*(volatile uint8_t  *)0x400720D8 // Endpoint Control Register\n"
  "#define USB0_ENDPT7\t\t*(volatile uint8_t  *)0x400720DC // Endpoint Control Register\n"
  "#define USB0_ENDPT8\t\t*(volatile uint8_t  *)0x400720E0 // Endpoint Control Register\n"
  "#define USB0_ENDPT9\t\t*(volatile uint8_t  *)0x400720E4 // Endpoint Control Register\n"
  "#define USB0_ENDPT10\t\t*(volatile uint8_t  *)0x400720E8 // Endpoint Control Register\n"
  "#define USB0_ENDPT11\t\t*(volatile uint8_t  *)0x400720EC // Endpoint Control Register\n"
  "#define USB0_ENDPT12\t\t*(volatile uint8_t  *)0x400720F0 // Endpoint Control Register\n"
  "#define USB0_ENDPT13\t\t*(volatile uint8_t  *)0x400720F4 // Endpoint Control Register\n"
  "#define USB0_ENDPT14\t\t*(volatile uint8_t  *)0x400720F8 // Endpoint Control Register\n"
  "#define USB0_ENDPT15\t\t*(volatile uint8_t  *)0x400720FC // Endpoint Control Register\n"
  "#define USB0_USBCTRL\t\t*(volatile uint8_t  *)0x40072100 // USB Control Register\n"
  "#define USB_USBCTRL_SUSP\t\t(uint8_t)0x80\t\t\t// Places the USB transceiver into the suspend state.\n"
  "#define USB_USBCTRL_PDE\t\t\t(uint8_t)0x40\t\t\t// Enables the weak pulldowns on the USB transceiver.\n"
  "#define USB0_OBSERVE\t\t*(volatile uint8_t  *)0x40072104 // USB OTG Observe Register\n"
  "#define USB_OBSERVE_DPPU\t\t(uint8_t)0x80\t\t\t// \n"
  "#define USB_OBSERVE_DPPD\t\t(uint8_t)0x40\t\t\t// \n"
  "#define USB_OBSERVE_DMPD\t\t(uint8_t)0x10\t\t\t// \n"
  "#define USB0_CONTROL\t\t*(volatile uint8_t  *)0x40072108 // USB OTG Control Register\n"
  "#define USB_CONTROL_DPPULLUPNONOTG\t(uint8_t)0x10\t\t\t//  Provides control of the DP PULLUP in the USB OTG module, if USB is configured in non-OTG device"
  " mode.\n"
  "#define USB0_USBTRC0\t\t*(volatile uint8_t  *)0x4007210C // USB Transceiver Control Register 0\n"
  "#define USB_USBTRC_USBRESET\t\t(uint8_t)0x80\t\t\t//\n"
  "#define USB_USBTRC_USBRESMEN\t\t(uint8_t)0x20\t\t\t//\n"
  "#define USB_USBTRC_SYNC_DET\t\t(uint8_t)0x02\t\t\t//\n"
  "#define USB_USBTRC_USB_RESUME_INT\t(uint8_t)0x01\t\t\t//\n"
  "#define USB0_USBFRMADJUST\t*(volatile uint8_t  *)0x40072114 // Frame Adjust Register\n"
  "\n"
  "// Chapter 41: USB Device Charger Detection Module (USBDCD)\n"
  "#define USBDCD_CONTROL\t\t*(volatile uint32_t *)0x40035000 // Control register\n"
  "#define USBDCD_CLOCK\t\t*(volatile uint32_t *)0x40035004 // Clock register\n"
  "#define USBDCD_STATUS\t\t*(volatile uint32_t *)0x40035008 // Status register\n"
  "#define USBDCD_TIMER0\t\t*(volatile uint32_t *)0x40035010 // TIMER0 register\n"
  "#define USBDCD_TIMER1\t\t*(volatile uint32_t *)0x40035014 // TIMER1 register\n"
  "#define USBDCD_TIMER2\t\t*(volatile uint32_t *)0x40035018 // TIMER2 register\n"
  "\n"
  "// Chapter 43: SPI (DSPI)\n"
  "#define SPI0_MCR\t\t*(volatile uint32_t *)0x4002C000 // DSPI Module Configuration Register\n"
  "#define SPI_MCR_MSTR\t\t\t(uint32_t)0x80000000\t\t// Master/Slave Mode Select\n"
  "#define SPI_MCR_CONT_SCKE\t\t(uint32_t)0x40000000\t\t// \n"
  "#define SPI_MCR_DCONF(n)\t\t(((n) & 3) << 28)\t\t// \n"
  "#define SPI_MCR_FRZ\t\t\t(uint32_t)0x08000000\t\t// \n"
  "#define SPI_MCR_MTFE\t\t\t(uint32_t)0x04000000\t\t// \n"
  "#define SPI_MCR_ROOE\t\t\t(uint32_t)0x01000000\t\t// \n"
  "#define SPI_MCR_PCSIS(n)\t\t(((n) & 0x1F) << 16)\t\t//\n"
  "#define SPI_MCR_DOZE\t\t\t(uint32_t)0x00008000\t\t// \n"
  "#define SPI_MCR_MDIS\t\t\t(uint32_t)0x00004000\t\t// \n"
  "#define SPI_MCR_DIS_TXF\t\t\t(uint32_t)0x00002000\t\t// \n"
  "#define SPI_MCR_DIS_RXF\t\t\t(uint32_t)0x00001000\t\t// \n"
  "#define SPI_MCR_CLR_TXF\t\t\t(uint32_t)0x00000800\t\t// \n"
  "#define SPI_MCR_CLR_RXF\t\t\t(uint32_t)0x00000400\t\t// \n"
  "#define SPI_MCR_SMPL_PT(n)\t\t(((n) & 3) << 8)\t\t//\n"
  "#define SPI_MCR_HALT\t\t\t(uint32_t)0x00000001\t\t// \n"
  "#define SPI0_TCR\t\t*(volatile uint32_t *)0x4002C008 // DSPI Transfer Count Register\n"
  "#define SPI0_CTAR0\t\t*(volatile uint32_t *)0x4002C00C // DSPI Clock and Transfer Attributes Register, In Master Mode\n"
  "#define SPI_CTAR_DBR\t\t\t(uint32_t)0x80000000\t\t// Double Baud Rate\n"
  "#define SPI_CTAR_FMSZ(n)\t\t(((n) & 15) << 27)\t\t// Frame Size (+1)\n"
  "#define SPI_CTAR_CPOL\t\t\t(uint32_t)0x04000000\t\t// Clock Polarity\n"
  "#define SPI_CTAR_CPHA\t\t\t(uint32_t)0x02000000\t\t// Clock Phase\n"
  "#define SPI_CTAR_LSBFE\t\t\t(uint32_t)0x01000000\t\t// LSB First\n"
  "#define SPI_CTAR_PCSSCK(n)\t\t(((n) & 3) << 22)\t\t// PCS to SCK Delay Prescaler\n"
  "#define SPI_CTAR_PASC(n)\t\t(((n) & 3) << 20)\t\t// After SCK Delay Prescaler\n"
  "#define SPI_CTAR_PDT(n)\t\t\t(((n) & 3) << 18)\t\t// Delay after Transfer Prescaler\n"
  "#define SPI_CTAR_PBR(n)\t\t\t(((n) & 3) << 16)\t\t// Baud Rate Prescaler\n"
  "#define SPI_CTAR_CSSCK(n)\t\t(((n) & 15) << 12)\t\t// PCS to SCK Delay Scaler\n"
  "#define SPI_CTAR_ASC(n)\t\t\t(((n) & 15) << 8)\t\t// After SCK Delay Scaler\n"
  "#define SPI_CTAR_DT(n)\t\t\t(((n) & 15) << 4)\t\t// Delay After Transfer Scaler\n"
  "#define SPI_CTAR_BR(n)\t\t\t(((n) & 15) << 0)\t\t// Baud Rate Scaler\n"
  "#define SPI0_CTAR0_SLAVE\t*(volatile uint32_t *)0x4002C00C // DSPI Clock and Transfer Attributes Register, In Slave Mode\n"
  "#define SPI0_CTAR1\t\t*(volatile uint32_t *)0x4002C010 // DSPI Clock and Transfer Attributes Register, In Master Mode\n"
  "#define SPI0_SR\t\t\t*(volatile uint32_t *)0x4002C02C // DSPI Status Register\n"
  "#define SPI_SR_TCF\t\t\t(uint32_t)0x80000000\t\t// Transfer Complete Flag\n"
  "#define SPI_SR_TXRXS\t\t\t(uint32_t)0x40000000\t\t// TX and RX Status\n"
  "#define SPI_SR_EOQF\t\t\t(uint32_t)0x10000000\t\t// End of Queue Flag\n"
  "#define SPI_SR_TFUF\t\t\t(uint32_t)0x08000000\t\t// Transmit FIFO Underflow Flag\n"
  "#define SPI_SR_TFFF\t\t\t(uint32_t)0x02000000\t\t// Transmit FIFO Fill Flag\n"
  "#define SPI_SR_RFOF\t\t\t(uint32_t)0x00080000\t\t// Receive FIFO Overflow Flag\n"
  "#define SPI_SR_RFDF\t\t\t(uint32_t)0x00020000\t\t// Receive FIFO Drain Flag\n"
  "#define SPI0_RSER\t\t*(volatile uint32_t *)0x4002C030 // DSPI DMA/Interrupt Request Select and Enable Register\n"
  "#define SPI_RSER_TCF_RE\t\t\t(uint32_t)0x80000000\t\t// Transmission Complete Request Enable\n"
  "#define SPI_RSER_EOQF_RE\t\t(uint32_t)0x10000000\t\t// DSPI Finished Request Request Enable\n"
  "#define SPI_RSER_TFUF_RE\t\t(uint32_t)0x08000000\t\t// Transmit FIFO Underflow Request Enable\n"
  "#define SPI_RSER_TFFF_RE\t\t(uint32_t)0x02000000\t\t// Transmit FIFO Fill Request Enable\n"
  "#define SPI_RSER_TFFF_DIRS\t\t(uint32_t)0x01000000\t\t// Transmit FIFO FIll Dma or Interrupt Request Select\n"
  "#define SPI_RSER_RFOF_RE\t\t(uint32_t)0x00080000\t\t// Receive FIFO Overflow Request Enable\n"
  "#define SPI_RSER_RFDF_RE\t\t(uint32_t)0x00020000\t\t// Receive FIFO Drain Request Enable\n"
  "#define SPI_RSER_RFDF_DIRS\t\t(uint32_t)0x00010000\t\t// Receive FIFO Drain DMA or Interrupt Request Select\n"
  "#define SPI0_PUSHR\t\t*(volatile uint32_t *)0x4002C034 // DSPI PUSH TX FIFO Register In Master Mode\n"
  "#define SPI_PUSHR_CONT\t\t\t(uint32_t)0x80000000\t\t// \n"
  "#define SPI_PUSHR_CTAS(n)\t\t(((n) & 7) << 28)\t\t// \n"
  "#define SPI_PUSHR_EOQ\t\t\t(uint32_t)0x08000000\t\t// \n"
  "#define SPI_PUSHR_CTCNT\t\t\t(uint32_t)0x04000000\t\t// \n"
  "#define SPI_PUSHR_PCS(n)\t\t(((n) & 31) << 16)\t\t//\n"
  "#define SPI0_PUSHR_SLAVE\t*(volatile uint32_t *)0x4002C034 // DSPI PUSH TX FIFO Register In Slave Mode\n"
  "#define SPI0_POPR\t\t*(volatile uint32_t *)0x4002C038 // DSPI POP RX FIFO Register\n"
  "#define SPI0_TXFR0\t\t*(volatile uint32_t *)0x4002C03C // DSPI Transmit FIFO Registers\n"
  "#define SPI0_TXFR1\t\t*(volatile uint32_t *)0x4002C040 // DSPI Transmit FIFO Registers\n"
  "#define SPI0_TXFR2\t\t*(volatile uint32_t *)0x4002C044 // DSPI Transmit FIFO Registers\n"
  "#define SPI0_TXFR3\t\t*(volatile uint32_t *)0x4002C048 // DSPI Transmit FIFO Registers\n"
  "#define SPI0_RXFR0\t\t*(volatile uint32_t *)0x4002C07C // DSPI Receive FIFO Registers\n"
  "#define SPI0_RXFR1\t\t*(volatile uint32_t *)0x4002C080 // DSPI Receive FIFO Registers\n"
  "#define SPI0_RXFR2\t\t*(volatile uint32_t *)0x4002C084 // DSPI Receive FIFO Registers\n"
  "#define SPI0_RXFR3\t\t*(volatile uint32_t *)0x4002C088 // DSPI Receive FIFO Registers\n"
  "typedef struct {\n"
  "\tvolatile uint32_t\tMCR;\t// 0\n"
  "\tvolatile uint32_t\tunused1;// 4\n"
  "\tvolatile uint32_t\tTCR;\t// 8\n"
  "\tvolatile uint32_t\tCTAR0;\t// c\n"
  "\tvolatile uint32_t\tCTAR1;\t// 10\n"
  "\tvolatile uint32_t\tCTAR2;\t// 14\n"
  "\tvolatile uint32_t\tCTAR3;\t// 18\n"
  "\tvolatile uint32_t\tCTAR4;\t// 1c\n"
  "\tvolatile uint32_t\tCTAR5;\t// 20\n"
  "\tvolatile uint32_t\tCTAR6;\t// 24\n"
  "\tvolatile uint32_t\tCTAR7;\t// 28\n"
  "\tvolatile uint32_t\tSR;\t// 2c\n"
  "\tvolatile uint32_t\tRSER;\t// 30\n"
  "\tvolatile uint32_t\tPUSHR;\t// 34\n"
  "\tvolatile uint32_t\tPOPR;\t// 38\n"
  "\tvolatile uint32_t\tTXFR[16]; // 3c\n"
  "\tvolatile uint32_t\tRXFR[16]; // 7c\n"
  "} SPI_t;\n"
  "#define SPI0\t\t(*(SPI_t *)0x4002C000)\n"
  "\n"
  "// Chapter 44: Inter-Integrated Circuit (I2C)\n"
  "#define I2C0_A1\t\t\t*(volatile uint8_t  *)0x40066000 // I2C Address Register 1\n"
  "#define I2C0_F\t\t\t*(volatile uint8_t  *)0x40066001 // I2C Frequency Divider register\n"
  "#define I2C0_C1\t\t\t*(volatile uint8_t  *)0x40066002 // I2C Control Register 1\n"
  "#define I2C_C1_IICEN\t\t\t(uint8_t)0x80\t\t\t// I2C Enable\n"
  "#define I2C_C1_IICIE\t\t\t(uint8_t)0x40\t\t\t// I2C Interrupt Enable\n"
  "#define I2C_C1_MST\t\t\t(uint8_t)0x20\t\t\t// Master Mode Select\n"
  "#define I2C_C1_TX\t\t\t(uint8_t)0x10\t\t\t// Transmit Mode Select\n"
  "#define I2C_C1_TXAK\t\t\t(uint8_t)0x08\t\t\t// Transmit Acknowledge Enable\n"
  "#define I2C_C1_RSTA\t\t\t(uint8_t)0x04\t\t\t// Repeat START\n"
  "#define I2C_C1_WUEN\t\t\t(uint8_t)0x02\t\t\t// Wakeup Enable\n"
  "#define I2C_C1_DMAEN\t\t\t(uint8_t)0x01\t\t\t// DMA Enable\n"
  "#define I2C0_S\t\t\t*(volatile uint8_t  *)0x40066003 // I2C Status register\n"
  "#define I2C_S_TCF\t\t\t(uint8_t)0x80\t\t\t// Transfer Complete Flag\n"
  "#define I2C_S_IAAS\t\t\t(uint8_t)0x40\t\t\t// Addressed As A Slave\n"
  "#define I2C_S_BUSY\t\t\t(uint8_t)0x20\t\t\t// Bus Busy\n"
  "#define I2C_S_ARBL\t\t\t(uint8_t)0x10\t\t\t// Arbitration Lost\n"
  "#define I2C_S_RAM\t\t\t(uint8_t)0x08\t\t\t// Range Address Match\n"
  "#define I2C_S_SRW\t\t\t(uint8_t)0x04\t\t\t// Slave Read/Write\n"
  "#define I2C_S_IICIF\t\t\t(uint8_t)0x02\t\t\t// Interrupt Flag\n"
  "#define I2C_S_RXAK\t\t\t(uint8_t)0x01\t\t\t// Receive Acknowledge\n"
  "#define I2C0_D\t\t\t*(volatile uint8_t  *)0x40066004 // I2C Data I/O register\n"
  "#define I2C0_C2\t\t\t*(volatile uint8_t  *)0x40066005 // I2C Control Register 2\n"
  "#define I2C_C2_GCAEN\t\t\t(uint8_t)0x80\t\t\t// General Call Address Enable\n"
  "#define I2C_C2_ADEXT\t\t\t(uint8_t)0x40\t\t\t// Address Extension\n"
  "#define I2C_C2_HDRS\t\t\t(uint8_t)0x20\t\t\t// High Drive Select\n"
  "#define I2C_C2_SBRC\t\t\t(uint8_t)0x10\t\t\t// Slave Baud Rate Control\n"
  "#define I2C_C2_RMEN\t\t\t(uint8_t)0x08\t\t\t// Range Address Matching Enable\n"
  "#define I2C_C2_AD(n)\t\t\t((n) & 7)\t\t\t// Slave Address, upper 3 bits\n"
  "#define I2C0_FLT\t\t*(volatile uint8_t  *)0x40066006 // I2C Programmable Input Glitch Filter register\n"
  "#define I2C0_RA\t\t\t*(volatile uint8_t  *)0x40066007 // I2C Range Address register\n"
  "#define I2C0_SMB\t\t*(volatile uint8_t  *)0x40066008 // I2C SMBus Control and Status register\n"
  "#define I2C0_A2\t\t\t*(volatile uint8_t  *)0x40066009 // I2C Address Register 2\n"
  "#define I2C0_SLTH\t\t*(volatile uint8_t  *)0x4006600A // I2C SCL Low Timeout Register High\n"
  "#define I2C0_SLTL\t\t*(volatile uint8_t  *)0x4006600B // I2C SCL Low Timeout Register Low\n"
  "\n"
  "#define I2C1_A1\t\t\t*(volatile uint8_t  *)0x40067000 // I2C Address Register 1\n"
  "#define I2C1_F\t\t\t*(volatile uint8_t  *)0x40067001 // I2C Frequency Divider register\n"
  "#define I2C1_C1\t\t\t*(volatile uint8_t  *)0x40067002 // I2C Control Register 1\n"
  "#define I2C1_S\t\t\t*(volatile uint8_t  *)0x40067003 // I2C Status register\n"
  "#define I2C1_D\t\t\t*(volatile uint8_t  *)0x40067004 // I2C Data I/O register\n"
  "#define I2C1_C2\t\t\t*(volatile uint8_t  *)0x40067005 // I2C Control Register 2\n"
  "#define I2C1_FLT\t\t*(volatile uint8_t  *)0x40067006 // I2C Programmable Input Glitch Filter register\n"
  "#define I2C1_RA\t\t\t*(volatile uint8_t  *)0x40067007 // I2C Range Address register\n"
  "#define I2C1_SMB\t\t*(volatile uint8_t  *)0x40067008 // I2C SMBus Control and Status register\n"
  "#define I2C1_A2\t\t\t*(volatile uint8_t  *)0x40067009 // I2C Address Register 2\n"
  "#define I2C1_SLTH\t\t*(volatile uint8_t  *)0x4006700A // I2C SCL Low Timeout Register High\n"
  "#define I2C1_SLTL\t\t*(volatile uint8_t  *)0x4006700B // I2C SCL Low Timeout Register Low\n"
  "\n"
  "// Chapter 45: Universal Asynchronous Receiver/Transmitter (UART)\n"
  "#define UART0_BDH\t\t*(volatile uint8_t  *)0x4006A000 // UART Baud Rate Registers: High\n"
  "#define UART0_BDL\t\t*(volatile uint8_t  *)0x4006A001 // UART Baud Rate Registers: Low\n"
  "#define UART0_C1\t\t*(volatile uint8_t  *)0x4006A002 // UART Control Register 1\n"
  "#define UART_C1_LOOPS\t\t\t(uint8_t)0x80\t\t\t// When LOOPS is set, the RxD pin is disconnected from the UART and the transmitter output is internally conne"
  "cted to the receiver input\n"
  "#define UART_C1_UARTSWAI\t\t(uint8_t)0x40\t\t\t// UART Stops in Wait Mode\n"
  "#define UART_C1_RSRC\t\t\t(uint8_t)0x20\t\t\t// When LOOPS is set, the RSRC field determines the source for the receiver shift register input\n"
  "#define UART_C1_M\t\t\t(uint8_t)0x10\t\t\t// 9-bit or 8-bit Mode Select\n"
  "#define UART_C1_WAKE\t\t\t(uint8_t)0x08\t\t\t// Determines which condition wakes the UART\n"
  "#define UART_C1_ILT\t\t\t(uint8_t)0x04\t\t\t// Idle Line Type Select\n"
  "#define UART_C1_PE\t\t\t(uint8_t)0x02\t\t\t// Parity Enable\n"
  "#define UART_C1_PT\t\t\t(uint8_t)0x01\t\t\t// Parity Type, 0=even, 1=odd\n"
  "#define UART0_C2\t\t*(volatile uint8_t  *)0x4006A003 // UART Control Register 2\n"
  "#define UART_C2_TIE\t\t\t(uint8_t)0x80\t\t\t// Transmitter Interrupt or DMA Transfer Enable.\n"
  "#define UART_C2_TCIE\t\t\t(uint8_t)0x40\t\t\t// Transmission Complete Interrupt Enable\n"
  "#define UART_C2_RIE\t\t\t(uint8_t)0x20\t\t\t// Receiver Full Interrupt or DMA Transfer Enable\n"
  "#define UART_C2_ILIE\t\t\t(uint8_t)0x10\t\t\t// Idle Line Interrupt Enable\n"
  "#define UART_C2_TE\t\t\t(uint8_t)0x08\t\t\t// Transmitter Enable\n"
  "#define UART_C2_RE\t\t\t(uint8_t)0x04\t\t\t// Receiver Enable\n"
  "#define UART_C2_RWU\t\t\t(uint8_t)0x02\t\t\t// Receiver Wakeup Control\n"
  "#define UART_C2_SBK\t\t\t(uint8_t)0x01\t\t\t// Send Break\n"
  "#define UART0_S1\t\t*(volatile uint8_t  *)0x4006A004 // UART Status Register 1\n"
  "#define UART_S1_TDRE\t\t\t(uint8_t)0x80\t\t\t// Transmit Data Register Empty Flag\n"
  "#define UART_S1_TC\t\t\t(uint8_t)0x40\t\t\t// Transmit Complete Flag\n"
  "#define UART_S1_RDRF\t\t\t(uint8_t)0x20\t\t\t// Receive Data Register Full Flag\n"
  "#define UART_S1_IDLE\t\t\t(uint8_t)0x10\t\t\t// Idle Line Flag\n"
  "#define UART_S1_OR\t\t\t(uint8_t)0x08\t\t\t// Receiver Overrun Flag\n"
  "#define UART_S1_NF\t\t\t(uint8_t)0x04\t\t\t// Noise Flag\n"
  "#define UART_S1_FE\t\t\t(uint8_t)0x02\t\t\t// Framing Error Flag\n"
  "#define UART_S1_PF\t\t\t(uint8_t)0x01\t\t\t// Parity Error Flag\n"
  "#define UART0_S2\t\t*(volatile uint8_t  *)0x4006A005 // UART Status Register 2\n"
  "#define UART0_C3\t\t*(volatile uint8_t  *)0x4006A006 // UART Control Register 3\n"
  "#define UART0_D\t\t\t*(volatile uint8_t  *)0x4006A007 // UART Data Register\n"
  "#define UART0_MA1\t\t*(volatile uint8_t  *)0x4006A008 // UART Match Address Registers 1\n"
  "#define UART0_MA2\t\t*(volatile uint8_t  *)0x4006A009 // UART Match Address Registers 2\n"
  "#define UART0_C4\t\t*(volatile uint8_t  *)0x4006A00A // UART Control Register 4\n"
  "#define UART0_C5\t\t*(volatile uint8_t  *)0x4006A00B // UART Control Register 5\n"
  "#define UART0_ED\t\t*(volatile uint8_t  *)0x4006A00C // UART Extended Data Register\n"
  "#define UART0_MODEM\t\t*(volatile uint8_t  *)0x4006A00D // UART Modem Register\n"
  "#define UART0_IR\t\t*(volatile uint8_t  *)0x4006A00E // UART Infrared Register\n"
  "#define UART0_PFIFO\t\t*(volatile uint8_t  *)0x4006A010 // UART FIFO Parameters\n"
  "#define UART_PFIFO_TXFE\t\t\t(uint8_t)0x80\n"
  "#define UART_PFIFO_RXFE\t\t\t(uint8_t)0x08\n"
  "#define UART0_CFIFO\t\t*(volatile uint8_t  *)0x4006A011 // UART FIFO Control Register\n"
  "#define UART_CFIFO_TXFLUSH\t\t(uint8_t)0x80\t\t\t// \n"
  "#define UART_CFIFO_RXFLUSH\t\t(uint8_t)0x40\t\t\t// \n"
  "#define UART_CFIFO_RXOFE\t\t(uint8_t)0x04\t\t\t// \n"
  "#define UART_CFIFO_TXOFE\t\t(uint8_t)0x02\t\t\t// \n"
  "#define UART_CFIFO_RXUFE\t\t(uint8_t)0x01\t\t\t// \n"
  "#define UART0_SFIFO\t\t*(volatile uint8_t  *)0x4006A012 // UART FIFO Status Register\n"
  "#define UART_SFIFO_TXEMPT\t\t(uint8_t)0x80\n"
  "#define UART_SFIFO_RXEMPT\t\t(uint8_t)0x40\n"
  "#define UART_SFIFO_RXOF\t\t\t(uint8_t)0x04\n"
  "#define UART_SFIFO_TXOF\t\t\t(uint8_t)0x02\n"
  "#define UART_SFIFO_RXUF\t\t\t(uint8_t)0x01\n"
  "#define UART0_TWFIFO\t\t*(volatile uint8_t  *)0x4006A013 // UART FIFO Transmit Watermark\n"
  "#define UART0_TCFIFO\t\t*(volatile uint8_t  *)0x4006A014 // UART FIFO Transmit Count\n"
  "#define UART0_RWFIFO\t\t*(volatile uint8_t  *)0x4006A015 // UART FIFO Receive Watermark\n"
  "#define UART0_RCFIFO\t\t*(volatile uint8_t  *)0x4006A016 // UART FIFO Receive Count\n"
  "#define UART0_C7816\t\t*(volatile uint8_t  *)0x4006A018 // UART 7816 Control Register\n"
  "#define UART0_IE7816\t\t*(volatile uint8_t  *)0x4006A019 // UART 7816 Interrupt Enable Register\n"
  "#define UART0_IS7816\t\t*(volatile uint8_t  *)0x4006A01A // UART 7816 Interrupt Status Register\n"
  "#define UART0_WP7816T0\t\t*(volatile uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register\n"
  "#define UART0_WP7816T1\t\t*(volatile uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register\n"
  "#define UART0_WN7816\t\t*(volatile uint8_t  *)0x4006A01C // UART 7816 Wait N Register\n"
  "#define UART0_WF7816\t\t*(volatile uint8_t  *)0x4006A01D // UART 7816 Wait FD Register\n"
  "#define UART0_ET7816\t\t*(volatile uint8_t  *)0x4006A01E // UART 7816 Error Threshold Register\n"
  "#define UART0_TL7816\t\t*(volatile uint8_t  *)0x4006A01F // UART 7816 Transmit Length Register\n"
  "#define UART0_C6\t\t*(volatile uint8_t  *)0x4006A021 // UART CEA709.1-B Control Register 6\n"
  "#define UART0_PCTH\t\t*(volatile uint8_t  *)0x4006A022 // UART CEA709.1-B Packet Cycle Time Counter High\n"
  "#define UART0_PCTL\t\t*(volatile uint8_t  *)0x4006A023 // UART CEA709.1-B Packet Cycle Time Counter Low\n"
  "#define UART0_B1T\t\t*(volatile uint8_t  *)0x4006A024 // UART CEA709.1-B Beta1 Timer\n"
  "#define UART0_SDTH\t\t*(volatile uint8_t  *)0x4006A025 // UART CEA709.1-B Secondary Delay Timer High\n"
  "#define UART0_SDTL\t\t*(volatile uint8_t  *)0x4006A026 // UART CEA709.1-B Secondary Delay Timer Low\n"
  "#define UART0_PRE\t\t*(volatile uint8_t  *)0x4006A027 // UART CEA709.1-B Preamble\n"
  "#define UART0_TPL\t\t*(volatile uint8_t  *)0x4006A028 // UART CEA709.1-B Transmit Packet Length\n"
  "#define UART0_IE\t\t*(volatile uint8_t  *)0x4006A029 // UART CEA709.1-B Interrupt Enable Register\n"
  "#define UART0_WB\t\t*(volatile uint8_t  *)0x4006A02A // UART CEA709.1-B WBASE\n"
  "#define UART0_S3\t\t*(volatile uint8_t  *)0x4006A02B // UART CEA709.1-B Status Register\n"
  "#define UART0_S4\t\t*(volatile uint8_t  *)0x4006A02C // UART CEA709.1-B Status Register\n"
  "#define UART0_RPL\t\t*(volatile uint8_t  *)0x4006A02D // UART CEA709.1-B Received Packet Length\n"
  "#define UART0_RPREL\t\t*(volatile uint8_t  *)0x4006A02E // UART CEA709.1-B Received Preamble Length\n"
  "#define UART0_CPW\t\t*(volatile uint8_t  *)0x4006A02F // UART CEA709.1-B Collision Pulse Width\n"
  "#define UART0_RIDT\t\t*(volatile uint8_t  *)0x4006A030 // UART CEA709.1-B Receive Indeterminate Time\n"
  "#define UART0_TIDT\t\t*(volatile uint8_t  *)0x4006A031 // UART CEA709.1-B Transmit Indeterminate Time\n"
  "#define UART1_BDH\t\t*(volatile uint8_t  *)0x4006B000 // UART Baud Rate Registers: High\n"
  "#define UART1_BDL\t\t*(volatile uint8_t  *)0x4006B001 // UART Baud Rate Registers: Low\n"
  "#define UART1_C1\t\t*(volatile uint8_t  *)0x4006B002 // UART Control Register 1\n"
  "#define UART1_C2\t\t*(volatile uint8_t  *)0x4006B003 // UART Control Register 2\n"
  "#define UART1_S1\t\t*(volatile uint8_t  *)0x4006B004 // UART Status Register 1\n"
  "#define UART1_S2\t\t*(volatile uint8_t  *)0x4006B005 // UART Status Register 2\n"
  "#define UART1_C3\t\t*(volatile uint8_t  *)0x4006B006 // UART Control Register 3\n"
  "#define UART1_D\t\t\t*(volatile uint8_t  *)0x4006B007 // UART Data Register\n"
  "#define UART1_MA1\t\t*(volatile uint8_t  *)0x4006B008 // UART Match Address Registers 1\n"
  "#define UART1_MA2\t\t*(volatile uint8_t  *)0x4006B009 // UART Match Address Registers 2\n"
  "#define UART1_C4\t\t*(volatile uint8_t  *)0x4006B00A // UART Control Register 4\n"
  "#define UART1_C5\t\t*(volatile uint8_t  *)0x4006B00B // UART Control Register 5\n"
  "#define UART1_ED\t\t*(volatile uint8_t  *)0x4006B00C // UART Extended Data Register\n"
  "#define UART1_MODEM\t\t*(volatile uint8_t  *)0x4006B00D // UART Modem Register\n"
  "#define UART1_IR\t\t*(volatile uint8_t  *)0x4006B00E // UART Infrared Register\n"
  "#define UART1_PFIFO\t\t*(volatile uint8_t  *)0x4006B010 // UART FIFO Parameters\n"
  "#define UART1_CFIFO\t\t*(volatile uint8_t  *)0x4006B011 // UART FIFO Control Register\n"
  "#define UART1_SFIFO\t\t*(volatile uint8_t  *)0x4006B012 // UART FIFO Status Register\n"
  "#define UART1_TWFIFO\t\t*(volatile uint8_t  *)0x4006B013 // UART FIFO Transmit Watermark\n"
  "#define UART1_TCFIFO\t\t*(volatile uint8_t  *)0x4006B014 // UART FIFO Transmit Count\n"
  "#define UART1_RWFIFO\t\t*(volatile uint8_t  *)0x4006B015 // UART FIFO Receive Watermark\n"
  "#define UART1_RCFIFO\t\t*(volatile uint8_t  *)0x4006B016 // UART FIFO Receive Count\n"
  "#define UART1_C7816\t\t*(volatile uint8_t  *)0x4006B018 // UART 7816 Control Register\n"
  "#define UART1_IE7816\t\t*(volatile uint8_t  *)0x4006B019 // UART 7816 Interrupt Enable Register\n"
  "#define UART1_IS7816\t\t*(volatile uint8_t  *)0x4006B01A // UART 7816 Interrupt Status Register\n"
  "#define UART1_WP7816T0\t\t*(volatile uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register\n"
  "#define UART1_WP7816T1\t\t*(volatile uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register\n"
  "#define UART1_WN7816\t\t*(volatile uint8_t  *)0x4006B01C // UART 7816 Wait N Register\n"
  "#define UART1_WF7816\t\t*(volatile uint8_t  *)0x4006B01D // UART 7816 Wait FD Register\n"
  "#define UART1_ET7816\t\t*(volatile uint8_t  *)0x4006B01E // UART 7816 Error Threshold Register\n"
  "#define UART1_TL7816\t\t*(volatile uint8_t  *)0x4006B01F // UART 7816 Transmit Length Register\n"
  "#define UART1_C6\t\t*(volatile uint8_t  *)0x4006B021 // UART CEA709.1-B Control Register 6\n"
  "#define UART1_PCTH\t\t*(volatile uint8_t  *)0x4006B022 // UART CEA709.1-B Packet Cycle Time Counter High\n"
  "#define UART1_PCTL\t\t*(volatile uint8_t  *)0x4006B023 // UART CEA709.1-B Packet Cycle Time Counter Low\n"
  "#define UART1_B1T\t\t*(volatile uint8_t  *)0x4006B024 // UART CEA709.1-B Beta1 Timer\n"
  "#define UART1_SDTH\t\t*(volatile uint8_t  *)0x4006B025 // UART CEA709.1-B Secondary Delay Timer High\n"
  "#define UART1_SDTL\t\t*(volatile uint8_t  *)0x4006B026 // UART CEA709.1-B Secondary Delay Timer Low\n"
  "#define UART1_PRE\t\t*(volatile uint8_t  *)0x4006B027 // UART CEA709.1-B Preamble\n"
  "#define UART1_TPL\t\t*(volatile uint8_t  *)0x4006B028 // UART CEA709.1-B Transmit Packet Length\n"
  "#define UART1_IE\t\t*(volatile uint8_t  *)0x4006B029 // UART CEA709.1-B Interrupt Enable Register\n"
  "#define UART1_WB\t\t*(volatile uint8_t  *)0x4006B02A // UART CEA709.1-B WBASE\n"
  "#define UART1_S3\t\t*(volatile uint8_t  *)0x4006B02B // UART CEA709.1-B Status Register\n"
  "#define UART1_S4\t\t*(volatile uint8_t  *)0x4006B02C // UART CEA709.1-B Status Register\n"
  "#define UART1_RPL\t\t*(volatile uint8_t  *)0x4006B02D // UART CEA709.1-B Received Packet Length\n"
  "#define UART1_RPREL\t\t*(volatile uint8_t  *)0x4006B02E // UART CEA709.1-B Received Preamble Length\n"
  "#define UART1_CPW\t\t*(volatile uint8_t  *)0x4006B02F // UART CEA709.1-B Collision Pulse Width\n"
  "#define UART1_RIDT\t\t*(volatile uint8_t  *)0x4006B030 // UART CEA709.1-B Receive Indeterminate Time\n"
  "#define UART1_TIDT\t\t*(volatile uint8_t  *)0x4006B031 // UART CEA709.1-B Transmit Indeterminate Time\n"
  "#define UART2_BDH\t\t*(volatile uint8_t  *)0x4006C000 // UART Baud Rate Registers: High\n"
  "#define UART2_BDL\t\t*(volatile uint8_t  *)0x4006C001 // UART Baud Rate Registers: Low\n"
  "#define UART2_C1\t\t*(volatile uint8_t  *)0x4006C002 // UART Control Register 1\n"
  "#define UART2_C2\t\t*(volatile uint8_t  *)0x4006C003 // UART Control Register 2\n"
  "#define UART2_S1\t\t*(volatile uint8_t  *)0x4006C004 // UART Status Register 1\n"
  "#define UART2_S2\t\t*(volatile uint8_t  *)0x4006C005 // UART Status Register 2\n"
  "#define UART2_C3\t\t*(volatile uint8_t  *)0x4006C006 // UART Control Register 3\n"
  "#define UART2_D\t\t\t*(volatile uint8_t  *)0x4006C007 // UART Data Register\n"
  "#define UART2_MA1\t\t*(volatile uint8_t  *)0x4006C008 // UART Match Address Registers 1\n"
  "#define UART2_MA2\t\t*(volatile uint8_t  *)0x4006C009 // UART Match Address Registers 2\n"
  "#define UART2_C4\t\t*(volatile uint8_t  *)0x4006C00A // UART Control Register 4\n"
  "#define UART2_C5\t\t*(volatile uint8_t  *)0x4006C00B // UART Control Register 5\n"
  "#define UART2_ED\t\t*(volatile uint8_t  *)0x4006C00C // UART Extended Data Register\n"
  "#define UART2_MODEM\t\t*(volatile uint8_t  *)0x4006C00D // UART Modem Register\n"
  "#define UART2_IR\t\t*(volatile uint8_t  *)0x4006C00E // UART Infrared Register\n"
  "#define UART2_PFIFO\t\t*(volatile uint8_t  *)0x4006C010 // UART FIFO Parameters\n"
  "#define UART2_CFIFO\t\t*(volatile uint8_t  *)0x4006C011 // UART FIFO Control Register\n"
  "#define UART2_SFIFO\t\t*(volatile uint8_t  *)0x4006C012 // UART FIFO Status Register\n"
  "#define UART2_TWFIFO\t\t*(volatile uint8_t  *)0x4006C013 // UART FIFO Transmit Watermark\n"
  "#define UART2_TCFIFO\t\t*(volatile uint8_t  *)0x4006C014 // UART FIFO Transmit Count\n"
  "#define UART2_RWFIFO\t\t*(volatile uint8_t  *)0x4006C015 // UART FIFO Receive Watermark\n"
  "#define UART2_RCFIFO\t\t*(volatile uint8_t  *)0x4006C016 // UART FIFO Receive Count\n"
  "#define UART2_C7816\t\t*(volatile uint8_t  *)0x4006C018 // UART 7816 Control Register\n"
  "#define UART2_IE7816\t\t*(volatile uint8_t  *)0x4006C019 // UART 7816 Interrupt Enable Register\n"
  "#define UART2_IS7816\t\t*(volatile uint8_t  *)0x4006C01A // UART 7816 Interrupt Status Register\n"
  "#define UART2_WP7816T0\t\t*(volatile uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register\n"
  "#define UART2_WP7816T1\t\t*(volatile uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register\n"
  "#define UART2_WN7816\t\t*(volatile uint8_t  *)0x4006C01C // UART 7816 Wait N Register\n"
  "#define UART2_WF7816\t\t*(volatile uint8_t  *)0x4006C01D // UART 7816 Wait FD Register\n"
  "#define UART2_ET7816\t\t*(volatile uint8_t  *)0x4006C01E // UART 7816 Error Threshold Register\n"
  "#define UART2_TL7816\t\t*(volatile uint8_t  *)0x4006C01F // UART 7816 Transmit Length Register\n"
  "#define UART2_C6\t\t*(volatile uint8_t  *)0x4006C021 // UART CEA709.1-B Control Register 6\n"
  "#define UART2_PCTH\t\t*(volatile uint8_t  *)0x4006C022 // UART CEA709.1-B Packet Cycle Time Counter High\n"
  "#define UART2_PCTL\t\t*(volatile uint8_t  *)0x4006C023 // UART CEA709.1-B Packet Cycle Time Counter Low\n"
  "#define UART2_B1T\t\t*(volatile uint8_t  *)0x4006C024 // UART CEA709.1-B Beta1 Timer\n"
  "#define UART2_SDTH\t\t*(volatile uint8_t  *)0x4006C025 // UART CEA709.1-B Secondary Delay Timer High\n"
  "#define UART2_SDTL\t\t*(volatile uint8_t  *)0x4006C026 // UART CEA709.1-B Secondary Delay Timer Low\n"
  "#define UART2_PRE\t\t*(volatile uint8_t  *)0x4006C027 // UART CEA709.1-B Preamble\n"
  "#define UART2_TPL\t\t*(volatile uint8_t  *)0x4006C028 // UART CEA709.1-B Transmit Packet Length\n"
  "#define UART2_IE\t\t*(volatile uint8_t  *)0x4006C029 // UART CEA709.1-B Interrupt Enable Register\n"
  "#define UART2_WB\t\t*(volatile uint8_t  *)0x4006C02A // UART CEA709.1-B WBASE\n"
  "#define UART2_S3\t\t*(volatile uint8_t  *)0x4006C02B // UART CEA709.1-B Status Register\n"
  "#define UART2_S4\t\t*(volatile uint8_t  *)0x4006C02C // UART CEA709.1-B Status Register\n"
  "#define UART2_RPL\t\t*(volatile uint8_t  *)0x4006C02D // UART CEA709.1-B Received Packet Length\n"
  "#define UART2_RPREL\t\t*(volatile uint8_t  *)0x4006C02E // UART CEA709.1-B Received Preamble Length\n"
  "#define UART2_CPW\t\t*(volatile uint8_t  *)0x4006C02F // UART CEA709.1-B Collision Pulse Width\n"
  "#define UART2_RIDT\t\t*(volatile uint8_t  *)0x4006C030 // UART CEA709.1-B Receive Indeterminate Time\n"
  "#define UART2_TIDT\t\t*(volatile uint8_t  *)0x4006C031 // UART CEA709.1-B Transmit Indeterminate Time\n"
  "\n"
  "// Chapter 46: Synchronous Audio Interface (SAI)\n"
  "#define I2S0_TCSR\t\t*(volatile uint32_t *)0x4002F000 // SAI Transmit Control Register\n"
  "#define I2S_TCSR_TE\t\t\t(uint32_t)0x80000000\t// Transmitter Enable\n"
  "#define I2S_TCSR_STOPE\t\t\t(uint32_t)0x40000000\t// Transmitter Enable in Stop mode\n"
  "#define I2S_TCSR_DBGE\t\t\t(uint32_t)0x20000000\t// Transmitter Enable in Debug mode\n"
  "#define I2S_TCSR_BCE\t\t\t(uint32_t)0x10000000\t// Bit Clock Enable\n"
  "#define I2S_TCSR_FR\t\t\t(uint32_t)0x02000000\t// FIFO Reset\n"
  "#define I2S_TCSR_SR\t\t\t(uint32_t)0x01000000\t// Software Reset\n"
  "#define I2S_TCSR_WSF\t\t\t(uint32_t)0x00100000\t// Word Start Flag\n"
  "#define I2S_TCSR_SEF\t\t\t(uint32_t)0x00080000\t// Sync Error Flag\n"
  "#define I2S_TCSR_FEF\t\t\t(uint32_t)0x00040000\t// FIFO Error Flag (underrun)\n"
  "#define I2S_TCSR_FWF\t\t\t(uint32_t)0x00020000\t// FIFO Warning Flag (empty)\n"
  "#define I2S_TCSR_FRF\t\t\t(uint32_t)0x00010000\t// FIFO Request Flag (Data Ready)\n"
  "#define I2S_TCSR_WSIE\t\t\t(uint32_t)0x00001000\t// Word Start Interrupt Enable\n"
  "#define I2S_TCSR_SEIE\t\t\t(uint32_t)0x00000800\t// Sync Error Interrupt Enable\n"
  "#define I2S_TCSR_FEIE\t\t\t(uint32_t)0x00000400\t// FIFO Error Interrupt Enable\n"
  "#define I2S_TCSR_FWIE\t\t\t(uint32_t)0x00000200\t// FIFO Warning Interrupt Enable\n"
  "#define I2S_TCSR_FRIE\t\t\t(uint32_t)0x00000100\t// FIFO Request Interrupt Enable\n"
  "#define I2S_TCSR_FWDE\t\t\t(uint32_t)0x00000002\t// FIFO Warning DMA Enable\n"
  "#define I2S_TCSR_FRDE\t\t\t(uint32_t)0x00000001\t// FIFO Request DMA Enable\n"
  "#define I2S0_TCR1\t\t*(volatile uint32_t *)0x4002F004 // SAI Transmit Configuration 1 Register\n"
  "#define I2S_TCR1_TFW(n)\t\t\t((uint32_t)n & 0x03)\t      // Transmit FIFO watermark\n"
  "#define I2S0_TCR2\t\t*(volatile uint32_t *)0x4002F008 // SAI Transmit Configuration 2 Register\n"
  "#define I2S_TCR2_DIV(n)\t\t\t((uint32_t)n & 0xff)\t      // Bit clock divide by (DIV+1)*2\n"
  "#define I2S_TCR2_BCD\t\t\t((uint32_t)1<<24)\t      // Bit clock direction\n"
  "#define I2S_TCR2_BCP\t\t\t((uint32_t)1<<25)\t      // Bit clock polarity\n"
  "#define I2S_TCR2_MSEL(n)\t\t((uint32_t)(n & 3)<<26)\t      // MCLK select, 0=bus clock, 1=I2S0_MCLK\n"
  "#define I2S_TCR2_BCI\t\t\t((uint32_t)1<<28)\t      // Bit clock input\n"
  "#define I2S_TCR2_BCS\t\t\t((uint32_t)1<<29)\t      // Bit clock swap\n"
  "#define I2S_TCR2_SYNC(n)\t\t((uint32_t)(n & 3)<<30)\t      // 0=async 1=sync with receiver\n"
  "#define I2S0_TCR3\t\t*(volatile uint32_t *)0x4002F00C // SAI Transmit Configuration 3 Register\n"
  "#define I2S_TCR3_WDFL(n)\t\t((uint32_t)n & 0x0f)\t      // word flag configuration\n"
  "#define I2S_TCR3_TCE\t\t\t((uint32_t)0x10000)\t      // transmit channel enable\n"
  "#define I2S0_TCR4\t\t*(volatile uint32_t *)0x4002F010 // SAI Transmit Configuration 4 Register\n"
  "#define I2S_TCR4_FSD\t\t\t((uint32_t)1)\t\t      // Frame Sync Direction\n"
  "#define I2S_TCR4_FSP\t\t\t((uint32_t)2)\t\t      // Frame Sync Polarity\n"
  "#define I2S_TCR4_FSE\t\t\t((uint32_t)8)\t\t      // Frame Sync Early\n"
  "#define I2S_TCR4_MF\t\t\t((uint32_t)0x10)\t      // MSB First\n"
  "#define I2S_TCR4_SYWD(n)\t\t((uint32_t)(n & 0x1f)<<8)     // Sync Width\n"
  "#define I2S_TCR4_FRSZ(n)\t\t((uint32_t)(n & 0x0f)<<16)    // Frame Size\n"
  "#define I2S0_TCR5\t\t*(volatile uint32_t *)0x4002F014 // SAI Transmit Configuration 5 Register\n"
  "#define I2S_TCR5_FBT(n)\t\t\t((uint32_t)(n & 0x1f)<<8)     // First Bit Shifted\n"
  "#define I2S_TCR5_W0W(n)\t\t\t((uint32_t)(n & 0x1f)<<16)    // Word 0 Width\n"
  "#define I2S_TCR5_WNW(n)\t\t\t((uint32_t)(n & 0x1f)<<24)    // Word N Width\n"
  "#define I2S0_TDR0\t\t*(volatile uint32_t *)0x4002F020 // SAI Transmit Data Register\n"
  "#define I2S0_TDR1\t\t*(volatile uint32_t *)0x4002F024 // SAI Transmit Data Register\n"
  "#define I2S0_TFR0\t\t*(volatile uint32_t *)0x4002F040 // SAI Transmit FIFO Register\n"
  "#define I2S0_TFR1\t\t*(volatile uint32_t *)0x4002F044 // SAI Transmit FIFO Register\n"
  "#define I2S_TFR_RFP(n)\t\t\t((uint32_t)n & 7)\t      // read FIFO pointer\n"
  "#define I2S_TFR_WFP(n)\t\t\t((uint32_t)(n & 7)<<16)\t      // write FIFO pointer\n"
  "#define I2S0_TMR\t\t*(volatile uint32_t *)0x4002F060 // SAI Transmit Mask Register\n"
  "#define I2S_TMR_TWM(n)\t\t\t((uint32_t)n & 0xFFFFFFFF)\n"
  "#define I2S0_RCSR\t\t*(volatile uint32_t *)0x4002F080 // SAI Receive Control Register\n"
  "#define I2S_RCSR_RE\t\t\t(uint32_t)0x80000000\t// Receiver Enable\n"
  "#define I2S_RCSR_STOPE\t\t\t(uint32_t)0x40000000\t// Receiver Enable in Stop mode\n"
  "#define I2S_RCSR_DBGE\t\t\t(uint32_t)0x20000000\t// Receiver Enable in Debug mode\n"
  "#define I2S_RCSR_BCE\t\t\t(uint32_t)0x10000000\t// Bit Clock Enable\n"
  "#define I2S_RCSR_FR\t\t\t(uint32_t)0x02000000\t// FIFO Reset\n"
  "#define I2S_RCSR_SR\t\t\t(uint32_t)0x01000000\t// Software Reset\n"
  "#define I2S_RCSR_WSF\t\t\t(uint32_t)0x00100000\t// Word Start Flag\n"
  "#define I2S_RCSR_SEF\t\t\t(uint32_t)0x00080000\t// Sync Error Flag\n"
  "#define I2S_RCSR_FEF\t\t\t(uint32_t)0x00040000\t// FIFO Error Flag (underrun)\n"
  "#define I2S_RCSR_FWF\t\t\t(uint32_t)0x00020000\t// FIFO Warning Flag (empty)\n"
  "#define I2S_RCSR_FRF\t\t\t(uint32_t)0x00010000\t// FIFO Request Flag (Data Ready)\n"
  "#define I2S_RCSR_WSIE\t\t\t(uint32_t)0x00001000\t// Word Start Interrupt Enable\n"
  "#define I2S_RCSR_SEIE\t\t\t(uint32_t)0x00000800\t// Sync Error Interrupt Enable\n"
  "#define I2S_RCSR_FEIE\t\t\t(uint32_t)0x00000400\t// FIFO Error Interrupt Enable\n"
  "#define I2S_RCSR_FWIE\t\t\t(uint32_t)0x00000200\t// FIFO Warning Interrupt Enable\n"
  "#define I2S_RCSR_FRIE\t\t\t(uint32_t)0x00000100\t// FIFO Request Interrupt Enable\n"
  "#define I2S_RCSR_FWDE\t\t\t(uint32_t)0x00000002\t// FIFO Warning DMA Enable\n"
  "#define I2S_RCSR_FRDE\t\t\t(uint32_t)0x00000001\t// FIFO Request DMA Enable\n"
  "#define I2S0_RCR1\t\t*(volatile uint32_t *)0x4002F084 // SAI Receive Configuration 1 Register\n"
  "#define I2S_RCR1_RFW(n)\t\t\t((uint32_t)n & 0x03)\t      // Receive FIFO watermark\n"
  "#define I2S0_RCR2\t\t*(volatile uint32_t *)0x4002F088 // SAI Receive Configuration 2 Register\n"
  "#define I2S_RCR2_DIV(n)\t\t\t((uint32_t)n & 0xff)\t      // Bit clock divide by (DIV+1)*2\n"
  "#define I2S_RCR2_BCD\t\t\t((uint32_t)1<<24)\t      // Bit clock direction\n"
  "#define I2S_RCR2_BCP\t\t\t((uint32_t)1<<25)\t      // Bit clock polarity\n"
  "#define I2S_RCR2_MSEL(n)\t\t((uint32_t)(n & 3)<<26)\t      // MCLK select, 0=bus clock, 1=I2S0_MCLK\n"
  "#define I2S_RCR2_BCI\t\t\t((uint32_t)1<<28)\t      // Bit clock input\n"
  "#define I2S_RCR2_BCS\t\t\t((uint32_t)1<<29)\t      // Bit clock swap\n"
  "#define I2S_RCR2_SYNC(n)\t\t((uint32_t)(n & 3)<<30)\t      // 0=async 1=sync with receiver\n"
  "#define I2S0_RCR3\t\t*(volatile uint32_t *)0x4002F08C // SAI Receive Configuration 3 Register\n"
  "#define I2S_RCR3_WDFL(n)\t\t((uint32_t)n & 0x0f)\t      // word flag configuration\n"
  "#define I2S_RCR3_RCE\t\t\t((uint32_t)0x10000)\t      // receive channel enable\n"
  "#define I2S0_RCR4\t\t*(volatile uint32_t *)0x4002F090 // SAI Receive Configuration 4 Register\n"
  "#define I2S_RCR4_FSD\t\t\t((uint32_t)1)\t\t      // Frame Sync Direction\n"
  "#define I2S_RCR4_FSP\t\t\t((uint32_t)2)\t\t      // Frame Sync Polarity\n"
  "#define I2S_RCR4_FSE\t\t\t((uint32_t)8)\t\t      // Frame Sync Early\n"
  "#define I2S_RCR4_MF\t\t\t((uint32_t)0x10)\t      // MSB First\n"
  "#define I2S_RCR4_SYWD(n)\t\t((uint32_t)(n & 0x1f)<<8)     // Sync Width\n"
  "#define I2S_RCR4_FRSZ(n)\t\t((uint32_t)(n & 0x0f)<<16)    // Frame Size\n"
  "#define I2S0_RCR5\t\t*(volatile uint32_t *)0x4002F094 // SAI Receive Configuration 5 Register\n"
  "#define I2S_RCR5_FBT(n)\t\t\t((uint32_t)(n & 0x1f)<<8)     // First Bit Shifted\n"
  "#define I2S_RCR5_W0W(n)\t\t\t((uint32_t)(n & 0x1f)<<16)    // Word 0 Width\n"
  "#define I2S_RCR5_WNW(n)\t\t\t((uint32_t)(n & 0x1f)<<24)    // Word N Width\n"
  "#define I2S0_RDR0\t\t*(volatile uint32_t *)0x4002F0A0 // SAI Receive Data Register\n"
  "#define I2S0_RDR1\t\t*(volatile uint32_t *)0x4002F0A4 // SAI Receive Data Register\n"
  "#define I2S0_RFR0\t\t*(volatile uint32_t *)0x4002F0C0 // SAI Receive FIFO Register\n"
  "#define I2S0_RFR1\t\t*(volatile uint32_t *)0x4002F0C4 // SAI Receive FIFO Register\n"
  "#define I2S_RFR_RFP(n)\t\t\t((uint32_t)n & 7)\t      // read FIFO pointer\n"
  "#define I2S_RFR_WFP(n)\t\t\t((uint32_t)(n & 7)<<16)\t      // write FIFO pointer\n"
  "#define I2S0_RMR\t\t*(volatile uint32_t *)0x4002F0E0 // SAI Receive Mask Register\n"
  "#define I2S_RMR_RWM(n)\t\t\t((uint32_t)n & 0xFFFFFFFF)\n"
  "#define I2S0_MCR\t\t*(volatile uint32_t *)0x4002F100 // SAI MCLK Control Register\n"
  "#define I2S_MCR_DUF\t\t\t((uint32_t)1<<31)\t      // Divider Update Flag\n"
  "#define I2S_MCR_MOE\t\t\t((uint32_t)1<<30)\t      // MCLK Output Enable\n"
  "#define I2S_MCR_MICS(n)\t\t\t((uint32_t)(n & 3)<<24)\t      // MCLK Input Clock Select\n"
  "#define I2S0_MDR\t\t*(volatile uint32_t *)0x4002F104 // SAI MCLK Divide Register\n"
  "#define I2S_MDR_FRACT(n)\t\t((uint32_t)(n & 0xff)<<12)    // MCLK Fraction\n"
  "#define I2S_MDR_DIVIDE(n)\t\t((uint32_t)(n & 0xfff))\t      // MCLK Divide\n"
  "\n"
  "// Chapter 47: General-Purpose Input/Output (GPIO)\n"
  "#define GPIOA_PDOR\t\t*(volatile uint32_t *)0x400FF000 // Port Data Output Register\n"
  "#define GPIOA_PSOR\t\t*(volatile uint32_t *)0x400FF004 // Port Set Output Register\n"
  "#define GPIOA_PCOR\t\t*(volatile uint32_t *)0x400FF008 // Port Clear Output Register\n"
  "#define GPIOA_PTOR\t\t*(volatile uint32_t *)0x400FF00C // Port Toggle Output Register\n"
  "#define GPIOA_PDIR\t\t*(volatile uint32_t *)0x400FF010 // Port Data Input Register\n"
  "#define GPIOA_PDDR\t\t*(volatile uint32_t *)0x400FF014 // Port Data Direction Register\n"
  "#define GPIOB_PDOR\t\t*(volatile uint32_t *)0x400FF040 // Port Data Output Register\n"
  "#define GPIOB_PSOR\t\t*(volatile uint32_t *)0x400FF044 // Port Set Output Register\n"
  "#define GPIOB_PCOR\t\t*(volatile uint32_t *)0x400FF048 // Port Clear Output Register\n"
  "#define GPIOB_PTOR\t\t*(volatile uint32_t *)0x400FF04C // Port Toggle Output Register\n"
  "#define GPIOB_PDIR\t\t*(volatile uint32_t *)0x400FF050 // Port Data Input Register\n"
  "#define GPIOB_PDDR\t\t*(volatile uint32_t *)0x400FF054 // Port Data Direction Register\n"
  "#define GPIOC_PDOR\t\t*(volatile uint32_t *)0x400FF080 // Port Data Output Register\n"
  "#define GPIOC_PSOR\t\t*(volatile uint32_t *)0x400FF084 // Port Set Output Register\n"
  "#define GPIOC_PCOR\t\t*(volatile uint32_t *)0x400FF088 // Port Clear Output Register\n"
  "#define GPIOC_PTOR\t\t*(volatile uint32_t *)0x400FF08C // Port Toggle Output Register\n"
  "#define GPIOC_PDIR\t\t*(volatile uint32_t *)0x400FF090 // Port Data Input Register\n"
  "#define GPIOC_PDDR\t\t*(volatile uint32_t *)0x400FF094 // Port Data Direction Register\n"
  "#define GPIOD_PDOR\t\t*(volatile uint32_t *)0x400FF0C0 // Port Data Output Register\n"
  "#define GPIOD_PSOR\t\t*(volatile uint32_t *)0x400FF0C4 // Port Set Output Register\n"
  "#define GPIOD_PCOR\t\t*(volatile uint32_t *)0x400FF0C8 // Port Clear Output Register\n"
  "#define GPIOD_PTOR\t\t*(volatile uint32_t *)0x400FF0CC // Port Toggle Output Register\n"
  "#define GPIOD_PDIR\t\t*(volatile uint32_t *)0x400FF0D0 // Port Data Input Register\n"
  "#define GPIOD_PDDR\t\t*(volatile uint32_t *)0x400FF0D4 // Port Data Direction Register\n"
  "#define GPIOE_PDOR\t\t*(volatile uint32_t *)0x400FF100 // Port Data Output Register\n"
  "#define GPIOE_PSOR\t\t*(volatile uint32_t *)0x400FF104 // Port Set Output Register\n"
  "#define GPIOE_PCOR\t\t*(volatile uint32_t *)0x400FF108 // Port Clear Output Register\n"
  "#define GPIOE_PTOR\t\t*(volatile uint32_t *)0x400FF10C // Port Toggle Output Register\n"
  "#define GPIOE_PDIR\t\t*(volatile uint32_t *)0x400FF110 // Port Data Input Register\n"
  "#define GPIOE_PDDR\t\t*(volatile uint32_t *)0x400FF114 // Port Data Direction Register\n"
  "\n"
  "// Chapter 48: Touch sense input (TSI)\n"
  "#define TSI0_GENCS\t\t*(volatile uint32_t *)0x40045000 // General Control and Status Register\n"
  "#define TSI_GENCS_LPCLKS\t\t(uint32_t)0x10000000\t\t// \n"
  "#define TSI_GENCS_LPSCNITV(n)\t\t(((n) & 15) << 24)\t\t// \n"
  "#define TSI_GENCS_NSCN(n)\t\t(((n) & 31) << 19)\t\t// \n"
  "#define TSI_GENCS_PS(n)\t\t\t(((n) & 7) << 16)\t\t// \n"
  "#define TSI_GENCS_EOSF\t\t\t(uint32_t)0x00008000\t\t// \n"
  "#define TSI_GENCS_OUTRGF\t\t(uint32_t)0x00004000\t\t// \n"
  "#define TSI_GENCS_EXTERF\t\t(uint32_t)0x00002000\t\t// \n"
  "#define TSI_GENCS_OVRF\t\t\t(uint32_t)0x00001000\t\t// \n"
  "#define TSI_GENCS_SCNIP\t\t\t(uint32_t)0x00000200\t\t// \n"
  "#define TSI_GENCS_SWTS\t\t\t(uint32_t)0x00000100\t\t// \n"
  "#define TSI_GENCS_TSIEN\t\t\t(uint32_t)0x00000080\t\t// \n"
  "#define TSI_GENCS_TSIIE\t\t\t(uint32_t)0x00000040\t\t// \n"
  "#define TSI_GENCS_ERIE\t\t\t(uint32_t)0x00000020\t\t// \n"
  "#define TSI_GENCS_ESOR\t\t\t(uint32_t)0x00000010\t\t// \n"
  "#define TSI_GENCS_STM\t\t\t(uint32_t)0x00000002\t\t// \n"
  "#define TSI_GENCS_STPE\t\t\t(uint32_t)0x00000001\t\t// \n"
  "#define TSI0_SCANC\t\t*(volatile uint32_t *)0x40045004 // SCAN Control Register\n"
  "#define TSI_SCANC_REFCHRG(n)\t\t(((n) & 15) << 24)\t\t// \n"
  "#define TSI_SCANC_EXTCHRG(n)\t\t(((n) & 7) << 16)\t\t// \n"
  "#define TSI_SCANC_SMOD(n)\t\t(((n) & 255) << 8)\t\t// \n"
  "#define TSI_SCANC_AMCLKS(n)\t\t(((n) & 3) << 3)\t\t// \n"
  "#define TSI_SCANC_AMPSC(n)\t\t(((n) & 7) << 0)\t\t// \n"
  "#define TSI0_PEN\t\t*(volatile uint32_t *)0x40045008 // Pin Enable Register\n"
  "#define TSI0_WUCNTR\t\t*(volatile uint32_t *)0x4004500C // Wake-Up Channel Counter Register\n"
  "#define TSI0_CNTR1\t\t*(volatile uint32_t *)0x40045100 // Counter Register\n"
  "#define TSI0_CNTR3\t\t*(volatile uint32_t *)0x40045104 // Counter Register\n"
  "#define TSI0_CNTR5\t\t*(volatile uint32_t *)0x40045108 // Counter Register\n"
  "#define TSI0_CNTR7\t\t*(volatile uint32_t *)0x4004510C // Counter Register\n"
  "#define TSI0_CNTR9\t\t*(volatile uint32_t *)0x40045110 // Counter Register\n"
  "#define TSI0_CNTR11\t\t*(volatile uint32_t *)0x40045114 // Counter Register\n"
  "#define TSI0_CNTR13\t\t*(volatile uint32_t *)0x40045118 // Counter Register\n"
  "#define TSI0_CNTR15\t\t*(volatile uint32_t *)0x4004511C // Counter Register\n"
  "#define TSI0_THRESHOLD\t\t*(volatile uint32_t *)0x40045120 // Low Power Channel Threshold Register\n"
  "\n"
  "// Nested Vectored Interrupt Controller, Table 3-4 & ARMv7 ref, appendix B3.4 (page 750)\n"
  "#define NVIC_ENABLE_IRQ(n)\t(*((volatile uint32_t *)0xE000E100 + (n >> 5)) = (1 << (n & 31)))\n"
  "#define NVIC_DISABLE_IRQ(n)\t(*((volatile uint32_t *)0xE000E180 + (n >> 5)) = (1 << (n & 31)))\n"
  "#define NVIC_SET_PENDING(n)\t(*((volatile uint32_t *)0xE000E200 + (n >> 5)) = (1 << (n & 31)))\n"
  "#define NVIC_CLEAR_PENDING(n)\t(*((volatile uint32_t *)0xE000E280 + (n >> 5)) = (1 << (n & 31)))\n"
  "\n"
  "#define NVIC_ISER0\t\t*(volatile uint32_t *)0xE000E100\n"
  "#define NVIC_ISER1\t\t*(volatile uint32_t *)0xE000E104\n"
  "#define NVIC_ICER0\t\t*(volatile uint32_t *)0xE000E180\n"
  "#define NVIC_ICER1\t\t*(volatile uint32_t *)0xE000E184\n"
  "\n"
  "// 0 = highest priority\n"
  "// Cortex-M4: 0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240\n"
  "// Cortex-M0: 0,64,128,192\n"
  "#define NVIC_SET_PRIORITY(irqnum, priority)  (*((volatile uint8_t *)0xE000E400 + (irqnum)) = (uint8_t)(priority))\n"
  "#define NVIC_GET_PRIORITY(irqnum) (*((uint8_t *)0xE000E400 + (irqnum)))\n"
  "\n"
  "#if defined(__MK20DX128__)\n"
  "#define IRQ_DMA_CH0\t\t0\n"
  "#define IRQ_DMA_CH1\t\t1\n"
  "#define IRQ_DMA_CH2\t\t2\n"
  "#define IRQ_DMA_CH3\t\t3\n"
  "#define IRQ_DMA_ERROR\t\t4\n"
  "#define IRQ_FTFL_COMPLETE\t6\n"
  "#define IRQ_FTFL_COLLISION\t7\n"
  "#define IRQ_LOW_VOLTAGE\t\t8\n"
  "#define IRQ_LLWU\t\t9\n"
  "#define IRQ_WDOG\t\t10\n"
  "#define IRQ_I2C0\t\t11\n"
  "#define IRQ_SPI0\t\t12\n"
  "#define IRQ_I2S0_TX\t\t13\n"
  "#define IRQ_I2S0_RX\t\t14\n"
  "#define IRQ_UART0_LON\t\t15\n"
  "#define IRQ_UART0_STATUS\t16\n"
  "#define IRQ_UART0_ERROR\t\t17\n"
  "#define IRQ_UART1_STATUS\t18\n"
  "#define IRQ_UART1_ERROR\t\t19\n"
  "#define IRQ_UART2_STATUS\t20\n"
  "#define IRQ_UART2_ERROR\t\t21\n"
  "#define IRQ_ADC0\t\t22\n"
  "#define IRQ_CMP0\t\t23\n"
  "#define IRQ_CMP1\t\t24\n"
  "#define IRQ_FTM0\t\t25\n"
  "#define IRQ_FTM1\t\t26\n"
  "#define IRQ_CMT\t\t\t27\n"
  "#define IRQ_RTC_ALARM\t\t28\n"
  "#define IRQ_RTC_SECOND\t\t29\n"
  "#define IRQ_PIT_CH0\t\t30\n"
  "#define IRQ_PIT_CH1\t\t31\n"
  "#define IRQ_PIT_CH2\t\t32\n"
  "#define IRQ_PIT_CH3\t\t33\n"
  "#define IRQ_PDB\t\t\t34\n"
  "#define IRQ_USBOTG\t\t35\n"
  "#define IRQ_USBDCD\t\t36\n"
  "#define IRQ_TSI\t\t\t37\n"
  "#define IRQ_MCG\t\t\t38\n"
  "#define IRQ_LPTMR\t\t39\n"
  "#define IRQ_PORTA\t\t40\n"
  "#define IRQ_PORTB\t\t41\n"
  "#define IRQ_PORTC\t\t42\n"
  "#define IRQ_PORTD\t\t43\n"
  "#define IRQ_PORTE\t\t44\n"
  "#define IRQ_SOFTWARE\t\t45\n"
  "#define NVIC_NUM_INTERRUPTS\t46\n"
  "\n"
  "#elif defined(__MK20DX256__)\n"
  "#define IRQ_DMA_CH0\t\t0\n"
  "#define IRQ_DMA_CH1\t\t1\n"
  "#define IRQ_DMA_CH2\t\t2\n"
  "#define IRQ_DMA_CH3\t\t3\n"
  "#define IRQ_DMA_CH4\t\t4\n"
  "#define IRQ_DMA_CH5\t\t5\n"
  "#define IRQ_DMA_CH6\t\t6\n"
  "#define IRQ_DMA_CH7\t\t7\n"
  "#define IRQ_DMA_CH8\t\t8\n"
  "#define IRQ_DMA_CH9\t\t9\n"
  "#define IRQ_DMA_CH10\t\t10\n"
  "#define IRQ_DMA_CH11\t\t11\n"
  "#define IRQ_DMA_CH12\t\t12\n"
  "#define IRQ_DMA_CH13\t\t13\n"
  "#define IRQ_DMA_CH14\t\t14\n"
  "#define IRQ_DMA_CH15\t\t15\n"
  "#define IRQ_DMA_ERROR\t\t16\n"
  "#define IRQ_FTFL_COMPLETE\t18\n"
  "#define IRQ_FTFL_COLLISION\t19\n"
  "#define IRQ_LOW_VOLTAGE\t\t20\n"
  "#define IRQ_LLWU\t\t21\n"
  "#define IRQ_WDOG\t\t22\n"
  "#define IRQ_I2C0\t\t24\n"
  "#define IRQ_I2C1\t\t25\n"
  "#define IRQ_SPI0\t\t26\n"
  "#define IRQ_SPI1\t\t27\n"
  "#define IRQ_CAN_MESSAGE\t\t29\n"
  "#define IRQ_CAN_BUS_OFF\t\t30\n"
  "#define IRQ_CAN_ERROR\t\t31\n"
  "#define IRQ_CAN_TX_WARN\t\t32\n"
  "#define IRQ_CAN_RX_WARN\t\t33\n"
  "#define IRQ_CAN_WAKEUP\t\t34\n"
  "#define IRQ_I2S0_TX\t\t35\n"
  "#define IRQ_I2S0_RX\t\t36\n"
  "#define IRQ_UART0_LON\t\t44\n"
  "#define IRQ_UART0_STATUS\t45\n"
  "#define IRQ_UART0_ERROR\t\t46\n"
  "#define IRQ_UART1_STATUS\t47\n"
  "#define IRQ_UART1_ERROR\t\t48\n"
  "#define IRQ_UART2_STATUS\t49\n"
  "#define IRQ_UART2_ERROR\t\t50\n"
  "#define IRQ_ADC0\t\t57\n"
  "#define IRQ_ADC1\t\t58\n"
  "#define IRQ_CMP0\t\t59\n"
  "#define IRQ_CMP1\t\t60\n"
  "#define IRQ_CMP2\t\t61\n"
  "#define IRQ_FTM0\t\t62\n"
  "#define IRQ_FTM1\t\t63\n"
  "#define IRQ_FTM2\t\t64\n"
  "#define IRQ_CMT\t\t\t65\n"
  "#define IRQ_RTC_ALARM\t\t66\n"
  "#define IRQ_RTC_SECOND\t\t67\n"
  "#define IRQ_PIT_CH0\t\t68\n"
  "#define IRQ_PIT_CH1\t\t69\n"
  "#define IRQ_PIT_CH2\t\t70\n"
  "#define IRQ_PIT_CH3\t\t71\n"
  "#define IRQ_PDB\t\t\t72\n"
  "#define IRQ_USBOTG\t\t73\n"
  "#define IRQ_USBDCD\t\t74\n"
  "#define IRQ_DAC0\t\t81\n"
  "#define IRQ_TSI\t\t\t83\n"
  "#define IRQ_MCG\t\t\t84\n"
  "#define IRQ_LPTMR\t\t85\n"
  "#define IRQ_PORTA\t\t87\n"
  "#define IRQ_PORTB\t\t88\n"
  "#define IRQ_PORTC\t\t89\n"
  "#define IRQ_PORTD\t\t90\n"
  "#define IRQ_PORTE\t\t91\n"
  "#define IRQ_SOFTWARE\t\t94\n"
  "#define NVIC_NUM_INTERRUPTS\t95\n"
  "\n"
  "#endif\n"
  "\n"
  "\n"
  "\n"
  "\n"
  "\n"
  "#define __disable_irq() asm volatile(\"CPSID i\");\n"
  "#define __enable_irq()\tasm volatile(\"CPSIE i\");\n"
  "\n"
  "// System Control Space (SCS), ARMv7 ref manual, B3.2, page 708\n"
  "#define SCB_CPUID\t\t*(const\t   uint32_t *)0xE000ED00 // CPUID Base Register\n"
  "#define SCB_ICSR\t\t*(volatile uint32_t *)0xE000ED04 // Interrupt Control and State\n"
  "#define SCB_ICSR_PENDSTSET\t\t(uint32_t)0x04000000\n"
  "#define SCB_VTOR\t\t*(volatile uint32_t *)0xE000ED08 // Vector Table Offset\n"
  "#define SCB_AIRCR\t\t*(volatile uint32_t *)0xE000ED0C // Application Interrupt and Reset Control\n"
  "#define SCB_SCR\t\t\t*(volatile uint32_t *)0xE000ED10 // System Control Register\n"
  "#define SCB_CCR\t\t\t*(volatile uint32_t *)0xE000ED14 // Configuration and Control\n"
  "#define SCB_SHPR1\t\t*(volatile uint32_t *)0xE000ED18 // System Handler Priority Register 1\n"
  "#define SCB_SHPR2\t\t*(volatile uint32_t *)0xE000ED1C // System Handler Priority Register 2\n"
  "#define SCB_SHPR3\t\t*(volatile uint32_t *)0xE000ED20 // System Handler Priority Register 3\n"
  "#define SCB_SHCSR\t\t*(volatile uint32_t *)0xE000ED24 // System Handler Control and State\n"
  "#define SCB_CFSR\t\t*(volatile uint32_t *)0xE000ED28 // Configurable Fault Status Register\n"
  "#define SCB_HFSR\t\t*(volatile uint32_t *)0xE000ED2C // HardFault Status\n"
  "#define SCB_DFSR\t\t*(volatile uint32_t *)0xE000ED30 // Debug Fault Status\n"
  "#define SCB_MMFAR\t\t*(volatile uint32_t *)0xE000ED34 // MemManage Fault Address\n"
  "\n"
  "#define SYST_CSR\t\t*(volatile uint32_t *)0xE000E010 // SysTick Control and Status\n"
  "#define SYST_CSR_COUNTFLAG\t\t(uint32_t)0x00010000\n"
  "#define SYST_CSR_CLKSOURCE\t\t(uint32_t)0x00000004\n"
  "#define SYST_CSR_TICKINT\t\t(uint32_t)0x00000002\n"
  "#define SYST_CSR_ENABLE\t\t\t(uint32_t)0x00000001\n"
  "#define SYST_RVR\t\t*(volatile uint32_t *)0xE000E014 // SysTick Reload Value Register\n"
  "#define SYST_CVR\t\t*(volatile uint32_t *)0xE000E018 // SysTick Current Value Register\n"
  "#define SYST_CALIB\t*(const\t   uint32_t *)0xE000E01C // SysTick Calibration Value\n"
  "\n"
  "\n"
  "#define ARM_DEMCR\t\t*(volatile uint32_t *)0xE000EDFC // Debug Exception and Monitor Control\n"
  "#define ARM_DEMCR_TRCENA\t\t(1 << 24)\t // Enable debugging & monitoring blocks\n"
  "#define ARM_DWT_CTRL\t\t*(volatile uint32_t *)0xE0001000 // DWT control register\n"
  "#define ARM_DWT_CTRL_CYCCNTENA\t\t(1 << 0)\t\t// Enable cycle count\n"
  "#define ARM_DWT_CYCCNT\t\t*(volatile uint32_t *)0xE0001004 // Cycle count register\n"
  "\n"
  "\n"
  "#ifdef __cplusplus\n"
  "}\n"
  "#endif\n"
  "#endif\n" ;

const cRegularFileWrapper gWrapperFile_17_targetTemplates (
  "mk20dx256.h",
  "h",
  true, // Text file
  152136, // Text length
  gWrapperFileContent_17_targetTemplates
) ;

//--- File 'sources/startup-sequential-systick.c'

const char * gWrapperFileContent_18_targetTemplates = "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "#include <stddef.h>\n"
  "\n"
  "#include \"plm.h\"\n"
  "// #include \"mk20dx256.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "static void ResetISR (void) {\n"
  "//---------1- Inhiber le chien de garde\n"
  "  WDOG_UNLOCK = 0xC520 ;\n"
  "  WDOG_UNLOCK = 0xD928 ;\n"
  "  WDOG_STCTRLH = 0x0010 ;\n"
  "  // enable clocks to always-used peripherals\n"
  "  SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;\n"
  "  SIM_SCGC5 = 0x00043F82;    // clocks active to all GPIO\n"
  "  SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;\n"
  "  // if the RTC oscillator isn't enabled, get it started early\n"
  "  if (!(RTC_CR & RTC_CR_OSCE)) {\n"
  "    RTC_SR = 0;\n"
  "    RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;\n"
  "  }\n"
  "\n"
  "  // release I/O pins hold, if we woke up from VLLS mode\n"
  "  if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;\n"
  "\n"
  "  // TODO: do this while the PLL is waiting to lock....\n"
  "//  SCB_VTOR = 0;  // use vector table in flash\n"
  "\n"
  "  // default all interrupts to medium priority level\n"
  "//  for (int32_t i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);\n"
  "//---------2- Initialisation de la PLL\n"
  "  // start in FEI mode\n"
  "  // enable capacitors for crystal\n"
  "  OSC0_CR = OSC_SC8P | OSC_SC2P;\n"
  "  // enable osc, 8-32 MHz range, low power mode\n"
  "  MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;\n"
  "  // switch to crystal as clock source, FLL input = 16 MHz / 512\n"
  "  MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);\n"
  "  // wait for crystal oscillator to begin\n"
  "  while ((MCG_S & MCG_S_OSCINIT0) == 0) ;\n"
  "  // wait for FLL to use oscillator\n"
  "  while ((MCG_S & MCG_S_IREFST) != 0) ;\n"
  "  // wait for MCGOUT to use oscillator\n"
  "  while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;\n"
  "  // now we're in FBE mode\n"
  "  // config PLL input for 16 MHz Crystal / 4 = 4 MHz\n"
  "  MCG_C5 = MCG_C5_PRDIV0(3);\n"
  "  // config PLL for 96 MHz output\n"
  "  MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0);\n"
  "  // wait for PLL to start using xtal as its input\n"
  "  while (!(MCG_S & MCG_S_PLLST)) ;\n"
  "  // wait for PLL to lock\n"
  "  while (!(MCG_S & MCG_S_LOCK0)) ;\n"
  "  // now we're in PBE mode\n"
  "#if F_CPU == 96000000\n"
  "  // config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash\n"
  "  SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) |   SIM_CLKDIV1_OUTDIV4(3);\n"
  "#elif F_CPU == 48000000\n"
  "  // config divisors: 48 MHz core, 48 MHz bus, 24 MHz flash\n"
  "  SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(1) | SIM_CLKDIV1_OUTDIV2(1) |   SIM_CLKDIV1_OUTDIV4(3);\n"
  "#elif F_CPU == 24000000\n"
  "  // config divisors: 24 MHz core, 24 MHz bus, 24 MHz flash\n"
  "  SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(3) | SIM_CLKDIV1_OUTDIV2(3) |   SIM_CLKDIV1_OUTDIV4(3);\n"
  "#else\n"
  "#error \"Error, F_CPU must be 96000000, 48000000, or 24000000\"\n"
  "#endif\n"
  "  // switch to PLL as clock source, FLL input = 16 MHz / 512\n"
  "  MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);\n"
  "  // wait for PLL clock to be used\n"
  "  while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;\n"
  "  // now we're in PEE mode\n"
  "  // configure USB for 48 MHz clock\n"
  "//  SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1); // USB = 96 MHz PLL / 2\n"
  "  // USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0\n"
  "//  SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);\n"
  "\n"
  "//---------3- Initialisation de la section .bss\n"
  "  extern unsigned __bss_start ;\n"
  "  extern unsigned __bss_end ;\n"
  "  unsigned * p = & __bss_start ;\n"
  "  while (p != & __bss_end) {\n"
  "    * p = 0 ;\n"
  "    p ++ ;\n"
  "  }\n"
  "//---------4- Copy de la section .data\n"
  "  extern unsigned __data_start ;\n"
  "  extern unsigned __data_end ;\n"
  "  extern unsigned __data_load_start ;\n"
  "  unsigned * pSrc = & __data_load_start ;\n"
  "  unsigned * pDest = & __data_start ;\n"
  "  while (pDest != & __data_end) {\n"
  "    * pDest = * pSrc ;\n"
  "    pDest ++ ;\n"
  "    pSrc ++ ;\n"
  "  }\n"
  "\n"
  "//----------- Configure systick interrupt\n"
  "  SYST_RVR = 96000 - 1 ; // Interrupt every 96000 core clocks, i.e. every ms\n"
  "  SYST_CVR = 0 ;\n"
  "  SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE ;\n"
  "\n"
  "//---------5- Ex\xC3""\xA9""cuter les constructeurs des variables globales\n"
  "  extern void (* __constructor_array_start) (void) ;\n"
  "  extern void (* __constructor_array_end) (void) ;\n"
  "  void (** ptr) (void) = & __constructor_array_start ;\n"
  "  while (ptr != & __constructor_array_end) {\n"
  "    (* ptr) () ;\n"
  "    ptr ++ ;\n"
  "  }\n"
  "//---------6- Ex\xC3""\xA9""cuter les routines d'initialisation de la section init_routine_array\n"
  "  extern void (* __init_routine_array_start) (void) ;\n"
  "  extern void (* __init_routine_array_end) (void) ;\n"
  "  ptr = & __init_routine_array_start ;\n"
  "  while (ptr != & __init_routine_array_end) {\n"
  "    (* ptr) () ;\n"
  "    ptr ++ ;\n"
  "  }\n"
  "//---------7- Ex\xC3""\xA9""cuter le programme utilisateur\n"
  "  setup () ;\n"
  "  while (1) {\n"
  "    loop () ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "//   Vector table                                                                                                      *\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "typedef struct {\n"
  "  unsigned * mStackPointer ;\n"
  "//--- ARM Core System Handler Vectors\n"
  "  void (* mCoreSystemHandlerVector [15]) (void) ;\n"
  "//--- Non-Core Vectors\n"
  "  void (* mNonCoreHandlerVector [240]) (void) ;\n"
  "//--- Flash magic values\n"
  "  int mFlash [4] ;\n"
  "} vectorStructSeq ;\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "extern unsigned __system_stack_end ;\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "const vectorStructSeq vector __attribute__ ((section (\".isr_vector\"))) = {\n"
  "  & __system_stack_end, // 0\n"
  "//--- ARM Core System Handler Vectors\n"
  "  { ResetISR, // 1\n"
  "    NULL, // 2\n"
  "    NULL, // 3\n"
  "    NULL, // 4\n"
  "    NULL, // 5\n"
  "    NULL, // 6\n"
  "    NULL, // 7\n"
  "    NULL, // 8\n"
  "    NULL, // 9\n"
  "    NULL, // 10\n"
  "    NULL, // 11\n"
  "    NULL, // 12\n"
  "    NULL, // 13\n"
  "    NULL, // 14\n"
  "    systickHandler // 15\n"
  "  },\n"
  "//--- Non-Core Vectors\n"
  "  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n"
  "  },\n"
  "//--- Flash magic values\n"
  "  {-1, -1, -1, -2}\n"
  "} ;\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_18_targetTemplates (
  "startup-sequential-systick.c",
  "c",
  true, // Text file
  7714, // Text length
  gWrapperFileContent_18_targetTemplates
) ;

//--- All files of 'sources' directory

static const cRegularFileWrapper * gWrapperAllFiles_targetTemplates_6 [4] = {
  & gWrapperFile_16_targetTemplates,
  & gWrapperFile_17_targetTemplates,
  & gWrapperFile_18_targetTemplates,
  NULL
} ;

//--- All sub-directories of 'sources' directory

static const cDirectoryWrapper * gWrapperAllDirectories_targetTemplates_6 [1] = {
  NULL
} ;

//--- Directory 'sources'

const cDirectoryWrapper gWrapperDirectory_6_targetTemplates (
  "sources",
  3,
  gWrapperAllFiles_targetTemplates_6,
  0,
  gWrapperAllDirectories_targetTemplates_6
) ;

//--- All files of 'target-teensy-sequential-systick' directory

static const cRegularFileWrapper * gWrapperAllFiles_targetTemplates_5 [6] = {
  & gWrapperFile_11_targetTemplates,
  & gWrapperFile_12_targetTemplates,
  & gWrapperFile_13_targetTemplates,
  & gWrapperFile_14_targetTemplates,
  & gWrapperFile_15_targetTemplates,
  NULL
} ;

//--- All sub-directories of 'target-teensy-sequential-systick' directory

static const cDirectoryWrapper * gWrapperAllDirectories_targetTemplates_5 [2] = {
  & gWrapperDirectory_6_targetTemplates,
  NULL
} ;

//--- Directory 'target-teensy-sequential-systick'

const cDirectoryWrapper gWrapperDirectory_5_targetTemplates (
  "target-teensy-sequential-systick",
  5,
  gWrapperAllFiles_targetTemplates_5,
  1,
  gWrapperAllDirectories_targetTemplates_5
) ;

//--- All files of 'targets' directory

static const cRegularFileWrapper * gWrapperAllFiles_targetTemplates_2 [3] = {
  & gWrapperFile_1_targetTemplates,
  & gWrapperFile_2_targetTemplates,
  NULL
} ;

//--- All sub-directories of 'targets' directory

static const cDirectoryWrapper * gWrapperAllDirectories_targetTemplates_2 [3] = {
  & gWrapperDirectory_3_targetTemplates,
  & gWrapperDirectory_5_targetTemplates,
  NULL
} ;

//--- Directory 'targets'

const cDirectoryWrapper gWrapperDirectory_2_targetTemplates (
  "targets",
  2,
  gWrapperAllFiles_targetTemplates_2,
  2,
  gWrapperAllDirectories_targetTemplates_2
) ;

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_targetTemplates_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_targetTemplates_0 [3] = {
  & gWrapperDirectory_1_targetTemplates,
  & gWrapperDirectory_2_targetTemplates,
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_targetTemplates (
  "",
  0,
  gWrapperAllFiles_targetTemplates_0,
  2,
  gWrapperAllDirectories_targetTemplates_0
) ;


