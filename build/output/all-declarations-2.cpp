#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------------------------------------------------*

#include "all-declarations-2.h"


//---------------------------------------------------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"
#include "galgas2/C_galgas_CLI_Options.h"

#include "files/C_FileManager.h"

//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       N O N    T E R M I N A L    N A M E S                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const char * gNonTerminalNames_plm_target_grammar [61] = {
  "<start_symbol>",// Index 0
  "<declaration>",// Index 1
  "<procedure>",// Index 2
  "<procedure_header>",// Index 3
  "<procedure_formal_arguments>",// Index 4
  "<expression>",// Index 5
  "<expression_12>",// Index 6
  "<expression_11>",// Index 7
  "<expression_10>",// Index 8
  "<expression_9>",// Index 9
  "<expression_8>",// Index 10
  "<expression_7>",// Index 11
  "<expression_6>",// Index 12
  "<expression_5>",// Index 13
  "<expression_4>",// Index 14
  "<expression_3>",// Index 15
  "<expression_2>",// Index 16
  "<expression_1>",// Index 17
  "<primary>",// Index 18
  "<instruction>",// Index 19
  "<instructionList>",// Index 20
  "<if_instruction>",// Index 21
  "<select_common_5F_syntax_0>",// Index 22
  "<select_common_5F_syntax_1>",// Index 23
  "<select_common_5F_syntax_2>",// Index 24
  "<select_common_5F_syntax_3>",// Index 25
  "<select_common_5F_syntax_4>",// Index 26
  "<select_common_5F_syntax_5>",// Index 27
  "<select_common_5F_syntax_6>",// Index 28
  "<select_common_5F_syntax_7>",// Index 29
  "<select_common_5F_syntax_8>",// Index 30
  "<select_common_5F_syntax_9>",// Index 31
  "<select_common_5F_syntax_10>",// Index 32
  "<select_common_5F_syntax_11>",// Index 33
  "<select_common_5F_syntax_12>",// Index 34
  "<select_common_5F_syntax_13>",// Index 35
  "<select_common_5F_syntax_14>",// Index 36
  "<select_common_5F_syntax_15>",// Index 37
  "<select_common_5F_syntax_16>",// Index 38
  "<select_common_5F_syntax_17>",// Index 39
  "<select_common_5F_syntax_18>",// Index 40
  "<select_common_5F_syntax_19>",// Index 41
  "<select_common_5F_syntax_20>",// Index 42
  "<select_common_5F_syntax_21>",// Index 43
  "<select_common_5F_syntax_22>",// Index 44
  "<select_common_5F_syntax_23>",// Index 45
  "<select_common_5F_syntax_24>",// Index 46
  "<select_common_5F_syntax_25>",// Index 47
  "<select_common_5F_syntax_26>",// Index 48
  "<select_common_5F_syntax_27>",// Index 49
  "<select_common_5F_syntax_28>",// Index 50
  "<select_common_5F_syntax_29>",// Index 51
  "<select_common_5F_syntax_30>",// Index 52
  "<select_common_5F_syntax_31>",// Index 53
  "<select_common_5F_syntax_32>",// Index 54
  "<select_common_5F_syntax_33>",// Index 55
  "<select_common_5F_syntax_34>",// Index 56
  "<select_common_5F_syntax_35>",// Index 57
  "<select_common_5F_syntax_36>",// Index 58
  "<select_common_5F_syntax_37>",// Index 59
  "<>"// Index 60
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                S L R    A N A L Y Z E R    A C T I O N    T A B L E                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

// Action tables handle shift and reduce actions ;
//  - a shift action is (terminal_symbol, SHIFT (n)) : if shifts to state n ;
//  - the accept action is (terminal_symbol, ACCEPT) ;
//  - a reduce action is (terminal_symbol, REDUCE (n)) ; if reduces to state n.

#define SHIFT(a) ((a) + 2)
#define REDUCE(a) (-(a) - 1)
#define ACCEPT (1)
#define END (-1)

static const int16_t gActionTable_plm_target_grammar [] = {
// State S0 (index = 0)
  C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_booleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_init, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_exception, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_boot, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_required, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (12)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, SHIFT (13)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, SHIFT (14)
, C_Lexique_plm_5F_lexique::kToken_mode, SHIFT (15)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, SHIFT (16)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (63)
, END
// State S1 (index = 35)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (22)
, END
// State S2 (index = 38)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (23)
, END
// State S3 (index = 41)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (24)
, END
// State S4 (index = 44)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (25)
, END
// State S5 (index = 47)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (26)
, END
// State S6 (index = 50)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (27)
, END
// State S7 (index = 53)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (28)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (29)
, END
// State S8 (index = 58)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (30)
, END
// State S9 (index = 61)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (31)
, END
// State S10 (index = 64)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (32)
, END
// State S11 (index = 67)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (5)
, END
// State S12 (index = 70)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (34)
, END
// State S13 (index = 73)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (35)
, END
// State S14 (index = 76)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (36)
, END
// State S15 (index = 79)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (37)
, END
// State S16 (index = 82)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (38)
, END
// State S17 (index = 85)
, C_Lexique_plm_5F_lexique::kToken_, ACCEPT
, END
// State S18 (index = 88)
, C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_booleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_init, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_exception, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_boot, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_required, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (12)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, SHIFT (13)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, SHIFT (14)
, C_Lexique_plm_5F_lexique::kToken_mode, SHIFT (15)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, SHIFT (16)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (63)
, END
// State S19 (index = 123)
, C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_booleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_init, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_exception, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_boot, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_required, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (12)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, SHIFT (13)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, SHIFT (14)
, C_Lexique_plm_5F_lexique::kToken_mode, SHIFT (15)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, SHIFT (16)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (63)
, END
// State S20 (index = 158)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (41)
, END
// State S21 (index = 161)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (0)
, END
// State S22 (index = 164)
, C_Lexique_plm_5F_lexique::kToken_import, SHIFT (1)
, C_Lexique_plm_5F_lexique::kToken_booleanType, SHIFT (2)
, C_Lexique_plm_5F_lexique::kToken_enum, SHIFT (3)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (4)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (5)
, C_Lexique_plm_5F_lexique::kToken_init, SHIFT (6)
, C_Lexique_plm_5F_lexique::kToken_exception, SHIFT (7)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (8)
, C_Lexique_plm_5F_lexique::kToken_boot, SHIFT (9)
, C_Lexique_plm_5F_lexique::kToken_func, SHIFT (10)
, C_Lexique_plm_5F_lexique::kToken_required, SHIFT (11)
, C_Lexique_plm_5F_lexique::kToken_register, SHIFT (12)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, SHIFT (13)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, SHIFT (14)
, C_Lexique_plm_5F_lexique::kToken_mode, SHIFT (15)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, SHIFT (16)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (63)
, END
// State S23 (index = 199)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (43)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (67)
, END
// State S24 (index = 236)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (45)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (69)
, END
// State S25 (index = 241)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (47)
, END
// State S26 (index = 244)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (48)
, END
// State S27 (index = 247)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (49)
, END
// State S28 (index = 250)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (50)
, END
// State S29 (index = 253)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (51)
, END
// State S30 (index = 256)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (52)
, END
// State S31 (index = 259)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (53)
, END
// State S32 (index = 262)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (80)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (54)
, END
// State S33 (index = 267)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (13)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (13)
, END
// State S34 (index = 302)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (56)
, C_Lexique_plm_5F_lexique::kToken_at, REDUCE (94)
, END
// State S35 (index = 307)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (58)
, END
// State S36 (index = 310)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (59)
, END
// State S37 (index = 313)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (61)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (61)
, END
// State S38 (index = 348)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (60)
, END
// State S39 (index = 351)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (64)
, END
// State S40 (index = 354)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (65)
, END
// State S41 (index = 357)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (67)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (68)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (69)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (70)
, END
// State S42 (index = 386)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (66)
, END
// State S43 (index = 389)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (43)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (67)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (67)
, END
// State S44 (index = 426)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (1)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (1)
, END
// State S45 (index = 461)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (45)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (69)
, END
// State S46 (index = 466)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (76)
, END
// State S47 (index = 469)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (77)
, END
// State S48 (index = 472)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (84)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (78)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (84)
, END
// State S49 (index = 479)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (67)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (68)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (69)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (70)
, END
// State S50 (index = 508)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (81)
, END
// State S51 (index = 511)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (82)
, END
// State S52 (index = 514)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (83)
, END
// State S53 (index = 517)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (67)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (68)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (69)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (70)
, END
// State S54 (index = 546)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (80)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (54)
, END
// State S55 (index = 551)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (86)
, END
// State S56 (index = 554)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (56)
, C_Lexique_plm_5F_lexique::kToken_at, REDUCE (94)
, END
// State S57 (index = 559)
, C_Lexique_plm_5F_lexique::kToken_at, SHIFT (88)
, END
// State S58 (index = 562)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (89)
, END
// State S59 (index = 565)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (90)
, END
// State S60 (index = 568)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (62)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (62)
, END
// State S61 (index = 603)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (91)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (92)
, C_Lexique_plm_5F_lexique::kToken__2B__2B_, SHIFT (93)
, C_Lexique_plm_5F_lexique::kToken__2D__2D_, SHIFT (94)
, C_Lexique_plm_5F_lexique::kToken__26__2B__2B_, SHIFT (95)
, C_Lexique_plm_5F_lexique::kToken__26__2D__2D_, SHIFT (96)
, C_Lexique_plm_5F_lexique::kToken__7C__3D_, SHIFT (97)
, C_Lexique_plm_5F_lexique::kToken__26__3D_, SHIFT (98)
, C_Lexique_plm_5F_lexique::kToken__5E__3D_, SHIFT (99)
, END
// State S62 (index = 622)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (101)
, END
// State S63 (index = 625)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (102)
, END
// State S64 (index = 628)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S65 (index = 649)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (67)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (68)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (69)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (70)
, END
// State S66 (index = 678)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S67 (index = 699)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S68 (index = 720)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S69 (index = 741)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S70 (index = 762)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (67)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (68)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (69)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (70)
, END
// State S71 (index = 791)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (67)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (68)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (69)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (70)
, END
// State S72 (index = 820)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (135)
, END
// State S73 (index = 823)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (42)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (42)
, END
// State S74 (index = 832)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (68)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (68)
, END
// State S75 (index = 867)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (70)
, END
// State S76 (index = 870)
, C_Lexique_plm_5F_lexique::kToken_case, SHIFT (136)
, END
// State S77 (index = 873)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (137)
, END
// State S78 (index = 876)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (84)
, C_Lexique_plm_5F_lexique::kToken_modeName, SHIFT (78)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (84)
, END
// State S79 (index = 883)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (139)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (86)
, END
// State S80 (index = 888)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (141)
, END
// State S81 (index = 891)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (67)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (68)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (69)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (70)
, END
// State S82 (index = 920)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (8)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (8)
, END
// State S83 (index = 955)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (143)
, END
// State S84 (index = 958)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (144)
, END
// State S85 (index = 961)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (81)
, END
// State S86 (index = 964)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (145)
, END
// State S87 (index = 967)
, C_Lexique_plm_5F_lexique::kToken_at, REDUCE (95)
, END
// State S88 (index = 970)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (146)
, END
// State S89 (index = 973)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (59)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (59)
, END
// State S90 (index = 1008)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (60)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (60)
, END
// State S91 (index = 1043)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S92 (index = 1064)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (159)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (149)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (150)
, END
// State S93 (index = 1073)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (43)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (43)
, END
// State S94 (index = 1102)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (44)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (44)
, END
// State S95 (index = 1131)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (45)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (45)
, END
// State S96 (index = 1160)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (46)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (46)
, END
// State S97 (index = 1189)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, REDUCE (153)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (153)
, C_Lexique_plm_5F_lexique::kToken_integer, REDUCE (153)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (153)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (153)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (153)
, C_Lexique_plm_5F_lexique::kToken__7E_, REDUCE (153)
, C_Lexique_plm_5F_lexique::kToken_not, REDUCE (153)
, C_Lexique_plm_5F_lexique::kToken_true, REDUCE (153)
, C_Lexique_plm_5F_lexique::kToken_false, REDUCE (153)
, END
// State S98 (index = 1210)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, REDUCE (154)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (154)
, C_Lexique_plm_5F_lexique::kToken_integer, REDUCE (154)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (154)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (154)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (154)
, C_Lexique_plm_5F_lexique::kToken__7E_, REDUCE (154)
, C_Lexique_plm_5F_lexique::kToken_not, REDUCE (154)
, C_Lexique_plm_5F_lexique::kToken_true, REDUCE (154)
, C_Lexique_plm_5F_lexique::kToken_false, REDUCE (154)
, END
// State S99 (index = 1231)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, REDUCE (155)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (155)
, C_Lexique_plm_5F_lexique::kToken_integer, REDUCE (155)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (155)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (155)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (155)
, C_Lexique_plm_5F_lexique::kToken__7E_, REDUCE (155)
, C_Lexique_plm_5F_lexique::kToken_not, REDUCE (155)
, C_Lexique_plm_5F_lexique::kToken_true, REDUCE (155)
, C_Lexique_plm_5F_lexique::kToken_false, REDUCE (155)
, END
// State S100 (index = 1252)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S101 (index = 1273)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (153)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (149)
, END
// State S102 (index = 1278)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (155)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (151)
, END
// State S103 (index = 1283)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (34)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (34)
, END
// State S104 (index = 1408)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (157)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__2E_, SHIFT (158)
, C_Lexique_plm_5F_lexique::kToken__3A__3A_, SHIFT (159)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (142)
, END
// State S105 (index = 1539)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (33)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (33)
, END
// State S106 (index = 1664)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S107 (index = 1685)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S108 (index = 1706)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S109 (index = 1727)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S110 (index = 1748)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S111 (index = 1769)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (35)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (35)
, END
// State S112 (index = 1894)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (36)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (36)
, END
// State S113 (index = 2019)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (41)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (41)
, END
// State S114 (index = 2048)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (15)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (15)
, END
// State S115 (index = 2121)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_or, SHIFT (166)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (104)
, END
// State S116 (index = 2196)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_xor, SHIFT (168)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (106)
, END
// State S117 (index = 2273)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_and, SHIFT (170)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (108)
, END
// State S118 (index = 2352)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (172)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (110)
, END
// State S119 (index = 2433)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (174)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (112)
, END
// State S120 (index = 2516)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (176)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (114)
, END
// State S121 (index = 2601)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, SHIFT (178)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, SHIFT (179)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (116)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (116)
, END
// State S122 (index = 2690)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, SHIFT (181)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, SHIFT (182)
, C_Lexique_plm_5F_lexique::kToken__3C_, SHIFT (183)
, C_Lexique_plm_5F_lexique::kToken__3E_, SHIFT (184)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (119)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (119)
, END
// State S123 (index = 2787)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (186)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (187)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (124)
, END
// State S124 (index = 2888)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (189)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, SHIFT (190)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (191)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (192)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (127)
, END
// State S125 (index = 2997)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (194)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (195)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (132)
, END
// State S126 (index = 3118)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__5C_, SHIFT (201)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, SHIFT (202)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (139)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (139)
, END
// State S127 (index = 3243)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (148)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (148)
, END
// State S128 (index = 3252)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (51)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (51)
, END
// State S129 (index = 3281)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (52)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (52)
, END
// State S130 (index = 3310)
, C_Lexique_plm_5F_lexique::kToken_then, SHIFT (204)
, END
// State S131 (index = 3313)
, C_Lexique_plm_5F_lexique::kToken_end, SHIFT (205)
, END
// State S132 (index = 3316)
, C_Lexique_plm_5F_lexique::kToken_do, SHIFT (206)
, END
// State S133 (index = 3319)
, C_Lexique_plm_5F_lexique::kToken_end, SHIFT (207)
, END
// State S134 (index = 3322)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (147)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (147)
, END
// State S135 (index = 3331)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (10)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (10)
, END
// State S136 (index = 3366)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (208)
, END
// State S137 (index = 3369)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S138 (index = 3390)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (85)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (85)
, END
// State S139 (index = 3395)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (139)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (86)
, END
// State S140 (index = 3400)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (211)
, END
// State S141 (index = 3403)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (6)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (6)
, END
// State S142 (index = 3438)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (213)
, END
// State S143 (index = 3441)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S144 (index = 3462)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (5)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (5)
, END
// State S145 (index = 3497)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (215)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (82)
, END
// State S146 (index = 3502)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (217)
, C_Lexique_plm_5F_lexique::kToken__3A_, REDUCE (92)
, END
// State S147 (index = 3507)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (50)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (50)
, END
// State S148 (index = 3536)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (219)
, END
// State S149 (index = 3539)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S150 (index = 3560)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (221)
, END
// State S151 (index = 3563)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (222)
, END
// State S152 (index = 3566)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (53)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (53)
, END
// State S153 (index = 3595)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (223)
, END
// State S154 (index = 3598)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (224)
, END
// State S155 (index = 3601)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (225)
, END
// State S156 (index = 3604)
, C_Lexique_plm_5F_lexique::kToken__3D_, SHIFT (226)
, END
// State S157 (index = 3607)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (227)
, END
// State S158 (index = 3612)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (229)
, END
// State S159 (index = 3615)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (230)
, END
// State S160 (index = 3618)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (37)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (37)
, END
// State S161 (index = 3743)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (231)
, END
// State S162 (index = 3746)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (30)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (30)
, END
// State S163 (index = 3871)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (31)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (31)
, END
// State S164 (index = 3996)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (28)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (28)
, END
// State S165 (index = 4121)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (29)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (29)
, END
// State S166 (index = 4246)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S167 (index = 4267)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (16)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (16)
, END
// State S168 (index = 4340)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S169 (index = 4361)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (17)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (17)
, END
// State S170 (index = 4436)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S171 (index = 4457)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (18)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (18)
, END
// State S172 (index = 4534)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S173 (index = 4555)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (19)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (19)
, END
// State S174 (index = 4634)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S175 (index = 4655)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (20)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (20)
, END
// State S176 (index = 4736)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S177 (index = 4757)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (21)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (21)
, END
// State S178 (index = 4840)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S179 (index = 4861)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S180 (index = 4882)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (22)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (22)
, END
// State S181 (index = 4967)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S182 (index = 4988)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S183 (index = 5009)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S184 (index = 5030)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S185 (index = 5051)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (23)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (23)
, END
// State S186 (index = 5140)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S187 (index = 5161)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S188 (index = 5182)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (24)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (24)
, END
// State S189 (index = 5279)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S190 (index = 5300)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S191 (index = 5321)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S192 (index = 5342)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S193 (index = 5363)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (25)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (25)
, END
// State S194 (index = 5464)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S195 (index = 5485)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S196 (index = 5506)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S197 (index = 5527)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S198 (index = 5548)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S199 (index = 5569)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S200 (index = 5590)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (26)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (26)
, END
// State S201 (index = 5699)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (256)
, END
// State S202 (index = 5702)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (257)
, END
// State S203 (index = 5705)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (27)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (27)
, END
// State S204 (index = 5826)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (67)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (68)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (69)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (70)
, END
// State S205 (index = 5855)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (54)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (54)
, END
// State S206 (index = 5884)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (67)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (68)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (69)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (70)
, END
// State S207 (index = 5913)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (58)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (58)
, END
// State S208 (index = 5942)
, C_Lexique_plm_5F_lexique::kToken_case, SHIFT (260)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (71)
, END
// State S209 (index = 5947)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (262)
, END
// State S210 (index = 5950)
, C_Lexique_plm_5F_lexique::kToken__28_, REDUCE (87)
, END
// State S211 (index = 5953)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (263)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (88)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (264)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (265)
, END
// State S212 (index = 5962)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (11)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (11)
, END
// State S213 (index = 5999)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (7)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (7)
, END
// State S214 (index = 6034)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (4)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (4)
, END
// State S215 (index = 6069)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (267)
, END
// State S216 (index = 6072)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (268)
, END
// State S217 (index = 6075)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (56)
, C_Lexique_plm_5F_lexique::kToken_at, REDUCE (94)
, END
// State S218 (index = 6080)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (270)
, END
// State S219 (index = 6083)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (159)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (149)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (150)
, END
// State S220 (index = 6092)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (159)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (149)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (150)
, END
// State S221 (index = 6101)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (148)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (159)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (149)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, SHIFT (150)
, END
// State S222 (index = 6110)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (56)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (56)
, END
// State S223 (index = 6139)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (150)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (48)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (48)
, END
// State S224 (index = 6170)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S225 (index = 6191)
, C_Lexique_plm_5F_lexique::kToken__3D_, REDUCE (152)
, END
// State S226 (index = 6194)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S227 (index = 6215)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S228 (index = 6236)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (277)
, END
// State S229 (index = 6239)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__2E_, SHIFT (158)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (142)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (142)
, END
// State S230 (index = 6366)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (279)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (39)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (39)
, END
// State S231 (index = 6493)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (32)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (32)
, END
// State S232 (index = 6618)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_or, SHIFT (166)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (104)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (104)
, END
// State S233 (index = 6693)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_xor, SHIFT (168)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (106)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (106)
, END
// State S234 (index = 6770)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_and, SHIFT (170)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (108)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (108)
, END
// State S235 (index = 6849)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__7C_, SHIFT (172)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (110)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (110)
, END
// State S236 (index = 6930)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__5E_, SHIFT (174)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (112)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (112)
, END
// State S237 (index = 7013)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__26_, SHIFT (176)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (114)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (114)
, END
// State S238 (index = 7098)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (117)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (117)
, END
// State S239 (index = 7183)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (118)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (118)
, END
// State S240 (index = 7268)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (120)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (120)
, END
// State S241 (index = 7357)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (121)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (121)
, END
// State S242 (index = 7446)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (122)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (122)
, END
// State S243 (index = 7535)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (123)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (123)
, END
// State S244 (index = 7624)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (186)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (187)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (124)
, END
// State S245 (index = 7725)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, SHIFT (186)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, SHIFT (187)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (124)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (124)
, END
// State S246 (index = 7826)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (189)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, SHIFT (190)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (191)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (192)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (127)
, END
// State S247 (index = 7935)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (189)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, SHIFT (190)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (191)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (192)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (127)
, END
// State S248 (index = 8044)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (189)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, SHIFT (190)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (191)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (192)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (127)
, END
// State S249 (index = 8153)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__2B_, SHIFT (189)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, SHIFT (190)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (191)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (192)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (127)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (127)
, END
// State S250 (index = 8262)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (194)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (195)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (132)
, END
// State S251 (index = 8383)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (194)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (195)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (132)
, END
// State S252 (index = 8504)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (194)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (195)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (132)
, END
// State S253 (index = 8625)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (194)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (195)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (132)
, END
// State S254 (index = 8746)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (194)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (195)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (132)
, END
// State S255 (index = 8867)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__2A_, SHIFT (194)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, SHIFT (195)
, C_Lexique_plm_5F_lexique::kToken__25_, SHIFT (196)
, C_Lexique_plm_5F_lexique::kToken__26__25_, SHIFT (197)
, C_Lexique_plm_5F_lexique::kToken__2F_, SHIFT (198)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, SHIFT (199)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (132)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (132)
, END
// State S256 (index = 8988)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (140)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (140)
, END
// State S257 (index = 9109)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (141)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (141)
, END
// State S258 (index = 9230)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (156)
, C_Lexique_plm_5F_lexique::kToken_else, SHIFT (298)
, C_Lexique_plm_5F_lexique::kToken_elsif, SHIFT (299)
, END
// State S259 (index = 9237)
, C_Lexique_plm_5F_lexique::kToken_end, SHIFT (301)
, END
// State S260 (index = 9240)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (302)
, END
// State S261 (index = 9243)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (303)
, END
// State S262 (index = 9246)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (304)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (75)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (75)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (75)
, END
// State S263 (index = 9255)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (306)
, END
// State S264 (index = 9258)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (307)
, END
// State S265 (index = 9261)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (308)
, END
// State S266 (index = 9264)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (309)
, END
// State S267 (index = 9267)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (310)
, END
// State S268 (index = 9270)
, C_Lexique_plm_5F_lexique::kToken__2D__3E_, SHIFT (311)
, END
// State S269 (index = 9273)
, C_Lexique_plm_5F_lexique::kToken_at, SHIFT (312)
, END
// State S270 (index = 9276)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (313)
, END
// State S271 (index = 9279)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (162)
, END
// State S272 (index = 9282)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (160)
, END
// State S273 (index = 9285)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (161)
, END
// State S274 (index = 9288)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (47)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (47)
, END
// State S275 (index = 9317)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (49)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (49)
, END
// State S276 (index = 9346)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (144)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (227)
, END
// State S277 (index = 9351)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (38)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (38)
, END
// State S278 (index = 9476)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (143)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (143)
, END
// State S279 (index = 9601)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S280 (index = 9622)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (105)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (105)
, END
// State S281 (index = 9695)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (107)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (107)
, END
// State S282 (index = 9770)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (109)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (109)
, END
// State S283 (index = 9847)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (111)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (111)
, END
// State S284 (index = 9926)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (113)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (113)
, END
// State S285 (index = 10007)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (115)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (115)
, END
// State S286 (index = 10090)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (125)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (125)
, END
// State S287 (index = 10187)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (126)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (126)
, END
// State S288 (index = 10284)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (128)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (128)
, END
// State S289 (index = 10385)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (129)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (129)
, END
// State S290 (index = 10486)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (130)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (130)
, END
// State S291 (index = 10587)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (131)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (131)
, END
// State S292 (index = 10688)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (133)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (133)
, END
// State S293 (index = 10797)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (134)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (134)
, END
// State S294 (index = 10906)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (135)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (135)
, END
// State S295 (index = 11015)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (136)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (136)
, END
// State S296 (index = 11124)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (137)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (137)
, END
// State S297 (index = 11233)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (138)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (138)
, END
// State S298 (index = 11342)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (67)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (68)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (69)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (70)
, END
// State S299 (index = 11371)
, C_Lexique_plm_5F_lexique::kToken_literal_5F_string, SHIFT (103)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (104)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (105)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (106)
, C_Lexique_plm_5F_lexique::kToken__2D_, SHIFT (107)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, SHIFT (108)
, C_Lexique_plm_5F_lexique::kToken__7E_, SHIFT (109)
, C_Lexique_plm_5F_lexique::kToken_not, SHIFT (110)
, C_Lexique_plm_5F_lexique::kToken_true, SHIFT (111)
, C_Lexique_plm_5F_lexique::kToken_false, SHIFT (112)
, END
// State S300 (index = 11392)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (55)
, END
// State S301 (index = 11395)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (57)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (57)
, END
// State S302 (index = 11424)
, C_Lexique_plm_5F_lexique::kToken_case, SHIFT (260)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (71)
, END
// State S303 (index = 11429)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (2)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (2)
, END
// State S304 (index = 11464)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (76)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (76)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (76)
, END
// State S305 (index = 11471)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (319)
, C_Lexique_plm_5F_lexique::kToken_init, SHIFT (320)
, C_Lexique_plm_5F_lexique::kToken_exception, SHIFT (321)
, END
// State S306 (index = 11478)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (323)
, END
// State S307 (index = 11481)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (324)
, END
// State S308 (index = 11484)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (325)
, END
// State S309 (index = 11487)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (12)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (12)
, END
// State S310 (index = 11528)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (326)
, END
// State S311 (index = 11531)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (327)
, END
// State S312 (index = 11534)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (328)
, END
// State S313 (index = 11537)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (329)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (96)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (96)
, END
// State S314 (index = 11574)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (145)
, END
// State S315 (index = 11577)
, C_Lexique_plm_5F_lexique::kToken__29_, SHIFT (331)
, END
// State S316 (index = 11580)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (157)
, END
// State S317 (index = 11583)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (158)
, END
// State S318 (index = 11586)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (72)
, END
// State S319 (index = 11589)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (332)
, END
// State S320 (index = 11592)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (333)
, END
// State S321 (index = 11595)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (334)
, END
// State S322 (index = 11598)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (304)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (73)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (75)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (75)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (75)
, END
// State S323 (index = 11609)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (337)
, END
// State S324 (index = 11612)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (338)
, END
// State S325 (index = 11615)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (339)
, END
// State S326 (index = 11618)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (215)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (82)
, END
// State S327 (index = 11623)
, C_Lexique_plm_5F_lexique::kToken__3A_, SHIFT (341)
, END
// State S328 (index = 11626)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (217)
, C_Lexique_plm_5F_lexique::kToken__3A_, REDUCE (92)
, END
// State S329 (index = 11631)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (343)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (344)
, END
// State S330 (index = 11636)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (14)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (14)
, END
// State S331 (index = 11671)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_identifier, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__7B_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3F_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__21_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_or, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_xor, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_and, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__7C_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__5E_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__26_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3D__3D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__21__3D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3C__3D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3E__3D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3C_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3E_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3C__3C_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3E__3E_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__2B_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__26__2B_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__2D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__26__2D_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__2A_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__26__2A_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__25_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__26__25_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__2F_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__26__2F_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__5C_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__26__5C_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_check, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__3B_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_assert, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_throw, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_if, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_then, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken__21__3F_, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_while, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_do, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_forever, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (40)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (40)
, END
// State S332 (index = 11796)
, C_Lexique_plm_5F_lexique::kToken__28_, SHIFT (211)
, END
// State S333 (index = 11799)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (78)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (78)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (78)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (78)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (78)
, END
// State S334 (index = 11810)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (347)
, END
// State S335 (index = 11813)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (348)
, END
// State S336 (index = 11816)
, C_Lexique_plm_5F_lexique::kToken_proc, SHIFT (319)
, C_Lexique_plm_5F_lexique::kToken_init, SHIFT (320)
, C_Lexique_plm_5F_lexique::kToken_exception, SHIFT (321)
, END
// State S337 (index = 11823)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (263)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (88)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (264)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (265)
, END
// State S338 (index = 11832)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (263)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (88)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (264)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (265)
, END
// State S339 (index = 11841)
, C_Lexique_plm_5F_lexique::kToken__3F_, SHIFT (263)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (88)
, C_Lexique_plm_5F_lexique::kToken__21_, SHIFT (264)
, C_Lexique_plm_5F_lexique::kToken__3F__21_, SHIFT (265)
, END
// State S340 (index = 11850)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (83)
, END
// State S341 (index = 11853)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (353)
, END
// State S342 (index = 11856)
, C_Lexique_plm_5F_lexique::kToken__3A_, REDUCE (93)
, END
// State S343 (index = 11859)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (102)
, C_Lexique_plm_5F_lexique::kToken__5B_, SHIFT (354)
, C_Lexique_plm_5F_lexique::kToken__2C_, REDUCE (102)
, END
// State S344 (index = 11866)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (100)
, C_Lexique_plm_5F_lexique::kToken__2C_, REDUCE (100)
, END
// State S345 (index = 11871)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (98)
, C_Lexique_plm_5F_lexique::kToken__2C_, SHIFT (356)
, END
// State S346 (index = 11876)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (77)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (77)
, END
// State S347 (index = 11887)
, C_Lexique_plm_5F_lexique::kToken_attribute, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (79)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (79)
, END
// State S348 (index = 11898)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (3)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (3)
, END
// State S349 (index = 11933)
, C_Lexique_plm_5F_lexique::kToken_attribute, SHIFT (304)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (73)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (75)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (75)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (75)
, END
// State S350 (index = 11944)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (91)
, END
// State S351 (index = 11947)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (89)
, END
// State S352 (index = 11950)
, C_Lexique_plm_5F_lexique::kToken__29_, REDUCE (90)
, END
// State S353 (index = 11953)
, C_Lexique_plm_5F_lexique::kToken__7B_, SHIFT (359)
, END
// State S354 (index = 11956)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (360)
, END
// State S355 (index = 11959)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (101)
, C_Lexique_plm_5F_lexique::kToken__2C_, REDUCE (101)
, END
// State S356 (index = 11964)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (343)
, C_Lexique_plm_5F_lexique::kToken_integer, SHIFT (344)
, END
// State S357 (index = 11969)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (362)
, END
// State S358 (index = 11972)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (74)
, END
// State S359 (index = 11975)
, C_Lexique_plm_5F_lexique::kToken_identifier, SHIFT (61)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_var, SHIFT (62)
, C_Lexique_plm_5F_lexique::kToken_let, SHIFT (63)
, C_Lexique_plm_5F_lexique::kToken_check, SHIFT (64)
, C_Lexique_plm_5F_lexique::kToken__3B_, SHIFT (65)
, C_Lexique_plm_5F_lexique::kToken_assert, SHIFT (66)
, C_Lexique_plm_5F_lexique::kToken_throw, SHIFT (67)
, C_Lexique_plm_5F_lexique::kToken_if, SHIFT (68)
, C_Lexique_plm_5F_lexique::kToken_end, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_else, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_elsif, REDUCE (146)
, C_Lexique_plm_5F_lexique::kToken_while, SHIFT (69)
, C_Lexique_plm_5F_lexique::kToken_forever, SHIFT (70)
, END
// State S360 (index = 12004)
, C_Lexique_plm_5F_lexique::kToken__5D_, SHIFT (364)
, END
// State S361 (index = 12007)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (98)
, C_Lexique_plm_5F_lexique::kToken__2C_, SHIFT (356)
, END
// State S362 (index = 12012)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (97)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (97)
, END
// State S363 (index = 12047)
, C_Lexique_plm_5F_lexique::kToken__7D_, SHIFT (366)
, END
// State S364 (index = 12050)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (103)
, C_Lexique_plm_5F_lexique::kToken__2C_, REDUCE (103)
, END
// State S365 (index = 12055)
, C_Lexique_plm_5F_lexique::kToken__7D_, REDUCE (99)
, END
// State S366 (index = 12058)
, C_Lexique_plm_5F_lexique::kToken_import, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_booleanType, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_enum, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_var, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_proc, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_init, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_exception, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_let, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_boot, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_func, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_required, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_register, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_newSignedRepresentation, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_newUnsignedRepresentation, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_mode, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_newIntegerType, REDUCE (9)
, C_Lexique_plm_5F_lexique::kToken_, REDUCE (9)
, END} ;

static const uint32_t gActionTableIndex_plm_target_grammar [367] = {
  0  // S0
, 35  // S1
, 38  // S2
, 41  // S3
, 44  // S4
, 47  // S5
, 50  // S6
, 53  // S7
, 58  // S8
, 61  // S9
, 64  // S10
, 67  // S11
, 70  // S12
, 73  // S13
, 76  // S14
, 79  // S15
, 82  // S16
, 85  // S17
, 88  // S18
, 123  // S19
, 158  // S20
, 161  // S21
, 164  // S22
, 199  // S23
, 236  // S24
, 241  // S25
, 244  // S26
, 247  // S27
, 250  // S28
, 253  // S29
, 256  // S30
, 259  // S31
, 262  // S32
, 267  // S33
, 302  // S34
, 307  // S35
, 310  // S36
, 313  // S37
, 348  // S38
, 351  // S39
, 354  // S40
, 357  // S41
, 386  // S42
, 389  // S43
, 426  // S44
, 461  // S45
, 466  // S46
, 469  // S47
, 472  // S48
, 479  // S49
, 508  // S50
, 511  // S51
, 514  // S52
, 517  // S53
, 546  // S54
, 551  // S55
, 554  // S56
, 559  // S57
, 562  // S58
, 565  // S59
, 568  // S60
, 603  // S61
, 622  // S62
, 625  // S63
, 628  // S64
, 649  // S65
, 678  // S66
, 699  // S67
, 720  // S68
, 741  // S69
, 762  // S70
, 791  // S71
, 820  // S72
, 823  // S73
, 832  // S74
, 867  // S75
, 870  // S76
, 873  // S77
, 876  // S78
, 883  // S79
, 888  // S80
, 891  // S81
, 920  // S82
, 955  // S83
, 958  // S84
, 961  // S85
, 964  // S86
, 967  // S87
, 970  // S88
, 973  // S89
, 1008  // S90
, 1043  // S91
, 1064  // S92
, 1073  // S93
, 1102  // S94
, 1131  // S95
, 1160  // S96
, 1189  // S97
, 1210  // S98
, 1231  // S99
, 1252  // S100
, 1273  // S101
, 1278  // S102
, 1283  // S103
, 1408  // S104
, 1539  // S105
, 1664  // S106
, 1685  // S107
, 1706  // S108
, 1727  // S109
, 1748  // S110
, 1769  // S111
, 1894  // S112
, 2019  // S113
, 2048  // S114
, 2121  // S115
, 2196  // S116
, 2273  // S117
, 2352  // S118
, 2433  // S119
, 2516  // S120
, 2601  // S121
, 2690  // S122
, 2787  // S123
, 2888  // S124
, 2997  // S125
, 3118  // S126
, 3243  // S127
, 3252  // S128
, 3281  // S129
, 3310  // S130
, 3313  // S131
, 3316  // S132
, 3319  // S133
, 3322  // S134
, 3331  // S135
, 3366  // S136
, 3369  // S137
, 3390  // S138
, 3395  // S139
, 3400  // S140
, 3403  // S141
, 3438  // S142
, 3441  // S143
, 3462  // S144
, 3497  // S145
, 3502  // S146
, 3507  // S147
, 3536  // S148
, 3539  // S149
, 3560  // S150
, 3563  // S151
, 3566  // S152
, 3595  // S153
, 3598  // S154
, 3601  // S155
, 3604  // S156
, 3607  // S157
, 3612  // S158
, 3615  // S159
, 3618  // S160
, 3743  // S161
, 3746  // S162
, 3871  // S163
, 3996  // S164
, 4121  // S165
, 4246  // S166
, 4267  // S167
, 4340  // S168
, 4361  // S169
, 4436  // S170
, 4457  // S171
, 4534  // S172
, 4555  // S173
, 4634  // S174
, 4655  // S175
, 4736  // S176
, 4757  // S177
, 4840  // S178
, 4861  // S179
, 4882  // S180
, 4967  // S181
, 4988  // S182
, 5009  // S183
, 5030  // S184
, 5051  // S185
, 5140  // S186
, 5161  // S187
, 5182  // S188
, 5279  // S189
, 5300  // S190
, 5321  // S191
, 5342  // S192
, 5363  // S193
, 5464  // S194
, 5485  // S195
, 5506  // S196
, 5527  // S197
, 5548  // S198
, 5569  // S199
, 5590  // S200
, 5699  // S201
, 5702  // S202
, 5705  // S203
, 5826  // S204
, 5855  // S205
, 5884  // S206
, 5913  // S207
, 5942  // S208
, 5947  // S209
, 5950  // S210
, 5953  // S211
, 5962  // S212
, 5999  // S213
, 6034  // S214
, 6069  // S215
, 6072  // S216
, 6075  // S217
, 6080  // S218
, 6083  // S219
, 6092  // S220
, 6101  // S221
, 6110  // S222
, 6139  // S223
, 6170  // S224
, 6191  // S225
, 6194  // S226
, 6215  // S227
, 6236  // S228
, 6239  // S229
, 6366  // S230
, 6493  // S231
, 6618  // S232
, 6693  // S233
, 6770  // S234
, 6849  // S235
, 6930  // S236
, 7013  // S237
, 7098  // S238
, 7183  // S239
, 7268  // S240
, 7357  // S241
, 7446  // S242
, 7535  // S243
, 7624  // S244
, 7725  // S245
, 7826  // S246
, 7935  // S247
, 8044  // S248
, 8153  // S249
, 8262  // S250
, 8383  // S251
, 8504  // S252
, 8625  // S253
, 8746  // S254
, 8867  // S255
, 8988  // S256
, 9109  // S257
, 9230  // S258
, 9237  // S259
, 9240  // S260
, 9243  // S261
, 9246  // S262
, 9255  // S263
, 9258  // S264
, 9261  // S265
, 9264  // S266
, 9267  // S267
, 9270  // S268
, 9273  // S269
, 9276  // S270
, 9279  // S271
, 9282  // S272
, 9285  // S273
, 9288  // S274
, 9317  // S275
, 9346  // S276
, 9351  // S277
, 9476  // S278
, 9601  // S279
, 9622  // S280
, 9695  // S281
, 9770  // S282
, 9847  // S283
, 9926  // S284
, 10007  // S285
, 10090  // S286
, 10187  // S287
, 10284  // S288
, 10385  // S289
, 10486  // S290
, 10587  // S291
, 10688  // S292
, 10797  // S293
, 10906  // S294
, 11015  // S295
, 11124  // S296
, 11233  // S297
, 11342  // S298
, 11371  // S299
, 11392  // S300
, 11395  // S301
, 11424  // S302
, 11429  // S303
, 11464  // S304
, 11471  // S305
, 11478  // S306
, 11481  // S307
, 11484  // S308
, 11487  // S309
, 11528  // S310
, 11531  // S311
, 11534  // S312
, 11537  // S313
, 11574  // S314
, 11577  // S315
, 11580  // S316
, 11583  // S317
, 11586  // S318
, 11589  // S319
, 11592  // S320
, 11595  // S321
, 11598  // S322
, 11609  // S323
, 11612  // S324
, 11615  // S325
, 11618  // S326
, 11623  // S327
, 11626  // S328
, 11631  // S329
, 11636  // S330
, 11671  // S331
, 11796  // S332
, 11799  // S333
, 11810  // S334
, 11813  // S335
, 11816  // S336
, 11823  // S337
, 11832  // S338
, 11841  // S339
, 11850  // S340
, 11853  // S341
, 11856  // S342
, 11859  // S343
, 11866  // S344
, 11871  // S345
, 11876  // S346
, 11887  // S347
, 11898  // S348
, 11933  // S349
, 11944  // S350
, 11947  // S351
, 11950  // S352
, 11953  // S353
, 11956  // S354
, 11959  // S355
, 11964  // S356
, 11969  // S357
, 11972  // S358
, 11975  // S359
, 12004  // S360
, 12007  // S361
, 12012  // S362
, 12047  // S363
, 12050  // S364
, 12055  // S365
, 12058  // S366
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            SLR states successors table                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

// Successor tables handle non terminal successors ;
// an entry is (non_terminal_symbol, n) ; successor is state n.

static const int16_t gSuccessorTable_plm_target_grammar_0 [11] = {0, 17,
  1, 18,
  2, 19,
  3, 20,
  22, 21, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_11 [3] = {3, 33, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_18 [9] = {1, 18,
  2, 19,
  3, 20,
  22, 39, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_19 [9] = {1, 18,
  2, 19,
  3, 20,
  22, 40, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_22 [9] = {1, 18,
  2, 19,
  3, 20,
  22, 42, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_23 [3] = {23, 44, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_24 [3] = {24, 46, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_32 [3] = {29, 55, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_34 [3] = {35, 57, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_41 [7] = {19, 71,
  20, 72,
  54, 73, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_43 [3] = {23, 74, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_45 [3] = {24, 75, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_48 [3] = {31, 79, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_49 [7] = {19, 71,
  20, 80,
  54, 73, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_53 [7] = {19, 71,
  20, 84,
  54, 73, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_54 [3] = {29, 85, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_56 [3] = {35, 87, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_61 [3] = {57, 100, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_64 [29] = {5, 113,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_65 [5] = {19, 71,
  54, 127, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_66 [29] = {5, 128,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_67 [29] = {5, 129,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_68 [31] = {5, 130,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126,
  21, 131, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_69 [29] = {5, 132,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_70 [7] = {19, 71,
  20, 133,
  54, 73, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_71 [5] = {19, 71,
  54, 134, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_78 [3] = {31, 138, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_79 [3] = {32, 140, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_81 [7] = {19, 71,
  20, 142,
  54, 73, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_91 [29] = {5, 147,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_92 [3] = {59, 151, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_100 [29] = {5, 152,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_101 [3] = {55, 154, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_102 [3] = {56, 156, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_104 [3] = {52, 160, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_106 [29] = {5, 161,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_107 [3] = {18, 162, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_108 [3] = {18, 163, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_109 [3] = {18, 164, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_110 [3] = {18, 165, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_115 [3] = {40, 167, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_116 [3] = {41, 169, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_117 [3] = {42, 171, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_118 [3] = {43, 173, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_119 [3] = {44, 175, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_120 [3] = {45, 177, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_121 [3] = {46, 180, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_122 [3] = {47, 185, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_123 [3] = {48, 188, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_124 [3] = {49, 193, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_125 [3] = {50, 200, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_126 [3] = {51, 203, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_137 [29] = {5, 209,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_139 [3] = {32, 210, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_140 [3] = {4, 212, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_143 [29] = {5, 214,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_145 [3] = {30, 216, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_146 [3] = {34, 218, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_149 [29] = {5, 220,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_157 [3] = {53, 228, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_166 [25] = {7, 232,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_168 [23] = {8, 233,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_170 [21] = {9, 234,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_172 [19] = {10, 235,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_174 [17] = {11, 236,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_176 [15] = {12, 237,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_178 [13] = {13, 238,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_179 [13] = {13, 239,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_181 [11] = {14, 240,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_182 [11] = {14, 241,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_183 [11] = {14, 242,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_184 [11] = {14, 243,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_186 [9] = {15, 244,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_187 [9] = {15, 245,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_189 [7] = {16, 246,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_190 [7] = {16, 247,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_191 [7] = {16, 248,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_192 [7] = {16, 249,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_194 [5] = {17, 250,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_195 [5] = {17, 251,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_196 [5] = {17, 252,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_197 [5] = {17, 253,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_198 [5] = {17, 254,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_199 [5] = {17, 255,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_204 [7] = {19, 71,
  20, 258,
  54, 73, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_206 [7] = {19, 71,
  20, 259,
  54, 73, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_208 [3] = {25, 261, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_211 [3] = {33, 266, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_217 [3] = {35, 269, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_219 [3] = {59, 271, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_220 [3] = {59, 272, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_221 [3] = {59, 273, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_224 [29] = {5, 274,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_226 [29] = {5, 275,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_227 [29] = {5, 276,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_229 [3] = {52, 278, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_232 [3] = {40, 280, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_233 [3] = {41, 281, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_234 [3] = {42, 282, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_235 [3] = {43, 283, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_236 [3] = {44, 284, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_237 [3] = {45, 285, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_244 [3] = {48, 286, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_245 [3] = {48, 287, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_246 [3] = {49, 288, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_247 [3] = {49, 289, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_248 [3] = {49, 290, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_249 [3] = {49, 291, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_250 [3] = {50, 292, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_251 [3] = {50, 293, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_252 [3] = {50, 294, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_253 [3] = {50, 295, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_254 [3] = {50, 296, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_255 [3] = {50, 297, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_258 [3] = {58, 300, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_262 [3] = {27, 305, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_276 [3] = {53, 314, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_279 [29] = {5, 315,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_298 [7] = {19, 71,
  20, 316,
  54, 73, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_299 [31] = {5, 130,
  6, 114,
  7, 115,
  8, 116,
  9, 117,
  10, 118,
  11, 119,
  12, 120,
  13, 121,
  14, 122,
  15, 123,
  16, 124,
  17, 125,
  18, 126,
  21, 317, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_302 [3] = {25, 318, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_305 [3] = {28, 322, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_313 [3] = {36, 330, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_322 [5] = {26, 335,
  27, 336, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_326 [3] = {30, 340, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_328 [3] = {34, 342, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_329 [3] = {38, 345, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_332 [3] = {4, 346, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_336 [3] = {28, 349, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_337 [3] = {33, 350, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_338 [3] = {33, 351, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_339 [3] = {33, 352, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_343 [3] = {39, 355, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_345 [3] = {37, 357, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_349 [5] = {26, 358,
  27, 336, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_356 [3] = {38, 361, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_359 [7] = {19, 71,
  20, 363,
  54, 73, -1} ;

static const int16_t gSuccessorTable_plm_target_grammar_361 [3] = {37, 365, -1} ;

static const int16_t * gSuccessorTable_plm_target_grammar [367] = {
gSuccessorTable_plm_target_grammar_0, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plm_target_grammar_11, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plm_target_grammar_18, gSuccessorTable_plm_target_grammar_19, 
  NULL, NULL, gSuccessorTable_plm_target_grammar_22, gSuccessorTable_plm_target_grammar_23, 
  gSuccessorTable_plm_target_grammar_24, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_target_grammar_32, NULL, gSuccessorTable_plm_target_grammar_34, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_target_grammar_41, NULL, gSuccessorTable_plm_target_grammar_43, 
  NULL, gSuccessorTable_plm_target_grammar_45, NULL, NULL, 
  gSuccessorTable_plm_target_grammar_48, gSuccessorTable_plm_target_grammar_49, NULL, NULL, 
  NULL, gSuccessorTable_plm_target_grammar_53, gSuccessorTable_plm_target_grammar_54, NULL, 
  gSuccessorTable_plm_target_grammar_56, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_target_grammar_61, NULL, NULL, 
  gSuccessorTable_plm_target_grammar_64, gSuccessorTable_plm_target_grammar_65, gSuccessorTable_plm_target_grammar_66, gSuccessorTable_plm_target_grammar_67, 
  gSuccessorTable_plm_target_grammar_68, gSuccessorTable_plm_target_grammar_69, gSuccessorTable_plm_target_grammar_70, gSuccessorTable_plm_target_grammar_71, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plm_target_grammar_78, gSuccessorTable_plm_target_grammar_79, 
  NULL, gSuccessorTable_plm_target_grammar_81, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plm_target_grammar_91, 
  gSuccessorTable_plm_target_grammar_92, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_target_grammar_100, gSuccessorTable_plm_target_grammar_101, gSuccessorTable_plm_target_grammar_102, NULL, 
  gSuccessorTable_plm_target_grammar_104, NULL, gSuccessorTable_plm_target_grammar_106, gSuccessorTable_plm_target_grammar_107, 
  gSuccessorTable_plm_target_grammar_108, gSuccessorTable_plm_target_grammar_109, gSuccessorTable_plm_target_grammar_110, NULL, 
  NULL, NULL, NULL, gSuccessorTable_plm_target_grammar_115, 
  gSuccessorTable_plm_target_grammar_116, gSuccessorTable_plm_target_grammar_117, gSuccessorTable_plm_target_grammar_118, gSuccessorTable_plm_target_grammar_119, 
  gSuccessorTable_plm_target_grammar_120, gSuccessorTable_plm_target_grammar_121, gSuccessorTable_plm_target_grammar_122, gSuccessorTable_plm_target_grammar_123, 
  gSuccessorTable_plm_target_grammar_124, gSuccessorTable_plm_target_grammar_125, gSuccessorTable_plm_target_grammar_126, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_target_grammar_137, NULL, gSuccessorTable_plm_target_grammar_139, 
  gSuccessorTable_plm_target_grammar_140, NULL, NULL, gSuccessorTable_plm_target_grammar_143, 
  NULL, gSuccessorTable_plm_target_grammar_145, gSuccessorTable_plm_target_grammar_146, NULL, 
  NULL, gSuccessorTable_plm_target_grammar_149, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_target_grammar_157, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plm_target_grammar_166, NULL, 
  gSuccessorTable_plm_target_grammar_168, NULL, gSuccessorTable_plm_target_grammar_170, NULL, 
  gSuccessorTable_plm_target_grammar_172, NULL, gSuccessorTable_plm_target_grammar_174, NULL, 
  gSuccessorTable_plm_target_grammar_176, NULL, gSuccessorTable_plm_target_grammar_178, gSuccessorTable_plm_target_grammar_179, 
  NULL, gSuccessorTable_plm_target_grammar_181, gSuccessorTable_plm_target_grammar_182, gSuccessorTable_plm_target_grammar_183, 
  gSuccessorTable_plm_target_grammar_184, NULL, gSuccessorTable_plm_target_grammar_186, gSuccessorTable_plm_target_grammar_187, 
  NULL, gSuccessorTable_plm_target_grammar_189, gSuccessorTable_plm_target_grammar_190, gSuccessorTable_plm_target_grammar_191, 
  gSuccessorTable_plm_target_grammar_192, NULL, gSuccessorTable_plm_target_grammar_194, gSuccessorTable_plm_target_grammar_195, 
  gSuccessorTable_plm_target_grammar_196, gSuccessorTable_plm_target_grammar_197, gSuccessorTable_plm_target_grammar_198, gSuccessorTable_plm_target_grammar_199, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_target_grammar_204, NULL, gSuccessorTable_plm_target_grammar_206, NULL, 
  gSuccessorTable_plm_target_grammar_208, NULL, NULL, gSuccessorTable_plm_target_grammar_211, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_target_grammar_217, NULL, gSuccessorTable_plm_target_grammar_219, 
  gSuccessorTable_plm_target_grammar_220, gSuccessorTable_plm_target_grammar_221, NULL, NULL, 
  gSuccessorTable_plm_target_grammar_224, NULL, gSuccessorTable_plm_target_grammar_226, gSuccessorTable_plm_target_grammar_227, 
  NULL, gSuccessorTable_plm_target_grammar_229, NULL, NULL, 
  gSuccessorTable_plm_target_grammar_232, gSuccessorTable_plm_target_grammar_233, gSuccessorTable_plm_target_grammar_234, gSuccessorTable_plm_target_grammar_235, 
  gSuccessorTable_plm_target_grammar_236, gSuccessorTable_plm_target_grammar_237, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_target_grammar_244, gSuccessorTable_plm_target_grammar_245, gSuccessorTable_plm_target_grammar_246, gSuccessorTable_plm_target_grammar_247, 
  gSuccessorTable_plm_target_grammar_248, gSuccessorTable_plm_target_grammar_249, gSuccessorTable_plm_target_grammar_250, gSuccessorTable_plm_target_grammar_251, 
  gSuccessorTable_plm_target_grammar_252, gSuccessorTable_plm_target_grammar_253, gSuccessorTable_plm_target_grammar_254, gSuccessorTable_plm_target_grammar_255, 
  NULL, NULL, gSuccessorTable_plm_target_grammar_258, NULL, 
  NULL, NULL, gSuccessorTable_plm_target_grammar_262, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_target_grammar_276, NULL, NULL, gSuccessorTable_plm_target_grammar_279, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plm_target_grammar_298, gSuccessorTable_plm_target_grammar_299, 
  NULL, NULL, gSuccessorTable_plm_target_grammar_302, NULL, 
  NULL, gSuccessorTable_plm_target_grammar_305, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_plm_target_grammar_313, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_plm_target_grammar_322, NULL, 
  NULL, NULL, gSuccessorTable_plm_target_grammar_326, NULL, 
  gSuccessorTable_plm_target_grammar_328, gSuccessorTable_plm_target_grammar_329, NULL, NULL, 
  gSuccessorTable_plm_target_grammar_332, NULL, NULL, NULL, 
  gSuccessorTable_plm_target_grammar_336, gSuccessorTable_plm_target_grammar_337, gSuccessorTable_plm_target_grammar_338, gSuccessorTable_plm_target_grammar_339, 
  NULL, NULL, NULL, gSuccessorTable_plm_target_grammar_343, 
  NULL, gSuccessorTable_plm_target_grammar_345, NULL, NULL, 
  NULL, gSuccessorTable_plm_target_grammar_349, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_plm_target_grammar_356, NULL, NULL, gSuccessorTable_plm_target_grammar_359, 
  NULL, gSuccessorTable_plm_target_grammar_361, NULL, NULL, 
  NULL, NULL, NULL} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Production rules infos (left non terminal, size of right string)                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gProductionsTable_plm_target_grammar [164 * 2] = {
  0, 1,
  1, 3,
  1, 8,
  1, 11,
  1, 6,
  1, 5,
  1, 5,
  1, 6,
  1, 4,
  1, 14,
  2, 4,
  3, 6,
  4, 3,
  1, 2,
  1, 9,
  5, 1,
  6, 2,
  7, 2,
  8, 2,
  9, 2,
  10, 2,
  11, 2,
  12, 2,
  13, 2,
  14, 2,
  15, 2,
  16, 2,
  17, 2,
  18, 2,
  18, 2,
  18, 2,
  18, 2,
  18, 3,
  18, 1,
  18, 1,
  18, 1,
  18, 1,
  18, 2,
  18, 4,
  18, 3,
  18, 6,
  19, 2,
  20, 1,
  19, 2,
  19, 2,
  19, 2,
  19, 2,
  19, 5,
  19, 4,
  19, 5,
  19, 3,
  19, 2,
  19, 2,
  19, 3,
  19, 3,
  21, 4,
  19, 4,
  19, 5,
  19, 3,
  1, 4,
  1, 4,
  1, 2,
  1, 3,
  22, 0,
  22, 2,
  22, 2,
  22, 3,
  23, 0,
  23, 2,
  24, 0,
  24, 2,
  25, 0,
  25, 3,
  26, 0,
  26, 3,
  27, 0,
  27, 1,
  28, 3,
  28, 2,
  28, 3,
  29, 0,
  29, 2,
  30, 0,
  30, 5,
  31, 0,
  31, 2,
  32, 0,
  32, 2,
  33, 0,
  33, 5,
  33, 5,
  33, 5,
  34, 0,
  34, 5,
  35, 0,
  35, 2,
  36, 0,
  36, 4,
  37, 0,
  37, 3,
  38, 1,
  38, 2,
  39, 0,
  39, 3,
  40, 0,
  40, 3,
  41, 0,
  41, 3,
  42, 0,
  42, 3,
  43, 0,
  43, 3,
  44, 0,
  44, 3,
  45, 0,
  45, 3,
  46, 0,
  46, 2,
  46, 2,
  47, 0,
  47, 2,
  47, 2,
  47, 2,
  47, 2,
  48, 0,
  48, 3,
  48, 3,
  49, 0,
  49, 3,
  49, 3,
  49, 3,
  49, 3,
  50, 0,
  50, 3,
  50, 3,
  50, 3,
  50, 3,
  50, 3,
  50, 3,
  51, 0,
  51, 2,
  51, 2,
  52, 0,
  52, 3,
  53, 0,
  53, 3,
  54, 0,
  54, 2,
  54, 2,
  55, 0,
  55, 2,
  56, 0,
  56, 2,
  57, 1,
  57, 1,
  57, 1,
  58, 0,
  58, 2,
  58, 2,
  59, 0,
  59, 3,
  59, 3,
  59, 3,
  60, 1
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'start_symbol' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_start_5F_symbol_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_common_5F_syntax_start_5F_symbol_i0_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_start_5F_symbol_ (GALGAS_ast &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_location &  parameter_3,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_common_5F_syntax_start_5F_symbol_i0_(parameter_1, parameter_2, parameter_3, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::performIndexing (C_Compiler * /* inCompiler */,
             const C_String & /* inSourceFilePath */) {
}

void cGrammar_plm_5F_target_5F_grammar::performOnlyLexicalAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_plm_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performLexicalAnalysis () ;
  }
  macroDetachSharedObject (scanner) ;
}

void cGrammar_plm_5F_target_5F_grammar::performOnlySyntaxAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_plm_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performBottomUpParsing (gActionTable_plm_target_grammar, gNonTerminalNames_plm_target_grammar,
                                     gActionTableIndex_plm_target_grammar, gSuccessorTable_plm_target_grammar,
                                     gProductionsTable_plm_target_grammar) ;
  }
  macroDetachSharedObject (scanner) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Grammar start symbol implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::_performSourceFileParsing_ (C_Compiler * inCompiler,
                                GALGAS_lstring inFilePath,
                                GALGAS_ast &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_location &  parameter_3
                                COMMA_LOCATION_ARGS) {
  if (inFilePath.isValid ()) {
    const GALGAS_string filePathAsString = inFilePath.reader_string (HERE) ;
    C_String filePath = filePathAsString.stringValue () ;
    if (! C_FileManager::isAbsolutePath (filePath)) {
      filePath = inCompiler->sourceFilePath ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (filePath) ;
    }
    if (C_FileManager::fileExistsAtPath (filePath)) {
      C_Lexique_plm_5F_lexique * scanner = NULL ;
      macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, "", "", filePath COMMA_HERE)) ;
      if (scanner->sourceText () != NULL) {
        const bool ok = scanner->performBottomUpParsing (gActionTable_plm_target_grammar, gNonTerminalNames_plm_target_grammar,
                                                         gActionTableIndex_plm_target_grammar, gSuccessorTable_plm_target_grammar,
                                                         gProductionsTable_plm_target_grammar) ;
        if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
          cGrammar_plm_5F_target_5F_grammar grammar ;
          grammar.nt_start_5F_symbol_ (parameter_1, parameter_2, parameter_3, scanner) ;
        }
      }else{
        C_String message ;
        message << "the '" << filePath << "' file exists, but cannot be read" ;
        const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
        inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
      }
      macroDetachSharedObject (scanner) ;
    }else{
      C_String message ;
      message << "the '" << filePath << "' file does not exist" ;
      const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
      inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::_performSourceStringParsing_ (C_Compiler * inCompiler,
                                GALGAS_string inSourceString,
                                GALGAS_ast &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_location &  parameter_3
                                COMMA_UNUSED_LOCATION_ARGS) {
  C_Lexique_plm_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_plm_5F_lexique (inCompiler, inSourceString.stringValue (), "" COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    const bool ok = scanner->performBottomUpParsing (gActionTable_plm_target_grammar, gNonTerminalNames_plm_target_grammar,
                                                     gActionTableIndex_plm_target_grammar, gSuccessorTable_plm_target_grammar,
                                                     gProductionsTable_plm_target_grammar) ;
    if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
      cGrammar_plm_5F_target_5F_grammar grammar ;
      grammar.nt_start_5F_symbol_ (parameter_1, parameter_2, parameter_3, scanner) ;
      }
  }
  macroDetachSharedObject (scanner) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'declaration' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_declaration_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
      rule_common_5F_syntax_declaration_i1_parse(inLexique) ;
    break ;
  case 2 :
      rule_common_5F_syntax_declaration_i2_parse(inLexique) ;
    break ;
  case 3 :
      rule_common_5F_syntax_declaration_i3_parse(inLexique) ;
    break ;
  case 4 :
      rule_common_5F_syntax_declaration_i4_parse(inLexique) ;
    break ;
  case 5 :
      rule_common_5F_syntax_declaration_i5_parse(inLexique) ;
    break ;
  case 6 :
      rule_common_5F_syntax_declaration_i6_parse(inLexique) ;
    break ;
  case 7 :
      rule_common_5F_syntax_declaration_i7_parse(inLexique) ;
    break ;
  case 8 :
      rule_common_5F_syntax_declaration_i8_parse(inLexique) ;
    break ;
  case 9 :
      rule_common_5F_syntax_declaration_i9_parse(inLexique) ;
    break ;
  case 13 :
      rule_common_5F_syntax_declaration_i13_parse(inLexique) ;
    break ;
  case 14 :
      rule_common_5F_syntax_declaration_i14_parse(inLexique) ;
    break ;
  case 59 :
      rule_plm_5F_target_5F_specific_5F_syntax_declaration_i0_parse(inLexique) ;
    break ;
  case 60 :
      rule_plm_5F_target_5F_specific_5F_syntax_declaration_i1_parse(inLexique) ;
    break ;
  case 61 :
      rule_plm_5F_target_5F_specific_5F_syntax_declaration_i2_parse(inLexique) ;
    break ;
  case 62 :
      rule_plm_5F_target_5F_specific_5F_syntax_declaration_i3_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_declaration_ (GALGAS_ast &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
      rule_common_5F_syntax_declaration_i1_(parameter_1, inLexique) ;
    break ;
  case 2 :
      rule_common_5F_syntax_declaration_i2_(parameter_1, inLexique) ;
    break ;
  case 3 :
      rule_common_5F_syntax_declaration_i3_(parameter_1, inLexique) ;
    break ;
  case 4 :
      rule_common_5F_syntax_declaration_i4_(parameter_1, inLexique) ;
    break ;
  case 5 :
      rule_common_5F_syntax_declaration_i5_(parameter_1, inLexique) ;
    break ;
  case 6 :
      rule_common_5F_syntax_declaration_i6_(parameter_1, inLexique) ;
    break ;
  case 7 :
      rule_common_5F_syntax_declaration_i7_(parameter_1, inLexique) ;
    break ;
  case 8 :
      rule_common_5F_syntax_declaration_i8_(parameter_1, inLexique) ;
    break ;
  case 9 :
      rule_common_5F_syntax_declaration_i9_(parameter_1, inLexique) ;
    break ;
  case 13 :
      rule_common_5F_syntax_declaration_i13_(parameter_1, inLexique) ;
    break ;
  case 14 :
      rule_common_5F_syntax_declaration_i14_(parameter_1, inLexique) ;
    break ;
  case 59 :
      rule_plm_5F_target_5F_specific_5F_syntax_declaration_i0_(parameter_1, inLexique) ;
    break ;
  case 60 :
      rule_plm_5F_target_5F_specific_5F_syntax_declaration_i1_(parameter_1, inLexique) ;
    break ;
  case 61 :
      rule_plm_5F_target_5F_specific_5F_syntax_declaration_i2_(parameter_1, inLexique) ;
    break ;
  case 62 :
      rule_plm_5F_target_5F_specific_5F_syntax_declaration_i3_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'procedure' non terminal implementation                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_procedure_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 10 :
      rule_common_5F_syntax_procedure_i10_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_procedure_ (const GALGAS_procedureKindAST  parameter_1,
                                GALGAS_procedureDeclarationListAST &  parameter_2,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 10 :
      rule_common_5F_syntax_procedure_i10_(parameter_1, parameter_2, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'procedure_header' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_procedure_5F_header_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 11 :
      rule_common_5F_syntax_procedure_5F_header_i11_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_procedure_5F_header_ (GALGAS_lstringlist &  parameter_1,
                                GALGAS_lstring &  parameter_2,
                                GALGAS_lstringlist &  parameter_3,
                                GALGAS_procFormalArgumentList &  parameter_4,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 11 :
      rule_common_5F_syntax_procedure_5F_header_i11_(parameter_1, parameter_2, parameter_3, parameter_4, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'procedure_formal_arguments' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_procedure_5F_formal_5F_arguments_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 12 :
      rule_common_5F_syntax_procedure_5F_formal_5F_arguments_i12_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_procedure_5F_formal_5F_arguments_ (GALGAS_procFormalArgumentList &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 12 :
      rule_common_5F_syntax_procedure_5F_formal_5F_arguments_i12_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'expression' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_expression_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 15 :
      rule_common_5F_syntax_expression_i15_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_expression_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 15 :
      rule_common_5F_syntax_expression_i15_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'expression_12' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__31__32__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 16 :
      rule_common_5F_syntax_expression_5F__31__32__i16_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__31__32__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 16 :
      rule_common_5F_syntax_expression_5F__31__32__i16_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'expression_11' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__31__31__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 17 :
      rule_common_5F_syntax_expression_5F__31__31__i17_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__31__31__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 17 :
      rule_common_5F_syntax_expression_5F__31__31__i17_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'expression_10' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__31__30__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 18 :
      rule_common_5F_syntax_expression_5F__31__30__i18_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__31__30__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 18 :
      rule_common_5F_syntax_expression_5F__31__30__i18_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_9' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__39__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 19 :
      rule_common_5F_syntax_expression_5F__39__i19_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__39__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 19 :
      rule_common_5F_syntax_expression_5F__39__i19_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_8' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__38__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 20 :
      rule_common_5F_syntax_expression_5F__38__i20_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__38__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 20 :
      rule_common_5F_syntax_expression_5F__38__i20_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_7' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__37__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 21 :
      rule_common_5F_syntax_expression_5F__37__i21_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__37__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 21 :
      rule_common_5F_syntax_expression_5F__37__i21_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_6' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__36__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 22 :
      rule_common_5F_syntax_expression_5F__36__i22_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__36__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 22 :
      rule_common_5F_syntax_expression_5F__36__i22_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_5' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__35__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 23 :
      rule_common_5F_syntax_expression_5F__35__i23_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__35__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 23 :
      rule_common_5F_syntax_expression_5F__35__i23_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_4' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__34__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 24 :
      rule_common_5F_syntax_expression_5F__34__i24_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__34__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 24 :
      rule_common_5F_syntax_expression_5F__34__i24_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_3' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__33__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 25 :
      rule_common_5F_syntax_expression_5F__33__i25_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__33__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 25 :
      rule_common_5F_syntax_expression_5F__33__i25_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_2' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__32__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 26 :
      rule_common_5F_syntax_expression_5F__32__i26_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__32__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 26 :
      rule_common_5F_syntax_expression_5F__32__i26_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'expression_1' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__31__parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 27 :
      rule_common_5F_syntax_expression_5F__31__i27_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_expression_5F__31__ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 27 :
      rule_common_5F_syntax_expression_5F__31__i27_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       'primary' non terminal implementation                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_primary_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 28 :
      rule_common_5F_syntax_primary_i28_parse(inLexique) ;
    break ;
  case 29 :
      rule_common_5F_syntax_primary_i29_parse(inLexique) ;
    break ;
  case 30 :
      rule_common_5F_syntax_primary_i30_parse(inLexique) ;
    break ;
  case 31 :
      rule_common_5F_syntax_primary_i31_parse(inLexique) ;
    break ;
  case 32 :
      rule_common_5F_syntax_primary_i32_parse(inLexique) ;
    break ;
  case 33 :
      rule_common_5F_syntax_primary_i33_parse(inLexique) ;
    break ;
  case 34 :
      rule_common_5F_syntax_primary_i34_parse(inLexique) ;
    break ;
  case 35 :
      rule_common_5F_syntax_primary_i35_parse(inLexique) ;
    break ;
  case 36 :
      rule_common_5F_syntax_primary_i36_parse(inLexique) ;
    break ;
  case 37 :
      rule_common_5F_syntax_primary_i37_parse(inLexique) ;
    break ;
  case 38 :
      rule_common_5F_syntax_primary_i38_parse(inLexique) ;
    break ;
  case 39 :
      rule_common_5F_syntax_primary_i39_parse(inLexique) ;
    break ;
  case 40 :
      rule_common_5F_syntax_primary_i40_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_primary_ (GALGAS_expressionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 28 :
      rule_common_5F_syntax_primary_i28_(parameter_1, inLexique) ;
    break ;
  case 29 :
      rule_common_5F_syntax_primary_i29_(parameter_1, inLexique) ;
    break ;
  case 30 :
      rule_common_5F_syntax_primary_i30_(parameter_1, inLexique) ;
    break ;
  case 31 :
      rule_common_5F_syntax_primary_i31_(parameter_1, inLexique) ;
    break ;
  case 32 :
      rule_common_5F_syntax_primary_i32_(parameter_1, inLexique) ;
    break ;
  case 33 :
      rule_common_5F_syntax_primary_i33_(parameter_1, inLexique) ;
    break ;
  case 34 :
      rule_common_5F_syntax_primary_i34_(parameter_1, inLexique) ;
    break ;
  case 35 :
      rule_common_5F_syntax_primary_i35_(parameter_1, inLexique) ;
    break ;
  case 36 :
      rule_common_5F_syntax_primary_i36_(parameter_1, inLexique) ;
    break ;
  case 37 :
      rule_common_5F_syntax_primary_i37_(parameter_1, inLexique) ;
    break ;
  case 38 :
      rule_common_5F_syntax_primary_i38_(parameter_1, inLexique) ;
    break ;
  case 39 :
      rule_common_5F_syntax_primary_i39_(parameter_1, inLexique) ;
    break ;
  case 40 :
      rule_common_5F_syntax_primary_i40_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'instruction' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_instruction_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 41 :
      rule_common_5F_syntax_instruction_i41_parse(inLexique) ;
    break ;
  case 43 :
      rule_common_5F_syntax_instruction_i43_parse(inLexique) ;
    break ;
  case 44 :
      rule_common_5F_syntax_instruction_i44_parse(inLexique) ;
    break ;
  case 45 :
      rule_common_5F_syntax_instruction_i45_parse(inLexique) ;
    break ;
  case 46 :
      rule_common_5F_syntax_instruction_i46_parse(inLexique) ;
    break ;
  case 47 :
      rule_common_5F_syntax_instruction_i47_parse(inLexique) ;
    break ;
  case 48 :
      rule_common_5F_syntax_instruction_i48_parse(inLexique) ;
    break ;
  case 49 :
      rule_common_5F_syntax_instruction_i49_parse(inLexique) ;
    break ;
  case 50 :
      rule_common_5F_syntax_instruction_i50_parse(inLexique) ;
    break ;
  case 51 :
      rule_common_5F_syntax_instruction_i51_parse(inLexique) ;
    break ;
  case 52 :
      rule_common_5F_syntax_instruction_i52_parse(inLexique) ;
    break ;
  case 53 :
      rule_common_5F_syntax_instruction_i53_parse(inLexique) ;
    break ;
  case 54 :
      rule_common_5F_syntax_instruction_i54_parse(inLexique) ;
    break ;
  case 56 :
      rule_common_5F_syntax_instruction_i56_parse(inLexique) ;
    break ;
  case 57 :
      rule_common_5F_syntax_instruction_i57_parse(inLexique) ;
    break ;
  case 58 :
      rule_common_5F_syntax_instruction_i58_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_instruction_ (GALGAS_instructionListAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 41 :
      rule_common_5F_syntax_instruction_i41_(parameter_1, inLexique) ;
    break ;
  case 43 :
      rule_common_5F_syntax_instruction_i43_(parameter_1, inLexique) ;
    break ;
  case 44 :
      rule_common_5F_syntax_instruction_i44_(parameter_1, inLexique) ;
    break ;
  case 45 :
      rule_common_5F_syntax_instruction_i45_(parameter_1, inLexique) ;
    break ;
  case 46 :
      rule_common_5F_syntax_instruction_i46_(parameter_1, inLexique) ;
    break ;
  case 47 :
      rule_common_5F_syntax_instruction_i47_(parameter_1, inLexique) ;
    break ;
  case 48 :
      rule_common_5F_syntax_instruction_i48_(parameter_1, inLexique) ;
    break ;
  case 49 :
      rule_common_5F_syntax_instruction_i49_(parameter_1, inLexique) ;
    break ;
  case 50 :
      rule_common_5F_syntax_instruction_i50_(parameter_1, inLexique) ;
    break ;
  case 51 :
      rule_common_5F_syntax_instruction_i51_(parameter_1, inLexique) ;
    break ;
  case 52 :
      rule_common_5F_syntax_instruction_i52_(parameter_1, inLexique) ;
    break ;
  case 53 :
      rule_common_5F_syntax_instruction_i53_(parameter_1, inLexique) ;
    break ;
  case 54 :
      rule_common_5F_syntax_instruction_i54_(parameter_1, inLexique) ;
    break ;
  case 56 :
      rule_common_5F_syntax_instruction_i56_(parameter_1, inLexique) ;
    break ;
  case 57 :
      rule_common_5F_syntax_instruction_i57_(parameter_1, inLexique) ;
    break ;
  case 58 :
      rule_common_5F_syntax_instruction_i58_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'instructionList' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_instructionList_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 42 :
      rule_common_5F_syntax_instructionList_i42_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_instructionList_ (GALGAS_instructionListAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 42 :
      rule_common_5F_syntax_instructionList_i42_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'if_instruction' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_plm_5F_target_5F_grammar::nt_if_5F_instruction_parse (C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 55 :
      rule_common_5F_syntax_if_5F_instruction_i55_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_plm_5F_target_5F_grammar::nt_if_5F_instruction_ (GALGAS_ifInstructionAST &  parameter_1,
                                C_Lexique_plm_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 55 :
      rule_common_5F_syntax_if_5F_instruction_i55_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_0' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_0 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 63 64 65 66
  return inLexique->nextProductionIndex () - 62 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_1' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_1 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 67 68
  return inLexique->nextProductionIndex () - 66 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_2' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_2 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 69 70
  return inLexique->nextProductionIndex () - 68 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_3' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_3 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 71 72
  return inLexique->nextProductionIndex () - 70 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_4' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_4 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 73 74
  return inLexique->nextProductionIndex () - 72 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_5' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_5 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 75 76
  return inLexique->nextProductionIndex () - 74 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_6' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_6 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 77 78 79
  return inLexique->nextProductionIndex () - 76 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_7' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_7 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 80 81
  return inLexique->nextProductionIndex () - 79 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_8' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_8 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 82 83
  return inLexique->nextProductionIndex () - 81 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_9' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_9 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 84 85
  return inLexique->nextProductionIndex () - 83 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_10' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_10 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 86 87
  return inLexique->nextProductionIndex () - 85 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_11' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_11 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 88 89 90 91
  return inLexique->nextProductionIndex () - 87 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_12' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_12 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 92 93
  return inLexique->nextProductionIndex () - 91 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_13' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_13 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 94 95
  return inLexique->nextProductionIndex () - 93 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_14' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_14 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 96 97
  return inLexique->nextProductionIndex () - 95 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_15' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_15 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 98 99
  return inLexique->nextProductionIndex () - 97 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_16' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_16 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 100 101
  return inLexique->nextProductionIndex () - 99 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_17' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_17 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 102 103
  return inLexique->nextProductionIndex () - 101 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_18' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_18 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 104 105
  return inLexique->nextProductionIndex () - 103 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_19' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_19 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 106 107
  return inLexique->nextProductionIndex () - 105 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_20' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_20 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 108 109
  return inLexique->nextProductionIndex () - 107 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_21' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_21 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 110 111
  return inLexique->nextProductionIndex () - 109 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_22' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_22 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 112 113
  return inLexique->nextProductionIndex () - 111 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_23' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_23 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 114 115
  return inLexique->nextProductionIndex () - 113 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_24' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_24 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 116 117 118
  return inLexique->nextProductionIndex () - 115 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_25' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_25 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 119 120 121 122 123
  return inLexique->nextProductionIndex () - 118 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_26' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_26 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 124 125 126
  return inLexique->nextProductionIndex () - 123 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_27' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_27 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 127 128 129 130 131
  return inLexique->nextProductionIndex () - 126 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_28' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_28 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 132 133 134 135 136 137 138
  return inLexique->nextProductionIndex () - 131 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_29' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_29 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 139 140 141
  return inLexique->nextProductionIndex () - 138 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_30' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_30 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 142 143
  return inLexique->nextProductionIndex () - 141 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_31' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_31 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 144 145
  return inLexique->nextProductionIndex () - 143 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_32' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_32 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 146 147 148
  return inLexique->nextProductionIndex () - 145 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_33' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_33 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 149 150
  return inLexique->nextProductionIndex () - 148 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_34' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_34 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 151 152
  return inLexique->nextProductionIndex () - 150 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_35' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_35 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 153 154 155
  return inLexique->nextProductionIndex () - 152 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_36' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_36 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 156 157 158
  return inLexique->nextProductionIndex () - 155 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'select_common_5F_syntax_37' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_plm_5F_target_5F_grammar::select_common_5F_syntax_37 (C_Lexique_plm_5F_lexique * inLexique) {
// Productions numbers : 159 160 161 162
  return inLexique->nextProductionIndex () - 158 ;
}

//---------------------------------------------------------------------------------------------------------------------*

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy::GALGAS_unifiedTypeMap_2D_proxy (void) :
AC_GALGAS_uniqueMapProxy () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_unifiedTypeMap_2D_proxy::constructor_null (LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy result ;
  result.makeNullProxy (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (GALGAS_unifiedTypeMap & ioMap,
                                                             GALGAS_lstring inKey,
                                                             GALGAS_unifiedTypeMap_2D_proxy & outProxy
                                                             COMMA_LOCATION_ARGS) {
  outProxy.internalMakeProxy (ioMap, inKey COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxyFromString (GALGAS_unifiedTypeMap & ioMap,
                                                                       GALGAS_string inKey,
                                                                       GALGAS_unifiedTypeMap_2D_proxy & outProxy
                                                                       COMMA_LOCATION_ARGS) {
  outProxy.internalMakeProxyFromString (ioMap, inKey COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_unifiedTypeMap_2D_proxy::reader_kind (C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  GALGAS_typeKind result ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) getAttributeListPointer (inCompiler, "kind" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_kind;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_constructorMap GALGAS_unifiedTypeMap_2D_proxy::reader_constructorMap (C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  GALGAS_constructorMap result ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) getAttributeListPointer (inCompiler, "constructorMap" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_constructorMap;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureMap GALGAS_unifiedTypeMap_2D_proxy::reader_procedureMap (C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_procedureMap result ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) getAttributeListPointer (inCompiler, "procedureMap" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_procedureMap;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_unifiedTypeMap_2D_proxy::reader_copiable (C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  GALGAS_bool result ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) getAttributeListPointer (inCompiler, "copiable" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_copiable;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_unifiedTypeMap_2D_proxy::reader_equatable (C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_bool result ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) getAttributeListPointer (inCompiler, "equatable" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_equatable;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_unifiedTypeMap_2D_proxy::reader_comparable (C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) const {
  GALGAS_bool result ;
  const cMapElement_unifiedTypeMap * p = (const cMapElement_unifiedTypeMap *) getAttributeListPointer (inCompiler, "comparable" COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_unifiedTypeMap) ;
    result = p->mAttribute_comparable;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_unifiedTypeMap_2D_proxy::constructor_searchKey (const GALGAS_unifiedTypeMap & inMap,
                                                                                      const GALGAS_lstring & inKey,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy result ;
  result.internalMakeRegularProxyBySearchingKey (inMap, inKey, kSearchErrorMessage_unifiedTypeMap_searchKey, inCompiler COMMA_THERE) ;
  return result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             @unifiedTypeMap-proxy type                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_unifiedTypeMap_2D_proxy ("unifiedTypeMap-proxy",
                                                NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_unifiedTypeMap_2D_proxy::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_unifiedTypeMap_2D_proxy ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_unifiedTypeMap_2D_proxy::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_unifiedTypeMap_2D_proxy (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy GALGAS_unifiedTypeMap_2D_proxy::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy result ;
  const GALGAS_unifiedTypeMap_2D_proxy * p = (const GALGAS_unifiedTypeMap_2D_proxy *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_unifiedTypeMap_2D_proxy *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("unifiedTypeMap-proxy", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_procedureKindAST_structureProc::cEnumAssociatedValues_procedureKindAST_structureProc (const GALGAS_lstring & inAssociatedValue0,
                                                                                                            const GALGAS_bool & inAssociatedValue1
                                                                                                            COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_procedureKindAST_structureProc::description (C_String & ioString,
                                                                        const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_procedureKindAST_structureProc::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_procedureKindAST_structureProc * ptr = dynamic_cast<const cEnumAssociatedValues_procedureKindAST_structureProc *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureKindAST::GALGAS_procedureKindAST (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureKindAST GALGAS_procedureKindAST::constructor_standAloneProc (UNUSED_LOCATION_ARGS) {
  GALGAS_procedureKindAST result ;
  result.mEnum = kEnum_standAloneProc ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureKindAST GALGAS_procedureKindAST::constructor_structureProc (const GALGAS_lstring & inAssociatedValue0,
                                                                            const GALGAS_bool & inAssociatedValue1
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_procedureKindAST result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid ()) {
    result.mEnum = kEnum_structureProc ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_procedureKindAST_structureProc (inAssociatedValue0, inAssociatedValue1 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureKindAST::method_structureProc (GALGAS_lstring & outAssociatedValue0,
                                                    GALGAS_bool & outAssociatedValue1,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_structureProc) {
    outAssociatedValue0.drop () ;
    outAssociatedValue1.drop () ;
    C_String s ;
    s << "method @procedureKindAST structureProc invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_procedureKindAST_structureProc * ptr = (const cEnumAssociatedValues_procedureKindAST_structureProc *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
    outAssociatedValue1 = ptr->mAssociatedValue1 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_procedureKindAST [3] = {
  "(not built)",
  "standAloneProc",
  "structureProc"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procedureKindAST::reader_isStandAloneProc (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_standAloneProc == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procedureKindAST::reader_isStructureProc (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_structureProc == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procedureKindAST::description (C_String & ioString,
                                           const int32_t inIndentation) const {
  ioString << "<enum @procedureKindAST: " << gEnumNameArrayFor_procedureKindAST [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_procedureKindAST::objectCompare (const GALGAS_procedureKindAST & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @procedureKindAST type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_procedureKindAST ("procedureKindAST",
                                         NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_procedureKindAST::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_procedureKindAST ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_procedureKindAST::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_procedureKindAST (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procedureKindAST GALGAS_procedureKindAST::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_procedureKindAST result ;
  const GALGAS_procedureKindAST * p = (const GALGAS_procedureKindAST *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_procedureKindAST *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("procedureKindAST", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_registerBitSlice_unusedBits::cEnumAssociatedValues_registerBitSlice_unusedBits (const GALGAS_luint_36__34_ & inAssociatedValue0
                                                                                                      COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_registerBitSlice_unusedBits::description (C_String & ioString,
                                                                     const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_registerBitSlice_unusedBits::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_registerBitSlice_unusedBits * ptr = dynamic_cast<const cEnumAssociatedValues_registerBitSlice_unusedBits *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_registerBitSlice_namedBit::cEnumAssociatedValues_registerBitSlice_namedBit (const GALGAS_lstring & inAssociatedValue0,
                                                                                                  const GALGAS_luint_36__34_ & inAssociatedValue1
                                                                                                  COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_registerBitSlice_namedBit::description (C_String & ioString,
                                                                   const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_registerBitSlice_namedBit::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_registerBitSlice_namedBit * ptr = dynamic_cast<const cEnumAssociatedValues_registerBitSlice_namedBit *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSlice::GALGAS_registerBitSlice (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSlice GALGAS_registerBitSlice::constructor_unusedBits (const GALGAS_luint_36__34_ & inAssociatedValue0
                                                                         COMMA_LOCATION_ARGS) {
  GALGAS_registerBitSlice result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_unusedBits ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_registerBitSlice_unusedBits (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSlice GALGAS_registerBitSlice::constructor_namedBit (const GALGAS_lstring & inAssociatedValue0,
                                                                       const GALGAS_luint_36__34_ & inAssociatedValue1
                                                                       COMMA_LOCATION_ARGS) {
  GALGAS_registerBitSlice result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid ()) {
    result.mEnum = kEnum_namedBit ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_registerBitSlice_namedBit (inAssociatedValue0, inAssociatedValue1 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSlice::method_unusedBits (GALGAS_luint_36__34_ & outAssociatedValue0,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_unusedBits) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @registerBitSlice unusedBits invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_registerBitSlice_unusedBits * ptr = (const cEnumAssociatedValues_registerBitSlice_unusedBits *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSlice::method_namedBit (GALGAS_lstring & outAssociatedValue0,
                                               GALGAS_luint_36__34_ & outAssociatedValue1,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_namedBit) {
    outAssociatedValue0.drop () ;
    outAssociatedValue1.drop () ;
    C_String s ;
    s << "method @registerBitSlice namedBit invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_registerBitSlice_namedBit * ptr = (const cEnumAssociatedValues_registerBitSlice_namedBit *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
    outAssociatedValue1 = ptr->mAssociatedValue1 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_registerBitSlice [3] = {
  "(not built)",
  "unusedBits",
  "namedBit"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_registerBitSlice::reader_isUnusedBits (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_unusedBits == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_registerBitSlice::reader_isNamedBit (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_namedBit == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerBitSlice::description (C_String & ioString,
                                           const int32_t inIndentation) const {
  ioString << "<enum @registerBitSlice: " << gEnumNameArrayFor_registerBitSlice [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_registerBitSlice::objectCompare (const GALGAS_registerBitSlice & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @registerBitSlice type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerBitSlice ("registerBitSlice",
                                         NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerBitSlice::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerBitSlice ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerBitSlice::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerBitSlice (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerBitSlice GALGAS_registerBitSlice::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_registerBitSlice result ;
  const GALGAS_registerBitSlice * p = (const GALGAS_registerBitSlice *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerBitSlice *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("registerBitSlice", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_variableKindIR_register::cEnumAssociatedValues_variableKindIR_register (const GALGAS_string & inAssociatedValue0
                                                                                              COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_variableKindIR_register::description (C_String & ioString,
                                                                 const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_variableKindIR_register::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_variableKindIR_register * ptr = dynamic_cast<const cEnumAssociatedValues_variableKindIR_register *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_variableKindIR_globalVariable::cEnumAssociatedValues_variableKindIR_globalVariable (const GALGAS_string & inAssociatedValue0
                                                                                                          COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_variableKindIR_globalVariable::description (C_String & ioString,
                                                                       const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_variableKindIR_globalVariable::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_variableKindIR_globalVariable * ptr = dynamic_cast<const cEnumAssociatedValues_variableKindIR_globalVariable *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_variableKindIR_localVariable::cEnumAssociatedValues_variableKindIR_localVariable (const GALGAS_string & inAssociatedValue0
                                                                                                        COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_variableKindIR_localVariable::description (C_String & ioString,
                                                                      const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_variableKindIR_localVariable::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_variableKindIR_localVariable * ptr = dynamic_cast<const cEnumAssociatedValues_variableKindIR_localVariable *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_variableKindIR_inArgument::cEnumAssociatedValues_variableKindIR_inArgument (const GALGAS_string & inAssociatedValue0
                                                                                                  COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_variableKindIR_inArgument::description (C_String & ioString,
                                                                   const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_variableKindIR_inArgument::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_variableKindIR_inArgument * ptr = dynamic_cast<const cEnumAssociatedValues_variableKindIR_inArgument *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_variableKindIR_inOutArgument::cEnumAssociatedValues_variableKindIR_inOutArgument (const GALGAS_string & inAssociatedValue0
                                                                                                        COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_variableKindIR_inOutArgument::description (C_String & ioString,
                                                                      const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_variableKindIR_inOutArgument::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_variableKindIR_inOutArgument * ptr = dynamic_cast<const cEnumAssociatedValues_variableKindIR_inOutArgument *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_variableKindIR_outArgument::cEnumAssociatedValues_variableKindIR_outArgument (const GALGAS_string & inAssociatedValue0
                                                                                                    COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_variableKindIR_outArgument::description (C_String & ioString,
                                                                    const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_variableKindIR_outArgument::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_variableKindIR_outArgument * ptr = dynamic_cast<const cEnumAssociatedValues_variableKindIR_outArgument *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_variableKindIR_localConstant::cEnumAssociatedValues_variableKindIR_localConstant (const GALGAS_string & inAssociatedValue0
                                                                                                        COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_variableKindIR_localConstant::description (C_String & ioString,
                                                                      const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_variableKindIR_localConstant::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_variableKindIR_localConstant * ptr = dynamic_cast<const cEnumAssociatedValues_variableKindIR_localConstant *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_variableKindIR_temporaryConstant::cEnumAssociatedValues_variableKindIR_temporaryConstant (const GALGAS_uint & inAssociatedValue0
                                                                                                                COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_variableKindIR_temporaryConstant::description (C_String & ioString,
                                                                          const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_variableKindIR_temporaryConstant::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_variableKindIR_temporaryConstant * ptr = dynamic_cast<const cEnumAssociatedValues_variableKindIR_temporaryConstant *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_variableKindIR_localAccess::cEnumAssociatedValues_variableKindIR_localAccess (const GALGAS_string & inAssociatedValue0
                                                                                                    COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_variableKindIR_localAccess::description (C_String & ioString,
                                                                    const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_variableKindIR_localAccess::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_variableKindIR_localAccess * ptr = dynamic_cast<const cEnumAssociatedValues_variableKindIR_localAccess *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_variableKindIR_literalUnsignedInteger::cEnumAssociatedValues_variableKindIR_literalUnsignedInteger (const GALGAS_uint_36__34_ & inAssociatedValue0
                                                                                                                          COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_variableKindIR_literalUnsignedInteger::description (C_String & ioString,
                                                                               const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_variableKindIR_literalUnsignedInteger::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_variableKindIR_literalUnsignedInteger * ptr = dynamic_cast<const cEnumAssociatedValues_variableKindIR_literalUnsignedInteger *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_variableKindIR_literalSignedInteger::cEnumAssociatedValues_variableKindIR_literalSignedInteger (const GALGAS_sint_36__34_ & inAssociatedValue0
                                                                                                                      COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_variableKindIR_literalSignedInteger::description (C_String & ioString,
                                                                             const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_variableKindIR_literalSignedInteger::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_variableKindIR_literalSignedInteger * ptr = dynamic_cast<const cEnumAssociatedValues_variableKindIR_literalSignedInteger *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_variableKindIR_literalString::cEnumAssociatedValues_variableKindIR_literalString (const GALGAS_string & inAssociatedValue0,
                                                                                                        const GALGAS_string & inAssociatedValue1
                                                                                                        COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_variableKindIR_literalString::description (C_String & ioString,
                                                                      const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_variableKindIR_literalString::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_variableKindIR_literalString * ptr = dynamic_cast<const cEnumAssociatedValues_variableKindIR_literalString *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR::GALGAS_variableKindIR (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableKindIR::constructor_register (const GALGAS_string & inAssociatedValue0
                                                                   COMMA_LOCATION_ARGS) {
  GALGAS_variableKindIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_register ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_variableKindIR_register (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableKindIR::constructor_globalVariable (const GALGAS_string & inAssociatedValue0
                                                                         COMMA_LOCATION_ARGS) {
  GALGAS_variableKindIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_globalVariable ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_variableKindIR_globalVariable (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableKindIR::constructor_localVariable (const GALGAS_string & inAssociatedValue0
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_variableKindIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_localVariable ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_variableKindIR_localVariable (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableKindIR::constructor_inArgument (const GALGAS_string & inAssociatedValue0
                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_variableKindIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_inArgument ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_variableKindIR_inArgument (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableKindIR::constructor_inOutArgument (const GALGAS_string & inAssociatedValue0
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_variableKindIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_inOutArgument ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_variableKindIR_inOutArgument (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableKindIR::constructor_outArgument (const GALGAS_string & inAssociatedValue0
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_variableKindIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_outArgument ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_variableKindIR_outArgument (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableKindIR::constructor_localConstant (const GALGAS_string & inAssociatedValue0
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_variableKindIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_localConstant ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_variableKindIR_localConstant (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableKindIR::constructor_temporaryConstant (const GALGAS_uint & inAssociatedValue0
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_variableKindIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_temporaryConstant ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_variableKindIR_temporaryConstant (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableKindIR::constructor_localAccess (const GALGAS_string & inAssociatedValue0
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_variableKindIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_localAccess ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_variableKindIR_localAccess (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableKindIR::constructor_literalUnsignedInteger (const GALGAS_uint_36__34_ & inAssociatedValue0
                                                                                 COMMA_LOCATION_ARGS) {
  GALGAS_variableKindIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_literalUnsignedInteger ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_variableKindIR_literalUnsignedInteger (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableKindIR::constructor_literalSignedInteger (const GALGAS_sint_36__34_ & inAssociatedValue0
                                                                               COMMA_LOCATION_ARGS) {
  GALGAS_variableKindIR result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_literalSignedInteger ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_variableKindIR_literalSignedInteger (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableKindIR::constructor_literalString (const GALGAS_string & inAssociatedValue0,
                                                                        const GALGAS_string & inAssociatedValue1
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_variableKindIR result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid ()) {
    result.mEnum = kEnum_literalString ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_variableKindIR_literalString (inAssociatedValue0, inAssociatedValue1 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableKindIR::method_register (GALGAS_string & outAssociatedValue0,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_register) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @variableKindIR register invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_variableKindIR_register * ptr = (const cEnumAssociatedValues_variableKindIR_register *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableKindIR::method_globalVariable (GALGAS_string & outAssociatedValue0,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_globalVariable) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @variableKindIR globalVariable invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_variableKindIR_globalVariable * ptr = (const cEnumAssociatedValues_variableKindIR_globalVariable *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableKindIR::method_localVariable (GALGAS_string & outAssociatedValue0,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_localVariable) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @variableKindIR localVariable invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_variableKindIR_localVariable * ptr = (const cEnumAssociatedValues_variableKindIR_localVariable *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableKindIR::method_inArgument (GALGAS_string & outAssociatedValue0,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_inArgument) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @variableKindIR inArgument invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_variableKindIR_inArgument * ptr = (const cEnumAssociatedValues_variableKindIR_inArgument *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableKindIR::method_inOutArgument (GALGAS_string & outAssociatedValue0,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_inOutArgument) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @variableKindIR inOutArgument invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_variableKindIR_inOutArgument * ptr = (const cEnumAssociatedValues_variableKindIR_inOutArgument *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableKindIR::method_outArgument (GALGAS_string & outAssociatedValue0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_outArgument) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @variableKindIR outArgument invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_variableKindIR_outArgument * ptr = (const cEnumAssociatedValues_variableKindIR_outArgument *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableKindIR::method_localConstant (GALGAS_string & outAssociatedValue0,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_localConstant) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @variableKindIR localConstant invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_variableKindIR_localConstant * ptr = (const cEnumAssociatedValues_variableKindIR_localConstant *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableKindIR::method_temporaryConstant (GALGAS_uint & outAssociatedValue0,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_temporaryConstant) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @variableKindIR temporaryConstant invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_variableKindIR_temporaryConstant * ptr = (const cEnumAssociatedValues_variableKindIR_temporaryConstant *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableKindIR::method_localAccess (GALGAS_string & outAssociatedValue0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_localAccess) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @variableKindIR localAccess invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_variableKindIR_localAccess * ptr = (const cEnumAssociatedValues_variableKindIR_localAccess *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableKindIR::method_literalUnsignedInteger (GALGAS_uint_36__34_ & outAssociatedValue0,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_literalUnsignedInteger) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @variableKindIR literalUnsignedInteger invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_variableKindIR_literalUnsignedInteger * ptr = (const cEnumAssociatedValues_variableKindIR_literalUnsignedInteger *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableKindIR::method_literalSignedInteger (GALGAS_sint_36__34_ & outAssociatedValue0,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_literalSignedInteger) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @variableKindIR literalSignedInteger invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_variableKindIR_literalSignedInteger * ptr = (const cEnumAssociatedValues_variableKindIR_literalSignedInteger *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableKindIR::method_literalString (GALGAS_string & outAssociatedValue0,
                                                  GALGAS_string & outAssociatedValue1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_literalString) {
    outAssociatedValue0.drop () ;
    outAssociatedValue1.drop () ;
    C_String s ;
    s << "method @variableKindIR literalString invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_variableKindIR_literalString * ptr = (const cEnumAssociatedValues_variableKindIR_literalString *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
    outAssociatedValue1 = ptr->mAssociatedValue1 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_variableKindIR [13] = {
  "(not built)",
  "register",
  "globalVariable",
  "localVariable",
  "inArgument",
  "inOutArgument",
  "outArgument",
  "localConstant",
  "temporaryConstant",
  "localAccess",
  "literalUnsignedInteger",
  "literalSignedInteger",
  "literalString"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableKindIR::reader_isRegister (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_register == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableKindIR::reader_isGlobalVariable (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_globalVariable == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableKindIR::reader_isLocalVariable (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_localVariable == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableKindIR::reader_isInArgument (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_inArgument == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableKindIR::reader_isInOutArgument (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_inOutArgument == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableKindIR::reader_isOutArgument (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_outArgument == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableKindIR::reader_isLocalConstant (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_localConstant == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableKindIR::reader_isTemporaryConstant (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_temporaryConstant == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableKindIR::reader_isLocalAccess (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_localAccess == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableKindIR::reader_isLiteralUnsignedInteger (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_literalUnsignedInteger == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableKindIR::reader_isLiteralSignedInteger (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_literalSignedInteger == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_variableKindIR::reader_isLiteralString (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_literalString == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_variableKindIR::description (C_String & ioString,
                                         const int32_t inIndentation) const {
  ioString << "<enum @variableKindIR: " << gEnumNameArrayFor_variableKindIR [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_variableKindIR::objectCompare (const GALGAS_variableKindIR & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                @variableKindIR type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_variableKindIR ("variableKindIR",
                                       NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_variableKindIR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_variableKindIR ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_variableKindIR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_variableKindIR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableKindIR GALGAS_variableKindIR::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_variableKindIR result ;
  const GALGAS_variableKindIR * p = (const GALGAS_variableKindIR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_variableKindIR *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("variableKindIR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_receiverType_receiver::cEnumAssociatedValues_receiverType_receiver (const GALGAS_unifiedTypeMap_2D_proxy & inAssociatedValue0,
                                                                                          const GALGAS_string & inAssociatedValue1
                                                                                          COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_receiverType_receiver::description (C_String & ioString,
                                                               const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_receiverType_receiver::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_receiverType_receiver * ptr = dynamic_cast<const cEnumAssociatedValues_receiverType_receiver *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_receiverType_mutatingReceiver::cEnumAssociatedValues_receiverType_mutatingReceiver (const GALGAS_unifiedTypeMap_2D_proxy & inAssociatedValue0,
                                                                                                          const GALGAS_string & inAssociatedValue1
                                                                                                          COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_receiverType_mutatingReceiver::description (C_String & ioString,
                                                                       const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_receiverType_mutatingReceiver::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_receiverType_mutatingReceiver * ptr = dynamic_cast<const cEnumAssociatedValues_receiverType_mutatingReceiver *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_receiverType::GALGAS_receiverType (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_receiverType GALGAS_receiverType::constructor_noReceiver (UNUSED_LOCATION_ARGS) {
  GALGAS_receiverType result ;
  result.mEnum = kEnum_noReceiver ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_receiverType GALGAS_receiverType::constructor_receiver (const GALGAS_unifiedTypeMap_2D_proxy & inAssociatedValue0,
                                                               const GALGAS_string & inAssociatedValue1
                                                               COMMA_LOCATION_ARGS) {
  GALGAS_receiverType result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid ()) {
    result.mEnum = kEnum_receiver ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_receiverType_receiver (inAssociatedValue0, inAssociatedValue1 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_receiverType GALGAS_receiverType::constructor_mutatingReceiver (const GALGAS_unifiedTypeMap_2D_proxy & inAssociatedValue0,
                                                                       const GALGAS_string & inAssociatedValue1
                                                                       COMMA_LOCATION_ARGS) {
  GALGAS_receiverType result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid ()) {
    result.mEnum = kEnum_mutatingReceiver ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_receiverType_mutatingReceiver (inAssociatedValue0, inAssociatedValue1 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_receiverType::method_receiver (GALGAS_unifiedTypeMap_2D_proxy & outAssociatedValue0,
                                           GALGAS_string & outAssociatedValue1,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_receiver) {
    outAssociatedValue0.drop () ;
    outAssociatedValue1.drop () ;
    C_String s ;
    s << "method @receiverType receiver invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_receiverType_receiver * ptr = (const cEnumAssociatedValues_receiverType_receiver *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
    outAssociatedValue1 = ptr->mAssociatedValue1 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_receiverType::method_mutatingReceiver (GALGAS_unifiedTypeMap_2D_proxy & outAssociatedValue0,
                                                   GALGAS_string & outAssociatedValue1,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_mutatingReceiver) {
    outAssociatedValue0.drop () ;
    outAssociatedValue1.drop () ;
    C_String s ;
    s << "method @receiverType mutatingReceiver invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_receiverType_mutatingReceiver * ptr = (const cEnumAssociatedValues_receiverType_mutatingReceiver *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
    outAssociatedValue1 = ptr->mAssociatedValue1 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_receiverType [4] = {
  "(not built)",
  "noReceiver",
  "receiver",
  "mutatingReceiver"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_receiverType::reader_isNoReceiver (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_noReceiver == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_receiverType::reader_isReceiver (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_receiver == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_receiverType::reader_isMutatingReceiver (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_mutatingReceiver == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_receiverType::description (C_String & ioString,
                                       const int32_t inIndentation) const {
  ioString << "<enum @receiverType: " << gEnumNameArrayFor_receiverType [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_receiverType::objectCompare (const GALGAS_receiverType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 @receiverType type                                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_receiverType ("receiverType",
                                     NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_receiverType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_receiverType ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_receiverType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_receiverType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_receiverType GALGAS_receiverType::extractObject (const GALGAS_object & inObject,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_receiverType result ;
  const GALGAS_receiverType * p = (const GALGAS_receiverType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_receiverType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("receiverType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_procEffectiveParameterPassingModeAST_input::cEnumAssociatedValues_procEffectiveParameterPassingModeAST_input (const GALGAS_lstring & inAssociatedValue0
                                                                                                                                    COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_procEffectiveParameterPassingModeAST_input::description (C_String & ioString,
                                                                                    const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_procEffectiveParameterPassingModeAST_input::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_procEffectiveParameterPassingModeAST_input * ptr = dynamic_cast<const cEnumAssociatedValues_procEffectiveParameterPassingModeAST_input *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_procEffectiveParameterPassingModeAST_output::cEnumAssociatedValues_procEffectiveParameterPassingModeAST_output (const GALGAS_expressionAST & inAssociatedValue0,
                                                                                                                                      const GALGAS_location & inAssociatedValue1
                                                                                                                                      COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_procEffectiveParameterPassingModeAST_output::description (C_String & ioString,
                                                                                     const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_procEffectiveParameterPassingModeAST_output::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_procEffectiveParameterPassingModeAST_output * ptr = dynamic_cast<const cEnumAssociatedValues_procEffectiveParameterPassingModeAST_output *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_procEffectiveParameterPassingModeAST_outputInput::cEnumAssociatedValues_procEffectiveParameterPassingModeAST_outputInput (const GALGAS_lstring & inAssociatedValue0
                                                                                                                                                COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_procEffectiveParameterPassingModeAST_outputInput::description (C_String & ioString,
                                                                                          const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_procEffectiveParameterPassingModeAST_outputInput::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_procEffectiveParameterPassingModeAST_outputInput * ptr = dynamic_cast<const cEnumAssociatedValues_procEffectiveParameterPassingModeAST_outputInput *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeAST::GALGAS_procEffectiveParameterPassingModeAST (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeAST GALGAS_procEffectiveParameterPassingModeAST::constructor_input (const GALGAS_lstring & inAssociatedValue0
                                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_procEffectiveParameterPassingModeAST result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_input ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_procEffectiveParameterPassingModeAST_input (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeAST GALGAS_procEffectiveParameterPassingModeAST::constructor_output (const GALGAS_expressionAST & inAssociatedValue0,
                                                                                                             const GALGAS_location & inAssociatedValue1
                                                                                                             COMMA_LOCATION_ARGS) {
  GALGAS_procEffectiveParameterPassingModeAST result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid ()) {
    result.mEnum = kEnum_output ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_procEffectiveParameterPassingModeAST_output (inAssociatedValue0, inAssociatedValue1 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeAST GALGAS_procEffectiveParameterPassingModeAST::constructor_outputInput (const GALGAS_lstring & inAssociatedValue0
                                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_procEffectiveParameterPassingModeAST result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_outputInput ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_procEffectiveParameterPassingModeAST_outputInput (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterPassingModeAST::method_input (GALGAS_lstring & outAssociatedValue0,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_input) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @procEffectiveParameterPassingModeAST input invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_procEffectiveParameterPassingModeAST_input * ptr = (const cEnumAssociatedValues_procEffectiveParameterPassingModeAST_input *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterPassingModeAST::method_output (GALGAS_expressionAST & outAssociatedValue0,
                                                                 GALGAS_location & outAssociatedValue1,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_output) {
    outAssociatedValue0.drop () ;
    outAssociatedValue1.drop () ;
    C_String s ;
    s << "method @procEffectiveParameterPassingModeAST output invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_procEffectiveParameterPassingModeAST_output * ptr = (const cEnumAssociatedValues_procEffectiveParameterPassingModeAST_output *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
    outAssociatedValue1 = ptr->mAssociatedValue1 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterPassingModeAST::method_outputInput (GALGAS_lstring & outAssociatedValue0,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_outputInput) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @procEffectiveParameterPassingModeAST outputInput invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_procEffectiveParameterPassingModeAST_outputInput * ptr = (const cEnumAssociatedValues_procEffectiveParameterPassingModeAST_outputInput *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_procEffectiveParameterPassingModeAST [4] = {
  "(not built)",
  "input",
  "output",
  "outputInput"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procEffectiveParameterPassingModeAST::reader_isInput (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_input == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procEffectiveParameterPassingModeAST::reader_isOutput (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_output == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_procEffectiveParameterPassingModeAST::reader_isOutputInput (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_outputInput == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_procEffectiveParameterPassingModeAST::description (C_String & ioString,
                                                               const int32_t inIndentation) const {
  ioString << "<enum @procEffectiveParameterPassingModeAST: " << gEnumNameArrayFor_procEffectiveParameterPassingModeAST [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_procEffectiveParameterPassingModeAST::objectCompare (const GALGAS_procEffectiveParameterPassingModeAST & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     @procEffectiveParameterPassingModeAST type                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_procEffectiveParameterPassingModeAST ("procEffectiveParameterPassingModeAST",
                                                             NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_procEffectiveParameterPassingModeAST::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_procEffectiveParameterPassingModeAST ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_procEffectiveParameterPassingModeAST::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_procEffectiveParameterPassingModeAST (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_procEffectiveParameterPassingModeAST GALGAS_procEffectiveParameterPassingModeAST::extractObject (const GALGAS_object & inObject,
                                                                                                        C_Compiler * inCompiler
                                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_procEffectiveParameterPassingModeAST result ;
  const GALGAS_procEffectiveParameterPassingModeAST * p = (const GALGAS_procEffectiveParameterPassingModeAST *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_procEffectiveParameterPassingModeAST *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("procEffectiveParameterPassingModeAST", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_typeKind_enumeration::cEnumAssociatedValues_typeKind_enumeration (const GALGAS_enumConstantMap & inAssociatedValue0
                                                                                        COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_typeKind_enumeration::description (C_String & ioString,
                                                              const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_typeKind_enumeration::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_typeKind_enumeration * ptr = dynamic_cast<const cEnumAssociatedValues_typeKind_enumeration *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_typeKind_structure::cEnumAssociatedValues_typeKind_structure (const GALGAS_propertyList & inAssociatedValue0
                                                                                    COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_typeKind_structure::description (C_String & ioString,
                                                            const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_typeKind_structure::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_typeKind_structure * ptr = dynamic_cast<const cEnumAssociatedValues_typeKind_structure *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_typeKind_integer::cEnumAssociatedValues_typeKind_integer (const GALGAS_sint_36__34_ & inAssociatedValue0,
                                                                                const GALGAS_uint_36__34_ & inAssociatedValue1,
                                                                                const GALGAS_bool & inAssociatedValue2,
                                                                                const GALGAS_uint & inAssociatedValue3
                                                                                COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1),
mAssociatedValue2 (inAssociatedValue2),
mAssociatedValue3 (inAssociatedValue3) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_typeKind_integer::description (C_String & ioString,
                                                          const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  mAssociatedValue2.description (ioString, inIndentation) ;
  mAssociatedValue3.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_typeKind_integer::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_typeKind_integer * ptr = dynamic_cast<const cEnumAssociatedValues_typeKind_integer *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue2.objectCompare (ptr->mAssociatedValue2) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue3.objectCompare (ptr->mAssociatedValue3) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind::GALGAS_typeKind (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_boolean (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_boolean ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_boolset (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_boolset ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_literalString (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_literalString ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_enumeration (const GALGAS_enumConstantMap & inAssociatedValue0
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_enumeration ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_typeKind_enumeration (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_structure (const GALGAS_propertyList & inAssociatedValue0
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_structure ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_typeKind_structure (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_integer (const GALGAS_sint_36__34_ & inAssociatedValue0,
                                                      const GALGAS_uint_36__34_ & inAssociatedValue1,
                                                      const GALGAS_bool & inAssociatedValue2,
                                                      const GALGAS_uint & inAssociatedValue3
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid () && inAssociatedValue2.isValid () && inAssociatedValue3.isValid ()) {
    result.mEnum = kEnum_integer ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_typeKind_integer (inAssociatedValue0, inAssociatedValue1, inAssociatedValue2, inAssociatedValue3 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeKind::method_enumeration (GALGAS_enumConstantMap & outAssociatedValue0,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_enumeration) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @typeKind enumeration invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_typeKind_enumeration * ptr = (const cEnumAssociatedValues_typeKind_enumeration *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeKind::method_structure (GALGAS_propertyList & outAssociatedValue0,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_structure) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @typeKind structure invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_typeKind_structure * ptr = (const cEnumAssociatedValues_typeKind_structure *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeKind::method_integer (GALGAS_sint_36__34_ & outAssociatedValue0,
                                      GALGAS_uint_36__34_ & outAssociatedValue1,
                                      GALGAS_bool & outAssociatedValue2,
                                      GALGAS_uint & outAssociatedValue3,
                                      C_Compiler * inCompiler
                                      COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_integer) {
    outAssociatedValue0.drop () ;
    outAssociatedValue1.drop () ;
    outAssociatedValue2.drop () ;
    outAssociatedValue3.drop () ;
    C_String s ;
    s << "method @typeKind integer invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_typeKind_integer * ptr = (const cEnumAssociatedValues_typeKind_integer *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
    outAssociatedValue1 = ptr->mAssociatedValue1 ;
    outAssociatedValue2 = ptr->mAssociatedValue2 ;
    outAssociatedValue3 = ptr->mAssociatedValue3 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_typeKind [7] = {
  "(not built)",
  "boolean",
  "boolset",
  "literalString",
  "enumeration",
  "structure",
  "integer"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isBoolean (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_boolean == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isBoolset (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_boolset == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isLiteralString (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_literalString == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isEnumeration (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_enumeration == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isStructure (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_structure == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_typeKind::reader_isInteger (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_integer == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_typeKind::description (C_String & ioString,
                                   const int32_t inIndentation) const {
  ioString << "<enum @typeKind: " << gEnumNameArrayFor_typeKind [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_typeKind::objectCompare (const GALGAS_typeKind & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                   @typeKind type                                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_typeKind ("typeKind",
                                 NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_typeKind::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_typeKind ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_typeKind::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_typeKind (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  const GALGAS_typeKind * p = (const GALGAS_typeKind *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_typeKind *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("typeKind", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_generalizedTypeEnumAST_valueType::cEnumAssociatedValues_generalizedTypeEnumAST_valueType (const GALGAS_lstring & inAssociatedValue0
                                                                                                                COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_generalizedTypeEnumAST_valueType::description (C_String & ioString,
                                                                          const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_generalizedTypeEnumAST_valueType::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_generalizedTypeEnumAST_valueType * ptr = dynamic_cast<const cEnumAssociatedValues_generalizedTypeEnumAST_valueType *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumAssociatedValues_generalizedTypeEnumAST_procType::cEnumAssociatedValues_generalizedTypeEnumAST_procType (const GALGAS_lstringlist & inAssociatedValue0,
                                                                                                              const GALGAS_procFormalArgumentList & inAssociatedValue1
                                                                                                              COMMA_LOCATION_ARGS) :
cEnumAssociatedValues (THERE),
mAssociatedValue0 (inAssociatedValue0),
mAssociatedValue1 (inAssociatedValue1) {
} ;

//---------------------------------------------------------------------------------------------------------------------*

void cEnumAssociatedValues_generalizedTypeEnumAST_procType::description (C_String & ioString,
                                                                         const int32_t inIndentation) const {
  ioString << "(\n" ;
  mAssociatedValue0.description (ioString, inIndentation) ;
  mAssociatedValue1.description (ioString, inIndentation) ;
  ioString << ")" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cEnumAssociatedValues_generalizedTypeEnumAST_procType::compare (const cEnumAssociatedValues * inOperand) const {
  const cEnumAssociatedValues_generalizedTypeEnumAST_procType * ptr = dynamic_cast<const cEnumAssociatedValues_generalizedTypeEnumAST_procType *> (inOperand) ;
  macroValidPointer (ptr) ;
  typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAssociatedValue0.objectCompare (ptr->mAssociatedValue0) ;
  }
  if (result == kOperandEqual) {
    result = mAssociatedValue1.objectCompare (ptr->mAssociatedValue1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generalizedTypeEnumAST::GALGAS_generalizedTypeEnumAST (void) :
mAssociatedValues (),
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generalizedTypeEnumAST GALGAS_generalizedTypeEnumAST::constructor_valueType (const GALGAS_lstring & inAssociatedValue0
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_generalizedTypeEnumAST result ;
  if (inAssociatedValue0.isValid ()) {
    result.mEnum = kEnum_valueType ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_generalizedTypeEnumAST_valueType (inAssociatedValue0 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generalizedTypeEnumAST GALGAS_generalizedTypeEnumAST::constructor_procType (const GALGAS_lstringlist & inAssociatedValue0,
                                                                                   const GALGAS_procFormalArgumentList & inAssociatedValue1
                                                                                   COMMA_LOCATION_ARGS) {
  GALGAS_generalizedTypeEnumAST result ;
  if (inAssociatedValue0.isValid () && inAssociatedValue1.isValid ()) {
    result.mEnum = kEnum_procType ;
    cEnumAssociatedValues * ptr = NULL ;
    macroMyNew (ptr, cEnumAssociatedValues_generalizedTypeEnumAST_procType (inAssociatedValue0, inAssociatedValue1 COMMA_THERE)) ;
    result.mAssociatedValues.setPointer (ptr) ;
    macroDetachSharedObject (ptr) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_generalizedTypeEnumAST::method_valueType (GALGAS_lstring & outAssociatedValue0,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_valueType) {
    outAssociatedValue0.drop () ;
    C_String s ;
    s << "method @generalizedTypeEnumAST valueType invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_generalizedTypeEnumAST_valueType * ptr = (const cEnumAssociatedValues_generalizedTypeEnumAST_valueType *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_generalizedTypeEnumAST::method_procType (GALGAS_lstringlist & outAssociatedValue0,
                                                     GALGAS_procFormalArgumentList & outAssociatedValue1,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) const {
  if (mEnum != kEnum_procType) {
    outAssociatedValue0.drop () ;
    outAssociatedValue1.drop () ;
    C_String s ;
    s << "method @generalizedTypeEnumAST procType invoked with an invalid enum value" ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
  }else{
    const cEnumAssociatedValues_generalizedTypeEnumAST_procType * ptr = (const cEnumAssociatedValues_generalizedTypeEnumAST_procType *) unsafePointer () ;
    outAssociatedValue0 = ptr->mAssociatedValue0 ;
    outAssociatedValue1 = ptr->mAssociatedValue1 ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_generalizedTypeEnumAST [3] = {
  "(not built)",
  "valueType",
  "procType"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_generalizedTypeEnumAST::reader_isValueType (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_valueType == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_generalizedTypeEnumAST::reader_isProcType (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_procType == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_generalizedTypeEnumAST::description (C_String & ioString,
                                                 const int32_t inIndentation) const {
  ioString << "<enum @generalizedTypeEnumAST: " << gEnumNameArrayFor_generalizedTypeEnumAST [mEnum] ;
  mAssociatedValues.description (ioString, inIndentation) ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_generalizedTypeEnumAST::objectCompare (const GALGAS_generalizedTypeEnumAST & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            @generalizedTypeEnumAST type                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_generalizedTypeEnumAST ("generalizedTypeEnumAST",
                                               NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_generalizedTypeEnumAST::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_generalizedTypeEnumAST ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_generalizedTypeEnumAST::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_generalizedTypeEnumAST (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generalizedTypeEnumAST GALGAS_generalizedTypeEnumAST::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_generalizedTypeEnumAST result ;
  const GALGAS_generalizedTypeEnumAST * p = (const GALGAS_generalizedTypeEnumAST *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_generalizedTypeEnumAST *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("generalizedTypeEnumAST", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               Bool options                                                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

C_BoolCommandLineOption gOption_plm_5F_options_compileOnly ("plm_options",
                                         "compileOnly",
                                         99,
                                         "no-c-compilation",
                                         "Do not compile generated C code") ;

C_BoolCommandLineOption gOption_plm_5F_options_doNotDetectRecursiveCalls ("plm_options",
                                         "doNotDetectRecursiveCalls",
                                         114,
                                         "do-not-detect-recursive-calls",
                                         "Do not detect recursive calls") ;

C_BoolCommandLineOption gOption_plm_5F_options_listEmbeddedSampleFiles ("plm_options",
                                         "listEmbeddedSampleFiles",
                                         108,
                                         "list-embedded-samples",
                                         "List embedded sample files") ;

C_BoolCommandLineOption gOption_plm_5F_options_listEmbeddedTargets ("plm_options",
                                         "listEmbeddedTargets",
                                         76,
                                         "list-embedded-targets",
                                         "List embedded targets") ;

C_BoolCommandLineOption gOption_plm_5F_options_noExceptionGeneration ("plm_options",
                                         "noExceptionGeneration",
                                         0,
                                         "no-exception-generation",
                                         "Do not generate exception code") ;

C_BoolCommandLineOption gOption_plm_5F_options_performFlashing ("plm_options",
                                         "performFlashing",
                                         102,
                                         "flash-target",
                                         "After successful compilation, flash target") ;

C_BoolCommandLineOption gOption_plm_5F_options_writeRoutineInvocationGraphFile ("plm_options",
                                         "writeRoutineInvocationGraphFile",
                                         105,
                                         "routine-invocation-graph",
                                         "Write routine invocation graph file") ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               UInt options                                                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              String options                                                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

C_StringCommandLineOption gOption_plm_5F_options_extractEmbeddedSampleFile ("plm_options",
                                         "extractEmbeddedSampleFile",
                                         120,
                                         "extract-embedded-sample-code",
                                         "Extract an embedded sample file",
                                         "") ;

C_StringCommandLineOption gOption_plm_5F_options_extractEmbeddedTargets ("plm_options",
                                         "extractEmbeddedTargets",
                                         88,
                                         "extract-embedded-targets",
                                         "Extract embedded targets",
                                         "") ;

C_StringCommandLineOption gOption_plm_5F_options_useDirAsTargetDir ("plm_options",
                                         "useDirAsTargetDir",
                                         84,
                                         "use-target-dir",
                                         "Use directory as target definition directory, instead of using embedded targets",
                                         "") ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              String List options                                                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

C_StringListCommandLineOption gOption_plm_5F_options_pathList ("plm_options",
                                         "pathList",
                                         0,
                                         "path",
                                         "Search pathes for source files") ;

//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'enterNodeInPrecedenceGraph'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_enterNodeInPrecedenceGraph (GALGAS_lstring inArgument_inNodeName,
                                         GALGAS_abstractDeclaration inArgument_inInfo,
                                         GALGAS_generalizedTypeEnumAST inArgument_inType,
                                         GALGAS_semanticTypePrecedenceGraph & ioArgument_ioGraph,
                                         C_Compiler * inCompiler
                                         COMMA_UNUSED_LOCATION_ARGS) {
  {
  ioArgument_ioGraph.modifier_addNode (inArgument_inNodeName, inArgument_inInfo, inCompiler COMMA_SOURCE_FILE ("generalized-type.galgas", 21)) ;
  }
  switch (inArgument_inType.enumValue ()) {
  case GALGAS_generalizedTypeEnumAST::kNotBuilt:
    break ;
  case GALGAS_generalizedTypeEnumAST::kEnum_valueType:
    {
      const cEnumAssociatedValues_generalizedTypeEnumAST_valueType * extractPtr_1218 = (const cEnumAssociatedValues_generalizedTypeEnumAST_valueType *) (inArgument_inType.unsafePointer ()) ;
      const GALGAS_lstring extractedValue_typeName = extractPtr_1218->mAssociatedValue0 ;
      {
      ioArgument_ioGraph.modifier_addEdge (inArgument_inNodeName, extractedValue_typeName COMMA_SOURCE_FILE ("generalized-type.galgas", 24)) ;
      }
    }
    break ;
  case GALGAS_generalizedTypeEnumAST::kEnum_procType:
    {
      const cEnumAssociatedValues_generalizedTypeEnumAST_procType * extractPtr_1389 = (const cEnumAssociatedValues_generalizedTypeEnumAST_procType *) (inArgument_inType.unsafePointer ()) ;
      const GALGAS_procFormalArgumentList extractedValue_procFormalArgumentList = extractPtr_1389->mAssociatedValue1 ;
      cEnumerator_procFormalArgumentList enumerator_1306 (extractedValue_procFormalArgumentList, kEnumeration_up) ;
      while (enumerator_1306.hasCurrentObject ()) {
        {
        ioArgument_ioGraph.modifier_addEdge (inArgument_inNodeName, enumerator_1306.current (HERE).mAttribute_mFormalArgumentTypeName COMMA_SOURCE_FILE ("generalized-type.galgas", 27)) ;
        }
        enumerator_1306.gotoNextObject () ;
      }
    }
    break ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Routine 'enterBooleanOperators'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_enterBooleanOperators (GALGAS_lstring inArgument_inBooleanTypeName,
                                    GALGAS_semanticContext & ioArgument_ioContext,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy var_selfTypeProxy ;
  {
  GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (ioArgument_ioContext.mAttribute_mTypeMap, inArgument_inBooleanTypeName, var_selfTypeProxy COMMA_SOURCE_FILE ("bool-type.galgas", 107)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 109)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 109)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 109)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 109)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 108)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mNonEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 113)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 113)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 113)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 113)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 112)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictInfOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 117)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 117)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 117)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 117)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 116)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mInfEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 121)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 121)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 121)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 121)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 120)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictSupOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 125)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 125)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 125)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 125)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 124)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mSupEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 129)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 129)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 129)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 129)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 128)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mBooleanAndOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 133)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 133)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 133)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 133)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 132)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mBooleanOrOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 137)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 137)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 137)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 137)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 136)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mBooleanXorOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 141)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("bool-type.galgas", 141)), inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 141)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("bool-type.galgas", 141)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 140)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mNotOperatorMap.modifier_insertKey (inArgument_inBooleanTypeName, var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("bool-type.galgas", 144)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Filewrapper 'booleanGenerationTemplate'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_booleanGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_booleanGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_booleanGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_booleanGenerationTemplate_0,
  0,
  gWrapperAllDirectories_booleanGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            Filewrapper template 'booleanGenerationTemplate declaration'                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_booleanGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                         const GALGAS_string & in_ENUMERATION_5F_NAME,
                                                                         const GALGAS_string & in_ACTUAL_5F_TYPE_5F_NAME
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("boolean ").add_operation (in_ENUMERATION_5F_NAME, inCompiler COMMA_SOURCE_FILE ("boolean-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("boolean-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "typedef " ;
  result << in_ACTUAL_5F_TYPE_5F_NAME.stringValue () ;
  result << " " ;
  result << function_mangledNameForType (in_ENUMERATION_5F_NAME, inCompiler COMMA_SOURCE_FILE ("boolean-declaration.galgasTemplate", 5)).stringValue () ;
  result << " ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Once function 'bootModeName'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_bootModeName (C_Compiler * /* inCompiler */
                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  result_outResult = GALGAS_string ("boot") ;
//---
  return result_outResult ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_bootModeName = false ;
static GALGAS_string gOnceFunctionResult_bootModeName ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_bootModeName (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_bootModeName) {
    gOnceFunctionResult_bootModeName = onceFunction_bootModeName (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_bootModeName = true ;
  }
  return gOnceFunctionResult_bootModeName ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_bootModeName (void) {
  gOnceFunctionResult_bootModeName.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_bootModeName (NULL,
                                                          releaseOnceFunctionResult_bootModeName) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_bootModeName [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_bootModeName (C_Compiler * inCompiler,
                                                             const cObjectArray & /* inEffectiveParameterArray */,
                                                             const GALGAS_location & /* inErrorLocation */
                                                             COMMA_LOCATION_ARGS) {
  return function_bootModeName (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_bootModeName ("bootModeName",
                                                              functionWithGenericHeader_bootModeName,
                                                              & kTypeDescriptor_GALGAS_string,
                                                              0,
                                                              functionArgs_bootModeName) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Routine 'enterEnumerationOperators'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_enterEnumerationOperators (GALGAS_lstring inArgument_inEnumerationTypeName,
                                        GALGAS_semanticContext & ioArgument_ioContext,
                                        C_Compiler * inCompiler
                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy var_BoolTypeProxy ;
  {
  GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (ioArgument_ioContext.mAttribute_mTypeMap, GALGAS_string ("Bool").reader_nowhere (SOURCE_FILE ("enumeration-declaration.galgas", 126)), var_BoolTypeProxy COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 126)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inEnumerationTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 128)).add_operation (inArgument_inEnumerationTypeName.reader_string (SOURCE_FILE ("enumeration-declaration.galgas", 128)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 128)), inArgument_inEnumerationTypeName.mAttribute_location  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 128)), var_BoolTypeProxy, inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 127)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mNonEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inEnumerationTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 132)).add_operation (inArgument_inEnumerationTypeName.reader_string (SOURCE_FILE ("enumeration-declaration.galgas", 132)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 132)), inArgument_inEnumerationTypeName.mAttribute_location  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 132)), var_BoolTypeProxy, inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 131)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictInfOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inEnumerationTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 136)).add_operation (inArgument_inEnumerationTypeName.reader_string (SOURCE_FILE ("enumeration-declaration.galgas", 136)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 136)), inArgument_inEnumerationTypeName.mAttribute_location  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 136)), var_BoolTypeProxy, inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 135)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mInfEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inEnumerationTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 140)).add_operation (inArgument_inEnumerationTypeName.reader_string (SOURCE_FILE ("enumeration-declaration.galgas", 140)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 140)), inArgument_inEnumerationTypeName.mAttribute_location  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 140)), var_BoolTypeProxy, inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 139)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictSupOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inEnumerationTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 144)).add_operation (inArgument_inEnumerationTypeName.reader_string (SOURCE_FILE ("enumeration-declaration.galgas", 144)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 144)), inArgument_inEnumerationTypeName.mAttribute_location  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 144)), var_BoolTypeProxy, inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 143)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mSupEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inEnumerationTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 148)).add_operation (inArgument_inEnumerationTypeName.reader_string (SOURCE_FILE ("enumeration-declaration.galgas", 148)), inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 148)), inArgument_inEnumerationTypeName.mAttribute_location  COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 148)), var_BoolTypeProxy, inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgas", 147)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     Filewrapper 'enumerationGenerationTemplate'                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_enumerationGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_enumerationGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_enumerationGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_enumerationGenerationTemplate_0,
  0,
  gWrapperAllDirectories_enumerationGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Filewrapper template 'enumerationGenerationTemplate declaration'                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_enumerationGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                             const GALGAS_string & in_ENUMERATION_5F_NAME,
                                                                             const GALGAS_string & in_ACTUAL_5F_TYPE_5F_NAME
                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("enumeration ").add_operation (in_ENUMERATION_5F_NAME, inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("enumeration-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "typedef " ;
  result << in_ACTUAL_5F_TYPE_5F_NAME.stringValue () ;
  result << " " ;
  result << function_mangledNameForType (in_ENUMERATION_5F_NAME, inCompiler COMMA_SOURCE_FILE ("enumeration-declaration.galgasTemplate", 5)).stringValue () ;
  result << " ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   Filewrapper 'globalVariableGenerationTemplate'                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_globalVariableGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_globalVariableGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_globalVariableGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_globalVariableGenerationTemplate_0,
  0,
  gWrapperAllDirectories_globalVariableGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       Filewrapper template 'globalVariableGenerationTemplate implementation'                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_globalVariableGenerationTemplate_implementation (C_Compiler * inCompiler,
                                                                                   const GALGAS_string & in_GLOBAL_5F_VAR_5F_NAME,
                                                                                   const GALGAS_string & in_GLOBAL_5F_TYPE_5F_NAME,
                                                                                   const GALGAS_bool & in_GENERATE_5F_VOLATILE,
                                                                                   const GALGAS_string & in_INITIAL_5F_VALUE_5F_STRING
                                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("global variable ").add_operation (in_GLOBAL_5F_VAR_5F_NAME, inCompiler COMMA_SOURCE_FILE ("global-var-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("global-var-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n" ;
  const enumGalgasBool test_0 = in_GENERATE_5F_VOLATILE.boolEnum () ;
  if (kBoolTrue == test_0) {
    result << "volatile " ;
  }else if (kBoolFalse == test_0) {
  }
  result << function_mangledNameForType (in_GLOBAL_5F_TYPE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("global-var-declaration.galgasTemplate", 9)).stringValue () ;
  result << " " ;
  result << function_mangledNameForGlobalVariable (in_GLOBAL_5F_VAR_5F_NAME, inCompiler COMMA_SOURCE_FILE ("global-var-declaration.galgasTemplate", 11)).stringValue () ;
  const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, in_INITIAL_5F_VALUE_5F_STRING.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_1) {
    result << " = " ;
    result << in_INITIAL_5F_VALUE_5F_STRING.stringValue () ;
  }else if (kBoolFalse == test_1) {
  }
  result << " ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   Filewrapper 'globalConstantGenerationTemplate'                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_globalConstantGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_globalConstantGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_globalConstantGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_globalConstantGenerationTemplate_0,
  0,
  gWrapperAllDirectories_globalConstantGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                         Filewrapper template 'globalConstantGenerationTemplate declaration'                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_globalConstantGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                                const GALGAS_string & in_GLOBAL_5F_CONSTANT_5F_NAME,
                                                                                const GALGAS_string & in_CONSTANT_5F_VALUE
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("global constant ").add_operation (in_GLOBAL_5F_CONSTANT_5F_NAME, inCompiler COMMA_SOURCE_FILE ("global-constant-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("global-constant-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "#define " ;
  result << function_mangledNameForConstant (in_GLOBAL_5F_CONSTANT_5F_NAME, inCompiler COMMA_SOURCE_FILE ("global-constant-declaration.galgasTemplate", 5)).stringValue () ;
  result << " (" ;
  result << in_CONSTANT_5F_VALUE.stringValue () ;
  result << ")\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Routine 'enterIntegerOperators'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_enterIntegerOperators (const GALGAS_lstring constinArgument_inIntegerTypeName,
                                    const GALGAS_bool constinArgument_inIsSigned,
                                    GALGAS_semanticContext & ioArgument_ioContext,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  ioArgument_ioContext.mAttribute_mTypeNameSetForIncDec.addAssign_operation (constinArgument_inIntegerTypeName.mAttribute_string  COMMA_SOURCE_FILE ("type-integer.galgas", 126)) ;
  GALGAS_unifiedTypeMap_2D_proxy var_selfTypeProxy ;
  {
  GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (ioArgument_ioContext.mAttribute_mTypeMap, constinArgument_inIntegerTypeName, var_selfTypeProxy COMMA_SOURCE_FILE ("type-integer.galgas", 128)) ;
  }
  GALGAS_unifiedTypeMap_2D_proxy var_BoolTypeProxy ;
  {
  GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (ioArgument_ioContext.mAttribute_mTypeMap, GALGAS_string ("Bool").reader_nowhere (SOURCE_FILE ("type-integer.galgas", 129)), var_BoolTypeProxy COMMA_SOURCE_FILE ("type-integer.galgas", 129)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 132)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 132)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 132)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 132)), var_BoolTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 131)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mNonEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 136)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 136)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 136)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 136)), var_BoolTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 135)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictInfOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 140)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 140)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 140)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 140)), var_BoolTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 139)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mInfEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 144)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 144)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 144)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 144)), var_BoolTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 143)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictSupOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 148)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 148)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 148)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 148)), var_BoolTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 147)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mSupEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 152)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 152)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 152)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 152)), var_BoolTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 151)) ;
  }
  const enumGalgasBool test_0 = constinArgument_inIsSigned.operator_not (SOURCE_FILE ("type-integer.galgas", 156)).boolEnum () ;
  if (kBoolTrue == test_0) {
    {
    ioArgument_ioContext.mAttribute_mAndOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 158)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 158)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 158)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 158)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 157)) ;
    }
    {
    ioArgument_ioContext.mAttribute_mOrOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 162)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 162)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 162)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 162)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 161)) ;
    }
    {
    ioArgument_ioContext.mAttribute_mXorOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 166)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 166)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 166)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 166)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 165)) ;
    }
    {
    ioArgument_ioContext.mAttribute_mUnsignedComplementOperatorMap.modifier_insertKey (constinArgument_inIntegerTypeName, var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 169)) ;
    }
  }
  const enumGalgasBool test_1 = constinArgument_inIsSigned.boolEnum () ;
  if (kBoolTrue == test_1) {
    {
    ioArgument_ioContext.mAttribute_mUnaryMinusOperatorMap.modifier_insertKey (constinArgument_inIntegerTypeName, var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 176)) ;
    }
  }
  {
  ioArgument_ioContext.mAttribute_mAddOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 183)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 183)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 183)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 183)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 182)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mAddNoOvfOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 187)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 187)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 187)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 187)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 186)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mSubOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 191)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 191)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 191)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 191)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 190)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mSubNoOvfOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 195)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 195)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 195)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 195)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 194)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mMulOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 199)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 199)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 199)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 199)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 198)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mMulNoOvfOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 203)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 203)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 203)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 203)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 202)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mDivOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 207)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 207)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 207)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 207)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 206)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mDivNoOvfOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 211)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 211)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 211)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 211)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 210)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mModOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 215)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 215)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 215)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 215)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 214)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mLeftShiftOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 220)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 220)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 220)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 220)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 219)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mRightShiftOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (constinArgument_inIntegerTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 224)).add_operation (constinArgument_inIntegerTypeName.reader_string (SOURCE_FILE ("type-integer.galgas", 224)), inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 224)), constinArgument_inIntegerTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-integer.galgas", 224)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-integer.galgas", 223)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Filewrapper 'integerGenerationTemplate'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_integerGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_integerGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_integerGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_integerGenerationTemplate_0,
  0,
  gWrapperAllDirectories_integerGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            Filewrapper template 'integerGenerationTemplate declaration'                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_integerGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                         const GALGAS_string & in_INTEGER_5F_TYPE_5F_NAME,
                                                                         const GALGAS_string & in_ACTUAL_5F_TYPE_5F_NAME
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("integer ").add_operation (in_INTEGER_5F_TYPE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("integer-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("integer-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "typedef " ;
  result << in_ACTUAL_5F_TYPE_5F_NAME.stringValue () ;
  result << " " ;
  result << function_mangledNameForType (in_INTEGER_5F_TYPE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("integer-declaration.galgasTemplate", 5)).stringValue () ;
  result << " ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'enterStaticStringOperators'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_enterStaticStringOperators (GALGAS_lstring inArgument_inBooleanTypeName,
                                         GALGAS_semanticContext & ioArgument_ioContext,
                                         C_Compiler * inCompiler
                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy var_selfTypeProxy ;
  {
  GALGAS_unifiedTypeMap_2D_proxy::class_method_makeProxy (ioArgument_ioContext.mAttribute_mTypeMap, inArgument_inBooleanTypeName, var_selfTypeProxy COMMA_SOURCE_FILE ("type-static-string.galgas", 63)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 65)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 65)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 65)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 65)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 64)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mNonEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 69)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 69)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 69)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 69)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 68)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictInfOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 73)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 73)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 73)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 73)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 72)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mInfEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 77)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 77)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 77)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 77)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 76)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mStrictSupOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 81)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 81)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 81)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 81)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 80)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mSupEqualOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 85)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 85)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 85)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 85)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 84)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mAndOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 89)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 89)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 89)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 89)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 88)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mBooleanAndOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 93)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 93)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 93)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 93)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 92)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mOrOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 97)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 97)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 97)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 97)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 96)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mBooleanOrOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 101)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 101)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 101)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 101)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 100)) ;
  }
  {
  ioArgument_ioContext.mAttribute_mXorOperatorMap.modifier_insertKey (GALGAS_lstring::constructor_new (inArgument_inBooleanTypeName.mAttribute_string.add_operation (GALGAS_string ("."), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 105)).add_operation (inArgument_inBooleanTypeName.reader_string (SOURCE_FILE ("type-static-string.galgas", 105)), inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 105)), inArgument_inBooleanTypeName.mAttribute_location  COMMA_SOURCE_FILE ("type-static-string.galgas", 105)), var_selfTypeProxy, inCompiler COMMA_SOURCE_FILE ("type-static-string.galgas", 104)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    Filewrapper 'literalStringGenerationTemplate'                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_literalStringGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_literalStringGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_literalStringGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_literalStringGenerationTemplate_0,
  0,
  gWrapperAllDirectories_literalStringGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                         Filewrapper template 'literalStringGenerationTemplate declaration'                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_literalStringGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                               const GALGAS_string & in_STATIC_5F_STRING_5F_NAME
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("literal string ").add_operation (in_STATIC_5F_STRING_5F_NAME, inCompiler COMMA_SOURCE_FILE ("literal-string-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("literal-string-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "typedef const char * " ;
  result << function_mangledNameForType (in_STATIC_5F_STRING_5F_NAME, inCompiler COMMA_SOURCE_FILE ("literal-string-declaration.galgasTemplate", 5)).stringValue () ;
  result << " ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Once function 'exceptionModeName'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_exceptionModeName (C_Compiler * /* inCompiler */
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  result_outResult = GALGAS_string ("exception") ;
//---
  return result_outResult ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_exceptionModeName = false ;
static GALGAS_string gOnceFunctionResult_exceptionModeName ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_exceptionModeName (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_exceptionModeName) {
    gOnceFunctionResult_exceptionModeName = onceFunction_exceptionModeName (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_exceptionModeName = true ;
  }
  return gOnceFunctionResult_exceptionModeName ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_exceptionModeName (void) {
  gOnceFunctionResult_exceptionModeName.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_exceptionModeName (NULL,
                                                               releaseOnceFunctionResult_exceptionModeName) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_exceptionModeName [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_exceptionModeName (C_Compiler * inCompiler,
                                                                  const cObjectArray & /* inEffectiveParameterArray */,
                                                                  const GALGAS_location & /* inErrorLocation */
                                                                  COMMA_LOCATION_ARGS) {
  return function_exceptionModeName (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_exceptionModeName ("exceptionModeName",
                                                                   functionWithGenericHeader_exceptionModeName,
                                                                   & kTypeDescriptor_GALGAS_string,
                                                                   0,
                                                                   functionArgs_exceptionModeName) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Filewrapper 'functionGenerationTemplate'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_functionGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_functionGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_functionGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_functionGenerationTemplate_0,
  0,
  gWrapperAllDirectories_functionGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            Filewrapper template 'functionGenerationTemplate declaration'                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_functionGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                          const GALGAS_string & in_FUNCTION_5F_NAME,
                                                                          const GALGAS_funcFormalArgumentListForGeneration & in_FORMAL_5F_ARGUMENT_5F_LIST,
                                                                          const GALGAS_unifiedTypeMap_2D_proxy & in_RESULT_5F_TYPE
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  uint32_t columnMarker = 0 ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("func ").add_operation (in_FUNCTION_5F_NAME, inCompiler COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "static " ;
  result << function_mangledNameForType (in_RESULT_5F_TYPE.reader_key (inCompiler COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 5)), inCompiler COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 5)).stringValue () ;
  result << " " ;
  result << function_mangledNameForFunction (in_FUNCTION_5F_NAME, inCompiler COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 5)).stringValue () ;
  result << " (" ;
  columnMarker = result.currentColumn () ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, in_FORMAL_5F_ARGUMENT_5F_LIST.reader_length (SOURCE_FILE ("function-declaration.galgasTemplate", 6)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << "void" ;
  }else if (kBoolFalse == test_0) {
    GALGAS_uint index_514_ (0) ;
    if (in_FORMAL_5F_ARGUMENT_5F_LIST.isValid ()) {
      cEnumerator_funcFormalArgumentListForGeneration enumerator_514 (in_FORMAL_5F_ARGUMENT_5F_LIST, kEnumeration_up) ;
      while (enumerator_514.hasCurrentObject ()) {
        result << function_mangledNameForType (enumerator_514.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 11)), inCompiler COMMA_SOURCE_FILE ("function-declaration.galgasTemplate", 11)).stringValue () ;
        result << " " ;
        result << enumerator_514.current_mFormalArgumentName (HERE).stringValue () ;
        if (enumerator_514.hasNextObject ()) {
          result << ",\n" ;
          result.appendSpacesUntilColumn (columnMarker) ;
        }
        index_514_.increment () ;
        enumerator_514.gotoNextObject () ;
      }
    }
  }
  result << ") ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Filewrapper template 'functionGenerationTemplate implementation'                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_functionGenerationTemplate_implementation (C_Compiler * inCompiler,
                                                                             const GALGAS_string & in_FUNCTION_5F_NAME,
                                                                             const GALGAS_funcFormalArgumentListForGeneration & in_FORMAL_5F_ARGUMENT_5F_LIST,
                                                                             const GALGAS_instructionListIR & in_INSTRUCTION_5F_GENERATION_5F_LIST,
                                                                             const GALGAS_unifiedTypeMap_2D_proxy & in_RESULT_5F_TYPE,
                                                                             const GALGAS_string & in_RESULT_5F_VAR_5F_NAME
                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  uint32_t columnMarker = 0 ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("func ").add_operation (in_FUNCTION_5F_NAME, inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "static " ;
  result << function_mangledNameForType (in_RESULT_5F_TYPE.reader_key (inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 5)), inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 5)).stringValue () ;
  result << " " ;
  result << function_mangledNameForFunction (in_FUNCTION_5F_NAME, inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 5)).stringValue () ;
  result << " (" ;
  columnMarker = result.currentColumn () ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, in_FORMAL_5F_ARGUMENT_5F_LIST.reader_length (SOURCE_FILE ("function-implementation.galgasTemplate", 6)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << "void" ;
  }else if (kBoolFalse == test_0) {
    GALGAS_uint index_514_ (0) ;
    if (in_FORMAL_5F_ARGUMENT_5F_LIST.isValid ()) {
      cEnumerator_funcFormalArgumentListForGeneration enumerator_514 (in_FORMAL_5F_ARGUMENT_5F_LIST, kEnumeration_up) ;
      while (enumerator_514.hasCurrentObject ()) {
        result << function_mangledNameForType (enumerator_514.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 11)), inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 11)).stringValue () ;
        result << " " ;
        result << enumerator_514.current_mFormalArgumentName (HERE).stringValue () ;
        if (enumerator_514.hasNextObject ()) {
          result << ",\n" ;
          result.appendSpacesUntilColumn (columnMarker) ;
        }
        index_514_.increment () ;
        enumerator_514.gotoNextObject () ;
      }
    }
  }
  result << ") {\n"
    "  " ;
  result << function_mangledNameForType (in_RESULT_5F_TYPE.reader_key (inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 18)), inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 18)).stringValue () ;
  result << " " ;
  result << function_mangledNameForLocalVariable (in_RESULT_5F_VAR_5F_NAME, inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 18)).stringValue () ;
  result << " ;\n" ;
  result << categoryReader_instructionListCode (in_INSTRUCTION_5F_GENERATION_5F_LIST, inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 19)).stringValue () ;
  result << "  return " ;
  result << function_mangledNameForLocalVariable (in_RESULT_5F_VAR_5F_NAME, inCompiler COMMA_SOURCE_FILE ("function-implementation.galgasTemplate", 20)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Function 'mangledName'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledName (const GALGAS_procedureKindAST & constinArgument_inProcedureKind,
                                    const GALGAS_string & constinArgument_inProcedureName,
                                    GALGAS_procFormalArgumentList inArgument_inProcFormalArgumentList,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outMangledName ; // Returned variable
  result_outMangledName = GALGAS_string::makeEmptyString () ;
  switch (constinArgument_inProcedureKind.enumValue ()) {
  case GALGAS_procedureKindAST::kNotBuilt:
    break ;
  case GALGAS_procedureKindAST::kEnum_standAloneProc:
    {
    }
    break ;
  case GALGAS_procedureKindAST::kEnum_structureProc:
    {
      const cEnumAssociatedValues_procedureKindAST_structureProc * extractPtr_6848 = (const cEnumAssociatedValues_procedureKindAST_structureProc *) (constinArgument_inProcedureKind.unsafePointer ()) ;
      const GALGAS_lstring extractedValue_structureTypeName = extractPtr_6848->mAssociatedValue0 ;
      result_outMangledName.dotAssign_operation (extractedValue_structureTypeName.mAttribute_string.add_operation (GALGAS_string ("_"), inCompiler COMMA_SOURCE_FILE ("proc-declaration.galgas", 197))  COMMA_SOURCE_FILE ("proc-declaration.galgas", 197)) ;
    }
    break ;
  }
  result_outMangledName.dotAssign_operation (constinArgument_inProcedureName  COMMA_SOURCE_FILE ("proc-declaration.galgas", 199)) ;
  cEnumerator_procFormalArgumentList enumerator_6954 (inArgument_inProcFormalArgumentList, kEnumeration_up) ;
  while (enumerator_6954.hasCurrentObject ()) {
    switch (enumerator_6954.current_mFormalArgumentPassingMode (HERE).enumValue ()) {
    case GALGAS_procFormalArgumentPassingMode::kNotBuilt:
      break ;
    case GALGAS_procFormalArgumentPassingMode::kEnum_input:
      {
        result_outMangledName.dotAssign_operation (GALGAS_string ("\?")  COMMA_SOURCE_FILE ("proc-declaration.galgas", 202)) ;
      }
      break ;
    case GALGAS_procFormalArgumentPassingMode::kEnum_output:
      {
        result_outMangledName.dotAssign_operation (GALGAS_string ("!")  COMMA_SOURCE_FILE ("proc-declaration.galgas", 203)) ;
      }
      break ;
    case GALGAS_procFormalArgumentPassingMode::kEnum_inputOutput:
      {
        result_outMangledName.dotAssign_operation (GALGAS_string ("\?!")  COMMA_SOURCE_FILE ("proc-declaration.galgas", 204)) ;
      }
      break ;
    }
    result_outMangledName.dotAssign_operation (enumerator_6954.current_mSelector (HERE).mAttribute_string.add_operation (GALGAS_string (":"), inCompiler COMMA_SOURCE_FILE ("proc-declaration.galgas", 206))  COMMA_SOURCE_FILE ("proc-declaration.galgas", 206)) ;
    enumerator_6954.gotoNextObject () ;
  }
//---
  return result_outMangledName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledName [4] = {
  & kTypeDescriptor_GALGAS_procedureKindAST,
  & kTypeDescriptor_GALGAS_string,
  & kTypeDescriptor_GALGAS_procFormalArgumentList,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledName (C_Compiler * inCompiler,
                                                            const cObjectArray & inEffectiveParameterArray,
                                                            const GALGAS_location & /* §§ inErrorLocation */
                                                            COMMA_LOCATION_ARGS) {
  const GALGAS_procedureKindAST operand0 = GALGAS_procedureKindAST::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                   inCompiler
                                                                                   COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  const GALGAS_procFormalArgumentList operand2 = GALGAS_procFormalArgumentList::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                                                               inCompiler
                                                                                               COMMA_THERE) ;
  return function_mangledName (operand0,
                               operand1,
                               operand2,
                               inCompiler
                               COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledName ("mangledName",
                                                             functionWithGenericHeader_mangledName,
                                                             & kTypeDescriptor_GALGAS_string,
                                                             3,
                                                             functionArgs_mangledName) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Filewrapper 'procedureGenerationTemplate'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_procedureGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_procedureGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_procedureGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_procedureGenerationTemplate_0,
  0,
  gWrapperAllDirectories_procedureGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                           Filewrapper template 'procedureGenerationTemplate declaration'                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_procedureGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                           const GALGAS_string & in_PROCEDURE_5F_MANGLED_5F_NAME,
                                                                           const GALGAS_procFormalArgumentListForGeneration & in_FORMAL_5F_ARGUMENT_5F_LIST
                                                                           COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  uint32_t columnMarker = 0 ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("proc ").add_operation (in_PROCEDURE_5F_MANGLED_5F_NAME, inCompiler COMMA_SOURCE_FILE ("procedure-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("procedure-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "static void " ;
  result << in_PROCEDURE_5F_MANGLED_5F_NAME.stringValue () ;
  result << " (" ;
  columnMarker = result.currentColumn () ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, in_FORMAL_5F_ARGUMENT_5F_LIST.reader_length (SOURCE_FILE ("procedure-declaration.galgasTemplate", 6)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << "void" ;
  }else if (kBoolFalse == test_0) {
    GALGAS_uint index_458_ (0) ;
    if (in_FORMAL_5F_ARGUMENT_5F_LIST.isValid ()) {
      cEnumerator_procFormalArgumentListForGeneration enumerator_458 (in_FORMAL_5F_ARGUMENT_5F_LIST, kEnumeration_up) ;
      while (enumerator_458.hasCurrentObject ()) {
        result << function_mangledNameForType (enumerator_458.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("procedure-declaration.galgasTemplate", 11)), inCompiler COMMA_SOURCE_FILE ("procedure-declaration.galgasTemplate", 11)).stringValue () ;
        switch (enumerator_458.current_mFormalArgumentKind (HERE).enumValue ()) {
        case GALGAS_procFormalArgumentPassingMode::kNotBuilt :
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_input :
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_output :
        case GALGAS_procFormalArgumentPassingMode::kEnum_inputOutput :
          {
            result << " *" ;
          }
          break ;
        }
        result << " " ;
        result << enumerator_458.current_mFormalArgumentName (HERE).stringValue () ;
        if (enumerator_458.hasNextObject ()) {
          result << ",\n" ;
          result.appendSpacesUntilColumn (columnMarker) ;
        }
        index_458_.increment () ;
        enumerator_458.gotoNextObject () ;
      }
    }
  }
  result << ") ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Filewrapper template 'procedureGenerationTemplate implementation'                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_procedureGenerationTemplate_implementation (C_Compiler * inCompiler,
                                                                              const GALGAS_string & in_PROCEDURE_5F_MANGLED_5F_NAME,
                                                                              const GALGAS_procFormalArgumentListForGeneration & in_FORMAL_5F_ARGUMENT_5F_LIST,
                                                                              const GALGAS_instructionListIR & in_INSTRUCTION_5F_GENERATION_5F_LIST
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  uint32_t columnMarker = 0 ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("proc ").add_operation (in_PROCEDURE_5F_MANGLED_5F_NAME, inCompiler COMMA_SOURCE_FILE ("procedure-implementation.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("procedure-implementation.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "static void " ;
  result << in_PROCEDURE_5F_MANGLED_5F_NAME.stringValue () ;
  result << " (" ;
  columnMarker = result.currentColumn () ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, in_FORMAL_5F_ARGUMENT_5F_LIST.reader_length (SOURCE_FILE ("procedure-implementation.galgasTemplate", 6)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << "void" ;
  }else if (kBoolFalse == test_0) {
    GALGAS_uint index_458_ (0) ;
    if (in_FORMAL_5F_ARGUMENT_5F_LIST.isValid ()) {
      cEnumerator_procFormalArgumentListForGeneration enumerator_458 (in_FORMAL_5F_ARGUMENT_5F_LIST, kEnumeration_up) ;
      while (enumerator_458.hasCurrentObject ()) {
        result << function_mangledNameForType (enumerator_458.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("procedure-implementation.galgasTemplate", 11)), inCompiler COMMA_SOURCE_FILE ("procedure-implementation.galgasTemplate", 11)).stringValue () ;
        switch (enumerator_458.current_mFormalArgumentKind (HERE).enumValue ()) {
        case GALGAS_procFormalArgumentPassingMode::kNotBuilt :
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_input :
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_output :
        case GALGAS_procFormalArgumentPassingMode::kEnum_inputOutput :
          {
            result << " *" ;
          }
          break ;
        }
        result << " " ;
        result << enumerator_458.current_mFormalArgumentName (HERE).stringValue () ;
        if (enumerator_458.hasNextObject ()) {
          result << ",\n" ;
          result.appendSpacesUntilColumn (columnMarker) ;
        }
        index_458_.increment () ;
        enumerator_458.gotoNextObject () ;
      }
    }
  }
  result << ") {\n" ;
  result << categoryReader_instructionListCode (in_INSTRUCTION_5F_GENERATION_5F_LIST, inCompiler COMMA_SOURCE_FILE ("procedure-implementation.galgasTemplate", 22)).stringValue () ;
  result << "}\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Routine 'checkRequiredProcedures'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_checkRequiredProcedures (const GALGAS_ast constinArgument_inAST,
                                      const GALGAS_semanticContext constinArgument_inSemanticContext,
                                      const GALGAS_location constinArgument_inEndOfSourceFile,
                                      C_Compiler * inCompiler
                                      COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_requiredProcedureDeclarationListAST enumerator_1850 (constinArgument_inAST.mAttribute_mRequiredProcList, kEnumeration_up) ;
  while (enumerator_1850.hasCurrentObject ()) {
    GALGAS_string var_requiredProcMangledName = function_mangledName (GALGAS_procedureKindAST::constructor_standAloneProc (SOURCE_FILE ("required-proc-declaration.galgas", 43)), enumerator_1850.current (HERE).mAttribute_mRequiredProcedureName.mAttribute_string, enumerator_1850.current (HERE).mAttribute_mProcFormalArgumentList, inCompiler COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 42)) ;
    const enumGalgasBool test_0 = constinArgument_inSemanticContext.mAttribute_mProcedureMap.reader_hasKey (var_requiredProcMangledName COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 47)).operator_not (SOURCE_FILE ("required-proc-declaration.galgas", 47)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_string var_s = GALGAS_string ("the '").add_operation (enumerator_1850.current (HERE).mAttribute_mRequiredProcedureName.reader_string (SOURCE_FILE ("required-proc-declaration.galgas", 48)), inCompiler COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 48)).add_operation (GALGAS_string ("' should be defined as: proc"), inCompiler COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 48)) ;
      cEnumerator_lstringlist enumerator_2301 (enumerator_1850.current (HERE).mAttribute_mProcedureModeList, kEnumeration_up) ;
      while (enumerator_2301.hasCurrentObject ()) {
        var_s.dotAssign_operation (GALGAS_string (" $").add_operation (enumerator_2301.current_mValue (HERE).reader_string (SOURCE_FILE ("required-proc-declaration.galgas", 50)), inCompiler COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 50))  COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 50)) ;
        enumerator_2301.gotoNextObject () ;
      }
      var_s.dotAssign_operation (GALGAS_string (" ").add_operation (enumerator_1850.current (HERE).mAttribute_mRequiredProcedureName.reader_string (SOURCE_FILE ("required-proc-declaration.galgas", 52)), inCompiler COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 52))  COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 52)) ;
      cEnumerator_procFormalArgumentList enumerator_2446 (enumerator_1850.current (HERE).mAttribute_mProcFormalArgumentList, kEnumeration_up) ;
      while (enumerator_2446.hasCurrentObject ()) {
        var_s.dotAssign_operation (GALGAS_string (" ")  COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 54)) ;
        switch (enumerator_2446.current (HERE).mAttribute_mFormalArgumentPassingMode.enumValue ()) {
        case GALGAS_procFormalArgumentPassingMode::kNotBuilt:
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_input:
          {
            var_s.dotAssign_operation (GALGAS_string ("\?")  COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 56)) ;
          }
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_output:
          {
            var_s.dotAssign_operation (GALGAS_string ("!")  COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 57)) ;
          }
          break ;
        case GALGAS_procFormalArgumentPassingMode::kEnum_inputOutput:
          {
            var_s.dotAssign_operation (GALGAS_string ("\?!")  COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 58)) ;
          }
          break ;
        }
        const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, enumerator_2446.current (HERE).mAttribute_mSelector.mAttribute_string.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
        if (kBoolTrue == test_1) {
          var_s.dotAssign_operation (enumerator_2446.current (HERE).mAttribute_mSelector.mAttribute_string.add_operation (GALGAS_string (":"), inCompiler COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 61))  COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 61)) ;
        }
        var_s.dotAssign_operation (enumerator_2446.current (HERE).mAttribute_mFormalArgumentTypeName.mAttribute_string  COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 63)) ;
        enumerator_2446.gotoNextObject () ;
      }
      inCompiler->emitSemanticError (constinArgument_inEndOfSourceFile, var_s  COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 65)) ;
    }else if (kBoolFalse == test_0) {
      GALGAS_modeMap var_procModes ;
      GALGAS_bool joker_2906 ; // Joker input parameter
      GALGAS_procedureSignature joker_2924_2 ; // Joker input parameter
      GALGAS_bool joker_2924_1 ; // Joker input parameter
      constinArgument_inSemanticContext.mAttribute_mProcedureMap.method_searchKey (var_requiredProcMangledName.reader_nowhere (SOURCE_FILE ("required-proc-declaration.galgas", 67)), joker_2906, var_procModes, joker_2924_2, joker_2924_1, inCompiler COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 67)) ;
      GALGAS_stringset var_actualProcModeSet = var_procModes.reader_keySet (SOURCE_FILE ("required-proc-declaration.galgas", 68)) ;
      GALGAS_stringset var_requiredProcModeSet = GALGAS_stringset::constructor_setWithLStringList (enumerator_1850.current (HERE).mAttribute_mProcedureModeList  COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 69)) ;
      const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, var_actualProcModeSet.objectCompare (var_requiredProcModeSet)).boolEnum () ;
      if (kBoolTrue == test_2) {
        GALGAS_string var_s = GALGAS_string ("required modes:") ;
        cEnumerator_stringset enumerator_3203 (var_requiredProcModeSet, kEnumeration_up) ;
        while (enumerator_3203.hasCurrentObject ()) {
          var_s.dotAssign_operation (GALGAS_string (" $").add_operation (enumerator_3203.current_key (HERE), inCompiler COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 73))  COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 73)) ;
          enumerator_3203.gotoNextObject () ;
        }
        inCompiler->emitSemanticError (constinArgument_inSemanticContext.mAttribute_mProcedureMap.reader_locationForKey (var_requiredProcMangledName, inCompiler COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 75)), var_s  COMMA_SOURCE_FILE ("required-proc-declaration.galgas", 75)) ;
      }
    }
    enumerator_1850.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Filewrapper 'registerGenerationTemplate'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_registerGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_registerGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_registerGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_registerGenerationTemplate_0,
  0,
  gWrapperAllDirectories_registerGenerationTemplate_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            Filewrapper template 'registerGenerationTemplate declaration'                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_registerGenerationTemplate_declaration (C_Compiler * inCompiler,
                                                                          const GALGAS_string & in_REGISTER_5F_TYPE_5F_NAME,
                                                                          const GALGAS_string & in_REGISTER_5F_NAME,
                                                                          const GALGAS_uint_36__34_ & in_REGISTER_5F_ADDRESS
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//---------------------------------------------------------------------------------------------------------------------*\n"
    "//" ;
  result << GALGAS_string ("register ").add_operation (in_REGISTER_5F_NAME, inCompiler COMMA_SOURCE_FILE ("register-declaration.galgasTemplate", 2)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 117U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("register-declaration.galgasTemplate", 2)).stringValue () ;
  result << "*\n"
    "//---------------------------------------------------------------------------------------------------------------------*\n"
    "\n"
    "#define " ;
  result << function_mangledNameForRegister (in_REGISTER_5F_NAME, inCompiler COMMA_SOURCE_FILE ("register-declaration.galgasTemplate", 5)).stringValue () ;
  result << " (* ((volatile " ;
  result << function_mangledNameForType (in_REGISTER_5F_TYPE_5F_NAME, inCompiler COMMA_SOURCE_FILE ("register-declaration.galgasTemplate", 5)).stringValue () ;
  result << " *) " ;
  result << in_REGISTER_5F_ADDRESS.reader_hexString (SOURCE_FILE ("register-declaration.galgasTemplate", 5)).stringValue () ;
  result << "))\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Function 'initialVariableMap'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap function_initialVariableMap (const GALGAS_string & constinArgument_inMangledName,
                                                const GALGAS_semanticContext & constinArgument_inContext,
                                                GALGAS_bool inArgument_inGlobalsAreConstant,
                                                C_Compiler * inCompiler
                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_variableMap result_outVariableMap ; // Returned variable
  result_outVariableMap = GALGAS_variableMap::constructor_emptyMap (SOURCE_FILE ("variable-map.galgas", 62)) ;
  GALGAS_procFormalArgumentListForGeneration var_formalArguments = GALGAS_procFormalArgumentListForGeneration::constructor_emptyList (SOURCE_FILE ("variable-map.galgas", 63)) ;
  cEnumerator_registerMap enumerator_2343 (constinArgument_inContext.mAttribute_mRegisterMap, kEnumeration_up) ;
  while (enumerator_2343.hasCurrentObject ()) {
    GALGAS_bool test_0 = enumerator_2343.current_mIsReadOnly (HERE) ;
    if (kBoolTrue != test_0.boolEnum ()) {
      test_0 = inArgument_inGlobalsAreConstant ;
    }
    const enumGalgasBool test_1 = test_0.boolEnum () ;
    if (kBoolTrue == test_1) {
      {
      result_outVariableMap.modifier_insertUsedLocalConstant (enumerator_2343.current_lkey (HERE), enumerator_2343.current_mType (HERE), GALGAS_bool (true), function_mangledNameForRegister (enumerator_2343.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 70)), GALGAS_variableKindIR::constructor_register (enumerator_2343.current_lkey (HERE).mAttribute_string  COMMA_SOURCE_FILE ("variable-map.galgas", 71)), GALGAS_bool (true), enumerator_2343.current_mRegisterFieldAccessMap (HERE), GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 66)) ;
      }
    }else if (kBoolFalse == test_1) {
      {
      result_outVariableMap.modifier_insertDefinedLocalVariable (enumerator_2343.current_lkey (HERE), enumerator_2343.current_mType (HERE), GALGAS_bool (true), function_mangledNameForRegister (enumerator_2343.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 81)), GALGAS_variableKindIR::constructor_register (enumerator_2343.current_lkey (HERE).mAttribute_string  COMMA_SOURCE_FILE ("variable-map.galgas", 82)), GALGAS_bool (true), enumerator_2343.current_mRegisterFieldAccessMap (HERE), GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 77)) ;
      }
    }
    enumerator_2343.gotoNextObject () ;
  }
  cEnumerator_globalConstantMap enumerator_3103 (constinArgument_inContext.mAttribute_mGlobalConstantMap, kEnumeration_up) ;
  while (enumerator_3103.hasCurrentObject ()) {
    {
    result_outVariableMap.modifier_insertUsedLocalConstant (enumerator_3103.current_lkey (HERE), enumerator_3103.current_mConstantType (HERE), GALGAS_bool (true), function_mangledNameForConstant (enumerator_3103.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 95)), enumerator_3103.current_mExpressionCode (HERE), GALGAS_bool (true), GALGAS_registerBitSliceAccessMap::constructor_emptyMap (SOURCE_FILE ("variable-map.galgas", 98)), GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 91)) ;
    }
    enumerator_3103.gotoNextObject () ;
  }
  cEnumerator_globalVariableMap enumerator_3489 (constinArgument_inContext.mAttribute_mGlobalVariableMap, kEnumeration_up) ;
  while (enumerator_3489.hasCurrentObject ()) {
    GALGAS_bool var_allowedAccess = enumerator_3489.current_mAllowedProcedureMap (HERE).reader_hasKey (constinArgument_inMangledName COMMA_SOURCE_FILE ("variable-map.galgas", 104)) ;
    GALGAS_bool var_writeAccess = GALGAS_bool (false) ;
    const enumGalgasBool test_2 = var_allowedAccess.boolEnum () ;
    if (kBoolTrue == test_2) {
      var_writeAccess = enumerator_3489.current_mAllowedProcedureMap (HERE).reader_mHasWriteAccessForKey (constinArgument_inMangledName, inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 107)) ;
    }
    GALGAS_bool test_3 = inArgument_inGlobalsAreConstant ;
    if (kBoolTrue != test_3.boolEnum ()) {
      test_3 = var_writeAccess.operator_not (SOURCE_FILE ("variable-map.galgas", 109)) ;
    }
    const enumGalgasBool test_4 = test_3.boolEnum () ;
    if (kBoolTrue == test_4) {
      {
      result_outVariableMap.modifier_insertUsedLocalConstant (enumerator_3489.current_lkey (HERE), enumerator_3489.current_mVariableType (HERE), var_allowedAccess, function_mangledNameForGlobalVariable (enumerator_3489.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 114)), GALGAS_variableKindIR::constructor_globalVariable (enumerator_3489.current_lkey (HERE).mAttribute_string  COMMA_SOURCE_FILE ("variable-map.galgas", 115)), GALGAS_bool (true), GALGAS_registerBitSliceAccessMap::constructor_emptyMap (SOURCE_FILE ("variable-map.galgas", 117)), GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 110)) ;
      }
    }else if (kBoolFalse == test_4) {
      {
      result_outVariableMap.modifier_insertGlobalVariable (enumerator_3489.current_lkey (HERE), enumerator_3489.current_mVariableType (HERE), var_allowedAccess, function_mangledNameForGlobalVariable (enumerator_3489.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 125)), GALGAS_variableKindIR::constructor_globalVariable (enumerator_3489.current_lkey (HERE).mAttribute_string  COMMA_SOURCE_FILE ("variable-map.galgas", 126)), GALGAS_bool (true), GALGAS_registerBitSliceAccessMap::constructor_emptyMap (SOURCE_FILE ("variable-map.galgas", 128)), GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 121)) ;
      }
    }
    enumerator_3489.gotoNextObject () ;
  }
//---
  return result_outVariableMap ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_initialVariableMap [4] = {
  & kTypeDescriptor_GALGAS_string,
  & kTypeDescriptor_GALGAS_semanticContext,
  & kTypeDescriptor_GALGAS_bool,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_initialVariableMap (C_Compiler * inCompiler,
                                                                   const cObjectArray & inEffectiveParameterArray,
                                                                   const GALGAS_location & /* §§ inErrorLocation */
                                                                   COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  const GALGAS_semanticContext operand1 = GALGAS_semanticContext::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                                 inCompiler
                                                                                 COMMA_THERE) ;
  const GALGAS_bool operand2 = GALGAS_bool::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                           inCompiler
                                                           COMMA_THERE) ;
  return function_initialVariableMap (operand0,
                                      operand1,
                                      operand2,
                                      inCompiler
                                      COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_initialVariableMap ("initialVariableMap",
                                                                    functionWithGenericHeader_initialVariableMap,
                                                                    & kTypeDescriptor_GALGAS_variableMap,
                                                                    3,
                                                                    functionArgs_initialVariableMap) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Function 'variableMapWithConstants'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_variableMap function_variableMapWithConstants (const GALGAS_semanticContext & constinArgument_inContext,
                                                      C_Compiler * inCompiler
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_variableMap result_outVariableMap ; // Returned variable
  result_outVariableMap = GALGAS_variableMap::constructor_emptyMap (SOURCE_FILE ("variable-map.galgas", 141)) ;
  cEnumerator_globalConstantMap enumerator_4779 (constinArgument_inContext.mAttribute_mGlobalConstantMap, kEnumeration_up) ;
  while (enumerator_4779.hasCurrentObject ()) {
    {
    result_outVariableMap.modifier_insertUsedLocalConstant (enumerator_4779.current_lkey (HERE), enumerator_4779.current_mConstantType (HERE), GALGAS_bool (true), function_mangledNameForConstant (enumerator_4779.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 148)), enumerator_4779.current_mExpressionCode (HERE), GALGAS_bool (true), GALGAS_registerBitSliceAccessMap::constructor_emptyMap (SOURCE_FILE ("variable-map.galgas", 151)), GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE ("variable-map.galgas", 144)) ;
    }
    enumerator_4779.gotoNextObject () ;
  }
//---
  return result_outVariableMap ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_variableMapWithConstants [2] = {
  & kTypeDescriptor_GALGAS_semanticContext,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_variableMapWithConstants (C_Compiler * inCompiler,
                                                                         const cObjectArray & inEffectiveParameterArray,
                                                                         const GALGAS_location & /* §§ inErrorLocation */
                                                                         COMMA_LOCATION_ARGS) {
  const GALGAS_semanticContext operand0 = GALGAS_semanticContext::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                 inCompiler
                                                                                 COMMA_THERE) ;
  return function_variableMapWithConstants (operand0,
                                            inCompiler
                                            COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_variableMapWithConstants ("variableMapWithConstants",
                                                                          functionWithGenericHeader_variableMapWithConstants,
                                                                          & kTypeDescriptor_GALGAS_variableMap,
                                                                          1,
                                                                          functionArgs_variableMapWithConstants) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Routine 'getNewTempVariable'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_getNewTempVariable (GALGAS_semanticTemporariesStruct & ioArgument_ioTemporaries,
                                 GALGAS_variableKindIR & outArgument_outTempVariable,
                                 C_Compiler * inCompiler
                                 COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outTempVariable.drop () ; // Release 'out' argument
  outArgument_outTempVariable = GALGAS_variableKindIR::constructor_temporaryConstant (ioArgument_ioTemporaries.mAttribute_mTemporaryIndex  COMMA_SOURCE_FILE ("variable-map.galgas", 163)) ;
  ioArgument_ioTemporaries.mAttribute_mTemporaryIndex.increment_operation (inCompiler  COMMA_SOURCE_FILE ("variable-map.galgas", 164)) ;
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'buildOrderedDeclarationList'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_buildOrderedDeclarationList (GALGAS_ast inArgument_inAST,
                                          GALGAS_location inArgument_inEndOfSourceFile,
                                          GALGAS_declarationListAST & outArgument_outDeclarationListAST,
                                          C_Compiler * inCompiler
                                          COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outDeclarationListAST.drop () ; // Release 'out' argument
  GALGAS_semanticTypePrecedenceGraph var_precedenceGraph = GALGAS_semanticTypePrecedenceGraph::constructor_emptyGraph (SOURCE_FILE ("ordered-declaration-list.galgas", 27)) ;
  cEnumerator_declarationListAST enumerator_1584 (inArgument_inAST.mAttribute_mDeclarationList, kEnumeration_up) ;
  while (enumerator_1584.hasCurrentObject ()) {
    callCategoryMethod_enterInPrecedenceGraph ((const cPtr_abstractDeclaration *) enumerator_1584.current_mDeclaration (HERE).ptr (), var_precedenceGraph, inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 29)) ;
    enumerator_1584.gotoNextObject () ;
  }
  cEnumerator_procedureDeclarationListAST enumerator_1698 (inArgument_inAST.mAttribute_mProcedureListAST, kEnumeration_up) ;
  while (enumerator_1698.hasCurrentObject ()) {
    categoryMethod_enterInPrecedenceGraph (enumerator_1698.current (HERE), var_precedenceGraph, inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 32)) ;
    enumerator_1698.gotoNextObject () ;
  }
  outArgument_outDeclarationListAST = GALGAS_declarationListAST::constructor_emptyList (SOURCE_FILE ("ordered-declaration-list.galgas", 35)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, var_precedenceGraph.reader_undefinedNodeCount (SOURCE_FILE ("ordered-declaration-list.galgas", 36)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    cEnumerator_lstringlist enumerator_1911 (var_precedenceGraph.reader_undefinedNodeReferenceList (SOURCE_FILE ("ordered-declaration-list.galgas", 37)), kEnumeration_up) ;
    while (enumerator_1911.hasCurrentObject ()) {
      GALGAS_location location_1 (enumerator_1911.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, GALGAS_string ("the '").add_operation (enumerator_1911.current_mValue (HERE).reader_string (SOURCE_FILE ("ordered-declaration-list.galgas", 38)), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 38)).add_operation (GALGAS_string ("' type is not defined"), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 38))  COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 38)) ;
      enumerator_1911.gotoNextObject () ;
    }
  }else if (kBoolFalse == test_0) {
    GALGAS_declarationListAST var_unsortedSemanticDeclarationListAST ;
    GALGAS_lstringlist joker_2067 ; // Joker input parameter
    GALGAS_lstringlist joker_2142 ; // Joker input parameter
    var_precedenceGraph.method_topologicalSort (outArgument_outDeclarationListAST, joker_2067, var_unsortedSemanticDeclarationListAST, joker_2142, inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 41)) ;
    const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, var_unsortedSemanticDeclarationListAST.reader_length (SOURCE_FILE ("ordered-declaration-list.galgas", 47)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_string var_s = GALGAS_string ("semantic analysis not performed, ").add_operation (var_unsortedSemanticDeclarationListAST.reader_length (SOURCE_FILE ("ordered-declaration-list.galgas", 49)).reader_string (SOURCE_FILE ("ordered-declaration-list.galgas", 48)), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 48)).add_operation (GALGAS_string (" declarations are involved in circular definition:"), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 49)) ;
      cEnumerator_declarationListAST enumerator_2436 (var_unsortedSemanticDeclarationListAST, kEnumeration_up) ;
      while (enumerator_2436.hasCurrentObject ()) {
        var_s.dotAssign_operation (GALGAS_string ("\n"
          "-  ").add_operation (callCategoryReader_keyRepresentation ((const cPtr_abstractDeclaration *) enumerator_2436.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 52)), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 52))  COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 52)) ;
        enumerator_2436.gotoNextObject () ;
      }
      inCompiler->emitSemanticError (inArgument_inEndOfSourceFile, var_s  COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 54)) ;
      cEnumerator_declarationListAST enumerator_2591 (var_unsortedSemanticDeclarationListAST, kEnumeration_up) ;
      while (enumerator_2591.hasCurrentObject ()) {
        inCompiler->emitSemanticError (callCategoryReader_location ((const cPtr_abstractDeclaration *) enumerator_2591.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 56)), GALGAS_string ("the ").add_operation (callCategoryReader_keyRepresentation ((const cPtr_abstractDeclaration *) enumerator_2591.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 56)), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 56)).add_operation (GALGAS_string (" is declared here"), inCompiler COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 56))  COMMA_SOURCE_FILE ("ordered-declaration-list.galgas", 56)) ;
        enumerator_2591.gotoNextObject () ;
      }
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 Routine 'checkMode'                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_checkMode (const GALGAS_stringset constinArgument_inRequiredModes,
                        const GALGAS_stringset constinArgument_inPossibleModes,
                        const GALGAS_location constinArgument_inErrorLocation,
                        C_Compiler * inCompiler
                        COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, constinArgument_inPossibleModes.operator_and (constinArgument_inRequiredModes COMMA_SOURCE_FILE ("semantic-context.galgas", 92)).objectCompare (constinArgument_inRequiredModes)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_stringset var_missingModes = constinArgument_inRequiredModes.substract_operation (constinArgument_inPossibleModes, inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 93)) ;
    GALGAS_string var_s = GALGAS_string ("cannot be accessed in mode") ;
    GALGAS_string temp_1 ;
    const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, var_missingModes.reader_count (SOURCE_FILE ("semantic-context.galgas", 95)).objectCompare (GALGAS_uint ((uint32_t) 1U))).boolEnum () ;
    if (kBoolTrue == test_2) {
      temp_1 = GALGAS_string ("s") ;
    }else if (kBoolFalse == test_2) {
      temp_1 = GALGAS_string::makeEmptyString () ;
    }
    var_s.dotAssign_operation (temp_1  COMMA_SOURCE_FILE ("semantic-context.galgas", 95)) ;
    var_s.dotAssign_operation (GALGAS_string (": ")  COMMA_SOURCE_FILE ("semantic-context.galgas", 96)) ;
    cEnumerator_stringset enumerator_4032 (var_missingModes, kEnumeration_up) ;
    while (enumerator_4032.hasCurrentObject ()) {
      var_s.dotAssign_operation (GALGAS_string ("$").add_operation (enumerator_4032.current_key (HERE), inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 98))  COMMA_SOURCE_FILE ("semantic-context.galgas", 98)) ;
      if (enumerator_4032.hasNextObject ()) {
        var_s.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("semantic-context.galgas", 99)) ;
      }
      enumerator_4032.gotoNextObject () ;
    }
    inCompiler->emitSemanticError (constinArgument_inErrorLocation, var_s  COMMA_SOURCE_FILE ("semantic-context.galgas", 101)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Routine 'buildSemanticContext'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_buildSemanticContext (const GALGAS_declarationListAST constinArgument_inDeclarationListAST,
                                   const GALGAS_ast constinArgument_inAST,
                                   GALGAS_globalLiteralStringMap & ioArgument_ioGlobalLiteralStringMap,
                                   GALGAS_semanticContext & outArgument_outSemanticContext,
                                   C_Compiler * inCompiler
                                   COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outSemanticContext.drop () ; // Release 'out' argument
  outArgument_outSemanticContext = GALGAS_semanticContext::constructor_default (SOURCE_FILE ("semantic-context.galgas", 193)) ;
  {
  outArgument_outSemanticContext.mAttribute_mModeMap.modifier_insertKey (GALGAS_string ("boot").reader_nowhere (SOURCE_FILE ("semantic-context.galgas", 195)), inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 195)) ;
  }
  {
  outArgument_outSemanticContext.mAttribute_mModeMap.modifier_insertKey (GALGAS_string ("init").reader_nowhere (SOURCE_FILE ("semantic-context.galgas", 196)), inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 196)) ;
  }
  {
  outArgument_outSemanticContext.mAttribute_mModeMap.modifier_insertKey (GALGAS_string ("exception").reader_nowhere (SOURCE_FILE ("semantic-context.galgas", 197)), inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 197)) ;
  }
  cEnumerator_initList enumerator_8101 (constinArgument_inAST.mAttribute_mInitList, kEnumeration_up) ;
  while (enumerator_8101.hasCurrentObject ()) {
    categoryMethod_enterInContext (enumerator_8101.current (HERE), outArgument_outSemanticContext, inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 200)) ;
    enumerator_8101.gotoNextObject () ;
  }
  cEnumerator_exceptionClauseListAST enumerator_8263 (constinArgument_inAST.mAttribute_mExceptionClauses, kEnumeration_up) ;
  while (enumerator_8263.hasCurrentObject ()) {
    categoryMethod_enterInContext (enumerator_8263.current (HERE), outArgument_outSemanticContext, inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 206)) ;
    enumerator_8263.gotoNextObject () ;
  }
  cEnumerator_declarationListAST enumerator_8399 (constinArgument_inDeclarationListAST, kEnumeration_up) ;
  while (enumerator_8399.hasCurrentObject ()) {
    callCategoryMethod_enterInContext ((const cPtr_abstractDeclaration *) enumerator_8399.current_mDeclaration (HERE).ptr (), constinArgument_inAST.mAttribute_mProcedureListAST, outArgument_outSemanticContext, ioArgument_ioGlobalLiteralStringMap, inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 212)) ;
    enumerator_8399.gotoNextObject () ;
  }
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, constinArgument_inAST.mAttribute_mExceptionTypes.reader_length (SOURCE_FILE ("semantic-context.galgas", 219)).objectCompare (GALGAS_uint ((uint32_t) 1U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (GALGAS_string::makeEmptyString ().reader_nowhere (SOURCE_FILE ("semantic-context.galgas", 220)).reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("exactly one exception type declaration should be provided (found:").add_operation (constinArgument_inAST.mAttribute_mExceptionTypes.reader_length (SOURCE_FILE ("semantic-context.galgas", 221)).reader_string (SOURCE_FILE ("semantic-context.galgas", 221)), inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 221)).add_operation (GALGAS_string (")"), inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 221))  COMMA_SOURCE_FILE ("semantic-context.galgas", 220)) ;
    cEnumerator_exceptionTypesAST enumerator_8831 (constinArgument_inAST.mAttribute_mExceptionTypes, kEnumeration_up) ;
    while (enumerator_8831.hasCurrentObject ()) {
      GALGAS_location location_2 (enumerator_8831.current_mExceptionCodeTypeName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_2, GALGAS_string ("exception type declaration is here")  COMMA_SOURCE_FILE ("semantic-context.galgas", 223)) ;
      enumerator_8831.gotoNextObject () ;
    }
  }else if (kBoolFalse == test_0) {
    GALGAS_lstring var_exceptionCodeTypeName ;
    GALGAS_lstring var_exceptionLineTypeName ;
    constinArgument_inAST.mAttribute_mExceptionTypes.method_first (var_exceptionCodeTypeName, var_exceptionLineTypeName, inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 226)) ;
    outArgument_outSemanticContext.mAttribute_mExceptionCodeType = GALGAS_unifiedTypeMap_2D_proxy::constructor_searchKey (outArgument_outSemanticContext.mAttribute_mTypeMap, var_exceptionCodeTypeName, inCompiler  COMMA_SOURCE_FILE ("semantic-context.galgas", 227)) ;
    outArgument_outSemanticContext.mAttribute_mExceptionLineType = GALGAS_unifiedTypeMap_2D_proxy::constructor_searchKey (outArgument_outSemanticContext.mAttribute_mTypeMap, var_exceptionLineTypeName, inCompiler  COMMA_SOURCE_FILE ("semantic-context.galgas", 231)) ;
  }
  cEnumerator_procedureDeclarationListAST enumerator_9377 (constinArgument_inAST.mAttribute_mProcedureListAST, kEnumeration_up) ;
  while (enumerator_9377.hasCurrentObject ()) {
    categoryMethod_enterInContext (enumerator_9377.current (HERE), outArgument_outSemanticContext, inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 238)) ;
    enumerator_9377.gotoNextObject () ;
  }
  cEnumerator_functionDeclarationListAST enumerator_9493 (constinArgument_inAST.mAttribute_mFunctionListAST, kEnumeration_up) ;
  while (enumerator_9493.hasCurrentObject ()) {
    categoryMethod_enterInContext (enumerator_9493.current (HERE), outArgument_outSemanticContext, inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 242)) ;
    enumerator_9493.gotoNextObject () ;
  }
  const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("semantic-context.galgas", 245)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_3) {
    cEnumerator_requiredProcedureDeclarationListAST enumerator_9673 (constinArgument_inAST.mAttribute_mRequiredProcList, kEnumeration_up) ;
    while (enumerator_9673.hasCurrentObject ()) {
      cEnumerator_lstringlist enumerator_9728 (enumerator_9673.current (HERE).mAttribute_mProcedureModeList, kEnumeration_up) ;
      while (enumerator_9728.hasCurrentObject ()) {
        outArgument_outSemanticContext.mAttribute_mModeMap.method_searchKey (enumerator_9728.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 248)) ;
        enumerator_9728.gotoNextObject () ;
      }
      enumerator_9673.gotoNextObject () ;
    }
  }
  cEnumerator_globalVarDeclarationList enumerator_9894 (constinArgument_inAST.mAttribute_mGlobalVarDeclarationList, kEnumeration_up) ;
  while (enumerator_9894.hasCurrentObject ()) {
    categoryMethod_enterInContext (enumerator_9894.current (HERE), outArgument_outSemanticContext, ioArgument_ioGlobalLiteralStringMap, inCompiler COMMA_SOURCE_FILE ("semantic-context.galgas", 254)) ;
    enumerator_9894.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Function 'solveInferredType'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_unifiedTypeMap_2D_proxy function_solveInferredType (const GALGAS_unifiedTypeMap_2D_proxy & constinArgument_inTargetType,
                                                           const GALGAS_unifiedTypeMap_2D_proxy & constinArgument_inSourceType,
                                                           const GALGAS_location & constinArgument_inErrorLocation,
                                                           C_Compiler * inCompiler
                                                           COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_unifiedTypeMap_2D_proxy result_outType ; // Returned variable
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, constinArgument_inSourceType.objectCompare (GALGAS_unifiedTypeMap_2D_proxy::constructor_null (SOURCE_FILE ("semantic-context.galgas", 269)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, constinArgument_inTargetType.objectCompare (GALGAS_unifiedTypeMap_2D_proxy::constructor_null (SOURCE_FILE ("semantic-context.galgas", 270)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      inCompiler->emitSemanticError (constinArgument_inErrorLocation, GALGAS_string ("Cannot infer type")  COMMA_SOURCE_FILE ("semantic-context.galgas", 271)) ;
      result_outType.drop () ; // Release error dropped variable
    }else if (kBoolFalse == test_1) {
      result_outType = constinArgument_inTargetType ;
    }
  }else if (kBoolFalse == test_0) {
    result_outType = constinArgument_inSourceType ;
  }
//---
  return result_outType ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_solveInferredType [4] = {
  & kTypeDescriptor_GALGAS_unifiedTypeMap_2D_proxy,
  & kTypeDescriptor_GALGAS_unifiedTypeMap_2D_proxy,
  & kTypeDescriptor_GALGAS_location,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_solveInferredType (C_Compiler * inCompiler,
                                                                  const cObjectArray & inEffectiveParameterArray,
                                                                  const GALGAS_location & /* §§ inErrorLocation */
                                                                  COMMA_LOCATION_ARGS) {
  const GALGAS_unifiedTypeMap_2D_proxy operand0 = GALGAS_unifiedTypeMap_2D_proxy::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                                 inCompiler
                                                                                                 COMMA_THERE) ;
  const GALGAS_unifiedTypeMap_2D_proxy operand1 = GALGAS_unifiedTypeMap_2D_proxy::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                                                 inCompiler
                                                                                                 COMMA_THERE) ;
  const GALGAS_location operand2 = GALGAS_location::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                                   inCompiler
                                                                   COMMA_THERE) ;
  return function_solveInferredType (operand0,
                                     operand1,
                                     operand2,
                                     inCompiler
                                     COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_solveInferredType ("solveInferredType",
                                                                   functionWithGenericHeader_solveInferredType,
                                                                   & kTypeDescriptor_GALGAS_unifiedTypeMap_2D_proxy,
                                                                   3,
                                                                   functionArgs_solveInferredType) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Routine 'checkAssignmentCompatibility'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_checkAssignmentCompatibility (const GALGAS_unifiedTypeMap_2D_proxy constinArgument_inSourceType,
                                           const GALGAS_unifiedTypeMap_2D_proxy constinArgument_inTargetType,
                                           const GALGAS_location constinArgument_inErrorLocation,
                                           C_Compiler * inCompiler
                                           COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, constinArgument_inTargetType.objectCompare (constinArgument_inSourceType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_bool var_ok = GALGAS_bool (false) ;
    const enumGalgasBool test_1 = constinArgument_inSourceType.reader_kind (inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 14)).reader_isBoolean (SOURCE_FILE ("semantic-analysis.galgas", 14)).boolEnum () ;
    if (kBoolTrue == test_1) {
      var_ok = constinArgument_inTargetType.reader_kind (inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 15)).reader_isInteger (SOURCE_FILE ("semantic-analysis.galgas", 15)) ;
    }else if (kBoolFalse == test_1) {
      GALGAS_bool test_2 = constinArgument_inSourceType.reader_kind (inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 16)).reader_isInteger (SOURCE_FILE ("semantic-analysis.galgas", 16)) ;
      if (kBoolTrue == test_2.boolEnum ()) {
        test_2 = constinArgument_inTargetType.reader_kind (inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 16)).reader_isInteger (SOURCE_FILE ("semantic-analysis.galgas", 16)) ;
      }
      const enumGalgasBool test_3 = test_2.boolEnum () ;
      if (kBoolTrue == test_3) {
        GALGAS_sint_36__34_ var_minSource ;
        GALGAS_uint_36__34_ var_maxSource ;
        GALGAS_bool joker_1108 ; // Joker input parameter
        GALGAS_uint joker_1120 ; // Joker input parameter
        constinArgument_inSourceType.reader_kind (inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 17)).method_integer (var_minSource, var_maxSource, joker_1108, joker_1120, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 17)) ;
        GALGAS_sint_36__34_ var_minTarget ;
        GALGAS_uint_36__34_ var_maxTarget ;
        GALGAS_bool joker_1206 ; // Joker input parameter
        GALGAS_uint joker_1218 ; // Joker input parameter
        constinArgument_inTargetType.reader_kind (inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 18)).method_integer (var_minTarget, var_maxTarget, joker_1206, joker_1218, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 18)) ;
        GALGAS_bool test_4 = GALGAS_bool (kIsInfOrEqual, var_minTarget.objectCompare (var_minSource)) ;
        if (kBoolTrue == test_4.boolEnum ()) {
          test_4 = GALGAS_bool (kIsSupOrEqual, var_maxTarget.objectCompare (var_maxSource)) ;
        }
        var_ok = test_4 ;
      }
    }
    const enumGalgasBool test_5 = var_ok.operator_not (SOURCE_FILE ("semantic-analysis.galgas", 21)).boolEnum () ;
    if (kBoolTrue == test_5) {
      inCompiler->emitSemanticError (constinArgument_inErrorLocation, GALGAS_string ("object of type ").add_operation (constinArgument_inTargetType.reader_key (inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 23)), inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 23)).add_operation (GALGAS_string (" cannot be assigned from expression of type "), inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 23)).add_operation (constinArgument_inSourceType.reader_key (inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 23)), inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 23))  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 22)) ;
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             Routine 'semanticAnalysis'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_semanticAnalysis (const GALGAS_string constinArgument_inSourceFile,
                               const GALGAS_ast constinArgument_inAST,
                               const GALGAS_semanticContext constinArgument_inSemanticContext,
                               const GALGAS_location constinArgument_inEndOfSourceFile,
                               const GALGAS_globalLiteralStringMap constinArgument_inGlobalLiteralStringMap,
                               GALGAS_intermediateCodeStruct & outArgument_outIntermediateCodeStruct,
                               C_Compiler * inCompiler
                               COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outIntermediateCodeStruct.drop () ; // Release 'out' argument
  outArgument_outIntermediateCodeStruct = GALGAS_intermediateCodeStruct::constructor_default (SOURCE_FILE ("semantic-analysis.galgas", 55)) ;
  outArgument_outIntermediateCodeStruct.mAttribute_mGlobalLiteralStringMap = constinArgument_inGlobalLiteralStringMap ;
  cEnumerator_requiredProcedureDeclarationListAST enumerator_2848 (constinArgument_inAST.mAttribute_mRequiredProcList, kEnumeration_up) ;
  while (enumerator_2848.hasCurrentObject ()) {
    outArgument_outIntermediateCodeStruct.mAttribute_mRequiredProcedureSet.addAssign_operation (enumerator_2848.current (HERE).mAttribute_mRequiredProcedureName.mAttribute_string  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 58)) ;
    enumerator_2848.gotoNextObject () ;
  }
  cEnumerator_globalVarDeclarationList enumerator_3030 (constinArgument_inAST.mAttribute_mGlobalVarDeclarationList, kEnumeration_up) ;
  while (enumerator_3030.hasCurrentObject ()) {
    categoryMethod_semanticAnalysis (enumerator_3030.current (HERE), constinArgument_inSemanticContext, outArgument_outIntermediateCodeStruct, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 62)) ;
    enumerator_3030.gotoNextObject () ;
  }
  cEnumerator_declarationListAST enumerator_3208 (constinArgument_inAST.mAttribute_mDeclarationList, kEnumeration_up) ;
  while (enumerator_3208.hasCurrentObject ()) {
    callCategoryMethod_semanticAnalysis ((const cPtr_abstractDeclaration *) enumerator_3208.current_mDeclaration (HERE).ptr (), constinArgument_inSemanticContext, outArgument_outIntermediateCodeStruct, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 68)) ;
    enumerator_3208.gotoNextObject () ;
  }
  GALGAS_semanticTemporariesStruct var_temporaries = GALGAS_semanticTemporariesStruct::constructor_default (SOURCE_FILE ("semantic-analysis.galgas", 73)) ;
  cEnumerator_procedureDeclarationListAST enumerator_3437 (constinArgument_inAST.mAttribute_mProcedureListAST, kEnumeration_up) ;
  while (enumerator_3437.hasCurrentObject ()) {
    categoryMethod_procedureSemanticAnalysis (enumerator_3437.current (HERE), constinArgument_inSemanticContext, var_temporaries, outArgument_outIntermediateCodeStruct, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 75)) ;
    enumerator_3437.gotoNextObject () ;
  }
  cEnumerator_functionDeclarationListAST enumerator_3648 (constinArgument_inAST.mAttribute_mFunctionListAST, kEnumeration_up) ;
  while (enumerator_3648.hasCurrentObject ()) {
    categoryMethod_functionSemanticAnalysis (enumerator_3648.current (HERE), constinArgument_inSemanticContext, var_temporaries, outArgument_outIntermediateCodeStruct, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 82)) ;
    enumerator_3648.gotoNextObject () ;
  }
  cEnumerator_bootList enumerator_3846 (constinArgument_inAST.mAttribute_mBootList, kEnumeration_up) ;
  while (enumerator_3846.hasCurrentObject ()) {
    categoryMethod_bootSemanticAnalysis (enumerator_3846.current (HERE), constinArgument_inSemanticContext, var_temporaries, outArgument_outIntermediateCodeStruct, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 89)) ;
    enumerator_3846.gotoNextObject () ;
  }
  cEnumerator_initList enumerator_4036 (constinArgument_inAST.mAttribute_mInitList, kEnumeration_up) ;
  while (enumerator_4036.hasCurrentObject ()) {
    categoryMethod_initSemanticAnalysis (enumerator_4036.current (HERE), constinArgument_inSemanticContext, var_temporaries, outArgument_outIntermediateCodeStruct, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 96)) ;
    enumerator_4036.gotoNextObject () ;
  }
  cEnumerator_exceptionClauseListAST enumerator_4239 (constinArgument_inAST.mAttribute_mExceptionClauses, kEnumeration_up) ;
  while (enumerator_4239.hasCurrentObject ()) {
    categoryMethod_exceptionSemanticAnalysis (enumerator_4239.current (HERE), constinArgument_inSemanticContext, var_temporaries, outArgument_outIntermediateCodeStruct, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 103)) ;
    enumerator_4239.gotoNextObject () ;
  }
  {
  routine_checkRequiredProcedures (constinArgument_inAST, constinArgument_inSemanticContext, constinArgument_inEndOfSourceFile, inCompiler  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 110)) ;
  }
  GALGAS_bool test_0 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("semantic-analysis.galgas", 116)).objectCompare (GALGAS_uint ((uint32_t) 0U))) ;
  if (kBoolTrue == test_0.boolEnum ()) {
    test_0 = GALGAS_bool (gOption_plm_5F_options_writeRoutineInvocationGraphFile.reader_value ()) ;
  }
  const enumGalgasBool test_1 = test_0.boolEnum () ;
  if (kBoolTrue == test_1) {
    GALGAS_string var_s = var_temporaries.mAttribute_mSubprogramInvocationGraph.reader_graphviz (SOURCE_FILE ("semantic-analysis.galgas", 117)) ;
    GALGAS_string var_filePath = constinArgument_inSourceFile.reader_stringByDeletingPathExtension (SOURCE_FILE ("semantic-analysis.galgas", 118)).add_operation (GALGAS_string (".subprogramInvocation.dot"), inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 118)) ;
    GALGAS_bool joker_4910 ; // Joker input parameter
    var_s.method_writeToFileWhenDifferentContents (var_filePath, joker_4910, inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 119)) ;
  }
  GALGAS_bool test_2 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("semantic-analysis.galgas", 122)).objectCompare (GALGAS_uint ((uint32_t) 0U))) ;
  if (kBoolTrue == test_2.boolEnum ()) {
    test_2 = GALGAS_bool (gOption_plm_5F_options_doNotDetectRecursiveCalls.reader_value ()).operator_not (SOURCE_FILE ("semantic-analysis.galgas", 122)) ;
  }
  const enumGalgasBool test_3 = test_2.boolEnum () ;
  if (kBoolTrue == test_3) {
    GALGAS_stringlist var_undefinedNodeKeyList = var_temporaries.mAttribute_mSubprogramInvocationGraph.reader_undefinedNodeKeyList (SOURCE_FILE ("semantic-analysis.galgas", 123)) ;
    const enumGalgasBool test_4 = GALGAS_bool (kIsStrictSup, var_undefinedNodeKeyList.reader_length (SOURCE_FILE ("semantic-analysis.galgas", 124)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_4) {
      GALGAS_string var_s = GALGAS_string ("subprogram invocation graph error, undefined nodes:") ;
      cEnumerator_stringlist enumerator_5301 (var_undefinedNodeKeyList, kEnumeration_up) ;
      while (enumerator_5301.hasCurrentObject ()) {
        var_s.dotAssign_operation (GALGAS_string ("\n"
          " - ").add_operation (enumerator_5301.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 127))  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 127)) ;
        enumerator_5301.gotoNextObject () ;
      }
      inCompiler->emitSemanticError (constinArgument_inEndOfSourceFile, var_s  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 129)) ;
    }else if (kBoolFalse == test_4) {
      GALGAS_lstringlist var_unsortedInformationList ;
      GALGAS_lstringlist var_unsortedLKeyList ;
      var_temporaries.mAttribute_mSubprogramInvocationGraph.method_circularities (var_unsortedInformationList, var_unsortedLKeyList COMMA_SOURCE_FILE ("semantic-analysis.galgas", 131)) ;
      const enumGalgasBool test_5 = GALGAS_bool (kIsStrictSup, var_unsortedLKeyList.reader_length (SOURCE_FILE ("semantic-analysis.galgas", 135)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_5) {
        GALGAS_string var_s = GALGAS_string ("the following routines are recursive:") ;
        cEnumerator_lstringlist enumerator_5698 (var_unsortedLKeyList, kEnumeration_up) ;
        while (enumerator_5698.hasCurrentObject ()) {
          var_s.dotAssign_operation (GALGAS_string ("\n"
            " - ").add_operation (enumerator_5698.current_mValue (HERE).reader_string (SOURCE_FILE ("semantic-analysis.galgas", 138)), inCompiler COMMA_SOURCE_FILE ("semantic-analysis.galgas", 138))  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 138)) ;
          enumerator_5698.gotoNextObject () ;
        }
        inCompiler->emitSemanticError (constinArgument_inEndOfSourceFile, var_s  COMMA_SOURCE_FILE ("semantic-analysis.galgas", 140)) ;
      }
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'mangledNameForProperty'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForProperty (GALGAS_string inArgument_inName,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outPrefix ; // Returned variable
  result_outPrefix = GALGAS_string ("property_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 6)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 6)) ;
//---
  return result_outPrefix ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForProperty [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForProperty (C_Compiler * inCompiler,
                                                                       const cObjectArray & inEffectiveParameterArray,
                                                                       const GALGAS_location & /* §§ inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForProperty (operand0,
                                          inCompiler
                                          COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForProperty ("mangledNameForProperty",
                                                                        functionWithGenericHeader_mangledNameForProperty,
                                                                        & kTypeDescriptor_GALGAS_string,
                                                                        1,
                                                                        functionArgs_mangledNameForProperty) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Function 'mangledNameForInArgument'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForInArgument (GALGAS_string inArgument_inName,
                                                 C_Compiler * inCompiler
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outPrefix ; // Returned variable
  result_outPrefix = GALGAS_string ("in_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 12)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 12)) ;
//---
  return result_outPrefix ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForInArgument [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForInArgument (C_Compiler * inCompiler,
                                                                         const cObjectArray & inEffectiveParameterArray,
                                                                         const GALGAS_location & /* §§ inErrorLocation */
                                                                         COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForInArgument (operand0,
                                            inCompiler
                                            COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForInArgument ("mangledNameForInArgument",
                                                                          functionWithGenericHeader_mangledNameForInArgument,
                                                                          & kTypeDescriptor_GALGAS_string,
                                                                          1,
                                                                          functionArgs_mangledNameForInArgument) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Function 'mangledNameForInOutArgument'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForInOutArgument (GALGAS_string inArgument_inName,
                                                    C_Compiler * inCompiler
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outPrefix ; // Returned variable
  result_outPrefix = GALGAS_string ("inout_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 18)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 18)) ;
//---
  return result_outPrefix ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForInOutArgument [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForInOutArgument (C_Compiler * inCompiler,
                                                                            const cObjectArray & inEffectiveParameterArray,
                                                                            const GALGAS_location & /* §§ inErrorLocation */
                                                                            COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForInOutArgument (operand0,
                                               inCompiler
                                               COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForInOutArgument ("mangledNameForInOutArgument",
                                                                             functionWithGenericHeader_mangledNameForInOutArgument,
                                                                             & kTypeDescriptor_GALGAS_string,
                                                                             1,
                                                                             functionArgs_mangledNameForInOutArgument) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Function 'mangledNameForOutArgument'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForOutArgument (GALGAS_string inArgument_inName,
                                                  C_Compiler * inCompiler
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outPrefix ; // Returned variable
  result_outPrefix = GALGAS_string ("out_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 24)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 24)) ;
//---
  return result_outPrefix ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForOutArgument [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForOutArgument (C_Compiler * inCompiler,
                                                                          const cObjectArray & inEffectiveParameterArray,
                                                                          const GALGAS_location & /* §§ inErrorLocation */
                                                                          COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForOutArgument (operand0,
                                             inCompiler
                                             COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForOutArgument ("mangledNameForOutArgument",
                                                                           functionWithGenericHeader_mangledNameForOutArgument,
                                                                           & kTypeDescriptor_GALGAS_string,
                                                                           1,
                                                                           functionArgs_mangledNameForOutArgument) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Once function 'receiverName'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_receiverName (C_Compiler * /* inCompiler */
                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("receiver") ;
//---
  return result_outName ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_receiverName = false ;
static GALGAS_string gOnceFunctionResult_receiverName ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_receiverName (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_receiverName) {
    gOnceFunctionResult_receiverName = onceFunction_receiverName (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_receiverName = true ;
  }
  return gOnceFunctionResult_receiverName ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_receiverName (void) {
  gOnceFunctionResult_receiverName.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_receiverName (NULL,
                                                          releaseOnceFunctionResult_receiverName) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_receiverName [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_receiverName (C_Compiler * inCompiler,
                                                             const cObjectArray & /* inEffectiveParameterArray */,
                                                             const GALGAS_location & /* inErrorLocation */
                                                             COMMA_LOCATION_ARGS) {
  return function_receiverName (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_receiverName ("receiverName",
                                                              functionWithGenericHeader_receiverName,
                                                              & kTypeDescriptor_GALGAS_string,
                                                              0,
                                                              functionArgs_receiverName) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Once function 'receiverPtrName'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_receiverPtrName (C_Compiler * /* inCompiler */
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("receiverPtr") ;
//---
  return result_outName ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_receiverPtrName = false ;
static GALGAS_string gOnceFunctionResult_receiverPtrName ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_receiverPtrName (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_receiverPtrName) {
    gOnceFunctionResult_receiverPtrName = onceFunction_receiverPtrName (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_receiverPtrName = true ;
  }
  return gOnceFunctionResult_receiverPtrName ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_receiverPtrName (void) {
  gOnceFunctionResult_receiverPtrName.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_receiverPtrName (NULL,
                                                             releaseOnceFunctionResult_receiverPtrName) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_receiverPtrName [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_receiverPtrName (C_Compiler * inCompiler,
                                                                const cObjectArray & /* inEffectiveParameterArray */,
                                                                const GALGAS_location & /* inErrorLocation */
                                                                COMMA_LOCATION_ARGS) {
  return function_receiverPtrName (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_receiverPtrName ("receiverPtrName",
                                                                 functionWithGenericHeader_receiverPtrName,
                                                                 & kTypeDescriptor_GALGAS_string,
                                                                 0,
                                                                 functionArgs_receiverPtrName) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Function 'mangledNameForType'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForType (GALGAS_string inArgument_inName,
                                           C_Compiler * inCompiler
                                           COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outPrefix ; // Returned variable
  result_outPrefix = GALGAS_string ("type_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 42)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 42)) ;
//---
  return result_outPrefix ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForType [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForType (C_Compiler * inCompiler,
                                                                   const cObjectArray & inEffectiveParameterArray,
                                                                   const GALGAS_location & /* §§ inErrorLocation */
                                                                   COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForType (operand0,
                                      inCompiler
                                      COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForType ("mangledNameForType",
                                                                    functionWithGenericHeader_mangledNameForType,
                                                                    & kTypeDescriptor_GALGAS_string,
                                                                    1,
                                                                    functionArgs_mangledNameForType) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     Once function 'structureInitRoutinePrefix'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_structureInitRoutinePrefix (C_Compiler * /* inCompiler */
                                                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("init_") ;
//---
  return result_outName ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_structureInitRoutinePrefix = false ;
static GALGAS_string gOnceFunctionResult_structureInitRoutinePrefix ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_structureInitRoutinePrefix (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_structureInitRoutinePrefix) {
    gOnceFunctionResult_structureInitRoutinePrefix = onceFunction_structureInitRoutinePrefix (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_structureInitRoutinePrefix = true ;
  }
  return gOnceFunctionResult_structureInitRoutinePrefix ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_structureInitRoutinePrefix (void) {
  gOnceFunctionResult_structureInitRoutinePrefix.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_structureInitRoutinePrefix (NULL,
                                                                        releaseOnceFunctionResult_structureInitRoutinePrefix) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_structureInitRoutinePrefix [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_structureInitRoutinePrefix (C_Compiler * inCompiler,
                                                                           const cObjectArray & /* inEffectiveParameterArray */,
                                                                           const GALGAS_location & /* inErrorLocation */
                                                                           COMMA_LOCATION_ARGS) {
  return function_structureInitRoutinePrefix (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_structureInitRoutinePrefix ("structureInitRoutinePrefix",
                                                                            functionWithGenericHeader_structureInitRoutinePrefix,
                                                                            & kTypeDescriptor_GALGAS_string,
                                                                            0,
                                                                            functionArgs_structureInitRoutinePrefix) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Once function 'literalStringPrefix'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_literalStringPrefix (C_Compiler * /* inCompiler */
                                                       COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("str_") ;
//---
  return result_outName ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_literalStringPrefix = false ;
static GALGAS_string gOnceFunctionResult_literalStringPrefix ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_literalStringPrefix (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_literalStringPrefix) {
    gOnceFunctionResult_literalStringPrefix = onceFunction_literalStringPrefix (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_literalStringPrefix = true ;
  }
  return gOnceFunctionResult_literalStringPrefix ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_literalStringPrefix (void) {
  gOnceFunctionResult_literalStringPrefix.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_literalStringPrefix (NULL,
                                                                 releaseOnceFunctionResult_literalStringPrefix) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_literalStringPrefix [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_literalStringPrefix (C_Compiler * inCompiler,
                                                                    const cObjectArray & /* inEffectiveParameterArray */,
                                                                    const GALGAS_location & /* inErrorLocation */
                                                                    COMMA_LOCATION_ARGS) {
  return function_literalStringPrefix (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_literalStringPrefix ("literalStringPrefix",
                                                                     functionWithGenericHeader_literalStringPrefix,
                                                                     & kTypeDescriptor_GALGAS_string,
                                                                     0,
                                                                     functionArgs_literalStringPrefix) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Once function 'staticStringTypeName'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_staticStringTypeName (C_Compiler * /* inCompiler */
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("StaticString") ;
//---
  return result_outName ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_staticStringTypeName = false ;
static GALGAS_string gOnceFunctionResult_staticStringTypeName ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_staticStringTypeName (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_staticStringTypeName) {
    gOnceFunctionResult_staticStringTypeName = onceFunction_staticStringTypeName (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_staticStringTypeName = true ;
  }
  return gOnceFunctionResult_staticStringTypeName ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_staticStringTypeName (void) {
  gOnceFunctionResult_staticStringTypeName.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_staticStringTypeName (NULL,
                                                                  releaseOnceFunctionResult_staticStringTypeName) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_staticStringTypeName [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_staticStringTypeName (C_Compiler * inCompiler,
                                                                     const cObjectArray & /* inEffectiveParameterArray */,
                                                                     const GALGAS_location & /* inErrorLocation */
                                                                     COMMA_LOCATION_ARGS) {
  return function_staticStringTypeName (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_staticStringTypeName ("staticStringTypeName",
                                                                      functionWithGenericHeader_staticStringTypeName,
                                                                      & kTypeDescriptor_GALGAS_string,
                                                                      0,
                                                                      functionArgs_staticStringTypeName) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'mangledNameForFunction'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForFunction (GALGAS_string inArgument_inName,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("func_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 66)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 66)) ;
//---
  return result_outName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForFunction [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForFunction (C_Compiler * inCompiler,
                                                                       const cObjectArray & inEffectiveParameterArray,
                                                                       const GALGAS_location & /* §§ inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForFunction (operand0,
                                          inCompiler
                                          COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForFunction ("mangledNameForFunction",
                                                                        functionWithGenericHeader_mangledNameForFunction,
                                                                        & kTypeDescriptor_GALGAS_string,
                                                                        1,
                                                                        functionArgs_mangledNameForFunction) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Function 'mangledNameForProcedure'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForProcedure (GALGAS_string inArgument_inName,
                                                C_Compiler * inCompiler
                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("proc_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 72)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 72)) ;
//---
  return result_outName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForProcedure [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForProcedure (C_Compiler * inCompiler,
                                                                        const cObjectArray & inEffectiveParameterArray,
                                                                        const GALGAS_location & /* §§ inErrorLocation */
                                                                        COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForProcedure (operand0,
                                           inCompiler
                                           COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForProcedure ("mangledNameForProcedure",
                                                                         functionWithGenericHeader_mangledNameForProcedure,
                                                                         & kTypeDescriptor_GALGAS_string,
                                                                         1,
                                                                         functionArgs_mangledNameForProcedure) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Function 'mangledNameForLocalVariable'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForLocalVariable (GALGAS_string inArgument_inName,
                                                    C_Compiler * inCompiler
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("var_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 78)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 78)) ;
//---
  return result_outName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForLocalVariable [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForLocalVariable (C_Compiler * inCompiler,
                                                                            const cObjectArray & inEffectiveParameterArray,
                                                                            const GALGAS_location & /* §§ inErrorLocation */
                                                                            COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForLocalVariable (operand0,
                                               inCompiler
                                               COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForLocalVariable ("mangledNameForLocalVariable",
                                                                             functionWithGenericHeader_mangledNameForLocalVariable,
                                                                             & kTypeDescriptor_GALGAS_string,
                                                                             1,
                                                                             functionArgs_mangledNameForLocalVariable) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Function 'mangledNameForGlobalVariable'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForGlobalVariable (GALGAS_string inArgument_inName,
                                                     C_Compiler * inCompiler
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("gvar_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 84)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 84)) ;
//---
  return result_outName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForGlobalVariable [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForGlobalVariable (C_Compiler * inCompiler,
                                                                             const cObjectArray & inEffectiveParameterArray,
                                                                             const GALGAS_location & /* §§ inErrorLocation */
                                                                             COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForGlobalVariable (operand0,
                                                inCompiler
                                                COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForGlobalVariable ("mangledNameForGlobalVariable",
                                                                              functionWithGenericHeader_mangledNameForGlobalVariable,
                                                                              & kTypeDescriptor_GALGAS_string,
                                                                              1,
                                                                              functionArgs_mangledNameForGlobalVariable) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'mangledNameForConstant'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForConstant (GALGAS_string inArgument_inName,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("const_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 90)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 90)) ;
//---
  return result_outName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForConstant [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForConstant (C_Compiler * inCompiler,
                                                                       const cObjectArray & inEffectiveParameterArray,
                                                                       const GALGAS_location & /* §§ inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForConstant (operand0,
                                          inCompiler
                                          COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForConstant ("mangledNameForConstant",
                                                                        functionWithGenericHeader_mangledNameForConstant,
                                                                        & kTypeDescriptor_GALGAS_string,
                                                                        1,
                                                                        functionArgs_mangledNameForConstant) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     Function 'mangledNameForTemporaryConstant'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForTemporaryConstant (GALGAS_uint inArgument_inIndex,
                                                        C_Compiler * inCompiler
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("tempconst_").add_operation (inArgument_inIndex.reader_string (SOURCE_FILE ("generated-code-prefixes.galgas", 95)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 95)) ;
//---
  return result_outName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForTemporaryConstant [2] = {
  & kTypeDescriptor_GALGAS_uint,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForTemporaryConstant (C_Compiler * inCompiler,
                                                                                const cObjectArray & inEffectiveParameterArray,
                                                                                const GALGAS_location & /* §§ inErrorLocation */
                                                                                COMMA_LOCATION_ARGS) {
  const GALGAS_uint operand0 = GALGAS_uint::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                           inCompiler
                                                           COMMA_THERE) ;
  return function_mangledNameForTemporaryConstant (operand0,
                                                   inCompiler
                                                   COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForTemporaryConstant ("mangledNameForTemporaryConstant",
                                                                                 functionWithGenericHeader_mangledNameForTemporaryConstant,
                                                                                 & kTypeDescriptor_GALGAS_string,
                                                                                 1,
                                                                                 functionArgs_mangledNameForTemporaryConstant) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'mangledNameForRegister'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_mangledNameForRegister (GALGAS_string inArgument_inName,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outName ; // Returned variable
  result_outName = GALGAS_string ("register_").add_operation (inArgument_inName.reader_nameRepresentation (SOURCE_FILE ("generated-code-prefixes.galgas", 101)), inCompiler COMMA_SOURCE_FILE ("generated-code-prefixes.galgas", 101)) ;
//---
  return result_outName ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_mangledNameForRegister [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_mangledNameForRegister (C_Compiler * inCompiler,
                                                                       const cObjectArray & inEffectiveParameterArray,
                                                                       const GALGAS_location & /* §§ inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_mangledNameForRegister (operand0,
                                          inCompiler
                                          COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_mangledNameForRegister ("mangledNameForRegister",
                                                                        functionWithGenericHeader_mangledNameForRegister,
                                                                        & kTypeDescriptor_GALGAS_string,
                                                                        1,
                                                                        functionArgs_mangledNameForRegister) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     Once function 'noWarningIfUnusedAttribute'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_noWarningIfUnusedAttribute (C_Compiler * /* inCompiler */
                                                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  result_outResult = GALGAS_string ("noWarningIfUnused") ;
//---
  return result_outResult ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_noWarningIfUnusedAttribute = false ;
static GALGAS_string gOnceFunctionResult_noWarningIfUnusedAttribute ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_noWarningIfUnusedAttribute (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_noWarningIfUnusedAttribute) {
    gOnceFunctionResult_noWarningIfUnusedAttribute = onceFunction_noWarningIfUnusedAttribute (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_noWarningIfUnusedAttribute = true ;
  }
  return gOnceFunctionResult_noWarningIfUnusedAttribute ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_noWarningIfUnusedAttribute (void) {
  gOnceFunctionResult_noWarningIfUnusedAttribute.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_noWarningIfUnusedAttribute (NULL,
                                                                        releaseOnceFunctionResult_noWarningIfUnusedAttribute) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_noWarningIfUnusedAttribute [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_noWarningIfUnusedAttribute (C_Compiler * inCompiler,
                                                                           const cObjectArray & /* inEffectiveParameterArray */,
                                                                           const GALGAS_location & /* inErrorLocation */
                                                                           COMMA_LOCATION_ARGS) {
  return function_noWarningIfUnusedAttribute (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_noWarningIfUnusedAttribute ("noWarningIfUnusedAttribute",
                                                                            functionWithGenericHeader_noWarningIfUnusedAttribute,
                                                                            & kTypeDescriptor_GALGAS_string,
                                                                            0,
                                                                            functionArgs_noWarningIfUnusedAttribute) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Once function 'weakAttribute'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_weakAttribute (C_Compiler * /* inCompiler */
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  result_outResult = GALGAS_string ("weak") ;
//---
  return result_outResult ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_weakAttribute = false ;
static GALGAS_string gOnceFunctionResult_weakAttribute ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_weakAttribute (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_weakAttribute) {
    gOnceFunctionResult_weakAttribute = onceFunction_weakAttribute (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_weakAttribute = true ;
  }
  return gOnceFunctionResult_weakAttribute ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_weakAttribute (void) {
  gOnceFunctionResult_weakAttribute.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_weakAttribute (NULL,
                                                           releaseOnceFunctionResult_weakAttribute) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_weakAttribute [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_weakAttribute (C_Compiler * inCompiler,
                                                              const cObjectArray & /* inEffectiveParameterArray */,
                                                              const GALGAS_location & /* inErrorLocation */
                                                              COMMA_LOCATION_ARGS) {
  return function_weakAttribute (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_weakAttribute ("weakAttribute",
                                                               functionWithGenericHeader_weakAttribute,
                                                               & kTypeDescriptor_GALGAS_string,
                                                               0,
                                                               functionArgs_weakAttribute) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             Routine 'codeOptimisation'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_codeOptimisation (GALGAS_intermediateCodeStruct & ioArgument_ioIntermediateCodeStruct,
                               C_Compiler * inCompiler
                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_procedureMapIR var_initialProcedureMap = ioArgument_ioIntermediateCodeStruct.mAttribute_mProcedureMapIR ;
  GALGAS_uint var_pass = GALGAS_uint ((uint32_t) 0U) ;
  GALGAS_bool var_optimizing = GALGAS_bool (true) ;
  if (ioArgument_ioIntermediateCodeStruct.mAttribute_mProcedureMapIR.reader_count (SOURCE_FILE ("code-optimisation.galgas", 70)).add_operation (ioArgument_ioIntermediateCodeStruct.mAttribute_mFunctionMapIR.reader_count (SOURCE_FILE ("code-optimisation.galgas", 70)), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 70)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 70)).isValid ()) {
    uint32_t variant_3221 = ioArgument_ioIntermediateCodeStruct.mAttribute_mProcedureMapIR.reader_count (SOURCE_FILE ("code-optimisation.galgas", 70)).add_operation (ioArgument_ioIntermediateCodeStruct.mAttribute_mFunctionMapIR.reader_count (SOURCE_FILE ("code-optimisation.galgas", 70)), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 70)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 70)).uintValue () ;
    bool loop_3221 = true ;
    while (loop_3221) {
      loop_3221 = var_optimizing.isValid () ;
      if (loop_3221) {
        loop_3221 = var_optimizing.boolValue () ;
      }
      if (loop_3221 && (0 == variant_3221)) {
        loop_3221 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("code-optimisation.galgas", 70)) ;
      }
      if (loop_3221) {
        variant_3221 -- ;
        var_optimizing = GALGAS_bool (false) ;
        var_pass.increment_operation (inCompiler  COMMA_SOURCE_FILE ("code-optimisation.galgas", 73)) ;
        const enumGalgasBool test_0 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
        if (kBoolTrue == test_0) {
          GALGAS_string var_s = GALGAS_string ("Optimisation pass ").add_operation (var_pass.reader_string (SOURCE_FILE ("code-optimisation.galgas", 76)), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 76)).add_operation (GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 76)) ;
          var_s.dotAssign_operation (GALGAS_string ("  ").add_operation (ioArgument_ioIntermediateCodeStruct.mAttribute_mRegisterMap.reader_count (SOURCE_FILE ("code-optimisation.galgas", 77)).reader_string (SOURCE_FILE ("code-optimisation.galgas", 77)), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 77)).add_operation (GALGAS_string (" registers\n"), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 77))  COMMA_SOURCE_FILE ("code-optimisation.galgas", 77)) ;
          var_s.dotAssign_operation (GALGAS_string ("  ").add_operation (ioArgument_ioIntermediateCodeStruct.mAttribute_mGlobalLiteralStringMap.reader_count (SOURCE_FILE ("code-optimisation.galgas", 78)).reader_string (SOURCE_FILE ("code-optimisation.galgas", 78)), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 78)).add_operation (GALGAS_string (" static strings\n"), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 78))  COMMA_SOURCE_FILE ("code-optimisation.galgas", 78)) ;
          var_s.dotAssign_operation (GALGAS_string ("  ").add_operation (ioArgument_ioIntermediateCodeStruct.mAttribute_mGlobalConstantMap.reader_count (SOURCE_FILE ("code-optimisation.galgas", 79)).reader_string (SOURCE_FILE ("code-optimisation.galgas", 79)), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 79)).add_operation (GALGAS_string (" global constants\n"), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 79))  COMMA_SOURCE_FILE ("code-optimisation.galgas", 79)) ;
          var_s.dotAssign_operation (GALGAS_string ("  ").add_operation (ioArgument_ioIntermediateCodeStruct.mAttribute_mGlobalVariableMap.reader_count (SOURCE_FILE ("code-optimisation.galgas", 80)).reader_string (SOURCE_FILE ("code-optimisation.galgas", 80)), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 80)).add_operation (GALGAS_string (" global variables\n"), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 80))  COMMA_SOURCE_FILE ("code-optimisation.galgas", 80)) ;
          var_s.dotAssign_operation (GALGAS_string ("  ").add_operation (ioArgument_ioIntermediateCodeStruct.mAttribute_mProcedureMapIR.reader_count (SOURCE_FILE ("code-optimisation.galgas", 81)).reader_string (SOURCE_FILE ("code-optimisation.galgas", 81)), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 81)).add_operation (GALGAS_string (" procedures\n"), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 81))  COMMA_SOURCE_FILE ("code-optimisation.galgas", 81)) ;
          var_s.dotAssign_operation (GALGAS_string ("  ").add_operation (ioArgument_ioIntermediateCodeStruct.mAttribute_mFunctionMapIR.reader_count (SOURCE_FILE ("code-optimisation.galgas", 82)).reader_string (SOURCE_FILE ("code-optimisation.galgas", 82)), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 82)).add_operation (GALGAS_string (" functions\n"), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 82))  COMMA_SOURCE_FILE ("code-optimisation.galgas", 82)) ;
          inCompiler->printMessage (var_s  COMMA_SOURCE_FILE ("code-optimisation.galgas", 83)) ;
        }
        GALGAS_accessibleEntities var_accessibleEntities ;
        {
        routine_suppressInaccessibleSubprograms (ioArgument_ioIntermediateCodeStruct, var_accessibleEntities, var_optimizing, inCompiler  COMMA_SOURCE_FILE ("code-optimisation.galgas", 86)) ;
        }
        GALGAS_registerMapIR var_usedRegisterMap = GALGAS_registerMapIR::constructor_emptyMap (SOURCE_FILE ("code-optimisation.galgas", 92)) ;
        cEnumerator_registerMapIR enumerator_4467 (ioArgument_ioIntermediateCodeStruct.mAttribute_mRegisterMap, kEnumeration_up) ;
        while (enumerator_4467.hasCurrentObject ()) {
          const enumGalgasBool test_1 = var_accessibleEntities.mAttribute_mAccessibleRegisterSet.reader_hasKey (enumerator_4467.current_lkey (HERE).mAttribute_string COMMA_SOURCE_FILE ("code-optimisation.galgas", 94)).boolEnum () ;
          if (kBoolTrue == test_1) {
            {
            var_usedRegisterMap.modifier_insertKey (enumerator_4467.current_lkey (HERE), enumerator_4467.current_mRegisterTypeName (HERE), enumerator_4467.current_mRegisterAddress (HERE), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 95)) ;
            }
          }else if (kBoolFalse == test_1) {
            var_optimizing = GALGAS_bool (true) ;
          }
          enumerator_4467.gotoNextObject () ;
        }
        ioArgument_ioIntermediateCodeStruct.mAttribute_mRegisterMap = var_usedRegisterMap ;
        GALGAS_globalConstantMapIR var_globalConstantMap = GALGAS_globalConstantMapIR::constructor_emptyMap (SOURCE_FILE ("code-optimisation.galgas", 102)) ;
        cEnumerator_globalConstantMapIR enumerator_4886 (ioArgument_ioIntermediateCodeStruct.mAttribute_mGlobalConstantMap, kEnumeration_up) ;
        while (enumerator_4886.hasCurrentObject ()) {
          const enumGalgasBool test_2 = var_accessibleEntities.mAttribute_mGlobalConstantSet.reader_hasKey (enumerator_4886.current (HERE).mAttribute_lkey.mAttribute_string COMMA_SOURCE_FILE ("code-optimisation.galgas", 104)).boolEnum () ;
          if (kBoolTrue == test_2) {
            {
            var_globalConstantMap.modifier_insertKey (enumerator_4886.current (HERE).mAttribute_lkey, enumerator_4886.current (HERE).mAttribute_mValueExpressionGeneration, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 105)) ;
            }
          }else if (kBoolFalse == test_2) {
            var_optimizing = GALGAS_bool (true) ;
          }
          enumerator_4886.gotoNextObject () ;
        }
        ioArgument_ioIntermediateCodeStruct.mAttribute_mGlobalConstantMap = var_globalConstantMap ;
        GALGAS_globalLiteralStringMap var_staticStringMap = GALGAS_globalLiteralStringMap::constructor_emptyMap (SOURCE_FILE ("code-optimisation.galgas", 112)) ;
        cEnumerator_globalLiteralStringMap enumerator_5383 (ioArgument_ioIntermediateCodeStruct.mAttribute_mGlobalLiteralStringMap, kEnumeration_up) ;
        while (enumerator_5383.hasCurrentObject ()) {
          const enumGalgasBool test_3 = var_accessibleEntities.mAttribute_mStaticStringSet.reader_hasKey (enumerator_5383.current_lkey (HERE).mAttribute_string COMMA_SOURCE_FILE ("code-optimisation.galgas", 116)).boolEnum () ;
          if (kBoolTrue == test_3) {
            {
            var_staticStringMap.modifier_insertKey (enumerator_5383.current_lkey (HERE), enumerator_5383.current_mLiteralStringCname (HERE), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 117)) ;
            }
          }else if (kBoolFalse == test_3) {
            var_optimizing = GALGAS_bool (true) ;
          }
          enumerator_5383.gotoNextObject () ;
        }
        ioArgument_ioIntermediateCodeStruct.mAttribute_mGlobalLiteralStringMap = var_staticStringMap ;
        GALGAS_globalVariableMapIR var_globalVariableMap = GALGAS_globalVariableMapIR::constructor_emptyMap (SOURCE_FILE ("code-optimisation.galgas", 124)) ;
        cEnumerator_globalVariableMapIR enumerator_5806 (ioArgument_ioIntermediateCodeStruct.mAttribute_mGlobalVariableMap, kEnumeration_up) ;
        while (enumerator_5806.hasCurrentObject ()) {
          const enumGalgasBool test_4 = var_accessibleEntities.mAttribute_mGlobalVariableSet.reader_hasKey (enumerator_5806.current (HERE).mAttribute_lkey.mAttribute_string COMMA_SOURCE_FILE ("code-optimisation.galgas", 126)).boolEnum () ;
          if (kBoolTrue == test_4) {
            {
            var_globalVariableMap.modifier_insertKey (enumerator_5806.current (HERE).mAttribute_lkey, enumerator_5806.current (HERE).mAttribute_mActualTypeName, enumerator_5806.current (HERE).mAttribute_mGenerateVolatile, enumerator_5806.current (HERE).mAttribute_mInitialValue, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 127)) ;
            }
          }else if (kBoolFalse == test_4) {
            var_optimizing = GALGAS_bool (true) ;
          }
          enumerator_5806.gotoNextObject () ;
        }
        ioArgument_ioIntermediateCodeStruct.mAttribute_mGlobalVariableMap = var_globalVariableMap ;
      }
    }
  }
  cEnumerator_procedureMapIR enumerator_6296 (var_initialProcedureMap, kEnumeration_up) ;
  while (enumerator_6296.hasCurrentObject ()) {
    GALGAS_bool test_5 = ioArgument_ioIntermediateCodeStruct.mAttribute_mProcedureMapIR.reader_hasKey (enumerator_6296.current_lkey (HERE).mAttribute_string COMMA_SOURCE_FILE ("code-optimisation.galgas", 141)).operator_not (SOURCE_FILE ("code-optimisation.galgas", 141)) ;
    if (kBoolTrue == test_5.boolEnum ()) {
      test_5 = enumerator_6296.current_mWarnIfUnused (HERE) ;
    }
    const enumGalgasBool test_6 = test_5.boolEnum () ;
    if (kBoolTrue == test_6) {
      GALGAS_location location_7 (enumerator_6296.current_lkey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticWarning (location_7, GALGAS_string ("unused procedure; use @").add_operation (function_noWarningIfUnusedAttribute (inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 142)), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 142)).add_operation (GALGAS_string (" attribute for removing this warning"), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 142))  COMMA_SOURCE_FILE ("code-optimisation.galgas", 142)) ;
    }
    enumerator_6296.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Routine 'suppressInaccessibleSubprograms'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_suppressInaccessibleSubprograms (GALGAS_intermediateCodeStruct & ioArgument_ioIntermediateCodeStruct,
                                              GALGAS_accessibleEntities & outArgument_outAccessibleEntities,
                                              GALGAS_bool & ioArgument_ioOptimizing,
                                              C_Compiler * inCompiler
                                              COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outAccessibleEntities.drop () ; // Release 'out' argument
  outArgument_outAccessibleEntities = GALGAS_accessibleEntities::constructor_default (SOURCE_FILE ("code-optimisation.galgas", 154)) ;
  GALGAS_procedureMapIR var_accessibleProcedureMap = GALGAS_procedureMapIR::constructor_emptyMap (SOURCE_FILE ("code-optimisation.galgas", 155)) ;
  GALGAS_procedureMapIR var_nonExploredProcedureMap = GALGAS_procedureMapIR::constructor_emptyMap (SOURCE_FILE ("code-optimisation.galgas", 156)) ;
  cEnumerator_procedureMapIR enumerator_7060 (ioArgument_ioIntermediateCodeStruct.mAttribute_mProcedureMapIR, kEnumeration_up) ;
  while (enumerator_7060.hasCurrentObject ()) {
    const enumGalgasBool test_0 = enumerator_7060.current (HERE).mAttribute_mIsRequired.boolEnum () ;
    if (kBoolTrue == test_0) {
      {
      var_accessibleProcedureMap.modifier_insertKey (enumerator_7060.current (HERE).mAttribute_lkey, enumerator_7060.current (HERE).mAttribute_mFormalArgumentListForGeneration, enumerator_7060.current (HERE).mAttribute_mInstructionGenerationList, enumerator_7060.current (HERE).mAttribute_mIsRequired, enumerator_7060.current (HERE).mAttribute_mWarnIfUnused, enumerator_7060.current (HERE).mAttribute_mWeak, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 160)) ;
      }
      categoryMethod_enterAccessibleEntities (enumerator_7060.current (HERE), outArgument_outAccessibleEntities, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 168)) ;
      outArgument_outAccessibleEntities.mAttribute_mProcedureSet.addAssign_operation (enumerator_7060.current (HERE).mAttribute_lkey.mAttribute_string  COMMA_SOURCE_FILE ("code-optimisation.galgas", 169)) ;
    }else if (kBoolFalse == test_0) {
      {
      var_nonExploredProcedureMap.modifier_insertKey (enumerator_7060.current (HERE).mAttribute_lkey, enumerator_7060.current (HERE).mAttribute_mFormalArgumentListForGeneration, enumerator_7060.current (HERE).mAttribute_mInstructionGenerationList, enumerator_7060.current (HERE).mAttribute_mIsRequired, enumerator_7060.current (HERE).mAttribute_mWarnIfUnused, enumerator_7060.current (HERE).mAttribute_mWeak, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 171)) ;
      }
    }
    enumerator_7060.gotoNextObject () ;
  }
  cEnumerator_bootListIR enumerator_7875 (ioArgument_ioIntermediateCodeStruct.mAttribute_mBootList, kEnumeration_up) ;
  while (enumerator_7875.hasCurrentObject ()) {
    categoryMethod_enterAccessibleEntities (enumerator_7875.current (HERE).mAttribute_mInstructionListIR, outArgument_outAccessibleEntities, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 183)) ;
    enumerator_7875.gotoNextObject () ;
  }
  cEnumerator_initListIR enumerator_8011 (ioArgument_ioIntermediateCodeStruct.mAttribute_mInitList, kEnumeration_up) ;
  while (enumerator_8011.hasCurrentObject ()) {
    categoryMethod_enterAccessibleEntities (enumerator_8011.current (HERE).mAttribute_mInstructionListIR, outArgument_outAccessibleEntities, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 186)) ;
    enumerator_8011.gotoNextObject () ;
  }
  const enumGalgasBool test_1 = GALGAS_bool (gOption_plm_5F_options_noExceptionGeneration.reader_value ()).operator_not (SOURCE_FILE ("code-optimisation.galgas", 189)).boolEnum () ;
  if (kBoolTrue == test_1) {
    categoryMethod_enterAccessibleEntities (ioArgument_ioIntermediateCodeStruct.mAttribute_mExceptionSetupInstructionListIR, outArgument_outAccessibleEntities, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 190)) ;
    categoryMethod_enterAccessibleEntities (ioArgument_ioIntermediateCodeStruct.mAttribute_mExceptionLoopInstructionListIR, outArgument_outAccessibleEntities, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 191)) ;
  }
  GALGAS_functionMapIR var_accessibleFunctionMap = GALGAS_functionMapIR::constructor_emptyMap (SOURCE_FILE ("code-optimisation.galgas", 194)) ;
  GALGAS_functionMapIR var_nonExploredFunctionMap = ioArgument_ioIntermediateCodeStruct.mAttribute_mFunctionMapIR ;
  GALGAS_bool var_exploreProceduresAndFunctions = GALGAS_bool (true) ;
  if (ioArgument_ioIntermediateCodeStruct.mAttribute_mProcedureMapIR.reader_count (SOURCE_FILE ("code-optimisation.galgas", 197)).add_operation (ioArgument_ioIntermediateCodeStruct.mAttribute_mFunctionMapIR.reader_count (SOURCE_FILE ("code-optimisation.galgas", 197)), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 197)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 197)).isValid ()) {
    uint32_t variant_8659 = ioArgument_ioIntermediateCodeStruct.mAttribute_mProcedureMapIR.reader_count (SOURCE_FILE ("code-optimisation.galgas", 197)).add_operation (ioArgument_ioIntermediateCodeStruct.mAttribute_mFunctionMapIR.reader_count (SOURCE_FILE ("code-optimisation.galgas", 197)), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 197)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 197)).uintValue () ;
    bool loop_8659 = true ;
    while (loop_8659) {
      loop_8659 = var_exploreProceduresAndFunctions.isValid () ;
      if (loop_8659) {
        loop_8659 = var_exploreProceduresAndFunctions.boolValue () ;
      }
      if (loop_8659 && (0 == variant_8659)) {
        loop_8659 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("code-optimisation.galgas", 197)) ;
      }
      if (loop_8659) {
        variant_8659 -- ;
        var_exploreProceduresAndFunctions = GALGAS_bool (false) ;
        GALGAS_procedureMapIR var_exNonExploredProcedureMap = var_nonExploredProcedureMap ;
        var_nonExploredProcedureMap = GALGAS_procedureMapIR::constructor_emptyMap (SOURCE_FILE ("code-optimisation.galgas", 201)) ;
        cEnumerator_procedureMapIR enumerator_9003 (var_exNonExploredProcedureMap, kEnumeration_up) ;
        while (enumerator_9003.hasCurrentObject ()) {
          const enumGalgasBool test_2 = outArgument_outAccessibleEntities.mAttribute_mProcedureSet.reader_hasKey (enumerator_9003.current (HERE).mAttribute_lkey.mAttribute_string COMMA_SOURCE_FILE ("code-optimisation.galgas", 203)).boolEnum () ;
          if (kBoolTrue == test_2) {
            {
            var_accessibleProcedureMap.modifier_insertKey (enumerator_9003.current (HERE).mAttribute_lkey, enumerator_9003.current (HERE).mAttribute_mFormalArgumentListForGeneration, enumerator_9003.current (HERE).mAttribute_mInstructionGenerationList, enumerator_9003.current (HERE).mAttribute_mIsRequired, enumerator_9003.current (HERE).mAttribute_mWarnIfUnused, enumerator_9003.current (HERE).mAttribute_mWeak, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 204)) ;
            }
            categoryMethod_enterAccessibleEntities (enumerator_9003.current (HERE), outArgument_outAccessibleEntities, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 212)) ;
            var_exploreProceduresAndFunctions = GALGAS_bool (true) ;
          }else if (kBoolFalse == test_2) {
            {
            var_nonExploredProcedureMap.modifier_insertKey (enumerator_9003.current (HERE).mAttribute_lkey, enumerator_9003.current (HERE).mAttribute_mFormalArgumentListForGeneration, enumerator_9003.current (HERE).mAttribute_mInstructionGenerationList, enumerator_9003.current (HERE).mAttribute_mIsRequired, enumerator_9003.current (HERE).mAttribute_mWarnIfUnused, enumerator_9003.current (HERE).mAttribute_mWeak, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 215)) ;
            }
          }
          enumerator_9003.gotoNextObject () ;
        }
        GALGAS_functionMapIR var_exNonExploredFunctionMap = var_nonExploredFunctionMap ;
        var_nonExploredFunctionMap = GALGAS_functionMapIR::constructor_emptyMap (SOURCE_FILE ("code-optimisation.galgas", 226)) ;
        cEnumerator_functionMapIR enumerator_9951 (var_exNonExploredFunctionMap, kEnumeration_up) ;
        while (enumerator_9951.hasCurrentObject ()) {
          const enumGalgasBool test_3 = outArgument_outAccessibleEntities.mAttribute_mFunctionSet.reader_hasKey (enumerator_9951.current (HERE).mAttribute_lkey.mAttribute_string COMMA_SOURCE_FILE ("code-optimisation.galgas", 228)).boolEnum () ;
          if (kBoolTrue == test_3) {
            {
            var_accessibleFunctionMap.modifier_insertKey (enumerator_9951.current (HERE).mAttribute_lkey, enumerator_9951.current (HERE).mAttribute_mFormalArgumentListForGeneration, enumerator_9951.current (HERE).mAttribute_mInstructionGenerationList, enumerator_9951.current (HERE).mAttribute_mResultType, enumerator_9951.current (HERE).mAttribute_mResultVarName, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 229)) ;
            }
            categoryMethod_enterAccessibleEntities (enumerator_9951.current (HERE), outArgument_outAccessibleEntities, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 236)) ;
            var_exploreProceduresAndFunctions = GALGAS_bool (true) ;
          }else if (kBoolFalse == test_3) {
            {
            var_nonExploredFunctionMap.modifier_insertKey (enumerator_9951.current (HERE).mAttribute_lkey, enumerator_9951.current (HERE).mAttribute_mFormalArgumentListForGeneration, enumerator_9951.current (HERE).mAttribute_mInstructionGenerationList, enumerator_9951.current (HERE).mAttribute_mResultType, enumerator_9951.current (HERE).mAttribute_mResultVarName, inCompiler COMMA_SOURCE_FILE ("code-optimisation.galgas", 239)) ;
            }
          }
          enumerator_9951.gotoNextObject () ;
        }
      }
    }
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsNotEqual, ioArgument_ioIntermediateCodeStruct.mAttribute_mProcedureMapIR.objectCompare (var_accessibleProcedureMap)).boolEnum () ;
  if (kBoolTrue == test_4) {
    ioArgument_ioIntermediateCodeStruct.mAttribute_mProcedureMapIR = var_accessibleProcedureMap ;
    ioArgument_ioOptimizing = GALGAS_bool (true) ;
  }
  const enumGalgasBool test_5 = GALGAS_bool (kIsNotEqual, ioArgument_ioIntermediateCodeStruct.mAttribute_mFunctionMapIR.objectCompare (var_accessibleFunctionMap)).boolEnum () ;
  if (kBoolTrue == test_5) {
    ioArgument_ioIntermediateCodeStruct.mAttribute_mFunctionMapIR = var_accessibleFunctionMap ;
    ioArgument_ioOptimizing = GALGAS_bool (true) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Once function 'separatorLine'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_string onceFunction_separatorLine (C_Compiler * /* inCompiler */
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  result_outResult = GALGAS_string ("//------------------------------------------------------------------------") ;
  result_outResult.dotAssign_operation (GALGAS_string ("---------------------------------------------*\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 74)) ;
//---
  return result_outResult ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_separatorLine = false ;
static GALGAS_string gOnceFunctionResult_separatorLine ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_separatorLine (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_separatorLine) {
    gOnceFunctionResult_separatorLine = onceFunction_separatorLine (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_separatorLine = true ;
  }
  return gOnceFunctionResult_separatorLine ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_separatorLine (void) {
  gOnceFunctionResult_separatorLine.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_separatorLine (NULL,
                                                           releaseOnceFunctionResult_separatorLine) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_separatorLine [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_separatorLine (C_Compiler * inCompiler,
                                                              const cObjectArray & /* inEffectiveParameterArray */,
                                                              const GALGAS_location & /* inErrorLocation */
                                                              COMMA_LOCATION_ARGS) {
  return function_separatorLine (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_separatorLine ("separatorLine",
                                                               functionWithGenericHeader_separatorLine,
                                                               & kTypeDescriptor_GALGAS_string,
                                                               0,
                                                               functionArgs_separatorLine) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Function 'titleComment'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_titleComment (GALGAS_string inArgument_inTitle,
                                     C_Compiler * inCompiler
                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outTitle ; // Returned variable
  result_outTitle = function_separatorLine (inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 80)) ;
  result_outTitle.dotAssign_operation (GALGAS_string ("//   ").add_operation (inArgument_inTitle.reader_stringByRightPadding (GALGAS_uint ((uint32_t) 114U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE ("code-generation.galgas", 81)), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 81)).add_operation (GALGAS_string ("*\n"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 81))  COMMA_SOURCE_FILE ("code-generation.galgas", 81)) ;
  result_outTitle.dotAssign_operation (function_separatorLine (inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 82)).add_operation (GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 82))  COMMA_SOURCE_FILE ("code-generation.galgas", 82)) ;
//---
  return result_outTitle ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_titleComment [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_titleComment (C_Compiler * inCompiler,
                                                             const cObjectArray & inEffectiveParameterArray,
                                                             const GALGAS_location & /* §§ inErrorLocation */
                                                             COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_titleComment (operand0,
                                inCompiler
                                COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_titleComment ("titleComment",
                                                              functionWithGenericHeader_titleComment,
                                                              & kTypeDescriptor_GALGAS_string,
                                                              1,
                                                              functionArgs_titleComment) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Routine 'codeGeneration'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_codeGeneration (const GALGAS_string constinArgument_inCurrentDirectory,
                             const GALGAS_string constinArgument_inSourceFileName,
                             const GALGAS_location constinArgument_inEndOfSourceFileLocation,
                             const GALGAS_intermediateCodeStruct constinArgument_inIntermediateCodeStruct,
                             const GALGAS_lstring constinArgument_inTargetName,
                             const GALGAS_unifiedTypeMap_2D_proxy constinArgument_inExceptionCodeType,
                             const GALGAS_unifiedTypeMap_2D_proxy constinArgument_inExceptionLineType,
                             C_Compiler * inCompiler
                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_homeDir = GALGAS_string::constructor_homeDirectory (SOURCE_FILE ("code-generation.galgas", 96)).add_operation (GALGAS_string ("/plm-products/"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 96)) ;
  GALGAS_string var_productDirectory = var_homeDir.add_operation (constinArgument_inSourceFileName.reader_stringByDeletingPathExtension (SOURCE_FILE ("code-generation.galgas", 98)).reader_stringByReplacingStringByString (GALGAS_string ("/"), GALGAS_string ("+"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 98)), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 98)) ;
  GALGAS_string var_sourceDirectory = var_productDirectory.add_operation (GALGAS_string ("/sources"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 99)) ;
  var_sourceDirectory.method_makeDirectory (inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 100)) ;
  GALGAS_stringlist var_builtinFiles ;
  {
  routine_generateTarget (constinArgument_inCurrentDirectory, var_productDirectory, constinArgument_inTargetName, var_builtinFiles, inCompiler  COMMA_SOURCE_FILE ("code-generation.galgas", 102)) ;
  }
  GALGAS_string var_code = GALGAS_string::makeEmptyString () ;
  var_code.dotAssign_operation (GALGAS_string ("#include <stdint.h>\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 110)) ;
  var_code.dotAssign_operation (GALGAS_string ("#include <stdbool.h>\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 111)) ;
  var_code.dotAssign_operation (GALGAS_string ("#include <stddef.h>\n"
    "\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 112)) ;
  cEnumerator_typeMapIR enumerator_5266 (constinArgument_inIntermediateCodeStruct.mAttribute_mTypeMapIR, kEnumeration_up) ;
  while (enumerator_5266.hasCurrentObject ()) {
    var_code.dotAssign_operation (callCategoryReader_headerCodeGenerationForType ((const cPtr_abstractTypeIR *) enumerator_5266.current (HERE).mAttribute_mType.ptr (), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 114))  COMMA_SOURCE_FILE ("code-generation.galgas", 114)) ;
    enumerator_5266.gotoNextObject () ;
  }
  var_code.dotAssign_operation (function_titleComment (GALGAS_string ("Boot"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 116))  COMMA_SOURCE_FILE ("code-generation.galgas", 116)) ;
  var_code.dotAssign_operation (GALGAS_string ("static void boot (void) ;\n"
    "\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 117)) ;
  var_code.dotAssign_operation (function_titleComment (GALGAS_string ("Init"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 118))  COMMA_SOURCE_FILE ("code-generation.galgas", 118)) ;
  var_code.dotAssign_operation (GALGAS_string ("static void init (void) ;\n"
    "\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 119)) ;
  const enumGalgasBool test_0 = GALGAS_bool (gOption_plm_5F_options_noExceptionGeneration.reader_value ()).operator_not (SOURCE_FILE ("code-generation.galgas", 120)).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_code.dotAssign_operation (function_titleComment (GALGAS_string ("Exception"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 121))  COMMA_SOURCE_FILE ("code-generation.galgas", 121)) ;
    var_code.dotAssign_operation (GALGAS_string ("static void raise_exception_internal (const ").add_operation (function_mangledNameForType (constinArgument_inExceptionCodeType.reader_key (inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 122)), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 122)), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 122)).add_operation (GALGAS_string (" inCode,\n"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 122))  COMMA_SOURCE_FILE ("code-generation.galgas", 122)) ;
    var_code.dotAssign_operation (GALGAS_string ("                                      const char * inSourceFile,\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 123)) ;
    var_code.dotAssign_operation (GALGAS_string ("                                      const ").add_operation (function_mangledNameForType (constinArgument_inExceptionLineType.reader_key (inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 124)), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 124)), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 124)).add_operation (GALGAS_string (" inSourceLine) ;\n"
      "\n"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 124))  COMMA_SOURCE_FILE ("code-generation.galgas", 124)) ;
  }
  var_code.dotAssign_operation (function_titleComment (GALGAS_string ("Static Strings"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 126))  COMMA_SOURCE_FILE ("code-generation.galgas", 126)) ;
  cEnumerator_globalLiteralStringMap enumerator_6040 (constinArgument_inIntermediateCodeStruct.mAttribute_mGlobalLiteralStringMap, kEnumeration_up) ;
  while (enumerator_6040.hasCurrentObject ()) {
    var_code.dotAssign_operation (GALGAS_string ("static const char * ").add_operation (enumerator_6040.current_mLiteralStringCname (HERE), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 128)).add_operation (GALGAS_string (" = "), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 128)).add_operation (enumerator_6040.current_lkey (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE ("code-generation.galgas", 128)), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 128)).add_operation (GALGAS_string (" ;\n"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 128))  COMMA_SOURCE_FILE ("code-generation.galgas", 128)) ;
    enumerator_6040.gotoNextObject () ;
  }
  var_code.dotAssign_operation (GALGAS_string ("\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 130)) ;
  cEnumerator_registerMapIR enumerator_6229 (constinArgument_inIntermediateCodeStruct.mAttribute_mRegisterMap, kEnumeration_up) ;
  while (enumerator_6229.hasCurrentObject ()) {
    var_code.dotAssign_operation (categoryReader_headerCodeGenerationForRegister (enumerator_6229.current (HERE), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 132))  COMMA_SOURCE_FILE ("code-generation.galgas", 132)) ;
    enumerator_6229.gotoNextObject () ;
  }
  cEnumerator_globalConstantMapIR enumerator_6361 (constinArgument_inIntermediateCodeStruct.mAttribute_mGlobalConstantMap, kEnumeration_up) ;
  while (enumerator_6361.hasCurrentObject ()) {
    var_code.dotAssign_operation (categoryReader_headerCodeGeneration (enumerator_6361.current (HERE), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 135))  COMMA_SOURCE_FILE ("code-generation.galgas", 135)) ;
    enumerator_6361.gotoNextObject () ;
  }
  cEnumerator_globalVariableMapIR enumerator_6488 (constinArgument_inIntermediateCodeStruct.mAttribute_mGlobalVariableMap, kEnumeration_up) ;
  while (enumerator_6488.hasCurrentObject ()) {
    var_code.dotAssign_operation (categoryReader_implementationCodeGeneration (enumerator_6488.current (HERE), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 138))  COMMA_SOURCE_FILE ("code-generation.galgas", 138)) ;
    enumerator_6488.gotoNextObject () ;
  }
  cEnumerator_functionMapIR enumerator_6613 (constinArgument_inIntermediateCodeStruct.mAttribute_mFunctionMapIR, kEnumeration_up) ;
  while (enumerator_6613.hasCurrentObject ()) {
    var_code.dotAssign_operation (categoryReader_headerCodeGeneration (enumerator_6613.current (HERE), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 141))  COMMA_SOURCE_FILE ("code-generation.galgas", 141)) ;
    enumerator_6613.gotoNextObject () ;
  }
  cEnumerator_procedureMapIR enumerator_6726 (constinArgument_inIntermediateCodeStruct.mAttribute_mProcedureMapIR, kEnumeration_up) ;
  while (enumerator_6726.hasCurrentObject ()) {
    var_code.dotAssign_operation (categoryReader_headerCodeGeneration (enumerator_6726.current (HERE), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 144))  COMMA_SOURCE_FILE ("code-generation.galgas", 144)) ;
    enumerator_6726.gotoNextObject () ;
  }
  var_code.dotAssign_operation (function_titleComment (GALGAS_string ("System code"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 146))  COMMA_SOURCE_FILE ("code-generation.galgas", 146)) ;
  cEnumerator_stringlist enumerator_6849 (var_builtinFiles, kEnumeration_up) ;
  while (enumerator_6849.hasCurrentObject ()) {
    var_code.dotAssign_operation (GALGAS_string ("#include \"").add_operation (enumerator_6849.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 148)).add_operation (GALGAS_string ("\"\n"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 148))  COMMA_SOURCE_FILE ("code-generation.galgas", 148)) ;
    enumerator_6849.gotoNextObject () ;
  }
  var_code.dotAssign_operation (GALGAS_string ("\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 150)) ;
  var_code.dotAssign_operation (function_titleComment (GALGAS_string ("Boot"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 152))  COMMA_SOURCE_FILE ("code-generation.galgas", 152)) ;
  var_code.dotAssign_operation (GALGAS_string ("static void boot (void) {\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 153)) ;
  cEnumerator_bootListIR enumerator_7047 (constinArgument_inIntermediateCodeStruct.mAttribute_mBootList, kEnumeration_up) ;
  while (enumerator_7047.hasCurrentObject ()) {
    var_code.dotAssign_operation (categoryReader_instructionListCode (enumerator_7047.current (HERE).mAttribute_mInstructionListIR, inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 155))  COMMA_SOURCE_FILE ("code-generation.galgas", 155)) ;
    enumerator_7047.gotoNextObject () ;
  }
  var_code.dotAssign_operation (GALGAS_string ("}\n"
    "\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 157)) ;
  var_code.dotAssign_operation (function_titleComment (GALGAS_string ("Init"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 159))  COMMA_SOURCE_FILE ("code-generation.galgas", 159)) ;
  var_code.dotAssign_operation (GALGAS_string ("static void init (void) {\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 160)) ;
  cEnumerator_initListIR enumerator_7264 (constinArgument_inIntermediateCodeStruct.mAttribute_mInitList, kEnumeration_up) ;
  while (enumerator_7264.hasCurrentObject ()) {
    var_code.dotAssign_operation (categoryReader_instructionListCode (enumerator_7264.current (HERE).mAttribute_mInstructionListIR, inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 162))  COMMA_SOURCE_FILE ("code-generation.galgas", 162)) ;
    enumerator_7264.gotoNextObject () ;
  }
  var_code.dotAssign_operation (GALGAS_string ("}\n"
    "\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 164)) ;
  const enumGalgasBool test_1 = GALGAS_bool (gOption_plm_5F_options_noExceptionGeneration.reader_value ()).operator_not (SOURCE_FILE ("code-generation.galgas", 165)).boolEnum () ;
  if (kBoolTrue == test_1) {
    var_code.dotAssign_operation (function_titleComment (GALGAS_string ("Raise Exception internal"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 166))  COMMA_SOURCE_FILE ("code-generation.galgas", 166)) ;
    var_code.dotAssign_operation (GALGAS_string ("static void raise_exception_internal (const int32_t in_CODE,\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 167)) ;
    var_code.dotAssign_operation (GALGAS_string ("                                      const char * in_FILE,\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 168)) ;
    var_code.dotAssign_operation (GALGAS_string ("                                      const uint32_t in_LINE) {\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 169)) ;
    var_code.dotAssign_operation (categoryReader_instructionListCode (constinArgument_inIntermediateCodeStruct.mAttribute_mExceptionSetupInstructionListIR, inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 170))  COMMA_SOURCE_FILE ("code-generation.galgas", 170)) ;
    {
    var_code.modifier_incIndentation (GALGAS_uint ((uint32_t) 2U), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 171)) ;
    }
    var_code.dotAssign_operation (GALGAS_string ("while (1) {\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 172)) ;
    var_code.dotAssign_operation (categoryReader_instructionListCode (constinArgument_inIntermediateCodeStruct.mAttribute_mExceptionLoopInstructionListIR, inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 173))  COMMA_SOURCE_FILE ("code-generation.galgas", 173)) ;
    var_code.dotAssign_operation (GALGAS_string ("}\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 174)) ;
    {
    var_code.modifier_decIndentation (GALGAS_uint ((uint32_t) 2U), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 175)) ;
    }
    var_code.dotAssign_operation (GALGAS_string ("}\n"
      "\n")  COMMA_SOURCE_FILE ("code-generation.galgas", 176)) ;
  }
  cEnumerator_procedureMapIR enumerator_8077 (constinArgument_inIntermediateCodeStruct.mAttribute_mProcedureMapIR, kEnumeration_up) ;
  while (enumerator_8077.hasCurrentObject ()) {
    var_code.dotAssign_operation (categoryReader_implementationCodeGeneration (enumerator_8077.current (HERE), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 179))  COMMA_SOURCE_FILE ("code-generation.galgas", 179)) ;
    enumerator_8077.gotoNextObject () ;
  }
  cEnumerator_functionMapIR enumerator_8197 (constinArgument_inIntermediateCodeStruct.mAttribute_mFunctionMapIR, kEnumeration_up) ;
  while (enumerator_8197.hasCurrentObject ()) {
    var_code.dotAssign_operation (categoryReader_implementationCodeGeneration (enumerator_8197.current (HERE), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 182))  COMMA_SOURCE_FILE ("code-generation.galgas", 182)) ;
    enumerator_8197.gotoNextObject () ;
  }
  var_code.dotAssign_operation (function_separatorLine (inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 184))  COMMA_SOURCE_FILE ("code-generation.galgas", 184)) ;
  GALGAS_bool joker_8356 ; // Joker input parameter
  var_code.method_writeToFileWhenDifferentContents (var_sourceDirectory.add_operation (GALGAS_string ("/plm.c"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 185)), joker_8356, inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 185)) ;
  GALGAS_bool test_2 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("code-generation.galgas", 187)).objectCompare (GALGAS_uint ((uint32_t) 0U))) ;
  if (kBoolTrue == test_2.boolEnum ()) {
    test_2 = GALGAS_bool (gOption_plm_5F_options_compileOnly.reader_value ()).operator_not (SOURCE_FILE ("code-generation.galgas", 187)) ;
  }
  const enumGalgasBool test_3 = test_2.boolEnum () ;
  if (kBoolTrue == test_3) {
    GALGAS_string temp_4 ;
    const enumGalgasBool test_5 = GALGAS_bool (gOption_plm_5F_options_performFlashing.reader_value ()).boolEnum () ;
    if (kBoolTrue == test_5) {
      temp_4 = GALGAS_string ("flash-and-run") ;
    }else if (kBoolFalse == test_5) {
      temp_4 = GALGAS_string ("build") ;
    }
    GALGAS_string var_script = temp_4 ;
    GALGAS_string var_fullScript = GALGAS_string ("python ").add_operation (var_productDirectory, inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 189)).add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 189)).add_operation (var_script, inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 189)).add_operation (GALGAS_string (".py"), inCompiler COMMA_SOURCE_FILE ("code-generation.galgas", 189)) ;
    GALGAS_sint var_result = var_fullScript.reader_system (SOURCE_FILE ("code-generation.galgas", 190)) ;
    const enumGalgasBool test_6 = GALGAS_bool (kIsNotEqual, var_result.objectCompare (GALGAS_sint ((int32_t) 0L))).boolEnum () ;
    if (kBoolTrue == test_6) {
      inCompiler->emitSemanticError (constinArgument_inEndOfSourceFileLocation, GALGAS_string ("error during C compilation or flashing")  COMMA_SOURCE_FILE ("code-generation.galgas", 192)) ;
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Filewrapper 'targetTemplates'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- File '/makefile.py'

const char * gWrapperFileContent_0_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "import subprocess, sys, os, copy\n"
  "import urllib, shutil, subprocess\n"
  "import platform, json, operator\n"
  "import threading\n"
  "\n"
  "if sys.version_info >= (2, 6) :\n"
  "  import multiprocessing\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "#   processorCount                                                           *\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def processorCount () :\n"
  "  if sys.version_info >= (2, 6) :\n"
  "    coreCount = multiprocessing.cpu_count ()\n"
  "  else:\n"
  "    coreCount = 1\n"
  "  return coreCount\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "#   FOR PRINTING IN COLOR                                                    *\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def BLACK () :\n"
  "  return '\\033[90m'\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def RED () :\n"
  "  return '\\033[91m'\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def GREEN () :\n"
  "  return '\\033[92m'\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def YELLOW () :\n"
  "  return '\\033[93m'\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def BLUE () :\n"
  "  return '\\033[94m'\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def MAGENTA () :\n"
  "  return '\\033[95m'\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def CYAN () :\n"
  "  return '\\033[96m'\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def WHITE () :\n"
  "  return '\\033[97m'\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def ENDC () :\n"
  "  return '\\033[0m'\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD () :\n"
  "  return '\\033[1m'\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def UNDERLINE () :\n"
  "  return '\\033[4m'\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def BLINK () :\n"
  "  return '\\033[5m'\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_BLUE () :\n"
  "  return BOLD () + BLUE ()\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_GREEN () :\n"
  "  return BOLD () + GREEN ()\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_RED () :\n"
  "  return BOLD () + RED ()\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "#   runHiddenCommand                                                         *\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def runHiddenCommand (cmd) :\n"
  "  result = \"\"\n"
  "  childProcess = subprocess.Popen (cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n"
  "  while True:\n"
  "    line = childProcess.stdout.readline ()\n"
  "    if line != \"\":\n"
  "      result += line\n"
  "    else:\n"
  "      childProcess.wait ()\n"
  "      if childProcess.returncode != 0 :\n"
  "        sys.exit (childProcess.returncode)\n"
  "      return result\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "#   runCommand                                                               *\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def runCommand (cmd, title, showCommand) :\n"
  "  if title != \"\":\n"
  "    print BOLD_BLUE () + title + ENDC ()\n"
  "  if (title == \"\") or showCommand :\n"
  "    cmdAsString = \"\"\n"
  "    for s in cmd:\n"
  "      if (s == \"\") or (s.find (\" \") >= 0):\n"
  "        cmdAsString += '\"' + s + '\" '\n"
  "      else:\n"
  "        cmdAsString += s + ' '\n"
  "    print cmdAsString\n"
  "  childProcess = subprocess.Popen (cmd)\n"
  "  childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    sys.exit (childProcess.returncode)\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "#   runInThread                                                              *\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def runInThread (job, displayLock, terminationSemaphore):\n"
  "  childProcess = subprocess.Popen (job.mCommand, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n"
  "  while True:\n"
  "    line = childProcess.stdout.readline ()\n"
  "    if line != \"\":\n"
  "      job.mOutputLines.append (line)\n"
  "      displayLock.acquire ()\n"
  "      sys.stdout.write (line) # Print without newline\n"
  "      displayLock.release ()\n"
  "    else:\n"
  "      childProcess.wait ()\n"
  "      job.mReturnCode = childProcess.returncode\n"
  "      terminationSemaphore.release ()\n"
  "      break\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "#   modificationDateForFile                                                  *\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "def modificationDateForFile (dateCacheDictionary, file):\n"
  "  absFilePath = os.path.abspath (file)\n"
  "  if dateCacheDictionary.has_key (absFilePath) :\n"
  "    return dateCacheDictionary [absFilePath]\n"
  "  elif not os.path.exists (absFilePath):\n"
  "    date = sys.float_info.max # Very far in future\n"
  "    dateCacheDictionary [absFilePath] = date\n"
  "    return date\n"
  "  else:\n"
  "    date = os.path.getmtime (absFilePath)\n"
  "    dateCacheDictionary [absFilePath] = date\n"
  "    return date\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "#   class PostCommand                                                        *\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "class PostCommand:\n"
  "  mCommand = []\n"
  "  mTitle = \"\"\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, title = \"\"):\n"
  "    self.mCommand = []\n"
  "    self.mTitle = title\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "#   class Job                                                                *\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "class Job:\n"
  "  mTarget = \"\"\n"
  "  mCommand = []\n"
  "  mTitle = \"\"\n"
  "  mRequiredFiles = []\n"
  "  mPostCommands = []\n"
  "  mReturnCode = None\n"
  "  mPriority = 0\n"
  "  mState = 0 # 0: waiting for execution\n"
  "  mOutputLines = []\n"
  "  mOpenSourceOnError = False # Do not try to open source file on error\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, target, requiredFiles, command, postCommands, priority, title, openSourceOnError):\n"
  "    self.mTarget = copy.deepcopy (target)\n"
  "    self.mCommand = copy.deepcopy (command)\n"
  "    self.mRequiredFiles = copy.deepcopy (requiredFiles)\n"
  "    self.mTitle = copy.deepcopy (title)\n"
  "    self.mPostCommands = copy.deepcopy (postCommands)\n"
  "    self.mPriority = priority\n"
  "    self.mOutputLines = []\n"
  "    self.mOpenSourceOnError = openSourceOnError\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def run (self, displayLock, terminationSemaphore, showCommand):\n"
  "    displayLock.acquire ()\n"
  "    if self.mTitle != \"\":\n"
  "      print BOLD_BLUE () + self.mTitle + ENDC ()\n"
  "    if (self.mTitle == \"\") or showCommand :\n"
  "      cmdAsString = \"\"\n"
  "      for s in self.mCommand:\n"
  "        if (s == \"\") or (s.find (\" \") >= 0):\n"
  "          cmdAsString += '\"' + s + '\" '\n"
  "        else:\n"
  "          cmdAsString += s + ' '\n"
  "      print cmdAsString\n"
  "    displayLock.release ()\n"
  "    thread = threading.Thread (target=runInThread, args=(self, displayLock, terminationSemaphore))\n"
  "    thread.start()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def runPostCommand (self, displayLock, terminationSemaphore, showCommand):\n"
  "    postCommand = self.mPostCommands [0]\n"
  "    self.mCommand = postCommand.mCommand\n"
  "    displayLock.acquire ()\n"
  "    print BOLD_BLUE () + postCommand.mTitle + ENDC ()\n"
  "    if showCommand:\n"
  "      cmdAsString = \"\"\n"
  "      for s in self.mCommand:\n"
  "        if (s == \"\") or (s.find (\" \") >= 0):\n"
  "          cmdAsString += '\"' + s + '\" '\n"
  "        else:\n"
  "          cmdAsString += s + ' '\n"
  "      print cmdAsString\n"
  "    displayLock.release ()\n"
  "    thread = threading.Thread (target=runInThread, args=(self, displayLock, terminationSemaphore))\n"
  "    thread.start()\n"
  "\n"
  "#----------------------------------------------------------------------------*\n"
  "#   class Rule                                                               *\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "class Rule:\n"
  "  mTarget = \"\"\n"
  "  mDependences = []\n"
  "  mCommand = []\n"
  "  mSecondaryMostRecentModificationDate = 0.0 # Far in the past\n"
  "  mTitle = \"\"\n"
  "  mPostCommands = []\n"
  "  mPriority = 0\n"
  "  mDeleteTargetOnError = False # No operation on error\n"
  "  mCleanOperation = 0 # No operation on clean\n"
  "  mOpenSourceOnError = False # Do not try to open source file on error\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, target, title = \"\"):\n"
  "    self.mTarget = copy.deepcopy (target)\n"
  "    self.mDependences = []\n"
  "    self.mCommand = []\n"
  "    self.mSecondaryMostRecentModificationDate = 0.0\n"
  "    self.mPostCommands = []\n"
  "    self.mPriority = 0\n"
  "    self.mDeleteTargetOnError = False # No operation on error\n"
  "    self.mOpenSourceOnError = False # Do not try to open source file on error\n"
  "    self.mCleanOperation = 0 # No operation on clean\n"
  "    if title == \"\":\n"
  "      self.mTitle = \"Building \" + target\n"
  "    else:\n"
  "      self.mTitle = copy.deepcopy (title)\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def deleteTargetFileOnClean (self):\n"
  "    self.mCleanOperation = 1\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def deleteTargetDirectoryOnClean (self):\n"
  "    self.mCleanOperation = 2\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def enterSecondaryDependanceFile (self, secondaryDependanceFile, make):\n"
  "    if make.mSelectedGoal != \"clean\":\n"
  "      filePath = os.path.abspath (secondaryDependanceFile)\n"
  "      if not os.path.exists (filePath):\n"
  "        self.mSecondaryMostRecentModificationDate = sys.float_info.max # Very far in future\n"
  "      else:\n"
  "        f = open (filePath, \"r\")\n"
  "        s = f.read ()\n"
  "        f.close ()\n"
  "        s = s.replace (\"\\\\ \", \"\\x01\") # Replace escaped spaces by \\0x01\n"
  "        s = s.replace (\"\\\\\\n\", \"\") # Suppress \\ at the end of lines\n"
  "        liste = s.split (\"\\n\\n\")\n"
  "        for s in liste:\n"
  "          components = s.split (':')\n"
  "          target = components [0].replace (\"\\x01\", \" \")\n"
  "          #print \"------- Optional dependency rules for target '\" + target + \"'\"\n"
  "          #print \"Secondary target '\" + target + \"'\"\n"
  "          for src in components [1].split ():\n"
  "            secondarySource = src.replace (\"\\x01\", \" \")\n"
  "            #print \"  '\" + secondarySource + \"'\"\n"
  "            modifDate = modificationDateForFile (make.mModificationDateDictionary, secondarySource)\n"
  "            if self.mSecondaryMostRecentModificationDate < modifDate :\n"
  "              self.mSecondaryMostRecentModificationDate = modifDate\n"
  "              #print BOLD_BLUE () + str (modifDate) + ENDC ()\n"
  "    \n"
  "#----------------------------------------------------------------------------*\n"
  "#   class Make                                                               *\n"
  "#----------------------------------------------------------------------------*\n"
  "\n"
  "class Make:\n"
  "  mRuleList = []\n"
  "  mJobList = []\n"
  "  mErrorCount = 0\n"
  "  mModificationDateDictionary = {}\n"
  "  mGoals = {}\n"
  "  mSelectedGoal = \"\"\n"
  "  mLinuxTextEditor = \"\"\n"
  "  mMacTextEditor = \"\"\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, goal):\n"
  "    self.mRuleList = []\n"
  "    self.mJobList = []\n"
  "    self.mErrorCount = 0\n"
  "    self.mModificationDateDictionary = {}\n"
  "    self.mGoals = {}\n"
  "    self.mSelectedGoal = goal\n"
  "    self.mLinuxTextEditor = \"gEdit\"\n"
  "    self.mMacTextEditor = \"TextEdit\"\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def addRule (self, rule):\n"
  "    self.mRuleList.append (copy.deepcopy (rule))\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printRules (self):\n"
  "    print BOLD_BLUE () + \"--- Print \" + str (len (self.mRuleList)) + \" rule\" + (\"s\" if len (self.mRuleList) > 1 else \"\") + \" ---\" + ENDC ()\n"
  "    for rule in self.mRuleList:\n"
  "      print BOLD_GREEN () + \"Target: \\\"\" + rule.mTarget + \"\\\"\" + ENDC ()\n"
  "      for dep in rule.mDependences:\n"
  "        print \"  Dependence: \\\"\" + dep + \"\\\"\"\n"
  "      s = \"  Command: \"\n"
  "      for cmd in rule.mCommand:\n"
  "        s += \" \\\"\" + cmd + \"\\\"\"\n"
  "      print s\n"
  "      print \"  Title: \\\"\" + rule.mTitle + \"\\\"\"\n"
  "      index = 0\n"
  "      for (command, title) in rule.mPostCommands:\n"
  "        index = index + 1\n"
  "        s = \"  Post command \" + str (index) + \": \"\n"
  "        for cmd in command:\n"
  "          s += \" \\\"\" + cmd + \"\\\"\"\n"
  "        print s\n"
  "        print \"  Its title: \\\"\" + title + \"\\\"\"\n"
  "        \n"
  "    print BOLD_BLUE () + \"--- End of print rule ---\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def writeRuleDependancesInDotFile (self, dotFileName):\n"
  "    s = \"digraph G {\\n\"\n"
  "    s += \"  node [fontname=courier]\\n\"\n"
  "    arrowSet = set ()\n"
  "    for rule in self.mRuleList:\n"
  "      s += '  \"' + rule.mTarget + '\" [shape=rectangle]\\n'\n"
  "      for dep in rule.mDependences:\n"
  "        arrowSet.add ('  \"' + rule.mTarget + '\" -> \"' + dep + '\"\\n')\n"
  "    for arrow in arrowSet:\n"
  "      s += arrow\n"
  "    s += \"}\\n\"\n"
  "    f = open (dotFileName, \"w\")\n"
  "    f.write (s)\n"
  "    f.close ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def checkRules (self):\n"
  "    if self.mErrorCount == 0:\n"
  "      ruleList = copy.deepcopy (self.mRuleList)\n"
  "      index = 0\n"
  "      looping = True\n"
  "    #--- loop on rules\n"
  "      while looping:\n"
  "        looping = False\n"
  "        while index < len (ruleList):\n"
  "          aRule = ruleList [index]\n"
  "          index = index + 1\n"
  "        #--- Check dependance files have rule for building, or does exist\n"
  "          depIdx = 0\n"
  "          while depIdx < len (aRule.mDependences):\n"
  "            dep = aRule.mDependences [depIdx]\n"
  "            depIdx = depIdx + 1\n"
  "            hasBuildRule = False\n"
  "            for r in ruleList:\n"
  "              if dep == r.mTarget:\n"
  "                hasBuildRule = True\n"
  "                break\n"
  "            if not hasBuildRule:\n"
  "              looping = True\n"
  "              if not os.path.exists (os.path.abspath (dep)):\n"
  "                self.mErrorCount = self.mErrorCount + 1\n"
  "                print BOLD_RED () + \"Check rules error: '\" + dep + \"' does not exist, and there is no rule for building it.\" + ENDC ()\n"
  "              depIdx = depIdx - 1\n"
  "              aRule.mDependences.pop (depIdx)\n"
  "        #--- Rule with no dependances\n"
  "          if len (aRule.mDependences) == 0 :\n"
  "            looping = True\n"
  "            index = index - 1\n"
  "            ruleList.pop (index)\n"
  "            idx = 0\n"
  "            while idx < len (ruleList):\n"
  "              r = ruleList [idx]\n"
  "              idx = idx + 1\n"
  "              while r.mDependences.count (aRule.mTarget) > 0 :\n"
  "                r.mDependences.remove (aRule.mTarget)\n"
  "    #--- Error if rules remain\n"
  "      if len (ruleList) > 0:\n"
  "        self.mErrorCount = self.mErrorCount + 1\n"
  "        print BOLD_RED () + \"Check rules error; circulary dependances between:\" + ENDC ()\n"
  "        for aRule in ruleList: \n"
  "          print BOLD_RED () + \"  - '\" + aRule.mTarget + \"', depends from:\" + ENDC ()\n"
  "          for dep in aRule.mDependences:\n"
  "            print BOLD_RED () + \"      '\" + dep + \"'\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def existsJobForTarget (self, target):\n"
  "    for job in self.mJobList:\n"
  "      if job.mTarget == target:\n"
  "        return True\n"
  "    return False\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def makeJob (self, target): # Return a bool indicating wheither the target should be built\n"
  "  #--- If there are errors, return immediatly\n"
  "    if self.mErrorCount != 0:\n"
  "      return False\n"
  "  #--- Target already in job list \?\n"
  "    if self.existsJobForTarget (target):\n"
  "      return True # yes, return target will be built\n"
  "  #--- Find a rule for making the target\n"
  "    absTarget = os.path.abspath (target)\n"
  "    rule = None\n"
  "    matchCount = 0\n"
  "    for r in self.mRuleList:\n"
  "      if target == r.mTarget:\n"
  "        matchCount = matchCount + 1\n"
  "        rule = r\n"
  "    if matchCount == 0:\n"
  "      absTarget = os.path.abspath (target)\n"
  "      if not os.path.exists (absTarget):\n"
  "        print BOLD_RED () + \"No rule for making '\" + target + \"'\" + ENDC ()\n"
  "        self.mErrorCount = self.mErrorCount + 1\n"
  "      return False # Error or target exists, and no rule for building it\n"
  "    elif matchCount > 1:\n"
  "      print BOLD_RED () + str (matchCount) + \" rules for making '\" + target + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "      return False # Error\n"
  "  #--- Target file does not exist, and 'rule' variable indicates how build it\n"
  "    appendToJobList = not os.path.exists (absTarget)\n"
  "  #--- Build primary dependences\n"
  "    jobDependenceFiles = []\n"
  "    for dependence in rule.mDependences:\n"
  "      willBeBuilt = self.makeJob (dependence)\n"
  "      if willBeBuilt:\n"
  "        jobDependenceFiles.append (dependence)\n"
  "        appendToJobList = True\n"
  "  #--- Check primary file modification dates\n"
  "    if not appendToJobList:\n"
  "      targetDateModification = os.path.getmtime (absTarget)\n"
  "      for source in rule.mDependences:\n"
  "        sourceDateModification = os.path.getmtime (source)\n"
  "        if targetDateModification < sourceDateModification:\n"
  "          appendToJobList = True\n"
  "          break\n"
  "  #--- Check for secondary dependancy files\n"
  "    if not appendToJobList:\n"
  "      targetDateModification = os.path.getmtime (absTarget)\n"
  "      if targetDateModification < rule.mSecondaryMostRecentModificationDate:\n"
  "        appendToJobList = True\n"
  "  #--- Append to job list\n"
  "    if appendToJobList:\n"
  "      self.mJobList.append (Job (target, jobDependenceFiles, rule.mCommand, rule.mPostCommands, rule.mPriority, rule.mTitle, rule.mOpenSourceOnError))"
  "\n"
  "  #--- Return\n"
  "    return appendToJobList\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "  #Job state\n"
  "  # 0: waiting\n"
  "  # 1:running\n"
  "  # 2: waiting for executing post command\n"
  "  # 3:executing for executing post command\n"
  "  # 4: completed\n"
  "\n"
  "  def runJobs (self, maxConcurrentJobs, showCommand):\n"
  "    if self.mErrorCount == 0:\n"
  "      if len (self.mJobList) == 0:\n"
  "        print BOLD_BLUE () + \"Nothing to make.\" + ENDC ()\n"
  "      else:\n"
  "      #--- Sort jobs following their priorities\n"
  "        self.mJobList = sorted (self.mJobList, key=operator.attrgetter(\"mPriority\"), reverse=True)\n"
  "      #--- Run\n"
  "        if maxConcurrentJobs <= 0:\n"
  "          maxConcurrentJobs = processorCount () - maxConcurrentJobs\n"
  "        jobCount = 0 ;\n"
  "        terminationSemaphore = threading.Semaphore (0)\n"
  "        displayLock = threading.Lock ()\n"
  "        loop = True\n"
  "        returnCode = 0\n"
  "        while loop:\n"
  "        #--- Launch jobs in parallel\n"
  "          for job in self.mJobList:\n"
  "            if (returnCode == 0) and (jobCount < maxConcurrentJobs):\n"
  "              if (job.mState == 0) and (len (job.mRequiredFiles) == 0):\n"
  "                #--- Create target directory if does not exist\n"
  "                absTargetDirectory = os.path.dirname (os.path.abspath (job.mTarget))\n"
  "                if not os.path.exists (absTargetDirectory):\n"
  "                  displayLock.acquire ()\n"
  "                  runCommand ([\"mkdir\", \"-p\", os.path.dirname (job.mTarget)], \"Making \\\"\" + os.path.dirname (job.mTarget) + \"\\\" directory\", showComman"
  "d)\n"
  "                  displayLock.release ()\n"
  "                #--- Run job\n"
  "                job.run (displayLock, terminationSemaphore, showCommand)\n"
  "                jobCount = jobCount + 1\n"
  "                job.mState = 1 # Means is running\n"
  "              elif job.mState == 2: # Waiting for executing post command\n"
  "                job.mReturnCode = None # Means post command not terminated\n"
  "                job.runPostCommand (displayLock, terminationSemaphore, showCommand)\n"
  "                jobCount = jobCount + 1\n"
  "                job.mState = 3 # Means post command is running\n"
  "        #--- Wait for a job termination\n"
  "          #print \"wait \" + str (jobCount) + \" \" + str (len (self.mJobList))\n"
  "          terminationSemaphore.acquire ()\n"
  "        #--- Checks for terminated jobs\n"
  "          index = 0\n"
  "          while index < len (self.mJobList):\n"
  "            job = self.mJobList [index]\n"
  "            index = index + 1\n"
  "            if (job.mState == 1) and (job.mReturnCode == 0) : # Terminated without error\n"
  "              jobCount = jobCount - 1\n"
  "              if not os.path.exists (os.path.abspath (job.mTarget)): # Warning: target does not exist\n"
  "                displayLock.acquire ()\n"
  "                print MAGENTA () + BOLD () + \"Warning: target \\\"\" + job.mTarget + \"\\\" was not created by rule execution.\" + ENDC ()\n"
  "                displayLock.release ()\n"
  "              if len (job.mPostCommands) > 0:\n"
  "                job.mState = 2 # Ready to execute next post command\n"
  "              else:\n"
  "                job.mState = 4 # Completed\n"
  "                index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 1) and (job.mReturnCode > 0) : # terminated with error : exit\n"
  "              jobCount = jobCount - 1\n"
  "              job.mState = 4 # Means Terminated\n"
  "              index = index - 1 # For removing job from list\n"
  "              if job.mOpenSourceOnError:\n"
  "                for line in job.mOutputLines:\n"
  "                  components = line.split (':')\n"
  "                  if (len (components) > 1) and os.path.exists (os.path.abspath (components [0])) :\n"
  "                    if sys.platform == \"darwin\":\n"
  "                      os.system (\"open -a \\\"\" + self.mMacTextEditor + \"\\\" \\\"\" + components [0] + \"\\\"\")\n"
  "                    elif sys.platform == \"linux2\":\n"
  "                      os.system (\"\\\"\" + self.mLinuxTextEditor + \"\\\" \\\"\" + components [0] + \"\\\"\")\n"
  "            elif (job.mState == 3) and (job.mReturnCode == 0): # post command is terminated without error\n"
  "              jobCount = jobCount - 1\n"
  "              job.mPostCommands.pop (0) # Remove completed post command\n"
  "              if len (job.mPostCommands) > 0:\n"
  "                job.mState = 2 # Ready to execute next post command\n"
  "              else:\n"
  "                job.mState = 4 # Completed\n"
  "                index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 3) and (job.mReturnCode > 0): # post command is terminated with error\n"
  "              jobCount = jobCount - 1\n"
  "              job.mState = 4 # Completed\n"
  "              index = index - 1 # For removing job from list\n"
  "            elif job.mState == 4: # Completed: delete job\n"
  "              index = index - 1\n"
  "              self.mJobList.pop (index) # Remove terminated job\n"
  "              #displayLock.acquire ()\n"
  "              #print \"Completed '\" + job.mTitle + \"'\"\n"
  "              #--- Remove dependences from this job\n"
  "              idx = 0\n"
  "              while idx < len (self.mJobList):\n"
  "                aJob = self.mJobList [idx]\n"
  "                idx = idx + 1\n"
  "                while aJob.mRequiredFiles.count (job.mTarget) > 0 :\n"
  "                  aJob.mRequiredFiles.remove (job.mTarget)\n"
  "                  #print \"  Removed from '\" + aJob.mTitle + \"': \" + str (len (aJob.mRequiredFiles))\n"
  "              #displayLock.release ()\n"
  "              #--- Signal error \?\n"
  "              if (job.mReturnCode > 0) and (returnCode == 0):\n"
  "                self.mErrorCount = self.mErrorCount + 1\n"
  "                print BOLD_RED () + \"Return code: \" + str (job.mReturnCode) + ENDC ()\n"
  "                if (returnCode == 0) and (jobCount > 0) :\n"
  "                  print \"Wait for job termination...\"\n"
  "                returnCode = job.mReturnCode\n"
  "          loop = (len (self.mJobList) > 0) if (returnCode == 0) else (jobCount > 0)\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def searchFileInDirectories (self, file, directoryList): # returns \"\" if not found, register error\n"
  "    matchCount = 0\n"
  "    result = \"\"\n"
  "    for sourceDir in directoryList:\n"
  "      sourcePath = sourceDir + \"/\" + file\n"
  "      if os.path.exists (os.path.abspath (sourcePath)):\n"
  "        matchCount = matchCount + 1\n"
  "        result = sourcePath\n"
  "    if matchCount == 0:\n"
  "      print BOLD_RED () + \"Cannot find '\" + file + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "    elif matchCount > 1:\n"
  "      print BOLD_RED () + str (matchCount) + \" source files for making '\" + file + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "      result = \"\"\n"
  "    return result\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def addGoal (self, goal, targetList, message):\n"
  "    if self.mGoals.has_key (goal) or (goal == \"clean\") :\n"
  "      self.enterError (\"The '\" + goal + \"' goal is already defined\")\n"
  "    else:\n"
  "      self.mGoals [goal] = (targetList, message)\n"
  "    #print '%s' % ', '.join(map(str, self.mGoals))\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printGoals (self):\n"
  "    print BOLD_BLUE () + \"--- Print \" + str (len (self.mGoals)) + \" goal\" + (\"s\" if len (self.mGoals) > 1 else \"\") + \" ---\" + ENDC ()\n"
  "    for goalKey in self.mGoals.keys ():\n"
  "      print BOLD_GREEN () + \"Goal: \\\"\" + goalKey + \"\\\"\" + ENDC ()\n"
  "      (targetList, message) = self.mGoals [goalKey]\n"
  "      for target in targetList:\n"
  "        print \"  Target: \\\"\" + target + \"\\\"\"\n"
  "      print \"  Message: \\\"\" + message + \"\\\"\"\n"
  "        \n"
  "    print BOLD_BLUE () + \"--- End of print goals ---\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def runGoal (self, maxConcurrentJobs, showCommand):\n"
  "    if self.mGoals.has_key (self.mSelectedGoal) :\n"
  "      (targetList, message) = self.mGoals [self.mSelectedGoal]\n"
  "      for target in targetList:\n"
  "        self.makeJob (target)\n"
  "      self.runJobs (maxConcurrentJobs, showCommand)\n"
  "      if self.mErrorCount > 0:\n"
  "        for rule in self.mRuleList:\n"
  "          if rule.mDeleteTargetOnError and os.path.exists (os.path.abspath (rule.mTarget)):\n"
  "            runCommand ([\"rm\", rule.mTarget], \"Delete \\\"\" + rule.mTarget + \"\\\" on error\", showCommand)\n"
  "    elif self.mSelectedGoal == \"clean\" :\n"
  "      filesToRemoveList = []\n"
  "      directoriesToRemoveSet = set ()\n"
  "      for rule in self.mRuleList:\n"
  "        if rule.mCleanOperation == 1: # Delete target\n"
  "          filesToRemoveList.append (rule.mTarget)\n"
  "        elif rule.mCleanOperation == 2: # Delete target directories\n"
  "          directoriesToRemoveSet.add (os.path.dirname (rule.mTarget))\n"
  "      for dir in directoriesToRemoveSet:\n"
  "        if os.path.exists (os.path.abspath (dir)):\n"
  "          runCommand ([\"rm\", \"-fr\", dir], \"Removing \\\"\" + dir + \"\\\"\", showCommand)\n"
  "      for file in filesToRemoveList:\n"
  "        if os.path.exists (os.path.abspath (file)):\n"
  "          runCommand ([\"rm\", \"-f\", file], \"Deleting \\\"\" + file + \"\\\"\", showCommand)\n"
  "    else:\n"
  "      errorMessage = \"The '\" + self.mSelectedGoal + \"' goal is not defined; defined goals:\"\n"
  "      for key in self.mGoals:\n"
  "        (targetList, message) = self.mGoals [key]\n"
  "        errorMessage += \"\\n  '\" + key + \"': \" + message\n"
  "      print BOLD_RED () + errorMessage + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def enterError (self, message):\n"
  "    print BOLD_RED () + message + ENDC ()\n"
  "    self.mErrorCount = self.mErrorCount + 1\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printErrorCountAndExitOnError (self):\n"
  "    if self.mErrorCount == 1:\n"
  "      print BOLD_RED () + \"1 error.\" + ENDC ()\n"
  "      sys.exit (1)\n"
  "    elif self.mErrorCount > 1:\n"
  "      print BOLD_RED () + str (self.mErrorCount) + \" errors.\" + ENDC ()\n"
  "      sys.exit (1)\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printErrorCount (self):\n"
  "    if self.mErrorCount == 1:\n"
  "      print BOLD_RED () + \"1 error.\" + ENDC ()\n"
  "    elif self.mErrorCount > 1:\n"
  "      print BOLD_RED () + str (self.mErrorCount) + \" errors.\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def errorCount (self):\n"
  "    return self.mErrorCount\n"
  "\n"
  "#----------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_0_targetTemplates (
  "makefile.py",
  "py",
  true, // Text file
  28167, // Text length
  gWrapperFileContent_0_targetTemplates
) ;

//--- File '/teensy-3-1-interrupt.plm-target'

const char * gWrapperFileContent_1_targetTemplates = "newUnsignedRepresentation @unsigned8  \"uint8_t\"   8\n"
  "newUnsignedRepresentation @unsigned16 \"uint16_t\" 16\n"
  "newUnsignedRepresentation @unsigned32 \"uint32_t\" 32\n"
  "newUnsignedRepresentation @unsigned64 \"uint64_t\" 64\n"
  "\n"
  "newSignedRepresentation @signed8  \"int8_t\"   8\n"
  "newSignedRepresentation @signed16 \"int16_t\" 16\n"
  "newSignedRepresentation @signed32 \"int32_t\" 32\n"
  "newSignedRepresentation @signed64 \"int64_t\" 64\n"
  "\n"
  "newUnsignedRepresentation @size \"uint32_t\" 32\n"
  "\n"
  "booleanType Bool @unsigned8\n"
  "\n"
  "newIntegerType UInt8  @unsigned8\n"
  "newIntegerType UInt16 @unsigned16\n"
  "newIntegerType UInt32 @unsigned32\n"
  "newIntegerType UInt64 @unsigned64\n"
  "newIntegerType Int8  @signed8\n"
  "newIntegerType Int16 @signed16\n"
  "newIntegerType Int32 @signed32\n"
  "newIntegerType Int64 @signed64\n"
  "\n"
  "exception : Int32 UInt32\n"
  "\n"
  "mode $isr\n"
  "mode $user\n"
  "\n"
  "import \"files/mk20dx256.plm\"\n"
  "import \"files/lcd.plm\"\n"
  "import \"files/leds.plm\"\n"
  "import \"files/default-isr.plm\"\n"
  "\n"
  "required proc setup $user ()\n"
  "required proc loop $user ()\n"
  "\n"
  "boot 10 {\n"
  "//---------1- Inhiber le chien de garde\n"
  "  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1\n"
  "  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2\n"
  "  WDOG_STCTRLH = 0x0010\n"
  "//--- Enable clocks to always-used peripherals\n"
  "  SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2\n"
  "  SIM_SCGC5 = 0x00043F82    // clocks active to all GPIO\n"
  "  SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL\n"
  "//--- If the RTC oscillator isn't enabled, get it started early\n"
  "  if not RTC_CR.OSCE.bool then\n"
  "    RTC_SR = 0\n"
  "    RTC_CR = RTC_CR::SC16P | RTC_CR::SC4P | RTC_CR::OSCE\n"
  "  end\n"
  "//--- Release I/O pins hold, if we woke up from VLLS mode\n"
  "  if PMC_REGSC.ACKISO != 0 then\n"
  "    PMC_REGSC |= PMC_REGSC::ACKISO\n"
  "  end\n"
  "// TODO: do this while the PLL is waiting to lock....\n"
  "  VTOR = 0  // use vector table in flash\n"
  "//  // default all interrupts to medium priority level\n"
  "////  for (int32_t i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);\n"
  "//---------2- Initialisation de la PLL\n"
  "// start in FEI mode\n"
  "//--- Enable capacitors for crystal\n"
  "  OSC_CR = OSC_CR::SC8P | OSC_CR::SC2P\n"
  "//--- Enable osc, 8-32 MHz range, low power mode\n"
  "  MCG_C2 = MCG_C2::RANGE0(2) | MCG_C2::EREFS\n"
  "//--- Switch to crystal as clock source, FLL input = 16 MHz / 512\n"
  "  MCG_C1 = MCG_C1::CLKS(2) | MCG_C1::FRDIV(4)\n"
  "//--- Wait for crystal oscillator to begin\n"
  "  while MCG_S.OSCINIT0 == 0 do\n"
  "  end\n"
  "//--- Wait for FLL to use oscillator\n"
  "  while MCG_S.IREFST != 0 do\n"
  "  end\n"
  "//--- Wait for MCGOUT to use oscillator\n"
  "  while MCG_S.CLKST != MCG_S::CLKST(2) do\n"
  "  end\n"
  "//--- Now we're in FBE mode\n"
  "//    Config PLL input for 16 MHz Crystal / 4 = 4 MHz\n"
  "  MCG_C5 = MCG_C5::PRDIV0(3)\n"
  "//--- Config PLL for 96 MHz output\n"
  "  MCG_C6 = MCG_C6::PLLS | MCG_C6::VDIV0(0)\n"
  "//--- Wait for PLL to start using xtal as its input\n"
  "  while MCG_S.PLLST == 0 do\n"
  "  end\n"
  "//--- Wait for PLL to lock\n"
  "  while MCG_S.LOCK0 == 0 do\n"
  "  end\n"
  "//--- Now we're in PBE mode\n"
  "//    Config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash\n"
  "  SIM_CLKDIV1 = SIM_CLKDIV1::OUTDIV1(0) | SIM_CLKDIV1::OUTDIV2(1) | SIM_CLKDIV1::OUTDIV4(3)\n"
  "//--- Switch to PLL as clock source, FLL input = 16 MHz / 512\n"
  "  MCG_C1 = MCG_C1::CLKS(0) | MCG_C1::FRDIV(4)\n"
  "//--- Wait for PLL clock to be used\n"
  "  while MCG_S.CLKST != MCG_S::CLKST(3) do\n"
  "  end\n"
  "}\n"
  "\n" ;

const cRegularFileWrapper gWrapperFile_1_targetTemplates (
  "teensy-3-1-interrupt.plm-target",
  "plm-target",
  true, // Text file
  3161, // Text length
  gWrapperFileContent_1_targetTemplates
) ;

//--- File '/teensy-3-1-sequential-systick.plm-target'

const char * gWrapperFileContent_2_targetTemplates = "newUnsignedRepresentation @unsigned8  \"uint8_t\"   8\n"
  "newUnsignedRepresentation @unsigned16 \"uint16_t\" 16\n"
  "newUnsignedRepresentation @unsigned32 \"uint32_t\" 32\n"
  "newUnsignedRepresentation @unsigned64 \"uint64_t\" 64\n"
  "\n"
  "newSignedRepresentation @signed8  \"int8_t\"   8\n"
  "newSignedRepresentation @signed16 \"int16_t\" 16\n"
  "newSignedRepresentation @signed32 \"int32_t\" 32\n"
  "newSignedRepresentation @signed64 \"int64_t\" 64\n"
  "\n"
  "newUnsignedRepresentation @size \"uint32_t\" 32\n"
  "\n"
  "booleanType Bool @unsigned8\n"
  "\n"
  "newIntegerType UInt8  @unsigned8\n"
  "newIntegerType UInt16 @unsigned16\n"
  "newIntegerType UInt32 @unsigned32\n"
  "newIntegerType UInt64 @unsigned64\n"
  "newIntegerType Int8  @signed8\n"
  "newIntegerType Int16 @signed16\n"
  "newIntegerType Int32 @signed32\n"
  "newIntegerType Int64 @signed64\n"
  "\n"
  "exception : Int32 UInt32\n"
  "\n"
  "mode $isr\n"
  "mode $user\n"
  "\n"
  "import \"files/mk20dx256.plm\"\n"
  "import \"files/boot-teensy-3-1.plm\"\n"
  "\n"
  "required proc systickHandler $isr ()\n"
  "required proc setup $user ()\n"
  "required proc loop $user ()\n"
  "\n"
  "proc systickHandler $isr @weak () {\n"
  "}\n"
  "\n"
  "init 0 { // Configure Systick interrupt every ms\n"
  "  SYST_RVR = 96000 - 1 // Interrupt every 96000 core clocks, i.e. every ms\n"
  "  SYST_CVR = 0\n"
  "  SYST_CSR = SYST_CSR::CLKSOURCE | SYST_CSR::TICKINT | SYST_CSR::ENABLE\n"
  "}\n" ;

const cRegularFileWrapper gWrapperFile_2_targetTemplates (
  "teensy-3-1-sequential-systick.plm-target",
  "plm-target",
  true, // Text file
  1193, // Text length
  gWrapperFileContent_2_targetTemplates
) ;

//--- File 'files/boot-teensy-3-1.plm'

const char * gWrapperFileContent_3_targetTemplates = "//-----------------------------------------------------------------------------*\n"
  "\n"
  "boot 0 {\n"
  "//---------1- Inhiber le chien de garde\n"
  "  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1\n"
  "  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2\n"
  "  WDOG_STCTRLH = 0x0010\n"
  "//--- Enable clocks to always-used peripherals\n"
  "  SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2\n"
  "  SIM_SCGC5 = 0x00043F82    // clocks active to all GPIO\n"
  "  SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL\n"
  "//--- If the RTC oscillator isn't enabled, get it started early\n"
  "  if not RTC_CR.OSCE.bool then\n"
  "    RTC_SR = 0\n"
  "    RTC_CR = RTC_CR::SC16P | RTC_CR::SC4P | RTC_CR::OSCE\n"
  "  end\n"
  "//--- Release I/O pins hold, if we woke up from VLLS mode\n"
  "  if PMC_REGSC.ACKISO != 0 then\n"
  "    PMC_REGSC |= PMC_REGSC::ACKISO\n"
  "  end\n"
  "// TODO: do this while the PLL is waiting to lock....\n"
  "  VTOR = 0  // use vector table in flash\n"
  "//  // default all interrupts to medium priority level\n"
  "////  for (int32_t i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);\n"
  "//---------2- Initialisation de la PLL\n"
  "// start in FEI mode\n"
  "//--- Enable capacitors for crystal\n"
  "  OSC_CR = OSC_CR::SC8P | OSC_CR::SC2P\n"
  "//--- Enable osc, 8-32 MHz range, low power mode\n"
  "  MCG_C2 = MCG_C2::RANGE0(2) | MCG_C2::EREFS\n"
  "//--- Switch to crystal as clock source, FLL input = 16 MHz / 512\n"
  "  MCG_C1 = MCG_C1::CLKS(2) | MCG_C1::FRDIV(4)\n"
  "//--- Wait for crystal oscillator to begin\n"
  "  while MCG_S.OSCINIT0 == 0 do\n"
  "  end\n"
  "//--- Wait for FLL to use oscillator\n"
  "  while MCG_S.IREFST != 0 do\n"
  "  end\n"
  "//--- Wait for MCGOUT to use oscillator\n"
  "  while MCG_S.CLKST != MCG_S::CLKST(2) do\n"
  "  end\n"
  "//--- Now we're in FBE mode\n"
  "//    Config PLL input for 16 MHz Crystal / 4 = 4 MHz\n"
  "  MCG_C5 = MCG_C5::PRDIV0(3)\n"
  "//--- Config PLL for 96 MHz output\n"
  "  MCG_C6 = MCG_C6::PLLS | MCG_C6::VDIV0(0)\n"
  "//--- Wait for PLL to start using xtal as its input\n"
  "  while MCG_S.PLLST == 0 do\n"
  "  end\n"
  "//--- Wait for PLL to lock\n"
  "  while MCG_S.LOCK0 == 0 do\n"
  "  end\n"
  "//--- Now we're in PBE mode\n"
  "//    Config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash\n"
  "  SIM_CLKDIV1 = SIM_CLKDIV1::OUTDIV1(0) | SIM_CLKDIV1::OUTDIV2(1) | SIM_CLKDIV1::OUTDIV4(3)\n"
  "//--- Switch to PLL as clock source, FLL input = 16 MHz / 512\n"
  "  MCG_C1 = MCG_C1::CLKS(0) | MCG_C1::FRDIV(4)\n"
  "//--- Wait for PLL clock to be used\n"
  "  while MCG_S.CLKST != MCG_S::CLKST(3) do\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n" ;

const cRegularFileWrapper gWrapperFile_3_targetTemplates (
  "boot-teensy-3-1.plm",
  "plm",
  true, // Text file
  2377, // Text length
  gWrapperFileContent_3_targetTemplates
) ;

//--- File 'files/default-isr.plm'

const char * gWrapperFileContent_4_targetTemplates = "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc NMIHandler $isr ()\n"
  "\n"
  "proc NMIHandler $isr @weak () {\n"
  "  throw 2\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc HardFaultHandler $isr ()\n"
  "\n"
  "proc HardFaultHandler $isr @weak () {\n"
  "  throw 3\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc MemManageHandler $isr ()\n"
  "\n"
  "proc MemManageHandler $isr @weak () {\n"
  "  throw 4\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc BusFaultHandler $isr ()\n"
  "\n"
  "proc BusFaultHandler $isr @weak () {\n"
  "  throw 5\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc UsageFaultHandler $isr ()\n"
  "\n"
  "proc UsageFaultHandler $isr @weak () {\n"
  "  throw 6\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc svcHandler $isr ()\n"
  "\n"
  "proc svcHandler $isr @weak () {\n"
  "  throw 11\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DebugMonitorHandler $isr ()\n"
  "\n"
  "proc DebugMonitorHandler $isr @weak () {\n"
  "  throw 12\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc PendSVHandler $isr ()\n"
  "\n"
  "proc PendSVHandler $isr @weak () {\n"
  "  throw 14\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "init 0 { // Configure Systick interrupt every ms\n"
  "  SYST_RVR = 96000 - 1 // Interrupt every 96000 core clocks, i.e. every ms\n"
  "  SYST_CVR = 0\n"
  "  SYST_CSR = SYST_CSR::CLKSOURCE | SYST_CSR::TICKINT | SYST_CSR::ENABLE\n"
  "}\n"
  "\n"
  "var gCompteur : UInt32 = 0 {\n"
  "  @rw proc systickHandler ()\n"
  "  proc waitMS (\?inDuration : UInt32)\n"
  "  proc busyWaitingDuringMS (\?inDuration : UInt32)\n"
  "}\n"
  "\n"
  "required proc systickHandler $isr ()\n"
  "\n"
  "proc systickHandler $isr @weak () {\n"
  "  gCompteur &++\n"
  "  userSystickHandler ()\n"
  "}\n"
  "\n"
  "proc userSystickHandler $isr @weak () {\n"
  "}\n"
  "\n"
  "proc waitMS $user $init (\?inDuration : UInt32) {\n"
  "  let deadline = gCompteur + inDuration\n"
  "  while gCompteur < deadline do\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel0TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel0TranfertCompleteHandler $isr @weak () {\n"
  "  throw 16\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel1TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel1TranfertCompleteHandler $isr @weak () {\n"
  "  throw 17\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel2TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel2TranfertCompleteHandler $isr @weak () {\n"
  "  throw 18\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel3TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel3TranfertCompleteHandler $isr @weak () {\n"
  "  throw 19\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel4TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel4TranfertCompleteHandler $isr @weak () {\n"
  "  throw 20\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel5TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel5TranfertCompleteHandler $isr @weak () {\n"
  "  throw 21\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel6TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel6TranfertCompleteHandler $isr @weak () {\n"
  "  throw 22\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel7TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel7TranfertCompleteHandler $isr @weak () {\n"
  "  throw 23\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel8TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel8TranfertCompleteHandler $isr @weak () {\n"
  "  throw 24\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel9TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel9TranfertCompleteHandler $isr @weak () {\n"
  "  throw 25\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel10TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel10TranfertCompleteHandler $isr @weak () {\n"
  "  throw 26\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel11TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel11TranfertCompleteHandler $isr @weak () {\n"
  "  throw 27\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel12TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel12TranfertCompleteHandler $isr @weak () {\n"
  "  throw 28\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel13TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel13TranfertCompleteHandler $isr @weak () {\n"
  "  throw 29\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel14TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel14TranfertCompleteHandler $isr @weak () {\n"
  "  throw 30\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAChannel15TranfertCompleteHandler $isr ()\n"
  "\n"
  "proc DMAChannel15TranfertCompleteHandler $isr @weak () {\n"
  "  throw 31\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DMAErrorHandler $isr ()\n"
  "\n"
  "proc DMAErrorHandler $isr @weak () {\n"
  "  throw 32\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc flashMemoryCommandCompleteHandler $isr ()\n"
  "\n"
  "proc flashMemoryCommandCompleteHandler $isr @weak () {\n"
  "  throw 34\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc flashMemoryReadCollisionHandler $isr ()\n"
  "\n"
  "proc flashMemoryReadCollisionHandler $isr @weak () {\n"
  "  throw 35\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc modeControllerHandler $isr ()\n"
  "\n"
  "proc modeControllerHandler $isr @weak () {\n"
  "  throw 36\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc LLWUHandler $isr ()\n"
  "\n"
  "proc LLWUHandler $isr @weak () {\n"
  "  throw 37\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc WDOGEWMHandler $isr ()\n"
  "\n"
  "proc WDOGEWMHandler $isr @weak () {\n"
  "  throw 38\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc I2C0Handler $isr ()\n"
  "\n"
  "proc I2C0Handler $isr @weak () {\n"
  "  throw 40\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc I2C1Handler $isr ()\n"
  "\n"
  "proc I2C1Handler $isr @weak () {\n"
  "  throw 41\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc SPI0Handler $isr ()\n"
  "\n"
  "proc SPI0Handler $isr @weak () {\n"
  "  throw 42\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc SPI1Handler $isr ()\n"
  "\n"
  "proc SPI1Handler $isr @weak () {\n"
  "  throw 43\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc CAN0MessageBufferHandler $isr ()\n"
  "\n"
  "proc CAN0MessageBufferHandler $isr @weak () {\n"
  "  throw 45\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc CAN0BusOffHandler $isr ()\n"
  "\n"
  "proc CAN0BusOffHandler $isr @weak () {\n"
  "  throw 46\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc CAN0ErrorHandler $isr ()\n"
  "\n"
  "proc CAN0ErrorHandler $isr @weak () {\n"
  "  throw 47\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc CAN0TransmitWarningHandler $isr ()\n"
  "\n"
  "proc CAN0TransmitWarningHandler $isr @weak () {\n"
  "  throw 48\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc CAN0ReceiveWarningHandler $isr ()\n"
  "\n"
  "proc CAN0ReceiveWarningHandler $isr @weak () {\n"
  "  throw 49\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc CAN0WakeUpHandler $isr ()\n"
  "\n"
  "proc CAN0WakeUpHandler $isr @weak () {\n"
  "  throw 50\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc I2S0TransmitHandler $isr ()\n"
  "\n"
  "proc I2S0TransmitHandler $isr @weak () {\n"
  "  throw 51\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc I2S0ReceiveHandler $isr ()\n"
  "\n"
  "proc I2S0ReceiveHandler $isr @weak () {\n"
  "  throw 52\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc UART0LONHandler $isr ()\n"
  "\n"
  "proc UART0LONHandler $isr @weak () {\n"
  "  throw 60\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc UART0StatusHandler $isr ()\n"
  "\n"
  "proc UART0StatusHandler $isr @weak () {\n"
  "  throw 61\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc UART0ErrorHandler $isr ()\n"
  "\n"
  "proc UART0ErrorHandler $isr @weak () {\n"
  "  throw 62\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc UART1StatusHandler $isr ()\n"
  "\n"
  "proc UART1StatusHandler $isr @weak () {\n"
  "  throw 63\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc UART1ErrorHandler $isr ()\n"
  "\n"
  "proc UART1ErrorHandler $isr @weak () {\n"
  "  throw 64\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc UART2StatusHandler $isr ()\n"
  "\n"
  "proc UART2StatusHandler $isr @weak () {\n"
  "  throw 64\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc UART2ErrorHandler $isr ()\n"
  "\n"
  "proc UART2ErrorHandler $isr @weak () {\n"
  "  throw 65\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc ADC0Handler $isr ()\n"
  "\n"
  "proc ADC0Handler $isr @weak () {\n"
  "  throw 73\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc ADC1Handler $isr ()\n"
  "\n"
  "proc ADC1Handler $isr @weak () {\n"
  "  throw 74\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc CMP0Handler $isr ()\n"
  "\n"
  "proc CMP0Handler $isr @weak () {\n"
  "  throw 75\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc CMP1Handler $isr ()\n"
  "\n"
  "proc CMP1Handler $isr @weak () {\n"
  "  throw 76\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc CMP2Handler $isr ()\n"
  "\n"
  "proc CMP2Handler $isr @weak () {\n"
  "  throw 77\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc FMT0Handler $isr ()\n"
  "\n"
  "proc FMT0Handler $isr @weak () {\n"
  "  throw 78\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc FMT1Handler $isr ()\n"
  "\n"
  "proc FMT1Handler $isr @weak () {\n"
  "  throw 79\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc FMT2Handler $isr ()\n"
  "\n"
  "proc FMT2Handler $isr @weak () {\n"
  "  throw 80\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc CMTHandler $isr ()\n"
  "\n"
  "proc CMTHandler $isr @weak () {\n"
  "  throw 81\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc RTCAlarmHandler $isr ()\n"
  "\n"
  "proc RTCAlarmHandler $isr @weak () {\n"
  "  throw 82\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc RTCSecondHandler $isr ()\n"
  "\n"
  "proc RTCSecondHandler $isr @weak () {\n"
  "  throw 83\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc PITChannel0Handler $isr ()\n"
  "\n"
  "proc PITChannel0Handler $isr @weak () {\n"
  "  throw 84\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc PITChannel1Handler $isr ()\n"
  "\n"
  "proc PITChannel1Handler $isr @weak () {\n"
  "  throw 85\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc PITChannel2Handler $isr ()\n"
  "\n"
  "proc PITChannel2Handler $isr @weak () {\n"
  "  throw 86\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc PITChannel3Handler $isr ()\n"
  "\n"
  "proc PITChannel3Handler $isr @weak () {\n"
  "  throw 87\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc PDBHandler $isr ()\n"
  "\n"
  "proc PDBHandler $isr @weak () {\n"
  "  throw 88\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc USBOTGHandler $isr ()\n"
  "\n"
  "proc USBOTGHandler $isr @weak () {\n"
  "  throw 89\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc USBChargerDetectHandler $isr ()\n"
  "\n"
  "proc USBChargerDetectHandler $isr @weak () {\n"
  "  throw 90\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc DAC0Handler $isr ()\n"
  "\n"
  "proc DAC0Handler $isr @weak () {\n"
  "  throw 97\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc TSIHandler $isr ()\n"
  "\n"
  "proc TSIHandler $isr @weak () {\n"
  "  throw 99\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc MCGHandler $isr ()\n"
  "\n"
  "proc MCGHandler $isr @weak () {\n"
  "  throw 100\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc lowPowerTimerHandler $isr ()\n"
  "\n"
  "proc lowPowerTimerHandler $isr @weak () {\n"
  "  throw 101\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc pinDetectPortAHandler $isr ()\n"
  "\n"
  "proc pinDetectPortAHandler $isr @weak () {\n"
  "  throw 103\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc pinDetectPortBHandler $isr ()\n"
  "\n"
  "proc pinDetectPortBHandler $isr @weak () {\n"
  "  throw 104\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc pinDetectPortCHandler $isr ()\n"
  "\n"
  "proc pinDetectPortCHandler $isr @weak () {\n"
  "  throw 105\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc pinDetectPortDHandler $isr ()\n"
  "\n"
  "proc pinDetectPortDHandler $isr @weak () {\n"
  "  throw 106\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc pinDetectPortEHandler $isr ()\n"
  "\n"
  "proc pinDetectPortEHandler $isr @weak () {\n"
  "  throw 107\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "required proc softwareInterruptHandler $isr ()\n"
  "\n"
  "proc softwareInterruptHandler $isr @weak () {\n"
  "  throw 110\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_4_targetTemplates (
  "default-isr.plm",
  "plm",
  true, // Text file
  14840, // Text length
  gWrapperFileContent_4_targetTemplates
) ;

//--- File 'files/lcd.plm'

const char * gWrapperFileContent_5_targetTemplates = "\n"
  "// http://esd.cs.ucr.edu/labs/interface/interface.html\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//   PORT CONFIGURATION                                                        *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "//   D4 : PTB0\n"
  "//   D5 : PTC0\n"
  "//   D6 : PTD1\n"
  "//   D7 : PTB2\n"
  "//   RS : PTB3\n"
  "//   E  : PTB1\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc configurePorts $init () {\n"
  "//--- D4 (PTB0) is a GPIO (input by default)\n"
  "  PORTB_PCR0 = (1 << 8) ;\n"
  "  GPIOB_PDDR |= (1 << 0) ; // Program D4 as output (PTB0)\n"
  "//--- D5 (PTC0) is a GPIO (input by default)\n"
  "  PORTC_PCR0 = (1 << 8) ;\n"
  "  GPIOC_PDDR |= (1 << 0) ; // Program D5 as output (PTC0)\n"
  "//--- D6 (PTD1) is a GPIO (input by default)\n"
  "  PORTD_PCR1 = (1 << 8) ;\n"
  "  GPIOD_PDDR |= (1 << 1) ; // Program D6 as output (PTD1)\n"
  "//--- D7 (PTB2) is a GPIO (input by default)\n"
  "  PORTB_PCR2 = (1 << 8) ;\n"
  "  GPIOB_PDDR |= (1 << 2) ; // Program D7 as output (PTB2)\n"
  "//--- RS (PTB3) is an output\n"
  "  PORTB_PCR3 = (1 << 8) ;\n"
  "  GPIOB_PDDR |= (1 << 3) ;\n"
  "//--- E (PTB1) is an output\n"
  "  PORTB_PCR1 = (1 << 8) ;\n"
  "  GPIOB_PDDR |= (1 << 1) ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc driveHighE $init $exception $user () {\n"
  "  GPIOB_PSOR = 1 << 1 ; // E is PTB1\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "\n"
  "proc driveLowE $init $exception $user () {\n"
  "  GPIOB_PCOR = 1 << 1 ; // E is PTB1\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "\n"
  "proc driveHighRS $init $exception $user () {\n"
  "  GPIOB_PSOR = 1 << 3 ; // RS is PTB3\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "\n"
  "proc driveLowRS $init $exception $user () {\n"
  "  GPIOB_PCOR = 1 << 3 ; // RS is PTB3\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc setD4 $init $exception $user (\?inValue : Bool) { // PTB0\n"
  "  if inValue then\n"
  "    GPIOB_PSOR = 1 << 0 ;\n"
  "  else\n"
  "    GPIOB_PCOR = 1 << 0 ;\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc setD5 $init $exception $user (\?inValue : Bool) { // PTC0\n"
  "  if inValue then\n"
  "    GPIOC_PSOR = 1 << 0 ;\n"
  "  else\n"
  "    GPIOC_PCOR = 1 << 0 ;\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc setD6 $init $exception $user (\?inValue : Bool) { // PTD1\n"
  "  if inValue then\n"
  "    GPIOD_PSOR = 1 << 1 ;\n"
  "  else\n"
  "    GPIOD_PCOR = 1 << 1 ;\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc setD7 $init $exception $user (\?inValue : Bool) { // PTB2\n"
  "  if inValue then\n"
  "    GPIOB_PSOR = 1 << 2 ;\n"
  "  else\n"
  "    GPIOB_PCOR = 1 << 2 ;\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//   UTILITY ROUTINES                                                          *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc busyWaitingDuringMS $init (\?inDuration : UInt32) {\n"
  "  let deadline = gCompteur + inDuration\n"
  "  while gCompteur < deadline do\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc programLcd4BitDataBusOutput $init (\?inValue : UInt8) {\n"
  "  setD4 (!(inValue & 0x01) != 0)\n"
  "  setD5 (!(inValue & 0x02) != 0)\n"
  "  setD6 (!(inValue & 0x04) != 0)\n"
  "  setD7 (!(inValue & 0x08) != 0)\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc write4BitCommand $init (\?inValue : UInt8) {\n"
  "  busyWaitingDuringMS (!1) ;\n"
  "  driveLowRS () ;\n"
  "  programLcd4BitDataBusOutput (!inValue) ;\n"
  "  driveHighE () ;\n"
  "  busyWaitingDuringMS (!1) ;\n"
  "  driveLowE () ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc write8bitCommand $init (\?inCommand : UInt8) {\n"
  "  busyWaitingDuringMS (!1) ;\n"
  "  driveLowRS () ;\n"
  "  programLcd4BitDataBusOutput (!inCommand >> 4) ;\n"
  "  driveHighE () ;\n"
  "  busyWaitingDuringMS (!1) ;\n"
  "  driveLowE () ;\n"
  "  busyWaitingDuringMS (!1) ;\n"
  "  programLcd4BitDataBusOutput (!inCommand) ;\n"
  "  driveHighE () ;\n"
  "  busyWaitingDuringMS (!1) ;\n"
  "  driveLowE () ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//   LCD INIT                                                                  *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "init 10 {\n"
  "  configurePorts () ;\n"
  "//--- \xC3""\x89""tape 1 : attendre 15 ms\n"
  "  busyWaitingDuringMS (!15) ;\n"
  "//--- \xC3""\x89""tape 2 : \xC3""\xA9""crire la commande 0x30\n"
  "  write4BitCommand (!0x3) ;\n"
  "//--- \xC3""\x89""tape 3 : attendre 4,1 ms (en fait 5 ms)\n"
  "  busyWaitingDuringMS (!5) ;\n"
  "//--- \xC3""\x89""tape 4 : \xC3""\xA9""crire la commande 0x30 une 2e fois\n"
  "  write4BitCommand (!0x3) ;\n"
  "//--- \xC3""\x89""tape 5 : attendre 100 \xC2""\xB5""s\n"
  "  busyWaitingDuringMS (!1) ;\n"
  "//--- \xC3""\x89""tape 6 : \xC3""\xA9""crire la commande 0x30 une 3e fois\n"
  "  write4BitCommand (!0x3) ;\n"
  "//--- \xC3""\x89""tape 7 : \xC3""\xA9""crire la commande 0x20 pour passer en 4 bits\n"
  "  write4BitCommand (!0x2) ;\n"
  "//--- \xC3""\x89""tape 8 : \xC3""\xA9""crire la commande 'Set Interface Length' : 0 0 1 DL N F * *\n"
  "//    DL : Data interface length : 0 (4 bits)\n"
  "//    N : Number of Display lines : 1 (2 lignes)\n"
  "//    F : Character Font : 0 (5x7)\n"
  "  write8bitCommand (!0x28) ;\n"
  "//--- \xC3""\x89""tape 9 : \xC3""\xA9""crire la commande 'Display Off'\n"
  "  write8bitCommand (!0x08) ;\n"
  "//--- \xC3""\x89""tape 10 : \xC3""\xA9""crire la commande 'Clear Display'\n"
  "  write8bitCommand (!0x01) ;\n"
  "//--- \xC3""\x89""tape 11 : \xC3""\xA9""crire la commande 'Set Cursor Move Direction' : 0 0 0 0 0 1 ID S\n"
  "//    ID : Increment Cursor after Each Byte Written to Display : 1 (oui)\n"
  "//    S : Shift Display When Byte Written : 0 (non)\n"
  "  write8bitCommand (!0x06) ;\n"
  "//--- \xC3""\x89""tape 12 : \xC3""\xA9""crire la commande 'Move Cursor / Shift Display' : 0 0 0 1 SC RL * *\n"
  "//    SC : Display Shift On : 1 (oui)\n"
  "//    RL : Direction of Shift : 1 (vers la droite)\n"
  "  write8bitCommand (!0x1C) ;\n"
  "//--- \xC3""\x89""tape 13 : \xC3""\xA9""crire la commande 'Return Cursor and LCD to Home Position'\n"
  "  write8bitCommand (!0x02) ;\n"
  "//--- \xC3""\x89""tape 14 : \xC3""\xA9""crire la commande 'Enable Display / Cursor' : 0 0 0 0 1 D C B\n"
  "//    D : Turn Display On : 1 (oui)\n"
  "//    C : Turn Cursor On : 0 (non)\n"
  "//    B : Cursor Blink On : 0 (non)\n"
  "  write8bitCommand (!0x0C) ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//   PRINT ROUTINES IN USER MODE                                               *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc programLcd4BitDataBusOutput_inUserMode $user @noWarningIfUnused (\?inValue : UInt8) {\n"
  "  setD4 (!(inValue & 0x01) != 0)\n"
  "  setD5 (!(inValue & 0x02) != 0)\n"
  "  setD6 (!(inValue & 0x04) != 0)\n"
  "  setD7 (!(inValue & 0x08) != 0)\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc write8bitCommand_inUserMode $user @noWarningIfUnused (\?inCommand : UInt8) {\n"
  "  waitMS (!1) ;\n"
  "  driveLowRS () ;\n"
  "  programLcd4BitDataBusOutput_inUserMode (!inCommand >> 4) ;\n"
  "  driveHighE () ;\n"
  "  waitMS (!1) ;\n"
  "  driveLowE () ;\n"
  "  waitMS (!1) ;\n"
  "  programLcd4BitDataBusOutput_inUserMode (!inCommand) ;\n"
  "  driveHighE () ;\n"
  "  waitMS (!1) ;\n"
  "  driveLowE () ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc writeData_inUserMode $user @noWarningIfUnused (\?inData : UInt8) {\n"
  "  waitMS (!1) ;\n"
  "  driveHighRS () ;\n"
  "  programLcd4BitDataBusOutput_inUserMode (!inData >> 4) ;\n"
  "  driveHighE () ;\n"
  "  waitMS (!1) ;\n"
  "  driveLowE () ;\n"
  "  waitMS (!1) ;\n"
  "  programLcd4BitDataBusOutput_inUserMode (!inData) ;\n"
  "  driveHighE () ;\n"
  "  waitMS (!1) ;\n"
  "  driveLowE () ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "// Line 0 : 00 -> 19\n"
  "// Line 1 : 64 -> 83\n"
  "// Line 2 : 20 -> 39\n"
  "// Line 3 : 84 -> 103\n"
  "\n"
  "proc goto $user @noWarningIfUnused (\?line:inLine : UInt32 \?column:inColumn : UInt8) {\n"
  "  if inColumn < 20 then\n"
  "    if inLine == 0 then\n"
  "      write8bitCommand_inUserMode (!0x80 + 0 + inColumn) ;\n"
  "    elsif inLine == 1 then\n"
  "      write8bitCommand_inUserMode (!0x80 + 64 + inColumn) ;\n"
  "    elsif inLine == 2 then\n"
  "      write8bitCommand_inUserMode (!0x80 + 20 + inColumn) ;\n"
  "    elsif inLine == 3 then\n"
  "      write8bitCommand_inUserMode (!0x80 + 84 + inColumn) ;\n"
  "    end\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "//void printString (const char * inString) {\n"
  "//  if (NULL != inString) {\n"
  "//    while ('\\0' != *inString) {\n"
  "//      writeData (*inString) ;\n"
  "//      inString ++ ;\n"
  "//    }\n"
  "//  }\n"
  "//}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "//void printChar (const char inChar) {\n"
  "//  writeData (inChar) ;\n"
  "//}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc clearScreen $user @noWarningIfUnused () {\n"
  "  write8bitCommand_inUserMode (!0x01)\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc printSpaces $user @noWarningIfUnused (\?inCount : UInt32) {\n"
  "  var count = inCount\n"
  "  while (count > 0) do\n"
  "    writeData_inUserMode (!0x20)\n"
  "    count -- ;\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc printUnsigned $user @noWarningIfUnused (\?inValue : UInt32) {\n"
  "  var divisor : UInt32 = 1_000_000_000\n"
  "  var value = inValue\n"
  "  var isPrinting = false\n"
  "  while divisor > 0 do\n"
  "    if isPrinting or (value >= divisor) then\n"
  "      writeData_inUserMode (!0x30 + ((value / divisor) \\ UInt8))\n"
  "      value = value % divisor\n"
  "      isPrinting = true\n"
  "    end\n"
  "    divisor = divisor / 10\n"
  "  end\n"
  "  if not isPrinting then\n"
  "    writeData_inUserMode (!0x30)\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc printSigned $user @noWarningIfUnused (\?inValue : Int32) {\n"
  "  if inValue >= 0 then\n"
  "    printUnsigned (!inValue &\\ UInt32)\n"
  "  else\n"
  "    writeData_inUserMode (!0x2D) // Signe -\n"
  "    printUnsigned (!(- inValue) &\\ UInt32)\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "//void printSigned (const int32_t inValue) {\n"
  "//  if (inValue < 0) {\n"
  "//    printChar ('-') ;\n"
  "//    printUnsigned ((uint32_t) -inValue) ;\n"
  "//  }else{\n"
  "//    printUnsigned ((uint32_t) inValue) ;\n"
  "//  }\n"
  "//}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "//void printHex1 (const uint32_t inValue) {\n"
  "//  const uint32_t v = inValue & 0xF ;\n"
  "//  if (v < 10) {\n"
  "//    printChar ('0' + v) ;\n"
  "//  }else{\n"
  "//    printChar ('A' + v - 10) ;\n"
  "//  }  \n"
  "//}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "//void printHex2 (const uint32_t inValue) {\n"
  "//  printHex1 (inValue >> 4) ;\n"
  "//  printHex1 (inValue) ;\n"
  "//}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "//void printHex4 (const uint32_t inValue) {\n"
  "//  printHex2 (inValue >> 8) ;\n"
  "//  printHex2 (inValue) ;\n"
  "//}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "\n"
  "//void printHex8 (const uint32_t inValue) {\n"
  "//  printHex4 (inValue >> 16) ;\n"
  "//  printHex4 (inValue) ;\n"
  "//}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "//void printHex16 (const uint64_t inValue) {\n"
  "//  printHex8 ((uint32_t) (inValue >> 32)) ;\n"
  "//  printHex8 ((uint32_t) inValue) ;\n"
  "//}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//   EXCEPTION                                                                 *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc programLcd4BitDataBusOutput_inExceptionMode $exception @noWarningIfUnused (\?inValue : UInt8) {\n"
  "  setD4 (!(inValue & 0x01) != 0)\n"
  "  setD5 (!(inValue & 0x02) != 0)\n"
  "  setD6 (!(inValue & 0x04) != 0)\n"
  "  setD7 (!(inValue & 0x08) != 0)\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc waitOneMillisecondInExceptionMode $exception @noWarningIfUnused () {\n"
  "  while not SYST_CSR.COUNTFLAG.bool do\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc waitMSInExceptionMode $exception @noWarningIfUnused (\?duration: inDuration : UInt32) {\n"
  "  var duration = inDuration\n"
  "  while duration > 0 do\n"
  "    waitOneMillisecondInExceptionMode ()\n"
  "    duration &--\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc writeDataInExceptionMode $exception @noWarningIfUnused (\?inData : UInt8) {\n"
  "  waitOneMillisecondInExceptionMode () ;\n"
  "  driveHighRS () ;\n"
  "  programLcd4BitDataBusOutput_inExceptionMode (!inData >> 4) ;\n"
  "  driveHighE () ;\n"
  "  waitOneMillisecondInExceptionMode () ;\n"
  "  driveLowE () ;\n"
  "  waitOneMillisecondInExceptionMode () ;\n"
  "  programLcd4BitDataBusOutput_inExceptionMode (!inData) ;\n"
  "  driveHighE () ;\n"
  "  waitOneMillisecondInExceptionMode () ;\n"
  "  driveLowE () ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc printUnsignedInExceptionMode $exception @noWarningIfUnused (\?inValue : UInt32) {\n"
  "  var divisor : UInt32 = 1_000_000_000\n"
  "  var value = inValue\n"
  "  var isPrinting = false\n"
  "  while divisor > 0 do\n"
  "    if isPrinting or (value >= divisor) then\n"
  "      writeDataInExceptionMode (!0x30 &+ ((value &/ divisor) &\\ UInt8))\n"
  "      value = value &% divisor\n"
  "      isPrinting = true\n"
  "    end\n"
  "    divisor = divisor &/ 10\n"
  "  end\n"
  "  if not isPrinting then\n"
  "    writeDataInExceptionMode (!0x30)\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc printSignedInExceptionMode $exception @noWarningIfUnused (\?inValue : Int32) {\n"
  "  if inValue >= 0 then\n"
  "    printUnsignedInExceptionMode (!inValue &\\ UInt32)\n"
  "  else\n"
  "    writeDataInExceptionMode (!0x2D) // Signe -\n"
  "    printUnsignedInExceptionMode (!(&- inValue) &\\ UInt32)\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc write8bitCommand_inExceptionMode $exception @noWarningIfUnused (\?inCommand : UInt8) {\n"
  "  waitOneMillisecondInExceptionMode () ;\n"
  "  driveLowRS () ;\n"
  "  programLcd4BitDataBusOutput_inExceptionMode (!inCommand >> 4) ;\n"
  "  driveHighE () ;\n"
  "  waitOneMillisecondInExceptionMode () ;\n"
  "  driveLowE () ;\n"
  "  waitOneMillisecondInExceptionMode () ;\n"
  "  programLcd4BitDataBusOutput_inExceptionMode (!inCommand) ;\n"
  "  driveHighE () ;\n"
  "  waitOneMillisecondInExceptionMode () ;\n"
  "  driveLowE () ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc gotoInExceptionMode $exception @noWarningIfUnused (\?line:inLine : UInt32 \?column:inColumn : UInt8) {\n"
  "  if inColumn < 20 then\n"
  "    if inLine == 0 then\n"
  "      write8bitCommand_inExceptionMode (!0x80 &+ 0 &+ inColumn) ;\n"
  "    elsif inLine == 1 then\n"
  "      write8bitCommand_inExceptionMode (!0x80 &+ 64 &+ inColumn) ;\n"
  "    elsif inLine == 2 then\n"
  "      write8bitCommand_inExceptionMode (!0x80 &+ 20 &+ inColumn) ;\n"
  "    elsif inLine == 3 then\n"
  "      write8bitCommand_inExceptionMode (!0x80 &+ 84 &+ inColumn) ;\n"
  "    end\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc clearScreenInExceptionMode $exception @noWarningIfUnused () {\n"
  "  write8bitCommand_inExceptionMode (!0x01)\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "exception setup 0 {\n"
  "  clearScreenInExceptionMode ()\n"
  "  waitMSInExceptionMode (!duration:4)\n"
  "  gotoInExceptionMode (!line:0 !column:0)\n"
  "  printSignedInExceptionMode (!CODE)\n"
  "  gotoInExceptionMode (!line:1 !column:0)\n"
  "  printUnsignedInExceptionMode (!LINE)\n"
  "}\n"
  "\n"
  "exception loop 0 {\n"
  "  waitMSInExceptionMode (!duration:50)\n"
  "  ledOn (!LED_L0 | LED_L1 | LED_L2 | LED_L3 | LED_L4 | LED_TEENSY)\n"
  "  waitMSInExceptionMode (!duration:50)\n"
  "  ledOff (!LED_L0 | LED_L1 | LED_L2 | LED_L3 | LED_L4 | LED_TEENSY)\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n" ;

const cRegularFileWrapper gWrapperFile_5_targetTemplates (
  "lcd.plm",
  "plm",
  true, // Text file
  15519, // Text length
  gWrapperFileContent_5_targetTemplates
) ;

//--- File 'files/leds.plm'

const char * gWrapperFileContent_6_targetTemplates = "//-----------------------------------------------------------------------------*\n"
  "//   Led L0 : PTA12\n"
  "//   Led L1 : PTA13\n"
  "//   Led L2 : PTD7\n"
  "//   Led L3 : PTD4\n"
  "//   Led L4 : PTD2\n"
  "//   Led sur carte Teensy : PTC5\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "init 100 {\n"
  "//--- Led L0 : PTA12\n"
  "  PORTA_PCR12 = (1 << 8)\n"
  "  GPIOA_PDDR |= (1 << 12)\n"
  "//--- Led L1 : PTA13\n"
  "  PORTA_PCR13 = (1 << 8)\n"
  "  GPIOA_PDDR |= (1 << 13)\n"
  "//--- Led L2 : PTD13\n"
  "  PORTD_PCR7 = (1 << 8)\n"
  "  GPIOD_PDDR |= (1 << 7)\n"
  "//--- Led L3 : PTD4\n"
  "  PORTD_PCR4 = (1 << 8)\n"
  "  GPIOD_PDDR |= (1 << 4)\n"
  "//--- Led L4 : PTD2\n"
  "  PORTD_PCR2 = (1 << 8)\n"
  "  GPIOD_PDDR |= (1 << 2)\n"
  "//--- Led Teensy\n"
  "  PORTC_PCR5 = (1 << 8)\n"
  "  GPIOC_PDDR |= (1 << 5)\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "let LED_L0 : UInt32 = (1 << 0)\n"
  "let LED_L1 : UInt32 = (1 << 1)\n"
  "let LED_L2 : UInt32 = (1 << 2)\n"
  "let LED_L3 : UInt32 = (1 << 3)\n"
  "let LED_L4 : UInt32 = (1 << 4)\n"
  "let LED_TEENSY : UInt32 = (1 << 5)\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc ledOn $user $exception $isr (\?inLeds : UInt32) {\n"
  "//--- Led L0\n"
  "  if ((inLeds & LED_L0) != 0) then\n"
  "    GPIOA_PSOR = 1 << 12 ;\n"
  "  end\n"
  "//--- Led L1\n"
  "  if ((inLeds & LED_L1) != 0) then\n"
  "    GPIOA_PSOR = 1 << 13 ;\n"
  "  end\n"
  "//--- Led L2\n"
  "  if ((inLeds & LED_L2) != 0) then\n"
  "    GPIOD_PSOR = 1 << 7 ;\n"
  "  end\n"
  "//--- Led L3\n"
  "  if ((inLeds & LED_L3) != 0) then\n"
  "    GPIOD_PSOR = 1 << 4 ;\n"
  "  end\n"
  "//--- Led L4\n"
  "  if ((inLeds & LED_L4) != 0) then\n"
  "    GPIOD_PSOR = 1 << 2 ;\n"
  "  end\n"
  "//--- Led Teensy\n"
  "  if ((inLeds & LED_TEENSY) != 0) then\n"
  "    GPIOC_PSOR = 1 << 5 ;\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "proc ledOff $user $exception $isr (\?inLeds : UInt32) {\n"
  "//--- Led L0\n"
  "  if ((inLeds & LED_L0) != 0) then\n"
  "    GPIOA_PCOR = 1 << 12 ;\n"
  "  end\n"
  "//--- Led L1\n"
  "  if ((inLeds & LED_L1) != 0) then\n"
  "    GPIOA_PCOR = 1 << 13 ;\n"
  "  end\n"
  "//--- Led L2\n"
  "  if ((inLeds & LED_L2) != 0) then\n"
  "    GPIOD_PCOR = 1 << 7 ;\n"
  "  end\n"
  "//--- Led L3\n"
  "  if ((inLeds & LED_L3) != 0) then\n"
  "    GPIOD_PCOR = 1 << 4 ;\n"
  "  end\n"
  "//--- Led L4\n"
  "  if ((inLeds & LED_L4) != 0) then\n"
  "    GPIOD_PCOR = 1 << 2 ;\n"
  "  end\n"
  "//--- Led Teensy\n"
  "  if ((inLeds & LED_TEENSY) != 0) then\n"
  "    GPIOC_PCOR = 1 << 5 ;\n"
  "  end\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_6_targetTemplates (
  "leds.plm",
  "plm",
  true, // Text file
  2338, // Text length
  gWrapperFileContent_6_targetTemplates
) ;

//--- File 'files/mk20dx256.plm'

const char * gWrapperFileContent_7_targetTemplates = "// Teensyduino Core Library\n"
  "// http://www.pjrc.com/teensy/\n"
  "// Copyright (c) 2013 PJRC.COM, LLC.\n"
  "//\n"
  "// Permission is hereby granted, free of charge, to any person obtaining\n"
  "// a copy of this software and associated documentation files (the\n"
  "// \"Software\"), to deal in the Software without restriction, including\n"
  "// without limitation the rights to use, copy, modify, merge, publish,\n"
  "// distribute, sublicense, and/or sell copies of the Software, and to\n"
  "// permit persons to whom the Software is furnished to do so, subject to\n"
  "// the following conditions:\n"
  "//\n"
  "// 1. The above copyright notice and this permission notice shall be \n"
  "// included in all copies or substantial portions of the Software.\n"
  "//\n"
  "// 2. If the Software is incorporated into a build system thallows \n"
  "// selection among a list of target devices, then similar target\n"
  "// devices manufactured by PJRC.COM must be included in the list of\n"
  "// target devices and selectable in the same manner.\n"
  "//\n"
  "// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
  "// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
  "// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
  "// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n"
  "// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n"
  "// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n"
  "// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n"
  "// SOFTWARE.\n"
  "\n"
  "let f_cpu : UInt32 = 96_000_000\n"
  "\n"
  "let f_bus : UInt32 = 48_000_000\n"
  "let f_mem  : UInt32= 24_000_000\n"
  "\n"
  "// chapter 11: Port control and interrupts (PORT)\n"
  " // Pin Control Register n\n"
  "register\n"
  "  PORTA_PCR0   at 0x40049000\n"
  "  PORTA_PCR1   at 0x40049004\n"
  "  PORTA_PCR2   at 0x40049008\n"
  "  PORTA_PCR3   at 0x4004900C\n"
  "  PORTA_PCR4   at 0x40049010\n"
  "  PORTA_PCR5   at 0x40049014\n"
  "  PORTA_PCR6   at 0x40049018\n"
  "  PORTA_PCR7   at 0x4004901C\n"
  "  PORTA_PCR8   at 0x40049020\n"
  "  PORTA_PCR9   at 0x40049024\n"
  "  PORTA_PCR10  at 0x40049028\n"
  "  PORTA_PCR11  at 0x4004902C\n"
  "  PORTA_PCR12  at 0x40049030\n"
  "  PORTA_PCR13  at 0x40049034\n"
  "  PORTA_PCR14  at 0x40049038\n"
  "  PORTA_PCR15  at 0x4004903C\n"
  "  PORTA_PCR16  at 0x40049040\n"
  "  PORTA_PCR17  at 0x40049044\n"
  "  PORTA_PCR18  at 0x40049048\n"
  "  PORTA_PCR19  at 0x4004904C\n"
  "  PORTA_PCR20  at 0x40049050\n"
  "  PORTA_PCR21  at 0x40049054\n"
  "  PORTA_PCR22  at 0x40049058\n"
  "  PORTA_PCR23  at 0x4004905C\n"
  "  PORTA_PCR24  at 0x40049060\n"
  "  PORTA_PCR25  at 0x40049064\n"
  "  PORTA_PCR26  at 0x40049068\n"
  "  PORTA_PCR27  at 0x4004906C\n"
  "  PORTA_PCR28  at 0x40049070\n"
  "  PORTA_PCR29  at 0x40049074\n"
  "  PORTA_PCR30  at 0x40049078\n"
  "  PORTA_PCR31  at 0x4004907C\n"
  "  PORTB_PCR0   at 0x4004A000\n"
  "  PORTB_PCR1   at 0x4004A004\n"
  "  PORTB_PCR2   at 0x4004A008\n"
  "  PORTB_PCR3   at 0x4004A00C\n"
  "  PORTB_PCR4   at 0x4004A010\n"
  "  PORTB_PCR5   at 0x4004A014\n"
  "  PORTB_PCR6   at 0x4004A018\n"
  "  PORTB_PCR7   at 0x4004A01C\n"
  "  PORTB_PCR8   at 0x4004A020\n"
  "  PORTB_PCR9   at 0x4004A024\n"
  "  PORTB_PCR10  at 0x4004A028\n"
  "  PORTB_PCR11  at 0x4004A02C\n"
  "  PORTB_PCR12  at 0x4004A030\n"
  "  PORTB_PCR13  at 0x4004A034\n"
  "  PORTB_PCR14  at 0x4004A038\n"
  "  PORTB_PCR15  at 0x4004A03C\n"
  "  PORTB_PCR16  at 0x4004A040\n"
  "  PORTB_PCR17  at 0x4004A044\n"
  "  PORTB_PCR18  at 0x4004A048\n"
  "  PORTB_PCR19  at 0x4004A04C\n"
  "  PORTB_PCR20  at 0x4004A050\n"
  "  PORTB_PCR21  at 0x4004A054\n"
  "  PORTB_PCR22  at 0x4004A058\n"
  "  PORTB_PCR23  at 0x4004A05C\n"
  "  PORTB_PCR24  at 0x4004A060\n"
  "  PORTB_PCR25  at 0x4004A064\n"
  "  PORTB_PCR26  at 0x4004A068\n"
  "  PORTB_PCR27  at 0x4004A06C\n"
  "  PORTB_PCR28  at 0x4004A070\n"
  "  PORTB_PCR29  at 0x4004A074\n"
  "  PORTB_PCR30  at 0x4004A078\n"
  "  PORTB_PCR31  at 0x4004A07C\n"
  "  PORTC_PCR0   at 0x4004B000\n"
  "  PORTC_PCR1   at 0x4004B004\n"
  "  PORTC_PCR2   at 0x4004B008\n"
  "  PORTC_PCR3   at 0x4004B00C\n"
  "  PORTC_PCR4   at 0x4004B010\n"
  "  PORTC_PCR5   at 0x4004B014\n"
  "  PORTC_PCR6   at 0x4004B018\n"
  "  PORTC_PCR7   at 0x4004B01C\n"
  "  PORTC_PCR8   at 0x4004B020\n"
  "  PORTC_PCR9   at 0x4004B024\n"
  "  PORTC_PCR10  at 0x4004B028\n"
  "  PORTC_PCR11  at 0x4004B02C\n"
  "  PORTC_PCR12  at 0x4004B030\n"
  "  PORTC_PCR13  at 0x4004B034\n"
  "  PORTC_PCR14  at 0x4004B038\n"
  "  PORTC_PCR15  at 0x4004B03C\n"
  "  PORTC_PCR16  at 0x4004B040\n"
  "  PORTC_PCR17  at 0x4004B044\n"
  "  PORTC_PCR18  at 0x4004B048\n"
  "  PORTC_PCR19  at 0x4004B04C\n"
  "  PORTC_PCR20  at 0x4004B050\n"
  "  PORTC_PCR21  at 0x4004B054\n"
  "  PORTC_PCR22  at 0x4004B058\n"
  "  PORTC_PCR23  at 0x4004B05C\n"
  "  PORTC_PCR24  at 0x4004B060\n"
  "  PORTC_PCR25  at 0x4004B064\n"
  "  PORTC_PCR26  at 0x4004B068\n"
  "  PORTC_PCR27  at 0x4004B06C\n"
  "  PORTC_PCR28  at 0x4004B070\n"
  "  PORTC_PCR29  at 0x4004B074\n"
  "  PORTC_PCR30  at 0x4004B078\n"
  "  PORTC_PCR31  at 0x4004B07C\n"
  "  PORTD_PCR0   at 0x4004C000\n"
  "  PORTD_PCR1   at 0x4004C004\n"
  "  PORTD_PCR2   at 0x4004C008\n"
  "  PORTD_PCR3   at 0x4004C00C\n"
  "  PORTD_PCR4   at 0x4004C010\n"
  "  PORTD_PCR5   at 0x4004C014\n"
  "  PORTD_PCR6   at 0x4004C018\n"
  "  PORTD_PCR7   at 0x4004C01C\n"
  "  PORTD_PCR8   at 0x4004C020\n"
  "  PORTD_PCR9   at 0x4004C024\n"
  "  PORTD_PCR10  at 0x4004C028\n"
  "  PORTD_PCR11  at 0x4004C02C\n"
  "  PORTD_PCR12  at 0x4004C030\n"
  "  PORTD_PCR13  at 0x4004C034\n"
  "  PORTD_PCR14  at 0x4004C038\n"
  "  PORTD_PCR15  at 0x4004C03C\n"
  "  PORTD_PCR16  at 0x4004C040\n"
  "  PORTD_PCR17  at 0x4004C044\n"
  "  PORTD_PCR18  at 0x4004C048\n"
  "  PORTD_PCR19  at 0x4004C04C\n"
  "  PORTD_PCR20  at 0x4004C050\n"
  "  PORTD_PCR21  at 0x4004C054\n"
  "  PORTD_PCR22  at 0x4004C058\n"
  "  PORTD_PCR23  at 0x4004C05C\n"
  "  PORTD_PCR24  at 0x4004C060\n"
  "  PORTD_PCR25  at 0x4004C064\n"
  "  PORTD_PCR26  at 0x4004C068\n"
  "  PORTD_PCR27  at 0x4004C06C\n"
  "  PORTD_PCR28  at 0x4004C070\n"
  "  PORTD_PCR29  at 0x4004C074\n"
  "  PORTD_PCR30  at 0x4004C078\n"
  "  PORTD_PCR31  at 0x4004C07C\n"
  "  PORTE_PCR0   at 0x4004D000\n"
  "  PORTE_PCR1   at 0x4004D004\n"
  "  PORTE_PCR2   at 0x4004D008\n"
  "  PORTE_PCR3   at 0x4004D00C\n"
  "  PORTE_PCR4   at 0x4004D010\n"
  "  PORTE_PCR5   at 0x4004D014\n"
  "  PORTE_PCR6   at 0x4004D018\n"
  "  PORTE_PCR7   at 0x4004D01C\n"
  "  PORTE_PCR8   at 0x4004D020\n"
  "  PORTE_PCR9   at 0x4004D024\n"
  "  PORTE_PCR10  at 0x4004D028\n"
  "  PORTE_PCR11  at 0x4004D02C\n"
  "  PORTE_PCR12  at 0x4004D030\n"
  "  PORTE_PCR13  at 0x4004D034\n"
  "  PORTE_PCR14  at 0x4004D038\n"
  "  PORTE_PCR15  at 0x4004D03C\n"
  "  PORTE_PCR16  at 0x4004D040\n"
  "  PORTE_PCR17  at 0x4004D044\n"
  "  PORTE_PCR18  at 0x4004D048\n"
  "  PORTE_PCR19  at 0x4004D04C\n"
  "  PORTE_PCR20  at 0x4004D050\n"
  "  PORTE_PCR21  at 0x4004D054\n"
  "  PORTE_PCR22  at 0x4004D058\n"
  "  PORTE_PCR23  at 0x4004D05C\n"
  "  PORTE_PCR24  at 0x4004D060\n"
  "  PORTE_PCR25  at 0x4004D064\n"
  "  PORTE_PCR26  at 0x4004D068\n"
  "  PORTE_PCR27  at 0x4004D06C\n"
  "  PORTE_PCR28  at 0x4004D070\n"
  "  PORTE_PCR29  at 0x4004D074\n"
  "  PORTE_PCR30  at 0x4004D078\n"
  "  PORTE_PCR31  at 0x4004D07C\n"
  ": UInt32 {\n"
  "  7, isf, 4, irqc[4], lk, 4, mux[3], 1, dse, ode, pfe, 1, sre, pe, ps\n"
  "}\n"
  "\n"
  "let PORT_PCR_ISF  : UInt32  = 0x01000000  // Interrupt Status Flag\n"
  "//register UInt32 PORT_PCR_IRQC(n)   (((n) & 15) << 16) // Interrupt Configuration\n"
  "let PORT_PCR_IRQC_MASK  : UInt32 = 0x000F0000\n"
  "let PORT_PCR_LK   : UInt32 = 0x00008000  // Lock Register\n"
  "//register UInt32 PORT_PCR_MUX(n)    (((n) & 7) << 8) // Pin Mux Control\n"
  "let PORT_PCR_MUX_MASK : UInt32 = 0x00000700\n"
  "let PORT_PCR_DSE      : UInt32 = 0x00000040  // Drive Strength Enable\n"
  "let PORT_PCR_ODE      : UInt32 = 0x00000020  // Open Drain Enable\n"
  "let PORT_PCR_PFE      : UInt32 = 0x00000010  // Passive Filter Enable\n"
  "let PORT_PCR_SRE      : UInt32 = 0x00000004  // Slew Rate Enable\n"
  "let PORT_PCR_PE       : UInt32 = 0x00000002  // Pull Enable\n"
  "let PORT_PCR_PS       : UInt32 = 0x00000001  // Pull Select\n"
  "\n"
  "register PORTA_GPCLR  at 0x40049080 : UInt32 // Global Pin Control Low Register\n"
  "register PORTA_GPCHR  at 0x40049084 : UInt32 // Global Pin Control High Register\n"
  "register PORTA_ISFR   at 0x400490A0 : UInt32 // Interrupt Status Flag Register\n"
  "\n"
  "register PORTB_GPCLR  at 0x4004A080 : UInt32 // Global Pin Control Low Register\n"
  "register PORTB_GPCHR  at 0x4004A084 : UInt32 // Global Pin Control High Register\n"
  "register PORTB_ISFR   at 0x4004A0A0 : UInt32 // Interrupt Status Flag Register\n"
  "\n"
  "register PORTC_GPCLR  at 0x4004B080 : UInt32 // Global Pin Control Low Register\n"
  "register PORTC_GPCHR  at 0x4004B084 : UInt32 // Global Pin Control High Register\n"
  "register PORTC_ISFR   at 0x4004B0A0 : UInt32 // Interrupt Status Flag Register\n"
  "\n"
  "register PORTD_GPCLR  at 0x4004C080 : UInt32 // Global Pin Control Low Register\n"
  "register PORTD_GPCHR  at 0x4004C084 : UInt32 // Global Pin Control High Register\n"
  "register PORTD_ISFR   at 0x4004C0A0 : UInt32 // Interrupt Status Flag Register\n"
  "\n"
  "register PORTE_GPCLR  at 0x4004D080 : UInt32 // Global Pin Control Low Register\n"
  "register PORTE_GPCHR  at 0x4004D084 : UInt32 // Global Pin Control High Register\n"
  "register PORTE_ISFR   at 0x4004D0A0 : UInt32 // Interrupt Status Flag Register\n"
  "\n"
  "// Chapter 12: System Integration Module (SIM)\n"
  "register SIM_SOPT1    at 0x40047000 : UInt32 // System Options Register 1\n"
  "register SIM_SOPT1CFG at 0x40047004 : UInt32 // SOPT1 Configuration Register\n"
  "register SIM_SOPT2    at 0x40048004 : UInt32 // System Options Register 2\n"
  "register SIM_SOPT2_USBSRC at 0x00040000  : UInt32 // 0=USB_CLKIN, 1=FFL/PLL \n"
  "register SIM_SOPT2_PLLFLLSEL at 0x00010000  : UInt32 // 0=FLL, 1=PLL\n"
  "register SIM_SOPT2_TRACECLKSEL at 0x00001000  : UInt32 // 0=MCGOUTCLK, 1=CPU\n"
  "register SIM_SOPT2_PTD7PAD at 0x00000800  : UInt32 // 0=normal, 1=double drive PTD7\n"
  "//register UInt32 SIM_SOPT2_CLKOUTSEL(n)   (((n) & 7) << 5) // Selects the clock to output on the CLKOUT pin.\n"
  "let SIM_SOPT2_RTCCLKOUTSEL : UInt32 = 0x00000010  // RTC clock out select\n"
  "register SIM_SOPT4   at 0x4004800C : UInt32 // System Options Register 4\n"
  "register SIM_SOPT5   at 0x40048010 : UInt32 // System Options Register 5\n"
  "register SIM_SOPT7   at 0x40048018 : UInt32 // System Options Register 7\n"
  "register SIM_SDID @ro at 0x40048024 : UInt32 // System Device Identification Register\n"
  "register SIM_SCGC2  at 0x4004802C : UInt32 // System Clock Gating Control Register 2\n"
  "let SIM_SCGC2_DAC0  : UInt32 =  0x00001000 // DAC0 Clock Gate Control\n"
  "register SIM_SCGC3  at 0x40048030 : UInt32 // System Clock Gating Control Register 3\n"
  "let SIM_SCGC3_ADC1 : UInt32 =  0x08000000 // ADC1 Clock Gate Control\n"
  "let SIM_SCGC3_FTM2 : UInt32 =  0x01000000 // FTM2 Clock Gate Control\n"
  "register SIM_SCGC4 at 0x40048034 : UInt32 // System Clock Gating Control Register 4\n"
  "let SIM_SCGC4_VREF  : UInt32 =  0x00100000  // VREF Clock Gate Control\n"
  "let SIM_SCGC4_CMP   : UInt32 = 0x00080000  // Comparator Clock Gate Control\n"
  "let SIM_SCGC4_USBOTG  : UInt32 = 0x00040000  // USB Clock Gate Control\n"
  "let SIM_SCGC4_UART2  : UInt32 =  0x00001000  // UART2 Clock Gate Control\n"
  "let SIM_SCGC4_UART1  : UInt32 =  0x00000800  // UART1 Clock Gate Control\n"
  "let SIM_SCGC4_UART0  : UInt32 =  0x00000400  // UART0 Clock Gate Control\n"
  "let SIM_SCGC4_I2C1  : UInt32 =  0x00000080  // I2C1 Clock Gate Control\n"
  "let SIM_SCGC4_I2C0  : UInt32 =  0x00000040  // I2C0 Clock Gate Control\n"
  "let SIM_SCGC4_CMT  : UInt32 =  0x00000004  // CMT Clock Gate Control\n"
  "let SIM_SCGC4_EWM  : UInt32 =  0x00000002  // EWM Clock Gate Control\n"
  "register SIM_SCGC5 at 0x40048038 : UInt32 // System Clock Gating Control Register 5\n"
  "let SIM_SCGC5_PORTE  : UInt32 =  0x00002000  // Port E Clock Gate Control\n"
  "let SIM_SCGC5_PORTD  : UInt32 =  0x00001000  // Port D Clock Gate Control\n"
  "let SIM_SCGC5_PORTC  : UInt32 =  0x00000800  // Port C Clock Gate Control\n"
  "let SIM_SCGC5_PORTB  : UInt32 =  0x00000400  // Port B Clock Gate Control\n"
  "let SIM_SCGC5_PORTA  : UInt32 =  0x00000200  // Port A Clock Gate Control\n"
  "let SIM_SCGC5_TSI  : UInt32 =  0x00000020  // Touch Sense Input TSI Clock Gate Control\n"
  "let SIM_SCGC5_LPTIMER  : UInt32 =  0x00000001  // Low Power Timer Access Control\n"
  "register SIM_SCGC6 at 0x4004803C : UInt32 // System Clock Gating Control Register 6\n"
  "let SIM_SCGC6_RTC   : UInt32 = 0x20000000  // RTC Access\n"
  "let SIM_SCGC6_ADC0  : UInt32 =   0x08000000  // ADC0 Clock Gate Control\n"
  "let SIM_SCGC6_FTM1  : UInt32 =   0x02000000  // FTM1 Clock Gate Control\n"
  "let SIM_SCGC6_FTM0  : UInt32=   0x01000000  // FTM0 Clock Gate Control\n"
  "let SIM_SCGC6_PIT  : UInt32 =  0x00800000  // PIT Clock Gate Control\n"
  "let SIM_SCGC6_PDB  : UInt32 =  0x00400000  // PDB Clock Gate Control\n"
  "let SIM_SCGC6_USBDCD  : UInt32=  0x00200000  // USB DCD Clock Gate Control\n"
  "let SIM_SCGC6_CRC  : UInt32 =  0x00040000  // CRC Clock Gate Control\n"
  "let SIM_SCGC6_I2S  : UInt32 =  0x00008000  // I2S Clock Gate Control\n"
  "let SIM_SCGC6_SPI1  : UInt32=   0x00002000  // SPI1 Clock Gate Control\n"
  "let SIM_SCGC6_SPI0  : UInt32=   0x00001000  // SPI0 Clock Gate Control\n"
  "let SIM_SCGC6_FLEXCAN0  : UInt32 =  0x00000010  // FlexCAN0 Clock Gate Control\n"
  "let SIM_SCGC6_DMAMUX : UInt32 =  0x00000002  // DMA Mux Clock Gate Control\n"
  "let SIM_SCGC6_FTFL  : UInt32 =  0x00000001  // Flash Memory Clock Gate Control\n"
  "\n"
  "register SIM_SCGC7 at 0x40048040 : UInt32 // System Clock Gating Control Register 7\n"
  "let SIM_SCGC7_DMA  : UInt32 =  0x00000002  // DMA Clock Gate Control\n"
  "\n"
  "register SIM_CLKDIV1 at 0x4004_8044 : UInt32 {// System Clock Divider Register 1\n"
  "  OUTDIV1[4], // Divide value for the core/system clock\n"
  "  OUTDIV2[4], // Divide value for the peripheral clock\n"
  "  4,\n"
  "  OUTDIV4[4], // Divide value for the flash clock\n"
  "  16\n"
  "}\n"
  "\n"
  "register SIM_CLKDIV2 at 0x40048048 : UInt32 // System Clock Divider Register 2\n"
  "//register UInt32 SIM_CLKDIV2_USBDIV(n)   (((n) & 0x07) << 1)\n"
  "let SIM_CLKDIV2_USBFRAC  : UInt32 =  0x01\n"
  "register SIM_FCFG1 @ro at 0x4004804C : UInt32 // Flash Configuration Register 1\n"
  "register SIM_FCFG2 @ro at 0x40048050 : UInt32 // Flash Configuration Register 2\n"
  "register SIM_UIDH  @ro at 0x40048054 : UInt32 // Unique Identification Register High\n"
  "register SIM_UIDMH @ro at 0x40048058 : UInt32 // Unique Identification Register Mid-High\n"
  "register SIM_UIDML @ro at 0x4004805C : UInt32 // Unique Identification Register Mid Low\n"
  "register SIM_UIDL  @ro at 0x40048060 : UInt32 // Unique Identification Register Low\n"
  "\n"
  "// Chapter 13: Reset Control Module (RCM)\n"
  "register RCM_SRS0 at 0x4007F000 : UInt8 // System Reset Status Register 0\n"
  "register RCM_SRS1 at 0x4007F001 : UInt8 // System Reset Status Register 1\n"
  "register RCM_RPFC at 0x4007F004 : UInt8 // Reset Pin Filter Control Register\n"
  "register RCM_RPFW at 0x4007F005 : UInt8 // Reset Pin Filter Width Register\n"
  "register RCM_MR   at 0x4007F007 : UInt8 // Mode Register\n"
  "\n"
  "// Chapter 14: System Mode Controller\n"
  "register SMC_PMPROT  at 0x4007E000 : UInt8 // Power Mode Protection Register\n"
  "let SMC_PMPROT_AVLP  : UInt8 = 0x20   // Allow very low power modes\n"
  "let SMC_PMPROT_ALLS : UInt8  = 0x08   // Allow low leakage stop mode\n"
  "let SMC_PMPROT_AVLLS : UInt8 = 0x02   // Allow very low leakage stop mode\n"
  "\n"
  "register SMC_PMCTRL  at 0x4007E001 : UInt8 // Power Mode Control Register\n"
  "let SMC_PMCTRL_LPWUI : UInt8  = 0x80   // Low Power Wake Up on Interrupt\n"
  "//register UInt8 SMC_PMCTRL_RUNM(n)  (uint8_t)(((n) & 0x03) << 5) // Run Mode Control\n"
  "let SMC_PMCTRL_STOPA : UInt8  = 0x08   // Stop Aborted\n"
  "//register UInt8 SMC_PMCTRL_STOPM(n)  (uint8_t)((n) & 0x07)  // Stop Mode Control\n"
  "\n"
  "register SMC_VLLSCTRL at 0x4007E002 : UInt8 // VLLS Control Register\n"
  "let SMC_VLLSCTRL_PORPO : UInt8 = 0x20   // POR Power Option\n"
  "//let UInt8 SMC_VLLSCTRL_VLLSM(n)  (uint8_t)((n) & 0x07)  // VLLS Mode Control\n"
  "\n"
  "register SMC_PMST at 0x4007E003 : UInt8 // Power Mode Status Register\n"
  "let SMC_PMSTAT_RUN  : UInt8 = 0x01   // Current power mode is RUN\n"
  "let SMC_PMSTAT_STOP : UInt8 = 0x02   // Current power mode is STOP\n"
  "let SMC_PMSTAT_VLPR : UInt8 = 0x04   // Current power mode is VLPR\n"
  "let SMC_PMSTAT_VLPW : UInt8 = 0x08   // Current power mode is VLPW\n"
  "let SMC_PMSTAT_VLPS : UInt8 = 0x10   // Current power mode is VLPS\n"
  "let SMC_PMSTAT_LLS  : UInt8 = 0x20   // Current power mode is LLS\n"
  "let SMC_PMSTAT_VLLS : UInt8 = 0x40   // Current power mode is VLLS\n"
  "\n"
  "// Chapter 15: Power Management Controller\n"
  "register PMC_LVDSC1 at 0x4007D000 : UInt8 // Low Voltage Detect Status And Control 1 register\n"
  "let PMC_LVDSC1_LVDF : UInt8 = 0x80   // Low-Voltage Detect Flag\n"
  "let PMC_LVDSC1_LVDACK : UInt8 = 0x40   // Low-Voltage Detect Acknowledge\n"
  "let PMC_LVDSC1_LVDIE : UInt8 = 0x20   // Low-Voltage Detect Interrupt Enable\n"
  "let PMC_LVDSC1_LVDRE : UInt8 = 0x10   // Low-Voltage Detect Reset Enable\n"
  "//let UInt8 PMC_LVDSC1_LVDV(n)  (uint8_t)((n) & 0x03)  // Low-Voltage Detect Voltage Select\n"
  "register PMC_LVDSC2 at 0x4007D001 : UInt8 // Low Voltage Detect Status And Control 2 register\n"
  "let PMC_LVDSC2_LVWF : UInt8  = 0x80   // Low-Voltage Warning Flag\n"
  "let PMC_LVDSC2_LVWACK : UInt8 = 0x40   // Low-Voltage Warning Acknowledge\n"
  "let PMC_LVDSC2_LVWIE : UInt8 = 0x20   // Low-Voltage Warning Interrupt Enable\n"
  "//let UInt8 PMC_LVDSC2_LVWV(n)  (uint8_t)((n) & 0x03)  // Low-Voltage Warning Voltage Select\n"
  "\n"
  "register PMC_REGSC at 0x4007D002 : UInt8 { // Regulator Status And Control register\n"
  "  3, BGEN, ACKISO, REGONS, BGBE, 1\n"
  "}\n"
  "\n"
  "// Chapter 16: Low-Leakage Wakeup Unit (LLWU)\n"
  "register LLWU_PE1  at 0x4007C000 : UInt8 // LLWU Pin Enable 1 register\n"
  "register LLWU_PE2  at 0x4007C001 : UInt8 // LLWU Pin Enable 2 register\n"
  "register LLWU_PE3  at 0x4007C002 : UInt8 // LLWU Pin Enable 3 register\n"
  "register LLWU_PE4  at 0x4007C003 : UInt8 // LLWU Pin Enable 4 register\n"
  "register LLWU_ME   at 0x4007C004 : UInt8 // LLWU Module Enable register\n"
  "register LLWU_F1   at 0x4007C005 : UInt8 // LLWU Flag 1 register\n"
  "register LLWU_F2   at 0x4007C006 : UInt8 // LLWU Flag 2 register\n"
  "register LLWU_F3   at 0x4007C007 : UInt8 // LLWU Flag 3 register\n"
  "register LLWU_FILT1 at 0x4007C008 : UInt8 // LLWU Pin Filter 1 register\n"
  "register LLWU_FILT2 at 0x4007C009 : UInt8 // LLWU Pin Filter 2 register\n"
  "register LLWU_RST  at 0x4007C00A : UInt8 // LLWU Reset Enable register\n"
  "\n"
  "// Chapter 17: Miscellaneous Control Module (MCM)\n"
  "register MCM_PLASC at 0xE0080008 : UInt16 // Crossbar Switch (AXBS) Slave Configuration\n"
  "\n"
  "register MCM_PLAMC at 0xE008000A : UInt16 // Crossbar Switch (AXBS) Master Configuration\n"
  "\n"
  "register MCM_PLACR at 0xE008000C : UInt32 // Crossbar Switch (AXBS) Control Register (MK20DX128)\n"
  "let MCM_PLACR_ARG   : UInt32 = 0x00000200  // Arbitration select, 0=fixed, 1=round-robin\n"
  "\n"
  "register MCM_CR at 0xE008000C : UInt32 // RAM arbitration control register (MK20DX256)\n"
  "let MCM_CR_SRAMLWP  : UInt32 =  0x4000_0000  // SRAM_L write protect\n"
  "//let UInt32 MCM_CR_SRAMLAP(n)   (((n) & 0x03) << 28) // SRAM_L priority, 0=RR, 1=favor DMA, 2=CPU, 3=DMA\n"
  "let MCM_CR_SRAMUWP  : UInt32 =  0x0400_0000  // SRAM_U write protect\n"
  "//let UInt32 MCM_CR_SRAMUAP(n)   (((n) & 0x03) << 24) // SRAM_U priority, 0=RR, 1=favor DMA, 2=CPU, 3=DMA\n"
  "\n"
  "// Crossbar Switch (AXBS) - only programmable on MK20DX256\n"
  "register AXBS_PRS0   at 0x40004000 : UInt32 // Priority Registers Slave 0\n"
  "register AXBS_CRS0   at 0x40004010 : UInt32 // Control Register 0\n"
  "register AXBS_PRS1   at 0x40004100 : UInt32 // Priority Registers Slave 1\n"
  "register AXBS_CRS1   at 0x40004110 : UInt32 // Control Register 1\n"
  "register AXBS_PRS2   at 0x40004200 : UInt32 // Priority Registers Slave 2\n"
  "register AXBS_CRS2   at 0x40004210 : UInt32 // Control Register 2\n"
  "register AXBS_PRS3   at 0x40004300 : UInt32 // Priority Registers Slave 3\n"
  "register AXBS_CRS3   at 0x40004310 : UInt32 // Control Register 3\n"
  "register AXBS_PRS4   at 0x40004400 : UInt32 // Priority Registers Slave 4\n"
  "register AXBS_CRS4   at 0x40004410 : UInt32 // Control Register 4\n"
  "register AXBS_PRS5   at 0x40004500 : UInt32 // Priority Registers Slave 5\n"
  "register AXBS_CRS5   at 0x40004510 : UInt32 // Control Register 5\n"
  "register AXBS_PRS6   at 0x40004600 : UInt32 // Priority Registers Slave 6\n"
  "register AXBS_CRS6   at 0x40004610 : UInt32 // Control Register 6\n"
  "register AXBS_PRS7   at 0x40004700 : UInt32 // Priority Registers Slave 7\n"
  "register AXBS_CRS7   at 0x40004710 : UInt32 // Control Register 7\n"
  "register AXBS_MGPCR0 at 0x40004800 : UInt32 // Master 0 General Purpose Control Register\n"
  "register AXBS_MGPCR1 at 0x40004900 : UInt32 // Master 1 General Purpose Control Register\n"
  "register AXBS_MGPCR2 at 0x40004A00 : UInt32 // Master 2 General Purpose Control Register\n"
  "register AXBS_MGPCR3 at 0x40004B00 : UInt32 // Master 3 General Purpose Control Register\n"
  "register AXBS_MGPCR4 at 0x40004C00 : UInt32 // Master 4 General Purpose Control Register\n"
  "register AXBS_MGPCR5 at 0x40004D00 : UInt32 // Master 5 General Purpose Control Register\n"
  "register AXBS_MGPCR6 at 0x40004E00 : UInt32 // Master 6 General Purpose Control Register\n"
  "register AXBS_MGPCR7 at 0x40004F00 : UInt32 // Master 7 General Purpose Control Register\n"
  "let AXBS_CRS_READONLY  : UInt32=  0x80000000\n"
  "let AXBS_CRS_HALTLOWPRIORITY  : UInt32 = 0x40000000\n"
  "let AXBS_CRS_ARB_FIXED  : UInt32 = 0x00000000\n"
  "let AXBS_CRS_ARB_ROUNDROBIN  : UInt32 = 0x00010000\n"
  "let AXBS_CRS_PARK_FIXED  : UInt32 =  0x00000000\n"
  "let AXBS_CRS_PARK_PREVIOUS  : UInt32 =  0x00000010\n"
  "let AXBS_CRS_PARK_NONE  : UInt32 =  0x00000020\n"
  "//let UInt32 AXBS_CRS_PARK(n)   (((n) & 7) << 0)\n"
  "\n"
  "\n"
  "\n"
  "// Chapter 20: Direct Memory Access Multiplexer (DMAMUX)\n"
  "register DMAMUX0_CHCFG0  at 0x40021000 : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG1  at 0x40021001 : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG2  at 0x40021002 : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG3  at 0x40021003 : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG4  at 0x40021004 : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG5  at 0x40021005 : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG6  at 0x40021006 : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG7  at 0x40021007 : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG8  at 0x40021008 : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG9  at 0x40021009 : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG10 at 0x4002100A : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG11 at 0x4002100B : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG12 at 0x4002100C : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG13 at 0x4002100D : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG14 at 0x4002100E : UInt8 // Channel Configuration register\n"
  "register DMAMUX0_CHCFG15 at 0x4002100F : UInt8 // Channel Configuration register\n"
  "let DMAMUX_DISABLE : UInt8 =  0\n"
  "let DMAMUX_TRIG  : UInt8 = 64\n"
  "let DMAMUX_ENABLE : UInt8 =  128\n"
  "let DMAMUX_SOURCE_UART0_RX : UInt8 = 2\n"
  "let DMAMUX_SOURCE_UART0_TX : UInt8 = 3\n"
  "let DMAMUX_SOURCE_UART1_RX : UInt8 = 4\n"
  "let DMAMUX_SOURCE_UART1_TX : UInt8 = 5\n"
  "let DMAMUX_SOURCE_UART2_RX : UInt8 = 6\n"
  "let DMAMUX_SOURCE_UART2_TX : UInt8 = 7\n"
  "let DMAMUX_SOURCE_I2S0_RX  : UInt8 =14\n"
  "let DMAMUX_SOURCE_I2S0_TX  : UInt8 =15\n"
  "let DMAMUX_SOURCE_SPI0_RX  : UInt8 =16\n"
  "let DMAMUX_SOURCE_SPI0_TX  : UInt8 =17\n"
  "let DMAMUX_SOURCE_I2C0  : UInt8 =22\n"
  "let DMAMUX_SOURCE_I2C1  : UInt8 =23\n"
  "let DMAMUX_SOURCE_FTM0_CH0 : UInt8 = 24\n"
  "let DMAMUX_SOURCE_FTM0_CH1 : UInt8 = 25\n"
  "let DMAMUX_SOURCE_FTM0_CH2 : UInt8 = 26\n"
  "let DMAMUX_SOURCE_FTM0_CH3 : UInt8 = 27\n"
  "let DMAMUX_SOURCE_FTM0_CH4 : UInt8 = 28\n"
  "let DMAMUX_SOURCE_FTM0_CH5 : UInt8 = 29\n"
  "let DMAMUX_SOURCE_FTM0_CH6 : UInt8 = 30\n"
  "let DMAMUX_SOURCE_FTM0_CH7 : UInt8 = 31\n"
  "let DMAMUX_SOURCE_FTM1_CH0 : UInt8 = 32\n"
  "let DMAMUX_SOURCE_FTM1_CH1 : UInt8 = 33\n"
  "let DMAMUX_SOURCE_FTM2_CH0 : UInt8 = 34\n"
  "let DMAMUX_SOURCE_FTM2_CH1 : UInt8 = 35\n"
  "let DMAMUX_SOURCE_ADC0 : UInt8 = 40\n"
  "let DMAMUX_SOURCE_ADC1 : UInt8 = 41\n"
  "let DMAMUX_SOURCE_CMP0 : UInt8 = 42\n"
  "let DMAMUX_SOURCE_CMP1 : UInt8 = 43\n"
  "let DMAMUX_SOURCE_CMP2 : UInt8 = 44\n"
  "let DMAMUX_SOURCE_DAC0 : UInt8 = 45\n"
  "let DMAMUX_SOURCE_CMT  : UInt8 = 47\n"
  "let DMAMUX_SOURCE_PDB  : UInt8 = 48\n"
  "let DMAMUX_SOURCE_PORTA : UInt8 = 49\n"
  "let DMAMUX_SOURCE_PORTB : UInt8 = 50\n"
  "let DMAMUX_SOURCE_PORTC : UInt8 = 51\n"
  "let DMAMUX_SOURCE_PORTD : UInt8 = 52\n"
  "let DMAMUX_SOURCE_PORTE : UInt8 = 53\n"
  "let DMAMUX_SOURCE_ALWAYS0 : UInt8 = 54\n"
  "let DMAMUX_SOURCE_ALWAYS1 : UInt8 = 55\n"
  "let DMAMUX_SOURCE_ALWAYS2 : UInt8 = 56\n"
  "let DMAMUX_SOURCE_ALWAYS3 : UInt8 = 57\n"
  "let DMAMUX_SOURCE_ALWAYS4 : UInt8 = 58\n"
  "let DMAMUX_SOURCE_ALWAYS5 : UInt8 = 59\n"
  "let DMAMUX_SOURCE_ALWAYS6 : UInt8 = 60\n"
  "let DMAMUX_SOURCE_ALWAYS7 : UInt8 = 61\n"
  "let DMAMUX_SOURCE_ALWAYS8 : UInt8 = 62\n"
  "let DMAMUX_SOURCE_ALWAYS9 : UInt8 = 63\n"
  "\n"
  "// Chapter 21: Direct Memory Access Controller (eDMA)\n"
  "register DMA_CR at 0x40008000 : UInt32 // Control Register\n"
  "let DMA_CR_CX   : UInt32  = 0x2_0000 // Cancel Transfer\n"
  "let DMA_CR_ECX   : UInt32 = 0x1_0000 // Error Cancel Transfer\n"
  "let DMA_CR_EMLM   : UInt32= 0x80 // Enable Minor Loop Mapping\n"
  "let DMA_CR_CLM   : UInt32 = 0x40 // Continuous Link Mode\n"
  "let DMA_CR_HALT  : UInt32 = 0x20 // Halt DMA Operations\n"
  "let DMA_CR_HOE   : UInt32 = 0x10 // Halt On Error\n"
  "let DMA_CR_ERCA  : UInt32 = 0x04 // Enable Round Robin Channel Arbitration\n"
  "let DMA_CR_EDBG   : UInt32= 0x02 // Enable Debug\n"
  "register DMA_ES  at 0x40008004 : UInt32 // Error Status Register\n"
  "register DMA_ERQ at 0x4000800C : UInt32 // Enable Request Register\n"
  "let DMA_ERQ_ERQ0   : UInt32 = 1 // Enable DMA Request 0\n"
  "let DMA_ERQ_ERQ1   : UInt32 = 2 // Enable DMA Request 1\n"
  "let DMA_ERQ_ERQ2   : UInt32 = 4 // Enable DMA Request 2\n"
  "let DMA_ERQ_ERQ3   : UInt32 = 8 // Enable DMA Request 3\n"
  "register DMA_EEI at 0x40008014 : UInt8 // Enable Error Interrupt Register\n"
  "let DMA_EEI_EEI0   : UInt32 = 1 // Enable Error Interrupt 0\n"
  "let DMA_EEI_EEI1   : UInt32 = 2 // Enable Error Interrupt 1\n"
  "let DMA_EEI_EEI2   : UInt32 = 4 // Enable Error Interrupt 2\n"
  "let DMA_EEI_EEI3   : UInt32 = 8 // Enable Error Interrupt 3\n"
  "//register UInt8 DMA_CEEI  *(volatile uint8_t  *)0x40008018 // Clear Enable Error Interrupt Register\n"
  "//register UInt32 DMA_CEEI_CEEI(n)  ((uint8_t)(n & 3)<<0) // Clear Enable Error Interrupt\n"
  "//register UInt32 DMA_CEEI_CAEE   ((uint8_t)1<<6)  // Clear All Enable Error Interrupts\n"
  "//register UInt32 DMA_CEEI_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_SEEI  *(volatile uint8_t  *)0x40008019 // Set Enable Error Interrupt Register\n"
  "//register UInt32 DMA_SEEI_SEEI(n)  ((uint8_t)(n & 3)<<0) // Set Enable Error Interrupt\n"
  "//register UInt32 DMA_SEEI_SAEE   ((uint8_t)1<<6)  // Set All Enable Error Interrupts\n"
  "//register UInt32 DMA_SEEI_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_CERQ  *(volatile uint8_t  *)0x4000801A // Clear Enable Request Register\n"
  "//register UInt32 DMA_CERQ_CERQ(n)  ((uint8_t)(n & 3)<<0) // Clear Enable Request\n"
  "//register UInt32 DMA_CERQ_CAER   ((uint8_t)1<<6)  // Clear All Enable Requests\n"
  "//register UInt32 DMA_CERQ_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_SERQ  *(volatile uint8_t  *)0x4000801B // Set Enable Request Register\n"
  "//register UInt32 DMA_SERQ_SERQ(n)  ((uint8_t)(n & 3)<<0) // Set Enable Request\n"
  "//register UInt32 DMA_SERQ_SAER   ((uint8_t)1<<6)  // Set All Enable Requests\n"
  "//register UInt32 DMA_SERQ_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_CDNE  *(volatile uint8_t  *)0x4000801C // Clear DONE Status Bit Register\n"
  "//register UInt32 DMA_CDNE_CDNE(n)  ((uint8_t)(n & 3)<<0) // Clear Done Bit\n"
  "//register UInt32 DMA_CDNE_CADN   ((uint8_t)1<<6)  // Clear All Done Bits\n"
  "//register UInt32 DMA_CDNE_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_SSRT  *(volatile uint8_t  *)0x4000801D // Set START Bit Register\n"
  "//register UInt32 DMA_SSRT_SSRT(n)  ((uint8_t)(n & 3)<<0) // Set Start Bit\n"
  "//register UInt32 DMA_SSRT_SAST   ((uint8_t)1<<6)  // Set All Start Bits\n"
  "//register UInt32 DMA_SSRT_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_CERR  *(volatile uint8_t  *)0x4000801E // Clear Error Register\n"
  "//register UInt32 DMA_CERR_CERR(n)  ((uint8_t)(n & 3)<<0) // Clear Error Indicator\n"
  "//register UInt32 DMA_CERR_CAEI   ((uint8_t)1<<6)  // Clear All Error Indicators\n"
  "//register UInt32 DMA_CERR_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_CINT  *(volatile uint8_t  *)0x4000801F // Clear Interrupt Request Register\n"
  "//register UInt32 DMA_CINT_CINT(n)  ((uint8_t)(n & 3)<<0) // Clear Interrupt Request\n"
  "//register UInt32 DMA_CINT_CAIR   ((uint8_t)1<<6)  // Clear All Interrupt Requests\n"
  "//register UInt32 DMA_CINT_NOP   ((uint8_t)1<<7)  // NOP\n"
  "//register UInt32 DMA_INT    0x40008024 // Interrupt Request Register\n"
  "//register UInt32 DMA_INT_INT0   ( 1<<0) // Interrupt Request 0\n"
  "//register UInt32 DMA_INT_INT1   ( 1<<1) // Interrupt Request 1\n"
  "//register UInt32 DMA_INT_INT2   ( 1<<2) // Interrupt Request 2\n"
  "//register UInt32 DMA_INT_INT3   ( 1<<3) // Interrupt Request 3\n"
  "//register UInt32 DMA_ERR    0x4000802C // Error Register\n"
  "//register UInt32 DMA_ERR_ERR0   ( 1<<0) // Error in Channel 0\n"
  "//register UInt32 DMA_ERR_ERR1   ( 1<<1) // Error in Channel 1\n"
  "//register UInt32 DMA_ERR_ERR2   ( 1<<2) // Error in Channel 2\n"
  "//register UInt32 DMA_ERR_ERR3   ( 1<<3) // Error in Channel 3\n"
  "//register UInt32 DMA_HRS    0x40008034 // Hardware Request Status Register\n"
  "//register UInt32 DMA_HRS_HRS0   ( 1<<0) // Hardware Request Status Channel 0\n"
  "//register UInt32 DMA_HRS_HRS1   ( 1<<1) // Hardware Request Status Channel 1\n"
  "//register UInt32 DMA_HRS_HRS2   ( 1<<2) // Hardware Request Status Channel 2\n"
  "//register UInt32 DMA_HRS_HRS3   ( 1<<3) // Hardware Request Status Channel 3\n"
  "//register UInt32 DMA_DCHPRI3  *(volatile uint8_t  *)0x40008100 // Channel n Priority Register\n"
  "//register UInt32 DMA_DCHPRI2  *(volatile uint8_t  *)0x40008101 // Channel n Priority Register\n"
  "//register UInt32 DMA_DCHPRI1  *(volatile uint8_t  *)0x40008102 // Channel n Priority Register\n"
  "//register UInt32 DMA_DCHPRI0  *(volatile uint8_t  *)0x40008103 // Channel n Priority Register\n"
  "//register UInt32 DMA_DCHPRI_CHPRI(n)  ((uint8_t)(n & 3)<<0) // Channel Arbitration Priority\n"
  "//register UInt32 DMA_DCHPRI_DPA   ((uint8_t)1<<6)  // Disable PreEmpt Ability\n"
  "//register UInt32 DMA_DCHPRI_ECP   ((uint8_t)1<<7)  // Enable PreEmption\n"
  "//\n"
  "//\n"
  "//register DMA_TCD_ATTR_SMOD(n)  (((n) & 0x1F) << 11)\n"
  "//register DMA_TCD_ATTR_SSIZE(n)  (((n) & 0x7) << 8)\n"
  "//register DMA_TCD_ATTR_DMOD(n)  (((n) & 0x1F) << 3)\n"
  "//register DMA_TCD_ATTR_DSIZE(n)  (((n) & 0x7) << 0)\n"
  "//register DMA_TCD_ATTR_SIZE_8BIT  0\n"
  "//register DMA_TCD_ATTR_SIZE_16BIT  1\n"
  "//register DMA_TCD_ATTR_SIZE_32BIT  2\n"
  "//register DMA_TCD_ATTR_SIZE_16BYTE 4\n"
  "//register DMA_TCD_ATTR_SIZE_32BYTE 5\n"
  "//register DMA_TCD_CSR_BWC(n)  (((n) & 0x3) << 14)\n"
  "//register DMA_TCD_CSR_MAJORLINKCH(n) (((n) & 0x3) << 8)\n"
  "//register DMA_TCD_CSR_DONE  0x0080\n"
  "//register DMA_TCD_CSR_ACTIVE  0x0040\n"
  "//register DMA_TCD_CSR_MAJORELINK  0x0020\n"
  "//register DMA_TCD_CSR_ESG   0x0010\n"
  "//register DMA_TCD_CSR_DREQ  0x0008\n"
  "//register DMA_TCD_CSR_INTHALF  0x0004\n"
  "//register DMA_TCD_CSR_INTMAJOR  0x0002\n"
  "//register DMA_TCD_CSR_START  0x0001\n"
  "//register DMA_TCD_CITER_MASK      ((uint16_t)0x7FFF)    // Loop count mask\n"
  "//register DMA_TCD_CITER_ELINK      ((uint16_t)1<<15)    // Enable channel linking on minor-loop complete\n"
  "//register DMA_TCD_BITER_MASK      ((uint16_t)0x7FFF)    // Loop count mask\n"
  "//register DMA_TCD_BITER_ELINK      ((uint16_t)1<<15)    // Enable channel linking on minor-loop complete\n"
  "//register DMA_TCD_NBYTES_SMLOE      ( 1<<31)      // Source Minor Loop Offset Enable\n"
  "//register DMA_TCD_NBYTES_DMLOE      ( 1<<30)      // Destination Minor Loop Offset Enable\n"
  "//register DMA_TCD_NBYTES_MLOFFNO_NBYTES(n)    ( (n))      // NBytes transfer count when minor loop disabled\n"
  "//register DMA_TCD_NBYTES_MLOFFYES_NBYTES(n)   ( (n & 0x1F))     // NBytes transfer count when minor loop enabled\n"
  "//register DMA_TCD_NBYTES_MLOFFYES_MLOFF(n)    ( (n & 0xFFFFF)<<10)   // Offset \n"
  "//\n"
  "//register DMA_TCD0_SADDR  *(volatile const void * volatile *)0x40009000 // TCD Source Address\n"
  "//register DMA_TCD0_SOFF  *(volatile int16_t *)0x40009004  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD0_ATTR  *(volatile uint16_t *)0x40009006 // TCD Transfer Attributes\n"
  "//register DMA_TCD0_NBYTES_MLNO  0x40009008 // TCD Minor Byte Count (Minor Loop Disabled)\n"
  "//register DMA_TCD0_NBYTES_MLOFFNO  0x40009008 // TCD Signed Minor Loop Offset (Minor Loop Enabled and Offset Disabled)\n"
  "//register DMA_TCD0_NBYTES_MLOFFYES  0x40009008 // TCD Signed Minor Loop Offset (Minor Loop and Offset Enabled)\n"
  "//register DMA_TCD0_SLAST  *(volatile int32_t *)0x4000900C  // TCD Last Source Address Adjustment\n"
  "//register DMA_TCD0_DADDR  *(volatile void * volatile *)0x40009010 // TCD Destination Address\n"
  "//register DMA_TCD0_DOFF  *(volatile int16_t *)0x40009014  // TCD Signed Destination Address Offset\n"
  "//register DMA_TCD0_CITER_ELINKYES *(volatile uint16_t *)0x40009016 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "//register DMA_TCD0_CITER_ELINKNO *(volatile uint16_t *)0x40009016 // \?\?\n"
  "//register DMA_TCD0_DLASTSGA *(volatile int32_t *)0x40009018  // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "//register DMA_TCD0_CSR  *(volatile uint16_t *)0x4000901C // TCD Control and Status\n"
  "//register DMA_TCD0_BITER_ELINKYES *(volatile uint16_t *)0x4000901E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "//register DMA_TCD0_BITER_ELINKNO *(volatile uint16_t *)0x4000901E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled\n"
  "//\n"
  "//register DMA_TCD1_SADDR  *(volatile const void * volatile *)0x40009020 // TCD Source Address\n"
  "//register DMA_TCD1_SOFF  *(volatile int16_t *)0x40009024  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD1_ATTR  *(volatile uint16_t *)0x40009026 // TCD Transfer Attributes\n"
  "//register DMA_TCD1_NBYTES_MLNO  0x40009028 // TCD Minor Byte Count, Minor Loop Disabled\n"
  "//register DMA_TCD1_NBYTES_MLOFFNO  0x40009028 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled\n"
  "//register DMA_TCD1_NBYTES_MLOFFYES  0x40009028 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled\n"
  "//register DMA_TCD1_SLAST  *(volatile int32_t *)0x4000902C  // TCD Last Source Address Adjustment\n"
  "//register DMA_TCD1_DADDR  *(volatile void * volatile *)0x40009030 // TCD Destination Address\n"
  "//register DMA_TCD1_DOFF  *(volatile int16_t *)0x40009034  // TCD Signed Destination Address Offset\n"
  "//register DMA_TCD1_CITER_ELINKYES *(volatile uint16_t *)0x40009036 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "//register DMA_TCD1_CITER_ELINKNO *(volatile uint16_t *)0x40009036 // \?\?\n"
  "//register DMA_TCD1_DLASTSGA *(volatile int32_t *)0x40009038  // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "//register DMA_TCD1_CSR  *(volatile uint16_t *)0x4000903C // TCD Control and Status\n"
  "//register DMA_TCD1_BITER_ELINKYES *(volatile uint16_t *)0x4000903E // TCD Beginning Minor Loop Link, Major Loop Count Channel Linking Enabled\n"
  "//register DMA_TCD1_BITER_ELINKNO *(volatile uint16_t *)0x4000903E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled\n"
  "//\n"
  "//register DMA_TCD2_SADDR  *(volatile const void * volatile *)0x40009040 // TCD Source Address\n"
  "//register DMA_TCD2_SOFF  *(volatile int16_t *)0x40009044  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD2_ATTR  *(volatile uint16_t *)0x40009046 // TCD Transfer Attributes\n"
  "//register DMA_TCD2_NBYTES_MLNO  0x40009048 // TCD Minor Byte Count, Minor Loop Disabled\n"
  "//register DMA_TCD2_NBYTES_MLOFFNO  0x40009048 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled\n"
  "//register DMA_TCD2_NBYTES_MLOFFYES  0x40009048 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled\n"
  "//register DMA_TCD2_SLAST  *(volatile int32_t *)0x4000904C  // TCD Last Source Address Adjustment\n"
  "//register DMA_TCD2_DADDR  *(volatile void * volatile *)0x40009050 // TCD Destination Address\n"
  "//register DMA_TCD2_DOFF  *(volatile int16_t *)0x40009054  // TCD Signed Destination Address Offset\n"
  "//register DMA_TCD2_CITER_ELINKYES *(volatile uint16_t *)0x40009056 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "//register DMA_TCD2_CITER_ELINKNO *(volatile uint16_t *)0x40009056 // \?\?\n"
  "//register DMA_TCD2_DLASTSGA *(volatile int32_t *)0x40009058  // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "//register DMA_TCD2_CSR  *(volatile uint16_t *)0x4000905C // TCD Control and Status\n"
  "//register DMA_TCD2_BITER_ELINKYES *(volatile uint16_t *)0x4000905E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "//register DMA_TCD2_BITER_ELINKNO *(volatile uint16_t *)0x4000905E // TCD Beginning Minor Loop Link, Major Loop Count, Channel Linking Disabled\n"
  "//\n"
  "//register DMA_TCD3_SADDR  *(volatile const void * volatile *)0x40009060 // TCD Source Address\n"
  "//register DMA_TCD3_SOFF  *(volatile int16_t *)0x40009064  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD3_ATTR  *(volatile uint16_t *)0x40009066 // TCD Transfer Attributes\n"
  "//register DMA_TCD3_NBYTES_MLNO  0x40009068 // TCD Minor Byte Count, Minor Loop Disabled\n"
  "//register DMA_TCD3_NBYTES_MLOFFNO  0x40009068 // TCD Signed Minor Loop Offset, Minor Loop Enabled and Offset Disabled\n"
  "//register DMA_TCD3_NBYTES_MLOFFYES  0x40009068 // TCD Signed Minor Loop Offset, Minor Loop and Offset Enabled\n"
  "//register DMA_TCD3_SLAST  *(volatile int32_t *)0x4000906C  // TCD Last Source Address Adjustment\n"
  "//register DMA_TCD3_DADDR  *(volatile void * volatile *)0x40009070 // TCD Destination Address\n"
  "//register DMA_TCD3_DOFF  *(volatile int16_t *)0x40009074  // TCD Signed Destination Address Offset\n"
  "//register DMA_TCD3_CITER_ELINKYES *(volatile uint16_t *)0x40009076 // TCD Current Minor Loop Link, Major Loop Count, Channel Linking Enabled\n"
  "//register DMA_TCD3_CITER_ELINKNO *(volatile uint16_t *)0x40009076 // \?\?\n"
  "//register DMA_TCD3_DLASTSGA *(volatile int32_t *)0x40009078  // TCD Last Destination Address Adjustment/Scatter Gather Address\n"
  "//register DMA_TCD3_CSR  *(volatile uint16_t *)0x4000907C // TCD Control and Status\n"
  "//register DMA_TCD3_BITER_ELINKYES *(volatile uint16_t *)0x4000907E // TCD Beginning Minor Loop Link, Major Loop Count ,Channel Linking Enabled\n"
  "//register DMA_TCD3_BITER_ELINKNO *(volatile uint16_t *)0x4000907E // TCD Beginning Minor Loop Link, Major Loop Count ,Channel Linking Disabled\n"
  "//\n"
  "//register DMA_TCD4_SADDR  *(volatile const void * volatile *)0x40009080 // TCD Source Addr\n"
  "//register DMA_TCD4_SOFF  *(volatile int16_t *)0x40009084  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD4_ATTR  *(volatile uint16_t *)0x40009086 // TCD Transfer Attributes\n"
  "//register DMA_TCD4_NBYTES_MLNO  0x40009088 // TCD Minor Byte Count\n"
  "//register DMA_TCD4_NBYTES_MLOFFNO  0x40009088 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD4_NBYTES_MLOFFYES  0x40009088 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD4_SLAST  *(volatile int32_t *)0x4000908C  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD4_DADDR  *(volatile void * volatile *)0x40009090 // TCD Destination Address\n"
  "//register DMA_TCD4_DOFF  *(volatile int16_t *)0x40009094  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD4_CITER_ELINKYES *(volatile uint16_t *)0x40009096 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD4_CITER_ELINKNO *(volatile uint16_t *)0x40009096 // \?\?\n"
  "//register DMA_TCD4_DLASTSGA *(volatile int32_t *)0x40009098  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD4_CSR  *(volatile uint16_t *)0x4000909C // TCD Control and Status\n"
  "//register DMA_TCD4_BITER_ELINKYES *(volatile uint16_t *)0x4000909E // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD4_BITER_ELINKNO *(volatile uint16_t *)0x4000909E // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD5_SADDR  *(volatile const void * volatile *)0x400090A0 // TCD Source Addr\n"
  "//register DMA_TCD5_SOFF  *(volatile int16_t *)0x400090A4  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD5_ATTR  *(volatile uint16_t *)0x400090A6 // TCD Transfer Attributes\n"
  "//register DMA_TCD5_NBYTES_MLNO  0x400090A8 // TCD Minor Byte Count\n"
  "//register DMA_TCD5_NBYTES_MLOFFNO  0x400090A8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD5_NBYTES_MLOFFYES  0x400090A8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD5_SLAST  *(volatile int32_t *)0x400090AC  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD5_DADDR  *(volatile void * volatile *)0x400090B0 // TCD Destination Address\n"
  "//register DMA_TCD5_DOFF  *(volatile int16_t *)0x400090B4  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD5_CITER_ELINKYES *(volatile uint16_t *)0x400090B6 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD5_CITER_ELINKNO *(volatile uint16_t *)0x400090B6 // \?\?\n"
  "//register DMA_TCD5_DLASTSGA *(volatile int32_t *)0x400090B8  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD5_CSR  *(volatile uint16_t *)0x400090BC // TCD Control and Status\n"
  "//register DMA_TCD5_BITER_ELINKYES *(volatile uint16_t *)0x400090BE // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD5_BITER_ELINKNO *(volatile uint16_t *)0x400090BE // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD6_SADDR  *(volatile const void * volatile *)0x400090C0 // TCD Source Addr\n"
  "//register DMA_TCD6_SOFF  *(volatile int16_t *)0x400090C4  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD6_ATTR  *(volatile uint16_t *)0x400090C6 // TCD Transfer Attributes\n"
  "//register DMA_TCD6_NBYTES_MLNO  0x400090C8 // TCD Minor Byte Count\n"
  "//register DMA_TCD6_NBYTES_MLOFFNO  0x400090C8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD6_NBYTES_MLOFFYES  0x400090C8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD6_SLAST  *(volatile int32_t *)0x400090CC  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD6_DADDR  *(volatile void * volatile *)0x400090D0 // TCD Destination Address\n"
  "//register DMA_TCD6_DOFF  *(volatile int16_t *)0x400090D4  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD6_CITER_ELINKYES *(volatile uint16_t *)0x400090D6 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD6_CITER_ELINKNO *(volatile uint16_t *)0x400090D6 // \?\?\n"
  "//register DMA_TCD6_DLASTSGA *(volatile int32_t *)0x400090D8  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD6_CSR  *(volatile uint16_t *)0x400090DC // TCD Control and Status\n"
  "//register DMA_TCD6_BITER_ELINKYES *(volatile uint16_t *)0x400090DE // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD6_BITER_ELINKNO *(volatile uint16_t *)0x400090DE // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD7_SADDR  *(volatile const void * volatile *)0x400090E0 // TCD Source Addr\n"
  "//register DMA_TCD7_SOFF  *(volatile int16_t *)0x400090E4  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD7_ATTR  *(volatile uint16_t *)0x400090E6 // TCD Transfer Attributes\n"
  "//register DMA_TCD7_NBYTES_MLNO  0x400090E8 // TCD Minor Byte Count\n"
  "//register DMA_TCD7_NBYTES_MLOFFNO  0x400090E8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD7_NBYTES_MLOFFYES  0x400090E8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD7_SLAST  *(volatile int32_t *)0x400090EC  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD7_DADDR  *(volatile void * volatile *)0x400090F0 // TCD Destination Address\n"
  "//register DMA_TCD7_DOFF  *(volatile int16_t *)0x400090F4  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD7_CITER_ELINKYES *(volatile uint16_t *)0x400090F6 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD7_CITER_ELINKNO *(volatile uint16_t *)0x400090F6 // \?\?\n"
  "//register DMA_TCD7_DLASTSGA *(volatile int32_t *)0x400090F8  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD7_CSR  *(volatile uint16_t *)0x400090FC // TCD Control and Status\n"
  "//register DMA_TCD7_BITER_ELINKYES *(volatile uint16_t *)0x400090FE // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD7_BITER_ELINKNO *(volatile uint16_t *)0x400090FE // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD8_SADDR  *(volatile const void * volatile *)0x40009100 // TCD Source Addr\n"
  "//register DMA_TCD8_SOFF  *(volatile int16_t *)0x40009104  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD8_ATTR  *(volatile uint16_t *)0x40009106 // TCD Transfer Attributes\n"
  "//register DMA_TCD8_NBYTES_MLNO  0x40009108 // TCD Minor Byte Count\n"
  "//register DMA_TCD8_NBYTES_MLOFFNO  0x40009108 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD8_NBYTES_MLOFFYES  0x40009108 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD8_SLAST  *(volatile int32_t *)0x4000910C  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD8_DADDR  *(volatile void * volatile *)0x40009110 // TCD Destination Address\n"
  "//register DMA_TCD8_DOFF  *(volatile int16_t *)0x40009114  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD8_CITER_ELINKYES *(volatile uint16_t *)0x40009116 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD8_CITER_ELINKNO *(volatile uint16_t *)0x40009116 // \?\?\n"
  "//register DMA_TCD8_DLASTSGA *(volatile int32_t *)0x40009118  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD8_CSR  *(volatile uint16_t *)0x4000911C // TCD Control and Status\n"
  "//register DMA_TCD8_BITER_ELINKYES *(volatile uint16_t *)0x4000911E // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD8_BITER_ELINKNO *(volatile uint16_t *)0x4000911E // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD9_SADDR  *(volatile const void * volatile *)0x40009120 // TCD Source Addr\n"
  "//register DMA_TCD9_SOFF  *(volatile int16_t *)0x40009124  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD9_ATTR  *(volatile uint16_t *)0x40009126 // TCD Transfer Attributes\n"
  "//register DMA_TCD9_NBYTES_MLNO  0x40009128 // TCD Minor Byte Count\n"
  "//register DMA_TCD9_NBYTES_MLOFFNO  0x40009128 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD9_NBYTES_MLOFFYES  0x40009128 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD9_SLAST  *(volatile int32_t *)0x4000912C  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD9_DADDR  *(volatile void * volatile *)0x40009130 // TCD Destination Address\n"
  "//register DMA_TCD9_DOFF  *(volatile int16_t *)0x40009134  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD9_CITER_ELINKYES *(volatile uint16_t *)0x40009136 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD9_CITER_ELINKNO *(volatile uint16_t *)0x40009136 // \?\?\n"
  "//register DMA_TCD9_DLASTSGA *(volatile int32_t *)0x40009138  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD9_CSR  *(volatile uint16_t *)0x4000913C // TCD Control and Status\n"
  "//register DMA_TCD9_BITER_ELINKYES *(volatile uint16_t *)0x4000913E // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD9_BITER_ELINKNO *(volatile uint16_t *)0x4000913E // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD10_SADDR  *(volatile const void * volatile *)0x40009140 // TCD Source Addr\n"
  "//register DMA_TCD10_SOFF  *(volatile int16_t *)0x40009144  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD10_ATTR  *(volatile uint16_t *)0x40009146 // TCD Transfer Attributes\n"
  "//register DMA_TCD10_NBYTES_MLNO  0x40009148 // TCD Minor Byte Count\n"
  "//register DMA_TCD10_NBYTES_MLOFFNO  0x40009148 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD10_NBYTES_MLOFFYES  0x40009148 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD10_SLAST  *(volatile int32_t *)0x4000914C  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD10_DADDR  *(volatile void * volatile *)0x40009150 // TCD Destination Address\n"
  "//register DMA_TCD10_DOFF  *(volatile int16_t *)0x40009154  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD10_CITER_ELINKYES *(volatile uint16_t *)0x40009156 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD10_CITER_ELINKNO *(volatile uint16_t *)0x40009156 // \?\?\n"
  "//register DMA_TCD10_DLASTSGA *(volatile int32_t *)0x40009158  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD10_CSR  *(volatile uint16_t *)0x4000915C // TCD Control and Status\n"
  "//register DMA_TCD10_BITER_ELINKYES *(volatile uint16_t *)0x4000915E // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD10_BITER_ELINKNO *(volatile uint16_t *)0x4000915E // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD11_SADDR  *(volatile const void * volatile *)0x40009160 // TCD Source Addr\n"
  "//register DMA_TCD11_SOFF  *(volatile int16_t *)0x40009164  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD11_ATTR  *(volatile uint16_t *)0x40009166 // TCD Transfer Attributes\n"
  "//register DMA_TCD11_NBYTES_MLNO  0x40009168 // TCD Minor Byte Count\n"
  "//register DMA_TCD11_NBYTES_MLOFFNO  0x40009168 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD11_NBYTES_MLOFFYES  0x40009168 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD11_SLAST  *(volatile int32_t *)0x4000916C  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD11_DADDR  *(volatile void * volatile *)0x40009170 // TCD Destination Address\n"
  "//register DMA_TCD11_DOFF  *(volatile int16_t *)0x40009174  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD11_CITER_ELINKYES *(volatile uint16_t *)0x40009176 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD11_CITER_ELINKNO *(volatile uint16_t *)0x40009176 // \?\?\n"
  "//register DMA_TCD11_DLASTSGA *(volatile int32_t *)0x40009178  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD11_CSR  *(volatile uint16_t *)0x4000917C // TCD Control and Status\n"
  "//register DMA_TCD11_BITER_ELINKYES *(volatile uint16_t *)0x4000917E // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD11_BITER_ELINKNO *(volatile uint16_t *)0x4000917E // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD12_SADDR  *(volatile const void * volatile *)0x40009180 // TCD Source Addr\n"
  "//register DMA_TCD12_SOFF  *(volatile int16_t *)0x40009184  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD12_ATTR  *(volatile uint16_t *)0x40009186 // TCD Transfer Attributes\n"
  "//register DMA_TCD12_NBYTES_MLNO  0x40009188 // TCD Minor Byte Count\n"
  "//register DMA_TCD12_NBYTES_MLOFFNO  0x40009188 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD12_NBYTES_MLOFFYES  0x40009188 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD12_SLAST  *(volatile int32_t *)0x4000918C  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD12_DADDR  *(volatile void * volatile *)0x40009190 // TCD Destination Address\n"
  "//register DMA_TCD12_DOFF  *(volatile int16_t *)0x40009194  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD12_CITER_ELINKYES *(volatile uint16_t *)0x40009196 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD12_CITER_ELINKNO *(volatile uint16_t *)0x40009196 // \?\?\n"
  "//register DMA_TCD12_DLASTSGA *(volatile int32_t *)0x40009198  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD12_CSR  *(volatile uint16_t *)0x4000919C // TCD Control and Status\n"
  "//register DMA_TCD12_BITER_ELINKYES *(volatile uint16_t *)0x4000919E // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD12_BITER_ELINKNO *(volatile uint16_t *)0x4000919E // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD13_SADDR  *(volatile const void * volatile *)0x400091A0 // TCD Source Addr\n"
  "//register DMA_TCD13_SOFF  *(volatile int16_t *)0x400091A4  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD13_ATTR  *(volatile uint16_t *)0x400091A6 // TCD Transfer Attributes\n"
  "//register DMA_TCD13_NBYTES_MLNO  0x400091A8 // TCD Minor Byte Count\n"
  "//register DMA_TCD13_NBYTES_MLOFFNO  0x400091A8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD13_NBYTES_MLOFFYES  0x400091A8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD13_SLAST  *(volatile int32_t *)0x400091AC  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD13_DADDR  *(volatile void * volatile *)0x400091B0 // TCD Destination Address\n"
  "//register DMA_TCD13_DOFF  *(volatile int16_t *)0x400091B4  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD13_CITER_ELINKYES *(volatile uint16_t *)0x400091B6 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD13_CITER_ELINKNO *(volatile uint16_t *)0x400091B6 // \?\?\n"
  "//register DMA_TCD13_DLASTSGA *(volatile int32_t *)0x400091B8  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD13_CSR  *(volatile uint16_t *)0x400091BC // TCD Control and Status\n"
  "//register DMA_TCD13_BITER_ELINKYES *(volatile uint16_t *)0x400091BE // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD13_BITER_ELINKNO *(volatile uint16_t *)0x400091BE // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD14_SADDR  *(volatile const void * volatile *)0x400091C0 // TCD Source Addr\n"
  "//register DMA_TCD14_SOFF  *(volatile int16_t *)0x400091C4  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD14_ATTR  *(volatile uint16_t *)0x400091C6 // TCD Transfer Attributes\n"
  "//register DMA_TCD14_NBYTES_MLNO  0x400091C8 // TCD Minor Byte Count\n"
  "//register DMA_TCD14_NBYTES_MLOFFNO  0x400091C8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD14_NBYTES_MLOFFYES  0x400091C8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD14_SLAST  *(volatile int32_t *)0x400091CC  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD14_DADDR  *(volatile void * volatile *)0x400091D0 // TCD Destination Address\n"
  "//register DMA_TCD14_DOFF  *(volatile int16_t *)0x400091D4  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD14_CITER_ELINKYES *(volatile uint16_t *)0x400091D6 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD14_CITER_ELINKNO *(volatile uint16_t *)0x400091D6 // \?\?\n"
  "//register DMA_TCD14_DLASTSGA *(volatile int32_t *)0x400091D8  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD14_CSR  *(volatile uint16_t *)0x400091DC // TCD Control and Status\n"
  "//register DMA_TCD14_BITER_ELINKYES *(volatile uint16_t *)0x400091DE // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD14_BITER_ELINKNO *(volatile uint16_t *)0x400091DE // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//register DMA_TCD15_SADDR  *(volatile const void * volatile *)0x400091E0 // TCD Source Addr\n"
  "//register DMA_TCD15_SOFF  *(volatile int16_t *)0x400091E4  // TCD Signed Source Address Offset\n"
  "//register DMA_TCD15_ATTR  *(volatile uint16_t *)0x400091E6 // TCD Transfer Attributes\n"
  "//register DMA_TCD15_NBYTES_MLNO  0x400091E8 // TCD Minor Byte Count\n"
  "//register DMA_TCD15_NBYTES_MLOFFNO  0x400091E8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD15_NBYTES_MLOFFYES  0x400091E8 // TCD Signed Minor Loop Offset\n"
  "//register DMA_TCD15_SLAST  *(volatile int32_t *)0x400091EC  // TCD Last Source Addr Adj.\n"
  "//register DMA_TCD15_DADDR  *(volatile void * volatile *)0x400091F0 // TCD Destination Address\n"
  "//register DMA_TCD15_DOFF  *(volatile int16_t *)0x400091F4  // TCD Signed Dest Address Offset\n"
  "//register DMA_TCD15_CITER_ELINKYES *(volatile uint16_t *)0x400091F6 // TCD Current Minor Loop Link\n"
  "//register DMA_TCD15_CITER_ELINKNO *(volatile uint16_t *)0x400091F6 // \?\?\n"
  "//register DMA_TCD15_DLASTSGA *(volatile int32_t *)0x400091F8  // TCD Last Destination Addr Adj\n"
  "//register DMA_TCD15_CSR  *(volatile uint16_t *)0x400091FC // TCD Control and Status\n"
  "//register DMA_TCD15_BITER_ELINKYES *(volatile uint16_t *)0x400091FE // TCD Beginning Minor Loop Link\n"
  "//register DMA_TCD15_BITER_ELINKNO *(volatile uint16_t *)0x400091FE // TCD Beginning Minor Loop Link\n"
  "//\n"
  "//\n"
  "//// Chapter 22: External Watchdog Monitor (EWM)\n"
  "//register EWM_CTRL  *(volatile uint8_t  *)0x40061000 // Control Register\n"
  "//register EWM_SERV  *(volatile uint8_t  *)0x40061001 // Service Register\n"
  "//register EWM_CMPL  *(volatile uint8_t  *)0x40061002 // Compare Low Register\n"
  "//register EWM_CMPH  *(volatile uint8_t  *)0x40061003 // Compare High Register\n"
  "//\n"
  "//// Chapter 23: Watchdog Timer (WDOG)\n"
  "register WDOG_STCTRLH at 0x40052000 : UInt16 // Watchdog Status and Control Register High\n"
  "let WDOG_STCTRLH_DISTESTWDOG : UInt16 = 0x4000  // Allows the WDOG's functional test mode to be disabled permanently.\n"
  "//register WDOG_STCTRLH_BYTESEL(n)  (uint16_t)(((n) & 3) << 12) // selects the byte to be tested when the watchdog is in the byte test mode.\n"
  "let WDOG_STCTRLH_TESTSEL  : UInt16 = 0x0800\n"
  "let WDOG_STCTRLH_TESTWDOG : UInt16 = 0x0400\n"
  "let WDOG_STCTRLH_WAITEN : UInt16 = 0x0080\n"
  "let WDOG_STCTRLH_STOPEN : UInt16 = 0x0040\n"
  "let WDOG_STCTRLH_DBGEN  : UInt16 = 0x0020\n"
  "let WDOG_STCTRLH_ALLOWUPDATE : UInt16 = 0x0010\n"
  "let WDOG_STCTRLH_WINEN : UInt16 = 0x0008\n"
  "let WDOG_STCTRLH_IRQRSTEN : UInt16 = 0x0004\n"
  "let WDOG_STCTRLH_CLKSRC : UInt16 = 0x0002\n"
  "let WDOG_STCTRLH_WDOGEN : UInt16 = 0x0001\n"
  "register WDOG_STCTRLL  at 0x40052002 : UInt16 // Watchdog Status and Control Register Low\n"
  "register WDOG_TOVALH   at 0x40052004 : UInt16 // Watchdog Time-out Value Register High\n"
  "register WDOG_TOVALL   at 0x40052006 : UInt16 // Watchdog Time-out Value Register Low\n"
  "register WDOG_WINH     at 0x40052008 : UInt16 // Watchdog Window Register High\n"
  "register WDOG_WINL     at 0x4005200A : UInt16 // Watchdog Window Register Low\n"
  "register WDOG_REFRESH  at 0x4005200C : UInt16 // Watchdog Refresh register\n"
  "register WDOG_UNLOCK   at 0x4005200E : UInt16 // Watchdog Unlock register\n"
  "let WDOG_UNLOCK_SEQ1 : UInt16   = 0xC520\n"
  "let WDOG_UNLOCK_SEQ2 : UInt16   = 0xD928\n"
  "register WDOG_TMROUTH  at 0x40052010 : UInt16 // Watchdog Timer Output Register High\n"
  "register WDOG_TMROUTL  at 0x40052012 : UInt16 // Watchdog Timer Output Register Low\n"
  "register WDOG_RSTCNT   at 0x40052014 : UInt16 // Watchdog Reset Count register\n"
  "register WDOG_PRESC    at 0x40052016 : UInt16 // Watchdog Prescaler register\n"
  "\n"
  "// Chapter 24: Multipurpose Clock Generator (MCG)\n"
  "register MCG_C1 at 0x40064000 : UInt8 { // MCG Control 1 Register\n"
  "  CLKS [2], // Clock Source Select, Selects the clock source for MCGOUTCLK\n"
  "  FRDIV [3], // FLL External Reference Divider, Selects the amount to divide down the external reference clock for the FLL\n"
  "  IREFS, // Internal Reference Select, Selects the reference clock source for the FLL\n"
  "  IRCLKEN, // Internal Reference Clock Enable, Enables the internal reference clock for use as MCGIRCLK\n"
  "  IREFSTEN // Internal Reference Stop Enable, Controls whether or not the internal reference clock remains enabled when the MCG enters Stop mode\n"
  "}\n"
  "\n"
  "register MCG_C2 at 0x4006_4001 : UInt8 { // MCG Control 2 Register\n"
  "  LOCRE0, // Loss of Clock Reset Enable, Determines whether an interrupt \n"
  "          // or a reset request is made following a loss of OSC0\n"
  "  1,\n"
  "  RANGE0[2], // Frequency Range Select, Selects the frequency range\n"
  "             // for the crystal oscillator\n"
  "  HGO0, // High Gain Oscillator Select, Controls the crystal oscillator mode of operation  \n"
  "  EREFS, // External Reference Select, selects the source for the external reference clock\n"
  "  LP, // Low Power Select, Controls whether the FLL or PLL is disabled in BLPI and BLPE modes.\n"
  "  IRCS // Internal Reference Clock Select, Selects between the fast or slow internal reference clock source.\n"
  "}\n"
  "\n"
  "register MCG_C3 at 0x4006_4002 : UInt8 // MCG Control 3 Register\n"
  "//register MCG_C3_SCTRIM(n)  (uint8_t)(n)   // Slow Internal Reference Clock Trim Setting\n"
  "register MCG_C4 at 0x40064003 : UInt8 // MCG Control 4 Register\n"
  "let MCG_C4_SCFTRIM : UInt8 = 0x01   // Slow Internal Reference Clock Fine Trim\n"
  "//register MCG_C4_FCTRIM(n)  (uint8_t)(((n) & 0x0F) << 1) // Fast Internal Reference Clock Trim Setting\n"
  "//register MCG_C4_DRST_DRS(n)  (uint8_t)(((n) & 0x03) << 5) // DCO Range Select\n"
  "let MCG_C4_DMX32 : UInt8 = 0x80   // DCO Maximum Frequency with 32.768 kHz Reference, controls whether the DCO frequency range is narrowed\n"
  "\n"
  "\n"
  "register MCG_C5 at 0x4006_4004 : UInt8 { // MCG Control 5 Register\n"
  " 1,\n"
  " PLLCLKEN0, // PLL Clock Enable\n"
  " PLLSTEN0,  // PLL Stop Enable\n"
  " PRDIV0 [5] // PLL External Reference Divider\n"
  "}\n"
  "\n"
  "register MCG_C6 at 0x4006_4005 : UInt8 { // MCG Control 6 Register\n"
  " LOLIE0, // Loss of Lock Interrrupt Enable\n"
  " PLLS, // PLL Select, Controls whether the PLL or FLL output is selected as the MCG source when CLKS[1:0]=00\n"
  " CME0,   // Clock Monitor Enable\n"
  " VDIV0[5] // VCO 0 Divider\n"
  "}\n"
  "\n"
  "register MCG_S @ro at 0x40064006 : UInt8 { // MCG Status Register\n"
  " LOLS0, // Loss of Lock Status\n"
  " LOCK0, // Lock Status, 0=PLL Unlocked, 1=PLL Locked\n"
  " PLLST, // PLL Select Status\n"
  " IREFST, // Internal Reference Status\n"
  " CLKST [2], // Clock Mode Status, 0=FLL is selected, 1= Internal ref, 2=External ref, 3=PLL\n"
  " OSCINIT0, // OSC Initialization, resets to 0, is set to 1 after the initialization cycles of the crystal oscillator\n"
  " IRCST   // Internal Reference Clock Status\n"
  "}\n"
  "\n"
  "register MCG_SC at 0x40064008 : UInt8 // MCG Status and Control Register\n"
  "let MCG_SC_LOCS0 : UInt8 = 0x01   // OSC0 Loss of Clock Status\n"
  "//register MCG_SC_FCRDIV(n)  (uint8_t)(((n) & 0x07) << 1) // Fast Clock Internal Reference Divider\n"
  "let MCG_SC_FLTPRSRV : UInt8 = 0x10   // FLL Filter Preserve Enable\n"
  "let MCG_SC_ATMF : UInt8 = 0x20   // Automatic Trim Machine Fail Flag\n"
  "let MCG_SC_ATMS : UInt8 = 0x40   // Automatic Trim Machine Select\n"
  "let MCG_SC_ATME : UInt8 = 0x80   // Automatic Trim Machine Enable\n"
  "\n"
  "register MCG_ATCVH at 0x4006400A : UInt8 // MCG Auto Trim Compare Value High Register\n"
  "register MCG_ATCVL at 0x4006400B : UInt8 // MCG Auto Trim Compare Value Low Register\n"
  "register MCG_C7    at 0x4006400C : UInt8 // MCG Control 7 Register\n"
  "register MCG_C8    at 0x4006400D : UInt8 // MCG Control 8 Register\n"
  "//\n"
  "//// Chapter 25: Oscillator (OSC)\n"
  "register OSC_CR at 0x40065000 : UInt8 {// OSC Control Register\n"
  "  ERCLKEN, // External Reference Enable, Enables external reference clock (OSCERCLK)\n"
  "  1,\n"
  "  EREFSTEN, // External Reference Stop Enable, Controls whether or not \n"
  "            // the external reference clock (OSCERCLK) remains enabled when\n"
  "            // MCU enters Stop mode.\n"
  "  1,\n"
  "  SC2P, // Oscillator 2 pF Capacitor Load Configure\n"
  "  SC4P, // Oscillator 4 pF Capacitor Load Configure\n"
  "  SC8P, // Oscillator 8 pF Capacitor Load Configure\n"
  "  SC16P // Oscillator 16 pF Capacitor Load Configure\n"
  "}\n"
  "let OSC_SC16P  : UInt8 = 0x01   \n"
  "\n"
  "//// Chapter 27: Flash Memory Controller (FMC)\n"
  "register FMC_PFAPR     at 0x4001F000 : UInt32 // Flash Access Protection\n"
  "register FMC_PFB0CR    at 0x4001F004 : UInt32 // Flash Control\n"
  "register FMC_TAGVDW0S0 at 0x4001F100 : UInt32 // Cache Tag Storage\n"
  "register FMC_TAGVDW0S1 at 0x4001F104 : UInt32 // Cache Tag Storage\n"
  "register FMC_TAGVDW1S0 at 0x4001F108 : UInt32 // Cache Tag Storage\n"
  "register FMC_TAGVDW1S1 at 0x4001F10C : UInt32 // Cache Tag Storage\n"
  "register FMC_TAGVDW2S0 at 0x4001F110 : UInt32 // Cache Tag Storage\n"
  "register FMC_TAGVDW2S1 at 0x4001F114 : UInt32 // Cache Tag Storage\n"
  "register FMC_TAGVDW3S0 at 0x4001F118 : UInt32 // Cache Tag Storage\n"
  "register FMC_TAGVDW3S1 at 0x4001F11C : UInt32 // Cache Tag Storage\n"
  "register FMC_DATAW0S0  at 0x4001F200 : UInt32 // Cache Data Storage\n"
  "register FMC_DATAW0S1  at 0x4001F204 : UInt32 // Cache Data Storage\n"
  "register FMC_DATAW1S0  at 0x4001F208 : UInt32 // Cache Data Storage\n"
  "register FMC_DATAW1S1  at 0x4001F20C : UInt32 // Cache Data Storage\n"
  "register FMC_DATAW2S0  at 0x4001F210 : UInt32 // Cache Data Storage\n"
  "register FMC_DATAW2S1  at 0x4001F214 : UInt32 // Cache Data Storage\n"
  "register FMC_DATAW3S0  at 0x4001F218 : UInt32 // Cache Data Storage\n"
  "register FMC_DATAW3S1  at 0x4001F21C : UInt32 // Cache Data Storage\n"
  "//\n"
  "//// Chapter 28: Flash Memory Module (FTFL)\n"
  "//register FTFL_FST *(volatile uint8_t  *)0x40020000      // Flash Status Register\n"
  "//register FTFL_FSTAT_CCIF   (uint8_t)0x80   // Command Complete Interrupt Flag\n"
  "//register FTFL_FSTAT_RDCOLERR  (uint8_t)0x40   // Flash Read Collision Error Flag\n"
  "//register FTFL_FSTAT_ACCERR  (uint8_t)0x20   // Flash Access Error Flag\n"
  "//register FTFL_FSTAT_FPVIOL  (uint8_t)0x10   // Flash Protection Violation Flag\n"
  "//register FTFL_FSTAT_MGSTAT0  (uint8_t)0x01   // Memory Controller Command Completion Status Flag\n"
  "//register FTFL_FCNFG  *(volatile uint8_t  *)0x40020001      // Flash Configuration Register\n"
  "//register FTFL_FCNFG_CCIE   (uint8_t)0x80   // Command Complete Interrupt Enable\n"
  "//register FTFL_FCNFG_RDCOLLIE  (uint8_t)0x40   // Read Collision Error Interrupt Enable\n"
  "//register FTFL_FCNFG_ERSAREQ  (uint8_t)0x20   // Erase All Request\n"
  "//register FTFL_FCNFG_ERSSUSP  (uint8_t)0x10   // Erase Suspend\n"
  "//register FTFL_FCNFG_PFLSH  (uint8_t)0x04   // Flash memory configuration\n"
  "//register FTFL_FCNFG_RAMRDY  (uint8_t)0x02   // RAM Ready\n"
  "//register FTFL_FCNFG_EEERDY  (uint8_t)0x01   // EEPROM Ready\n"
  "//register FTFL_FSEC  *(const    uint8_t  *)0x40020002      // Flash Security Register\n"
  "//register FTFL_FOPT  *(const    uint8_t  *)0x40020003      // Flash Option Register\n"
  "//register FTFL_FCCOB3  *(volatile uint8_t  *)0x40020004      // Flash Common Command Object Registers\n"
  "//register FTFL_FCCOB2  *(volatile uint8_t  *)0x40020005\n"
  "//register FTFL_FCCOB1  *(volatile uint8_t  *)0x40020006\n"
  "//register FTFL_FCCOB0  *(volatile uint8_t  *)0x40020007\n"
  "//register FTFL_FCCOB7  *(volatile uint8_t  *)0x40020008\n"
  "//register FTFL_FCCOB6  *(volatile uint8_t  *)0x40020009\n"
  "//register FTFL_FCCOB5  *(volatile uint8_t  *)0x4002000A\n"
  "//register FTFL_FCCOB4  *(volatile uint8_t  *)0x4002000B\n"
  "//register FTFL_FCCOBB  *(volatile uint8_t  *)0x4002000C\n"
  "//register FTFL_FCCOBA  *(volatile uint8_t  *)0x4002000D\n"
  "//register FTFL_FCCOB9  *(volatile uint8_t  *)0x4002000E\n"
  "//register FTFL_FCCOB8  *(volatile uint8_t  *)0x4002000F\n"
  "//register FTFL_FPROT3  *(volatile uint8_t  *)0x40020010      // Program Flash Protection Registers\n"
  "//register FTFL_FPROT2  *(volatile uint8_t  *)0x40020011      // Program Flash Protection Registers\n"
  "//register FTFL_FPROT1  *(volatile uint8_t  *)0x40020012      // Program Flash Protection Registers\n"
  "//register FTFL_FPROT0  *(volatile uint8_t  *)0x40020013      // Program Flash Protection Registers\n"
  "//register FTFL_FEPROT  *(volatile uint8_t  *)0x40020016      // EEPROM Protection Register\n"
  "//register FTFL_FDPROT  *(volatile uint8_t  *)0x40020017      // Data Flash Protection Register\n"
  "\n"
  "// Chapter 30: Cyclic Redundancy Check (CRC)\n"
  "register CRC_CRC   at 0x40032000 : UInt32 // CRC Data register\n"
  "register CRC_GPOLY at 0x40032004 : UInt32 // CRC Polynomial register\n"
  "register CRC_CTRL  at 0x40032008 : UInt32 // CRC Control register\n"
  "\n"
  "// Chapter 31: Analog-to-Digital Converter (ADC)\n"
  "register ADC0_SC1A   at 0x4003B000 : UInt32 // ADC status and control registers 1\n"
  "register ADC0_SC1B   at 0x4003B004 : UInt32 // ADC status and control registers 1\n"
  "let ADC_SC1_COCO  : UInt32 = 0x80   // Conversion complete flag\n"
  "let ADC_SC1_AIEN  : UInt32 = 0x40   // Interrupt enable\n"
  "let ADC_SC1_DIFF  : UInt32 = 0x20   // Differential mode enable\n"
  "//register ADC_SC1_ADCH(n)    ((n) & 0x1F)  // Input channel select\n"
  "register ADC0_CFG1   at 0x4003B008 : UInt32 // ADC configuration register 1\n"
  "let ADC_CFG1_ADLPC  : UInt32 = 0x80   // Low-power configuration\n"
  "//register ADC_CFG1_ADIV(n)   (((n) & 3) << 5) // Clock divide select, 0=direct, 1=div2, 2=div4, 3=div8\n"
  "let ADC_CFG1_ADLSMP  : UInt32 = 0x10   // Sample time configuration, 0=Short, 1=Long\n"
  "//register ADC_CFG1_MODE(n)   (((n) & 3) << 2) // Conversion mode, 0=8 bit, 1=12 bit, 2=10 bit, 3=16 bit\n"
  "//register ADC_CFG1_ADICLK(n)   (((n) & 3) << 0) // Input clock, 0=bus, 1=bus/2, 2=OSCERCLK, 3=async\n"
  "register ADC0_CFG2  at 0x4003B00C : UInt32 // Configuration register 2\n"
  "let ADC_CFG2_MUXSEL  : UInt32 = 0x10   // 0=a channels, 1=b channels\n"
  "let ADC_CFG2_ADACKEN  : UInt32 = 0x08   // async clock enable\n"
  "let ADC_CFG2_ADHSC   : UInt32 = 0x04   // High speed configuration\n"
  "//register ADC_CFG2_ADLSTS(n)   (((n) & 3) << 0) // Sample time, 0=24 cycles, 1=12 cycles, 2=6 cycles, 3=2 cycles\n"
  "register ADC0_RA    at 0x4003B010 : UInt32 // ADC data result register\n"
  "register ADC0_RB    at 0x4003B014 : UInt32 // ADC data result register\n"
  "register ADC0_CV1   at 0x4003B018 : UInt32 // Compare value registers\n"
  "register ADC0_CV2   at 0x4003B01C : UInt32 // Compare value registers\n"
  "register ADC0_SC2   at 0x4003B020 : UInt32 // Status and control register 2\n"
  "let ADC_SC2_ADACT  : UInt32 = 0x80   // Conversion active\n"
  "let ADC_SC2_ADTRG  : UInt32 = 0x40   // Conversion trigger select, 0=software, 1=hardware\n"
  "let ADC_SC2_ACFE   : UInt32 = 0x20   // Compare function enable\n"
  "let ADC_SC2_ACFGT  : UInt32 = 0x10   // Compare function greater than enable\n"
  "let ADC_SC2_ACREN  : UInt32 = 0x08   // Compare function range enable\n"
  "let ADC_SC2_DMAEN  : UInt32= 0x04   // DMA enable\n"
  "//register ADC_SC2_REFSEL(n)   (((n) & 3) << 0) // Voltage reference, 0=vcc/external, 1=1.2 volts\n"
  "register ADC0_SC3   at 0x4003B024 : UInt32 // Status and control register 3\n"
  "let ADC_SC3_CAL  : UInt32 = 0x80   // Calibration, 1=begin, stays set while cal in progress\n"
  "let ADC_SC3_CALF  : UInt32= 0x40   // Calibration failed flag\n"
  "let ADC_SC3_ADCO  : UInt32= 0x08   // Continuous conversion enable\n"
  "let ADC_SC3_AVGE  : UInt32= 0x04   // Hardware average enable\n"
  "//register ADC_SC3_AVGS(n)    (((n) & 3) << 0) // avg select, 0=4 samples, 1=8 samples, 2=16 samples, 3=32 samples\n"
  "register ADC0_OFS   at 0x4003B028 : UInt32 // ADC offset correction register\n"
  "register ADC0_PG    at 0x4003B02C : UInt32 // ADC plus-side gain register\n"
  "register ADC0_MG    at 0x4003B030 : UInt32 // ADC minus-side gain register\n"
  "register ADC0_CLPD  at 0x4003B034 : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC0_CLPS  at 0x4003B038 : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC0_CLP4  at 0x4003B03C : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC0_CLP3  at 0x4003B040 : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC0_CLP2  at 0x4003B044 : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC0_CLP1  at 0x4003B048 : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC0_CLP0  at 0x4003B04C : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC0_PGA   at 0x4003B050 : UInt32 // ADC Programmable Gain Amplifier\n"
  "let ADC0_PGA_PGAEN  : UInt32 = 0x00800000  // Enable\n"
  "let ADC0_PGA_PGALPB  : UInt32 = 0x00100000  // Low-Power Mode Control, 0=low power, 1=normal\n"
  "//register ADC0_PGA_PGAG(n)   (((n) & 15) << 16) // Gain, 0=1X, 1=2X, 2=4X, 3=8X, 4=16X, 5=32X, 6=64X\n"
  "register ADC0_CLMD   at 0x4003B054 : UInt32 // ADC minus-side general calibration value register\n"
  "register ADC0_CLMS   at 0x4003B058 : UInt32 // ADC minus-side general calibration value register\n"
  "register ADC0_CLM4   at 0x4003B05C : UInt32 // ADC minus-side general calibration value register\n"
  "register ADC0_CLM3   at 0x4003B060 : UInt32 // ADC minus-side general calibration value register\n"
  "register ADC0_CLM2   at 0x4003B064 : UInt32 // ADC minus-side general calibration value register\n"
  "register ADC0_CLM1   at 0x4003B068 : UInt32 // ADC minus-side general calibration value register\n"
  "register ADC0_CLM0   at 0x4003B06C : UInt32 // ADC minus-side general calibration value register\n"
  "\n"
  "register ADC1_SC1A   at 0x400BB000 : UInt32 // ADC status and control registers 1\n"
  "register ADC1_SC1B   at 0x400BB004 : UInt32 // ADC status and control registers 1\n"
  "register ADC1_CFG1   at 0x400BB008 : UInt32 // ADC configuration register 1\n"
  "register ADC1_CFG2   at 0x400BB00C : UInt32 // Configuration register 2\n"
  "register ADC1_RA     at 0x400BB010 : UInt32 // ADC data result register\n"
  "register ADC1_RB     at 0x400BB014 : UInt32 // ADC data result register\n"
  "register ADC1_CV1    at 0x400BB018 : UInt32 // Compare value registers\n"
  "register ADC1_CV2    at 0x400BB01C : UInt32 // Compare value registers\n"
  "register ADC1_SC2    at 0x400BB020 : UInt32 // Status and control register 2\n"
  "register ADC1_SC3    at 0x400BB024 : UInt32 // Status and control register 3\n"
  "register ADC1_OFS    at 0x400BB028 : UInt32 // ADC offset correction register\n"
  "register ADC1_PG     at 0x400BB02C : UInt32 // ADC plus-side gain register\n"
  "register ADC1_MG     at 0x400BB030 : UInt32 // ADC minus-side gain register\n"
  "register ADC1_CLPD   at 0x400BB034 : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC1_CLPS   at 0x400BB038 : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC1_CLP4   at 0x400BB03C : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC1_CLP3   at 0x400BB040 : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC1_CLP2   at 0x400BB044 : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC1_CLP1   at 0x400BB048 : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC1_CLP0   at 0x400BB04C : UInt32 // ADC plus-side general calibration value register\n"
  "register ADC1_PGA    at 0x400BB050 : UInt32 // ADC Programmable Gain Amplifier\n"
  "register ADC1_CLMD   at 0x400BB054 : UInt32 // ADC minus-side general calibration value register\n"
  "register ADC1_CLMS   at 0x400BB058 : UInt32 // ADC minus-side general calibration value register\n"
  "register ADC1_CLM4   at 0x400BB05C : UInt32 // ADC minus-side general calibration value register\n"
  "register ADC1_CLM3   at 0x400BB060 : UInt32 // ADC minus-side general calibration value register\n"
  "register ADC1_CLM2   at 0x400BB064 : UInt32 // ADC minus-side general calibration value register\n"
  "register ADC1_CLM1   at 0x400BB068 : UInt32 // ADC minus-side general calibration value register\n"
  "register ADC1_CLM0   at 0x400BB06C : UInt32 // ADC minus-side general calibration value register\n"
  "\n"
  "register DAC0_DAT0L at 0x400CC000 : UInt8 // DAC Data Low Register \n"
  "register DAC0_DATH  at 0x400CC001 : UInt8 // DAC Data High Register \n"
  "register DAC0_DAT1L at 0x400CC002 : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT2L at 0x400CC004 : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT3L at 0x400CC006 : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT4L at 0x400CC008 : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT5L at 0x400CC00A : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT6L at 0x400CC00C : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT7L at 0x400CC00E : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT8L at 0x400CC010 : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT9L at 0x400CC012 : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT10L at 0x400CC014 : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT11L at 0x400CC016 : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT12L at 0x400CC018 : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT13L at 0x400CC01A : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT14L at 0x400CC01C : UInt8 // DAC Data Low Register \n"
  "register DAC0_DAT15L at 0x400CC01E : UInt8 // DAC Data Low Register \n"
  "register DAC0_SR     at 0x400CC020 : UInt8 // DAC Status Register \n"
  "register DAC0_C0     at 0x400CC021 : UInt8 // DAC Control Register \n"
  "let DAC_C0_DACEN  : UInt8 = 0x80    // DAC Enable\n"
  "let DAC_C0_DACRFS : UInt8 = 0x40    // DAC Reference Select\n"
  "let DAC_C0_DACTRGSEL : UInt8 = 0x20    // DAC Trigger Select\n"
  "let DAC_C0_DACSWTRG  : UInt8 = 0x10    // DAC Software Trigger\n"
  "let DAC_C0_LPEN  : UInt8 = 0x08    // DAC Low Power Control\n"
  "let DAC_C0_DACBWIEN  : UInt8 = 0x04    // DAC Buffer Watermark Interrupt Enable\n"
  "let DAC_C0_DACBTIEN : UInt8 = 0x02    // DAC Buffer Read Pointer Top Flag Interrupt Enable\n"
  "let DAC_C0_DACBBIEN : UInt8 = 0x01    // DAC Buffer Read Pointer Bottom Flag Interrupt Enable\n"
  "\n"
  "register DAC0_C1  at 0x400CC022 : UInt8 // DAC Control Register 1 \n"
  "let DAC_C1_DMAEN : UInt8 = 0x80    // DMA Enable Select\n"
  "//register DAC_C1_DACBFWM(n)  (((n) & 3) << 3)  // DAC Buffer Watermark Select\n"
  "//register DAC_C1_DACBFMD(n)  (((n) & 3) << 0)  // DAC Buffer Work Mode Select\n"
  "let DAC_C1_DACBFEN : UInt8 = 0x00    // DAC Buffer Enable\n"
  "//\n"
  "register DAC0_C2  at 0x400CC023 : UInt8 // DAC Control Register 2 \n"
  "//register DAC_C2_DACBFRP(n)  (((n) & 15) << 4)  // DAC Buffer Read Pointer\n"
  "//register DAC_C2_DACBFUP(n)  (((n) & 15) << 0)  // DAC Buffer Upper Limit\n"
  "//\n"
  "//\n"
  "////register MCG_C2_RANGE0(n)  (uint8_t)(((n) & 0x03) << 4) // Frequency Range Select, Selects the frequency range for the crystal oscillator\n"
  "////register MCG_C2_LOCRE0   (uint8_t)0x80   // Loss of Clock Reset Enable, Determines whether an interrupt or a reset request is made following a los"
  "s of OSC0 \n"
  "//\n"
  "//// Chapter 32: Comparator (CMP)\n"
  "register CMP0_CR0   at 0x40073000 : UInt8 // CMP Control Register 0\n"
  "register CMP0_CR1   at 0x40073001 : UInt8 // CMP Control Register 1\n"
  "register CMP0_FPR   at 0x40073002 : UInt8 // CMP Filter Period Register\n"
  "register CMP0_SCR   at 0x40073003 : UInt8 // CMP Status and Control Register\n"
  "register CMP0_DACCR at 0x40073004 : UInt8 // DAC Control Register\n"
  "register CMP0_MUXCR at 0x40073005 : UInt8 // MUX Control Register\n"
  "register CMP1_CR0   at 0x40073008 : UInt8 // CMP Control Register 0\n"
  "register CMP1_CR1   at 0x40073009 : UInt8 // CMP Control Register 1\n"
  "register CMP1_FPR   at 0x4007300A : UInt8 // CMP Filter Period Register\n"
  "register CMP1_SCR   at 0x4007300B : UInt8 // CMP Status and Control Register\n"
  "register CMP1_DACCR at 0x4007300C : UInt8 // DAC Control Register\n"
  "register CMP1_MUXCR at 0x4007300D : UInt8 // MUX Control Register\n"
  "//\n"
  "//// Chapter 33: Voltage Reference (VREFV1)\n"
  "register VREF_TRM  at 0x40074000 : UInt8 // VREF Trim Register\n"
  "register VREF_SC   at 0x40074001 : UInt8 // VREF Status and Control Register\n"
  "\n"
  "// Chapter 34: Programmable Delay Block (PDB)\n"
  "//register PDB0_SC    0x40036000 // Status and Control Register\n"
  "//register PDB_SC_LDMOD(n)   (((n) & 3) << 18) // Load Mode Select\n"
  "//register PDB_SC_PDBEIE   0x00020000  // Sequence Error Interrupt Enable\n"
  "//register PDB_SC_SWTRIG   0x00010000  // Software Trigger\n"
  "//register PDB_SC_DMAEN   0x00008000  // DMA Enable\n"
  "//register PDB_SC_PRESCALER(n)  (((n) & 7) << 12) // Prescaler Divider Select\n"
  "//register PDB_SC_TRGSEL(n)  (((n) & 15) << 8) // Trigger Input Source Select\n"
  "//register PDB_SC_PDBEN   0x00000080  // PDB Enable\n"
  "//register PDB_SC_PDBIF   0x00000040  // PDB Interrupt Flag\n"
  "//register PDB_SC_PDBIE   0x00000020  // PDB Interrupt Enable.\n"
  "//register PDB_SC_MULT(n)   (((n) & 3) << 2) // Multiplication Factor\n"
  "//register PDB_SC_CONT   0x00000002  // Continuous Mode Enable\n"
  "//register PDB_SC_LDOK   0x00000001  // Load OK\n"
  "//register PDB0_MOD   0x40036004 // Modulus Register\n"
  "//register PDB0_CNT   0x40036008 // Counter Register\n"
  "//register PDB0_IDLY   0x4003600C // Interrupt Delay Register\n"
  "//register PDB0_CH0C1   0x40036010 // Channel n Control Register 1\n"
  "//register PDB0_CH0S   0x40036014 // Channel n Status Register\n"
  "//register PDB0_CH0DLY0   0x40036018 // Channel n Delay 0 Register\n"
  "//register PDB0_CH0DLY1   0x4003601C // Channel n Delay 1 Register\n"
  "//register PDB0_POEN   0x40036190 // Pulse-Out n Enable Register\n"
  "//register PDB0_PO0DLY   0x40036194 // Pulse-Out n Delay Register\n"
  "//register PDB0_PO1DLY   0x40036198 // Pulse-Out n Delay Register\n"
  "//\n"
  "//// Chapter 35: FlexTimer Module (FTM)\n"
  "//register FTM0_SC    0x40038000 // Status And Control\n"
  "//register FTM_SC_TOF   0x80    // Timer Overflow Flag\n"
  "//register FTM_SC_TOIE   0x40    // Timer Overflow Interrupt Enable\n"
  "//register FTM_SC_CPWMS   0x20    // Center-Aligned PWM Select\n"
  "//register FTM_SC_CLKS(n)   (((n) & 3) << 3)  // Clock Source Selection\n"
  "//register FTM_SC_PS(n)   (((n) & 7) << 0)  // Prescale Factor Selection\n"
  "//register FTM0_CNT   0x40038004 // Counter\n"
  "//register FTM0_MOD   0x40038008 // Modulo\n"
  "//register FTM0_C0SC   0x4003800C // Channel 0 Status And Control\n"
  "//register FTM0_C0V   0x40038010 // Channel 0 Value\n"
  "//register FTM0_C1SC   0x40038014 // Channel 1 Status And Control\n"
  "//register FTM0_C1V   0x40038018 // Channel 1 Value\n"
  "//register FTM0_C2SC   0x4003801C // Channel 2 Status And Control\n"
  "//register FTM0_C2V   0x40038020 // Channel 2 Value\n"
  "//register FTM0_C3SC   0x40038024 // Channel 3 Status And Control\n"
  "//register FTM0_C3V   0x40038028 // Channel 3 Value\n"
  "//register FTM0_C4SC   0x4003802C // Channel 4 Status And Control\n"
  "//register FTM0_C4V   0x40038030 // Channel 4 Value\n"
  "//register FTM0_C5SC   0x40038034 // Channel 5 Status And Control\n"
  "//register FTM0_C5V   0x40038038 // Channel 5 Value\n"
  "//register FTM0_C6SC   0x4003803C // Channel 6 Status And Control\n"
  "//register FTM0_C6V   0x40038040 // Channel 6 Value\n"
  "//register FTM0_C7SC   0x40038044 // Channel 7 Status And Control\n"
  "//register FTM0_C7V   0x40038048 // Channel 7 Value\n"
  "//register FTM0_CNTIN   0x4003804C // Counter Initial Value\n"
  "//register FTM0_STATUS   0x40038050 // Capture And Compare Status\n"
  "//register FTM0_MODE   0x40038054 // Features Mode Selection\n"
  "//register FTM_MODE_FAULTIE  0x80    // Fault Interrupt Enable\n"
  "//register FTM_MODE_FAULTM(n)  (((n) & 3) << 5)  // Fault Control Mode\n"
  "//register FTM_MODE_CAPTEST  0x10    // Capture Test Mode Enable\n"
  "//register FTM_MODE_PWMSYNC  0x08    // PWM Synchronization Mode\n"
  "//register FTM_MODE_WPDIS   0x04    // Write Protection Disable\n"
  "//register FTM_MODE_INIT   0x02    // Initialize The Channels Output\n"
  "//register FTM_MODE_FTMEN   0x01    // FTM Enable\n"
  "//register FTM0_SYNC   0x40038058 // Synchronization\n"
  "//register FTM_SYNC_SWSYNC   0x80    // \n"
  "//register FTM_SYNC_TRIG2   0x40    // \n"
  "//register FTM_SYNC_TRIG1   0x20    // \n"
  "//register FTM_SYNC_TRIG0   0x10    // \n"
  "//register FTM_SYNC_SYNCHOM  0x08    // \n"
  "//register FTM_SYNC_REINIT   0x04    // \n"
  "//register FTM_SYNC_CNTMAX   0x02    // \n"
  "//register FTM_SYNC_CNTMIN   0x01    // \n"
  "//register FTM0_OUTINIT   0x4003805C // Initial State For Channels Output\n"
  "//register FTM0_OUTMASK   0x40038060 // Output Mask\n"
  "//register FTM0_COMBINE   0x40038064 // Function For Linked Channels\n"
  "//register FTM0_DEADTIME   0x40038068 // Deadtime Insertion Control\n"
  "//register FTM0_EXTTRIG   0x4003806C // FTM External Trigger\n"
  "//register FTM0_POL   0x40038070 // Channels Polarity\n"
  "//register FTM0_FMS   0x40038074 // Fault Mode Status\n"
  "//register FTM0_FILTER   0x40038078 // Input Capture Filter Control\n"
  "//register FTM0_FLTCTRL   0x4003807C // Fault Control\n"
  "//register FTM0_QDCTRL   0x40038080 // Quadrature Decoder Control And Status\n"
  "//register FTM0_CONF   0x40038084 // Configuration\n"
  "//register FTM0_FLTPOL   0x40038088 // FTM Fault Input Polarity\n"
  "//register FTM0_SYNCONF   0x4003808C // Synchronization Configuration\n"
  "//register FTM0_INVCTRL   0x40038090 // FTM Inverting Control\n"
  "//register FTM0_SWOCTRL   0x40038094 // FTM Software Output Control\n"
  "//register FTM0_PWMLOAD   0x40038098 // FTM PWM Load\n"
  "//register FTM1_SC    0x40039000 // Status And Control\n"
  "//register FTM1_CNT   0x40039004 // Counter\n"
  "//register FTM1_MOD   0x40039008 // Modulo\n"
  "//register FTM1_C0SC   0x4003900C // Channel 0 Status And Control\n"
  "//register FTM1_C0V   0x40039010 // Channel 0 Value\n"
  "//register FTM1_C1SC   0x40039014 // Channel 1 Status And Control\n"
  "//register FTM1_C1V   0x40039018 // Channel 1 Value\n"
  "//register FTM1_CNTIN   0x4003904C // Counter Initial Value\n"
  "//register FTM1_STATUS   0x40039050 // Capture And Compare Status\n"
  "//register FTM1_MODE   0x40039054 // Features Mode Selection\n"
  "//register FTM1_SYNC   0x40039058 // Synchronization\n"
  "//register FTM1_OUTINIT   0x4003905C // Initial State For Channels Output\n"
  "//register FTM1_OUTMASK   0x40039060 // Output Mask\n"
  "//register FTM1_COMBINE   0x40039064 // Function For Linked Channels\n"
  "//register FTM1_DEADTIME   0x40039068 // Deadtime Insertion Control\n"
  "//register FTM1_EXTTRIG   0x4003906C // FTM External Trigger\n"
  "//register FTM1_POL   0x40039070 // Channels Polarity\n"
  "//register FTM1_FMS   0x40039074 // Fault Mode Status\n"
  "//register FTM1_FILTER   0x40039078 // Input Capture Filter Control\n"
  "//register FTM1_FLTCTRL   0x4003907C // Fault Control\n"
  "//register FTM1_QDCTRL   0x40039080 // Quadrature Decoder Control And Status\n"
  "//register FTM1_CONF   0x40039084 // Configuration\n"
  "//register FTM1_FLTPOL   0x40039088 // FTM Fault Input Polarity\n"
  "//register FTM1_SYNCONF   0x4003908C // Synchronization Configuration\n"
  "//register FTM1_INVCTRL   0x40039090 // FTM Inverting Control\n"
  "//register FTM1_SWOCTRL   0x40039094 // FTM Software Output Control\n"
  "//register FTM1_PWMLOAD   0x40039098 // FTM PWM Load\n"
  "//register FTM2_SC    0x400B8000 // Status And Control\n"
  "//register FTM2_CNT   0x400B8004 // Counter\n"
  "//register FTM2_MOD   0x400B8008 // Modulo\n"
  "//register FTM2_C0SC   0x400B800C // Channel 0 Status And Control\n"
  "//register FTM2_C0V   0x400B8010 // Channel 0 Value\n"
  "//register FTM2_C1SC   0x400B8014 // Channel 1 Status And Control\n"
  "//register FTM2_C1V   0x400B8018 // Channel 1 Value\n"
  "//register FTM2_CNTIN   0x400B804C // Counter Initial Value\n"
  "//register FTM2_STATUS   0x400B8050 // Capture And Compare Status\n"
  "//register FTM2_MODE   0x400B8054 // Features Mode Selection\n"
  "//register FTM2_SYNC   0x400B8058 // Synchronization\n"
  "//register FTM2_OUTINIT   0x400B805C // Initial State For Channels Output\n"
  "//register FTM2_OUTMASK   0x400B8060 // Output Mask\n"
  "//register FTM2_COMBINE   0x400B8064 // Function For Linked Channels\n"
  "//register FTM2_DEADTIME   0x400B8068 // Deadtime Insertion Control\n"
  "//register FTM2_EXTTRIG   0x400B806C // FTM External Trigger\n"
  "//register FTM2_POL   0x400B8070 // Channels Polarity\n"
  "//register FTM2_FMS   0x400B8074 // Fault Mode Status\n"
  "//register FTM2_FILTER   0x400B8078 // Input Capture Filter Control\n"
  "//register FTM2_FLTCTRL   0x400B807C // Fault Control\n"
  "//register FTM2_QDCTRL   0x400B8080 // Quadrature Decoder Control And Status\n"
  "//register FTM2_CONF   0x400B8084 // Configuration\n"
  "//register FTM2_FLTPOL   0x400B8088 // FTM Fault Input Polarity\n"
  "//register FTM2_SYNCONF   0x400B808C // Synchronization Configuration\n"
  "//register FTM2_INVCTRL   0x400B8090 // FTM Inverting Control\n"
  "//register FTM2_SWOCTRL   0x400B8094 // FTM Software Output Control\n"
  "//register FTM2_PWMLOAD   0x400B8098 // FTM PWM Load\n"
  "//\n"
  "//// Chapter 36: Periodic Interrupt Timer (PIT)\n"
  "//register PIT_MCR    0x40037000 // PIT Module Control Register\n"
  "//register PIT_LDVAL0   0x40037100 // Timer Load Value Register\n"
  "//register PIT_CVAL0   0x40037104 // Current Timer Value Register\n"
  "//register PIT_TCTRL0   0x40037108 // Timer Control Register\n"
  "//register PIT_TFLG0   0x4003710C // Timer Flag Register\n"
  "//register PIT_LDVAL1   0x40037110 // Timer Load Value Register\n"
  "//register PIT_CVAL1   0x40037114 // Current Timer Value Register\n"
  "//register PIT_TCTRL1   0x40037118 // Timer Control Register\n"
  "//register PIT_TFLG1   0x4003711C // Timer Flag Register\n"
  "//register PIT_LDVAL2   0x40037120 // Timer Load Value Register\n"
  "//register PIT_CVAL2   0x40037124 // Current Timer Value Register\n"
  "//register PIT_TCTRL2   0x40037128 // Timer Control Register\n"
  "//register PIT_TFLG2   0x4003712C // Timer Flag Register\n"
  "//register PIT_LDVAL3   0x40037130 // Timer Load Value Register\n"
  "//register PIT_CVAL3   0x40037134 // Current Timer Value Register\n"
  "//register PIT_TCTRL3   0x40037138 // Timer Control Register\n"
  "//register PIT_TFLG3   0x4003713C // Timer Flag Register\n"
  "//\n"
  "//// Chapter 37: Low-Power Timer (LPTMR)\n"
  "//register LPTMR0_CSR   0x40040000 // Low Power Timer Control Status Register\n"
  "//register LPTMR0_PSR   0x40040004 // Low Power Timer Prescale Register\n"
  "//register LPTMR0_CMR   0x40040008 // Low Power Timer Compare Register\n"
  "//register LPTMR0_CNR   0x4004000C // Low Power Timer Counter Register\n"
  "//\n"
  "//// Chapter 38: Carrier Modulator Transmitter (CMT)\n"
  "//register CMT_CGH1  *(volatile uint8_t  *)0x40062000 // CMT Carrier Generator High Data Register 1\n"
  "//register CMT_CGL1  *(volatile uint8_t  *)0x40062001 // CMT Carrier Generator Low Data Register 1\n"
  "//register CMT_CGH2  *(volatile uint8_t  *)0x40062002 // CMT Carrier Generator High Data Register 2\n"
  "//register CMT_CGL2  *(volatile uint8_t  *)0x40062003 // CMT Carrier Generator Low Data Register 2\n"
  "//register CMT_OC   *(volatile uint8_t  *)0x40062004 // CMT Output Control Register\n"
  "//register CMT_MSC   *(volatile uint8_t  *)0x40062005 // CMT Modulator Status and Control Register\n"
  "//register CMT_CMD1  *(volatile uint8_t  *)0x40062006 // CMT Modulator Data Register Mark High\n"
  "//register CMT_CMD2  *(volatile uint8_t  *)0x40062007 // CMT Modulator Data Register Mark Low\n"
  "//register CMT_CMD3  *(volatile uint8_t  *)0x40062008 // CMT Modulator Data Register Space High\n"
  "//register CMT_CMD4  *(volatile uint8_t  *)0x40062009 // CMT Modulator Data Register Space Low\n"
  "//register CMT_PPS   *(volatile uint8_t  *)0x4006200A // CMT Primary Prescaler Register\n"
  "//register CMT_DMA   *(volatile uint8_t  *)0x4006200B // CMT Direct Memory Access Register\n"
  "//\n"
  "//// Chapter 39: Real Time Clock (RTC)\n"
  "register RTC_TSR at  0x4003D000 : UInt32 // RTC Time Seconds Register\n"
  "register RTC_TPR at  0x4003D004 : UInt32 // RTC Time Prescaler Register\n"
  "register RTC_TAR at  0x4003D008 : UInt32 // RTC Time Alarm Register\n"
  "register RTC_TCR at  0x4003D00C : UInt32 // RTC Time Compensation Register\n"
  "//register RTC_TCR_CIC(n)   (((n) & 255) << 24)  // Compensation Interval Counter\n"
  "//register RTC_TCR_TCV(n)   (((n) & 255) << 16)  // Time Compensation Value\n"
  "//register RTC_TCR_CIR(n)   (((n) & 255) << 8)  // Compensation Interval Register\n"
  "//register RTC_TCR_TCR(n)   (((n) & 255) << 0)  // Time Compensation Register\n"
  "register RTC_CR at  0x4003D010 : UInt32 {// RTC Control Register\n"
  "  18, SC2P, SC4P, SC8P, SC16P,CKLO, OSCE, 4, UM, SUP, WPE, SWR\n"
  "}\n"
  " \n"
  "register RTC_SR at  0x4003D014 : UInt32 // RTC Status Register\n"
  "let RTC_SR_TCE : UInt32 = 0x00000010  \n"
  "let RTC_SR_TAF : UInt32 = 0x00000004  // \n"
  "let RTC_SR_TOF : UInt32 = 0x00000002  // \n"
  "let RTC_SR_TIF : UInt32 = 0x00000001  // \n"
  "\n"
  "register RTC_LR  at 0x4003D018 : UInt32 // RTC Lock Register\n"
  "register RTC_IER at 0x4003D01C : UInt32 // RTC Interrupt Enable Register\n"
  "register RTC_WAR at 0x4003D800 : UInt32 // RTC Write Access Register\n"
  "register RTC_RAR at 0x4003D804 : UInt32 // RTC Read Access Register\n"
  "\n"
  "//// Chapter 40: Universal Serial Bus OTG Controller (USBOTG)\n"
  "//register USB0_PERID  *(const    uint8_t  *)0x40072000 // Peripheral ID register\n"
  "//register USB0_IDCOMP  *(const    uint8_t  *)0x40072004 // Peripheral ID Complement register\n"
  "//register USB0_REV  *(const    uint8_t  *)0x40072008 // Peripheral Revision register\n"
  "//register USB0_ADDINFO  *(volatile uint8_t  *)0x4007200C // Peripheral Additional Info register\n"
  "//register USB0_OTGIST *(volatile uint8_t  *)0x40072010 // OTG Interrupt Status register\n"
  "//register USB_OTGISTAT_IDCHG  (uint8_t)0x80   //\n"
  "//register USB_OTGISTAT_ONEMSEC  (uint8_t)0x40   //\n"
  "//register USB_OTGISTAT_LINE_STATE_CHG (uint8_t)0x20   //\n"
  "//register USB_OTGISTAT_SESSVLDCHG  (uint8_t)0x08   //\n"
  "//register USB_OTGISTAT_B_SESS_CHG  (uint8_t)0x04   //\n"
  "//register USB_OTGISTAT_AVBUSCHG  (uint8_t)0x01   //\n"
  "//register USB0_OTGICR  *(volatile uint8_t  *)0x40072014 // OTG Interrupt Control Register\n"
  "//register USB_OTGICR_IDEN   (uint8_t)0x80   // \n"
  "//register USB_OTGICR_ONEMSECEN  (uint8_t)0x40   // \n"
  "//register USB_OTGICR_LINESTATEEN  (uint8_t)0x20   // \n"
  "//register USB_OTGICR_SESSVLDEN  (uint8_t)0x08   // \n"
  "//register USB_OTGICR_BSESSEN  (uint8_t)0x04   // \n"
  "//register USB_OTGICR_AVBUSEN  (uint8_t)0x01   // \n"
  "//register USB0_OTGST *(volatile uint8_t  *)0x40072018 // OTG Status register\n"
  "//register USB_OTGSTAT_ID   (uint8_t)0x80   // \n"
  "//register USB_OTGSTAT_ONEMSECEN  (uint8_t)0x40   // \n"
  "//register USB_OTGSTAT_LINESTATESTABLE (uint8_t)0x20   // \n"
  "//register USB_OTGSTAT_SESS_VLD  (uint8_t)0x08   // \n"
  "//register USB_OTGSTAT_BSESSEND  (uint8_t)0x04   // \n"
  "//register USB_OTGSTAT_AVBUSVLD  (uint8_t)0x01   // \n"
  "//register USB0_OTGCTL  *(volatile uint8_t  *)0x4007201C // OTG Control Register\n"
  "//register USB_OTGCTL_DPHIGH  (uint8_t)0x80   // \n"
  "//register USB_OTGCTL_DPLOW  (uint8_t)0x20   // \n"
  "//register USB_OTGCTL_DMLOW  (uint8_t)0x10   // \n"
  "//register USB_OTGCTL_OTGEN  (uint8_t)0x04   // \n"
  "//register USB0_IST *(volatile uint8_t  *)0x40072080 // Interrupt Status Register\n"
  "//register USB_ISTAT_STALL   (uint8_t)0x80   // \n"
  "//register USB_ISTAT_ATTACH  (uint8_t)0x40   // \n"
  "//register USB_ISTAT_RESUME  (uint8_t)0x20   // \n"
  "//register USB_ISTAT_SLEEP   (uint8_t)0x10   // \n"
  "//register USB_ISTAT_TOKDNE  (uint8_t)0x08   // \n"
  "//register USB_ISTAT_SOFTOK  (uint8_t)0x04   // \n"
  "//register USB_ISTAT_ERROR   (uint8_t)0x02   // \n"
  "//register USB_ISTAT_USBRST  (uint8_t)0x01   // \n"
  "//register USB0_INTEN  *(volatile uint8_t  *)0x40072084 // Interrupt Enable Register\n"
  "//register USB_INTEN_STALLEN  (uint8_t)0x80   // \n"
  "//register USB_INTEN_ATTACHEN  (uint8_t)0x40   // \n"
  "//register USB_INTEN_RESUMEEN  (uint8_t)0x20   // \n"
  "//register USB_INTEN_SLEEPEN  (uint8_t)0x10   // \n"
  "//register USB_INTEN_TOKDNEEN  (uint8_t)0x08   // \n"
  "//register USB_INTEN_SOFTOKEN  (uint8_t)0x04   // \n"
  "//register USB_INTEN_ERROREN  (uint8_t)0x02   // \n"
  "//register USB_INTEN_USBRSTEN  (uint8_t)0x01   // \n"
  "//register USB0_ERRST *(volatile uint8_t  *)0x40072088 // Error Interrupt Status Register\n"
  "//register USB_ERRSTAT_BTSERR  (uint8_t)0x80   // \n"
  "//register USB_ERRSTAT_DMAERR  (uint8_t)0x20   // \n"
  "//register USB_ERRSTAT_BTOERR  (uint8_t)0x10   // \n"
  "//register USB_ERRSTAT_DFN8  (uint8_t)0x08   // \n"
  "//register USB_ERRSTAT_CRC16  (uint8_t)0x04   // \n"
  "//register USB_ERRSTAT_CRC5EOF  (uint8_t)0x02   // \n"
  "//register USB_ERRSTAT_PIDERR  (uint8_t)0x01   // \n"
  "//register USB0_ERREN  *(volatile uint8_t  *)0x4007208C // Error Interrupt Enable Register\n"
  "//register USB_ERREN_BTSERREN  (uint8_t)0x80   // \n"
  "//register USB_ERREN_DMAERREN  (uint8_t)0x20   // \n"
  "//register USB_ERREN_BTOERREN  (uint8_t)0x10   // \n"
  "//register USB_ERREN_DFN8EN  (uint8_t)0x08   // \n"
  "//register USB_ERREN_CRC16EN  (uint8_t)0x04   // \n"
  "//register USB_ERREN_CRC5EOFEN  (uint8_t)0x02   // \n"
  "//register USB_ERREN_PIDERREN  (uint8_t)0x01   // \n"
  "//register USB0_ST *(volatile uint8_t  *)0x40072090 // Status Register\n"
  "//register USB_STAT_TX   (uint8_t)0x08   // \n"
  "//register USB_STAT_ODD   (uint8_t)0x04   // \n"
  "//register USB_STAT_ENDP(n)  (uint8_t)((n) >> 4)  // \n"
  "//register USB0_CTL  *(volatile uint8_t  *)0x40072094 // Control Register\n"
  "//register USB_CTL_JSTATE   (uint8_t)0x80   // \n"
  "//register USB_CTL_SE0   (uint8_t)0x40   // \n"
  "//register USB_CTL_TXSUSPENDTOKENBUSY (uint8_t)0x20   // \n"
  "//register USB_CTL_RESET   (uint8_t)0x10   // \n"
  "//register USB_CTL_HOSTMODEEN  (uint8_t)0x08   // \n"
  "//register USB_CTL_RESUME   (uint8_t)0x04   // \n"
  "//register USB_CTL_ODDRST   (uint8_t)0x02   // \n"
  "//register USB_CTL_USBENSOFEN  (uint8_t)0x01   // \n"
  "//register USB0_ADDR  *(volatile uint8_t  *)0x40072098 // Address Register\n"
  "//register USB0_BDTPAGE1  *(volatile uint8_t  *)0x4007209C // BDT Page Register 1\n"
  "//register USB0_FRMNUML  *(volatile uint8_t  *)0x400720A0 // Frame Number Register Low\n"
  "//register USB0_FRMNUMH  *(volatile uint8_t  *)0x400720A4 // Frame Number Register High\n"
  "//register USB0_TOKEN  *(volatile uint8_t  *)0x400720A8 // Token Register\n"
  "//register USB0_SOFTHLD  *(volatile uint8_t  *)0x400720AC // SOF Threshold Register\n"
  "//register USB0_BDTPAGE2  *(volatile uint8_t  *)0x400720B0 // BDT Page Register 2\n"
  "//register USB0_BDTPAGE3  *(volatile uint8_t  *)0x400720B4 // BDT Page Register 3\n"
  "//register USB0_ENDPT0  *(volatile uint8_t  *)0x400720C0 // Endpoint Control Register\n"
  "//register USB_ENDPT_HOSTWOHUB  (uint8_t)0x80   // host only, enable low speed\n"
  "//register USB_ENDPT_RETRYDIS  (uint8_t)0x40   // host only, set to disable NAK retry\n"
  "//register USB_ENDPT_EPCTLDIS  (uint8_t)0x10   // 0=control, 1=bulk, interrupt, isync\n"
  "//register USB_ENDPT_EPRXEN  (uint8_t)0x08   // enables the endpoint for RX transfers.\n"
  "//register USB_ENDPT_EPTXEN  (uint8_t)0x04   // enables the endpoint for TX transfers.\n"
  "//register USB_ENDPT_EPSTALL  (uint8_t)0x02   // set to stall endpoint\n"
  "//register USB_ENDPT_EPHSHK  (uint8_t)0x01   // enable handshaking during a transaction, generally set unless Isochronous\n"
  "//register USB0_ENDPT1  *(volatile uint8_t  *)0x400720C4 // Endpoint Control Register\n"
  "//register USB0_ENDPT2  *(volatile uint8_t  *)0x400720C8 // Endpoint Control Register\n"
  "//register USB0_ENDPT3  *(volatile uint8_t  *)0x400720CC // Endpoint Control Register\n"
  "//register USB0_ENDPT4  *(volatile uint8_t  *)0x400720D0 // Endpoint Control Register\n"
  "//register USB0_ENDPT5  *(volatile uint8_t  *)0x400720D4 // Endpoint Control Register\n"
  "//register USB0_ENDPT6  *(volatile uint8_t  *)0x400720D8 // Endpoint Control Register\n"
  "//register USB0_ENDPT7  *(volatile uint8_t  *)0x400720DC // Endpoint Control Register\n"
  "//register USB0_ENDPT8  *(volatile uint8_t  *)0x400720E0 // Endpoint Control Register\n"
  "//register USB0_ENDPT9  *(volatile uint8_t  *)0x400720E4 // Endpoint Control Register\n"
  "//register USB0_ENDPT10  *(volatile uint8_t  *)0x400720E8 // Endpoint Control Register\n"
  "//register USB0_ENDPT11  *(volatile uint8_t  *)0x400720EC // Endpoint Control Register\n"
  "//register USB0_ENDPT12  *(volatile uint8_t  *)0x400720F0 // Endpoint Control Register\n"
  "//register USB0_ENDPT13  *(volatile uint8_t  *)0x400720F4 // Endpoint Control Register\n"
  "//register USB0_ENDPT14  *(volatile uint8_t  *)0x400720F8 // Endpoint Control Register\n"
  "//register USB0_ENDPT15  *(volatile uint8_t  *)0x400720FC // Endpoint Control Register\n"
  "//register USB0_USBCTRL  *(volatile uint8_t  *)0x40072100 // USB Control Register\n"
  "//register USB_USBCTRL_SUSP  (uint8_t)0x80   // Places the USB transceiver into the suspend state.\n"
  "//register USB_USBCTRL_PDE   (uint8_t)0x40   // Enables the weak pulldowns on the USB transceiver.\n"
  "//register USB0_OBSERVE  *(volatile uint8_t  *)0x40072104 // USB OTG Observe Register\n"
  "//register USB_OBSERVE_DPPU  (uint8_t)0x80   // \n"
  "//register USB_OBSERVE_DPPD  (uint8_t)0x40   // \n"
  "//register USB_OBSERVE_DMPD  (uint8_t)0x10   // \n"
  "//register USB0_CONTROL  *(volatile uint8_t  *)0x40072108 // USB OTG Control Register\n"
  "//register USB_CONTROL_DPPULLUPNONOTG (uint8_t)0x10   //  Provides control of the DP PULLUP in the USB OTG module, if USB is configured in non-OTG dev"
  "ice mode.\n"
  "//register USB0_USBTRC0  *(volatile uint8_t  *)0x4007210C // USB Transceiver Control Register 0\n"
  "//register USB_USBTRC_USBRESET  (uint8_t)0x80   //\n"
  "//register USB_USBTRC_USBRESMEN  (uint8_t)0x20   //\n"
  "//register USB_USBTRC_SYNC_DET  (uint8_t)0x02   //\n"
  "//register USB_USBTRC_USB_RESUME_INT (uint8_t)0x01   //\n"
  "//register USB0_USBFRMADJUST *(volatile uint8_t  *)0x40072114 // Frame Adjust Register\n"
  "//\n"
  "//// Chapter 41: USB Device Charger Detection Module (USBDCD)\n"
  "//register USBDCD_CONTROL   0x40035000 // Control register\n"
  "//register USBDCD_CLOCK   0x40035004 // Clock register\n"
  "//register USBDCD_STATUS   0x40035008 // Status register\n"
  "//register USBDCD_TIMER0   0x40035010 // TIMER0 register\n"
  "//register USBDCD_TIMER1   0x40035014 // TIMER1 register\n"
  "//register USBDCD_TIMER2   0x40035018 // TIMER2 register\n"
  "//\n"
  "//// Chapter 43: SPI (DSPI)\n"
  "//register SPI0_MCR   0x4002C000 // DSPI Module Configuration Register\n"
  "//register SPI_MCR_MSTR    0x80000000  // Master/Slave Mode Select\n"
  "//register SPI_MCR_CONT_SCKE   0x40000000  // \n"
  "//register SPI_MCR_DCONF(n)  (((n) & 3) << 28)  // \n"
  "//register SPI_MCR_FRZ    0x08000000  // \n"
  "//register SPI_MCR_MTFE    0x04000000  // \n"
  "//register SPI_MCR_ROOE    0x01000000  // \n"
  "//register SPI_MCR_PCSIS(n)  (((n) & 0x1F) << 16)  //\n"
  "//register SPI_MCR_DOZE    0x00008000  // \n"
  "//register SPI_MCR_MDIS    0x00004000  // \n"
  "//register SPI_MCR_DIS_TXF    0x00002000  // \n"
  "//register SPI_MCR_DIS_RXF    0x00001000  // \n"
  "//register SPI_MCR_CLR_TXF    0x00000800  // \n"
  "//register SPI_MCR_CLR_RXF    0x00000400  // \n"
  "//register SPI_MCR_SMPL_PT(n)  (((n) & 3) << 8)  //\n"
  "//register SPI_MCR_HALT    0x00000001  // \n"
  "//register SPI0_TCR   0x4002C008 // DSPI Transfer Count Register\n"
  "//register SPI0_CTAR0   0x4002C00C // DSPI Clock and Transfer Attributes Register, In Master Mode\n"
  "//register SPI_CTAR_DBR    0x80000000  // Double Baud Rate\n"
  "//register SPI_CTAR_FMSZ(n)  (((n) & 15) << 27)  // Frame Size (+1)\n"
  "//register SPI_CTAR_CPOL    0x04000000  // Clock Polarity\n"
  "//register SPI_CTAR_CPHA    0x02000000  // Clock Phase\n"
  "//register SPI_CTAR_LSBFE    0x01000000  // LSB First\n"
  "//register SPI_CTAR_PCSSCK(n)  (((n) & 3) << 22)  // PCS to SCK Delay Prescaler\n"
  "//register SPI_CTAR_PASC(n)  (((n) & 3) << 20)  // After SCK Delay Prescaler\n"
  "//register SPI_CTAR_PDT(n)   (((n) & 3) << 18)  // Delay after Transfer Prescaler\n"
  "//register SPI_CTAR_PBR(n)   (((n) & 3) << 16)  // Baud Rate Prescaler\n"
  "//register SPI_CTAR_CSSCK(n)  (((n) & 15) << 12)  // PCS to SCK Delay Scaler\n"
  "//register SPI_CTAR_ASC(n)   (((n) & 15) << 8)  // After SCK Delay Scaler\n"
  "//register SPI_CTAR_DT(n)   (((n) & 15) << 4)  // Delay After Transfer Scaler\n"
  "//register SPI_CTAR_BR(n)   (((n) & 15) << 0)  // Baud Rate Scaler\n"
  "//register SPI0_CTAR0_SLAVE  0x4002C00C // DSPI Clock and Transfer Attributes Register, In Slave Mode\n"
  "//register SPI0_CTAR1   0x4002C010 // DSPI Clock and Transfer Attributes Register, In Master Mode\n"
  "//register SPI0_SR    0x4002C02C // DSPI Status Register\n"
  "//register SPI_SR_TCF    0x80000000  // Transfer Complete Flag\n"
  "//register SPI_SR_TXRXS    0x40000000  // TX and RX Status\n"
  "//register SPI_SR_EOQF    0x10000000  // End of Queue Flag\n"
  "//register SPI_SR_TFUF    0x08000000  // Transmit FIFO Underflow Flag\n"
  "//register SPI_SR_TFFF    0x02000000  // Transmit FIFO Fill Flag\n"
  "//register SPI_SR_RFOF    0x00080000  // Receive FIFO Overflow Flag\n"
  "//register SPI_SR_RFDF    0x00020000  // Receive FIFO Drain Flag\n"
  "//register SPI0_RSER   0x4002C030 // DSPI DMA/Interrupt Request Select and Enable Register\n"
  "//register SPI_RSER_TCF_RE    0x80000000  // Transmission Complete Request Enable\n"
  "//register SPI_RSER_EOQF_RE   0x10000000  // DSPI Finished Request Request Enable\n"
  "//register SPI_RSER_TFUF_RE   0x08000000  // Transmit FIFO Underflow Request Enable\n"
  "//register SPI_RSER_TFFF_RE   0x02000000  // Transmit FIFO Fill Request Enable\n"
  "//register SPI_RSER_TFFF_DIRS   0x01000000  // Transmit FIFO FIll Dma or Interrupt Request Select\n"
  "//register SPI_RSER_RFOF_RE   0x00080000  // Receive FIFO Overflow Request Enable\n"
  "//register SPI_RSER_RFDF_RE   0x00020000  // Receive FIFO Drain Request Enable\n"
  "//register SPI_RSER_RFDF_DIRS   0x00010000  // Receive FIFO Drain DMA or Interrupt Request Select\n"
  "//register SPI0_PUSHR   0x4002C034 // DSPI PUSH TX FIFO Register In Master Mode\n"
  "//register SPI_PUSHR_CONT    0x80000000  // \n"
  "//register SPI_PUSHR_CTAS(n)  (((n) & 7) << 28)  // \n"
  "//register SPI_PUSHR_EOQ    0x08000000  // \n"
  "//register SPI_PUSHR_CTCNT    0x04000000  // \n"
  "//register SPI_PUSHR_PCS(n)  (((n) & 31) << 16)  //\n"
  "//register SPI0_PUSHR_SLAVE  0x4002C034 // DSPI PUSH TX FIFO Register In Slave Mode\n"
  "//register SPI0_POPR   0x4002C038 // DSPI POP RX FIFO Register\n"
  "//register SPI0_TXFR0   0x4002C03C // DSPI Transmit FIFO Registers\n"
  "//register SPI0_TXFR1   0x4002C040 // DSPI Transmit FIFO Registers\n"
  "//register SPI0_TXFR2   0x4002C044 // DSPI Transmit FIFO Registers\n"
  "//register SPI0_TXFR3   0x4002C048 // DSPI Transmit FIFO Registers\n"
  "//register SPI0_RXFR0   0x4002C07C // DSPI Receive FIFO Registers\n"
  "//register SPI0_RXFR1   0x4002C080 // DSPI Receive FIFO Registers\n"
  "//register SPI0_RXFR2   0x4002C084 // DSPI Receive FIFO Registers\n"
  "//register SPI0_RXFR3   0x4002C088 // DSPI Receive FIFO Registers\n"
  "//typedef struct {\n"
  "// volatile uint32_t MCR; // 0\n"
  "// volatile uint32_t unused1;// 4\n"
  "// volatile uint32_t TCR; // 8\n"
  "// volatile uint32_t CTAR0; // c\n"
  "// volatile uint32_t CTAR1; // 10\n"
  "// volatile uint32_t CTAR2; // 14\n"
  "// volatile uint32_t CTAR3; // 18\n"
  "// volatile uint32_t CTAR4; // 1c\n"
  "// volatile uint32_t CTAR5; // 20\n"
  "// volatile uint32_t CTAR6; // 24\n"
  "// volatile uint32_t CTAR7; // 28\n"
  "// volatile uint32_t SR; // 2c\n"
  "// volatile uint32_t RSER; // 30\n"
  "// volatile uint32_t PUSHR; // 34\n"
  "// volatile uint32_t POPR; // 38\n"
  "// volatile uint32_t TXFR[16]; // 3c\n"
  "// volatile uint32_t RXFR[16]; // 7c\n"
  "//} SPI_t;\n"
  "//register SPI0  (*(SPI_t *)0x4002C000)\n"
  "//\n"
  "//// Chapter 44: Inter-Integrated Circuit (I2C)\n"
  "//register I2C0_A1   *(volatile uint8_t  *)0x40066000 // I2C Address Register 1\n"
  "//register I2C0_F   *(volatile uint8_t  *)0x40066001 // I2C Frequency Divider register\n"
  "//register I2C0_C1   *(volatile uint8_t  *)0x40066002 // I2C Control Register 1\n"
  "//register I2C_C1_IICEN   (uint8_t)0x80   // I2C Enable\n"
  "//register I2C_C1_IICIE   (uint8_t)0x40   // I2C Interrupt Enable\n"
  "//register I2C_C1_MST   (uint8_t)0x20   // Master Mode Select\n"
  "//register I2C_C1_TX   (uint8_t)0x10   // Transmit Mode Select\n"
  "//register I2C_C1_TXAK   (uint8_t)0x08   // Transmit Acknowledge Enable\n"
  "//register I2C_C1_RSTA   (uint8_t)0x04   // RepeSTART\n"
  "//register I2C_C1_WUEN   (uint8_t)0x02   // Wakeup Enable\n"
  "//register I2C_C1_DMAEN   (uint8_t)0x01   // DMA Enable\n"
  "//register I2C0_S   *(volatile uint8_t  *)0x40066003 // I2C Status register\n"
  "//register I2C_S_TCF   (uint8_t)0x80   // Transfer Complete Flag\n"
  "//register I2C_S_IAAS   (uint8_t)0x40   // Addressed As A Slave\n"
  "//register I2C_S_BUSY   (uint8_t)0x20   // Bus Busy\n"
  "//register I2C_S_ARBL   (uint8_t)0x10   // Arbitration Lost\n"
  "//register I2C_S_RAM   (uint8_t)0x08   // Range Address Match\n"
  "//register I2C_S_SRW   (uint8_t)0x04   // Slave Read/Write\n"
  "//register I2C_S_IICIF   (uint8_t)0x02   // Interrupt Flag\n"
  "//register I2C_S_RXAK   (uint8_t)0x01   // Receive Acknowledge\n"
  "//register I2C0_D   *(volatile uint8_t  *)0x40066004 // I2C Data I/O register\n"
  "//register I2C0_C2   *(volatile uint8_t  *)0x40066005 // I2C Control Register 2\n"
  "//register I2C_C2_GCAEN   (uint8_t)0x80   // General Call Address Enable\n"
  "//register I2C_C2_ADEXT   (uint8_t)0x40   // Address Extension\n"
  "//register I2C_C2_HDRS   (uint8_t)0x20   // High Drive Select\n"
  "//register I2C_C2_SBRC   (uint8_t)0x10   // Slave Baud Rate Control\n"
  "//register I2C_C2_RMEN   (uint8_t)0x08   // Range Address Matching Enable\n"
  "//register I2C_C2_AD(n)   ((n) & 7)   // Slave Address, upper 3 bits\n"
  "//register I2C0_FLT  *(volatile uint8_t  *)0x40066006 // I2C Programmable Input Glitch Filter register\n"
  "//register I2C0_RA   *(volatile uint8_t  *)0x40066007 // I2C Range Address register\n"
  "//register I2C0_SMB  *(volatile uint8_t  *)0x40066008 // I2C SMBus Control and Status register\n"
  "//register I2C0_A2   *(volatile uint8_t  *)0x40066009 // I2C Address Register 2\n"
  "//register I2C0_SLTH  *(volatile uint8_t  *)0x4006600A // I2C SCL Low Timeout Register High\n"
  "//register I2C0_SLTL  *(volatile uint8_t  *)0x4006600B // I2C SCL Low Timeout Register Low\n"
  "//\n"
  "//register I2C1_A1   *(volatile uint8_t  *)0x40067000 // I2C Address Register 1\n"
  "//register I2C1_F   *(volatile uint8_t  *)0x40067001 // I2C Frequency Divider register\n"
  "//register I2C1_C1   *(volatile uint8_t  *)0x40067002 // I2C Control Register 1\n"
  "//register I2C1_S   *(volatile uint8_t  *)0x40067003 // I2C Status register\n"
  "//register I2C1_D   *(volatile uint8_t  *)0x40067004 // I2C Data I/O register\n"
  "//register I2C1_C2   *(volatile uint8_t  *)0x40067005 // I2C Control Register 2\n"
  "//register I2C1_FLT  *(volatile uint8_t  *)0x40067006 // I2C Programmable Input Glitch Filter register\n"
  "//register I2C1_RA   *(volatile uint8_t  *)0x40067007 // I2C Range Address register\n"
  "//register I2C1_SMB  *(volatile uint8_t  *)0x40067008 // I2C SMBus Control and Status register\n"
  "//register I2C1_A2   *(volatile uint8_t  *)0x40067009 // I2C Address Register 2\n"
  "//register I2C1_SLTH  *(volatile uint8_t  *)0x4006700A // I2C SCL Low Timeout Register High\n"
  "//register I2C1_SLTL  *(volatile uint8_t  *)0x4006700B // I2C SCL Low Timeout Register Low\n"
  "//\n"
  "//// Chapter 45: Universal Asynchronous Receiver/Transmitter (UART)\n"
  "//register UART0_BDH  *(volatile uint8_t  *)0x4006A000 // UART Baud Rate Registers: High\n"
  "//register UART0_BDL  *(volatile uint8_t  *)0x4006A001 // UART Baud Rate Registers: Low\n"
  "//register UART0_C1  *(volatile uint8_t  *)0x4006A002 // UART Control Register 1\n"
  "//register UART_C1_LOOPS   (uint8_t)0x80   // When LOOPS is set, the RxD pin is disconnected from the UART and the transmitter output is internally co"
  "nnected to the receiver input\n"
  "//register UART_C1_UARTSWAI  (uint8_t)0x40   // UART Stops in Wait Mode\n"
  "//register UART_C1_RSRC   (uint8_t)0x20   // When LOOPS is set, the RSRC field determines the source for the receiver shift register input\n"
  "//register UART_C1_M   (uint8_t)0x10   // 9-bit or 8-bit Mode Select\n"
  "//register UART_C1_WAKE   (uint8_t)0x08   // Determines which condition wakes the UART\n"
  "//register UART_C1_ILT   (uint8_t)0x04   // Idle Line Type Select\n"
  "//register UART_C1_PE   (uint8_t)0x02   // Parity Enable\n"
  "//register UART_C1_PT   (uint8_t)0x01   // Parity Type, 0=even, 1=odd\n"
  "//register UART0_C2  *(volatile uint8_t  *)0x4006A003 // UART Control Register 2\n"
  "//register UART_C2_TIE   (uint8_t)0x80   // Transmitter Interrupt or DMA Transfer Enable.\n"
  "//register UART_C2_TCIE   (uint8_t)0x40   // Transmission Complete Interrupt Enable\n"
  "//register UART_C2_RIE   (uint8_t)0x20   // Receiver Full Interrupt or DMA Transfer Enable\n"
  "//register UART_C2_ILIE   (uint8_t)0x10   // Idle Line Interrupt Enable\n"
  "//register UART_C2_TE   (uint8_t)0x08   // Transmitter Enable\n"
  "//register UART_C2_RE   (uint8_t)0x04   // Receiver Enable\n"
  "//register UART_C2_RWU   (uint8_t)0x02   // Receiver Wakeup Control\n"
  "//register UART_C2_SBK   (uint8_t)0x01   // Send Break\n"
  "//register UART0_S1  *(volatile uint8_t  *)0x4006A004 // UART Status Register 1\n"
  "//register UART_S1_TDRE   (uint8_t)0x80   // Transmit Data Register Empty Flag\n"
  "//register UART_S1_TC   (uint8_t)0x40   // Transmit Complete Flag\n"
  "//register UART_S1_RDRF   (uint8_t)0x20   // Receive Data Register Full Flag\n"
  "//register UART_S1_IDLE   (uint8_t)0x10   // Idle Line Flag\n"
  "//register UART_S1_OR   (uint8_t)0x08   // Receiver Overrun Flag\n"
  "//register UART_S1_NF   (uint8_t)0x04   // Noise Flag\n"
  "//register UART_S1_FE   (uint8_t)0x02   // Framing Error Flag\n"
  "//register UART_S1_PF   (uint8_t)0x01   // Parity Error Flag\n"
  "//register UART0_S2  *(volatile uint8_t  *)0x4006A005 // UART Status Register 2\n"
  "//register UART0_C3  *(volatile uint8_t  *)0x4006A006 // UART Control Register 3\n"
  "//register UART0_D   *(volatile uint8_t  *)0x4006A007 // UART Data Register\n"
  "//register UART0_MA1  *(volatile uint8_t  *)0x4006A008 // UART Match Address Registers 1\n"
  "//register UART0_MA2  *(volatile uint8_t  *)0x4006A009 // UART Match Address Registers 2\n"
  "//register UART0_C4  *(volatile uint8_t  *)0x4006A00A // UART Control Register 4\n"
  "//register UART0_C5  *(volatile uint8_t  *)0x4006A00B // UART Control Register 5\n"
  "//register UART0_ED  *(volatile uint8_t  *)0x4006A00C // UART Extended Data Register\n"
  "//register UART0_MODEM  *(volatile uint8_t  *)0x4006A00D // UART Modem Register\n"
  "//register UART0_IR  *(volatile uint8_t  *)0x4006A00E // UART Infrared Register\n"
  "//register UART0_PFIFO  *(volatile uint8_t  *)0x4006A010 // UART FIFO Parameters\n"
  "//register UART_PFIFO_TXFE   (uint8_t)0x80\n"
  "//register UART_PFIFO_RXFE   (uint8_t)0x08\n"
  "//register UART0_CFIFO  *(volatile uint8_t  *)0x4006A011 // UART FIFO Control Register\n"
  "//register UART_CFIFO_TXFLUSH  (uint8_t)0x80   // \n"
  "//register UART_CFIFO_RXFLUSH  (uint8_t)0x40   // \n"
  "//register UART_CFIFO_RXOFE  (uint8_t)0x04   // \n"
  "//register UART_CFIFO_TXOFE  (uint8_t)0x02   // \n"
  "//register UART_CFIFO_RXUFE  (uint8_t)0x01   // \n"
  "//register UART0_SFIFO  *(volatile uint8_t  *)0x4006A012 // UART FIFO Status Register\n"
  "//register UART_SFIFO_TXEMPT  (uint8_t)0x80\n"
  "//register UART_SFIFO_RXEMPT  (uint8_t)0x40\n"
  "//register UART_SFIFO_RXOF   (uint8_t)0x04\n"
  "//register UART_SFIFO_TXOF   (uint8_t)0x02\n"
  "//register UART_SFIFO_RXUF   (uint8_t)0x01\n"
  "//register UART0_TWFIFO  *(volatile uint8_t  *)0x4006A013 // UART FIFO Transmit Watermark\n"
  "//register UART0_TCFIFO  *(volatile uint8_t  *)0x4006A014 // UART FIFO Transmit Count\n"
  "//register UART0_RWFIFO  *(volatile uint8_t  *)0x4006A015 // UART FIFO Receive Watermark\n"
  "//register UART0_RCFIFO  *(volatile uint8_t  *)0x4006A016 // UART FIFO Receive Count\n"
  "//register UART0_C7816  *(volatile uint8_t  *)0x4006A018 // UART 7816 Control Register\n"
  "//register UART0_IE7816  *(volatile uint8_t  *)0x4006A019 // UART 7816 Interrupt Enable Register\n"
  "//register UART0_IS7816  *(volatile uint8_t  *)0x4006A01A // UART 7816 Interrupt Status Register\n"
  "//register UART0_WP7816T0  *(volatile uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register\n"
  "//register UART0_WP7816T1  *(volatile uint8_t  *)0x4006A01B // UART 7816 Wait Parameter Register\n"
  "//register UART0_WN7816  *(volatile uint8_t  *)0x4006A01C // UART 7816 Wait N Register\n"
  "//register UART0_WF7816  *(volatile uint8_t  *)0x4006A01D // UART 7816 Wait FD Register\n"
  "//register UART0_ET7816  *(volatile uint8_t  *)0x4006A01E // UART 7816 Error Threshold Register\n"
  "//register UART0_TL7816  *(volatile uint8_t  *)0x4006A01F // UART 7816 Transmit Length Register\n"
  "//register UART0_C6  *(volatile uint8_t  *)0x4006A021 // UART CEA709.1-B Control Register 6\n"
  "//register UART0_PCTH  *(volatile uint8_t  *)0x4006A022 // UART CEA709.1-B Packet Cycle Time Counter High\n"
  "//register UART0_PCTL  *(volatile uint8_t  *)0x4006A023 // UART CEA709.1-B Packet Cycle Time Counter Low\n"
  "//register UART0_B1T  *(volatile uint8_t  *)0x4006A024 // UART CEA709.1-B Beta1 Timer\n"
  "//register UART0_SDTH  *(volatile uint8_t  *)0x4006A025 // UART CEA709.1-B Secondary Delay Timer High\n"
  "//register UART0_SDTL  *(volatile uint8_t  *)0x4006A026 // UART CEA709.1-B Secondary Delay Timer Low\n"
  "//register UART0_PRE  *(volatile uint8_t  *)0x4006A027 // UART CEA709.1-B Preamble\n"
  "//register UART0_TPL  *(volatile uint8_t  *)0x4006A028 // UART CEA709.1-B Transmit Packet Length\n"
  "//register UART0_IE  *(volatile uint8_t  *)0x4006A029 // UART CEA709.1-B Interrupt Enable Register\n"
  "//register UART0_WB  *(volatile uint8_t  *)0x4006A02A // UART CEA709.1-B WBASE\n"
  "//register UART0_S3  *(volatile uint8_t  *)0x4006A02B // UART CEA709.1-B Status Register\n"
  "//register UART0_S4  *(volatile uint8_t  *)0x4006A02C // UART CEA709.1-B Status Register\n"
  "//register UART0_RPL  *(volatile uint8_t  *)0x4006A02D // UART CEA709.1-B Received Packet Length\n"
  "//register UART0_RPREL  *(volatile uint8_t  *)0x4006A02E // UART CEA709.1-B Received Preamble Length\n"
  "//register UART0_CPW  *(volatile uint8_t  *)0x4006A02F // UART CEA709.1-B Collision Pulse Width\n"
  "//register UART0_RIDT  *(volatile uint8_t  *)0x4006A030 // UART CEA709.1-B Receive Indeterminate Time\n"
  "//register UART0_TIDT  *(volatile uint8_t  *)0x4006A031 // UART CEA709.1-B Transmit Indeterminate Time\n"
  "//register UART1_BDH  *(volatile uint8_t  *)0x4006B000 // UART Baud Rate Registers: High\n"
  "//register UART1_BDL  *(volatile uint8_t  *)0x4006B001 // UART Baud Rate Registers: Low\n"
  "//register UART1_C1  *(volatile uint8_t  *)0x4006B002 // UART Control Register 1\n"
  "//register UART1_C2  *(volatile uint8_t  *)0x4006B003 // UART Control Register 2\n"
  "//register UART1_S1  *(volatile uint8_t  *)0x4006B004 // UART Status Register 1\n"
  "//register UART1_S2  *(volatile uint8_t  *)0x4006B005 // UART Status Register 2\n"
  "//register UART1_C3  *(volatile uint8_t  *)0x4006B006 // UART Control Register 3\n"
  "//register UART1_D   *(volatile uint8_t  *)0x4006B007 // UART Data Register\n"
  "//register UART1_MA1  *(volatile uint8_t  *)0x4006B008 // UART Match Address Registers 1\n"
  "//register UART1_MA2  *(volatile uint8_t  *)0x4006B009 // UART Match Address Registers 2\n"
  "//register UART1_C4  *(volatile uint8_t  *)0x4006B00A // UART Control Register 4\n"
  "//register UART1_C5  *(volatile uint8_t  *)0x4006B00B // UART Control Register 5\n"
  "//register UART1_ED  *(volatile uint8_t  *)0x4006B00C // UART Extended Data Register\n"
  "//register UART1_MODEM  *(volatile uint8_t  *)0x4006B00D // UART Modem Register\n"
  "//register UART1_IR  *(volatile uint8_t  *)0x4006B00E // UART Infrared Register\n"
  "//register UART1_PFIFO  *(volatile uint8_t  *)0x4006B010 // UART FIFO Parameters\n"
  "//register UART1_CFIFO  *(volatile uint8_t  *)0x4006B011 // UART FIFO Control Register\n"
  "//register UART1_SFIFO  *(volatile uint8_t  *)0x4006B012 // UART FIFO Status Register\n"
  "//register UART1_TWFIFO  *(volatile uint8_t  *)0x4006B013 // UART FIFO Transmit Watermark\n"
  "//register UART1_TCFIFO  *(volatile uint8_t  *)0x4006B014 // UART FIFO Transmit Count\n"
  "//register UART1_RWFIFO  *(volatile uint8_t  *)0x4006B015 // UART FIFO Receive Watermark\n"
  "//register UART1_RCFIFO  *(volatile uint8_t  *)0x4006B016 // UART FIFO Receive Count\n"
  "//register UART1_C7816  *(volatile uint8_t  *)0x4006B018 // UART 7816 Control Register\n"
  "//register UART1_IE7816  *(volatile uint8_t  *)0x4006B019 // UART 7816 Interrupt Enable Register\n"
  "//register UART1_IS7816  *(volatile uint8_t  *)0x4006B01A // UART 7816 Interrupt Status Register\n"
  "//register UART1_WP7816T0  *(volatile uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register\n"
  "//register UART1_WP7816T1  *(volatile uint8_t  *)0x4006B01B // UART 7816 Wait Parameter Register\n"
  "//register UART1_WN7816  *(volatile uint8_t  *)0x4006B01C // UART 7816 Wait N Register\n"
  "//register UART1_WF7816  *(volatile uint8_t  *)0x4006B01D // UART 7816 Wait FD Register\n"
  "//register UART1_ET7816  *(volatile uint8_t  *)0x4006B01E // UART 7816 Error Threshold Register\n"
  "//register UART1_TL7816  *(volatile uint8_t  *)0x4006B01F // UART 7816 Transmit Length Register\n"
  "//register UART1_C6  *(volatile uint8_t  *)0x4006B021 // UART CEA709.1-B Control Register 6\n"
  "//register UART1_PCTH  *(volatile uint8_t  *)0x4006B022 // UART CEA709.1-B Packet Cycle Time Counter High\n"
  "//register UART1_PCTL  *(volatile uint8_t  *)0x4006B023 // UART CEA709.1-B Packet Cycle Time Counter Low\n"
  "//register UART1_B1T  *(volatile uint8_t  *)0x4006B024 // UART CEA709.1-B Beta1 Timer\n"
  "//register UART1_SDTH  *(volatile uint8_t  *)0x4006B025 // UART CEA709.1-B Secondary Delay Timer High\n"
  "//register UART1_SDTL  *(volatile uint8_t  *)0x4006B026 // UART CEA709.1-B Secondary Delay Timer Low\n"
  "//register UART1_PRE  *(volatile uint8_t  *)0x4006B027 // UART CEA709.1-B Preamble\n"
  "//register UART1_TPL  *(volatile uint8_t  *)0x4006B028 // UART CEA709.1-B Transmit Packet Length\n"
  "//register UART1_IE  *(volatile uint8_t  *)0x4006B029 // UART CEA709.1-B Interrupt Enable Register\n"
  "//register UART1_WB  *(volatile uint8_t  *)0x4006B02A // UART CEA709.1-B WBASE\n"
  "//register UART1_S3  *(volatile uint8_t  *)0x4006B02B // UART CEA709.1-B Status Register\n"
  "//register UART1_S4  *(volatile uint8_t  *)0x4006B02C // UART CEA709.1-B Status Register\n"
  "//register UART1_RPL  *(volatile uint8_t  *)0x4006B02D // UART CEA709.1-B Received Packet Length\n"
  "//register UART1_RPREL  *(volatile uint8_t  *)0x4006B02E // UART CEA709.1-B Received Preamble Length\n"
  "//register UART1_CPW  *(volatile uint8_t  *)0x4006B02F // UART CEA709.1-B Collision Pulse Width\n"
  "//register UART1_RIDT  *(volatile uint8_t  *)0x4006B030 // UART CEA709.1-B Receive Indeterminate Time\n"
  "//register UART1_TIDT  *(volatile uint8_t  *)0x4006B031 // UART CEA709.1-B Transmit Indeterminate Time\n"
  "//register UART2_BDH  *(volatile uint8_t  *)0x4006C000 // UART Baud Rate Registers: High\n"
  "//register UART2_BDL  *(volatile uint8_t  *)0x4006C001 // UART Baud Rate Registers: Low\n"
  "//register UART2_C1  *(volatile uint8_t  *)0x4006C002 // UART Control Register 1\n"
  "//register UART2_C2  *(volatile uint8_t  *)0x4006C003 // UART Control Register 2\n"
  "//register UART2_S1  *(volatile uint8_t  *)0x4006C004 // UART Status Register 1\n"
  "//register UART2_S2  *(volatile uint8_t  *)0x4006C005 // UART Status Register 2\n"
  "//register UART2_C3  *(volatile uint8_t  *)0x4006C006 // UART Control Register 3\n"
  "//register UART2_D   *(volatile uint8_t  *)0x4006C007 // UART Data Register\n"
  "//register UART2_MA1  *(volatile uint8_t  *)0x4006C008 // UART Match Address Registers 1\n"
  "//register UART2_MA2  *(volatile uint8_t  *)0x4006C009 // UART Match Address Registers 2\n"
  "//register UART2_C4  *(volatile uint8_t  *)0x4006C00A // UART Control Register 4\n"
  "//register UART2_C5  *(volatile uint8_t  *)0x4006C00B // UART Control Register 5\n"
  "//register UART2_ED  *(volatile uint8_t  *)0x4006C00C // UART Extended Data Register\n"
  "//register UART2_MODEM  *(volatile uint8_t  *)0x4006C00D // UART Modem Register\n"
  "//register UART2_IR  *(volatile uint8_t  *)0x4006C00E // UART Infrared Register\n"
  "//register UART2_PFIFO  *(volatile uint8_t  *)0x4006C010 // UART FIFO Parameters\n"
  "//register UART2_CFIFO  *(volatile uint8_t  *)0x4006C011 // UART FIFO Control Register\n"
  "//register UART2_SFIFO  *(volatile uint8_t  *)0x4006C012 // UART FIFO Status Register\n"
  "//register UART2_TWFIFO  *(volatile uint8_t  *)0x4006C013 // UART FIFO Transmit Watermark\n"
  "//register UART2_TCFIFO  *(volatile uint8_t  *)0x4006C014 // UART FIFO Transmit Count\n"
  "//register UART2_RWFIFO  *(volatile uint8_t  *)0x4006C015 // UART FIFO Receive Watermark\n"
  "//register UART2_RCFIFO  *(volatile uint8_t  *)0x4006C016 // UART FIFO Receive Count\n"
  "//register UART2_C7816  *(volatile uint8_t  *)0x4006C018 // UART 7816 Control Register\n"
  "//register UART2_IE7816  *(volatile uint8_t  *)0x4006C019 // UART 7816 Interrupt Enable Register\n"
  "//register UART2_IS7816  *(volatile uint8_t  *)0x4006C01A // UART 7816 Interrupt Status Register\n"
  "//register UART2_WP7816T0  *(volatile uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register\n"
  "//register UART2_WP7816T1  *(volatile uint8_t  *)0x4006C01B // UART 7816 Wait Parameter Register\n"
  "//register UART2_WN7816  *(volatile uint8_t  *)0x4006C01C // UART 7816 Wait N Register\n"
  "//register UART2_WF7816  *(volatile uint8_t  *)0x4006C01D // UART 7816 Wait FD Register\n"
  "//register UART2_ET7816  *(volatile uint8_t  *)0x4006C01E // UART 7816 Error Threshold Register\n"
  "//register UART2_TL7816  *(volatile uint8_t  *)0x4006C01F // UART 7816 Transmit Length Register\n"
  "//register UART2_C6  *(volatile uint8_t  *)0x4006C021 // UART CEA709.1-B Control Register 6\n"
  "//register UART2_PCTH  *(volatile uint8_t  *)0x4006C022 // UART CEA709.1-B Packet Cycle Time Counter High\n"
  "//register UART2_PCTL  *(volatile uint8_t  *)0x4006C023 // UART CEA709.1-B Packet Cycle Time Counter Low\n"
  "//register UART2_B1T  *(volatile uint8_t  *)0x4006C024 // UART CEA709.1-B Beta1 Timer\n"
  "//register UART2_SDTH  *(volatile uint8_t  *)0x4006C025 // UART CEA709.1-B Secondary Delay Timer High\n"
  "//register UART2_SDTL  *(volatile uint8_t  *)0x4006C026 // UART CEA709.1-B Secondary Delay Timer Low\n"
  "//register UART2_PRE  *(volatile uint8_t  *)0x4006C027 // UART CEA709.1-B Preamble\n"
  "//register UART2_TPL  *(volatile uint8_t  *)0x4006C028 // UART CEA709.1-B Transmit Packet Length\n"
  "//register UART2_IE  *(volatile uint8_t  *)0x4006C029 // UART CEA709.1-B Interrupt Enable Register\n"
  "//register UART2_WB  *(volatile uint8_t  *)0x4006C02A // UART CEA709.1-B WBASE\n"
  "//register UART2_S3  *(volatile uint8_t  *)0x4006C02B // UART CEA709.1-B Status Register\n"
  "//register UART2_S4  *(volatile uint8_t  *)0x4006C02C // UART CEA709.1-B Status Register\n"
  "//register UART2_RPL  *(volatile uint8_t  *)0x4006C02D // UART CEA709.1-B Received Packet Length\n"
  "//register UART2_RPREL  *(volatile uint8_t  *)0x4006C02E // UART CEA709.1-B Received Preamble Length\n"
  "//register UART2_CPW  *(volatile uint8_t  *)0x4006C02F // UART CEA709.1-B Collision Pulse Width\n"
  "//register UART2_RIDT  *(volatile uint8_t  *)0x4006C030 // UART CEA709.1-B Receive Indeterminate Time\n"
  "//register UART2_TIDT  *(volatile uint8_t  *)0x4006C031 // UART CEA709.1-B Transmit Indeterminate Time\n"
  "//\n"
  "//// Chapter 46: Synchronous Audio Interface (SAI)\n"
  "//register I2S0_TCSR   0x4002F000 // SAI Transmit Control Register\n"
  "//register I2S_TCSR_TE    0x80000000 // Transmitter Enable\n"
  "//register I2S_TCSR_STOPE    0x40000000 // Transmitter Enable in Stop mode\n"
  "//register I2S_TCSR_DBGE    0x20000000 // Transmitter Enable in Debug mode\n"
  "//register I2S_TCSR_BCE    0x10000000 // Bit Clock Enable\n"
  "//register I2S_TCSR_FR    0x02000000 // FIFO Reset\n"
  "//register I2S_TCSR_SR    0x01000000 // Software Reset\n"
  "//register I2S_TCSR_WSF    0x00100000 // Word Start Flag\n"
  "//register I2S_TCSR_SEF    0x00080000 // Sync Error Flag\n"
  "//register I2S_TCSR_FEF    0x00040000 // FIFO Error Flag (underrun)\n"
  "//register I2S_TCSR_FWF    0x00020000 // FIFO Warning Flag (empty)\n"
  "//register I2S_TCSR_FRF    0x00010000 // FIFO Request Flag (Data Ready)\n"
  "//register I2S_TCSR_WSIE    0x00001000 // Word Start Interrupt Enable\n"
  "//register I2S_TCSR_SEIE    0x00000800 // Sync Error Interrupt Enable\n"
  "//register I2S_TCSR_FEIE    0x00000400 // FIFO Error Interrupt Enable\n"
  "//register I2S_TCSR_FWIE    0x00000200 // FIFO Warning Interrupt Enable\n"
  "//register I2S_TCSR_FRIE    0x00000100 // FIFO Request Interrupt Enable\n"
  "//register I2S_TCSR_FWDE    0x00000002 // FIFO Warning DMA Enable\n"
  "//register I2S_TCSR_FRDE    0x00000001 // FIFO Request DMA Enable\n"
  "//register I2S0_TCR1   0x4002F004 // SAI Transmit Configuration 1 Register\n"
  "//register I2S_TCR1_TFW(n)   ( n & 0x03)       // Transmit FIFO watermark\n"
  "//register I2S0_TCR2   0x4002F008 // SAI Transmit Configuration 2 Register\n"
  "//register I2S_TCR2_DIV(n)   ( n & 0xff)       // Bit clock divide by (DIV+1)*2\n"
  "//register I2S_TCR2_BCD   ( 1<<24)       // Bit clock direction\n"
  "//register I2S_TCR2_BCP   ( 1<<25)       // Bit clock polarity\n"
  "//register I2S_TCR2_MSEL(n)  ( (n & 3)<<26)       // MCLK select, 0=bus clock, 1=I2S0_MCLK\n"
  "//register I2S_TCR2_BCI   ( 1<<28)       // Bit clock input\n"
  "//register I2S_TCR2_BCS   ( 1<<29)       // Bit clock swap\n"
  "//register I2S_TCR2_SYNC(n)  ( (n & 3)<<30)       // 0=async 1=sync with receiver\n"
  "//register I2S0_TCR3   0x4002F00C // SAI Transmit Configuration 3 Register\n"
  "//register I2S_TCR3_WDFL(n)  ( n & 0x0f)       // word flag configuration\n"
  "//register I2S_TCR3_TCE   ( 0x10000)       // transmit channel enable\n"
  "//register I2S0_TCR4   0x4002F010 // SAI Transmit Configuration 4 Register\n"
  "//register I2S_TCR4_FSD   ( 1)        // Frame Sync Direction\n"
  "//register I2S_TCR4_FSP   ( 2)        // Frame Sync Polarity\n"
  "//register I2S_TCR4_FSE   ( 8)        // Frame Sync Early\n"
  "//register I2S_TCR4_MF   ( 0x10)       // MSB First\n"
  "//register I2S_TCR4_SYWD(n)  ( (n & 0x1f)<<8)     // Sync Width\n"
  "//register I2S_TCR4_FRSZ(n)  ( (n & 0x0f)<<16)    // Frame Size\n"
  "//register I2S0_TCR5   0x4002F014 // SAI Transmit Configuration 5 Register\n"
  "//register I2S_TCR5_FBT(n)   ( (n & 0x1f)<<8)     // First Bit Shifted\n"
  "//register I2S_TCR5_W0W(n)   ( (n & 0x1f)<<16)    // Word 0 Width\n"
  "//register I2S_TCR5_WNW(n)   ( (n & 0x1f)<<24)    // Word N Width\n"
  "//register I2S0_TDR0   0x4002F020 // SAI Transmit Data Register\n"
  "//register I2S0_TDR1   0x4002F024 // SAI Transmit Data Register\n"
  "//register I2S0_TFR0   0x4002F040 // SAI Transmit FIFO Register\n"
  "//register I2S0_TFR1   0x4002F044 // SAI Transmit FIFO Register\n"
  "//register I2S_TFR_RFP(n)   ( n & 7)       // read FIFO pointer\n"
  "//register I2S_TFR_WFP(n)   ( (n & 7)<<16)       // write FIFO pointer\n"
  "//register I2S0_TMR   0x4002F060 // SAI Transmit Mask Register\n"
  "//register I2S_TMR_TWM(n)   ( n & 0xFFFFFFFF)\n"
  "//register I2S0_RCSR   0x4002F080 // SAI Receive Control Register\n"
  "//register I2S_RCSR_RE    0x80000000 // Receiver Enable\n"
  "//register I2S_RCSR_STOPE    0x40000000 // Receiver Enable in Stop mode\n"
  "//register I2S_RCSR_DBGE    0x20000000 // Receiver Enable in Debug mode\n"
  "//register I2S_RCSR_BCE    0x10000000 // Bit Clock Enable\n"
  "//register I2S_RCSR_FR    0x02000000 // FIFO Reset\n"
  "//register I2S_RCSR_SR    0x01000000 // Software Reset\n"
  "//register I2S_RCSR_WSF    0x00100000 // Word Start Flag\n"
  "//register I2S_RCSR_SEF    0x00080000 // Sync Error Flag\n"
  "//register I2S_RCSR_FEF    0x00040000 // FIFO Error Flag (underrun)\n"
  "//register I2S_RCSR_FWF    0x00020000 // FIFO Warning Flag (empty)\n"
  "//register I2S_RCSR_FRF    0x00010000 // FIFO Request Flag (Data Ready)\n"
  "//register I2S_RCSR_WSIE    0x00001000 // Word Start Interrupt Enable\n"
  "//register I2S_RCSR_SEIE    0x00000800 // Sync Error Interrupt Enable\n"
  "//register I2S_RCSR_FEIE    0x00000400 // FIFO Error Interrupt Enable\n"
  "//register I2S_RCSR_FWIE    0x00000200 // FIFO Warning Interrupt Enable\n"
  "//register I2S_RCSR_FRIE    0x00000100 // FIFO Request Interrupt Enable\n"
  "//register I2S_RCSR_FWDE    0x00000002 // FIFO Warning DMA Enable\n"
  "//register I2S_RCSR_FRDE    0x00000001 // FIFO Request DMA Enable\n"
  "//register I2S0_RCR1   0x4002F084 // SAI Receive Configuration 1 Register\n"
  "//register I2S_RCR1_RFW(n)   ( n & 0x03)       // Receive FIFO watermark\n"
  "//register I2S0_RCR2   0x4002F088 // SAI Receive Configuration 2 Register\n"
  "//register I2S_RCR2_DIV(n)   ( n & 0xff)       // Bit clock divide by (DIV+1)*2\n"
  "//register I2S_RCR2_BCD   ( 1<<24)       // Bit clock direction\n"
  "//register I2S_RCR2_BCP   ( 1<<25)       // Bit clock polarity\n"
  "//register I2S_RCR2_MSEL(n)  ( (n & 3)<<26)       // MCLK select, 0=bus clock, 1=I2S0_MCLK\n"
  "//register I2S_RCR2_BCI   ( 1<<28)       // Bit clock input\n"
  "//register I2S_RCR2_BCS   ( 1<<29)       // Bit clock swap\n"
  "//register I2S_RCR2_SYNC(n)  ( (n & 3)<<30)       // 0=async 1=sync with receiver\n"
  "//register I2S0_RCR3   0x4002F08C // SAI Receive Configuration 3 Register\n"
  "//register I2S_RCR3_WDFL(n)  ( n & 0x0f)       // word flag configuration\n"
  "//register I2S_RCR3_RCE   ( 0x10000)       // receive channel enable\n"
  "//register I2S0_RCR4   0x4002F090 // SAI Receive Configuration 4 Register\n"
  "//register I2S_RCR4_FSD   ( 1)        // Frame Sync Direction\n"
  "//register I2S_RCR4_FSP   ( 2)        // Frame Sync Polarity\n"
  "//register I2S_RCR4_FSE   ( 8)        // Frame Sync Early\n"
  "//register I2S_RCR4_MF   ( 0x10)       // MSB First\n"
  "//register I2S_RCR4_SYWD(n)  ( (n & 0x1f)<<8)     // Sync Width\n"
  "//register I2S_RCR4_FRSZ(n)  ( (n & 0x0f)<<16)    // Frame Size\n"
  "//register I2S0_RCR5   0x4002F094 // SAI Receive Configuration 5 Register\n"
  "//register I2S_RCR5_FBT(n)   ( (n & 0x1f)<<8)     // First Bit Shifted\n"
  "//register I2S_RCR5_W0W(n)   ( (n & 0x1f)<<16)    // Word 0 Width\n"
  "//register I2S_RCR5_WNW(n)   ( (n & 0x1f)<<24)    // Word N Width\n"
  "//register I2S0_RDR0   0x4002F0A0 // SAI Receive Data Register\n"
  "//register I2S0_RDR1   0x4002F0A4 // SAI Receive Data Register\n"
  "//register I2S0_RFR0   0x4002F0C0 // SAI Receive FIFO Register\n"
  "//register I2S0_RFR1   0x4002F0C4 // SAI Receive FIFO Register\n"
  "//register I2S_RFR_RFP(n)   ( n & 7)       // read FIFO pointer\n"
  "//register I2S_RFR_WFP(n)   ( (n & 7)<<16)       // write FIFO pointer\n"
  "//register I2S0_RMR   0x4002F0E0 // SAI Receive Mask Register\n"
  "//register I2S_RMR_RWM(n)   ( n & 0xFFFFFFFF)\n"
  "//register I2S0_MCR   0x4002F100 // SAI MCLK Control Register\n"
  "//register I2S_MCR_DUF   ( 1<<31)       // Divider Update Flag\n"
  "//register I2S_MCR_MOE   ( 1<<30)       // MCLK Output Enable\n"
  "//register I2S_MCR_MICS(n)   ( (n & 3)<<24)       // MCLK Input Clock Select\n"
  "//register I2S0_MDR   0x4002F104 // SAI MCLK Divide Register\n"
  "//register I2S_MDR_FRACT(n)  ( (n & 0xff)<<12)    // MCLK Fraction\n"
  "//register I2S_MDR_DIVIDE(n)  ( (n & 0xfff))       // MCLK Divide\n"
  "\n"
  "// Chapter 47: General-Purpose Input/Output (GPIO)\n"
  "register GPIOA_PDOR   at 0x400FF000 : UInt32 // Port Data Output Register\n"
  "register GPIOA_PSOR   at 0x400FF004 : UInt32 // Port Set Output Register\n"
  "register GPIOA_PCOR   at 0x400FF008 : UInt32 // Port Clear Output Register\n"
  "register GPIOA_PTOR   at 0x400FF00C : UInt32 // Port Toggle Output Register\n"
  "register GPIOA_PDIR   at 0x400FF010 : UInt32 // Port Data Input Register\n"
  "register GPIOA_PDDR   at 0x400FF014 : UInt32 // Port Data Direction Register\n"
  "register GPIOB_PDOR   at 0x400FF040 : UInt32 // Port Data Output Register\n"
  "register GPIOB_PSOR   at 0x400FF044 : UInt32 // Port Set Output Register\n"
  "register GPIOB_PCOR   at 0x400FF048 : UInt32 // Port Clear Output Register\n"
  "register GPIOB_PTOR   at 0x400FF04C : UInt32 // Port Toggle Output Register\n"
  "register GPIOB_PDIR   at 0x400FF050 : UInt32 // Port Data Input Register\n"
  "register GPIOB_PDDR   at 0x400FF054 : UInt32 // Port Data Direction Register\n"
  "register GPIOC_PDOR   at 0x400FF080 : UInt32 // Port Data Output Register\n"
  "register GPIOC_PSOR   at 0x400FF084 : UInt32 // Port Set Output Register\n"
  "register GPIOC_PCOR   at 0x400FF088 : UInt32 // Port Clear Output Register\n"
  "register GPIOC_PTOR   at 0x400FF08C : UInt32 // Port Toggle Output Register\n"
  "register GPIOC_PDIR   at 0x400FF090 : UInt32 // Port Data Input Register\n"
  "register GPIOC_PDDR   at 0x400FF094 : UInt32 // Port Data Direction Register\n"
  "register GPIOD_PDOR   at 0x400FF0C0 : UInt32 // Port Data Output Register\n"
  "register GPIOD_PSOR   at 0x400FF0C4 : UInt32 // Port Set Output Register\n"
  "register GPIOD_PCOR   at 0x400FF0C8 : UInt32 // Port Clear Output Register\n"
  "register GPIOD_PTOR   at 0x400FF0CC : UInt32 // Port Toggle Output Register\n"
  "register GPIOD_PDIR   at 0x400FF0D0 : UInt32 // Port Data Input Register\n"
  "register GPIOD_PDDR   at 0x400FF0D4 : UInt32 // Port Data Direction Register\n"
  "register GPIOE_PDOR   at 0x400FF100 : UInt32 // Port Data Output Register\n"
  "register GPIOE_PSOR   at 0x400FF104 : UInt32 // Port Set Output Register\n"
  "register GPIOE_PCOR   at 0x400FF108 : UInt32 // Port Clear Output Register\n"
  "register GPIOE_PTOR   at 0x400FF10C : UInt32 // Port Toggle Output Register\n"
  "register GPIOE_PDIR   at 0x400FF110 : UInt32 // Port Data Input Register\n"
  "register GPIOE_PDDR   at 0x400FF114 : UInt32 // Port Data Direction Register\n"
  "//\n"
  "//// Chapter 48: Touch sense input (TSI)\n"
  "//register TSI0_GENCS   0x40045000 // General Control and Status Register\n"
  "//register TSI_GENCS_LPCLKS   0x10000000  // \n"
  "//register TSI_GENCS_LPSCNITV(n)  (((n) & 15) << 24)  // \n"
  "//register TSI_GENCS_NSCN(n)  (((n) & 31) << 19)  // \n"
  "//register TSI_GENCS_PS(n)   (((n) & 7) << 16)  // \n"
  "//register TSI_GENCS_EOSF    0x00008000  // \n"
  "//register TSI_GENCS_OUTRGF   0x00004000  // \n"
  "//register TSI_GENCS_EXTERF   0x00002000  // \n"
  "//register TSI_GENCS_OVRF    0x00001000  // \n"
  "//register TSI_GENCS_SCNIP    0x00000200  // \n"
  "//register TSI_GENCS_SWTS    0x00000100  // \n"
  "//register TSI_GENCS_TSIEN    0x00000080  // \n"
  "//register TSI_GENCS_TSIIE    0x00000040  // \n"
  "//register TSI_GENCS_ERIE    0x00000020  // \n"
  "//register TSI_GENCS_ESOR    0x00000010  // \n"
  "//register TSI_GENCS_STM    0x00000002  // \n"
  "//register TSI_GENCS_STPE    0x00000001  // \n"
  "//register TSI0_SCANC   0x40045004 // SCAN Control Register\n"
  "//register TSI_SCANC_REFCHRG(n)  (((n) & 15) << 24)  // \n"
  "//register TSI_SCANC_EXTCHRG(n)  (((n) & 7) << 16)  // \n"
  "//register TSI_SCANC_SMOD(n)  (((n) & 255) << 8)  // \n"
  "//register TSI_SCANC_AMCLKS(n)  (((n) & 3) << 3)  // \n"
  "//register TSI_SCANC_AMPSC(n)  (((n) & 7) << 0)  // \n"
  "//register TSI0_PEN   0x40045008 // Pin Enable Register\n"
  "//register TSI0_WUCNTR   0x4004500C // Wake-Up Channel Counter Register\n"
  "//register TSI0_CNTR1   0x40045100 // Counter Register\n"
  "//register TSI0_CNTR3   0x40045104 // Counter Register\n"
  "//register TSI0_CNTR5   0x40045108 // Counter Register\n"
  "//register TSI0_CNTR7   0x4004510C // Counter Register\n"
  "//register TSI0_CNTR9   0x40045110 // Counter Register\n"
  "//register TSI0_CNTR11   0x40045114 // Counter Register\n"
  "//register TSI0_CNTR13   0x40045118 // Counter Register\n"
  "//register TSI0_CNTR15   0x4004511C // Counter Register\n"
  "//register TSI0_THRESHOLD   0x40045120 // Low Power Channel Threshold Register\n"
  "//\n"
  "//// Nested Vectored Interrupt Controller, Table 3-4 & ARMv7 ref, appendix B3.4 (page 750)\n"
  "//register NVIC_ENABLE_IRQ(n) (*((volatile uint32_t *)0xE000E100 + (n >> 5)) = (1 << (n & 31)))\n"
  "//register NVIC_DISABLE_IRQ(n) (*((volatile uint32_t *)0xE000E180 + (n >> 5)) = (1 << (n & 31)))\n"
  "//register NVIC_SET_PENDING(n) (*((volatile uint32_t *)0xE000E200 + (n >> 5)) = (1 << (n & 31)))\n"
  "//register NVIC_CLEAR_PENDING(n) (*((volatile uint32_t *)0xE000E280 + (n >> 5)) = (1 << (n & 31)))\n"
  "//\n"
  "//register NVIC_ISER0   0xE000E100\n"
  "//register NVIC_ISER1   0xE000E104\n"
  "//register NVIC_ICER0   0xE000E180\n"
  "//register NVIC_ICER1   0xE000E184\n"
  "//\n"
  "//// 0 = highest priority\n"
  "//// Cortex-M4: 0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240\n"
  "//// Cortex-M0: 0,64,128,192\n"
  "//register NVIC_SET_PRIORITY(irqnum, priority)  (*((volatile uint8_t *)0xE000E400 + (irqnum)) = (uint8_t)(priority))\n"
  "//register NVIC_GET_PRIORITY(irqnum) (*((uint8_t *)0xE000E400 + (irqnum)))\n"
  "//\n"
  "//register IRQ_DMA_CH0  0\n"
  "//register IRQ_DMA_CH1  1\n"
  "//register IRQ_DMA_CH2  2\n"
  "//register IRQ_DMA_CH3  3\n"
  "//register IRQ_DMA_CH4  4\n"
  "//register IRQ_DMA_CH5  5\n"
  "//register IRQ_DMA_CH6  6\n"
  "//register IRQ_DMA_CH7  7\n"
  "//register IRQ_DMA_CH8  8\n"
  "//register IRQ_DMA_CH9  9\n"
  "//register IRQ_DMA_CH10  10\n"
  "//register IRQ_DMA_CH11  11\n"
  "//register IRQ_DMA_CH12  12\n"
  "//register IRQ_DMA_CH13  13\n"
  "//register IRQ_DMA_CH14  14\n"
  "//register IRQ_DMA_CH15  15\n"
  "//register IRQ_DMA_ERROR  16\n"
  "//register IRQ_FTFL_COMPLETE 18\n"
  "//register IRQ_FTFL_COLLISION 19\n"
  "//register IRQ_LOW_VOLTAGE  20\n"
  "//register IRQ_LLWU  21\n"
  "//register IRQ_WDOG  22\n"
  "//register IRQ_I2C0  24\n"
  "//register IRQ_I2C1  25\n"
  "//register IRQ_SPI0  26\n"
  "//register IRQ_SPI1  27\n"
  "//register IRQ_CAN_MESSAGE  29\n"
  "//register IRQ_CAN_BUS_OFF  30\n"
  "//register IRQ_CAN_ERROR  31\n"
  "//register IRQ_CAN_TX_WARN  32\n"
  "//register IRQ_CAN_RX_WARN  33\n"
  "//register IRQ_CAN_WAKEUP  34\n"
  "//register IRQ_I2S0_TX  35\n"
  "//register IRQ_I2S0_RX  36\n"
  "//register IRQ_UART0_LON  44\n"
  "//register IRQ_UART0_STATUS 45\n"
  "//register IRQ_UART0_ERROR  46\n"
  "//register IRQ_UART1_STATUS 47\n"
  "//register IRQ_UART1_ERROR  48\n"
  "//register IRQ_UART2_STATUS 49\n"
  "//register IRQ_UART2_ERROR  50\n"
  "//register IRQ_ADC0  57\n"
  "//register IRQ_ADC1  58\n"
  "//register IRQ_CMP0  59\n"
  "//register IRQ_CMP1  60\n"
  "//register IRQ_CMP2  61\n"
  "//register IRQ_FTM0  62\n"
  "//register IRQ_FTM1  63\n"
  "//register IRQ_FTM2  64\n"
  "//register IRQ_CMT   65\n"
  "//register IRQ_RTC_ALARM  66\n"
  "//register IRQ_RTC_SECOND  67\n"
  "//register IRQ_PIT_CH0  68\n"
  "//register IRQ_PIT_CH1  69\n"
  "//register IRQ_PIT_CH2  70\n"
  "//register IRQ_PIT_CH3  71\n"
  "//register IRQ_PDB   72\n"
  "//register IRQ_USBOTG  73\n"
  "//register IRQ_USBDCD  74\n"
  "//register IRQ_DAC0  81\n"
  "//register IRQ_TSI   83\n"
  "//register IRQ_MCG   84\n"
  "//register IRQ_LPTMR  85\n"
  "//register IRQ_PORTA  87\n"
  "//register IRQ_PORTB  88\n"
  "//register IRQ_PORTC  89\n"
  "//register IRQ_PORTD  90\n"
  "//register IRQ_PORTE  91\n"
  "//register IRQ_SOFTWARE  94\n"
  "//register NVIC_NUM_INTERRUPTS 95\n"
  "//\n"
  "\n"
  "//System Control Space (SCS), ARMv7 ref manual, B3.2, page 708\n"
  "//register SCB_CPUID  *(const    uint32_t *)0xE000ED00 // CPUID Base Register\n"
  "\n"
  "register ICSR at 0xE000_ED04 : UInt32 { // Interrupt Control and State\n"
  "  NMIPENDSET, 2, PENDSVSET, PENDSVCLR, PENDSTSET, PENDSTCLR, 1, ISRPREEMPT,\n"
  "  ISRPENDING, 1, VECTPENDING[9], RETTOBASE, 2, VECTACTIVE[9]\n"
  "}\n"
  "\n"
  "register VTOR at 0xE000ED08 : UInt32 // Vector Table Offset\n"
  "\n"
  "register AIRCR at 0xE000ED0C : UInt32 { // Application Interrupt and Reset Control\n"
  "  VECTKEY[16], ENDIANNESS, 4, PRIGROUP[3],\n"
  "  5, SYSRESETREQ, VECTCLRACTIVE, VECTRESET \n"
  "}\n"
  "\n"
  "//register SCB_SCR    0xE000ED10 // System Control Register\n"
  "//register SCB_CCR    0xE000ED14 // Configuration and Control\n"
  "//register SCB_SHPR1   0xE000ED18 // System Handler Priority Register 1\n"
  "//register SCB_SHPR2   0xE000ED1C // System Handler Priority Register 2\n"
  "//register SCB_SHPR3   0xE000ED20 // System Handler Priority Register 3\n"
  "//register SCB_SHCSR   0xE000ED24 // System Handler Control and State\n"
  "//register SCB_CFSR   0xE000ED28 // Configurable Fault Status Register\n"
  "//register SCB_HFSR   0xE000ED2C // HardFault Status\n"
  "//register SCB_DFSR   0xE000ED30 // Debug Fault Status\n"
  "//register SCB_MMFAR   0xE000ED34 // MemManage Fault Address\n"
  "\n"
  "register SYST_CSR at 0xE000_E010 : UInt32 { // SysTick Control and Status\n"
  "  15, \n"
  "  COUNTFLAG,\n"
  "  13,\n"
  "  CLKSOURCE,\n"
  "  TICKINT,\n"
  "  ENABLE\n"
  "}\n"
  "\n"
  "register SYST_RVR   at 0xE000_E014 : UInt32 // SysTick Reload Value Register\n"
  "\n"
  "register SYST_CVR   at 0xE000_E018 : UInt32 // SysTick Current Value Register\n"
  "\n"
  "register SYST_CALIB  @ro at 0xE000_E01C : UInt32 // SysTick Calibration Value\n"
  "\n"
  "\n"
  "//register ARM_DEMCR   0xE000EDFC // Debug Exception and Monitor Control\n"
  "//register ARM_DEMCR_TRCENA  (1 << 24)  // Enable debugging & monitoring blocks\n"
  "//register ARM_DWT_CTRL   0xE0001000 // DWT control register\n"
  "//register ARM_DWT_CTRL_CYCCNTENA  (1 << 0)  // Enable cycle count\n"
  "//register ARM_DWT_CYCCNT   0xE0001004 // Cycle count register\n" ;

const cRegularFileWrapper gWrapperFile_7_targetTemplates (
  "mk20dx256.plm",
  "plm",
  true, // Text file
  135418, // Text length
  gWrapperFileContent_7_targetTemplates
) ;

//--- All files of 'files' directory

static const cRegularFileWrapper * gWrapperAllFiles_targetTemplates_1 [6] = {
  & gWrapperFile_3_targetTemplates,
  & gWrapperFile_4_targetTemplates,
  & gWrapperFile_5_targetTemplates,
  & gWrapperFile_6_targetTemplates,
  & gWrapperFile_7_targetTemplates,
  NULL
} ;

//--- All sub-directories of 'files' directory

static const cDirectoryWrapper * gWrapperAllDirectories_targetTemplates_1 [1] = {
  NULL
} ;

//--- Directory 'files'

const cDirectoryWrapper gWrapperDirectory_1_targetTemplates (
  "files",
  5,
  gWrapperAllFiles_targetTemplates_1,
  0,
  gWrapperAllDirectories_targetTemplates_1
) ;

//--- File 'teensy-3-1-interrupt/build-as.py'

const char * gWrapperFileContent_8_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"as\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_8_targetTemplates (
  "build-as.py",
  "py",
  true, // Text file
  996, // Text length
  gWrapperFileContent_8_targetTemplates
) ;

//--- File 'teensy-3-1-interrupt/build-verbose.py'

const char * gWrapperFileContent_9_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"all\", \"1\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_9_targetTemplates (
  "build-verbose.py",
  "py",
  true, // Text file
  1002, // Text length
  gWrapperFileContent_9_targetTemplates
) ;

//--- File 'teensy-3-1-interrupt/build.py'

const char * gWrapperFileContent_10_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess, sys, os, copy\n"
  "import urllib, shutil\n"
  "import subprocess, re\n"
  "from time import time\n"
  "import platform\n"
  "import json\n"
  "import threading, operator\n"
  "\n"
  "if sys.version_info >= (2, 6) :\n"
  "  import multiprocessing\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   processorCount                                                                                                     *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def processorCount () :\n"
  "  if sys.version_info >= (2, 6) :\n"
  "    coreCount = multiprocessing.cpu_count ()\n"
  "  else:\n"
  "    coreCount = 1\n"
  "  return coreCount\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   FOR PRINTING IN COLOR                                                                                              *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BLACK () :\n"
  "  return '\\033[90m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def RED () :\n"
  "  return '\\033[91m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def GREEN () :\n"
  "  return '\\033[92m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def YELLOW () :\n"
  "  return '\\033[93m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BLUE () :\n"
  "  return '\\033[94m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def MAGENTA () :\n"
  "  return '\\033[95m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def CYAN () :\n"
  "  return '\\033[96m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def WHITE () :\n"
  "  return '\\033[97m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def ENDC () :\n"
  "  return '\\033[0m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD () :\n"
  "  return '\\033[1m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def UNDERLINE () :\n"
  "  return '\\033[4m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BLINK () :\n"
  "  return '\\033[5m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_BLUE () :\n"
  "  return BOLD () + BLUE ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_GREEN () :\n"
  "  return BOLD () + GREEN ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_RED () :\n"
  "  return BOLD () + RED ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runHiddenCommand                                                                                                   *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runHiddenCommand (cmd) :\n"
  "  result = \"\"\n"
  "  childProcess = subprocess.Popen (cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n"
  "  while True:\n"
  "    line = childProcess.stdout.readline ()\n"
  "    if line != \"\":\n"
  "      result += line\n"
  "    else:\n"
  "      childProcess.wait ()\n"
  "      if childProcess.returncode != 0 :\n"
  "        sys.exit (childProcess.returncode)\n"
  "      return result\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runSingleCommand                                                                                                   *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runSingleCommand (cmd) :\n"
  "  cmdAsString = \"\"\n"
  "  for s in cmd:\n"
  "    if (s == \"\") or (s.find (\" \") >= 0):\n"
  "      cmdAsString += '\"' + s + '\" '\n"
  "    else:\n"
  "      cmdAsString += s + ' '\n"
  "  print cmdAsString\n"
  "  childProcess = subprocess.Popen (cmd)\n"
  "  childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    sys.exit (childProcess.returncode)\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runCommand                                                                                                         *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runCommand (cmd, title, showCommand) :\n"
  "  if title != \"\":\n"
  "    print BOLD_BLUE () + title + ENDC ()\n"
  "  if (title == \"\") or showCommand :\n"
  "    cmdAsString = \"\"\n"
  "    for s in cmd:\n"
  "      if (s == \"\") or (s.find (\" \") >= 0):\n"
  "        cmdAsString += '\"' + s + '\" '\n"
  "      else:\n"
  "        cmdAsString += s + ' '\n"
  "    print cmdAsString\n"
  "  childProcess = subprocess.Popen (cmd)\n"
  "  childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    sys.exit (childProcess.returncode)\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runInThread                                                                                                        *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runInThread (job, displayLock, terminationSemaphore):\n"
  "  childProcess = subprocess.Popen (job.mCommand, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n"
  "  while True:\n"
  "    line = childProcess.stdout.readline ()\n"
  "    if line != \"\":\n"
  "      displayLock.acquire ()\n"
  "      sys.stdout.write (line) # Print without newline\n"
  "      displayLock.release ()\n"
  "    else:\n"
  "      childProcess.wait ()\n"
  "      job.mReturnCode = childProcess.returncode\n"
  "      terminationSemaphore.release ()\n"
  "      break\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   modificationDateForFile                                                                                            *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def modificationDateForFile (dateCacheDictionary, file):\n"
  "  absFilePath = os.path.abspath (file)\n"
  "  if dateCacheDictionary.has_key (absFilePath) :\n"
  "    return dateCacheDictionary [absFilePath]\n"
  "  elif not os.path.exists (absFilePath):\n"
  "    date = sys.float_info.max # Very far in future\n"
  "    dateCacheDictionary [absFilePath] = date\n"
  "    return date\n"
  "  else:\n"
  "    date = os.path.getmtime (absFilePath)\n"
  "    dateCacheDictionary [absFilePath] = date\n"
  "    return date\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class PostCommand                                                                                                  *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class PostCommand:\n"
  "  mCommand = []\n"
  "  mTitle = \"\"\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, title = \"\"):\n"
  "    self.mCommand = []\n"
  "    self.mTitle = title\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class Job                                                                                                          *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class Job:\n"
  "  mTarget = \"\"\n"
  "  mCommand = []\n"
  "  mTitle = \"\"\n"
  "  mRequiredFiles = []\n"
  "  mPostCommands = []\n"
  "  mReturnCode = None\n"
  "  mPriority = 0\n"
  "  mState = 0 # 0: waiting for execution\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, target, requiredFiles, command, postCommands, priority, title):\n"
  "    self.mTarget = copy.deepcopy (target)\n"
  "    self.mCommand = copy.deepcopy (command)\n"
  "    self.mRequiredFiles = copy.deepcopy (requiredFiles)\n"
  "    self.mTitle = copy.deepcopy (title)\n"
  "    self.mPostCommands = copy.deepcopy (postCommands)\n"
  "    self.mPriority = priority\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def run (self, displayLock, terminationSemaphore, showCommand):\n"
  "    displayLock.acquire ()\n"
  "    if self.mTitle != \"\":\n"
  "      print BOLD_BLUE () + self.mTitle + ENDC ()\n"
  "    if (self.mTitle == \"\") or showCommand :\n"
  "      cmdAsString = \"\"\n"
  "      for s in self.mCommand:\n"
  "        if (s == \"\") or (s.find (\" \") >= 0):\n"
  "          cmdAsString += '\"' + s + '\" '\n"
  "        else:\n"
  "          cmdAsString += s + ' '\n"
  "      print cmdAsString\n"
  "    displayLock.release ()\n"
  "    thread = threading.Thread (target=runInThread, args=(self, displayLock, terminationSemaphore))\n"
  "    thread.start()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def runPostCommand (self, displayLock, terminationSemaphore, showCommand):\n"
  "    postCommand = self.mPostCommands [0]\n"
  "    self.mCommand = postCommand.mCommand\n"
  "    displayLock.acquire ()\n"
  "    print BOLD_BLUE () + postCommand.mTitle + ENDC ()\n"
  "    if showCommand:\n"
  "      cmdAsString = \"\"\n"
  "      for s in self.mCommand:\n"
  "        if (s == \"\") or (s.find (\" \") >= 0):\n"
  "          cmdAsString += '\"' + s + '\" '\n"
  "        else:\n"
  "          cmdAsString += s + ' '\n"
  "      print cmdAsString\n"
  "    displayLock.release ()\n"
  "    thread = threading.Thread (target=runInThread, args=(self, displayLock, terminationSemaphore))\n"
  "    thread.start()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class Rule                                                                                                         *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class Rule:\n"
  "  mTarget = \"\"\n"
  "  mDependences = []\n"
  "  mCommand = []\n"
  "  mSecondaryMostRecentModificationDate = 0.0 # Far in the past\n"
  "  mTitle = \"\"\n"
  "  mPostCommands = []\n"
  "  mPriority = 0\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, target, title = \"\"):\n"
  "    self.mTarget = copy.deepcopy (target)\n"
  "    self.mDependences = []\n"
  "    self.mCommand = []\n"
  "    self.mSecondaryMostRecentModificationDate = 0.0\n"
  "    self.mPostCommands = []\n"
  "    self.mPriority = 0\n"
  "    if title == \"\":\n"
  "      self.mTitle = \"Building \" + target\n"
  "    else:\n"
  "      self.mTitle = copy.deepcopy (title)\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def enterSecondaryDependanceFile (self, secondaryDependanceFile):\n"
  "    if secondaryDependanceFile != \"\":\n"
  "      filePath = os.path.abspath (secondaryDependanceFile)\n"
  "      if os.path.exists (filePath):\n"
  "        f = open (filePath, \"r\")\n"
  "        s = f.read ().replace (\"\\\\ \", \"\\x01\") # Read and replace escaped spaces by \\0x01\n"
  "        f.close ()\n"
  "        s = s.replace (\"\\\\\\n\", \"\")\n"
  "        liste = s.split (\"\\n\\n\")\n"
  "        dateCacheDictionary = {}\n"
  "        for s in liste:\n"
  "          components = s.split (':')\n"
  "          target = components [0].replace (\"\\x01\", \" \")\n"
  "          #print \"------- Optional dependency rules for target '\" + target + \"'\"\n"
  "          #print \"Secondary target '\" + target + \"'\"\n"
  "          for src in components [1].split ():\n"
  "            secondarySource = src.replace (\"\\x01\", \" \")\n"
  "            #print \"  '\" + secondarySource + \"'\"\n"
  "            modifDate = modificationDateForFile (dateCacheDictionary, secondarySource)\n"
  "            if self.mSecondaryMostRecentModificationDate < modifDate :\n"
  "              self.mSecondaryMostRecentModificationDate = modifDate\n"
  "              #print BOLD_BLUE () + str (modifDate) + ENDC ()\n"
  "    \n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class Make                                                                                                         *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class Make:\n"
  "  mRuleList = []\n"
  "  mJobList = []\n"
  "  mErrorCount = 0\n"
  "  mModificationDateDictionary = {}\n"
  "  mGoals = {}\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def addRule (self, rule):\n"
  "    self.mRuleList.append (copy.deepcopy (rule))\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printRules (self):\n"
  "    print BOLD_BLUE () + \"--- Print the \" + str (len (self.mRuleList)) + \" rule\" + (\"s\" if len (self.mRuleList) > 1 else \"\") + \" ---\" + ENDC ()\n"
  "    for rule in self.mRuleList:\n"
  "      print BOLD_GREEN () + \"Target: '\" + rule.mTarget + \"'\" + ENDC ()\n"
  "      for dep in rule.mDependences:\n"
  "        print \"  Dependence: '\" + dep + \"'\"\n"
  "      s = \"  Command: \"\n"
  "      for cmd in rule.mCommand:\n"
  "        s += \" \\\"\" + cmd + \"\\\"\"\n"
  "      print s\n"
  "      print \"  Title: '\" + rule.mTitle + \"'\"\n"
  "      index = 0\n"
  "      for (command, title) in rule.mPostCommands:\n"
  "        index = index + 1\n"
  "        s = \"  Post command \" + str (index) + \": \"\n"
  "        for cmd in command:\n"
  "          s += \" \\\"\" + cmd + \"\\\"\"\n"
  "        print s\n"
  "        print \"  Its title: '\" + title + \"'\"\n"
  "        \n"
  "    print BOLD_BLUE () + \"--- End of print rule ---\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def writeRuleDependancesInDotFile (self, dotFileName):\n"
  "    s = \"digraph G {\\n\"\n"
  "    s += \"  node [fontname=courier]\\n\"\n"
  "    arrowSet = set ()\n"
  "    for rule in self.mRuleList:\n"
  "      s += '  \"' + rule.mTarget + '\" [shape=rectangle]\\n'\n"
  "      for dep in rule.mDependences:\n"
  "        arrowSet.add ('  \"' + rule.mTarget + '\" -> \"' + dep + '\"\\n')\n"
  "    for arrow in arrowSet:\n"
  "      s += arrow\n"
  "    s += \"}\\n\"\n"
  "    f = open (dotFileName, \"w\")\n"
  "    f.write (s)\n"
  "    f.close ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def checkRules (self):\n"
  "    if self.mErrorCount == 0:\n"
  "      ruleList = copy.deepcopy (self.mRuleList)\n"
  "      index = 0\n"
  "      looping = True\n"
  "    #--- loop on rules\n"
  "      while looping:\n"
  "        looping = False\n"
  "        while index < len (ruleList):\n"
  "          aRule = ruleList [index]\n"
  "          index = index + 1\n"
  "        #--- Check dependance files have rule for building, or does exist\n"
  "          depIdx = 0\n"
  "          while depIdx < len (aRule.mDependences):\n"
  "            dep = aRule.mDependences [depIdx]\n"
  "            depIdx = depIdx + 1\n"
  "            hasBuildRule = False\n"
  "            for r in ruleList:\n"
  "              if dep == r.mTarget:\n"
  "                hasBuildRule = True\n"
  "                break\n"
  "            if not hasBuildRule:\n"
  "              looping = True\n"
  "              if not os.path.exists (os.path.abspath (dep)):\n"
  "                self.mErrorCount = self.mErrorCount + 1\n"
  "                print BOLD_RED () + \"Check rules error: '\" + dep + \"' does not exist, and there is no rule for building it.\" + ENDC ()\n"
  "              depIdx = depIdx - 1\n"
  "              aRule.mDependences.pop (depIdx)\n"
  "        #--- Rule with no dependances\n"
  "          if len (aRule.mDependences) == 0 :\n"
  "            looping = True\n"
  "            index = index - 1\n"
  "            ruleList.pop (index)\n"
  "            idx = 0\n"
  "            while idx < len (ruleList):\n"
  "              r = ruleList [idx]\n"
  "              idx = idx + 1\n"
  "              while r.mDependences.count (aRule.mTarget) > 0 :\n"
  "                r.mDependences.remove (aRule.mTarget)\n"
  "    #--- Error if rules remain\n"
  "      if len (ruleList) > 0:\n"
  "        self.mErrorCount = self.mErrorCount + 1\n"
  "        print BOLD_RED () + \"Check rules error; circulary dependances between:\" + ENDC ()\n"
  "        for aRule in ruleList: \n"
  "          print BOLD_RED () + \"  - '\" + aRule.mTarget + \"', depends from:\" + ENDC ()\n"
  "          for dep in aRule.mDependences:\n"
  "            print BOLD_RED () + \"      '\" + dep + \"'\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def existsJobForTarget (self, target):\n"
  "    for job in self.mJobList:\n"
  "      if job.mTarget == target:\n"
  "        return True\n"
  "    return False\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def makeJob (self, target): # Return a bool indicating wheither the target should be built\n"
  "  #--- If there are errors, return immediatly\n"
  "    if self.mErrorCount != 0:\n"
  "      return False\n"
  "  #--- Target already in job list \?\n"
  "    if self.existsJobForTarget (target):\n"
  "      return True # yes, return target will be built\n"
  "  #--- Find a rule for making the target\n"
  "    absTarget = os.path.abspath (target)\n"
  "    rule = None\n"
  "    matchCount = 0\n"
  "    for r in self.mRuleList:\n"
  "      if target == r.mTarget:\n"
  "        matchCount = matchCount + 1\n"
  "        rule = r\n"
  "    if matchCount == 0:\n"
  "      absTarget = os.path.abspath (target)\n"
  "      if not os.path.exists (absTarget):\n"
  "        print BOLD_RED () + \"No rule for making '\" + target + \"'\" + ENDC ()\n"
  "        self.mErrorCount = self.mErrorCount + 1\n"
  "      return False # Error or target exists, and no rule for building it\n"
  "    elif matchCount > 1:\n"
  "      print BOLD_RED () + str (matchCount) + \" rules for making '\" + target + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "      return False # Error\n"
  "  #--- Target file does not exist, and 'rule' variable indicates how build it\n"
  "    appendToJobList = not os.path.exists (absTarget)\n"
  "  #--- Build primary dependences\n"
  "    jobDependenceFiles = []\n"
  "    for dependence in rule.mDependences:\n"
  "      willBeBuilt = self.makeJob (dependence)\n"
  "      if willBeBuilt:\n"
  "        jobDependenceFiles.append (dependence)\n"
  "        appendToJobList = True\n"
  "  #--- Check primary file modification dates\n"
  "    if not appendToJobList:\n"
  "      targetDateModification = os.path.getmtime (absTarget)\n"
  "      for source in rule.mDependences:\n"
  "        sourceDateModification = os.path.getmtime (source)\n"
  "        if targetDateModification < sourceDateModification:\n"
  "          appendToJobList = True\n"
  "          break\n"
  "  #--- Check for secondary dependancy files\n"
  "    if not appendToJobList:\n"
  "      targetDateModification = os.path.getmtime (absTarget)\n"
  "      if targetDateModification < rule.mSecondaryMostRecentModificationDate:\n"
  "        appendToJobList = True\n"
  "  #--- Append to job list\n"
  "    if appendToJobList:\n"
  "      self.mJobList.append (Job (target, jobDependenceFiles, rule.mCommand, rule.mPostCommands, rule.mPriority, rule.mTitle))\n"
  "  #--- Return\n"
  "    return appendToJobList\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "  #Job state\n"
  "  # 0: waiting\n"
  "  # 1:running\n"
  "  # 2: waiting for executing post command\n"
  "  # 3:executing for executing post command\n"
  "  # 4: completed\n"
  "\n"
  "  def runJobs (self, maxConcurrentJobs, showCommand):\n"
  "    if self.mErrorCount == 0:\n"
  "      if len (self.mJobList) == 0:\n"
  "        print BOLD_BLUE () + \"Nothing to make.\" + ENDC ()\n"
  "      else:\n"
  "      #--- Sort jobs following their priorities\n"
  "        self.mJobList = sorted (self.mJobList, key=operator.attrgetter(\"mPriority\"), reverse=True)\n"
  "      #--- Run\n"
  "        if maxConcurrentJobs <= 0:\n"
  "          maxConcurrentJobs = processorCount () - maxConcurrentJobs\n"
  "        jobCount = 0 ;\n"
  "        terminationSemaphore = threading.Semaphore (0)\n"
  "        displayLock = threading.Lock ()\n"
  "        loop = True\n"
  "        returnCode = 0\n"
  "        while loop:\n"
  "        #--- Launch jobs in parallel\n"
  "          for job in self.mJobList:\n"
  "            if (returnCode == 0) and (jobCount < maxConcurrentJobs):\n"
  "              if (job.mState == 0) and (len (job.mRequiredFiles) == 0):\n"
  "                #--- Create target directory if does not exist\n"
  "                absTargetDirectory = os.path.dirname (os.path.abspath (job.mTarget))\n"
  "                if not os.path.exists (absTargetDirectory):\n"
  "                  displayLock.acquire ()\n"
  "                  runCommand ([\"mkdir\", \"-p\", absTargetDirectory], \"Making \" + absTargetDirectory + \" directory\", showCommand)\n"
  "                  displayLock.release ()\n"
  "                #--- Run job\n"
  "                job.run (displayLock, terminationSemaphore, showCommand)\n"
  "                jobCount = jobCount + 1\n"
  "                job.mState = 1 # Means is running\n"
  "              elif job.mState == 2: # Waiting for executing post command\n"
  "                job.mReturnCode = None # Means post command not terminated\n"
  "                job.runPostCommand (displayLock, terminationSemaphore, showCommand)\n"
  "                jobCount = jobCount + 1\n"
  "                job.mState = 3 # Means post command is running\n"
  "        #--- Wait for a job termination\n"
  "          #print \"wait \" + str (jobCount) + \" \" + str (len (self.mJobList))\n"
  "          terminationSemaphore.acquire ()\n"
  "        #--- Checks for terminated jobs\n"
  "          index = 0\n"
  "          while index < len (self.mJobList):\n"
  "            job = self.mJobList [index]\n"
  "            index = index + 1\n"
  "            if (job.mState == 1) and (job.mReturnCode == 0) : # Terminated without error\n"
  "              jobCount = jobCount - 1\n"
  "              if len (job.mPostCommands) > 0:\n"
  "                job.mState = 2 # Ready to execute next post command\n"
  "              else:\n"
  "                job.mState = 4 # Completed\n"
  "                index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 1) and (job.mReturnCode > 0) : # terminated with error : exit\n"
  "              jobCount = jobCount - 1\n"
  "              job.mState = 4 # Means Terminated\n"
  "              index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 3) and (job.mReturnCode == 0): # post command is terminated without error\n"
  "              jobCount = jobCount - 1\n"
  "              job.mPostCommands.pop (0) # Remove completed post command\n"
  "              if len (job.mPostCommands) > 0:\n"
  "                job.mState = 2 # Ready to execute next post command\n"
  "              else:\n"
  "                job.mState = 4 # Completed\n"
  "                index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 3) and (job.mReturnCode > 0): # post command is terminated with error\n"
  "              jobCount = jobCount - 1\n"
  "              job.mState = 4 # Completed\n"
  "              index = index - 1 # For removing job from list\n"
  "            elif job.mState == 4: # Completed: delete job\n"
  "              index = index - 1\n"
  "              self.mJobList.pop (index) # Remove terminated job\n"
  "              #displayLock.acquire ()\n"
  "              #print \"Completed '\" + job.mTitle + \"'\"\n"
  "              #--- Remove dependences from this job\n"
  "              idx = 0\n"
  "              while idx < len (self.mJobList):\n"
  "                aJob = self.mJobList [idx]\n"
  "                idx = idx + 1\n"
  "                while aJob.mRequiredFiles.count (job.mTarget) > 0 :\n"
  "                  aJob.mRequiredFiles.remove (job.mTarget)\n"
  "                  #print \"  Removed from '\" + aJob.mTitle + \"': \" + str (len (aJob.mRequiredFiles))\n"
  "              #displayLock.release ()\n"
  "              #--- Signal error \?\n"
  "              if (job.mReturnCode > 0) and (returnCode == 0):\n"
  "                self.mErrorCount = self.mErrorCount + 1\n"
  "                print BOLD_RED () + \"Return code: \" + str (job.mReturnCode) + ENDC ()\n"
  "                if (returnCode == 0) and (jobCount > 0) :\n"
  "                  print \"Wait for job termination...\"\n"
  "                returnCode = job.mReturnCode\n"
  "          loop = (len (self.mJobList) > 0) if (returnCode == 0) else (jobCount > 0)\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def searchFileInDirectories (self, file, directoryList): # returns \"\" if not found, register error\n"
  "    matchCount = 0\n"
  "    result = \"\"\n"
  "    for sourceDir in directoryList:\n"
  "      sourcePath = sourceDir + \"/\" + file\n"
  "      if os.path.exists (os.path.abspath (sourcePath)):\n"
  "        matchCount = matchCount + 1\n"
  "        result = sourcePath\n"
  "    if matchCount == 0:\n"
  "      print BOLD_RED () + \"Cannot find '\" + file + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "    elif matchCount > 1:\n"
  "      print BOLD_RED () + str (matchCount) + \" source files for making '\" + file + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "      result = \"\"\n"
  "    return result\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def addGoal (self, goal, targetList, message):\n"
  "    self.mGoals [goal] = (targetList, message)\n"
  "    #print '%s' % ', '.join(map(str, self.mGoals))\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printGoals (self):\n"
  "    print BOLD_BLUE () + \"--- Print the \" + str (len (self.mGoals)) + \" goal\" + (\"s\" if len (self.mGoals) > 1 else \"\") + \" ---\" + ENDC ()\n"
  "    for goalKey in self.mGoals.keys ():\n"
  "      print BOLD_GREEN () + \"Goal: '\" + goalKey + \"'\" + ENDC ()\n"
  "      (targetList, message) = self.mGoals [goalKey]\n"
  "      for target in targetList:\n"
  "        print \"  Target: '\" + target + \"'\"\n"
  "      print \"  Message: '\" + message + \"'\"\n"
  "        \n"
  "    print BOLD_BLUE () + \"--- End of print goals ---\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def runGoal (self, goal, maxConcurrentJobs, showCommand):\n"
  "    if self.mGoals.has_key (goal) :\n"
  "      (targetList, message) = self.mGoals [goal]\n"
  "      for target in targetList:\n"
  "        self.makeJob (target)\n"
  "      self.runJobs (maxConcurrentJobs, showCommand)\n"
  "    else:\n"
  "      errorMessage = \"The '\" + goal + \"' goal is not defined; defined goals:\"\n"
  "      for key in self.mGoals:\n"
  "        (targetList, message) = self.mGoals [key]\n"
  "        errorMessage += \"\\n  '\" + key + \"': \" + message\n"
  "      print BOLD_RED () + errorMessage + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def enterError (self, message):\n"
  "    print BOLD_RED () + message + ENDC ()\n"
  "    self.mErrorCount = self.mErrorCount + 1\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printErrorCountAndExitOnError (self):\n"
  "    if self.mErrorCount == 1:\n"
  "      print BOLD_RED () + \"1 error.\" + ENDC ()\n"
  "      sys.exit (1)\n"
  "    elif self.mErrorCount > 1:\n"
  "      print BOLD_RED () + str (self.mErrorCount) + \" errors.\" + ENDC ()\n"
  "      sys.exit (1)\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printErrorCount (self):\n"
  "    if self.mErrorCount == 1:\n"
  "      print BOLD_RED () + \"1 error.\" + ENDC ()\n"
  "    elif self.mErrorCount > 1:\n"
  "      print BOLD_RED () + str (self.mErrorCount) + \" errors.\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def errorCount (self):\n"
  "    return self.mErrorCount\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Source files                                                                                                       *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def sourceList ():\n"
  "  return [\"plm.c\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Product directory                                                                                                  *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def productDir ():\n"
  "  return \"product\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#                         Object files directories                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def objectDir ():\n"
  "  return \"objects\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#                         Object files directories                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def asDir ():\n"
  "  return \"as\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Tool dir                                                                                                           *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def toolDir ():\n"
  "  (SYSTEM_NAME, MODE_NAME, RELEASE, VERSION, MACHINE) = os.uname ()\n"
  "  if SYSTEM_NAME == \"Darwin\":\n"
  "    MACHINE = \"i386\"\n"
  "  return os.path.expanduser (\"~/plm-tools/plm-\" + MACHINE + \"-\" + SYSTEM_NAME + \"-binutils-2.25-gcc-5.1.0-newlib-2.2.0-libusb-1.0.19\")\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Compiler invocation                                                                                                *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def compiler ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-gcc\", \"-mthumb\", \"-mcpu=cortex-m4\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Display object size invocation                                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def displayObjectSize ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-size\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Object Dump invocation                                                                                             *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def dumpObjectCode ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-objdump\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#    C Compiler options                                                                                                *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def cCompilerOptions ():\n"
  "  result = []\n"
  "  result.append (\"-Wall\")\n"
  "  result.append (\"-Werror\")\n"
  "  result.append (\"-Wreturn-type\")\n"
  "  result.append (\"-Wformat\")\n"
  "  result.append (\"-Wsign-compare\")\n"
  "  result.append (\"-Wpointer-arith\")\n"
  "  result.append (\"-Wparentheses\")\n"
  "  result.append (\"-Wcast-align\")\n"
  "  result.append (\"-Wcast-qual\")\n"
  "  result.append (\"-Wwrite-strings\")\n"
  "  result.append (\"-Wswitch\")\n"
  "  result.append (\"-Wuninitialized\")\n"
  "  result.append (\"-fno-builtin\")\n"
  "  result.append (\"-Wno-aggressive-loop-optimizations\")\n"
  "  result.append (\"-ffunction-sections\")\n"
  "  result.append (\"-fdata-sections\")\n"
  "  result.append (\"-std=c99\")\n"
  "  result.append (\"-Wstrict-prototypes\")\n"
  "  result.append (\"-Wbad-function-cast\")\n"
  "  result.append (\"-Wmissing-declarations\")\n"
  "  result.append (\"-Wimplicit-function-declaration\")\n"
  "  result.append (\"-Wno-int-to-pointer-cast\")\n"
  "  result.append (\"-Wno-pointer-to-int-cast\")\n"
  "  result.append (\"-Wmissing-prototypes\")\n"
  "  result.append (\"-Os\")\n"
  "  result.append (\"-fomit-frame-pointer\")\n"
  "  result.append (\"-foptimize-register-move\") \n"
  "  result.append (\"-I../build\")\n"
  "  return result\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Linker invocation                                                                                                  *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def linker ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-gcc\", \"-mthumb\", \"-mcpu=cortex-m4\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Linker options                                                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def linkerOptions ():\n"
  "  result = []\n"
  "  result.append (\"-nostartfiles\")\n"
  "  result.append (\"-Wl,--fatal-warnings\")\n"
  "  result.append (\"-Wl,--warn-common\")\n"
  "  result.append (\"-Wl,--no-undefined\")\n"
  "  result.append (\"-Wl,--cref\")\n"
  "  result.append (\"-lc\")\n"
  "  result.append (\"-lgcc\")\n"
  "  result.append (\"-Wl,-static\")\n"
  "  result.append (\"-Wl,-s\")\n"
  "  result.append (\"-Wl,--gc-sections\")\n"
  "  return result\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   objcopy invocation                                                                                                 *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def objcopy ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-objcopy\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Teensy loader                                                                                                      *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def teensyLoader ():\n"
  "  return toolDir () + \"/bin/teensy-loader-cli\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   ARCHIVE DOWNLOAD                                                                                                   *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def downloadReportHook (a,b,fileSize): \n"
  "  if fileSize < (1 << 10):\n"
  "    sizeString = str (fileSize)\n"
  "  else:\n"
  "    if fileSize < (1 << 20):\n"
  "      sizeString = str (fileSize >> 10) + \"Ki\"\n"
  "    else:\n"
  "      sizeString = str (fileSize >> 20) + \"Mi\"\n"
  "  # \",\" at the end of the line is important!\n"
  "  print \"% 3.1f%% of %sB\\r\" % (min(100.0, float(a * b) / fileSize * 100.0), sizeString),\n"
  "  sys.stdout.flush()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def downloadArchive (archiveURL, archivePath):\n"
  "  runSingleCommand ([\"rm\", \"-f\", archivePath + \".downloading\"])\n"
  "  runSingleCommand ([\"rm\", \"-f\", archivePath + \".tar.bz2\"])\n"
  "  runSingleCommand ([\"mkdir\", \"-p\", os.path.dirname (archivePath)])\n"
  "  print \"URL: \"+ archiveURL\n"
  "  print \"Downloading... \" + archivePath + \".downloading\"\n"
  "  urllib.urlretrieve (archiveURL,  archivePath + \".downloading\", downloadReportHook)\n"
  "  print \"\"\n"
  "  fileSize = os.path.getsize (archivePath + \".downloading\")\n"
  "  ok = fileSize > 1000000\n"
  "  if ok:\n"
  "    runSingleCommand ([\"mv\", archivePath + \".downloading\", archivePath + \".tar.bz2\"])\n"
  "  else:\n"
  "    print BOLD_RED () + \"Error: cannot download file\" + ENDC ()\n"
  "    sys.exit (1)\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   MAIN                                                                                                               *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Get max parallel jobs as first argument\n"
  "goal = \"all\"\n"
  "if len (sys.argv) > 1 :\n"
  "  goal = sys.argv [1]\n"
  "#--- Get max parallel jobs as first argument\n"
  "maxParallelJobs = 0 # 0 means use host processor count\n"
  "if len (sys.argv) > 2 :\n"
  "  maxParallelJobs = int (sys.argv [2])\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "#--- Download compiler tool if needed\n"
  "toolDirectory = toolDir ()\n"
  "if not os.path.exists (toolDirectory):\n"
  "  print BOLD_GREEN () + \"Downloading compiler tool chain\" + ENDC ()\n"
  "  archiveName = os.path.basename (toolDirectory)\n"
  "  archiveURL = \"http://crossgcc.rts-software.org/downloads/plm-tools/\" + archiveName + \".tar.bz2\"\n"
  "  downloadArchive (archiveURL, toolDirectory)\n"
  "  installDir = os.path.normpath (toolDirectory + \"/..\")\n"
  "  os.chdir (installDir)\n"
  "  runSingleCommand ([\"bunzip2\", \"-k\", archiveName + \".tar.bz2\"])\n"
  "  runSingleCommand ([\"rm\", archiveName + \".tar.bz2\"])\n"
  "  runSingleCommand ([\"tar\", \"xf\", archiveName + \".tar\"])\n"
  "  runSingleCommand ([\"rm\", archiveName + \".tar\"])\n"
  "#---\n"
  "os.chdir (scriptDir)\n"
  "#--- Build python makefile\n"
  "makefile = Make ()\n"
  "#--- Add C files compile rule\n"
  "objectList = []\n"
  "asObjectList = []\n"
  "for source in sourceList ():\n"
  "#--- Compile\n"
  "  object = objectDir () + \"/\" + source + \".o\"\n"
  "  rule = Rule (object, \"Compiling \" + source)\n"
  "  rule.mDependences.append (\"sources/\" + source)\n"
  "  rule.mCommand += compiler ()\n"
  "  rule.mCommand += cCompilerOptions ()\n"
  "  rule.mCommand += [\"-c\", \"sources/\" + source]\n"
  "  rule.mCommand += [\"-o\", object]\n"
  "  rule.enterSecondaryDependanceFile (object + \".dep\")\n"
  "  makefile.addRule (rule)\n"
  "  objectList.append (object)\n"
  "#--- Assembling\n"
  "  asObject = asDir () + \"/\" + source + \".s\"\n"
  "  rule = Rule (asObject, \"Assembling \" + source)\n"
  "  rule.mDependences.append (\"sources/\" + source)\n"
  "  rule.mCommand += compiler ()\n"
  "  rule.mCommand += cCompilerOptions ()\n"
  "  rule.mCommand += [\"-S\", \"sources/\" + source]\n"
  "  rule.mCommand += [\"-o\", asObject]\n"
  "  rule.enterSecondaryDependanceFile (asObject + \".dep\")\n"
  "  makefile.addRule (rule)\n"
  "  asObjectList.append (asObject)\n"
  "#--- Add linker rule\n"
  "productELF = productDir () + \"/product.elf\"\n"
  "rule = Rule (productELF, \"Linking \" + productELF)\n"
  "rule.mDependences += objectList\n"
  "rule.mCommand += linker ()\n"
  "rule.mCommand += linkerOptions ()\n"
  "rule.mCommand += objectList\n"
  "rule.mCommand += [\"-o\", productELF]\n"
  "rule.mCommand += [\"-Tsources/linker-script.ld\"]\n"
  "rule.mCommand += [\"-Wl,-Map=\" + productELF + \".map\"]\n"
  "makefile.addRule (rule)\n"
  "#--- Add objcopy rule\n"
  "productHEX = productDir () + \"/product.ihex\"\n"
  "rule = Rule (productHEX, \"Hexing \" + productHEX)\n"
  "rule.mDependences += [productELF]\n"
  "rule.mCommand += objcopy ()\n"
  "rule.mCommand += [\"-O\", \"ihex\"]\n"
  "rule.mCommand += [productELF]\n"
  "rule.mCommand += [productHEX]\n"
  "makefile.addRule (rule)\n"
  "#--- Add goals\n"
  "makefile.addGoal (\"run\", [productHEX], \"Building all and run\")\n"
  "makefile.addGoal (\"all\", [productHEX], \"Building all\")\n"
  "makefile.addGoal (\"as\", asObjectList, \"Assembling C files\")\n"
  "makefile.addGoal (\"display-object-size\", [productHEX], \"Display Object Size\")\n"
  "makefile.addGoal (\"object-dump\", [productHEX], \"Dump Object Code\")\n"
  "#--- Build\n"
  "#makefile.printRules ()\n"
  "makefile.runGoal (goal, maxParallelJobs, maxParallelJobs == 1)\n"
  "#--- Build Ok \?\n"
  "makefile.printErrorCountAndExitOnError ()\n"
  "#--- Run \?\n"
  "if goal == \"run\":\n"
  "  print BOLD_BLUE () + \"Loading Teensy...\" + ENDC ()\n"
  "  childProcess = subprocess.Popen ([teensyLoader (), \"-w\", \"-v\", \"-mmcu=mk20dx128\", productHEX])\n"
  "#--- Wait for subprocess termination\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    print BOLD_RED () + \"Error \" + str (childProcess.returncode) + ENDC ()\n"
  "    sys.exit (childProcess.returncode)\n"
  "  else:\n"
  "    print BOLD_GREEN () + \"Success\" + ENDC ()\n"
  "elif goal == \"display-object-size\":\n"
  "  print BOLD_BLUE () + \"Display Object Sizes\" + ENDC ()\n"
  "  childProcess = subprocess.Popen (displayObjectSize () + objectList + [\"-t\"])\n"
  "#--- Wait for subprocess termination\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    print BOLD_RED () + \"Error \" + str (childProcess.returncode) + ENDC ()\n"
  "    sys.exit (childProcess.returncode)\n"
  "  else:\n"
  "    print BOLD_GREEN () + \"Success\" + ENDC ()\n"
  "elif goal == \"object-dump\":\n"
  "  print BOLD_BLUE () + \"Dump Object Code\" + ENDC ()\n"
  "  childProcess = subprocess.Popen (dumpObjectCode () + [productELF, \"-Sdh\", \"-Mforce-thumb\"])\n"
  "#--- Wait for subprocess termination\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    print BOLD_RED () + \"Error \" + str (childProcess.returncode) + ENDC ()\n"
  "    sys.exit (childProcess.returncode)\n"
  "  else:\n"
  "    print BOLD_GREEN () + \"Success\" + ENDC ()\n" ;

const cRegularFileWrapper gWrapperFile_10_targetTemplates (
  "build.py",
  "py",
  true, // Text file
  44328, // Text length
  gWrapperFileContent_10_targetTemplates
) ;

//--- File 'teensy-3-1-interrupt/clean.py'

const char * gWrapperFileContent_11_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "#--- Directories to clean\n"
  "dir1 = scriptDir + \"/objects\"\n"
  "dir2 = scriptDir + \"/product\"\n"
  "dir3 = scriptDir + \"/as\"\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"rm\", \"-fr\", dir1, dir2, dir3], cwd=scriptDir)\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_11_targetTemplates (
  "clean.py",
  "py",
  true, // Text file
  1264, // Text length
  gWrapperFileContent_11_targetTemplates
) ;

//--- File 'teensy-3-1-interrupt/display-obj-dump.py'

const char * gWrapperFileContent_12_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"object-dump\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_12_targetTemplates (
  "display-obj-dump.py",
  "py",
  true, // Text file
  1005, // Text length
  gWrapperFileContent_12_targetTemplates
) ;

//--- File 'teensy-3-1-interrupt/display-obj-size.py'

const char * gWrapperFileContent_13_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"display-object-size\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_13_targetTemplates (
  "display-obj-size.py",
  "py",
  true, // Text file
  1013, // Text length
  gWrapperFileContent_13_targetTemplates
) ;

//--- File 'teensy-3-1-interrupt/flash-and-run.py'

const char * gWrapperFileContent_14_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"run\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_14_targetTemplates (
  "flash-and-run.py",
  "py",
  true, // Text file
  997, // Text length
  gWrapperFileContent_14_targetTemplates
) ;

//--- File 'sources/linker-script.ld'

const char * gWrapperFileContent_15_targetTemplates = "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                   Memory                                   */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "MEMORY {\n"
  "  flash (rx) : ORIGIN = 0, LENGTH = 256k \n"
  "  sram_u (rwx) : ORIGIN = 0x20000000, LENGTH = 32k \n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "__sram_u_end = 0x20000000 + 32k ;\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                ISR Vectors                                 */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .vectors : {\n"
  "    __vectors_start = . ;\n"
  "    KEEP (*(.isr_vector)) ;\n"
  "    __vectors_end = . ;\n"
  "  } > flash\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                    Code                                    */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .text : {\n"
  "    FILL(0xff)\n"
  "    __code_start = . ;\n"
  "  /*--- Tableau des routines d'initialisation */\n"
  "    . = ALIGN (4) ;\n"
  "    __init_routine_array_start = . ;\n"
  "    KEEP (*(init_routine_array)) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __init_routine_array_end = . ;\n"
  "  /*--- Initialisation des objets globaux C++ */\n"
  "    . = ALIGN (4) ;\n"
  "    __constructor_array_start = . ;\n"
  "    KEEP (*(.init_array)) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __constructor_array_end = . ;\n"
  "  /*--- Real Interrupt Service Routine Array */\n"
  "    . = ALIGN (4) ;\n"
  "    __real_time_isr_array_start = . ;\n"
  "    KEEP (*(real_time_isr_array)) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __real_time_isr_array_end = . ;\n"
  "  /*--- Code */\n"
  "    *(.text.*) ;\n"
  "    *(.text) ;\n"
  "    *(text) ;\n"
  "    *(.gnu.linkonce.t.*) ;\n"
  "  /*---- ROM data ----*/\n"
  "    . = ALIGN(4);\n"
  "    *(.rodata);\n"
  "    . = ALIGN(4);\n"
  "    *(.rodata*);\n"
  "    . = ALIGN(4);\n"
  "    *(.gnu.linkonce.r.*);\n"
  "    . = ALIGN(4);\n"
  "    *(.glue_7t);\n"
  "    . = ALIGN(4);\n"
  "    *(.glue_7);\n"
  "    . = ALIGN(4);\n"
  "  } > flash\n"
  "\n"
  "  .ARM.exidx : {\n"
  "    *(.ARM.exidx* .gnu.linkonce.armexidx.*);\n"
  "    __code_end = . ;\n"
  "  } > flash\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                          Data (initialized data)                           */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .data : {\n"
  "    FILL (0xFF)\n"
  "    . = ALIGN (4) ;\n"
  "    __data_start = . ;\n"
  "    * (.data.*init*) ;\n"
  "    * (.data*) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __data_end = . ;\n"
  "  } > sram_u AT > flash\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "__data_load_start = LOADADDR (.data) ;\n"
  "__data_load_end   = LOADADDR (.data) + SIZEOF (.data) ;\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                          BSS (uninitialized data)                          */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .bss : {\n"
  "    . = ALIGN(4);\n"
  "    __bss_start = . ;\n"
  "    * (.bss.*) ;\n"
  "    * (.bss) ;\n"
  "    * (COMMON) ;\n"
  "    . = ALIGN(4);\n"
  "    __bss_end = . ;\n"
  "  } > sram_u\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                System stack                                */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .system_stack :{\n"
  "    . = ALIGN (4) ;\n"
  "    __system_stack_start = . ;\n"
  "    . += 1k ;\n"
  "    . = ALIGN (4) ;\n"
  "    __system_stack_end = . ;\n"
  "  } > sram_u\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                    Heap                                    */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .heap : {\n"
  "    . = ALIGN (4) ;\n"
  "    __heap_start = . ;\n"
  "  } > sram_u\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "__heap_end = __sram_u_end ;\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n" ;

const cRegularFileWrapper gWrapperFile_15_targetTemplates (
  "linker-script.ld",
  "ld",
  true, // Text file
  5218, // Text length
  gWrapperFileContent_15_targetTemplates
) ;

//--- File 'sources/target-exception.c'

const char * gWrapperFileContent_16_targetTemplates = "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "static void raise_exception (const type_Int32 inCode,\n"
  "                             const char * inSourceFile,\n"
  "                             const type_UInt32 inSourceLine) {\n"
  " //--- Mask interrupt: write 1 into FAULTMASK register\n"
  "  const uint32_t maskValue = 1 ;\n"
  "  __asm__ (\"msr FAULTMASK, %[reg]\" : : [reg]\"r\"(maskValue));\n"
  "  raise_exception_internal (inCode, inSourceFile, inSourceLine) ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_16_targetTemplates (
  "target-exception.c",
  "c",
  true, // Text file
  634, // Text length
  gWrapperFileContent_16_targetTemplates
) ;

//--- File 'sources/target.c'

const char * gWrapperFileContent_17_targetTemplates = "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "static void ResetISR (void) {\n"
  "//---------1- Boot routines\n"
  "  boot () ;\n"
  "  // now we're in PEE mode\n"
  "  // configure USB for 48 MHz clock\n"
  "//  SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1); // USB = 96 MHz PLL / 2\n"
  "  // USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0\n"
  "//  SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);\n"
  "\n"
  "//---------2- Initialisation de la section .bss\n"
  "  extern unsigned __bss_start ;\n"
  "  extern unsigned __bss_end ;\n"
  "  unsigned * p = & __bss_start ;\n"
  "  while (p != & __bss_end) {\n"
  "    * p = 0 ;\n"
  "    p ++ ;\n"
  "  }\n"
  "//---------3- Copy de la section .data\n"
  "  extern unsigned __data_start ;\n"
  "  extern unsigned __data_end ;\n"
  "  extern unsigned __data_load_start ;\n"
  "  unsigned * pSrc = & __data_load_start ;\n"
  "  unsigned * pDest = & __data_start ;\n"
  "  while (pDest != & __data_end) {\n"
  "    * pDest = * pSrc ;\n"
  "    pDest ++ ;\n"
  "    pSrc ++ ;\n"
  "  }\n"
  "//---------4- Init Routines\n"
  "  init () ;\n"
  "//---------5- User routines\n"
  "  proc_setup () ;\n"
  "  while (1) {\n"
  "    proc_loop () ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "//   Vector table                                                                                                      *\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "typedef struct {\n"
  "  unsigned * mStackPointer ;\n"
  "//--- ARM Core System Handler Vectors\n"
  "  void (* mCoreSystemHandlerVector [15]) (void) ;\n"
  "//--- Non-Core Vectors\n"
  "  void (* mNonCoreHandlerVector [240]) (void) ;\n"
  "//--- Flash magic values\n"
  "  int mFlash [4] ;\n"
  "} vectorStructSeq ;\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "extern unsigned __system_stack_end ;\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "const vectorStructSeq vector __attribute__ ((section (\".isr_vector\"))) = {\n"
  "  & __system_stack_end, // 0\n"
  "//--- ARM Core System Handler Vectors\n"
  "  { ResetISR, // 1\n"
  "    proc_NMIHandler, // 2\n"
  "    proc_HardFaultHandler, // 3\n"
  "    proc_MemManageHandler, // 4\n"
  "    proc_BusFaultHandler, // 5\n"
  "    proc_UsageFaultHandler, // 6\n"
  "    NULL, // 7 (reserved)\n"
  "    NULL, // 8 (reserved)\n"
  "    NULL, // 9 (reserved)\n"
  "    NULL, // 10 (reserved)\n"
  "    proc_svcHandler, // 11\n"
  "    proc_DebugMonitorHandler, // 12\n"
  "    NULL, // 13 (reserved)\n"
  "    proc_PendSVHandler, // 14\n"
  "    proc_systickHandler // 15\n"
  "  },\n"
  "//--- Non-Core Vectors\n"
  "  { proc_DMAChannel0TranfertCompleteHandler, // 16\n"
  "    proc_DMAChannel1TranfertCompleteHandler, // 17\n"
  "    proc_DMAChannel2TranfertCompleteHandler, // 18\n"
  "    proc_DMAChannel3TranfertCompleteHandler, // 19\n"
  "    proc_DMAChannel4TranfertCompleteHandler, // 20\n"
  "    proc_DMAChannel5TranfertCompleteHandler, // 21\n"
  "    proc_DMAChannel6TranfertCompleteHandler, // 22\n"
  "    proc_DMAChannel7TranfertCompleteHandler, // 23\n"
  "    proc_DMAChannel8TranfertCompleteHandler, // 24\n"
  "    proc_DMAChannel9TranfertCompleteHandler, // 25\n"
  "    proc_DMAChannel10TranfertCompleteHandler, // 26\n"
  "    proc_DMAChannel11TranfertCompleteHandler, // 27\n"
  "    proc_DMAChannel12TranfertCompleteHandler, // 28\n"
  "    proc_DMAChannel13TranfertCompleteHandler, // 29\n"
  "    proc_DMAChannel14TranfertCompleteHandler, // 30\n"
  "    proc_DMAChannel15TranfertCompleteHandler, // 31\n"
  "    proc_DMAErrorHandler, // 32\n"
  "    NULL, // 33\n"
  "    proc_flashMemoryCommandCompleteHandler, // 34\n"
  "    proc_flashMemoryReadCollisionHandler, // 35\n"
  "    proc_modeControllerHandler, // 36\n"
  "    proc_LLWUHandler, // 37\n"
  "    proc_WDOGEWMHandler, // 38\n"
  "    NULL, // 39\n"
  "    proc_I2C0Handler, // 40\n"
  "    proc_I2C1Handler, // 41\n"
  "    proc_SPI0Handler, // 42\n"
  "    proc_SPI1Handler, // 43\n"
  "    NULL, // 44\n"
  "    proc_CAN0MessageBufferHandler, // 45\n"
  "    proc_CAN0BusOffHandler, // 46\n"
  "    proc_CAN0ErrorHandler, // 47\n"
  "    proc_CAN0TransmitWarningHandler, // 48\n"
  "    proc_CAN0ReceiveWarningHandler, // 49\n"
  "    proc_CAN0WakeUpHandler, // 50\n"
  "    proc_I2S0TransmitHandler, // 51\n"
  "    proc_I2S0ReceiveHandler, // 52\n"
  "    NULL, // 53\n"
  "    NULL, // 54\n"
  "    NULL, // 55\n"
  "    NULL, // 56\n"
  "    NULL, // 57\n"
  "    NULL, // 58\n"
  "    NULL, // 59\n"
  "    proc_UART0LONHandler, // 60\n"
  "    proc_UART0StatusHandler, // 61\n"
  "    proc_UART0ErrorHandler, // 62\n"
  "    proc_UART1StatusHandler, // 63\n"
  "    proc_UART1ErrorHandler, // 64\n"
  "    proc_UART2StatusHandler, // 65\n"
  "    proc_UART2ErrorHandler, // 66\n"
  "    NULL, // 67\n"
  "    NULL, // 68\n"
  "    NULL, // 69\n"
  "    NULL, // 70\n"
  "    NULL, // 71\n"
  "    NULL, // 72\n"
  "    proc_ADC0Handler, // 73\n"
  "    proc_ADC1Handler, // 74\n"
  "    proc_CMP0Handler, // 75\n"
  "    proc_CMP1Handler, // 76\n"
  "    proc_CMP2Handler, // 77\n"
  "    proc_FMT0Handler, // 78\n"
  "    proc_FMT1Handler, // 79\n"
  "    proc_FMT2Handler, // 80\n"
  "    proc_CMTHandler, // 81\n"
  "    proc_RTCAlarmHandler, // 82\n"
  "    proc_RTCSecondHandler, // 83\n"
  "    proc_PITChannel0Handler, // 84\n"
  "    proc_PITChannel1Handler, // 85\n"
  "    proc_PITChannel2Handler, // 86\n"
  "    proc_PITChannel3Handler, // 87\n"
  "    proc_PDBHandler, // 88\n"
  "    proc_USBOTGHandler, // 89\n"
  "    proc_USBChargerDetectHandler, // 90\n"
  "    NULL, // 91\n"
  "    NULL, // 92\n"
  "    NULL, // 93\n"
  "    NULL, // 94\n"
  "    NULL, // 95\n"
  "    NULL, // 96\n"
  "    proc_DAC0Handler, // 97\n"
  "    NULL, // 98\n"
  "    proc_TSIHandler, // 99\n"
  "    proc_MCGHandler, // 100\n"
  "    proc_lowPowerTimerHandler, // 101\n"
  "    NULL, // 102\n"
  "    proc_pinDetectPortAHandler, // 103\n"
  "    proc_pinDetectPortBHandler, // 104\n"
  "    proc_pinDetectPortCHandler, // 105\n"
  "    proc_pinDetectPortDHandler, // 106\n"
  "    proc_pinDetectPortEHandler, // 107\n"
  "    NULL, // 108\n"
  "    NULL, // 109\n"
  "    proc_softwareInterruptHandler, // 110\n"
  "    NULL, // 111\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 112 \xC3""\xA0"" 127\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 128 \xC3""\xA0"" 143\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 143 \xC3""\xA0"" 159\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 160 \xC3""\xA0"" 175\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 176 \xC3""\xA0"" 191\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 192 \xC3""\xA0"" 207\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 208 \xC3""\xA0"" 223\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 224 \xC3""\xA0"" 239\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL  // 240 \xC3""\xA0"" 255\n"
  "  },\n"
  "//--- Flash magic values\n"
  "  {-1, -1, -1, -2}\n"
  "} ;\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_17_targetTemplates (
  "target.c",
  "c",
  true, // Text file
  6877, // Text length
  gWrapperFileContent_17_targetTemplates
) ;

//--- All files of 'sources' directory

static const cRegularFileWrapper * gWrapperAllFiles_targetTemplates_3 [4] = {
  & gWrapperFile_15_targetTemplates,
  & gWrapperFile_16_targetTemplates,
  & gWrapperFile_17_targetTemplates,
  NULL
} ;

//--- All sub-directories of 'sources' directory

static const cDirectoryWrapper * gWrapperAllDirectories_targetTemplates_3 [1] = {
  NULL
} ;

//--- Directory 'sources'

const cDirectoryWrapper gWrapperDirectory_3_targetTemplates (
  "sources",
  3,
  gWrapperAllFiles_targetTemplates_3,
  0,
  gWrapperAllDirectories_targetTemplates_3
) ;

//--- All files of 'teensy-3-1-interrupt' directory

static const cRegularFileWrapper * gWrapperAllFiles_targetTemplates_2 [8] = {
  & gWrapperFile_8_targetTemplates,
  & gWrapperFile_9_targetTemplates,
  & gWrapperFile_10_targetTemplates,
  & gWrapperFile_11_targetTemplates,
  & gWrapperFile_12_targetTemplates,
  & gWrapperFile_13_targetTemplates,
  & gWrapperFile_14_targetTemplates,
  NULL
} ;

//--- All sub-directories of 'teensy-3-1-interrupt' directory

static const cDirectoryWrapper * gWrapperAllDirectories_targetTemplates_2 [2] = {
  & gWrapperDirectory_3_targetTemplates,
  NULL
} ;

//--- Directory 'teensy-3-1-interrupt'

const cDirectoryWrapper gWrapperDirectory_2_targetTemplates (
  "teensy-3-1-interrupt",
  7,
  gWrapperAllFiles_targetTemplates_2,
  1,
  gWrapperAllDirectories_targetTemplates_2
) ;

//--- File 'teensy-3-1-sequential-systick/build-as.py'

const char * gWrapperFileContent_18_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"as\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_18_targetTemplates (
  "build-as.py",
  "py",
  true, // Text file
  996, // Text length
  gWrapperFileContent_18_targetTemplates
) ;

//--- File 'teensy-3-1-sequential-systick/build-verbose.py'

const char * gWrapperFileContent_19_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"all\", \"1\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_19_targetTemplates (
  "build-verbose.py",
  "py",
  true, // Text file
  1002, // Text length
  gWrapperFileContent_19_targetTemplates
) ;

//--- File 'teensy-3-1-sequential-systick/build.py'

const char * gWrapperFileContent_20_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess, sys, os, copy\n"
  "import urllib, shutil\n"
  "import subprocess, re\n"
  "from time import time\n"
  "import platform\n"
  "import json\n"
  "import threading, operator\n"
  "\n"
  "if sys.version_info >= (2, 6) :\n"
  "  import multiprocessing\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   processorCount                                                                                                     *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def processorCount () :\n"
  "  if sys.version_info >= (2, 6) :\n"
  "    coreCount = multiprocessing.cpu_count ()\n"
  "  else:\n"
  "    coreCount = 1\n"
  "  return coreCount\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   FOR PRINTING IN COLOR                                                                                              *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BLACK () :\n"
  "  return '\\033[90m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def RED () :\n"
  "  return '\\033[91m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def GREEN () :\n"
  "  return '\\033[92m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def YELLOW () :\n"
  "  return '\\033[93m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BLUE () :\n"
  "  return '\\033[94m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def MAGENTA () :\n"
  "  return '\\033[95m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def CYAN () :\n"
  "  return '\\033[96m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def WHITE () :\n"
  "  return '\\033[97m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def ENDC () :\n"
  "  return '\\033[0m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD () :\n"
  "  return '\\033[1m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def UNDERLINE () :\n"
  "  return '\\033[4m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BLINK () :\n"
  "  return '\\033[5m'\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_BLUE () :\n"
  "  return BOLD () + BLUE ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_GREEN () :\n"
  "  return BOLD () + GREEN ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def BOLD_RED () :\n"
  "  return BOLD () + RED ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runHiddenCommand                                                                                                   *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runHiddenCommand (cmd) :\n"
  "  result = \"\"\n"
  "  childProcess = subprocess.Popen (cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n"
  "  while True:\n"
  "    line = childProcess.stdout.readline ()\n"
  "    if line != \"\":\n"
  "      result += line\n"
  "    else:\n"
  "      childProcess.wait ()\n"
  "      if childProcess.returncode != 0 :\n"
  "        sys.exit (childProcess.returncode)\n"
  "      return result\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runSingleCommand                                                                                                   *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runSingleCommand (cmd) :\n"
  "  cmdAsString = \"\"\n"
  "  for s in cmd:\n"
  "    if (s == \"\") or (s.find (\" \") >= 0):\n"
  "      cmdAsString += '\"' + s + '\" '\n"
  "    else:\n"
  "      cmdAsString += s + ' '\n"
  "  print cmdAsString\n"
  "  childProcess = subprocess.Popen (cmd)\n"
  "  childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    sys.exit (childProcess.returncode)\n"
  "  sys.stdout.flush()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runCommand                                                                                                         *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runCommand (cmd, title, showCommand) :\n"
  "  if title != \"\":\n"
  "    print BOLD_BLUE () + title + ENDC ()\n"
  "  if (title == \"\") or showCommand :\n"
  "    cmdAsString = \"\"\n"
  "    for s in cmd:\n"
  "      if (s == \"\") or (s.find (\" \") >= 0):\n"
  "        cmdAsString += '\"' + s + '\" '\n"
  "      else:\n"
  "        cmdAsString += s + ' '\n"
  "    print cmdAsString\n"
  "  childProcess = subprocess.Popen (cmd)\n"
  "  childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    sys.exit (childProcess.returncode)\n"
  "  sys.stdout.flush()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   runInThread                                                                                                        *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def runInThread (job, displayLock, terminationSemaphore):\n"
  "  childProcess = subprocess.Popen (job.mCommand, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n"
  "  while True:\n"
  "    line = childProcess.stdout.readline ()\n"
  "    if line != \"\":\n"
  "      displayLock.acquire ()\n"
  "      sys.stdout.write (line) # Print without newline\n"
  "      displayLock.release ()\n"
  "    else:\n"
  "      childProcess.wait ()\n"
  "      job.mReturnCode = childProcess.returncode\n"
  "      terminationSemaphore.release ()\n"
  "      break\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   modificationDateForFile                                                                                            *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def modificationDateForFile (dateCacheDictionary, file):\n"
  "  absFilePath = os.path.abspath (file)\n"
  "  if dateCacheDictionary.has_key (absFilePath) :\n"
  "    return dateCacheDictionary [absFilePath]\n"
  "  elif not os.path.exists (absFilePath):\n"
  "    date = sys.float_info.max # Very far in future\n"
  "    dateCacheDictionary [absFilePath] = date\n"
  "    return date\n"
  "  else:\n"
  "    date = os.path.getmtime (absFilePath)\n"
  "    dateCacheDictionary [absFilePath] = date\n"
  "    return date\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class PostCommand                                                                                                  *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class PostCommand:\n"
  "  mCommand = []\n"
  "  mTitle = \"\"\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, title = \"\"):\n"
  "    self.mCommand = []\n"
  "    self.mTitle = title\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class Job                                                                                                          *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class Job:\n"
  "  mTarget = \"\"\n"
  "  mCommand = []\n"
  "  mTitle = \"\"\n"
  "  mRequiredFiles = []\n"
  "  mPostCommands = []\n"
  "  mReturnCode = None\n"
  "  mPriority = 0\n"
  "  mState = 0 # 0: waiting for execution\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, target, requiredFiles, command, postCommands, priority, title):\n"
  "    self.mTarget = copy.deepcopy (target)\n"
  "    self.mCommand = copy.deepcopy (command)\n"
  "    self.mRequiredFiles = copy.deepcopy (requiredFiles)\n"
  "    self.mTitle = copy.deepcopy (title)\n"
  "    self.mPostCommands = copy.deepcopy (postCommands)\n"
  "    self.mPriority = priority\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def run (self, displayLock, terminationSemaphore, showCommand):\n"
  "    displayLock.acquire ()\n"
  "    if self.mTitle != \"\":\n"
  "      print BOLD_BLUE () + self.mTitle + ENDC ()\n"
  "    if (self.mTitle == \"\") or showCommand :\n"
  "      cmdAsString = \"\"\n"
  "      for s in self.mCommand:\n"
  "        if (s == \"\") or (s.find (\" \") >= 0):\n"
  "          cmdAsString += '\"' + s + '\" '\n"
  "        else:\n"
  "          cmdAsString += s + ' '\n"
  "      print cmdAsString\n"
  "    displayLock.release ()\n"
  "    thread = threading.Thread (target=runInThread, args=(self, displayLock, terminationSemaphore))\n"
  "    thread.start()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def runPostCommand (self, displayLock, terminationSemaphore, showCommand):\n"
  "    postCommand = self.mPostCommands [0]\n"
  "    self.mCommand = postCommand.mCommand\n"
  "    displayLock.acquire ()\n"
  "    print BOLD_BLUE () + postCommand.mTitle + ENDC ()\n"
  "    if showCommand:\n"
  "      cmdAsString = \"\"\n"
  "      for s in self.mCommand:\n"
  "        if (s == \"\") or (s.find (\" \") >= 0):\n"
  "          cmdAsString += '\"' + s + '\" '\n"
  "        else:\n"
  "          cmdAsString += s + ' '\n"
  "      print cmdAsString\n"
  "    displayLock.release ()\n"
  "    thread = threading.Thread (target=runInThread, args=(self, displayLock, terminationSemaphore))\n"
  "    thread.start()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class Rule                                                                                                         *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class Rule:\n"
  "  mTarget = \"\"\n"
  "  mDependences = []\n"
  "  mCommand = []\n"
  "  mSecondaryMostRecentModificationDate = 0.0 # Far in the past\n"
  "  mTitle = \"\"\n"
  "  mPostCommands = []\n"
  "  mPriority = 0\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def __init__ (self, target, title = \"\"):\n"
  "    self.mTarget = copy.deepcopy (target)\n"
  "    self.mDependences = []\n"
  "    self.mCommand = []\n"
  "    self.mSecondaryMostRecentModificationDate = 0.0\n"
  "    self.mPostCommands = []\n"
  "    self.mPriority = 0\n"
  "    if title == \"\":\n"
  "      self.mTitle = \"Building \" + target\n"
  "    else:\n"
  "      self.mTitle = copy.deepcopy (title)\n"
  "  \n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def enterSecondaryDependanceFile (self, secondaryDependanceFile):\n"
  "    if secondaryDependanceFile != \"\":\n"
  "      filePath = os.path.abspath (secondaryDependanceFile)\n"
  "      if os.path.exists (filePath):\n"
  "        f = open (filePath, \"r\")\n"
  "        s = f.read ().replace (\"\\\\ \", \"\\x01\") # Read and replace escaped spaces by \\0x01\n"
  "        f.close ()\n"
  "        s = s.replace (\"\\\\\\n\", \"\")\n"
  "        liste = s.split (\"\\n\\n\")\n"
  "        dateCacheDictionary = {}\n"
  "        for s in liste:\n"
  "          components = s.split (':')\n"
  "          target = components [0].replace (\"\\x01\", \" \")\n"
  "          #print \"------- Optional dependency rules for target '\" + target + \"'\"\n"
  "          #print \"Secondary target '\" + target + \"'\"\n"
  "          for src in components [1].split ():\n"
  "            secondarySource = src.replace (\"\\x01\", \" \")\n"
  "            #print \"  '\" + secondarySource + \"'\"\n"
  "            modifDate = modificationDateForFile (dateCacheDictionary, secondarySource)\n"
  "            if self.mSecondaryMostRecentModificationDate < modifDate :\n"
  "              self.mSecondaryMostRecentModificationDate = modifDate\n"
  "              #print BOLD_BLUE () + str (modifDate) + ENDC ()\n"
  "    \n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   class Make                                                                                                         *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "class Make:\n"
  "  mRuleList = []\n"
  "  mJobList = []\n"
  "  mErrorCount = 0\n"
  "  mModificationDateDictionary = {}\n"
  "  mGoals = {}\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def addRule (self, rule):\n"
  "    self.mRuleList.append (copy.deepcopy (rule))\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printRules (self):\n"
  "    print BOLD_BLUE () + \"--- Print the \" + str (len (self.mRuleList)) + \" rule\" + (\"s\" if len (self.mRuleList) > 1 else \"\") + \" ---\" + ENDC ()\n"
  "    for rule in self.mRuleList:\n"
  "      print BOLD_GREEN () + \"Target: '\" + rule.mTarget + \"'\" + ENDC ()\n"
  "      for dep in rule.mDependences:\n"
  "        print \"  Dependence: '\" + dep + \"'\"\n"
  "      s = \"  Command: \"\n"
  "      for cmd in rule.mCommand:\n"
  "        s += \" \\\"\" + cmd + \"\\\"\"\n"
  "      print s\n"
  "      print \"  Title: '\" + rule.mTitle + \"'\"\n"
  "      index = 0\n"
  "      for (command, title) in rule.mPostCommands:\n"
  "        index = index + 1\n"
  "        s = \"  Post command \" + str (index) + \": \"\n"
  "        for cmd in command:\n"
  "          s += \" \\\"\" + cmd + \"\\\"\"\n"
  "        print s\n"
  "        print \"  Its title: '\" + title + \"'\"\n"
  "        \n"
  "    print BOLD_BLUE () + \"--- End of print rule ---\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def writeRuleDependancesInDotFile (self, dotFileName):\n"
  "    s = \"digraph G {\\n\"\n"
  "    s += \"  node [fontname=courier]\\n\"\n"
  "    arrowSet = set ()\n"
  "    for rule in self.mRuleList:\n"
  "      s += '  \"' + rule.mTarget + '\" [shape=rectangle]\\n'\n"
  "      for dep in rule.mDependences:\n"
  "        arrowSet.add ('  \"' + rule.mTarget + '\" -> \"' + dep + '\"\\n')\n"
  "    for arrow in arrowSet:\n"
  "      s += arrow\n"
  "    s += \"}\\n\"\n"
  "    f = open (dotFileName, \"w\")\n"
  "    f.write (s)\n"
  "    f.close ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def checkRules (self):\n"
  "    if self.mErrorCount == 0:\n"
  "      ruleList = copy.deepcopy (self.mRuleList)\n"
  "      index = 0\n"
  "      looping = True\n"
  "    #--- loop on rules\n"
  "      while looping:\n"
  "        looping = False\n"
  "        while index < len (ruleList):\n"
  "          aRule = ruleList [index]\n"
  "          index = index + 1\n"
  "        #--- Check dependance files have rule for building, or does exist\n"
  "          depIdx = 0\n"
  "          while depIdx < len (aRule.mDependences):\n"
  "            dep = aRule.mDependences [depIdx]\n"
  "            depIdx = depIdx + 1\n"
  "            hasBuildRule = False\n"
  "            for r in ruleList:\n"
  "              if dep == r.mTarget:\n"
  "                hasBuildRule = True\n"
  "                break\n"
  "            if not hasBuildRule:\n"
  "              looping = True\n"
  "              if not os.path.exists (os.path.abspath (dep)):\n"
  "                self.mErrorCount = self.mErrorCount + 1\n"
  "                print BOLD_RED () + \"Check rules error: '\" + dep + \"' does not exist, and there is no rule for building it.\" + ENDC ()\n"
  "              depIdx = depIdx - 1\n"
  "              aRule.mDependences.pop (depIdx)\n"
  "        #--- Rule with no dependances\n"
  "          if len (aRule.mDependences) == 0 :\n"
  "            looping = True\n"
  "            index = index - 1\n"
  "            ruleList.pop (index)\n"
  "            idx = 0\n"
  "            while idx < len (ruleList):\n"
  "              r = ruleList [idx]\n"
  "              idx = idx + 1\n"
  "              while r.mDependences.count (aRule.mTarget) > 0 :\n"
  "                r.mDependences.remove (aRule.mTarget)\n"
  "    #--- Error if rules remain\n"
  "      if len (ruleList) > 0:\n"
  "        self.mErrorCount = self.mErrorCount + 1\n"
  "        print BOLD_RED () + \"Check rules error; circulary dependances between:\" + ENDC ()\n"
  "        for aRule in ruleList: \n"
  "          print BOLD_RED () + \"  - '\" + aRule.mTarget + \"', depends from:\" + ENDC ()\n"
  "          for dep in aRule.mDependences:\n"
  "            print BOLD_RED () + \"      '\" + dep + \"'\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def existsJobForTarget (self, target):\n"
  "    for job in self.mJobList:\n"
  "      if job.mTarget == target:\n"
  "        return True\n"
  "    return False\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def makeJob (self, target): # Return a bool indicating wheither the target should be built\n"
  "  #--- If there are errors, return immediatly\n"
  "    if self.mErrorCount != 0:\n"
  "      return False\n"
  "  #--- Target already in job list \?\n"
  "    if self.existsJobForTarget (target):\n"
  "      return True # yes, return target will be built\n"
  "  #--- Find a rule for making the target\n"
  "    absTarget = os.path.abspath (target)\n"
  "    rule = None\n"
  "    matchCount = 0\n"
  "    for r in self.mRuleList:\n"
  "      if target == r.mTarget:\n"
  "        matchCount = matchCount + 1\n"
  "        rule = r\n"
  "    if matchCount == 0:\n"
  "      absTarget = os.path.abspath (target)\n"
  "      if not os.path.exists (absTarget):\n"
  "        print BOLD_RED () + \"No rule for making '\" + target + \"'\" + ENDC ()\n"
  "        self.mErrorCount = self.mErrorCount + 1\n"
  "      return False # Error or target exists, and no rule for building it\n"
  "    elif matchCount > 1:\n"
  "      print BOLD_RED () + str (matchCount) + \" rules for making '\" + target + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "      return False # Error\n"
  "  #--- Target file does not exist, and 'rule' variable indicates how build it\n"
  "    appendToJobList = not os.path.exists (absTarget)\n"
  "  #--- Build primary dependences\n"
  "    jobDependenceFiles = []\n"
  "    for dependence in rule.mDependences:\n"
  "      willBeBuilt = self.makeJob (dependence)\n"
  "      if willBeBuilt:\n"
  "        jobDependenceFiles.append (dependence)\n"
  "        appendToJobList = True\n"
  "  #--- Check primary file modification dates\n"
  "    if not appendToJobList:\n"
  "      targetDateModification = os.path.getmtime (absTarget)\n"
  "      for source in rule.mDependences:\n"
  "        sourceDateModification = os.path.getmtime (source)\n"
  "        if targetDateModification < sourceDateModification:\n"
  "          appendToJobList = True\n"
  "          break\n"
  "  #--- Check for secondary dependancy files\n"
  "    if not appendToJobList:\n"
  "      targetDateModification = os.path.getmtime (absTarget)\n"
  "      if targetDateModification < rule.mSecondaryMostRecentModificationDate:\n"
  "        appendToJobList = True\n"
  "  #--- Append to job list\n"
  "    if appendToJobList:\n"
  "      self.mJobList.append (Job (target, jobDependenceFiles, rule.mCommand, rule.mPostCommands, rule.mPriority, rule.mTitle))\n"
  "  #--- Return\n"
  "    return appendToJobList\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "  #Job state\n"
  "  # 0: waiting\n"
  "  # 1:running\n"
  "  # 2: waiting for executing post command\n"
  "  # 3:executing for executing post command\n"
  "  # 4: completed\n"
  "\n"
  "  def runJobs (self, maxConcurrentJobs, showCommand):\n"
  "    if self.mErrorCount == 0:\n"
  "      if len (self.mJobList) == 0:\n"
  "        print BOLD_BLUE () + \"Nothing to make.\" + ENDC ()\n"
  "      else:\n"
  "      #--- Sort jobs following their priorities\n"
  "        self.mJobList = sorted (self.mJobList, key=operator.attrgetter(\"mPriority\"), reverse=True)\n"
  "      #--- Run\n"
  "        if maxConcurrentJobs <= 0:\n"
  "          maxConcurrentJobs = processorCount () - maxConcurrentJobs\n"
  "        jobCount = 0 ;\n"
  "        terminationSemaphore = threading.Semaphore (0)\n"
  "        displayLock = threading.Lock ()\n"
  "        loop = True\n"
  "        returnCode = 0\n"
  "        while loop:\n"
  "        #--- Launch jobs in parallel\n"
  "          for job in self.mJobList:\n"
  "            if (returnCode == 0) and (jobCount < maxConcurrentJobs):\n"
  "              if (job.mState == 0) and (len (job.mRequiredFiles) == 0):\n"
  "                #--- Create target directory if does not exist\n"
  "                absTargetDirectory = os.path.dirname (os.path.abspath (job.mTarget))\n"
  "                if not os.path.exists (absTargetDirectory):\n"
  "                  displayLock.acquire ()\n"
  "                  runHiddenCommand ([\"mkdir\", \"-p\", absTargetDirectory])\n"
  "                  # runCommand ([\"mkdir\", \"-p\", absTargetDirectory], \"Making \" + absTargetDirectory + \" directory\", showCommand)\n"
  "                  displayLock.release ()\n"
  "                #--- Run job\n"
  "                job.run (displayLock, terminationSemaphore, showCommand)\n"
  "                jobCount = jobCount + 1\n"
  "                job.mState = 1 # Means is running\n"
  "              elif job.mState == 2: # Waiting for executing post command\n"
  "                job.mReturnCode = None # Means post command not terminated\n"
  "                job.runPostCommand (displayLock, terminationSemaphore, showCommand)\n"
  "                jobCount = jobCount + 1\n"
  "                job.mState = 3 # Means post command is running\n"
  "        #--- Wait for a job termination\n"
  "          #print \"wait \" + str (jobCount) + \" \" + str (len (self.mJobList))\n"
  "          terminationSemaphore.acquire ()\n"
  "        #--- Checks for terminated jobs\n"
  "          index = 0\n"
  "          while index < len (self.mJobList):\n"
  "            job = self.mJobList [index]\n"
  "            index = index + 1\n"
  "            if (job.mState == 1) and (job.mReturnCode == 0) : # Terminated without error\n"
  "              jobCount = jobCount - 1\n"
  "              if len (job.mPostCommands) > 0:\n"
  "                job.mState = 2 # Ready to execute next post command\n"
  "              else:\n"
  "                job.mState = 4 # Completed\n"
  "                index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 1) and (job.mReturnCode > 0) : # terminated with error : exit\n"
  "              jobCount = jobCount - 1\n"
  "              job.mState = 4 # Means Terminated\n"
  "              index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 3) and (job.mReturnCode == 0): # post command is terminated without error\n"
  "              jobCount = jobCount - 1\n"
  "              job.mPostCommands.pop (0) # Remove completed post command\n"
  "              if len (job.mPostCommands) > 0:\n"
  "                job.mState = 2 # Ready to execute next post command\n"
  "              else:\n"
  "                job.mState = 4 # Completed\n"
  "                index = index - 1 # For removing job from list\n"
  "            elif (job.mState == 3) and (job.mReturnCode > 0): # post command is terminated with error\n"
  "              jobCount = jobCount - 1\n"
  "              job.mState = 4 # Completed\n"
  "              index = index - 1 # For removing job from list\n"
  "            elif job.mState == 4: # Completed: delete job\n"
  "              index = index - 1\n"
  "              self.mJobList.pop (index) # Remove terminated job\n"
  "              #displayLock.acquire ()\n"
  "              #print \"Completed '\" + job.mTitle + \"'\"\n"
  "              #--- Remove dependences from this job\n"
  "              idx = 0\n"
  "              while idx < len (self.mJobList):\n"
  "                aJob = self.mJobList [idx]\n"
  "                idx = idx + 1\n"
  "                while aJob.mRequiredFiles.count (job.mTarget) > 0 :\n"
  "                  aJob.mRequiredFiles.remove (job.mTarget)\n"
  "                  #print \"  Removed from '\" + aJob.mTitle + \"': \" + str (len (aJob.mRequiredFiles))\n"
  "              #displayLock.release ()\n"
  "              #--- Signal error \?\n"
  "              if (job.mReturnCode > 0) and (returnCode == 0):\n"
  "                self.mErrorCount = self.mErrorCount + 1\n"
  "                print BOLD_RED () + \"Return code: \" + str (job.mReturnCode) + ENDC ()\n"
  "                if (returnCode == 0) and (jobCount > 0) :\n"
  "                  print \"Wait for job termination...\"\n"
  "                returnCode = job.mReturnCode\n"
  "          loop = (len (self.mJobList) > 0) if (returnCode == 0) else (jobCount > 0)\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def searchFileInDirectories (self, file, directoryList): # returns \"\" if not found, register error\n"
  "    matchCount = 0\n"
  "    result = \"\"\n"
  "    for sourceDir in directoryList:\n"
  "      sourcePath = sourceDir + \"/\" + file\n"
  "      if os.path.exists (os.path.abspath (sourcePath)):\n"
  "        matchCount = matchCount + 1\n"
  "        result = sourcePath\n"
  "    if matchCount == 0:\n"
  "      print BOLD_RED () + \"Cannot find '\" + file + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "    elif matchCount > 1:\n"
  "      print BOLD_RED () + str (matchCount) + \" source files for making '\" + file + \"'\" + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "      result = \"\"\n"
  "    return result\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def addGoal (self, goal, targetList, message):\n"
  "    self.mGoals [goal] = (targetList, message)\n"
  "    #print '%s' % ', '.join(map(str, self.mGoals))\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printGoals (self):\n"
  "    print BOLD_BLUE () + \"--- Print the \" + str (len (self.mGoals)) + \" goal\" + (\"s\" if len (self.mGoals) > 1 else \"\") + \" ---\" + ENDC ()\n"
  "    for goalKey in self.mGoals.keys ():\n"
  "      print BOLD_GREEN () + \"Goal: '\" + goalKey + \"'\" + ENDC ()\n"
  "      (targetList, message) = self.mGoals [goalKey]\n"
  "      for target in targetList:\n"
  "        print \"  Target: '\" + target + \"'\"\n"
  "      print \"  Message: '\" + message + \"'\"\n"
  "        \n"
  "    print BOLD_BLUE () + \"--- End of print goals ---\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def runGoal (self, goal, maxConcurrentJobs, showCommand):\n"
  "    if self.mGoals.has_key (goal) :\n"
  "      (targetList, message) = self.mGoals [goal]\n"
  "      for target in targetList:\n"
  "        self.makeJob (target)\n"
  "      self.runJobs (maxConcurrentJobs, showCommand)\n"
  "    else:\n"
  "      errorMessage = \"The '\" + goal + \"' goal is not defined; defined goals:\"\n"
  "      for key in self.mGoals:\n"
  "        (targetList, message) = self.mGoals [key]\n"
  "        errorMessage += \"\\n  '\" + key + \"': \" + message\n"
  "      print BOLD_RED () + errorMessage + ENDC ()\n"
  "      self.mErrorCount = self.mErrorCount + 1\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def enterError (self, message):\n"
  "    print BOLD_RED () + message + ENDC ()\n"
  "    self.mErrorCount = self.mErrorCount + 1\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printErrorCountAndExitOnError (self):\n"
  "    if self.mErrorCount == 1:\n"
  "      print BOLD_RED () + \"1 error.\" + ENDC ()\n"
  "      sys.exit (1)\n"
  "    elif self.mErrorCount > 1:\n"
  "      print BOLD_RED () + str (self.mErrorCount) + \" errors.\" + ENDC ()\n"
  "      sys.exit (1)\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def printErrorCount (self):\n"
  "    if self.mErrorCount == 1:\n"
  "      print BOLD_RED () + \"1 error.\" + ENDC ()\n"
  "    elif self.mErrorCount > 1:\n"
  "      print BOLD_RED () + str (self.mErrorCount) + \" errors.\" + ENDC ()\n"
  "\n"
  "  #--------------------------------------------------------------------------*\n"
  "\n"
  "  def errorCount (self):\n"
  "    return self.mErrorCount\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Source files                                                                                                       *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def sourceList ():\n"
  "  return [\"plm.c\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Product directory                                                                                                  *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def productDir ():\n"
  "  return \"product\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#                         Object files directories                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def objectDir ():\n"
  "  return \"objects\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#                         Object files directories                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def asDir ():\n"
  "  return \"as\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Tool dir                                                                                                           *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def toolDir ():\n"
  "  (SYSTEM_NAME, MODE_NAME, RELEASE, VERSION, MACHINE) = os.uname ()\n"
  "  if SYSTEM_NAME == \"Darwin\":\n"
  "    MACHINE = \"i386\"\n"
  "  return os.path.expanduser (\"~/plm-tools/plm-\" + MACHINE + \"-\" + SYSTEM_NAME + \"-binutils-2.25-gcc-5.1.0-newlib-2.2.0-libusb-1.0.19\")\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Compiler invocation                                                                                                *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def compiler ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-gcc\", \"-mthumb\", \"-mcpu=cortex-m4\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Display object size invocation                                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def displayObjectSize ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-size\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Object Dump invocation                                                                                             *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def dumpObjectCode ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-objdump\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#    C Compiler options                                                                                                *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def cCompilerOptions ():\n"
  "  result = []\n"
  "  result.append (\"-Wall\")\n"
  "  result.append (\"-Werror\")\n"
  "  result.append (\"-Wreturn-type\")\n"
  "  result.append (\"-Wformat\")\n"
  "  result.append (\"-Wsign-compare\")\n"
  "  result.append (\"-Wpointer-arith\")\n"
  "  result.append (\"-Wparentheses\")\n"
  "  result.append (\"-Wcast-align\")\n"
  "  result.append (\"-Wcast-qual\")\n"
  "  result.append (\"-Wwrite-strings\")\n"
  "  result.append (\"-Wswitch\")\n"
  "  result.append (\"-Wuninitialized\")\n"
  "  result.append (\"-fno-builtin\")\n"
  "  result.append (\"-Wno-aggressive-loop-optimizations\")\n"
  "  result.append (\"-ffunction-sections\")\n"
  "  result.append (\"-fdata-sections\")\n"
  "  result.append (\"-std=c99\")\n"
  "  result.append (\"-Wstrict-prototypes\")\n"
  "  result.append (\"-Wbad-function-cast\")\n"
  "  result.append (\"-Wmissing-declarations\")\n"
  "  result.append (\"-Wimplicit-function-declaration\")\n"
  "  result.append (\"-Wno-int-to-pointer-cast\")\n"
  "  result.append (\"-Wno-pointer-to-int-cast\")\n"
  "  result.append (\"-Wmissing-prototypes\")\n"
  "  result.append (\"-Os\")\n"
  "  result.append (\"-fomit-frame-pointer\")\n"
  "  result.append (\"-foptimize-register-move\") \n"
  "  result.append (\"-I../build\")\n"
  "  return result\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Linker invocation                                                                                                  *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def linker ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-gcc\", \"-mthumb\", \"-mcpu=cortex-m4\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Linker options                                                                                                     *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def linkerOptions ():\n"
  "  result = []\n"
  "  result.append (\"-nostartfiles\")\n"
  "  result.append (\"-Wl,--fatal-warnings\")\n"
  "  result.append (\"-Wl,--warn-common\")\n"
  "  result.append (\"-Wl,--no-undefined\")\n"
  "  result.append (\"-Wl,--cref\")\n"
  "  result.append (\"-lc\")\n"
  "  result.append (\"-lgcc\")\n"
  "  result.append (\"-Wl,-static\")\n"
  "  result.append (\"-Wl,-s\")\n"
  "  result.append (\"-Wl,--gc-sections\")\n"
  "  return result\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   objcopy invocation                                                                                                 *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def objcopy ():\n"
  "  return [toolDir () + \"/bin/arm-eabi-objcopy\"]\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   Teensy loader                                                                                                      *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def teensyLoader ():\n"
  "  return toolDir () + \"/bin/teensy-loader-cli\"\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#   ARCHIVE DOWNLOAD                                                                                                   *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "downloadProgression = 0.0\n"
  "\n"
  "def downloadReportHook (a, b, fileSize) :\n"
  "  global downloadProgression\n"
  "  newProgression = min (100.0, float(a * b) / fileSize * 100.0)\n"
  "  if newProgression > downloadProgression :\n"
  "    downloadProgression = downloadProgression + 1.0\n"
  "    sys.stdout.write(\".\")\n"
  "    sys.stdout.flush()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def downloadArchive (archiveURL, archivePath):\n"
  "  global downloadProgression\n"
  "  downloadProgression = 0.0\n"
  "  runHiddenCommand ([\"rm\", \"-f\", archivePath + \".downloading\"])\n"
  "  runHiddenCommand ([\"rm\", \"-f\", archivePath + \".tar.bz2\"])\n"
  "  runHiddenCommand ([\"mkdir\", \"-p\", os.path.dirname (archivePath)])\n"
  "  #print \"URL: \"+ archiveURL\n"
  "  #print \"Downloading... \" + archivePath + \".downloading\"\n"
  "  try:\n"
  "    urllib.urlretrieve (archiveURL,  archivePath + \".downloading\", downloadReportHook)\n"
  "    print \"\"\n"
  "    fileSize = os.path.getsize (archivePath + \".downloading\")\n"
  "    ok = fileSize > 1000000\n"
  "    if ok:\n"
  "      runHiddenCommand ([\"mv\", archivePath + \".downloading\", archivePath + \".tar.bz2\"])\n"
  "    else:\n"
  "      print BOLD_RED () + \"Error: cannot download file\" + ENDC ()\n"
  "      sys.exit (1)\n"
  "  except:\n"
  "    print BOLD_RED () + \"Error: no network connection\" + ENDC ()\n"
  "    sys.exit (1)\n"
  "    \n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "#                                                                                                                      *\n"
  "#   MAIN                                                                                                               *\n"
  "#                                                                                                                      *\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Get max parallel jobs as first argument\n"
  "goal = \"all\"\n"
  "if len (sys.argv) > 1 :\n"
  "  goal = sys.argv [1]\n"
  "#--- Get max parallel jobs as first argument\n"
  "maxParallelJobs = 0 # 0 means use host processor count\n"
  "if len (sys.argv) > 2 :\n"
  "  maxParallelJobs = int (sys.argv [2])\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "#--- Download compiler tool if needed\n"
  "toolDirectory = toolDir ()\n"
  "if not os.path.exists (toolDirectory):\n"
  "  print BOLD_GREEN () + \"Downloading compiler tool chain\" + ENDC ()\n"
  "  archiveName = os.path.basename (toolDirectory)\n"
  "  archiveURL = \"http://crossgcc.rts-software.org/downloads/plm-tools/\" + archiveName + \".tar.bz2\"\n"
  "  downloadArchive (archiveURL, toolDirectory)\n"
  "  installDir = os.path.normpath (toolDirectory + \"/..\")\n"
  "  os.chdir (installDir)\n"
  "  runHiddenCommand ([\"bunzip2\", \"-k\", archiveName + \".tar.bz2\"])\n"
  "  runHiddenCommand ([\"rm\", archiveName + \".tar.bz2\"])\n"
  "  runHiddenCommand ([\"tar\", \"xf\", archiveName + \".tar\"])\n"
  "  runHiddenCommand ([\"rm\", archiveName + \".tar\"])\n"
  "#---\n"
  "os.chdir (scriptDir)\n"
  "print \"Product directory: \" + scriptDir\n"
  "#--- Build python makefile\n"
  "makefile = Make ()\n"
  "#--- Add C files compile rule\n"
  "objectList = []\n"
  "asObjectList = []\n"
  "for source in sourceList ():\n"
  "#--- Compile\n"
  "  object = objectDir () + \"/\" + source + \".o\"\n"
  "  rule = Rule (object, \"Compiling \" + source)\n"
  "  rule.mDependences.append (\"sources/\" + source)\n"
  "  rule.mCommand += compiler ()\n"
  "  rule.mCommand += cCompilerOptions ()\n"
  "  rule.mCommand += [\"-c\", \"sources/\" + source]\n"
  "  rule.mCommand += [\"-o\", object]\n"
  "  rule.enterSecondaryDependanceFile (object + \".dep\")\n"
  "  makefile.addRule (rule)\n"
  "  objectList.append (object)\n"
  "#--- Assembling\n"
  "  asObject = asDir () + \"/\" + source + \".s\"\n"
  "  rule = Rule (asObject, \"Assembling \" + source)\n"
  "  rule.mDependences.append (\"sources/\" + source)\n"
  "  rule.mCommand += compiler ()\n"
  "  rule.mCommand += cCompilerOptions ()\n"
  "  rule.mCommand += [\"-S\", \"sources/\" + source]\n"
  "  rule.mCommand += [\"-o\", asObject]\n"
  "  rule.enterSecondaryDependanceFile (asObject + \".dep\")\n"
  "  makefile.addRule (rule)\n"
  "  asObjectList.append (asObject)\n"
  "#--- Add linker rule\n"
  "productELF = productDir () + \"/product.elf\"\n"
  "rule = Rule (productELF, \"Linking \" + productELF)\n"
  "rule.mDependences += objectList\n"
  "rule.mCommand += linker ()\n"
  "rule.mCommand += linkerOptions ()\n"
  "rule.mCommand += objectList\n"
  "rule.mCommand += [\"-o\", productELF]\n"
  "rule.mCommand += [\"-Tsources/linker-script.ld\"]\n"
  "rule.mCommand += [\"-Wl,-Map=\" + productELF + \".map\"]\n"
  "makefile.addRule (rule)\n"
  "#--- Add objcopy rule\n"
  "productHEX = productDir () + \"/product.ihex\"\n"
  "rule = Rule (productHEX, \"Hexing \" + productHEX)\n"
  "rule.mDependences += [productELF]\n"
  "rule.mCommand += objcopy ()\n"
  "rule.mCommand += [\"-O\", \"ihex\"]\n"
  "rule.mCommand += [productELF]\n"
  "rule.mCommand += [productHEX]\n"
  "makefile.addRule (rule)\n"
  "#--- Add goals\n"
  "makefile.addGoal (\"run\", [productHEX], \"Building all and run\")\n"
  "makefile.addGoal (\"all\", [productHEX], \"Building all\")\n"
  "makefile.addGoal (\"as\", asObjectList, \"Assembling C files\")\n"
  "makefile.addGoal (\"display-object-size\", [productHEX], \"Display Object Size\")\n"
  "makefile.addGoal (\"object-dump\", [productHEX], \"Dump Object Code\")\n"
  "#--- Build\n"
  "#makefile.printRules ()\n"
  "makefile.runGoal (goal, maxParallelJobs, maxParallelJobs == 1)\n"
  "#--- Build Ok \?\n"
  "makefile.printErrorCountAndExitOnError ()\n"
  "#--- Run \?\n"
  "if goal == \"run\":\n"
  "  print BOLD_BLUE () + \"Loading Teensy...\" + ENDC ()\n"
  "  childProcess = subprocess.Popen ([teensyLoader (), \"-w\", \"-v\", \"-mmcu=mk20dx128\", productHEX])\n"
  "#--- Wait for subprocess termination\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    print BOLD_RED () + \"Error \" + str (childProcess.returncode) + ENDC ()\n"
  "    sys.exit (childProcess.returncode)\n"
  "  else:\n"
  "    print BOLD_GREEN () + \"Success\" + ENDC ()\n"
  "elif goal == \"display-object-size\":\n"
  "  print BOLD_BLUE () + \"Display Object Sizes\" + ENDC ()\n"
  "  childProcess = subprocess.Popen (displayObjectSize () + objectList + [\"-t\"])\n"
  "#--- Wait for subprocess termination\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    print BOLD_RED () + \"Error \" + str (childProcess.returncode) + ENDC ()\n"
  "    sys.exit (childProcess.returncode)\n"
  "  else:\n"
  "    print BOLD_GREEN () + \"Success\" + ENDC ()\n"
  "elif goal == \"object-dump\":\n"
  "  print BOLD_BLUE () + \"Dump Object Code\" + ENDC ()\n"
  "  childProcess = subprocess.Popen (dumpObjectCode () + [productELF, \"-Sdh\", \"-Mforce-thumb\"])\n"
  "#--- Wait for subprocess termination\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    print BOLD_RED () + \"Error \" + str (childProcess.returncode) + ENDC ()\n"
  "    sys.exit (childProcess.returncode)\n"
  "  else:\n"
  "    print BOLD_GREEN () + \"Success\" + ENDC ()\n" ;

const cRegularFileWrapper gWrapperFile_20_targetTemplates (
  "build.py",
  "py",
  true, // Text file
  44577, // Text length
  gWrapperFileContent_20_targetTemplates
) ;

//--- File 'teensy-3-1-sequential-systick/clean.py'

const char * gWrapperFileContent_21_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "#--- Directories to clean\n"
  "dir1 = scriptDir + \"/objects\"\n"
  "dir2 = scriptDir + \"/product\"\n"
  "dir3 = scriptDir + \"/as\"\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"rm\", \"-fr\", dir1, dir2, dir3], cwd=scriptDir)\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#----------------------------------------------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_21_targetTemplates (
  "clean.py",
  "py",
  true, // Text file
  1264, // Text length
  gWrapperFileContent_21_targetTemplates
) ;

//--- File 'teensy-3-1-sequential-systick/display-obj-dump.py'

const char * gWrapperFileContent_22_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"object-dump\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_22_targetTemplates (
  "display-obj-dump.py",
  "py",
  true, // Text file
  1005, // Text length
  gWrapperFileContent_22_targetTemplates
) ;

//--- File 'teensy-3-1-sequential-systick/display-obj-size.py'

const char * gWrapperFileContent_23_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"display-object-size\"])\n"
  "#--- Wait for subprocess termination\n"
  "if childProcess.poll () == None :\n"
  "  childProcess.wait ()\n"
  "if childProcess.returncode != 0 :\n"
  "  sys.exit (childProcess.returncode)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_23_targetTemplates (
  "display-obj-size.py",
  "py",
  true, // Text file
  1013, // Text length
  gWrapperFileContent_23_targetTemplates
) ;

//--- File 'teensy-3-1-sequential-systick/flash-and-run.py'

const char * gWrapperFileContent_24_targetTemplates = "#! /usr/bin/env python\n"
  "# -*- coding: UTF-8 -*-\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "# https://docs.python.org/2/library/subprocess.html#module-subprocess\n"
  "\n"
  "import subprocess\n"
  "import sys\n"
  "import os\n"
  "import atexit\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "def cleanup():\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.kill ()\n"
  "\n"
  "#------------------------------------------------------------------------------*\n"
  "\n"
  "#--- Register a function for killing subprocess\n"
  "atexit.register (cleanup)\n"
  "#--- Get script absolute path\n"
  "scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))\n"
  "os.chdir (scriptDir)\n"
  "#---\n"
  "childProcess = subprocess.Popen ([\"python\", \"build.py\", \"run\"])\n"
  "#--- Wait for subprocess termination\n"
  "try:\n"
  "  if childProcess.poll () == None :\n"
  "    childProcess.wait ()\n"
  "  if childProcess.returncode != 0 :\n"
  "    sys.exit (childProcess.returncode)\n"
  "except :\n"
  "    sys.exit (1)\n"
  "\n"
  "#------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_24_targetTemplates (
  "flash-and-run.py",
  "py",
  true, // Text file
  1036, // Text length
  gWrapperFileContent_24_targetTemplates
) ;

//--- File 'sources/linker-script.ld'

const char * gWrapperFileContent_25_targetTemplates = "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                   Memory                                   */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "MEMORY {\n"
  "  flash (rx) : ORIGIN = 0, LENGTH = 256k \n"
  "  sram_u (rwx) : ORIGIN = 0x20000000, LENGTH = 32k \n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "__sram_u_end = 0x20000000 + 32k ;\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                ISR Vectors                                 */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .vectors : {\n"
  "    __vectors_start = . ;\n"
  "    KEEP (*(.isr_vector)) ;\n"
  "    __vectors_end = . ;\n"
  "  } > flash\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                    Code                                    */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .text : {\n"
  "    FILL(0xff)\n"
  "    __code_start = . ;\n"
  "  /*--- Tableau des routines d'initialisation */\n"
  "    . = ALIGN (4) ;\n"
  "    __init_routine_array_start = . ;\n"
  "    KEEP (*(init_routine_array)) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __init_routine_array_end = . ;\n"
  "  /*--- Initialisation des objets globaux C++ */\n"
  "    . = ALIGN (4) ;\n"
  "    __constructor_array_start = . ;\n"
  "    KEEP (*(.init_array)) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __constructor_array_end = . ;\n"
  "  /*--- Real Interrupt Service Routine Array */\n"
  "    . = ALIGN (4) ;\n"
  "    __real_time_isr_array_start = . ;\n"
  "    KEEP (*(real_time_isr_array)) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __real_time_isr_array_end = . ;\n"
  "  /*--- Code */\n"
  "    *(.text.*) ;\n"
  "    *(.text) ;\n"
  "    *(text) ;\n"
  "    *(.gnu.linkonce.t.*) ;\n"
  "  /*---- ROM data ----*/\n"
  "    . = ALIGN(4);\n"
  "    *(.rodata);\n"
  "    . = ALIGN(4);\n"
  "    *(.rodata*);\n"
  "    . = ALIGN(4);\n"
  "    *(.gnu.linkonce.r.*);\n"
  "    . = ALIGN(4);\n"
  "    *(.glue_7t);\n"
  "    . = ALIGN(4);\n"
  "    *(.glue_7);\n"
  "    . = ALIGN(4);\n"
  "  } > flash\n"
  "\n"
  "  .ARM.exidx : {\n"
  "    *(.ARM.exidx* .gnu.linkonce.armexidx.*);\n"
  "    __code_end = . ;\n"
  "  } > flash\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                          Data (initialized data)                           */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .data : {\n"
  "    FILL (0xFF)\n"
  "    . = ALIGN (4) ;\n"
  "    __data_start = . ;\n"
  "    * (.data.*init*) ;\n"
  "    * (.data*) ;\n"
  "    . = ALIGN (4) ;\n"
  "    __data_end = . ;\n"
  "  } > sram_u AT > flash\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "__data_load_start = LOADADDR (.data) ;\n"
  "__data_load_end   = LOADADDR (.data) + SIZEOF (.data) ;\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                          BSS (uninitialized data)                          */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .bss : {\n"
  "    . = ALIGN(4);\n"
  "    __bss_start = . ;\n"
  "    * (.bss.*) ;\n"
  "    * (.bss) ;\n"
  "    * (COMMON) ;\n"
  "    . = ALIGN(4);\n"
  "    __bss_end = . ;\n"
  "  } > sram_u\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                System stack                                */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .system_stack :{\n"
  "    . = ALIGN (4) ;\n"
  "    __system_stack_start = . ;\n"
  "    . += 1k ;\n"
  "    . = ALIGN (4) ;\n"
  "    __system_stack_end = . ;\n"
  "  } > sram_u\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "/*                                                                            */\n"
  "/*                                    Heap                                    */\n"
  "/*                                                                            */\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "SECTIONS {\n"
  "  .heap : {\n"
  "    . = ALIGN (4) ;\n"
  "    __heap_start = . ;\n"
  "  } > sram_u\n"
  "}\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n"
  "\n"
  "__heap_end = __sram_u_end ;\n"
  "\n"
  "/*----------------------------------------------------------------------------*/\n" ;

const cRegularFileWrapper gWrapperFile_25_targetTemplates (
  "linker-script.ld",
  "ld",
  true, // Text file
  5218, // Text length
  gWrapperFileContent_25_targetTemplates
) ;

//--- File 'sources/target-exception.c'

const char * gWrapperFileContent_26_targetTemplates = "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "static void raise_exception (const type_Int32 inCode,\n"
  "                             const char * inSourceFile,\n"
  "                             const type_UInt32 inSourceLine) {\n"
  " //--- Mask interrupt: write 1 into FAULTMASK register\n"
  "  const uint32_t maskValue = 1 ;\n"
  "  __asm__ (\"msr FAULTMASK, %[reg]\" : : [reg]\"r\"(maskValue));\n"
  "  raise_exception_internal (inCode, inSourceFile, inSourceLine) ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_26_targetTemplates (
  "target-exception.c",
  "c",
  true, // Text file
  634, // Text length
  gWrapperFileContent_26_targetTemplates
) ;

//--- File 'sources/target.c'

const char * gWrapperFileContent_27_targetTemplates = "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "static void ResetISR (void) {\n"
  "//---------1- Boot routines\n"
  "  boot () ;\n"
  "  // now we're in PEE mode\n"
  "  // configure USB for 48 MHz clock\n"
  "//  SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1); // USB = 96 MHz PLL / 2\n"
  "  // USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0\n"
  "//  SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);\n"
  "\n"
  "//---------2- Initialisation de la section .bss\n"
  "  extern unsigned __bss_start ;\n"
  "  extern unsigned __bss_end ;\n"
  "  unsigned * p = & __bss_start ;\n"
  "  while (p != & __bss_end) {\n"
  "    * p = 0 ;\n"
  "    p ++ ;\n"
  "  }\n"
  "//---------3- Copy de la section .data\n"
  "  extern unsigned __data_start ;\n"
  "  extern unsigned __data_end ;\n"
  "  extern unsigned __data_load_start ;\n"
  "  unsigned * pSrc = & __data_load_start ;\n"
  "  unsigned * pDest = & __data_start ;\n"
  "  while (pDest != & __data_end) {\n"
  "    * pDest = * pSrc ;\n"
  "    pDest ++ ;\n"
  "    pSrc ++ ;\n"
  "  }\n"
  "//---------4- Init Routines\n"
  "  init () ;\n"
  "//---------5- User routines\n"
  "  proc_setup () ;\n"
  "  while (1) {\n"
  "    proc_loop () ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "//   Vector table                                                                                                      *\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "typedef struct {\n"
  "  unsigned * mStackPointer ;\n"
  "//--- ARM Core System Handler Vectors\n"
  "  void (* mCoreSystemHandlerVector [15]) (void) ;\n"
  "//--- Non-Core Vectors\n"
  "  void (* mNonCoreHandlerVector [240]) (void) ;\n"
  "//--- Flash magic values\n"
  "  int mFlash [4] ;\n"
  "} vectorStructSeq ;\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "extern unsigned __system_stack_end ;\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n"
  "\n"
  "const vectorStructSeq vector __attribute__ ((section (\".isr_vector\"))) = {\n"
  "  & __system_stack_end, // 0\n"
  "//--- ARM Core System Handler Vectors\n"
  "  { ResetISR, // 1\n"
  "    NULL, // 2\n"
  "    NULL, // 3\n"
  "    NULL, // 4\n"
  "    NULL, // 5\n"
  "    NULL, // 6\n"
  "    NULL, // 7 (reserved)\n"
  "    NULL, // 8 (reserved)\n"
  "    NULL, // 9 (reserved)\n"
  "    NULL, // 10 (reserved)\n"
  "    NULL, // 11\n"
  "    NULL, // 12\n"
  "    NULL, // 13 (reserved)\n"
  "    NULL, // 14\n"
  "    proc_systickHandler // 15\n"
  "  },\n"
  "//--- Non-Core Vectors\n"
  "  { NULL, // 16\n"
  "    NULL, // 17\n"
  "    NULL, // 18\n"
  "    NULL, // 19\n"
  "    NULL, // 20\n"
  "    NULL, // 21\n"
  "    NULL, // 22\n"
  "    NULL, // 23\n"
  "    NULL, // 24\n"
  "    NULL, // 25\n"
  "    NULL, // 26\n"
  "    NULL, // 27\n"
  "    NULL, // 28\n"
  "    NULL, // 29\n"
  "    NULL, // 30\n"
  "    NULL, // 31\n"
  "    NULL, // 32\n"
  "    NULL, // 33\n"
  "    NULL, // 34\n"
  "    NULL, // 35\n"
  "    NULL, // 36\n"
  "    NULL, // 37\n"
  "    NULL, // 38\n"
  "    NULL, // 39\n"
  "    NULL, // 40\n"
  "    NULL, // 41\n"
  "    NULL, // 42\n"
  "    NULL, // 43\n"
  "    NULL, // 44\n"
  "    NULL, // 45\n"
  "    NULL, // 46\n"
  "    NULL, // 47\n"
  "    NULL, // 48\n"
  "    NULL, // 49\n"
  "    NULL, // 50\n"
  "    NULL, // 51\n"
  "    NULL, // 52\n"
  "    NULL, // 53\n"
  "    NULL, // 54\n"
  "    NULL, // 55\n"
  "    NULL, // 56\n"
  "    NULL, // 57\n"
  "    NULL, // 58\n"
  "    NULL, // 59\n"
  "    NULL, // 60\n"
  "    NULL, // 61\n"
  "    NULL, // 62\n"
  "    NULL, // 63\n"
  "    NULL, // 64\n"
  "    NULL, // 65\n"
  "    NULL, // 66\n"
  "    NULL, // 67\n"
  "    NULL, // 68\n"
  "    NULL, // 69\n"
  "    NULL, // 70\n"
  "    NULL, // 71\n"
  "    NULL, // 72\n"
  "    NULL, // 73\n"
  "    NULL, // 74\n"
  "    NULL, // 75\n"
  "    NULL, // 76\n"
  "    NULL, // 77\n"
  "    NULL, // 78\n"
  "    NULL, // 79\n"
  "    NULL, // 80\n"
  "    NULL, // 81\n"
  "    NULL, // 82\n"
  "    NULL, // 83\n"
  "    NULL, // 84\n"
  "    NULL, // 85\n"
  "    NULL, // 86\n"
  "    NULL, // 87\n"
  "    NULL, // 88\n"
  "    NULL, // 89\n"
  "    NULL, // 90\n"
  "    NULL, // 91\n"
  "    NULL, // 92\n"
  "    NULL, // 93\n"
  "    NULL, // 94\n"
  "    NULL, // 95\n"
  "    NULL, // 96\n"
  "    NULL, // 97\n"
  "    NULL, // 98\n"
  "    NULL, // 99\n"
  "    NULL, // 100\n"
  "    NULL, // 101\n"
  "    NULL, // 102\n"
  "    NULL, // 103\n"
  "    NULL, // 104\n"
  "    NULL, // 105\n"
  "    NULL, // 106\n"
  "    NULL, // 107\n"
  "    NULL, // 108\n"
  "    NULL, // 109\n"
  "    NULL, // 110\n"
  "    NULL, // 111\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 112 \xC3""\xA0"" 127\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 128 \xC3""\xA0"" 143\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 143 \xC3""\xA0"" 159\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 160 \xC3""\xA0"" 175\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 176 \xC3""\xA0"" 191\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 192 \xC3""\xA0"" 207\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 208 \xC3""\xA0"" 223\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, // 224 \xC3""\xA0"" 239\n"
  "    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL  // 240 \xC3""\xA0"" 255\n"
  "  },\n"
  "//--- Flash magic values\n"
  "  {-1, -1, -1, -2}\n"
  "} ;\n"
  "\n"
  "//---------------------------------------------------------------------------------------------------------------------*\n" ;

const cRegularFileWrapper gWrapperFile_27_targetTemplates (
  "target.c",
  "c",
  true, // Text file
  5256, // Text length
  gWrapperFileContent_27_targetTemplates
) ;

//--- All files of 'sources' directory

static const cRegularFileWrapper * gWrapperAllFiles_targetTemplates_5 [4] = {
  & gWrapperFile_25_targetTemplates,
  & gWrapperFile_26_targetTemplates,
  & gWrapperFile_27_targetTemplates,
  NULL
} ;

//--- All sub-directories of 'sources' directory

static const cDirectoryWrapper * gWrapperAllDirectories_targetTemplates_5 [1] = {
  NULL
} ;

//--- Directory 'sources'

const cDirectoryWrapper gWrapperDirectory_5_targetTemplates (
  "sources",
  3,
  gWrapperAllFiles_targetTemplates_5,
  0,
  gWrapperAllDirectories_targetTemplates_5
) ;

//--- All files of 'teensy-3-1-sequential-systick' directory

static const cRegularFileWrapper * gWrapperAllFiles_targetTemplates_4 [8] = {
  & gWrapperFile_18_targetTemplates,
  & gWrapperFile_19_targetTemplates,
  & gWrapperFile_20_targetTemplates,
  & gWrapperFile_21_targetTemplates,
  & gWrapperFile_22_targetTemplates,
  & gWrapperFile_23_targetTemplates,
  & gWrapperFile_24_targetTemplates,
  NULL
} ;

//--- All sub-directories of 'teensy-3-1-sequential-systick' directory

static const cDirectoryWrapper * gWrapperAllDirectories_targetTemplates_4 [2] = {
  & gWrapperDirectory_5_targetTemplates,
  NULL
} ;

//--- Directory 'teensy-3-1-sequential-systick'

const cDirectoryWrapper gWrapperDirectory_4_targetTemplates (
  "teensy-3-1-sequential-systick",
  7,
  gWrapperAllFiles_targetTemplates_4,
  1,
  gWrapperAllDirectories_targetTemplates_4
) ;

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_targetTemplates_0 [4] = {
  & gWrapperFile_0_targetTemplates,
  & gWrapperFile_1_targetTemplates,
  & gWrapperFile_2_targetTemplates,
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_targetTemplates_0 [4] = {
  & gWrapperDirectory_1_targetTemplates,
  & gWrapperDirectory_2_targetTemplates,
  & gWrapperDirectory_4_targetTemplates,
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_targetTemplates (
  "",
  3,
  gWrapperAllFiles_targetTemplates_0,
  3,
  gWrapperAllDirectories_targetTemplates_0
) ;


