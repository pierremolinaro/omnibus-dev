#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @addressofExpressionAST : @expressionAST {
  @LValueAST mLValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    $addressof$
    $($
    <lvalue> !?ioAST ?let lvalue
    $)$
    outExpression = @addressofExpressionAST.new {!lvalue}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @addressofExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring unused inConstantName
  ?!@semanticTypePrecedenceGraph unused ioGraph
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @addressofExpressionAST noteExpressionTypesInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [self.mLValue noteInstructionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @addressofExpressionAST analyzeExpression
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?optionalTargetType:let @omnibusType unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
  if [inRoutineAttributes guard] then
    error self.mLValue.mIdentifier : "addressof () cannot be used in guard" : outResult
  else
  #--- Analyze LValue
    [self.mLValue analyzeLValue
      !self: inSelfType
      !forAddressOf:true
      !routineAttributes:inRoutineAttributes
      !context: inContext
      !mode: inMode
      !?temporary: ioTemporaries
      !?staticEntityMap:ioStaticEntityMap
      !?variableMap:ioUniversalMap
      !?alloca: ioAllocaList
      !?instructionListIR: ioInstructionGenerationList
      ?let @LValueRepresentation lvalueIR
    ]
    let resultTypeProxy = @unifiedTypeMap-proxy.searchKey {
      !inContext.mTypeMap
      !["u" + [inContext.mTargetParameters.mPointerSize string] nowhere]
    }
    let resultType = [resultTypeProxy type]
    getNewTempValue (!resultType !?ioTemporaries ?outResult)
    ioInstructionGenerationList += !@addressofInstructionIR.new {
      !outResult
      !lvalueIR
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @addressofInstructionIR : @abstractInstructionIR {
  @objectIR mTarget
  @LValueRepresentation mLValue
}

#·······················································································································

override method @addressofInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "  " + [self.mTarget llvmName] + " = ptrtoint " + [self.mLValue.type llvmTypeName] + "* " + self.mLValue.llvmName
             + " to " + [self.mTarget llvmTypeName] + " ; addressof\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
