#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @enumerationConstantList {
  @lstring mConstantName
  @bigint mConstantValue
}

#·······················································································································

class @enumerationDeclaration : @abstractDeclarationAST {
  @lstring mEnumerationName
  @enumerationConstantList mCaseNameList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $enum$
    $\$type$ ?let enumName
    ${$
    @enumerationConstantList enumCaseList = {}
    var idx = 0G
    repeat
      $case$
      $identifier$ ?let constantName
      enumCaseList += !constantName !idx
      idx = idx + 1
    while
    end
    $}$
    ioAST.mDeclarationListAST += !@enumerationDeclaration.new {!enumName !enumCaseList}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclaration addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  ?!@extendStaticArrayDeclarationAST unused ioExtendStaticArrayDeclarationAST
  !@abstractDeclarationAST outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let typeName = llvmRegularTypeMangledNameFromName (!mEnumerationName)
  [!?ioGraph addNode !typeName !self]
  [!?ioGraph addEdge !typeName !llvmRegularTypeMangledNameFromName (![boolTypeName () nowhere])]
#--- Mark dependance from $uintN used for value property
  @bigint maxValue = 0G
  for (* value) in mCaseNameList do
    if maxValue < value then
      maxValue = value
    end
  end
  @uint representationBitCount = 0
  loop (@uint.max) while maxValue > 0G do
    representationBitCount ++ ;
    maxValue = maxValue / 2G
  end
  [!?ioGraph addEdge !typeName !llvmRegularTypeMangledNameFromName (!["uint" + representationBitCount nowhere])]
}

#·······················································································································

override getter @enumerationDeclaration location -> @location outLocation {
  outLocation = mEnumerationName.location
}

#·······················································································································

override getter @enumerationDeclaration keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "enum $" + mEnumerationName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  UTILITIES                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func integerEnumAccessorName ?forBitCount:let @uint inBitCount -> @string {
  result = "uint" + inBitCount
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @constantMap {
  @bigint mIndex
  @lstring mClassTypeName
  insert insertKey error message "the '%K' constant is already declared"
  search searchKey error message "there is no '%K' constant"
}

#·······················································································································

override method @enumerationDeclaration enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@subprogramInvocationGraph ioSubprogramInvocationGraph
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
#--- Build constant map
  @constantMap enumConstantMap = {}
  @bigint maxValue = 0G
  for (name value) in mCaseNameList do
    [!?enumConstantMap insertKey !name !value !mEnumerationName]
    if maxValue < value then
      maxValue = value
    end
  end
#--- Compute representation bit count
  @uint representationBitCount = 0
  loop (@uint.max) while maxValue > 0G do
    representationBitCount ++ ;
    maxValue = maxValue / 2G
  end
#---------------- Property map
  @propertyMap propertyMap = {}
  let integerTypeProxy = @unifiedTypeMap-proxy.searchKey {
    !ioContext.mTypeMap
    !.new {!"uint" + representationBitCount !mEnumerationName}
  }
  [!?propertyMap addFunction
    !receiverTypeName:mEnumerationName
    !methodName:integerEnumAccessorName (!forBitCount:representationBitCount)
    !resultTypeProxy:integerTypeProxy
    !?ioSubprogramInvocationGraph
  ]
#--- Insert enumeration in type map
  let enumerationType = @PLMType.new {
    !propertyMap
    !enumConstantMap
    !{}
    !.all
    !mEnumerationName
    !.enumeration {!bitCount:representationBitCount}
  }
  [!?ioContext.mTypeMap insertType
    !lkey:mEnumerationName
    !type:enumerationType
    !index:[ioContext.mTypeMap count]
  ]
#--- Infix operators
  enterEnumerationComparisonOperators (!typeName:mEnumerationName !?context:ioContext)
}

#·······················································································································

proc enterEnumerationComparisonOperators
  ?typeName:@lstring inTypeName
  ?!context:@semanticContext ioContext
{
  let key = combineTypeNamesForInfixOperator (!inTypeName.string !inTypeName.string)
  [!?ioContext.mEqualOperatorMap insertKey
    !key
    !booleanType ()
    !@infixObjectObjectOperatorDescription.new {!.icmp_eq}
  ]
  [!?ioContext.mNonEqualOperatorMap insertKey
    !key
    !booleanType ()
    !@infixObjectObjectOperatorDescription.new {!.icmp_ne}
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !key
    !booleanType ()
    !@infixObjectObjectOperatorDescription.new {!.icmp_ult}
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !key
    !booleanType ()
    !@infixObjectObjectOperatorDescription.new {!.icmp_ule}
  ]
  [!?ioContext.mStrictSupOperatorMap insertKey
    !key
    !booleanType ()
    !@infixObjectObjectOperatorDescription.new {!.icmp_ugt}
  ]
  [!?ioContext.mSupEqualOperatorMap insertKey
    !key
    !booleanType ()
    !@infixObjectObjectOperatorDescription.new {!.icmp_uge}
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclaration semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  @bigint maxValue = 0G
  for (* value) in mCaseNameList do
    if maxValue < value then
      maxValue = value
    end
  end
#--- Compute representation bit count
  @uint representationBitCount = 0
  loop (@uint.max) while maxValue > 0G do
    representationBitCount ++ ;
    maxValue = maxValue / 2G
  end
#--- Mangled routine name
  let routineMangledName = routineMangledNameFromAST (
    !"$" + mEnumerationName
    !.new {!"uint" !mEnumerationName}
    !{}
  )
#--- Enter subprogram invocation graph
  if not [ioTemporaries.mSubprogramInvocationGraph isNodeDefined !routineMangledName.string] then
    [!?ioTemporaries.mSubprogramInvocationGraph addNode
      !routineMangledName
      !routineMangledName
    ]
  end
  ioIntermediateCodeStruct.mGenerationListIR += !@enumerationIR.new {!mEnumerationName !representationBitCount}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @enumerationIR : @abstractGenerationIR {
  @lstring mEnumerationName
  @uint mBitCount
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationIR generateLLVMcode ?!@string ioLLVMcode  ?!@generationAdds unused ioGenerationAdds {
  let routineMangledName = routineMangledNameFromAST (
    !"$" + mEnumerationName
    !.new {!integerEnumAccessorName (!forBitCount:mBitCount) !mEnumerationName}
    !{}
  )
  let routineLLVMName = llvmNameForFunction (!routineMangledName.string)
  let type = "i" + mBitCount
  ioLLVMcode += llvmTitleComment (!routineMangledName)
  ioLLVMcode += "define internal " + type + "  @" + routineLLVMName + " (" + type + "* %inValue) nounwind {\n"
  ioLLVMcode += "  %r = load " + type + ", " + type + "* %inValue\n"
  ioLLVMcode += "  ret " + type + " %r\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

