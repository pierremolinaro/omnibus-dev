#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @enumerationConstantList {
  @lstring mConstantName
  @bigint mConstantValue
}

#·······················································································································

class @enumerationDeclarationAST : @abstractDeclarationAST {
  @lstring mEnumerationName
  @enumerationConstantList mCaseNameList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $enum$
    $\$type$ ?let enumName
    ${$
    @enumerationConstantList enumCaseList = {}
    var idx = 0G
    repeat
      $case$
      $identifier$ ?let constantName
      enumCaseList += !constantName !idx
      idx = idx + 1
    while
    end
    $}$
    ioAST.mDeclarationListAST += !@enumerationDeclarationAST.new {!enumName !enumCaseList}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclarationAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addNode !mEnumerationName !self]
  [!?ioGraph addEdge !mEnumerationName ![boolTypeName () nowhere]]
#--- Mark dependance from $uintN used for value property
  @bigint maxValue = 0G
  for (* value) in mCaseNameList do
    if maxValue < value then
      maxValue = value
    end
  end
  @uint representationBitCount = 0
  loop (@uint.max) while maxValue > 0G do
    representationBitCount ++ ;
    maxValue = maxValue / 2G
  end
  [!?ioGraph addEdge !mEnumerationName !["$uint" + representationBitCount nowhere]]
}

#·······················································································································

override getter @enumerationDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = mEnumerationName.location
}

#·······················································································································

override getter @enumerationDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "enum $" + mEnumerationName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  UTILITIES                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func integerEnumAccessorName ?forBitCount:let @uint inBitCount -> @string {
  result = "uint" + inBitCount # No leading '$' !!!
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @classConstantMap {
  @bigint mIndex
  @lstring mClassTypeName
  insert insertKey error message "the '%K' constant is already declared"
  search searchKey error message "there is no '%K' constant"
}

#·······················································································································

override method @enumerationDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@subprogramInvocationGraph ioSubprogramInvocationGraph
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!globalVariables:@globalVariableIRList unused ioGlobalVariableIRList
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
{
#---------------- Build constant map
  @classConstantMap enumConstantMap = {}
  @bigint maxValue = 0G
  for (name value) in mCaseNameList do
    [!?enumConstantMap insertKey !name !value !mEnumerationName]
    if maxValue < value then
      maxValue = value
    end
  end
#---------------- Compute representation bit count
  @uint representationBitCount = 0
  loop (@uint.max) while maxValue > 0G do
    representationBitCount ++ ;
    maxValue = maxValue / 2G
  end
#---------------- Property map: add uintN() accessor
  @propertyMap propertyMap = {}
  let integerTypeProxy = @unifiedTypeMap-proxy.searchKey {
    !ioContext.mTypeMap
    !.new {!"$uint" + representationBitCount !mEnumerationName}
  }
#  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !mEnumerationName ?let enumTypeProxy]
  [!?propertyMap addFunctionWithoutArgument
    !?ioSubprogramInvocationGraph
    !llvmBaseTypeName:mEnumerationName
    !methodName:integerEnumAccessorName (!forBitCount:representationBitCount)
    !safe:true
    !resultTypeProxy:integerTypeProxy
    !canMutateProperties:false
  ]
#---------------- Insert enumeration in type map
  let enumerationType = @PLMType.new {
    !propertyMap:propertyMap
    !classConstantMap:enumConstantMap
    !constructorMap:{}
    !guardMap:{}
    !attributes:.instanciable | .equatable | .copyable
    !plmTypeDescriptionName:mEnumerationName
    !kind:.enumeration {!bitCount:representationBitCount}
    !llvmBaseTypeName:mEnumerationName
  }
  [!?ioContext.mTypeMap insertType
    !lkey:mEnumerationName
    !type:enumerationType
    !index:[ioContext.mTypeMap count]
    !generate:true
  ]
#---------------- Infix operators
  enterEnumerationComparisonOperators (!typeName:mEnumerationName !?context:ioContext)
}

#·······················································································································

proc enterEnumerationComparisonOperators
  ?typeName:@lstring inTypeName
  ?!context:@semanticContext ioContext
{
  let key = combineTypeNamesForInfixOperator (!inTypeName.string !inTypeName.string)
  let booleanType = [ioContext booleanType]
  [!?ioContext.mEqualOperatorMap insertKey
    !key
    !booleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_eq}
  ]
  [!?ioContext.mNonEqualOperatorMap insertKey
    !key
    !booleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ne}
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !key
    !booleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ult}
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !key
    !booleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ule}
  ]
  [!?ioContext.mStrictSupOperatorMap insertKey
    !key
    !booleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ugt}
  ]
  [!?ioContext.mSupEqualOperatorMap insertKey
    !key
    !booleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_uge}
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateLLVMcodeForEnumeration
  ?!@string ioLLVMcode
  ?!@generationAdds unused ioGenerationAdds
  ?let @PLMType inType
  ?let @uint inBitCount
{
  let llvmTypeName = [inType llvmTypeName]
  let llvmBaseTypeName = inType.llvmBaseTypeName
#--- Conversion to uintN
  let routineMangledName = routineMangledNameFromAST (
    !llvmBaseTypeName
    !.new {!integerEnumAccessorName (!forBitCount:inBitCount) !.nowhere}
    !{}
  )
  let routineLLVMName = llvmNameForFunction (!routineMangledName.string)
  ioLLVMcode += llvmTitleComment (!routineMangledName)
  ioLLVMcode += "define internal " + llvmTypeName + "  @" + routineLLVMName + " (" + llvmTypeName + "* %inValue) nounwind {\n"
  ioLLVMcode += "  %r = load " + llvmTypeName + ", " + llvmTypeName + "* %inValue\n"
  ioLLVMcode += "  ret " + llvmTypeName + " %r\n"
  ioLLVMcode += "}\n\n"
#--- Assignment
  ioLLVMcode += "define internal void @plm.assign." + llvmBaseTypeName + "." + llvmBaseTypeName
  ioLLVMcode += " (" + llvmTypeName + "* %target, " + llvmTypeName + "*%source) {\n"
  ioLLVMcode += "  %value = load " + llvmTypeName + ", " + llvmTypeName + "* %source\n"
  ioLLVMcode += "  store " + llvmTypeName + " %value, " + llvmTypeName + "* %target\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

