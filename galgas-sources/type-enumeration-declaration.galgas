#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @enumerationConstantList {
  @lstring mConstantName
  @bigint mConstantValue
}

#·······················································································································

shared class @enumerationDeclarationAST : @abstractDeclarationAST {
  @lstring mEnumerationName
  @enumerationConstantList mCaseNameList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $enum$
    $\$type$ ?let enumerationName
    ${$
    @enumerationConstantList enumCaseList = {}
    var idx = 0G
    repeat
      $case$
      $identifier$ ?let constantName
      enumCaseList += !constantName !idx
      idx = idx + 1
    while
    end
    $}$
    ioAST.mDeclarationListAST += !@enumerationDeclarationAST.new {!enumerationName !enumCaseList}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclarationAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addNode !self.mEnumerationName !self]
#--- Mark dependance from $uintN used for value property
  @bigint maxValue = 0G
  for (* value) in self.mCaseNameList do
    if maxValue < value then
      maxValue = value
    end
  end
  @uint representationBitCount = 0
  loop (@uint.max) while maxValue > 0G do
    representationBitCount ++ ;
    maxValue = maxValue / 2G
  end
  [!?ioGraph addEdge !self.mEnumerationName !["u" + representationBitCount nowhere]]
}

#·······················································································································

override getter @enumerationDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = self.mEnumerationName.location
}

#·······················································································································

override getter @enumerationDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "enum " + self.mEnumerationName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclarationAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
#---------------- Build constant map
  @constantMap enumConstantMap = {}
  @bigint maxValue = 0G
  for (name value) in self.mCaseNameList do
    [!?enumConstantMap insertKey !name !value !self.mEnumerationName]
    if maxValue < value then
      maxValue = value
    end
  end
  [!?ioContext.mTypeConstantMap insertKey
    !self.mEnumerationName
    !enumConstantMap
  ]
#---------------- Compute representation bit count
  @uint representationBitCount = 0
  loop (@uint.max) while maxValue > 0G do
    representationBitCount ++ ;
    maxValue = maxValue / 2G
  end
#---------------- Property map: add uintN() accessor
  let integerTypeProxy = @unifiedTypeMap-entry.searchKey {
    !ioContext.mTypeMap
    !.new {!"u" + representationBitCount !self.mEnumerationName}
  }
  [!?ioContext addComputedPropertyGetter
    !omnibusTypeName: self.mEnumerationName
    !llvmBaseTypeName:self.mEnumerationName
    !propertyName: .new {!"u" + representationBitCount !self.mEnumerationName}
    !mode:.anySafeMode
    !visibility: .isPublic
    !resultTypeProxy:integerTypeProxy
    ?routineLLVMName: let conversionToUIntN
  ]
  ioRoutineListIR += !@enumToUintRoutineIR.new {
    !conversionToUIntN
    !isRequired:false
    !warnsIfUnused:false
    !"i" + representationBitCount # enumerationType llvmTypeName]
  }
#---------------- Insert enumeration in type map
  let enumerationType = @omnibusType.new {
#    !propertyGetterMap: propertyGetterMap
    !subscript:.noSubscript
    !attributes:.instanciable | .copyable
    !omnibusTypeDescriptionName: self.mEnumerationName
    !kind:.enumeration {!bitCount:representationBitCount}
    !llvmBaseTypeName: self.mEnumerationName
  }
  [!?ioContext.mTypeMap insertType !lkey:self.mEnumerationName !type:enumerationType]
#--- Enter assignment operator
  let key = assignmentOperatorKey (!enumerationType !self.mEnumerationName.location !enumerationType)
  [!?ioContext.mAssignmentOperatorMap insertKey !key !@simpleCopyAssignmentOperatorUsage.new]
#---------------- Infix operators
#  enterEnumerationComparisonOperators (!typeName:mEnumerationName !?context:ioContext)
  let boolType = boolType ()
#--- Enter == infix operator
  addIntegerInfixOperator (!.equal !enumerationType !"icmp eq" !?ioContext.mInfixOperatorMap !boolType)
#--- Enter ≤ infix operator
  addIntegerInfixOperator (
    !.infEqual
    !enumerationType
    !"icmp ule"
    !?ioContext.mInfixOperatorMap
    !boolType
  )
#--- Enter < infix operator
  addIntegerInfixOperator (
    !.lessThan
    !enumerationType
    !"icmp ult"
    !?ioContext.mInfixOperatorMap
    !boolType
  )
}

#·······················································································································

#proc enterEnumerationComparisonOperators
#  ?typeName:@lstring inTypeName
#  ?!context:@semanticContext ioContext
#{
#  let key = combineTypeNamesForInfixOperator (!inTypeName.string !inTypeName.string)
#  let booleanType = [ioContext booleanType !.nowhere]
#  [!?ioContext.mEqualOperatorMap insertKey
#    !key
#    !booleanType
#    !@infixObjectObjectOperatorDescription.new {!.icmp_eq}
#  ]
#  [!?ioContext.mStrictInfOperatorMap insertKey
#    !key
#    !booleanType
#    !@infixObjectObjectOperatorDescription.new {!.icmp_ult}
#  ]
#  [!?ioContext.mInfEqualOperatorMap insertKey
#    !key
#    !booleanType
#    !@infixObjectObjectOperatorDescription.new {!.icmp_ule}
#  ]
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @enumToUintRoutineIR : @abstractRoutineIR {
  @string mEnumerationLLVMTypeName
}

#·······················································································································

override method @enumToUintRoutineIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let routineLLVMName = llvmNameForFunction (!self.mRoutineMangledName.string)
  ioLLVMcode += "define internal " + self.mEnumerationLLVMTypeName + " @" + routineLLVMName
  ioLLVMcode += " (" + self.mEnumerationLLVMTypeName + "* %inValue) nounwind {\n"
  ioLLVMcode += "  %r = load " + self.mEnumerationLLVMTypeName + ", " + self.mEnumerationLLVMTypeName + "* %inValue\n"
  ioLLVMcode += "  ret " + self.mEnumerationLLVMTypeName + " %r\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

