#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @enumerationDeclaration : @abstractDeclaration {
  @lstring mEnumerationName
#  @lstringlist mAttributeList
  @lstringlist mCaseNameList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @enumerationDeclaration location -> @location outLocation {
  outLocation = mEnumerationName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $enum$
    $\$type$ ?let enumName
#    @lstringlist attributeList = {}
#    repeat
#    while
#      $@attribute$ ?let attribute
#      attributeList += !attribute
#    end 
    ${$
    @lstringlist enumCaseList = {}
    repeat
      $case$
      $identifier$ ?let constantName
      enumCaseList += !constantName
    while
    end
    $}$
    ioAST.mDeclarationListAST += !@enumerationDeclaration.new {
      !enumName
#      !attributeList
      !enumCaseList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclaration addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  !@abstractDeclaration outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let typeName = llvmRegularTypeMangledNameFromName (!mEnumerationName)
  [!?ioGraph addNode !typeName !self]
  [!?ioGraph addEdge !typeName !llvmRegularTypeMangledNameFromName (![boolTypeName () nowhere])]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @enumerationDeclaration keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "enum $" + mEnumerationName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @enumConstantMap {
  @uint mIndex
  insert insertKey error message "the '%K' constant is already declared"
  search searchKey error message "there is no '%K' constant"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclaration enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticlistValues:@staticlistValues_listMap unused ioStaticListValueMap
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
#---
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !mEnumerationName ?let selfType]
  @enumConstantMap enumConstantMap = {}
  @classConstantMap classConstantMap = {}
  for (cst) in mCaseNameList do
    let idx = [enumConstantMap count]
    [!?enumConstantMap insertKey !cst !idx]
    [!?classConstantMap insertKey !cst !.literalInteger {!type: selfType !value:[idx bigint]}]
  end
  [!?ioContext.mTypeMap insertType
    !lkey:mEnumerationName
    !kind:.enumeration {!constantMap:enumConstantMap !classConstantMap:classConstantMap}
  ]
#--- Infix operators
  enterEnumerationOperators (
    !integerTypeName:mEnumerationName
    !?context:ioContext
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclaration enterRoutinesInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext unused ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc enterEnumerationOperators
  ?integerTypeName:@lstring inEnumerationTypeName
  ?!context:@semanticContext ioContext
{
  let key = combineTypeNamesForInfixOperator (!inEnumerationTypeName.string !inEnumerationTypeName.string)
  [!?ioContext.mEqualOperatorMap insertKey
    !key
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_eq}
  ]
  [!?ioContext.mNonEqualOperatorMap insertKey
    !key
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ne}
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !key
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ult}
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !key
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ule}
  ]
  [!?ioContext.mStrictSupOperatorMap insertKey
    !key
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ugt}
  ]
  [!?ioContext.mSupEqualOperatorMap insertKey
    !key
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_uge}
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclaration semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

