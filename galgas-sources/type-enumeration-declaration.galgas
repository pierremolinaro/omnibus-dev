#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @enumerationConstantList {
  @lstring mConstantName
  @bigint mConstantValue
}

#·······················································································································

class @enumerationDeclarationAST : @abstractDeclarationAST {
  @lstring mEnumerationName
  @enumerationConstantList mCaseNameList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $enum$
    $\$type$ ?let enumName
    ${$
    @enumerationConstantList enumCaseList = {}
    var idx = 0G
    repeat
      $case$
      $identifier$ ?let constantName
      enumCaseList += !constantName !idx
      idx = idx + 1
    while
    end
    $}$
    ioAST.mDeclarationListAST += !@enumerationDeclarationAST.new {!enumName !enumCaseList}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclarationAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addNode !mEnumerationName !self]
  [!?ioGraph addEdge !mEnumerationName ![boolTypeName () nowhere]]
#--- Mark dependance from $uintN used for value property
  @bigint maxValue = 0G
  for (* value) in mCaseNameList do
    if maxValue < value then
      maxValue = value
    end
  end
  @uint representationBitCount = 0
  loop (@uint.max) while maxValue > 0G do
    representationBitCount ++ ;
    maxValue = maxValue / 2G
  end
  [!?ioGraph addEdge !mEnumerationName !["uint" + representationBitCount nowhere]]
}

#·······················································································································

override getter @enumerationDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = mEnumerationName.location
}

#·······················································································································

override getter @enumerationDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "enum " + mEnumerationName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @classConstantMap {
  @bigint mIndex
  @lstring mClassTypeName
  insert insertKey error message "the '%K' constant is already declared"
  search searchKey error message "there is no '%K' constant"
}

#·······················································································································

override method @enumerationDeclarationAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
#---------------- Build constant map
  @classConstantMap enumConstantMap = {}
  @bigint maxValue = 0G
  for (name value) in mCaseNameList do
    [!?enumConstantMap insertKey !name !value !mEnumerationName]
    if maxValue < value then
      maxValue = value
    end
  end
#---------------- Compute representation bit count
  @uint representationBitCount = 0
  loop (@uint.max) while maxValue > 0G do
    representationBitCount ++ ;
    maxValue = maxValue / 2G
  end
#---------------- Property map: add uintN() accessor
  @propertyGetterMap propertyGetterMap = {}
  let integerTypeProxy = @unifiedTypeMap-proxy.searchKey {
    !ioContext.mTypeMap
    !.new {!"uint" + representationBitCount !mEnumerationName}
  }
  [!?propertyGetterMap addPropertyGetter
    !llvmBaseTypeName:mEnumerationName
    !propertyName: .new {!"uint" + representationBitCount !mEnumerationName}
    !mode:.anySafeMode
    !public: true
    !resultTypeProxy:integerTypeProxy
    ?routineLLVMName: let conversionToUIntN
  ]
  ioRoutineListIR += !@enumToUintRoutineIR.new {
    !conversionToUIntN
    !isRequired:false
    !warnsIfUnused:false
    !"i" + representationBitCount # enumerationType llvmTypeName]
  }
#---------------- Infix operators
  enterEnumerationComparisonOperators (!typeName:mEnumerationName !?context:ioContext)
#---------------- Insert enumeration in type map
  let enumerationType = @omnibusType.new {
    !propertyGetterMap: propertyGetterMap
    !propertySetterMap: {}
    !classConstantMap:enumConstantMap
    !constructorMap:{}
    !subscript:.noSubscript
#    !assignmentSources: {!mEnumerationName}
    !attributes:.instanciable | .equatable | .copyable
    !omnibusTypeDescriptionName: mEnumerationName
    !kind:.enumeration {!bitCount:representationBitCount}
    !llvmBaseTypeName: mEnumerationName
  }
  [!?ioContext.mTypeMap insertType
    !lkey:mEnumerationName
    !type:enumerationType
  ]
#---------- Enter boolean assignment function
  ioRoutineListIR += !@basicIntegerAssignFunctionIR.new {
    ![assignmentPrefix () + mEnumerationName + "." + mEnumerationName nowhere]
    !isRequired:false
    !warnsIfUnused:false
    ![enumerationType llvmTypeName]
  }


  let key = @lstring.new {
    ![enumerationType omnibusTypeDescriptionName] + " = " + [enumerationType omnibusTypeDescriptionName]
    !mEnumerationName.location
  }
  let llvmVarInstruction = @llvmVarInstruction.new {!["LOADED" nowhere]}
  @llvmGenerationInstructionElementList instructionElements = {}
  instructionElements += !.symbol {!name: ["LOADED" nowhere]}
  instructionElements += !.string {!string: " = load "}
  instructionElements += !.type {!name: ["SRC" nowhere]}
  instructionElements += !.string {!string: ", "}
  instructionElements += !.type {!name: ["SRC" nowhere]}
  instructionElements += !.string {!string: "* "}
  instructionElements += !.symbol {!name: ["SRC" nowhere]}
  let llvmLoadInstruction = @llvmGenerationInstruction.new {!{instructionElements}}
  instructionElements = {}
  instructionElements += !.string {!string: "store "}
  instructionElements += !.type {!name: ["SRC" nowhere]}
  instructionElements += !.string {!string: " "}
  instructionElements += !.symbol {!name: ["LOADED" nowhere]}
  instructionElements += !.string {!string: ", "}
  instructionElements += !.type {!name: ["SRC" nowhere]}
  instructionElements += !.string {!string: "* "}
  instructionElements += !.symbol {!name: ["SRC" nowhere]}
  let llvmAssignmentInstruction = @llvmGenerationInstruction.new {!{instructionElements}}
  [!?ioContext.mAssignmentOperatorMap insertKey
    !key 
    !enumerationType
    !["TGT" nowhere]
    !{}
    !enumerationType
    !["SRC" nowhere]
    !{}
    !@ctTrueExpressionAST.new
    !{!llvmVarInstruction, !llvmLoadInstruction, !llvmAssignmentInstruction}
  ]


}

#·······················································································································

proc enterEnumerationComparisonOperators
  ?typeName:@lstring inTypeName
  ?!context:@semanticContext ioContext
{
  let key = combineTypeNamesForInfixOperator (!inTypeName.string !inTypeName.string)
  let booleanType = [ioContext booleanType]
  [!?ioContext.mEqualOperatorMap insertKey
    !key
    !booleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_eq}
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !key
    !booleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ult}
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !key
    !booleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ule}
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @enumToUintRoutineIR : @abstractRoutineIR {
  @string mEnumerationLLVMTypeName
}

#·······················································································································

override method @enumToUintRoutineIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let routineLLVMName = llvmNameForFunction (!mRoutineMangledName.string)
  ioLLVMcode += "define internal " + mEnumerationLLVMTypeName + " @" + routineLLVMName
  ioLLVMcode += " (" + mEnumerationLLVMTypeName + "* %inValue) nounwind {\n"
  ioLLVMcode += "  %r = load " + mEnumerationLLVMTypeName + ", " + mEnumerationLLVMTypeName + "* %inValue\n"
  ioLLVMcode += "  ret " + mEnumerationLLVMTypeName + " %r\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

