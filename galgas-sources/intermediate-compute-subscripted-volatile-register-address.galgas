
setter @instructionListIR appendComputeSubscriptedVolatileRegisterAddress
  ?!@semanticTemporariesStruct ioTemporaries
  !@string outLLVMResultVarName
  ?let @objectIR inIndexIR
  ?let @string inAddressLLVMname
  ?let @uint inElementSize
{
  [!?ioTemporaries newTempLLVMVar ?outLLVMResultVarName]
  self += !@computeSubscriptedVolatileRegisterAddress.new {!outLLVMResultVarName !inIndexIR !inAddressLLVMname !inElementSize}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @computeSubscriptedVolatileRegisterAddress : @abstractInstructionIR {
  @string mLLVMResultVarName
  @objectIR mIndexResult
  @string mAddressLLVMname
  @uint mElementSize
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @computeSubscriptedVolatileRegisterAddress llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let registerIndexName = "%register.index." + ioGenerationAdds.mUniqueIndex
  let scriptedRegisterOffsetName = "%register.offset." + ioGenerationAdds.mUniqueIndex
  ioGenerationAdds.mUniqueIndex ++
#--- Needs to perform an extend to i32 ?
  [[mIndexResult type].kind integer ?3* ?bitCount:let bitCount]
  if bitCount < 32 then
    ioLLVMcode += "  " + registerIndexName + " = zext " + [mIndexResult  llvmTypeName]
               + " " + [mIndexResult llvmName] + " to i32 ; extend index to i32\n"
  end
#--- Generation
  ioLLVMcode += "  " + scriptedRegisterOffsetName + " = mul i32 "
             + if bitCount < 32 then registerIndexName else [mIndexResult llvmName] end
             + ", " + mElementSize + " ; multiply index by size " + mElementSize + "\n"
  ioLLVMcode += "  " + mLLVMResultVarName + " = add i32 " + mAddressLLVMname
             + ", " + scriptedRegisterOffsetName + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
