#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @bitbandInstructionAST : @instructionAST {
  public var @controlRegisterLValueAST mControlRegisterLValue
  public var @expressionAST mBitExpression
  public var @location mBitExpressionLocation
  public var @expressionAST mSourceExpression
  public var @location mSourceExpressionLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    <control_register_lvalue> !?ioAST ?let registerLValue
    $@attribute$ ?let attribute
    if attribute.string != "bit" then
      error attribute : "attribute should be @bit" fixit { replace "@bit" }
    end
    <expression> !?ioAST ?let bitExpression
    let bitExpressionLocation = @location.here
    $=$
    <expression> !?ioAST ?let sourceExpression
  #--- AST
    ioInstructionList += !@bitbandInstructionAST.new {
      !registerLValue.mRegisterGroupName.location
      !registerLValue
      !bitExpression
      !bitExpressionLocation
      !sourceExpression
      !.here
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @bitbandInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [self.mControlRegisterLValue noteExpressionTypesInPrecedenceGraph !?ioGraph]
  [!?ioGraph noteNode !["u1" nowhere]]
  [self.mBitExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  [self.mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @bitbandInstructionAST instructionSemanticAnalysis
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#-------------------- Source Expression
#--- Inferred source expression type
  [inContext.mTypeMap searchType
    !lkey:.new {!"u1" !self.mSourceExpressionLocation}
    ?type:let requiredSourceExpressionType
  ]
#--- Compute source expression
  [self.mSourceExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:requiredSourceExpressionType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR sourceExpressionOperand
  ]
#--- Load from reference ?
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?sourceExpressionOperand
  ]
#--- If source expression operand is static type, check value and convert it to 'requiredSourceExpressionType'
  if ([sourceExpressionOperand type].omnibusTypeDescriptionName == ctIntegerTypeName ()) && [sourceExpressionOperand isLiteralInteger] then
    [sourceExpressionOperand literalInteger ?1* ?value:let @bigint value]
    if (value < 0) || (value > 1) then
      error self.mSourceExpressionLocation : "static value should be 0 or 1"
    else
      sourceExpressionOperand = .literalInteger {!type:requiredSourceExpressionType !value:value}
    end
  elsif [sourceExpressionOperand type].omnibusTypeDescriptionName != requiredSourceExpressionType.omnibusTypeDescriptionName then
    error self.mSourceExpressionLocation : "bit expression type should be $" + requiredSourceExpressionType.omnibusTypeDescriptionName
  end
#-------------------- Control register LValue
  [self.mControlRegisterLValue controlRegisterLValueSemanticAnalysis
    !writeAccess:false
    !self: inSelfType
    !routineAttributes: inRoutineAttributes
    !context: inContext
    !mode: inMode
    !?temporary: ioTemporaries
    !?staticEntityMap: ioStaticEntityMap
    !?variableMap: ioUniversalMap
    !?alloca: ioAllocaList
    !?instructionListIR: ioInstructionGenerationList
    ?registerType:*
    ?registerBitCount:let registerBitCount
    ?sliceMap:*
    ?llvmRegisterAddressName:let llvmRegisterAddressName
  ]

#-------------------- Bit Expression
#--- Inferred bit expression type
  [inContext.mTypeMap searchType
    !lkey:.new {!"u" + [registerBitCount-1 significantBitCount] !self.mBitExpressionLocation}
    ?type:let requiredBitExpressionType
  ]
#--- Compute bit expression
  [self.mBitExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:requiredBitExpressionType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR bitExpressionOperand
  ]
#--- Load from reference ?
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?bitExpressionOperand
  ]
#--- If bit expression operand is static type, check value and convert it to 'requiredBitExpressionType'
  if ([bitExpressionOperand type].omnibusTypeDescriptionName == ctIntegerTypeName ()) && [bitExpressionOperand isLiteralInteger] then
    [bitExpressionOperand literalInteger ?1* ?value:let @bigint value]
    if (value < 0) || (value >= registerBitCount) then
      error self.mBitExpressionLocation : "static value should be >= 0 and <" + registerBitCount
    else
      bitExpressionOperand = .literalInteger {!type:requiredBitExpressionType !value:value}
    end
  elsif [bitExpressionOperand type].omnibusTypeDescriptionName != requiredBitExpressionType.omnibusTypeDescriptionName then
    error self.mBitExpressionLocation : "bit expression type should be $" + requiredBitExpressionType.omnibusTypeDescriptionName
  end
#-------------------- Generate code
  ioInstructionGenerationList += !@bitbandInstructionIR.new {
    !llvmRegisterAddressName
    !bitExpressionOperand
    !sourceExpressionOperand
    !inContext.mTargetParameters.mBitbandRegisterBaseAddress.bigint
    !inContext.mTargetParameters.mBitbandRegisterRelocationAddress.bigint
    !inContext.mTargetParameters.mBitbandRegisterOffsetMultiplier.bigint
    !inContext.mTargetParameters.mBitbandRegisterBitMultiplier.bigint
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @bitbandInstructionIR : @abstractInstructionIR {
  public var @string mRegisterAddressLLVMname
  public var @objectIR mBitExpressionOperand
  public var @objectIR mSourceExpressionOperand
  public var @bigint mBitbandRegisterBaseAddress
  public var @bigint mBitbandRegisterRelocationAddress
  public var @bigint mBitbandRegisterOffsetMultiplier
  public var @bigint mBitbandRegisterBitMultiplier
}

#·······················································································································
#void bitband (const unsigned char inBit, const unsigned inAddress, const unsigned char inValue) {
#  const unsigned register_base = 0x4000 * 0x10000 ;
#  const unsigned byte_offset = inAddress - register_base ;
#  const unsigned bit_word_offset = (byte_offset * 32) + (inBit * 4) ;
#  const unsigned bit_band_base = 0x4200 * 0x10000 ;
#  const unsigned bit_word_addr = bit_band_base + bit_word_offset ;
#  unsigned * ptr = (unsigned *) bit_word_addr ;
#  *ptr = inValue ;
#}
#·······················································································································

override method @bitbandInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let idx = [ioGenerationAdds.mUniqueIndex string]
  ioGenerationAdds.mUniqueIndex += 1
  ioLLVMcode += ";--- Bit band\n"
  ioLLVMcode += "  %byte.offset." + idx + " = sub i32 " + self.mRegisterAddressLLVMname + ", " + self.mBitbandRegisterBaseAddress + "\n"
  ioLLVMcode += "  %byte.offset." + idx + ".mul = mul i32 %byte.offset." + idx + ", " + self.mBitbandRegisterOffsetMultiplier + "\n"
  ioLLVMcode += "  %bit.offset." + idx + ".mul = mul i32 " + [self.mBitExpressionOperand llvmName] + ", " + self.mBitbandRegisterBitMultiplier + "\n"
  ioLLVMcode += "  %offset." + idx + " = add i32 %byte.offset." + idx + ".mul, %bit.offset." + idx + ".mul\n"
  ioLLVMcode += "  %bit.word.addr." + idx + " = add i32 %offset." + idx + ", " + self.mBitbandRegisterRelocationAddress + "\n"
  ioLLVMcode += "  %ptr." + idx + " = inttoptr i32 %bit.word.addr." + idx + " to i32*\n"
  ioLLVMcode += "  %value." + idx + " = zext i1 " + [self.mSourceExpressionOperand llvmName] + " to i32\n"
  ioLLVMcode += "  store i32 %value." + idx + ", i32* %ptr." + idx + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
