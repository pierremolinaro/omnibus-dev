#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @compiletimeBoolAST : @abstractDeclarationAST {
}

#·······················································································································

override getter @compiletimeBoolAST locationForErrorSignaling -> @location outLocation {
  outLocation = .nowhere
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @compiletimeBoolAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let nodeName = [ctBoolTypeName () nowhere]
  [!?ioGraph addNode !nodeName !self]
}

#·······················································································································

override getter @compiletimeBoolAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = ctBoolTypeName ()
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once ctBoolTypeName ->@string {
  result = "ctBool"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @compiletimeBoolAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR unused ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
  let ctBoolTypeName = [ctBoolTypeName () nowhere]
  let ctBoolType = compileTimeBoolType ()
 #--- Enter type
  [!?ioContext.mTypeMap insertType ! ctBoolTypeName !type: ctBoolType]
 #--- Enter not prefix operator
  var key = prefixOperatorMapKey (!ctBoolType !.notOp !.nowhere)
  [!?ioContext.mPrefixOperatorMap insertKey !key !ctBoolType !ctBoolType !@compileTimeBoolNotOperator.init]
 #--- Enter | infix operator
  key = infixOperatorMapKey (!ctBoolType !.bitWiseOrOp !.nowhere !ctBoolType)
  [!?ioContext.mInfixOperatorMap insertKey !key !ctBoolType !@compileTimeBoolOrOperator.init]
 #--- Enter ^ infix operator
  key = infixOperatorMapKey (!ctBoolType !.bitWiseXorOp !.nowhere !ctBoolType)
  [!?ioContext.mInfixOperatorMap insertKey !key !ctBoolType !@compileTimeBoolXorOperator.init]
 #--- Enter == infix operator
  key = infixOperatorMapKey (!ctBoolType !.equal !.nowhere !ctBoolType)
  [!?ioContext.mInfixOperatorMap insertKey !key !ctBoolType !@compileTimeBoolEqualOperator.init]
#--- Implicit conversion to i1 for test expressions
  key = @lstring.init {!ctBoolType.omnibusTypeDescriptionName !.nowhere}
  [!?ioContext.mImplicitConversionToBooleanMap insertKey !key !@compileTimeBoolImplicitConverterToBoolean.init]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  IMPLICIT CONVERSION TO i1
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @compileTimeBoolImplicitConverterToBoolean : @abstractImplicitConverterToBoolean {
}

#·······················································································································

override method @compileTimeBoolImplicitConverterToBoolean generateConvertToBooleanCode
  ?let @objectIR inReceiverOperand
  ?let @location unused inErrorLocation
  ?!@semanticTemporariesStruct unused ioTemporaries
  ?!@instructionListIR unused ioInstructionGenerationList
  ?!alloca:@allocaList unused ioAllocaList
  !@implicitBooleanConversionResult outResult
{
  [inReceiverOperand literalInteger ?1* ?value: let receiverValue]
  outResult = .compileTime {!value: receiverValue != 0}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  COMPILE TIME PREFIX OPERATOR
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @compileTimeBoolNotOperator : @prefixOperatorUsage {
}

#·······················································································································

override method @compileTimeBoolNotOperator generateCode
  ?let @objectIR inReceiverOperand
  ?let @location unused inOperatorLocation
  ?let @omnibusType inResultType
  ?noPanicCode: let @bool unused inDoNotGeneratePanicCode
  ?safeMode: let @bool unused inSafeMode
  ?!@semanticTemporariesStruct unused ioTemporaries
  ?!@instructionListIR unused ioInstructionGenerationList
  !@objectIR outResultValue
{
  [inReceiverOperand literalInteger ?1* ?value: let receiverValue]
  outResultValue = .literalInteger {!type: inResultType !value: if receiverValue == 0 then 1 else 0 end}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  COMPILE TIME INFIX OPERATORS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @compileTimeBoolEqualOperator : @omnibusInfixOperatorUsage {
}

#·······················································································································

override method @compileTimeBoolEqualOperator generateCode
  ?let @objectIR inLeftOperand
  ?let @location unused inOperatorLocation
  ?let @objectIR inRightOperand
  ?let @omnibusType inResultType
  ?!@semanticTemporariesStruct unused ioTemporaries
  ?!@allocaList unused ioAllocaList
  ?!@instructionListIR unused ioInstructionGenerationList
  !@objectIR outResultValue
{
  [inLeftOperand literalInteger ?1* ?value: let leftValue]
  [inRightOperand literalInteger ?1* ?value: let rightValue]
  outResultValue = .literalInteger {!type: inResultType !value: leftValue == rightValue}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @compileTimeBoolXorOperator : @omnibusInfixOperatorUsage {
}

#·······················································································································

override method @compileTimeBoolXorOperator generateCode
  ?let @objectIR inLeftOperand
  ?let @location unused inOperatorLocation
  ?let @objectIR inRightOperand
  ?let @omnibusType inResultType
  ?!@semanticTemporariesStruct unused ioTemporaries
  ?!@allocaList unused ioAllocaList
  ?!@instructionListIR unused ioInstructionGenerationList
  !@objectIR outResultValue
{
  [inLeftOperand literalInteger ?1* ?value: let leftValue]
  [inRightOperand literalInteger ?1* ?value: let rightValue]
  outResultValue = .literalInteger {!type: inResultType !value: leftValue ^ rightValue}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @compileTimeBoolOrOperator : @omnibusInfixOperatorUsage {
}

#·······················································································································

override method @compileTimeBoolOrOperator generateCode
  ?let @objectIR inLeftOperand
  ?let @location unused inOperatorLocation
  ?let @objectIR inRightOperand
  ?let @omnibusType inResultType
  ?!@semanticTemporariesStruct unused ioTemporaries
  ?!@allocaList unused ioAllocaList
  ?!@instructionListIR unused ioInstructionGenerationList
  !@objectIR outResultValue
{
  [inLeftOperand literalInteger ?1* ?value: let leftValue]
  [inRightOperand literalInteger ?1* ?value: let rightValue]
  outResultValue = .literalInteger {!type: inResultType !value: leftValue | rightValue}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
