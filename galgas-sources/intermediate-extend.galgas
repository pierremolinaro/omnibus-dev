
setter @instructionListIR appendExtend
  ?let @operandIR inResult
  ?let @operandIR inSource
{
  self += !@extendIR.new {!inResult !inSource}
}

#----------------------------------------------------------------------------------------------------------------------*

class @extendIR : @abstractInstructionIR {
  @operandIR mResult
  @operandIR mSource
}

#----------------------------------------------------------------------------------------------------------------------*

override method @extendIR llvmInstructionCode
  ?!@string ioCode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioCode += "  " + mResult.mValue + " = "
  [[mSource.mType kind] integer ?min:* ?max:* ?unsigned:let sourceIsUnsigned ?bitCount:*]
  ioCode += if sourceIsUnsigned then "zext" else "sext" end
  ioCode += " " + [mSource.mType  llvmTypeName] + " " + mSource.mValue + " to " + [mResult.mType llvmTypeName] + "\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @extendIR enterAccessibleEntities ?!@accessibleEntities unused ioAccessibleEntities {
}


#----------------------------------------------------------------------------------------------------------------------*
