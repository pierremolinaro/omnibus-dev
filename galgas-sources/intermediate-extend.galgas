
setter @instructionListIR appendExtend
  ?let @valueIR inResult
  ?let @valueIR inSource
{
  self += !@extendIR.new {!inResult !inSource}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @extendIR : @abstractInstructionIR {
  @valueIR mResult
  @valueIR mSource
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "  " + [mResult llvmName] + " = "
  [[mSource kind] integer ?min:* ?max:* ?unsigned:let sourceIsUnsigned ?2*]
  ioLLVMcode += if sourceIsUnsigned then "zext" else "sext" end
  ioLLVMcode += " " + [mSource  llvmTypeName] + " " + [mSource llvmName] + " to " + [mResult llvmTypeName] + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendIR enterAccessibleEntities
  ?!@accessibleEntities unused ioAccessibleEntities
  ?!@uint unused ioMaxBranchOfOnInstructions
{
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
