
setter @instructionListIR appendExtend
  ?let @objectIR inResult
  ?let @objectIR inSource
{
  self += !@extendIR.init {!inResult !inSource}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @extendIR : @abstractInstructionIR {
  public var @objectIR mResult
  public var @objectIR mSource
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "  " + [self.mResult llvmName] + " = "
  let kind = [self.mSource type].kind
  if [kind isLlvmType] then
    ioLLVMcode += "zext"
  else
    [kind extractInteger ?2* ?unsigned:let sourceIsUnsigned ?1*]
    ioLLVMcode += if sourceIsUnsigned then "zext" else "sext" end
  end
  ioLLVMcode += " " + [self.mSource  llvmTypeName] + " " + [self.mSource llvmName] + " to " + [self.mResult llvmTypeName] + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
