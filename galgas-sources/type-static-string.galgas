#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @literalStringDeclarationAST : @abstractDeclarationAST {
  @lstring mLiteralStringTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @literalStringDeclarationAST location -> @location outLocation {
  outLocation = mLiteralStringTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalStringDeclarationAST addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  ?!@extendStaticArrayDeclarationAST unused ioExtendStaticArrayDeclarationAST
  !@abstractDeclarationAST outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalStringDeclarationAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let literalStringTypeName = llvmRegularTypeMangledNameFromName (!mLiteralStringTypeName)
  [!?ioGraph addNode !literalStringTypeName !self]
  [!?ioGraph addEdge !literalStringTypeName !llvmRegularTypeMangledNameFromName (!["uint8" nowhere])]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @literalStringDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "literal string " + mLiteralStringTypeName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalStringDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
#--- Enter in type map
  [!?ioContext.mTypeMap insertType
    !lkey:mLiteralStringTypeName
    !type:.literalString
    !index:[ioContext.mTypeMap count]
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalStringDeclarationAST semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
