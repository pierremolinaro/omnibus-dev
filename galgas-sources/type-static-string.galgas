#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @literalStringDeclarationAST : @abstractDeclarationAST {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @literalStringDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = .nowhere
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalStringDeclarationAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let literalStringTypeName = [staticStringTypeName () nowhere]
  [!?ioGraph addNode !literalStringTypeName !self]
  [!?ioGraph addEdge !literalStringTypeName !["$uint8" nowhere]]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @literalStringDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "literal string " + staticStringTypeName () 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalStringDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR unused ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!globalVariables:@globalVariableIRList unused ioGlobalVariableIRList
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
{
#--- Enter in type map
  [!?ioContext.mTypeMap insertType
    !lkey:[staticStringTypeName () nowhere]
    !type:literalStringType ()
    !index:[ioContext.mTypeMap count]
    !generate:true
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateStaticStringTypeLLVMCode ?!@string ioLLVMcode ?let @string inLLVMTypeName {
  ioLLVMcode += llvmTitleComment (!"GENERATED FUNCTIONS FOR $staticString TYPE")
  ioLLVMcode += "define internal void @plm.assign." + staticStringTypeName () + "." + staticStringTypeName ()
  ioLLVMcode += " (" + inLLVMTypeName + "* %target, " + inLLVMTypeName + "*%source) {\n"
  ioLLVMcode += "  %value = load " + inLLVMTypeName + ", " + inLLVMTypeName + "* %source\n"
  ioLLVMcode += "  store " + inLLVMTypeName + " %value, " + inLLVMTypeName + "* %target\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
