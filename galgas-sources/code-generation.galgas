#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#    C O D E    G E N E R A T I O N                                                                                    *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectInMemoryIR mangledName -> @string outResult {
  switch self
  case register (* @lstring name *) :
    outResult = llvmNameForRegister (!name:name.string)
  case globalVariable (* @string name *) :
    outResult = llvmNameForGlobalVariable (!name)
  case localValue (* @string name) :
    outResult = llvmNameForLocalVariable (!name)
  case globalConstant (* @string name) :
    outResult = llvmNameForGlobalVariable (!name)
  case fieldAccess (@unifiedTypeMap-proxy unused objectType
                    @string unused objectName
                    @unifiedTypeMap-proxy unused fielfType
                    @uint unused fieldIndex) :
    outResult = "<<@objectInMemoryIR mangledName:fieldAccess>>"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @abstractExpressionIR
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract class @abstractExpressionIR {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @generationAdds
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @generationAdds {
  @stringset mIntrinsicsDeclarationSet
  @staticStringMap mStaticStringMap
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @abstractInstructionIR
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract class @abstractInstructionIR {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @instructionListIR
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @instructionListIR {
  @abstractInstructionIR mInstructionGeneration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! codeGeneration
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmSeparatorLine -> @string outResult {
  outResult  = ";-------------------------------------------------------------------------"
  outResult += "---------------------------------------------*\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmTitleComment ?@string inTitle -> @string outTitle {
  outTitle  = llvmSeparatorLine ()
  outTitle += ";    " + [inTitle stringByRightPadding !114!' '] + "*\n"
  outTitle += llvmSeparatorLine () + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once asSeparatorLine -> @string outResult {
  outResult  = "@-------------------------------------------------------------------------"
  outResult += "---------------------------------------------*\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func asTitleComment ?@string inTitle -> @string outTitle {
  outTitle  = asSeparatorLine ()
  outTitle += "@    " + [inTitle stringByRightPadding !114!' '] + "*\n"
  outTitle += asSeparatorLine () + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc codeGeneration
  ?currentDir:let @string inCurrentDirectory
  ?outputFile:let @string inSourceFileName
  ?eof:let @location inEndOfSourceFileLocation
  ?intermediateCode:let @intermediateCodeStruct inIntermediateCodeStruct
  ?typeMap:let @unifiedTypeMap inTypeMap
#  ?typeInitialierMap:let @typeInitializerMap inTypeInitializerMap
  ?target:let @lstring inTargetName
  ?exceptionCodeType:let @unifiedTypeMap-proxy inExceptionCodeType
  ?exceptionLineType:let @unifiedTypeMap-proxy inExceptionLineType
  ?sourceFileSet:let @stringset inSourceFileAbsolutePathSet
  ?proceduresThatShouldNotBeGenerated:let @stringset inProceduresThatShouldNotBeGenerated
{
  let homeDir = @string.homeDirectory + "/plm-products/"
#--- Create source directory (if does not exist)
  let productDirectory = homeDir + [[inSourceFileName stringByDeletingPathExtension] stringByReplacingStringByString !"/" !"+"]
  let sourceDirectory = productDirectory + "/sources"
  [sourceDirectory makeDirectory] ;
#--- Generate target files
  generateTarget (
    !currentDir:inCurrentDirectory
    !productDirectory:productDirectory
    !targetName:inTargetName
  )
#--- Generate LLVM file
  generateLLVMfile (
    !currentDir:inCurrentDirectory
    !productDir:productDirectory
    !eof:inEndOfSourceFileLocation
    !intermediateCode:inIntermediateCodeStruct
    !typeMap:inTypeMap
#    !typeInitialierMap:inTypeInitializerMap
    !target:inTargetName
    !exceptionCodeType:inExceptionCodeType
    !exceptionLineType:inExceptionLineType
    !sourceFileSet:inSourceFileAbsolutePathSet
    !proceduresThatShouldNotBeGenerated:inProceduresThatShouldNotBeGenerated
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @generationContext {
  @string mExceptionCodeLLVMType
  @string mExceptionLineLLVMType
  @stringset mProceduresThatShouldNotBeGenerated
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc generateLLVMfile
  ?currentDir:let @string inCurrentDirectory
  ?productDir:let @string inProductDirectory
  ?eof:let @location inEndOfSourceFileLocation
  ?intermediateCode:let @intermediateCodeStruct inIntermediateCodeStruct
  ?typeMap:let @unifiedTypeMap inTypeMap
#  ?typeInitialierMap:let @typeInitializerMap inTypeInitializerMap
  ?target:let @lstring inTargetName
  ?exceptionCodeType:let @unifiedTypeMap-proxy inExceptionCodeType
  ?exceptionLineType:let @unifiedTypeMap-proxy inExceptionLineType
  ?sourceFileSet:let @stringset inSourceFileAbsolutePathSet
  ?proceduresThatShouldNotBeGenerated:let @stringset inProceduresThatShouldNotBeGenerated
{
  @generationAdds generationAdds = .default
  generationAdds.mStaticStringMap = inIntermediateCodeStruct.mStaticStringMap
  let @generationContext generationContext = .new {
    ![inExceptionCodeType llvmTypeName]
    ![inExceptionLineType llvmTypeName]
    !inProceduresThatShouldNotBeGenerated
  }
  let sourceDirectory = inProductDirectory + "/sources"
  var llvmCode = ""
  var asCode = ""
#----------------------------------------- Include assembler specific file
  asCode += asTitleComment (!"Target specific code")
  asCode +=  getTargetTextFile (
     !currentDir:inCurrentDirectory
     !from:inTargetName.string + "/target.s"
  )
  asCode += "\n"
#----------------------------------------- Include LLVM specific file
  llvmCode += llvmTitleComment (!"Target specific code")
  let targetLLVMcode = getTargetTextFile (
     !currentDir:inCurrentDirectory
     !from:inTargetName.string + "/target.ll"
  )
  llvmCode += [targetLLVMcode stringByReplacingStringByString !"!PROC!" !llvmNameForProcedure (!"")]
  llvmCode += "\n"
#----------------------------------------- Structure types declaration
  llvmCode += llvmTitleComment (!"Structure types")
  declareLLVMstructureTypes (!inTypeMap !?llvmCode)
#----------------------------------------- Global variables
  for globalVariable in inIntermediateCodeStruct.mGlobalVariableMap
    before llvmCode += llvmTitleComment (!"Global variables")
    do [globalVariable generateLLVM !?llvmCode]
    after llvmCode += "\n"
  end
#----------------------------------------- Boot
  llvmCode += llvmTitleComment (!"Boot")
  llvmCode += "define internal void @boot () nounwind {\n"
  for boot in inIntermediateCodeStruct.mBootList do
    [boot.mInstructionListIR instructionListLLVMCode !?llvmCode !generationContext !?generationAdds]
  end
  llvmCode += ";---\n"
  llvmCode += "  ret void\n"
  llvmCode += "}\n\n"
#----------------------------------------- Init
  [inIntermediateCodeStruct.mInitList generateLLVMinitCode
    !?llvmCode
    !inIntermediateCodeStruct.mProcedureMapIR
    !generationContext
    !?generationAdds
  ]
#----------------------------------------- Procedures
  [inIntermediateCodeStruct.mProcedureMapIR llvmCodeGeneration !?llvmCode !?asCode !generationContext !?generationAdds]
#----------------------------------------- Extern procedures
  [inIntermediateCodeStruct.mExternProcedureMapIR llvmPrototypeGeneration !?llvmCode]
#----------------------------------------- Sections
  [inIntermediateCodeStruct.mSectionMapIR llvmCodeGeneration
    !inCurrentDirectory
    !inTargetName.string
    !?llvmCode
    !?asCode
    !generationContext
    !?generationAdds
  ]
#----------------------------------------- Functions
  for function in inIntermediateCodeStruct.mFunctionMapIR do
    [function implementationCodeGeneration !?llvmCode !generationContext !?generationAdds]
  end
#----------------------------------------- Panic
  if not [option plm_options.noPanicGeneration value] then
    llvmCode += getTargetTextFile (
       !currentDir:inCurrentDirectory
       !from:inTargetName.string + "/target-exception.ll"
    )
    llvmCode += llvmTitleComment (!"Raise Panic internal")
    llvmCode += "define internal void @raise_exception_internal ("
    llvmCode += generationContext.mExceptionLineLLVMType + " %in.LINE, "
    llvmCode += generationContext.mExceptionCodeLLVMType + " %in.CODE, "
    llvmCode += "i8* %in.FILE) nounwind noreturn {\n"
  #--- First argument: line
    llvmCode += "  %" + llvmNameForLocalVariable (!"LINE") + " = alloca "
    llvmCode += generationContext.mExceptionLineLLVMType + "\n"
    llvmCode += "  store " + generationContext.mExceptionLineLLVMType + " %in.LINE, "
    llvmCode += generationContext.mExceptionLineLLVMType + "* %" + llvmNameForLocalVariable (!"LINE") + "\n"
  #--- Second argument : code
    llvmCode += "  %" + llvmNameForLocalVariable (!"CODE")
    llvmCode += " = alloca " + generationContext.mExceptionCodeLLVMType + "\n"
    llvmCode += "  store " + generationContext.mExceptionCodeLLVMType + " %in.CODE, "
    llvmCode += generationContext.mExceptionCodeLLVMType + "* %" + llvmNameForLocalVariable (!"CODE") + "\n"
  #--- Third argument : file    
    llvmCode += "  %" + llvmNameForLocalVariable (!"FILE") + " = alloca i8*\n"
    llvmCode += "  store i8* %in.FILE, i8** %" + llvmNameForLocalVariable (!"FILE") + "\n"
    [inIntermediateCodeStruct.mExceptionSetupInstructionListIR instructionListLLVMCode
      !?llvmCode
      !generationContext
      !?generationAdds
    ]
    llvmCode += "  br label %exception.loop\n\n"
    llvmCode += "exception.loop:\n"
    [inIntermediateCodeStruct.mExceptionLoopInstructionListIR instructionListLLVMCode
      !?llvmCode
      !generationContext
      !?generationAdds
    ]
    llvmCode += "  br label %exception.loop\n"
    llvmCode += "}\n\n"
  #--- File specific routines
    for (filePath) in inSourceFileAbsolutePathSet do
      [!?generationAdds.mStaticStringMap findOrAddStaticString
        ![[filePath lastPathComponent] stringByDeletingPathExtension]
        ?let staticStringIndex
      ]
      let routineName = "@raise_exception." + staticStringIndex
      llvmCode += llvmTitleComment (!routineName + " (" + [filePath lastPathComponent] + ")")
      llvmCode += "define internal void " + routineName + " (i32 %inSourceLine, i32 %inCode) nounwind noreturn {\n"
      llvmCode += "  %str.FILE = load i8*, i8** @string." + staticStringIndex + "\n"
      llvmCode += "  call void @raise_exception (i32 %inSourceLine, i32 %inCode, i8* %str.FILE)\n"
      llvmCode += "  unreachable\n"
      llvmCode += "}\n\n"
    end
  end
#----------------------------------------- Intrinsics
  if [generationAdds.mIntrinsicsDeclarationSet count] > 0 then
    llvmCode += llvmTitleComment (!"LLVM intrinsics")
    for (s) in generationAdds.mIntrinsicsDeclarationSet do
      llvmCode += s + "\n"
    end
    llvmCode += "\n"
  end
#----------------------------------------- Static Strings
  if [generationAdds.mStaticStringMap count] > 0 then
    llvmCode += llvmTitleComment (!"Static strings")
    for () in generationAdds.mStaticStringMap do
      let lgStr = [[lkey.string length] + 1 string]
      llvmCode += literalCharacterArrayName (!mIndex) + " = private unnamed_addr constant ["
      llvmCode += lgStr + " x i8] c\""
      llvmCode += [lkey.string utf8RepresentationWithoutDelimiters]
      llvmCode += "\\00\", align 1\n"
      llvmCode += literalStringName (!mIndex) + " = private constant i8* getelementptr inbounds (["
      llvmCode += lgStr + " x i8], [" + lgStr + " x i8]* "
      llvmCode += literalCharacterArrayName (!mIndex) + ", i32 0, i32 0), align 4\n\n"
    end
  end
#----------------------------------------- Write LLVM file
  llvmCode += llvmSeparatorLine ()
  [llvmCode writeToFileWhenDifferentContents !sourceDirectory + "/src.ll" ?*]
#----------------------------------------- Write assembler file
  asCode += asSeparatorLine ()
  [asCode writeToFileWhenDifferentContents !sourceDirectory + "/src.s" ?*]
#----------------------------------------- Write C file
  let cCode = getTargetTextFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/target.c"
  )
  [cCode writeToFileWhenDifferentContents !sourceDirectory + "/src.c" ?*]
#----------------------------------------- Perform compilation
  if (@uint.errorCount == 0) then # && not [option plm_options.compileOnly value] then
    let script = if [option plm_options.performFlashing value] then "run" else "build" end
    let fullScript = "python " + inProductDirectory + "/" + script + ".py"
    @sint result = [fullScript system]
    if result != 0S then
      error inEndOfSourceFileLocation: "error during LLVM compilation or flashing"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

