#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    C O D E    G E N E R A T I O N                                                                                    *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

getter @variableKindIR mangledName -> @string outResult {
  switch self
  case register (@string name) :
    outResult = mangledNameForRegister (!name:name)
  case globalVariable (@string name) :
    outResult = mangledNameForGlobalVariable (!name:name)
  case localVariable (@string name) :
    outResult = mangledNameForLocalVariable (!name:name)
  case inArgument (@string name) :
    outResult = mangledNameForInArgument (!name:name)
  case inOutArgument (@string name) :
    outResult = mangledNameForInOutArgument (!name:name)
  case outArgument (@string name) :
    outResult = "* " + mangledNameForOutArgument (!name:name)
  case localConstant (@string name) :
    outResult = mangledNameForConstant (!name:name)
  case temporaryConstant (@uint idx) :
    outResult = mangledNameForTemporaryConstant (!idx:idx)
  case localAccess (@string access) :
    outResult = access
  case literalUnsignedInteger (@uint64 value) :
    outResult = [value string]
  case literalSignedInteger (@sint64 value) :
    outResult = [value string]
  case literalString (* @string name) :
    outResult = name
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#! @abstractExpressionIR
#----------------------------------------------------------------------------------------------------------------------*

abstract class @abstractExpressionIR {
}

#----------------------------------------------------------------------------------------------------------------------*
#! @abstractInstructionIR
#----------------------------------------------------------------------------------------------------------------------*

abstract class @abstractInstructionIR {
}

#----------------------------------------------------------------------------------------------------------------------*

abstract getter @abstractInstructionIR instructionCode -> @string outCode

#----------------------------------------------------------------------------------------------------------------------*
#! @instructionListIR
#----------------------------------------------------------------------------------------------------------------------*

list @instructionListIR {
  @abstractInstructionIR mInstructionGeneration
}

#----------------------------------------------------------------------------------------------------------------------*
#! @abstractTypeIR
#----------------------------------------------------------------------------------------------------------------------*

abstract getter @abstractTypeIR headerCodeGenerationForType -> @string outCode

#----------------------------------------------------------------------------------------------------------------------*
#! codeGeneration
#----------------------------------------------------------------------------------------------------------------------*

func %once separatorLine -> @string outResult {
  outResult  = "//------------------------------------------------------------------------"
  outResult += "---------------------------------------------*\n"
}

#----------------------------------------------------------------------------------------------------------------------*

func titleComment ?@string inTitle -> @string outTitle {
  outTitle  = separatorLine ()
  outTitle += "//   " + [inTitle stringByRightPadding  !114!' '] + "*\n"
  outTitle += separatorLine () + "\n"
}

#----------------------------------------------------------------------------------------------------------------------*

proc codeGeneration
  ?outputFile:let @string inSourceFileName
  ?eof:let @location inEndOfSourceFileLocation
  ?intermediateCode:let @intermediateCodeStruct inIntermediateCodeStruct
  ?target:let @lstring inTargetName
  ?exceptionCodeType:let @unifiedTypeMap-proxy inExceptionCodeType
  ?exceptionLineType:let @unifiedTypeMap-proxy inExceptionLineType
{
  let homeDir = @string.homeDirectory + "/plm-products/"
#--- Create source directory (if does not exist)
  let targetDirectory = homeDir + [[inSourceFileName stringByDeletingPathExtension] stringByReplacingStringByString !"/" !"+"]
  let sourceDirectory = targetDirectory + "/sources"
  [sourceDirectory makeDirectory] ;
#--- Generate target files
  generateTargets (
    !targetDirectory:targetDirectory
    !targetName:inTargetName
    ?filesToInclude:let @stringlist builtinFiles
  )
#--- Generate C file
  var code = ""
  code += "#include <stdint.h>\n"
  code += "#include <stdbool.h>\n"
  code += "#include <stddef.h>\n\n"
  for @typeMapIR-element type in inIntermediateCodeStruct.mTypeMapIR do
    code += [type.mType headerCodeGenerationForType]
  end
  code += titleComment (!"Boot")
  code += "static void boot (void) ;\n\n"
  code += titleComment (!"Init")
  code += "static void init (void) ;\n\n"
  if not [option plm_options.noExceptionGeneration value] then
    code += titleComment (!"Exception")
    code += "static void raise_exception_internal (const " + mangledNameForType (!name:[inExceptionCodeType key]) + " inCode,\n"
    code += "                                      const char * inSourceFile,\n"
    code += "                                      const " + mangledNameForType (!name:[inExceptionLineType key]) + " inSourceLine) ;\n\n"
  end
  code += titleComment (!"Static Strings")
  for () in inIntermediateCodeStruct.mGlobalLiteralStringMap do
    code += "static const char * " + mLiteralStringCname + " = " + [lkey.string utf8Representation] + " ;\n"
  end
  code += "\n"
  for register in inIntermediateCodeStruct.mRegisterMap do
    code += [register headerCodeGenerationForRegister]
  end
  for globalConstant in inIntermediateCodeStruct.mGlobalConstantMap do
    code += [globalConstant headerCodeGeneration]
  end
  for globalVariable in inIntermediateCodeStruct.mGlobalVariableMap do
    code += [globalVariable implementationCodeGeneration]
  end
  for function in inIntermediateCodeStruct.mFunctionMapIR do
    code += [function headerCodeGeneration]
  end
  for procedure in inIntermediateCodeStruct.mProcedureMapIR do
    code += [procedure headerCodeGeneration]
  end
  code += titleComment (!"System code")
  for (file) in builtinFiles do
    code += "#include \"" + file + "\"\n"
  end
  code += "\n"
#--- Boot
  code += titleComment (!"Boot")
  code += "static void boot (void) {\n"
  for boot in inIntermediateCodeStruct.mBootList do
    code += [boot.mInstructionListIR instructionListCode]
  end
  code += "}\n\n"
#--- Init
  code += titleComment (!"Init")
  code += "static void init (void) {\n"
  for init in inIntermediateCodeStruct.mInitList do
    code += [init.mInstructionListIR instructionListCode]
  end
  code += "}\n\n"
  if not [option plm_options.noExceptionGeneration value] then
    code += titleComment (!"Raise Exception internal")
    code += "static void raise_exception_internal (const int32_t in_CODE,\n"
    code += "                                      const char * in_FILE,\n"
    code += "                                      const uint32_t in_LINE) {\n"
    code += [inIntermediateCodeStruct.mExceptionSetupInstructionListIR instructionListCode]
    [!?code incIndentation !2]
    code += "while (1) {\n"
    code += [inIntermediateCodeStruct.mExceptionLoopInstructionListIR instructionListCode]
    code += "}\n"
    [!?code decIndentation !2]
    code += "}\n\n"
  end
  for procedure in inIntermediateCodeStruct.mProcedureMapIR do
    code += [procedure implementationCodeGeneration]
  end
  for function in inIntermediateCodeStruct.mFunctionMapIR do
    code += [function implementationCodeGeneration]
  end
  code += separatorLine ()
  [code writeToFileWhenDifferentContents !sourceDirectory + "/plm.c" ?*]
#--- Perform C compilation
  if (@uint.errorCount == 0) && not [option plm_options.compileOnly value] then
    let script = if [option plm_options.noFlashing value] then "build" else "flash-and-run" end
    let fullScript = "python " + targetDirectory + "/" + script + ".py"
    @sint result = [fullScript system]
    if result != 0S then
      error inEndOfSourceFileLocation: "error during C compilation or flashing"
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*

