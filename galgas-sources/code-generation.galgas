#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    C O D E    G E N E R A T I O N                                                                                    *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

getter @variableKindIR mangledName -> @string outResult {
  switch self
  case register (@string name) :
    outResult = mangledNameForRegister (!name:name)
  case globalConstant (@string name) :
    outResult = mangledNameForConstant (!name:name)
  case globalVariable (@string name) :
    outResult = mangledNameForGlobalVariable (!name:name)
  case localVariable (@string name) :
    outResult = mangledNameForLocalVariable (!name:name)
  case inArgument (@string name) :
    outResult = mangledNameForInArgument (!name:name)
  case inOutArgument (@string name) :
    outResult = mangledNameForInOutArgument (!name:name)
  case outArgument (@string name) :
    outResult = "* " + mangledNameForOutArgument (!name:name)
  case localConstant (@string name) :
    outResult = mangledNameForConstant (!name:name)
  case temporaryConstant (@uint idx) :
    outResult = mangledNameForTemporaryConstant (!idx:idx)
  case localAccess (@string access) :
    outResult = access
  case literalUnsignedInteger (@unifiedTypeMap-proxy type @uint64 value) :
    outResult = "((" + mangledNameForType (!name:[type key]) + ") " + value + ")"
  case literalString (* @string name) :
    outResult = name
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#! @abstractExpressionGeneration
#----------------------------------------------------------------------------------------------------------------------*

abstract class @abstractExpressionGeneration {
}

#----------------------------------------------------------------------------------------------------------------------*

abstract getter @abstractExpressionGeneration expressionCode -> @string outCode

#----------------------------------------------------------------------------------------------------------------------*
#! @inLineExpressionGeneration
#----------------------------------------------------------------------------------------------------------------------*

class @inLineExpressionGeneration : @abstractExpressionGeneration {
  @string mCode
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @inLineExpressionGeneration expressionCode -> @string outCode {
  outCode = mCode
}

#----------------------------------------------------------------------------------------------------------------------*
#! @abstractExpressionIR
#----------------------------------------------------------------------------------------------------------------------*

abstract class @abstractExpressionIR {
}

#----------------------------------------------------------------------------------------------------------------------*
#! @abstractInstructionIR
#----------------------------------------------------------------------------------------------------------------------*

abstract class @abstractInstructionIR {
}

#----------------------------------------------------------------------------------------------------------------------*

abstract getter @abstractInstructionIR instructionCode -> @string outCode

#----------------------------------------------------------------------------------------------------------------------*
#! @instructionListIR
#----------------------------------------------------------------------------------------------------------------------*

list @instructionListIR {
  @abstractInstructionIR mInstructionGeneration
}

#----------------------------------------------------------------------------------------------------------------------*
#! @abstractTypeIR
#----------------------------------------------------------------------------------------------------------------------*

abstract getter @abstractTypeIR headerCodeGenerationForType -> @string outCode

#----------------------------------------------------------------------------------------------------------------------*
#! codeGeneration
#----------------------------------------------------------------------------------------------------------------------*

func %once separatorLine -> @string outResult {
  outResult  = "//------------------------------------------------------------------------"
  outResult += "---------------------------------------------*\n"
}

#----------------------------------------------------------------------------------------------------------------------*

proc codeGeneration
  ?outputFile:let @string inSourceFileName
  ?intermediateCode:let @intermediateCodeStruct inIntermediateCodeStruct
  ?target:let @lstring inTargetName
{
#--- Create source directory (if does not exist)
  let targetDirectory = [inSourceFileName stringByDeletingPathExtension]
  let sourceDirectory = targetDirectory + "/sources"
  [sourceDirectory makeDirectory] ;
#--- Generate header file
  let baseName = sourceDirectory + "/plm"
  var header = "#ifndef PLM_HEADER_DEFINED\n"
  header += "#define PLM_HEADER_DEFINED\n\n"
  header += separatorLine () + "\n"
  header += "#include <stdint.h>\n"
  header += "#include <stddef.h>\n\n"
  for register in inIntermediateCodeStruct.mRegisterMap do
    header += [register headerCodeGenerationForRegister]
  end
  for globalConstant in inIntermediateCodeStruct.mGlobalConstantMap do
    header += [globalConstant headerCodeGeneration]
  end
  for @typeMapIR-element type in inIntermediateCodeStruct.mTypeMapIR do
    header += [type.mType headerCodeGenerationForType]
  end
  for procedure in inIntermediateCodeStruct.mProcedureMapIR do
    if procedure.mIsRequired then
      header += [procedure headerCodeGeneration]
    end
  end
  header += separatorLine () + "\n"
  header += "#endif\n"
  [header writeToFileWhenDifferentContents !baseName + ".h" ?*]
#--- Generate C file
  var code = "#include \"plm.h\"\n\n"
  code += separatorLine ()
  code += "//   Static Strings                                                                                                    *\n"
  code += separatorLine () + "\n"
  for () in inIntermediateCodeStruct.mGlobalLiteralStringMap do
    code += "static const char * " + mLiteralStringCname + " = " + [lkey.string utf8Representation] + " ;\n"
  end
  code += "\n"
  for globalVariable in inIntermediateCodeStruct.mGlobalVariableMap do
    code += [globalVariable implementationCodeGeneration]
  end
  for function in inIntermediateCodeStruct.mFunctionMapIR do
    code += [function headerCodeGeneration]
  end
  for procedure in inIntermediateCodeStruct.mProcedureMapIR do
    if not procedure.mIsRequired then
      code += [procedure headerCodeGeneration]
    end
  end
  for procedure in inIntermediateCodeStruct.mProcedureMapIR do
    code += [procedure implementationCodeGeneration]
  end
  for function in inIntermediateCodeStruct.mFunctionMapIR do
    code += [function implementationCodeGeneration]
  end
  code += separatorLine ()
  [code writeToFileWhenDifferentContents !baseName + ".c" ?*]
#--- Generate target files
  generateTargets (
    !targetDirectory:targetDirectory
    !targetName:inTargetName
  )
}

#----------------------------------------------------------------------------------------------------------------------*

