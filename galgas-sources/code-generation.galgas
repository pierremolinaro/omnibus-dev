#—————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                       
#    C O D E    G E N E R A T I O N                                                                                     
#                                                                                                                       
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! @generationAdds
#—————————————————————————————————————————————————————————————————————————————————————————————————

struct @generationAdds {
  public var @uint mUniqueIndex = 0
  public var @stringset mExternFunctionDeclarationSet = @[]
  public var @staticEntityMap mStaticEntityMap =  @()
  public var @bool mUsesGuards = false
  public var @bool mNeedsDynamicMemoryAllocation = false
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! @abstractInstructionIR
#—————————————————————————————————————————————————————————————————————————————————————————————————

abstract class @abstractInstructionIR {
}

#·······················································································································

abstract method @abstractInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds

#·······················································································································

method @abstractInstructionIR enterAccessibleEntities
  ?!@stringset unused ioInvokedRoutineSet
  ?!@uint unused ioMaxBranchOfOnInstructions
{
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! @instructionListIR
#—————————————————————————————————————————————————————————————————————————————————————————————————

list @instructionListIR {
  public var @abstractInstructionIR mInstructionGeneration
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @instructionListListIR {
  public var @instructionListIR mInstructionList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmSeparatorLine -> @string {
  result  = ";-------------------------------------------------------------------------"
  result += "---------------------------------------------*\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func llvmTitleComment ?let @string inTitle -> @string outTitle {
  outTitle  = llvmSeparatorLine ()
  outTitle += ";    " + [inTitle stringByRightPadding !114!' '] + "*\n"
  outTitle += llvmSeparatorLine () + "\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once asSeparatorLine -> @string {
  result  = "@-------------------------------------------------------------------------"
  result += "---------------------------------------------*\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func asTitleComment ?let @string inTitle -> @string outTitle {
  outTitle  = asSeparatorLine ()
  outTitle += "@    " + [inTitle stringByRightPadding !114!' '] + "*\n"
  outTitle += asSeparatorLine () + "\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc codeGeneration
  ?currentDir:let @string inCurrentDirectory
  ?outputFile:let @string inSourceFileName
  ?eof:let @location inEndOfSourceFileLocation
  ?intermediateCode:let @intermediateCodeStruct inIntermediateCodeStruct
  ?userDefinedTypes:let @userLLVMTypeDefinitionListIR inUserLLVMTypeDefinitionListIR
  ?target:let @lstring inTargetName
  ?panicCodeType:let @omnibusType inPanicCodeType
  ?panicLineType:let @omnibusType inPanicLineType
  ?interrupts:let @availableInterruptMap inAvailableInterruptMap
  ?staticlistValues:let @staticListInitializationMap inStaticListValueMap
  ?targetParameters:let @targetParameters inTargetParameters
{
  let @timer generationTime = .start 
  let homeDir = @string.homeDirectory + "/omnibus-products/"
#--- Create source directory (if does not exist)
  let productDirectory = homeDir
    + if [option omnibus_options.noPanicGeneration value] then "no-panic" else "" end
    + [[inSourceFileName stringByDeletingPathExtension] stringByReplacingStringByString !"/" !"+"]
  let sourceDirectory = productDirectory + "/sources"
  [sourceDirectory makeDirectory] ;
#--- Generate target files
  generateTarget (
    !currentDir:inCurrentDirectory
    !productDirectory:productDirectory
    !targetName:inTargetName
    !targetParameters:inIntermediateCodeStruct.mTargetParameters
  )
#--- Generate code files (LLVM, C++, assembly)
  generateCodeFiles (
    !currentDir:inCurrentDirectory
    !productDir:productDirectory
    !intermediateCode:inIntermediateCodeStruct
    !userDefinedTypes: inUserLLVMTypeDefinitionListIR
    !target:inTargetName
    !panicCodeType:inPanicCodeType
    !panicLineType:inPanicLineType
    !interrupts:inAvailableInterruptMap
    !staticlistValues:inStaticListValueMap
    !targetParameters:inTargetParameters
  )
  if [option omnibus_options.printPasses value] then
    print (!"** Code generation: " + [generationTime string] + "\n" )
  end
#----------------------------------------- Run compilation script
  if (@uint.errorCount == 0) then
    let @timer scriptTime = .start 
    let script = if [option omnibus_option_not_appearing_in_cocoa.performFlashing value] then "run" else "build" end
    let fullScript = "python3 " + productDirectory + "/" + script + ".py"
    let @sint result = [fullScript system]
    if result != 0 then
      error inEndOfSourceFileLocation: "error during LLVM compilation or flashing"
    end
    if [option omnibus_options.printPasses value] then
      print (!"** Compilation script: " + [scriptTime string] + "\n")
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

struct @generationContext {
  public var @omnibusType mPanicCodeLLVMType
  public var @omnibusType mPanicLineLLVMType
  public var @string mNopInstructionInLLVM
  public var @globalTaskVariableList mGlobalTaskVariableList
  public var @availableInterruptMap mAvailableInterruptMap
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

private proc generateCodeFiles
  ?currentDir:let @string inCurrentDirectory
  ?productDir:let @string inProductDirectory
  ?intermediateCode:let @intermediateCodeStruct inIntermediateCodeStruct
  ?userDefinedTypes:let @userLLVMTypeDefinitionListIR inUserLLVMTypeDefinitionListIR
  ?target:let @lstring inTargetName
  ?panicCodeType:let @omnibusType inPanicCodeType
  ?panicLineType:let @omnibusType inPanicLineType
  ?interrupts:let @availableInterruptMap inAvailableInterruptMap
  ?staticlistValues:let @staticListInitializationMap inStaticListValueMap
  ?targetParameters:let @targetParameters inTargetParameters
{
  var @generationAdds generationAdds = @()
  generationAdds.mStaticEntityMap = inIntermediateCodeStruct.mStaticEntityMap
  let @generationContext generationContext = @{
    !inPanicCodeType
    !inPanicLineType
    !inTargetParameters.mNopInstructionStringInLLVM.string
    !inIntermediateCodeStruct.mGlobalTaskVariableList
    !inAvailableInterruptMap
  }
  let sourceDirectory = inProductDirectory + "/sources"
#----------------------------------------- Add dynamic array extern routines
  if inTargetParameters.mHandleDynamicArray then
    generationAdds.mExternFunctionDeclarationSet += !"void @arc.retain (%ptrtype %inPtr)"
    generationAdds.mExternFunctionDeclarationSet += !"void @arc.release (%ptrtype %inPtr)"
    generationAdds.mExternFunctionDeclarationSet += !"%ptrtype @arc.insulate (%ptrtype %inPtr)"
    let insertFunction = "%ptrtype @arc.insert.at.index "
                       + "(%ptrtype %inPointer, i32 %inIndex, i32 %inElementSize, %ptrtype* %outElementPtr)"
    generationAdds.mExternFunctionDeclarationSet += !insertFunction
    generationAdds.mExternFunctionDeclarationSet += !"i32 @arc.length (%ptrtype %inPointer)"
  end
#----------------------------------------- Include assembler specific file
  var asCode = asTitleComment (!"Target specific code")
  var asFileContents = ""
  for (relativePath) in inTargetParameters.m_S_definitionFiles do
    asFileContents += getTargetTextFile (
      !currentDir:inCurrentDirectory
      !from:inTargetName.string + "/" + relativePath
    )
  end
  let x = [asFileContents stringByReplacingStringByString !"!FUNC!" !llvmNameForFunction (!"")]
  asCode += [x stringByReplacingStringByString !"!ISR!" !llvmNameForSectionInterrupt (!"")]
  asCode += "\n"
#----------------------------------------- Include LLVM specific file
  var llvmCode = llvmTitleComment (!"Target specific code")
  var targetLLVMcode = ""
  for (relativePath) in inTargetParameters.m_LL_definitionFiles do
    targetLLVMcode += getTargetTextFile (
      !currentDir:inCurrentDirectory
      !from:inTargetName.string + "/" + relativePath
    )
  end
  llvmCode += [targetLLVMcode stringByReplacingStringByString !"!FUNC!" !llvmNameForFunction (!"")]
  llvmCode += "\n"
#----------------------------------------- Type declarations
  declareLLVMTypes (!inUserLLVMTypeDefinitionListIR !?llvmCode)
#----------------------------------------- Drivers
  for driver in inIntermediateCodeStruct.mDriverList
    before llvmCode += llvmTitleComment (!"Driver variable definitions")
    do [driver generateLLVMDriverVariableDefinition !?llvmCode]
    after llvmCode += "\n"
  end
#----------------------------------------- Control register group array
  [inIntermediateCodeStruct.mControlRegisterGroupArrayList generateLLVMcode !?llvmCode !inTargetParameters.mPointerSize]
#----------------------------------------- Global sync instances
  for globalSyncInstance in inIntermediateCodeStruct.mGlobalSyncInstanceMap
    before llvmCode += llvmTitleComment (!"Global synchronization tool instances")
    do [globalSyncInstance generateLLVM !?llvmCode]
    after llvmCode += "\n"
  end
#----------------------------------------- Static array type declaration
  [inStaticListValueMap generateLLVMForStaticLists !inIntermediateCodeStruct.mStaticArrayMapForIntermediate !?llvmCode]
#----------------------------------------- Driver Code
  [inIntermediateCodeStruct.mDriverList generateLLVMDriverCode !?llvmCode]
#----------------------------------------- Routines
  [inIntermediateCodeStruct.mRoutineListIR llvmRoutineGeneration
    !?llvmCode
    !generationContext
    !?generationAdds
  ]
#----------------------------------------- Interrupts
  let undefinedInterruptString = getTargetTextFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/" + inTargetParameters.mUndefinedInterruptHandler
  )
  let XTRInterruptHandlerString = getTargetTextFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/" + inTargetParameters.mXtrInterruptHandler
  )
  [inIntermediateCodeStruct.mInterruptMapIR interruptCodeGeneration
    !?llvmCode
    !?asCode
    !undefinedInterruptString
    !XTRInterruptHandlerString
    !generationContext
    !?generationAdds
  ]
#----------------------------------------- Extern procedures
  [inIntermediateCodeStruct.mExternProcedureMapIR llvmPrototypeGeneration !?llvmCode]
  var @primitiveAndServiceIRlist primitiveAndServiceList = @[]
#----------------------------------------- Use guards ?
  if generationAdds.mUsesGuards then
    let waitForGuardChange = waitForGuardChangeFunctionName ()
    primitiveAndServiceList +=
      !llvmNameForServiceCall (!waitForGuardChange)
      !llvmNameForServiceImplementation (!waitForGuardChange)
      !true # A (boolean) value is returned
    generationAdds.mExternFunctionDeclarationSet +=
      !"i1 @" + llvmNameForServiceCall (!waitForGuardChange) + " ()"
  end
#----------------------------------------- Routine list
  var @sectionIRlist sectionIRlist = @[]
  for routine in inIntermediateCodeStruct.mRoutineListIR do
    [routine.mRoutine svcDeclarationGeneration
      !?primitiveAndServiceList
      !?sectionIRlist
      !?generationAdds
    ]
  end
#----------------------------------------- tasks
  [inIntermediateCodeStruct.mTaskMapIR generateCode
    !?llvmCode
    !generationContext
    !?generationAdds
    !?primitiveAndServiceList
  ]
#----------------------------------------- Primitive, service dispatcher
  generatePrimitiveAndServiceDispatcher (
    !inCurrentDirectory
    !inTargetName.string
    !?asCode
    !primitiveAndServiceList
    !targetParameters:inTargetParameters
  )
#----------------------------------------- Panic
  if not [option omnibus_options.noPanicGeneration value] then
    generatePanicCode (
      !?llvmCode
      !generationContext: generationContext
      !?generationAdds: generationAdds
    )
  end
#----------------------------------------- Section, safe dispatcher
  if generationAdds.mNeedsDynamicMemoryAllocation then
    sectionIRlist += 
      !llvmNameForSectionCall (!memoryAllocSectionName ())
      !llvmNameForSectionImplementation (!memoryAllocSectionName ())
      !invocationFromAnyMode: true
    sectionIRlist += 
      !llvmNameForSectionCall (!memoryFreeSectionName ())
      !llvmNameForSectionImplementation (!memoryFreeSectionName ())
      !invocationFromAnyMode: true
  end
  generateSectionDispatcher (
    !inCurrentDirectory
    !inTargetName.string
    !targetParameters:inTargetParameters
    !?asCode
    !sectionIRlist
  )
#----------------------------------------- Extern function declaration
  llvmCode += llvmTitleComment (!"LLVM extern functions")
  for (s) in generationAdds.mExternFunctionDeclarationSet do
    llvmCode += "declare " + s + "\n"
  end
  llvmCode += "\n"
#----------------------------------------- Static Strings
  if [generationAdds.mStaticEntityMap.mStaticStringMap count] > 0 then
    llvmCode += llvmTitleComment (!"Static strings")
    for (lkey mIndex) in generationAdds.mStaticEntityMap.mStaticStringMap do
      let lgStr = [[lkey.string utf8Length] + 1 string]
      llvmCode += literalCharacterArrayName (!mIndex) + " = private unnamed_addr constant ["
      llvmCode += lgStr + " x i8] c\"" + lkey.string + "\\00\", align 1\n"
      llvmCode += literalStringName (!mIndex) + " = private constant i8* getelementptr inbounds (["
      llvmCode += lgStr + " x i8], [" + lgStr + " x i8]* "
      llvmCode += literalCharacterArrayName (!mIndex) + ", i32 0, i32 0), align 4\n\n"
    end
  end
#----------------------------------------- Global structured constants
  if [generationAdds.mStaticEntityMap.mGlobalStructuredConstantList count] > 0 then
    llvmCode += llvmTitleComment (!"Global structured constants")
    for (mType mOperandIRList) in generationAdds.mStaticEntityMap.mGlobalStructuredConstantList do (idx)
      llvmCode += "@gconst." + idx + " = private unnamed_addr constant " + [mType llvmTypeName]
      llvmCode += " ["
      for (mOperand) in mOperandIRList
        do llvmCode += [mOperand llvmTypeName] + " " + [mOperand llvmName]
        between llvmCode += ", "
      end
      llvmCode += "]\n"
    end
    llvmCode += "\n"
  end
#----------------------------------------- Write LLVM file
  llvmCode += llvmSeparatorLine ()
  [llvmCode writeToFileWhenDifferentContents !sourceDirectory + "/src.ll" ?*]
#----------------------------------------- Write assembler file
  asCode += asSeparatorLine ()
  [asCode writeToFileWhenDifferentContents !sourceDirectory + "/src.s" ?*]
#----------------------------------------- Build builtin C++ code (by performing substitutions)
  var s0 = ""
  for (relativePath) in inTargetParameters.m_C_definitionFiles do
    s0 += getTargetTextFile (
      !currentDir:inCurrentDirectory
      !from:inTargetName.string + "/" + relativePath
    )
  end
  let s1 = [s0 stringByReplacingStringByString !"!TASKCOUNT!" ![[inIntermediateCodeStruct.mTaskMapIR count] string]]
  let s2 = [s1 stringByReplacingStringByString !"!GUARDCOUNT!" ![inIntermediateCodeStruct.mMaxBranchOfOnInstructions string]]
  let s3 = [s2 stringByReplacingStringByString !"!FUNC!" !llvmNameForFunction (!"")]
  let s4 = [s3 stringByReplacingStringByString !"!SERVICEIMPLEMENTATION!" !llvmNameForServiceImplementation (!"")]
  let s5 = [s4 stringByReplacingStringByString !"!SERVICECALL!" !llvmNameForServiceCall (!"")]
  let s6 = [s5 stringByReplacingStringByString !"!SECTIONIMPLEMENTATION!" !llvmNameForSectionImplementation (!"")]
  let cppCode = [s6 stringByReplacingStringByString !"!SECTIONCALL!" !llvmNameForSectionCall (!"")]
#----------------------------------------- Add user type declarations
#  for (userType) in inIntermediateCodeStruct.mTypeCppGenerationList do
#    [userType generateTypeCppCode !?cppCode]
#  end
#----------------------------------------- Write C++ file
  [cppCode writeToFileWhenDifferentContents !sourceDirectory + "/src.cpp" ?*]
#----------------------------------------- Write JSON file with stack features
  var json = "{\n"
#--- System stack size
  json += "  \"system-stack-size\" : " + inIntermediateCodeStruct.mTargetParameters.mSystemStackSize.bigint + ",\n"
  json += "  \"stacked-register-size-on-user-stack\" : "
       + inIntermediateCodeStruct.mTargetParameters.mStackedUserRegisterOnInterruptByteSize.bigint + ",\n"
  json += "  \"service-stack-needs\" : " + inIntermediateCodeStruct.mTargetParameters.mServicePushedRegisterByteSize.bigint + ",\n"
  json += "  \"section-stack-needs\" : " + inIntermediateCodeStruct.mTargetParameters.mSectionPushedRegisterByteSize.bigint + ",\n"
#--- Tasks
  json += "  \"tasks\" : {"
  for task in inIntermediateCodeStruct.mTaskMapIR
    do json += "\n    \"" + [task.lkey assemblerRepresentation] + "\" : " + task.mStackSize
    between json += ","
  end
  json += "\n"
  json += "  },\n"
#--- Services
  json += "  \"services\" : ["
  for (* serviceImplementation *) in primitiveAndServiceList
    do json += "\n    \"" + serviceImplementation + "\""
    between json += ","
    after json += "\n"
  end
  json += "  ],\n"
#--- sections
  json += "  \"sections\" : ["
  for section in sectionIRlist
    do json += "\n    \"" + section.mSectionImplementationName + "\""
    between json += ","
    after json += "\n"
  end
  json += "  ],\n"
#--- isr
  json += "  \"isr\" : ["
  var first = true
  for (interruptName 2* mMode) in inIntermediateCodeStruct.mInterruptMapIR do
    if first then
      first = false
    else
      json += ","
    end
    let interruptImplementationName = if mMode == .serviceMode then
      llvmNameForServiceInterrupt (!interruptName).string
    else
      llvmNameForSectionInterrupt (!interruptName.string)
    end
    json += "\n    \"" + interruptImplementationName + "\""
  end
  if not [option omnibus_options.noPanicGeneration value] then
    for (lkey panicCode) in inAvailableInterruptMap do
      if not [inIntermediateCodeStruct.mInterruptMapIR hasKey !lkey.string] then
        switch panicCode
        case noCode :
        case code (*) :
          if first then
            first = false
          else
            json += ","
          end
          json += "\n    \"" + llvmNameForSectionInterrupt (!lkey.string) + "\""
        end
      end
    end
  end
  json += "\n  ]\n"
#--- Write file
  json += "}\n"
  [json writeToFileWhenDifferentContents !sourceDirectory + "/provided-stacks.json" ?*]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

