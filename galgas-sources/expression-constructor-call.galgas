#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @constructorCall : @expressionAST {
  @lstring mOptionalTypeName
  @lstring mConstructorName
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  rule <primary> !@expressionAST outExpression {
    @lstring optionalTypeName
    select
      optionalTypeName = .new {!"" !.here}
    or
      $typeName$ ?optionalTypeName
    end
    $.$
    $identifier$ ?let constructorName
#    select
#    or
#      ${$
#      
#      $}$
#    end
    outExpression = @constructorCall.new {!optionalTypeName !constructorName}
  }

}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @constructorCall addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  if mOptionalTypeName.string != "" then
    [!?ioGraph addEdge !inConstantName !mOptionalTypeName]
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @constructorCall analyzeExpression
  ?routineNameForInvocationGraph:let @lstring unused inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType unused inReceiverType
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset unused inModeSet
  ?allowException:let @bool unused inAllowExceptions
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap unused ioVariableMap
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
  !expressionType:@unifiedTypeMap-proxy outExpressionType
  !result:@variableKindIR outResult
{
#--- Analyze constructor source type
  let @unifiedTypeMap-proxy optionalSourceType = if mOptionalTypeName.string == ""
    then .null
    else .searchKey {!inContext.mTypeMap !mOptionalTypeName}
  end
#--- Solve inferred type
  outExpressionType = solveInferredType (
    !targetType:inOptionalTargetType
    !sourceType:optionalSourceType
    !errorLocation:mConstructorName.location
  )
#--- Get inferred type constructor map
  let constructorMap = [outExpressionType constructorMap]
#--- Check constructor
  [constructorMap searchKey !mConstructorName ?let constantValue]
#--- Generate code
  outResult = .literalUnsignedInteger {!value:constantValue}
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

#class @constructorCallIR : @abstractInstructionIR {
#  @unifiedTypeMap-proxy mTargetType
#  @variableKindIR mTargetTemporaryVariable
#  @string mCallExpression
#}

#----------------------------------------------------------------------------------------------------------------------*

#override getter @constructorCallIR instructionCode -> @string outCode {
#  outCode  = "const " + mangledNameForType (!name:[mTargetType key]) + " "
#  outCode += [mTargetTemporaryVariable mangledName] + " = "
#  outCode += mCallExpression + " ;\n"
#}

#----------------------------------------------------------------------------------------------------------------------*

#override method @constructorCallIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
#  [mTargetTemporaryVariable enterAccessibleEntities !?ioAccessibleEntities]
#}

#----------------------------------------------------------------------------------------------------------------------*
