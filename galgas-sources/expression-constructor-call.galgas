#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                 *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @constructorCall : @expressionAST {
  @lstring mTypeName
  @location mErrorLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                              *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  rule <primary> !@expressionAST outExpression {
    @lstring optionalTypeName
#    select
#      optionalTypeName = .new {!"" !.here}
#    or
      $typeName$ ?optionalTypeName
#    end
    let errorLocation = @location.here
    $($
    $)$
    outExpression = @constructorCall.new {!optionalTypeName !errorLocation}
  }

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @constructorCall addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let typeName = @lstring.new {!"$" + mTypeName !mTypeName.location}
  [!?ioGraph addEdge !inConstantName !typeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @constructorCall noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  let typeName = @lstring.new {!"$" + mTypeName !mTypeName.location}
  [!?ioGraph noteNode !typeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @constructorCall analyzeExpression
  ?routineNameForInvocationGraph:let @lstring unused inRoutineNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset unused inModeSet
  ?allowException:let @bool unused inAllowExceptions
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap unused ioVariableMap
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
  !result:@operandIR outResult
{
#--- Analyze constructor source type
  @unifiedTypeMap-proxy resultType
  if mTypeName.string == "" then
    resultType = inOptionalTargetType
  else
    resultType = .searchKey {!inContext.mTypeMap !mTypeName}
  end
  if resultType == .null then
    error mErrorLocation : "cannot infer type" : outResult
  else
    [inContext.mConstructorMap searchKey ![[resultType key] nowhere] ?let initValue]
    switch initValue
    case simple (value) : outResult = .new {!resultType !.literalInteger {!value:value}}
    case structure (values) : outResult = .new {!resultType !.llvmStructureConstant {!values:values}}
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
