#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @functionCallEffectiveParameterListAST {
  public var @lstring mSelector
  public var @expressionAST mExpression
}

#·······················································································································

refclass @constructorCallAST : @expressionAST {
  public var @lstring mTypeName
  public var @functionCallEffectiveParameterListAST mParameterList
  public var @location mErrorLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    <type_definition> !?ioAST ?let typeName
    $($
    var @functionCallEffectiveParameterListAST parameterList = §[]
    repeat
    while
      $!selector:$ ?let selector
      <expression> !?ioAST ?let expression
      parameterList += !selector !expression
    end
    let errorLocation = @location.here
    $)$
    outExpression = @constructorCallAST.init {!typeName !parameterList !errorLocation}
  }

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @constructorCallAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addEdge !inConstantName !self.mTypeName]
  
  for (* mExpression) in self.mParameterList do
    [mExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @constructorCallAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [!?ioGraph noteNode !self.mTypeName]
  for (* mExpression) in self.mParameterList do
    [mExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @constructorCallAST analyzeExpression
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?optionalTargetType:let @omnibusType unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- Analyze effective argument list
  var constructorKey = "("
  for (selector *) in self.mParameterList do
    constructorKey += "!" + selector
  end
  constructorKey += ")"
#--- Analyze constructor signature and init value
  let resultType = [[inContext.mTypeMap searchKey !self.mTypeName] type]
  let typeName = @lstring.init {!resultType.omnibusTypeDescriptionName !self.mErrorLocation}
  [inContext.mTypeConstructorMap searchKey !typeName ?let constructorMap]
#  let constructorMap = resultType.constructorMap2
  [constructorMap searchKey !.init {!constructorKey !self.mErrorLocation} ?let constructorSignature ?let initValue]
#--- Examine init value
  switch initValue
  case arrayValue (elementType size) :
    if constructorKey == "(!repeated)" then
      let expression = [self.mParameterList mExpressionAtIndex !0]
      [expression analyzeExpression
        !self:inSelfType
        !routineAttributes:inRoutineAttributes
        !optionalTargetType:elementType
        !context:inContext
        !mode:inMode
        !?temporary:ioTemporaries
        !?staticEntityMap:ioStaticEntityMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !?instructionListIR:ioInstructionGenerationList
        ?result:let @objectIR expressionResult
      ]
      let result = checkAssignmentCompatibility (
        !inContext.mAssignmentOperatorMap
        !source:expressionResult
        !targetAnnotationType:elementType
        !errorLocation:[self.mParameterList mSelectorAtIndex !0].location
        !staticTypeAllowed:false
      )
      if [result isStatic] then
        let idx = [ioStaticEntityMap.mGlobalStructuredConstantList  count]
        outResult = .llvmArrayRepeatedStaticValue {!type:resultType !arraySize:size !value:result !index:idx}
        var @operandIRList operandIRList = §[]
        for * in 0 ..< size do
          operandIRList += !result
        end
        ioStaticEntityMap.mGlobalStructuredConstantList += !resultType !operandIRList
      else
        outResult = .llvmArrayRepeatedDynamicValue {!type:resultType !arraySize:size !value:result}
      end
    else
      var individualConstructor = "("
      for * in 0 ..< size do
        individualConstructor += "!"
      end
      individualConstructor += ")"
      if constructorKey == individualConstructor then
        var @operandIRList operandIRList = §[]
        var resultIsStatic = true
        for (mSelector mExpression) in self.mParameterList do
          [mExpression analyzeExpression
            !self:inSelfType
            !routineAttributes:inRoutineAttributes
            !optionalTargetType:elementType
            !context:inContext
            !mode:inMode
            !?temporary:ioTemporaries
            !?staticEntityMap:ioStaticEntityMap
            !?variableMap:ioUniversalMap
            !?alloca:ioAllocaList
            !?instructionListIR:ioInstructionGenerationList
            ?result:let @objectIR expressionResult
          ]
          let result = checkAssignmentCompatibility (
            !inContext.mAssignmentOperatorMap
            !source:expressionResult
            !targetAnnotationType:elementType
            !errorLocation:mSelector.location
            !staticTypeAllowed:false
          )
          operandIRList += !result
          resultIsStatic = resultIsStatic && [result isStatic]
        end
        if resultIsStatic then
          let idx = [ioStaticEntityMap.mGlobalStructuredConstantList  count]
          outResult = .llvmArrayStaticValues {!type:resultType !values:operandIRList !index:idx}
          ioStaticEntityMap.mGlobalStructuredConstantList += !resultType !operandIRList
        else
          outResult = .llvmArrayDynamicValues {!type:resultType !values:operandIRList}
        end
      else
        error self.mErrorLocation : "invalid constructor" : outResult
      end
    end
  case null :
    outResult = .null {!type: resultType}
  case simple (value) :
    if [self.mParameterList count] != 0 then
      error self.mErrorLocation : resultType.omnibusTypeDescriptionName + " constructor should have no parameter" : outResult
    else
      outResult = .literalInteger {!type: resultType !value:value}
    end
  case structure (sortedOperandList) :
    var sortedOperandIRList = sortedOperandList
    if [self.mParameterList count] != [constructorSignature count] then
      error self.mErrorLocation : "this constructor call should name " + [constructorSignature count] + " parameter"
        + if [constructorSignature count] > 1 then "s" else "" end
        + " instead of " + [self.mParameterList count]
      : outResult
    else
      for (formal_mSelector formal_mType formal_mFieldIndex) in constructorSignature, (effective_mSelector effective_mExpression) in self.mParameterList do
        if effective_mSelector.string != formal_mSelector  then
          error effective_mSelector : "the selector should be '!" + formal_mSelector + ":'"
        end
        [effective_mExpression analyzeExpression
          !self:inSelfType
          !routineAttributes:inRoutineAttributes
          !optionalTargetType:formal_mType
          !context:inContext
          !mode:inMode
          !?temporary:ioTemporaries
          !?staticEntityMap:ioStaticEntityMap
          !?variableMap:ioUniversalMap
          !?alloca:ioAllocaList
          !?instructionListIR:ioInstructionGenerationList
          ?result:let @objectIR expressionResult
        ]
        var result = checkAssignmentCompatibility (
          !inContext.mAssignmentOperatorMap
          !source:expressionResult
          !targetAnnotationType:formal_mType
          !errorLocation:effective_mSelector.location
          !staticTypeAllowed:false
        )
        [!?ioInstructionGenerationList appendLoadWhenReference !?ioTemporaries !?result]
        sortedOperandIRList += !result !formal_mFieldIndex
      end
      outResult = .llvmStructureValue {!type:resultType !values:sortedOperandIRList}
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
