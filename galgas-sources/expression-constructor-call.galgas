#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @constructorCall : @expressionAST {
  @lstring mOptionalTypeName
  @lstring mConstructorName
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  rule <primary> !@expressionAST outExpression {
    @lstring optionalTypeName
    select
      optionalTypeName = .new {!"" !.here}
    or
      $typeName$ ?optionalTypeName
    end
    $.$
    $identifier$ ?let constructorName
    outExpression = @constructorCall.new {!optionalTypeName !constructorName}
  }

}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @constructorCall addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  if mOptionalTypeName.string != "" then
    [!?ioGraph addEdge !inConstantName !mOptionalTypeName]
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @constructorCall analyzeExpression
  ?routineNameForInvocationGraph:let @lstring unused inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType unused inReceiverType
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset unused inModeSet
  ?allowException:let @bool unused inAllowExceptions
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap unused ioVariableMap
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
  !type:@unifiedTypeMap-proxy outType
  !result:@valueIR outResult
{
#--- Analyze constructor source type
  if mOptionalTypeName.string == "" then
    outType = inOptionalTargetType
  else
    outType = .searchKey {!inContext.mTypeMap !mOptionalTypeName}
  end
  if outType == .null then
    error mConstructorName : "cannot infer type" : outType, outResult
  else
  #--- Get inferred type constructor map
    let constructorMap = [outType constructorMap]
  #--- Check constructor and get result
    [constructorMap searchKey !mConstructorName ?outResult]
  end
}

#----------------------------------------------------------------------------------------------------------------------*
