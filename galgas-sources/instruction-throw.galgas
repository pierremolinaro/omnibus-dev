#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @throwInstructionAST : @instructionAST {
  @location mThrowLocation
  @expressionAST mCodeExpression
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $throw$
    let loc = @location.here
    <expression> ?let @expressionAST codeExpression
    ioInstructionList += !@throwInstructionAST.new {!loc !codeExpression}
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @throwInstructionAST analyze
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Exception allowed ?
  if [inModeSet hasKey !exceptionModeName ()] then
    error mThrowLocation : "operations that can generate exceptions are not allowed in $" + exceptionModeName () + " mode"
  end
#--- Analyze expression
  @instructionListIR unusedInstructionListIR = {}
  [mCodeExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalReceiverType:inReceiverType
    !optionalTargetType:inContext.mExceptionCodeType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:unusedInstructionListIR
    ?result:@operandIR result
  ]
#--- Expression type check
#--- Expression is static ?
  if ([unusedInstructionListIR length] > 0)
     || not [result.mValue isLiteralInteger]
     || ([result.mType key] != literalIntegerTypeName ()) then
    error mThrowLocation : "throw expression should be a literal integer"
  else
    [[inContext.mExceptionCodeType kind] integer ?min:let min ?max:let max ?unsigned:* ?bitCount:*]
    [result.mValue literalInteger ?value:let throwValue]
    if (throwValue < min) || (throwValue > max) then
      error mThrowLocation : "throw expression cannot be represented by an $" +[inContext.mExceptionCodeType key]
    elsif not [option plm_options.noExceptionGeneration value] then
      ioInstructionGenerationList += !@throwInstructionIR.new {
        !mThrowLocation
        !throwValue
      }
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

class @throwInstructionIR : @abstractInstructionIR {
  @location mThrowLocation
  @bigint mCode
}

#----------------------------------------------------------------------------------------------------------------------*

override method @throwInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  [!?ioGenerationAdds.mStaticStringMap findOrAddStaticString
    ![[[mThrowLocation file] lastPathComponent] stringByDeletingPathExtension]
    ?let staticStringIndex
  ]
  let lbl = [mThrowLocation locationIndex]
  ioLLVMcode += "  %str." + lbl + " = load i8*, i8** " + literalStringName (!staticStringIndex) + "\n"
  ioLLVMcode += "  call void @raise_exception ("
  ioLLVMcode += inGenerationContext.mExceptionLineLLVMType + " " + [mThrowLocation line] + ", "
  ioLLVMcode += inGenerationContext.mExceptionCodeLLVMType + " " + mCode + ", "
  ioLLVMcode += "i8* %str." + lbl + ")\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @throwInstructionIR enterAccessibleEntities ?!@accessibleEntities unused ioAccessibleEntities {
}

#----------------------------------------------------------------------------------------------------------------------*
