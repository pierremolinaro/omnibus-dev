#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @objectIR
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @objectIR {
#--- No object (for example, no return value for a procedure)
  case void
#--- Reference
  case reference (@PLMType type @string llvmName)
#--- Type
  case type (@PLMType type)
#--- Values
  case null (@PLMType type)
  case llvmValue (@PLMType type @string llvmName)
  case literalInteger  (@PLMType type @bigint value)
  case llvmStructureValue (@PLMType type @sortedOperandIRList values)
  case literalString  (@uint utf8Size @uint index)
  case zero (@PLMType type)

#--- Array values
  case llvmArrayStaticValues (@PLMType type @operandIRList values @uint index)
  case llvmArrayDynamicValues (@PLMType type @operandIRList values)
  case llvmArrayRepeatedStaticValue (@PLMType type @uint arraySize @objectIR value @uint index)
  case llvmArrayRepeatedDynamicValue (@PLMType type @uint arraySize @objectIR value)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR llvmName -> @string {
  switch self
  case void : error .nowhere : "<<@objectIR llvmName void>>" : result
  case type (*) : error .nowhere : "<<@objectIR llvmName type>>" : result
  case zero (*) : result = "zeroinitializer"
  case null (*) : result = "null"
  case literalInteger (* @bigint value) : result = [value string]
  case llvmValue (* llvmName) : result = llvmName
  case reference (* llvmName) : result = llvmName
  case llvmStructureValue (* @sortedOperandIRList inValues) :
    result = "{"
    for () in inValues
      do result += [mOperand llvmTypeName] + " " + [mOperand llvmName]
      between result += ", "
    end
    result += "}"
  case llvmArrayStaticValues (2* index) :
    result = "@gconst." + index
  case llvmArrayRepeatedStaticValue (3* index) :
    result = "@gconst." + index
  case literalString  (@uint size @uint index) :
    let sizeStr = [size string]
    result = "getelementptr inbounds ([" + sizeStr + " x i8], [" + sizeStr + " x i8]* "
    result += literalCharacterArrayName (!index) + ", i32 0, i32 0)"
  case llvmArrayRepeatedDynamicValue (3*) :
    error .nowhere : "<< ERROR @objectIR llvmName llvmArrayRepeatedDynamicValue >>\n" : result
  case llvmArrayDynamicValues (2*) :
    error .nowhere : "<< ERROR @objectIR llvmName llvmArrayDynamicValues >>\n" : result
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR llvmValue -> @string {
  switch self
  case void : error .nowhere : "<<@objectIR llvmName void>>" : result
  case type (*) : error .nowhere : "<<@objectIR llvmName type>>" : result
  case zero (*) : result = "zeroinitializer"
  case null (*) : result = "null"
  case literalInteger (* @bigint value) : result = [value string]
  case llvmValue (* llvmName) : result = llvmName
  case reference (* llvmName) : result = llvmName
  case literalString  (@uint size @uint index) :
    let sizeStr = [size string]
    result = "getelementptr inbounds ([" + sizeStr + " x i8], [" + sizeStr + " x i8]* "
    result += literalCharacterArrayName (!index) + ", i32 0, i32 0)"
  case llvmStructureValue (* @sortedOperandIRList inValues) :
    result = "{"
    for () in inValues
      do result += [mOperand llvmTypeName] + " " + [mOperand llvmValue]
      between result += ", "
    end
    result += "}"
  case llvmArrayStaticValues (* @operandIRList inValues *) :
    result = "["
    for () in inValues
      do result += [mOperand llvmTypeName] + " " + [mOperand llvmValue]
      between result += ", "
    end
    result += "]"
  case llvmArrayRepeatedStaticValue (* size value *) :
    result = "["
    for i in 0 ..< size
      do result += [value llvmTypeName] + " " + [value llvmValue]
      between result += ", "
    end
    result += "]"
  case llvmArrayRepeatedDynamicValue (3*) :
    error .nowhere : "<< ERROR @objectIR llvmValue llvmArrayRepeatedDynamicValue >>\n" : result
  case llvmArrayDynamicValues (2*) :
    error .nowhere : "<< ERROR @objectIR llvmValue llvmArrayRepeatedDynamicValue >>\n" : result
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR type -> @PLMType {
  switch self
  case void : error .nowhere : "<<@objectIR type void>>" : result
  case type (type) : result = type
  case reference (type *) : result = type
  case null (type) : result = type
  case zero (type) : result = type
  case literalInteger (type *) : result = type
  case llvmValue (type *) : result = type
  case llvmStructureValue (type *) : result = type
  case llvmArrayStaticValues (type * *) : result = type
  case literalString  (* *) : result = literalStringType ()
  case llvmArrayRepeatedStaticValue (type 3*) : result = type
  case llvmArrayRepeatedDynamicValue (type 2*) : result = type
  case llvmArrayDynamicValues (type *) : result = type
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR llvmTypeName -> @string {
  result = [[self type] llvmTypeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR plmTypeDescriptionName -> @string {
  result = [self type].plmTypeDescriptionName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR withType ?let @PLMType inType -> @objectIR {
  switch self
  case void :
    error .nowhere : "<<@objectIR withType void>>" : result
  case type (*) :
    error .nowhere : "<<@objectIR withType type>>" : result
  case reference (* llvmName) :
    result = .reference {!type:inType !llvmName:llvmName}
  case null (*) :
    result = .null {!type: inType}
  case literalInteger (* @bigint value) :
    result = .literalInteger {!type: inType !value: value}
  case llvmValue (* llvmName) :
    result = .llvmValue {!type: inType !llvmName:llvmName}
  case zero (*) :
    result = .zero {!type: inType}
  case llvmStructureValue (* @sortedOperandIRList values) :
    result = .llvmStructureValue {!type: inType !values: values}
  case literalString  (@uint size @uint index) :
    result = .literalString {!utf8Size: size !index: index}
  case llvmArrayRepeatedStaticValue (* size value index) :
    result = .llvmArrayRepeatedStaticValue {!type: inType !arraySize:size !value: value !index:index}
  case llvmArrayRepeatedDynamicValue (* size value) :
    result = .llvmArrayRepeatedDynamicValue {!type: inType !arraySize:size !value: value}
  case llvmArrayStaticValues (* @operandIRList values index) :
    result = .llvmArrayStaticValues {!type: inType !values: values !index:index}
  case llvmArrayDynamicValues (* @operandIRList values) :
    result = .llvmArrayDynamicValues {!type: inType !values: values}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR name -> @string {
  switch self
  case void : error .nowhere : "<<@objectIR name void>>" : result
  case type (*) : error .nowhere : "<<@objectIR name type>>" : result
  case reference (* llvmName) : result = llvmName
  case zero (*) : result = "zeroinitializer"
  case null (*) : result = "null"
  case literalInteger (* @bigint value) : result = [value string]
  case llvmValue (* name) : result = name
  case llvmStructureValue (* *) : result = "{...}"
  case llvmArrayStaticValues (3*) : result = "[...]"
  case llvmArrayDynamicValues (2*) : result = "[...]"
  case llvmArrayRepeatedStaticValue (4*) : result = "[...]"
  case llvmArrayRepeatedDynamicValue (3*) : result = "[...]"
  case literalString  (@uint size @uint index) :
    let sizeStr = [size string]
    result = "getelementptr inbounds ([" + sizeStr + " x i8], [" + sizeStr + " x i8]* "
    result += literalCharacterArrayName (!index) + ", i32 0, i32 0)"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR isStatic -> @bool {
  switch self
  case void : error .nowhere : "<<@objectIR isStatic void>>" : result
  case type (*) : error .nowhere : "<<@objectIR isStatic type>>" : result
  case reference (**) : result = false
  case zero (*) : result = true
  case null (*) : result = true
  case literalInteger (* *) : result = true
  case llvmValue (* *) : result = false
  case llvmStructureValue (* *) : result = true
  case llvmArrayStaticValues (3*) : result = true
  case llvmArrayDynamicValues (2*) : result = false
  case literalString  (* *) : result = true
  case llvmArrayRepeatedStaticValue (4*) : result = true
  case llvmArrayRepeatedDynamicValue (3*) : result = false
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
