#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @objectIR
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @objectIR {
#--- No object (for example, no return value for a procedure)
  case null
#--- Reference
  case reference (@PLMType type @string llvmName)
#--- Values
  case llvmValue (@PLMType type @string llvmName)
  case literalInteger  (@PLMType type @bigint value)
  case llvmStructureValue (@PLMType type @sortedOperandIRList values)
  case llvmArrayValue (@PLMType type @operandIRList values)
  case literalString  (@uint utf8Size @uint index)
  case zero (@PLMType type)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR isConstantValue -> @bool {
  switch self
  case null :
    result = true
  case zero (*) :
    result = true
  case literalInteger (* *) :
    result = true
  case llvmValue (* *) :
    result = false
  case reference (* *) :
    result = false
  case llvmStructureValue (* @sortedOperandIRList inValues) :
    result = true
    for () in inValues while result do
      result = [mOperand isConstantValue]
    end
  case llvmArrayValue (* @operandIRList inValues) :
    result = true
    for () in inValues while result do
      result = [mOperand isConstantValue]
    end
  case literalString  (* *) :
    result = true
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR isStructuredNonConstantValue -> @bool {
  switch self
  case null :
    result = false
  case zero (*) :
    result = false
  case literalInteger (* *) :
    result = false
  case llvmValue (* *) :
    result = false
  case reference (* *) :
    result = false
  case llvmStructureValue (* @sortedOperandIRList inValues) :
    result = true
    for () in inValues while result do
      result = [mOperand isConstantValue]
    end
  case llvmArrayValue (* @operandIRList inValues) :
    result = true
    for () in inValues while result do
      result = [mOperand isConstantValue]
    end
  case literalString  (* *) :
    result = false
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR llvmName -> @string {
  switch self
  case null : error .nowhere : "<<@objectIR llvmName null>>" : result
  case zero (*) : result = "zeroinitializer"
  case literalInteger (* @bigint value) : result = [value string]
  case llvmValue (* llvmName) : result = llvmName
  case reference (* llvmName) : result = llvmName
  case llvmStructureValue (* @sortedOperandIRList inValues) :
    result = "{"
    for () in inValues
      do result += [mOperand llvmTypeName] + " " + [mOperand llvmName]
      between result += ", "
    end
    result += "}"
  case llvmArrayValue (* @operandIRList inValues) :
    result = "["
    for () in inValues
      do result += [mOperand llvmTypeName] + " " + [mOperand llvmName]
      between result += ", "
    end
    result += "]"
  case literalString  (@uint size @uint index) :
    let sizeStr = [size string]
    result = "getelementptr inbounds ([" + sizeStr + " x i8], [" + sizeStr + " x i8]* "
    result += literalCharacterArrayName (!index) + ", i32 0, i32 0)"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR type -> @PLMType {
  switch self
  case null :
    error .nowhere : "<<@objectIR type null>>" : result
  case reference (type *) : result = type
  case zero (type) : result = type
  case literalInteger (type *) : result = type
  case llvmValue (type *) : result = type
  case llvmStructureValue (type *) : result = type
  case llvmArrayValue (type *) : result = type
  case literalString  (* *) : result = literalStringType ()
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR llvmTypeName -> @string {
  result = [[self type] llvmTypeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR plmTypeName -> @string {
  result = [self type].mPLMTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR withType ?let @PLMType inType -> @objectIR {
  switch self
  case null : error .nowhere : "<<@objectIR withType null>>" : result
  case reference (* llvmName) :
    result = .reference {!type:inType !llvmName:llvmName}
  case literalInteger (* @bigint value) :
    result = .literalInteger {!type: inType !value: value}
  case llvmValue (* llvmName) :
    result = .llvmValue {!type: inType !llvmName:llvmName}
  case zero (*) :
    result = .zero {!type: inType}
  case llvmStructureValue (* @sortedOperandIRList values) :
    result = .llvmStructureValue {!type: inType !values: values}
  case llvmArrayValue (* @operandIRList values) :
    result = .llvmArrayValue {!type: inType !values: values}
  case literalString  (@uint size @uint index) :
    result = .literalString {!utf8Size: size !index: index}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR name -> @string {
  switch self
  case null : error .nowhere : "<<@objectIR name null>>" : result
  case reference (* llvmName) : result = llvmName
  case zero (*) : result = "zeroinitializer"
  case literalInteger (* @bigint value) : result = [value string]
  case llvmValue (* name) : result = name
  case llvmStructureValue (* *) : result = "{...}"
  case llvmArrayValue (* *) : result = "[...]"
  case literalString  (@uint size @uint index) :
    let sizeStr = [size string]
    result = "getelementptr inbounds ([" + sizeStr + " x i8], [" + sizeStr + " x i8]* "
    result += literalCharacterArrayName (!index) + ", i32 0, i32 0)"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @objectIR isStatic -> @bool {
  switch self
  case null : error .nowhere : "<<@objectIR isStatic null>>" : result
  case reference (**) : result = false
  case zero (*) : result = true
  case literalInteger (* *) : result = true
  case llvmValue (* *) : result = false
  case llvmStructureValue (* *) : result = true
  case llvmArrayValue (* *) : result = true
  case literalString  (* *) : result = true
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
