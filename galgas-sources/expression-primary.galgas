#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @selfInExpressionAST {
  case noSelf
  case selfAt (@location location)
}

#·······················································································································

enum @effectiveArgumentPassingModeAST {
  case input (@lstring name)
  case inputWithType (@bool constant @lstring typeName @lstring name)
  case output (@expressionAST exp @location endOfExp)
  case outputInput (@lstring name)
  case outputInputSelfVariable (@lstring name)
}

#·······················································································································

getter @effectiveArgumentPassingModeAST matchingFormalArgument -> @string outResult {
  switch self 
  case input (*) : outResult = "!"
  case inputWithType (* * *) : outResult = "!"
  case output (* *) : outResult = "?"
  case outputInput (*) : outResult = "?!"
  case outputInputSelfVariable (*) : outResult = "?!"
  end
}

#·······················································································································

list @effectiveArgumentListAST {
  @effectiveArgumentPassingModeAST mEffectiveParameterKind
  @lstring mSelector
}

#·······················································································································

enum @primaryInExpressionAccessAST {
  case property (@lstring name)
  case arrayAccess (@expressionAST index @location endOfIndex)
  case funcCall (@effectiveArgumentListAST arguments @location endOfArguments)
}

#·······················································································································

list @primaryInExpressionAccessListAST {
  @primaryInExpressionAccessAST mAccess
}

#·······················································································································

class @primaryInExpressionAST : @expressionAST {
  @selfInExpressionAST mSelf
  @lstring mObjectName
  @primaryInExpressionAccessListAST mAccessList
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX                                                                                                               
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <primary> !@expressionAST outExpression {
  #--- Self ?
    @selfInExpressionAST selfInExpression
    select
      selfInExpression = .noSelf
    or
      $self$
      selfInExpression = .selfAt {!location:.here}
      $.$
    end
  #--- Object
    $identifier$ ?let objectName
  #--- Properties and access
    @primaryInExpressionAccessListAST accessListAST = {}
    repeat
    while
      $.$
      $identifier$ ?let propertyName
      accessListAST += !.property {!name:propertyName}
    while
      $[$
      <expression> ?let expression
      let endOfIndex = @location.here
      $]$
      accessListAST += !.arrayAccess {!index:expression !endOfIndex:endOfIndex}
    while
      <effective_parameters> ?let arguments ?let endOfArguments
      accessListAST += !.funcCall {!arguments:arguments !endOfArguments:endOfArguments}
    end
  #--- AST
    outExpression = @primaryInExpressionAST.new {!selfInExpression !objectName !accessListAST}
  }

  #·····················································································································

  rule <effective_parameters> !@effectiveArgumentListAST outEffectiveParameterList !@location outEndOfArgs {
    outEffectiveParameterList = {}
    $($
    repeat
    while
      $!$ ?let selector
      <expression> ?let expression
      outEffectiveParameterList += !.output{!exp:expression !endOfExp:.here} !selector
    while
      $!?$ ?let selector
      $identifier$ ?let effectiveParameterName
      outEffectiveParameterList += !.outputInput{!name:effectiveParameterName} !selector
    while
      $!?$ ?let selector
      $self$
      $.$
      $identifier$ ?let effectiveParameterName
      outEffectiveParameterList += !.outputInputSelfVariable{!name:effectiveParameterName} !selector
    while
      $?$ ?let selector
      $identifier$ ?let effectiveParameterName
      outEffectiveParameterList += !.input{!name:effectiveParameterName} !selector
    while
      $?$ ?let selector
      @bool constant
      select
        $var$
        constant = false
      or
        $let$
        constant = true
      end
      $identifier$ ?let effectiveParameterName
      @lstring typeName
      select
        typeName = ["" nowhere]
      or
        $\$type$ ?typeName
      end
      outEffectiveParameterList += !.inputWithType{!constant:constant !typeName:typeName !name:effectiveParameterName} !selector
    end
    outEndOfArgs = .here
    $)$
  }

  #·····················································································································

}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @primaryInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addEdge !inConstantName !mObjectName]
  for (access) in mAccessList do
    switch access
    case property (@lstring unused name) :
    case arrayAccess (@expressionAST indexExpression *) :
      [indexExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
    case funcCall (@effectiveArgumentListAST arguments *) :
      for () in arguments do
        switch mEffectiveParameterKind
        case input (*):
        case inputWithType (* @lstring typeName *) :
          if typeName.string != "" then
            [!?ioGraph noteNode !llvmRegularTypeMangledNameFromName (!typeName)]
          end
        case output (expression *) : [expression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
        case outputInput (*) :
        case outputInputSelfVariable (*) :
        end 
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @primaryInExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for (access) in mAccessList do
    switch access
    case property (@lstring unused name) :
    case arrayAccess (@expressionAST indexExpression *) :
      [indexExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    case funcCall (@effectiveArgumentListAST arguments *) :
      for () in arguments do
        switch mEffectiveParameterKind
        case input (*):
        case inputWithType (* @lstring typeName *) :
          if typeName.string != "" then
            [!?ioGraph noteNode !llvmRegularTypeMangledNameFromName (!typeName)]
          end
        case output (expression *) : [expression noteExpressionTypesInPrecedenceGraph !?ioGraph]
        case outputInput (*) :
        case outputInputSelfVariable (*) :
        end 
      end
    end
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS                                                                                                            
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @internalRepresentation {
  case standAloneIdentifier (@lstring identifier)
  case structureMember (@lstring propertyName @objectIR currentPointerIR)
  case bitField (@sliceMap sliceMap @objectIR valueIR)
}

#·······················································································································

override method @primaryInExpressionAST analyzeExpressionNew
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- object access, with ou without self
  @internalRepresentation internalRepresentation
  switch mSelf
  case noSelf :
    if inGuard then
      error mObjectName : "in guard, only 'self' properties may be accessed" : internalRepresentation
    else 
      internalRepresentation = .standAloneIdentifier {!identifier:mObjectName}
    end
  case selfAt (selfLocation) :
    if inSelfType == .null then
      error selfLocation : "'self' is not available in this context" : internalRepresentation
    elsif [[inSelfType kind] isStructure] then
      internalRepresentation = .structureMember {
        !propertyName:mObjectName
        !currentPointerIR:.selfObject {!type:inSelfType}
      }
    else
      error selfLocation : "'self' should be a structure instance" : internalRepresentation
    end
  end
#--- Access list
  for (access) in mAccessList do
    switch access
    case property (@lstring propertyName) :
      handlePropertyAccessInExpressionNew (
        !?internalRepresentation
        !propertyName
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !optionalTargetType:inOptionalTargetType
        !context:inContext
        !mode:inCurrentMode
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !?instructionListIR:ioInstructionGenerationList
      )
    case arrayAccess (@expressionAST indexExpression @location endOfIndex) :
      handleArrayAccessInExpressionNew (
        !?internalRepresentation
        !indexExpression
        !endOfIndex
        !self:inSelfType
        !inGuard:inGuard
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !optionalTargetType:inOptionalTargetType
        !context:inContext
        !mode:inCurrentMode
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !?instructionListIR:ioInstructionGenerationList
      )
    case funcCall (@effectiveArgumentListAST arguments @location errorLocation) :
      handleFunctionCallInExpressionNew (
        !?internalRepresentation
        !self:inSelfType
        !inGuard:inGuard
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !context:inContext
        !mode:inCurrentMode
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !arguments 
        !errorLocation
        !?ioInstructionGenerationList
      )
    end
  end
#--- Analyze current internal representation, in order to get result as @objectIR
  switch internalRepresentation
  case standAloneIdentifier (@lstring unused identifier) :
    [!?ioUniversalMap searchValuedObjectForReadAccess !identifier ?outResult]
  case structureMember (propertyName @objectIR currentPointer) :
    if [[currentPointer kind] isStructure] then
      [[currentPointer kind] structure ?2* ?universalMap:let structureMap ?2*]
      var m = structureMap
      [!?m searchValuedObjectForReadAccess !propertyName ?let @objectIR masterPropertyIR]
      let newObject = @objectIR.temporaryReference {
         !type:[masterPropertyIR type] # [currentPointer type]
         !llvmName:.new {!"temp." + ioTemporaries.mTemporaryIndex !propertyName}
         !sliceMap:{}
         !volatile:false
      }
      ioTemporaries.mTemporaryIndex ++
      [masterPropertyIR property ?type:* ?plmName:* ?index:let index]
      [!?ioInstructionGenerationList appendGetPropertyReference
        !newObject
        !currentPointer
        !propertyName
        !index
      ]
      outResult = newObject
    else
      error [currentPointer location] : "this should be a structure instance" : outResult
    end
  case bitField (@sliceMap unused sliceMap @objectIR valueIR) :
    outResult = valueIR
  end
}

#·······················································································································

proc handleArrayAccessInExpressionNew
  ?!@internalRepresentation ioInternalRepresentation
  ?let @expressionAST inIndexExpression
  ?let @location inEndOfIndex
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  @objectIR variableIR
  @location errorLocation
  switch ioInternalRepresentation
  case standAloneIdentifier (@lstring identifier) :
    errorLocation = identifier
    [!?ioUniversalMap searchValuedObjectForReadAccess !identifier ?variableIR]
  case structureMember (@lstring propertyName @objectIR currentPointerIR) :
    if [[currentPointerIR kind] isStructure] then
      errorLocation = propertyName
      [[currentPointerIR kind] structure ?2* ?universalMap:let structureMap ?2*]
      var m = structureMap
      [!?m searchValuedObjectForReadAccess !propertyName ?let @objectIR masterPropertyIR]
      variableIR = @objectIR.temporaryReference {
         !type:[masterPropertyIR type] # [currentPointer type]
         !llvmName:.new {!"temp." + ioTemporaries.mTemporaryIndex !propertyName}
         !sliceMap:{}
         !volatile:false
      }
      ioTemporaries.mTemporaryIndex ++
      [masterPropertyIR property ?type:* ?plmName:* ?index:let index]
      [!?ioInstructionGenerationList appendGetPropertyReference
        !variableIR
        !currentPointerIR
        !propertyName
        !index
      ]
    else
      error [currentPointerIR location] : "this should be a structure instance" : variableIR, errorLocation
    end
  case bitField (@sliceMap unused sliceMap valueIR) :
    error [valueIR location] : "this object is not an array" : variableIR, errorLocation
  end
#--- Check current object is an array
  if [[[variableIR type] kind] isArrayType] then
    handleSubscriptArrayInAssignmentAndExpressionNew (
      !self: inSelfType
      !inGuard: inGuard
      !routineNameForInvocationGraph: inCallerNameForInvocationGraph
      !context: inContext
      !mode: inCurrentMode
      !?temporary: ioTemporaries
      !?staticStringMap: ioGlobalLiteralStringMap
      !?variableMap:ioUniversalMap
      !?alloca: ioAllocaList
      !inIndexExpression 
      !inEndOfIndex
      !?ioInstructionGenerationList
      !?variableIR
   )
   ioInternalRepresentation = .bitField {!sliceMap:{} !valueIR:variableIR}
  elsif [variableIR isRegisterReference] then
    handleSubscriptRegisterArrayInAssignmentAndExpressionNew (
      !self: inSelfType
      !inGuard: inGuard
      !routineNameForInvocationGraph: inCallerNameForInvocationGraph
      !context: inContext
      !mode: inCurrentMode
      !?temporary: ioTemporaries
      !?staticStringMap: ioGlobalLiteralStringMap
      !?variableMap:ioUniversalMap
      !?alloca: ioAllocaList
      !inIndexExpression 
      !inEndOfIndex
      !?ioInstructionGenerationList
      !?variableIR
      ?sliceMap:let sliceMap
   )
   ioInternalRepresentation = .bitField {!sliceMap:sliceMap !valueIR:variableIR}
  else
    error errorLocation : "the receiver is not an array and does not accept subscripting"
  end
}

#·······················································································································

proc handlePropertyAccessInExpressionNew
  ?!@internalRepresentation ioInternalRepresentation
  ?let @lstring inPropertyName
  ?routineNameForInvocationGraph:let @lstring unused inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode unused inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList unused ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  switch ioInternalRepresentation
  case standAloneIdentifier (identifier) :
    [!?ioUniversalMap searchValuedObjectForReadAccess !identifier ?let @objectIR objectIR]
    switch objectIR
    case globalVariableReference (type unused plmName) :
      if [[type kind] isStructure] then
        ioInternalRepresentation = .structureMember {!propertyName:inPropertyName !currentPointerIR:objectIR}
      else
        error identifier : "this should be a structure instance" : ioInternalRepresentation
      end
    case null :
    case selfObject (*) :
      error identifier : "«selfObject» invalid here" : ioInternalRepresentation
    case localVariableReference (@unifiedTypeMap-proxy type @lstring plmName) :
      if [[type kind] isStructure] then
        let objectIR = @objectIR.llvmTemporaryValue {
          !type:type
          !llvmName:.new {!llvmNameForLocalVariable (!plmName) !plmName} !sliceMap:{}
        }
        ioInternalRepresentation = .structureMember {!propertyName:inPropertyName !currentPointerIR:objectIR}
      else
        error identifier : "this should be a structure instance" : ioInternalRepresentation
      end
    case registerReference (@unifiedTypeMap-proxy type
                            @lstring plmRegisterName
                            * *
                            @bigint address
                            @sliceMap sliceMap
                            @uint arraySize *) : # 0 if not an array
      if arraySize > 0 then
        error inPropertyName : "register is an array, dot notation unavailable" : ioInternalRepresentation
      else
        getNewTempVariable (!type !plmRegisterName !?ioTemporaries ?let registerIR)
        [!?ioInstructionGenerationList appendLoadVolatileRegister !registerIR !address]
        [sliceMap searchKey
          !inPropertyName
          ?let @llvmBinaryOperation accessOperator
          ?let @bigint accessRightOperand
          ?let @sliceMap resultSliceMap
          ?let @unifiedTypeMap-proxy resultType
        ]
        let resultObject = @objectIR.llvmTemporaryValue {
          !type:resultType
          !llvmName:.new {!"temp." + ioTemporaries.mTemporaryIndex !inPropertyName}
          !sliceMap:resultSliceMap
        }
        ioTemporaries.mTemporaryIndex ++
        [!?ioInstructionGenerationList appendBinaryOperation
          !resultObject
          ![registerIR type]
          !inPropertyName.location
          !registerIR
          !accessOperator
          !.literalInteger {!type: inContext.mLiteralIntegerType !value:accessRightOperand}
        ]
        ioInternalRepresentation = .bitField {!sliceMap:resultSliceMap !valueIR:resultObject}
      end
    case temporaryReference (* * * *) :
      error identifier : "«temporaryReference» invalid here" : ioInternalRepresentation
    case property (* * *) :
      error identifier : "«property» invalid here" : ioInternalRepresentation
    case llvmTemporaryValue (* * *) :
      error identifier : "«llvmTemporaryValue» invalid here" : ioInternalRepresentation
    case literalInteger  (* *) :
      error identifier : "«literalInteger» invalid here" : ioInternalRepresentation
    case llvmStructureConstant (* *) :
       error identifier : "«llvmStructureConstant» invalid here" : ioInternalRepresentation
    case literalString  (* * *) :
       error identifier : "a global string constant is invalid here" : ioInternalRepresentation
    case zero (*) :
      error identifier : "«zero» invalid here" : ioInternalRepresentation
    case possibleFunction (* *) :
      error identifier : "«possibleFunction» invalid here" : ioInternalRepresentation
    end
  case structureMember (masterPropertyName currentPointer) :
    if [[currentPointer kind] isStructure] then
      [[currentPointer kind] structure ?2* ?universalMap:let structureMap ?2*]
      var m = structureMap
      [!?m searchValuedObjectForReadAccess !masterPropertyName ?let @objectIR masterPropertyIR]
      let newObject = @objectIR.temporaryReference {
         !type:[masterPropertyIR type] # [currentPointer type]
         !llvmName:.new {!"temp." + ioTemporaries.mTemporaryIndex !masterPropertyName}
         !sliceMap:{}
         !volatile:false
      }
      ioTemporaries.mTemporaryIndex ++
      [masterPropertyIR property ?type:* ?plmName:* ?index:let index]
      [!?ioInstructionGenerationList appendGetPropertyReference
        !newObject
        !currentPointer
        !masterPropertyName
        !index
      ]
      ioInternalRepresentation = .structureMember {!propertyName:inPropertyName !currentPointerIR:masterPropertyIR}
    else
      error masterPropertyName : "'" + masterPropertyName + "' should be a structure" : ioInternalRepresentation
    end
  case bitField (@sliceMap sliceMap @objectIR currentObject) :
    [sliceMap searchKey
      !inPropertyName
      ?let @llvmBinaryOperation accessOperator
      ?let @bigint accessRightOperand
      ?let @sliceMap resultSliceMap
      ?let @unifiedTypeMap-proxy resultType
    ]
    let resultObject = @objectIR.llvmTemporaryValue {
      !type:resultType
      !llvmName:.new {!"temp." + ioTemporaries.mTemporaryIndex !inPropertyName}
      !sliceMap:resultSliceMap
    }
    ioTemporaries.mTemporaryIndex ++
    [!?ioInstructionGenerationList appendBinaryOperation
      !resultObject
      ![currentObject type]
      !inPropertyName.location
      !currentObject
      !accessOperator
      !.literalInteger {!type: inContext.mLiteralIntegerType !value:accessRightOperand}
    ]
    ioInternalRepresentation = .bitField {!sliceMap:resultSliceMap !valueIR:resultObject}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc handleFunctionCallInExpressionNew
  ?!@internalRepresentation ioInternalRepresentation
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?let @effectiveArgumentListAST inArguments 
  ?let @location inErrorLocation
  ?!@instructionListIR ioInstructionGenerationList
{
#--- Cannot call a function in guard
  if inGuard then
    error inErrorLocation : "a routine cannot be called in guard"
  end
#--- Get function name and map containing the function definition
  @procCallEffectiveParameterListIR effectiveParameterListIR = {}
  @universalPropertyAndRoutineMapForContext currentMap 
  @lstring functionName
  @lstring routineMangledName
  switch ioInternalRepresentation
  case standAloneIdentifier (@lstring identifier) : # This a call idf (....)
    currentMap = ioUniversalMap
    functionName = identifier
    routineMangledName = routineMangledNameFromCall (!"" !identifier !inArguments)
  case structureMember (@lstring propertyName @objectIR currentPointerIR) :
    if [[currentPointerIR kind] isStructure] then
      [[currentPointerIR kind] structure ?2* ?universalMap:currentMap ?2*]
      functionName = propertyName
      effectiveParameterListIR += !.outputInput !currentPointerIR # Add receiver as first argument
      routineMangledName = routineMangledNameFromCall (!"$" + [[currentPointerIR type] key] !propertyName !inArguments)
    else
      error [currentPointerIR location]
       : "this object should be a structure"
       : ioInternalRepresentation, functionName, currentMap, routineMangledName
    end
  case bitField (* @objectIR valueIR) :
    error [valueIR location]
      : "this is not a function"
      : ioInternalRepresentation, currentMap, functionName, routineMangledName
  end
#--- Get called function signature
  let signature = [inArguments routineSignature !functionName.location]
#--- Search function in map
  [currentMap searchRoutine
    !functionName
    !signature
    ?let @lstring LLVMInvocationRoutineName
    ?let @routineDescriptor routineDescriptor
  ]
#  let isPublic = routineDescriptor.mIsPublic
  let routineKind = routineDescriptor.mRoutineKind
  let calleeMode = [routineKind executionMode] # routineDescriptor.mExecutionMode
  let formalSignature = routineDescriptor.mSignature
#  outReturnedType = routineDescriptor.mReturnType
#--- Check accessibility
#  if not isPublic then
#    if receiverType == .null then # Standalone function
#      let @string declarationFile = [outRoutineLocation file]
#      let invocationFile = [inRoutineName.location file]
#      if invocationFile != declarationFile then
#        error inRoutineName : "this routine is not public"
#      end
#    elsif receiverType != inSelfType then
#      error inRoutineName : "this routine is not public"
#    end  
#  end  
#--- Enter in invocation graph
  [!?ioTemporaries.mSubprogramInvocationGraph addEdge !inCallerNameForInvocationGraph !routineMangledName]
#--- Check modes
  let calleeKind = checkMode (
    !callerMode:inMode
    !calleeMode:calleeMode
    !kind:routineKind
    !error:functionName.location
  )
#--- Analyze effective parameters
  analyzeEffectiveParametersNew (
    !self:inSelfType
    !formal:formalSignature
    !effective:inArguments
    !errorLocation:functionName.location
    !callerForInvocationGraph:inCallerNameForInvocationGraph
    !context:inContext
    !requiredMode:inMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    !?effectiveIR:effectiveParameterListIR
  )
#--- New LLVM variable for function call result
  getNewTempVariable (!routineDescriptor.mReturnType !routineMangledName !?ioTemporaries ?let functionResult)
#--- Code generation
  ioInstructionGenerationList += !@functionCallIR.new {
    !"" # globalVariableReceiverName
    !functionResult
    !routineMangledName
    !LLVMInvocationRoutineName
    !calleeKind
    !effectiveParameterListIR
  }
#---
  ioInternalRepresentation = .bitField {!sliceMap:{} !valueIR:functionResult}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeEffectiveParametersNew
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?formal:let @routineTypedSignature inFormalSignature
  ?effective:let @effectiveArgumentListAST inEffectiveParameterList
  ?errorLocation:let @location inErrorLocation
  ?callerForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?requiredMode:let @mode inRequiredMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  ?!effectiveIR:@procCallEffectiveParameterListIR ioEffectiveParameterListIR
{
#--- Analyze effective parameters
  @procEffectiveParameterList parameterList = {}
  for () formal_ in inFormalSignature, () effective_ in inEffectiveParameterList do
    switch effective_mEffectiveParameterKind 
    case inputWithType (@bool constant @lstring typeName @lstring name) :
      let type = if typeName.string == "" then
        formal_mType
      else
        @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !typeName}
      end
      let varLLVMName = @lstring.new {!name.string + "." + ioTemporaries.mTemporaryIndex !name}
      ioTemporaries.mTemporaryIndex ++
      let objectIR = @objectIR.localVariableReference {!type:type !plmName:varLLVMName}
      if constant then
        [!?ioUniversalMap insertLocalConstant !name !objectIR]
      else
        [!?ioUniversalMap insertLocalVariable !name !objectIR !.hasUnreadValue !false]
      end
      ioAllocaList += !varLLVMName ![[type kind] llvmTypeName]
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector !type
      ioEffectiveParameterListIR +=
        !.input
        !.llvmTemporaryValue {!type:type !llvmName:.new {!llvmNameForLocalVariable (!varLLVMName) !varLLVMName} !sliceMap:{}}
    case input (@lstring name) :
      [!?ioUniversalMap searchValuedObjectForWriteAccess !name ?let objectIR]
#      if not accessIsAllowed then
#        error name : "routine has no access right on the this variable"
#      end
#      if not canBeUsedAsInputParameter then
#        error name : "this variable cannot be used as input parameter"
#      end
#      if not isCopyable then
#        error name : "an $" + [type key] + " instance is not copyable"
#      end
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector ![objectIR type]
      ioEffectiveParameterListIR +=
        !.input
        !.llvmTemporaryValue {
          !type:[objectIR type]
          !llvmName:.new {!llvmNameForLocalVariable (![objectIR name])
          ![objectIR location]}
          !sliceMap:{}
        }
    case output (@expressionAST expression @location endOfExp) :
      [expression analyzeExpressionNew
        !self:inSelfType
        !inGuard:false
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !optionalTargetType:formal_mType
        !context:inContext
        !mode:inRequiredMode
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !?instructionListIR:ioInstructionGenerationList
        ?result:let @objectIR expressionResult
      ]
      [!?ioInstructionGenerationList appendLoadFromReference
        !?ioTemporaries
        !expressionResult
        !endOfExp
        ?let expressionValue
      ]  
      let result = checkAssignmentCompatibility (
        !source:expressionValue
        !targetAnnotationType:formal_mType
        !errorLocation:endOfExp
        !staticTypeAllowed:false
      )
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector !formal_mType
      ioEffectiveParameterListIR += !.output !result
    case outputInput (@lstring name) :
      [!?ioUniversalMap searchValuedObjectForReadWriteAccess !name ?let objectIR]
#      if not canBeUsedAsInputParameter then
#        error name : "this variable cannot be used as output/input parameter"
#      end
#      if not accessIsAllowed then
#        error name : "routine has no access right on the this variable"
#      end
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector ![objectIR type]
      let argumentIR = @objectIR.llvmTemporaryValue {
        !type:[objectIR type]
        !llvmName:.new {!llvmNameForLocalVariable (![objectIR llvmName]) ![objectIR location]}
        !sliceMap:{}
      }
      ioEffectiveParameterListIR += !.outputInput !argumentIR
    case outputInputSelfVariable (@lstring name) :
      if inSelfType == .null then
        error name : "'self' is not available in this context" :parameterList, ioEffectiveParameterListIR
#      elsif not inDirectAccessToPropertiesAllowed then
#        error name : "the current function should be declared @" + userAccessAttribute ()
#      elsif not inRoutineCanMutateProperties then
#        error name : "the current routine should be declared @" + mutatingAttribute ()
      else
        switch [inSelfType kind]
        case opaque (* *) :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case arrayType (* * * * *) :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case boolean :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case staticInteger :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
         case literalString :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case enumeration (* *) :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case function (*) :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case pointer (*) :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case integer (* * * *) :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case structure (* * universalMap * *) :
          var m = universalMap
          [!?m searchValuedObjectForReadAccess !name ?let propertyObject]
          [propertyObject property ?2* ?index:let idx]
          getNewTempVariable (![propertyObject type] !name !?ioTemporaries ?let fieldObjectReference)
          [!?ioInstructionGenerationList appendPropertyReferenceFromSelf
            !fieldObjectReference
            !inSelfType
            !name
            !idx
          ]        
          parameterList += !effective_mEffectiveParameterKind !effective_mSelector ![propertyObject type]
          ioEffectiveParameterListIR +=
            !.outputInput
            !fieldObjectReference
        end    
      end
    end
  end
#--- Check parameters
  if [inFormalSignature length] != [inEffectiveParameterList length] then
    error inErrorLocation: "this routine requires " + [inFormalSignature length] + " argument(s), this call names "
      + [inEffectiveParameterList length] + " argument(s)"
  else
    for () formal_ in inFormalSignature, () actual_ in parameterList do
      if [formal_mType key] != [actual_mParameterType key] then
        error actual_mSelector : "the actual parameter type is '" + [actual_mParameterType key] +
           "', and is incompatible with the formal type '" + [formal_mType key] + "'"
      end
      let requiredPassingMode = [formal_mFormalArgumentPassingMode requiredActualPassingModeForSelector !formal_mSelector]
      let testedPassingMode = [actual_mEffectiveParameterPassingMode passingModeForActualSelector !actual_mSelector]
      if requiredPassingMode != testedPassingMode then
        error actual_mSelector : "the required selector is '" + requiredPassingMode + "'"
      end
    end  
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! OLD
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @primaryInExpressionAST analyzeExpression
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@unifiedSymbolMap ioVariableMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- object access, with ou without self
  @objectIR currentPointer
  @string globalVariableReceiverName
  switch mSelf
  case noSelf :
    if inGuard then
      error mObjectName : "in guard, only 'self' properties may be accessed" : currentPointer, globalVariableReceiverName
    elsif [ioVariableMap hasKey !mObjectName] then
      [!?ioVariableMap searchForReadAccess !lkey:mObjectName
        ?2*
        ?objectIR:currentPointer
        ?2*
      ]
      globalVariableReceiverName = if [currentPointer isGlobalVariableReference] then mObjectName.string else "" end
    else # Stand alone function call ?
      currentPointer = .possibleFunction {!receiver:.null !functionName:mObjectName}
      globalVariableReceiverName = ""
    end
  case selfAt (selfLocation) :
    globalVariableReceiverName = ""
    if inSelfType == .null then
      error selfLocation : "'self' is not available in this context" : currentPointer
    elsif [[inSelfType kind] isStructure] then
      [[inSelfType kind] structure ?typeName:* ?propertyMap:let structureObjectMap ?3*]
      if [structureObjectMap hasKey !mObjectName] then
        [structureObjectMap searchKey
          !mObjectName
          ?*
          ?let object
        ]
        handleSelfAccessInExpression (
          !inSelfType
          !object
          !?ioTemporaries
          !?ioInstructionGenerationList
          ?currentPointer
        )
      else # Function call ?
        currentPointer = .possibleFunction {!receiver:.selfObject {!type:inSelfType} !functionName:mObjectName}
      end
    else
      error selfLocation : "'self' should be a structure instance" : currentPointer
    end
  end
#--- Access list
  for (access) in mAccessList do
    switch access
    case property (@lstring propertyName) :
      handlePropertyInExpression (
        !self:inSelfType
        !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
        !inGuard:inGuard
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !context:inContext
        !mode:inCurrentMode
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?alloca:ioAllocaList
        !propertyName
        !?ioInstructionGenerationList
        !?currentPointer
      )
    case arrayAccess (@expressionAST indexExpression @location endOfIndex) :
      handleSubscriptInAssignmentAndExpression (
        !self:inSelfType
        !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
        !inGuard:inGuard
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !context:inContext
        !mode:inCurrentMode
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !indexExpression
        !endOfIndex
        !?ioInstructionGenerationList
        !?currentPointer
      )
    case funcCall (@effectiveArgumentListAST arguments @location errorLocation) :
      handleFunctionCallInExpression (
        !self:inSelfType
        !globalVariableReceiverName:globalVariableReceiverName
        !propertiesAreMutable:false
        !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
        !inGuard:inGuard
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !context:inContext
        !mode:inCurrentMode
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !arguments
        !errorLocation
        !?ioInstructionGenerationList
        !?currentPointer
        ?let returnedType
      )
      if returnedType == .null then
        error errorLocation : "the function cannot be called in expression: no return value"
      end
    end
  end
  outResult = currentPointer
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc handleSelfAccessInExpression
  ?let @unifiedTypeMap-proxy inSelfType
  ?let @objectIR inObject
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@instructionListIR ioInstructionGenerationList
  !@objectIR outObjectPtr
{
  if [inObject isProperty] then
    [inObject property ?type:let type ?plmName:let name ?index:let index]
    outObjectPtr = .temporaryReference {
      !type:type
      !llvmName:.new {!"temp." + ioTemporaries.mTemporaryIndex !name}
      !sliceMap:{}
      !volatile:false
    }
    ioTemporaries.mTemporaryIndex ++
    [!?ioInstructionGenerationList appendPropertyReferenceFromSelf
      !outObjectPtr
      !inSelfType
      !name
      !index
    ]
  else
    error .nowhere : "<<getNewTemporarySelfObjectPtr>>" : outObjectPtr
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc handlePropertyAccessInExpression
  ?!@objectIR ioObject
  ?let @location inErrorLocation
  ?let @objectIR inProperty
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@instructionListIR ioInstructionGenerationList
{
  if [inProperty isProperty] then
    [inProperty property ?type:let type ?plmName:let name ?index:let index]
    let newObject = @objectIR.temporaryReference {
      !type:type
      !llvmName:.new {!"temp." + ioTemporaries.mTemporaryIndex !name}
      !sliceMap:{}
      !volatile:false
    }
    ioTemporaries.mTemporaryIndex ++
    [!?ioInstructionGenerationList appendGetPropertyReference
      !newObject
      !ioObject
      !name
      !index
    ]
    ioObject = newObject
  else
    error inErrorLocation : "<<getNewTemporarySelfObjectPtr>>" : ioObject
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc handlePropertyInExpression
  ?self:let @unifiedTypeMap-proxy unused inSelfType
  ?directAccessToPropertiesAllowed:let @bool unused inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool unused inGuard
  ?routineNameForInvocationGraph:let @lstring unused inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode unused inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@unifiedSymbolMap unused ioVariableMap
  ?!alloca:@allocaList unused ioAllocaList
  ?let @lstring inPropertyName
  ?!@instructionListIR ioInstructionGenerationList
  ?!@objectIR ioObjectPtr
{
#--- Structure
  if [[[ioObjectPtr type] kind] isStructure] then
    [[[ioObjectPtr type] kind] structure ?typeName:* ?propertyMap:let structureObjectMap ?universalMap:let unused universalMap ?2*]
    if [structureObjectMap hasKey !inPropertyName] then
      [structureObjectMap searchKey !inPropertyName ?* ?@objectIR property]
      handlePropertyAccessInExpression (
        !?ioObjectPtr
        !inPropertyName.location
        !property
        !?ioTemporaries
        !?ioInstructionGenerationList
      )
    else # Function call ?
      ioObjectPtr = .possibleFunction {!receiver:ioObjectPtr !functionName:inPropertyName}
    end
#--- Integer slice
  elsif [[[ioObjectPtr type] kind] isInteger] then
    let sliceMap = [ioObjectPtr sliceMap !inPropertyName.location]
    [!?ioInstructionGenerationList appendLoadFromReference
      !?ioTemporaries
      !ioObjectPtr
      !inPropertyName.location
      ?let unused loadedRegisterValue
    ]
    [sliceMap searchKey
      !inPropertyName
      ?let @llvmBinaryOperation accessOperator
      ?let @bigint accessRightOperand
      ?let @sliceMap resultSliceMap
      ?let @unifiedTypeMap-proxy resultType
    ]
    let resultObject = @objectIR.llvmTemporaryValue {
      !type:resultType
      !llvmName:.new {!"temp." + ioTemporaries.mTemporaryIndex !inPropertyName}
      !sliceMap:resultSliceMap
    }
    ioTemporaries.mTemporaryIndex ++
    [!?ioInstructionGenerationList appendBinaryOperation
      !resultObject
      ![ioObjectPtr type]
      !inPropertyName.location
      !loadedRegisterValue
      !accessOperator
      !.literalInteger {!type: inContext.mLiteralIntegerType !value:accessRightOperand}
    ]
    ioObjectPtr = resultObject 
  else
    error inPropertyName : "the current object has no property" : ioObjectPtr
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc handleFunctionCallInExpression
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?globalVariableReceiverName:let @string inGlobalVariableReceiverName
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@unifiedSymbolMap ioVariableMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?let @effectiveArgumentListAST inArguments 
  ?let @location inErrorLocation
  ?!@instructionListIR ioInstructionGenerationList
  ?!@objectIR ioObjectPtr
  !@unifiedTypeMap-proxy outReturnedType
{
  if not [ioObjectPtr isPossibleFunction] then ###
    error inErrorLocation : "object is not a function" : ioObjectPtr, outReturnedType
  elsif inGuard then
    [ioObjectPtr possibleFunction ?1* ?functionName:let functionName]
    error functionName : "a function cannot be called in guard expression" : ioObjectPtr, outReturnedType
  else
    [ioObjectPtr possibleFunction ?receiver:let receiver ?functionName:let functionName]
    analyzeFunctionCallInExpression (
      !self:inSelfType
      !propertiesAreMutable:inRoutineCanMutateProperties
      !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
      !receiver:receiver
      !routineName:functionName
      !effective:inArguments
      !callerForInvocationGraph:inCallerNameForInvocationGraph
      !context:inContext
      !requiredMode:inMode
      !?temporary:ioTemporaries
      !?staticStringMap:ioGlobalLiteralStringMap
      !?variableMap:ioVariableMap
      !?variableMap:ioUniversalMap
      !?alloca:ioAllocaList
      !?instructionListIR:ioInstructionGenerationList
      ?effectiveIR:let @procCallEffectiveParameterListIR effectiveParameterListIR
      ?routineKind:let @calleeKindIR routineKind
      ?routineMangledName:let @lstring functionMangledName
      ?routineNameForGeneration:let @lstring functionNameForGeneration
      ?returnType:outReturnedType
    )
  #--- New LLVM variable for function call result
    getNewTempVariable (!outReturnedType !functionMangledName !?ioTemporaries ?let functionResult)
  #--- Code generation
    ioInstructionGenerationList += !@functionCallIR.new {
      !inGlobalVariableReceiverName
      !functionResult
      !functionMangledName
      !functionNameForGeneration
      !routineKind
      !effectiveParameterListIR
    }
  #---
    ioObjectPtr = functionResult
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeFunctionCallInExpression
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?receiver:let @objectIR inReceiver
  ?routineName:let @lstring inRoutineName
  ?effective:let @effectiveArgumentListAST inEffectiveParameterList
  ?callerForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?requiredMode:let @mode inRequiredMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@unifiedSymbolMap ioVariableMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !effectiveIR:@procCallEffectiveParameterListIR outEffectiveParameterListIR
  !routineKind:@calleeKindIR outRoutineKindIR
  !routineMangledName:@lstring outRoutineMangledName
  !routineNameForGeneration:@lstring outRoutineNameForGeneration
  !returnType:@unifiedTypeMap-proxy outReturnedType
{
#---
  outEffectiveParameterListIR = {}
  let receiverType = [inReceiver type]
#--- Special case : call a function from a static array during enumeration
  var specialCase = (receiverType != .null) && [[receiverType kind] isStructure]
  if specialCase then
    [[receiverType kind] structure ?typeName:* ?propertyMap:let @propertyMap propertyMap ?universalMap:let unused universalMap ?2*]
    if [propertyMap hasKey !inRoutineName] then
      [propertyMap searchKey !inRoutineName ?* ?let @objectIR propertyObject]
      [propertyObject property ?type:let type ?plmName:let unused plmName ?index:let unused index]
      specialCase = [[type kind] isFunction]
      if specialCase then
        log inRoutineName
      end
    end
  end
#--- Add receiver as first argument
  if receiverType != .null then
    outEffectiveParameterListIR += !.outputInput !inReceiver
  end
#--- Build LLVM mangled name
  outRoutineMangledName = routineMangledNameFromCall (
    !if receiverType == .null then "" else "$" + [receiverType key] end
    !inRoutineName
    !inEffectiveParameterList
  )
  [inContext.mRoutineMapForContext searchKey
    !inRoutineName
    ![inEffectiveParameterList routineSignature !inRoutineName]
    ?outRoutineNameForGeneration
    ?let @routineDescriptor routineDescriptor
    ?let @location outRoutineLocation
  ]
  let isPublic = routineDescriptor.mIsPublic
  let routineKind = routineDescriptor.mRoutineKind
  let calleeMode = [routineKind executionMode] # routineDescriptor.mExecutionMode
  let formalSignature = routineDescriptor.mSignature
  outReturnedType = routineDescriptor.mReturnType
#--- Check accessibility
  if not isPublic then
    if receiverType == .null then # Standalone function
      let @string declarationFile = [outRoutineLocation file]
      let invocationFile = [inRoutineName.location file]
      if invocationFile != declarationFile then
        error inRoutineName : "this routine is not public"
      end
    elsif receiverType != inSelfType then
      error inRoutineName : "this routine is not public"
    end  
  end  
#--- Enter in invocation graph
  [!?ioTemporaries.mSubprogramInvocationGraph addEdge !inCallerNameForInvocationGraph !outRoutineMangledName]
#--- Check modes
  outRoutineKindIR = checkMode (
    !callerMode:inRequiredMode
    !calleeMode:calleeMode
    !kind:routineKind
    !error:inRoutineName.location
  )
#--- Analyze effective parameters
  analyzeEffectiveParameters (
    !self:inSelfType
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !propertiesAreMutable:inRoutineCanMutateProperties
    !formal:formalSignature
    !effective:inEffectiveParameterList
    !errorLocation:inRoutineName.location
    !callerForInvocationGraph:inCallerNameForInvocationGraph
    !context:inContext
    !requiredMode:inRequiredMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    !?effectiveIR:outEffectiveParameterListIR
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeEffectiveParameters
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?formal:let @routineTypedSignature inFormalSignature
  ?effective:let @effectiveArgumentListAST inEffectiveParameterList
  ?errorLocation:let @location inErrorLocation
  ?callerForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?requiredMode:let @mode inRequiredMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@unifiedSymbolMap ioVariableMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  ?!effectiveIR:@procCallEffectiveParameterListIR ioEffectiveParameterListIR
{
#--- Analyze effective parameters
  @procEffectiveParameterList parameterList = {}
  for () formal_ in inFormalSignature, () effective_ in inEffectiveParameterList do
    switch effective_mEffectiveParameterKind 
    case inputWithType (@bool constant @lstring typeName @lstring name) :
      let type = if typeName.string == "" then
        formal_mType
      else
        @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !typeName}
      end
      let varLLVMName = @lstring.new {!name.string + "." + ioTemporaries.mTemporaryIndex !name}
      ioTemporaries.mTemporaryIndex ++
      let objectIR = @objectIR.localVariableReference {!type:type !plmName:varLLVMName}
      if constant then
        [!?ioUniversalMap insertLocalConstant !name !objectIR]
        [!?ioVariableMap insertConstant
          !lkey:name
          !type:type
          !readAccessAllowed:true
          !objectIR:objectIR
          !copyable:true
          !canBeUsedAsInputParameter:true
        ]
      else
        [!?ioUniversalMap insertLocalVariable !name !objectIR !.hasUnreadValue !false]
        [!?ioVariableMap insertDefinedVariable
          !lkey:name
          !type:type
          !readAccessAllowed:true
          !objectIR:objectIR
          !copyable:true
          !canBeUsedAsInputParameter:true
        ]
      end
      ioAllocaList += !varLLVMName ![[type kind] llvmTypeName]
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector !type
      ioEffectiveParameterListIR +=
        !.input
        !.llvmTemporaryValue {!type:type !llvmName:.new {!llvmNameForLocalVariable (!varLLVMName) !varLLVMName} !sliceMap:{}}
    case input (@lstring name) :
      [!?ioUniversalMap searchValuedObjectForWriteAccess !name ?let objectIR]
      [!?ioVariableMap searchForWriteAccess
        !lkey:name
        ?type:let type
        ?readAccessAllowed:let accessIsAllowed
        ?objectIR:* #let objectIR
        ?copyable:let isCopyable                                                 
        ?canBeUsedAsInputParameter:let canBeUsedAsInputParameter
      ]
      if not accessIsAllowed then
        error name : "routine has no access right on the this variable"
      end
      if not canBeUsedAsInputParameter then
        error name : "this variable cannot be used as input parameter"
      end
      if not isCopyable then
        error name : "an $" + [type key] + " instance is not copyable"
      end
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector !type
      ioEffectiveParameterListIR +=
        !.input
        !.llvmTemporaryValue {!type:type !llvmName:.new {!llvmNameForLocalVariable (![objectIR name]) ![objectIR location]} !sliceMap:{}}
    case output (@expressionAST expression @location endOfExp) :
      [expression analyzeExpressionNew
        !self:inSelfType
        !inGuard:false
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !optionalTargetType:formal_mType
        !context:inContext
        !mode:inRequiredMode
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !?instructionListIR:ioInstructionGenerationList
        ?result:let @objectIR expressionResult
      ]
      [!?ioInstructionGenerationList appendLoadFromReference
        !?ioTemporaries
        !expressionResult
        !endOfExp
        ?let expressionValue
      ]  
      let result = checkAssignmentCompatibility (
        !source:expressionValue
        !targetAnnotationType:formal_mType
        !errorLocation:endOfExp
        !staticTypeAllowed:false
      )
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector !formal_mType
      ioEffectiveParameterListIR += !.output !result
    case outputInput (@lstring name) :
      [!?ioVariableMap searchForReadWriteAccess
        !lkey:name
        ?type:let type
        ?readAccessAllowed:let accessIsAllowed
        ?objectIR:let objectIR
        ?1*
        ?canBeUsedAsInputParameter:let canBeUsedAsInputParameter
      ]
      if not canBeUsedAsInputParameter then
        error name : "this variable cannot be used as output/input parameter"
      end
      if not accessIsAllowed then
        error name : "routine has no access right on the this variable"
      end
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector !type
      let argumentIR = @objectIR.llvmTemporaryValue {
        !type:type
        !llvmName:.new {!llvmNameForLocalVariable (![objectIR llvmName]) ![objectIR location]}
        !sliceMap:{}
      }
      ioEffectiveParameterListIR += !.outputInput !argumentIR
    case outputInputSelfVariable (@lstring name) :
      if inSelfType == .null then
        error name : "'self' is not available in this context" :parameterList, ioEffectiveParameterListIR
      elsif not inDirectAccessToPropertiesAllowed then
        error name : "the current function should be declared @" + userAccessAttribute ()
      elsif not inRoutineCanMutateProperties then
        error name : "the current routine should be declared @" + mutatingAttribute ()
      else
        switch [inSelfType kind]
        case opaque (* *) :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case arrayType (* * * * *) :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case boolean :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case staticInteger :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
         case literalString :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case enumeration (* *) :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case function (*) :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case pointer (*) :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case integer (* * * *) :
          error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
        case structure (* * universalMap * *) :
          var m = universalMap
          [!?m searchValuedObjectForReadAccess !name ?let propertyObject]
          [propertyObject property ?2* ?index:let idx]
          getNewTempVariable (![propertyObject type] !name !?ioTemporaries ?let fieldObjectReference)
          [!?ioInstructionGenerationList appendPropertyReferenceFromSelf
            !fieldObjectReference
            !inSelfType
            !name
            !idx
          ]        
          parameterList += !effective_mEffectiveParameterKind !effective_mSelector ![propertyObject type]
          ioEffectiveParameterListIR +=
            !.outputInput
            !fieldObjectReference
        end    
      end
    end
  end
#--- Check parameters
  if [inFormalSignature length] != [inEffectiveParameterList length] then
    error inErrorLocation: "this routine requires " + [inFormalSignature length] + " argument(s), this call names "
      + [inEffectiveParameterList length] + " argument(s)"
  else
    for () formal_ in inFormalSignature, () actual_ in parameterList do
      if [formal_mType key] != [actual_mParameterType key] then
        error actual_mSelector : "the actual parameter type is '" + [actual_mParameterType key] +
           "', and is incompatible with the formal type '" + [formal_mType key] + "'"
      end
      let requiredPassingMode = [formal_mFormalArgumentPassingMode requiredActualPassingModeForSelector !formal_mSelector]
      let testedPassingMode = [actual_mEffectiveParameterPassingMode passingModeForActualSelector !actual_mSelector]
      if requiredPassingMode != testedPassingMode then
        error actual_mSelector : "the required selector is '" + requiredPassingMode + "'"
      end
    end  
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
