
setter @instructionListIR appendTrunc
  ?let @valueIR inResult
  ?let @valueIR inSource
{
  self += !@truncIR.new {!inResult !inSource}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @truncIR : @abstractInstructionIR {
  @valueIR mResult
  @valueIR mSource
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @truncIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "  " + [mResult llvmName] + " = trunc "
  ioLLVMcode += [mSource  llvmTypeName] + " " + [mSource llvmName] + " to " + [mResult llvmTypeName] + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @truncIR enterAccessibleEntities
  ?!@accessibleEntities unused ioAccessibleEntities
  ?!@uint unused ioMaxBranchOfOnInstructions
{
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
