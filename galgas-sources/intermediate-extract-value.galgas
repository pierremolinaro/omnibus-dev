
setter @instructionListIR appendExtractValue
  ?target:let @operandIR inTarget
  ?source:let @operandIR inSource
  ?index:let @uint inIndex
{
  self += !@extractValueIR.new {!inTarget !inSource !inIndex}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @extractValueIR : @abstractInstructionIR {
  @operandIR mTarget
  @operandIR mSource
  @uint mIndex
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extractValueIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let llvmType = [mSource.mType llvmTypeName]
  ioLLVMcode += "  " + [mTarget.mValue llvmName] + " = extractvalue " + llvmType + " " + [mSource.mValue llvmName] + ", " + mIndex + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extractValueIR enterAccessibleEntities ?!@accessibleEntities unused ioAccessibleEntities {
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
