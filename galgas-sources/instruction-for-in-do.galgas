#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @forInstructionAST : @instructionAST {
  @lstring mVarName
  @lstring mIteratedObject
  @expressionAST mWhileExpression
  @location mEndOf_whileExpression
  @bool mStaticWhileExpression
  @instructionListAST mDoInstructionList
  @location mEndOf_do_instruction
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $for$
    $identifier$ ?let varName
    $in$
    $identifier$ ?let iteratedObject
#    <expression> ?let @expressionAST iteratedExpression
#    let endOf_iteratedExpression_instruction = @location.here
    var staticWhileExpression = false
    @expressionAST whileExpression
    select
      whileExpression = @literalBooleanInExpressionAST.new {!true}
      staticWhileExpression = true
    or
      $while$
      select
        $@attribute$ ? let attributeValue
        if attributeValue.string == staticAttribute () then
          staticWhileExpression = true
        else
          error attributeValue : "the attribute should be \"@" + staticAttribute () + "\"" 
          fixit { replace "@" + staticAttribute () }
        end
      or
      end
      <expression> ?whileExpression
    end
    let endOf_whileExpression_instruction = @location.here
    ${$
    <instructionList> ?let instructionList
    let endOfInstruction = @location.here
    $}$
    ioInstructionList += !varName.location !@forInstructionAST.new {
      !varName
      !iteratedObject
#      !iteratedExpression
#      !endOf_iteratedExpression_instruction
      !whileExpression
      !endOf_whileExpression_instruction
      !staticWhileExpression
      !instructionList
      !endOfInstruction
    }
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @forInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mDoInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
#  [mIteratedExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @forInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@unifiedSymbolMap ioVariableMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Analyze iterated expression
  [!?ioUniversalMap searchValuedObjectForReadAccess !mIteratedObject ?* ?let @objectIR iteratedObjectPointer]
  [!?ioVariableMap searchForReadAccess
    !lkey:mIteratedObject
    ?2*
    ?objectIR:* # let @objectIR iteratedObjectPointer
    ?2*
  ]
#  [mIteratedExpression analyzeExpression
#    !self:inSelfType
#    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
#    !inGuard:false
#    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
#    !optionalTargetType:.null
#    !context:inContext
#    !mode:inCurrentMode
#    !?temporary:ioTemporaries
#    !?staticStringMap:ioGlobalLiteralStringMap
#    !?variableMap:ioVariableMap
#    !?alloca:ioAllocaList
#    !?instructionListIR:ioInstructionGenerationList
#    ?result:@objectIR iteratedExpressionResult
#  ]
#--- Type kind
  let iteratedTypeKind = [[iteratedObjectPointer type] kind]
#--- Get iterated element type
#  let @unifiedTypeMap-proxy iteratedElementType = [[iteratedExpressionResult type] enumerationType]
  @unifiedTypeMap-proxy iteratedElementType
  if iteratedTypeKind == .literalString then
    iteratedElementType = .searchKey {!inContext.mTypeMap !["uint8" nowhere]}
  elsif [iteratedTypeKind isArrayType] then
    [iteratedTypeKind arrayType ?typeName:* ?elementType:iteratedElementType ?3*]
  else
    error mIteratedObject : "this object is not enumerable" : iteratedElementType
  end
#---
  let enumeratedVarLLVMName = @lstring.new {!mVarName.string + "." + ioTemporaries.mTemporaryIndex !mVarName}
  ioTemporaries.mTemporaryIndex ++
  ioAllocaList += !enumeratedVarLLVMName ![[iteratedElementType kind] llvmTypeName]
#--- Analyze instruction list
  [!?ioUniversalMap openOverrideForRepeatBlock]
  [!?ioVariableMap openOverrideForRepeatBlock]
  let objectIR = @objectIR.localVariableReference {!type:iteratedElementType !plmName:enumeratedVarLLVMName}
  [!?ioUniversalMap insertLocalConstant !mVarName !objectIR]
  [!?ioVariableMap insertUsedConstant
    !lkey:mVarName
    !type:iteratedElementType
    !readAccessAllowed:true # Read access ok
    !objectIR:objectIR
    !copyable:true
    !canBeUsedAsInputParameter:false
  ]
#--- Analyze while expression
  @instructionListIR whileExpression_GenerationList = {}
  [mWhileExpression analyzeExpression
    !self:inSelfType
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:.null
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:whileExpression_GenerationList
    ?result:@objectIR whileExpressionResult
  ]
#--- Check "while" expression type is boolean
  if not [[whileExpressionResult kind] isBoolean] then
    error mEndOf_whileExpression : "'while' expression should be boolean"
  elsif mStaticWhileExpression && not [whileExpressionResult isStatic] then
    error mEndOf_whileExpression : "'while' expression is not static"
  elsif [whileExpressionResult isStatic] && not mStaticWhileExpression then
    warning mEndOf_whileExpression : "'while' expression is static (insert @" + staticAttribute () + " attribute)"
  end
#---
  @instructionListIR doInstructionList_GenerationList = {}
  [mDoInstructionList analyzeBranchInstructionList
    !self:inSelfType
    !propertiesAreMutable:inRoutineCanMutateProperties
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !endOfInstructionList:mEndOf_do_instruction
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:doInstructionList_GenerationList
  ]
  [!?ioUniversalMap closeOverride !mEndOf_do_instruction]
  [!?ioVariableMap closeOverride !mEndOf_do_instruction]
#--- Code generation
  if iteratedTypeKind == .literalString then
    ioInstructionGenerationList += !@forInstructionOnStringIR.new {
      !enumeratedVarLLVMName
      !mIteratedObject.location
      !iteratedObjectPointer
      !whileExpression_GenerationList
      !whileExpressionResult
      !doInstructionList_GenerationList
    }
  elsif [iteratedTypeKind isArrayType] then
    [iteratedTypeKind arrayType ?typeName:* ?elementType:let elementType ?size:let size ?2*]
    @stringset invokedFunctionSet = {}
    if [ioTemporaries.mStaticArrayMap hasKey !mIteratedObject] then
      [ioTemporaries.mStaticArrayMap searchKey !mIteratedObject ?invokedFunctionSet]
    end
    ioInstructionGenerationList += !@forInstructionOnArrayIR.new {
      !enumeratedVarLLVMName
      !mIteratedObject
      !iteratedObjectPointer
      !whileExpression_GenerationList
      !whileExpressionResult
      !doInstructionList_GenerationList
      !elementType
      !size
      !invokedFunctionSet
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION (ON ARRAY)
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @forInstructionOnArrayIR : @abstractInstructionIR {
  @string mEnumeratedValueName
  @lstring mIteratedObjectName
  @objectIR mIteratedObject
  @instructionListIR mWhileInstructionList
  @objectIR mWhileExpressionResult
  @instructionListIR mDoInstructionList
  @unifiedTypeMap-proxy mElementType
  @uint mArraySize
  @stringset mInvokedFunctionSet
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#----------------- La boucle exprimée en C est :
#  TYPE_ELEMENT * ptr = VALEUR_LISTE ; 
#  unsigned idx = TAILLE_LISTE ;
#  while (idx > 0) {
#    ... instructions de la boucle ...
#    ptr ++ ;
#    idx -- ;
#  }
#
#-------------------- La boucle est traduite en LLVM :
#  br label %startLabel
#
#startLabel:
#  store [TAILLE_LISTE x %TYPE_ELEMENT] %VALEUR_LISTE, [TAILLE_LISTE x %TYPE_ELEMENT] * %LISTE_EN_MEMOIRE
#  %ptrStart = getelementptr inbounds [TAILLE_LISTE x %TYPE_ELEMENT], [TAILLE_LISTE x %TYPE_ELEMENT]* %LISTE_EN_MEMOIRE, i32 0, i32 0
#  br label %testLabel
#
#testLabel:
#  %ptrVar = phi %TYPE_ELEMENT* [%ptrStart, %startLabel], [%indexVarNext, %loopLabel]
#  %indexVar = phi i32 [TAILLE_LISTE, %startLabel], [%ptrVarNext, %loopLabel]
#  %testExit = icmp eq i32 %indexVar, 0
#  br i1 %testExit, label %endLabel, label %loopLabel
#
#loopLabel:                                      ; preds = %1
#  %...accès.à.une.propriété... = getelementptr inbounds %TYPE_ELEMENT, %TYPE_ELEMENT* %ptrVar, i32 0, i32 0
#  %ptrVarNext = getelementptr inbounds %TYPE_ELEMENT, %TYPE_ELEMENT* %ptrVar, i32 1
#  %indexVarNext = add nsw i32 %indexVar, -1
#  br label %1
#
#endLabel:

override method @forInstructionOnArrayIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let elementTypeLLVMName = [[mElementType kind] llvmTypeName]
  let listTypeLLVMName = "[" + mArraySize + " x " + elementTypeLLVMName + "]"
  let locationIndex = [[mIteratedObjectName.location locationIndex] string]
  
  let startLabel = "for.label.start." + locationIndex
  let testLabel = "for.label.test." + locationIndex
  let whileLabel = "for.label.while." + locationIndex
  let nextLabel = "for.label.next." + locationIndex
  let loopVar = "for.loop." + locationIndex
  let loopLabel = "for.label.loop." + locationIndex
  let endLabel  = "for.label.end." + locationIndex
 
  let indexVar  = "for.index." + locationIndex
  let ptrVar  = "for.ptr." + locationIndex
  let currentValue = "for.currentValue." + locationIndex
 
#--- Start of 'for' instruction
  ioLLVMcode += "  br label %" + startLabel + "\n\n"

#--------- Loop entry
  ioLLVMcode += startLabel + ":\n"
#--- Init pointer
  ioLLVMcode += "  %" + ptrVar + ".start = getelementptr inbounds " + listTypeLLVMName
  ioLLVMcode += ", " + listTypeLLVMName + "* " + [mIteratedObject llvmName]
  ioLLVMcode += ", i32 0, i32 0\n"
#--- Init index
  ioLLVMcode += "  br label %" + testLabel + "\n\n"
  
#------------ Test
  ioLLVMcode += testLabel + ":\n"
#--- Ptr var
  ioLLVMcode += "  %" + ptrVar + " = phi " + elementTypeLLVMName + "* [%" + ptrVar + ".start, %" + startLabel
              + "], [%" + ptrVar + ".next, %" + nextLabel + "]\n"
#--- Index var
  ioLLVMcode += "  %" + indexVar + " = phi i32 [" + mArraySize + ", %" + startLabel
              + "], [%" + indexVar + ".next, %" + nextLabel + "]\n"
  ioLLVMcode += "  %" + loopVar + " = icmp ugt i32 %" + indexVar + ", 0\n"
#--- Ptr var
  ioLLVMcode += "  br i1 %" + loopVar + ", label %" + whileLabel + ", label %" + endLabel + "\n\n"

#------------ While
  ioLLVMcode += whileLabel + ":\n"
#--- While instructions
  [mWhileInstructionList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br i1 " + [mWhileExpressionResult llvmName] + ", label %" + loopLabel + ", label %" + endLabel + "\n\n"

#------------ Loop  
  ioLLVMcode += loopLabel + ":\n"
#--- Load current value
  ioLLVMcode += "  %" + currentValue + " = load " + elementTypeLLVMName + ", "
  ioLLVMcode += elementTypeLLVMName + "* %" + ptrVar + "\n"
  ioLLVMcode += "  store " + elementTypeLLVMName + " %" + currentValue + ", " + elementTypeLLVMName
             + "* %" + llvmNameForLocalVariable (!mEnumeratedValueName) + "\n"
#--- Loop instructions
  [mDoInstructionList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br label %" + nextLabel + "\n\n"

  ioLLVMcode += nextLabel + ":\n"
#--- Increment pointer
  ioLLVMcode += "  %" + ptrVar + ".next = getelementptr inbounds " + elementTypeLLVMName + ", "
  ioLLVMcode += elementTypeLLVMName + " * %" + ptrVar + ", i32 1\n"
#--- Decrement index
  ioLLVMcode += "  %" + indexVar + ".next = add i32 %" + indexVar + ", -1\n"
  ioLLVMcode += "  br label %" + testLabel + "\n\n"

#--- End
  ioLLVMcode += endLabel + ":\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @forInstructionOnArrayIR enterAccessibleEntities
  ?!@accessibleEntities ioAccessibleEntities
  ?!@uint ioMaxBranchOfOnInstructions
{
  [mWhileInstructionList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
  [mDoInstructionList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
  ioAccessibleEntities.mRoutineSet += mInvokedFunctionSet
  ioAccessibleEntities.mGlobalVariableSet += !mIteratedObjectName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION (ON STRING)
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @forInstructionOnStringIR : @abstractInstructionIR {
  @string mVarName
  @location mLocation
  @objectIR mIteratedObject
  @instructionListIR mWhileInstructionList
  @objectIR mWhileExpressionResult
  @instructionListIR mDoInstructionList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @forInstructionOnStringIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let startLabel = "for.label.start." + [mLocation locationIndex]
  let testLabel = "for.label.test." + [mLocation locationIndex]
  let loopLabel = "for.label.loop." + [mLocation locationIndex]
  let whileLabel = "for.label.while." + [mLocation locationIndex]
  let nextLabel = "for.label.next." + [mLocation locationIndex]
  let endLabel  = "for.label.end." + [mLocation locationIndex]
  let ptrVar    = "for.ptr." + [mLocation locationIndex]
  let currentVar = "for.current." + [mLocation locationIndex]
  
#--- Start of 'for' instruction
  ioLLVMcode += "  br label %" + startLabel + "\n\n"

  ioLLVMcode += startLabel + ":\n"
  ioLLVMcode += "  %" + ptrVar + ".start = load i8*, i8** " + [mIteratedObject llvmName]
  ioLLVMcode += "  br label %" + testLabel + "\n\n"
  
#------------ Test
  ioLLVMcode += testLabel + ":\n"
  ioLLVMcode += "  %" + ptrVar + " = phi i8* [%" + ptrVar + ".start, %"
  ioLLVMcode += startLabel + "], [%" + ptrVar + ".next, %" + nextLabel + "]\n"
  ioLLVMcode += "  %" + currentVar + " = load i8, i8* %" + ptrVar + "\n"
  ioLLVMcode += "  %" + currentVar + ".nul = icmp eq i8 %" + currentVar + ", 0\n"
  ioLLVMcode += "  br i1 %" + currentVar + ".nul, label %" + endLabel + ", label %" + whileLabel + "\n\n"

#------------ While
  ioLLVMcode += whileLabel + ":\n"
#--- While instructions
  [mWhileInstructionList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br i1 " + [mWhileExpressionResult llvmName] + ", label %" + loopLabel + ", label %" + endLabel + "\n\n"

#--------------------- Loop  
  ioLLVMcode += loopLabel + ":\n"
#--- Get current value
  ioLLVMcode += "  store i8 %" + currentVar + ", "
  ioLLVMcode += "i8 * %" + llvmNameForLocalVariable (!mVarName) + "\n"
#--- Loop body
  [mDoInstructionList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br label %" + nextLabel + "\n\n"
#--- Next value
  ioLLVMcode += nextLabel + ":\n"
  ioLLVMcode += "  %" + ptrVar + ".next = getelementptr inbounds i8, "
  ioLLVMcode += "i8 * %" + ptrVar + ", i32 1\n"
  ioLLVMcode += "  br label %" + testLabel + "\n\n"

#--- End
  ioLLVMcode += endLabel + ":\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @forInstructionOnStringIR enterAccessibleEntities
  ?!@accessibleEntities ioAccessibleEntities
  ?!@uint ioMaxBranchOfOnInstructions
{
  [mWhileInstructionList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
  [mDoInstructionList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
