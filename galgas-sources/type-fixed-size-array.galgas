#—————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#—————————————————————————————————————————————————————————————————————————————————————————————————

class @fixedSizeArrayTypeDeclarationAST : @abstractDeclarationAST {
  public var @lstring mFixedSizeArrayType
  public var @lstring mElementTypeName
  public var @expressionAST mSizeExpression
  public var @location mSizeExpressionLocation
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <type_definition> ?!@ast ioAST !@lstring outTypeName {
    $[$
    <expression> !?ioAST ?let sizeExpression
    $:$
    <type_definition> !?ioAST ?let elementTypeName
    $]$
    let sizeExpressionLocation = @location.here
    outTypeName = ["anonymous." + ioAST.mTypeDeclarationIndex here]
    ioAST.mTypeDeclarationIndex += 1
    ioAST.mDeclarationListAST += !@fixedSizeArrayTypeDeclarationAST.init {
      !outTypeName
      !elementTypeName
      !sizeExpression
      !sizeExpressionLocation
    }
  }

  #·····················································································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @fixedSizeArrayTypeDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [!?ioGraph addNode !self.mFixedSizeArrayType !self]
  [!?ioGraph addEdge !self.mFixedSizeArrayType !self.mElementTypeName]
  [self.mSizeExpression addDependenceEdgeForStaticExpression !self.mFixedSizeArrayType !?ioGraph]
  let rootNode = @lstring.init {!configurationNodeNameForPrecedenceGraph () !self.mFixedSizeArrayType.location}
  [!?ioGraph addEdge !self.mFixedSizeArrayType !rootNode]
}

#·······················································································································

override getter @fixedSizeArrayTypeDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "anonymous $" + self.mFixedSizeArrayType 
}

#·······················································································································

override getter @fixedSizeArrayTypeDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = self.mFixedSizeArrayType.location
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @fixedSizeArrayTypeDeclarationAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR ioUserLLVMTypeDefinitionListIR
{
#--- Get element type
  [ioContext.mTypeMap searchType !lkey:self.mElementTypeName ?type:let elementType]
  if not [elementType copyable] then
    error self.mElementTypeName : "an array element should be copyable"
  end
  if not [elementType instanciable] then
    error self.mElementTypeName : "an array element should be instanciable"
  end
#--- Compute array size
  computeStaticExpression (
    !?context: ioContext
    !?staticEntityMap:ioStaticEntityMap
    !expression:self.mSizeExpression
    !errorLocation:self.mSizeExpressionLocation
    !optionalContextualTypeName:["" nowhere]
    ?result:let @objectIR sizeExpressionIR
  )
  if not [sizeExpressionIR isLiteralInteger] then
    error self.mSizeExpressionLocation : "array size expression is a literal interger expression"
  else
    [sizeExpressionIR extractLiteralInteger ?1* ?value:let arraySize]
  #-------------------------------------------- Original type name
    let omnibusTypeDescriptionName = @lstring.init {!"[" + arraySize + " • " + elementType.omnibusTypeDescriptionName + "]" !self.mFixedSizeArrayType}
    let llvmBaseTypeName = @lstring.init {!elementType.llvmBaseTypeName + "-" + arraySize !self.mFixedSizeArrayType}
    if [ioContext.mTypeMap hasKey !omnibusTypeDescriptionName] then
      [ioContext.mTypeMap searchType !lkey:omnibusTypeDescriptionName ?type: let type]
      [!?ioContext.mTypeMap insertType
        !self.mFixedSizeArrayType
        !type:type
      ]
    else
    #-------------------------------------------- Class method map : add "count" constructor
      var @constantMap constantMap = §[]
      [!?constantMap insertKey !.init {!"count" !self.mFixedSizeArrayType} !arraySize ![ctIntegerTypeName () nowhere]]
      [!?ioContext.mTypeConstantMap insertKey
        !omnibusTypeDescriptionName
        !constantMap
      ]
    #-------------------------------------------- Property map
     [!?ioContext insertGetter
       !omnibusTypeName: omnibusTypeDescriptionName
       !.init {!"count" !omnibusTypeDescriptionName.location}
        !.isPublic
        !.constantProperty {!value:.literalInteger {!type: compileTimeIntegerType () !value:arraySize}}
      ]
    #-------------------------------------------- Constructor map
      var @constructorMap constructorMap = §[]
    #--- Constructor (!repeated)
      [!?constructorMap insertKey !["(!repeated)" nowhere] !§[] !.arrayValue {!elementType:elementType !size:arraySize}]
    #--- Constructor (!!!!)
      var constructorName = "("
      for * in 0 ..< [arraySize uint] do
        constructorName += "!"
      end
      constructorName += ")"
      [!?constructorMap insertKey ![constructorName nowhere] !§[] !.arrayValue {!elementType:elementType !size:arraySize}]
      [!?ioContext.mTypeConstructorMap insertKey !omnibusTypeDescriptionName !constructorMap]
    #-------------------------------------------- Type attributes
      let @omnibusTypeAttributes typeAttributes = .instanciable | .copyable
    #-------------------------------------------- Enter in type map
      let arrayType = @omnibusType.init {
        !subscript:.staticSubscript {!elementType:elementType !size:arraySize}
        !attributes:typeAttributes
        !omnibusTypeDescriptionName:omnibusTypeDescriptionName
        !kind:.staticArrayType {!elementType:elementType !size:arraySize}
        !llvmBaseTypeName:llvmBaseTypeName
      }
      [!?ioContext.mTypeMap insertType
        !self.mFixedSizeArrayType
        !type:arrayType
      ]
      [!?ioContext.mTypeMap insertType
        !omnibusTypeDescriptionName
        !type:arrayType
      ]
    #-------------------------------------------- GenerateLLVM type definition
      ioUserLLVMTypeDefinitionListIR += !@userLLVMStaticArrayTypeDefinitionIR.init {
        ![arrayType llvmTypeName]
        !elementType
        !arraySize
      }
    #---------- Enter assign repeated value to fixed array size function
      let assignValueToElements_functionName = assignValueToFixedSizeArrayElements_functionName (!arrayType)
      ioRoutineListIR += !@assignRepeatedValueToFixedSizeArrayElementsFunctionIR.init {
        ![assignValueToElements_functionName nowhere]
        !isRequired: false
        !warnsIfUnused: false
        !arrayType
        !elementType
        !arraySize
      }
      let assignmentFunctionLLVMName =  assignmentOperatorFuncName (!arrayType !arrayType)
      ioRoutineListIR += !@staticArrayTypeAssignFunctionIR.init {
        ![assignmentFunctionLLVMName nowhere]
        !isRequired: false
        !warnsIfUnused: false
        !arrayType
      }
   #--- Enter assignment operator
      let key = assignmentOperatorKey (!arrayType !self.mFixedSizeArrayType.location !arrayType)
      [!?ioContext.mAssignmentOperatorMap insertKey !key !@fixedSizeArrayAssignmentOperatorUsage.init {!elementType !arraySize !assignValueToElements_functionName}]
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func assignValueToFixedSizeArrayElements_functionName ?let @omnibusType inFixedSizeArrayType -> @string {
  result = "assign.value.to.fixed.size.array." + inFixedSizeArrayType.llvmBaseTypeName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! USER LLVM TYPE DEFINITION
#—————————————————————————————————————————————————————————————————————————————————————————————————

class @userLLVMStaticArrayTypeDefinitionIR : @userLLVMTypeDefinitionIR {
  public var @omnibusType mElementType
  public var @bigint mSize
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @userLLVMStaticArrayTypeDefinitionIR generateLLVMType ?!@string ioLLVMcode {
  ioLLVMcode += self.mLLVMDefinedTypeName + " = type [" + self.mSize + " x " + [self.mElementType llvmTypeName] + "]\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION: STATIC ARRAY ASSIGNMENT
#—————————————————————————————————————————————————————————————————————————————————————————————————

class @fixedSizeArrayAssignmentOperatorUsage : @abstractAssignmentOperatorUsage {
  public var @omnibusType mElementType
  public var @uint mArraySize
  public var @string mAssignValueToElements_functionName
}

#·······················································································································

override method @fixedSizeArrayAssignmentOperatorUsage generateCode
    ?!@semanticTemporariesStruct ioTemporaries
    ?!@instructionListIR ioInstructionListIR
    ?!@allocaList unused ioAllocaList
    ?let @omnibusType inTargetType
    ?let @string inTargetLLVMName
    ?let @objectIR inSourcePossibleReference
    ?let @location inErrorLocation
    ?initializedTarget: let @bool unused inTargetIsInitialized
{
  let arrayTypeName = [inTargetType llvmTypeName]
  let elementTypeName = [self.mElementType llvmTypeName]
  switch inSourcePossibleReference
  case llvmArrayRepeatedDynamicValue (2* @objectIR sourceValuePossibleReference) :
    var @objectIR sourceValue = sourceValuePossibleReference
    [!?ioInstructionListIR appendLoadWhenReference !?ioTemporaries !?sourceValue]
    var s = "call void @" + [self.mAssignValueToElements_functionName assemblerRepresentation]
    s += " (" + arrayTypeName + "* " + inTargetLLVMName
    s += ", " + elementTypeName + " " + [sourceValue llvmName] + ")"
    [!?ioInstructionListIR appendInstructionAsFreeString !s !§[self.mAssignValueToElements_functionName]]
  case llvmArrayDynamicValues (1* @operandIRList values) :
    let uniqueValue = ioTemporaries.mTemporaryIndex
    ioTemporaries.mTemporaryIndex += 1
    for (value) in values do (idx)
      var @objectIR sourceValue = value
      [!?ioInstructionListIR appendLoadWhenReference !?ioTemporaries !?sourceValue]
      let ptr = "%ptr." + uniqueValue + "." + idx
      var s = ptr + " = getelementptr " + arrayTypeName + ", " + arrayTypeName + "* " + inTargetLLVMName + ", i32 0, i32 " + idx
      [!?ioInstructionListIR appendInstructionAsFreeString !s !§[]]
      s = "store " + elementTypeName + " " + [sourceValue llvmName] + ", " + elementTypeName + "* " + ptr
      [!?ioInstructionListIR appendInstructionAsFreeString !s !§[]]    
    end
  case llvmArrayStaticValues (1* @operandIRList values 1*) :
    let uniqueValue = ioTemporaries.mTemporaryIndex
    ioTemporaries.mTemporaryIndex += 1
    for (value) in values do (idx)
      let ptr = "%ptr." + uniqueValue + "." + idx
      var s = ptr + " = getelementptr " + arrayTypeName + ", " + arrayTypeName + "* " + inTargetLLVMName + ", i32 0, i32 " + idx
      [!?ioInstructionListIR appendInstructionAsFreeString !s !§[]]
      s = "store " + elementTypeName + " " + [value llvmName] + ", " + elementTypeName + "* " + ptr
      [!?ioInstructionListIR appendInstructionAsFreeString !s !§[]]    
    end
  case llvmArrayRepeatedStaticValue (3* @uint idx) :
    let assignmentFunctionLLVMName =  assignmentOperatorFuncName (!inTargetType !inTargetType)
    let s = " call void  @" + [assignmentFunctionLLVMName assemblerRepresentation] 
        + " (" + [inTargetType llvmTypeName] + "* " + inTargetLLVMName 
          + ", " + [inTargetType llvmTypeName] + "* @gconst." + idx + ")"
    [!?ioInstructionListIR appendInstructionAsFreeString !s !§[assignmentFunctionLLVMName]]
  case reference (2*) :
    let assignmentFunctionLLVMName =  assignmentOperatorFuncName (!inTargetType !inTargetType)
    let s = " call void  @" + [assignmentFunctionLLVMName assemblerRepresentation] 
        + " (" + [inTargetType llvmTypeName] + "* " + inTargetLLVMName 
          + ", " + [inTargetType llvmTypeName] + "* " + [inSourcePossibleReference llvmName] + ")"
    [!?ioInstructionListIR appendInstructionAsFreeString !s !§[assignmentFunctionLLVMName]]
  case literalInteger (2*) :
    error inErrorLocation : "invalid fixed array assignment source (literalInteger)"
  case literalString (2*) :
    error inErrorLocation : "invalid fixed array assignment source (literalString)"
  case llvmStructureValue (2*) :
    error inErrorLocation : "invalid fixed array assignment source (llvmStructureValue)"
  case llvmNamedValue (2*) :
    error inErrorLocation : "invalid fixed array assignment source (llvmValue)"
  case null (*) :
    error inErrorLocation : "invalid fixed array assignment source (null)"
  case void:
    error inErrorLocation : "invalid fixed array assignment source (void)"
  case zero (*) :
    error inErrorLocation : "invalid fixed array assignment source (zero)"
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

class @assignRepeatedValueToFixedSizeArrayElementsFunctionIR : @abstractRoutineIR {
  public var @omnibusType mFixedSizeArrayType
  public var @omnibusType mElementType
  public var @uint mArraySize
}

#·······················································································································

override method @assignRepeatedValueToFixedSizeArrayElementsFunctionIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let arrayTypeName = [self.mFixedSizeArrayType llvmTypeName]
  let elementTypeName = [self.mElementType llvmTypeName]
  ioLLVMcode += "define internal void @" + [self.mRoutineMangledName assemblerRepresentation]
  ioLLVMcode += " (" + arrayTypeName + " * %inTarget, " + elementTypeName + " %inRepeatedValue) nounwind optsize {\n"
  ioLLVMcode += "  %idx = alloca i32\n"
  ioLLVMcode += "  store i32 0, i32* %idx\n"
  ioLLVMcode += "  br label %loop\n"
  ioLLVMcode += "loop:\n"
  ioLLVMcode += "  %idxValue = load i32, i32* %idx\n"
  ioLLVMcode += "  %ptr = getelementptr " + arrayTypeName + ", " + arrayTypeName + "* %inTarget, i32 0, i32 %idxValue\n"
  ioLLVMcode += "  store " + elementTypeName + " %inRepeatedValue, " + elementTypeName + "* %ptr\n"
  ioLLVMcode += "  %nextIdxValue = add i32 %idxValue, 1\n"
  ioLLVMcode += "  store i32 %nextIdxValue, i32* %idx\n"
  ioLLVMcode += "  %continue = icmp ult i32 %nextIdxValue, " + self.mArraySize + "\n"
  ioLLVMcode += "  br i1 %continue, label %loop, label %exit\n"
  ioLLVMcode += "exit:\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

class @staticArrayTypeAssignFunctionIR : @abstractRoutineIR {
  public var @omnibusType mFixedSizeArrayType
}

#·······················································································································

override method @staticArrayTypeAssignFunctionIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let llvmTypeName = [self.mFixedSizeArrayType llvmTypeName]
  let arcAssignmentList = [self.mFixedSizeArrayType arcList !§[]]
  ioLLVMcode += "define internal void @" + [self.mRoutineMangledName assemblerRepresentation]
  ioLLVMcode += " (" + llvmTypeName + " * %inTarget, " + llvmTypeName + "* %inSource) nounwind optsize {\n"
  ioLLVMcode += ";--- Handle ARC properties\n"
  for (propertyName propertyType indexPath) in arcAssignmentList do
    let propertyTypeLLVMName = [propertyType llvmTypeName]
    let llvmVarName = "%arc.retain." + [propertyName assemblerRepresentation] + ioGenerationAdds.mUniqueIndex
    ioGenerationAdds.mUniqueIndex += 1
    ioLLVMcode += "  " + llvmVarName + " = getelementptr inbounds " + llvmTypeName + ", " + llvmTypeName + "* %inSource, i32 0"
    for (idx) in indexPath do
      ioLLVMcode += ", i32 " + idx
    end
    ioLLVMcode += " ; " + propertyName + "\n"
    let llvmLoadedVarName = llvmVarName + ".loaded"
    ioLLVMcode += "  " + llvmLoadedVarName + " = load " + propertyTypeLLVMName + ", " + propertyTypeLLVMName + "* " + llvmVarName + "\n" 
    ioLLVMcode += "  call void @arc.retain (" + propertyTypeLLVMName + " " + llvmLoadedVarName + ")\n" 
  end
  for (propertyName propertyType indexPath) in arcAssignmentList do
    let llvmVarName = "%arc.release." + [propertyName assemblerRepresentation] + ioGenerationAdds.mUniqueIndex
    ioGenerationAdds.mUniqueIndex += 1
    ioLLVMcode += "  " + llvmVarName + " = getelementptr inbounds " + llvmTypeName + ", " + llvmTypeName + "* %inTarget, i32 0"
    for (idx) in indexPath do
      ioLLVMcode += ", i32 " + idx
    end
    ioLLVMcode += " ; " + propertyName + "\n"
    let propertyTypeLLVMName = [propertyType llvmTypeName]
    let llvmLoadedVarName = llvmVarName + ".loaded"
    ioLLVMcode += "  " + llvmLoadedVarName + " = load " + propertyTypeLLVMName + ", " + propertyTypeLLVMName + "* " + llvmVarName + "\n" 
    ioLLVMcode += "  call void @arc.release (" + propertyTypeLLVMName + " " + llvmLoadedVarName + ")\n" 
  end
  ioLLVMcode += ";--- Compute type size\n"
  ioLLVMcode += "  %sizeAsPtr = getelementptr inbounds " + llvmTypeName + ", " + llvmTypeName + "* null, i32 1\n"
  ioLLVMcode += "  %byteCount = ptrtoint " + llvmTypeName + "* %sizeAsPtr to i32\n"
  ioLLVMcode += "  %useLoadStore = icmp ule i32 %byteCount, 12\n"
  ioLLVMcode += "  br i1 %useLoadStore, label %loadStore, label %copyBytesOrCopyWords\n"
  ioLLVMcode += ";--- Copy\n"
  ioLLVMcode += "loadStore:\n"
  ioLLVMcode += "  %v = load " + llvmTypeName + ", " + llvmTypeName + "* %inSource\n" 
  ioLLVMcode += "  store " + llvmTypeName + " %v, " + llvmTypeName + "* %inTarget\n" 
  ioLLVMcode += "  br label %copy.end\n"
  ioLLVMcode += "copyBytesOrCopyWords:\n"
  ioLLVMcode += "  %byteCountAnd3 = and i32 %byteCount, 3\n"
  ioLLVMcode += "  %byteCountIsMutipleOf4 = icmp eq i32 %byteCountAnd3, 0\n"
  ioLLVMcode += "  br i1 %byteCountIsMutipleOf4, label %testTarget, label %copyBytes\n"
  ioLLVMcode += "testTarget:\n"
  ioLLVMcode += "  %targetAsUnsigned = ptrtoint " + llvmTypeName + "* %inTarget to i32\n"
  ioLLVMcode += "  %targetAsUnsignedAnd3 = and i32 %targetAsUnsigned, 3\n"
  ioLLVMcode += "  %targetAsUnsignedIsMutipleOf4 = icmp eq i32%targetAsUnsignedAnd3, 0\n"
  ioLLVMcode += "  br i1 %targetAsUnsignedIsMutipleOf4, label %testSource, label %copyBytes\n"
  ioLLVMcode += "testSource:\n"
  ioLLVMcode += "  %sourceAsUnsigned = ptrtoint " + llvmTypeName + "* %inSource to i32\n"
  ioLLVMcode += "  %sourceAsUnsignedAnd3 = and i32 %sourceAsUnsigned, 3\n"
  ioLLVMcode += "  %sourceAsUnsignedIsMutipleOf4 = icmp eq i32 %sourceAsUnsignedAnd3, 0\n"
  ioLLVMcode += "  br i1 %targetAsUnsignedIsMutipleOf4, label %copyWords, label %copyBytes\n"
  ioLLVMcode += "copyWords:\n"
  ioLLVMcode += "  %target32 = bitcast " + llvmTypeName + "* %inTarget to i32*\n"
  ioLLVMcode += "  %source32 = bitcast " + llvmTypeName + "* %inSource to i32*\n"
  ioLLVMcode += "  %wordCount = udiv i32 %byteCount, 4\n"
  ioLLVMcode += "  br label %copyWords.loop\n"
  ioLLVMcode += "copyWords.loop:\n"
  ioLLVMcode += "  call void @copy.word.array (i32* %target32, i32* %source32, i32 %wordCount)\n"
  ioLLVMcode += "  br label %copy.end\n"
  ioLLVMcode += "copyBytes:\n"
  ioLLVMcode += "  %target8 = bitcast " + llvmTypeName + "* %inTarget to i8*\n"
  ioLLVMcode += "  %source8 = bitcast " + llvmTypeName + "* %inSource to i8*\n"
  ioLLVMcode += "  call void @copy.byte.array (i8* %target8, i8* %source8, i32 %byteCount)\n"
  ioLLVMcode += "  br label %copy.end\n"
  ioLLVMcode += "copy.end:\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
