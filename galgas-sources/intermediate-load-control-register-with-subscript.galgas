
setter @instructionListIR appendLoadVolatileRegisterWithSubscript
  ?let @objectIR inTarget
  ?let @objectIR inIndexResult
  ?let @bigint inAddress
  ?let @bigint inElementArraySize
{
  self += !@loadRegisterWithSubscriptIR.new {!inTarget !inIndexResult !inAddress !inElementArraySize}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @loadRegisterWithSubscriptIR : @abstractInstructionIR {
  @objectIR mTarget
  @objectIR mIndexResult
  @bigint mRegisterAddress
  @bigint mElementArraySize
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @loadRegisterWithSubscriptIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let registerOffsetName = "%register.offset." + ioGenerationAdds.mUniqueIndex
  let registerIndexName = "%register.index." + ioGenerationAdds.mUniqueIndex
  let registerSubscriptedPtr = "%register.ptr." + ioGenerationAdds.mUniqueIndex
  let registerSubscriptedAddr = "%register.addr." + ioGenerationAdds.mUniqueIndex
  ioGenerationAdds.mUniqueIndex ++
#--- Needs to perform an extend to i32 ?
  [[[mIndexResult type] mKind] integer ?3* ?bitCount:let bitCount ?1*]
  if bitCount < 32 then
    ioLLVMcode += "  " + registerIndexName + " = zext " + [mIndexResult  llvmTypeName]
               + " " + [mIndexResult llvmName] + " to i32 ; extend index to i32\n"
  end
#--- Generation
  let llvmType = [[mTarget type] llvmTypeName]
  ioLLVMcode += "  " + registerOffsetName + " = mul i32 "
             + if bitCount < 32 then registerIndexName else [mIndexResult llvmName] end
             + ", " + mElementArraySize + " ; " + [mElementArraySize hexString] + "\n"
             + "  " + registerSubscriptedAddr + " = add i32 " + registerOffsetName
             + ", " + mRegisterAddress + " ; " + [mRegisterAddress hexString] + "\n"
             + "  " + registerSubscriptedPtr + " = inttoptr i32 " + registerSubscriptedAddr
             + " to " + llvmType + " *\n"
             + "  " + [mTarget llvmName] + " = load volatile " + llvmType + ", " + llvmType
             + " * " + registerSubscriptedPtr + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @loadRegisterWithSubscriptIR enterAccessibleEntities 
  ?!@accessibleEntities unused ioAccessibleEntities
  ?!@uint unused ioMaxBranchOfOnInstructions
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
