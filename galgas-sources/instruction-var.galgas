#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @varInstructionWithAssignmentAST : @instructionAST {
  @lstring mVarName
  @lstring mOptionalTypeName
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @varDeclarationInstructionAST : @instructionAST {
  @lstring mVarName
  @lstring mTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    $var$
    $identifier$ ?let varName
    $=$
    <expression> !?ioAST ?let @expressionAST expression
    ioInstructionList += !@varInstructionWithAssignmentAST.new {
      !varName.location
      !varName
      !["" here]
      !expression
    }
  }

  #·····················································································································

#  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
#    $var$
#    $identifier$ ?let varName
#    <type_definition> !?ioAST ?let typeName
#    select
#      ioInstructionList += !@varDeclarationInstructionAST.new {
#        !varName.location
#        !varName
#        !typeName
#      }
#    or
#      $=$
#      <expression> !?ioAST ?let @expressionAST expression
#      ioInstructionList += !@varInstructionWithAssignmentAST.new {
#        !varName.location
#        !varName
#        !typeName
#        !expression
#      }
#   end
#  }

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    $var$
    $identifier$ ?let varName
    <type_definition> !?ioAST ?let typeName
    ioInstructionList += !@varDeclarationInstructionAST.new {
      !varName.location
      !varName
      !typeName
    }
    select
    or
      $=$
      <expression> !?ioAST ?let @expressionAST sourceExpression
      let assignmentTargetAST = @LValueAST.new {!varName !.noOperand}
      ioInstructionList += !@assignmentInstructionAST.new {
       !assignmentTargetAST.mIdentifier.location
       !assignmentTargetAST
       !sourceExpression
     }
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varInstructionWithAssignmentAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  if mOptionalTypeName.string != "" then
    [!?ioGraph noteNode !mOptionalTypeName]
  end
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varDeclarationInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [!?ioGraph noteNode !mTypeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varInstructionWithAssignmentAST instructionSemanticAnalysis
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  @omnibusType targetType = if mOptionalTypeName.string == ""
    then voidType ()
    else [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mOptionalTypeName} type]
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:targetType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:let @objectIR sourcePossibleReference
  ]
  let result = checkAssignmentCompatibility (
    !source:sourcePossibleReference
    !targetAnnotationType:targetType
    !errorLocation:mVarName.location
    !staticTypeAllowed:false
  )
#--- Declare local variable
  let omnibusLocalVariableName = @lstring.new {!mVarName.string + "." + ioTemporaries.mTemporaryIndex !mVarName}
  ioTemporaries.mTemporaryIndex ++
  [!?ioUniversalMap insertLocalVariable !mVarName ![result type] !omnibusLocalVariableName !.hasUnreadValue !false]
#--- Code generation
  ioAllocaList += !llvmNameForLocalVariable (!omnibusLocalVariableName) ![result type] !false
#--- Assignment generation
  [!?ioInstructionGenerationList appendAssignmentIR
    !?ioTemporaries
    !inContext.mAssignmentOperatorMap
    !?ioAllocaList
    ![result type]
    !llvmNameForLocalVariable (!omnibusLocalVariableName)
    !sourcePossibleReference
    !mVarName
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varDeclarationInstructionAST instructionSemanticAnalysis
  ?self:let @omnibusType unused inSelfType
  ?routineAttributes:let @routineAttributes unused inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode unused inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
{
  let targetType = [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mTypeName} type]
#---
  if [targetType isCompileTimeType] then
    error mVarName : "$" + targetType.omnibusTypeDescriptionName + " type is a compile time type, and is not instanciable"
  elsif not [targetType instanciable] then
    error mVarName : "$" + targetType.omnibusTypeDescriptionName + " type is not instanciable"
  end
#--- Declare local variable
  let omnibusName = @lstring.new {!mVarName.string + "." + ioTemporaries.mTemporaryIndex !mVarName}
  ioTemporaries.mTemporaryIndex ++
  [!?ioUniversalMap insertLocalVariable !mVarName !targetType !omnibusName !.noValue !true]
#--- Code generation
  ioAllocaList += !llvmNameForLocalVariable (!omnibusName) !targetType !false
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
