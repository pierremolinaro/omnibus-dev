#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @varInstructionWithAssignmentAST : @instructionAST {
  @lstring mVarName
  @lstring mOptionalTypeName
  @expressionAST mSourceExpression
}

#----------------------------------------------------------------------------------------------------------------------*

class @varInstructionAST : @instructionAST {
  @lstring mVarName
  @lstring mTypeName
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $var$
    $identifier$ ?let varName
    @lstring optionalTypeName
    select
      optionalTypeName = ["" nowhere]
    or
      $typeName$ ?optionalTypeName
    end
    $=$
    <expression> ?let @expressionAST expression
    ioInstructionList += !@varInstructionWithAssignmentAST.new {
      !varName
      !optionalTypeName
      !expression
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $var$
    $identifier$ ?let varName
    $typeName$ ?let typeName
    ioInstructionList += !@varInstructionAST.new {
      !varName
      !typeName
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @varInstructionWithAssignmentAST analyze
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModes
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  @unifiedTypeMap-proxy targetType = if mOptionalTypeName.string == ""
    then .null
    else .searchKey {!inContext.mTypeMap !mOptionalTypeName}
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalReceiverType:inReceiverType
    !optionalTargetType:targetType
    !context:inContext
    !modes:inModes
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?type:let expressionType
    ?result:@operandIR expressionResultValueName
  ]
#--- Check type compatibility
  if targetType == .null then
    targetType = expressionType
  end
  checkAssignmentCompatibility (
    !sourceType:expressionType
    !sourceValue:expressionResultValueName
    !targetType:targetType
    !errorLocation:mVarName.location
  )
#--- Declare local variable
  let targetVar = @objectInMemoryIR.localValue {!type:targetType !name:mVarName}
  [!?ioVariableMap insertDefinedLocalVariable
    !mVarName
    !targetType
    !true
    !targetVar
    ![targetType copiable]
    !{}
    !true
    !false # Is not constant
  ]
#--- Code generation
  [!?ioInstructionGenerationList appendComment !"var " + mVarName.string + " = " + expressionResultValueName]
  [!?ioInstructionGenerationList appendAlloca
    !mVarName.string
    !targetType
  ]
  [!?ioInstructionGenerationList appendStoreLocalVariable
    !mVarName.string
    !targetType
    !expressionResultValueName
  ]
}

#----------------------------------------------------------------------------------------------------------------------*

override method @varInstructionAST analyze
  ?routineNameForInvocationGraph:let @lstring unused inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType unused inReceiverType
  ?context:let @semanticContext inContext
  ?modes:let @stringset unused inModes
  ?allowException:let @bool unused inAllowExceptions
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  let @unifiedTypeMap-proxy targetType = .searchKey {!inContext.mTypeMap !mTypeName}
#--- Declare local variable
  let targetVar = @objectInMemoryIR.localValue {!type:targetType !name:mVarName}
  [!?ioVariableMap insertUndefinedLocalVariable
    !mVarName
    !targetType
    !true
    !targetVar
    ![targetType copiable]
    !{}
    !true
    !false # Is not constant
  ]
#--- Code generation
  [!?ioInstructionGenerationList appendComment !"var " + mVarName.string]
  [!?ioInstructionGenerationList appendAlloca
    !mVarName.string
    !targetType
  ]
}

#----------------------------------------------------------------------------------------------------------------------*
