#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @varInstructionWithAssignmentAST : @instructionAST {
  @lstring mVarName
  @lstring mOptionalTypeName
  @expressionAST mSourceExpression
}

#----------------------------------------------------------------------------------------------------------------------*

class @varInstructionAST : @instructionAST {
  @lstring mVarName
  @lstring mTypeName
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $var$
    $identifier$ ?let varName
    @lstring optionalTypeName
    select
      optionalTypeName = ["" nowhere]
    or
      $:$
      $identifier$ ?optionalTypeName
    end
    $=$
    <expression> ?let @expressionAST expression
    ioInstructionList += !@varInstructionWithAssignmentAST.new {
      !varName
      !optionalTypeName
      !expression
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $var$
    $identifier$ ?let varName
    $:$
    $identifier$ ?let typeName
    ioInstructionList += !@varInstructionAST.new {
      !varName
      !typeName
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @varInstructionWithAssignmentAST analyze
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?mode:let @string inMode
  ?!temporary:@uint ioTemporaryIndex
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  let @unifiedTypeMap-proxy targetType = if mOptionalTypeName.string == ""
    then .null
    else .searchKey {!inContext.mTypeMap !mOptionalTypeName}
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !optionalReceiverType:inReceiverType
    !optionalTargetType:targetType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaryIndex
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?expressionType:let inferredType
#    ?generatedCode:let unused expressionGeneratedCode
    ?result:@variableKindIR expressionResultValueName
  ]
#--- Declare local variable
  let targetVar = @variableKindIR.localVariable {!name:mVarName}
  [!?ioVariableMap insertDefinedLocalVariable
    !mVarName
    !inferredType
    !{!inMode}
    !mangledNameForLocalVariable (!name:mVarName.string)
    !targetVar
    ![inferredType copiable]
  ]
#--- Code generation
  ioInstructionGenerationList += !@varDeclarationInstructionWithSimpleAssignmentIR.new {
    !inferredType
    !targetVar
    !expressionResultValueName
  }
}

#----------------------------------------------------------------------------------------------------------------------*

override method @varInstructionAST analyze
  ?optionalReceiverType:let @receiverType unused inReceiverType
  ?context:let @semanticContext inContext
  ?mode:let @string inMode
  ?!temporary:@uint unused ioTemporaryIndex
  ?!staticStringMap:@globalLiteralStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  let @unifiedTypeMap-proxy targetType = .searchKey {!inContext.mTypeMap !mTypeName}
#--- Declare local variable
  let targetVar = @variableKindIR.localVariable {!name:mVarName}
  [!?ioVariableMap insertUndefinedLocalVariable
    !mVarName
    !targetType
    !{!inMode}
    !mangledNameForLocalVariable (!name:mVarName.string)
    !targetVar
    ![targetType copiable]
  ]
#--- Code generation
  ioInstructionGenerationList += !@varDeclarationIR.new {
    !targetType
    !targetVar
  }
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*
#! @varDeclarationInstructionWithSimpleAssignmentIR
#----------------------------------------------------------------------------------------------------------------------*

class @varDeclarationInstructionWithSimpleAssignmentIR : @abstractInstructionIR {
  @unifiedTypeMap-proxy mTargetType
  @variableKindIR mTargetVar
  @variableKindIR mSourceVar
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @varDeclarationInstructionWithSimpleAssignmentIR instructionCode -> @string outCode {
  outCode = mangledNameForType (!name:[mTargetType key]) + " " + [mTargetVar mangledName]
  outCode += " = " +  [mSourceVar mangledName] + " ;\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @varDeclarationInstructionWithSimpleAssignmentIR enterAccessibleEntities
  ?!@accessibleEntities ioAccessibleEntities
{
  [mTargetVar enterAccessibleEntities !?ioAccessibleEntities]
  [mSourceVar enterAccessibleEntities !?ioAccessibleEntities]
}

#----------------------------------------------------------------------------------------------------------------------*
#! @varDeclarationIR
#----------------------------------------------------------------------------------------------------------------------*

class @varDeclarationIR : @abstractInstructionIR {
  @unifiedTypeMap-proxy mTargetType
  @variableKindIR mTargetVar
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @varDeclarationIR instructionCode -> @string outCode {
  outCode = mangledNameForType (!name:[mTargetType key]) + " " + [mTargetVar mangledName] + " ;\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @varDeclarationIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mTargetVar enterAccessibleEntities !?ioAccessibleEntities]
}

#----------------------------------------------------------------------------------------------------------------------*
