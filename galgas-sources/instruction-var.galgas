#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @varInstructionWithAssignmentAST : @instructionAST {
  @lstring mVarName
  @lstring mOptionalTypeName
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @varInstructionAST : @instructionAST {
  @lstring mVarName
  @lstring mTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $var$
    $identifier$ ?let varName
    @lstring optionalTypeName
    select
      optionalTypeName = ["" nowhere]
    or
      $\$type$ ?optionalTypeName
    end
    $=$
    <expression> ?let @expressionAST expression
    ioInstructionList += !@varInstructionWithAssignmentAST.new {
      !varName.location
      !varName
      !optionalTypeName
      !expression
    }
  }

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $var$
    $identifier$ ?let varName
    $\$type$ ?let typeName
    ioInstructionList += !@varInstructionAST.new {
      !varName.location
      !varName
      !typeName
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varInstructionWithAssignmentAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  if mOptionalTypeName.string != "" then
    let typeName = llvmRegularTypeMangledNameFromName (!mOptionalTypeName)
    [!?ioGraph noteNode !typeName]
  end
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  let typeName = llvmRegularTypeMangledNameFromName (!mTypeName)
  [!?ioGraph noteNode !typeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varInstructionWithAssignmentAST analyze
  ?self:let @PLMType inSelfType
  ?propertiesAreMutable:let @bool unused inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool unused inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  @PLMType targetType = if mOptionalTypeName.string == ""
    then .void
    else [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mOptionalTypeName} type]
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:targetType
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:let @objectIR sourcePossibleReference
  ]
  [!?ioInstructionGenerationList appendLoadFromReference
    !?ioTemporaries
    !sourcePossibleReference
    !mVarName
    ?let expressionResult
  ]  
#--- Check type compatibility
  if targetType == .void then
    targetType = [expressionResult type]
  end
  let result = checkAssignmentCompatibility (
    !source:expressionResult
    !targetAnnotationType:targetType
    !errorLocation:mVarName.location
    !staticTypeAllowed:false
  )
  drop expressionResult, targetType
#--- Declare local variable
  [!?ioUniversalMap insertLocalVariable !mVarName ![result type] !.hasUnreadValue !false]
#--- Code generation
  ioAllocaList += !mVarName ![[result type] llvmTypeName]
  [!?ioInstructionGenerationList appendStoreLocalVariable
    !mVarName
    ![result type]
    !result
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varInstructionAST analyze
  ?self:let @PLMType unused inSelfType
  ?propertiesAreMutable:let @bool unused inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool unused inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring unused inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode unused inCurrentMode
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
{
  let targetType = [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mTypeName} type]
#---
  if not [targetType instanciable] then
    error mVarName : "$" + [targetType key] + " type is not instanciable"
  end
#--- Declare local variable
  [!?ioUniversalMap insertLocalVariable !mVarName !targetType !.noValue !true]
#--- Code generation
  ioAllocaList += !mVarName ![targetType llvmTypeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
