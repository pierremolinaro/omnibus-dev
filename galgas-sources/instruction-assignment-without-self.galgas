#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @varAssignmentNoSelfInstructionAST : @instructionAST {
  @LValueWithoutSelfAST mAssignmentTargetAST
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList {
    <lvalue_without_self> ?let assignmentTargetAST
  #--- Source expression
    $=$
    <expression> ?let sourceExpression
  #--- AST
    ioInstructionList += !@varAssignmentNoSelfInstructionAST.new {
      !assignmentTargetAST.mIdentifier.location
      !assignmentTargetAST
      !sourceExpression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varAssignmentNoSelfInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  [mAssignmentTargetAST noteInstructionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varAssignmentNoSelfInstructionAST analyze
  ?self:let @PLMType inSelfType
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool unused inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  [mAssignmentTargetAST type !variableMap:ioUniversalMap ?let targetType]
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:targetType
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR sourceOperandPossibleReference
  ]
#--- Analyze LValue
  [mAssignmentTargetAST analyzeLValueNoSelf
    !self: inSelfType
#    !targetAccessKind:.write
    !propertiesAreMutable: inRoutineCanMutateProperties
#    !directAccessToPropertiesAllowed: inDirectAccessToPropertiesAllowed
    !routineNameForInvocationGraph: inCallerNameForInvocationGraph
    !context: inContext
    !mode: inCurrentMode
    !?temporary: ioTemporaries
    !?staticStringMap: ioGlobalLiteralStringMap
#    !?variableMap: ioVariableMap
    !?variableMap:ioUniversalMap
    !?alloca: ioAllocaList
    !?instructionListIR: ioInstructionGenerationList
#    ?@objectIR currentObject
    ?let @internalRepresentation internalRepresentation
#    ?globalVariableReceiverName:let unused globalVariableReceiverName
  ]
#  if [currentObject isPossibleFunction] then
#    error mAssignmentTargetAST.mIdentifier : "invalid assignment target" : currentObject
#  end
#---
  [!?ioInstructionGenerationList appendLoadFromReference
    !?ioTemporaries
    !sourceOperandPossibleReference
    ![mAssignmentTargetAST mIdentifier]
    ?let sourceOperand
  ]  
  let result = checkAssignmentCompatibility (
    !source:sourceOperand
    !targetAnnotationType:targetType
    !errorLocation:mAssignmentTargetAST.mIdentifier
    !staticTypeAllowed:false
  )
  let errorLocation = mAssignmentTargetAST.mIdentifier
  switch internalRepresentation
  case standAloneIdentifier (identifier) :
    [!?ioUniversalMap searchValuedObjectForWriteAccess !identifier ?let objectIR]
    [!?ioInstructionGenerationList appendStoreFromReference !objectIR !errorLocation !result]
  case bitField (* @objectIR currentPointerIR) :
    [!?ioInstructionGenerationList appendStoreFromReference !currentPointerIR !errorLocation !result]
  case structureMember (@lstring propertyName @objectIR currentPointerIR) :
    if [[currentPointerIR type] isStructure] then
      [[currentPointerIR type] structure ?2* ?universalMap:let structureMap ?3*]
      var m = structureMap
      [!?m searchValuedObjectForReadAccess !propertyName ?let @objectIR masterPropertyIR]
      let targetRef = @objectIR.temporaryReference {
         !type:[masterPropertyIR type]
         !llvmName:.new {!"temp." + ioTemporaries.mTemporaryIndex !propertyName}
         !sliceMap:{}
         !volatile:false
      }
      ioTemporaries.mTemporaryIndex ++
      [!?ioInstructionGenerationList appendGetPropertyReference !targetRef !currentPointerIR !propertyName]
      [!?ioInstructionGenerationList appendStoreFromReference !targetRef !errorLocation !result]
    else
      error [currentPointerIR location] : "this should be a structure instance"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
