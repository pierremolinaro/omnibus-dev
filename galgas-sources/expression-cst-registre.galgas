#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @registerConstantInExpressionAST : @expressionAST {
  @lstring mRegisterName
  @lstring mFieldName
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  rule <primary> !@expressionAST outExpression {
    $identifier$ ?let registerName
    $::$
    $identifier$ ?let fieldName
    outExpression = @registerConstantInExpressionAST.new {!registerName !fieldName}
  }

}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @registerConstantInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addEdge !inConstantName !mRegisterName]
}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @registerConstantInExpressionAST analyzeExpression
  ?optionalReceiverType:let @receiverType unused inReceiverType
  ?optionalTargetType:let @unifiedTypeMap-proxy unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset unused inModeSet
  ?allowException:let @bool unused inAllowExceptions
  ?!temporary:@uint unused ioTemporaryIndex
  ?!staticStringMap:@globalLiteralStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap unused ioVariableMap
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
  !expressionType:@unifiedTypeMap-proxy outExpressionType
  !result:@variableKindIR outResultValueName
{
#--- Search variable
  [inContext.mRegisterMap searchKey
    !mRegisterName
    ?outExpressionType
    ?let unused readOnly
    ?let @registerBitSliceAccessMap unused registerBitSliceMap
    ?let @registerFieldMap registerFieldMap
  ]
#--- Field
  [registerFieldMap searchKey
    !mFieldName
    ?let @uint bitIndex
    ?let @uint bitCount
  ]
#--- Check
  if bitCount != 1 then
    error mFieldName : "this field is not a boolean field (size: " + bitCount + " bits)"
  end
#--- Generate code
  outResultValueName = .literalUnsignedInteger {!type:outExpressionType !value:1L << bitIndex}
}

#----------------------------------------------------------------------------------------------------------------------*
