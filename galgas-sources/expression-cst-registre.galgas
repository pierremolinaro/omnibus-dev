#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @registerConstantInExpressionAST : @expressionAST {
  @lstring mRegisterName
  @lstring mFieldName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @registerIntegerExpInExpressionAST : @expressionAST {
  @lstring mRegisterName
  @lstring mFieldName
  @expressionAST mExpression
  @location mExpressionLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <primary> !@expressionAST outExpression {
    $identifier$ ?let registerName
    $::$
    warning registerName : "Obsolete construction"
    $identifier$ ?let fieldName
    outExpression = @registerConstantInExpressionAST.new {!registerName !fieldName}
  }

  #·····················································································································

  rule <primary> !@expressionAST outExpression {
    $identifier$ ?let registerName
    $::$
    $identifier$ ?let fieldName
    $($
    <expression> ?let expression
    let endOfExpression = @location.here
    $)$
    outExpression = @registerIntegerExpInExpressionAST.new {!registerName !fieldName !expression !endOfExpression}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @registerConstantInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring unused inConstantName
  ?!@semanticTypePrecedenceGraph unused ioGraph
{
#  [!?ioGraph addEdge !inConstantName !mRegisterName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @registerIntegerExpInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring unused inConstantName
  ?!@semanticTypePrecedenceGraph unused ioGraph
{
#  [!?ioGraph addEdge !inConstantName !mRegisterName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @registerConstantInExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph unused ioGraph {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @registerIntegerExpInExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph unused ioGraph {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @registerConstantInExpressionAST analyzeExpression
  ?self:let @unifiedTypeMap-proxy unused inSelfType
  ?directAccessToPropertiesAllowed:let @bool unused inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool unused inGuard
  ?routineNameForInvocationGraph:let @lstring unused inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset unused inModeSet
  ?allowPanic:let @bool unused inAllowPanic
  ?!temporary:@semanticTemporariesStruct unused ioTemporaryIndex
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap unused ioVariableMap
  ?!alloca:@allocaList unused ioAllocaList
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
  !result:@operandIR outResult
{
#--- Search variable
  [inContext.mControlRegisterMap searchKey
    !mRegisterName
    ?let type
    ?2*
    ?let @controlRegisterBitSliceAccessMap unused registerBitSliceMap
    ?let @controlRegisterFieldMap registerFieldMap
    ?let @bigint unused registerAddress
    ?2*
  ]
#--- Field
  [registerFieldMap searchKey
    !mFieldName
    ?let @uint bitIndex
    ?let @uint bitCount
  ]
#--- Generate code
  outResult = .new {!type !.literalInteger {!value:((1G << bitCount) - 1G) << bitIndex}}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @registerIntegerExpInExpressionAST analyzeExpression
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@operandIR outResult
{
#--- Search variable
  [inContext.mControlRegisterMap searchKey
    !mRegisterName
    ?let type
    ?*
    ?*
    ?let @controlRegisterBitSliceAccessMap unused registerBitSliceMap
    ?let @controlRegisterFieldMap registerFieldMap
    ?let @bigint unused registerAddress
    ?2*
  ]
#--- Field
  [registerFieldMap searchKey
    !mFieldName
    ?let @uint fieldBitIndex
    ?let @uint fieldBitCount
  ]
#--- Check field
  if fieldBitCount == 1 then
    error mFieldName : "this field is not an integer field"
  end
#--- Analyze expression
  [mExpression analyzeExpression
    !self:inSelfType
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !inGuard:inGuard
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:let @operandIR expressionResult
  ]
#--- Check expression type
  switch [expressionResult.mType kind]
  case arrayType (* *) :
    error mExpressionLocation: "an unsigned integer expression is required here" : outResult
  case opaque (*) :
    error mExpressionLocation: "an unsigned integer expression is required here" : outResult
  case enumeration (*) :
    error mExpressionLocation: "an unsigned integer expression is required here" : outResult
  case structure (* *) :
    error mExpressionLocation: "an unsigned integer expression is required here" : outResult
  case boolset, boolean :
    error mExpressionLocation: "an unsigned integer expression is required here" : outResult
  case literalString :
    error mExpressionLocation: "an unsigned integer expression is required here" : outResult
  case staticInteger :
    [expressionResult.mValue literalInteger ?value:let @bigint value]
    if value < 0G then
      error mExpressionLocation: "this integer expression should be positive" : outResult
    elsif value < (1G << fieldBitCount) then
      outResult = .new {!type !.literalInteger {!value:value << fieldBitIndex}}      
    else
      error mExpressionLocation: "expression too large (should be < " + (1G << fieldBitCount) : outResult
    end
  case integer (@bigint unused min @bigint unused max @bool unsigned @uint expressionBitCount) :
    if not unsigned then
      error mExpressionLocation: "an unsigned integer expression is required here" : outResult
    else
      let assertGenerated = expressionBitCount > fieldBitCount
      if assertGenerated && [inModeSet hasKey !panicModeName ()] then
        error mExpressionLocation
          : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
      end
      getNewTempVariable (!type !?ioTemporaries ?outResult)
      ioInstructionGenerationList += !@registerIntegerConstantInExpressionIR.new {
        !mExpressionLocation
        !expressionResult
        !(1L << fieldBitCount) - 1L
        !fieldBitIndex
        !outResult
        !not assertGenerated
      }
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @registerIntegerConstantInExpressionIR : @abstractInstructionIR {
  @location mInstructionLocation
  @operandIR mExpressionValue
  @uint64 mMaxBound
  @uint mBitShift
  @operandIR mResult
  @bool mNoCheck
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @registerIntegerConstantInExpressionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "<< @registerIntegerConstantInExpressionIR llvmInstructionCode not implemented >>\n"
  if mNoCheck then
#    ioLLVMcode += "const " + mangledNameForType (!name:[mResult.mType key]) + " " + [mResult.mValue llvmName]
#            + " = ((" + mangledNameForType (!name:[mResult.mType key]) + " *) "
#            + [mExpressionValue.mValue llvmName] + ") << " + mBitShift + "\n" 
#  elsif [option plm_options.noPanicGeneration value] then
#    ioLLVMcode += "const " + mangledNameForType (!name:[mResult.mType key]) + " " + [mResult.mValue llvmName]
#            + " = (" + [mExpressionValue.mValue llvmName] + " & " + mMaxBound + ") << " + mBitShift + "\n" 
#  else
#    let errorCode = 8
#    ioLLVMcode += "if (" + [mExpressionValue.mValue llvmName] + " > " + mMaxBound + ") {\n"
#    ioLLVMcode += "  raise_exception (" + errorCode + ", "
#       + [[[mInstructionLocation file] lastPathComponent] utf8Representation]
#       + ", " + [mInstructionLocation line] + ") ;\n"
#    ioLLVMcode += "}\n" 
#    ioLLVMcode += "const " + mangledNameForType (!name:[mResult.mType key]) + " " + [mResult.mValue llvmName]
#               + " = " + [mExpressionValue.mValue llvmName] + " << " + mBitShift + "\n" 
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @registerIntegerConstantInExpressionIR enterAccessibleEntities
  ?!@accessibleEntities unused ioAccessibleEntities
  ?!@uint unused ioMaxBranchOfOnInstructions
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
