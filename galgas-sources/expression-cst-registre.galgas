#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @registerIntegerFieldListAST {
  @lstring mFieldName
  @expressionAST mExpression
  @location mExpressionLocation
}

#·······················································································································

class @registerConstantExpressionAST : @expressionAST {
  @lstring mRegisterName
  @lstringlist mMaskFieldNames
  @registerIntegerFieldListAST mFieldValues
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <primary> !@expressionAST outExpression {
    $\$type$ ?let registerNameAsTypeName
    ${$
    @lstringlist booleanFieldNames = {}
    @registerIntegerFieldListAST integerFieldValues = {}
    repeat
      $identifier$ ?let registerFieldName
      select
        booleanFieldNames += !registerFieldName
      or
        $:$
        <expression> ?let expression
        integerFieldValues += !registerFieldName !expression !.here
      end
    while
      $,$
    end
    $}$
    outExpression = @registerConstantExpressionAST.new {!registerNameAsTypeName !booleanFieldNames !integerFieldValues}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @registerConstantExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring unused inConstantName
  ?!@semanticTypePrecedenceGraph unused ioGraph
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @registerConstantExpressionAST noteExpressionTypesInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  for (* expression *) in mFieldValues do
    [expression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @registerConstantExpressionAST analyzeExpression
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- Search variable
  [inContext.mControlRegisterMap searchKey
    !mRegisterName
    ?let registerType
    ?*
    ?*
    ?let @sliceMap unused registerBitSliceMap
    ?let @controlRegisterFieldMap registerFieldMap
    ?let @bigint unused registerAddress
    ?*
    ?let registerBitCount
    ?let unused powerOfTwoForArraySize
    ?let unused elementArraySize
  ]
#------------------------------------------------------ Fields masks
  @bigint accumulatedFieldStaticValues = 0G
  for (fieldName) in mMaskFieldNames do
    [registerFieldMap searchKey
      !fieldName
      ?let @uint fieldBitIndex
      ?let @uint fieldBitCount
    ]
    let mask = (1G << fieldBitCount) - 1G
    accumulatedFieldStaticValues = accumulatedFieldStaticValues | (mask << fieldBitIndex)
  end
#------------------------------------------------------ Valuated fields
  @operandList operandList = {}
  for (fieldName expression expressionLocation) in mFieldValues do
    [registerFieldMap searchKey
      !fieldName
      ?let @uint fieldBitIndex
      ?let @uint fieldBitCount
    ]
  #--- Analyze expression
    [expression analyzeExpression
      !self:inSelfType
      !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
      !inGuard:inGuard
      !routineNameForInvocationGraph:inCallerNameForInvocationGraph
      !optionalTargetType:.null
      !context:inContext
      !mode:inCurrentMode
      !?temporary:ioTemporaries
      !?staticStringMap:ioGlobalLiteralStringMap
      !?variableMap:ioVariableMap
      !?alloca:ioAllocaList
      !?instructionListIR:ioInstructionGenerationList
      ?result:let @objectIR expressionResult
    ]
  #--- Check expression type
    switch [expressionResult kind]
    case arrayType (* * *) :
      error expressionLocation: "an unsigned integer expression is required here"
    case opaque (*) :
      error expressionLocation: "an unsigned integer expression is required here"
    case enumeration (*) :
      error expressionLocation: "an unsigned integer expression is required here"
    case structure (* * *) :
      error expressionLocation: "an unsigned integer expression is required here"
    case boolean :
      error expressionLocation: "an unsigned integer expression is required here"
    case literalString :
      error expressionLocation: "an unsigned integer expression is required here"
    case function (* * *) :
      error expressionLocation: "an unsigned integer expression is required here"
    case staticInteger :
      [expressionResult literalInteger ?1* ?value:let @bigint value]
      if value < 0G then
        error expressionLocation: "this integer expression should be positive"
      elsif value < (1G << fieldBitCount) then
        accumulatedFieldStaticValues = accumulatedFieldStaticValues | (value << fieldBitIndex)
      else
        error expressionLocation: "expression too large (should be < " + (1G << fieldBitCount)
      end
    case integer (@bigint unused min @bigint unused max @bool unsigned @uint expressionBitCount) :
      if not unsigned then
        error expressionLocation: "an unsigned integer expression is required here"
      else
        if (expressionBitCount > fieldBitCount) && not [inCurrentMode panicAllowed] then
          error expressionLocation
            : "operations that can generate panic are not allowed here: the expression should be an $uint" + fieldBitCount
        end
      #--- Generate an upper bound check
        if (expressionBitCount > fieldBitCount) && [inCurrentMode panicAllowed] && not [option plm_options.noPanicGeneration value] then
          [!?ioInstructionGenerationList appendUpperBoundCheck
            !expressionResult
            !1G << fieldBitCount
            !panicCode:8
            !expressionLocation
          ]
        end
      #--- Perform an bit extend to register type or a trunc
        var partialResult = expressionResult
        if expressionBitCount < registerBitCount then
          getNewTempVariable (!registerType !expressionLocation !?ioTemporaries ?let extendedResult)
          [!?ioInstructionGenerationList appendExtend !extendedResult !partialResult]
          partialResult = extendedResult
        elsif expressionBitCount > registerBitCount then
          getNewTempVariable (!registerType !expressionLocation !?ioTemporaries ?let truncatedResult)
          [!?ioInstructionGenerationList appendTrunc !truncatedResult !partialResult]
          partialResult = truncatedResult
        end
      #--- Perform left shift
        getNewTempVariable (!registerType !expressionLocation !?ioTemporaries ?let shiftedResult)
        [!?ioInstructionGenerationList appendShiftLeft !shiftedResult !partialResult !fieldBitIndex]
      #---- Accumulate 
        operandList += !shiftedResult
      end
    end
  end
#------------------------------------------------------ Result
  outResult = .literalInteger {!type: registerType!value:accumulatedFieldStaticValues}
  for (operand) in operandList do
    getNewTempVariable (!registerType !mRegisterName !?ioTemporaries ?let newResult)
    [!?ioInstructionGenerationList appendBinaryOperation
      !newResult
      ![newResult type]
      !.here
      !outResult
      !.ior
      !operand
    ] 
    outResult = newResult
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
