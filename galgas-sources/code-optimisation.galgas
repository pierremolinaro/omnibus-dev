#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#    C O D E    O P T I M I S A T I O N                                                                                *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @accessibleEntities {
  @stringset mAccessibleRegisterSet
  @stringset mProcedureSet
  @stringset mFunctionSet
  @stringset mSectionSet
  @stringset mGlobalVariableSet
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @objectInMemoryIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  switch self
  case register (* @lstring name *) :
    ioAccessibleEntities.mAccessibleRegisterSet += !name.string
  case globalVariable (* @string name *) :
    ioAccessibleEntities.mGlobalVariableSet += !name
  case localValue (* @string unused name) :
  case globalConstant (* @string name) :
    ioAccessibleEntities.mGlobalVariableSet += !name
  case fieldAccess (@unifiedTypeMap-proxy unused objectType
                    @string unused objectName
                    @unifiedTypeMap-proxy unused fielfType
                    @uint unused fieldIndex) :
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractInstructionIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @instructionListIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  for (instruction) in self do
    [instruction enterAccessibleEntities !?ioAccessibleEntities]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @procedureMapIR-element enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @functionMapIR-element enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @sectionMapIR-element enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc codeOptimisation
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  let initialProcedureMap = ioIntermediateCodeStruct.mProcedureMapIR
  let initialFunctionMap = ioIntermediateCodeStruct.mFunctionMapIR
  @uint pass = 0
  @bool optimizing = true
  loop ([ioIntermediateCodeStruct.mProcedureMapIR count] + [ioIntermediateCodeStruct.mFunctionMapIR count] + 1)
  while optimizing do
    optimizing = false
    pass ++
  #--- Display
    if [option plm_options.optimization_displayDeadCodeElimination value] then
      var s = "Optimisation pass " + pass + "\n"
      s += "  " + [ioIntermediateCodeStruct.mControlRegisterMap count] + " registers\n"
      s += "  " + [ioIntermediateCodeStruct.mStaticStringMap count] + " static strings\n"
      s += "  " + [ioIntermediateCodeStruct.mGlobalConstantMap count] + " global constants\n"
      s += "  " + [ioIntermediateCodeStruct.mGlobalVariableMap count] + " global variables\n"
      s += "  " + [ioIntermediateCodeStruct.mProcedureMapIR count] + " procedures\n"
      s += "  " + [ioIntermediateCodeStruct.mFunctionMapIR count] + " functions\n"
      message s
    end
  #------------------------------------------- loop through sub programs
    suppressInaccessibleSubprograms (
      !?intermediateCode:ioIntermediateCodeStruct
      ?@accessibleEntities accessibleEntities
      !?optimizing
    )
  #--- Suppress unused registers
    @controlRegisterMapIR usedRegisterMap = {}
    for (@lstring lkey @string registerTypeName @bigint registerAddress) in ioIntermediateCodeStruct.mControlRegisterMap do
      if [accessibleEntities.mAccessibleRegisterSet hasKey !lkey.string] then
        [!?usedRegisterMap insertKey !lkey !registerTypeName !registerAddress]
      else
        optimizing = true
      end
    end
    ioIntermediateCodeStruct.mControlRegisterMap = usedRegisterMap
  #--- Suppress global constant
    @globalConstantMapIR globalConstantMap = {}
    for constant in ioIntermediateCodeStruct.mGlobalConstantMap do
      if [accessibleEntities.mGlobalVariableSet hasKey !constant.lkey.string] then
        [!?globalConstantMap insertKey !constant.lkey !constant.mType !constant.mSourceExpression]
      else
        optimizing = true
      end
    end
    ioIntermediateCodeStruct.mGlobalConstantMap = globalConstantMap
  #--- Suppress static strings
#    @globalLiteralStringMap staticStringMap = {}
#    for (@lstring lkey
#         @string literalStringCname)
#    in ioIntermediateCodeStruct.mGlobalLiteralStringMap do
#      if [accessibleEntities.mStaticStringSet hasKey !lkey.string] then
#        [!?staticStringMap insertKey !lkey !literalStringCname]
#      else
#        optimizing = true
#      end
#    end
#    ioIntermediateCodeStruct.mGlobalLiteralStringMap = staticStringMap
  #--- Suppress unused global variables
    @globalVariableMapIR globalVariableMap = {}
    for globalVariable in ioIntermediateCodeStruct.mGlobalVariableMap do
      if [accessibleEntities.mGlobalVariableSet hasKey !globalVariable.lkey.string] then
        [!?globalVariableMap insertKey
          !globalVariable.lkey
          !globalVariable.mType
          !globalVariable.mGenerateVolatile
          !globalVariable.mInitialValue
        ]
      else
        optimizing = true
      end
    end
    ioIntermediateCodeStruct.mGlobalVariableMap = globalVariableMap
  end
#--- Warn on unused procedures
  for () in initialProcedureMap do
    if (not [ioIntermediateCodeStruct.mProcedureMapIR hasKey !lkey.string]) && mWarnIfUnused then
      warning lkey: "unused procedure; use @" + noWarningIfUnusedAttribute () + " attribute for removing this warning"
    end
  end
#--- Warn on unused function
  for () in initialFunctionMap do
    if (not [ioIntermediateCodeStruct.mFunctionMapIR hasKey !lkey.string]) && mWarnIfUnused then
      warning lkey: "unused function; use @" + noWarningIfUnusedAttribute () + " attribute for removing this warning"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc suppressInaccessibleSubprograms
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
  !@accessibleEntities outAccessibleEntities
  ?!@bool ioOptimizing
{
  outAccessibleEntities = .default
  @procedureMapIR accessibleProcedureMap = {}
  @procedureMapIR nonExploredProcedureMap = {}
#--- First, required procedures
  for procedure in ioIntermediateCodeStruct.mProcedureMapIR do
    if procedure.mIsRequired then
      [!?accessibleProcedureMap insertKey
        !procedure.lkey
        !procedure.mFormalArgumentListForGeneration
        !procedure.mInstructionGenerationList
        !procedure.mIsRequired
        !procedure.mWarnIfUnused
        !procedure.mWeak
        !procedure.mNullOnNoException
        !procedure.mGlobal
      ]        
      [procedure enterAccessibleEntities !?outAccessibleEntities]
      outAccessibleEntities.mProcedureSet += !procedure.lkey.string
    else
      [!?nonExploredProcedureMap insertKey
        !procedure.lkey
        !procedure.mFormalArgumentListForGeneration
        !procedure.mInstructionGenerationList
        !procedure.mIsRequired
        !procedure.mWarnIfUnused
        !procedure.mWeak
        !procedure.mNullOnNoException
        !procedure.mGlobal
      ]        
    end
  end
#--- Then, boot and init clauses
  for boot in ioIntermediateCodeStruct.mBootList do
    [boot.mInstructionListIR enterAccessibleEntities !?outAccessibleEntities]
  end
  for init in ioIntermediateCodeStruct.mInitList do
    [init.mInstructionListIR enterAccessibleEntities !?outAccessibleEntities]
  end
#--- Exception clause (if exception code is generated)
  if not [option plm_options.noPanicGeneration value] then
    [ioIntermediateCodeStruct.mExceptionSetupInstructionListIR enterAccessibleEntities !?outAccessibleEntities]
    [ioIntermediateCodeStruct.mExceptionLoopInstructionListIR enterAccessibleEntities !?outAccessibleEntities]
  end
#--- Explore procedures, functions and sections
  @functionMapIR accessibleFunctionMap  = {}
  @functionMapIR nonExploredFunctionMap = ioIntermediateCodeStruct.mFunctionMapIR
  @sectionMapIR  accessibleSectionMap   = {}
  @sectionMapIR  nonExploredSectionMap  = ioIntermediateCodeStruct.mSectionMapIR
  var exploreProceduresAndFunctions = true
  loop ([ioIntermediateCodeStruct.mProcedureMapIR count] + [ioIntermediateCodeStruct.mFunctionMapIR count] + 1)
  while exploreProceduresAndFunctions do
    exploreProceduresAndFunctions = false
    let @procedureMapIR exNonExploredProcedureMap = nonExploredProcedureMap
    nonExploredProcedureMap = {}
    for procedure in exNonExploredProcedureMap do
      if [outAccessibleEntities.mProcedureSet hasKey !procedure.lkey.string] then
        [!?accessibleProcedureMap insertKey
          !procedure.lkey
          !procedure.mFormalArgumentListForGeneration
          !procedure.mInstructionGenerationList
          !procedure.mIsRequired
          !procedure.mWarnIfUnused
          !procedure.mWeak
          !procedure.mNullOnNoException
          !procedure.mGlobal
        ]        
        [procedure enterAccessibleEntities !?outAccessibleEntities]
        exploreProceduresAndFunctions = true
      else
        [!?nonExploredProcedureMap insertKey
          !procedure.lkey
          !procedure.mFormalArgumentListForGeneration
          !procedure.mInstructionGenerationList
          !procedure.mIsRequired
          !procedure.mWarnIfUnused
          !procedure.mWeak
          !procedure.mNullOnNoException
          !procedure.mGlobal
      ]        
      end
    end
    let @functionMapIR exNonExploredFunctionMap = nonExploredFunctionMap
    nonExploredFunctionMap = {}
    for function in exNonExploredFunctionMap do
      if [outAccessibleEntities.mFunctionSet hasKey !function.lkey.string] then
        [!?accessibleFunctionMap insertKey
          !function.lkey
          !function.mFormalArgumentListForGeneration
          !function.mInstructionGenerationList
          !function.mResultType
          !function.mResultVarName
          !function.mWarnIfUnused
        ]        
        [function enterAccessibleEntities !?outAccessibleEntities]
        exploreProceduresAndFunctions = true
      else
        [!?nonExploredFunctionMap insertKey
          !function.lkey
          !function.mFormalArgumentListForGeneration
          !function.mInstructionGenerationList
          !function.mResultType
          !function.mResultVarName
          !function.mWarnIfUnused
        ]        
      end
    end
    let @sectionMapIR exNonExploredSectionMap = nonExploredSectionMap
    nonExploredSectionMap = {}
    for section in exNonExploredSectionMap do
      if [outAccessibleEntities.mSectionSet hasKey !section.lkey.string] then
        [!?accessibleSectionMap insertKey
          !section.lkey
          !section.mFormalArgumentListForGeneration
          !section.mInstructionGenerationList
          !section.mWarnIfUnused
        ]        
        [section enterAccessibleEntities !?outAccessibleEntities]
        exploreProceduresAndFunctions = true
      else
        [!?nonExploredSectionMap insertKey
          !section.lkey
          !section.mFormalArgumentListForGeneration
          !section.mInstructionGenerationList
          !section.mWarnIfUnused
        ]        
      end
    end
  end
  if ioIntermediateCodeStruct.mProcedureMapIR != accessibleProcedureMap then
    ioIntermediateCodeStruct.mProcedureMapIR = accessibleProcedureMap
    ioOptimizing = true
  end
  if ioIntermediateCodeStruct.mFunctionMapIR != accessibleFunctionMap then
    ioIntermediateCodeStruct.mFunctionMapIR = accessibleFunctionMap
    ioOptimizing = true
  end
  if ioIntermediateCodeStruct.mSectionMapIR != accessibleSectionMap then
    ioIntermediateCodeStruct.mSectionMapIR = accessibleSectionMap
    ioOptimizing = true
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

