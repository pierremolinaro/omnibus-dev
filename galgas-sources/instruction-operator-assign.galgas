#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                 *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @operatorAssignKind {
  case bitWiseOrAssign
  case bitWiseAndAssign
  case bitWiseXorAssign
  case addAssign
  case addModuloAssign
  case subAssign
  case subModuloAssign
  case mulAssign
  case mulModuloAssign
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @operatorAssignInstructionAST : @instructionAST {
  @lstring mTargetVarName
  @expressionAST mSourceExpression
  @operatorAssignKind mOperator
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                              *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $identifier$ ?let varName
    @operatorAssignKind operatorAssign
    select
      $|=$
      operatorAssign = .bitWiseOrAssign
    or
      $&=$
      operatorAssign = .bitWiseAndAssign
    or
      $^=$
      operatorAssign = .bitWiseXorAssign
    or
      $+=$
      operatorAssign = .addAssign
    or
      $+%=$
      operatorAssign = .addModuloAssign
    or
      $-=$
      operatorAssign = .subAssign
    or
      $-%=$
      operatorAssign = .subModuloAssign
    or
      $*=$
      operatorAssign = .mulAssign
    or
      $*%=$
      operatorAssign = .mulModuloAssign
    end
    <expression> ?let @expressionAST expression
    ioInstructionList += !@operatorAssignInstructionAST.new {
      !varName
      !expression
      !operatorAssign
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                           *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @operatorAssignInstructionAST analyze
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Get target type
  [!?ioVariableMap neutralAccess
    !mTargetVarName
    ?let targetType
    ?5*
    ?let isConstant
  ]
  if isConstant then
    error mTargetVarName : "a constant cannot be modified"
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalReceiverType:inReceiverType
    !optionalTargetType:targetType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?result:@operandIR sourceValue
  ]
#--- Write local variable
  [!?ioVariableMap searchForReadWriteAccess
    !mTargetVarName
    ?*
    ?let accessIsAllowed
    ?let targetVariableKind
    ?let isCopiable
    ?3*
  ]
  if not accessIsAllowed then
    error mTargetVarName : "routine has no access right on the this variable"
  end
#--- Check operator is available for type
  @infixOperatorMap operatorMap
  switch mOperator
  case bitWiseAndAssign :
    operatorMap = inContext.mAndOperatorMap
  case bitWiseOrAssign :
    operatorMap = inContext.mOrOperatorMap
  case bitWiseXorAssign :
    operatorMap = inContext.mXorOperatorMap
  case addAssign :
    operatorMap = inContext.mAddOperatorMap
  case addModuloAssign :
    operatorMap = inContext.mAddNoOvfOperatorMap
  case subAssign :
    operatorMap = inContext.mSubOperatorMap
  case subModuloAssign :
    operatorMap = inContext.mSubNoOvfOperatorMap
  case mulAssign :
    operatorMap = inContext.mMulOperatorMap
  case mulModuloAssign :
    operatorMap = inContext.mMulNoOvfOperatorMap
  end
  [operatorMap checkBinaryOperationWith
    !leftType:targetType
    !rightType:sourceValue.mType
    !operatorLocation:mTargetVarName.location
    ?resultType:*
    ?op:let @infixOperatorDescription binaryOperator
  ]
  if not isCopiable then
    error mTargetVarName : "the '" + mTargetVarName + "' variable is not copiable"
  end
#--- Code generation
  [targetVariableKind loadFromMemory
    !?temporary:ioTemporaries
    !?instructionListIR:ioInstructionGenerationList
    ?resultingValue:@operandIR variableValue
  ]
  [binaryOperator generateInfixOperatorCode
    !?ioTemporaries
    !?ioInstructionGenerationList
    !variableValue
    !mTargetVarName.location
    !sourceValue
    !targetType
    ?let newResultingValue
  ]
  [targetVariableKind storeInMemory
    !value:newResultingValue
    !?instructionListIR:ioInstructionGenerationList
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
