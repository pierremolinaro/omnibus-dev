#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @operatorAssignKind {
  case bitWiseOrAssign
  case bitWiseAndAssign
  case bitWiseXorAssign
  case addAssign
  case addModuloAssign
  case subAssign
  case subModuloAssign
  case mulAssign
  case mulModuloAssign
  case divAssign
  case divZeroAssign
  case modAssign
  case modZeroAssign
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @varOperatorAssignInstructionAST : @instructionAST {
  @lstring mTargetVarName
  @expressionAST mSourceExpression
  @operatorAssignKind mOperator
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @selfVarOperatorAssignInstructionAST : @instructionAST {
  @lstring mTargetVarName
  @expressionAST mSourceExpression
  @operatorAssignKind mOperator
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <op_assign> !@operatorAssignKind outOp {
    select
      $|=$
      outOp = .bitWiseOrAssign
    or
      $&=$
      outOp = .bitWiseAndAssign
    or
      $^=$
      outOp = .bitWiseXorAssign
    or
      $+=$
      outOp = .addAssign
    or
      $+%=$
      outOp = .addModuloAssign
    or
      $-=$
      outOp = .subAssign
    or
      $-%=$
      outOp = .subModuloAssign
    or
      $*=$
      outOp = .mulAssign
    or
      $*%=$
      outOp = .mulModuloAssign
    end
  }

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $identifier$ ?let varName
    <op_assign> ?let @operatorAssignKind operatorAssign
    <expression> ?let @expressionAST expression
    ioInstructionList += !@varOperatorAssignInstructionAST.new {
      !varName
      !expression
      !operatorAssign
    }
  }

  #·····················································································································

  rule <instruction_beginning_by_self> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $identifier$ ?let varName
    <op_assign> ?let @operatorAssignKind operatorAssign
    <expression> ?let @expressionAST expression
    ioInstructionList += !@selfVarOperatorAssignInstructionAST.new {
      !varName
      !expression
      !operatorAssign
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varOperatorAssignInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfVarOperatorAssignInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varOperatorAssignInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Get target type
  [!?ioVariableMap neutralAccess
    !lkey:mTargetVarName
    ?type:let targetType
    ?5*
    ?isConstant:let isConstant
  ]
  if isConstant then
    error mTargetVarName : "a constant cannot be modified"
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalTargetType:targetType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?result:@operandIR sourceValue
  ]
#--- Write local variable
  [!?ioVariableMap searchForReadWriteAccess
    !lkey:mTargetVarName
    ?1*
    ?readAccessAllowed:let accessIsAllowed
    ?variableKind:let targetVariableKind
    ?copyable:let isCopyable                                                 
    ?3*
  ]
  if not accessIsAllowed then
    error mTargetVarName : "routine has no access right on the this variable"
  end
#--- Check operator is available for type
  let noPanicGeneration = [option plm_options.noPanicGeneration value]
  let panicMode = [inModeSet hasKey !panicModeName ()]
  @infixOperatorMap operatorMap
  switch mOperator
  case bitWiseAndAssign :
    operatorMap = inContext.mAndOperatorMap
  case bitWiseOrAssign :
    operatorMap = inContext.mOrOperatorMap
  case bitWiseXorAssign :
    operatorMap = inContext.mXorOperatorMap
  case addAssign :
    if panicMode then
      error mTargetVarName : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mAddNoOvfOperatorMap else inContext.mAddOperatorMap end
  case addModuloAssign :
    operatorMap = inContext.mAddNoOvfOperatorMap
  case subAssign :
    if panicMode then
      error mTargetVarName : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mSubNoOvfOperatorMap else inContext.mSubOperatorMap end
  case subModuloAssign :
    operatorMap = inContext.mSubNoOvfOperatorMap
  case mulAssign :
    if panicMode then
      error mTargetVarName : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mMulNoOvfOperatorMap else inContext.mMulOperatorMap end
  case mulModuloAssign :
    operatorMap = inContext.mMulNoOvfOperatorMap
  case divAssign :
    if panicMode then
      error mTargetVarName : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mDivNoOvfOperatorMap else inContext.mDivOperatorMap end
  case divZeroAssign :
    operatorMap = inContext.mDivNoOvfOperatorMap
  case modAssign :
    if panicMode then
      error mTargetVarName : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mModNoOvfOperatorMap else inContext.mModOperatorMap end
  case modZeroAssign :
    operatorMap = inContext.mModNoOvfOperatorMap
  end
  [operatorMap checkBinaryOperationWith
    !leftType:targetType
    !rightType:sourceValue.mType
    !operatorLocation:mTargetVarName.location
    ?resultType:*
    ?op:let @infixOperatorDescription binaryOperator
  ]
  if not isCopyable then
    error mTargetVarName : "the '" + mTargetVarName + "' variable is not copyable"
  end
#--- Code generation
  [targetVariableKind loadFromMemory
    !?temporary:ioTemporaries
    !?instructionListIR:ioInstructionGenerationList
    ?resultingValue:@operandIR variableValue
  ]
  [binaryOperator generateInfixOperatorCode
    !?ioTemporaries
    !?ioInstructionGenerationList
    !variableValue
    !mTargetVarName.location
    !sourceValue
    !targetType
    ?let newResultingValue
  ]
  [targetVariableKind storeInMemory
    !value:newResultingValue
    !?instructionListIR:ioInstructionGenerationList
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfVarOperatorAssignInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  if inSelfType == .null then
    error mTargetVarName : "'self' is not available in this context"
  else
    switch [inSelfType kind]
    case opaque (*) :
      error mTargetVarName : "an opaque type does not handle field access"
    case boolean :
      error mTargetVarName : "a boolean does not handle field access"
    case staticInteger :
      error mTargetVarName : "an integer does not handle field access"
    case boolset :
      error mTargetVarName : "a boolset does not handle field access"
    case literalString :
      error mTargetVarName : "a literal string does not handle field access"
    case enumeration (*) :
      error mTargetVarName : "an enumeration does not handle field access"
    case integer (* * * *) :
      error mTargetVarName : "an integer does not handle field access"
    case structure (@propertyMap propertyMap *) :
      [propertyMap searchKey !mTargetVarName ?let targetType ?let idx]
#  #--- Get target type
#    [!?ioVariableMap neutralAccess
#      !mTargetVarName
#      ?let targetType
#      ?5*
#      ?let isConstant
#    ]
#    if isConstant then
#      error mTargetVarName : "a constant cannot be modified"
#    end
  #--- Analyze source expression
    [mSourceExpression analyzeExpression
      !self:inSelfType
      !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
      !optionalTargetType:targetType
      !context:inContext
      !modes:inModeSet
      !allowException:inAllowExceptions
      !?temporary:ioTemporaries
      !?staticStringMap:ioGlobalLiteralStringMap
      !?variableMap:ioVariableMap
      !?instructionListIR:ioInstructionGenerationList
      ?result:@operandIR sourceValue
    ]
#  #--- Write local variable
#    [!?ioVariableMap searchForReadWriteAccess
#      !mTargetVarName
#      ?*
#      ?let accessIsAllowed
#      ?let targetVariableKind
#      ?let isCopyable                                                 
#      ?3*
#    ]
#    if not accessIsAllowed then
#      error mTargetVarName : "routine has no access right on the this variable"
#    end
  #--- Check operator is available for type
    let noPanicGeneration = [option plm_options.noPanicGeneration value]
    let panicMode = [inModeSet hasKey !panicModeName ()]
    @infixOperatorMap operatorMap
    switch mOperator
    case bitWiseAndAssign :
      operatorMap = inContext.mAndOperatorMap
    case bitWiseOrAssign :
      operatorMap = inContext.mOrOperatorMap
    case bitWiseXorAssign :
      operatorMap = inContext.mXorOperatorMap
    case addAssign :
      if panicMode then
        error mTargetVarName : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
      end
      operatorMap = if noPanicGeneration then inContext.mAddNoOvfOperatorMap else inContext.mAddOperatorMap end
    case addModuloAssign :
      operatorMap = inContext.mAddNoOvfOperatorMap
    case subAssign :
      if panicMode then
        error mTargetVarName : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
      end
      operatorMap = if noPanicGeneration then inContext.mSubNoOvfOperatorMap else inContext.mSubOperatorMap end
    case subModuloAssign :
      operatorMap = inContext.mSubNoOvfOperatorMap
    case mulAssign :
      if panicMode then
        error mTargetVarName : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
      end
      operatorMap = if noPanicGeneration then inContext.mMulNoOvfOperatorMap else inContext.mMulOperatorMap end
    case mulModuloAssign :
      operatorMap = inContext.mMulNoOvfOperatorMap
    case divAssign :
      if panicMode then
        error mTargetVarName : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
      end
      operatorMap = if noPanicGeneration then inContext.mDivNoOvfOperatorMap else inContext.mDivOperatorMap end
    case divZeroAssign :
      operatorMap = inContext.mDivNoOvfOperatorMap
    case modAssign :
      if panicMode then
        error mTargetVarName : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
      end
      operatorMap = if noPanicGeneration then inContext.mModNoOvfOperatorMap else inContext.mModOperatorMap end
    case modZeroAssign :
      operatorMap = inContext.mModNoOvfOperatorMap
    end
    [operatorMap checkBinaryOperationWith
      !leftType:targetType
      !rightType:sourceValue.mType
      !operatorLocation:mTargetVarName.location
      ?resultType:*
      ?op:let @infixOperatorDescription binaryOperator
    ]
#    if not isCopyable then
#      error mTargetVarName : "the '" + mTargetVarName + "' variable is not copyable"
#    end
    #--- Code generation
      getLocalNameOfNewTempObjectInMemory (!targetType !?ioTemporaries ?let fieldAddress)
      [!?ioInstructionGenerationList appendGetElementPtrFromSelf
        !fieldAddress
        !inSelfType
        !idx
        !mTargetVarName.string
      ]        
      [fieldAddress loadFromMemory
        !?temporary:ioTemporaries
        !?instructionListIR:ioInstructionGenerationList
        ?resultingValue:let targetVariableValue
      ]
      [binaryOperator generateInfixOperatorCode
        !?ioTemporaries
        !?ioInstructionGenerationList
        !targetVariableValue
        !mTargetVarName.location
        !sourceValue
        !targetType
        ?let newResultingValue
      ]
      [fieldAddress storeInMemory
        !value:newResultingValue
        !?instructionListIR:ioInstructionGenerationList
      ]
    end    
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
