#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @literalStringInExpressionAST : @expressionAST {
  @lstring mLiteralString
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <primary> ?!@ast unused ioAST !@expressionAST outExpression {
    $"string"$ ?let @lstring stringLiteral
    outExpression = @literalStringInExpressionAST.new {!stringLiteral}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalStringInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addEdge !inConstantName !llvmTypeNameFromPLMname (!.new {!staticStringTypeName () !inConstantName.location})]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalStringInExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [!?ioGraph noteNode !llvmTypeNameFromPLMname (![staticIntegerTypeName () nowhere])]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalStringInExpressionAST analyzeExpression
  ?self:let @PLMType unused inSelfType
  ?inGuard:let @bool unused inGuard
  ?routineNameForInvocationGraph:let @lstring unused inCallerNameForInvocationGraph
  ?optionalTargetType:let @PLMType unused inOptionalTargetType
  ?context:let @semanticContext unused inContext
  ?mode:let @mode unused inCurrentMode
  ?!temporary:@semanticTemporariesStruct unused ioTemporaryIndex
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalValuedObjectMapForContext unused ioUniversalMap
  ?!alloca:@allocaList unused ioAllocaList
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
  !result:@objectIR outResult
{
  [!?ioGlobalLiteralStringMap findOrAddStaticString !mLiteralString.string ?let staticStringIndex]
  outResult = .literalString {!utf8Size:[mLiteralString.string utf8Length] + 1 !index:staticStringIndex}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
