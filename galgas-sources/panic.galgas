#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sortedlist @panicClauseListAST {
  @bool mIsSetup # true: setup, false: loop
  @instructionListAST mPanicInstructionList
  @location mEndOfPanicInstructions
  @lbigint mPriority
}{
  mPriority <
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $panic$
    $setup$
    $integer$ ?let priority
    ${$
    <instructionList> ?let instructionList
    let endOfInstructionList = @location.here
    $}$
    ioAST.mPanicClauseListAST +=
      !true
      !instructionList
      !endOfInstructionList
      !priority
  }

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $panic$
    $loop$
    $integer$ ?let priority
    ${$
    <instructionList> ?let instructionList
    let endOfInstructionList = @location.here
    $}$
    ioAST.mPanicClauseListAST +=
      !false
      !instructionList
      !endOfInstructionList
      !priority
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @panicClauseListAST noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    [mPanicInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @panicClauseListAST-element enterInContext
  ?!context:@semanticContext ioContext
{
  if mIsSetup then
    [!?ioContext.mPanicSetupRoutinePriorityMap insertSetupKey !.new{![mPriority string] !mPriority.location}]
  else
    [!?ioContext.mPanicLoopRoutinePriorityMap insertLoopKey !.new{![mPriority string] !mPriority.location}]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once panicModeName -> @string {
  result = "panic"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @panicRoutinePriorityMap {
  insert insertSetupKey error message "a panic setup routine with priority %K has been already declared"
  insert insertLoopKey error message "a panic loop routine with priority %K has been already declared"
  search searchSetupKey error message "there is no panic setup routine with priority %K"
  search searchLoopKey error message "there is no panic loop routine with priority %K"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @panicClauseListAST-element panicSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  let routineNameForInvocationGraph = panicNameForInvocationGraph (!if mIsSetup then "setup" else "loop" end !mPriority)
#--- Variable map
  initialVariableMap (
    !context:inContext
    !mode:.panicMode
    !globalsAreConstant:false
    !returnTypeName:["" nowhere]
    ?@universalValuedObjectMapForContext universalMap
  )
#--- Insert predefined input arguments
  let codeArg = @lstring.new {!"CODE" !mPriority.location}
  [!?universalMap insertUsedLocalConstant !codeArg ![inContext.mPanicCodeType type] !codeArg]
  let fileArg = @lstring.new {!"FILE" !mPriority.location}
  let StaticStringType = [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap ![staticStringTypeName () nowhere]} type]
  [!?universalMap insertUsedLocalConstant !fileArg !StaticStringType !fileArg]
  let lineArg = @lstring.new {!"LINE" !mPriority.location}
  [!?universalMap insertUsedLocalConstant !lineArg ![inContext.mPanicLineType type] !lineArg]
#---
  if not [ioTemporaries.mSubprogramInvocationGraph isNodeDefined !routineNameForInvocationGraph.string] then
    [!?ioTemporaries.mSubprogramInvocationGraph addNode
      !routineNameForInvocationGraph
      !routineNameForInvocationGraph
    ]
  end
#--- Analyze instruction list
  @instructionListIR instructionGenerationList = {}
  @allocaList initAllocaList = {}
  [mPanicInstructionList analyzeRoutineInstructionList
    !self:voidType ()
    !directAccessToPropertiesAllowed:false
    !propertiesAreMutable:false
    !routineNameForInvocationGraph:routineNameForInvocationGraph
    !context:inContext
    !mode:.panicMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioIntermediateCodeStruct.mStaticStringMap
    !?variableMap:universalMap
    !?alloca:initAllocaList
    !?generatedCode:instructionGenerationList
  ]
#--- End of variableMap
#  [variableMap deinitTopLevelVariables]
  [universalMap checkLocalVariableFinalState]
#  [variableMap checkAutomatonStates !mEndOfPanicInstructions]
#  drop variableMap
#--- Code generation
  if mIsSetup then
    [!?ioTemporaries.mPanicSetupRoutinePriorityMap insertSetupKey !.new{![mPriority string] !mPriority.location}]
    ioIntermediateCodeStruct.mPanicSetupInstructionListIR += instructionGenerationList
  else
    [!?ioTemporaries.mPanicLoopRoutinePriorityMap insertLoopKey !.new{![mPriority string] !mPriority.location}]
    ioIntermediateCodeStruct.mPanicLoopInstructionListIR += instructionGenerationList
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

