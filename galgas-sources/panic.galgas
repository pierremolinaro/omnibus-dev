#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @panicTypesAST {
  @lstring mPanicCodeTypeName
  @lstring mPanicLineTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sortedlist @panicClauseListAST {
  @lstring mPanicClauseName
  @instructionListAST mPanicInstructionList
  @location mEndOfPanicInstructions
  @lbigint mPriority
  @location mLocationPriority
}{
  mPriority <
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $panic$
    $proc$
    $identifier$ ?let panicClauseName
    $integer$ ?let priority
    ${$
    @labelMap labelMap = {}
    <instructionList> ?let instructionList !?labelMap
    let endOfInstructionList = @location.here
    $}$
    ioAST.mPanicClauses +=
      !panicClauseName
      !instructionList
      !endOfInstructionList
      !priority
      !priority.location
  }

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $panic$
    $proc$
    $:$
    $typeName$ ?let panicCodeTypeName 
    $typeName$ ?let panicLineTypeName
    ioAST.mPanicTypes += !panicCodeTypeName !panicLineTypeName
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @panicClauseListAST noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    [mPanicInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @panicClauseListAST-element enterInContext
  ?!context:@semanticContext ioContext
{
  if mPanicClauseName.string == "setup" then
    [!?ioContext.mPanicSetupRoutinePriorityMap insertSetupKey !.new{![mPriority string] !mLocationPriority}]
  elsif mPanicClauseName.string == "loop" then
    [!?ioContext.mPanicLoopRoutinePriorityMap insertLoopKey !.new{![mPriority string] !mLocationPriority}]
  else
    error mPanicClauseName : "panic routine name should be \"setup\" or \"loop\""
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once panicModeName -> @string outResult {
  outResult = "panic"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @panicRoutinePriorityMap {
  insert insertSetupKey error message "a panic setup routine with priority %K has been already declared"
  insert insertLoopKey error message "a panic loop routine with priority %K has been already declared"
  search searchSetupKey error message "there is no panic setup routine with priority %K"
  search searchLoopKey error message "there is no panic loop routine with priority %K"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @panicClauseListAST-element panicSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  if not [inContext.mModeMap hasKey !panicModeName ()] then
    error mPanicClauseName : "the `" + panicModeName () + " mode should be defined in order to use a panic clause"
  end
  let routineNameForInvocationGraph = panicNameForInvocationGraph (!mPanicClauseName.string !mPriority)
#--- Variable map
  @variableMap variableMap = initialVariableMap (
    !routineNameForInvocation:routineNameForInvocationGraph.string
    !context:inContext
    !userMode:false
    !registerAccess:.readWriteAccess
    !globalsAreConstant:false
  )
#--- Insert predefined input arguments
  let StaticStringType = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap ![staticStringTypeName () nowhere]}
  let codeArg = @lstring.new {!"CODE" !mPanicClauseName.location}
  [!?variableMap insertUsedConstantInputFormalArgument
    !lkey:codeArg
    !type:inContext.mPanicCodeType
    !readAccessAllowed:true
    !variableKind:.localValue {!type:inContext.mPanicCodeType !name:codeArg.string}
    !copyable:[inContext.mPanicCodeType copyable]
    !fieldMap:{}
    !canBeUsedAsInputParameter:false
    !isConstant:false
  ]
  let fileArg = @lstring.new {!"FILE" !mPanicClauseName.location}
  [!?variableMap insertUsedConstantInputFormalArgument
    !lkey:fileArg
    !type:StaticStringType
    !readAccessAllowed:true
    !variableKind:.localValue {!type:StaticStringType !name:fileArg.string}
    !copyable:[StaticStringType copyable]
    !fieldMap:{}
    !canBeUsedAsInputParameter:false
    !isConstant:false
  ]
  let lineArg = @lstring.new {!"LINE" !mPanicClauseName.location}
  [!?variableMap insertUsedConstantInputFormalArgument
    !lkey:lineArg
    !type:inContext.mPanicLineType
    !readAccessAllowed:true
    !variableKind:.localValue {!type:inContext.mPanicLineType !name:lineArg.string}
    !copyable:[inContext.mPanicLineType copyable]
    !fieldMap:{}
    !canBeUsedAsInputParameter:false
    !isConstant:false
  ]
#---
  if not [ioTemporaries.mSubprogramInvocationGraph isNodeDefined !routineNameForInvocationGraph.string] then
    [!?ioTemporaries.mSubprogramInvocationGraph addNode
      !routineNameForInvocationGraph
      !routineNameForInvocationGraph
    ]
  end
#--- Analyze instruction list
  @instructionListIR instructionGenerationList = {}
  [mPanicInstructionList analyzeRoutineInstructionList
    !self:.null
    !routineNameForInvocationGraph:routineNameForInvocationGraph
    !context:inContext
    !modes:{!panicModeName ()}
    !allowPanic:false
    !?temporary:ioTemporaries
    !?staticStringMap:ioIntermediateCodeStruct.mStaticStringMap
    !?variableMap:variableMap
    !?generatedCode:instructionGenerationList
  ]
#---
  [variableMap checkAutomatonStates !mEndOfPanicInstructions]
#--- Code generation
  if mPanicClauseName.string == "setup" then
    [!?ioTemporaries.mPanicSetupRoutinePriorityMap insertSetupKey !.new{![mPriority string] !mLocationPriority}]
    ioIntermediateCodeStruct.mPanicSetupInstructionListIR += instructionGenerationList
  elsif mPanicClauseName.string == "loop" then
    [!?ioTemporaries.mPanicLoopRoutinePriorityMap insertLoopKey !.new{![mPriority string] !mLocationPriority}]
    ioIntermediateCodeStruct.mPanicLoopInstructionListIR += instructionGenerationList
  else
    error mPanicClauseName : "panic routine name should be \"setup\" or \"loop\""
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

