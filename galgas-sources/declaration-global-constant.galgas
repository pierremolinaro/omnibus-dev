 #———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @globalConstantDeclaration : @abstractDeclaration {
  @lstring mConstantName
  @lstring mConstantTypeName
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @globalConstantDeclaration location -> @location outLocation {
  outLocation = mConstantName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $let$
    $identifier$ ?let constantName
    @lstring typeName
    select
      typeName = ["" nowhere]
    or
      $typeName$ ?typeName
    end
    $=$
    <expression> ?let @expressionAST expression
    ioAST.mDeclarationList += !@globalConstantDeclaration.new {
      !constantName
      !typeName
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @globalConstantDeclaration addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  !@abstractDeclaration outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @expressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @globalConstantDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
#--- Add 'constant name' node
  [!?ioGraph addNode !mConstantName !self]
#--- Add dependency from constant type name
  if mConstantTypeName.string != "" then
    let typeName = @lstring.new {!"$" + mConstantTypeName !mConstantTypeName.location}
    [!?ioGraph addEdge !mConstantName !typeName]
  end
#--- Add dependency from source expression
  [mSourceExpression addDependenceEdgeForStaticExpression !mConstantName !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @globalConstantDeclaration keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "global constant " + mConstantName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @globalConstantDeclaration enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
{
  var variableMap = initialVariableMap (
    !routineNameForInvocation:"compiler" # inRoutineNameForInvocation
    !context:ioContext
    !userMode:false
    !registerAccess:.readWriteAccess
    !globalsAreConstant:true # Any value, there is no defined global variable at this stage
    !returnTypeName:["" nowhere]
  )
#--- Get destination type
  @unifiedTypeMap-proxy annotationType
  if mConstantTypeName.string == "" then
    annotationType = .null
  else
    annotationType = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mConstantTypeName}
  end
#--- Analyze source expression
  @semanticTemporariesStruct temporaries = .default
  @instructionListIR instructionGenerationList = {}
  [mSourceExpression analyzeExpression
    !self:.null
    !routineNameForInvocationGraph:["compiler" nowhere]
    !optionalTargetType:annotationType
    !context:ioContext
    !modes:{}
    !allowPanic:true
    !?temporary:temporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:variableMap
    !?instructionListIR:instructionGenerationList
    ?result:let @operandIR expressionResult
  ]
#--- Check assignment compatibility
  let result = checkAssignmentCompatibility (
    !source:expressionResult
    !targetAnnotationType:annotationType
    !errorLocation:mConstantName.location
    !staticTypeAllowed:true
  )
  drop annotationType, expressionResult
  if ([instructionGenerationList length] > 0) || not [result.mValue isStatic] then
    error mConstantName : "source expression cannot be statically computed"
  end
#--- Enter in context
  [!?ioContext.mGlobalConstantMap insertKey
    !mConstantName
    !result
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @globalConstantDeclaration enterRoutinesInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext unused ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  BUILD HTML FILE                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc buildGlobalConstantMapHTMLFile
  ?@globalConstantMap inGlobalConstantMap
  ?sourceFile:let @lstring inSourceFile
{
#------------------------------------ Build an HTML file that contains all declared constants
  let @string typeDumpFilePath = inSourceFile.string + ".global-constants.html"
  if [option plm_options.writeGlobalConstantHTMLDumpFile value] then
    @stringset firstLetterSet = {}
    for () in inGlobalConstantMap do
      firstLetterSet += ![[lkey.string characterAtIndex!0] string]
    end
    @string tableOfTypeString = ""
    @char currentFirstLetter = ' '
    for () type_ in inGlobalConstantMap do
      if currentFirstLetter != [type_lkey.string characterAtIndex !0] then
        currentFirstLetter = [type_lkey.string characterAtIndex !0]
        tableOfTypeString += "<br><a name=\"" + [currentFirstLetter uint] + "\"><b>" + currentFirstLetter + "</b></a><br>"
      end
      tableOfTypeString += linkForGlobalConstant (!type_lkey.string) + "<br>"
    end
    let @string typeDumpString = [filewrapper constantDumpGenerationTemplate.dump
      ![inSourceFile lastPathComponent]
      !inGlobalConstantMap
      !firstLetterSet
      !tableOfTypeString
    ]
    [typeDumpString writeToFileWhenDifferentContents !typeDumpFilePath ?*]
  else
    [@string deleteFileIfExists !typeDumpFilePath]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

filewrapper constantDumpGenerationTemplate in "../generation-templates/" {
}{
}{
  template dump "globalConstantDump.html.galgasTemplate"
    ?@string PROJECT_NAME
    ?@globalConstantMap GLOBAL_CONSTANT_MAP
    ?@stringset FIRST_LETTER_SET
    ?@string TABLE_OF_TYPES_STRING
}

#----------------------------------------------------------------------------------------------------------------------*

func linkForGlobalConstant ?let @string inConstantName -> @string outResult {
  outResult = "<a class=\"header_link\" href=\"#" + inConstantName + "\">" + inConstantName + "</a>"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  INIT ANALYSIS                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @globalConstantDeclaration semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
