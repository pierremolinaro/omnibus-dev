#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @globalConstantDeclarationAST : @abstractDeclarationAST {
  @lstring mConstantName
  @lstringlist mAttributeList
  @lstring mConstantTypeName
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @globalConstantDeclarationAST location -> @location outLocation {
  outLocation = mConstantName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $let$
    $identifier$ ?let constantName
    @lstringlist attributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      attributeList += !attribute
    end
    @lstring typeName
    select
      typeName = ["" nowhere]
    or
      <type_definition> !?ioAST ?typeName
    end
    $=$
    <expression> !?ioAST ?let @expressionAST expression
    ioAST.mDeclarationListAST += !@globalConstantDeclarationAST.new {
      !constantName
      !attributeList
      !typeName
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @expressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph

#·······················································································································

override method @globalConstantDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
#--- Add 'constant name' node
  [!?ioGraph addNode !mConstantName !self]
#--- Add dependency from constant type name
  if mConstantTypeName.string != "" then
    let typeName = llvmTypeNameFromPLMname (!mConstantTypeName)
    [!?ioGraph addEdge !mConstantName !typeName]
  end
#--- Add dependency from source expression
  [mSourceExpression addDependenceEdgeForStaticExpression !mConstantName !?ioGraph]
}

#·······················································································································

override getter @globalConstantDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "global.constant." + mConstantName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @globalConstantDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@subprogramInvocationGraph unused ioSubprogramInvocationGraph
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!globalVariables:@globalVariableIRList unused ioGlobalVariableIRList
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
{
  var displayValue = false
  for (attribute) in mAttributeList do
    if attribute.string != "display" then
      error attribute : "attribute should be @display"
    elsif displayValue then
      error attribute : "duplicated attribute"
    else
      displayValue = true
    end
  end
#--- Get destination type
  @PLMType annotationType
  if mConstantTypeName.string == "" then
    annotationType = voidType ()
  else
    annotationType = [@unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mConstantTypeName} type]
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:voidType ()
    !routineAttributes:.none
    !routineNameForInvocationGraph:["compiler" nowhere]
    !optionalTargetType:annotationType
    !context:ioContext
    !mode:.bootMode
    !?temporary:*
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioContext.mValuedObjectMap # universalMap
    !?alloca:*
    !?instructionListIR:*
    ?result:@objectIR expressionResult
  ]
#--- Check assignment compatibility
  let result = checkAssignmentCompatibility (
    !source:expressionResult
    !targetAnnotationType:annotationType
    !errorLocation:mConstantName.location
    !staticTypeAllowed:true
  )
  drop annotationType, expressionResult
  if not [result isStatic] then
    error mConstantName : "source expression cannot be statically computed"
  end
#--- Enter in context
  [!?ioContext.mGlobalConstantMap insertKey !mConstantName !result]
  [!?ioContext.mValuedObjectMap insertGlobalConstant !mConstantName !result]
#--- Diplay ?
  if displayValue then
    message "Global constant '" + mConstantName + "' = " + [result llvmValue] + "\n"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  BUILD CONSTANT MAP HTML FILE                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc buildGlobalConstantMapHTMLFile
  ?@globalConstantMap inGlobalConstantMap
  ?sourceFile:let @lstring inSourceFile
{
#------------------------------------ Build an HTML file that contains all declared constants
  let @string typeDumpFilePath = inSourceFile.string + ".global-constants.html"
  if [option plm_options.emitGlobalConstantHTMLDumpFile value] then
    @stringset firstLetterSet = {}
    for () in inGlobalConstantMap do
      firstLetterSet += ![[lkey.string characterAtIndex!0] string]
    end
    @string tableOfTypeString = ""
    @char currentFirstLetter = ' '
    for () type_ in inGlobalConstantMap do
      if currentFirstLetter != [type_lkey.string characterAtIndex !0] then
        currentFirstLetter = [type_lkey.string characterAtIndex !0]
        tableOfTypeString += "<br><a name=\"" + [currentFirstLetter uint] + "\"><b>" + currentFirstLetter + "</b></a><br>"
      end
      tableOfTypeString += linkForGlobalConstant (!type_lkey.string) + "<br>"
    end
    let @string typeDumpString = [filewrapper constantDumpGenerationTemplate.dump
      ![inSourceFile lastPathComponent]
      !inGlobalConstantMap
      !firstLetterSet
      !tableOfTypeString
    ]
    [typeDumpString writeToFileWhenDifferentContents !typeDumpFilePath ?*]
  else
    [@string deleteFileIfExists !typeDumpFilePath]
  end
}

#·······················································································································

filewrapper constantDumpGenerationTemplate in "../generation-templates/" {
}{
}{
  template dump "globalConstantDump.html.galgasTemplate"
    ?@string PROJECT_NAME
    ?@globalConstantMap GLOBAL_CONSTANT_MAP
    ?@stringset FIRST_LETTER_SET
    ?@string TABLE_OF_TYPES_STRING
}

#·······················································································································

func linkForGlobalConstant ?let @string inConstantName -> @string {
  result = "<a class=\"header_link\" href=\"#" + inConstantName + "\">" + inConstantName + "</a>"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
