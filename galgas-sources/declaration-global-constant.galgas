#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @globalConstantDeclarationAST : @abstractDeclarationAST {
  public var @lstring mConstantName
  public var @lstringlist mAttributeList
  public var @lstring mConstantTypeName # Empty string if no type annotation
  public var @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @globalConstantDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = self.mConstantName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $let$
    var @lstringlist attributeList = §[]
    repeat
    while
      $@attribute$ ?let attribute
      attributeList += !attribute
    end
    $identifier$ ?let constantName
    let @lstring typeName
    select
      typeName = ["" nowhere]
    or
      <type_definition> !?ioAST ?typeName
    end
    $=$
    <expression> !?ioAST ?let @expressionAST expression
    ioAST.mDeclarationListAST += !@globalConstantDeclarationAST.init {
      !constantName
      !attributeList
      !typeName
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @expressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph

#·······················································································································

override method @globalConstantDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
#--- Add 'constant name' node
  [!?ioGraph addNode !self.mConstantName !self]
#--- Add dependency from constant type name
  if self.mConstantTypeName.string != "" then
    [!?ioGraph addEdge !self.mConstantName !self.mConstantTypeName]
  end
#--- Add dependency from source expression
  [self.mSourceExpression addDependenceEdgeForStaticExpression !self.mConstantName !?ioGraph]
  [!?ioGraph addEdge !self.mConstantName !compileTimeDeclarationBarrier ()]
}

#·······················································································································

override getter @globalConstantDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "global constant " + self.mConstantName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @globalConstantDeclarationAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR unused ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
  var displayValue = false
  for (attribute) in self.mAttributeList do
    if attribute.string != "display" then
      error attribute : "attribute should be @display"
    elsif displayValue then
      error attribute : "duplicated attribute"
    else
      displayValue = true
    end
  end
#--- Analyze source expression
  computeStaticExpression (
    !?context: ioContext
    !?staticEntityMap:ioStaticEntityMap
    !expression:self.mSourceExpression
    !errorLocation:self.mConstantName.location
    !optionalContextualTypeName:self.mConstantTypeName
    ?result:let @objectIR expressionResult
  )
#--- Enter in context
  [!?ioContext.mGlobalConstantMap insertKey !self.mConstantName !expressionResult]
  [!?ioContext.mValuedObjectMap insertGlobalConstant !self.mConstantName !expressionResult]
#--- Display ?
  if displayValue then
    print (!"Global constant '" + self.mConstantName + "' = " + [expressionResult llvmValue] + "\n")
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  BUILD CONSTANT MAP HTML FILE                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc buildGlobalConstantMapHTMLFile
  ?@globalConstantMap inGlobalConstantMap
  ?sourceFile:let @lstring inSourceFile
{
#------------------------------------ Build an HTML file that contains all declared constants
  let @string typeDumpFilePath = inSourceFile.string + ".global-constants.html"
  if [option omnibus_options.emitGlobalConstantHTMLDumpFile value] then
    var @stringset firstLetterSet = §[]
    for (lkey *) in inGlobalConstantMap do
      firstLetterSet += ![[lkey.string characterAtIndex!0] string]
    end
    var @string tableOfTypeString = ""
    var @char currentFirstLetter = ' '
    for (type_lkey *) in inGlobalConstantMap do
      if currentFirstLetter != [type_lkey.string characterAtIndex !0] then
        currentFirstLetter = [type_lkey.string characterAtIndex !0]
        tableOfTypeString += "<br><a name=\"" + [currentFirstLetter uint] + "\"><b>" + currentFirstLetter + "</b></a><br>"
      end
      tableOfTypeString += linkForGlobalConstant (!type_lkey.string) + "<br>"
    end
    let @string typeDumpString = [filewrapper constantDumpGenerationTemplate.dump
      ![inSourceFile lastPathComponent]
      !inGlobalConstantMap
      !firstLetterSet
      !tableOfTypeString
    ]
    [typeDumpString writeToFileWhenDifferentContents !typeDumpFilePath ?*]
  else
    [@string deleteFileIfExists !typeDumpFilePath]
  end
}

#·······················································································································

filewrapper constantDumpGenerationTemplate in "../generation-templates/" {
}{
}{
  template dump "globalConstantDump.html.galgasTemplate"
    ?@string PROJECT_NAME
    ?@globalConstantMap GLOBAL_CONSTANT_MAP
    ?@stringset FIRST_LETTER_SET
    ?@string TABLE_OF_TYPES_STRING
}

#·······················································································································

func linkForGlobalConstant ?let @string inConstantName -> @string {
  result = "<a class=\"header_link\" href=\"#" + inConstantName + "\">" + inConstantName + "</a>"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
