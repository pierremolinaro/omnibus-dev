#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @structureDeclaration : @abstractDeclaration {
  @lstring mStructureName
  @lstringlist mAttributeListAST
  @structureFieldListAST mStructureFieldListAST
  @functionDeclarationListAST mFunctionDeclarationListAST
  @serviceDeclarationListAST mServiceListAST
  @sectionDeclarationListAST mSectionListAST
  @primitiveDeclarationListAST mPrimitiveListAST
  @guardDeclarationListAST mGuardListAST
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @structureDeclaration location -> @location outLocation {
  outLocation = mStructureName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @structureVarInit {
  case expression (@expressionAST initExpression)
  case noExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @structureFieldListAST {
  @lstring mFieldName
  @bool mIsPublic
  @lstring mFieldTypeName
  @structureVarInit mInitialisation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <declaration_struct_var> ?!@structureFieldListAST ioFieldListAST {
    @bool public
    select
      public = false
    or
      $public$
      public = true
    end
    $var$
    $identifier$ ?let fieldName
    select
      $typeName$ ?let typeName
      select
        ioFieldListAST += !fieldName !public !typeName !.noExpression
      or
        $=$
        <expression> ?let initExpression
        ioFieldListAST += !fieldName !public !typeName !.expression{!initExpression:initExpression}
      end
    or
      $=$
      <expression> ?let initExpression
      ioFieldListAST += !fieldName !public !["" nowhere] !.expression{!initExpression:initExpression}
    end
  }

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $struct$
    $typeName$ ?let structureName
    @lstringlist attributeList = {}
    repeat
    while
      $attribute$ ?let attribute
      attributeList += !attribute
    end 
    ${$
    @functionDeclarationListAST procedureDeclarationListAST = {}
    @structureFieldListAST fieldList = {}
    @serviceDeclarationListAST serviceListAST = {}
    @sectionDeclarationListAST sectionListAST = {}
    @primitiveDeclarationListAST primitiveListAST = {}
    @guardDeclarationListAST guardListAST = {}
    repeat
    while
      <declaration_struct_var> !?fieldList
    while
      <procedure> !?procedureDeclarationListAST
    while
     <section> !?sectionListAST
    while
      <service> !?serviceListAST
    while
      <guard> !?guardListAST
    while
      <primitive> !?primitiveListAST
    while
      $;$
    end
    $}$
    ioAST.mDeclarationList += !@structureDeclaration.new {
      !structureName
      !attributeList
      !fieldList
      !procedureDeclarationListAST
      !serviceListAST
      !sectionListAST
      !primitiveListAST
      !guardListAST
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration addExtension
  ?!@extensionDeclarationListAST ioExtensionDeclarationListAST
  !@abstractDeclaration outNewDeclaration
{
  @structureDeclaration newDeclaration = self
  let currentExtensionDeclarationListAST = ioExtensionDeclarationListAST
  ioExtensionDeclarationListAST = {}
  for (typeName functions properties services sections primitives guards) in currentExtensionDeclarationListAST do
    if mStructureName.string == typeName.string then
      newDeclaration = .new {
        ![newDeclaration mStructureName]
        ![newDeclaration mAttributeListAST]
        ![newDeclaration mStructureFieldListAST] + properties
        ![newDeclaration mFunctionDeclarationListAST] + functions
        ![newDeclaration mServiceListAST] + services
        ![newDeclaration mSectionListAST] + sections
        ![newDeclaration mPrimitiveListAST] + primitives
        ![newDeclaration mGuardListAST] + guards      
      }
    else
      ioExtensionDeclarationListAST += !typeName !functions !properties !services !sections !primitives !guards
    end
  end
  outNewDeclaration = newDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  let structureTypeName = @lstring.new {!"$" + mStructureName !mStructureName.location}
#--- Add structure type name as node
  [!?ioGraph addNode !structureTypeName !self]
#--- add field types
  for (* * fieldTypeName initExpression) in mStructureFieldListAST do
    if fieldTypeName.string != "" then
      let typeName = @lstring.new {!"$" + fieldTypeName !fieldTypeName.location}
      [!?ioGraph addEdge !structureTypeName !typeName]
    end
    switch initExpression
    case noExpression :
    case expression (initExpression) :
      [initExpression addDependenceEdgeForStaticExpression !structureTypeName !?ioGraph]
    end
  end
#--- Add structure procedures
  for () in mFunctionDeclarationListAST do
    for (* * formalArgumentTypeName *) in mFunctionFormalArgumentList do
      let typeName = @lstring.new {!"$" + formalArgumentTypeName !formalArgumentTypeName.location}
      [!?ioGraph noteNode !typeName]
    end
    [mFunctionInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
#--- Add structure services, section, primitives and guards
  [mServiceListAST noteServiceTypesInPrecedenceGraph !?ioGraph]
  [mSectionListAST noteSectionTypesInPrecedenceGraph !?ioGraph]
  [mPrimitiveListAST notePrimitiveTypesInPrecedenceGraph !?ioGraph]
  [mGuardListAST noteTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @structureDeclaration keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "struct $" + mStructureName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @propertyList {
  @string mPropertyName
  @unifiedTypeMap-proxy mType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @propertyMap {
  @bool mIsPublic
  @unifiedTypeMap-proxy mTypeProxy
  @uint mIndex
  insert insertKey error message "the '%K' property is already declared"
  search searchKey error message "there is no '%K' property"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @constructorSignature {
  @string mSelector
  @unifiedTypeMap-proxy mType
  @uint mFieldIndex
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sortedlist @sortedOperandIRList {
  @operandIR mOperand
  @uint mIndex
}{
  mIndex <
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
#---------------------------------------- Properties
  @propertyList propertyList = {}
  @propertyMap propertyMap = {}
  @sortedOperandIRList sortedOperandIRList = {}
  @constructorSignature constructorSignature = {}
  var canBeCopied = true
  for () in mStructureFieldListAST do (fieldIndex)
  #--- Field type
    let @unifiedTypeMap-proxy fieldType = if mFieldTypeName.string == ""
      then .null
      else .searchKey {!ioContext.mTypeMap !mFieldTypeName}
    end
  #--- Init expression
    @instructionListIR initInstructionGenerationList = {}
    @allocaList allocaList = {}
    @semanticTemporariesStruct temporaries = .default
    switch mInitialisation
    case expression (initExpression) :
      [initExpression analyzeExpression
        !self:.null
        !directAccessToPropertiesAllowed:false
        !inGuard:false
        !routineNameForInvocationGraph:.new {!mStructureName.string + " init" !mStructureName.location}
        !optionalTargetType:fieldType
        !context:ioContext
        !modes:{}
        !allowPanic:false
        !?temporary:temporaries
        !?staticStringMap:*
        !?variableMap:*
        !?alloca:allocaList
        !?instructionListIR:initInstructionGenerationList
        ?result:@operandIR expressionIR
      ]
      if ([initInstructionGenerationList length] > 0) || ([allocaList length] > 0) || not [expressionIR.mValue isStatic] then
        error mFieldName : "initialization expression cannot be computed statically"
      end
      @unifiedTypeMap-proxy actualFieldType
      if fieldType != .null then
        actualFieldType = fieldType
      else
        actualFieldType = expressionIR.mType
      end
      if not [actualFieldType instantiable] then
        error mFieldName : "$" + [actualFieldType key] + " type is not instanciable"
      end
      if not [actualFieldType copyable] then
        canBeCopied = false
      end
      propertyList += !mFieldName.string !actualFieldType
      [!?propertyMap insertKey !mFieldName !mIsPublic !actualFieldType ![propertyMap count]]
      sortedOperandIRList += !@operandIR.new {!actualFieldType !expressionIR.mValue} !fieldIndex
    case noExpression :
      if not [fieldType instantiable] then
        error mFieldName : "$" + [fieldType key] + " type is not instanciable"
      end
      propertyList += !mFieldName.string !fieldType
      [!?propertyMap insertKey !mFieldName !mIsPublic !fieldType ![propertyMap count]]
      constructorSignature += !mFieldName.string !fieldType !fieldIndex
    end
  end
  [!?ioContext.mConstructorMap insertKey
    !mStructureName
    !.structure{!constructorSignature:constructorSignature !sortedOperandList:sortedOperandIRList}
  ]
#---------------------------------------- Attribute "copyable"
  var copyableAttribute = false
  for (s) in mAttributeListAST do
    if s.string == "copyable" then
      if copyableAttribute then
        error s : "duplicated attribute"
      end
      copyableAttribute = true
    else
      error s : "only @copyable attribute is allowed here"
    end
  end
  if copyableAttribute && not canBeCopied then
    error mStructureName : "this structure cannot be copied, one field is not copyable"
    copyableAttribute = false
  end
#---------------------------------------- Enter in type map
  [!?ioContext.mTypeMap insertType
    !lkey:mStructureName
    !llvmTypeName:"%" + ["$" + mStructureName assemblerRepresentation]
    !kind:.structure {!propertyMap:propertyMap !propertyList:propertyList}
    !classMethodMap:{}
    !instantiable:true
    !copyable:copyableAttribute
    !equatable:false
    !comparable:false
    !enumerationType:.null # Not enumerable
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration enterRoutinesInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
  [mFunctionDeclarationListAST enterInContext
    !selfTypeName:"$" + mStructureName.string
    !?context:ioContext
  ]
  [mServiceListAST enterInContext !receiverType:"$" + mStructureName.string !?context:ioContext]
  [mSectionListAST enterInContext !receiverType:"$" + mStructureName.string !?context:ioContext]
  [mPrimitiveListAST enterInContext !receiverType:"$" + mStructureName.string !?context:ioContext]
  [mGuardListAST enterInContext !receiverType:"$" + mStructureName.string !?context:ioContext]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  let structureType = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mStructureName}
#--- Analyze functions
  [self functionSemanticAnalysis
    !structureType:structureType
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
  ]
#--- Analyze services
  [mServiceListAST serviceSemanticAnalysis
    !receiverType:structureType
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
  ]
#--- Analyze sections
  [mSectionListAST sectionSemanticAnalysis
    !receiverType:structureType
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
  ]
#--- Analyze primitives
  [mPrimitiveListAST primitiveSemanticAnalysis
    !receiverType:structureType
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
  ]
#--- Analyze guards
  [mGuardListAST guardSemanticAnalysis
    !receiverType:structureType
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @structureDeclaration functionSemanticAnalysis
  ?structureType:let @unifiedTypeMap-proxy inStructureType
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  for function in mFunctionDeclarationListAST do
    var warnIfUnused = true
    var mutating = false
    var accessProperties = false
    for (attribute) in function.mFunctionAttributeList do
      if attribute.string == noWarningIfUnusedAttribute () then
        if not warnIfUnused then
          error attribute : "duplicated @" + noWarningIfUnusedAttribute () + " attribute"
        end
        warnIfUnused = false    
      elsif attribute.string == userAccessAttribute () then
        if accessProperties then
          error attribute : "duplicated @" + userAccessAttribute () + " attribute"
        end
        accessProperties = true    
      elsif attribute.string == mutatingAttribute () then
        if mutating then
          error attribute : "duplicated @" + mutatingAttribute () + " attribute"
        end
        mutating = true    
      else
        error attribute : "unknown attribute; available attributes are @" + noWarningIfUnusedAttribute ()
          + ", @" + mutatingAttribute () + " and @" + userAccessAttribute ()
      end
    end
    @stringset modeSet = {}
    for (mode) in function.mFunctionModeList do
      modeSet += !mode.string
    end
    if not [modeSet hasKey !userModeName ()] then
      if accessProperties then
        error function.mFunctionName : "useless @" + userAccessAttribute ()
          + " attribute: function is never executed in `" + userModeName () + " mode"
      end
      accessProperties = true
    end
    routineSemanticAnalysis (
      !receiverType:inStructureType
      !.function
      !function.mFunctionModeList
      !function.mFunctionName
      !function.mFunctionFormalArgumentList
      !returnTypeName:function.mFunctionReturnTypeName
      !function.mFunctionInstructionList
      !function.mEndOfFunctionDeclaration
      !directAccessToPropertiesAllowed:accessProperties
      !propertiesAreMutable:mutating
      !warnIfUnused:warnIfUnused
      !globalFunction:false
      !weakFunction:false
      !registerAccess:.readWriteAccess
      !context:inContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

