#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @structureDeclarationAST : @abstractDeclarationAST {
  @lstring mReceiverTypeName
  @lstring mOmnibusTypeSpecificName
  @lstring mLLVMBaseTypeName
  @lstringlist mAttributeListAST
  @bool mGenerateAssignmentRoutine
  @structurePropertyListAST mStructurePropertyListAST
  @bool mMayImplementDeinit
}

#·······················································································································

list @propertyAttributeList {
  @lstring mAttributeName
  @lbigint mAttributeValue
}

#·······················································································································

enum @propertyKindAST {
  case initializedStoredProperty (@expressionAST initExpression) # declared by "var = ···"
  case uninitializedStoredProperty # declared by "var", no initialization
  case initializedConstantProperty (@expressionAST initExpression) # declared by "let"
  case uninitializedConstantProperty # declared by "let", no initialization
  case readOnlyComputedProperty (@instructionListAST instructionList @location endOfInstructionList)
  case writeComputedProperty (@instructionListAST instructionList @location endOfInstructionList)
}

#·······················································································································

list @structurePropertyListAST {
  @lstring mPropertyName
  @propertyAttributeList mPropertyAttributeList
  @bool mIsPublic
  @lstring mPropertyTypeName
  @propertyKindAST mPropertyKind
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <private_or_public_struct_property_declaration>
    ?!@ast ioAST
    ?!@structurePropertyListAST ioPropertyListAST
  {
    @bool public
    select
      public = false
    or
      $public$
      public = true
    end
    <struct_property_declaration> !?ioAST !public !?ioPropertyListAST
  }
  
  #·····················································································································

  rule <private_struct_property_declaration>
    ?!@ast ioAST
    ?!@structurePropertyListAST ioPropertyListAST
  {
    <struct_property_declaration> !?ioAST !false !?ioPropertyListAST
  }

  #·····················································································································

  rule <struct_property_declaration>
    ?!@ast ioAST
    ?let @bool isPublic
    ?!@structurePropertyListAST ioPropertyListAST
  {
    $let$
    $identifier$ ?let propertyName
    @lstring typeName
    select
      <type_definition> !?ioAST ?typeName
    or
      typeName = ["" nowhere]
    end
    select
      $=$
      <expression> !?ioAST ?let initExpression
      ioPropertyListAST +=
        !propertyName
        !{}
        !isPublic
        !typeName 
        !.initializedConstantProperty{!initExpression:initExpression}
    or
      ioPropertyListAST +=
        !propertyName
        !{}
        !isPublic
        !typeName 
        !.uninitializedConstantProperty
    end
  }

  #·····················································································································

  rule <struct_property_declaration>
    ?!@ast ioAST
    ?let @bool isPublic
    ?!@structurePropertyListAST ioPropertyListAST
  {
    $var$
    $identifier$ ?let propertyName
    @propertyAttributeList propertyAttributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      $integer$ ?let value
      propertyAttributeList += !attribute !value
    end
    select
      <type_definition> !?ioAST  ?let typeName
      select
        ioPropertyListAST += !propertyName !{} !isPublic !typeName !.uninitializedStoredProperty
      or
       <propertyGetterSetter>
         !?ioAST
         !isPublic
         !propertyName
         !propertyAttributeList
         !typeName 
         !?ioPropertyListAST
      or
        $=$
        <expression> !?ioAST ?let initExpression
        ioPropertyListAST +=
          !propertyName
          !propertyAttributeList
          !isPublic
          !typeName 
          !.initializedStoredProperty{!initExpression:initExpression}
      end
    or
      $=$
      <expression> !?ioAST ?let initExpression
      ioPropertyListAST +=
        !propertyName
        !propertyAttributeList
        !isPublic
        !["" nowhere]
        !.initializedStoredProperty{!initExpression:initExpression}
    end
  }

  #·····················································································································

  rule <propertyGetterSetter>
    ?!@ast ioAST
    ?let @bool inIsPublic
    ?let @lstring inPropertyName
    ?let @propertyAttributeList inPropertyAttributeList
    ?let @lstring inTypeName
    ?!@structurePropertyListAST ioPropertyListAST
  {
    ${$  
    select
      var getterDefined = false
      var setterDefined = false
      repeat
        $@attribute$ ?let getterOrSetter
        ${$
        <instructionList> !?ioAST ?let instructionList
        let endOfInstructionList = @location.here
        $}$
        if getterOrSetter.string == "get" then
          ioPropertyListAST +=
            !inPropertyName
            !inPropertyAttributeList
            !inIsPublic
            !inTypeName 
            !.readOnlyComputedProperty{
              !instructionList: instructionList
              !endOfInstructionList: endOfInstructionList
            }
          if getterDefined then
            error getterOrSetter : "duplicate getter definition"
          end
          getterDefined = true
        elsif getterOrSetter.string == "set" then
          ioPropertyListAST +=
            !inPropertyName
            !inPropertyAttributeList
            !inIsPublic
            !inTypeName 
            !.writeComputedProperty{
              !instructionList: instructionList
              !endOfInstructionList: endOfInstructionList
            }
          if setterDefined then
            error getterOrSetter : "duplicate setter definition"
          end
          setterDefined = true
        else
          error getterOrSetter : "invalid attribute" fixit { remove replace "@set" replace "@get" }
        end
      while
      end
      if setterDefined && not getterDefined then
        error .here : "a getter should be defined"
      elsif not setterDefined && not getterDefined then
        error .here : "a getter should be defined, and optionaly a setter"
      end
    or # getter only
      <instructionList> !?ioAST ?let readInstructionList
      let endOfReadInstructionList = @location.here
      ioPropertyListAST +=
        !inPropertyName
        !inPropertyAttributeList
        !inIsPublic
        !inTypeName 
        !.readOnlyComputedProperty{
          !instructionList: readInstructionList
          !endOfInstructionList: endOfReadInstructionList
        }
    end
    $}$
  }
  
  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $struct$
    $\$type$ ?let structureName
    @lstringlist attributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      attributeList += !attribute
    end 
    ${$
    @structurePropertyListAST fieldList = {}
    repeat
    while
      <private_or_public_struct_property_declaration> !?ioAST !?fieldList
    while
      <function_declaration> !?ioAST !receiverTypeName: structureName
    end
    $}$
    ioAST.mDeclarationListAST += !@structureDeclarationAST.new {
      !structureName
      !structureName
      !structureName
      !attributeList
      !true # Generate assignment routine
      !fieldList
      !true
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
#--- Add structure type name as node
  [!?ioGraph addNode !mReceiverTypeName !self]
#--- Add property types
  for (3* fieldTypeName propertyKind) in mStructurePropertyListAST do
    if fieldTypeName.string != "" then
      [!?ioGraph addEdge !mReceiverTypeName !fieldTypeName]
    end
    switch propertyKind
    case uninitializedStoredProperty, uninitializedConstantProperty :
    case initializedStoredProperty (initExpression) :
      [initExpression addDependenceEdgeForStaticExpression !mReceiverTypeName !?ioGraph]
    case initializedConstantProperty (initExpression) :
      [initExpression addDependenceEdgeForStaticExpression !mReceiverTypeName !?ioGraph]
    case readOnlyComputedProperty (instructionList *) :
      [instructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
    case writeComputedProperty (writeInstructionList *) :
      [writeInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
    end
  end
}

#·······················································································································

override getter @structureDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = mReceiverTypeName 
}

#·······················································································································

override getter @structureDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = mReceiverTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @propertyList {
  @string mPropertyName
  @omnibusType mType
}

#·······················································································································

sortedlist @sortedOperandIRList {
  @objectIR mOperand
  @uint mIndex
}{
  mIndex <
}

#·······················································································································

override method @structureDeclarationAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
  ?!@routineListIR unused ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR ioUserLLVMTypeDefinitionListIR
{
#---------------------------------------- Properties
  @propertyList propertyList = {}
  @propertyGetterMap propertyGetterMap = {}
  @propertySetterMap propertySetterMap = {}
  @sortedOperandIRList sortedOperandIRList = {}
  @constructorSignature constructorSignature = {}
  @string constructorKey = "("
  var canBeCopied = true
  for property in mStructurePropertyListAST do
    [property enterPropertyInContext
      !?context:ioContext
      !?staticEntityMap:ioStaticEntityMap
      !receiverTypeName:mReceiverTypeName
      !receiverLLVMBaseTypeName: mLLVMBaseTypeName
      !?ioDecoratedRoutineList
      !?propertyList
      !?propertyGetterMap
      !?propertySetterMap
      !?sortedOperandIRList
      !?constructorSignature
      !?constructorKey
      !?canBeCopied
    ]
  end
  constructorKey += ")"
#---------------------------------------- Constructor map
  @constructorMap constructorMap = {}
  [!?constructorMap insertKey
    !.new {!constructorKey !mReceiverTypeName.location}
    !constructorSignature
    !.structure {!sortedOperandList:sortedOperandIRList}
  ]
#---------------------------------------- Attribute instanciable, copyable
  var typeAttributes = @omnibusTypeAttributes.instanciable
#---------------------------------------- Check structure is copyable
  for (s) in mAttributeListAST do
    if s.string == copyableAttribute () then
      if [typeAttributes copyable] then
        error s : "duplicated attribute"
      elsif not canBeCopied then
        error mReceiverTypeName : "this structure cannot be copied, one field is not copyable"
      end
    else
      error s : "only @copyable attribute is allowed here"
    end
  end
  if mGenerateAssignmentRoutine & canBeCopied then
    typeAttributes = typeAttributes | .copyable
  end
#---------------------------------------- Enter in type map
  let structureType = @omnibusType.new {
    !propertyGetterMap: propertyGetterMap
    !propertySetterMap: propertySetterMap
    !classConstantMap:{}
    !constructorMap:constructorMap
    !subscript:.noSubscript
#    !assignmentSources: if mGenerateAssignmentRoutine & canBeCopied then {!mLLVMBaseTypeName} else {} end
    !attributes:typeAttributes
    !omnibusTypeDescriptionName:mOmnibusTypeSpecificName
    !kind:.structure {!propertyList:propertyList}
    !llvmBaseTypeName:mLLVMBaseTypeName
  }
  [!?ioContext.mTypeMap insertType
    !lkey:mReceiverTypeName
    !type:structureType
  ]
#-------------------------------------------- GenerateLLVM type definition
  ioUserLLVMTypeDefinitionListIR += !@userLLVMSructureTypeDefinitionIR.new {
    ![structureType llvmTypeName]
    !propertyList
  }
}

#·······················································································································

method @structurePropertyListAST-element enterPropertyInContext
  ?!context:@semanticContext ioContext
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?receiverTypeName:let @lstring inReceiverTypeName
  ?receiverLLVMBaseTypeName:let @string inReceiverLLVMBaseTypeName
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
  ?!@propertyList ioPropertyList
  ?!@propertyGetterMap ioPropertyGetterMap
  ?!@propertySetterMap ioPropertySetterMap
  ?!@sortedOperandIRList sortedOperandIRList
  ?!@constructorSignature constructorSignature
  ?!@string ioConstructorKey
  ?!@bool canBeCopied
{
#---------- Attributes
  @lbigint explicitAlignment = .new {!0G !.nowhere}
  var alignmentDefined = false
  for (attribute align) in mPropertyAttributeList do
    if attribute.string != "align" then
      error attribute : "only the @align attribute is allowed here"
    elsif alignmentDefined then
      error attribute : "@align attribute already defined"
    else
    #--- Check alignment is a power of 2
      if align.bigint != (1G << [align.bigint - 1G bitCountForUnsignedRepresentation]) then
        error align : "alignment should be a power of 2"
      else
        explicitAlignment = align
        alignmentDefined = true
      end
    end
  end
#---------- Property type
  let @omnibusType optionalPropertyType = if mPropertyTypeName.string == ""
    then voidType ()
    else [@unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mPropertyTypeName} type]
  end
#---------- Init expression
  switch mPropertyKind
  case initializedConstantProperty (initExpression) :
    computeStaticExpression (
      !?context: ioContext
      !?staticEntityMap:ioStaticEntityMap
      !expression: initExpression
      !errorLocation: mPropertyName.location
      !optionalContextualTypeName: mPropertyTypeName
      ?result:let @objectIR expressionIR
    )
    @omnibusType actualPropertyType
    if optionalPropertyType.kind != .void then
      actualPropertyType = optionalPropertyType
    else
      actualPropertyType = [expressionIR type]
    end
    if not [actualPropertyType instanciable] then
      error mPropertyName : actualPropertyType.omnibusTypeDescriptionName + " type is not instanciable"
    end
    if not [actualPropertyType copyable] then
      canBeCopied = false
    end
   [!?ioPropertyGetterMap insertKey
      !mPropertyName
      !mIsPublic
      !.constantProperty {!value:[expressionIR withType !actualPropertyType]}
    ]
  case initializedStoredProperty (initExpression) :
    computeStaticExpression (
      !?context: ioContext
      !?staticEntityMap:ioStaticEntityMap
      !expression: initExpression
      !errorLocation: mPropertyName.location
      !optionalContextualTypeName: mPropertyTypeName
      ?result:let @objectIR expressionIR
    )
    @omnibusType actualPropertyType
    if optionalPropertyType.kind != .void then
      actualPropertyType = optionalPropertyType
    else
      actualPropertyType = [expressionIR type]
    end
    if not [actualPropertyType instanciable] then
      error mPropertyName : actualPropertyType.omnibusTypeDescriptionName + " type is not instanciable"
    end
    if not [actualPropertyType copyable] then
      canBeCopied = false
    end
    let propertyIndex = [ioPropertyList length]
    ioPropertyList += !mPropertyName.string !actualPropertyType
    [!?ioPropertyGetterMap insertKey
      !mPropertyName
      !mIsPublic
      !.storedProperty{!type:actualPropertyType !index:propertyIndex}
    ]
    [!?ioPropertySetterMap insertKey
      !mPropertyName
      !mIsPublic
      !.storedProperty{!type:actualPropertyType !index:propertyIndex}
    ]
    sortedOperandIRList += ![expressionIR withType !actualPropertyType] !propertyIndex
  case uninitializedStoredProperty :
    if not [optionalPropertyType instanciable] then
      error mPropertyName : optionalPropertyType.omnibusTypeDescriptionName + " type is not instanciable"
    end
    let propertyIndex = [ioPropertyList length]
    ioPropertyList += !mPropertyName.string !optionalPropertyType
    [!?ioPropertyGetterMap insertKey
      !mPropertyName
      !mIsPublic
      !.storedProperty{!type: optionalPropertyType!index:propertyIndex}
    ]
    [!?ioPropertySetterMap insertKey
      !mPropertyName
      !mIsPublic
      !.storedProperty{!type:optionalPropertyType !index:propertyIndex}
    ]
    constructorSignature += !mPropertyName.string !optionalPropertyType !propertyIndex
    ioConstructorKey += "!" + mPropertyName
  case uninitializedConstantProperty :
    if not [optionalPropertyType instanciable] then
      error mPropertyName : optionalPropertyType.omnibusTypeDescriptionName + " type is not instanciable"
    end
    let propertyIndex = [ioPropertyList length]
    ioPropertyList += !mPropertyName.string !optionalPropertyType
    [!?ioPropertyGetterMap insertKey
      !mPropertyName
      !mIsPublic
      !.storedProperty{!type: optionalPropertyType!index:propertyIndex}
    ]
    constructorSignature += !mPropertyName.string !optionalPropertyType !propertyIndex
    ioConstructorKey += "!" + mPropertyName
  case readOnlyComputedProperty (instructionList endOfInstructionList) :
    if not [optionalPropertyType instanciable] then
      error mPropertyName : optionalPropertyType.omnibusTypeDescriptionName + " type is not instanciable"
    end
    let llvmRoutineName = getterLLVMName (!inReceiverLLVMBaseTypeName !mPropertyName)
    let modeDictionary = [@mode.anyMode routineLLVMDictionaryForFunction !llvmRoutineName]
    [!?ioPropertyGetterMap insertKey
      !mPropertyName
      !mIsPublic
      !.computedProperty{
        !typeProxy: @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mPropertyTypeName}
        !modeDictionary:modeDictionary
      }
    ]
    let functionLLVMName = @lstring.new {
      !llvmRoutineName
      !mPropertyName.location
    }
    ioDecoratedRoutineList +=
      !receiverTypeName: inReceiverTypeName
      !mode:.anyMode
      !isRequired: false
      !routineKind: .function
      !warnIfUnused: false
      !exportedRoutine: false
      !routineAttributes: .none
      !routineMangledLLVMName: functionLLVMName
      !formalArgumentList: {}
      !warningOnUnusedArgs: false 
      !instructionList
      !endOfInstructionList
      !returnTypeName: mPropertyTypeName
  case writeComputedProperty (writeInstructionList endOfWriteInstructionList) :
    if not [optionalPropertyType instanciable] then
      error mPropertyName : optionalPropertyType.omnibusTypeDescriptionName + " type is not instanciable"
    end
    let llvmGetterRoutineName = getterLLVMName (!inReceiverLLVMBaseTypeName !mPropertyName)
    let getterModeDictionary = [@mode.anyMode routineLLVMDictionaryForFunction !llvmGetterRoutineName]
    let llvmSetterRoutineName = setterLLVMName (!inReceiverLLVMBaseTypeName !mPropertyName)
    let setterModeDictionary = [@mode.anyMode routineLLVMDictionaryForFunction !llvmSetterRoutineName]
    [!?ioPropertySetterMap insertKey
      !mPropertyName
      !mIsPublic
      !.computedProperty {
        !typeProxy: @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mPropertyTypeName}
        !getterModeDictionary: getterModeDictionary
        !setterModeDictionary: setterModeDictionary
      }
    ]
    let functionLLVMName = @lstring.new {
      !llvmSetterRoutineName
      !mPropertyName.location
    }
    let @routineFormalArgumentListAST formalArgumentList = {
      !.input
      !["" nowhere]
      !mPropertyTypeName
      !.new {!"newValue" !endOfWriteInstructionList}
    }
    ioDecoratedRoutineList +=
      !receiverTypeName: inReceiverTypeName
      !mode:.anyMode
      !isRequired: false
      !routineKind: .function
      !warnIfUnused: false
      !exportedRoutine: false
      !routineAttributes: .mutating
      !routineMangledLLVMName: functionLLVMName
      !formalArgumentList: formalArgumentList
      !warningOnUnusedArgs: false 
      !writeInstructionList
      !endOfWriteInstructionList
      !returnTypeName: ["" nowhere]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! USER LLVM TYPE DEFINITION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @userLLVMSructureTypeDefinitionIR : @userLLVMTypeDefinitionIR {
  @propertyList mPropertyList
}

#·······················································································································

override method @userLLVMSructureTypeDefinitionIR generateLLVMType ?!@string ioLLVMcode {
  ioLLVMcode += mLLVMDefinedTypeName + " = type {"
  for () in mPropertyList
    do ioLLVMcode += [mType llvmTypeName]
    between ioLLVMcode += ", "
  end
  ioLLVMcode += "}\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION: ASSIGNMENT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#class @structureTypeAssignFunctionIR : @abstractRoutineIR {
#  @omnibusType mStructureType
#}

#·······················································································································

#override method @structureTypeAssignFunctionIR llvmCodeGeneration 
#  ?!@string ioLLVMcode
#  ?let @generationContext unused inGenerationContext
#  ?!@generationAdds ioGenerationAdds
#{
#  let arcAssignmentList = [mStructureType arcList !{}]
#  let structureTypeLLVMTypeName = [mStructureType llvmTypeName]
#  ioLLVMcode += "define internal void @" + [mRoutineMangledName assemblerRepresentation]
#  ioLLVMcode += " (" + structureTypeLLVMTypeName + " * %inTarget, "
#  ioLLVMcode += structureTypeLLVMTypeName + "* %inSource) nounwind optsize {\n"
#  ioLLVMcode += ";--- Handle ARC properties\n"
#  for (propertyName propertyType indexPath) in arcAssignmentList do
#    let propertyTypeLLVMName = [propertyType llvmTypeName]
#    let llvmVarName = "%arc.retain." + [propertyName assemblerRepresentation] + ioGenerationAdds.mUniqueIndex
#    ioGenerationAdds.mUniqueIndex ++
#    ioLLVMcode += "  " + llvmVarName + " = getelementptr inbounds " + structureTypeLLVMTypeName + ", " + structureTypeLLVMTypeName + "* %inSource, i32 0"
#    for (idx) in indexPath do
#      ioLLVMcode += ", i32 " + idx
#    end
#    ioLLVMcode += " ; " + propertyName + "\n"
#    let llvmLoadedVarName = llvmVarName + ".loaded"
#    ioLLVMcode += "  " + llvmLoadedVarName + " = load " + propertyTypeLLVMName + ", " + propertyTypeLLVMName + "* " + llvmVarName + "\n" 
#    ioLLVMcode += "  call void @arc.retain (" + propertyTypeLLVMName + " " + llvmLoadedVarName + ")\n" 
#  end
#  for (propertyName propertyType indexPath) in arcAssignmentList do
#    let llvmVarName = "%arc.release." + [propertyName assemblerRepresentation] + ioGenerationAdds.mUniqueIndex
#    ioGenerationAdds.mUniqueIndex ++
#    ioLLVMcode += "  " + llvmVarName + " = getelementptr inbounds " + structureTypeLLVMTypeName + ", " + structureTypeLLVMTypeName + "* %inTarget, i32 0"
#    for (idx) in indexPath do
#      ioLLVMcode += ", i32 " + idx
#    end
#    ioLLVMcode += " ; " + propertyName + "\n"
#    let propertyTypeLLVMName = [propertyType llvmTypeName]
#    let llvmLoadedVarName = llvmVarName + ".loaded"
#    ioLLVMcode += "  " + llvmLoadedVarName + " = load " + propertyTypeLLVMName + ", " + propertyTypeLLVMName + "* " + llvmVarName + "\n" 
#    ioLLVMcode += "  call void @arc.release (" + propertyTypeLLVMName + " " + llvmLoadedVarName + ")\n" 
#  end
#  ioLLVMcode += ";--- Compute type size\n"
#  ioLLVMcode += "  %sizeAsPtr = getelementptr inbounds " + structureTypeLLVMTypeName + ", " + structureTypeLLVMTypeName + "* null, i32 1\n"
#  ioLLVMcode += "  %byteCount = ptrtoint " + structureTypeLLVMTypeName + "* %sizeAsPtr to i32\n"
#  ioLLVMcode += "  %useLoadStore = icmp ule i32 %byteCount, 12\n"
#  ioLLVMcode += "  br i1 %useLoadStore, label %loadStore, label %copyBytesOrCopyWords\n"
#  ioLLVMcode += ";--- Copy\n"
#  ioLLVMcode += "loadStore:\n"
#  ioLLVMcode += "  %v = load " + structureTypeLLVMTypeName + ", " + structureTypeLLVMTypeName + "* %inSource\n" 
#  ioLLVMcode += "  store " + structureTypeLLVMTypeName + " %v, " + structureTypeLLVMTypeName + "* %inTarget\n" 
#  ioLLVMcode += "  br label %copy.end\n"
#  ioLLVMcode += "copyBytesOrCopyWords:\n"
#  ioLLVMcode += "  %byteCountAnd3 = and i32 %byteCount, 3\n"
#  ioLLVMcode += "  %byteCountIsMutipleOf4 = icmp eq i32 %byteCountAnd3, 0\n"
#  ioLLVMcode += "  br i1 %byteCountIsMutipleOf4, label %testTarget, label %copyBytes\n"
#  ioLLVMcode += "testTarget:\n"
#  ioLLVMcode += "  %targetAsUnsigned = ptrtoint " + structureTypeLLVMTypeName + "* %inTarget to i32\n"
#  ioLLVMcode += "  %targetAsUnsignedAnd3 = and i32 %targetAsUnsigned, 3\n"
#  ioLLVMcode += "  %targetAsUnsignedIsMutipleOf4 = icmp eq i32%targetAsUnsignedAnd3, 0\n"
#  ioLLVMcode += "  br i1 %targetAsUnsignedIsMutipleOf4, label %testSource, label %copyBytes\n"
#  ioLLVMcode += "testSource:\n"
#  ioLLVMcode += "  %sourceAsUnsigned = ptrtoint " + structureTypeLLVMTypeName + "* %inSource to i32\n"
#  ioLLVMcode += "  %sourceAsUnsignedAnd3 = and i32 %sourceAsUnsigned, 3\n"
#  ioLLVMcode += "  %sourceAsUnsignedIsMutipleOf4 = icmp eq i32 %sourceAsUnsignedAnd3, 0\n"
#  ioLLVMcode += "  br i1 %targetAsUnsignedIsMutipleOf4, label %copyWords, label %copyBytes\n"
#  ioLLVMcode += "copyWords:\n"
#  ioLLVMcode += "  %target32 = bitcast " + structureTypeLLVMTypeName + "* %inTarget to i32*\n"
#  ioLLVMcode += "  %source32 = bitcast " + structureTypeLLVMTypeName + "* %inSource to i32*\n"
#  ioLLVMcode += "  %temp = add i32 %byteCount, 3\n"
#  ioLLVMcode += "  %wordCount = udiv i32 %temp, 4\n"
#  ioLLVMcode += "  br label %copyWords.loop\n"
#  ioLLVMcode += "copyWords.loop:\n"
#  ioLLVMcode += "  call void @copy.word.array (i32* %target32, i32* %source32, i32 %wordCount)\n"
#  ioLLVMcode += "  br label %copy.end\n"
#  ioLLVMcode += "copyBytes:\n"
#  ioLLVMcode += "  %target8 = bitcast " + structureTypeLLVMTypeName + "* %inTarget to i8*\n"
#  ioLLVMcode += "  %source8 = bitcast " + structureTypeLLVMTypeName + "* %inSource to i8*\n"
#  ioLLVMcode += "  call void @copy.byte.array (i8* %target8, i8* %source8, i32 %byteCount)\n"
#  ioLLVMcode += "  br label %copy.end\n"
#  ioLLVMcode += "copy.end:\n"
#  ioLLVMcode += "  ret void\n"
#  ioLLVMcode += "}\n\n"
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
