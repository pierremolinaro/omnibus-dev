#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @structureDeclarationAST : @abstractDeclarationAST {
  @lstring mStructureName
  @lstringlist mAttributeListAST
  @bool mGenerateAssignmentRoutine
  @structurePropertyListAST mStructurePropertyListAST
  @functionDeclarationListAST mFunctionDeclarationListAST
  @systemRoutineDeclarationListAST mSystemRoutineListAST
  @guardDeclarationListAST mGuardListAST
  @bool mMayImplementDeinit
}

#·······················································································································

enum @structurePropertyInitOptionalExpressionAST {
  case expression (@expressionAST initExpression)
  case noExpression
}

#·······················································································································

list @propertyAttributeList {
  @lstring mAttributeName
  @lbigint mAttributeValue
}

#·······················································································································

list @structurePropertyListAST {
  @lstring mPropertyName
  @propertyAttributeList mPropertyAttributeList
  @bool mIsConstant # declared by "let" --> true, declared by "var" --> false
  @bool mIsPublic
  @lstring mPropertyTypeName
  @structurePropertyInitOptionalExpressionAST mInitialisation
  @bool mIsSingletonObject # true, this property is an automomous variable (reserved to driver)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <private_or_public_struct_property_declaration>
    ?!@ast ioAST
    ?!@structurePropertyListAST ioFieldListAST
    ?singletonObject:let @bool isSingletonObject
  {
    @bool public
    select
      public = false
    or
      $public$
      public = true
    end
    <struct_property_declaration> !?ioAST !public !?ioFieldListAST !isSingletonObject
  }
  
  #·····················································································································

  rule <private_struct_property_declaration>
    ?!@ast ioAST
    ?!@structurePropertyListAST ioFieldListAST
    ?let @bool isSingletonObject
  {
    <struct_property_declaration> !?ioAST !false !?ioFieldListAST !isSingletonObject
  }

  #·····················································································································

  rule <struct_property_declaration>
    ?!@ast ioAST
    ?let @bool isPublic
    ?!@structurePropertyListAST ioFieldListAST
    ?let @bool isSingletonObject
{
    @bool constant
    select
      $var$
      constant = false
    or
      $let$
      constant = true
    end
    $identifier$ ?let fieldName
    select
      <type_definition> !?ioAST  ?let typeName
      select
        ioFieldListAST += !fieldName !{} !constant !isPublic !typeName !.noExpression !isSingletonObject
      or
        $=$
        <expression> !?ioAST ?let initExpression
        ioFieldListAST +=
          !fieldName
          !{}
          !constant
          !isPublic
          !typeName 
          !.expression{!initExpression:initExpression}
          !isSingletonObject
      end
    or
      $=$
      <expression> !?ioAST ?let initExpression
      ioFieldListAST +=
        !fieldName
        !{}
        !constant
        !isPublic
        !["" nowhere]
        !.expression{!initExpression:initExpression}
        !isSingletonObject
    end
  }

 #·····················································································································

  rule <structure_function> ?!@ast ioAST ?!@functionDeclarationListAST ioProcListAST {
    @bool public
    select
      public = false
    or
      $public$
      public = true
    end
    $func$
    $identifier$ ?let procName
    @lstringlist attributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      attributeList += !attribute
    end
    <procedure_formal_arguments>  !?ioAST ?let procFormalArgumentList
    @lstring returnTypeName
    select
      returnTypeName = ["" here]
    or
      $->$
      <type_definition>!?ioAST  ?returnTypeName
    end
    ${$
    <instructionList> !?ioAST ?let instructionList
    ioProcListAST +=
      !.anyMode
      !public
      !procName
      !attributeList
      !procFormalArgumentList
      !returnTypeName
      !instructionList
      !.here
    $}$
  }

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $struct$
    $\$type$ ?let structureName
    @lstringlist attributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      attributeList += !attribute
    end 
    ${$
    @functionDeclarationListAST procedureDeclarationListAST = {}
    @structurePropertyListAST fieldList = {}
    repeat
    while
      <private_or_public_struct_property_declaration> !?ioAST !?fieldList !singletonObject:false
    while
      <structure_function> !?ioAST !?procedureDeclarationListAST
    while
      $;$
    end
    $}$
    ioAST.mDeclarationListAST += !@structureDeclarationAST.new {
      !structureName
      !attributeList
      !true # Generate assignment routine
      !fieldList
      !procedureDeclarationListAST
      !{}
      !{}
      !true
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclarationAST addExtension
  ?!@extensionDeclarationListAST ioExtensionDeclarationListAST
  ?!@extendStaticArrayDeclarationAST unused ioExtendStaticArrayDeclarationAST
  !@abstractDeclarationAST outNewDeclaration
{
  @structureDeclarationAST newDeclaration = self
  let currentExtensionDeclarationListAST = ioExtensionDeclarationListAST
  ioExtensionDeclarationListAST = {}
  for (typeName functions properties svcs guards) in currentExtensionDeclarationListAST do
    if mStructureName.string == typeName.string then
      newDeclaration = .new {
        !newDeclaration.mStructureName
        !newDeclaration.mAttributeListAST
        !newDeclaration.mGenerateAssignmentRoutine
        !newDeclaration.mStructurePropertyListAST + properties
        !newDeclaration.mFunctionDeclarationListAST + functions
        !newDeclaration.mSystemRoutineListAST + svcs
        !newDeclaration.mGuardListAST + guards
        !newDeclaration.mMayImplementDeinit   
      }
    else
      ioExtensionDeclarationListAST += !typeName !functions !properties !svcs !guards
    end
  end
  outNewDeclaration = newDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  let structureTypeName = llvmTypeNameFromPLMname (!mStructureName)
#--- Add structure type name as node
  [!?ioGraph addNode !structureTypeName !self]
#--- Add property types
  for (4* fieldTypeName initExpression *) in mStructurePropertyListAST do
    if fieldTypeName.string != "" then
      let typeName = llvmTypeNameFromPLMname (!fieldTypeName)
      [!?ioGraph addEdge !structureTypeName !typeName]
    end
    switch initExpression
    case noExpression :
    case expression (initExpression) :
      [initExpression addDependenceEdgeForStaticExpression !structureTypeName !?ioGraph]
    end
  end
#--- Add structure functions
  for () in mFunctionDeclarationListAST do
    for (* * formalArgumentTypeName *) in mFunctionFormalArgumentList do
      let typeName = llvmTypeNameFromPLMname (!formalArgumentTypeName)
      [!?ioGraph noteNode !typeName]
    end
    if mFunctionReturnTypeName.string != "" then
      let typeName = llvmTypeNameFromPLMname (!mFunctionReturnTypeName)
      [!?ioGraph noteNode !typeName]
    end
    [mFunctionInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
#--- Add structure services, section, primitives and guards
  [mSystemRoutineListAST noteTypesInPrecedenceGraph !?ioGraph]
  [mGuardListAST noteTypesInPrecedenceGraph !?ioGraph]
}

#·······················································································································

override getter @structureDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "struct $" + mStructureName 
}

#·······················································································································

override getter @structureDeclarationAST location -> @location outLocation {
  outLocation = mStructureName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @propertyList {
  @string mPropertyName
  @PLMType mType
}

#·······················································································································

sortedlist @sortedOperandIRList {
  @objectIR mOperand
  @uint mIndex
}{
  mIndex <
}

#·······················································································································

sortedlist @globalVariableIRList {
  @string mLLVMVariable
  @objectIR mExpression
  @uint mAlignment
}{
  mAlignment >
}

#·······················································································································

override method @structureDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@subprogramInvocationGraph unused ioSubprogramInvocationGraph
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!globalVariables:@globalVariableIRList ioGlobalVariableIRList
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
{
#---------------------------------------- Properties
  @propertyList propertyList = {}
  @propertyMap propertyMap = {}
  @sortedOperandIRList sortedOperandIRList = {}
  @constructorSignature constructorSignature = {}
  @string constructorKey = "("
  var canBeCopied = true
  for property in mStructurePropertyListAST do
    [property enterPropertyInContext
      !mStructureName
      !?context:ioContext
      !?staticEntityMap:ioStaticEntityMap
      !?propertyList
      !?propertyMap
      !?sortedOperandIRList
      !?constructorSignature
      !?constructorKey
      !?canBeCopied
      !?ioGlobalVariableIRList
    ]
  end
  constructorKey += ")"
#---------------------------------------- Constructor map
  @constructorMap constructorMap = {}
  [!?constructorMap insertKey
    !.new {!constructorKey !mStructureName.location}
    !constructorSignature
    !.structure {!sortedOperandList:sortedOperandIRList}
  ]
#---------------------------------------- Attribute "generateAssignmentRoutine"
  var typeAttributes = @PLMTypeAttributes.instanciable
  if mGenerateAssignmentRoutine then
    typeAttributes = typeAttributes | .generateAssignmentRoutine
  end
#---------------------------------------- Attribute "copyable"
  for (s) in mAttributeListAST do
    if s.string == copyableAttribute () then
      if [typeAttributes copyable] then
        error s : "duplicated attribute"
      elsif not canBeCopied then
        error mStructureName : "this structure cannot be copied, one field is not copyable"
      else
        typeAttributes = typeAttributes | .copyable
      end
    else
      error s : "only @copyable attribute is allowed here"
    end
  end
#---------------------------------------- Enter functions in property map
  [mFunctionDeclarationListAST enterFunctionsInPropertyMap !?context:ioContext !?propertyMap]
#---------------------------------------- Enter system routines in property map
  for system in mSystemRoutineListAST do
  #--- Attributes
    @stringset attributeSet = {}
    for attribute in system.mAttributeList do
      attributeSet += !attribute.mValue.string
    end
    let exportedRoutine = [attributeSet hasKey !exportedAttribute ()]
    let canMutateProperties = [attributeSet hasKey !mutatingAttribute ()]
  #--- Routine mangled name
    let routineMangledName = routineMangledNameFromAST (
      !"" # mStructureName 
      !system.mName
      !system.mFormalArgumentList
    )
  #--- Signature
    routineSignature (!?ioContext.mTypeMap !system.mFormalArgumentList ?let signature)
  #--- Return type
    [@unifiedTypeMap-proxy makeOptionalProxy !?ioContext.mTypeMap !system.mReturnTypeName ?let returnTypeProxy]
  #--- Attributes
    var mutating = false
    var safe = false
    for (attribute) in system.mAttributeList do
      if attribute.string == mutatingAttribute () then
        mutating = true    
      elsif attribute.string == safeAttribute () then
        safe = true    
      end
    end
  #--- Routine descriptor
    let descriptor = @routineDescriptor.new {
      !isPublic:system.mPublic
      !exported:exportedRoutine
      !name:system.mName
      !routineKind:system.mRoutineKind
      !signature:signature
      !returnTypeProxy:returnTypeProxy
      !canAccessProperties:true
      !canMutateProperties:canMutateProperties
      !safe:safe
    }
  #--- Enter in structure map
    [!?propertyMap insertKey !routineMangledName !system.mPublic !.nonVirtualMethod {!descriptor:descriptor}]
  end
#---------------------------------------- Enter guards in guard map
  @guardMapForContext guardMap = {}
  for guard in mGuardListAST do
  #--- Guard mangled name
    let guardMangledName = routineMangledNameFromAST (
      !"" 
      !guard.mGuardName
      !guard.mGuardFormalArgumentList
    )
  #--- Signature
    routineSignature (!?ioContext.mTypeMap !guard.mGuardFormalArgumentList ?let signature)
  #--- Enter in context
    [!?guardMap insertKey
      !guardMangledName
      !guard.mIsPublic
      !signature
    ]
  end
#---------------------------------------- Enter in type map
  let structureType = @PLMType.new {
    !propertyMap:propertyMap
    !classConstantMap:{}
    !constructorMap:constructorMap
    !guardMap:guardMap
    !attributes:typeAttributes
    !plmOriginalTypeName:mStructureName
    !kind:.structure {!propertyList:propertyList}
    !plmAliasedTypeName:mStructureName
  }
  [!?ioContext.mTypeMap insertType
    !lkey:mStructureName
    !type:structureType
    !index:[ioContext.mTypeMap count]
  ]
#---------------- Add decorated declaration
  ioDecoratedDeclarationList += !@decoratedStructureDeclaration.new {
    !mStructureName
    !mFunctionDeclarationListAST
    !mSystemRoutineListAST
    !mGuardListAST
    !mMayImplementDeinit
  }
}

#·······················································································································

method @structurePropertyListAST-element enterPropertyInContext
  ?let @lstring inStructureName
  ?!context:@semanticContext ioContext
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!@propertyList ioPropertyList
  ?!@propertyMap ioPropertyMap
  ?!@sortedOperandIRList sortedOperandIRList
  ?!@constructorSignature constructorSignature
  ?!@string ioConstructorKey
  ?!@bool canBeCopied
  ?!@globalVariableIRList ioGlobalVariableIRList
{
#---------- Attributes
  @lbigint explicitAlignment = .new {!0G !.nowhere}
  var alignmentDefined = false
  for (attribute align) in mPropertyAttributeList do
    if attribute.string != "align" then
      error attribute : "only the @align attribute is allowed here"
    elsif alignmentDefined then
      error attribute : "@align attribute already defined"
    else
    #--- Check alignment is a power of 2
      if align.bigint != (1G << [align.bigint - 1G bitCountForUnsignedRepresentation]) then
        error align : "alignment should be a power of 2"
      else
        explicitAlignment = align
        alignmentDefined = true
      end
    end
  end
#---------- Property type
  let @PLMType optionalPropertyType = if mPropertyTypeName.string == ""
    then voidType ()
    else [@unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mPropertyTypeName} type]
  end
#---------- Init expression
  switch mInitialisation
  case expression (initExpression) :
    [initExpression analyzeExpression
      !self:voidType ()
      !routineAttributes:.none
      !routineNameForInvocationGraph:.new {!inStructureName.string + " init" !inStructureName.location}
      !optionalTargetType:optionalPropertyType
      !context:ioContext
      !mode:.bootMode
      !?temporary:*
      !?staticEntityMap:ioStaticEntityMap
      !?variableMap:ioContext.mValuedObjectMap
      !?alloca:*
      !?instructionListIR:*
      ?result:let @objectIR expressionIR
    ]
    if not [expressionIR isStatic] then
      error mPropertyName : "initialization expression cannot be computed statically"
    end
    @PLMType actualPropertyType
    if optionalPropertyType.kind != .void then
      actualPropertyType = optionalPropertyType
    else
      actualPropertyType = [expressionIR type]
    end
    if not [actualPropertyType instanciable] then
      error mPropertyName : "$" + actualPropertyType.plmOriginalTypeName + " type is not instanciable"
    end
    if not [actualPropertyType copyable] then
      canBeCopied = false
    end
    if mIsConstant then
     [!?ioPropertyMap insertKey
        !mPropertyName
        !mIsPublic
        !.constantProperty {!value:[expressionIR withType !actualPropertyType]}
      ]
    elsif mIsSingletonObject then
      var alignment = [actualPropertyType defaultAlignment]
      if alignmentDefined then
        if [explicitAlignment.bigint uint] < alignment then
          error explicitAlignment : "minimum alignment for this property is " + alignment
        else
          alignment = [explicitAlignment.bigint uint]
        end
      end
      let name = @lstring.new {!inStructureName.string + "." + mPropertyName !mPropertyName}
      let llvmName = llvmNameForGlobalVariable (!name)
      let object = @objectIR.reference {!type:actualPropertyType !llvmName:llvmName}
      [!?ioPropertyMap insertKey
        !mPropertyName
        !mIsPublic
        !.singleton {!object:object !errorLocation:mPropertyName}
      ]
      ioGlobalVariableIRList += !llvmName ![expressionIR withType !actualPropertyType] !alignment
    else
      let propertyIndex = [ioPropertyList length]
      ioPropertyList += !mPropertyName.string !actualPropertyType
      [!?ioPropertyMap insertKey
        !mPropertyName
        !mIsPublic
        !.indexed{!type:actualPropertyType !index:propertyIndex}
      ]
      sortedOperandIRList += ![expressionIR withType !actualPropertyType] !propertyIndex
    end
  case noExpression :
    if not [optionalPropertyType instanciable] then
      error mPropertyName : "$" + optionalPropertyType.plmOriginalTypeName + " type is not instanciable"
    end
    let propertyIndex = [ioPropertyList length]
    ioPropertyList += !mPropertyName.string !optionalPropertyType
    [!?ioPropertyMap insertKey
      !mPropertyName
      !mIsPublic
      !.indexed{!type: optionalPropertyType!index:propertyIndex}
    ]
    constructorSignature += !mPropertyName.string !optionalPropertyType !propertyIndex
    ioConstructorKey += "!" + mPropertyName
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @decoratedStructureDeclaration : @abstractDecoratedDeclaration {
  @lstring mStructureName
  @functionDeclarationListAST mFunctionDeclarationListAST
  @systemRoutineDeclarationListAST mSystemRoutineListAST
  @guardDeclarationListAST mGuardListAST
  @bool mMayImplementDeinit
}

#·······················································································································

override method @decoratedStructureDeclaration semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  let structureType = [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mStructureName} type]
#----------- Analyze functions
  [self functionSemanticAnalysis
    !structureType:structureType
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
  ]
#----------- Analyze system routines
  [mSystemRoutineListAST systemRoutineSemanticAnalysis
    !receiverType:structureType
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
  ]
#----------- Analyze guards
  [mGuardListAST guardSemanticAnalysis
    !receiverType:structureType
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
  ]
#----------- Generate enumeration specific code
  if mMayImplementDeinit && [structureType deinitNeeded]  then
    ioIntermediateCodeStruct.mGenerationListIR += !@structureIR.new {!structureType !inContext.mTargetParameters.mPointerSize}
  end
}

#·······················································································································

method @decoratedStructureDeclaration functionSemanticAnalysis
  ?structureType:let @PLMType inStructureType
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  for function in mFunctionDeclarationListAST do
    var warnIfUnused = true
    var functionAttributes = @routineAttributes.panicAllowed | .controlRegisterReadable
    for (attribute) in function.mFunctionAttributeList do
      if attribute.string == noUnusedWarningAttribute () then
        if not warnIfUnused then
          error attribute : "duplicated @" + noUnusedWarningAttribute () + " attribute"
        end
        warnIfUnused = false    
      elsif attribute.string == userAccessAttribute () then
        if [functionAttributes directPropertyAccess] then
          error attribute : "duplicated @" + userAccessAttribute () + " attribute"
        end
        functionAttributes = functionAttributes | .directPropertyAccess   
      elsif attribute.string == safeAttribute () then
        if not [functionAttributes panicAllowed] then
          error attribute : "duplicated @" + safeAttribute () + " attribute"
        end
        functionAttributes = functionAttributes - .panicAllowed   
      elsif attribute.string == mutatingAttribute () then
        if [functionAttributes mutating] then
          error attribute : "duplicated @" + mutatingAttribute () + " attribute"
        end
        functionAttributes = functionAttributes | .mutating    
      else
        error attribute : "unknown attribute; available attributes are @" + noUnusedWarningAttribute ()
          + ", @" + mutatingAttribute () + " and @" + userAccessAttribute ()
      end
    end
#    accessProperties = function.mMode != .userMode
    routineSemanticAnalysis (
      !receiverType:inStructureType
      !.function {!executionMode:function.mMode}
      !function.mMode
      !function.mFunctionName
      !function.mFunctionFormalArgumentList
      !returnTypeName:function.mFunctionReturnTypeName
      !function.mFunctionInstructionList
      !function.mEndOfFunctionDeclaration
      !routineAttributes:functionAttributes
      !warnIfUnused:warnIfUnused
      !globalFunction:false
      !context:inContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION: DEINIT                                                                                                   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @structureIR : @abstractGenerationIR {
  @PLMType mStructureType
  @uint mPointerSize
}

#·······················································································································

override method @structureIR generateLLVMcode ?!@string ioLLVMcode ?!@generationAdds ioGenerationAdds {
  let llvmTypeName = [mStructureType llvmTypeName]
  let deinitName = "@deinit." + [[mStructureType plmOriginalTypeName] assemblerRepresentation]
  ioLLVMcode += llvmTitleComment (!deinitName)
  ioLLVMcode += "define internal void " + deinitName + " (i" + mPointerSize + " %inPointer) nounwind {\n"
  let arg = "ptr"
  ioLLVMcode += "  " + llvmNameForLocalVariable (!arg) + " = inttoptr i" + mPointerSize + " %inPointer to " + llvmTypeName + "*\n"
  [mStructureType generateRelease !arg !?ioLLVMcode !?ioGenerationAdds]
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

