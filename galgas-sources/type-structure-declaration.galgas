#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @structureDeclaration : @abstractDeclaration {
  @lstring mStructureName
  @lstringlist mAttributeListAST
  @structureFieldListAST mStructureFieldListAST
  @procedureDeclarationListAST mProcedureDeclarationListAST
  @functionDeclarationListAST mFunctionDeclarationListAST
  @serviceDeclarationListAST mServiceListAST
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @structureDeclaration location -> @location outLocation {
  outLocation = mStructureName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @structureVarInit {
  case expression (@expressionAST initExpression)
  case noExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @structureFieldListAST {
  @lstring mFieldName
  @lstring mFieldTypeName
  @structureVarInit mInitialisation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $struct$
    $typeName$ ?let structureName
    @lstringlist attributeList = {}
    repeat
    while
      $attribute$ ?let attribute
      attributeList += !attribute
    end 
    ${$
    @procedureDeclarationListAST procedureDeclarationListAST = {}
    @structureFieldListAST fieldList = {}
    @functionDeclarationListAST functionDeclarationListAST = {}
    @serviceDeclarationListAST serviceListAST = {}
    repeat
    while
      $var$
      $identifier$ ?let fieldName
      @lstring typeName
      select
        $typeName$ ?typeName
      or
        typeName = ["" nowhere]
      end
      $=$
      <expression> ?let initExpression
      fieldList += !fieldName !typeName !.expression{!initExpression:initExpression}
    while
      $var$
      $identifier$ ?let fieldName
      $typeName$ ?let typeName
      fieldList += !fieldName !typeName !.noExpression
    while
      <procedure> !?procedureDeclarationListAST
    while
      <service> !?serviceListAST
    while
      $func$
      <function_declaration> !?functionDeclarationListAST
    while
      $;$
    end
    $}$
    ioAST.mDeclarationList += !@structureDeclaration.new {
      !structureName
      !attributeList
      !fieldList
      !procedureDeclarationListAST
      !functionDeclarationListAST
      !serviceListAST
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration addExtension
  ?!@extensionDeclarationListAST ioExtensionDeclarationListAST
  !@abstractDeclaration outNewDeclaration
{
  @structureDeclaration newDeclaration = self
  let currentExtensionDeclarationListAST = ioExtensionDeclarationListAST
  ioExtensionDeclarationListAST = {}
  for (typeName procedures fieldList functions) in currentExtensionDeclarationListAST do
    if mStructureName.string == typeName.string then
      newDeclaration = .new {
        ![newDeclaration mStructureName]
        ![newDeclaration mAttributeListAST]
        ![newDeclaration mStructureFieldListAST] + fieldList
        ![newDeclaration mProcedureDeclarationListAST] + procedures
        ![newDeclaration mFunctionDeclarationListAST] + functions
        ![newDeclaration mServiceListAST]
      }
    else
      ioExtensionDeclarationListAST += !typeName !procedures !fieldList !functions
    end
  end
  outNewDeclaration = newDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  let structureTypeName = @lstring.new {!"$" + mStructureName !mStructureName.location}
#--- Add structure type name as node
  [!?ioGraph addNode !structureTypeName !self]
#--- add field types
  for (* fieldTypeName initExpression) in mStructureFieldListAST do
    if fieldTypeName.string != "" then
      let typeName = @lstring.new {!"$" + fieldTypeName !fieldTypeName.location}
      [!?ioGraph addEdge !structureTypeName !typeName]
      switch initExpression
      case noExpression :
      case expression (initExpression) :
        [initExpression addDependenceEdgeForStaticExpression !structureTypeName !?ioGraph]
      end
    end
  end
#--- Add structure procedures
  for () in mProcedureDeclarationListAST do
    for (* * formalArgumentTypeName *) in mProcedureFormalArgumentList do
      let typeName = @lstring.new {!"$" + formalArgumentTypeName !formalArgumentTypeName.location}
      [!?ioGraph noteNode !typeName]
    end
    [mProcedureInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
#--- Add structure functions
  for () in mFunctionDeclarationListAST do
    for (* formalArgumentTypeName *) in mFuncFormalArgumentList do
      let typeName = @lstring.new {!"$" + formalArgumentTypeName !formalArgumentTypeName.location}
      [!?ioGraph noteNode !typeName]
    end
    let resultTypeName = @lstring.new {!"$" + mResultTypeName !mResultTypeName.location}
    [!?ioGraph noteNode !resultTypeName]
    [mInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
#--- Add structure services
  [mServiceListAST noteTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @structureDeclaration keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "struct $" + mStructureName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @propertyList {
  @string mPropertyName
  @unifiedTypeMap-proxy mType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @propertyMap {
  @unifiedTypeMap-proxy mTypeProxy
  @uint mIndex
  insert insertKey error message "the '%K' property is already declared"
  search searchKey error message "there is no '%K' property"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @constructorSignature {
  @string mSelector
  @unifiedTypeMap-proxy mType
  @uint mFieldIndex
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sortedlist @sortedOperandIRList {
  @operandIR mOperand
  @uint mIndex
}{
  mIndex <
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
#---------------------------------------- Properties
  @propertyList propertyList = {}
  @propertyMap propertyMap = {}
  @sortedOperandIRList sortedOperandIRList = {}
  @constructorSignature constructorSignature = {}
  var canBeCopied = true
  for () in mStructureFieldListAST do (fieldIndex)
  #--- Field type
    let @unifiedTypeMap-proxy fieldType = if mFieldTypeName.string == ""
      then .null
      else .searchKey {!ioContext.mTypeMap !mFieldTypeName}
    end
  #--- Init expression
    @instructionListIR initInstructionGenerationList = {}
    @semanticTemporariesStruct temporaries = .default
    switch mInitialisation
    case expression (initExpression) :
      [initExpression analyzeExpression
        !self:.null
        !routineNameForInvocationGraph:.new {!mStructureName.string + " init" !mStructureName.location}
        !optionalTargetType:fieldType
        !context:ioContext
        !modes:{}
        !allowException:false
        !?temporary:temporaries
        !?staticStringMap:*
        !?variableMap:*
        !?instructionListIR:initInstructionGenerationList
        ?result:@operandIR expressionIR
      ]
      if not [expressionIR.mValue isStatic] then
        error mFieldName : "initialization expression cannot be computed statically"
      end
      @unifiedTypeMap-proxy actualFieldType
      if fieldType != .null then
        actualFieldType = fieldType
      else
        actualFieldType = expressionIR.mType
      end
      if not [actualFieldType instantiable] then
        error mFieldName : "$" + [actualFieldType key] + " type is not instanciable"
      end
      if not [actualFieldType copyable] then
        canBeCopied = false
      end
      propertyList += !mFieldName.string !actualFieldType
      [!?propertyMap insertKey !mFieldName !actualFieldType ![propertyMap count]]
      sortedOperandIRList += !@operandIR.new {!actualFieldType !expressionIR.mValue} !fieldIndex
    case noExpression :
      if not [fieldType instantiable] then
        error mFieldName : "$" + [fieldType key] + " type is not instanciable"
      end
      propertyList += !mFieldName.string !fieldType
      [!?propertyMap insertKey !mFieldName !fieldType ![propertyMap count]]
      constructorSignature += !mFieldName.string !fieldType !fieldIndex
    end
  end
  [!?ioContext.mConstructorMap insertKey
    !mStructureName
    !.structure{!constructorSignature:constructorSignature !sortedOperandList:sortedOperandIRList}
  ]
#---------------------------------------- Attribute "copyable"
  var copyableAttribute = false
  for (s) in mAttributeListAST do
    if s.string == "copyable" then
      if copyableAttribute then
        error s : "duplicated attribute"
      end
      copyableAttribute = true
    else
      error s : "only @copyable attribute is allowed here"
    end
  end
  if copyableAttribute && not canBeCopied then
    error mStructureName : "this structure cannot be copied, one field is not copyable"
    copyableAttribute = false
  end
#---------------------------------------- Functions
  @functionMap functionMap = {}
  for function in mFunctionDeclarationListAST do
    @funcSignature signature = {}
    for (selector formalArgumentTypeName *) in function.mFuncFormalArgumentList do
      signature += !selector !.searchKey {!ioContext.mTypeMap !formalArgumentTypeName}
    end
  #--- Mode map
    @modeMap functionModeMap = {}
    for () in function.mFunctionModeList do
      [!?functionModeMap insertKey !mValue]
    end
  #--- Result type
    let resultType = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !function.mResultTypeName}
  #--- Enter in context
    [!?functionMap insertKey
      !function.mFunctionName
      !functionModeMap
      !signature
      !resultType
    ]
  end
#---------------------------------------- services and procedures
  [mProcedureDeclarationListAST enterInContext !selfTypeName:"$" + mStructureName.string !?context:ioContext]
  [mServiceListAST enterInContext !receiverType:"$" + mStructureName.string !?context:ioContext]
#---------------------------------------- Enter in type map
  [!?ioContext.mTypeMap insertKey
    !lkey:mStructureName
    !llvmTypeName:"%$" + mStructureName.string
    !kind:.structure {!propertyMap:propertyMap !propertyList:propertyList}
    !typedConstantMap:{}
    !functionMap:functionMap
    !instantiable:true
    !copyable:copyableAttribute
    !equatable:false
    !comparable:false
    !enumerationType:.null # Not enumerable
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  let structureType = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mStructureName}
  @propertyMap propertyMap
  switch [structureType kind]
  case structure (propMap *) : propertyMap = propMap
  case enumeration (*) : propertyMap = {}
  case integer (* * * *) : propertyMap = {}
  case staticInteger : propertyMap = {}
  case boolean : propertyMap = {}
  case boolset : propertyMap = {}
  case literalString : propertyMap = {}
  case opaque (*) : propertyMap = {}
  end
#--- Analyze procedures
  [self procedureSemanticAnalysis
    !structureType:structureType
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
  ]
#--- Analyze functions
  [self functionSemanticAnalysis
    !structureType:structureType
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
  ]
#--- Analyze services
  [mServiceListAST serviceSemanticAnalysis
    !receiverType:structureType
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @structureDeclaration functionSemanticAnalysis
  ?structureType:let @unifiedTypeMap-proxy inStructureType
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  for function in mFunctionDeclarationListAST do
  #--- Check modes
    @stringset functionModeSet = {}
    for mode in function.mFunctionModeList do
      [inContext.mModeMap searchKey !mode.mValue]
      functionModeSet += !mode.mValue.string
    end
  #--- Check attributes
    @bool warnIfUnused = true
    for (attribute) in function.mFunctionAttributeList do
      if attribute.string == noWarningIfUnusedAttribute () then
        if not warnIfUnused then
          error attribute : "duplicated attribute"
        end
        warnIfUnused = false
      else
        error attribute : "unknown attribute"
      end
    end
  #--- Variable map
    @variableMap variableMap = initialVariableMap (
      !routineNameForInvocation:funcNameForInvocationGraph (!inStructureType !function.mFunctionName).string
      !context:inContext
      !userMode:[functionModeSet hasKey !"user"]
      !registerAccess:.readWriteAccess
      !globalsAreConstant:true
    )
  #--- Add "self" variable to variable map
    [!?variableMap insertUsedLocalConstant
      !lkey:.new {!"self" !.here}
      !type:inStructureType
      !readAccessAllowed:true # mReadAccessAllowed
      !variableKind:.localValue {!type:inStructureType !name:"self"}
      !copyable:true # copyable
      !fieldMap:{} # fieldMap
      !canBeUsedAsInputParameter:false # mCanBeUsedAsInputParameter
      !isConstant:true # mIsConstant
    ]
  #--- Add 'result" variable
    let resultVarName = @lstring.new {!"result" !function.mResultTypeName.location}
    let resultType = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !function.mResultTypeName}
    [!?variableMap insertOutputFormalArgument
      !lkey:resultVarName
      !type:resultType
      !readAccessAllowed:true
      !variableKind:.localValue {!type:resultType !name:resultVarName.string}
      !copyable:true
      !fieldMap:{}
      !canBeUsedAsInputParameter:true
      !isConstant:false # Is not constant
    ]
  #--- Analyse formal arguments
    @procFormalArgumentListForGeneration formalArguments = {}
    formalArguments += !.inputOutput !inStructureType !llvmNameForLocalVariable (!"self")
    for (* formalArgumentTypeName formalArgumentName) in function.mFuncFormalArgumentList do
      let typeProxy = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !formalArgumentTypeName}
      [!?variableMap insertConstantInputFormalArgument
        !lkey:formalArgumentName
        !type:typeProxy
        !readAccessAllowed:true
        !variableKind:.localValue {!type:typeProxy !name:formalArgumentName.string}
        !copyable:[typeProxy copyable]
        !fieldMap:{}
        !canBeUsedAsInputParameter:false
        !isConstant:true # Is constant
      ]
      formalArguments += !.input !typeProxy !llvmNameForLocalVariable (!formalArgumentName.string)
    end
  #---
    let routineNameForInvocationGraph = funcNameForInvocationGraph (!inStructureType !function.mFunctionName)
    if not [ioTemporaries.mSubprogramInvocationGraph isNodeDefined !routineNameForInvocationGraph.string] then
      [!?ioTemporaries.mSubprogramInvocationGraph addNode
        !routineNameForInvocationGraph
        !routineNameForInvocationGraph
      ]
    end
  #--- Analyze instruction list
    @instructionListIR instructionGenerationList = {}
    [function.mInstructionList analyzeRoutineInstructionList
      !self:inStructureType
      !routineNameForInvocationGraph:routineNameForInvocationGraph
      !context:inContext
      !modes:functionModeSet
      !allowException:not [functionModeSet hasKey !panicModeName ()]
      !?temporary:ioTemporaries
      !?staticStringMap:ioIntermediateCodeStruct.mStaticStringMap
      !?variableMap:variableMap
      !?generatedCode:instructionGenerationList
    ]
  #---
    [variableMap checkAutomatonStates !function.mEndOfFuncLocation]
  #--- Code generation
    [!?ioIntermediateCodeStruct.mFunctionMapIR insertKey
      !.new {!mStructureName.string + "." + function.mFunctionName !function.mFunctionName.location}
      !formalArguments
      !instructionGenerationList
      !resultType
      !resultVarName.string
      !warnIfUnused
    ]  
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @structureDeclaration procedureSemanticAnalysis
  ?structureType:let @unifiedTypeMap-proxy inStructureType
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  for procedure in mProcedureDeclarationListAST do
    routineSemanticAnalysis (
      !receiverType:inStructureType
      !.procedure
      !procedure.mProcedureModeList
      !procedure.mProcedureName
      !procedure.mProcedureFormalArgumentList
      !procedure.mProcedureInstructionList
      !procedure.mEndOfProcedureDeclaration
      !warnIfUnused:true
      !globalProcedure:false
      !weakProcedure:false
      !nullOnNoException:false
      !registerAccess:.readWriteAccess
      !context:inContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

