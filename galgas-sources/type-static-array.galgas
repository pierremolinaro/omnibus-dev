#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @staticArrayTypeDeclarationAST : @abstractDeclarationAST {
  @lstring mArrayTypeName
  @lstring mElementTypeName
  @expressionAST mSizeExpression
  @location mSizeExpressionLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <type_definition> ?!@ast ioAST !@lstring outTypeName {
    $[$
    <expression> !?ioAST ?let sizeExpression
    $•$
    <type_definition> !?ioAST ?let elementTypeName
    let sizeExpressionLocation = @location.here
    $]$
    outTypeName = ["anonymous." + ioAST.mTypeDeclarationIndex here]
    ioAST.mTypeDeclarationIndex ++
    ioAST.mDeclarationListAST += !@staticArrayTypeDeclarationAST.new {
      !outTypeName
      !elementTypeName
      !sizeExpression
      !sizeExpressionLocation
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @staticArrayTypeDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [!?ioGraph addNode !mArrayTypeName !self]
  [!?ioGraph addEdge !mArrayTypeName !mElementTypeName]
  [mSizeExpression addDependenceEdgeForStaticExpression !mArrayTypeName !?ioGraph]
  let rootNode = @lstring.new {!configurationNodeNameForPrecedenceGraph () !mArrayTypeName.location}
  [!?ioGraph addEdge !mArrayTypeName !rootNode]
}

#·······················································································································

override getter @staticArrayTypeDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "anonymous $" + mArrayTypeName 
}

#·······················································································································

override getter @staticArrayTypeDeclarationAST location -> @location outLocation {
  outLocation = mArrayTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @staticArrayTypeDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@subprogramInvocationGraph unused ioSubprogramInvocationGraph
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!globalVariables:@globalVariableIRList unused ioGlobalVariableIRList
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
{
#--- Get element type
  [ioContext.mTypeMap searchKey !lkey:mElementTypeName ?type:let elementType ?1*]
  if not [elementType copyable] then
    error mElementTypeName : "an array element should be copyable"
  end
  if not [elementType instanciable] then
    error mElementTypeName : "an array element should be instanciable"
  end
#--- Compute array size
  @instructionListIR initInstructionGenerationList = {}
  @allocaList allocaList = {}
  @semanticTemporariesStruct temporaries = .default
  [mSizeExpression analyzeExpression
    !self:voidType ()
    !routineAttributes:.none
    !routineNameForInvocationGraph:.new {!mArrayTypeName.string + " init" !mArrayTypeName.location}
    !optionalTargetType:voidType ()
    !context:ioContext
    !mode:.bootMode
    !?temporary:temporaries
    !?staticEntityMap:*
    !?variableMap:ioContext.mValuedObjectMap
    !?alloca:allocaList
    !?instructionListIR:initInstructionGenerationList
    ?result:let @objectIR sizeExpressionIR
  ]
  if not [sizeExpressionIR isLiteralInteger] then
    error mSizeExpressionLocation : "array size expression is not static"
  else
    [sizeExpressionIR literalInteger ?1* ?value:let arraySize]
  #-------------------------------------------- Original type name
    let plmTypeDescriptionName = @lstring.new {!"[" + arraySize + " • " + elementType.plmTypeDescriptionName + "]" !mArrayTypeName}
    let llvmBaseTypeName = @lstring.new {!elementType.llvmBaseTypeName + "." + arraySize !mArrayTypeName}
    if [ioContext.mTypeMap hasKey !plmTypeDescriptionName] then
      [ioContext.mTypeMap searchKey !lkey:plmTypeDescriptionName ?type:var type ?1*]
      [!?ioContext.mTypeMap insertType
        !lkey:mArrayTypeName
        !type:type
        !index:[ioContext.mTypeMap count]
      ]
    else
    #-------------------------------------------- Class method map : add "count" constructor
      @classConstantMap classConstantMap = {}
     [!?classConstantMap insertKey !.new {!"count" !mArrayTypeName} !arraySize ![staticIntegerTypeName () nowhere]]
    #-------------------------------------------- Property map
      @propertyMap arrayTypePropertyMap = {}
      [!?arrayTypePropertyMap insertKey # "count" property
        !.new {!"count" !plmTypeDescriptionName.location}
        !true # public
        !.constantProperty {!value:.literalInteger {!type:staticIntegerType () !value:arraySize}}
      ]
    #-------------------------------------------- Constructor map
      @constructorMap constructorMap = {}
    #--- Constructor (!repeated)
      [!?constructorMap insertKey !["(!repeated)" nowhere] !{} !.arrayValue {!elementType:elementType !size:arraySize}]
    #--- Constructor (!!!!)
      var constructorName = "("
      for i in 0 ..< [arraySize uint] do
        constructorName += "!"
      end
      constructorName += ")"
      [!?constructorMap insertKey ![constructorName nowhere] !{} !.arrayValue {!elementType:elementType !size:arraySize}]
    #-------------------------------------------- Type attributes
      @PLMTypeAttributes typeAttributes = .instanciable | .generateAssignmentRoutine | .copyable
    #-------------------------------------------- Enter in type map
      let arrayType = @PLMType.new {
        !propertyMap:arrayTypePropertyMap
        !classConstantMap:classConstantMap
        !constructorMap:constructorMap
        !guardMap:{}
        !attributes:typeAttributes
        !plmTypeDescriptionName:plmTypeDescriptionName
        !kind:.arrayType {!elementType:elementType !size:arraySize}
        !llvmBaseTypeName:llvmBaseTypeName
      }
      [!?ioContext.mTypeMap insertType
        !lkey:mArrayTypeName
        !type:arrayType
        !index:[ioContext.mTypeMap count]
      ]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateLLVMCodeForStaticArrayType
  ?!@string ioLLVMcode
  ?!@generationAdds unused ioGenerationAdds
  ?let @string inLLVMBaseTypeName
  ?let @PLMType unused inElementType
  ?let @bigint inSize
{
  let routineMangledName = routineMangledNameFromAST (
    !inLLVMBaseTypeName
    !["count" nowhere]
    !{}
  )
  let routineLLVMName = llvmNameForFunction (!routineMangledName.string)
  ioLLVMcode += llvmTitleComment (!routineMangledName)
  ioLLVMcode += "define internal i32  @" + routineLLVMName + " (%"
              + [inLLVMBaseTypeName assemblerRepresentation] + "* %inUnusedValue) nounwind {\n"
  ioLLVMcode += "  ret i32 " + inSize + "\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
