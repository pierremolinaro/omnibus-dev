#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! UNIVERSAL VARIABLE MAP
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# Cette table contient les variables.

#·······················································································································

struct @universalValuedObjectMap {
  @flatValuedObjectMap mInternalPropertyAndRoutineMap
  @scopeStack mScopeStack
  @lstringlist mLocalObjectList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! INSERT SETTERS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

setter @universalValuedObjectMap insertTask
  ?let @lstring inTaskName
  ?let @PLMType inTaskType
{
  [!?mInternalPropertyAndRoutineMap insertKey
    !inTaskName
    !.noValue
    !false
    !.task {!type:inTaskType}
  ]
}

#·······················································································································

setter @universalValuedObjectMap insertDriver
  ?let @lstring inDriverName
  ?let @bool inIsInstancied
  ?let @PLMType inDriverType
{
  [!?mInternalPropertyAndRoutineMap insertKey
    !inDriverName
    !.noValue
    !false
    !.driver {!type:inDriverType !instancied:inIsInstancied}
  ]
}

#·······················································································································

setter @universalValuedObjectMap insertRegisterGroup
  ?let @lstring inRegisterGroupName
  ?let @registerGroupKind inGroupKind
  ?let @controlRegisterMap inControlRegisterMap
{
  let newValue = @valuedObject.registerGroup {!registerMap:inControlRegisterMap !groupKind:inGroupKind}
  [!?mInternalPropertyAndRoutineMap insertKey
    !inRegisterGroupName
    !.noValue
    !false
    !newValue
  ]
}

#·······················································································································

setter @universalValuedObjectMap insertGlobalConstant
  ?let @lstring inConstantName
  ?let @objectIR inConstantObjectIR
{
  [!?mInternalPropertyAndRoutineMap insertKey
    !inConstantName
    !.noValue
    !false
    !.globalConstant {!objectIR:inConstantObjectIR}
  ]
}

#·······················································································································

setter @universalValuedObjectMap insertGlobalSyncInstance
  ?let @lstring inSyncInstanceName
  ?let @PLMType inType
{
  [!?mInternalPropertyAndRoutineMap insertKey
    !inSyncInstanceName
    !.noValue
    !false
    !.globalSyncInstance {!type:inType !plmName:inSyncInstanceName}
  ]
}

#·······················································································································

setter @universalValuedObjectMap insertLocalConstant
  ?let @lstring inLocalConstantName
  ?let @bool inIsFormalInputArgument
  ?let @PLMType inType
  ?let @lstring inPLMConstantName
{
  [!?mInternalPropertyAndRoutineMap insertKey
    !inLocalConstantName
    !.hasUnreadValue
    !false
    !.localConstant {!type:inType !plmName:inPLMConstantName !isFormalInputArgument:inIsFormalInputArgument}
  ]
  mLocalObjectList += !inLocalConstantName
}

#·······················································································································

setter @universalValuedObjectMap insertUsedLocalConstant
  ?let @lstring inLocalConstantName
  ?let @bool inIsFormalInputArgument
  ?let @PLMType inType
  ?let @lstring inPLMConstantName
{
  [!?mInternalPropertyAndRoutineMap insertKey
    !inLocalConstantName
    !.hasReadValue
    !false
    !.localConstant {!type:inType !plmName:inPLMConstantName !isFormalInputArgument:inIsFormalInputArgument}
  ]
  mLocalObjectList += !inLocalConstantName
}

#·······················································································································

setter @universalValuedObjectMap insertLocalVariable
  ?let @lstring inLocalVariableName
  ?let @PLMType inType
  ?let @lstring inPLMName
  ?let @valuedObjectState inVariableInitialState
  ?let @bool inObjectShouldBeValuedAtEndOfScope
{
  [!?mInternalPropertyAndRoutineMap insertKey
    !inLocalVariableName
    !inVariableInitialState
    !inObjectShouldBeValuedAtEndOfScope
    !.localVariable {!type:inType !plmName:inPLMName}
  ]
  mLocalObjectList += !inLocalVariableName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEARCH METHODS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @universalValuedObjectMap searchEntity
  ?let @lstring inValuedObjectName
  !@valuedObject outEntity
{
  [mInternalPropertyAndRoutineMap searchKey !inValuedObjectName ?2* ?outEntity]
}

#·······················································································································

method @universalValuedObjectMap searchValuedObject
  ?let @lstring inValuedObjectName
  ?let @mode inMode
  ?let @stringset inInitializedDriverSet
  !@objectIR outObjectIR
{
  [mInternalPropertyAndRoutineMap searchKey !inValuedObjectName ?2* ?let entity]
  switch entity
  case task (@PLMType type) :
    if inMode == .bootMode then
      error inValuedObjectName : "cannot call a task entry in a boot routine" : outObjectIR
    else
      outObjectIR = .reference {!type:type !llvmName:llvmNameForGlobalVariable (!inValuedObjectName)}
    end
  case driver (@PLMType type instancied) :
    if inMode == .bootMode then
      error inValuedObjectName : "cannot call a driver in a boot routine" : outObjectIR
    elsif not instancied then
      error inValuedObjectName : "the driver should be instancied" : outObjectIR
    elsif not [inInitializedDriverSet hasKey !inValuedObjectName] then
      error inValuedObjectName : "the driver should be named in driver dependence list" : outObjectIR
    else
      outObjectIR = .reference {!type:type !llvmName:llvmNameForGlobalVariable (!inValuedObjectName)}
    end
  case registerGroup (2*) :
    error inValuedObjectName : "control register ?" : outObjectIR
  case globalConstant (@objectIR objectIR) :
    outObjectIR = objectIR
  case localConstant (@PLMType type @lstring plmName *) :
    outObjectIR = .reference {!type:type !llvmName:llvmNameForLocalVariable (!plmName)}
  case localVariable (@PLMType type @lstring plmName) :
    outObjectIR = .reference {!type:type !llvmName:llvmNameForLocalVariable (!plmName)}
  case globalSyncInstance (@PLMType type @lstring plmName) :
    outObjectIR = .reference {!type:type !llvmName:llvmNameForGlobalSyncInstance (!plmName)}
  end
}

#·······················································································································

setter @universalValuedObjectMap readAccess
  ?let @lstring inValuedObjectName
{
  [mInternalPropertyAndRoutineMap searchKey !inValuedObjectName ?let valueState ?* ?let property]
  switch property
  case task (*) :
  case driver (* *) :
  case registerGroup (2*) :
  case globalConstant (*) :
  case globalSyncInstance (2*) :
  case localConstant (3*) :
    if valueState == .hasUnreadValue then
      [!?mInternalPropertyAndRoutineMap setMObjectStateForKey !.hasReadValue !inValuedObjectName]
    end
  case localVariable (2*) :
    switch valueState 
    case noValue :
      error inValuedObjectName : "'" + inValuedObjectName + "' has no value"
    case hasUnreadValue :
      [!?mInternalPropertyAndRoutineMap setMObjectStateForKey !.hasReadValue !inValuedObjectName]
    case hasReadValue :
    end
  end
}

#·······················································································································

setter @universalValuedObjectMap searchValuedObjectForReadAccess
  ?let @lstring inValuedObjectName
  !@objectIR outObjectIR
{
  [mInternalPropertyAndRoutineMap searchKey !inValuedObjectName ?let valueState ?* ?let property]
  switch property
  case task (@PLMType type) :
    outObjectIR = .reference {!type:type !llvmName:llvmNameForGlobalVariable (!inValuedObjectName)}
  case driver (@PLMType type instancied) :
    if instancied then
      outObjectIR = .reference {!type:type !llvmName:llvmNameForGlobalVariable (!inValuedObjectName)}
    else
      error inValuedObjectName : "the driver should be instancied" : outObjectIR
    end
  case registerGroup (2*) :
    error inValuedObjectName : "control register ?" : outObjectIR
  case globalConstant (@objectIR objectIR) :
    outObjectIR = objectIR
  case localConstant (@PLMType type @lstring plmName *) :
    outObjectIR = @objectIR.reference {!type:type !llvmName:llvmNameForLocalVariable (!plmName)}
    if valueState == .hasUnreadValue then
      [!?mInternalPropertyAndRoutineMap setMObjectStateForKey !.hasReadValue !inValuedObjectName]
    end
  case globalSyncInstance (@PLMType type @lstring plmName) :
    outObjectIR = .reference {!type:type !llvmName:llvmNameForGlobalSyncInstance (!plmName)}
  case localVariable (@PLMType type @lstring plmName) :
    switch valueState 
    case noValue :
      error inValuedObjectName : "'" + inValuedObjectName + "' has no value" : outObjectIR
    case hasUnreadValue :
      [!?mInternalPropertyAndRoutineMap setMObjectStateForKey !.hasReadValue !inValuedObjectName]
      outObjectIR = .reference {!type:type !llvmName:llvmNameForLocalVariable (!plmName)}
    case hasReadValue :
      outObjectIR = .reference {!type:type !llvmName:llvmNameForLocalVariable (!plmName)}
    end
  end
}

#·······················································································································

setter @universalValuedObjectMap searchValuedObjectForWriteAccess
  ?let @lstring inValuedObjectName
  !@objectIR outObjectIR
{
  [mInternalPropertyAndRoutineMap searchKey !inValuedObjectName ?let valueState ?* ?let property]
  switch property
  case task (*) :
    error inValuedObjectName : "a task has no value" : outObjectIR
  case driver (* *) :
    error inValuedObjectName : "a driver has no value" : outObjectIR
  case registerGroup (2*) :
    error inValuedObjectName : "control register ?" : outObjectIR
  case globalConstant (*) :
    error inValuedObjectName : "a constant cannot be written" : outObjectIR
  case globalSyncInstance (2*) :
    error inValuedObjectName : "a global sync instance cannot be written" : outObjectIR
  case localConstant (3*) :
    error inValuedObjectName : "a constant cannot be written" : outObjectIR
  case localVariable (@PLMType type @lstring plmName) :
    outObjectIR = @objectIR.reference {!type:type !llvmName:llvmNameForLocalVariable (!plmName)}
    switch valueState 
    case noValue, hasReadValue :
      [!?mInternalPropertyAndRoutineMap setMObjectStateForKey !.hasUnreadValue !inValuedObjectName]
    case hasUnreadValue :
      warning inValuedObjectName : "previous '" + inValuedObjectName + "' value has not been read"
    end
  end
}

#·······················································································································

setter @universalValuedObjectMap searchValuedObjectForReadWriteAccess
  ?let @lstring inValuedObjectName
  !@objectIR outObjectIR
{
  [mInternalPropertyAndRoutineMap searchKey !inValuedObjectName ?let valueState ?* ?let property]
  switch property
  case task (*) :
    error inValuedObjectName : "a task has no value" : outObjectIR
  case driver (* *) :
    error inValuedObjectName : "a driver has no value" : outObjectIR
  case registerGroup (2*) :
    error inValuedObjectName : "control register ?" : outObjectIR
  case globalConstant (*) :
    error inValuedObjectName : "a constant cannot be written" : outObjectIR
  case localConstant (3*) :
    error inValuedObjectName : "a constant cannot be written" : outObjectIR
  case globalSyncInstance (2*) :
    error inValuedObjectName : "a global sync instance cannot be written" : outObjectIR
  case localVariable (@PLMType type @lstring plmName) :
    switch valueState 
    case noValue :
      error inValuedObjectName : "object has no value" : outObjectIR
    case hasUnreadValue :
      outObjectIR = @objectIR.reference {!type:type !llvmName:llvmNameForLocalVariable (!plmName)}
    case hasReadValue :
      [!?mInternalPropertyAndRoutineMap setMObjectStateForKey !.hasUnreadValue !inValuedObjectName]
      outObjectIR = @objectIR.reference {!type:type !llvmName:llvmNameForLocalVariable (!plmName)}
    end
  end
}

#·······················································································································

method @universalValuedObjectMap searchValuedObjectType
  ?selfType: let @PLMType inSelfType
  ?let @LValueAST inLValue
  !@PLMType outType
{
  var accessList = inLValue.mAccessList
  if inLValue.mIdentifier.string == "" then # Receiver is self
    outType = inSelfType
  else
    [mInternalPropertyAndRoutineMap searchKey !inLValue.mIdentifier ?2* ?let property]
    switch property
    case task (*) :
      error inLValue.mIdentifier : "undefined in this context" : outType
    case driver (* *) :
      error inLValue.mIdentifier : "undefined in this context" : outType
    case registerGroup (2*) :
      error inLValue.mIdentifier : "undefined in this context" : outType
    case globalConstant (*) :
      error inLValue.mIdentifier : "undefined in this context" : outType
    case localConstant (3*) :
      error inLValue.mIdentifier : "undefined in this context" : outType
    case localVariable (@PLMType type *) :
      outType = type
    case globalSyncInstance (@PLMType type *) :
      outType = type
    end
  end
  for (access) in accessList do
    switch access
    case property (@lstring propertyName) :
      let @propertyGetterMap propertyGetterMap = outType.propertyGetterMap
      [propertyGetterMap searchKey !propertyName ?* ?let accessKind]
      switch accessKind
      case constantProperty (value) :
        outType = [value type]
      case storedProperty (type *) :
        outType = type
      case computedProperty (propertyTypeProxy) :
        outType = [propertyTypeProxy type]
      end
    case arrayAccess (3*) :
      switch outType.subscript
      case noSubscript :
      case literalString :
      case staticSubscript (@PLMType elementType *) :
        outType = elementType
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! STATE HANDLING
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @universalValuedObjectMap checkLocalVariableFinalState ?!@instructionListIR ioInstructionGenerationList {
  for entry in mInternalPropertyAndRoutineMap do
    switch entry.mValuedObject
    case task (*) :
    case driver (* *) :
    case registerGroup (2*) :
    case globalSyncInstance (2*) :
    case globalConstant (*) :
    case localConstant (@PLMType type @lstring plmName @bool isFormalInputArg) :
      if entry.mObjectState == .hasUnreadValue then
        warning entry.lkey : "'" + entry.lkey + "' is never read"
      end
      if not isFormalInputArg then
        [!?ioInstructionGenerationList generateRelease !type !plmName]
      end
    case localVariable (@PLMType type @lstring plmName) :
      if (entry.mObjectState == .noValue) && entry.mObjectShouldBeValuedAtEndOfScope then
        error entry.lkey : "'" + entry.lkey + "' should be valued at the end of routine"
      end
      [!?ioInstructionGenerationList generateRelease !type !plmName]
    end
  end
}

#·······················································································································

setter @universalValuedObjectMap openOverrideForSelectBlock {
  @referenceStateMap initialStateMap = {}
  for entry in mInternalPropertyAndRoutineMap do
    switch entry.mValuedObject
    case task (*) :
    case driver (* *) :
    case globalSyncInstance (2*) :
    case registerGroup (2*) :
    case globalConstant (*) :
    case localConstant (3*) :
      [!?initialStateMap insertKey !entry.lkey !entry.mObjectState]
    case localVariable (**) :
      [!?initialStateMap insertKey !entry.lkey !entry.mObjectState]
    end
  end
  mScopeStack += !.selectScope !true !initialStateMap !{} !mLocalObjectList
  mLocalObjectList = {}
}

#·······················································································································

setter @universalValuedObjectMap openOverrideForRepeatBlock {
  @referenceStateMap initialStateMap = {}
  for entry in mInternalPropertyAndRoutineMap do
    switch entry.mValuedObject
    case task (*) :
    case driver (* *) :
    case globalSyncInstance (2*) :
    case registerGroup (2*) :
    case globalConstant (*) :
    case localConstant (3*) :
      [!?initialStateMap insertKey !entry.lkey !entry.mObjectState]
    case localVariable (**) :
      [!?initialStateMap insertKey !entry.lkey !entry.mObjectState]
    end
  end
  mScopeStack += !.repeatScope !true !initialStateMap ! {} !mLocalObjectList
  mLocalObjectList = {}
}

#·······················································································································

setter @universalValuedObjectMap openBranch {
  [mScopeStack last ?* ?* ?let initialStateMap ?2*]
  for (key objectState) in initialStateMap do
    [!?mInternalPropertyAndRoutineMap setMObjectStateForKey !objectState !key]
  end
}

#·······················································································································

setter @universalValuedObjectMap closeBranch ?let @location inErrorLocation {
  [!?mScopeStack popLast ?let scopeKind ?let firstBranch ?let initialStateMap ?var referenceStateMap ?let localObjectList]
  if firstBranch then
    @referenceStateMap newReferenceStateMap = {}
    for entry in mInternalPropertyAndRoutineMap do
      switch entry.mValuedObject
      case task (*) :
      case driver (* *) :
      case registerGroup (2*) :
      case globalConstant (*) :
      case globalSyncInstance (2*) :
      case localConstant (3*) :
        [!?newReferenceStateMap insertKey !entry.lkey !entry.mObjectState]
      case localVariable (**) :
        [!?newReferenceStateMap insertKey !entry.lkey !entry.mObjectState]
      end
    end
    mScopeStack += !scopeKind !false !initialStateMap !newReferenceStateMap !localObjectList
  else
    switch scopeKind
    case selectScope :
      for (lkey referenceState) in referenceStateMap do
        [mInternalPropertyAndRoutineMap searchKey !lkey ?let currentObjectState ?2*]
        if referenceState == currentObjectState then # Ok
        elsif (currentObjectState == .hasUnreadValue) & (referenceState == .hasReadValue) then # Ok
        elsif (currentObjectState == .hasReadValue) & (referenceState == .hasUnreadValue) then # Ok, modify reference state
          [!?referenceStateMap setMStateForKey !.hasReadValue !lkey]
        else
          error inErrorLocation
            : "invalid state for object '" + lkey + "': found " + currentObjectState + ", required " + referenceState
        end
      end
      mScopeStack += !scopeKind !false !initialStateMap !referenceStateMap !localObjectList
    case repeatScope :
     for (lkey objectState) in referenceStateMap do
        [mInternalPropertyAndRoutineMap searchKey !lkey ?let currentObjectState ?2*]
        if objectState != currentObjectState then
          error inErrorLocation
            : "invalid state for object '" + lkey + "': found " + currentObjectState + ", required " + objectState
        end
      end
      mScopeStack += !scopeKind !false !initialStateMap !referenceStateMap !localObjectList
    end
  end
}

#·······················································································································

setter @universalValuedObjectMap closeOverride ?let @location inErrorLocation {
  [!?mScopeStack popLast ?* ?* ?* ?let referenceStateMap ?let localObjectList]
#--- Restore value object state
  for (key objectState) in referenceStateMap do
    [!?mInternalPropertyAndRoutineMap setMObjectStateForKey !objectState !key]
  end
#--- For current scope objects, check their final state
  for (lkey) in mLocalObjectList do
    [mInternalPropertyAndRoutineMap searchKey
      !lkey
      ?let currentObjectState
      ?let objectShouldBeValuedAtEndOfScope
      ?let possibleValuedObject
    ]
    switch possibleValuedObject
    case task (*) :
    case driver (* *) :
    case registerGroup (2*) :
    case globalSyncInstance (2*) :
    case globalConstant (*) :
    case localConstant (3*) :
      if currentObjectState == .hasUnreadValue then
        warning inErrorLocation : "'" + lkey + "' is never read"
      end
    case localVariable (**) :
      if (currentObjectState == .noValue) && objectShouldBeValuedAtEndOfScope then
        error inErrorLocation : "'" + lkey + "' should be valued at the end of routine"
      end
    end
  end
#--- Remove current scope objets
  for (lkey) in mLocalObjectList do
    [!?mInternalPropertyAndRoutineMap removeKey !lkey ?3*]
  end
#--- Restore current scope objects
  mLocalObjectList = localObjectList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! INTERNAL MAPS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @flatValuedObjectMap { # Key is a valued object
  @valuedObjectState mObjectState
  @bool mObjectShouldBeValuedAtEndOfScope
  @valuedObject mValuedObject

  insert insertKey error message "the '%K' entity is already declared in %L"
  search searchKey error message "there is no '%K' entity"
  remove removeKey error message "there is no '%K' entity"
}

#·······················································································································

enum @scopeKind {
  case selectScope
  case repeatScope
}

#·······················································································································

list @scopeStack {
  @scopeKind mScopeKind
  @bool mFirstBranch
  @referenceStateMap mInitialStateMap
  @referenceStateMap mReferenceStateMap
  @lstringlist mObjectList
}

#·······················································································································

map @referenceStateMap {
  @valuedObjectState mState
  insert insertKey error message "INTERNAL ERROR"
  search searchKey error message "INTERNAL ERROR"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! VALUED OBJECT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @valuedObject {
  case driver (@PLMType type @bool instancied)
  case task (@PLMType type)
  case registerGroup (@controlRegisterMap registerMap @registerGroupKind groupKind)
  case globalConstant (@objectIR objectIR)
  case localConstant (@PLMType type @lstring plmName @bool isFormalInputArgument)
  case localVariable (@PLMType type @lstring plmName)
  case globalSyncInstance (@PLMType type @lstring plmName)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! VALUED OBJECT STATE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @valuedObjectState {
  case noValue
  case hasUnreadValue
  case hasReadValue
}

#·······················································································································

getter @valuedObjectState string -> @string {
  switch self
  case noValue : result = "no value"
  case hasUnreadValue : result = "unread value"
  case hasReadValue : result = "read value"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
