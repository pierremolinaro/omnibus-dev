#—————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#—————————————————————————————————————————————————————————————————————————————————————————————————

list @integerSliceFieldListAST {
  public var @lstring mSliceWidth
  public var @expressionAST mExpression
  public var @location mExpressionLocation
}

#·······················································································································

class @integerSliceExpressionAST : @expressionAST {
  public var @lstring mTypeName
  public var @integerSliceFieldListAST mSliceValues
  public var @location mLocation
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    ${$
    $\$type$ ?let typeName
    var @integerSliceFieldListAST integerFieldValues = @[]
    repeat
      $!selector:$ ?let sliceWidth
      <expression> !?ioAST ?let expression
      integerFieldValues += !sliceWidth !expression !.here
    while
    end
    if [integerFieldValues count] < 2 then
      error .here : "this expression should contain two bit slices or more" : outExpression
    else
      outExpression = @integerSliceExpressionAST {!typeName !integerFieldValues !.here}
    end
    $}$
  }

  #·····················································································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @integerSliceExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  for (* expression *) in self.mSliceValues do
    [expression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @integerSliceExpressionAST noteExpressionTypesInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph noteNode !self.mTypeName]
  for (sliceWidthStr expression expressionLocation) in self.mSliceValues do
    [expression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    if [sliceWidthStr.string isDecimalUnsignedNumber] then
      let sliceWidth = [sliceWidthStr decimalUnsignedNumber]
      if sliceWidth == 0 then
        error sliceWidthStr : "the bit slice width should be > 0"
      else
        [!?ioGraph noteUINTType !sliceWidth !expressionLocation]
      end
    elsif sliceWidthStr.string == "b" then
      [!?ioGraph noteNode ![boolTypeName () nowhere]]
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @integerSliceExpressionAST analyzeExpression
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?optionalTargetType:let @omnibusType unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- Search Type
  let resultType = [[inContext.mTypeMap searchKey !self.mTypeName] type]
#--- Check type is an unsigned integer type
  if not [resultType.kind isInteger] then
    error self.mTypeName: "this type should be an unsigned integer type" :outResult
  else
    [resultType.kind extractInteger ?2* ?unsigned:let unsigned ?bitCount:let bitCount]
    if not unsigned then
      error self.mTypeName: "this type should be an unsigned integer type" :outResult
    else
    #------------------------------------------------------ Valuated fields
      var leftShiftAmount = bitCount
      var @bigint accumulatedFieldStaticValues = 0
      var @operandIRList operandList = @[]
      for (sliceWidthStr expression expressionLocation) in self.mSliceValues do
        let @uint sliceWidth
        let @lstring expressionTypeName
        if sliceWidthStr.string == "" then
          error sliceWidthStr : "anonymous selector not allowed here" : operandList, sliceWidth, expressionTypeName
        elsif sliceWidthStr.string == "b" then
          sliceWidth = 1
          expressionTypeName = @{!boolTypeName () !self.mTypeName.location}
        elsif not [sliceWidthStr.string isDecimalUnsignedNumber] then
          error sliceWidthStr : "the selector should be an unsigned integer value" : operandList, sliceWidth, expressionTypeName
        else
          sliceWidth = [sliceWidthStr decimalUnsignedNumber]
          expressionTypeName = @{!"u" + sliceWidth !self.mTypeName.location}
          if sliceWidth == 0 then
            error sliceWidthStr : "the bit slice width should be > 0"
          end
        end
        if leftShiftAmount >= sliceWidth then
          leftShiftAmount = leftShiftAmount - sliceWidth
        else
          let specifiedBitCount = bitCount + sliceWidth - leftShiftAmount
          error sliceWidthStr : "bit slice overflow: " + specifiedBitCount + " bits, should be " + bitCount
          leftShiftAmount = 0
        end
      #--- Analyze expression
        let expressionTargetType = [[inContext.mTypeMap searchKey !expressionTypeName] type]
        [expression analyzeExpression
          !self:inSelfType
          !routineAttributes:inRoutineAttributes
          !optionalTargetType:expressionTargetType
          !context:inContext
          !mode:inMode
          !?temporary:ioTemporaries
          !?staticEntityMap:ioStaticEntityMap
          !?variableMap:ioUniversalMap
          !?alloca:ioAllocaList
          !?instructionListIR:ioInstructionGenerationList
          ?result:@objectIR expressionResult
        ]
        [!?ioInstructionGenerationList appendLoadWhenReference
          !?ioTemporaries
          !?expressionResult
        ]  
      #--- Check expression type
        switch [expressionResult type].kind
        case staticArrayType (* *) :
          error expressionLocation: "an unsigned integer expression is required here"
        case dynamicArrayType (*) :
          error expressionLocation: "an unsigned integer expression is required here"
        case opaque (*) :
          error expressionLocation: "an unsigned integer expression is required here"
        case enumeration (*) :
          error expressionLocation: "an unsigned integer expression is required here"
        case structure (*) :
          error expressionLocation: "an unsigned integer expression is required here"
        case syncTool :
          error expressionLocation: "an unsigned integer expression is required here"
        case boolean :
          if [expressionResult type].omnibusTypeDescriptionName != expressionTargetType.omnibusTypeDescriptionName then
            error expressionLocation :
            "an $" + expressionTargetType.omnibusTypeDescriptionName + " expression is required, found an $" +
            [expressionResult type].omnibusTypeDescriptionName + " expression"
          end
          if [expressionResult isLiteralInteger] then
            [expressionResult extractLiteralInteger ?1* ?value:let @bigint value]
            accumulatedFieldStaticValues = accumulatedFieldStaticValues | (value << leftShiftAmount)
          else
          #--- Perform an bit extend to register type or a trunc
            getNewTempValue (!resultType !?ioTemporaries ?let extendedResult)
            [!?ioInstructionGenerationList appendBoolToUInt !extendedResult !expressionResult]
          #--- Perform left shift
            getNewTempValue (!resultType !?ioTemporaries ?let shiftedResult)
            [!?ioInstructionGenerationList appendShiftLeft !shiftedResult !extendedResult !leftShiftAmount]
          #---- Accumulate 
            operandList += !shiftedResult
          end
        case void :
          error expressionLocation: "an unsigned integer expression is required here"
        case literalString :
          error expressionLocation: "an unsigned integer expression is required here"
        case function (3*) :
          error expressionLocation: "an unsigned integer expression is required here"
        case generic (3*) :
          error expressionLocation: "an unsigned integer expression is required here"
        case llvmType (*) :
          error expressionLocation: "an unsigned integer expression is required here"
        case compileTimeBool :
          error expressionLocation: "an unsigned integer expression is required here"
        case compileTimeInteger :
          [expressionResult extractLiteralInteger ?1* ?value:let @bigint value]
          if value < 0 then
            error expressionLocation: "this integer expression should be positive"
          elsif value < (1 << sliceWidth) then
            accumulatedFieldStaticValues = accumulatedFieldStaticValues | (value << leftShiftAmount)
          else
            error expressionLocation: "expression too large (should be < " + (1 << sliceWidth) + ")"
          end
        case integer (@bigint unused min @bigint unused max @bool unsigned @uint expressionBitCount) :
          if not unsigned then
            error expressionLocation: "an $uint" + sliceWidth + " expression is required here"
          elsif expressionBitCount != sliceWidth then
            error expressionLocation: "an $uint" + sliceWidth + " expression is required here"
          else
          #--- Perform an bit extend to result type
            getNewTempValue (!resultType !?ioTemporaries ?let extendedResult)
            [!?ioInstructionGenerationList appendExtend !extendedResult !expressionResult]
          #--- Perform left shift
            getNewTempValue (!resultType !?ioTemporaries ?let shiftedResult)
            [!?ioInstructionGenerationList appendShiftLeft !shiftedResult !extendedResult !leftShiftAmount]
          #---- Accumulate 
            operandList += !shiftedResult
          end
        end
      end
      if leftShiftAmount != 0 then
        error self.mLocation : [bitCount string] + " bits required, " + (bitCount - leftShiftAmount) + " bits defined"
      end
    #------------------------------------------------------ Result
      outResult = .literalInteger {!type: resultType!value:accumulatedFieldStaticValues}
      for (operand) in operandList do
        getNewTempValue (!resultType !?ioTemporaries ?let newResult)
        [!?ioInstructionGenerationList appendBinaryOperation
          !newResult
          ![newResult type]
          !.here
          !outResult
          !.ior
          !operand
        ] 
        outResult = newResult
      end
      end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
