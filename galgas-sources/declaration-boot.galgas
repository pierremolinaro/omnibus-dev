#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @bootAST : @abstractDeclarationAST {
  @lstring mDriverName
  @lstringlist mDriverDependanceList
  @location mBootLocation
  @instructionListAST mInstructionList
  @location mEndOfBootLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration_boot> ?!@ast ioAST ?let @lstring inDriverName  ?let @lstringlist inDependanceList !@bootAST outBoot {
    $boot$
    let bootLocation = @location.here
    ${$
    <instructionList> !?ioAST ?let instructionList
    let endOfInit = @location.here
    $}$
    outBoot = .new {
      !inDriverName
      !inDependanceList
      !bootLocation
      !instructionList
      !endOfInit
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @bootAST noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
}

#·······················································································································

override method @bootAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
 let nodeName = @lstring.new {!"boot " + mDriverName !mDriverName.location}
 [!?ioGraph addNode !nodeName !self]
 [!?ioGraph addEdge !nodeName !mDriverName]
 for (dependanceDriverName) in mDriverDependanceList do
   let dependanceNodeName = @lstring.new {!"boot " + dependanceDriverName.string !dependanceDriverName.location}
   [!?ioGraph addEdge !nodeName !dependanceNodeName]
 end
}

#·······················································································································

override getter @bootAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "boot " + mDriverName 
}

#·······················································································································

override getter @bootAST location -> @location outLocation {
  outLocation = mBootLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @bootAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext unused ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@subprogramInvocationGraph ioSubprogramInvocationGraph
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!globalVariables:@globalVariableIRList unused ioGlobalVariableIRList
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
{
#--- Enter in invocation graph
  let routineNameForInvocationGraph = @lstring.new  {!"boot " + mDriverName !mDriverName}
  [!?ioSubprogramInvocationGraph addNode !routineNameForInvocationGraph !routineNameForInvocationGraph]
#---------------- Add decorated declaration
  ioDecoratedDeclarationList += !@decoratedBootRoutine.new {
    !mDriverName
    !mDriverDependanceList
    !mBootLocation
    !mInstructionList
    !mEndOfBootLocation
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @decoratedBootRoutine : @abstractDecoratedDeclaration {
  @lstring mDriverName
  @lstringlist mDriverDependanceList
  @location mBootLocation
  @instructionListAST mInstructionList
  @location mEndOfBootLocation
}

#·······················································································································

override method @decoratedBootRoutine semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#---
  let routineNameForInvocationGraph = @lstring.new  {!"boot " + mDriverName !mDriverName.location}
#--- Variable map
  var universalMap = inContext.mValuedObjectMap
  [!?universalMap openOverrideForSelectBlock]
  [!?universalMap openBranch]
#--- Analyze instruction list
  @instructionListIR instructionGenerationList = {}
  @allocaList bootAllocaList = {}
  [mInstructionList analyzeRoutineInstructionList
    !self:voidType ()
    !routineAttributes:.boot | .controlRegisterReadable
    !routineNameForInvocationGraph:routineNameForInvocationGraph
    !context:inContext
    !mode:.bootMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioIntermediateCodeStruct.mStaticEntityMap
    !?variableMap:universalMap
    !?alloca:bootAllocaList
    !?generatedCode:instructionGenerationList
  ]
#--- End of variableMap
  [universalMap checkLocalVariableFinalState !?instructionGenerationList]
  [!?universalMap closeBranch !mEndOfBootLocation]
  [!?universalMap closeOverride !mEndOfBootLocation]
#--- Code generation
  ioIntermediateCodeStruct.mBootList +=
    !mDriverName.string
    !bootAllocaList
    !instructionGenerationList
    !mEndOfBootLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @bootListIR {
  @string mDriverName
  @allocaList mAllocaList
  @instructionListIR mInstructionListIR
  @location mEndOfInitLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @bootListIR generateCode 
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  ioLLVMcode += llvmTitleComment (!"Boot routines")
  ioLLVMcode += "define internal void @boot ()" + llvmAttributeFunction () + "{\n"
  for boot in self do
    ioLLVMcode += "  call void @boot." + boot.mDriverName + " ()\n"
  end
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
  for boot in self do
    ioLLVMcode += llvmSeparatorLine () + "\n"
    ioLLVMcode += "define internal void @boot." + boot.mDriverName + " ()" + llvmAttributeFunction () + "{\n"
    [boot.mAllocaList generateAllocaList !?ioLLVMcode]
    [boot.mInstructionListIR instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
    ioLLVMcode += "  ret void\n"
    ioLLVMcode += "}\n\n"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

