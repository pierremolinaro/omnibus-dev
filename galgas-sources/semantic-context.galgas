#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#    B U I L D    S E M A N T I C    C O N T E X T                                                                     *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @typeKind {
  case boolean
  case boolset
  case literalString
  case enumeration (@enumConstantMap constantMap)
  case structure (@propertyMap propertyMap @propertyList propertyList)
  case integer (@bigint min @bigint max @bool unsigned @uint bitCount)
  case staticInteger
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @infixOperatorMap {
  @unifiedTypeMap-proxy mResultType
  @infixOperatorDescription mOperation
  insert insertKey error message "** internal error **"
  search searchKey error message "** internal error **"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @prefixOperatorMap {
#  @unifiedTypeMap-proxy mResultType
  insert insertKey error message "** internal error **"
  search searchKey error message "prefix operation is not defined for $%K type"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @staticStringMap
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @staticStringMap {
  @uint mIndex
  insert insertKey error message "-- internal error --"
  search searchKey error message "-- internal error --"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

setter @staticStringMap findOrAddStaticString ?@string inString !@uint outIndex {
  if [self hasKey !inString]  then
    [self searchKey ![inString nowhere] ?outIndex]
  else
    outIndex = [self count]
    [!?self insertKey ![inString nowhere] !outIndex]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @globalConstantMap {
  @operandIR mValue
  insert insertKey error message "the '%K' constant is already declared in %L"
  search searchKey error message "there is no '%K' constant"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @globalVariableMap {
  @unifiedTypeMap-proxy mVariableType
  @stringset mExecutionModeSet
  @allowedRoutineMap mAllowedRoutineMap
  @valueIR mInitialValue
  @bool mIsConstant
  insert insertKey error message "the '%K' global variable is already declared in %L"
  search searchKey error message "there is no '%K' global variable"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @modeMap {
  insert insertKey error message "the '%%%K' mode is already declared"
  search searchKey error message "there is no '%%%K' mode"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc checkMode
  ?requiredModes:let @stringset inRequiredModes
  ?possibleModes:let @stringset inPossibleModes
  ?error:let @location inErrorLocation
{
  if (inPossibleModes & inRequiredModes) != inRequiredModes  then
    let missingModes = inRequiredModes - inPossibleModes
    var s = "cannot be accessed in mode"
    s += if [missingModes count] > 1 then "s" else "" end
    s += ": "
    for (m) in missingModes
    do  s += "`" + m
    between s += ", "
    end
    error inErrorLocation : s
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#map @initializerMap {
#  @operandIRList mInitialValueList
#  insert insertKey error message "the '%K' initializer is already declared in %L"
#  search searchKey error message "there is no '%K' initializer"
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#map @typeInitializerMap {
#  @string mLLVMTypeName
#  @initializerMap mInitializerMap
#  insert insertKey error message "the '$%K' type is already declared in %L"
#  search searchKey error message "there is no '$%K' type"
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sharedmap @unifiedTypeMap %selectors {
  @string llvmTypeName # For Example: i23, %struct.toto
  @typeKind kind
  @typedConstantMap typedConstantMap
  @procedureMap procedureMap
  @functionMap functionMap
  @bool copiable
  @bool equatable
  @bool comparable
  @unifiedTypeMap-proxy enumerationType # .null if type is not enumerable

  insert insertKey error message "the '%K' type is already declared in %L"
  search searchKey error message "there is no '%K' type"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @typedConstantMap {
  @valueIR mValue
  insert insertKey error message "the '%K' constructor is already declared in %L"
  search searchKey error message "there is no '%K' constructor"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @typeList {
  @unifiedTypeMap-proxy mActualType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @operandIRList {
  @operandIR mOperand
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @constructorMap {
  @operandIRList mInitValues
  insert insertKey error message "-- internal error --"
  search searchKey error message "-- internal error --"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @semanticContext {
  @uint mPointerSize # in bit count
  @unifiedTypeMap-proxy mBooleanType
  @unifiedTypeMap-proxy mLiteralIntegerType
  @unifiedTypeMap-proxy mExceptionCodeType
  @unifiedTypeMap-proxy mExceptionLineType
  @unifiedTypeMap mTypeMap
#  @typeInitializerMap mTypeInitializerMap
  @procedureMap mProcedureMap
  @functionMap mFunctionMap
  @initRoutineMap mInitRoutineMap
  @exceptionRoutinePriorityMap mExceptionSetupRoutinePriorityMap 
  @exceptionRoutinePriorityMap mExceptionLoopRoutinePriorityMap 
  @registerMap mRegisterMap
  @globalConstantMap mGlobalConstantMap
  @globalVariableMap mGlobalVariableMap
  @constructorMap mConstructorMap
  @modeMap mModeMap
  @infixOperatorMap mEqualOperatorMap           # ==
  @infixOperatorMap mNonEqualOperatorMap        # !=
  @infixOperatorMap mStrictInfOperatorMap       # <
  @infixOperatorMap mInfEqualOperatorMap        # <=
  @infixOperatorMap mStrictSupOperatorMap       # >
  @infixOperatorMap mSupEqualOperatorMap        # >=
  @infixOperatorMap mAndOperatorMap             # &
  @infixOperatorMap mOrOperatorMap              # |
  @infixOperatorMap mXorOperatorMap             # ^
  @infixOperatorMap mBooleanXorOperatorMap      # xor
  @infixOperatorMap mAddOperatorMap             # +
  @infixOperatorMap mAddNoOvfOperatorMap        # &+
  @infixOperatorMap mSubOperatorMap             # -
  @infixOperatorMap mSubNoOvfOperatorMap        # &-
  @infixOperatorMap mMulOperatorMap             # *
  @infixOperatorMap mMulNoOvfOperatorMap        # &*
  @infixOperatorMap mDivOperatorMap             # /
  @infixOperatorMap mDivNoOvfOperatorMap        # &/
  @infixOperatorMap mModOperatorMap             # %
  @infixOperatorMap mModNoOvfOperatorMap        # &%
  @infixOperatorMap mLeftShiftOperatorMap       # <<
  @infixOperatorMap mRightShiftOperatorMap      # >>
  @prefixOperatorMap mUnaryMinusOperatorMap     # - and &-
  @prefixOperatorMap mNotOperatorMap            # not
  @prefixOperatorMap mUnsignedComplementOperatorMap # ~
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractDeclaration enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractDeclaration initAnalysis
  ?!context:@semanticContext ioContext

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc buildSemanticContext
  ?orderedDeclarationList:let @declarationListAST inDeclarationListAST
  ?orderedConstantDeclarationList:let @globalConstantDeclarationListAST inOrderedConstantDeclarationList
  ?sourceFile:let @lstring inSourceFile
  ?ast:let @ast inAST
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  !context:@semanticContext outSemanticContext
{
  outSemanticContext = .default
#--- Add predefined modes
  [!?outSemanticContext.mModeMap insertKey !["boot" nowhere]]
  [!?outSemanticContext.mModeMap insertKey !["init" nowhere]]
  [!?outSemanticContext.mModeMap insertKey ![panicModeName () nowhere]]
#--- Enter init routines
  for initRoutine in inAST.mInitList do
    [initRoutine enterInContext
      !?context:outSemanticContext
    ]
  end
#--- Enter exception routines
  for execptionRoutine in inAST.mExceptionClauses do
    [execptionRoutine enterInContext
      !?context:outSemanticContext
    ]
  end
#---
  for (declaration) in inDeclarationListAST do
    [declaration enterInContext
      !procedureDeclarationList:inAST.mProcedureListAST
      !?context:outSemanticContext
      !?staticStringMap:ioGlobalLiteralStringMap
    ]
  end
#--- Solve exception types
  if [inAST.mExceptionTypes length] != 1 then
    error ["" nowhere]
    : "exactly one exception type declaration should be provided (found:" + [inAST.mExceptionTypes length] + ")"
    for () in inAST.mExceptionTypes do
      error mExceptionCodeTypeName:"exception type declaration is here"
    end
  else
    [inAST.mExceptionTypes first ?let @lstring exceptionCodeTypeName ?let @lstring exceptionLineTypeName]
    outSemanticContext.mExceptionCodeType = @unifiedTypeMap-proxy.searchKey {
      !outSemanticContext.mTypeMap
      !exceptionCodeTypeName
    }
    outSemanticContext.mExceptionLineType = @unifiedTypeMap-proxy.searchKey {
      !outSemanticContext.mTypeMap
      !exceptionLineTypeName
    }
  end
#--- Enter global constants in context
  enterGlobalConstantsInContext (
   !orderedConstantDeclarationList:inOrderedConstantDeclarationList
   !sourceFile:inSourceFile
   !?staticStringMap:ioGlobalLiteralStringMap
   !?context: outSemanticContext
  )
#--- Enter control registers in context
  enterControlRegistersInContext (
   !inAST.mControlRegisterDeclarationListAST
   !?context: outSemanticContext
  )
#--- Enter procedures in context
  for procedure in inAST.mProcedureListAST do
    [procedure enterInContext !?context: outSemanticContext]
  end
#--- enter functions in context
  for function in inAST.mFunctionListAST do
    [function enterInContext !?context: outSemanticContext]
  end
#--- Check required procs mode
  if @uint.errorCount == 0 then
    for requiredProc in inAST.mRequiredProcList do
      for (mode) in requiredProc.mProcedureModeList do
        [outSemanticContext.mModeMap searchKey !mode]
      end
    end
  end
#--- Build instanciation map
  if @uint.errorCount == 0 then
    for (declaration) in inAST.mDeclarationList do
      [declaration initAnalysis
        !?context:outSemanticContext
       ]
    end
  end
#--- Check global var declaration
  if @uint.errorCount == 0 then
    for globalVar in inAST.mGlobalVarDeclarationList do
      [globalVar enterInContext
        !?context:outSemanticContext
        !?staticStringMap:ioGlobalLiteralStringMap
      ]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func solveInferredType
  ?targetType:let @unifiedTypeMap-proxy inTargetType
  ?sourceType:let @unifiedTypeMap-proxy inSourceType
  ?errorLocation:let @location inErrorLocation
  -> @unifiedTypeMap-proxy outType
{
  if inSourceType == .null then
    if inTargetType == .null then
      error inErrorLocation : "Cannot infer type" : outType
    else
      outType = inTargetType
    end
  else
    outType = inSourceType
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func combineTypeNamesForInfixOperator ?let @string inLeftTypeName ?let @string inRightTypeName -> @lstring outResult {
  outResult = ["{" + inLeftTypeName + ", " + inRightTypeName + "}" nowhere]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
