#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @requiredFunctionDeclarationListAST {
  public var @lstring mName
  public var @mode mExecutionMode
  public var @bool mIsExported
  public var @routineFormalArgumentListAST mFormalArgumentList
  public var @location mEndOfProcLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $required$
    <function_header>
      !?ioAST
      ?mode:let @mode mode
      ?name:let procName
      ?attributes:let attributeList
      ?formalArguments:let procFormalArgumentList
    var isGlobal = false
    for (attribute) in attributeList do
      if attribute.string == exportedAttribute () then
        if isGlobal then
          error attribute : "duplicated attribute" fixit { remove }
        else
          isGlobal = true
        end
      else
        error attribute : "invalid attribute" fixit { remove replace "@" + exportedAttribute () }
      end
    end
    ioAST.mRequiredFunctionListAST +=
      !procName
      !mode
      !isGlobal
      !procFormalArgumentList
      !.here
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc checkRequiredProcedures
  ?ast:let @ast inAST
  ?context: let @semanticContext inContext
  ?endOfSourceFile:let @location unused inEndOfSourceFile
{
  for requiredFunction in inAST.mRequiredFunctionListAST do
    let requiredFunctionSignature = [requiredFunction.mFormalArgumentList routineSignature !requiredFunction.mName]
    let requiredFunctionMangledName = requiredFunction.mName.string + requiredFunctionSignature
    if not [inContext.mRoutineMap hasKey !requiredFunctionMangledName] then
      error requiredFunction.mName : "required func is not implemented"
    else
      [inContext.mRoutineMap searchKey
        ![requiredFunctionMangledName nowhere]
        ?let implementedPublic
        ?let implementedSignature
        ?let implementedReturnTypeProxy # null if no returned value
        ?let unused implementedModeDictionary
        ?let implementedIsExported
        ?let implementedMode
      ]
      let errorLocation = [inContext.mRoutineMap locationForKey !requiredFunctionMangledName]
    #--- Check signatures
      routineTypedSignature2 (!inContext.mTypeMap !requiredFunction.mFormalArgumentList ?let requiredTypedSignature)
      if [requiredTypedSignature typedString] != [implementedSignature typedString] then
        error errorLocation
        : "function signature should be " + [requiredTypedSignature typedString] + " (as required by required function declaration)"    
      end
    #--- Check return type
      if implementedReturnTypeProxy != .null then
        error errorLocation : "function should not return a value (as required by required function declaration)"    
#      elsif requiredFunction.mIsSafe && not implementedIsSafe then
#        error errorLocation : "function should be @safe (as required by required function declaration)"    
      end
#    #--- Check safety
#      if implementedIsSafe && not requiredFunction.mIsSafe then
#        error errorLocation : "function should not be @safe (as required by required function declaration)"    
#      elsif requiredFunction.mIsSafe && not implementedIsSafe then
#        error errorLocation : "function should be @safe (as required by required function declaration)"    
#      end
    #--- Check mode
      if implementedMode != requiredFunction.mExecutionMode then
        error errorLocation : "required mode is '" + requiredFunction.mExecutionMode + "'"    
      end
    #--- Check public
      if not implementedPublic then
        error errorLocation : "function should be public (as required by required function declaration)"    
      end
    #--- Check attributes
      if requiredFunction.mIsExported && not implementedIsExported then
        error errorLocation
        : "missing @" + exportedAttribute () + " attribute (required function declaration names it)"
        fixit { insert after " @" + exportedAttribute () }
      elsif implementedIsExported && not requiredFunction.mIsExported then
        error errorLocation
        : "incorrect @" + exportedAttribute () + " attribute (required function declaration does not name it)"
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
