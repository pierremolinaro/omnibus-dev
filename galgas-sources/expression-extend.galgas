#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @extendExpressionAST : @expressionAST {
  public var @expressionAST mExpression
  public var @lstring mTypeName
  public var @location mEndOfExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    $extend$
    let @lstring typeName
    select
      typeName = ["" here]
    or
      <type_definition> !?ioAST ?typeName
    end
    $($
    <expression> !?ioAST ?outExpression
    let endOfExpression = @location.here
    $)$
    outExpression = @extendExpressionAST.init {
      !outExpression
      !typeName
      !endOfExpression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [self.mExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
  if self.mTypeName.string != "" then
    [!?ioGraph noteNode !self.mTypeName]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [self.mExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  if self.mTypeName.string != "" then
    [!?ioGraph noteNode !self.mTypeName]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendExpressionAST analyzeExpression
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?optionalTargetType:let @omnibusType inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- Analyze expression
  [self.mExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR expressionResult
  ]
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?expressionResult
  ]  
#--- Analyze type
  let @omnibusType resultType = if self.mTypeName.string == ""
    then inOptionalTargetType
    else [[inContext.mTypeMap searchKey !self.mTypeName] type]
  end
#--- Check types
  if not [resultType.kind isInteger] then
    error self.mTypeName : "this type is not an integer type" : outResult
  elsif not [[expressionResult type].kind isInteger] then
    error self.mEndOfExpression : "expression type is not an integer type" : outResult
  else
    [[expressionResult type].kind extractInteger ?2* ?unsigned:let sourceIsUnsigned ?bitCount:let sourceSize]
    [resultType.kind extractInteger ?2* ?unsigned:let targetIsUnsigned ?bitCount:let targetSize]
    if sourceIsUnsigned && targetIsUnsigned then # unsigned -> unsigned
      if sourceSize > targetSize then
        error self.mTypeName: "cannot extend, use convert or truncate"
      elsif sourceSize == targetSize then
        error self.mTypeName: "same size: useless extend operation"
      end
    elsif sourceIsUnsigned && not targetIsUnsigned then # unsigned -> signed
      if sourceSize >= targetSize then
        error self.mTypeName: "cannot extend, use convert or truncate"
      end
    elsif not sourceIsUnsigned && targetIsUnsigned then # signed -> unsigned
      error self.mTypeName: "cannot extend, use convert or truncate"
    else # signed -> signed
      if sourceSize > targetSize then
        error self.mTypeName: "cannot extend, use convert or truncate"
      elsif sourceSize == targetSize then
        error self.mTypeName: "same size: useless extend operation"
      end
    end
    getNewTempValue (!resultType !?ioTemporaries ?outResult)
    [!?ioInstructionGenerationList appendExtend
      !outResult
      !expressionResult
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
