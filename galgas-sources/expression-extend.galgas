#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @extendExpressionAST : @expressionAST {
  @expressionAST mExpression
  @lstring mTypeName
  @location mEndOfExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  rule <primary> !@expressionAST outExpression {
    $extend$
    <expression> ?outExpression
    let endOfExpression = @location.here
    $:$
    $typeName$ ?let typeIdentifier
    outExpression = @extendExpressionAST.new {
      !outExpression
      !typeIdentifier
      !endOfExpression
    }
  }

  #••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [mExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
  let typeName = @lstring.new {!"$" + mTypeName !mTypeName.location}
  [!?ioGraph noteNode !typeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  let typeName = @lstring.new {!"$" + mTypeName !mTypeName.location}
  [!?ioGraph noteNode !typeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @extendExpressionAST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendExpressionAST analyzeExpression
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!localVariableMap:@localVariableMap ioLocalVariableMap
  ?!namedObjectMap:@namedObjectMap ioNamedObjectMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- Analyze expression
  [mExpression analyzeExpression
    !self:inSelfType
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !inGuard:inGuard
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?localVariableMap: ioLocalVariableMap
    !?namedObjectMap: ioNamedObjectMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR expressionResult
  ]
#--- Analyze type
  let resultType = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mTypeName}
#--- Check types
  if not [[resultType kind] isInteger] then
    error mTypeName : "this type is not an integer type" : outResult
  elsif not [[expressionResult kind] isInteger] then
    error mEndOfExpression : "expression type is not an integer type" : outResult
  else
    [[expressionResult kind] integer ?min:* ?max:* ?unsigned:let sourceIsUnsigned ?bitCount:let sourceSize]
    [[resultType kind] integer ?min:* ?max:* ?unsigned:let targetIsUnsigned ?bitCount:let targetSize]
    if sourceIsUnsigned && targetIsUnsigned then # unsigned -> unsigned
      if sourceSize > targetSize then
        error mTypeName: "cannot extend, use convert or trunc"
      elsif sourceSize == targetSize then
        error mTypeName: "same size: useless extend operation"
      end
    elsif sourceIsUnsigned && not targetIsUnsigned then # unsigned -> signed
      if sourceSize >= targetSize then
        error mTypeName: "cannot extend, use convert or trunc"
      end
    elsif not sourceIsUnsigned && targetIsUnsigned then # signed -> unsigned
      error mTypeName: "cannot extend, use convert or trunc"
    else # signed -> signed
      if sourceSize > targetSize then
        error mTypeName: "cannot extend, use convert or trunc"
      elsif sourceSize == targetSize then
        error mTypeName: "same size: useless extend operation"
      end
    end
    getNewTempVariable (!resultType !?ioTemporaries ?outResult)
    [!?ioInstructionGenerationList appendExtend
      !outResult
      !expressionResult
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
