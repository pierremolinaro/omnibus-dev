#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @extendExpressionAST : @expressionAST {
  @expressionAST mExpression
  @lstring mTypeName
  @location mEndOfExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <primary> !@expressionAST outExpression {
    $extend$
    @lstring typeName
    select
      typeName = ["" here]
    or
      <type_definition> ?typeName
    end
    $($
    <expression> ?outExpression
    let endOfExpression = @location.here
    $)$
    outExpression = @extendExpressionAST.new {
      !outExpression
      !typeName
      !endOfExpression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [mExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
  if mTypeName.string != "" then
    let typeName = llvmTypeNameFromPLMname (!mTypeName)
    [!?ioGraph noteNode !typeName]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  if mTypeName.string != "" then
    let typeName = llvmTypeNameFromPLMname (!mTypeName)
    [!?ioGraph noteNode !typeName]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendExpressionAST analyzeExpression
  ?self:let @PLMType inSelfType
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?optionalTargetType:let @PLMType inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalValuedObjectMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- Analyze expression
  [mExpression analyzeExpression
    !self:inSelfType
    !inGuard:inGuard
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR expressionResultPossibleReference
  ]
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !expressionResultPossibleReference
    ?let expressionResult
  ]  
#--- Analyze type
  let @PLMType resultType = if mTypeName.string == ""
    then inOptionalTargetType
    else [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mTypeName} type]
  end
#--- Check types
  if not [resultType.kind isInteger] then
    error mTypeName : "this type is not an integer type" : outResult
  elsif not [[expressionResult type].kind isInteger] then
    error mEndOfExpression : "expression type is not an integer type" : outResult
  else
    [[expressionResult type].kind integer ?2* ?unsigned:let sourceIsUnsigned ?bitCount:let sourceSize]
    [resultType.kind integer ?2* ?unsigned:let targetIsUnsigned ?bitCount:let targetSize]
    if sourceIsUnsigned && targetIsUnsigned then # unsigned -> unsigned
      if sourceSize > targetSize then
        error mTypeName: "cannot extend, use convert or truncate"
      elsif sourceSize == targetSize then
        error mTypeName: "same size: useless extend operation"
      end
    elsif sourceIsUnsigned && not targetIsUnsigned then # unsigned -> signed
      if sourceSize >= targetSize then
        error mTypeName: "cannot extend, use convert or truncate"
      end
    elsif not sourceIsUnsigned && targetIsUnsigned then # signed -> unsigned
      error mTypeName: "cannot extend, use convert or truncate"
    else # signed -> signed
      if sourceSize > targetSize then
        error mTypeName: "cannot extend, use convert or truncate"
      elsif sourceSize == targetSize then
        error mTypeName: "same size: useless extend operation"
      end
    end
    getNewTempValue (!resultType !?ioTemporaries ?outResult)
    [!?ioInstructionGenerationList appendExtend
      !outResult
      !expressionResult
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
