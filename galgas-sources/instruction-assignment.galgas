#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @assignmentInstructionAST : @instructionAST {
  @lstring mTargetVarName
  @expressionAST mSourceExpression
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $identifier$ ?let varName
    $=$
    <expression> ?let @expressionAST expression
    ioInstructionList += !@assignmentInstructionAST.new {
      !varName
      !expression
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @assignmentInstructionAST analyze
  ?routineNameForInvocationGraph:let @lstring unused inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Get target type
  [!?ioVariableMap neutralAccess
    !mTargetVarName
    ?let targetType
    ?5*
  ]
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !optionalReceiverType:inReceiverType
    !optionalTargetType:targetType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?expressionType:let expressionType
    ?result:@variableKindIR sourceValueName
  ]
#--- Check inferred type
#  if [targetType key] != [expressionType key] then
#    error mTargetVarName : "source expression type is '" + [expressionType key]
#      + "', and is not compatible with target type '" + [targetType key] + "'"
#  end
#  if mTargetVarName.string == "x" then
#  log expressionType, targetType
#  end
  checkAssignmentCompatibility (
    !sourceType:expressionType
    !targetType:targetType
    !errorLocation:mTargetVarName.location
  )
#--- Write local variable
  [!?ioVariableMap searchForWriteAccess
    !mTargetVarName
    ?*
    ?let varModeSet
    ?let unused targetVar
    ?let targetVariableKind
    ?let isCopiable
    ?*
  ]
#--- Check mode
  checkMode (
    !requiredModes:inModeSet
    !possibleModes:varModeSet
    !error:mTargetVarName.location
  )
  if not isCopiable then
    error mTargetVarName : "the '" + mTargetVarName + "' variable is not copiable"
  end
#--- Code generation
  ioInstructionGenerationList += !@assignmentInstructionIR.new {
   !targetVariableKind
   !targetType
   !sourceValueName
 }
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

class @assignmentInstructionIR : @abstractInstructionIR {
  @variableKindIR mTargetVariable
  @unifiedTypeMap-proxy mTargetVarType
  @variableKindIR mSourceValue
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @assignmentInstructionIR instructionCode -> @string outCode {
  outCode = [mTargetVariable mangledName] + " = " + [mSourceValue mangledName] + " ;\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @assignmentInstructionIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mTargetVariable enterAccessibleEntities !?ioAccessibleEntities]
  [mSourceValue enterAccessibleEntities !?ioAccessibleEntities]
}

#----------------------------------------------------------------------------------------------------------------------*
