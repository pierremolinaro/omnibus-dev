#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @varAssignmentNoSelfInstructionAST : @instructionAST {
  @LValueNoSelfAST mAssignmentTargetAST
  @expressionAST mSourceExpression
}

#·······················································································································

class @varAssignmentSelfInstructionAST : @instructionAST {
  @LValueSelfAST mAssignmentTargetAST
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList {
    <lvalue_without_self> ?let assignmentTargetAST
  #--- Source expression
    $=$
    <expression> ?let sourceExpression
  #--- AST
    ioInstructionList += !@varAssignmentNoSelfInstructionAST.new {
      !assignmentTargetAST.mIdentifier.location
      !assignmentTargetAST
      !sourceExpression
    }
  }

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList {
    <lvalue_with_self> ?let assignmentTargetAST
  #--- Source expression
    $=$
    <expression> ?let sourceExpression
  #--- AST
    ioInstructionList += !@varAssignmentSelfInstructionAST.new {
      !assignmentTargetAST.mSelfLocation
      !assignmentTargetAST
      !sourceExpression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varAssignmentNoSelfInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  [mAssignmentTargetAST noteInstructionTypesInPrecedenceGraph !?ioGraph]
}

#·····················································································································

override method @varAssignmentSelfInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  [mAssignmentTargetAST noteInstructionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SOLVE ENTITIES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @accessInAssignmentSE {
  case property (@lstring name)
  case arrayAccess (@expressionSE index @location endOfIndex)
}

#·······················································································································

list @accessInAssignmentListSE {
  @accessInAssignmentSE mAccess
}

#·······················································································································

class @selfPropertyAssignmentInstructionSE : @instructionSE {
  @lstring mPropertyName
  @accessInAssignmentListSE mAccessList
  @expressionSE mSourceExpression
}

#·······················································································································

class @registerAssignmentInstructionSE : @instructionSE {
  @lstring mRegisterName
  @accessInAssignmentListSE mAccessList
  @expressionSE mSourceExpression
}

#·······················································································································

class @globalVariableAssignmentInstructionSE : @instructionSE {
  @lstring mGlobalVariableName
  @accessInAssignmentListSE mAccessList
  @expressionSE mSourceExpression
}

#·······················································································································

class @localVariableAssignmentInstructionSE : @instructionSE {
  @lstring mLocalVariableName
  @accessInAssignmentListSE mAccessList
  @expressionSE mSourceExpression
}

#·······················································································································

override method @varAssignmentNoSelfInstructionAST solveEntities
  ?context:let @semanticContext inSemanticContext
  ?!@instructionListSE ioInstructionListSE
{
  [mAssignmentTargetAST solveEntitiesForAssignmentInstruction
    !context:inSemanticContext
    !mInstructionLocation
    !mSourceExpression
    !?ioInstructionListSE
  ]
}

#·······················································································································

override method @varAssignmentSelfInstructionAST solveEntities
  ?context:let @semanticContext inSemanticContext
  ?!@instructionListSE ioInstructionListSE
{
  [mAssignmentTargetAST solveEntitiesForAssignmentInstruction
    !context:inSemanticContext
    !mInstructionLocation
    !mSourceExpression
    !?ioInstructionListSE
  ]
}

#·······················································································································

method @LValueNoSelfAST solveEntitiesForAssignmentInstruction
  ?context:let @semanticContext inSemanticContext
  ?let @location inInstructionLocation
  ?let @expressionAST inSourceExpressionAST
  ?!@instructionListSE ioInstructionListSE
{
  @accessInAssignmentListSE accessList = {}
  for (access) in mAccessList do
    switch access
    case property (name) :
      accessList += !.property {!name:name}
    case arrayAccess (indexAST endOfIndex) :
      [indexAST solveEntities !context:inSemanticContext ?let index]
      accessList += !.arrayAccess {!index:index !endOfIndex:endOfIndex}
    end
  end
  [inSourceExpressionAST solveEntities !context:inSemanticContext ?let sourceExpression]
  if [inSemanticContext.mControlRegisterMap hasKey !mIdentifier] then
    ioInstructionListSE += !@registerAssignmentInstructionSE.new {
      !inInstructionLocation
      !mIdentifier
      !accessList
      !sourceExpression
    }
  elsif [inSemanticContext.mGlobalVariableMap hasKey !mIdentifier] then
    ioInstructionListSE += !@globalVariableAssignmentInstructionSE.new {
      !inInstructionLocation
      !mIdentifier
      !accessList
      !sourceExpression
    }
  elsif [inSemanticContext.mGlobalConstantMap hasKey !mIdentifier] then
    error mIdentifier : "a constant cannot be assigned"
  else # By default, access to local variable
    ioInstructionListSE += !@localVariableAssignmentInstructionSE.new {
      !inInstructionLocation
      !mIdentifier
      !accessList
      !sourceExpression
    }
  end
}

#·······················································································································

method @LValueSelfAST solveEntitiesForAssignmentInstruction
  ?context:let @semanticContext inSemanticContext
  ?let @location inInstructionLocation
  ?let @expressionAST inSourceExpressionAST
  ?!@instructionListSE ioInstructionListSE
{
  @accessInAssignmentListSE accessList = {}
  for (access) in mAccessList do
    switch access
    case property (name) :
      accessList += !.property {!name:name}
    case arrayAccess (indexAST endOfIndex) :
      [indexAST solveEntities !context:inSemanticContext ?let index]
      accessList += !.arrayAccess {!index:index !endOfIndex:endOfIndex}
    end
  end
  [inSourceExpressionAST solveEntities !context:inSemanticContext ?let sourceExpression]
  ioInstructionListSE += !@selfPropertyAssignmentInstructionSE.new {
    !inInstructionLocation
    !mIdentifier
    !accessList
    !sourceExpression 
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varAssignmentNoSelfInstructionAST analyze
  ?self:let @PLMType inSelfType
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@unifiedSymbolMapEx ioVariableMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  [mAssignmentTargetAST analyzeAssignmentTarget
    !self: inSelfType
    !targetAccessKind:.write
    !propertiesAreMutable: inRoutineCanMutateProperties
    !directAccessToPropertiesAllowed: inDirectAccessToPropertiesAllowed
    !routineNameForInvocationGraph: inCallerNameForInvocationGraph
    !context: inContext
    !mode: inCurrentMode
    !?temporary: ioTemporaries
    !?staticStringMap: ioGlobalLiteralStringMap
    !?variableMap: ioVariableMap
    !?variableMap:ioUniversalMap
    !?alloca: ioAllocaList
    !?instructionListIR: ioInstructionGenerationList
    ?@objectIR currentObject
    ?globalVariableReceiverName:let unused globalVariableReceiverName
  ]
  if [currentObject isPossibleFunction] then
    error [mAssignmentTargetAST mIdentifier] : "invalid assignment target" : currentObject
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:[currentObject type]
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR sourceOperandPossibleReference
  ]
  [!?ioInstructionGenerationList appendLoadFromReference
    !?ioTemporaries
    !sourceOperandPossibleReference
    ![mAssignmentTargetAST mIdentifier]
    ?let sourceOperand
  ]  
  let result = checkAssignmentCompatibility (
    !source:sourceOperand
    !targetAnnotationType:[currentObject type]
    !errorLocation:[mAssignmentTargetAST mIdentifier]
    !staticTypeAllowed:false
  )
  [!?ioInstructionGenerationList appendStoreFromReference !currentObject ![mAssignmentTargetAST mIdentifier] !result]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varAssignmentSelfInstructionAST analyze
  ?self:let @PLMType inSelfType
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@unifiedSymbolMapEx ioVariableMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  [mAssignmentTargetAST analyzeAssignmentTarget
    !self: inSelfType
    !targetAccessKind:.write
    !propertiesAreMutable: inRoutineCanMutateProperties
    !directAccessToPropertiesAllowed: inDirectAccessToPropertiesAllowed
    !routineNameForInvocationGraph: inCallerNameForInvocationGraph
    !context: inContext
    !mode: inCurrentMode
    !?temporary: ioTemporaries
    !?staticStringMap: ioGlobalLiteralStringMap
    !?variableMap: ioVariableMap
    !?variableMap:ioUniversalMap
    !?alloca: ioAllocaList
    !?instructionListIR: ioInstructionGenerationList
    ?@objectIR currentObject
    ?globalVariableReceiverName:let unused globalVariableReceiverName
  ]
  if [currentObject isPossibleFunction] then
    error [mAssignmentTargetAST mIdentifier] : "invalid assignment target" : currentObject
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:[currentObject type]
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR sourceOperandPossibleReference
  ]
  [!?ioInstructionGenerationList appendLoadFromReference
    !?ioTemporaries
    !sourceOperandPossibleReference
    ![mAssignmentTargetAST mIdentifier]
    ?let sourceOperand
  ]  
  let result = checkAssignmentCompatibility (
    !source:sourceOperand
    !targetAnnotationType:[currentObject type]
    !errorLocation:[mAssignmentTargetAST mIdentifier]
    !staticTypeAllowed:false
  )
  [!?ioInstructionGenerationList appendStoreFromReference !currentObject ![mAssignmentTargetAST mIdentifier] !result]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
