#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @assignmentInstructionAST : @instructionAST {
  @lstring mTargetVarName
  @lstringlist mFieldList
  @expressionAST mSourceExpression
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $identifier$ ?let varName
    @lstringlist fieldList = {}
    repeat
    while
      $.$
      $identifier$ ?let fieldName
      fieldList += !fieldName
    end
    $=$
    <expression> ?let @expressionAST expression
    ioInstructionList += !@assignmentInstructionAST.new {
      !varName
      !fieldList
      !expression
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @assignmentInstructionAST analyze
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Get target type
  [!?ioVariableMap neutralAccess
    !mTargetVarName
    ?@unifiedTypeMap-proxy targetType
    ?6*
  ]
#--- Analyze field list
  for (fieldName) in mFieldList do
    switch [targetType kind]
    case boolean :
      error fieldName : "a boolean does not have fields"
    case boolset :
      error fieldName : "a boolset does not have fields"
    case literalString :
      error fieldName : "a static string does not have fields"
    case enumeration (*) :
      error fieldName : "an enumeration does not have fields"
    case structure (@propertyMap propertyMap) :
      [propertyMap searchKey !fieldName ?targetType]
    case integer (* * * *) :  
      error fieldName : "an integer does not have fields"
    end
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalReceiverType:inReceiverType
    !optionalTargetType:targetType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?type:let expressionType
    ?result:@operandIR sourceValueName
  ]
  checkAssignmentCompatibility (
    !sourceType:expressionType
    !targetType:targetType
    !errorLocation:mTargetVarName.location
  )
#--- Write local variable
  [!?ioVariableMap searchForWriteAccess
    !mTargetVarName
    ?*
    ?let accessIsAllowed
    ?let unused targetVar
    ?let targetVariableKind
    ?let isCopiable
    ?2*
  ]
  if not accessIsAllowed then
    error mTargetVarName : "routine has no access right on the this variable"
  end
  if not isCopiable then
    error mTargetVarName : "the '" + mTargetVarName + "' variable is not copiable"
  end
#--- Code generation
  @assignmentTargetIR target
  switch targetVariableKind
  case register (@lstring name @bigint address) :
    target = .register {!name:name !address:address}
  case globalVariable (@lstring name) :
    target = .globalVariable {!name:name}
  case localVariable (@lstring name) :
    target = .localVariable {!name:name}
  case inArgument (@lstring name) :
    target = .inArgument {!name:name}
  case inOutArgument (@lstring name) :
    target = .inOutArgument {!name:name}
  case outArgument (@lstring name) :
    target = .outArgument {!name:name}
  case localConstant (@lstring name) :
     error name : "INTERNAL ERROR" : target
  case globalConstant (@operandIR unused value) :
     error .nowhere : "INTERNAL ERROR" : target
  case temporaryConstant (@uint unused idx) :
     error .nowhere : "INTERNAL ERROR" : target
  case localAccess (@lstring access) :
    target = .localAccess {!access:access}
  case literalUnsignedInteger (@bigint unused value) :
     error .nowhere : "INTERNAL ERROR" : target
  case literalSignedInteger (@bigint unused value) :
     error .nowhere : "INTERNAL ERROR" : target
  case literalString (@string unused value @string unused name) :
     error .nowhere : "INTERNAL ERROR" : target
  case literalStructure (@literalStructureList value) :
    target = .literalStructure {!value:value}
  end
#  if [sourceValueName isLiteralStructure] then
#    getNewTempVariable (!?ioTemporaries ?let temporaryResult)
#    ioInstructionGenerationList += !@letInstructionWithAssignmentIR.new {
#      !targetType
#      !temporaryResult
#      !sourceValueName
#    }
#    ioInstructionGenerationList += !@assignmentInstructionIR.new {
#      !target
#      !mFieldList
#      !targetType
#      !temporaryResult
#    }
#  else
#    ioInstructionGenerationList += !@assignmentInstructionIR.new {
#      !target
#      !mFieldList
#      !targetType
#      !sourceValueName
#    }
#  end
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

class @assignmentInstructionIR : @abstractInstructionIR {
  @assignmentTargetIR mTargetVariable
  @lstringlist mFieldList
  @unifiedTypeMap-proxy mTargetVarType
  @variableKindIR mSourceValue
}

#----------------------------------------------------------------------------------------------------------------------*

override method @assignmentInstructionIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mTargetVariable enterAccessibleEntities !?ioAccessibleEntities]
  [mSourceValue enterAccessibleEntities !?ioAccessibleEntities]
}

#----------------------------------------------------------------------------------------------------------------------*

override method @assignmentInstructionIR llvmInstructionCode ?!@string ioCode {
  ioCode += ";--- " + [mTargetVariable mangledName]
  for (fieldName) in mFieldList do
    ioCode += "." + mangledNameForProperty (!name:fieldName.string)
  end
  ioCode += " = " + [mSourceValue mangledName] + "\n"
  let llvmType = [mTargetVarType llvmType]
  switch mTargetVariable
  case register (@lstring unused name @bigint address) :
    ioCode += "  store volatile " + llvmType + " " + [mSourceValue mangledName] + ", " + llvmType
           + "* (inttoptr i32 " + address + " to " + llvmType + "*) ; " + [address hexString] + "\n"
  case globalVariable (@lstring name) :
    ioCode += "%ptr = <<globalVariable>> " + name + "\n"
  case localVariable (@lstring name)  :
    ioCode += "%ptr = <<localVariable>> " + name + "\n"
  case inArgument (@lstring name):
    ioCode += "%ptr = <<inArgument>> " + name + "\n"
  case inOutArgument (@lstring name) :
    ioCode += "%ptr = <<inOutArgument>> " + name + "\n"
  case outArgument (@lstring name) :
    ioCode += "%ptr = <<outArgument>> " + name + "\n"
  case localConstant (@lstring name) :
    ioCode += "%ptr = <<localConstant>> " + name + "\n"
  case temporaryConstant (@uint idx) :
    ioCode += "%ptr = <<temporaryConstant>> " + idx + "\n"
  case localAccess (@lstring access) :
    ioCode += "%ptr = <<localAccess>> " + access + "\n"
  case literalStructure (@literalStructureList unused value) :
    ioCode += "%ptr = <<literalStructure>> \n"
  end
}

#----------------------------------------------------------------------------------------------------------------------*
