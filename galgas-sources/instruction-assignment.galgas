#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @assignmentInstructionAST : @instructionAST {
  @lstring mTargetVarName
  @lstringlist mFieldList
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $identifier$ ?let varName
    @lstringlist fieldList = {}
    repeat
    while
      $.$
      $identifier$ ?let fieldName
      fieldList += !fieldName
    end
    $=$
    <expression> ?let @expressionAST expression
    ioInstructionList += !@assignmentInstructionAST.new {
      !varName
      !fieldList
      !expression
    }
  }

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $self$ 
    let varName = @lstring.new {!"self" !.here}
    @lstringlist fieldList = {}
    repeat
    while
      $.$
      $identifier$ ?let fieldName
      fieldList += !fieldName
    end
    $=$
    <expression> ?let @expressionAST expression
    ioInstructionList += !@assignmentInstructionAST.new {
      !varName
      !fieldList
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assignmentInstructionAST analyze
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Get target type
  [!?ioVariableMap neutralAccess
    !mTargetVarName
    ?@unifiedTypeMap-proxy targetType
    ?*
    ?@objectInMemoryIR target
    ?3*
    ?let isConstant
  ]
  if isConstant then
    error mTargetVarName : "a constant cannot be modified"
  end
  var comment = mTargetVarName.string
#--- Analyze field list
  for (fieldName) in mFieldList do
    comment += "." + mangledNameForProperty (!name:fieldName.string)
    switch [targetType kind]
    case boolean :
      error fieldName : "a boolean does not have fields"
    case boolset :
      error fieldName : "a boolset does not have fields"
    case literalString :
      error fieldName : "a static string does not have fields"
    case enumeration (*) :
      error fieldName : "an enumeration does not have fields"
    case structure (* @propertyMap propertyMap * *) :
      comment += "." + fieldName
      [propertyMap searchKey !fieldName ?targetType ?let idx]
      getNewTempObjectInMemory (!targetType !?ioTemporaries ?let result)
      [!?ioInstructionGenerationList appendGetElementPtr
        !result
        !target
        !idx
      ]
      target = result
    case integer (* * * *) :  
      error fieldName : "an integer does not have fields"
    case literalInteger :  
      error fieldName : "an integer does not have fields"
    end
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalTargetType:targetType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?result:@operandIR sourceOperand
  ]
  comment += " = " + sourceOperand.mValue 
  checkAssignmentCompatibility (
    !source:sourceOperand
    !targetType:targetType
    !errorLocation:mTargetVarName.location
  )
#--- Write local variable
  [!?ioVariableMap searchForWriteAccess
    !mTargetVarName
    ?*
    ?let accessIsAllowed
    ?*
    ?let isCopiable
    ?3*
  ]
  if not accessIsAllowed then
    error mTargetVarName : "routine has no access right on the this variable"
  end
  if not isCopiable then
    error mTargetVarName : "the '" + mTargetVarName + "' variable is not copiable"
  end
#--- Code generation
  [!?ioInstructionGenerationList appendComment !comment]
  [target storeInMemory
    !value:sourceOperand
    !?instructionListIR:ioInstructionGenerationList
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

