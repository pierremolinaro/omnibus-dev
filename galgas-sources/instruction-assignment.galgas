#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @assignmentInstructionAST : @instructionAST {
  @LValueAST mTargetAST
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    <lvalue> !?ioAST ?let assignmentTargetAST
  #--- Source expression
    $=$
    <expression> !?ioAST ?let sourceExpression
  #--- AST
    ioInstructionList += !@assignmentInstructionAST.new {
      !assignmentTargetAST.mIdentifier.location
      !assignmentTargetAST
      !sourceExpression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assignmentInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  [mTargetAST noteInstructionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assignmentInstructionAST instructionSemanticAnalysis
  ?self:let @PLMType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{


  [ioUniversalMap searchValuedObjectType !selfType:inSelfType !mTargetAST ?let targetType]
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:targetType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR sourceOperandPossibleReference
  ]
#--- Analyze LValue
  [mTargetAST analyzeLValue
    !self: inSelfType
    !forAddressOf: false
    !routineAttributes:inRoutineAttributes
    !context: inContext
    !mode: inMode
    !?temporary: ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca: ioAllocaList
    !?instructionListIR: ioInstructionGenerationList
    ?let @LValueRepresentation lvalueIR
  ]
#--- If source is a value, transform it to a reference
  if not [sourceOperandPossibleReference isReference] then # Assignment from value
    let result = checkAssignmentCompatibility (
      !source:sourceOperandPossibleReference # loadedResultValue
      !targetAnnotationType:targetType
      !errorLocation:mTargetAST.mIdentifier
      !staticTypeAllowed:false
    )
    [!?ioInstructionGenerationList appendStoreToUniversalReference !lvalueIR.llvmName !targetType !result]
  else # Assignment from reference
  #--- Check assignment is defined
    let sourceOperand_llvmBaseTypeName = [sourceOperandPossibleReference type].llvmBaseTypeName
    if [targetType.assignmentSources hasKey !sourceOperand_llvmBaseTypeName] then
      [!?ioInstructionGenerationList appendCopyFromReferences
        !?ioTemporaries
        !errorLocation:mTargetAST.mIdentifier
        !source:sourceOperandPossibleReference
        !target:lvalueIR
      ]
    else
      var m = "no valid assignment to " + targetType.plmTypeDescriptionName
      m += " from " + [sourceOperandPossibleReference type].plmTypeDescriptionName
      error mTargetAST.mIdentifier : m
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#method @assignmentInstructionAST decomposeAssignmentFromWriteComputedProperties
#  ?self:let @PLMType inSelfType
#  ?!variableMap:@universalValuedObjectMap ioUniversalMap
#{
##--- Decompose LValue if it contains computed properties
#  if mTargetAST.mIdentifier.string == "" then # Receiver is "self"
#    var currentType = inSelfType
#    for (access) in mTargetAST.mAccessList do
#      switch access
#      case property (@lstring propertyName) :
#        let @propertySetterMap propertySetterMap = currentType.propertySetterMap
#        [propertySetterMap searchKey !propertyName ?* ?let @propertySetterKind propertyAccess]
#        switch propertyAccess
#        case computedProperty (2*) :
#          error propertyName : "a computed property cannot be used here" : currentType
#        case storedProperty (@PLMType propertyType *) :
#          currentType = propertyType
#        end
#      case arrayAccess (* endOfIndex *) :
#        switch currentType.subscript
#        case noSubscript :
#          error endOfIndex : "the receiver type is " + [currentType plmTypeDescriptionName] + " and does not accept subscripting"
#        case literalString :
#          error endOfIndex
#          : "the receiver type is a literal string and does not accept subscripting"
#          : currentType
#        case staticSubscript (@PLMType elementType *) :
#          currentType = elementType
#        end
#      end
#    end
#  else # Receiver is not self
#    [ioUniversalMap searchEntity !mTargetAST.mIdentifier ?let @valuedObject entity]
#    switch entity
#    case task (*) :
#    case driver (* *) :
#    case globalConstant (*) :
#    case localConstant (3*) :
#    case globalSyncInstance (2*) :
#    case localVariable (@PLMType variableType *) :
#      var currentType = variableType
#      if [mTargetAST.mAccessList length] == 0 then
#
#      else
#        for (access) in mTargetAST.mAccessList do
#          switch access
#          case property (@lstring propertyName) :
#            let @propertySetterMap propertySetterMap = currentType.propertySetterMap
#            [propertySetterMap searchKey !propertyName ?* ?let @propertySetterKind propertyAccess]
#            switch propertyAccess
#            case computedProperty (2*) :
#              error propertyName : "a computed property cannot be used here" : currentType
#            case storedProperty (@PLMType propertyType *) :
#              currentType = propertyType
#            end
#          case arrayAccess (* endOfIndex *) :
#            switch currentType.subscript
#            case noSubscript :
#              error endOfIndex : "the receiver type is " + [currentType plmTypeDescriptionName] + " and does not accept subscripting"
#            case literalString :
#              error endOfIndex
#              : "the receiver type is literal string and does not accept subscripting"
#              : currentType
#            case staticSubscript (@PLMType elementType *) :
#             currentType = elementType
#            end
#          end
#        end
#      end
#    end  
#  
#  end
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
