#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @assignmentInstructionAST : @instructionAST {
  @LValueAST mTargetAST
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    <lvalue> !?ioAST ?let assignmentTargetAST
  #--- Source expression
    $=$
    <expression> !?ioAST ?let sourceExpression
  #--- AST
    ioInstructionList += !@assignmentInstructionAST.new {
      !assignmentTargetAST.mIdentifier.location
      !assignmentTargetAST
      !sourceExpression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assignmentInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  [mTargetAST noteInstructionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assignmentInstructionAST instructionSemanticAnalysis
  ?self:let @PLMType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  [ioUniversalMap searchValuedObjectType !selfType:inSelfType !mTargetAST ?let targetType]
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:targetType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR sourceOperandPossibleReference
  ]
#--- Analyze LValue
  [mTargetAST analyzeLValue
    !self: inSelfType
    !readAccess:false
    !routineAttributes:inRoutineAttributes
    !context: inContext
    !mode: inMode
    !?temporary: ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca: ioAllocaList
    !?instructionListIR: ioInstructionGenerationList
    ?let @LValueRepresentation lvalueIR
  ]
#--- If source is a value, transform it to a reference
  if not [sourceOperandPossibleReference isReference] then
    var loadedResultValue = sourceOperandPossibleReference
    [!?ioInstructionGenerationList appendLoadWhenReference
      !?ioTemporaries
      !?loadedResultValue
    ]
    let result = checkAssignmentCompatibility (
      !source:loadedResultValue
      !targetAnnotationType:targetType
      !errorLocation:mTargetAST.mIdentifier
      !staticTypeAllowed:false
    )
    [!?ioInstructionGenerationList appendStoreToUniversalReference !lvalueIR.llvmName !targetType !result]
    sourceOperandPossibleReference = result
  end
#--- Check assignment is defined
  let sourceOperand_llvmBaseTypeName = [sourceOperandPossibleReference type].llvmBaseTypeName
  if [targetType.assignmentSources hasKey !sourceOperand_llvmBaseTypeName] then
  
  else
    var m = "no valid assignment to " + targetType.plmTypeDescriptionName
    m += " from " + [sourceOperandPossibleReference type].plmTypeDescriptionName
  
    error mTargetAST.mIdentifier : m
  end
  
 
 
 
 
 
  
  
  let t = [sourceOperandPossibleReference type]
  if not [t copyable] then
    error mTargetAST.mIdentifier : "source expression is not copyable"
  else
    [!?ioInstructionGenerationList appendCopyFromReferences
      !?ioTemporaries
      !errorLocation:mTargetAST.mIdentifier
      !source:sourceOperandPossibleReference
      !target:lvalueIR
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
