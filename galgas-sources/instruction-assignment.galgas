#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @selfVarAssignmentInstructionAST : @instructionAST {
  @lstring mTargetVarName
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @varAssignmentInstructionAST : @instructionAST {
  @lstring mTargetVarName
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $identifier$ ?let varName
    $=$
    <expression> ?let @expressionAST expression
    ioInstructionList += !@varAssignmentInstructionAST.new {
      !varName
      !expression
    }
  }

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $self$
    $.$
    $identifier$ ?let varName
    $=$
    <expression> ?let @expressionAST expression
    ioInstructionList += !@selfVarAssignmentInstructionAST.new {
      !varName
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfVarAssignmentInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varAssignmentInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varAssignmentInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Get target type
  [!?ioVariableMap neutralAccess
    !lkey:mTargetVarName
    ?type:@unifiedTypeMap-proxy targetType
    ?1*
    ?variableKind:@objectInMemoryIR target
    ?4*
  ]
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:targetType
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?result:@operandIR sourceOperand
  ]
  let result = checkAssignmentCompatibility (
    !source:sourceOperand
    !targetAnnotationType:targetType
    !errorLocation:mTargetVarName.location
    !staticTypeAllowed:false
  )
#--- Write local variable
  [!?ioVariableMap searchForWriteAccess
    !lkey:mTargetVarName
    ?1*
    ?readAccessAllowed:let accessIsAllowed
    ?1*
    ?copyable:let isCopyable
    ?2*
    ?isConstant:let isConstant
  ]
  if isConstant then
    error mTargetVarName : "a constant cannot be modified"
  end
  if not accessIsAllowed then
    error mTargetVarName : "routine has no access right on the this variable"
  end
  if not isCopyable then
    error mTargetVarName : "an $" + [targetType key] + " instance is not copyable"
  end
  [target storeInMemory !value:result !?instructionListIR:ioInstructionGenerationList]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfVarAssignmentInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  if inSelfType == .null then
    error mTargetVarName : "'self' is not available in this context"
  else
  #--- Analyze field name
    switch [inSelfType kind]
    case boolean :
      error mTargetVarName : "a boolean does not have fields"
    case boolset :
      error mTargetVarName : "a boolset does not have fields"
    case literalString :
      error mTargetVarName : "a static string does not have fields"
    case enumeration (*) :
      error mTargetVarName : "an enumeration does not have fields"
    case integer (* * * *) :  
      error mTargetVarName : "an integer does not have fields"
    case staticInteger :  
      error mTargetVarName : "an integer does not have fields"
    case opaque (*) :  
      error mTargetVarName : "an opaque type does not have fields"
    case structure (@propertyMap propertyMap *) :
      [propertyMap searchKey !mTargetVarName ?let targetType ?let idx]
      getLocalNameOfNewTempObjectInMemory (!targetType !?ioTemporaries ?let fieldPtr)
      [!?ioInstructionGenerationList appendGetElementPtrFromSelf
        !fieldPtr
        !inSelfType
        !idx
        !mTargetVarName.string
      ]
    #--- Analyze source expression
      [mSourceExpression analyzeExpression
        !self:inSelfType
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !optionalTargetType:targetType
        !context:inContext
        !modes:inModeSet
        !allowPanic:inAllowPanic
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?instructionListIR:ioInstructionGenerationList
        ?result:@operandIR sourceOperand
      ]
      let result = checkAssignmentCompatibility (
        !source:sourceOperand
        !targetAnnotationType:targetType
        !errorLocation:mTargetVarName.location
        !staticTypeAllowed:false
      )
      [fieldPtr storeInMemory
        !value:result
        !?instructionListIR:ioInstructionGenerationList
      ]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

