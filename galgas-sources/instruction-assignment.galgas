#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @assignmentInstructionAST : @instructionAST {
  @lstring mTargetVarName
  @lstringlist mFieldList
  @expressionAST mSourceExpression
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $identifier$ ?let varName
    @lstringlist fieldList = {}
    repeat
    while
      $.$
      $identifier$ ?let fieldName
      fieldList += !fieldName
    end
    $=$
    <expression> ?let @expressionAST expression
    ioInstructionList += !@assignmentInstructionAST.new {
      !varName
      !fieldList
      !expression
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @assignmentInstructionAST analyze
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Get target type
  [!?ioVariableMap neutralAccess
    !mTargetVarName
    ?@unifiedTypeMap-proxy targetType
    ?6*
  ]
#--- Analyze field list
  for (fieldName) in mFieldList do
    switch [targetType kind]
    case boolean :
      error fieldName : "a boolean does not have fields"
    case boolset :
      error fieldName : "a boolset does not have fields"
    case literalString :
      error fieldName : "a static string does not have fields"
    case enumeration (*) :
      error fieldName : "an enumeration does not have fields"
    case structure (* @propertyMap propertyMap) :
      [propertyMap searchKey !fieldName ?targetType]
    case integer (* * * *) :  
      error fieldName : "an integer does not have fields"
    end
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalReceiverType:inReceiverType
    !optionalTargetType:targetType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?expressionType:let expressionType
    ?result:@variableKindIR sourceValueName
  ]
  checkAssignmentCompatibility (
    !sourceType:expressionType
    !targetType:targetType
    !errorLocation:mTargetVarName.location
  )
#--- Write local variable
  [!?ioVariableMap searchForWriteAccess
    !mTargetVarName
    ?*
    ?let accessIsAllowed
    ?let unused targetVar
    ?let targetVariableKind
    ?let isCopiable
    ?2*
  ]
  if not accessIsAllowed then
    error mTargetVarName : "routine has no access right on the this variable"
  end
  if not isCopiable then
    error mTargetVarName : "the '" + mTargetVarName + "' variable is not copiable"
  end
#--- Code generation
  if [sourceValueName isLiteralStructure] then
    getNewTempVariable (!?ioTemporaries ?let temporaryResult)
    ioInstructionGenerationList += !@letInstructionWithAssignmentIR.new {
      !targetType
      !temporaryResult
      !sourceValueName
    }
    ioInstructionGenerationList += !@assignmentInstructionIR.new {
      !targetVariableKind
      !mFieldList
      !targetType
      !temporaryResult
    }
  else
    ioInstructionGenerationList += !@assignmentInstructionIR.new {
      !targetVariableKind
      !mFieldList
      !targetType
      !sourceValueName
    }
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

class @assignmentInstructionIR : @abstractInstructionIR {
  @variableKindIR mTargetVariable
  @lstringlist mFieldList
  @unifiedTypeMap-proxy mTargetVarType
  @variableKindIR mSourceValue
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @assignmentInstructionIR instructionCode -> @string outCode {
  outCode = [mTargetVariable mangledName]
  for (fieldName) in mFieldList do
    outCode += "." + mangledNameForProperty (!name:fieldName.string)
  end
  outCode += " = " + [mSourceValue mangledName] + " ;\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @assignmentInstructionIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mTargetVariable enterAccessibleEntities !?ioAccessibleEntities]
  [mSourceValue enterAccessibleEntities !?ioAccessibleEntities]
}

#----------------------------------------------------------------------------------------------------------------------*
