#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @varAssignmentInstructionAST : @instructionAST {
  @assignmentTargetAST mAssignmentTargetAST
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList {
    <assignment_target> ?let @assignmentTargetAST assignmentTargetAST
  #--- Source expression
    $=$
    <expression> ?let sourceExpression
  #--- AST
    ioInstructionList +=
      !assignmentTargetAST.mIdentifier.location
      !@varAssignmentInstructionAST.new {!assignmentTargetAST !sourceExpression}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varAssignmentInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  [mAssignmentTargetAST noteInstructionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varAssignmentInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  [mAssignmentTargetAST analyzeAssignmentTarget
    !self: inSelfType
    !targetAccessKind:.write
    !propertiesAreMutable: inRoutineCanMutateProperties
    !directAccessToPropertiesAllowed: inDirectAccessToPropertiesAllowed
    !routineNameForInvocationGraph: inCallerNameForInvocationGraph
    !context: inContext
    !mode: inCurrentMode
    !?temporary: ioTemporaries
    !?staticStringMap: ioGlobalLiteralStringMap
    !?variableMap: ioVariableMap
    !?alloca: ioAllocaList
    !?instructionListIR: ioInstructionGenerationList
    ?@objectIR currentObject
    ?globalVariableReceiverName:let unused globalVariableReceiverName
  ]
  if [currentObject isPossibleFunction] then
    error mAssignmentTargetAST.mIdentifier : "invalid assignment target" : currentObject
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:[currentObject type]
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR sourceOperandPossibleReference
  ]
  [!?ioInstructionGenerationList appendLoadFromReference
    !?ioTemporaries
    !sourceOperandPossibleReference
    !mAssignmentTargetAST.mIdentifier
    ?let sourceOperand
  ]  
  let result = checkAssignmentCompatibility (
    !source:sourceOperand
    !targetAnnotationType:[currentObject type]
    !errorLocation:mAssignmentTargetAST.mIdentifier
    !staticTypeAllowed:false
  )
  [!?ioInstructionGenerationList appendStoreFromReference !currentObject !mAssignmentTargetAST.mIdentifier !result]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
