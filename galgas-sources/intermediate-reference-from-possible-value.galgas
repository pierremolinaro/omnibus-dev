#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

setter @instructionListIR referenceFromPossibleValue # Turn a value to a reference
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@allocaList ioAllocaList
  ?!@objectIR ioObjectIR
{
  @bool performStore
  switch ioObjectIR
  case void : # Do nothing
    performStore = false
  case reference (* *) : # Already a reference: do nothing
    performStore = false
  case llvmValue (* *) :
    performStore = true
  case literalInteger  (* *) :
    performStore = true
  case null (*) :
    performStore = true
  case llvmStructureValue (* *) :
    performStore = true
  case llvmArrayValue (3*) :
    performStore = true
  case literalString  (* *) :
    performStore = true
  case zero (*) :
    performStore = true
  case llvmArrayRepeatedStaticValue (4*) :
    performStore = true
  case llvmArrayRepeatedDynamicValue (3*) :
    performStore = true
  end
#--- Perform strore ?
  if performStore then
  #--- Declare new temporary variable
    let llvmTemporaryName = llvmNameForLocalVariable (!"temp." + ioTemporaries.mTemporaryIndex)
    ioTemporaries.mTemporaryIndex ++
  #--- Add temporary reference to allocation list
    ioAllocaList += !llvmTemporaryName ![ioObjectIR type] !false
  #--- Store value to temporary reference
    [!?self appendStoreTemporaryReference ![ioObjectIR type] !llvmTemporaryName !ioObjectIR]
    ioObjectIR = .reference {!type:[ioObjectIR type] !llvmName:llvmTemporaryName}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
