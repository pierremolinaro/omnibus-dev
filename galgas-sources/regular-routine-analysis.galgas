#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTICS                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @decoratedRegularRoutineList {
  @lstring receiverTypeName %selector # Empty string if standalone function
  @mode mode %selector
  @bool isRequired %selector
  @routineKind routineKind %selector
  @bool warnIfUnused %selector
  @bool exportedRoutine %selector
  @routineAttributes routineAttributes %selector
  @lstring routineMangledLLVMName %selector
  @routineFormalArgumentListAST formalArgumentList %selector
  @bool warningOnUnusedArgs %selector
  @instructionListAST mInstructionList
  @location mEndOfRoutineDeclaration
  @lstring returnTypeName %selector # Empty string if no returned value
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @decoratedRegularRoutineList routineSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  for function in self do
#    log "name: " : function.routineMangledLLVMName
    [function semanticAnalysis 
      !context: inContext
      !?temporary: ioTemporaries
      !?intermediateCode: ioIntermediateCodeStruct
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @decoratedRegularRoutineList-element semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#--- Reset temporaries index
  ioTemporaries.mTemporaryIndex = 0
#--- Receiver type
  let receiverType = if receiverTypeName.string == ""
    then voidType ()
    else [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !receiverTypeName} type]
    end
#--- Variable map
  var universalMap = inContext.mValuedObjectMap
  [!?universalMap openOverrideForSelectBlock]
  [!?universalMap openBranch]
#--- Return value ?
  if returnTypeName.string != "" then
    let resultVarName = @lstring.new {!functionResultVariableName () !returnTypeName.location}
    let resultType = [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !returnTypeName} type]
    [!?universalMap insertLocalVariable !resultVarName !resultType !resultVarName !.noValue !true]
  end
#--- Analyse formal arguments
  @routineFormalArgumentListIR formalArguments = {}
  enterFormalArguments (
    !context:inContext
    !formalArgumentList
    !?universalMap
    !?formalArguments
    !warningOnUnusedArgs: warningOnUnusedArgs
  )
#--- Analyze instruction list
  @allocaList allocaList = {}
  @instructionListIR instructionGenerationList = {}
  [mInstructionList analyzeRoutineInstructionList
    !self:receiverType
    !routineAttributes: routineAttributes
    !context:inContext
    !mode:mode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioIntermediateCodeStruct.mStaticEntityMap
    !?variableMap:universalMap
    !?alloca:allocaList
    !?generatedCode:instructionGenerationList
  ]
#--- End of variableMap
  [universalMap checkLocalVariableFinalState !?instructionGenerationList]
  [!?universalMap closeBranch !mEndOfRoutineDeclaration]
  [!?universalMap closeOverride !mEndOfRoutineDeclaration]
#--- Code generation
  let returnType = if returnTypeName.string == "" then
    voidType ()
  else
    [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !returnTypeName} type]
  end
  ioIntermediateCodeStruct.mRoutineListIR += !@regularRoutineIR.new {
    !routineMangledLLVMName
    !isRequired:isRequired
    !warnsIfUnused:warnIfUnused
    !receiverType
    !formalArguments
    !allocaList
    !instructionGenerationList
    !exportedRoutine
    !routineKind
    !returnType
    !false
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @allocaList {
  @string mVarLLVMName
  @omnibusType mLLVMType
  @bool mFormalInputArgument
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @allocaList generateAllocaList ?!@string ioLLVMcode {
  for (variable type *) in self do
    ioLLVMcode += "  " + variable + " = alloca " + [type llvmTypeName] + "\n"
  end
#--- Init ARC variables
  for (variable type formalInputArgument) in self do
    if [type.kind isDynamicArrayType] && not formalInputArgument then
      ioLLVMcode += ";--- init dynamic array type '" + variable + "'\n"
      ioLLVMcode += "  store " + [type llvmTypeName] + " null, " + [type llvmTypeName] + "* " + variable + " ; init ARC value\n"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @regularRoutineIR : @abstractRoutineIR {
  @omnibusType mReceiverType # .void if standalone function
  @routineFormalArgumentListIR mFormalArgumentListForGeneration
  @allocaList mAllocaList
  @instructionListIR mInstructionGenerationList
  @bool mExportedFunction # Function is not tagged with internal
  @routineKind mKind
  @omnibusType mReturnType # .void if no return value
  @bool mAppendFileAndLineArgumentForPanicLocation
}

#·······················································································································

override method @regularRoutineIR enterAccessibleEntities
   ?!@stringset ioInvokedRoutineSet
   ?!@uint ioMaxBranchOfOnInstructions
{
  for instruction in mInstructionGenerationList do
    [instruction.mInstructionGeneration enterAccessibleEntities
      !?ioInvokedRoutineSet
      !?ioMaxBranchOfOnInstructions
    ]
  end
}

#·······················································································································

override method @regularRoutineIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  ioLLVMcode += "define"
  if not mExportedFunction then
    ioLLVMcode += " internal"
  end
  ioLLVMcode += " " + [mReturnType llvmTypeName]
  ioLLVMcode += " @" + [mRoutineMangledName assemblerRepresentation] + " ("
  let receiverLLVMTypeName = if mReceiverType.kind == .void
    then ""
    else [mReceiverType llvmTypeName]
  end
  var first = true
  if receiverLLVMTypeName != "" then
    ioLLVMcode += receiverLLVMTypeName + "* " + llvmNameForSelf ()
    first = false
  end
  for () in mFormalArgumentListForGeneration do
    if first then
      first = false
    else
      ioLLVMcode += ", "
    end
    switch mFormalArgumentKind
    case input :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + " %in." + mFormalArgumentName
    case output :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + " * " + llvmNameForLocalVariable (!mFormalArgumentName)
   case inputOutput :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + " * " + llvmNameForLocalVariable (!mFormalArgumentName)
    end
  end
  if not [option omnibus_options.noPanicGeneration value] && mAppendFileAndLineArgumentForPanicLocation then
    if not first then
      ioLLVMcode += ", "
    end
    ioLLVMcode += [inGenerationContext.mPanicLineLLVMType llvmTypeName] + " %LINE, i8* %FILE"
  end
  ioLLVMcode += ")" + llvmAttributeFunction () + "{\n"
#--- Add result variable ?
  var allocaList = mAllocaList
  if mReturnType.kind != .void then
    allocaList += !llvmNameForLocalVariable (!functionResultVariableName ()) !mReturnType !false
  end
#--- Store input arguments in memory
  for () in mFormalArgumentListForGeneration do
    switch mFormalArgumentKind
    case input :
      allocaList += !llvmNameForLocalVariable (!mFormalArgumentName) !mFormalArgumentType !true
    case output, inputOutput :
    end
  end
  [allocaList generateAllocaList !?ioLLVMcode]
#--- Copy input arguments and generate retain instructions for input arguments
#    Insulate input and input/output arguments
  for () in mFormalArgumentListForGeneration do
    switch mFormalArgumentKind
    case input :
      ioLLVMcode += ";--------- Input argument '" + mFormalArgumentName + "'\n"
      let llvmType = [mFormalArgumentType llvmTypeName]
      ioLLVMcode += "  store " + llvmType + " %in." + mFormalArgumentName + ", " + llvmType + " * "
                 + llvmNameForLocalVariable (!mFormalArgumentName) + "\n"
      [mFormalArgumentType generateRetain !mFormalArgumentName !?ioLLVMcode !?ioGenerationAdds]
      if mKind == .section then
        [mFormalArgumentType generateInsulate !mFormalArgumentName !?ioLLVMcode !?ioGenerationAdds]
      end
    case inputOutput :
      if mKind == .section then
       ioLLVMcode += ";--------- Insulate input/output argument '" + mFormalArgumentName + "'\n"
       [mFormalArgumentType generateInsulate !mFormalArgumentName !?ioLLVMcode !?ioGenerationAdds]
      end
    case output :
    end
  end
#--- Instruction list
  ioLLVMcode += ";--------- Function instruction list\n"
  [mInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
#--- Generate release instructions for input arguments
#    Insulate output and input/output arguments
  for () in mFormalArgumentListForGeneration do
    switch mFormalArgumentKind
    case input :
      ioLLVMcode += ";--------- Release input argument '" + mFormalArgumentName + "'\n"
     [mFormalArgumentType generateRelease !mFormalArgumentName !?ioLLVMcode !?ioGenerationAdds]
    case inputOutput :
      if mKind == .section then
       ioLLVMcode += ";--------- Insulate input/output argument '" + mFormalArgumentName + "'\n"
       [mFormalArgumentType generateInsulate !mFormalArgumentName !?ioLLVMcode !?ioGenerationAdds]
      end
    case output :
      if mKind == .section then
       ioLLVMcode += ";--------- Insulate output argument '" + mFormalArgumentName + "'\n"
       [mFormalArgumentType generateInsulate !mFormalArgumentName !?ioLLVMcode !?ioGenerationAdds]
      end
    end
  end
#--- Epilog
  ioLLVMcode += ";--------- Return\n"
  if mReturnType.kind == .void then
    ioLLVMcode += "  ret void\n"
  else
    let resultVarLLVMName = llvmNameForLocalVariable (!functionResultVariableName ())
    ioLLVMcode += "  %result = load " + [mReturnType llvmTypeName] + ", " + [mReturnType llvmTypeName] + " * " + resultVarLLVMName + "\n"
    ioLLVMcode += "  ret " + [mReturnType llvmTypeName] + " %result\n"
  end
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
