#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @prefixOperator {
  case notOperator
  case minus
  case unsignedComplement
  case minusNoOvf
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @prefixOperatorExpressionAST : @expressionAST {
  @location mOperatorLocation
  @prefixOperator mOp
  @expressionAST mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @prefixOperatorExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [mExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @prefixOperatorExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @prefixOperatorExpressionAST analyzeExpression
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@operandIR outResult
{
#--- Analyze expression
  [mExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?result:let @operandIR expressionResult
  ]
#--- Check expression type accepts prefix operator
  @prefixOperatorMap prefixOperatorMap
  @llvmBinaryOperation binaryOperator
  @operandIR leftOperand
  switch mOp 
  case unsignedComplement :
    prefixOperatorMap = inContext.mUnsignedComplementOperatorMap
    binaryOperator = .xor
    switch [expressionResult.mType kind]
    case opaque : error .nowhere : "internal error" : leftOperand
    case boolean : error .nowhere : "internal error" : leftOperand
    case boolset : error .nowhere : "internal error" : leftOperand
    case literalString : error .nowhere : "internal error" : leftOperand
    case enumeration (*) :  error .nowhere : "internal error" : leftOperand
    case structure (* *) :  error .nowhere : "internal error" : leftOperand
    case staticInteger :  error .nowhere : "internal error" : leftOperand
    case integer (* * * @uint bitCount) :
      leftOperand = .new {!inContext.mLiteralIntegerType !.literalInteger {!value:(1G << bitCount) - 1G}}
    end
  case notOperator :
    prefixOperatorMap = inContext.mNotOperatorMap
    binaryOperator = .xor
    leftOperand = .new {!inContext.mLiteralIntegerType !.literalInteger {!value:1G}}
  case minusNoOvf :
    prefixOperatorMap = inContext.mUnaryMinusOperatorMap
    binaryOperator = .subNoOVF
    leftOperand = .new {!inContext.mLiteralIntegerType !.literalInteger {!value:0G}}
  case minus :
    prefixOperatorMap = inContext.mUnaryMinusOperatorMap
    if [inModeSet hasKey !panicModeName ()] then
      error mOperatorLocation
        : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    if [option plm_options.noPanicGeneration value] then
      binaryOperator = .subNoOVF
      leftOperand = .new {!inContext.mLiteralIntegerType !.literalInteger {!value:0G}}
    else
      binaryOperator = .ssubOVF
      leftOperand = .new {!inContext.mLiteralIntegerType !.literalInteger {!value:0G}}
    end
  end
#--- Check operator
  [prefixOperatorMap searchKey !.new {![expressionResult.mType key] !mOperatorLocation}]
  let resultType = expressionResult.mType
#---
  if [expressionResult.mValue isLiteralInteger] then
    [expressionResult.mValue literalInteger ?value:let @bigint value]
    @bigint result
    switch mOp 
    case minusNoOvf : result = - value
    case unsignedComplement : error mOperatorLocation : "internal error" : result
    case minus : result = - value
    case notOperator : result = 1G ^ value
    end
    outResult = .new {!resultType !.literalInteger {!value:result}}
  else
  #--- Temp var
    getNewTempVariable (!resultType !?ioTemporaries ?outResult)
  #--- Generate code
    [!?ioInstructionGenerationList appendBinaryOperation
      !outResult.mValue
      !outResult.mType
      !mOperatorLocation
      !leftOperand.mValue
      !binaryOperator
      !expressionResult.mValue
    ]      
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
