#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @primitiveDeclarationListAST {
  @lstring mPrimitiveName
  @bool mPublic
  @lstringlist mPrimitiveNameAttributeList
  @procFormalArgumentList mPrimitiveFormalArgumentList
  @lstring mReturnTypeName
  @instructionListAST mPrimitiveInstructionList
  @location mEndOfPrimitiveDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <primitive> ?!@primitiveDeclarationListAST ioPrimitiveListAST {
    @bool public
    select
      public = false
    or
      $public$
      public = true
    end
    $primitive$
    $identifier$ ?let primitiveName
    @lstringlist attributeList = {}
    repeat
    while
      $attribute$ ?let attribute
      attributeList += !attribute
    end
    <procedure_formal_arguments> ?formalArguments:let primitiveFormalArgumentList
    @lstring returnTypeName
    select
      returnTypeName = ["" here]
    or
      $->$
      $typeName$ ?returnTypeName
    end
    ${$
    <instructionList> ?let instructionList !?*
    $}$
    ioPrimitiveListAST +=
      !primitiveName
      !public
      !attributeList
      !primitiveFormalArgumentList
      !returnTypeName
      !instructionList
      !.here
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES IN PRECEDENCE GRAPH                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @primitiveDeclarationListAST notePrimitiveTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    for (* * formalArgumentTypeName *) in mPrimitiveFormalArgumentList do
      let typeName = @lstring.new {!"$" + formalArgumentTypeName !formalArgumentTypeName.location}
      [!?ioGraph noteNode !typeName]
    end
    [mPrimitiveInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @primitiveDeclarationListAST enterInContext
  ?receiverType:let @string inReceiverTypeName
  ?!context:@semanticContext ioContext
{
  for primitive in self do
  #--- Signature
    @procedureSignature signature = {}
    for (formalArgumentPassingMode selector formalArgumentTypeName *) in primitive.mPrimitiveFormalArgumentList do
      let typeProxy = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !formalArgumentTypeName}
      signature += !formalArgumentPassingMode !selector.string !typeProxy
    end
  #--- Mode map
    @modeMap modeMap = {![userModeName () nowhere], ![kernelModeName () nowhere]}
  #--- Enter in context
    let returnType = if primitive.mReturnTypeName.string == "" then
      @unifiedTypeMap-proxy.null
    else
      @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !primitive.mReturnTypeName}
    end
    [!?ioContext.mRoutineMapForContext insertKey
      !@lstring.new {!inReceiverTypeName + "." + primitive.mPrimitiveName !primitive.mPrimitiveName.location}
      !primitive.mPublic
      !modeMap
      !signature
      !.primitive
      !false # Not weak
      !returnType
      !false # No appendFileAndLineArgumentForPanicLocation
      !true # Can mutate properties
      !true # canAccessPropertiesInUserMode
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @primitiveDeclarationListAST primitiveSemanticAnalysis
  ?receiverType:@unifiedTypeMap-proxy inReceiverType
  ?context:let @semanticContext inSemanticContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  for primitive in self do
    var warnIfUnused = true
    for (attribute) in primitive.mPrimitiveNameAttributeList do
      if attribute.string == noWarningIfUnusedAttribute () then
        if not warnIfUnused then
          error attribute : "duplicate @" + noWarningIfUnusedAttribute () + " attribute"
        end
        warnIfUnused = false    
      else
        error attribute : "unknown attribute; available attribute is @" + noWarningIfUnusedAttribute ()
      end
    end
    routineSemanticAnalysis (
      !receiverType:inReceiverType
      !.primitive
      !{![kernelModeName () nowhere]}
      !primitive.mPrimitiveName
      !primitive.mPrimitiveFormalArgumentList
      !returnTypeName:primitive.mReturnTypeName
      !primitive.mPrimitiveInstructionList
      !primitive.mEndOfPrimitiveDeclaration
      !directAccessToPropertiesAllowed:true
      !propertiesAreMutable:true
      !warnIfUnused:warnIfUnused
      !globalFunction:true
      !weakFunction:false
      !registerAccess:.readWriteAccess
      !context:inSemanticContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @routineMapIR primitiveCodeGeneration
  ?!@string ioLLVMcode
  ?!@2stringlist ioServiceList
{
  for primitive in self do
    if primitive.mKind == .primitive then
      let primitiveImplementationName = llvmNameForPrimitiveImplementation (!primitive.lkey.string)
      let primitiveCallName = llvmNameForPrimitiveCall (!primitive.lkey.string)
      ioServiceList += !primitiveCallName !primitiveImplementationName
      ioLLVMcode += llvmTitleComment (!primitiveImplementationName)
      ioLLVMcode += "declare"
      if primitive.mReturnType == .null then
        ioLLVMcode += " void"
      else
        ioLLVMcode += " " + [primitive.mReturnType llvmTypeName]
      end
      ioLLVMcode += " @" + primitiveCallName + " ("
      let typeName = [primitive.lkey.string stringByDeletingPathExtension]
      var first = typeName == ""
      if not first then
        ioLLVMcode += "%" + [typeName assemblerRepresentation] + " * %self"  
      end
      for () in primitive.mFormalArgumentListForGeneration do
        if first then first = false else ioLLVMcode += ", " end
        switch mFormalArgumentKind
        case input :
          ioLLVMcode += [mFormalArgumentType llvmTypeName] + " %in." + mFormalArgumentName
        case output :
          ioLLVMcode += [mFormalArgumentType llvmTypeName] + " * %" + mFormalArgumentName
       case inputOutput :
          ioLLVMcode += [mFormalArgumentType llvmTypeName] + " * %" + mFormalArgumentName
        end
      end
      ioLLVMcode += ")" + llvmAttributeFunction () + "\n\n"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
