#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @guardKind {
  case baseGuard
  case convenienceGuard (@abstractCallInstructionAST base)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @guardDeclarationListAST {
  @lstring mGuardName
  @lstringlist mGuardAttributeList
  @procFormalArgumentList mGuardFormalArgumentList
  @guardKind mGuardKind
  @instructionListAST mGuardInstructionList
  @location mEndOfGuardDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <guard> ?!@guardDeclarationListAST ioGuardListAST {
    $guard$
    $identifier$ ?let guardName
    @lstringlist attributeList = {}
    repeat
    while
      $attribute$ ?let attribute
      attributeList += !attribute
    end
    <procedure_formal_arguments> ?formalArguments:let guardFormalArgumentList
    @guardKind guardKind
    select
      guardKind = .baseGuard
    or
      $:$
      <routine_call> ?let @abstractCallInstructionAST instruction
      guardKind = .convenienceGuard {!base:instruction}
    end
    ${$
    <instructionList> ?let instructionList !?*
    $}$
    ioGuardListAST +=
      !guardName
      !attributeList
      !guardFormalArgumentList
      !guardKind
      !instructionList
      !.here
  }

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    <guard> !?ioAST.mGuardListAST
  }
 
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @guardDeclarationListAST noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    for (* * formalArgumentTypeName *) in mGuardFormalArgumentList do
      let typeName = @lstring.new {!"$" + formalArgumentTypeName !formalArgumentTypeName.location}
      [!?ioGraph noteNode !typeName]
    end
    [mGuardInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    CONTEXT                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @guardDeclarationListAST enterInContext
  ?receiverType:let @string inReceiverTypeName
  ?!context:@semanticContext ioContext
{
  for guard in self do
  #--- Signature
    @procedureSignature signature = {}
    for (formalArgumentPassingMode selector formalArgumentTypeName *) in guard.mGuardFormalArgumentList do
      let typeProxy = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !formalArgumentTypeName}
      signature += !formalArgumentPassingMode !selector.string !typeProxy
    end
  #--- Enter in context
    [!?ioContext.mGuardMapForContext insertKey
      !@lstring.new {!inReceiverTypeName + "." + guard.mGuardName !guard.mGuardName.location}
      !signature
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @guardDeclarationListAST guardSemanticAnalysis
  ?receiverType:@unifiedTypeMap-proxy inReceiverType
  ?context:let @semanticContext inSemanticContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  for guard in self do
    var warnIfUnused = true
    for (attribute) in guard.mGuardAttributeList do
      if attribute.string == noWarningIfUnusedAttribute () then
        if not warnIfUnused then
          error attribute : "duplicate @" + noWarningIfUnusedAttribute () + " attribute"
        end
        warnIfUnused = false    
      else
        error attribute : "unknown attribute; available attribute is @" + noWarningIfUnusedAttribute ()
      end
    end
    guardSemanticAnalysis (
      !receiverType:inReceiverType
      !guard.mGuardName
      !guard.mGuardFormalArgumentList
      !guard.mGuardKind
      !guard.mGuardInstructionList
      !guard.mEndOfGuardDeclaration
      !warnIfUnused:warnIfUnused
      !context:inSemanticContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc guardSemanticAnalysis
  ?receiverType:let @unifiedTypeMap-proxy inSelfType
  ?let @lstring inRoutineName
  ?let @procFormalArgumentList inRoutineFormalArgumentList
  ?let @guardKind inGuardKind
  ?let @instructionListAST inRoutineInstructionList
  ?let @location inEndOfRoutineDeclaration
  ?warnIfUnused:let @bool inWarnIfUnused
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#--- Enter subprogram invocation graph
  let routineNameForInvocationGraph = guardNameForInvocationGraph (!inSelfType !inRoutineName)
  if not [ioTemporaries.mSubprogramInvocationGraph isNodeDefined !routineNameForInvocationGraph.string] then
    [!?ioTemporaries.mSubprogramInvocationGraph addNode
      !routineNameForInvocationGraph
      !inRoutineName
    ]
  end
#--- Variable map
  @variableMap variableMap = initialVariableMap (
    !routineNameForInvocation:routineNameForInvocationGraph.string
    !context:inContext
    !userMode:false
    !registerAccess:.noAccess
    !globalsAreConstant:false
    !returnTypeName:["" nowhere]
  )
  @procFormalArgumentListForGeneration formalArguments = {}
  @guardKindGenerationIR convenienceGuardGenerationIR
  @allocaList allocaList = {}
  switch inGuardKind
  case baseGuard :
  #--- Add 'accepted" output variable
    let resultVarName = @lstring.new {!acceptVariableName() !inRoutineName.location}
    let resultType = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap ![boolTypeName () nowhere]}
    allocaList += !resultVarName.string !resultType
    [!?variableMap insertOutputFormalArgument
      !lkey:resultVarName
      !type:resultType
      !readAccessAllowed:true
      !variableKind:.localValue {!type:resultType !name:resultVarName.string}
      !copyable:true
      !fieldMap:{}
      !canBeUsedAsInputParameter:true
      !isConstant:false # Is not constant
    ]
  #--- Analyse formal arguments
    enterFormalArguments (
      !context:inContext
      !inRoutineFormalArgumentList
      !?variableMap
      !?formalArguments
    )
    convenienceGuardGenerationIR = .baseGuard
  case convenienceGuard (baseGuardInstruction):
  #--- Analyse formal arguments
    enterFormalArguments (
      !context:inContext
      !inRoutineFormalArgumentList
      !?variableMap
      !?formalArguments
    )
  #--- Analyze base guard
    @instructionListIR baseGuardInstructionGenerationList = {}
    [baseGuardInstruction baseGuardAnalyze 
      !self:inSelfType
      !routineNameForInvocationGraph:routineNameForInvocationGraph
      !context:inContext
      !?temporary:ioTemporaries
      !?staticStringMap:ioIntermediateCodeStruct.mStaticStringMap
      !?variableMap:variableMap
      ?convenienceGuardGenerationIR
    ]
  end 
#--- Analyze instruction list
  @instructionListIR instructionGenerationList = {}
  [inRoutineInstructionList analyzeRoutineInstructionList
    !self:inSelfType
    !routineNameForInvocationGraph:routineNameForInvocationGraph
    !context:inContext
    !modes:{!isrModeName ()}
    !allowPanic:true
    !?temporary:ioTemporaries
    !?staticStringMap:ioIntermediateCodeStruct.mStaticStringMap
    !?variableMap:variableMap
    !?alloca:allocaList
    !?generatedCode:instructionGenerationList
  ]
#---
  [variableMap checkAutomatonStates !inEndOfRoutineDeclaration]
#--- Code generation
  let guardMangledName = if inSelfType == .null then
    @lstring.new {!"." + inRoutineName !inRoutineName.location}
  else
    @lstring.new {!"$" + [inSelfType key] + "." + inRoutineName !inRoutineName.location}
  end
  [!?ioIntermediateCodeStruct.mGuardMapIR insertKey
    !guardMangledName
    !formalArguments
    !convenienceGuardGenerationIR
    !allocaList
    !instructionGenerationList
    !inWarnIfUnused
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractCallInstructionAST baseGuardAnalyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  !@guardKindGenerationIR outConvenienceGuardGenerationIR

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @standaloneRoutineCallInstructionAST baseGuardAnalyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  !@guardKindGenerationIR outConvenienceGuardGenerationIR
{
  let routineMangledName = @lstring.new {!"." + mRoutineName !mRoutineName.location}
  [inContext.mGuardMapForContext searchKey
    !routineMangledName
    ?let @procedureSignature formalSignature
  ]
#--- Enter in invocation graph
  let routineNameForInvocationGraph = guardNameForInvocationGraph (!.null !mRoutineName)
   [!?ioTemporaries.mSubprogramInvocationGraph addEdge !inCallerNameForInvocationGraph !routineNameForInvocationGraph]
#--- Analyze effective parameters
  @instructionListIR baseGuardInstructionGenerationList = {}
  @procCallEffectiveParameterListIR effectiveParameterListIR = {}
  @allocaList baseGuardAllocaList = {}
  analyzeEffectiveParameters (
    !self:inSelfType
    !formal:formalSignature
    !effective:mEffectiveParameterList
    !errorLocation:mRoutineName.location
    !callerForInvocationGraph:inCallerNameForInvocationGraph
    !context:inContext
    !requiredModeSet:{!isrModeName ()}
    !allowPanic:true
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:baseGuardAllocaList
    !?instructionListIR:baseGuardInstructionGenerationList
    !?effectiveIR:effectiveParameterListIR
  )
#--- Code generation
  outConvenienceGuardGenerationIR = .convenienceGuard {
    !baseGuardAllocaList:baseGuardAllocaList
    !baseGuardInstructionGenerationList:baseGuardInstructionGenerationList
    !baseGuardMangledName:routineMangledName.string
    !baseGuardEffectiveParameterList:effectiveParameterListIR
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfRoutineCallInstructionAST baseGuardAnalyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  !@guardKindGenerationIR outConvenienceGuardGenerationIR
{
  if inSelfType == .null then
    error mRoutineName : "'self' is not available in this context" : outConvenienceGuardGenerationIR
  else
    switch [inSelfType kind]
    case opaque (*) :
      error mRoutineName : "an opaque type does not handle field access" : outConvenienceGuardGenerationIR
    case boolean :
      error mRoutineName : "a boolean does not handle field access" : outConvenienceGuardGenerationIR
    case staticInteger :
      error mRoutineName : "an integer does not handle field access" : outConvenienceGuardGenerationIR
    case boolset :
      error mRoutineName : "a boolset does not handle field access" : outConvenienceGuardGenerationIR
    case literalString :
      error mRoutineName : "a literal string does not handle field access" : outConvenienceGuardGenerationIR
    case enumeration (*) :
      error mRoutineName : "an enumeration does not handle field access" : outConvenienceGuardGenerationIR
    case integer (* * * *) :
      error mRoutineName : "an integer does not handle field access" : outConvenienceGuardGenerationIR
    case structure (@propertyMap unused propertyMap *) :
      @instructionListIR baseGuardInstructionGenerationList = {}
      let routineMangledName = @lstring.new {!"$" + [inSelfType key] + "." + mRoutineName !mRoutineName.location}
      @procCallEffectiveParameterListIR effectiveParameterListIR = {}
      effectiveParameterListIR += !.outputInput !"" !.new {!inSelfType !.selfObject}
      [inContext.mGuardMapForContext searchKey
        !routineMangledName
        ?let @procedureSignature formalSignature
      ]
    #--- Enter in invocation graph
      let routineNameForInvocationGraph = guardNameForInvocationGraph (!inSelfType !mRoutineName)
       [!?ioTemporaries.mSubprogramInvocationGraph addEdge !inCallerNameForInvocationGraph !routineNameForInvocationGraph]
    #--- Analyze effective parameters
      @allocaList baseGuardAllocaList = {}
      analyzeEffectiveParameters (
        !self:inSelfType
        !formal:formalSignature
        !effective:mEffectiveParameterList
        !errorLocation:mRoutineName.location
        !callerForInvocationGraph:inCallerNameForInvocationGraph
        !context:inContext
        !requiredModeSet:{!isrModeName ()}
        !allowPanic:true
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?alloca:baseGuardAllocaList
        !?instructionListIR:baseGuardInstructionGenerationList
        !?effectiveIR:effectiveParameterListIR
      )
    #--- Code generation
      outConvenienceGuardGenerationIR = .convenienceGuard {
        !baseGuardAllocaList:baseGuardAllocaList
        !baseGuardInstructionGenerationList:baseGuardInstructionGenerationList
        !baseGuardMangledName:routineMangledName.string
        !baseGuardEffectiveParameterList:effectiveParameterListIR
      }
    end    
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @remoteRoutineCallInstructionAST baseGuardAnalyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  !@guardKindGenerationIR outConvenienceGuardGenerationIR
{
  [!?ioVariableMap searchForReadAccess
    !lkey:mReceiverName
    ?type:let receiverType
    ?1*
    ?variableKind:@objectInMemoryIR variableKind
    ?4*
  ]
  @procCallEffectiveParameterListIR effectiveParameterListIR = {}
  effectiveParameterListIR += !.outputInput !"" ![variableKind address] #--- add "load receiver" as first argument
  @instructionListIR baseGuardInstructionGenerationList = {}
  let routineMangledName = @lstring.new {!"$" + [receiverType key] + "." + mRoutineName !mRoutineName.location}
  [inContext.mGuardMapForContext searchKey
    !routineMangledName
    ?let @procedureSignature formalSignature
  ]
#--- Enter in invocation graph
  let routineNameForInvocationGraph = guardNameForInvocationGraph (!receiverType !mRoutineName)
   [!?ioTemporaries.mSubprogramInvocationGraph addEdge !inCallerNameForInvocationGraph !routineNameForInvocationGraph]
#--- Analyze effective parameters
  @allocaList baseGuardAllocaList = {}
  analyzeEffectiveParameters (
    !self:inSelfType
    !formal:formalSignature
    !effective:mEffectiveParameterList
    !errorLocation:mRoutineName.location
    !callerForInvocationGraph:inCallerNameForInvocationGraph
    !context:inContext
    !requiredModeSet:{!isrModeName ()}
    !allowPanic:true
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:baseGuardAllocaList
    !?instructionListIR:baseGuardInstructionGenerationList
    !?effectiveIR:effectiveParameterListIR
  )
#--- Code generation
  outConvenienceGuardGenerationIR = .convenienceGuard {
    !baseGuardAllocaList:baseGuardAllocaList
    !baseGuardInstructionGenerationList:baseGuardInstructionGenerationList
    !baseGuardMangledName:routineMangledName.string
    !baseGuardEffectiveParameterList:effectiveParameterListIR
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfRemoteRoutineCallInstructionAST baseGuardAnalyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  !@guardKindGenerationIR outConvenienceGuardGenerationIR
{
  if inSelfType == .null then
    error mPropertyName : "'self' is not available in this context" : outConvenienceGuardGenerationIR
  else
    switch [inSelfType kind]
    case opaque (*) :
      error mPropertyName : "an opaque type does not handle field access" : outConvenienceGuardGenerationIR
    case boolean :
      error mPropertyName : "a boolean does not handle field access" : outConvenienceGuardGenerationIR
    case staticInteger :
      error mPropertyName : "an integer does not handle field access" : outConvenienceGuardGenerationIR
    case boolset :
      error mPropertyName : "a boolset does not handle field access" : outConvenienceGuardGenerationIR
    case literalString :
      error mPropertyName : "a literal string does not handle field access" : outConvenienceGuardGenerationIR
    case enumeration (*) :
      error mPropertyName : "an enumeration does not handle field access" : outConvenienceGuardGenerationIR
    case integer (* * * *) :
      error mPropertyName : "an integer does not handle field access" : outConvenienceGuardGenerationIR
    case structure (@propertyMap propertyMap *) :
      [propertyMap searchKey !mPropertyName ?let propertyType ?let idx]
      getLocalNameOfNewTempObjectInMemory (!propertyType !?ioTemporaries ?let propertyAddressLLVMvar)
      @instructionListIR baseGuardInstructionGenerationList = {}
      [!?baseGuardInstructionGenerationList appendGetElementPtrFromSelf
        !propertyAddressLLVMvar
        !inSelfType
        !idx
        !mPropertyName.string
      ]        
      let routineMangledName = @lstring.new {!"$" + [propertyType key] + "." + mMethodName !mMethodName.location}
      @procCallEffectiveParameterListIR effectiveParameterListIR = {}
      effectiveParameterListIR += !.outputInput !"" ![propertyAddressLLVMvar address] #--- add "load receiver" as first argument
      [inContext.mGuardMapForContext searchKey
        !routineMangledName
        ?let @procedureSignature formalSignature
      ]
    #--- Enter in invocation graph
      let routineNameForInvocationGraph = guardNameForInvocationGraph (!propertyType !mMethodName)
       [!?ioTemporaries.mSubprogramInvocationGraph addEdge !inCallerNameForInvocationGraph !routineNameForInvocationGraph]
    #--- Analyze effective parameters
      @allocaList baseGuardAllocaList = {}
      analyzeEffectiveParameters (
        !self:inSelfType
        !formal:formalSignature
        !effective:mEffectiveParameterList
        !errorLocation:mMethodName.location
        !callerForInvocationGraph:inCallerNameForInvocationGraph
        !context:inContext
        !requiredModeSet:{!isrModeName ()}
        !allowPanic:true
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?alloca:baseGuardAllocaList
        !?instructionListIR:baseGuardInstructionGenerationList
        !?effectiveIR:effectiveParameterListIR
      )
    #--- Code generation
      outConvenienceGuardGenerationIR = .convenienceGuard {
        !baseGuardAllocaList:baseGuardAllocaList
        !baseGuardInstructionGenerationList:baseGuardInstructionGenerationList
        !baseGuardMangledName:routineMangledName.string
        !baseGuardEffectiveParameterList:effectiveParameterListIR
      }
    end    
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @guardKindGenerationIR {
  case baseGuard
  case convenienceGuard (@allocaList baseGuardAllocaList
                         @instructionListIR baseGuardInstructionGenerationList
                         @string baseGuardMangledName
                         @procCallEffectiveParameterListIR baseGuardEffectiveParameterList)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @guardMapIR {
  @procFormalArgumentListForGeneration mFormalArgumentListForGeneration
  @guardKindGenerationIR mGuardKindGenerationIR
  @allocaList mAllocaList
  @instructionListIR mInstructionGenerationList
  @bool mWarnIfUnused

  insert insertKey error message "guard '%K' is already defined"
  search searchKey error message "** internal error **"
  remove removeKey error message "** internal error **"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @guardMapIR guardCodeGeneration
  ?!@string ioLLVMcode
  ?!@2stringlist ioServiceList
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  for guard in self do
    let guardImplementationName = llvmNameForGuardImplementation (!guard.lkey.string)
    let guardCallName = llvmNameForGuardCall (!guard.lkey.string)
    ioServiceList += !guardCallName !guardImplementationName
    ioLLVMcode += llvmTitleComment (!guardImplementationName)
    ioLLVMcode += "declare i1 @" + guardCallName + " ("
    let typeName = [guard.lkey.string stringByDeletingPathExtension]
    var first = typeName == ""
    if not first then
      ioLLVMcode += "%" + typeName + "* %self"  
    end
    for () in guard.mFormalArgumentListForGeneration do
      if first then first = false else ioLLVMcode += ", " end
      switch mFormalArgumentKind
      case input :
        ioLLVMcode += [mFormalArgumentType llvmTypeName] + " %in." + mFormalArgumentName
      case output :
        ioLLVMcode += [mFormalArgumentType llvmTypeName] + "* %" + mFormalArgumentName
     case inputOutput :
        ioLLVMcode += [mFormalArgumentType llvmTypeName] + "* %" + mFormalArgumentName
      end
    end
    ioLLVMcode += ")" + llvmAttributeFunction () + "\n\n"
    [guard llvmCodeGeneration !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @guardMapIR-element llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let guardImplementationName = llvmNameForGuardImplementation (!lkey.string)
  ioLLVMcode += llvmTitleComment (!guardImplementationName)
  ioLLVMcode += "define i1 @" + guardImplementationName + " ("
  let receiverTypeName = [lkey.string stringByDeletingPathExtension]
  var first = true
  if receiverTypeName != "" then
    ioLLVMcode += "%" + receiverTypeName + "* %self"
    first = false
  end
  for () in mFormalArgumentListForGeneration do
    if first then
      first = false
    else
      ioLLVMcode += ", "
    end
    switch mFormalArgumentKind
    case input :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + " %in." + mFormalArgumentName
    case output :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + "* %" + mFormalArgumentName
   case inputOutput :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + "* %" + mFormalArgumentName
    end
  end
  ioLLVMcode += ")" + llvmAttributeFunction () + "{\n"
#--- Declare "accept" variable 
  let accepted_llvmName = llvmNameForLocalVariable (!acceptVariableName ())
  for (variable type) in mAllocaList do
    ioLLVMcode += "  %" + llvmNameForLocalVariable (!variable) + " = alloca " + [type llvmTypeName] + "\n"
  end
#--- Store input arguments in memory
  for () in mFormalArgumentListForGeneration do
    switch mFormalArgumentKind
    case input :
      let llvmType = [mFormalArgumentType llvmTypeName]
      ioLLVMcode += "  %" + mFormalArgumentName + " = alloca " + llvmType + "\n"
    case output, inputOutput :
    end
  end
  for () in mFormalArgumentListForGeneration do
    switch mFormalArgumentKind
    case input :
      let llvmType = [mFormalArgumentType llvmTypeName]
      ioLLVMcode += "  store " + llvmType + " %in." + mFormalArgumentName + ", " + llvmType + "* %" + mFormalArgumentName + "\n"
    case output, inputOutput :
    end
  end
#--- Base guard or convenience guard ?
  switch mGuardKindGenerationIR
  case baseGuard :
 #   ioLLVMcode += "  %" + accepted_llvmName + " = alloca i1\n"
    ioLLVMcode += "  store i1 false, i1* %" + accepted_llvmName + "\n"
    [mInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
    ioLLVMcode += "  %" + accepted_llvmName + ".loaded = load i1, i1* %" + accepted_llvmName + "\n"
    ioLLVMcode += "  br i1 %" + accepted_llvmName + ".loaded, label %" + accepted_llvmName + ".true, label %" + accepted_llvmName + ".false\n\n"
    ioLLVMcode += accepted_llvmName + ".true:\n"
    ioLLVMcode += "  call void @noteGuardHasBeenAccepted ()\n"
    ioLLVMcode += "  ret i1 true\n\n"
    ioLLVMcode += accepted_llvmName + ".false:\n"
    ioLLVMcode += "  ret i1 false\n"
    ioLLVMcode += "}\n\n"
  case convenienceGuard (baseGuardAllocaList baseGuardInstructionGenerationList baseGuardMangledName baseGuardEffectiveParameterList) :
    for (variable type) in baseGuardAllocaList do
      ioLLVMcode += "  %" + llvmNameForLocalVariable (!variable) + " = alloca " + [type llvmTypeName] + "\n"
    end
    [baseGuardInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
    ioLLVMcode += "  %baseGuard.result = call i1 @" + llvmNameForGuardImplementation (!baseGuardMangledName)
    ioLLVMcode += " ("
    for () in baseGuardEffectiveParameterList do
      switch mEffectiveParameterPassingMode
      case input:
        ioLLVMcode += [mParameter.mType llvmTypeName] + "* " + [mParameter.mValue llvmName]
      case output:
        ioLLVMcode += [mParameter.mType llvmTypeName] + " " + [mParameter.mValue llvmName]
      case outputInput:
        ioLLVMcode += [mParameter.mType llvmTypeName] + "* " + [mParameter.mValue llvmName]
      end
    between
      ioLLVMcode += ", "
    end
    ioLLVMcode += ")\n"
    ioLLVMcode += "  br i1 %baseGuard.result, label %baseGuard.true, label %baseGuard.exit\n\n"
    ioLLVMcode += "baseGuard.true:\n"
    [mInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
    ioLLVMcode += "  ret i1 true\n\n"
    ioLLVMcode += "baseGuard.exit:\n"
    ioLLVMcode += "  ret i1 false\n"
    ioLLVMcode += "}\n\n"
  end
  ioGenerationAdds.mExternFunctionDeclarationSet += !"declare void @noteGuardHasBeenAccepted ()\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @guardMapIR-element enterAccessibleEntities
  ?!@accessibleEntities ioAccessibleEntities
  ?!@uint ioMaxBranchOfOnInstructions
{
  [mInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
  switch mGuardKindGenerationIR
  case baseGuard :
  case convenienceGuard (* baseGuardInstructionGenerationList baseGuardMangledName *) :
    [baseGuardInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
    ioAccessibleEntities.mGuardSet += !baseGuardMangledName
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

