#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @guardKind {
  case baseGuard
  case convenienceGuard (@callInstructionAST base)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @guardDeclarationListAST {
  @lstring mGuardName
  @bool mIsPublic
  @lstringlist mGuardAttributeList
  @routineFormalArgumentListAST mGuardFormalArgumentList
  @guardKind mGuardKind
  @instructionListAST mGuardInstructionList
  @location mEndOfGuardDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <guard> ?!@ast ioAST ?!@guardDeclarationListAST ioGuardList {
    @bool public
    select
      public = false
    or
      $public$
      public = true
    end
    $guard$
    $identifier$ ?let guardName
    @lstringlist attributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      attributeList += !attribute
    end
    <procedure_formal_arguments> !?ioAST ?let guardFormalArgumentList
    @guardKind guardKind
    select
      guardKind = .baseGuard
    or
      $:$
      <procedure_call> !?ioAST ?let instruction
      guardKind = .convenienceGuard {!base:instruction}
    end
    ${$
    <instructionList> !?ioAST ?let instructionList
    $}$
    ioGuardList +=
      !guardName
      !public
      !attributeList
      !guardFormalArgumentList
      !guardKind
      !instructionList
      !.here
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @guardDeclarationListAST noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    for (* * formalArgumentTypeName *) in mGuardFormalArgumentList do
      [!?ioGraph noteNode !formalArgumentTypeName]
    end
    [mGuardInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   UTILITIES                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func guardUserLLVMName ?let @string inReceiverLLVMBaseTypeName
                               ?let @lstring inGuardName
                               ?let @routineFormalArgumentListAST inFormalArgumentList -> @lstring
{
  var s = "guard.user."
  s += inReceiverLLVMBaseTypeName + "."
  s += inGuardName.string
  s += "("
  for (formalArgumentPassingMode selector formalArgumentTypeName *) in inFormalArgumentList do
    s += [formalArgumentPassingMode formalPassingModeString] + selector + ":"
  end
  s += ")"
  result = .new {!s !inGuardName.location}
}

#·······················································································································

private func guardImplementationLLVMName ?let @string inReceiverLLVMBaseTypeName
                                         ?let @lstring inGuardName
                                         ?let @routineFormalArgumentListAST inFormalArgumentList -> @lstring
{
  var s = "guard.implementation."
  s += inReceiverLLVMBaseTypeName + "."
  s += inGuardName.string
  s += "("
  for (formalArgumentPassingMode selector formalArgumentTypeName *) in inFormalArgumentList do
    s += [formalArgumentPassingMode formalPassingModeString] + selector + ":"
  end
  s += ")"
  result = .new {!s !inGuardName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @guardMapCTXT {
  @bool mIsPublic
  @routineTypedSignature mSignature
  @lstring mUserRoutineLLVMName
  @lstring mImplementationRoutineLLVMName

  insert insertKey error message "the '%K' guard is already declared in %L"
  search searchKey error message "there is no '%K' guard"
}

#·······················································································································

method @guardDeclarationListAST enterGuardsInContext
  ?receiverTypeName:let @lstring inReceiverTypeName
  ?receiverLLVMBaseTypeName:let @string inReceiverLLVMBaseTypeName
  ?!context:@semanticContext ioContext
  ?!guardMap:@guardMapCTXT ioGuardMap
  ?!@declarationDecorationList ioDecoratedDeclarationList
{
#---------------------------------------- Enter guards in guard map
  for guard in self do
  #--- Signature
    routineTypedSignature (!?ioContext.mTypeMap !guard.mGuardFormalArgumentList ?let signature)
  #--- Guard mangled name
    let guardMangledName = [signature mangledName !guard.mGuardName]
  #--- Guard user routine LLVM name
    let guardUserLLVMName = guardUserLLVMName (
      !inReceiverLLVMBaseTypeName
      !guard.mGuardName
      !guard.mGuardFormalArgumentList
    )
  #--- Guard implementation routine LLVM name
    let guardImplementationLLVMName = guardImplementationLLVMName (
      !inReceiverLLVMBaseTypeName
      !guard.mGuardName
      !guard.mGuardFormalArgumentList
    )
  #--- Enter in context
    [!?ioGuardMap insertKey
      !guardMangledName
      !guard.mIsPublic
      !signature
      !guardUserLLVMName
      !guardImplementationLLVMName
    ]
    ioDecoratedDeclarationList += !@decoratedGuardDeclaration.new {
      !inReceiverTypeName
      !guard.mGuardName
      !guard.mIsPublic
      !guard.mGuardAttributeList
      !guard.mGuardFormalArgumentList
      !guard.mGuardKind
      !guard.mGuardInstructionList
      !guard.mEndOfGuardDeclaration
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @decoratedGuardDeclaration : @abstractDecoratedDeclaration {
  @lstring mReceiverTypeName
  @lstring mGuardName
  @bool mIsPublic
  @lstringlist mGuardAttributeList
  @routineFormalArgumentListAST mGuardFormalArgumentList
  @guardKind mGuardKind
  @instructionListAST mGuardInstructionList
  @location mEndOfGuardDeclaration
}

#·······················································································································

override method @decoratedGuardDeclaration semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  let receiverType = [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mReceiverTypeName} type]
#----------- 
  var warnIfUnused = true
  for (attribute) in mGuardAttributeList do
    if attribute.string == noUnusedWarningAttribute () then
      if not warnIfUnused then
        error attribute : "duplicate @" + noUnusedWarningAttribute () + " attribute"
      end
      warnIfUnused = false    
    else
      error attribute : "unknown attribute; available attribute is @" + noUnusedWarningAttribute ()
    end
  end
#--- Variable map
  var universalMap = inContext.mValuedObjectMap
  [!?universalMap openOverrideForSelectBlock]
  [!?universalMap openBranch]
  @routineFormalArgumentListIR formalArguments = {}
  @guardKindGenerationIR convenienceGuardGenerationIR
  @allocaList allocaList = {}
  @instructionListIR instructionGenerationList = {}
  switch mGuardKind
  case baseGuard :
  #--- Add 'accept" output variable
    let resultVarName = @lstring.new {!acceptVariablePLMName() !mGuardName.location}
    [inContext.mTypeMap searchKey !lkey:[boolTypeName () nowhere] ?type:let resultType]
    allocaList += !llvmNameForLocalVariable (!resultVarName.string) !resultType !false
    [!?universalMap insertLocalVariable
      !resultVarName
      !resultType
      !resultVarName
      !.noValue
      !true
    ]
  #--- Analyse formal arguments
    enterFormalArguments (
      !context:inContext
      !mGuardFormalArgumentList
      !?universalMap
      !?formalArguments
      !warningOnUnusedArgs: true
    )
    convenienceGuardGenerationIR = .baseGuard
  #--- Analyze instruction list
    [mGuardInstructionList analyzeRoutineInstructionList
      !self:receiverType
      !routineAttributes:.mutating
      !context:inContext
      !mode:.guardMode
      !?temporary:ioTemporaries
      !?staticEntityMap:ioIntermediateCodeStruct.mStaticEntityMap
      !?variableMap:universalMap
      !?alloca:allocaList
      !?generatedCode:instructionGenerationList
    ]
  case convenienceGuard (baseGuardInstruction):
  #--- Analyse formal arguments
    enterFormalArguments (
      !context:inContext
      !mGuardFormalArgumentList
      !?universalMap
      !?formalArguments
      !warningOnUnusedArgs: true
    )
  #--- Analyze base guard
    [baseGuardInstruction baseGuardAnalyze 
      !self:receiverType
      !routineAttributes:.mutating
      !context:inContext
      !mode:.serviceMode # Convenience guards instructions are executed in service mode
      !?temporary:ioTemporaries
      !?staticEntityMap:ioIntermediateCodeStruct.mStaticEntityMap
      !?variableMap:universalMap
      ?convenienceGuardGenerationIR
    ]
  #--- Analyze instruction list
    [mGuardInstructionList analyzeRoutineInstructionList
      !self:receiverType
      !routineAttributes: .mutating
      !context:inContext
      !mode:.serviceMode # Convenience guards instructions are executed in service mode
      !?temporary:ioTemporaries
      !?staticEntityMap:ioIntermediateCodeStruct.mStaticEntityMap
      !?variableMap:universalMap
      !?alloca:allocaList
      !?generatedCode:instructionGenerationList
    ]
  end 
#--- End of variableMap
  [universalMap checkLocalVariableFinalState !?instructionGenerationList]
  [!?universalMap closeBranch !mEndOfGuardDeclaration]
  [!?universalMap closeOverride !mEndOfGuardDeclaration]
#--- Guard mangled name
  let guardUserLLVMName = guardUserLLVMName (
    !receiverType.llvmBaseTypeName
    !mGuardName
    !mGuardFormalArgumentList
  )
  let guardImplementationLLVMName = guardImplementationLLVMName (
    !receiverType.llvmBaseTypeName
    !mGuardName
    !mGuardFormalArgumentList
  )
#--- Code generation
  ioIntermediateCodeStruct.mRoutineListIR += !@guardUserRoutineIR.new {
    !guardUserLLVMName
    !isRequired:false # Is not root
    !warnsIfUnused:warnIfUnused
    !guardImplementationLLVMName
    !formalArguments
    !receiverType
    !convenienceGuardGenerationIR
  }
  ioIntermediateCodeStruct.mRoutineListIR += !@guardImplementationRoutineIR.new {
    !guardImplementationLLVMName
    !isRequired:false # Is not root
    !warnsIfUnused:warnIfUnused
    !formalArguments
    !receiverType
    !convenienceGuardGenerationIR
    !allocaList
    !instructionGenerationList
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @callInstructionAST baseGuardAnalyze
  ?self:let @PLMType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  !@guardKindGenerationIR outConvenienceGuardGenerationIR

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @standAloneProcedureCallInstructionAST baseGuardAnalyze
  ?self:let @PLMType unused inSelfType
  ?routineAttributes:let @routineAttributes unused inRoutineAttributes
  ?context:let @semanticContext unused inContext
  ?mode:let @mode unused inMode
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap unused ioUniversalMap
  !@guardKindGenerationIR outConvenienceGuardGenerationIR
{
  error mSandAloneRoutineName : "NOT HANDLED YET" : outConvenienceGuardGenerationIR
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @procedureCallInstructionAST baseGuardAnalyze
  ?self:let @PLMType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  !@guardKindGenerationIR outConvenienceGuardGenerationIR
{
  @allocaList baseGuardAllocaList = {}
  @instructionListIR baseGuardInstructionGenerationList = {}
#--- Analyze header identifier : it a variable, as a standalone procedure call is handler otherwise
  @objectIR currentObject
  if mIdentifier.string == "" then # Receiver is self
    if inSelfType.kind == .void then
      error mIdentifier : "self is not available in this context" : currentObject
    else
      currentObject = .reference {!type:inSelfType !llvmName:llvmNameForSelf ()}
    end
  else
    [ioUniversalMap searchValuedObject
      !mIdentifier
      !inMode
      !ioTemporaries.mInitializedDriverSet
      ?currentObject
    ]
  end
  var currentErrorLocation = mIdentifier.location
#--- Insulate last access
  var accessList = mAccessList
  [!?accessList popLast ?let lastAccess]
#---- Loop on access list
  for (access) in accessList do
    let currentType = [currentObject type]
    switch access
    case property (@lstring propertyName) :
      let @propertyGetterMap propertyGetterMap = currentType.propertyGetterMap
      [propertyGetterMap searchKey !propertyName ?* ?let propertyAccess]
      switch propertyAccess
      case constantProperty (*) :
        error propertyName: "a constant property not available in this context" : currentObject
      case storedProperty (@PLMType propertyType @uint propertyIndex) :
        [!?ioTemporaries newTempLLVMVar ?let property_llvmName]
        [!?baseGuardInstructionGenerationList appendGetUniversalPropertyReference
          !currentType
          ![currentObject llvmName]
          !property_llvmName
          !propertyIndex
          !propertyName
        ]
        currentObject = .reference {!type:propertyType !llvmName:property_llvmName}
      case computedProperty (2*) :
        error propertyName : "a computed property cannot be named in guard" : currentObject
      end
    case arrayAccess (* @location endOfIndex *) :
      error endOfIndex : "not handled yet" : currentObject
    end
  end
#--- Handle last access
  switch lastAccess
  case property (@lstring methodName) :
    let currentType = [currentObject type]
#    let key = guardUserMangledNameFromCall (!currentType.llvmBaseTypeName !methodName !mArguments)
    let guardMangledName = [mArguments mangledName !methodName]
    [currentType.guardMap searchKey !guardMangledName ?* ?let formalSignature ?* ?let guardRoutineImplentationLLVMName]
  #--- Add receiver as first parameter
    @procCallEffectiveParameterListIR effectiveParameterListIR = {
      !.outputInput
      !.reference {!type:currentType !llvmName:[currentObject llvmName]}
    }
  #--- Analyze effective parameters
    analyzeEffectiveParameters (
      !self:inSelfType
      !routineAttributes:inRoutineAttributes
      !formal:formalSignature
      !effective:mArguments
      !errorLocation:methodName.location
      !context:inContext
      !requiredMode:inMode
      !?temporary:ioTemporaries
      !?staticEntityMap:ioStaticEntityMap
      !?variableMap:ioUniversalMap
      !?alloca:baseGuardAllocaList
      !?instructionListIR:baseGuardInstructionGenerationList
      !?effectiveIR:effectiveParameterListIR
    )
  #--- Generate guards
    outConvenienceGuardGenerationIR = .convenienceGuard {
      !baseGuardAllocaList:baseGuardAllocaList
      !baseGuardInstructionGenerationList:baseGuardInstructionGenerationList
      !baseGuardMangledName:guardRoutineImplentationLLVMName.string
      !baseGuardEffectiveParameterList:effectiveParameterListIR
    }
  case arrayAccess (* @location endOfIndex *) :
    error endOfIndex : "a property access is required here" : outConvenienceGuardGenerationIR
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @guardKindGenerationIR {
  case baseGuard
  case convenienceGuard (@allocaList baseGuardAllocaList
                         @instructionListIR baseGuardInstructionGenerationList
                         @string baseGuardMangledName
                         @procCallEffectiveParameterListIR baseGuardEffectiveParameterList)
}

#·······················································································································

class @guardUserRoutineIR : @abstractRoutineIR {
  @string mMangledImplementationGuardName
  @routineFormalArgumentListIR mFormalArgumentListForGeneration
  @PLMType mReceiverType
  @guardKindGenerationIR mGuardKindGenerationIR
}

#·······················································································································

override method @guardUserRoutineIR enterAccessibleEntities
   ?!@stringset ioInvokedRoutineSet
   ?!@uint unused ioMaxBranchOfOnInstructions
{
  ioInvokedRoutineSet += !mMangledImplementationGuardName
}

#·······················································································································

override method @guardUserRoutineIR svcDeclarationGeneration
  ?!@primitiveAndServiceIRlist ioPrimitiveAndServiceList
  ?!@sectionIRlist ioSectionList
  ?!@generationAdds unused ioGenerationAdds
{
  let userMangledName = [mRoutineMangledName assemblerRepresentation]
  let implementationMangledName = [mMangledImplementationGuardName assemblerRepresentation]
  switch mGuardKindGenerationIR
  case convenienceGuard (* * * *) :
    ioPrimitiveAndServiceList += !userMangledName !implementationMangledName !false
  case baseGuard :
    ioSectionList +=
      !userMangledName
      !implementationMangledName
      !invocationFromAnyMode: false
  end
}

#·······················································································································

override method @guardUserRoutineIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let prototype = llvmFunctionPrototype (
    !"i1" # Boolean
    ![mRoutineMangledName assemblerRepresentation]
    !mReceiverType
    !mFormalArgumentListForGeneration
  )
  ioLLVMcode += "declare " + prototype + "\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @guardImplementationRoutineIR : @abstractRoutineIR {
  @routineFormalArgumentListIR mFormalArgumentListForGeneration
  @PLMType mReceiverType
  @guardKindGenerationIR mGuardKindGenerationIR
  @allocaList mAllocaList
  @instructionListIR mInstructionGenerationList
}

#·······················································································································

override method @guardImplementationRoutineIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let guardRoutineName = [mRoutineMangledName assemblerRepresentation]
  ioLLVMcode += "define i1 @" + guardRoutineName + " ("
  let receiverLLVMTypeName = if mReceiverType.kind == .void then
    ""
  else
    [mReceiverType llvmTypeName]
  end
  var first = true
  if receiverLLVMTypeName != "" then
    ioLLVMcode += receiverLLVMTypeName + "* " + llvmNameForSelf ()
    first = false
  end
  for () in mFormalArgumentListForGeneration do
    if first then
      first = false
    else
      ioLLVMcode += ", "
    end
    switch mFormalArgumentKind
    case input :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + " %in." + mFormalArgumentName
    case output :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + "* " + llvmNameForLocalVariable (!mFormalArgumentName)
   case inputOutput :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + "* " + llvmNameForLocalVariable (!mFormalArgumentName)
    end
  end
  ioLLVMcode += ")" + llvmAttributeFunction () + "{\n"
#--- Allocate local variables 
  var allocaList = mAllocaList
#--- Store input arguments in memory
  for () in mFormalArgumentListForGeneration do
    switch mFormalArgumentKind
    case input :
      allocaList += !llvmNameForLocalVariable (!mFormalArgumentName) !mFormalArgumentType !true
    case output, inputOutput :
    end
  end
#--- Allocate local variables 
  [allocaList generateAllocaList !?ioLLVMcode]
#---
  for () in mFormalArgumentListForGeneration do
    switch mFormalArgumentKind
    case input :
      let llvmType = [mFormalArgumentType llvmTypeName]
      ioLLVMcode += "  store " + llvmType + " %in." + mFormalArgumentName + ", "
         + llvmType + " * " + llvmNameForLocalVariable (!mFormalArgumentName) + "\n"
    case output, inputOutput :
    end
  end
#--- Declare "accept" variable 
  let accepted_llvmName = llvmNameForLocalVariable (!acceptVariablePLMName ())
  let accepted_llvmName_loaded = llvmNameForLocalVariable (!acceptVariablePLMName () + ".loaded")
#--- Base guard or convenience guard ?
  switch mGuardKindGenerationIR
  case baseGuard :
    let accepted_label = acceptVariablePLMName () + ".guard.accepted"
    let rejected_label = acceptVariablePLMName () + ".guard.rejected"
    [mInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
    ioLLVMcode += "  " + accepted_llvmName_loaded + " = load i1, i1* " + accepted_llvmName + "\n"
    ioLLVMcode += "  br i1 " + accepted_llvmName_loaded + ", label %" + accepted_label + ", label %" + rejected_label + "\n\n"
    ioLLVMcode += accepted_label + ":\n"
    ioLLVMcode += "  call void @accept.guard ()\n"
    ioLLVMcode += "  ret i1 true\n\n"
    ioLLVMcode += rejected_label + ":\n"
    ioLLVMcode += "  ret i1 false\n"
    ioLLVMcode += "}\n\n"
  case convenienceGuard (baseGuardAllocaList baseGuardInstructionGenerationList baseGuardMangledName baseGuardEffectiveParameterList) :
    [baseGuardAllocaList generateAllocaList !?ioLLVMcode]
    [baseGuardInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
    ioLLVMcode += "  %invoked.guard.result = call i1 @" + [baseGuardMangledName assemblerRepresentation]
    ioLLVMcode += " ("
    for () in baseGuardEffectiveParameterList do
      switch mEffectiveParameterPassingMode
      case input:
        ioLLVMcode += [mParameter llvmTypeName] + "* " + [mParameter llvmName]
      case output:
        ioLLVMcode += [mParameter llvmTypeName] + " " + [mParameter llvmName]
      case outputInput:
        ioLLVMcode += [mParameter llvmTypeName] + "* " + [mParameter llvmName]
      end
    between
      ioLLVMcode += ", "
    end
    ioLLVMcode += ")\n"
    ioLLVMcode += "  br i1 %invoked.guard.result, label %invoked.guard.acceptation, label %invoked.guard.rejection\n\n"
    ioLLVMcode += "invoked.guard.acceptation:\n"
    [mInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
    ioLLVMcode += "  ret i1 true\n\n"
    ioLLVMcode += "invoked.guard.rejection:\n"
    ioLLVMcode += "  ret i1 false\n"
    ioLLVMcode += "}\n\n"
  end
  ioGenerationAdds.mExternFunctionDeclarationSet += !"void @accept.guard ()"
  ioGenerationAdds.mExternFunctionDeclarationSet += !"i1 @xtr.user.result ()"
}

#·······················································································································

override method @guardImplementationRoutineIR enterAccessibleEntities
  ?!@stringset ioInvokedRoutineSet
  ?!@uint ioMaxBranchOfOnInstructions
{
  [mInstructionGenerationList enterAccessibleEntities !?ioInvokedRoutineSet !?ioMaxBranchOfOnInstructions]
  switch mGuardKindGenerationIR
  case baseGuard :
  case convenienceGuard (* baseGuardInstructionGenerationList baseGuardImplementationMangledName *) :
    ioInvokedRoutineSet += !baseGuardImplementationMangledName
    [baseGuardInstructionGenerationList enterAccessibleEntities !?ioInvokedRoutineSet !?ioMaxBranchOfOnInstructions]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
