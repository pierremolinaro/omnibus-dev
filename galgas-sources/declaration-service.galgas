#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @serviceDeclarationListAST {
  @lstring mServiceName
  @lstring mServiceMode
  @lstringlist mServiceAttributeList
  @procFormalArgumentList mServiceFormalArgumentList
  @lstring mReturnTypeName
  @instructionListAST mServiceInstructionList
  @location mEndOfServiceLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <service> ?!@serviceDeclarationListAST ioServiceListAST {
    $service$
    $identifier$ ?let serviceName
    $modeName$ ?let modeName
    @lstringlist attributeList = {}
    repeat
    while
      $attribute$ ?let attribute
      attributeList += !attribute
    end
    <procedure_formal_arguments> ?formalArguments:let serviceFormalArgumentList
    @lstring returnTypeName
    select
      returnTypeName = ["" here]
    or
      $->$
      $typeName$ ?returnTypeName
    end
    ${$
    <instructionList> ?let instructionList !?*
    $}$
    ioServiceListAST +=
      !serviceName
      !modeName
      !attributeList
      !serviceFormalArgumentList
      !returnTypeName
      !instructionList
      !.here
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @serviceDeclarationListAST enterInContext
  ?receiverType:let @string inReceiverTypeName
  ?!context:@semanticContext ioContext
{
  for service in self do
  #--- Signature
    @procedureSignature signature = {}
    for (formalArgumentPassingMode selector formalArgumentTypeName *) in service.mServiceFormalArgumentList do
      let typeProxy = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !formalArgumentTypeName}
      signature += !formalArgumentPassingMode !selector.string !typeProxy
    end
  #--- Enter in context
    [!?ioContext.mRoutineMapForContext insertKey
      !@lstring.new {!inReceiverTypeName + "." + service.mServiceName !service.mServiceName.location}
      !true # service.mMutating
      !@modeMap {![userModeName () nowhere]}
      !signature
      !.service
      !false # Not weak
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @serviceDeclarationListAST serviceSemanticAnalysis
  ?receiverType:@unifiedTypeMap-proxy inReceiverType
  ?context:let @semanticContext inSemanticContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  for service in self do
    var warnIfUnused = true
    for (attribute) in service.mServiceAttributeList do
      if attribute.string == noWarningIfUnusedAttribute () then
        if not warnIfUnused then
          error attribute : "duplicate @" + noWarningIfUnusedAttribute () + " attribute"
        end
        warnIfUnused = false    
      else
        error attribute : "unknown attribute; available attribute is @" + noWarningIfUnusedAttribute ()
      end
    end
    routineSemanticAnalysis (
      !receiverType:inReceiverType
      !.service
      !{!service.mServiceMode}
      !service.mServiceName
      !service.mServiceFormalArgumentList
      !returnTypeName:service.mReturnTypeName
      !service.mServiceInstructionList
      !service.mEndOfServiceLocation
      !warnIfUnused:warnIfUnused
      !globalProcedure:true
      !weakProcedure:false
      !nullOnNoPanic:false
      !registerAccess:.readWriteAccess
      !context:inSemanticContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @routineMapIR serviceCodeGeneration
  ?!@string ioLLVMcode
  ?!@2stringlist ioServiceList
{
  for service in self do
    if service.mKind == .service then
      let serviceImplementationName = llvmNameForServiceImplementation (!service.lkey.string)
      let serviceCallName = llvmNameForServiceCall (!service.lkey.string)
      ioServiceList += !serviceCallName !serviceImplementationName
      ioLLVMcode += llvmTitleComment (!serviceImplementationName)
      ioLLVMcode += "declare void @" + llvmNameForServiceCall (!service.lkey.string) + " ("
      let typeName = [service.lkey.string stringByDeletingPathExtension]
      var first = typeName == ""
      if not first then
        ioLLVMcode += "%" + typeName + "* %self"  
      end
      for () in service.mFormalArgumentListForGeneration do
        if first then first = false else ioLLVMcode += ", " end
        switch mFormalArgumentKind
        case input :
          ioLLVMcode += [mFormalArgumentType llvmTypeName] + " %in." + mFormalArgumentName
        case output :
          ioLLVMcode += [mFormalArgumentType llvmTypeName] + "* %" + mFormalArgumentName
       case inputOutput :
          ioLLVMcode += [mFormalArgumentType llvmTypeName] + "* %" + mFormalArgumentName
        end
      end
      ioLLVMcode += ") nounwind \n\n"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateServiceDispatcher
  ?let @string inCurrentDirectory
  ?let @string inTargetName
  ?!@string ioAssemblerCode
  ?let @2stringlist inServiceList
{
  for (callName *) in inServiceList do (idx)
    var s = getTargetTextFile (!currentDir:inCurrentDirectory !from:inTargetName + "/service-entry.s")
    s = [s stringByReplacingStringByString !"!ENTRY!" !callName]
    s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
    ioAssemblerCode += s
  end
  ioAssemblerCode += getTargetTextFile (!currentDir:inCurrentDirectory !from:inTargetName + "/service-dispatcher-header.s")
  for (* implementationName) in inServiceList do (idx)
    var s = getTargetTextFile (!currentDir:inCurrentDirectory !from:inTargetName + "/service-dispatcher-entry.s")
    s = [s stringByReplacingStringByString !"!ENTRY!" !implementationName]
    s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
    ioAssemblerCode += s
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

