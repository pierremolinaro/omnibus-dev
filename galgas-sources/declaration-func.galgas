#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @functionDeclarationListAST {
  @mode mMode
  @bool mPublicFunction
  @lstring mFunctionName
  @lstringlist mFunctionAttributeList
  @routineFormalArgumentListAST mFunctionFormalArgumentList
  @lstring mFunctionReturnTypeName # Empty string if no return value
  @instructionListAST mFunctionInstructionList
  @location mEndOfFunctionDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <function> ?!@ast ioAST ?!@functionDeclarationListAST ioProcListAST {
  #--- Public ?
    @bool public
    select
      public = false
    or
      $public$
      public = true
    end
    <function_header>
      !?ioAST
      ?mode:let @mode mode
      ?name:let procName
      ?attributes:let attributeList
      ?formalArguments:let procFormalArgumentList
    @lstring returnTypeName
    select
      returnTypeName = ["" here]
    or
      $->$
      <type_definition>!?ioAST  ?returnTypeName
    end
    ${$
    <instructionList> !?ioAST ?let instructionList
    $}$
    ioProcListAST +=
      !mode
      !public
      !procName
      !attributeList
      !procFormalArgumentList
      !returnTypeName
      !instructionList
      !.here
  }

  #·····················································································································

  rule <mode> !@mode outMode {
    select
      outMode = .anyMode
    or
      $user$
      outMode = .userMode
    or
      $panic$
      outMode = .panicMode
    or
      $boot$
      outMode = .bootMode
    or
      $startup$
      outMode = .startupMode
    or
      $section$
      outMode = .sectionMode
    or
      $service$
      outMode = .serviceMode
    or
      $primitive$
      outMode = .primitiveMode
    or
      $guard$
      outMode = .guardMode
    end
  }

  #·····················································································································

  rule <function_header>
    ?!@ast ioAST
    !mode:@mode outMode
    !name:@lstring outProcName
    !attributes:@lstringlist outAttributeList
    !formalArguments:@routineFormalArgumentListAST outProcFormalArgumentList
  {
  #---
    $func$
    <mode> ?outMode
    $identifier$ ?outProcName
    outAttributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      outAttributeList += !attribute
    end
    <procedure_formal_arguments>  !?ioAST ?outProcFormalArgumentList
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES IN PRECEDENCE GRAPH                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @functionDeclarationListAST noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    for (* * formalArgumentTypeName *) in mFunctionFormalArgumentList do
      [!?ioGraph noteNode !formalArgumentTypeName]
    end
    [mFunctionInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
    if mFunctionReturnTypeName.string != "" then
      [!?ioGraph noteNode !mFunctionReturnTypeName]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @functionDeclarationListAST enterStandaloneFunctionsInContext 
  ?!context:@semanticContext ioContext
  ?!routineMap: @routineMapCTXT ioRoutineMapCTXT
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
{
  for function in self do
  #--- Signature
    routineSignature (!?ioContext.mTypeMap !function.mFunctionFormalArgumentList ?let signature)
  #--- Return type
    [@unifiedTypeMap-proxy makeOptionalProxy !?ioContext.mTypeMap !function.mFunctionReturnTypeName ?let returnTypeProxy]
  #--- Attributes
    var warnIfUnused = true
    var globalFunction = false
    var canMutateProperties = false
    var isSafe = false
    for (attribute) in function.mFunctionAttributeList do
      if attribute.string == noUnusedWarningAttribute () then
        if not warnIfUnused then
          error attribute : "duplicated @" + noUnusedWarningAttribute () + " attribute"
        end
        warnIfUnused = false    
      elsif attribute.string == exportedAttribute () then
        if globalFunction then
          error attribute : "duplicated @" + exportedAttribute () + " attribute"
        end
        globalFunction = true
      elsif attribute.string == mutatingAttribute () then
        if canMutateProperties then
          error attribute : "duplicated @" + mutatingAttribute () + " attribute"
        end
        canMutateProperties = true
      elsif attribute.string == safeAttribute () then
        if isSafe then
          error attribute : "duplicated attribute" fixit { remove }
        else
          isSafe = true
        end
      else
        error attribute : "unknown attribute; available attributes are @"
          + noUnusedWarningAttribute () + ", @" + noUnusedWarningAttribute () + ", @" + exportedAttribute ()+ ", @" + safeAttribute ()
      end
    end
    let canAccessProperties = function.mMode != .userMode
  #--- Routine mangled name
    let functionLLVMName = routineMangledNameFromAST (
      !"" 
      !function.mFunctionName
      !function.mFunctionFormalArgumentList
    )
  #--- Enter in routine map
    let @routineLLVMNameDict routineLLVMNameDict = {!function.mMode !functionLLVMName}
    let routineMangledName = [signature mangledName !function.mFunctionName]
    [!?ioRoutineMapCTXT insertKey
      !routineMangledName
      !function.mPublicFunction
      !signature
      !returnTypeProxy
      !routineLLVMNameDict
    ]
  #--- Enter in context
    [!?ioContext.mRoutineMapForContextEX insertRoutine # Raises a redefinition error
      !"" 
      !function.mFunctionName
      ![function.mFunctionFormalArgumentList routineSignature !function.mFunctionName]
      !functionLLVMName
      !.new{
        !isPublic:function.mPublicFunction
        !exported:globalFunction
        !name:function.mFunctionName
        !nameForLLVMGeneration:functionLLVMName
        !routineKind:.function {!executionMode:function.mMode}
        !signature:signature
        !returnTypeProxy:returnTypeProxy
        !canAccessProperties:canAccessProperties
        !canMutateProperties:canMutateProperties
        !safe:isSafe
      }
    ]
  #---------------- Add decorated declaration
    ioDecoratedRoutineList +=
      !receiverTypeName: ["" nowhere]
      !mode:function.mMode
      !isRequired:[ioContext.mRequiredRoutineSet hasKey !functionLLVMName.string]
      !.function {!executionMode:function.mMode}
      !warnIfUnused: warnIfUnused
      !exportedRoutine: globalFunction
      !.directPropertyAccess # @routineAttributes mRoutineAttributes
      !functionLLVMName
      !function.mFunctionFormalArgumentList
      !true # warningOnUnusedArgs
      !function.mFunctionInstructionList
      !function.mEndOfFunctionDeclaration
      !returnTypeName: function.mFunctionReturnTypeName
  end
}

#·······················································································································

method @functionDeclarationListAST enterFunctionsInPropertyMap
  ?receiverTypeName:let @lstring inReceiverTypeName # Empty string if standalone
  ?receiverLLVMBaseTypeName:let @string inReceiverLLVMBaseTypeName  # Empty string if standalone
  ?!propertyMap: @propertyMap ioPropertyMap
  ?!routineMap: @routineMapCTXT ioRoutineMapCTXT
  ?!context:@semanticContext ioContext
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
  ?!@routineListIR unused ioRoutineListIR
{
#----
  for function in self do
  #--- Attributes
    @stringset attributeSet = {}
    for attribute in function.mFunctionAttributeList do
      attributeSet += !attribute.mValue.string
    end
    let exportedFunction = [attributeSet hasKey !exportedAttribute ()]
    let canMutateProperties = [attributeSet hasKey !mutatingAttribute ()]
    let safe = [attributeSet hasKey !safeAttribute ()]
    let canAccessProperties = function.mMode != .userMode
  #--- Signature
    routineSignature (!?ioContext.mTypeMap !function.mFunctionFormalArgumentList ?let signature)
  #--- Return type
    [@unifiedTypeMap-proxy makeOptionalProxy !?ioContext.mTypeMap !function.mFunctionReturnTypeName ?let returnTypeProxy]
  #--- Routine LLVM Name name
    let functionLLVMName = routineMangledNameFromAST (
      !inReceiverLLVMBaseTypeName
      !function.mFunctionName
      !function.mFunctionFormalArgumentList
    )
  #--- Routine descriptor
    let descriptor = @routineDescriptor.new {
      !isPublic:function.mPublicFunction
      !exported:exportedFunction
      !name:function.mFunctionName
      !nameForLLVMGeneration:functionLLVMName
      !routineKind:.function {!executionMode:function.mMode}
      !signature:signature
      !returnTypeProxy:returnTypeProxy
      !canAccessProperties:canAccessProperties
      !canMutateProperties:canMutateProperties
      !safe:safe
    }
  #--- Enter in structure map
    [!?ioPropertyMap insertKey !functionLLVMName !function.mPublicFunction !.nonVirtualMethod {!descriptor:descriptor}]
  #--- Enter in routine map
    @routineLLVMNameDict routineLLVMNameDict = {!function.mMode !functionLLVMName}
    switch function.mMode
    case anyMode :
    case bootMode :
    case guardMode :
    case panicMode :
    case primitiveMode :
      routineLLVMNameDict += !.serviceMode !functionLLVMName
      routineLLVMNameDict += !.sectionMode !functionLLVMName
    case sectionMode :
    case serviceMode :
      routineLLVMNameDict += !.sectionMode !functionLLVMName
    case startupMode :
    case userMode :
    end
    let routineMangledName = [signature mangledName !function.mFunctionName]
    [!?ioRoutineMapCTXT insertKey
      !routineMangledName
      !function.mPublicFunction
      !signature
      !returnTypeProxy
      !routineLLVMNameDict
    ]
  #--- Prepare annalysis
    var warnIfUnused = true
    var functionAttributes = @routineAttributes.panicAllowed | .controlRegisterReadable
    for (attribute) in function.mFunctionAttributeList do
      if attribute.string == noUnusedWarningAttribute () then
        if not warnIfUnused then
          error attribute : "duplicated @" + noUnusedWarningAttribute () + " attribute"
        end
        warnIfUnused = false    
      elsif attribute.string == userAccessAttribute () then
        if [functionAttributes directPropertyAccess] then
          error attribute : "duplicated @" + userAccessAttribute () + " attribute"
        end
        functionAttributes = functionAttributes | .directPropertyAccess   
      elsif attribute.string == safeAttribute () then
        if not [functionAttributes panicAllowed] then
          error attribute : "duplicated @" + safeAttribute () + " attribute"
        end
        functionAttributes = functionAttributes - .panicAllowed   
      elsif attribute.string == mutatingAttribute () then
        if [functionAttributes mutating] then
          error attribute : "duplicated @" + mutatingAttribute () + " attribute"
        end
        functionAttributes = functionAttributes | .mutating    
      else
        error attribute : "unknown attribute; available attributes are @" + noUnusedWarningAttribute ()
          + ", @" + mutatingAttribute () + " and @" + userAccessAttribute ()
      end
    end
    ioDecoratedRoutineList +=
      !receiverTypeName: inReceiverTypeName
      !mode:function.mMode
      !isRequired: false
      !.function {!executionMode: function.mMode}
      !warnIfUnused: warnIfUnused
      !exportedRoutine: false
      !functionAttributes
      !functionLLVMName
      !function.mFunctionFormalArgumentList
      !true # warningOnUnusedArgs
      !function.mFunctionInstructionList
      !function.mEndOfFunctionDeclaration
      !returnTypeName: function.mFunctionReturnTypeName  # Empty string if no returned value
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @routineMapCTXT {
  @bool mIsPublic
  @routineTypedSignature mSignature
  @unifiedTypeMap-proxy mReturnTypeProxy # null if no returned value
  @routineLLVMNameDict mModeDictionary

  insert insertKey error message "the '%K' function is already declared in %L"
  search searchKey error message "there is no '%K' function"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

dict @routineLLVMNameDict : @mode {
  @string mRoutineLLVMName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
