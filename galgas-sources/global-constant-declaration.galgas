#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @globalConstantDeclaration : @abstractDeclaration {
  @lstring mTypeName
  @lstring mConstantName
  @expressionAST mSourceExpression
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @globalConstantDeclaration location -> @location outLocation {
  outLocation = mConstantName.location
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <declaration> ?!@ast ioAST {
    $let$
    $identifier$ ?let constantName
    $:$
    $identifier$ ?let typeName
    $=$
    <expression> ?let @expressionAST expression
    ioAST.mDeclarationList += !@globalConstantDeclaration.new {
      !typeName
      !constantName
      !expression
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @globalConstantDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addNode !mConstantName !self]
  [!?ioGraph addEdge !mConstantName !mTypeName]
  [mSourceExpression addDependenceEdgeForStaticExpression !mConstantName !?ioGraph]
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @globalConstantDeclaration keyRepresentation -> @string outRepresentation {
  outRepresentation = "global constant " + mConstantName 
}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

abstract method @expressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph

#----------------------------------------------------------------------------------------------------------------------*
#  ENTER IN CONTEXT                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @globalConstantDeclaration enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
{
#--- Get destination type
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !mTypeName ?let constantType]
#--- Analyze source expression
  @uint temporaryIndex = 0
  @instructionListIR instructionGenerationList = {}
  @variableMap variableMap = .emptyMap
  [mSourceExpression analyzeExpression
     !optionalReceiverType:.noReceiver
     !optionalTargetType:constantType
     !context:ioContext
     !mode:""
     !?temporary:temporaryIndex
     !?staticStringMap:ioGlobalLiteralStringMap
     !?variableMap:variableMap
     !?instructionListIR:instructionGenerationList
     ?expressionType:let @unifiedTypeMap-proxy expressionType
#     ?generatedCode:*
     ?result:let @variableKindIR resultValueName
  ]
  if ([instructionGenerationList length] > 0) || not [resultValueName isStatic] then
    error mConstantName : "source expression cannot be statically computed"
  end
#--- Enter in context
  [!?ioContext.mGlobalConstantMap insertKey
    !mConstantName
    !expressionType
    !resultValueName
  ]
}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTIC ANALYSIS                                                                                                   *
#----------------------------------------------------------------------------------------------------------------------*

override method @globalConstantDeclaration semanticAnalysis
  ?context:let @semanticContext inContext
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#--- Code generation
  [inContext.mGlobalConstantMap searchKey
    !mConstantName
    ?*
    ?let expressionGeneratedCode
  ]
  [!?ioIntermediateCodeStruct.mGlobalConstantMap insertKey
    !mConstantName
    !expressionGeneratedCode
  ]
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

private filewrapper globalConstantGenerationTemplate in "../generation-templates" {
}{
}{
  template declaration "global-constant-declaration.galgasTemplate"
    ?@string GLOBAL_CONSTANT_NAME
    ?@string CONSTANT_VALUE
}

#----------------------------------------------------------------------------------------------------------------------*

getter @globalConstantMapIR-element headerCodeGeneration -> @string outCode {
  outCode = [filewrapper globalConstantGenerationTemplate.declaration
    !lkey.string
    ![mValueExpressionGeneration mangledName]
  ]
}

#----------------------------------------------------------------------------------------------------------------------*
