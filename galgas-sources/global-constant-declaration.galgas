#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @globalConstantDeclaration : @abstractDeclaration {
  @lstring mTypeName
  @lstring mConstantName
  @expressionAST mSourceExpression
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @globalConstantDeclaration location -> @location outLocation {
  outLocation = mConstantName.location
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <declaration> ?!@ast ioAST {
    $let$
    $identifier$ ?let constantName
    @lstring typeName
    select
      typeName = ["" nowhere]
    or
      $typeName$ ?typeName
    end
    $=$
    <expression> ?let @expressionAST expression
    ioAST.mDeclarationList += !@globalConstantDeclaration.new {
      !typeName
      !constantName
      !expression
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @globalConstantDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addNode !mConstantName !self]
  if mTypeName.string != "" then
    [!?ioGraph addEdge !mConstantName !mTypeName]
  end
  [mSourceExpression addDependenceEdgeForStaticExpression !mConstantName !?ioGraph]
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @globalConstantDeclaration keyRepresentation -> @string outRepresentation {
  outRepresentation = "global constant " + mConstantName 
}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

abstract method @expressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph

#----------------------------------------------------------------------------------------------------------------------*
#  ENTER IN CONTEXT                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @globalConstantDeclaration enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
{
#--- Get destination type
  @unifiedTypeMap-proxy constantType
  if mTypeName.string == "" then
    constantType = .null
  else
    [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !mTypeName ?constantType]
  end
#--- Analyze source expression
  @semanticTemporariesStruct temporaries = .default
  @instructionListIR instructionGenerationList = {}
  @variableMap variableMap = .emptyMap
  [mSourceExpression analyzeExpression
     !routineNameForInvocationGraph:["compiler" nowhere]
     !optionalReceiverType:.noReceiver
     !optionalTargetType:constantType
     !context:ioContext
     !modes:{}
     !allowException:true
     !?temporary:temporaries
     !?staticStringMap:ioGlobalLiteralStringMap
     !?variableMap:variableMap
     !?instructionListIR:instructionGenerationList
     ?type:let @unifiedTypeMap-proxy expressionType
     ?result:let @operandIR expressionValue
  ]
#--- Check assignment compatibility
  checkAssignmentCompatibility (
    !sourceType:expressionType
    !sourceValue:expressionValue
    !targetType:constantType
    !errorLocation:mConstantName.location
  )
#--- Check source expression is statically comtuted
  if ([instructionGenerationList length] > 0) || not [expressionValue isStatic] then
    error mConstantName : "source expression cannot be statically computed"
  end
##--- Check constant value
#  switch [constantType kind]
#  case boolean :
#    switch resultValue
#    case literalInteger (@bigint value) :
#      if (value < 0G) || (value > 1G) then
#        error mConstantName : "boolean constant internal error"
#      end
#    case llvmGlobalObject (*) :
#      error mConstantName : "source expression cannot be statically computed"
#    case llvmLocalObject (*) :
#      error mConstantName : "source expression cannot be statically computed"
#    end
#  case boolset :
#    error mConstantName : "boolset constant not handled yet"
#  case enumeration (unused valueMap) :
#    error mConstantName : "enumeration constant not handled yet"
#  case integer (@bigint min @bigint max * *) :
#    switch resultValue
#    case literalInteger (@bigint value) :
#      if value < min then
#        error mConstantName : "source expression too small (should be >= " + min + ")"
#      elsif value > max then
#        error mConstantName : "source expression too large (should be <= " + max + ")"
#      end
#    case llvmGlobalObject (*) :
#      error mConstantName : "source expression cannot be statically computed"
#    case llvmLocalObject (*) :
#      error mConstantName : "source expression cannot be statically computed"
#    end
#  case literalInteger :
#    error mConstantName : "internal error"
#  case literalString :
#    error mConstantName : "internal error"
#  case structure (*) :
#    error mConstantName : "structure constant not handled yet"
#  end
#--- Enter in context
  [!?ioContext.mGlobalConstantMap insertKey
    !mConstantName
    !expressionType
    !expressionValue
  ]
}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTIC ANALYSIS                                                                                                   *
#----------------------------------------------------------------------------------------------------------------------*

override method @globalConstantDeclaration initAnalysis ?!context:@semanticContext unused ioContext { }

#----------------------------------------------------------------------------------------------------------------------*

override method @globalConstantDeclaration semanticAnalysis
  ?context:let @semanticContext inContext
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  [inContext.mGlobalConstantMap searchKey
    !mConstantName
    ?let type
    ?let expressionGeneratedCode
  ]
  [!?ioIntermediateCodeStruct.mGlobalConstantMap insertKey
    !mConstantName
    !type
    !expressionGeneratedCode
  ]
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

method @globalConstantMapIR-element generateLLVM ?!@string ioCode {
  ioCode += "@" + mangledNameForGlobalVariable (!lkey.string) + " = internal constant "
  ioCode += [mType llvmTypeName] + " " +  mSourceExpression + "\n"
}

#----------------------------------------------------------------------------------------------------------------------*
