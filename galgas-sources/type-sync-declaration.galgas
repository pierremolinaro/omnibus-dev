#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#—————————————————————————————————————————————————————————————————————————————————————————————————

class @syncDeclarationAST : @abstractDeclarationAST {
  public var @lstring mSyncToolName
  public var @structurePropertyListAST mStructurePropertyListAST
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $sync$
    $\$type$ ?let structureName
    ${$
    var @structurePropertyListAST fieldList = @()
    repeat
    while
      <private_or_public_struct_property_declaration> !?ioAST !?fieldList
    while
      <function_declaration> !?ioAST !receiverTypeName: structureName
    while
      <system_routine_declaration> !?ioAST !receiverTypeName: structureName
    while
      <guard> !?ioAST !receiverTypeName: structureName !receiverLLVMBaseTypeName: structureName.string
    end
    $}$
    ioAST.mDeclarationListAST += !@syncDeclarationAST {
      !structureName
      !fieldList
    }
  }

  #·····················································································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @syncDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
#--- Add structure type name as node
  [!?ioGraph addNode !self.mSyncToolName !self]
#--- Add property types
  for (propertyName * visibility fieldTypeName propertyKind) in self.mStructurePropertyListAST do
    if fieldTypeName.string != "" then
      [!?ioGraph addEdge !self.mSyncToolName !fieldTypeName]
    end
    if visibility != .isPrivate then
      error propertyName : "a sync tool property should be private"
    end
    switch propertyKind
    case uninitializedStoredProperty, uninitializedConstantProperty :
    case initializedStoredProperty (initExpression) :
      [initExpression addDependenceEdgeForStaticExpression !self.mSyncToolName !?ioGraph]
    case initializedConstantProperty (initExpression) :
      [initExpression addDependenceEdgeForStaticExpression !self.mSyncToolName !?ioGraph]
    case readOnlyComputedProperty (instructionList *) :
      [instructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
    case writeComputedProperty (writeInstructionList *) :
      [writeInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
    end
  end
}

#·······················································································································

override getter @syncDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "sync " + self.mSyncToolName 
}

#·······················································································································

override getter @syncDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = self.mSyncToolName.location
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @syncDeclarationAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
  ?!@routineListIR unused ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR ioUserLLVMTypeDefinitionListIR
{
#---------------------------------------- Properties
  var @propertyList propertyList = @()
  var @sortedOperandIRList sortedOperandIRList = @()
  var @constructorSignature constructorSignature = @()
  var @string constructorKey = "("
  for property in self.mStructurePropertyListAST do
    [property enterPropertyInContext
      !?context:ioContext
      !?staticEntityMap:ioStaticEntityMap
      !receiverTypeName: self.mSyncToolName
      !omnibusTypeName: self.mSyncToolName
      !receiverLLVMBaseTypeName: self.mSyncToolName
      !?ioDecoratedRoutineList
      !?propertyList
      !?sortedOperandIRList
      !?constructorSignature
      !?constructorKey
      !? %from true
    ]
  end
  constructorKey += ")"
#---------------------------------------- Constructor map
  var @constructorMap constructorMap = @()
  [!?constructorMap insertKey
    ! @{!constructorKey !self.mSyncToolName.location}
    !constructorSignature
    !.structure {!sortedOperandList:sortedOperandIRList}
  ]
  [!?ioContext.mTypeConstructorMap insertKey !self.mSyncToolName !constructorMap]
#---------------------------------------- Enter in type map
  let structureType = @omnibusType {
    !subscript:.noSubscript
    !attributes:.instanciable
    !omnibusTypeDescriptionName: self.mSyncToolName
    !kind: .syncTool
    !llvmBaseTypeName:self.mSyncToolName
  }
  [!?ioContext.mTypeMap insertType !self.mSyncToolName !type: structureType]
#-------------------------------------------- GenerateLLVM type definitions
  ioUserLLVMTypeDefinitionListIR += !@userLLVMSructureTypeDefinitionIR {
    ![structureType llvmTypeName]
    !propertyList
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

