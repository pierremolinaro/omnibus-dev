#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @syncDeclarationAST : @abstractDeclarationAST {
  @lstring mSyncToolName
  @structurePropertyListAST mStructurePropertyListAST
  @functionDeclarationListAST mFunctionDeclarationListAST
  @systemRoutineDeclarationListAST mSystemRoutineListAST
  @guardDeclarationListAST mGuardListAST
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $sync$
    $\$type$ ?let structureName
    ${$
    @functionDeclarationListAST procedureDeclarationListAST = {}
    @structurePropertyListAST fieldList = {}
    @systemRoutineDeclarationListAST systemRoutineListAST = {}
    @guardDeclarationListAST guardListAST = {}
    repeat
    while
      <private_or_public_struct_property_declaration> !?ioAST !?fieldList !singletonObject:false
    while
      <function> !?ioAST !?procedureDeclarationListAST
    while
      <system_routine> !?ioAST !?systemRoutineListAST
    while
      <guard> !?ioAST !?guardListAST
    end
    $}$
    ioAST.mDeclarationListAST += !@syncDeclarationAST.new {
      !structureName
      !fieldList
      !procedureDeclarationListAST
      !systemRoutineListAST
      !guardListAST
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @syncDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
#--- Add structure type name as node
  [!?ioGraph addNode !mSyncToolName !self]
#--- Add property types
  for (propertyName 2* public fieldTypeName initExpression *) in mStructurePropertyListAST do
    if fieldTypeName.string != "" then
      [!?ioGraph addEdge !mSyncToolName !fieldTypeName]
    end
    if public then
      error propertyName : "a sync tool property cannot be public (should be private)"
    end
    switch initExpression
    case noExpression :
    case expression (initExpression) :
      [initExpression addDependenceEdgeForStaticExpression !mSyncToolName !?ioGraph]
    end
  end
#--- Add structure functions
  for () in mFunctionDeclarationListAST do
    for (* * formalArgumentTypeName *) in mFunctionFormalArgumentList do
      [!?ioGraph noteNode !formalArgumentTypeName]
    end
    if mFunctionReturnTypeName.string != "" then
      [!?ioGraph noteNode !mFunctionReturnTypeName]
    end
    [mFunctionInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
#--- Add structure services, section, primitives and guards
  [mSystemRoutineListAST noteTypesInPrecedenceGraph !?ioGraph]
  [mGuardListAST noteTypesInPrecedenceGraph !?ioGraph]
}

#·······················································································································

override getter @syncDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "synctype." + mSyncToolName 
}

#·······················································································································

override getter @syncDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = mSyncToolName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @syncDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!globalVariables:@globalVariableIRList ioGlobalVariableIRList
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
{
#---------------------------------------- Properties
  @propertyList propertyList = {}
  @propertyMap propertyMap = {}
  @sortedOperandIRList sortedOperandIRList = {}
  @constructorSignature constructorSignature = {}
  @string constructorKey = "("
  for property in mStructurePropertyListAST do
    [property enterPropertyInContext
      !mSyncToolName
      !?context:ioContext
      !?staticEntityMap:ioStaticEntityMap
      !?propertyList
      !?propertyMap
      !?sortedOperandIRList
      !?constructorSignature
      !?constructorKey
      !?*
      !?ioGlobalVariableIRList
    ]
  end
  constructorKey += ")"
#---------------------------------------- Constructor map
  @constructorMap constructorMap = {}
  [!?constructorMap insertKey
    !.new {!constructorKey !mSyncToolName.location}
    !constructorSignature
    !.structure {!sortedOperandList:sortedOperandIRList}
  ]
#---------------------------------------- Enter functions in property map
  [mFunctionDeclarationListAST enterFunctionsInPropertyMap
    !mSyncToolName
    !?context:ioContext
    !?propertyMap
  ]
#---------------------------------------- Enter system routines in property map
  [mSystemRoutineListAST enterSystemRoutineInContext
    !receiverTypeName: mSyncToolName
    !receiverLLVMBaseTypeName: mSyncToolName
    !?propertyMap: propertyMap
    !?context: ioContext
    !?ioDecoratedRoutineList
    !?ioRoutineListIR
  ]
#---------------------------------------- Enter guards in guard map
  @guardMapForContext guardMap = {}
  for guard in mGuardListAST do
  #--- Guard mangled name
    let guardMangledName = guardUserMangledNameFromAST (
      !mSyncToolName
      !guard.mGuardName
      !guard.mGuardFormalArgumentList
    )
  #--- Signature
    routineSignature (!?ioContext.mTypeMap !guard.mGuardFormalArgumentList ?let signature)
  #--- Enter in context
    [!?guardMap insertKey
      !guardMangledName
      !guard.mIsPublic
      !signature
    ]
  end
#---------------------------------------- Enter in type map
  let structureType = @PLMType.new {
    !propertyMap:propertyMap
    !classConstantMap:{}
    !constructorMap:constructorMap
    !guardMap:guardMap
    !attributes:.instanciable
    !plmTypeDescriptionName:mSyncToolName # "sync " + mSyncToolName
    !kind:.syncTool {!propertyList:propertyList}
    !llvmBaseTypeName:mSyncToolName
  }
  [!?ioContext.mTypeMap insertType
    !lkey:mSyncToolName
    !type:structureType
    !index:[ioContext.mTypeMap count]
    !generate:true
  ]
#---------------- Enter decorated functions
  for function in mFunctionDeclarationListAST do
    var warnIfUnused = true
    var functionAttributes = @routineAttributes.panicAllowed | .controlRegisterReadable
    for (attribute) in function.mFunctionAttributeList do
      if attribute.string == noUnusedWarningAttribute () then
        if not warnIfUnused then
          error attribute : "duplicated @" + noUnusedWarningAttribute () + " attribute"
        end
        warnIfUnused = false    
      elsif attribute.string == userAccessAttribute () then
        if [functionAttributes directPropertyAccess] then
          error attribute : "duplicated @" + userAccessAttribute () + " attribute"
        end
        functionAttributes = functionAttributes | .directPropertyAccess   
      elsif attribute.string == safeAttribute () then
        if not [functionAttributes panicAllowed] then
          error attribute : "duplicated @" + safeAttribute () + " attribute"
        end
        functionAttributes = functionAttributes - .panicAllowed   
      elsif attribute.string == mutatingAttribute () then
        if [functionAttributes mutating] then
          error attribute : "duplicated @" + mutatingAttribute () + " attribute"
        end
        functionAttributes = functionAttributes | .mutating    
      else
        error attribute : "unknown attribute; available attributes are @" + noUnusedWarningAttribute ()
          + ", @" + mutatingAttribute () + " and @" + userAccessAttribute ()
      end
    end
    let functionMangledName = routineMangledNameFromAST (!mSyncToolName !function.mFunctionName !function.mFunctionFormalArgumentList)
    ioDecoratedRoutineList +=
      !mSyncToolName
      !function.mMode
      !false
      !.function {!executionMode: function.mMode}
      !warnIfUnused
      !false # mExportedRoutine
      !functionAttributes
      !functionMangledName
      !function.mFunctionFormalArgumentList
      !true # warningOnUnusedArgs
      !function.mFunctionInstructionList
      !function.mEndOfFunctionDeclaration
      !function.mFunctionReturnTypeName  # Empty string if no returned value
  end
#---------------- Add decorated declaration
  ioDecoratedDeclarationList += !@decoratedStructureDeclaration.new {
    !mSyncToolName
    !mGuardListAST
    !false # Do not implement deinit
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

