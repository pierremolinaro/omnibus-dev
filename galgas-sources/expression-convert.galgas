#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @convertExpressionAST : @expressionAST {
  @expressionAST mExpression
  @lstring mTypeName
  @location mEndOfExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    $convert$
    @lstring typeName
    select
      typeName = ["" here]
    or
      <type_definition> !?ioAST ?typeName
    end
    $($
    <expression> !?ioAST ?outExpression
    let endOfExpression = @location.here
    $)$
    outExpression = @convertExpressionAST.new {
      !outExpression
      !typeName
      !endOfExpression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @convertExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [self.mExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
  if self.mTypeName.string != "" then
    [!?ioGraph noteNode !self.mTypeName]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @convertExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [self.mExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  if self.mTypeName.string != "" then
    [!?ioGraph noteNode !self.mTypeName]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @convertExpressionAST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @convertExpressionAST analyzeExpression
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?optionalTargetType:let @omnibusType inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- Analyze expression
  [self.mExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR expressionResult
  ]
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?expressionResult
  ]  
#--- 
  if [inMode isSafe] then
    error self.mTypeName : "operations that can generate panic are not allowed in " + panicModeName () + " mode"
  end
#--- Analyze type
  let @omnibusType resultType = if self.mTypeName.string == ""
    then inOptionalTargetType
    else [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !self.mTypeName} type]
  end
#--- Check types
  if not [resultType.kind isInteger] then
    error self.mTypeName : "this type is not an integer type" : outResult
  elsif not [[expressionResult type].kind isInteger] then
    error self.mEndOfExpression : "expression type is not an integer type" : outResult
  else
    [[expressionResult type].kind integer ?min:let minSource ?max:let maxSource ?2*]
    [resultType.kind integer ?min:let minTarget ?max:let maxTarget ?2*]
    let alwaysPossible = (minTarget <= minSource) && (maxTarget >= maxSource)
    if alwaysPossible then
      error self.mTypeName:"useless explicit conversion"
    end
    getNewTempValue (!resultType !?ioTemporaries ?outResult)
    if [option omnibus_options.noPanicGeneration value] then
      ioInstructionGenerationList += !@truncateInstructionIR.new {
        !outResult
        !expressionResult
      }
    else
      ioInstructionGenerationList += !@convertInstructionIR.new {
        !outResult
        !expressionResult
        !self.mTypeName.location
      }
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @convertInstructionIR
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @convertInstructionIR : @abstractInstructionIR {
  @objectIR mTarget
  @objectIR mOperand
  @location mLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @convertInstructionIR enterAccessibleEntities
  ?!@stringset ioInvokedRoutineSet
  ?!@uint unused ioMaxBranchOfOnInstructions
{
  ioInvokedRoutineSet += !panicRoutineNameForLocationFile (!self.mLocation)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @convertInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let lbl = [[self.mLocation locationIndex] string]
  let convertMinOkLabel = "min." + lbl + ".ok"
  let convertMaxOkLabel = "max." + lbl + ".ok"
  let convertFailLabel  = "fail." + lbl
  let compareMinVar     = "cmp." + lbl + ".min"
  let compareMaxVar     = "cmp." + lbl + ".max"
  [[self.mTarget type].kind integer ?min:let minTarget ?max:let maxTarget ?2*]
  [[self.mOperand type].kind integer ?min:let minSource ?max:* ?unsigned:let operandIsUnsigned ?1*]
  let operandType = [self.mOperand llvmTypeName]
  if minTarget != minSource then
    ioLLVMcode += "  %" + compareMinVar + " = icmp "
    ioLLVMcode += if operandIsUnsigned then "uge" else "sge" end
    ioLLVMcode += " " + operandType + " " + [self.mOperand llvmName] + ", " + minTarget + "\n"
    ioLLVMcode += "  br i1 %" + compareMinVar + ", label %" + convertMinOkLabel + ", label %" + convertFailLabel + "\n\n"
    ioLLVMcode += convertMinOkLabel + ":\n"
  end
  ioLLVMcode += "  %" + compareMaxVar + " = icmp "
  ioLLVMcode += if operandIsUnsigned then "ule" else "sle" end
  ioLLVMcode += " " + operandType + " " + [self.mOperand llvmName] + ", " + maxTarget + "\n"
  ioLLVMcode += "  br i1 %" + compareMaxVar + ", label %" + convertMaxOkLabel + ", label %" + convertFailLabel + "\n\n"
  ioLLVMcode += convertFailLabel + ":\n"
  ioLLVMcode += "  call void @" + [panicRoutineNameForLocationFile (!self.mLocation) assemblerRepresentation] + " ("
  ioLLVMcode += [inGenerationContext.mPanicLineLLVMType llvmTypeName] + " " + [self.mLocation line] + ", "
  ioLLVMcode += [inGenerationContext.mPanicCodeLLVMType llvmTypeName] + " " + panicCodeForConvertOverflow () + ") ; File '" + [[self.mLocation file] lastPathComponent] + "'\n"
  ioLLVMcode += "  unreachable\n\n"
  ioLLVMcode += convertMaxOkLabel + ":\n"
  ioLLVMcode += "  " + [self.mTarget llvmName] + " = trunc " + operandType + " " + [self.mOperand llvmName] + " to " + [self.mTarget llvmTypeName] + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
