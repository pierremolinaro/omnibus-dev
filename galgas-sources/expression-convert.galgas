#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @convertExpressionAST : @expressionAST {
  @expressionAST mExpression
  @lstring mTypeName
  @location mEndOfExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  rule <primary> !@expressionAST outExpression {
    $convert$
    <expression> ?outExpression
    let endOfExpression = @location.here
    $:$
    $\$type$ ?let typeIdentifier
    outExpression = @convertExpressionAST.new {
      !outExpression
      !typeIdentifier
      !endOfExpression
    }
  }

  #••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @convertExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [mExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
  let typeName = llvmRegularTypeMangledNameFromName (!mTypeName)
  [!?ioGraph noteNode !typeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @convertExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  let typeName =llvmRegularTypeMangledNameFromName (!mTypeName)
  [!?ioGraph noteNode !typeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @convertExpressionAST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @convertExpressionAST analyzeExpression
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@unifiedSymbolMap ioVariableMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- Analyze expression
  [mExpression analyzeExpression
    !self:inSelfType
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !inGuard:inGuard
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR expressionResultPossibleReference
  ]
  [!?ioInstructionGenerationList appendLoadFromReference
    !?ioTemporaries
    !expressionResultPossibleReference
    !mTypeName
    ?let expressionResult
  ]  
#--- 
  if not [inCurrentMode panicAllowed] then
    error mTypeName : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
  end
#--- Analyze type
  let resultType = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mTypeName}
#--- Check types
  if not [[resultType kind] isInteger] then
    error mTypeName : "this type is not an integer type" : outResult
  elsif not [[expressionResult kind] isInteger] then
    error mEndOfExpression : "expression type is not an integer type" : outResult
  else
    [[expressionResult kind] integer ?min:let minSource ?max:let maxSource ?2*]
    [[resultType kind] integer ?min:let minTarget ?max:let maxTarget ?2*]
    let alwaysPossible = (minTarget <= minSource) && (maxTarget >= maxSource)
    if alwaysPossible then
      error mTypeName:"useless explicit conversion"
    end
    getNewTempVariable (!resultType !mEndOfExpression !?ioTemporaries ?outResult)
    if [option plm_options.noPanicGeneration value] then
      ioInstructionGenerationList += !@truncateInstructionIR.new {
        !outResult
        !expressionResult
      }
    else
      ioInstructionGenerationList += !@convertInstructionIR.new {
        !outResult
        !expressionResult
        !mTypeName.location
      }
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @convertExpressionAST analyzeExpressionNew
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- Analyze expression
  [mExpression analyzeExpressionNew
    !self:inSelfType
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !inGuard:inGuard
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR expressionResultPossibleReference
  ]
  [!?ioInstructionGenerationList appendLoadFromReference
    !?ioTemporaries
    !expressionResultPossibleReference
    !mTypeName
    ?let expressionResult
  ]  
#--- 
  if not [inCurrentMode panicAllowed] then
    error mTypeName : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
  end
#--- Analyze type
  let resultType = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mTypeName}
#--- Check types
  if not [[resultType kind] isInteger] then
    error mTypeName : "this type is not an integer type" : outResult
  elsif not [[expressionResult kind] isInteger] then
    error mEndOfExpression : "expression type is not an integer type" : outResult
  else
    [[expressionResult kind] integer ?min:let minSource ?max:let maxSource ?2*]
    [[resultType kind] integer ?min:let minTarget ?max:let maxTarget ?2*]
    let alwaysPossible = (minTarget <= minSource) && (maxTarget >= maxSource)
    if alwaysPossible then
      error mTypeName:"useless explicit conversion"
    end
    getNewTempVariable (!resultType !mEndOfExpression !?ioTemporaries ?outResult)
    if [option plm_options.noPanicGeneration value] then
      ioInstructionGenerationList += !@truncateInstructionIR.new {
        !outResult
        !expressionResult
      }
    else
      ioInstructionGenerationList += !@convertInstructionIR.new {
        !outResult
        !expressionResult
        !mTypeName.location
      }
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @convertInstructionIR
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @convertInstructionIR : @abstractInstructionIR {
  @objectIR mTarget
  @objectIR mOperand
  @location mLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @convertInstructionIR enterAccessibleEntities
  ?!@accessibleEntities unused ioAccessibleEntities
  ?!@uint unused ioMaxBranchOfOnInstructions
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @convertInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  [!?ioGenerationAdds.mStaticStringMap findOrAddStaticString
    ![[[mLocation file] lastPathComponent] stringByDeletingPathExtension]
    ?let staticStringIndex
  ]
  let lbl = [[mLocation locationIndex] string]
  let convertMinOkLabel = "min." + lbl + ".ok"
  let convertMaxOkLabel = "max." + lbl + ".ok"
  let convertFailLabel  = "fail." + lbl
  let compareMinVar     = "cmp." + lbl + ".min"
  let compareMaxVar     = "cmp." + lbl + ".max"
  [[mTarget kind] integer ?min:let minTarget ?max:let maxTarget ?2*]
  [[mOperand kind] integer ?min:let minSource ?max:* ?unsigned:let operandIsUnsigned ?1*]
  let operandType = [mOperand llvmTypeName]
  if minTarget != minSource then
    ioLLVMcode += "  %" + compareMinVar + " = icmp "
    ioLLVMcode += if operandIsUnsigned then "uge" else "sge" end
    ioLLVMcode += " " + operandType + " " + [mOperand llvmName] + ", " + minTarget + "\n"
    ioLLVMcode += "  br i1 %" + compareMinVar + ", label %" + convertMinOkLabel + ", label %" + convertFailLabel + "\n\n"
    ioLLVMcode += convertMinOkLabel + ":\n"
  end
  ioLLVMcode += "  %" + compareMaxVar + " = icmp "
  ioLLVMcode += if operandIsUnsigned then "ule" else "sle" end
  ioLLVMcode += " " + operandType + " " + [mOperand llvmName] + ", " + maxTarget + "\n"
  ioLLVMcode += "  br i1 %" + compareMaxVar + ", label %" + convertMaxOkLabel + ", label %" + convertFailLabel + "\n\n"
  ioLLVMcode += convertFailLabel + ":\n"
  ioLLVMcode += "  call void @raise_panic." + staticStringIndex + " ("
  ioLLVMcode += inGenerationContext.mPanicLineLLVMType + " " + [mLocation line] + ", "
  ioLLVMcode += inGenerationContext.mPanicCodeLLVMType + " " + panicCodeForConvertOverflow () + ") ; File '" + [[mLocation file] lastPathComponent] + "'\n"
  ioLLVMcode += "  unreachable\n\n"
  ioLLVMcode += convertMaxOkLabel + ":\n"
  ioLLVMcode += "  " + [mTarget llvmName] + " = trunc " + operandType + " " + [mOperand llvmName] + " to " + [mTarget llvmTypeName] + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
