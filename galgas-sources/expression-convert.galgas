#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @convertExpressionAST : @expressionAST {
  @expressionAST mExpression
  @lstring mTypeName
  @location mEndOfExpression
}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @convertExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [mExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*
#! @convertExpressionAST
#----------------------------------------------------------------------------------------------------------------------*

override method @convertExpressionAST analyzeExpression
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType inReceiverType
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@operandIR outResult
{
#--- Analyze expression
  [mExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalReceiverType:inReceiverType
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?result:@operandIR expressionResult
  ]
#--- 
  if not inAllowExceptions then
    error mTypeName : "operations that can generate exceptions are not allowed in $" + exceptionModeName () + " mode"
  end
#--- Analyze type
  let resultType = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mTypeName}
#--- Check types
  if not [[resultType kind] isInteger] then
    error mTypeName : "this type is not an integer type" : outResult
  elsif not [[expressionResult.mType kind] isInteger] then
    error mEndOfExpression : "expression type is not an integer type" : outResult
  else
    [[expressionResult.mType kind] integer ?min:let minSource ?max:let maxSource ?unsigned:* ?bitCount:*]
    [[resultType kind] integer ?min:let minTarget ?max:let maxTarget ?unsigned:* ?bitCount:*]
    let alwaysPossible = (minTarget <= minSource) && (maxTarget >= maxSource)
    if alwaysPossible then
      error mTypeName:"useless explicit conversion"
    end
    getNewTempVariable (!resultType !?ioTemporaries ?outResult)
    if [option plm_options.noExceptionGeneration value] then
      ioInstructionGenerationList += !@truncateInstructionIR.new {
        !outResult
        !expressionResult
      }
    else
      ioInstructionGenerationList += !@convertInstructionIR.new {
        !outResult
        !expressionResult
        !mTypeName.location
      }
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*
#! @convertInstructionIR
#----------------------------------------------------------------------------------------------------------------------*

class @convertInstructionIR : @abstractInstructionIR {
  @operandIR mTarget
  @operandIR mOperand
  @location mLocation
}

#----------------------------------------------------------------------------------------------------------------------*

override method @convertInstructionIR enterAccessibleEntities ?!@accessibleEntities unused ioAccessibleEntities {
}

#----------------------------------------------------------------------------------------------------------------------*

override method @convertInstructionIR llvmInstructionCode
  ?!@string ioCode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  [!?ioGenerationAdds.mStaticStringMap findOrAddStaticString ![[mLocation file] lastPathComponent] ?let staticStringIndex]
  let lbl = [[mLocation locationIndex] string]
  let convertMinOkLabel = "min." + lbl + ".ok"
  let convertMaxOkLabel = "max." + lbl + ".ok"
  let convertFailLabel  = "fail." + lbl
  let compareMinVar     = "cmp." + lbl + ".min"
  let compareMaxVar     = "cmp." + lbl + ".max"
  [[mTarget.mType kind] integer ?min:let minTarget ?max:let maxTarget ?unsigned:* ?bitCount:*]
  [[mOperand.mType kind] integer ?min:let minSource ?max:* ?unsigned:let operandIsUnsigned ?bitCount:*]
  let operandType = [mOperand.mType llvmTypeName]
  if minTarget != minSource then
    ioCode += "  %" + compareMinVar + " = icmp "
    ioCode += if operandIsUnsigned then "uge" else "sge" end
    ioCode += " " + operandType + " " + mOperand.mValue + ", " + minTarget + "\n"
    ioCode += "  br i1 %" + compareMinVar + ", label %" + convertMinOkLabel + ", label %" + convertFailLabel + "\n\n"
    ioCode += convertMinOkLabel + ":\n"
  end
  ioCode += "  %" + compareMaxVar + " = icmp "
  ioCode += if operandIsUnsigned then "ule" else "sle" end
  ioCode += " " + operandType + " " + mOperand.mValue + ", " + maxTarget + "\n"
  ioCode += "  br i1 %" + compareMaxVar + ", label %" + convertMaxOkLabel + ", label %" + convertFailLabel + "\n\n"
  ioCode += convertFailLabel + ":\n"
  ioCode += "  %str." + lbl + " = load i8*, i8** " + literalStringName (!staticStringIndex) + "\n"
  ioCode += "  call void @raise_exception ("
  ioCode += inGenerationContext.mExceptionCodeLLVMType + " 5, "
  ioCode += "i8* %str." + lbl + ", "
  ioCode += inGenerationContext.mExceptionLineLLVMType + " " + [mLocation line] + ")\n"
  ioCode += "  unreachable\n\n"
  ioCode += convertMaxOkLabel + ":\n"
  ioCode += "  " + mTarget.mValue + " = trunc " + operandType + " " + mOperand.mValue + " to " + [mTarget.mType llvmTypeName] + "\n"
}

#----------------------------------------------------------------------------------------------------------------------*
