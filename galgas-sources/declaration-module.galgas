#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $module$
    $identifier$ ?let moduleName
    ${$
    @procedureDeclarationListAST procedureDeclarationListAST = {}
    @structureFieldListAST fieldList = {}
    @serviceDeclarationListAST serviceListAST = {}
    @primitiveDeclarationListAST primitiveListAST = {}
    @guardDeclarationListAST guardListAST = {}
    @sectionDeclarationListAST sectionListAST = {}
    @initList initList = {}
    repeat
    while
      <declaration_init> !?initList
    while
      <isr> !?ioAST.mISRDeclarationListAST
    while
      $var$
      $identifier$ ?let fieldName
      @lstring typeName
      select
        $typeName$ ?typeName
      or
        typeName = ["" nowhere]
      end
      $=$
      <expression> ?let initExpression
      fieldList += !fieldName !typeName !.expression{!initExpression:initExpression}
    while
      <procedure> !?procedureDeclarationListAST
    while
      <service> !?serviceListAST
    while
     <section> !?sectionListAST
    while
      <guard> !?guardListAST
    while
      <primitive> !?primitiveListAST
    while
      $;$
    end
    $}$
    let moduleTypeName = @lstring.new {!moduleName.string + "$" !moduleName.location}
  #--- Declare init list
    @2lstringlist requiredByList = {}
    for function in procedureDeclarationListAST do
      if function.mPublic then
        requiredByList += !moduleTypeName !function.mProcedureName
      end
    end
    for service in serviceListAST do
      requiredByList += !moduleTypeName !service.mServiceName
    end
    for guard in guardListAST do
      requiredByList += !moduleTypeName !guard.mGuardName
    end
    for primitive in primitiveListAST do
      requiredByList += !moduleTypeName !primitive.mPrimitiveName
    end
    for init in initList do
      ioAST.mInitList +=
       !init.mInitLocation
       !moduleTypeName
       !moduleName.string
       !requiredByList
       !init.mInstructionList
       !init.mEndOfInitLocation
       !init.mPriority
    end
  #--- Declare structure
    ioAST.mDeclarationList += !@structureDeclaration.new {
      !moduleTypeName
      !{}
      !fieldList
      !procedureDeclarationListAST
      !serviceListAST
      !sectionListAST
      !primitiveListAST
      !guardListAST
    }
  #--- Declare global variable
    ioAST.mGlobalVarDeclarationList +=
      !moduleTypeName
      !moduleName
      !@constructorCall.new {!moduleTypeName !{} !.here}
      !{} # allowedRoutineList
      !{} # allowedInitList
      !{} # allowedPanicList
      !{} # allowedGuardList
      !{} # allowedISRList
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

