#—————————————————————————————————————————————————————————————————————————————————————————————————

case . "omnibus-target"
message "a target definition text file with the .omnibus-target extension"
grammar omnibus_target_grammar
?sourceFilePath:@lstring unused inSourceFile {
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

case . "omnibus-import"
message "an imported text file with the .omnibus-import extension"
grammar omnibus_target_grammar
?sourceFilePath:@lstring unused inSourceFile {
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

case . "omnibus"
message "a source text file with the .omnibus extension"
grammar omnibus_grammar
?sourceFilePath:@lstring inSourceFile
{
  if ([option .mode value] == "") & not [option .outputConcreteSyntaxTree value] then
    importFilesAndCompile (!sourceFilePath:inSourceFile)
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc importFilesAndCompile ?sourceFilePath:let @lstring inSourceFile {
#--- Parsing
  var @ast ast = @{}
  grammar omnibus_grammar (
    !?ast
    ?importClauseList:let importedFileList
    ?endOfSourceFile:let endOfSourceFile
  ) in inSourceFile
#--- Recursively import files
  var @stringset importedFileAbsolutePathSet = .setWithString {!inSourceFile.string}
  let currentDirectory = [inSourceFile stringByDeletingLastPathComponent]
  recursiveImportFiles (
    !?ast:ast
    !currentDirectory:currentDirectory
    !importClauseList:importedFileList
    !?importedFilePathSet:importedFileAbsolutePathSet
  )
#--- Check target names are not duplicated
  if @uint.errorCount == 0 then
    var @stringset targetNameSet = @[]
    for (targetName) in ast.mTargetListAST do
      if [targetNameSet hasKey !targetName.string] then
        error targetName : "Duplicated target"
      end
      targetNameSet ++= targetName.string
    end
  end
#--- Compile project for every target
  if @uint.errorCount == 0 then
    if [ast.mTargetListAST count] == 0 then
      warning endOfSourceFile : "no target: only syntax analysis is performed"
    elsif [ast.mTargetListAST count] > 1 then
      warning endOfSourceFile : [[ast.mTargetListAST count] string] + " targets: only syntax analysis is performed"
    else
      for (targetName) in ast.mTargetListAST do
        compileProject (
          !sourceFile:inSourceFile
          !ast:ast
          !forTarget:targetName
          !endOfSourceFile:endOfSourceFile
          !currentDirectory:currentDirectory
          !importedFilePathSet:importedFileAbsolutePathSet
        )
      end
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

private proc compileProject
  ?sourceFile:let @lstring inSourceFile
  ?ast:let @ast inAST
  ?forTarget:let @lstring inTargetName
  ?endOfSourceFile:let @location inEndOfSourceFile
  ?currentDirectory:let @string inCurrentDirectory
  ?importedFilePathSet:let @stringset inImportedFileAbsolutePathSet
{
  let @timer parsingTime = .start 
  if [option omnibus_options.printPasses value] then
    print (!"** Parsing\n")
  end
  var @ast ast = inAST
  var @stringset sourceFileAbsolutePathSet = inImportedFileAbsolutePathSet
#------------------------------------------------------------ Enter extensions
  ast.mDeclarationListAST = @[]
  for (declaration) in inAST.mDeclarationListAST do
    [declaration enterExtension
      !?ast.mExtendStaticArrayDeclarationAST
      ?let newDeclaration
    ]
    ast.mDeclarationListAST += !newDeclaration
  end
  for (staticListName elementList) in ast.mExtendStaticArrayDeclarationAST do
    for (* errorLocation) in elementList do
      error errorLocation : "'" + staticListName + "' static list is not defined"
    end
  end
#------------------------------------------------------------ Add NOP function
  enter_NOP_function (!?ast.mDeclarationListAST)
#------------------------------------------------------------ Add target specific files
  addTargetSpecificFiles (
    !forTarget: inTargetName
    !?toAST: ast
    !currentDirectory: inCurrentDirectory
    !?importedFilePathSet: sourceFileAbsolutePathSet
  )
  if @uint.errorCount == 0 then
  #------------------------------------------------------------ Add Predefined types
  #--- Add compile time boolean type
   ast.mDeclarationListAST += !@compiletimeBoolAST {}
  #--- Add compile time int type
   ast.mDeclarationListAST += !@compileTimeIntAST {}
  #--- Bool type
    ast.mDeclarationListAST += !@boolTypeAST {}
  #--- Add String type
    ast.mDeclarationListAST += !@literalStringDeclarationAST {}
  end
#------------------------------------------------------------ Retain required drivers
  if @uint.errorCount == 0 then
    retainRequiredDrivers (!?ast)
  end
#------------------------------------------------------------ printPasses option
  if [option omnibus_options.printPasses value] & (@uint.errorCount == 0) then
    print (!"    " + [ast.mDeclarationListAST count] + " declarations\n" )
    print (!"    Duration: " + [parsingTime string] + "\n")
  end
#------------------------------------------------------------ Ordered declaration list
  var @declarationListAST orderedDeclarationListAST = @[]
  if @uint.errorCount == 0 then
    let @timer t = .start 
    if [option omnibus_options.printPasses value] then
      print (!"** Declaration sorting\n")
    end
    buildOrderedDeclarationList (
      !ast: ast
      !sourceFile:inSourceFile.string
      !endOfSourceFile:inEndOfSourceFile
      ?orderedDeclarationList: orderedDeclarationListAST
    )
    if [option omnibus_options.printPasses value] then
      print (!"    Duration: " + [t string] + "\n")
    end
  end
#------------------------------------------------------------ Check "check target" declarations
  if @uint.errorCount == 0 then
    for (targetLocation acceptedTargetList) in ast.mCheckTargetListAST do
      var accepted = false
      for (possibleTarget) in acceptedTargetList while not accepted do
        accepted = possibleTarget.string == inTargetName
      end
      if not accepted then
        error targetLocation : "invalid target"
      end
    end
  end
#------------------------------------------------------------ Semantic context
  var @semanticContext semanticContext = @{}
  var @staticEntityMap globalLiteralStringMap = @{}
  var @staticListInitializationMap staticListValueMap = @()
  ast.mDeclarationListAST = orderedDeclarationListAST
  var @declarationDecorationList decoratedDeclarationList = @[]
  var @decoratedRegularRoutineList decoratedRoutineList = @[]
  var @routineListIR routineListIR = @[]
  var @userLLVMTypeDefinitionListIR userLLVMTypeDefinitionListIR = @[]
  if @uint.errorCount == 0 then
    let @timer t = .start 
    buildSemanticContext (
      !sourceFile:inSourceFile
      !ast:ast
      !?staticEntityMap:globalLiteralStringMap
      !?staticlistValues:staticListValueMap
      ?context:semanticContext
      ?decoratedDeclarationList
      ?decoratedRoutineList
      ?routineListIR
      ?userLLVMTypeDefinitionListIR
    )
    if [option omnibus_options.printPasses value] then
      print (!"** Context: " + [t string] + "\n")
    end
  end
#------------------------------------------------------------ Semantic analysis
  var @intermediateCodeStruct intermediateCodeStruct = @{}
  if @uint.errorCount == 0 then
    let @timer t = .start 
    semanticAnalysis (
      !sourceFile:inSourceFile.string
      !ast:ast
      !allSourceFilePaths:sourceFileAbsolutePathSet
      !decoratedDeclarationList:decoratedDeclarationList
      !decoratedRoutineList: decoratedRoutineList
      !routineListIR:routineListIR
      !context:semanticContext
      !endOfSourceFile:inEndOfSourceFile
      !staticEntityMap:globalLiteralStringMap
      ?intermediateCode:intermediateCodeStruct
    )
    if [option omnibus_options.printPasses value] then
      print (!"** Semantic: " + [t string] + "\n") 
    end
  end
#------------------------------------------------------------ Code optimization
  if @uint.errorCount == 0 then
    let @timer tOpt = .start 
    codeOptimization (!inSourceFile.string !?intermediateCode:intermediateCodeStruct)
    if [option omnibus_options.printPasses value] then
      print (!"    Duration: " + [tOpt string] + "\n")
    end
  end
#------------------------------------------------------------ Code generation
  if @uint.errorCount == 0 then
    codeGeneration (
      !currentDir:inCurrentDirectory
      !outputFile:inSourceFile.string
      !eof:inEndOfSourceFile
      !intermediateCode:intermediateCodeStruct
      !userDefinedTypes: userLLVMTypeDefinitionListIR
      !target:inTargetName
      !panicCodeType:semanticContext.mPanicCodeType
      !panicLineType:semanticContext.mPanicLineType
      !interrupts:semanticContext.mAvailableInterruptMap
      !staticlistValues:staticListValueMap
      !targetParameters:semanticContext.mTargetParameters
    )
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

private proc addTargetSpecificFiles
  ?forTarget:let @lstring inTargetName
  ?!toAST:@ast ioAST
  ?currentDirectory:let @string inCurrentDirectory
  ?!importedFilePathSet:@stringset ioImportedFileAbsolutePathSet
{
  if [option omnibus_options.useDirAsTargetDir value] != "" then # Target is defined in files
    let targetDirectory = [[option omnibus_options.useDirAsTargetDir value] absolutePathFromPath !inCurrentDirectory]
    if [targetDirectory directoryExists] then
      let targetDefinitionFullPath = targetDirectory + "/" + inTargetName.string + "/+config.omnibus-target"
      if [targetDefinitionFullPath fileExists] then
        grammar omnibus_target_grammar (
          !?ioAST
          ?importClauseList:let importedFileList
          ?endOfSourceFile:*
        ) in [targetDefinitionFullPath nowhere]
        recursiveImportFileSystemTargetFiles (
          !?ast:ioAST
          !targetDirectory:targetDirectory + "/" + inTargetName.string
          !importClauseList:importedFileList
          !?importedFilePathSet:ioImportedFileAbsolutePathSet
        )
      else
        error inTargetName
          : "This target is not defined in '" + [option omnibus_options.useDirAsTargetDir value] + "' directory"
      end
    else
      error ["" nowhere]: "the '" + [option omnibus_options.useDirAsTargetDir value] + "' directory does not exist"
    end
  else # Target is defined in embedded files
  #--- Parse target definition file
    let @filewrapper fw = [filewrapper targetTemplates]
    if [fw fileExistsAtPath !inTargetName.string + "/+config.omnibus-target"] then
      let source = [fw textFileContentsAtPath !inTargetName.string + "/+config.omnibus-target"]
      grammar omnibus_target_grammar (
        !?ioAST
        ?importClauseList:let importedFileList
        ?endOfSourceFile:*
      ) on source:inTargetName.string
      recursiveImportEmbeddedTargetFiles (
        !?ast:ioAST
        !currentDirectory:inTargetName.string
        !importClauseList:importedFileList
        !?importedFilePathSet:ioImportedFileAbsolutePathSet
      )
    else
      error inTargetName
        : "This target is not defined in embedded targets"
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

private proc recursiveImportFileSystemTargetFiles
  ?!ast:@ast ioAST
  ?targetDirectory:let @string inTargetDirectory
  ?importClauseList:@lstringlist inImportedClauseList
  ?!importedFilePathSet:@stringset ioImportedFileAbsolutePathSet
{
  for (path) in inImportedClauseList do
    let absolutePath = inTargetDirectory + "/" + path.string
    if [absolutePath fileExists] then
      if not [ioImportedFileAbsolutePathSet hasKey !absolutePath] then
        ioImportedFileAbsolutePathSet ++= absolutePath
        if [absolutePath pathExtension] == "omnibus-import" then
          grammar omnibus_grammar (
            !?ioAST
            ?importClauseList:let importedFileList
            ?endOfSourceFile:*
          ) in @lstring {!absolutePath !path.location}
          recursiveImportFileSystemTargetFiles (
            !?ast:ioAST
            !targetDirectory:inTargetDirectory
            !importClauseList:importedFileList
            !?importedFilePathSet:ioImportedFileAbsolutePathSet
          )
        elsif [absolutePath pathExtension] == "omnibus-target" then
          grammar omnibus_target_grammar (
            !?ioAST
            ?importClauseList:let importedFileList
            ?endOfSourceFile:*
          ) in @lstring {!absolutePath !path.location}
          recursiveImportFileSystemTargetFiles (
            !?ast:ioAST
            !targetDirectory:inTargetDirectory
            !importClauseList:importedFileList
            !?importedFilePathSet:ioImportedFileAbsolutePathSet
          )
        else
          error path : "invalid extension (should be .omnibus-import or .omnibus-target)"
        end
      end
    else
      error path : "file does not exist in file system target definition"
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

private proc recursiveImportEmbeddedTargetFiles
  ?!ast:@ast ioAST
  ?currentDirectory:let @string inCurrentDirectory
  ?importClauseList:@lstringlist inImportedClauseList
  ?!importedFilePathSet:@stringset ioImportedFileAbsolutePathSet
{
  for (path) in inImportedClauseList do
    let fullPath = inCurrentDirectory + "/" + path
    let @filewrapper fw = [filewrapper targetTemplates]
    if [fw fileExistsAtPath !fullPath] then
      let embeddedPath = ":" + fullPath
      if not [ioImportedFileAbsolutePathSet hasKey !embeddedPath] then
        ioImportedFileAbsolutePathSet ++= embeddedPath
        grammar omnibus_grammar (
          !?ioAST
          ?importClauseList:let importedFileList
          ?endOfSourceFile:*
        ) on [fw textFileContentsAtPath !fullPath]:path.string
        recursiveImportEmbeddedTargetFiles (
          !?ast:ioAST
          !currentDirectory:[fullPath stringByDeletingLastPathComponent]
          !importClauseList:importedFileList
          !?importedFilePathSet:ioImportedFileAbsolutePathSet
        )
      end
    else
      error .nowhere : "cannot find '" + path + "' file in embedded files"
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

private proc recursiveImportFiles
  ?!ast:@ast ioAST
  ?currentDirectory:@string inCurrentDirectory
  ?importClauseList:@lstringlist inImportedClauseList
  ?!importedFilePathSet:@stringset ioImportedFileAbsolutePathSet
{
  for (path) in inImportedClauseList do
    let absolutePath = [path.string absolutePathFromPath !inCurrentDirectory]
    if [absolutePath fileExists] then # Exists in file system ?
      if not [ioImportedFileAbsolutePathSet hasKey !absolutePath] then
        ioImportedFileAbsolutePathSet ++= absolutePath
        if [absolutePath pathExtension] == "omnibus-import" then
          grammar omnibus_grammar (
            !?ioAST
            ?importClauseList:let importedFileList
            ?endOfSourceFile:*
          ) in @lstring {!absolutePath !path.location}
          recursiveImportFiles (
            !?ast:ioAST
            !currentDirectory:inCurrentDirectory
            !importClauseList:importedFileList
            !?importedFilePathSet:ioImportedFileAbsolutePathSet
          )
        elsif [absolutePath pathExtension] == "omnibus-target" then
          grammar omnibus_target_grammar (
            !?ioAST
            ?importClauseList:let importedFileList
            ?endOfSourceFile:*
          ) in @lstring {!absolutePath !path.location}
          recursiveImportFiles (
            !?ast:ioAST
            !currentDirectory:inCurrentDirectory
            !importClauseList:importedFileList
            !?importedFilePathSet:ioImportedFileAbsolutePathSet
          )
        else
          error path : "invalid extension (should be .omnibus-import or .omnibus-target)"
        end
      end
    else
      let @filewrapper fw = [filewrapper targetTemplates]
      if [fw fileExistsAtPath !path.string] then
        let embeddedPath = ":" + path
        if not [ioImportedFileAbsolutePathSet hasKey !embeddedPath] then
          ioImportedFileAbsolutePathSet ++= embeddedPath
          if [path pathExtension] == "omnibus-import" then
            grammar omnibus_grammar (
              !?ioAST
              ?importClauseList:let importedFileList
              ?endOfSourceFile:*
            ) on [fw textFileContentsAtPath !path.string] : path.string
            recursiveImportFiles (
              !?ast:ioAST
              !currentDirectory:inCurrentDirectory
              !importClauseList:importedFileList
              !?importedFilePathSet:ioImportedFileAbsolutePathSet
            )
          elsif [path pathExtension] == "omnibus-target" then
            grammar omnibus_target_grammar (
              !?ioAST
              ?importClauseList:let importedFileList
              ?endOfSourceFile:*
            ) on [fw textFileContentsAtPath !path.string] : path.string
            recursiveImportFiles (
              !?ast:ioAST
              !currentDirectory:inCurrentDirectory
              !importClauseList:importedFileList
              !?importedFilePathSet:ioImportedFileAbsolutePathSet
            )
          else
            error path : "invalid extension (should be .omnibus-import or .omnibus-target)"
          end
        end
      else
        error path : "cannot find this file in file system and in embedded files"
      end
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
