#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract class @callInstructionAST : @instructionAST {
  @effectiveArgumentListAST mArguments
  @location mEndOfArguments
}

#·······················································································································

class @standAloneProcedureCallInstructionAST : @callInstructionAST {
  @lstring mSandAloneRoutineName
}

#·······················································································································

class @procedureCallInstructionAST : @callInstructionAST {
  @lstring mIdentifier
  @accessInAssignmentListAST mAccessList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList {
    <procedure_call> ?let routineCallInstruction
    ioInstructionList += !routineCallInstruction
  }

  #·····················································································································

  rule <procedure_call> !@callInstructionAST outInstruction {
    let instructionLocation = @location.here
    <lvalue> ?let assignmentTargetAST
    <effective_parameters> ?let arguments ?let endOfArguments
    if ([[assignmentTargetAST mAccessList] length] == 0) & (assignmentTargetAST.mIdentifier.string != "") then
      outInstruction = @standAloneProcedureCallInstructionAST.new {
        !instructionLocation
        !arguments
        !endOfArguments
        !assignmentTargetAST.mIdentifier
      }
    else
      outInstruction = @procedureCallInstructionAST.new {
        !instructionLocation
        !arguments
        !endOfArguments
        !assignmentTargetAST.mIdentifier
        !assignmentTargetAST.mAccessList
      }
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @procedureCallInstructionAST noteInstructionTypesInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  for (access) in mAccessList do
    switch access
    case property (*) :
    case arrayAccess (@expressionAST indexExpression *) :
      [indexExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    end
  end
#  [mTargetAST noteInstructionTypesInPrecedenceGraph !?ioGraph]
  for () in mArguments do
    switch mEffectiveParameterKind
    case input (*):
    case inputWithType (* @lstring typeName *) :
      if typeName.string != "" then
        [!?ioGraph noteNode !llvmRegularTypeMangledNameFromName (!typeName)]
      end
    case output (expression *) : [expression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    case outputInput (*) :
    case outputInputSelfVariable (*) :
    end 
  end
}

#·······················································································································

override method @standAloneProcedureCallInstructionAST noteInstructionTypesInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  for () in mArguments do
    switch mEffectiveParameterKind
    case input (*):
    case inputWithType (* @lstring typeName *) :
      if typeName.string != "" then
        [!?ioGraph noteNode !llvmRegularTypeMangledNameFromName (!typeName)]
      end
    case output (expression *) : [expression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    case outputInput (*) :
    case outputInputSelfVariable (*) :
    end 
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @effectiveArgumentPassingModeAST passingModeForActualSelector ?let @lstring inSelector -> @string {
  switch self
  case input (*) : result = "?"
  case inputWithType (* * *) : result = "?"
  case output (* *) : result = "!"
  case outputInput (*) : result = "!?"
  case outputInputSelfVariable (*) : result = "!?"
  end
  if inSelector.string != "" then
    result += inSelector.string + ":"
  end
}

#·······················································································································

list @procEffectiveParameterList {
  @effectiveArgumentPassingModeAST mEffectiveParameterPassingMode
  @lstring mSelector
  @PLMType mParameterType
}

#·······················································································································

override method @standAloneProcedureCallInstructionAST analyze
  ?self:let @PLMType inSelfType
  ?propertiesAreMutable:let @bool unused inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool unused inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Called routine signature
  let calledRoutineSignature = [mArguments routineSignature !mSandAloneRoutineName.location]
#--- Search routine in map
  [inContext.mRoutineMapForContext searchKey
    !mSandAloneRoutineName
    !calledRoutineSignature
    ?let @lstring LLVMInvocationRoutineName
    ?let @routineDescriptor routineDescriptor
    ?let @location unused keyLocation
  ]
#--- Routine name for invocation graph
  let routineMangledName = routineMangledNameFromCall (
    !""
    !mSandAloneRoutineName
    !mArguments
  )
#--- Enter in invocation graph
  [!?ioTemporaries.mSubprogramInvocationGraph addEdge !inCallerNameForInvocationGraph !routineMangledName]
#--- Check modes
  let routineKindIR = checkMode (
    !callerMode:inCurrentMode
    !calleeMode:[routineDescriptor.mRoutineKind executionMode]
    !kind:routineDescriptor.mRoutineKind
    !error:mSandAloneRoutineName.location
  )
#--- Analyze effective parameters
  @procCallEffectiveParameterListIR effectiveParameterListIR = {}
  analyzeEffectiveParameters (
    !self:inSelfType
    !formal:routineDescriptor.mSignature
    !effective:mArguments
    !errorLocation:mSandAloneRoutineName.location
    !callerForInvocationGraph:inCallerNameForInvocationGraph
    !context:inContext
    !requiredMode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    !?effectiveIR:effectiveParameterListIR
  )

#--- Code generation
  ioInstructionGenerationList += !@staticRoutineCallIR.new {
    !""
    !.null
    !routineMangledName
    !LLVMInvocationRoutineName
    !routineKindIR
    !effectiveParameterListIR
  }
}

#·······················································································································

override method @procedureCallInstructionAST analyze
  ?self:let @PLMType inSelfType
  ?propertiesAreMutable:let @bool unused inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool unused inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Analyze header identifier : it is a variable, as a standalone procedure call is handled in an other place
#    If identifier is empty string, the receiver is "self"
  @PLMType currentType
  @string currentLLVMAddressVar
  if mIdentifier.string == "" then # Receiver is self
    if inSelfType == .void then
      error mIdentifier : "self is not available in this context" : currentType, currentLLVMAddressVar
    else
      currentType = inSelfType
      currentLLVMAddressVar = "%self"
    end
  else
    [ioUniversalMap searchEntity !mIdentifier ?let @possibleValuedObject entity]
    switch entity
    case undefined :
      error mIdentifier : "undefined in this context" : currentType, currentLLVMAddressVar
    case module (@PLMType type) :
      currentType = type
      currentLLVMAddressVar = llvmNameForGlobalVariable (!mIdentifier)
    case register (* * * * * * *) :
      error mIdentifier
        : "a control register constant cannot be used in this context"
        : currentType, currentLLVMAddressVar
    case globalConstant (*) :
      error mIdentifier
        : "a global constant cannot be used in this context"
        : currentType, currentLLVMAddressVar
    case localConstant (* *) :
      error mIdentifier
        : "a local constant cannot be used in this context"
        : currentType, currentLLVMAddressVar
    case globalVariable (* @PLMType type) :
      currentType = type
      currentLLVMAddressVar = llvmNameForGlobalVariable (!mIdentifier)
    case localVariable (@PLMType type @lstring plmName) :
      currentType = type
      currentLLVMAddressVar = llvmNameForLocalVariable (!plmName)
    end
  end
#--- Check current object in a structure instance
  if not [currentType isStructure] then
    error mIdentifier : "receiver has no property"
  else
  #--- Get current object property map
    [currentType structure ?1* ?propertyMap:@propertyMap propertyMap ?3*]
  #--- Insulate last access (should be a "property", used as routine name
    var accessList = mAccessList
    [!?accessList popLast ?let lastAccess]
  #--- loop on access list
    for (access) in accessList do
      switch access
      case property (@lstring propertyName) :
        [propertyMap searchKey
          !propertyName
          ?let @bool unused isPublic
          ?* # let @objectIR propertyObject
          ?let @PLMType propertyType
          ?let @propertyAccessKind propertyAccess
        ]
        if not [propertyType isStructure] then
          error mIdentifier : "receiver has no property"
        else
          [propertyType structure ?1* ?propertyMap:propertyMap ?3*]
          switch propertyAccess
          case constant (*) :
            error propertyName
              : "a context property cannot be used in this context"
              : currentType, currentLLVMAddressVar
          case indexed (@uint propertyIndex) :
            [!?ioTemporaries newTempLLVMVar ?let llvmPropertyName]
            [!?ioInstructionGenerationList appendGetUniversalPropertyReference
              !currentType
              !currentLLVMAddressVar
              !propertyType
              !llvmPropertyName
              !propertyIndex
              !propertyName
            ]
            currentType = propertyType
            currentLLVMAddressVar = llvmPropertyName
          end
        end
      case arrayAccess (@expressionAST unused indexExpression @location endOfIndex) :
        error endOfIndex : "not handled yet" : currentType, currentLLVMAddressVar
      end
    end
  #--- Handle last access
    switch lastAccess
    case arrayAccess (* @location endOfIndex) :
      error endOfIndex : "a property access is required here"
    case property (@lstring methodName) :
    #--- Get function name and map containing the function definition
      let routineMangledName = routineMangledNameFromCall (!"$" + [currentType key] !methodName !mArguments)
    #--- Get called function signature
      let signature = [mArguments routineSignature !methodName.location]
    #--- Search function in map
      [inContext.mRoutineMapForContext searchKey
        !methodName
        !signature
        ?let @lstring LLVMInvocationRoutineName
        ?@routineDescriptor routineDescriptor
        ?let @location unused keyLocation
      ]
    #--- Add receiver as first parameter
      @procCallEffectiveParameterListIR effectiveParameterListIR = {}
      switch routineDescriptor.mRoutineCallingScheme
      case staticCall :
        effectiveParameterListIR +=
          !.outputInput # Add receiver as first argument
          !.llvmReference {!type:currentType !llvmName:.new{!currentLLVMAddressVar !methodName.location}}
      case propertyIndirectCall (*) :
        error methodName : "not handled yet"
      end
    #---
    #  let isPublic = routineDescriptor.mIsPublic
      let routineKind = routineDescriptor.mRoutineKind
      let calleeMode = [routineKind executionMode]
      let formalSignature = routineDescriptor.mSignature
    #--- Check routine is actually a procedure (does not return any value)
      if routineDescriptor.mReturnTypeProxy != .null then
        error methodName : "not a procedure (returns a value)" : routineDescriptor
      else
      #--- Check modes
        let calleeKind = checkMode (
          !callerMode:inCurrentMode
          !calleeMode:calleeMode
          !kind:routineKind
          !error:methodName.location
        )
      #--- Analyze effective parameters
        analyzeEffectiveParameters (
          !self:inSelfType
          !formal:formalSignature
          !effective:mArguments
          !errorLocation:methodName.location
          !callerForInvocationGraph:inCallerNameForInvocationGraph
          !context:inContext
          !requiredMode:inCurrentMode
          !?temporary:ioTemporaries
          !?staticStringMap:ioGlobalLiteralStringMap
          !?variableMap:ioUniversalMap
          !?alloca:ioAllocaList
          !?instructionListIR:ioInstructionGenerationList
          !?effectiveIR:effectiveParameterListIR
        )
      #--- Generate call
        switch routineDescriptor.mRoutineCallingScheme
        case staticCall :
        #--- Code generation
          ioInstructionGenerationList += !@staticRoutineCallIR.new {
            !mIdentifier
            !.null # No result
            !routineMangledName
            !LLVMInvocationRoutineName
            !calleeKind
            !effectiveParameterListIR
          }
        #--- Enter in invocation graph
          [!?ioTemporaries.mSubprogramInvocationGraph addEdge !inCallerNameForInvocationGraph !routineMangledName]
        case propertyIndirectCall (type) :
          let propertyReference = @objectIR.llvmReference {
             !type:type
             !llvmName:.new {!"%temp." + ioTemporaries.mTemporaryIndex !methodName}
          }
          ioTemporaries.mTemporaryIndex ++
          [!?ioInstructionGenerationList appendGetPropertyReference
            !propertyReference
            !.llvmReference {!type:currentType !llvmName:.new{!currentLLVMAddressVar !methodName.location}}
            !methodName
          ]
        #--- Code generation
          ioInstructionGenerationList += !@indirectRoutineCallIR.new {
            !propertyReference
            !type
            !.null # No result
            !effectiveParameterListIR
          }
        end
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @procEffectiveParameterPassingModeIR {
  case input
  case output
  case outputInput
}

#·······················································································································

list @procCallEffectiveParameterListIR {
  @procEffectiveParameterPassingModeIR mEffectiveParameterPassingMode
  @objectIR mParameter
}

#·······················································································································

enum @calleeKindIR {
  case function
  case primitiveFromProcessorUserMode
  case safeFromProcessorUserMode
  case sectionFromProcessorUserMode
  case serviceFromProcessorUserMode
  case primitiveFromProcessorPrivilegedMode
  case sectionFromProcessorPrivilegedMode
  case safeFromProcessorPrivilegedMode
  case serviceFromProcessorPrivilegedMode
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
