#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#—————————————————————————————————————————————————————————————————————————————————————————————————

abstract refclass @callInstructionAST : @instructionAST {
  public var @effectiveArgumentListAST mArguments
  public var @location mEndOfArguments
}

#·······················································································································

refclass @standAloneProcedureCallInstructionAST : @callInstructionAST {
  public var @lstring mSandAloneRoutineName
}

#·······················································································································

refclass @procedureCallInstructionAST : @callInstructionAST {
  public var @lstring mIdentifier
  public var @accessInAssignmentListAST mAccessList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    <procedure_call> !?ioAST ?let routineCallInstruction
    ioInstructionList += !routineCallInstruction
  }

  #·····················································································································

  rule <procedure_call> ?!@ast ioAST !@callInstructionAST outInstruction {
    let instructionLocation = @location.here
    <lvalue> !?ioAST ?let assignmentTargetAST
    <effective_parameters> !?ioAST ?let arguments ?let endOfArguments
    if (assignmentTargetAST.mOperand == .noOperand) & (assignmentTargetAST.mIdentifier.string != "") then
      outInstruction = @standAloneProcedureCallInstructionAST.init {
        !instructionLocation
        !arguments
        !endOfArguments
        !assignmentTargetAST.mIdentifier
      }
    else
      var @accessInAssignmentListAST accessList = §[]
      [assignmentTargetAST.mOperand buildProcedureCallAccessList !?accessList]
      outInstruction = @procedureCallInstructionAST.init {
        !instructionLocation
        !arguments
        !endOfArguments
        !assignmentTargetAST.mIdentifier
        !accessList
      }
    end
  }

  #·····················································································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

method @LValueOperandAST buildProcedureCallAccessList ?!@accessInAssignmentListAST ioAccessList {
  switch self
  case noOperand :
  case property (@lstring name @LValueOperandAST next) :
    ioAccessList += !.property {!name:name}
    [next buildProcedureCallAccessList !?ioAccessList]
  case arrayAccess (@expressionAST index @location endOfIndex @bool checkIndexExpression @LValueOperandAST next) :
    ioAccessList += !.arrayAccess {!index:index !endOfIndex:endOfIndex !checkIndexExpression:checkIndexExpression}
    [next buildProcedureCallAccessList !?ioAccessList]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  NOTE TYPES                                                                                                           
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @procedureCallInstructionAST noteInstructionTypesInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
#  [mOperand noteInstructionTypesInPrecedenceGraph !?ioGraph]
  for (access) in self.mAccessList do
    switch access
    case property (*) :
    case arrayAccess (@expressionAST indexExpression 2*) :
      [indexExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    end
  end
  for (mEffectiveParameterKind *) in self.mArguments do
    switch mEffectiveParameterKind
    case input (*):
    case inputWithType (* @lstring typeName *) :
      if typeName.string != "" then
        [!?ioGraph noteNode !typeName]
      end
    case output (expression *) : [expression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    case outputInput (*) :
    case outputInputSelfVariable (*) :
    end 
  end
}

#·······················································································································

override method @standAloneProcedureCallInstructionAST noteInstructionTypesInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  for (mEffectiveParameterKind *) in self.mArguments do
    switch mEffectiveParameterKind
    case input (*):
    case inputWithType (* @lstring typeName *) :
      if typeName.string != "" then
        [!?ioGraph noteNode !typeName]
      end
    case output (expression *) : [expression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    case outputInput (*) :
    case outputInputSelfVariable (*) :
    end 
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTICS                                                                                                            
#—————————————————————————————————————————————————————————————————————————————————————————————————

getter @effectiveArgumentPassingModeAST passingModeForActualSelector ?let @lstring inSelector -> @string {
  switch self
  case input (*) : result = "?"
  case inputWithType (* * *) : result = "?"
  case output (* *) : result = "!"
  case outputInput (*) : result = "!?"
  case outputInputSelfVariable (*) : result = "!?"
  end
  if inSelector.string != "" then
    result += inSelector.string + ":"
  end
}

#·······················································································································

list @procEffectiveParameterList {
  public var @effectiveArgumentPassingModeAST mEffectiveParameterPassingMode
  public var @lstring mSelector
  public var @omnibusType mParameterType
}

#·······················································································································

override method @standAloneProcedureCallInstructionAST instructionSemanticAnalysis
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Called routine signature
  let calledRoutineSignature = [self.mArguments routineSignature !self.mSandAloneRoutineName.location]
#--- Search routine in map
  let requiredFunctionMangledName = self.mSandAloneRoutineName.string + calledRoutineSignature
#   log "keys " : [inContext.mRoutineMap keyList]
  [inContext.mRoutineMap searchKey
    !.init {!requiredFunctionMangledName !self.mSandAloneRoutineName}
    ?let unused implementedPublic
    ?let formalSignature
    ?let formalReturnTypeProxy # null if no returned value
    ?let implementedModeDictionary
    ?let unused implementedIsExported
    ?let unused implementedMode
  ]
#--- Check return type proxy is null
  if not [formalReturnTypeProxy isNull] then
    error self.mSandAloneRoutineName : "this function returns a value, cannot be used as a procedure"
  end
#--- Check modes
    let functionLLVMName = checkModeAndReturnsRoutineLLVMName (!implementedModeDictionary !inMode !self.mSandAloneRoutineName)
#--- Analyze effective parameters
  var @procCallEffectiveParameterListIR effectiveParameterListIR = §[]
  analyzeEffectiveParameters (
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !formal:formalSignature
    !effective:self.mArguments
    !errorLocation:self.mSandAloneRoutineName.location
    !context:inContext
    !requiredMode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    !?effectiveIR:effectiveParameterListIR
  )

#--- Routine name for invocation graph
  let routineMangledName = routineMangledNameFromCall (
    !""
    !self.mSandAloneRoutineName
    !self.mArguments
  )
#--- Code generation
  ioInstructionGenerationList += !@standaloneRoutineCallIR.init {
    !.void
    !routineMangledName
    !functionLLVMName
    !effectiveParameterListIR
  }
}

#·······················································································································

override method @procedureCallInstructionAST instructionSemanticAnalysis
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Analyze header identifier : it is a variable, as a standalone procedure call is handled in an other place
#    If identifier is empty string, the receiver is "self"
  var receiverIsSelf = false
  var @omnibusType currentType
  var @string currentLLVMAddressVar
  if self.mIdentifier.string == "" then # Receiver is self
    receiverIsSelf = true
    if inSelfType.kind == .void then
      error self.mIdentifier : "self is not available in this context" : currentType, currentLLVMAddressVar
    else
      currentType = inSelfType
      currentLLVMAddressVar = llvmNameForSelf ()
    end
  else
    [ioUniversalMap searchEntity !self.mIdentifier ?let @valuedObject entity]
    switch entity
    case task (@omnibusType type) :
      currentType = type
      currentLLVMAddressVar = llvmNameForGlobalVariable (!self.mIdentifier)
    case driver (@omnibusType type instancied) :
      if instancied then
        currentType = type
        currentLLVMAddressVar = llvmNameForGlobalVariable (!self.mIdentifier)
      else
        error self.mIdentifier : "the driver should be instancied" : currentType, currentLLVMAddressVar
      end
    case globalConstant (*) :
      error self.mIdentifier
        : "a global constant cannot be used in this context"
        : currentType, currentLLVMAddressVar
    case localConstant (@omnibusType type @lstring omnibusName *) :
      currentType = type
      currentLLVMAddressVar = llvmNameForLocalVariable (!omnibusName)
    case localVariable (@omnibusType type @lstring omnibusName) :
      currentType = type
      currentLLVMAddressVar = llvmNameForLocalVariable (!omnibusName)
    case globalSyncInstance (@omnibusType type @lstring omnibusName) :
      currentType = type
      currentLLVMAddressVar = llvmNameForGlobalSyncInstance (!omnibusName)
    end
  end
#--- Get current object property map
  var currentObjectPropertyMap = [inContext propertyGetterMap !currentType]
#--- Insulate last access (should be a "property", used as routine name
  var accessList = self.mAccessList
  [!?accessList popLast ?let lastAccess]
#--- loop on access list
  for (access) in accessList do
    switch access
    case property (@lstring propertyName) :
      [currentObjectPropertyMap searchKey
        !propertyName
        ?let visibility
        ?let @propertyGetterKind propertyAccess
      ]
      switch visibility
      case isPublic :
      case isPrivate :
        if not receiverIsSelf then
          error propertyName : "inaccessible property, is private"
        end
      end
      receiverIsSelf = false
      switch propertyAccess
      case constantProperty (*) :
        error propertyName
          : "a context property cannot be used in this context"
          : currentType, currentLLVMAddressVar
      case storedProperty (@omnibusType propertyType @uint propertyIndex) :
        [!?ioTemporaries newTempLLVMVar ?let llvmPropertyName]
        [!?ioInstructionGenerationList appendGetUniversalPropertyReference
          !currentType
          !currentLLVMAddressVar
          !llvmPropertyName
          !propertyIndex
          !propertyName
        ]
        currentType = propertyType
        currentLLVMAddressVar = llvmPropertyName
        currentObjectPropertyMap = [inContext propertyGetterMap !currentType]
      case computedProperty (propertyTypeProxy modeDictionary) :
        let routineLLVMName = checkModeAndReturnsRoutineLLVMName (!modeDictionary !inMode !propertyName)
        [!?ioInstructionGenerationList appendGetComputedPropertyValue
          !?ioTemporaries
          !.reference {!type:currentType !llvmName:currentLLVMAddressVar}
          !routineLLVMName
          ![propertyTypeProxy type]
          ?let resultValueIR
        ]
        currentType = [resultValueIR type]
        currentLLVMAddressVar = [resultValueIR llvmName]
        currentObjectPropertyMap = [inContext propertyGetterMap !currentType]
      end
    case arrayAccess (* @location endOfIndex *) :
      error endOfIndex : "not handled yet" : currentType, currentLLVMAddressVar
    end
  end
#--- Handle last access
  switch lastAccess
  case arrayAccess (* @location endOfIndex *) :
    error endOfIndex : "a property is required here"
  case property (@lstring methodName) :
    let methodMangledName = [self.mArguments mangledName !receiverTypeName: currentType.omnibusTypeDescriptionName !functionName: methodName]
    [inContext.mRoutineMap searchKey
      !methodMangledName
      ?let unused implementedPublic
      ?let formalSignature
      ?let formalReturnTypeProxy # null if no returned value
      ?let implementedModeDictionary
      ?let unused implementedIsExported
      ?let unused implementedMode
    ]
  #--- Check modes
    let functionLLVMName = checkModeAndReturnsRoutineLLVMName (!implementedModeDictionary !inMode !methodName)
  #--- Check routine does not return any value
    if not [formalReturnTypeProxy isNull] then
      error methodName : "cannot be called in instruction, returns a value"
    end
  #--- Add receiver as first parameter
    var @procCallEffectiveParameterListIR effectiveParameterListIR = §[
      .init (.outputInput, .reference {!type:currentType !llvmName:currentLLVMAddressVar})
    ]
  #--- Analyze effective parameters
    analyzeEffectiveParameters (
      !self:inSelfType
      !routineAttributes:inRoutineAttributes
      !formal:formalSignature
      !effective:self.mArguments
      !errorLocation:methodName.location
      !context:inContext
      !requiredMode:inMode
      !?temporary:ioTemporaries
      !?staticEntityMap:ioStaticEntityMap
      !?variableMap:ioUniversalMap
      !?alloca:ioAllocaList
      !?instructionListIR:ioInstructionGenerationList
      !?effectiveIR:effectiveParameterListIR
    )
  #--- Generate call
    ioInstructionGenerationList += !@standaloneRoutineCallIR.init {
      !.void
      !methodMangledName
      !functionLLVMName
      !effectiveParameterListIR
    }
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @procEffectiveParameterPassingModeIR {
  case input
  case output
  case outputInput
}

#·······················································································································

list @procCallEffectiveParameterListIR {
  public var @procEffectiveParameterPassingModeIR mEffectiveParameterPassingMode
  public var @objectIR mParameter
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
