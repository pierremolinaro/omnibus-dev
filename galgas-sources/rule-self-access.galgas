#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @arrayElementAccess {
  case noAccess
  case access (@expressionAST indexExpression @location endOfExp)
}

#·······················································································································

list @fieldList {
  @lstring mFieldName
  @arrayElementAccess mArrayAccess
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <self_access> !@location outSelfLocation !@fieldList outFieldList {
    $self$
    outSelfLocation = .here
    outFieldList = {}
    repeat
      $.$
      $identifier$ ?let fieldName
      select
        outFieldList += !fieldName !.noAccess
      or
        $[$
        <expression> ?let indexExpression
        let @location endOfExp = .here
        $]$
        outFieldList += !fieldName !.access {!indexExpression:indexExpression !endOfExp:endOfExp}
      end
    while
    end
  }

  #·····················································································································

}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @fieldList addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  for (fieldName arrayAccess) in self do
    switch arrayAccess
    case noAccess :
    case access (@expressionAST indexExpression *) :
      [indexExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @fieldList noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for (fieldName arrayAccess) in self do
    switch arrayAccess
    case noAccess :
    case access (@expressionAST indexExpression *) :
      [indexExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    end
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeSelfAccess
  ?fieldList:let @fieldList inFieldList
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!namedObjectMap:@namedObjectMap ioNamedObjectMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !resultPtr:@objectInMemoryIR outResultPtr
{
  var type = inSelfType
  @elementPtrList elementPtrList = {}
  var publicIsRequired = false
  for (fieldName arrayElementAccess) in inFieldList do
    if [[type kind] isStructure] then
      [[type kind] structure ?1* ?propertyMap:let propertyMap ?propertyList:*]
      [propertyMap searchKey !fieldName ?let public ?type ?let index]
      if publicIsRequired && not public then
        error fieldName : "this field is not public"
      end
      elementPtrList += {!.absolute {!index:index} !"." + fieldName}
      publicIsRequired = true
      analyzeArrayElementAccess (
        !arrayElementAccess
        !?type
        !?elementPtrList
        !fieldName.location
        !self:inSelfType
        !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
        !inGuard:inGuard
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !context:inContext
        !modes:inModeSet
        !allowPanic:inAllowPanic
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?namedObjectMap: ioNamedObjectMap
        !?alloca:ioAllocaList
        !?instructionListIR:ioInstructionGenerationList
      )
    else
      error fieldName : "the field type is not a structure" : type
    end
  end
  getLocalNameOfNewTempObjectInMemory (!type !?ioTemporaries ?outResultPtr)
  [!?ioInstructionGenerationList appendGetElementPtrFromSelf
    !outResultPtr
    !inSelfType
    !elementPtrList
  ]        
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeArrayElementAccess
  ?let @arrayElementAccess inArrayElementAccess
  ?!@unifiedTypeMap-proxy ioType
  ?!@elementPtrList ioElementPtrList
  ?let @location inErrorLocation
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!namedObjectMap:@namedObjectMap ioNamedObjectMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  switch inArrayElementAccess
  case noAccess :
  case access (indexExpression endOfExp) :
    @bigint arraySize
    if [[ioType kind] isArrayType] then
      [[ioType kind] arrayType ?elementType:ioType ?size:arraySize]
    else
      error inErrorLocation : "this variable should be an array" : arraySize
    end
    [indexExpression analyzeExpression
      !self:inSelfType
      !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
      !inGuard:inGuard
      !routineNameForInvocationGraph:inCallerNameForInvocationGraph
      !optionalTargetType:.null
      !context:inContext
      !modes:inModeSet
      !allowPanic:inAllowPanic
      !?temporary:ioTemporaries
      !?staticStringMap:ioGlobalLiteralStringMap
      !?variableMap:ioVariableMap
      !?namedObjectMap: ioNamedObjectMap
      !?alloca:ioAllocaList
      !?instructionListIR:ioInstructionGenerationList
      ?result:let @objectIR indexResult
    ]
    if [indexResult isLiteralInteger] then
      [indexResult literalInteger ?1* ?value:let @bigint indexValue]
      if (indexValue < 0G) || (indexValue >= arraySize) then
        error endOfExp : "static index should be positive and < " + arraySize : ioElementPtrList
      else
        ioElementPtrList += {!.absolute {!index:[indexValue uint]} !"[" + indexValue + "]"}
      end
    elsif [[indexResult kind] isInteger] then
      if not [option plm_options.noPanicGeneration value] then
        [!?ioInstructionGenerationList testArrayIndex !indexResult !endOfExp !arraySize ?let generatePanicInstruction]
        if generatePanicInstruction && not inAllowPanic then
          error endOfExp : "index computation can generated panic" : ioElementPtrList
        end
      end
      let name = [indexResult name]
      ioElementPtrList += {!.indirect {!index:indexResult} !"[" + name + "]"}
    else
      error endOfExp : "index expression is not an integer" : ioElementPtrList
    end
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
