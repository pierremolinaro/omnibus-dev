#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
#                                                                                                                       
#    C O D E    O P T I M I Z A T I O N                                                                                 
#                                                                                                                       
#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

method @instructionListIR enterAccessibleEntities ?!@stringset ioInvokedRoutineSet
                         ?!@uint ioMaxBranchOfOnInstructions {
  for (instruction) in self do
    [instruction enterAccessibleEntities !?ioInvokedRoutineSet !?ioMaxBranchOfOnInstructions]
  end
}

#Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·

list @routineAccessibilityIR {
  public var @abstractRoutineIR mRoutine
  public var @stringset mAccessibleRoutineSet
}

#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

proc codeOptimization
 ?let @string inSourceFile
 ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  var @routineAccessibilityIR routineAccessibilityIR = @[]
#----------------------------------------------- Compute accessiblity graph
  var @stringset exploreRoutineSet = @[]
  var @stringset allRoutineSet = @[]
  var @stringset definedRoutineSet = @[]
  for routine in ioIntermediateCodeStruct.mRoutineListIR do
    var @stringset accessibleRoutineSet = @[]
    [routine.mRoutine enterAccessibleEntities !?accessibleRoutineSet !?ioIntermediateCodeStruct.mMaxBranchOfOnInstructions]
    routineAccessibilityIR += !routine.mRoutine !accessibleRoutineSet
    allRoutineSet += accessibleRoutineSet
    definedRoutineSet ++= routine.mRoutine.mRoutineMangledName
    if routine.mRoutine.isRequired then
      exploreRoutineSet ++= routine.mRoutine.mRoutineMangledName
    end
  end
  if [option omnibus_options.printPasses value] then
    var m = "** Dead code elimination\n"
    m += "    " + [[ioIntermediateCodeStruct.mRoutineListIR count] string] + " routines, "
    m += [[exploreRoutineSet count] string] + " root routines.\n"
    print (!m)
  end
#----------------------------------------------- Check all invoked routines are defined
  let undefinedRoutineSet = allRoutineSet - definedRoutineSet
  if [undefinedRoutineSet count] > 0 then
    var m = "undefined routine(s):"
    for (routine) in undefinedRoutineSet do
      m += "\n    - " + routine + "\n"
    end
    error .nowhere : m
  end
#----------------------------------------------- Compute useful routines
  if [option omnibus_options.noDeadCodeElimination value] then
    print (!"    No dead code elimination (option --" + [option omnibus_options.noDeadCodeElimination string] + ")\n")
  else
    var @stringset usefulRoutineSet = @[]
    loop ([ioIntermediateCodeStruct.mRoutineListIR count] + 1) while [exploreRoutineSet count] > 0 do
      let currentSet = exploreRoutineSet
      exploreRoutineSet = @[]
      for routine in routineAccessibilityIR do
        let routineMangledName = routine.mRoutine.mRoutineMangledName
        if [currentSet hasKey !routineMangledName] & not [usefulRoutineSet hasKey !routineMangledName] then
          usefulRoutineSet ++= routineMangledName
          exploreRoutineSet += routine.mAccessibleRoutineSet
        end
      end
    end
  #----------------------------------------------- Warn unused routines
    for routine in routineAccessibilityIR do
      let routineMangledName = routine.mRoutine.mRoutineMangledName
      if routine.mRoutine.warnsIfUnused & not [usefulRoutineSet hasKey !routineMangledName] then
        warning routineMangledName : "unused routine"
      end
    end
  #-----------------------------------------------
    if [option omnibus_options.printPasses value] then
      let m = "    " + [[usefulRoutineSet count] string] + " useful routines.\n"
  #    for (r) in usefulRoutineSet do
  #      m += "    - " + r + "\n"
  #    end
      print (!m)
    end
  #----------------------------------------------- Eliminate useless routines
    ioIntermediateCodeStruct.mRoutineListIR = @[]
    for (routine *) in routineAccessibilityIR do
      if [usefulRoutineSet hasKey !routine.mRoutineMangledName] then
        ioIntermediateCodeStruct.mRoutineListIR += !routine
      end
    end
  end
#--- Display invocation graph
  let filePath = inSourceFile + ".routineInvocation.dot"
  if [option omnibus_options.emitRoutineInvocationGraphFile value] then
    displayInvocationGraph (!ioIntermediateCodeStruct.mRoutineListIR !filePath)
  else
    [@string deleteFileIfExists !filePath]
  end
}

#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

private proc displayInvocationGraph
  ?let @routineListIR inRoutineListIR
  ?let @string inFilePath
{
  var s = "digraph G {\n"
#--- Build graph
  var @stringset definedRoutines = @[]
  var @stringset allRoutines = @[]
  for (routine) in inRoutineListIR do
    definedRoutines ++= routine.mRoutineMangledName
    allRoutines ++= routine.mRoutineMangledName
    var @stringset accessibleRoutineSet = @[]
    [routine enterAccessibleEntities !?accessibleRoutineSet !? %from 0]
    allRoutines += accessibleRoutineSet
    s += "  \"" + routine.mRoutineMangledName + "\" [shape=rectangle"
    if routine.isRequired then
      s += ", color=blue" # Required routines are blue
    end
    s += "] ;\n"
    for accessible in accessibleRoutineSet do
      s += "  \"" + routine.mRoutineMangledName + "\" -> \"" + accessible + "\" ;\n"
    end
  end
#--- For undefined routines, create red nodes
  let undefinedRoutineSet = allRoutines - definedRoutines
  for undefined in undefinedRoutineSet do
    s += "  \"" + undefined + "\" [shape=rectangle, color=red] ;\n"  
  end
  s += "}\n"
  [s writeToFileWhenDifferentContents !inFilePath ?*]
  if [undefinedRoutineSet count] > 0 then
    var m = [[undefinedRoutineSet count] string] + " undefined routine(s) in routine invocation graph"
    for (r) in undefinedRoutineSet do
      m += "\n    - " + r
    end
    error .nowhere : m
  end
}

#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
