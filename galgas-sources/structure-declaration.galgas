#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @structureDeclaration : @abstractDeclaration {
  @lstring mStructureName
  @lstringlist mAttributeList
  @structureFieldListAST mStructureFieldListAST
  @procedureDeclarationListAST mProcedureDeclarationListAST
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @structureDeclaration location -> @location outLocation {
  outLocation = mStructureName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @structureFieldListAST {
  @lstring mFieldName
  @lstring mFieldTypeName
  @expressionAST mInitExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $struct$
    $typeName$ ?let structureName
    @lstringlist attributeList = {}
    @procedureDeclarationListAST procedureDeclarationListAST = {}
    repeat
    while
      $attribute$ ?let attribute
      attributeList += !attribute
    end 
    ${$
    @structureFieldListAST fieldList = {}
    repeat
    while
      $var$
      $identifier$ ?let fieldName
      $typeName$ ?let typeName
      $=$
      <expression> ?let initExpression
      fieldList += !fieldName !typeName !initExpression
    while
      <procedure>
        !?procedureDeclarationListAST
    while
      $;$
    end
    $}$
    ioAST.mDeclarationList += !@structureDeclaration.new {
      !structureName
      !attributeList
      !fieldList
      !procedureDeclarationListAST
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration addExtension
  ?!@extensionDeclarationListAST ioExtensionDeclarationListAST
  !@abstractDeclaration outNewDeclaration
{
  @structureDeclaration newDeclaration = self
  let currentExtensionDeclarationListAST = ioExtensionDeclarationListAST
  ioExtensionDeclarationListAST = {}
  for (typeName proceduresDefinedInExtension) in currentExtensionDeclarationListAST do
    if mStructureName.string == typeName.string then
      newDeclaration = .new {
        ![newDeclaration mStructureName]
        ![newDeclaration mAttributeList]
        ![newDeclaration mStructureFieldListAST]
        ![newDeclaration mProcedureDeclarationListAST] + proceduresDefinedInExtension
      }
    else
      ioExtensionDeclarationListAST += !typeName !proceduresDefinedInExtension
    end
  end
  outNewDeclaration = newDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addNode !mStructureName !self]
  for (* fieldTypeName *) in mStructureFieldListAST do
    if fieldTypeName.string != "" then
      [!?ioGraph addEdge !mStructureName !fieldTypeName]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @structureDeclaration keyRepresentation -> @string outRepresentation {
  outRepresentation = "struct " + mStructureName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @procedureDeclarationListAST-element getMangledName -> @string outMangledName {
  outMangledName = mProcedureName.string
  for (formalArgument selector * *) in mProcFormalArgumentList do
    outMangledName += " "
    switch formalArgument
    case input : outMangledName += "?"
    case output : outMangledName += "!"
    case inputOutput : outMangledName += "?!"
    end
    outMangledName += selector.string
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @propertyList {
  @string mPropertyName
  @unifiedTypeMap-proxy mType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @propertyMap {
  @unifiedTypeMap-proxy mTypeProxy
  @uint mIndex
  insert insertKey error message "the '%K' property is already declared"
  search searchKey error message "there is no '%K' property"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
#--- Attribute "unique"
  var copiable = true
  for (s) in mAttributeList do
    if s.string == "unique" then
      if not copiable then
        error s : "duplicated attribute"
      end
      copiable = false
    else
      error s : "unknown attribute"
    end
  end
#--- Properties
  @propertyList propertyList = {}
  @propertyMap propertyMap = {}
  for () in mStructureFieldListAST do
    [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !mFieldTypeName ?let fieldTypeNameProxy]
    propertyList += !mFieldName.string !fieldTypeNameProxy
    [!?propertyMap insertKey !mFieldName !fieldTypeNameProxy ![propertyMap count]]
  end
#--- Procedures
  @procedureMap procedureMap = {}
  for procedure in mProcedureDeclarationListAST do
    @procedureSignature signature = {}
    for (formalArgumentPassingMode selector formalArgumentTypeName *) in procedure.mProcFormalArgumentList do
      [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !formalArgumentTypeName ?let typeProxy]
      signature += !formalArgumentPassingMode !selector.string !typeProxy
    end
  #--- Check modes
    @modeMap procedureModeMap = {}
    for mode in procedure.mProcedureModeList do
      [ioContext.mModeMap searchKey !mode.mValue]
      [!?procedureModeMap insertKey !mode.mValue]
    end
    [!?procedureMap insertKey
      !procedure.mProcedureName
      !procedure.mMutating
      !procedureModeMap
      !signature
      !false # not weak
    ]
  end
#--- Enter in type map
  [!?ioContext.mTypeMap insertKey
    !lkey:mStructureName
    !kind:.structure {!name:mStructureName.string !propertyMap:propertyMap !propertyList:propertyList !procedureMap:procedureMap}
    !typedConstantMap:{}
    !procedureMap:procedureMap
    !copiable:copiable
    !equatable:false
    !comparable:false
    !enumerationType:.null # Not enumerable
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  INIT ANALYSIS                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration initAnalysis
  ?!context:@semanticContext ioContext
{
  @staticStringMap globalLiteralStringMap = {} # Unused here
  @operandIRList operandIRList = {}
  for () in mStructureFieldListAST do
  #--- Field type
    let @unifiedTypeMap-proxy fieldType = if mFieldTypeName.string == ""
      then .null
      else .searchKey {!ioContext.mTypeMap !mFieldTypeName}
    end
  #--- Init expression
    @instructionListIR initInstructionGenerationList = {}
    @semanticTemporariesStruct temporaries = .default
    [mInitExpression analyzeExpression
      !routineNameForInvocationGraph:.new {!mStructureName.string + " init" !mStructureName.location}
      !optionalTargetType:fieldType
      !context:ioContext
      !modes:{}
      !allowException:false
      !?temporary:temporaries
      !?staticStringMap:globalLiteralStringMap
      !?variableMap:*
      !?instructionListIR:initInstructionGenerationList
      ?result:@operandIR expressionIR
    ]
    if not [expressionIR.mValue isStatic] then
      error mFieldName : "initialization expression cannot be computed statically"
    end
    @unifiedTypeMap-proxy type
    if fieldType != .null then
      type = fieldType
    else
      type = expressionIR.mType
    end
    operandIRList += !.new {!type !expressionIR.mValue}
  end
  [!?ioContext.mConstructorMap insertKey !mStructureName !operandIRList]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structureDeclaration semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  let structureType = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mStructureName}
  @propertyMap propertyMap
  switch [structureType kind]
  case structure (* propMap * *) : propertyMap = propMap
  case enumeration (*) : propertyMap = {}
  case integer (* * * *) : propertyMap = {}
  case literalInteger : propertyMap = {}
  case boolean : propertyMap = {}
  case boolset : propertyMap = {}
  case literalString : propertyMap = {}
  end
#--- Analyze procedures
  for procedure in mProcedureDeclarationListAST do
  #--- Enter subprogram invocation graph
    let procMangledName = "proc " + mStructureName + "." + procedure.mProcedureName
    let procNameForInvocationGraph = @lstring.new {!procMangledName !procedure.mProcedureName.location}
    if not [ioTemporaries.mSubprogramInvocationGraph isNodeDefined !procNameForInvocationGraph.string] then
      [!?ioTemporaries.mSubprogramInvocationGraph addNode
        !procNameForInvocationGraph
        !procedure.mProcedureName
      ]
    end
  #--- Check modes
    @stringset procedureModeSet = {}
    for mode in procedure.mProcedureModeList do
      [inContext.mModeMap searchKey !mode.mValue]
      procedureModeSet += !mode.mValue.string
    end
  #--- Variable map
    @variableMap variableMap = initialVariableMap (
      !routineMangledName:procMangledName
      !context:inContext
      !globalsAreConstant:false
    )
  #--- Add "self" to variable map
    if procedure.mMutating then
      [!?variableMap insertDefinedLocalVariable
        !.new {!"self" !.here}
        !structureType
        !true # mReadAccessAllowed
        !.localValue {!type:structureType !name:"self"}
        !true # copiable
        !{} # fieldMap
        !true # mCanBeUsedAsInputParameter
        !false # mIsConstant
      ]
    else
      [!?variableMap insertUsedLocalConstant
        !.new {!"self" !.here}
        !structureType
        !true # mReadAccessAllowed
        !.localValue {!type:structureType !name:"self"}
        !true # copiable
        !{} # fieldMap
        !false # mCanBeUsedAsInputParameter
        !true # mIsConstant
      ]
    end
  #--- Analyse formal arguments
    @procFormalArgumentListForGeneration formalArguments = {}
    formalArguments += !.inputOutput !structureType !mangledNameForLocalVariable (!"self")
    enterFormalArguments (
      !context:inContext
      !procedure.mProcFormalArgumentList
      !?variableMap
      !?formalArguments
    )
  #--- Analyze instruction list
    @instructionListIR instructionGenerationList = {}
    [procedure.mInstructionList analyzeRoutineInstructionList
      !routineNameForInvocationGraph:procNameForInvocationGraph
      !context:inContext
      !modes:procedureModeSet
      !allowException:not [procedureModeSet hasKey !panicModeName ()]
      !?temporary:ioTemporaries
      !?staticStringMap:ioIntermediateCodeStruct.mStaticStringMap
      !?variableMap:variableMap
      !?generatedCode:instructionGenerationList
    ]
    [variableMap checkAutomatonStates !procedure.mEndOfProcLocation]
  #--- Enter in map
    [!?ioIntermediateCodeStruct.mProcedureMapIR insertKey
      !.new {!mStructureName.string + "." + procedure.mProcedureName !procedure.mProcedureName.location}
      !formalArguments
      !instructionGenerationList
      !false # [ioIntermediateCodeStruct.mRequiredProcedureSet hasKey !mProcedureName.string]
      !false # warnIfUnused
      !false
      !false
    ]  
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc declareLLVMstructures ?let @unifiedTypeMap inTypeMap ?!@string ioLLVMcode {
  for () in inTypeMap do
    if [kind isStructure] then
      [kind structure ?name:let name ?propertyMap:* ?propertyList:let propertyList ?procedureMap:*]
      ioLLVMcode += "%" + name + " = type {"
      for () in propertyList
        do ioLLVMcode += [mType llvmTypeName]
        between ioLLVMcode += ", "
      end
      ioLLVMcode += "}\n"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

