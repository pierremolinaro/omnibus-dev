#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @controlRegisterKind {
  case scalar
  case registerArray (@expressionAST arraySize # a power of 2 >= 2
                      @location arraySizeLocation
                      @expressionAST arrayElementSize
                      @location arrayElementSizeLocation)
}  

#·······················································································································

list @controlRegisterNameListAST {
  @lstring mRegisterName
  @controlRegisterKind mControlRegisterKind
  @lstringlist mAttributeList
  @expressionAST mRegisterOffset
  @location mRegisterOffsetLocation
}

#·······················································································································

list @controlRegisterDeclarationList {
  @controlRegisterNameListAST mRegisterArrayList
  @lstring mRegisterTypeName
  @controlRegisterBitSliceList mRegisterBitSliceList
  @location mRegisterBitSliceListLocation
}

#·······················································································································

list @controlRegisterBitSliceList {
  @controlRegisterBitSlice mRegisterBitSlice
}

#·······················································································································

enum @controlRegisterBitSlice {
  case unusedBits (@lbigint count)
  case namedBit (@lstring name @lbigint count)
}

#·······················································································································

enum @controlRegisterGroupKindAST {
  case single (@lbigint registerGroupBaseAddress)
  case groupArray (@lbigint size @lbigintlist baseAddresses)
}

#·······················································································································

list @registerGroupListAST {
  @lstring mRegisterGroupName
  @controlRegisterGroupKindAST mControlRegisterGroupKind
}

#·······················································································································

class @controlRegisterGroupDeclarationAST  : @abstractDeclarationAST {
  @registerGroupListAST mRegisterGroupList
  @controlRegisterDeclarationList mRegisters
}

#·······················································································································

map @controlRegisterUserAccesMapAST {
  insert insertKey error message "the '%K' register is already marked as @user in %L"
  remove removeKey error message "-- INTERNAL ERROR ('%K') --"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $registers$
    @registerGroupListAST registerGroupListAST = {}
    repeat
      $#groupName$ ?let registerGroupName
      select
        $integer$ ?let @lbigint registerGroupBaseAddress
        let groupKind = @controlRegisterGroupKindAST.single {!registerGroupBaseAddress:registerGroupBaseAddress}
        registerGroupListAST += !registerGroupName !groupKind
      or
        $[$
        $integer$ ?let @lbigint groupSize
        $]$
        @lbigintlist groupBaseAddresses = {}
        ${$
        repeat
          $integer$ ?let @lbigint baseAddress
          groupBaseAddresses += !baseAddress
        while
          $,$
        end
        $}$
        let groupKind = @controlRegisterGroupKindAST.groupArray {!size:groupSize !baseAddresses:groupBaseAddresses}
        registerGroupListAST += !registerGroupName !groupKind
      end
    while
      $,$
    end
    ${$
    @controlRegisterDeclarationList controlRegisterDeclarationList = {}
    repeat
    while
      @controlRegisterNameListAST registerDeclarationList = {}
      repeat
        <registerDeclaration> !?ioAST !?registerDeclarationList
      while
        $,$
      end
#      $:$ # §
      $identifier$ ?let registerTypeName
      @controlRegisterBitSliceList registerBitSliceList = {}
      select
      or
        ${$
        repeat
          @controlRegisterBitSlice registerBitSlice
          select
            $integer$ ?let @lbigint unusedBitCount
            registerBitSlice = .unusedBits {!count:unusedBitCount}
          or
            $identifier$ ?let bitName
            select
              registerBitSlice = .namedBit {!name:bitName !count:.new{!1G !.here}}
            or
              $:$
              $integer$ ?let @lbigint bitCount
              registerBitSlice = .namedBit {!name:bitName !count:bitCount}
            end
          end
          registerBitSliceList += !registerBitSlice
        while
          $,$
        end
        $}$
      end
      let endOfBitSlice = @location.here
      controlRegisterDeclarationList += !registerDeclarationList !registerTypeName !registerBitSliceList !endOfBitSlice
    end
    ioAST.mDeclarationListAST += !@controlRegisterGroupDeclarationAST.new {
      !registerGroupListAST
      !controlRegisterDeclarationList
    }
    $}$
  }

  #·····················································································································

  rule <registerDeclaration> ?!@ast ioAST ?!@controlRegisterNameListAST ioRegisterDeclarationList {
    $identifier$ ?let registerName
    @lstringlist attributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      attributeList += !attribute
    end
    select
      <expression> !?ioAST ?let registerAddress
      ioRegisterDeclarationList +=
        !registerName
        !.scalar
        !attributeList
        !registerAddress 
        !.here
    or
      $[$
      <expression> !?ioAST ?let sizeExpression
      let sizeExpressionLocation = @location.here
      $]$
      <expression> !?ioAST ?let baseAddressExpression
      let baseAddressExpressionLocation = @location.here
      $@attribute$ ?let attribute
      if attribute.string != "inc" then
        error attribute : "attribute should be @inc" fixit { replace "@inc" }
      end
      <expression> !?ioAST ?let arrayElementSizeExpression
      let arrayElementSizeExpressionLocation = @location.here
      ioRegisterDeclarationList +=
        !registerName
        !.registerArray {
           !arraySize:sizeExpression
           !arraySizeLocation:sizeExpressionLocation
           !arrayElementSize:arrayElementSizeExpression
           !arrayElementSizeLocation:arrayElementSizeExpressionLocation
         }
        !attributeList
        !baseAddressExpression 
        !baseAddressExpressionLocation
    end
  }

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $registers$
    $@attribute$ ?let attribute
    if attribute.string != userAttributeForRegister () then
      error attribute : "this attribute should be @" + userAttributeForRegister ()
    end
    repeat
      $#groupName$ ?let registerGroupName
      $:$
      $identifier$ ?let registerName
      let key = @lstring.new {!"#" + registerGroupName + ":" + registerName !registerName.location}
      [!?ioAST.mControlRegisterUserAccesMapAST insertKey !key]
    while
      $,$
    end      
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @controlRegisterFieldList { # Used for displaying in HTML file
  @uint mFieldBitCount
  @string mFieldName # "—" if unused
}

#·······················································································································

map @controlRegisterFieldMap {
  @uint mBitIndex
  @uint mBitCount
  insert insertKey error message "the '%K' slice has been already declared"
  search searchKey error message "the '%K' slice is not declared"
}

#·······················································································································

map @sliceMap {
  @llvmBinaryOperation mAccessOperator
  @bigint mAccessRightOperand
  @PLMType mResultType
  insert insertKey error message "the '%K' slice has been already declared"
  search searchKey error message "the '%K' slice is not declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   PRECEDENCE GRAPH
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @controlRegisterGroupDeclarationAST noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for reg in mRegisters do
    [!?ioGraph noteNode !reg.mRegisterTypeName]
  end
}

#·······················································································································

override getter @controlRegisterGroupDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = registerGroupNameFromPLMname (![mRegisterGroupList mRegisterGroupNameAtIndex !0])
}

#·······················································································································

override getter @controlRegisterGroupDeclarationAST locationForErrorSignaling -> @location {
  result = [mRegisterGroupList mRegisterGroupNameAtIndex !0]
}

#·······················································································································

override method @controlRegisterGroupDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  let nodeName = registerGroupNameFromPLMname (![mRegisterGroupList mRegisterGroupNameAtIndex !0])
#--- Add node
  [!?ioGraph addNode !nodeName !self]
#--- Add dependence definitions
  for reg in mRegisters do
  #--- Add dependency from type name
    [!?ioGraph addEdge !nodeName !reg.mRegisterTypeName]
  #--- Add dependency from the number of integer type name (i.e. UInt32 --> UInt5)
    let split = [reg.mRegisterTypeName componentsSeparatedByString !"UInt"]
    if ([split length] == 2) && [[split mValueAtIndex !1] isDecimalUnsignedNumber] then
      let n = [[split mValueAtIndex !1] decimalUnsignedNumber]
      if n > 0 then
        let bitSizeTypeName = @lstring.new {!"UInt" + [n-1 significantBitCount] !reg.mRegisterTypeName}
        [!?ioGraph addEdge !nodeName !bitSizeTypeName]
      end
    end
  #--- Add integer type corresponding to slices
    for (slice) in reg.mRegisterBitSliceList do
      switch slice
      case unusedBits (*) :
      case namedBit (* @lbigint count) :
        if count.bigint >= 0G then
          [!?ioGraph noteUINTType ![count.bigint uint] !count.location]
        end
      end
    end
  #--- Add dependency from config node
    let rootNode =  @lstring.new {!configurationNodeNameForPrecedenceGraph () !nodeName.location}
    [!?ioGraph addEdge !nodeName !rootNode]
  #--- Add dependency from source expression
    for register in reg.mRegisterArrayList do
      switch register.mControlRegisterKind
      case scalar :
      case registerArray (@expressionAST arraySize * @expressionAST arrayElementSize *) :
        [arraySize addDependenceEdgeForStaticExpression !nodeName !?ioGraph]
        [arrayElementSize addDependenceEdgeForStaticExpression !nodeName !?ioGraph]
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @controlRegisterMap {
  @PLMType mType
  @bool mIsReadOnly
  @bool mUserAccess
  @sliceMap mRegisterFieldAccessMap
  @controlRegisterFieldMap mRegisterFieldMap
  @bigint mAddressOffset
  @controlRegisterFieldList mControlRegisterFieldList # Used for HTML file
  @uint mRegisterBitCount
  @uint mArraySize # 0 if not an array
  @uint mElementArraySize # 0 if not an array
  insert insertKey error message "the '%K' control register has been already declared in %L"
  search searchKey error message "the '%K' control register is not declared"
}

#·······················································································································

enum @registerGroupKind {
  case single (@bigint baseAddress)
  case arrayGroup (@lbigintlist baseAddresses)
}

#·······················································································································

map @controlRegisterGroupMap {
  @registerGroupKind mGroupKind
  @controlRegisterMap mControlRegisterMap
  insert insertKey error message "the '%K' control register group has been already declared in %L"
  search searchKey error message "** internal error **"
}

#·······················································································································

private proc controlRegisterType
  ?let @lstring inRegisterTypeName
  ?!context:@semanticContext ioContext
  !type:@PLMType outRegisterType
  !bitCount:@uint outRegisterBitCount
{
  [ioContext.mTypeMap searchKey !lkey:inRegisterTypeName ?type:outRegisterType]
  switch outRegisterType.kind
  case integer (* * * bitCount):
    outRegisterBitCount = bitCount
  case boolean, void :
    error inRegisterTypeName : "a register should be an IntXX or an UIntXX" : outRegisterBitCount
  case enumeration (*) :
    error inRegisterTypeName : "a register should be an IntXX or an UIntXX" : outRegisterBitCount
  case literalString :
    error inRegisterTypeName : "a register should be an IntXX or an UIntXX" : outRegisterBitCount
  case staticInteger :
    error inRegisterTypeName : "a register should be an IntXX or an UIntXX" : outRegisterBitCount
  case structure (*) :
    error inRegisterTypeName : "a register should be an IntXX or an UIntXX" : outRegisterBitCount
  case syncTool :
    error inRegisterTypeName : "a register should be an IntXX or an UIntXX" : outRegisterBitCount
  case opaque (*) :
    error inRegisterTypeName : "a register should be an IntXX or an UIntXX" : outRegisterBitCount
  case staticArrayType (* *) :
    error inRegisterTypeName : "a register should be an IntXX or an UIntXX" : outRegisterBitCount
  case dynamicArrayType (*) :
    error inRegisterTypeName : "a register should be an IntXX or an UIntXX" : outRegisterBitCount
  case function (3*) :
    error inRegisterTypeName : "a register should be an IntXX or an UIntXX" : outRegisterBitCount
  end
}

#·······················································································································

private proc buildControlRegisterSliceMap
  ?let @controlRegisterBitSliceList inRegisterBitSliceList
  ?let @location inEndOfBitSliceLocation
  ?!context:@semanticContext unused ioContext
  ?!type:@PLMType ioRegisterType
  ?bitCount:let @uint inRegisterBitCount
  !@controlRegisterFieldMap outRegisterFieldMap
  !@sliceMap outRegisterBitSliceMap
  !@controlRegisterFieldList outControlRegisterFieldList
{
#--- Build bit slice map
  outRegisterFieldMap = {}
  outRegisterBitSliceMap = {}
  outControlRegisterFieldList = {} # Used for HTML file
  if [inRegisterBitSliceList length] > 0 then
    @uint shiftCount = 0
    for > () in inRegisterBitSliceList do
      switch mRegisterBitSlice
      case unusedBits (@lbigint count) :
        shiftCount = shiftCount + [count.bigint uint]
        outControlRegisterFieldList += ![count.bigint uint] ! "—"
      case namedBit (@lstring name @lbigint count) :
        let bitCount = [count.bigint uint]
        outControlRegisterFieldList += !bitCount !name.string
        [!?outRegisterFieldMap insertKey
          !name
          !shiftCount
          !bitCount
        ]
       #--- property name
        let mask = ((1G << bitCount) - 1G) << shiftCount
        [!?outRegisterBitSliceMap insertKey
          !name
          !.and
          !mask
          !ioRegisterType
        ]
        shiftCount = shiftCount + bitCount
      end
    end
  #--- Check slice bit count is correct
    if inRegisterBitCount != shiftCount then
      error inEndOfBitSliceLocation
       : "total bit slice count is " + shiftCount + " (should be " + inRegisterBitCount + ")"
    end
  end
}

#·······················································································································

method @controlRegisterDeclarationList-element buildControlRegisterMapForGroup
  ?!context:@semanticContext ioContext
  ?!@controlRegisterMap ioControlRegisterMap
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
{
  controlRegisterType (!mRegisterTypeName !?context:ioContext ?type:var registerType ?bitCount:let registerBitCount)
#--- Build bit slice map
  buildControlRegisterSliceMap (
    !mRegisterBitSliceList
    !mRegisterBitSliceListLocation
    !?context:ioContext
    !?type:registerType
    !bitCount:registerBitCount
    ?let registerFieldMap
    ?let registerBitSliceMap
    ?let controlRegisterFieldList  # Used for HTML file
  )
#---  
  for register in mRegisterArrayList do
  #--- Analyze attributes
    var isReadOnly = false
    for (att) in register.mAttributeList do
      if att.string == "ro" then
        if isReadOnly then
          error att : "duplicated attribute"
        else
          isReadOnly = true
        end
      else
        error att : "only the @ro (read only) attribute is accepted here"
      end
    end
  #--- Analyse register address expression
    computeStaticExpression (
      !?context: ioContext
      !?staticEntityMap:ioStaticEntityMap
      !expression:register.mRegisterOffset
      !errorLocation:register.mRegisterOffsetLocation
      !optionalContextualTypeName: ["" nowhere]
      ?result:let @objectIR addressOffsetExpressionResult
    )
    @bigint registerAddressOffset
    if not [addressOffsetExpressionResult isLiteralInteger] then
      error register.mRegisterOffsetLocation
        : "control register address offset is not a static integer expression"
        : registerAddressOffset
    else
      [addressOffsetExpressionResult literalInteger ?1* ?value:registerAddressOffset]
    end
    @bigint arraySize
    @uint elementArraySize
    switch register.mControlRegisterKind
    case scalar :
      arraySize = 0G
      elementArraySize = 0
    case registerArray (@expressionAST arraySizeExpression @location arraySizeLocation
                        @expressionAST arrayElementSizeExpression @location arrayElementSizeLocation) :
    #--- Analyse register array size expression
      computeStaticExpression (
        !?context: ioContext
        !?staticEntityMap:ioStaticEntityMap
        !expression:arraySizeExpression
        !errorLocation:arraySizeLocation
        !optionalContextualTypeName:["" nowhere]
        ?result:let @objectIR sizeExpressionResult
      )
      if not [sizeExpressionResult isLiteralInteger] then
        error arraySizeLocation : "control register address is not a static integer expression" : arraySize
      else
        [sizeExpressionResult literalInteger ?1* ?value:arraySize]
        if arraySize < 2G then
          error arraySizeLocation
            : "control register array size should be a static integer expression >= 2, equal to a power of 2"
            : arraySize
        end
      end
    #--- Analyse element array size expression
      computeStaticExpression (
        !?context: ioContext
        !?staticEntityMap:ioStaticEntityMap
        !expression:arrayElementSizeExpression
        !errorLocation:arrayElementSizeLocation
        !optionalContextualTypeName:["" nowhere]
        ?result:let @objectIR elementArraySizeExpressionResult
      )
      if not [elementArraySizeExpressionResult isLiteralInteger] then
        error arrayElementSizeLocation
          : "element size is not a static integer expression"
          : elementArraySize
      else
        [elementArraySizeExpressionResult literalInteger ?1* ?value:let elementArraySizeAsBigInt]
        elementArraySize = [elementArraySizeAsBigInt uint]
      end
    end
    [!?ioControlRegisterMap insertKey
      !register.mRegisterName
      !registerType
      !isReadOnly
      !false # user access is false by default
      !registerBitSliceMap
      !registerFieldMap
      !registerAddressOffset
      !controlRegisterFieldList
      !registerBitCount
      ![arraySize uint]
      !elementArraySize
    ]
  end
}

#·······················································································································

override method @controlRegisterGroupDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR unused ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
  @controlRegisterMap regMap = {}
  for reg in mRegisters do
    [reg buildControlRegisterMapForGroup
      !?context:ioContext
      !?regMap
      !?staticEntityMap:ioStaticEntityMap
    ]
  end
  for group in mRegisterGroupList do
    @controlRegisterMap registerMap = regMap # {}
  #--- Check for user access
    for aRegister in regMap do
      let key = "#" + group.mRegisterGroupName + ":" + aRegister.lkey
      if [ioControlRegisterUserAccesMapAST hasKey !key] then
        [!?registerMap setMUserAccessForKey !true !aRegister.lkey]
        [!?ioControlRegisterUserAccesMapAST removeKey ![key nowhere]]
      end
    end
  #---
    switch group.mControlRegisterGroupKind
    case single (baseAddress) :
      let groupKind = @registerGroupKind.single {!baseAddress:baseAddress}
      [!?ioContext.mControlRegisterGroupMap insertKey !group.mRegisterGroupName !groupKind !registerMap]
    case groupArray (size baseAddresses) :
      if [size.bigint uint] != [baseAddresses length] then
        error size : "the group size is " + size.bigint + ", but " + [baseAddresses length] + " base addresses are defined"
      end
      let groupKind = @registerGroupKind.arrayGroup {!baseAddresses:baseAddresses}
      [!?ioContext.mControlRegisterGroupMap insertKey !group.mRegisterGroupName !groupKind !registerMap]
      ioDecoratedDeclarationList += !@decoratedControlRegisterArrayGroupDeclaration.new {
        !group.mRegisterGroupName
        !baseAddresses
      }
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @decoratedControlRegisterArrayGroupDeclaration : @abstractDecoratedDeclaration {
  @lstring mGroupName
  @lbigintlist mBaseAddresses
}

#·······················································································································

override method @decoratedControlRegisterArrayGroupDeclaration semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  ioIntermediateCodeStruct.mControlRegisterGroupArrayList += !mGroupName !mBaseAddresses
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @controlRegisterGroupArrayList generateLLVMcode ?!@string ioLLVMcode ?let @uint inPointerSize {
  if [self length] > 0 then
    ioLLVMcode += llvmTitleComment (!"Control Register Group Arraies")
    let int = "i" + inPointerSize
    for (groupName baseAddresses) in self do
      ioLLVMcode += registerGroupAddressArrayLLVMname (!groupName)
                 + " = private unnamed_addr constant [" + [baseAddresses length] + " x " + int + "] ["
      for (addr) in baseAddresses
      do
        ioLLVMcode += int + " " + [addr.bigint string]
      between
        ioLLVMcode += ", "
      end
      ioLLVMcode += "] ; "
      for (addr) in baseAddresses
      do
        ioLLVMcode += [addr.bigint hexString]
      between
        ioLLVMcode += ", "
      end
      ioLLVMcode += "\n"
    end
    ioLLVMcode += "\n"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  BUILD HTML FILE                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sortedlist @controlRegisterByAddress {
  @bigint mAddress
  @string mHTML
}{
  mAddress <
}

#·······················································································································

sortedlist @controlRegisterByName {
  @bigint mAddress
  @string mHTML
  @string mName
}{
  mName <
}

#·······················································································································

proc buildControlRegisterMapHTMLFile
  ?let @controlRegisterGroupMap inControlRegisterGroupMap
  ?sourceFile:let @lstring inSourceFile
{
#------------------------------- Build an HTML file that contains all declared control registers, ordered by address
  let byAddressFilePath = inSourceFile.string + ".control-registers-sorted-by-address.html"
  let byNameFilePath = inSourceFile.string + ".control-registers-sorted-by-name.html"
  if [option plm_options.emitControlRegisterHTMLDumpFile value] then
    @controlRegisterByAddress controlRegisterByAddress = {}
    @controlRegisterByName controlRegisterByName = {}
    @uint controlRegisterCount = 0
    for () group_ in inControlRegisterGroupMap do
      switch group_mGroupKind
      case single (groupBaseAddress) :
        buildControlRegisterMaps (
          !group_mControlRegisterMap
          !groupBaseAddress
          !group_lkey.string
          !?controlRegisterByAddress
          !?controlRegisterByName
          !?controlRegisterCount
        )
      case arrayGroup (@lbigintlist baseAddresses) :
        for (baseAddr) in baseAddresses do (idx)
          buildControlRegisterMaps (
            !group_mControlRegisterMap
            !baseAddr.bigint
            !group_lkey.string + "[" + idx + "]"
            !?controlRegisterByAddress
            !?controlRegisterByName
            !?controlRegisterCount
          )
        end
      end
    end
    var typeDumpString = [filewrapper controlRegisterDumpGenerationTemplate.dumpByAddress
      ![inSourceFile lastPathComponent]
      !controlRegisterCount
      !controlRegisterByAddress
    ]
    [typeDumpString writeToFileWhenDifferentContents !byAddressFilePath ?*]
    typeDumpString = [filewrapper controlRegisterDumpGenerationTemplate.dumpByName
      ![inSourceFile lastPathComponent]
      !controlRegisterCount
      !controlRegisterByName
    ]
    [typeDumpString writeToFileWhenDifferentContents !byNameFilePath ?*]
  else
    [@string deleteFileIfExists !byAddressFilePath]
    [@string deleteFileIfExists !byNameFilePath]
  end
}

#·······················································································································

private proc buildControlRegisterMaps
  ?let @controlRegisterMap inControlRegisterMap
  ?let @bigint inGroupBaseAddress
  ?let @string inGroupName
  ?!@controlRegisterByAddress ioControlRegisterByAddress
  ?!@controlRegisterByName ioControlRegisterByName
  ?!@uint ioControlRegisterCount
{
  for () reg_ in inControlRegisterMap do
    let registerAddress = inGroupBaseAddress + reg_mAddressOffset
    if reg_mArraySize == 0 then
      ioControlRegisterCount = ioControlRegisterCount + 1
      let registerName = inGroupName + ":" + reg_lkey
      var s = "<tr class=\"result_line\"><td class=\"name\">"
        + registerName
        + "</td><td class=\"type\">" + reg_mType.plmTypeDescriptionName + "</td><td class=\"address\">"
        + [registerAddress hexStringSeparatedBy !'_' !4] + "</td><td>"
      if [reg_mControlRegisterFieldList length] > 0 then
        s += "<table class=\"fields\">"
          + "<tr>" + fieldIndexColumns (!reg_mRegisterBitCount) +  "</tr>"
          + "<tr>"
        for > () in reg_mControlRegisterFieldList do
          s += "<td class=\"fields\" colspan=\"" + [mFieldBitCount string] + "\">" + mFieldName + "</td>"
        end
        s += "</tr></table>"
      end  
      s += "</td></tr>\n"
      ioControlRegisterByAddress += !registerAddress !s
      ioControlRegisterByName += !registerAddress !s !registerName
    else
      ioControlRegisterCount = ioControlRegisterCount + reg_mArraySize
      for () in arrayIndexListFor (!size:reg_mArraySize) do
        let address = registerAddress + mValue * reg_mElementArraySize
        let registerName = inGroupName + ":" + reg_lkey + "[" + [mValue string] + "]"
        var s = "<tr class=\"result_line\"><td class=\"name\">"
          + registerName
          +"</td><td class=\"type\">" + reg_mType.plmTypeDescriptionName + "</td><td class=\"address\">"
          + [address hexStringSeparatedBy !'_' !4]
          + "</td><td>"
        if [reg_mControlRegisterFieldList length] > 0 then
          s += "<table class=\"fields\">"
            + "<tr>" + fieldIndexColumns (!reg_mRegisterBitCount) + "</tr><tr>"
          for > () in reg_mControlRegisterFieldList do
            s += "<td class=\"fields\" colspan=\"" + [mFieldBitCount string] + "\">" + mFieldName + "</td>"
          end
          s += "</tr></table>"
        end  
        s += "</td></tr>\n"
        ioControlRegisterByAddress += !registerAddress !s
        ioControlRegisterByName += !registerAddress !s !registerName
      end
    end
  end
}

#·······················································································································

filewrapper controlRegisterDumpGenerationTemplate in "../generation-templates/" {
}{
}{
  template dumpByName "controlRegisterByNameDump.html.galgasTemplate"
    ?@string PROJECT_NAME
    ?@uint CONTROL_REGISTER_COUNT
    ?@controlRegisterByName CONTROL_REGISTER_SORTED_BY_NAME

  template dumpByAddress "controlRegisterByAddressDump.html.galgasTemplate"
    ?@string PROJECT_NAME
    ?@uint CONTROL_REGISTER_COUNT
    ?@controlRegisterByAddress CONTROL_REGISTER_SORTED_BY_ADDRESS
}

#·······················································································································

func fieldIndexColumns ?let @uint inBitCount -> @string  {
  result = ""
  for > x in 0 ..< inBitCount do
    result += "<td class=\"fields\">" + x + "</td>"
  end
}

#·······················································································································

func arrayIndexListFor ?size:let @uint inSize -> @uintlist {
  result = {}
  for i in 0 ..< inSize do
    result += !i
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

