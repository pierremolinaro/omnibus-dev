#—————————————————————————————————————————————————————————————————————————————————————————————————
#   INFIX OPERATOR MAP
#—————————————————————————————————————————————————————————————————————————————————————————————————

map @infixOperatorMap {
  public var @omnibusType mResultType
  public var @omnibusInfixOperatorUsage mOperatorUsage
  insert insertKey error message "the '%K' infix operator is already declared in %L"
  search searchKey error message "there is no '%K' infix operator"
}

#·······················································································································

abstract class @omnibusInfixOperatorUsage {
}

#·······················································································································

abstract method @omnibusInfixOperatorUsage generateCode
  ?let @objectIR inLeftOperand
  ?let @location inOperatorLocation
  ?let @objectIR inRightOperand
  ?let @omnibusType inResultType
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@allocaList ioAllocaList
  ?!@instructionListIR ioInstructionGenerationList
  !@objectIR outResultValue

#—————————————————————————————————————————————————————————————————————————————————————————————————

method @infixOperatorMap generateInfixOperatorCode
  ?let @objectIR inLeftOperand
  ?let @omnibusInfixOperator inInfixOperator
  ?let @location inOperatorLocation
  ?let @objectIR inRightOperand
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@allocaList ioAllocaList
  ?!@instructionListIR ioInstructionGenerationList
  !@objectIR outResultValue
{
  let key = infixOperatorMapKey (![inLeftOperand type] !inInfixOperator !inOperatorLocation ![inRightOperand type])
  [self searchKey !key ?let resultType ?let operatorUsage]
  [operatorUsage generateCode
    !inLeftOperand
    !inOperatorLocation
    !inRightOperand
    !resultType
    !?ioTemporaries
    !?ioAllocaList
    !?ioInstructionGenerationList
    ?outResultValue
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  INLINE INFIX OPERATOR
#—————————————————————————————————————————————————————————————————————————————————————————————————

class @inlineInfixOperatorUsage : @omnibusInfixOperatorUsage {
  public var @string mLLVMOperation
}

#·······················································································································

override method @inlineInfixOperatorUsage generateCode
  ?let @objectIR inLeftOperand
  ?let @location unused inOperatorLocation
  ?let @objectIR inRightOperand
  ?let @omnibusType inResultType
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@allocaList unused ioAllocaList
  ?!@instructionListIR ioInstructionGenerationList
  !@objectIR outResultValue
{
  var leftOperand = inLeftOperand
  [!?ioInstructionGenerationList appendLoadWhenReference !?ioTemporaries !?leftOperand]
  var rightOperand = inRightOperand
  [!?ioInstructionGenerationList appendLoadWhenReference !?ioTemporaries !?rightOperand]
  getNewTempValue (!inResultType !?ioTemporaries ?outResultValue)
  let s = [outResultValue llvmName] + " = " + self.mLLVMOperation + " " + [[leftOperand type] llvmTypeName]
        + " " + [leftOperand llvmName] + ", " + [rightOperand llvmName]
  [!?ioInstructionGenerationList appendInstructionAsFreeString !s !@[]]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
