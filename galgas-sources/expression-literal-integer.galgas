#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                 *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @literalIntegerInExpressionAST : @expressionAST {
  @lbigint mLiteralInteger
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                              *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  rule <primary> !@expressionAST outExpression {
    $integer$ ?let @lbigint integerLiteral
    outExpression = @literalIntegerInExpressionAST.new {!integerLiteral}
  }

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                    *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalIntegerInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring unused inConstantName
  ?!@semanticTypePrecedenceGraph unused ioGraph
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                           *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalIntegerInExpressionAST analyzeExpression
  ?routineNameForInvocationGraph:let @lstring unused inRoutineNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset unused inModeSet
  ?allowException:let @bool unused inAllowExceptions
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap unused ioVariableMap
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
  !result:@operandIR outResult
{
  outResult = .new {!inContext.mLiteralIntegerType !.literalInteger {!value:mLiteralInteger.bigint}}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
