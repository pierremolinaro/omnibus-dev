#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @literalIntegerInExpressionAST : @expressionAST {
  @lbigint mLiteralInteger
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  rule <primary> !@expressionAST outExpression {
    $integer$ ?let @lbigint integerLiteral
    outExpression = @literalIntegerInExpressionAST.new {!integerLiteral}
  }

}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @literalIntegerInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring unused inConstantName
  ?!@semanticTypePrecedenceGraph unused ioGraph
{
}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @literalIntegerInExpressionAST analyzeExpression
  ?routineNameForInvocationGraph:let @lstring unused inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType unused inReceiverType
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext unused inContext
  ?modes:let @stringset unused inModeSet
  ?allowException:let @bool unused inAllowExceptions
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap unused ioVariableMap
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
  !type:@unifiedTypeMap-proxy outResultType
  !result:@operandIR outResult
{
  if inOptionalTargetType == .null then
    error mLiteralInteger : "Cannot infer type" : outResultType, outResult
  else
    switch [inOptionalTargetType kind]
    case integer (* max * *) :
      if mLiteralInteger.bigint > max then
        error mLiteralInteger : "literal integer is > " + [inOptionalTargetType key]
          + " max value (" + max + ")" : outResultType, outResult
      else
        outResultType = inOptionalTargetType
        outResult = .literalInteger {!value:mLiteralInteger.bigint}
      end
    case enumeration (*) :
      error mLiteralInteger : "an enumeration cannot be assigned from a literal integer" : outResultType, outResult
    case structure (*) :
      error mLiteralInteger : "a structure cannot be assigned from a literal integer" : outResultType, outResult
    case boolean :
      error mLiteralInteger : "a boolean cannot be assigned from a literal integer" : outResultType, outResult
    case literalInteger :
      error mLiteralInteger : "a boolean cannot be assigned from a literal integer" : outResultType, outResult
    case boolset :
      error mLiteralInteger : "a boolset cannot be assigned from a literal integer" : outResultType, outResult
    case literalString :
      error mLiteralInteger : "a literal string cannot be assigned from a literal integer" : outResultType, outResult
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*
