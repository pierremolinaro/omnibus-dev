#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @literalIntegerInExpressionAST : @expressionAST {
  @lbigint mLiteralInteger
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <primary> ?!@ast unused ioAST !@expressionAST outExpression {
    $integer$ ?let @lbigint integerLiteral
    outExpression = @literalIntegerInExpressionAST.new {!integerLiteral}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalIntegerInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addEdge !inConstantName !llvmTypeNameFromPLMname (![staticIntegerTypeName () nowhere])]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalIntegerInExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [!?ioGraph noteNode !llvmTypeNameFromPLMname (![staticIntegerTypeName () nowhere])]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalIntegerInExpressionAST analyzeExpression
  ?self:let @PLMType unused inSelfType
  ?routineAttributes:let @routineAttributes unused inRoutineAttributes
  ?routineNameForInvocationGraph:let @lstring unused inCallerNameForInvocationGraph
  ?optionalTargetType:let @PLMType unused inOptionalTargetType
  ?context:let @semanticContext unused inContext
  ?mode:let @mode unused inCurrentMode
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap unused ioUniversalMap
  ?!alloca:@allocaList unused ioAllocaList
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
  !result:@objectIR outResult
{
  outResult = .literalInteger {!type:staticIntegerType () !value:mLiteralInteger.bigint}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
