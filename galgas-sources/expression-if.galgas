#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @ifExpressionAST : @expressionAST {
  public var @expressionAST mIfExpression
  public var @location mIfExpressionEndLocation
  public var @expressionAST mThenExpression
  public var @location mThenExpressionEndLocation
  public var @expressionAST mElseExpression
  public var @location mElseExpressionEndLocation
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································
  
  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    <expression_if> !?ioAST ?let if_expression
    outExpression = if_expression
  }
  
  #·····················································································································
  
  rule <expression_if> ?!@ast ioAST !@ifExpressionAST outExpression {
    $if$
    <expression> !?ioAST ?let ifExpression
    let @location ifExpressionEndLocation = .here
    ${$
    <expression> !?ioAST ?let thenExpression
    let @location thenExpressionEndLocation = .here
    $}$
    $else$
    let @expressionAST elseExpression
    select
      ${$
      <expression> !?ioAST ?elseExpression
      $}$
    or
      <expression_if> !?ioAST ?let else_if_expression
      elseExpression = else_if_expression
    end
    let @location elseExpressionEndLocation = .here
    outExpression = @ifExpressionAST.new {
      !ifExpression !ifExpressionEndLocation
      !thenExpression !thenExpressionEndLocation
      !elseExpression !elseExpressionEndLocation
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [self.mIfExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
  [self.mThenExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
  [self.mElseExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [self.mIfExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  [self.mThenExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  [self.mElseExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifExpressionAST analyzeExpression
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?optionalTargetType:let @omnibusType inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- Analyze if expression
  [self.mIfExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR ifExpressionResult 
  ]
  [!?ioInstructionGenerationList appendLoadWhenReference !?ioTemporaries !?ifExpressionResult]  
#--- Check "if" expression type is boolean
  [inContext.mImplicitConversionToBooleanMap generateConvertToBooleanCode
    !ifExpressionResult
    !self.mIfExpressionEndLocation
    !?ioTemporaries
    !?ioInstructionGenerationList
    !?alloca: ioAllocaList
    ?let ifExpressionConvertedToBoolean
  ]

#  if not [[ifExpressionResult type].kind isBoolean] then
#    error mIfExpressionEndLocation : "'if' expression should be boolean"
#  end
#--- Analyze 'then' expression
  [self.mThenExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR thenExpressionTempResult
  ]
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?thenExpressionTempResult
  ]  
  let thenExpressionResult = checkAssignmentCompatibility (
    !inContext.mAssignmentOperatorMap
    !source:thenExpressionTempResult
    !targetAnnotationType:inOptionalTargetType
    !errorLocation:self.mThenExpressionEndLocation
    !staticTypeAllowed:true
  )
#--- Analyze 'else' expression
  [self.mElseExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR elseExpressionTempResult
  ]
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?elseExpressionTempResult
  ]  
  let elseExpressionResult = checkAssignmentCompatibility (
    !inContext.mAssignmentOperatorMap
    !source:elseExpressionTempResult
    !targetAnnotationType:[thenExpressionResult type]
    !errorLocation:self.mElseExpressionEndLocation
    !staticTypeAllowed:true
  )
#--- 'if' expression is static ?
  switch ifExpressionConvertedToBoolean
  case compileTime (boolValue) :
    outResult = if boolValue then thenExpressionResult else elseExpressionResult end
  case llvmVariable (testResultVariableName) :
    getNewTempValue (![elseExpressionResult type] !?ioTemporaries ?outResult)
    [!?ioInstructionGenerationList appendSelectOperation
      !outResult
      !testResultVariableName
      !thenExpressionResult
      !elseExpressionResult
    ]      
  end
#  if [ifExpressionResult isStatic] then # yes, perform 'if' statically
#    [ifExpressionResult literalInteger ?1* ?value:let value]
#    outResult = if value != 0 then thenExpressionResult else elseExpressionResult end
#  else # No, generate 'select' LLVM instruction
#    getNewTempValue (![elseExpressionResult type] !?ioTemporaries ?outResult)
#    [!?ioInstructionGenerationList appendSelectOperation
#      !outResult
#      !ifExpressionResult
#      !thenExpressionResult
#      !elseExpressionResult
#    ]      
#  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
