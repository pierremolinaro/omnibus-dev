#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @procFormalArgumentListForGeneration {
  @procFormalArgumentPassingMode mFormalArgumentKind
  @unifiedTypeMap-proxy mFormalArgumentType
  @string mFormalArgumentName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

graph @subprogramInvocationGraph (@lstringlist) {
  insert addNode error message "the '%K' subprogram is already declared at %L"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc enterFormalArguments
  ?context:let @semanticContext inContext
  ?let @procFormalArgumentList inFormalArgumentPassingMode
  ?!@variableMap ioVariableMap
  ?!@procFormalArgumentListForGeneration ioFormalArguments
{
  for (argumentKind selector formalArgumentTypeName formalArgumentName) in inFormalArgumentPassingMode do
    let typeProxy = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !formalArgumentTypeName}
    switch argumentKind
    case input :
      [!?ioVariableMap insertConstantInputFormalArgument
        !lkey:formalArgumentName
        !type:typeProxy
        !readAccessAllowed:true
        !variableKind:.localValue {!type:typeProxy !name:formalArgumentName.string}
        !copyable:[typeProxy copyable]
        !fieldMap:{}
        !canBeUsedAsInputParameter:true
        !isConstant:true # Is constant
      ]
#      ioFormalArguments += !argumentKind !typeProxy !llvmNameForLocalVariable (!formalArgumentName.string)
      ioFormalArguments += !argumentKind !typeProxy !formalArgumentName.string
    case inputOutput :
      [!?ioVariableMap insertInputOutputFormalArgument
        !lkey:formalArgumentName
        !type:typeProxy
        !readAccessAllowed:true
        !variableKind:.localValue {!type:typeProxy !name:formalArgumentName.string}
        !copyable:[typeProxy copyable]
        !fieldMap:{}
        !canBeUsedAsInputParameter:true
        !isConstant:false # Is not constant
      ]
      ioFormalArguments += !argumentKind !typeProxy !llvmNameForLocalVariable (!formalArgumentName.string)
    case output :
      [!?ioVariableMap insertOutputFormalArgument
        !lkey:formalArgumentName
        !type:typeProxy
        !readAccessAllowed:true
        !variableKind:.localValue {!type:typeProxy !name:formalArgumentName.string}
        !copyable:[typeProxy copyable]
        !fieldMap:{}
        !canBeUsedAsInputParameter:true
        !isConstant:false # Is not constant
      ]
      ioFormalArguments += !argumentKind !typeProxy !llvmNameForLocalVariable (!formalArgumentName.string)
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @accessKind {
  case noAccess
  case readAccess # privilegedModeAccess
  case readWriteAccess # userModeAccess
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc routineSemanticAnalysis
  ?receiverType:let @unifiedTypeMap-proxy inSelfType
  ?let @routineKind inRoutineKind
  ?let @lstringlist inRoutineModeList
  ?let @lstring inRoutineName
  ?let @procFormalArgumentList inRoutineFormalArgumentList
  ?returnTypeName:let @lstring inReturnTypeName
  ?let @instructionListAST inRoutineInstructionList
  ?let @location inEndOfRoutineDeclaration
  ?warnIfUnused:let @bool inWarnIfUnused
  ?globalProcedure:let @bool inGlobalProcedure
  ?weakProcedure:let @bool inWeakProcedure
  ?registerAccess:let @accessKind inRegisterAccessKind
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#--- Check modes
  @stringset procedureModeSet = {}
  for mode in inRoutineModeList do
    [inContext.mModeMap searchKey !mode.mValue]
    procedureModeSet += !mode.mValue.string
  end
#--- Variable map
  @lstring routineNameForInvocationGraph
  switch inRoutineKind
  case function : routineNameForInvocationGraph = procNameForInvocationGraph (!inSelfType !inRoutineName)
  case section : routineNameForInvocationGraph = sectionNameForInvocationGraph (!inSelfType !inRoutineName)
  case service : routineNameForInvocationGraph = serviceNameForInvocationGraph (!inSelfType !inRoutineName)
  case primitive : routineNameForInvocationGraph = primitiveNameForInvocationGraph (!inSelfType !inRoutineName)
  end
  @variableMap variableMap = initialVariableMap (
    !routineNameForInvocation:routineNameForInvocationGraph.string
    !context:inContext
    !userMode:[procedureModeSet hasKey !userModeName ()]
    !registerAccess:inRegisterAccessKind
    !globalsAreConstant:false
    !returnTypeName:inReturnTypeName
  )
#--- Analyse formal arguments
  @procFormalArgumentListForGeneration formalArguments = {}
  enterFormalArguments (
    !context:inContext
    !inRoutineFormalArgumentList
    !?variableMap
    !?formalArguments
  )
#--- Enter subprogram invocation graph
  if not [ioTemporaries.mSubprogramInvocationGraph isNodeDefined !routineNameForInvocationGraph.string] then
    [!?ioTemporaries.mSubprogramInvocationGraph addNode
      !routineNameForInvocationGraph
      !inRoutineName
    ]
  end
#--- Analyze instruction list
  @allocaList allocaList = {}
  @instructionListIR instructionGenerationList = {}
  [inRoutineInstructionList analyzeRoutineInstructionList
    !self:inSelfType
    !routineNameForInvocationGraph:routineNameForInvocationGraph
    !context:inContext
    !modes:procedureModeSet
    !allowPanic:not [procedureModeSet hasKey !panicModeName ()]
    !?temporary:ioTemporaries
    !?staticStringMap:ioIntermediateCodeStruct.mStaticStringMap
    !?variableMap:variableMap
    !?alloca:allocaList
    !?generatedCode:instructionGenerationList
  ]
#---
  [variableMap checkAutomatonStates !inEndOfRoutineDeclaration]
#--- Code generation
  let returnType = if inReturnTypeName.string == "" then
    @unifiedTypeMap-proxy.null
  else
    @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !inReturnTypeName}
  end
  let routineMangledName = if inSelfType == .null then
    @lstring.new {!"." + inRoutineName !inRoutineName.location}
  else
    @lstring.new {!"$" + [inSelfType key] + "." + inRoutineName !inRoutineName.location}
  end
  if [ioIntermediateCodeStruct.mRoutineMapIR hasKey !routineMangledName.string] then
    let weak = [ioIntermediateCodeStruct.mRoutineMapIR mWeakForKey !routineMangledName.string]
    if inWeakProcedure && not weak then
      # redefined weak procedure is ignored
    elsif inWeakProcedure && weak then
      error routineMangledName : "this weak procedure overrides a weak procedure"
    elsif (not inWeakProcedure) && weak then
      [!?ioIntermediateCodeStruct.mRoutineMapIR removeKey !routineMangledName ?10*] # Remove weak routine
      [!?ioIntermediateCodeStruct.mRoutineMapIR insertKey
        !routineMangledName
        !formalArguments
        !allocaList
        !instructionGenerationList
        ![ioIntermediateCodeStruct.mRequiredProcedureSet hasKey !routineMangledName.string]
        !inWarnIfUnused
        !inWeakProcedure
        !inGlobalProcedure
        !inRoutineKind
        !returnType
        !false
      ]  
    else # (not weakProcedure) && (not weak)
      [!?ioIntermediateCodeStruct.mRoutineMapIR insertKey # Raises a redefinition error
        !routineMangledName
        !formalArguments
        !allocaList
        !instructionGenerationList
        ![ioIntermediateCodeStruct.mRequiredProcedureSet hasKey !routineMangledName.string]
        !inWarnIfUnused
        !inWeakProcedure
        !inGlobalProcedure
        !inRoutineKind
        !returnType
        !false
      ]
    end
  else
    [!?ioIntermediateCodeStruct.mRoutineMapIR insertKey
      !routineMangledName
      !formalArguments
      !allocaList
      !instructionGenerationList
      ![ioIntermediateCodeStruct.mRequiredProcedureSet hasKey !routineMangledName.string]
      !inWarnIfUnused
      !inWeakProcedure
      !inGlobalProcedure
      !inRoutineKind
      !returnType
      !false
    ]  
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @allocaList {
  @string mVarName
  @unifiedTypeMap-proxy mType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @routineMapIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?!@string ioAssemblerCode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  for procedure in self do
    [procedure llvmCodeGeneration !?ioLLVMcode !?ioAssemblerCode !inGenerationContext !?ioGenerationAdds]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @routineMapIR-element llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?!@string unused ioAssemblerCode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  @string routineName
  switch mKind
  case function : routineName = llvmNameForFunction (!lkey.string)
  case section : routineName = llvmNameForSectionImplementation (!lkey.string)
  case service : routineName = llvmNameForServiceImplementation (!lkey.string)
  case primitive : routineName = llvmNameForPrimitiveImplementation (!lkey.string)
  end
  ioLLVMcode += llvmTitleComment (!routineName)
  ioLLVMcode += "define"
  if not mGlobal then
    ioLLVMcode += " internal"
  end
  if mReturnType == .null then
    ioLLVMcode += " void"
  else
    ioLLVMcode += " " + [mReturnType llvmTypeName]
  end
  ioLLVMcode += " @" + routineName + " ("
  let receiverTypeName = [lkey.string stringByDeletingPathExtension]
  var first = true
  if receiverTypeName != "" then
    ioLLVMcode += "%" + receiverTypeName + "* %self"
    first = false
  end
  for () in mFormalArgumentListForGeneration do
    if first then
      first = false
    else
      ioLLVMcode += ", "
    end
    switch mFormalArgumentKind
    case input :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + " %in." + mFormalArgumentName
    case output :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + "* %" + mFormalArgumentName
   case inputOutput :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + "* %" + mFormalArgumentName
    end
  end
  if not [option plm_options.noPanicGeneration value] && mAppendFileAndLineArgumentForPanicLocation then
    if not first then
      ioLLVMcode += ", "
    end
    ioLLVMcode += inGenerationContext.mPanicLineLLVMType + " %LINE, i8* %FILE"
  end
  ioLLVMcode += ")" + llvmAttributeFunction () + "{\n"
#--- Add result variable ?
  if mReturnType != .null then
    ioLLVMcode += "  %" + llvmNameForLocalVariable (!functionResultVariableName ()) + " = alloca " + [mReturnType llvmTypeName] + "\n"
  end
  for (variable type) in mAllocaList do
    ioLLVMcode += "  %" + llvmNameForLocalVariable (!variable) + " = alloca " + [type llvmTypeName] + "\n"
  end
#--- Store input arguments in memory
  for () in mFormalArgumentListForGeneration do
    switch mFormalArgumentKind
    case input :
      let llvmType = [mFormalArgumentType llvmTypeName]
      ioLLVMcode += "  %" + llvmNameForLocalVariable (!mFormalArgumentName) + " = alloca " + llvmType + "\n"
    case output, inputOutput :
    end
  end
  for () in mFormalArgumentListForGeneration do
    switch mFormalArgumentKind
    case input :
      let llvmType = [mFormalArgumentType llvmTypeName]
      ioLLVMcode += "  store " + llvmType + " %in." + mFormalArgumentName + ", " + llvmType + "* %" + llvmNameForLocalVariable (!mFormalArgumentName) + "\n"
    case output, inputOutput :
    end
  end
#--- Instruction list
  [mInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
#--- Epilog
  if mReturnType == .null then
    ioLLVMcode += "  ret void\n"
  else
    let resultVarLLVMName = "%" + llvmNameForLocalVariable (!functionResultVariableName ())
    ioLLVMcode += "  %result = load " + [mReturnType llvmTypeName] + ", " + [mReturnType llvmTypeName] + "* " + resultVarLLVMName + "\n"
    ioLLVMcode += "  ret " + [mReturnType llvmTypeName] + " %result\n"
  end
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
