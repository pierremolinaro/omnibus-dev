#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @routineFormalArgumentListIR {
  @procFormalArgumentPassingMode mFormalArgumentKind
  @PLMType mFormalArgumentType
  @string mFormalArgumentName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc enterFormalArguments
  ?context:let @semanticContext inContext
  ?let @routineFormalArgumentListAST inFormalArgumentPassingMode
  ?!@universalValuedObjectMap ioUniversalMap
  ?!@routineFormalArgumentListIR ioFormalArguments
{
  for (argumentKind selector formalArgumentTypeName formalArgumentName) in inFormalArgumentPassingMode do
    let typeProxy = [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !formalArgumentTypeName} type]
    ioFormalArguments += !argumentKind !typeProxy !formalArgumentName.string
    switch argumentKind
    case input :
      [!?ioUniversalMap insertLocalConstant !formalArgumentName !true !typeProxy !formalArgumentName]
    case inputOutput :
      [!?ioUniversalMap insertLocalVariable !formalArgumentName !typeProxy !formalArgumentName !.hasUnreadValue !true]
    case output :
      [!?ioUniversalMap insertLocalVariable !formalArgumentName !typeProxy !formalArgumentName !.noValue !true]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc routineSemanticAnalysis
  ?receiverType:let @PLMType inSelfType
  ?let @routineKind inRoutineKind
  ?let @mode inRoutineMode
  ?let @lstring inRoutineName
  ?let @routineFormalArgumentListAST inRoutineFormalArgumentList
  ?returnTypeName:let @lstring inReturnTypeName
  ?let @instructionListAST inRoutineInstructionList
  ?let @location inEndOfRoutineDeclaration
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?warnIfUnused:let @bool inWarnIfUnused
  ?globalFunction:let @bool inGlobalFunction
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#--- Reset index to temporaries
  ioTemporaries.mTemporaryIndex = 0
#--- Mangled routine name
  let routineMangledName = routineMangledNameFromAST (
    !if inSelfType.kind == .void then "" else inSelfType.llvmBaseTypeName end
    !inRoutineName
    !inRoutineFormalArgumentList
  )
#--- Variable map
  var universalMap = inContext.mValuedObjectMap
  [!?universalMap openOverrideForSelectBlock]
  [!?universalMap openBranch]
  if inReturnTypeName.string != "" then
    let resultVarName = @lstring.new {!functionResultVariableName () !inReturnTypeName.location}
    let resultType = [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !inReturnTypeName} type]
    [!?universalMap insertLocalVariable !resultVarName !resultType !resultVarName !.noValue !true]
  end
#--- Analyse formal arguments
  @routineFormalArgumentListIR formalArguments = {}
  enterFormalArguments (
    !context:inContext
    !inRoutineFormalArgumentList
    !?universalMap
    !?formalArguments
  )
#--- Analyze instruction list
  @allocaList allocaList = {}
  @instructionListIR instructionGenerationList = {}
  [inRoutineInstructionList analyzeRoutineInstructionList
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !context:inContext
    !mode:inRoutineMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioIntermediateCodeStruct.mStaticEntityMap
    !?variableMap:universalMap
    !?alloca:allocaList
    !?generatedCode:instructionGenerationList
  ]
#--- End of variableMap
  [universalMap checkLocalVariableFinalState !?instructionGenerationList]
  [!?universalMap closeBranch !inEndOfRoutineDeclaration]
  [!?universalMap closeOverride !inEndOfRoutineDeclaration]
#--- Code generation
  let returnType = if inReturnTypeName.string == "" then
    voidType ()
  else
    [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !inReturnTypeName} type]
  end
  ioIntermediateCodeStruct.mRoutineListIR += !@regularRoutineIR.new {
    !routineMangledName
    ![ioIntermediateCodeStruct.mRequiredProcedureSet hasKey !routineMangledName.string]
    !inWarnIfUnused
    !inSelfType
    !formalArguments
    !allocaList
    !instructionGenerationList
    !inGlobalFunction
    !inRoutineKind
    !returnType
    !false
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @allocaList {
  @string mVarLLVMName
  @PLMType mLLVMType
  @bool mFormalInputArgument
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @routineListIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?!@string ioAssemblerCode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  for procedure in self do
    ioGenerationAdds.mUniqueIndex = 0
    [procedure.mRoutine llvmCodeGeneration !?ioLLVMcode !?ioAssemblerCode !inGenerationContext !?ioGenerationAdds]
  end
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @allocaList generateAllocaList ?!@string ioLLVMcode {
  for (variable type *) in self do
    ioLLVMcode += "  " + variable + " = alloca " + [type llvmTypeName] + "\n"
  end
#--- Init ARC variables
  for (variable type formalInputArgument) in self do
    if [type.kind isDynamicArrayType] && not formalInputArgument then
      ioLLVMcode += ";--- init dynamic array type '" + variable + "'\n"
      ioLLVMcode += "  store " + [type llvmTypeName] + " null, " + [type llvmTypeName] + "* " + variable + " ; init ARC value\n"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
