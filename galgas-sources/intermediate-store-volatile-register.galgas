
setter @instructionListIR appendStoreVolatileRegister
  ?let @string inRegisterName
  ?let @unifiedTypeMap-proxy inTargetVarType
  ?let @bigint inAddress
  ?let @operandIR inSourceValue
{
  self += !@storeVolatileIR.new {!inRegisterName !inTargetVarType !inAddress !inSourceValue}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @storeVolatileIR : @abstractInstructionIR {
  @string mRegisterName
  @unifiedTypeMap-proxy mTargetVarType
  @bigint mAddress
  @operandIR mSourceValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @storeVolatileIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let llvmType = [mTargetVarType llvmTypeName]
  ioLLVMcode += "  store volatile " + llvmType + " " + mSourceValue.mValue + ", " + llvmType
         + "* inttoptr (i32 " + mAddress + " to " + llvmType + "*) ; " + [mAddress hexString] + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @storeVolatileIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  ioAccessibleEntities.mAccessibleRegisterSet += !mRegisterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
