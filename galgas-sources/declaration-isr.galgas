#—————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @isrDeclarationAST : @abstractDeclarationAST {
  public var @lstring mISRName
  public var @mode mMode
  public var @lstring mDriverName
  public var @instructionListAST mISRInstructionList
  public var @location mEndOfISRDeclaration
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <isr_in_driver> ?!@ast ioAST ?let @lstring inDriverName {
    $interrupt$
    let @mode mode
    select
      $service$
      mode = .serviceMode
    or
      $section$
      mode = .sectionMode
    end 
    $identifier$ ?let isrName
    ${$
    <instructionList> !?ioAST ?let instructionList
    $}$
    ioAST.mDeclarationListAST += !@isrDeclarationAST.init {
      !isrName
      !mode
      !inDriverName
      !instructionList
      !.here
    }
  }

  #·····················································································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES IN PRECEDENCE GRAPH                                                                                       
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @isrDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  let receiverTypeName = omnibusTypeSpecificNameForDriver (!self.mDriverName)
  let s = receiverTypeName.string + "." + self.mISRName.string + "()"
  [!?ioGraph addNode !.init {!s !self.mISRName.location} !self]
#---
  [self.mISRInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  if receiverTypeName.string != "" then
    [!?ioGraph noteNode !receiverTypeName]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override getter @isrDeclarationAST keyRepresentationForErrorSignaling -> @string {
  let receiverTypeName = omnibusTypeSpecificNameForDriver (!self.mDriverName)
  result = "function " + receiverTypeName + "." + self.mISRName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override getter @isrDeclarationAST locationForErrorSignaling -> @location {
  result = self.mISRName.location
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @isrDeclarationAST enterInContext
  ?!context:@semanticContext unused ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
  ?!@routineListIR unused ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
#---------------- Add decorated declaration (BEFORE adding isr routine in ioDecoratedDeclarationList
  ioDecoratedDeclarationList += !@decoratedISRDeclaration.init {!self.mISRName !self.mMode !self.mDriverName}
#----------------
  let driverLLVMBaseTypeName = llvmDriverNameFromName (!self.mDriverName)
  let isrRoutineMangledName = routineMangledNameFromAST (!driverLLVMBaseTypeName !self.mISRName !§[])
  ioDecoratedRoutineList +=
    !receiverTypeName: omnibusTypeSpecificNameForDriver (!self.mDriverName)
    !mode: self.mMode
    !isRequired:true
    !routineKind: .function
    !warnIfUnused: true
    !exportedRoutine: false
    !routineAttributes:.mutatingRoutine
    !routineMangledLLVMName: isrRoutineMangledName
    !formalArgumentList: §[]
    !warningOnUnusedArgs: true
    ! self.mISRInstructionList
    ! self.mEndOfISRDeclaration
    !returnTypeName: ["" nowhere]  # Empty string if no returned value
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @decoratedISRDeclaration : @abstractDecoratedDeclaration {
  public var @lstring mISRName
  public var @mode mMode
  public var @lstring mDriverName
}

#·······················································································································

override method @decoratedISRDeclaration semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#--- Self type
  [inContext.mTypeMap searchType !lkey:omnibusTypeSpecificNameForDriver (!self.mDriverName) ?type:let selfType]
#--- Code generation
  [inContext.mAvailableInterruptMap searchKey !self.mISRName ?*]
  [!?ioIntermediateCodeStruct.mInterruptMapIR insertKey
    !self.mISRName
    !selfType
    !self.mDriverName
    !self.mMode
  ]  
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#—————————————————————————————————————————————————————————————————————————————————————————————————

map @interruptMapIR {
  public var @omnibusType mSelfType
  public var @string mDriverName 
  public var @mode mMode

  insert insertKey error message "interrupt '%K' is already defined"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

method @interruptMapIR interruptCodeGeneration
  ?!@string ioLLVMcode
  ?!@string ioAScode
  ?let @string inUndefinedInterruptString
  ?let @string inXTRInterruptHandlerString
  ?let @generationContext inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
#--- Generate interrupt routines
  var @stringset definedInterrupts = §[]
  for interrupt in self do
    definedInterrupts += !interrupt.lkey.string
    let interruptImplementationName = if interrupt.mMode == .serviceMode then
      llvmNameForServiceInterrupt (!interrupt.lkey).string
    else
      llvmNameForSectionInterrupt (!interrupt.lkey.string)
    end
    ioLLVMcode += llvmTitleComment (!interruptImplementationName)
    ioLLVMcode += "define void @" + interruptImplementationName + " ()" + llvmAttributeFunction () + " {\n"
  #--- Define self
    let varName = llvmNameForGlobalVariable (!interrupt.mDriverName)
    let llvmTypeName = [interrupt.mSelfType llvmTypeName]
  #--- Call Omnibus function
    let driverLLVMBaseTypeName = interrupt.mSelfType.llvmBaseTypeName
    let isrRoutineMangledName = routineMangledNameFromAST (!driverLLVMBaseTypeName !interrupt.lkey !§[])
    let isrRoutineLLVMName = llvmNameForFunction (!isrRoutineMangledName)
    ioLLVMcode += "  call void @" + isrRoutineLLVMName + " (" + llvmTypeName + "* " + varName + ")\n"
  #--- Epilog
    ioLLVMcode += "  ret void\n"
    ioLLVMcode += "}\n\n"
  #---- Generate interrupt handler for XTR
    if interrupt.mMode == .serviceMode then
     let interruptHandlerName = llvmNameForServiceInterrupt (!interrupt.lkey).string
     let isrName = llvmNameForSectionInterrupt (!interrupt.lkey.string)
     let s1 = [inXTRInterruptHandlerString stringByReplacingStringByString !"!ISR!" !isrName]
     let s2 = [s1 stringByReplacingStringByString !"!HANDLER!" !interruptHandlerName]
     ioAScode += s2
    end
  end
#--- Generate stubs for undefined interrupt entries
  for (lkey panicCode) in inGenerationContext.mAvailableInterruptMap do
    if not [definedInterrupts hasKey !lkey.string] then
      switch panicCode
      case noCode :
        let s = [inUndefinedInterruptString stringByReplacingStringByString !"!ISR!" !llvmNameForSectionInterrupt (!lkey.string)]
        ioAScode += s
      case code (@lbigint value) :
        if [option omnibus_options.noPanicGeneration value] then
          let s = [inUndefinedInterruptString stringByReplacingStringByString !"!ISR!" !llvmNameForSectionInterrupt (!lkey.string)]
          ioAScode += s
        else
          let name = llvmNameForSectionInterrupt (!lkey.string)
          ioLLVMcode += llvmTitleComment (!"Panic code for " + name)
          ioLLVMcode += "define void @" + name + " ()" + llvmAttributeFunction () + " noreturn {\n"
          ioLLVMcode += "  call void @panic.isr (" + [inGenerationContext.mPanicCodeLLVMType llvmTypeName] + " " + value.bigint + ") noreturn \n"
          ioLLVMcode += "  unreachable\n"
          ioLLVMcode += "}\n\n"
        end
      end
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

