#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @isrDeclarationListAST {
  @lstring mISRName
  @mode mMode
  @lstring mDriverName
  @instructionListAST mISRInstructionList
  @location mEndOfISRDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <isr> ?!@ast ioAST ?let @lstring inDriverName {
    $interrupt$
    @mode mode
    select
      $service$
      mode = .serviceMode
    or
      $section$
      mode = .sectionMode
    end 
    $identifier$ ?let isrName
    ${$
    <instructionList> !?ioAST ?let instructionList
    $}$
    ioAST.mISRDeclarationListAST +=
      !isrName
      !mode
      !inDriverName
      !instructionList
      !.here
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @isrDeclarationListAST enterInContext
  ?!@semanticContext unused ioSemanticContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
{
#---------------- Add decorated declaration (BEFORE adding isr routine in ioDecoratedDeclarationList
  ioDecoratedDeclarationList += !@decoratedISRDeclarations.new {!self}
#---
  for isr in self do
    let driverLLVMBaseTypeName = llvmDriverNameFromName (!isr.mDriverName)
    let isrRoutineMangledName = routineMangledNameFromAST (!driverLLVMBaseTypeName !isr.mISRName !{})
    ioDecoratedRoutineList +=
      !receiverTypeName: typeNameForTypeMapForDriver (!isr.mDriverName)
      !mode:isr.mMode
      !safe: false
      !isRequired:true
      !.function # {!executionMode: isr.mMode}
      !warnIfUnused: true
      !exportedRoutine: false
      !.mutating | .directPropertyAccess | .controlRegisterReadable
      !isrRoutineMangledName
      !{}
      !true # warningOnUnusedArgs
      !isr.mISRInstructionList
      !isr.mEndOfISRDeclaration
      !returnTypeName: ["" nowhere]  # Empty string if no returned value
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @decoratedISRDeclarations : @abstractDecoratedDeclaration {
  @isrDeclarationListAST mISRDeclarationList
}

#·······················································································································

override method @decoratedISRDeclarations semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  for isr in mISRDeclarationList do
  #--- Self type
    [inContext.mTypeMap searchKey !lkey:typeNameForTypeMapForDriver (!isr.mDriverName) ?type:let selfType ?2*]
  #--- Code generation
    [inContext.mAvailableInterruptMap searchKey !isr.mISRName ?*]
    [!?ioIntermediateCodeStruct.mInterruptMapIR insertKey
      !isr.mISRName
      !selfType
      !isr.mDriverName
      !isr.mMode
    ]  
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @interruptMapIR {
  @PLMType mSelfType
  @string mDriverName 
  @mode mMode

  insert insertKey error message "interrupt '%K' is already defined"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @interruptMapIR interruptCodeGeneration
  ?!@string ioLLVMcode
  ?!@string ioAScode
  ?let @string inUndefinedInterruptString
  ?let @string inXTRInterruptHandlerString
  ?let @generationContext inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
#--- Generate interrupt routines
  @stringset definedInterrupts = {}
  for interrupt in self do
    definedInterrupts += !interrupt.lkey.string
    let interruptImplementationName = if interrupt.mMode == .serviceMode then
      llvmNameForServiceInterrupt (!interrupt.lkey).string
    else
      llvmNameForSectionInterrupt (!interrupt.lkey.string)
    end
    ioLLVMcode += llvmTitleComment (!interruptImplementationName)
    ioLLVMcode += "define void @" + interruptImplementationName + " ()" + llvmAttributeFunction () + " {\n"
  #--- Define self
    let varName = llvmNameForGlobalVariable (!interrupt.mDriverName)
    let llvmTypeName = [interrupt.mSelfType llvmTypeName]
  #--- Call PLM function
    let driverLLVMBaseTypeName = interrupt.mSelfType.llvmBaseTypeName
    let isrRoutineMangledName = routineMangledNameFromAST (!driverLLVMBaseTypeName !interrupt.lkey !{})
    let isrRoutineLLVMName = llvmNameForFunction (!isrRoutineMangledName)
    ioLLVMcode += "  call void @" + isrRoutineLLVMName + " (" + llvmTypeName + "* " + varName + ")\n"
  #--- Epilog
    ioLLVMcode += "  ret void\n"
    ioLLVMcode += "}\n\n"
  #---- Generate interrupt handler for XTR
    if interrupt.mMode == .serviceMode then
     let interruptHandlerName = llvmNameForServiceInterrupt (!interrupt.lkey).string
     let isrName = llvmNameForSectionInterrupt (!interrupt.lkey.string)
     let s1 = [inXTRInterruptHandlerString stringByReplacingStringByString !"!ISR!" !isrName]
     let s2 = [s1 stringByReplacingStringByString !"!HANDLER!" !interruptHandlerName]
     ioAScode += s2
    end
  end
#--- Generate stubs for undefined interrupt entries
  for (lkey panicCode) in inGenerationContext.mAvailableInterruptMap do
    if not [definedInterrupts hasKey !lkey.string] then
      switch panicCode
      case noCode :
        let s = [inUndefinedInterruptString stringByReplacingStringByString !"!ISR!" !llvmNameForSectionInterrupt (!lkey.string)]
        ioAScode += s
      case code (@lbigint value) :
        if [option plm_options.noPanicGeneration value] then
          let s = [inUndefinedInterruptString stringByReplacingStringByString !"!ISR!" !llvmNameForSectionInterrupt (!lkey.string)]
          ioAScode += s
        else
          let name = llvmNameForSectionInterrupt (!lkey.string)
          ioLLVMcode += llvmTitleComment (!"Panic code for " + name)
          ioLLVMcode += "define void @" + name + " ()" + llvmAttributeFunction () + " noreturn {\n"
          ioLLVMcode += "  call void @panic.isr (" + [inGenerationContext.mPanicCodeLLVMType llvmTypeName] + " " + value.bigint + ") noreturn \n"
          ioLLVMcode += "  unreachable\n"
          ioLLVMcode += "}\n\n"
        end
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

