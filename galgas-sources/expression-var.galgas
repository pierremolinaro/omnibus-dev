#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @varInExpressionElementAccess {
  case fieldAccess (@lstring fieldName)
  case arrayAccess (@expressionAST indexExpression @location endOfExp)
}

#·······················································································································

list @varInExpressionElementAccessList {
  @varInExpressionElementAccess mAccess
}

#·······················································································································

class @varInExpressionAST : @expressionAST {
  @lstring mSourceVarName
  @varInExpressionElementAccessList mAccessList
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································
  
  rule <primary> !@expressionAST outExpression {
    $identifier$ ?let sourceVarName
    @varInExpressionElementAccessList arrayElementAccessList = {}
    repeat
    while
      $.$
      $identifier$ ?let fieldName
      arrayElementAccessList += !.fieldAccess {!fieldName:fieldName}
    while
      $[$
      <expression> ?let indexExpression
      let @location endOfExp = .here
      $]$
      arrayElementAccessList += !.arrayAccess {!indexExpression:indexExpression !endOfExp:endOfExp}
    end
    outExpression = @varInExpressionAST.new {!sourceVarName !arrayElementAccessList}
  }

  #·····················································································································

}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addEdge !inConstantName !mSourceVarName]
  for (access) in mAccessList do
    switch access
    case fieldAccess (*) :
    case arrayAccess (@expressionAST indexExpression *) :
      [indexExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varInExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for (access) in mAccessList do
    switch access
    case fieldAccess (*) :
    case arrayAccess (@expressionAST indexExpression *) :
      [indexExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    end
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varInExpressionAST analyzeExpression
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!namedObjectMap:@namedObjectMap ioNamedObjectMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- Search variable, constant, register
  [!?ioVariableMap searchForReadAccess
    !lkey:mSourceVarName
    ?type:@unifiedTypeMap-proxy type
    ?readAccessAllowed:let accessIsAllowed
    ?variableKind:let @objectInMemoryIR variableKind
    ?copyable:let copyable
    ?canBeUsedAsInputParameter:*
  ]
  if not copyable then
    error mSourceVarName : "an $" + [type key] + " instance is not copyable"
  end
  if not accessIsAllowed then
    error mSourceVarName : "routine has no access right on this variable"
  end
  if inGuard then
    switch variableKind
    case registerAddress (**) : error mSourceVarName : "a control register cannot be read in guard boolean expression"
    case register (********) : error mSourceVarName : "a control register cannot be read in guard boolean expression"
    case globalVariable (***) : error mSourceVarName : "a global variable cannot be read in guard boolean expression"
    case localVariable (***) :
    case staticConstant (**) :
    case property (* * *) :
    end
  end
#--- Register, or other kind of variable
  if [variableKind isRegister] then
    [self analyzeExpression_register
      !self: inSelfType
      !directAccessToPropertiesAllowed: inDirectAccessToPropertiesAllowed
      !inGuard: inGuard
      !routineNameForInvocationGraph: inCallerNameForInvocationGraph
      !optionalTargetType: inOptionalTargetType
      !context: inContext
      !modes: inModeSet
      !allowPanic: inAllowPanic
      !?temporary: ioTemporaries
      !?staticStringMap: ioGlobalLiteralStringMap
      !?variableMap: ioVariableMap
      !?namedObjectMap: ioNamedObjectMap
      !?alloca: ioAllocaList
      !?instructionListIR: ioInstructionGenerationList
      !variableKind:variableKind
      !error:mSourceVarName.location
      !?type
      ?result: outResult
    ]
  else
    [self analyzeExpression_otherKind
      !self: inSelfType
      !directAccessToPropertiesAllowed: inDirectAccessToPropertiesAllowed
      !inGuard: inGuard
      !routineNameForInvocationGraph: inCallerNameForInvocationGraph
      !optionalTargetType: inOptionalTargetType
      !context: inContext
      !modes: inModeSet
      !allowPanic: inAllowPanic
      !?temporary: ioTemporaries
      !?staticStringMap: ioGlobalLiteralStringMap
      !?variableMap: ioVariableMap
      !?namedObjectMap: ioNamedObjectMap
      !?alloca: ioAllocaList
      !?instructionListIR: ioInstructionGenerationList
      !variableKind:variableKind
      !?type
      ?result: outResult
    ]
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @varInExpressionAST analyzeExpression_register
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!namedObjectMap:@namedObjectMap ioNamedObjectMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  ?variableKind:let @objectInMemoryIR inVariableKind
  ?error:let @location inErrorLocation
  ?!@unifiedTypeMap-proxy ioType
  !result:@objectIR outResult
{
#--- Solve inferred type
  var expressionType = solveInferredType (
    !targetType:inOptionalTargetType
    !sourceType:ioType
    !errorLocation:mSourceVarName.location
  )
#--- Control register features
  [inVariableKind register
    ?type:let registerType
    ?plmName:let registerName
    ?readable:let readable
    ?writable:let writable
    ?address:let @bigint registerAddress
    ?sliceMap:@sliceMap registerBitSliceMap
    ?arraySize:let @uint arraySize # 0 if not an array
    ?elementSize:let @uint elementArraySize # 0 if not an array
  ]
#--- First element in access list is a subscript ?
  var accessList = mAccessList
  if ([accessList length] > 0) && [[accessList mAccessAtIndex!0] isArrayAccess] then
    [!?accessList popFirst ?let firstAccess]
    [firstAccess arrayAccess ?indexExpression:let indexExpression ?endOfExp:let endOfExp]
    if arraySize == 0 then
      error endOfExp : "control register is not an array and is not subscriptable" : outResult
    else
      [indexExpression analyzeExpression
        !self:inSelfType
        !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
        !inGuard:inGuard
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !optionalTargetType:.null
        !context:inContext
        !modes:inModeSet
        !allowPanic:inAllowPanic
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?namedObjectMap: ioNamedObjectMap
        !?alloca:ioAllocaList
        !?instructionListIR:ioInstructionGenerationList
        ?result:let @objectIR indexResult
      ]
      if [indexResult isLiteralInteger] then # Static expression
        [indexResult literalInteger ?1* ?value:let @bigint indexValue]
        if (indexValue < 0G) || (indexValue >= arraySize) then
          error endOfExp : "static index should be positive and < " + arraySize : outResult
        else
          let address = registerAddress + indexValue * elementArraySize
          [!?ioInstructionGenerationList appendLoadFromMemory
            !?ioTemporaries
            !.here
            !.register {
              !type:registerType
              !plmName:registerName
              !readable:readable
              !writable:writable
              !address:address
              !sliceMap:registerBitSliceMap
              !arraySize:0
              !elementSize:0
            }
            ?outResult
          ]
        end
      elsif [[indexResult kind] isInteger] then
        if not [option plm_options.noPanicGeneration value] then
          [!?ioInstructionGenerationList testArrayIndex !indexResult !endOfExp !arraySize ?let generatePanicInstruction]
          if generatePanicInstruction && not inAllowPanic then
            error endOfExp : "index computation can generated panic"
          end
        end
        getNewTempVariable (!registerType !?ioTemporaries ?outResult)
        [!?ioInstructionGenerationList appendLoadVolatileRegisterWithSubscript
          !outResult
          !indexResult
          !registerAddress
          !elementArraySize
        ]
      else
        error endOfExp : "index expression is not an integer" : outResult
      end
    end
  else # First element is not a subscript
    if arraySize > 0 then
      error inErrorLocation : "control register is an array and requires subscript" : outResult
    else
      [!?ioInstructionGenerationList appendLoadFromMemory !?ioTemporaries !.here !inVariableKind ?outResult]
    end
  end
#--- Analyze field accesses (subscripting is not allowed)
  for (access) in accessList do
    switch access
    case fieldAccess (@lstring fieldName) :
      [registerBitSliceMap searchKey
        !fieldName
        ?let @llvmBinaryOperation accessOperator
        ?let @bigint accessRightOperand
        ?let submap
        ?let newResultType
       ]
    #--- Temp var
      getNewTempVariable (!newResultType !?ioTemporaries ?let newResultingVariable)
      [!?ioInstructionGenerationList appendBinaryOperation
        !newResultingVariable
        ![outResult type]
        !mSourceVarName.location
        !outResult
        !accessOperator
        !.literalInteger {!type: inContext.mLiteralIntegerType !value:accessRightOperand}
      ]
      outResult = newResultingVariable 
      registerBitSliceMap = submap
    case arrayAccess (* @location endOfExp) :
      error endOfExp : "control register is not subscriptable"
    end
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @varInExpressionAST analyzeExpression_otherKind
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!namedObjectMap:@namedObjectMap ioNamedObjectMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  ?variableKind:let @objectInMemoryIR inVariableKind
  ?!@unifiedTypeMap-proxy ioType
  !result:@objectIR outResult
{
#--- Array element access ?
  @elementPtrList elementPtrList = {}
  analyzeVarInExpressionElementAccess (
    !mAccessList
    !?ioType
    !?elementPtrList
    !mSourceVarName.location
    !self:inSelfType
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !inGuard:inGuard
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?namedObjectMap: ioNamedObjectMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
  )
#--- Load variable
  if [elementPtrList length] == 0 then
    [!?ioInstructionGenerationList appendLoadFromMemory !?ioTemporaries !.here !inVariableKind ?outResult]
  else
    getLocalNameOfNewTempObjectInMemory (!ioType !?ioTemporaries ?let sourcePtr)
    [!?ioInstructionGenerationList appendGetElementPtr
      !sourcePtr
      !inVariableKind
      !elementPtrList
    ]        
    [!?ioInstructionGenerationList appendLoadFromMemory !?ioTemporaries !.here !sourcePtr ?outResult]
  end
#--- Solve inferred type
  var expressionType = solveInferredType (
    !targetType:inOptionalTargetType
    !sourceType:ioType
    !errorLocation:mSourceVarName.location
  )
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeVarInExpressionElementAccess
  ?let @varInExpressionElementAccessList inAccessList
  ?!@unifiedTypeMap-proxy ioType
  ?!@elementPtrList ioElementPtrList
  ?let @location inErrorLocation
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool inGuard
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!namedObjectMap:@namedObjectMap ioNamedObjectMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  for (access) in inAccessList do
    switch access
    case fieldAccess (@lstring unused fieldName) :
    case arrayAccess (indexExpression endOfExp) :
      @bigint arraySize
      if [[ioType kind] isArrayType] then
        [[ioType kind] arrayType ?elementType:ioType ?size:arraySize]
      else
        error inErrorLocation : "this variable should be an array" : arraySize
      end
      [indexExpression analyzeExpression
        !self:inSelfType
        !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
        !inGuard:inGuard
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !optionalTargetType:.null
        !context:inContext
        !modes:inModeSet
        !allowPanic:inAllowPanic
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?namedObjectMap: ioNamedObjectMap
        !?alloca:ioAllocaList
        !?instructionListIR:ioInstructionGenerationList
        ?result:let @objectIR indexResult
      ]
      if [indexResult isLiteralInteger] then
        [indexResult literalInteger ?1* ?value:let @bigint indexValue]
        if (indexValue < 0G) || (indexValue >= arraySize) then
          error endOfExp : "static index should be positive and < " + arraySize : ioElementPtrList
        else
          ioElementPtrList += {!.absolute {!index:[indexValue uint]} !"[" + indexValue + "]"}
        end
      elsif [[indexResult kind] isInteger] then
        if not [option plm_options.noPanicGeneration value] then
          [!?ioInstructionGenerationList testArrayIndex !indexResult !endOfExp !arraySize ?let generatePanicInstruction]
          if generatePanicInstruction && not inAllowPanic then
            error endOfExp : "index computation can generated panic" : ioElementPtrList
          end
        end
        let name = [indexResult name]
        ioElementPtrList += {!.indirect {!index:indexResult} !"[" + name + "]"}
      else
        error endOfExp : "index expression is not an integer" : ioElementPtrList
      end
    end
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
