#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @varInExpressionAST : @expressionAST {
  @lstring mSourceVarName
  @lstringlist mFieldNameList
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  rule <primary> !@expressionAST outExpression {
    $identifier$ ?let sourceVarName
    @lstringlist fieldNameList = {}
    repeat
    while
      $.$
      $identifier$ ?let fieldName
      fieldNameList += !fieldName
    end 
    outExpression = @varInExpressionAST.new {!sourceVarName !fieldNameList}
  }

}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @varInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addEdge !inConstantName !mSourceVarName]
}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @varInExpressionAST analyzeExpression
  ?optionalReceiverType:let @receiverType unused inReceiverType
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext unused inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool unused inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !expressionType:@unifiedTypeMap-proxy outExpressionType
  !result:@variableKindIR outResultValueName
{
#--- Search variable
  [!?ioVariableMap searchForReadAccess
    !mSourceVarName
    ?let variableType
    ?let varModeSet
    ?let unused varAccess
    ?@variableKindIR resultingVariable
    ?*
    ?@registerBitSliceAccessMap registerBitSliceMap
  ]
#--- Check mode
  checkMode (
    !requiredModes:inModeSet
    !possibleModes:varModeSet
    !error:mSourceVarName.location
  )
#--- Solve inferred type
  outExpressionType = solveInferredType (
    !targetType:inOptionalTargetType
    !sourceType:variableType
    !errorLocation:mSourceVarName.location
  )
#--- Field ?
  for (field) in mFieldNameList do
    [registerBitSliceMap searchKey
      !field
      ?let @infixOperatorIR accessOperator
      ?let @variableKindIR accessRightOperand
      ?let submap
      ?let newResultType
     ]
  #--- Temp var
    getNewTempVariable (!?ioTemporaries ?let newResultingVariable)
    ioInstructionGenerationList += !@operatorInfixExpressionIR.new {
      !newResultType
      !newResultingVariable
      !resultingVariable
      !accessOperator
      !accessRightOperand
      !mSourceVarName.location
    }
    resultingVariable = newResultingVariable 
    registerBitSliceMap = submap
    outExpressionType = newResultType
  end
#--- Generate code
  outResultValueName = resultingVariable
}

#----------------------------------------------------------------------------------------------------------------------*
