#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @varInExpressionAST : @expressionAST {
  @lstring mSourceVarName
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @selfVarInExpressionAST : @expressionAST {
  @lstring mSourceVarName
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @controlRegisterFieldInExpressionAST : @expressionAST {
  @lstring mRegisterVarName
  @lstringlist mSliceNameList
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································
  
  rule <primary> !@expressionAST outExpression {
    $identifier$ ?let sourceVarName
    outExpression = @varInExpressionAST.new {!sourceVarName}
  }

  #·····················································································································
  
  rule <primary> !@expressionAST outExpression {
    $identifier$ ?let controlRegisterName
    @lstringlist fieldList = {}
    repeat
      $.$
      $identifier$ ?let fieldName
      fieldList += !fieldName
    while
    end
    outExpression = @controlRegisterFieldInExpressionAST.new {!controlRegisterName !fieldList}
  }

  #·····················································································································
  
  rule <primary> !@expressionAST outExpression {
    $self$
    $.$
    $identifier$ ?let sourceVarName
    outExpression = @selfVarInExpressionAST.new {!sourceVarName}
  }

  #·····················································································································

}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addEdge !inConstantName !mSourceVarName]
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfVarInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addEdge !inConstantName !mSourceVarName]
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @controlRegisterFieldInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addEdge !inConstantName !mRegisterVarName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varInExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph unused ioGraph {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfVarInExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph unused ioGraph {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @controlRegisterFieldInExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph unused ioGraph {
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varInExpressionAST analyzeExpression
  ?self:let @unifiedTypeMap-proxy unused inSelfType
  ?routineNameForInvocationGraph:let @lstring unused inRoutineNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext unused inContext
  ?modes:let @stringset unused inModeSet
  ?allowException:let @bool unused inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@operandIR outResult
{
#--- Search variable, constant, register
  [!?ioVariableMap searchForReadAccess
    !mSourceVarName
    ?let @unifiedTypeMap-proxy variableType
    ?let accessIsAllowed
    ?@objectInMemoryIR variableKind
    ?*
    ?@controlRegisterBitSliceAccessMap registerBitSliceMap
    ?2*
  ]
  if not accessIsAllowed then
    error mSourceVarName : "routine has no access right on this variable"
  end
#--- Load variable
  [variableKind loadFromMemory
    !?temporary:ioTemporaries
    !?instructionListIR:ioInstructionGenerationList
    ?resultingValue:outResult
  ]
#--- Solve inferred type
  var expressionType = solveInferredType (
    !targetType:inOptionalTargetType
    !sourceType:variableType
    !errorLocation:mSourceVarName.location
  )
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfVarInExpressionAST analyzeExpression
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring unused inRoutineNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy unused inOptionalTargetType
  ?context:let @semanticContext unused inContext
  ?modes:let @stringset unused inModeSet
  ?allowException:let @bool unused inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap unused ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@operandIR outResult
{
  if inSelfType == .null then
    error mSourceVarName : "'self' is not available in this context" : outResult
  else
    switch [inSelfType kind]
    case opaque (*) :
      error mSourceVarName : "an opaque type does not handle field access" : outResult
    case boolean :
      error mSourceVarName : "a boolean does not handle field access" : outResult
    case staticInteger :
      error mSourceVarName : "an integer does not handle field access" : outResult
    case boolset :
      error mSourceVarName : "a boolset does not handle field access" : outResult
    case literalString :
      error mSourceVarName : "a literal string does not handle field access" : outResult
    case enumeration (*) :
      error mSourceVarName : "an enumeration does not handle field access" : outResult
    case structure (@propertyMap propertyMap *) :
      [propertyMap searchKey !mSourceVarName ?let type ?let idx]
      getNewTempVariable (!type !?ioTemporaries ?outResult)
      [!?ioInstructionGenerationList appendExtractValue
        !target:outResult
        !source:outResult
        !index:idx
      ]
    case integer (* * * *) :
      error mSourceVarName : "an integer does not handle field access" : outResult
    end    
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @controlRegisterFieldInExpressionAST analyzeExpression
  ?self:let @unifiedTypeMap-proxy unused inSelfType
  ?routineNameForInvocationGraph:let @lstring unused inRoutineNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext unused inContext
  ?modes:let @stringset unused inModeSet
  ?allowException:let @bool unused inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@operandIR outResult
{
#--- Search variable, constant, register
  [!?ioVariableMap searchForReadAccess
    !mRegisterVarName
    ?let @unifiedTypeMap-proxy variableType
    ?let accessIsAllowed
    ?@objectInMemoryIR variableKind
    ?*
    ?@controlRegisterBitSliceAccessMap registerBitSliceMap
    ?2*
  ]
  if not accessIsAllowed then
    error mRegisterVarName : "routine has no access right on this variable"
  end
#--- Load variable
  [variableKind loadFromMemory
    !?temporary:ioTemporaries
    !?instructionListIR:ioInstructionGenerationList
    ?resultingValue:outResult
  ]
#--- Solve inferred type
  var expressionType = solveInferredType (
    !targetType:inOptionalTargetType
    !sourceType:variableType
    !errorLocation:mRegisterVarName.location
  )
#--- Field ?
  for (field) in mSliceNameList do
    [registerBitSliceMap searchKey
      !field
      ?let @llvmBinaryOperation accessOperator
      ?let @bigint accessRightOperand
      ?let submap
      ?let newResultType
     ]
  #--- Temp var
    getNewTempVariable (!newResultType !?ioTemporaries ?let newResultingVariable)
    [!?ioInstructionGenerationList appendBinaryOperation
      !newResultingVariable.mValue
      !outResult.mType
      !mRegisterVarName.location
      !outResult.mValue
      !accessOperator
      !.literalInteger {!value:accessRightOperand}
    ]
    outResult = newResultingVariable 
    registerBitSliceMap = submap
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
