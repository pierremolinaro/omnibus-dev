#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax plm_syntax (plm_lexique) {

  rule <function> ?!@functionDeclarationListAST ioProcListAST

  rule <section> ?!@svcDeclarationListAST ioSectionListAST

  rule <service> ?!@serviceDeclarationListAST ioServiceListAST

  rule <primitive> ?!@primitiveDeclarationListAST ioPrimitiveListAST

  rule <isr> ?!@isrDeclarationListAST ioISRListAST ?let @lstring inSelfTypeName ?let @string inGlobalVarName

  #·····················································································································

  rule <import_file> ?!@lstringlist ioImportedFileList {
    $import$
    $"string"$ ?let importedFile
    ioImportedFileList += !importedFile
    if [importedFile.string pathExtension] != "plm" then
      error importedFile : "the pah extension should be .plm"
    end
  }


  #·····················································································································

  rule <start_symbol>
    ?!@ast ioAst
    !importClauseList:@lstringlist outImportedFileList
    !endOfSourceFile:@location outEndOfSourceFile
  {
    outImportedFileList = {}
    repeat
    while
      <declaration> !?ioAst
    while
      <function> !?ioAst.mProcedureListAST
    while
      <section> !?ioAst.mStandAloneSVCListAST
    while
      <service> !?ioAst.mServiceListAST
    while
      <primitive> !?ioAst.mPrimitiveListAST
    while
      <isr> !?ioAst.mISRDeclarationListAST !["" nowhere] !""
    while
      <import_file> !?outImportedFileList
    end
    outEndOfSourceFile = .here
  }

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax plm_target_specific_syntax (plm_lexique) {

  rule <configuration> ?!@ast ioAST

  #·····················································································································

  rule <import_file> ?!@lstringlist ioImportedFileList {
    $import$
    $"string"$ ?let importedFile
    ioImportedFileList += !importedFile
    if [importedFile.string pathExtension] != "plm" then
      error importedFile : "the pah extension should be .plm"
    end
  }

  #·····················································································································

  rule <configuration_start_symbol>
    ?!@ast ioAst
    !importClauseList:@lstringlist outImportedFileList
    !endOfSourceFile:@location outEndOfSourceFile
  {
    <configuration> !?ioAst
    outImportedFileList = {}
    repeat
    while
      <import_file> !?outImportedFileList
    end
    outEndOfSourceFile = .here
  }

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  GRAMMARS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

grammar plm_grammar "SLR" {
  syntax plm_syntax
  <start_symbol>
    ?!@ast outAst
    !importClauseList:@lstringlist outImportedFileList
    !endOfSourceFile:@location outEndOfSourceFile
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

grammar plm_target_grammar "SLR" {
  syntax plm_target_specific_syntax
  <configuration_start_symbol>
    ?!@ast outAst
    !importClauseList:@lstringlist outImportedFileList
    !endOfSourceFile:@location outEndOfSourceFile
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
