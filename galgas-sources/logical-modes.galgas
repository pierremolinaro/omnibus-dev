#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  Logical modes                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @mode {
  case userMode
  case sectionMode
  case serviceMode
  case primitiveMode
  case guardMode
  case panicMode
  case bootMode
  case startupMode
  case anyMode
}

#·······················································································································

getter @mode string -> @string {
  switch self
  case userMode : result = "user"
  case sectionMode : result = "section"
  case serviceMode : result = "service"
  case primitiveMode : result = "primitive"
  case guardMode : result = "guard"
  case panicMode : result = "panic"
  case bootMode : result = "boot"
  case startupMode : result = "startup"
  case anyMode : result = "any"
  end
}

#·······················································································································

getter @mode routineLLVMDictionaryForFunction ?let @string inRoutineNameForGeneration -> @routineLLVMNameDict {
  result = {!self !inRoutineNameForGeneration}
  if self == .serviceMode then
    result += !.primitiveMode !inRoutineNameForGeneration
    result += !.guardMode !inRoutineNameForGeneration
  elsif self == .sectionMode then
    result += !.primitiveMode !inRoutineNameForGeneration
    result += !.serviceMode !inRoutineNameForGeneration
    result += !.guardMode !inRoutineNameForGeneration
    result += !.startupMode !inRoutineNameForGeneration
  elsif self == .guardMode then
    result += !.serviceMode !inRoutineNameForGeneration
  end
}

#·······················································································································

getter @mode routineLLVMDictionaryForSystemRoutine
  ?let @string inUserRoutineNameForGeneration
  ?let @string inImplementationRoutineNameForGeneration
  -> @routineLLVMNameDict
{
  result = {!self !inImplementationRoutineNameForGeneration}
  result += !.userMode !inUserRoutineNameForGeneration
  if self == .serviceMode then
    result += !.primitiveMode !inImplementationRoutineNameForGeneration
    result += !.guardMode !inImplementationRoutineNameForGeneration
  elsif self == .sectionMode then
    result += !.primitiveMode !inImplementationRoutineNameForGeneration
    result += !.serviceMode !inImplementationRoutineNameForGeneration
    result += !.guardMode !inImplementationRoutineNameForGeneration
    result += !.startupMode !inImplementationRoutineNameForGeneration
  elsif self == .guardMode then
    result += !.serviceMode !inImplementationRoutineNameForGeneration
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @mode controlRegisterAccess ?let @bool inIsAccessibleInUserMode -> @bool {
  switch self
  case userMode, anyMode :
    result = inIsAccessibleInUserMode
  case sectionMode, serviceMode, primitiveMode, panicMode, bootMode, startupMode :
    result = true
  case guardMode :
    result = false
  end
}
