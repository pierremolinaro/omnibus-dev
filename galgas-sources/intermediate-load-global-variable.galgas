
setter @instructionListIR appendLoadGlobalVariable
  ?let @operandIR inTargetValue
  ?let @string inRegisterName
  ?volatile:@bool inIsVolatile
{
  self += !@loadGlobalVariableIR.new {!inTargetValue !inRegisterName !inIsVolatile}
}

#----------------------------------------------------------------------------------------------------------------------*

class @loadGlobalVariableIR : @abstractInstructionIR {
  @operandIR mTargetValue
  @string mVariableName
  @bool mIsVolatile
}

#----------------------------------------------------------------------------------------------------------------------*

override method @loadGlobalVariableIR llvmInstructionCode
  ?!@string ioCode
  ?let @generationContext unused inGenerationContext
  ?!@stringset unused ioIntrinsicsDeclarationSet
{
  let llvmType = [mTargetValue.mType llvmTypeName]
  ioCode += "  " + mTargetValue.mValue + " = load "
  if mIsVolatile then
    ioCode += "volatile "
  end
  ioCode += llvmType + ", " + llvmType + "* @" + mangledNameForGlobalVariable (!mVariableName) + "\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @loadGlobalVariableIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  ioAccessibleEntities.mGlobalVariableSet += !mVariableName
}


#----------------------------------------------------------------------------------------------------------------------*
