
setter @instructionListIR appendLoadGlobalVariable
  ?let @operandIR inTargetValue
  ?let @string inRegisterName
  ?volatile:@bool inIsVolatile
{
  self += !@loadGlobalVariableIR.new {!inTargetValue !inRegisterName !inIsVolatile}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @loadGlobalVariableIR : @abstractInstructionIR {
  @operandIR mTargetValue
  @string mVariableName
  @bool mIsVolatile
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @loadGlobalVariableIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let llvmType = [mTargetValue.mType llvmTypeName]
  ioLLVMcode += "  " + [mTargetValue.mValue llvmName] + " = load "
  if mIsVolatile then
    ioLLVMcode += "volatile "
  end
  ioLLVMcode += llvmType + ", " + llvmType + " * @" + llvmNameForGlobalVariable (!mVariableName) + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @loadGlobalVariableIR enterAccessibleEntities 
  ?!@accessibleEntities ioAccessibleEntities
  ?!@uint unused ioMaxBranchOfOnInstructions
{
  ioAccessibleEntities.mGlobalVariableSet += !mVariableName
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
