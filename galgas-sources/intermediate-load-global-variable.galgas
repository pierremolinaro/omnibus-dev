
setter @instructionListIR appendLoadGlobalVariable
  ?let @objectIR inTargetValue
  ?let @string inRegisterName
{
  self += !@loadGlobalVariableIR.new {!inTargetValue !inRegisterName}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @loadGlobalVariableIR : @abstractInstructionIR {
  @objectIR mTargetValue
  @string mVariableName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @loadGlobalVariableIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let llvmType = [mTargetValue llvmTypeName]
  ioLLVMcode += "  " + [mTargetValue llvmName] + " = load "
  ioLLVMcode += llvmType + ", " + llvmType + " * " + llvmNameForGlobalVariable (!mVariableName) + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @loadGlobalVariableIR enterAccessibleEntities 
  ?!@accessibleEntities unused ioAccessibleEntities
  ?!@uint unused ioMaxBranchOfOnInstructions
{
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
