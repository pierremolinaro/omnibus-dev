#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                       
#    P L M    T Y P E                                                                      
#                                                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

boolset @PLMTypeAttributes {
  instanciable, equatable, copyable, generateAssignmentRoutine
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @constructorValue {
#  case zero
  case simple (@bigint value)
  case structure (@sortedOperandIRList sortedOperandList)
  case arrayValue (@PLMType elementType @uint size)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @constructorMap { # Key is (!selector!selector)
  @constructorSignature mSignature
  @constructorValue mInitValue
  insert insertKey error message "-- internal error --"
  search searchKey error message "-- internal error --"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @PLMType {
  @propertyMap mPropertyMap # Properties and methods
  @constantMap mConstantMap # $type.cst, as enumeration values
  @constructorMap mConstructorMap # $type (!... !...)
  @PLMTypeAttributes mAttributes # as instanciable, copyable, ...
  @typeKind mKind
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @typeKind {
  case void # No actual type, used for no annotation type, ...
  case boolean
  case literalString
  case enumeration (@uint bitCount @string plmTypeName)
  case structure (@lstring typeName
                  @propertyList propertyList
                  @guardMapForContext guardMap)
  case integer (@bigint min
                @bigint max
                @bool unsigned
                @uint bitCount
                @string plmTypeName)
  case staticInteger
  case opaque (@bigint bitCount @string plmTypeName)
  case arrayType (@lstring typeName
                  @PLMType elementType
                  @bigint size
                  @string plmTypeName)
  case function (@routineDescriptor descriptor)
  case pointer (@PLMType pointee)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func booleanType -> @PLMType {
  result = .new {!{} !{} !{} !.all !.boolean}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func staticIntegerType -> @PLMType {
  result = .new {
    !{}
    !{}
    !{}
    !.equatable | .copyable
    !.staticInteger
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func literalStringType -> @PLMType {
  result = .new {!{} !{} !{} !.all !.literalString}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func voidType -> @PLMType {
  result = .new {!{} !{} !{} !.none !.void}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func functionType ?let @routineDescriptor inDescriptor -> @PLMType {
  result = .new{!{} !{} !{} !.none !.function {!descriptor:inDescriptor}}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @PLMType equatable -> @bool {
  result = [mAttributes equatable]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @unifiedTypeMap-proxy instanciable -> @bool {
  result = [[self type] instanciable]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @PLMType instanciable -> @bool {
  result = [mAttributes instanciable]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @unifiedTypeMap-proxy copyable -> @bool {
  result = [[self type] copyable]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @PLMType copyable -> @bool {
  result = [mAttributes copyable]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @PLMType llvmTypeName -> @string {
  switch [self mKind]
  case void :
    result = "void"
  case boolean :
    result = "i1"
  case literalString :
    result = "i8*"
  case enumeration (@uint bitCount *) :
    result = "i" + bitCount
  case structure (@lstring typeName * *) :
    result = "%" + [llvmRegularTypeMangledNameFromName (!typeName) assemblerRepresentation]
  case integer (* * * @uint bitCount *) :
    result = "i" + bitCount
  case staticInteger :
    result = "—"
  case opaque (@bigint bitCount *) :
    result = "i" + bitCount
  case arrayType (@lstring typeName * * *) :
    result = "%" + [typeName assemblerRepresentation]
  case function (@routineDescriptor descriptor) :
    if descriptor.mReturnTypeProxy == .null then
      result = "void"
    else
      result = [[descriptor.mReturnTypeProxy type] llvmTypeName]
    end
    result += "("
    for () in descriptor.mSignature 
    do
      result += [[mTypeProxy type] llvmTypeName]
      switch mFormalArgumentPassingMode
      case inputOutput, output : result += "*"
      case input :
      end
    between result += ", "
    end
    result += ")*"
  case pointer (pointee) :
    result = [pointee llvmTypeName] + "*"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @PLMType plmTypeName -> @string {
  switch [self mKind]
  case void :
    result = "void"
  case boolean :
    result = boolTypeName ()
  case literalString :
    result = staticStringTypeName ()
  case enumeration (* plmTypeName) :
    result = plmTypeName
  case structure (plmTypeName * *) :
    result = plmTypeName
  case integer (* * * * plmTypeName) :
    result = plmTypeName
  case staticInteger :
    result = staticIntegerTypeName ()
  case opaque (* plmTypeName) :
    result = plmTypeName
  case arrayType (* * * plmTypeName) :
    result = plmTypeName
  case function (*) :
    error ["" nowhere] : "«internal error @PLMType key function»" : result
  case pointer (*) :
    error ["" nowhere] : "«internal error @PLMType key pointer»" : result
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @PLMType descriptionForHTMLFile -> @string {
  switch [self mKind]
  case void :
    result = "Void"
  case boolean :
    result = "Boolean"
  case literalString :
    result = "Literal String"
  case enumeration (* *) :
    result = "Enumeration"
  case structure (* * *) :
    result = "Structure"
  case integer (* * @bool unsigned @uint bitCount *) :
    result = "Integer (" + bitCount + " bit" + if bitCount > 1 then "s" else "" end
           + ", " + if unsigned then "unsigned" else "signed" end + ")"
  case staticInteger :
    result = "Static Integer"
  case opaque (@bigint bitCount *) :
    result = "Opaque (" + bitCount + " bits)"
  case arrayType (* * * *) :
    result = "Array"
  case function (*) :
    result = "Function"
  case pointer (pointee) :
    result = "Pointer to " + [pointee llvmTypeName]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared map @unifiedTypeMap %selectors {
  @PLMType type
  @uint index

  insert insertType error message "the '%K' type is already declared in %L"
  search searchKey error message "there is no '%K' type"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  BUILD TYPE MAP HTML FILE                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc buildTypeMapHTMLFile
  ?@unifiedTypeMap inTypeMap
  ?sourceFile:let @lstring inSourceFile
{
#------------------------------------ Build an HTML file that contains all types
  let @string typeDumpFilePath = inSourceFile.string + ".types.html"
  if [option plm_options.emitTypeMap value] then
    @stringset firstLetterSet = {}
    for () in inTypeMap do
      firstLetterSet += ![[lkey.string characterAtIndex!0] string]
    end
    @string tableOfTypeString = ""
    @char currentFirstLetter = ' '
    for () type_ in inTypeMap do
      if currentFirstLetter != [type_lkey.string characterAtIndex !0] then
        currentFirstLetter = [type_lkey.string characterAtIndex !0]
        tableOfTypeString += "<br><a name=\"" + [currentFirstLetter uint] + "\"><b>" + currentFirstLetter + "</b></a><br>"
      end
      tableOfTypeString += linkForHTMLTypeMap (!type_lkey.string) + "<br>"
    end
    let @string typeDumpString = [filewrapper typeDumpGenerationTemplate.dump
      ![inSourceFile lastPathComponent]
      !inTypeMap
      !firstLetterSet
      !tableOfTypeString
    ]
    [typeDumpString writeToFileWhenDifferentContents !typeDumpFilePath ?*]
  else
    [@string deleteFileIfExists !typeDumpFilePath]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

filewrapper typeDumpGenerationTemplate in "../generation-templates/" {
}{
}{
  template dump "typeDump.html.galgasTemplate"
    ?@string PROJECT_NAME
    ?@unifiedTypeMap GLOBAL_TYPE_MAP
    ?@stringset FIRST_LETTER_SET
    ?@string TABLE_OF_TYPES_STRING
}

#----------------------------------------------------------------------------------------------------------------------*

func linkForHTMLTypeMap ?let @string inTypeName -> @string {
  result = "<a class=\"header_link\" href=\"#" + inTypeName + "\">" + inTypeName + "</a>"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
