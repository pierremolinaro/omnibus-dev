#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                       
#    P L M    T Y P E                                                                      
#                                                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

boolset @PLMTypeAttributes {
  instanciable, equatable, copyable, generateAssignmentRoutine, arc
}

#·······················································································································

struct @PLMType {
  @propertyMap propertyMap %selector # Properties and methods
  @classConstantMap classConstantMap %selector # $type.cst, as enumeration values
  @constructorMap constructorMap %selector # $type (!... !...)
  @guardMapForContext guardMap %selector
  @PLMTypeAttributes typeAttributes %selector # as instanciable, copyable, ...
  @string plmTypeName %selector # Without le leading '$'; empty string for void type kind
  @typeKind kind %selector
}

#·······················································································································

enum @typeKind {
  case void # No actual type, used for no annotation type, ...
  case boolean
  case literalString
  case enumeration (@uint bitCount)
  case structure (@propertyList propertyList)
  case syncTool (@propertyList propertyList)
  case integer (@bigint min @bigint max @bool unsigned @uint bitCount)
  case staticInteger
  case opaque (@bigint bitCount)
  case arrayType (@PLMType elementType @bigint size)
  case function (@routineDescriptor descriptor)
  case pointer (@PLMType pointee)
}

#·······················································································································

func booleanType -> @PLMType {
  result = .new {
    !propertyMap:{}
    !classConstantMap:{}
    !constructorMap:{}
    !guardMap:{}
    !typeAttributes:.instanciable | .equatable | .copyable | .generateAssignmentRoutine
    !plmTypeName:boolTypeName ()
    !kind:.boolean
  }
}

#·······················································································································

func staticIntegerType -> @PLMType {
  result = .new {
    !propertyMap:{}
    !classConstantMap:{}
    !constructorMap:{}
    !guardMap:{}
    !typeAttributes:.equatable | .copyable
    !plmTypeName:staticIntegerTypeName ()
    !kind:.staticInteger
  }
}

#·······················································································································

func literalStringType -> @PLMType {
  result = .new {
    !propertyMap:{}
    !classConstantMap:{}
    !constructorMap:{}
    !guardMap:{}
    !typeAttributes:.instanciable | .equatable | .copyable | .generateAssignmentRoutine
    !plmTypeName:staticStringTypeName () 
    !kind:.literalString
  }
}

#·······················································································································

func voidType -> @PLMType {
  result = .new {
    !propertyMap:{}
    !classConstantMap:{}
    !constructorMap:{}
    !guardMap:{}
    !typeAttributes:.none
    !plmTypeName:""
    !kind:.void
  }
}

#·······················································································································

func functionType ?let @routineDescriptor inDescriptor -> @PLMType {
  result = .new{
    !propertyMap:{}
    !classConstantMap:{}
    !constructorMap:{}
    !guardMap:{}
    !typeAttributes:.none
    !plmTypeName:""
    !kind:.function {!descriptor:inDescriptor}
  }
}

#·······················································································································

getter @PLMType equatable -> @bool {
  result = [typeAttributes equatable]
}

#·······················································································································

getter @unifiedTypeMap-proxy instanciable -> @bool {
  result = [[self type] instanciable]
}

#·······················································································································

getter @PLMType instanciable -> @bool {
  result = [typeAttributes instanciable]
}

#·······················································································································

getter @unifiedTypeMap-proxy copyable -> @bool {
  result = [[self type] copyable]
}

#·······················································································································

getter @PLMType copyable -> @bool {
  result = [typeAttributes copyable]
}

#·······················································································································

getter @unifiedTypeMap-proxy arc -> @bool {
  result = [[self type] arc]
}

#·······················································································································

getter @PLMType arc -> @bool {
  result = [typeAttributes arc]
}

#·······················································································································

method @PLMType generateRetain
  ?let @string inPLMName
  ?!@string ioLLVMcode
  ?!@generationAdds ioGenerationAdds
{
  let llvmTypeName = [self llvmTypeName]
  let LLVMVariable =  llvmNameForLocalVariable (!inPLMName)
  if [self.typeAttributes arc] then
    let tempLLVMVariable = "%temp." + [inPLMName assemblerRepresentation] + ".loaded." + ioGenerationAdds.mUniqueIndex
    ioGenerationAdds.mUniqueIndex ++
    ioLLVMcode += "  " + tempLLVMVariable + " = load " + llvmTypeName + ", " + llvmTypeName + "* " + LLVMVariable + "\n"
    ioLLVMcode += "  call void @" + [self plmTypeName] + ".retain (" + llvmTypeName + " " + tempLLVMVariable + ")\n"
  else
    let arcAssignmentList = [self arcList !{}]
    for (propertyName propertyType indexPath) in arcAssignmentList do 
      let llvmVarName = "%arc.retain." + ioGenerationAdds.mUniqueIndex
      ioGenerationAdds.mUniqueIndex ++
      ioLLVMcode += "  " + llvmVarName + " = getelementptr inbounds " + llvmTypeName + ", " + llvmTypeName + "* " + LLVMVariable + ", i32 0"
      for (idx) in indexPath do
        ioLLVMcode += ", i32 " + idx
      end
      ioLLVMcode += " ; " + propertyName + "\n"
      let propertyTypeLLVMName = [propertyType llvmTypeName]
      let llvmLoadedVarName = llvmVarName + ".loaded"
      ioLLVMcode += "  " + llvmLoadedVarName + " = load " + propertyTypeLLVMName + ", " + propertyTypeLLVMName + "* " + llvmVarName + "\n" 
      ioLLVMcode += "  call void @" + [propertyType plmTypeName] + ".retain (" + propertyTypeLLVMName + " " + llvmLoadedVarName + ")\n" 
    end
  end
}

#·······················································································································

method @PLMType generateInsulate
  ?let @string inPLMName
  ?!@string ioLLVMcode
  ?!@generationAdds ioGenerationAdds
{
  let llvmTypeName = [self llvmTypeName]
  let LLVMVariable =  llvmNameForLocalVariable (!inPLMName)
  if [self.typeAttributes arc] then
    ioLLVMcode += "  call void @" + [self plmTypeName] + ".insulate (" + llvmTypeName + "* " + LLVMVariable + ")\n"
  else
    let arcAssignmentList = [self arcList !{}]
    for (propertyName propertyType indexPath) in arcAssignmentList do 
      let llvmVarName = "%arc.insulate." + ioGenerationAdds.mUniqueIndex
      ioGenerationAdds.mUniqueIndex ++
      ioLLVMcode += "  " + llvmVarName + " = getelementptr inbounds " + llvmTypeName + ", " + llvmTypeName + "* " + LLVMVariable + ", i32 0"
      for (idx) in indexPath do
        ioLLVMcode += ", i32 " + idx
      end
      ioLLVMcode += " ; " + propertyName + "\n"
      let propertyTypeLLVMName = [propertyType llvmTypeName]
      ioLLVMcode += "  call void @" + [propertyType plmTypeName] + ".insulate (" + propertyTypeLLVMName + "* " + propertyTypeLLVMName + ")\n" 
    end
  end
}

#·······················································································································

method @PLMType generateRelease
  ?let @string inPLMName
  ?!@string ioLLVMcode
  ?!@generationAdds ioGenerationAdds
{
  let llvmTypeName = [self llvmTypeName]
  let LLVMVariable =  llvmNameForLocalVariable (!inPLMName)
  if [self.typeAttributes arc] then
    let tempLLVMVariable = "%temp." + [inPLMName assemblerRepresentation] + ".loaded." + ioGenerationAdds.mUniqueIndex   
    ioGenerationAdds.mUniqueIndex ++
    ioLLVMcode += "  " + tempLLVMVariable + " = load " + llvmTypeName + ", " + llvmTypeName + "* " + LLVMVariable + "\n"
    ioLLVMcode += "  call void @" + [self plmTypeName] + ".release (" + llvmTypeName + " " + tempLLVMVariable + ")\n"
  else
    let arcAssignmentList = [self arcList !{}]
    for (propertyName propertyType indexPath) in arcAssignmentList do 
      let llvmVarName = "%arc.release." + ioGenerationAdds.mUniqueIndex
      ioGenerationAdds.mUniqueIndex ++
      ioLLVMcode += "  " + llvmVarName + " = getelementptr inbounds " + llvmTypeName + ", " + llvmTypeName + "* " + LLVMVariable + ", i32 0"
      for (idx) in indexPath do
        ioLLVMcode += ", i32 " + idx
      end
      ioLLVMcode += " ; " + propertyName + "\n"
      let propertyTypeLLVMName = [propertyType llvmTypeName]
      let llvmLoadedVarName = llvmVarName + ".loaded"
      ioLLVMcode += "  " + llvmLoadedVarName + " = load " + propertyTypeLLVMName + ", " + propertyTypeLLVMName + "* " + llvmVarName + "\n" 
      ioLLVMcode += "  call void @" + [propertyType plmTypeName] + ".release (" + propertyTypeLLVMName + " " + llvmLoadedVarName + ")\n" 
    end
  end
}

#·······················································································································

getter @PLMType llvmTypeName -> @string {
  switch self.kind
  case void :
    result = "void"
  case boolean :
    result = "i1"
  case literalString :
    result = "i8*"
  case enumeration (@uint bitCount) :
    result = "i" + bitCount
  case structure (*) :
    result = "%" + [llvmTypeNameFromPLMname (![plmTypeName nowhere]) assemblerRepresentation]
  case syncTool (*) :
    result = "%" + [llvmTypeNameFromPLMname (![plmTypeName nowhere]) assemblerRepresentation]
  case integer (* * * @uint bitCount) :
    result = "i" + bitCount
  case staticInteger :
    result = "—"
  case opaque (@bigint bitCount) :
    result = "i" + bitCount
  case arrayType (* *) :
    result = "%" + [llvmTypeNameFromPLMname (![plmTypeName nowhere]) assemblerRepresentation]
  case function (@routineDescriptor descriptor) :
    if descriptor.returnTypeProxy == .null then
      result = "void"
    else
      result = [[descriptor.returnTypeProxy type] llvmTypeName]
    end
    result += "("
    for () in descriptor.signature 
    do
      result += [[mTypeProxy type] llvmTypeName]
      switch mFormalArgumentPassingMode
      case inputOutput, output : result += "*"
      case input :
      end
    between result += ", "
    end
    result += ")*"
  case pointer (pointee) :
    result = [pointee llvmTypeName] + "*"
  end
}

#·······················································································································

getter @PLMType descriptionForHTMLFile -> @string {
  switch self.kind
  case void :
    result = "Void"
  case boolean :
    result = "Boolean"
  case literalString :
    result = "Literal String"
  case enumeration (*) :
    result = "Enumeration"
  case structure (*) :
    result = "Structure"
  case syncTool (*) :
    result = "Synchronization tool"
  case integer (* * @bool unsigned @uint bitCount) :
    result = "Integer (" + bitCount + " bit" + if bitCount > 1 then "s" else "" end
           + ", " + if unsigned then "unsigned" else "signed" end + ")"
  case staticInteger :
    result = "Static Integer"
  case opaque (@bigint bitCount) :
    result = "Opaque (" + bitCount + " bits)"
  case arrayType (* *) :
    result = "Array"
  case function (*) :
    result = "Function"
  case pointer (pointee) :
    result = "Pointer to " + [pointee llvmTypeName]
  end
}

#·······················································································································

list @arcAssignmentList {
  @string mPropertyName
  @PLMType mPropertyType
  @uintlist mPropertyIndexPath
}

#·······················································································································

getter @PLMType arcList ?let @uintlist inPropertyIndexPath -> @arcAssignmentList {
  result = {}
  if [kind isStructure] then
    [kind structure ?propertyList:let @propertyList propertyList]
    for (propertyName propertyType) in propertyList do (idx)
      let indexPath = inPropertyIndexPath + {!idx}
      if [propertyType.typeAttributes arc] then
        result += !propertyName !propertyType !indexPath
      end
      result += [propertyType arcList !indexPath]
    end
  end
}

#·······················································································································

shared map @unifiedTypeMap %selectors {
  @PLMType type
  @uint index

  insert insertType error message "the '%K' type is already declared in %L"
  search searchKey error message "there is no '%K' type"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  BUILD TYPE MAP HTML FILE                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc buildTypeMapHTMLFile
  ?@unifiedTypeMap inTypeMap
  ?sourceFile:let @lstring inSourceFile
{
#------------------------------------ Build an HTML file that contains all types
  let @string typeDumpFilePath = inSourceFile.string + ".types.html"
  if [option plm_options.emitTypeMap value] then
    @stringset firstLetterSet = {}
    for () in inTypeMap do
      firstLetterSet += ![[lkey.string characterAtIndex!0] string]
    end
    @string tableOfTypeString = ""
    @char currentFirstLetter = ' '
    for () type_ in inTypeMap do
      if currentFirstLetter != [type_lkey.string characterAtIndex !0] then
        currentFirstLetter = [type_lkey.string characterAtIndex !0]
        tableOfTypeString += "<br><a name=\"" + [currentFirstLetter uint] + "\"><b>" + currentFirstLetter + "</b></a><br>"
      end
      tableOfTypeString += linkForHTMLTypeMap (!type_lkey.string) + "<br>"
    end
    let @string typeDumpString = [filewrapper typeDumpGenerationTemplate.dump
      ![inSourceFile lastPathComponent]
      !inTypeMap
      !firstLetterSet
      !tableOfTypeString
    ]
    [typeDumpString writeToFileWhenDifferentContents !typeDumpFilePath ?*]
  else
    [@string deleteFileIfExists !typeDumpFilePath]
  end
}

#·······················································································································

filewrapper typeDumpGenerationTemplate in "../generation-templates/" {
}{
}{
  template dump "typeDump.html.galgasTemplate"
    ?@string PROJECT_NAME
    ?@unifiedTypeMap GLOBAL_TYPE_MAP
    ?@stringset FIRST_LETTER_SET
    ?@string TABLE_OF_TYPES_STRING
}

#·······················································································································

func linkForHTMLTypeMap ?let @string inTypeName -> @string {
  result = "<a class=\"header_link\" href=\"#" + inTypeName + "\">" + inTypeName + "</a>"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
