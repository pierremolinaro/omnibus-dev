#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                       
#    P L M    T Y P E                                                                      
#                                                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @omnibusType {
  @propertyGetterMap propertyGetterMap %selector
  @propertySetterMap propertySetterMap2 %selector
  @subscript subscript %selector
  @omnibusTypeAttributes attributes %selector # as instanciable, copyable, ...
  @string omnibusTypeDescriptionName %selector # used for type checking and type display
  @typeKind kind %selector
  @string llvmBaseTypeName %selector # used for type implementation, empty string if compile time type
}

#·······················································································································

enum @subscript {
  case noSubscript
  case staticSubscript (@omnibusType elementType @bigint size)
  case literalString
  
  default noSubscript
}

#·······················································································································

enum @propertyGetterKind {
  case storedProperty (@omnibusType type @uint index)
  case computedProperty (@unifiedTypeMap-proxy typeProxy @routineLLVMNameDict modeDictionary)
  case constantProperty (@objectIR value)
}

#·······················································································································

map @propertyGetterMap {
  @bool mIsPublic
  @propertyGetterKind mAccess
  insert insertKey error message "the '%K' property is already declared"
  search searchKey error message "there is no '%K' property"
}

#·······················································································································

boolset @omnibusTypeAttributes {
  instanciable, equatable, copyable, comparable
}

#·······················································································································

enum @typeKind {
  case void # No actual type, used for no annotation type, ...
  case boolean
  case literalString
  case enumeration (@uint bitCount)
  case structure (@propertyList propertyList)
  case syncTool
  case integer (@bigint min @bigint max @bool unsigned @uint bitCount)
  case compileTimeInteger
  case compileTimeBool
  case llvmType (@bigint bitSize)
  case generic (@genericFormalParameterList parameters
                @ctExpressionAST whereClause
                @llvmStringDefinition llvmNativeTypeNameExpression)
  case opaque (@bigint bitCount)
  case staticArrayType (@omnibusType elementType @bigint size)
  case dynamicArrayType (@omnibusType elementType)
  case function (@mode mode
                 @routineTypedSignature signature
                 @unifiedTypeMap-proxy returnTypeProxy)
  default void
}

#·······················································································································

getter @omnibusType llvmTypeName -> @string {
  switch self.kind
  case void :
    result = "void"
  case boolean :
    result = "i1"
  case literalString :
    result = "i8*"
  case enumeration (@uint bitCount) :
    result = "i" + bitCount
  case structure (*) :
    result = "%" + [[self llvmBaseTypeName] assemblerRepresentation]
  case syncTool :
    result = "%" + [[self llvmBaseTypeName] assemblerRepresentation]
  case integer (* * * @uint bitCount) :
    result = "i" + bitCount
  case compileTimeBool, compileTimeInteger :
    result = "" # No LLVM type, Compile Time Type
  case generic (3*) :
    result = "" # No LLVM type, Compile Time Type
  case llvmType (*) :
    result = [self llvmBaseTypeName]
  case opaque (@bigint bitCount) :
    result = "i" + bitCount
  case staticArrayType (* *) :
    result = "%" + [[self llvmBaseTypeName] assemblerRepresentation]
  case dynamicArrayType (*) :
    result = "%ptrtype" # "i" + ptrSize
  case function (* signature returnTypeProxy) :
    if returnTypeProxy == .null then
      result = "void"
    else
      result = [[returnTypeProxy type] llvmTypeName]
    end
    result += "("
    for () in signature 
    do
      result += [[mTypeProxy type] llvmTypeName]
      switch mFormalArgumentPassingMode
      case inputOutput, output : result += "*"
      case input :
      end
    between result += ", "
    end
    result += ")*"
  end
}

#·······················································································································

method @omnibusType checkIsCompileTimeType ?let @location inErrorLocation {
  if not ([kind isCompileTimeBool] | [kind isCompileTimeInteger]) then
    error inErrorLocation : "this type should be a compile time type"
  end
}

#·······················································································································

method @omnibusType checkIsNotCompileTimeType ?let @location inErrorLocation {
  if [kind isCompileTimeBool] | [kind isCompileTimeInteger] then
    error inErrorLocation : "this type should not be a compile time type"
  end
}

#·······················································································································

getter @omnibusType isCompileTimeType -> @bool {
  result = [kind isCompileTimeBool] | [kind isCompileTimeInteger]
}

#·······················································································································

func %once compileTimeIntegerType -> @omnibusType {
  result = .new {
    !propertyGetterMap:{}
    !propertySetterMap2: {}
    !subscript:.noSubscript
    !attributes:.equatable | .copyable
    !omnibusTypeDescriptionName: ctIntegerTypeName ()
    !kind:.compileTimeInteger
    !llvmBaseTypeName: "" # Compile Time Type
  }
}

#·······················································································································

func %once compileTimeBoolType -> @omnibusType {
  result = .new {
    !propertyGetterMap:{}
    !propertySetterMap2: {}
    !subscript:.noSubscript
    !attributes:.equatable | .copyable
    !omnibusTypeDescriptionName: ctBoolTypeName ()
    !kind:.compileTimeBool
    !llvmBaseTypeName: "" # Compile Time Type
  }
}

#·······················································································································

func %once boolType -> @omnibusType {
  result = .new {
    !propertyGetterMap:{}
    !propertySetterMap2: {}
    !subscript:.noSubscript
    !attributes:.equatable | .copyable | .instanciable
    !omnibusTypeDescriptionName: boolTypeName ()
    !kind: .boolean
    !llvmBaseTypeName: boolTypeName ()
  }
}

#·······················································································································

func %once literalStringType -> @omnibusType {
  result = .new {
    !propertyGetterMap:{}
    !propertySetterMap2: {}
    !subscript:.literalString
    !attributes:.instanciable | .equatable | .copyable
    !omnibusTypeDescriptionName:staticStringTypeName () 
    !kind:.literalString
    !llvmBaseTypeName:staticStringTypeName ()
  }
}

#·······················································································································

func %once voidType -> @omnibusType {
  result = .new {
    !propertyGetterMap:{}
    !propertySetterMap2: {}
    !subscript:.noSubscript
    !attributes:.none
    !omnibusTypeDescriptionName:""
    !kind:.void
    !llvmBaseTypeName:""
  }
}

#·······················································································································

getter @omnibusType equatable -> @bool {
  result = [attributes equatable]
}

#·······················································································································

getter @unifiedTypeMap-proxy instanciable -> @bool {
  result = [[self type] instanciable]
}

#·······················································································································

getter @omnibusType instanciable -> @bool {
  result = [attributes instanciable]
}

#·······················································································································

getter @unifiedTypeMap-proxy copyable -> @bool {
  result = [[self type] copyable]
}

#·······················································································································

getter @omnibusType copyable -> @bool {
  result = [attributes copyable]
}

#·······················································································································

method @omnibusType generateRetain
  ?let @string inOmnibusName
  ?!@string ioLLVMcode
  ?!@generationAdds ioGenerationAdds
{
  let llvmTypeName = [self llvmTypeName]
  let LLVMVariable =  llvmNameForLocalVariable (!inOmnibusName)
  if [self.kind isDynamicArrayType] then
    let tempLLVMVariable = "%temp." + [inOmnibusName assemblerRepresentation] + ".loaded." + ioGenerationAdds.mUniqueIndex
    ioGenerationAdds.mUniqueIndex ++
    ioLLVMcode += "  " + tempLLVMVariable + " = load " + llvmTypeName + ", " + llvmTypeName + "* " + LLVMVariable + "\n"
    ioLLVMcode += "  call void @arc.retain (" + llvmTypeName + " " + tempLLVMVariable + ")\n"
  else
    let arcAssignmentList = [self arcList !{}]
    for (propertyName propertyType indexPath) in arcAssignmentList do 
      let llvmVarName = "%arc.retain." + ioGenerationAdds.mUniqueIndex
      ioGenerationAdds.mUniqueIndex ++
      ioLLVMcode += "  " + llvmVarName + " = getelementptr inbounds " + llvmTypeName + ", " + llvmTypeName + "* " + LLVMVariable + ", i32 0"
      for (idx) in indexPath do
        ioLLVMcode += ", i32 " + idx
      end
      ioLLVMcode += " ; " + propertyName + "\n"
      let propertyTypeLLVMName = [propertyType llvmTypeName]
      let llvmLoadedVarName = llvmVarName + ".loaded"
      ioLLVMcode += "  " + llvmLoadedVarName + " = load " + propertyTypeLLVMName + ", " + propertyTypeLLVMName + "* " + llvmVarName + "\n" 
      ioLLVMcode += "  call void @arc.retain (" + propertyTypeLLVMName + " " + llvmLoadedVarName + ")\n" 
    end
  end
}

#·······················································································································

method @omnibusType generateInsulate
  ?let @string inOmnibusName
  ?!@string ioLLVMcode
  ?!@generationAdds ioGenerationAdds
{
  let llvmTypeName = [self llvmTypeName]
  let LLVMVariable =  llvmNameForLocalVariable (!inOmnibusName)
  if [self.kind isDynamicArrayType] then
    let loadedVar = "%temp." + [inOmnibusName assemblerRepresentation] + ".loaded." + ioGenerationAdds.mUniqueIndex   
    let insulatedVar = "%temp." + [inOmnibusName assemblerRepresentation] + ".insulated." + ioGenerationAdds.mUniqueIndex   
    ioGenerationAdds.mUniqueIndex ++
    ioLLVMcode += "  " + loadedVar + " = load " + llvmTypeName + ", " + llvmTypeName + "* " + LLVMVariable + "\n"
    ioLLVMcode += "  " + insulatedVar + " = call " + llvmTypeName + " @arc.insulate (" + llvmTypeName + " " + loadedVar + ")\n"
    ioLLVMcode += "  store " + llvmTypeName + " " + insulatedVar + ", " + llvmTypeName + "* " + LLVMVariable + "\n"
  else
    let arcAssignmentList = [self arcList !{}]
    for (propertyName propertyType indexPath) in arcAssignmentList do 
      let llvmVarName = "%arc.release." + ioGenerationAdds.mUniqueIndex
      ioGenerationAdds.mUniqueIndex ++
      ioLLVMcode += "  " + llvmVarName + " = getelementptr inbounds " + llvmTypeName + ", " + llvmTypeName + "* " + LLVMVariable + ", i32 0"
      for (idx) in indexPath do
        ioLLVMcode += ", i32 " + idx
      end
      ioLLVMcode += " ; " + propertyName + "\n"
      let propertyTypeLLVMName = [propertyType llvmTypeName]
      let loadedVar = llvmVarName + ".loaded." + ioGenerationAdds.mUniqueIndex 
      let insulatedVar = llvmVarName + ".insulated." + ioGenerationAdds.mUniqueIndex 
      ioGenerationAdds.mUniqueIndex ++
      ioLLVMcode += "  " + loadedVar + " = load " + propertyTypeLLVMName + ", " + propertyTypeLLVMName + "* " + llvmVarName + "\n" 
      ioLLVMcode += "  " + insulatedVar + " = call " + propertyTypeLLVMName + " @arc.insulate (" + propertyTypeLLVMName + " " + loadedVar + ")\n" 
      ioLLVMcode += "  store " + propertyTypeLLVMName + " " + insulatedVar + ", " + propertyTypeLLVMName + "* " + llvmVarName + "\n"
    end
  end
}

#·······················································································································

method @omnibusType generateRelease
  ?let @string inOmnibusName
  ?!@string ioLLVMcode
  ?!@generationAdds ioGenerationAdds
{
  let llvmTypeName = [self llvmTypeName]
  let LLVMVariable =  llvmNameForLocalVariable (!inOmnibusName)
  if [self.kind isDynamicArrayType] then
    let tempLLVMVariable = "%temp." + [inOmnibusName assemblerRepresentation] + ".loaded." + ioGenerationAdds.mUniqueIndex   
    ioGenerationAdds.mUniqueIndex ++
    ioLLVMcode += "  " + tempLLVMVariable + " = load " + llvmTypeName + ", " + llvmTypeName + "* " + LLVMVariable + "\n"
    ioLLVMcode += "  call void @arc.release (" + llvmTypeName + " " + tempLLVMVariable + ") ;\n"
  else
    let arcAssignmentList = [self arcList !{}]
    for (propertyName propertyType indexPath) in arcAssignmentList do 
      let llvmVarName = "%arc.release." + ioGenerationAdds.mUniqueIndex
      ioGenerationAdds.mUniqueIndex ++
      ioLLVMcode += "  " + llvmVarName + " = getelementptr inbounds " + llvmTypeName + ", " + llvmTypeName + "* " + LLVMVariable + ", i32 0"
      for (idx) in indexPath do
        ioLLVMcode += ", i32 " + idx
      end
      ioLLVMcode += " ; " + propertyName + "\n"
      let propertyTypeLLVMName = [propertyType llvmTypeName]
      let llvmLoadedVarName = llvmVarName + ".loaded"
      ioLLVMcode += "  " + llvmLoadedVarName + " = load " + propertyTypeLLVMName + ", " + propertyTypeLLVMName + "* " + llvmVarName + "\n" 
      ioLLVMcode += "  call void @arc.release (" + propertyTypeLLVMName + " " + llvmLoadedVarName + ")\n" 
    end
  end
}

#·······················································································································

getter @omnibusType descriptionForHTMLFile -> @string {
  switch self.kind
  case void :
    result = "Void"
  case boolean :
    result = "Boolean"
  case literalString :
    result = "Literal String"
  case enumeration (*) :
    result = "Enumeration"
  case structure (*) :
    result = "Structure"
  case syncTool :
    result = "Synchronization tool"
  case integer (* * @bool unsigned @uint bitCount) :
    result = "Integer (" + bitCount + " bit" + if bitCount > 1 then "s" else "" end
           + ", " + if unsigned then "unsigned" else "signed" end + ")"
  case compileTimeBool :
    result = "Compile Time Bool"
  case compileTimeInteger :
    result = "Compile Time Integer"
  case generic (3*) :
    result = "Generic Type"
  case llvmType (*) :
    result = "LLVM Type"
  case opaque (@bigint bitCount) :
    result = "Opaque (" + bitCount + " bits)"
  case staticArrayType (* *) :
    result = "Static array"
  case dynamicArrayType (*) :
    result = "Dynamic array"
  case function (3*) :
    result = "Function"
  end
}

#·······················································································································

list @arcAssignmentList {
  @string mPropertyName
  @omnibusType mPropertyType
  @uintlist mPropertyIndexPath
}

#·······················································································································

getter @omnibusType arcList ?let @uintlist inPropertyIndexPath -> @arcAssignmentList {
  result = {}
  if [kind isDynamicArrayType] then
    result += !"" !self !inPropertyIndexPath
  elsif [kind isStructure] then
    [kind structure ?propertyList:let @propertyList propertyList]
    for (propertyName propertyType) in propertyList do (idx)
      let indexPath = inPropertyIndexPath + {!idx}
      result += [propertyType arcList !indexPath]
    end
  end
}

#·······················································································································

getter @omnibusType deinitNeeded -> @bool {
  result = [kind isDynamicArrayType]
  if [kind isStructure] then
    [kind structure ?propertyList:let @propertyList propertyList]
    for (propertyName propertyType) in propertyList while not result do
      result = [propertyType deinitNeeded]
    end
  end
}

#·······················································································································

shared map @unifiedTypeMap %selectors {
  @omnibusType type

  insert insertType error message "the '%K' type is already declared in %L"
  search searchKey error message "there is no '%K' type"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  BUILD TYPE MAP HTML FILE                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc buildTypeMapHTMLFile
  ?let @unifiedTypeMap inTypeMap
  ?let @routineMapForContext inRoutineMap
  ?let @infixOperatorMap inTerminusInfixOperatorMap
  ?let @prefixOperatorMap inTerminusPrefixOperatorMap
  ?let @assignmentOperatorMap inAssignmentOperatorMap
  ?sourceFile:let @lstring inSourceFile
{
#------------------------------------ Build an HTML file that contains all types
  let @string typeDumpFilePath = inSourceFile.string + ".types.html"
  if [option omnibus_options.emitTypeMap value] then
    @stringset firstLetterSet = {}
    for () in inTypeMap do
      firstLetterSet += ![[lkey.string characterAtIndex!0] string]
    end
    @string tableOfTypeString = ""
    @char currentFirstLetter = ' '
    for () type_ in inTypeMap do
      if currentFirstLetter != [type_lkey.string characterAtIndex !0] then
        currentFirstLetter = [type_lkey.string characterAtIndex !0]
        tableOfTypeString += "<br><a name=\"" + [currentFirstLetter uint] + "\"><b>" + currentFirstLetter + "</b></a><br>"
      end
      tableOfTypeString += linkForHTMLTypeMap (!type_lkey.string) + "<br>"
    end
    let @string typeDumpString = [filewrapper typeDumpGenerationTemplate.dump
      ![inSourceFile lastPathComponent]
      !inTypeMap
      !firstLetterSet
      !tableOfTypeString
      !inRoutineMap
      !inTerminusInfixOperatorMap
      !inTerminusPrefixOperatorMap
      !inAssignmentOperatorMap
    ]
    [typeDumpString writeToFileWhenDifferentContents !typeDumpFilePath ?*]
  else
    [@string deleteFileIfExists !typeDumpFilePath]
  end
}

#·······················································································································

filewrapper typeDumpGenerationTemplate in "../generation-templates/" {
}{
}{
  template dump "typeDump.html.galgasTemplate"
    ?@string PROJECT_NAME
    ?@unifiedTypeMap GLOBAL_TYPE_MAP
    ?@stringset FIRST_LETTER_SET
    ?@string TABLE_OF_TYPES_STRING
    ?@routineMapForContext ALL_ROUTINE_MAP
    ?@infixOperatorMap INFIX_OPERATOR_MAP
    ?@prefixOperatorMap PREFIX_OPERATOR_MAP
    ?@assignmentOperatorMap ASSIGNMENT_OPERATOR_MAP
}

#·······················································································································

func linkForHTMLTypeMap ?let @string inTypeName -> @string {
  result = "<a class=\"header_link\" href=\"#" + inTypeName + "\">" + inTypeName + "</a>"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  LLVM TYPE GENERATION                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc declareLLVMTypes
  ?let @userLLVMTypeDefinitionListIR inUserLLVMTypeDefinitionListIR
  ?!@string ioLLVMcode
{
#--- Generate LLVM type definition (using forward type is allowed for pointers)
  ioLLVMcode += llvmTitleComment (!"User Defined Types")
  ioLLVMcode += "%ptrtype = type i8* ; Generic pointer type for dynamic objects\n"
  for (type) in inUserLLVMTypeDefinitionListIR do
    [type generateLLVMType !?ioLLVMcode]
  end
  ioLLVMcode += "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! USER LLVM TYPE DEFINITION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract class @userLLVMTypeDefinitionIR {
  @string mLLVMDefinedTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @userLLVMTypeDefinitionIR generateLLVMType ?!@string ioLLVMcode

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @userLLVMTypeDefinitionListIR {
  @userLLVMTypeDefinitionIR mType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
