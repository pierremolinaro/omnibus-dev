#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @sectionDeclarationListAST {
  @lstring mSectionName
  @bool mPublic
  @lstringlist mSectionAttributeList
  @procFormalArgumentList mSectionFormalArgumentList
  @lstring mReturnTypeName
  @instructionListAST mSectionInstructionList
  @location mEndOfSectionLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <section> ?!@sectionDeclarationListAST ioSectionListAST {
    @bool public
    select
      public = false
    or
      $public$
      public = true
    end
    $section$
    $identifier$ ?let sectionName
    @lstringlist attributeList = {}
    repeat
    while
      $attribute$ ?let attribute
      attributeList += !attribute
    end
    <procedure_formal_arguments> ?formalArguments:let sectionFormalArgumentList
    @lstring returnTypeName
    select
      returnTypeName = ["" here]
    or
      $->$
      $typeName$ ?returnTypeName
    end
    ${$
    @labelMap labelMap = {}
    <instructionList> ?let instructionList !?labelMap
    $}$
    ioSectionListAST +=
      !sectionName
      !public
      !attributeList
      !sectionFormalArgumentList
      !returnTypeName
      !instructionList
      !.here
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES IN PRECEDENCE GRAPH                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @sectionDeclarationListAST noteSectionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    for (* * formalArgumentTypeName *) in mSectionFormalArgumentList do
      let typeName = @lstring.new {!"$" + formalArgumentTypeName !formalArgumentTypeName.location}
      [!?ioGraph noteNode !typeName]
    end
    [mSectionInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @sectionDeclarationListAST enterInContext
  ?receiverType:let @string inReceiverTypeName
  ?!context:@semanticContext ioContext
{
  for section in self do
  #--- Signature
    var routineMangledName = if inReceiverTypeName == "" then
      section.mSectionName
    else
      @lstring.new {!inReceiverTypeName + "." + section.mSectionName !section.mSectionName.location}
    end
    @procedureSignature signature = {}
    routineMangledName.string += "("
    for (formalArgumentPassingMode selector formalArgumentTypeName *) in section.mSectionFormalArgumentList do
      let typeProxy = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !formalArgumentTypeName}
      signature += !formalArgumentPassingMode !selector.string !typeProxy
      routineMangledName.string += [formalArgumentPassingMode formalPassingModeString] + selector + ":"
    end
    routineMangledName.string += ")"
    let returnType = if section.mReturnTypeName.string == "" then
      @unifiedTypeMap-proxy.null
    else
      @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !section.mReturnTypeName}
    end
  #--- Attributes
    var mutating = false
    for (attribute) in section.mSectionAttributeList do
      if attribute.string == mutatingAttribute () then
        mutating = true    
      end
    end
  #--- Enter in context
    [!?ioContext.mRoutineMapForContext insertKey
      !routineMangledName
      !routineMangledName
      !section.mPublic
      !@modeMap {![userModeName () nowhere]}
      !signature
      !.section
      !false # Not weak
      !returnType
      !false # No appendFileAndLineArgumentForPanicLocation
      !mutating # canMutateProperties
      !true # canAccessPropertiesInUserMode
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @sectionDeclarationListAST sectionSemanticAnalysis
  ?receiverType:@unifiedTypeMap-proxy inReceiverType
  ?context:let @semanticContext inSemanticContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  for section in self do
    var mutating = false
    for (attribute) in section.mSectionAttributeList do
      if attribute.string == mutatingAttribute () then
        if mutating then
          error attribute : "duplicated @" + mutatingAttribute () + " attribute"
        end
        mutating = true    
      else
        error attribute : "unknown attribute; available attribute is @" + mutatingAttribute ()
      end
    end
    routineSemanticAnalysis (
      !receiverType:inReceiverType
      !.section
      !{!.new {!sectionModeName () !section.mSectionName.location}}
      !section.mSectionName
      !section.mSectionFormalArgumentList
      !returnTypeName:section.mReturnTypeName
      !section.mSectionInstructionList
      !section.mEndOfSectionLocation
      !directAccessToPropertiesAllowed:true
      !propertiesAreMutable:mutating
      !warnIfUnused:true
      !globalFunction:true
      !weakFunction:false
      !registerAccess:.readWriteAccess
      !context:inSemanticContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @routineMapIR sectionCodeGeneration
  ?!@string ioLLVMcode
  ?!@2stringlist ioSectionList
{
  for section in self do
    if section.mKind == .section then
      let sectionCallName = llvmNameForSectionCall (!section.mRoutineNameForGeneration.string)
      let sectionImplementationName = llvmNameForSectionImplementation (!section.mRoutineNameForGeneration.string)
      ioSectionList += !sectionCallName !sectionImplementationName
      ioLLVMcode += llvmTitleComment (!sectionCallName)
      ioLLVMcode += "declare"
      if section.mReturnType == .null then
        ioLLVMcode += " void"
      else
        ioLLVMcode += " " + [section.mReturnType llvmTypeName]
      end
      ioLLVMcode += " @" + sectionCallName + " ("
      for () in section.mFormalArgumentListForGeneration
      do
        switch mFormalArgumentKind
        case input :
          ioLLVMcode += [mFormalArgumentType llvmTypeName] + " %in." + mFormalArgumentName
        case output :
          ioLLVMcode += [mFormalArgumentType llvmTypeName] + " * %" + llvmNameForLocalVariable (!mFormalArgumentName)
       case inputOutput :
          ioLLVMcode += [mFormalArgumentType llvmTypeName] + " * %" + llvmNameForLocalVariable (!mFormalArgumentName)
        end
      between
        ioLLVMcode += ", "
      end
      ioLLVMcode += ")" + llvmAttributeFunction () + "\n\n"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateSectionDispatcher
  ?let @string inCurrentDirectory
  ?let @string inTargetName
  ?!@string ioAssemblerCode
  ?let @2stringlist inSectionList
{
  for (callName implementationName) in inSectionList do (idx)
    var s = getTargetTextFile (!currentDir:inCurrentDirectory !from:inTargetName + "/section-entry.s")
    s = [s stringByReplacingStringByString !"!ENTRY!" !callName]
    s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
    ioAssemblerCode += s
  end
  ioAssemblerCode += getTargetTextFile (!currentDir:inCurrentDirectory !from:inTargetName + "/section-dispatcher-header.s")
  for (* implementationName) in inSectionList do (idx)
    var s = getTargetTextFile (!currentDir:inCurrentDirectory !from:inTargetName + "/section-dispatcher-entry.s")
    s = [s stringByReplacingStringByString !"!ENTRY!" !implementationName]
    s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
    ioAssemblerCode += s
  end
  ioAssemblerCode += "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

