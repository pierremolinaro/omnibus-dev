#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    S E M A N T I C    A N A L Y S I S                                                                                *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc checkAssignmentCompatibility
  ?sourceType:let @unifiedTypeMap-proxy inSourceType
  ?targetType:let @unifiedTypeMap-proxy inTargetType
  ?errorLocation:let @location inErrorLocation
{
  if inTargetType != inSourceType then
    var ok = false
    if [[inSourceType kind] isBoolean] then
      ok = [[inTargetType kind] isInteger]    
    elsif [[inSourceType kind] isInteger] && [[inTargetType kind] isInteger] then
      [[inSourceType kind] integer ?min:let minSource ?max:let maxSource ?unsigned:* ?bitCount:*]
      [[inTargetType kind] integer ?min:let minTarget ?max:let maxTarget ?unsigned:* ?bitCount:*]
      ok = (minTarget <= minSource) && (maxTarget >= maxSource)
    end
    if not ok then
      error inErrorLocation
      : "object of type " + [inTargetType key] + " cannot be assigned from expression of type " + [inSourceType key]
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*

abstract method @abstractDeclaration semanticAnalysis
  ?context:let @semanticContext inContext
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct

#----------------------------------------------------------------------------------------------------------------------*

proc semanticAnalysis
  ?orderedDeclarationList:let @declarationListAST inDeclarationListAST
  ?procedureDeclarationList:let @procedureDeclarationListAST inProcedureListAST
  ?functionDeclarationList:let @functionDeclarationListAST inFunctionListAST
  ?initList:let @initList inInitListAST
  ?exceptionClauses:let @exceptionClauseListAST inExceptionClauses
  ?context:let @semanticContext inSemanticContext
  ?requiredProcList:let @requiredProcedureDeclarationListAST inRequiredProcedureDeclarationListAST
  ?endOfSourceFile:let @location inEndOfSourceFile
  ?staticStringMap:let @globalLiteralStringMap inGlobalLiteralStringMap
  !intermediateCode:@intermediateCodeStruct outIntermediateCodeStruct
{
  outIntermediateCodeStruct = .default
  outIntermediateCodeStruct.mGlobalLiteralStringMap = inGlobalLiteralStringMap
  for requiredProc in inRequiredProcedureDeclarationListAST do
    outIntermediateCodeStruct.mRequiredProcedureSet += !requiredProc.mRequiredProcedureName.string
  end 
  for (declaration) in inDeclarationListAST do
    [declaration semanticAnalysis
      !context:inSemanticContext
      !?intermediateCode:outIntermediateCodeStruct
     ]
  end
  @uint temporaryIndex = 0
  for procedure in inProcedureListAST do
    [procedure procedureSemanticAnalysis
      !context:inSemanticContext
      !?temporary:temporaryIndex
      !?intermediateCode:outIntermediateCodeStruct
    ]
  end
  for function in inFunctionListAST do
    [function functionSemanticAnalysis
      !context:inSemanticContext
      !?temporary:temporaryIndex
      !?intermediateCode:outIntermediateCodeStruct
    ]
  end
  for init in inInitListAST do
    [init initSemanticAnalysis
      !context:inSemanticContext
      !?temporary:temporaryIndex
      !?intermediateCode:outIntermediateCodeStruct
    ]
  end
  for exception in inExceptionClauses do
    [exception exceptionSemanticAnalysis
      !context:inSemanticContext
      !?temporary:temporaryIndex
      !?intermediateCode:outIntermediateCodeStruct
    ]
  end
#--- Check required procedure are defined
  for requiredProc in inRequiredProcedureDeclarationListAST do
    let requiredProcMangledName = mangledName (
      !forProcedureKind:.standAloneProc
      !procedureName:requiredProc.mRequiredProcedureName.string
      !formalArgumentList:requiredProc.mProcFormalArgumentList
    )
    if not [inSemanticContext.mProcedureMap hasKey !requiredProcMangledName] then
      var s = "the '" + requiredProc.mRequiredProcedureName + "' should be defined as: proc"
      for (mode) in requiredProc.mProcedureModeList do
        s += " $" + mode
      end
      s += " " + requiredProc.mRequiredProcedureName
      for arg in requiredProc.mProcFormalArgumentList do
        s += " "
        switch arg.mFormalArgumentPassingMode
        case input : s += "?"
        case output : s += "!"
        case inputOutput : s += "?!"
        end
        if arg.mSelector.string != "" then
          s += arg.mSelector.string + ":"
        end
        s += arg.mFormalArgumentTypeName.string
      end
      error inEndOfSourceFile : s
    else
      [inSemanticContext.mProcedureMap searchKey ![requiredProcMangledName nowhere] ?* ?let procModes ?2*]
      let actualProcModeSet = [procModes keySet]
      let requiredProcModeSet = @stringset.setWithLStringList{!requiredProc.mProcedureModeList}
      if actualProcModeSet != requiredProcModeSet then
        var s = "required modes:"
        for (mode) in requiredProcModeSet do
          s += " $" + mode
        end
        error [inSemanticContext.mProcedureMap locationForKey !requiredProcMangledName] : s
      end
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*
