#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                       
#    S E M A N T I C    A N A L Y S I S                                                                                 
#                                                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func checkAssignmentCompatibility
  ?source:let @objectIR inSourceValue
  ?targetAnnotationType:let @PLMType inOptionalTargetAnnotationType
  ?errorLocation:let @location inErrorLocation
  ?staticTypeAllowed:let @bool inStaticTypeAllowed
  -> @objectIR
{
  let sourceType = [inSourceValue type]
  if inOptionalTargetAnnotationType == sourceType then
    result = inSourceValue
  elsif [inOptionalTargetAnnotationType isVoid] then
    result = inSourceValue
  elsif [sourceType isStaticInteger] && [inOptionalTargetAnnotationType isInteger] then
    [inSourceValue literalInteger ?1* ?value:let value]
    [inOptionalTargetAnnotationType integer ?min:let minTarget ?max:let maxTarget ?3*]
    if (value < minTarget) || (maxTarget < value) then
      error inErrorLocation : "literal integer too large" : result
    else
      result = [inSourceValue withType !inOptionalTargetAnnotationType]
    end
  else
    error inErrorLocation
    : "object of type $" + [inOptionalTargetAnnotationType key]
      + " cannot be assigned from expression of type $" + [inSourceValue key]
    : result
  end
  if not inStaticTypeAllowed then
    if [result key] == staticIntegerTypeName () then
      error inErrorLocation : "the $" + staticIntegerTypeName () + " static type is not allowed here"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractDeclarationAST semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @semanticTemporariesStruct {
  @uint mTemporaryIndex
  @panicRoutinePriorityMap mPanicSetupRoutinePriorityMap 
  @panicRoutinePriorityMap mPanicLoopRoutinePriorityMap 
  @initRoutinePriorityMap mInitRoutinePriorityMap
  @bootRoutinePriorityMap mBootRoutinePriorityMap
  @subprogramInvocationGraph mSubprogramInvocationGraph
  @staticListInvokedFunctionSetMap mStaticArrayMapForTemporaries
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

setter @semanticTemporariesStruct newTempLLVMVar !@string outTempLLVMVar {
  outTempLLVMVar = "%temp." + mTemporaryIndex
  mTemporaryIndex ++
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc getNewTempVariable
  ?let @PLMType inType
  ?!@semanticTemporariesStruct ioTemporaries
  !@objectIR outTempVariable
{
  if inType == .void then
    outTempVariable = .null
  else
    [!?ioTemporaries newTempLLVMVar ?let llvmName]
    outTempVariable = .llvmValue {!type: inType !llvmName:llvmName}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc semanticAnalysis
  ?sourceFile:let @string inSourceFile
  ?ast:let @ast inAST
  ?context:let @semanticContext inSemanticContext
  ?endOfSourceFile:let @location inEndOfSourceFile
  ?staticStringMap:let @staticStringMap inGlobalLiteralStringMap
  !intermediateCode:@intermediateCodeStruct outIntermediateCodeStruct
{
  outIntermediateCodeStruct = .default
  outIntermediateCodeStruct.mTargetParameters = inSemanticContext.mTargetParameters
  outIntermediateCodeStruct.mStaticStringMap = inGlobalLiteralStringMap
  outIntermediateCodeStruct.mGlobalTaskVariableList = inSemanticContext.mGlobalTaskVariableList
  for requiredProc in inAST.mRequiredProcListAST do
    let requiredProcedureMangledName = routineMangledNameFromAST (!"" !requiredProc.mName !requiredProc.mFormalArgumentList)
    outIntermediateCodeStruct.mRequiredProcedureSet += !requiredProcedureMangledName.string
  end 
#--- Global variables
  for globalVar in inAST.mGlobalVarDeclarationListAST do
    [globalVar semanticAnalysis
      !context:inSemanticContext
      !?intermediateCode:outIntermediateCodeStruct
     ]
  end
#---
  @semanticTemporariesStruct temporaries = .default
  for (declaration) in inAST.mDeclarationListAST do
    [declaration semanticAnalysis
      !context:inSemanticContext
      !?temporary:temporaries
      !?intermediateCode:outIntermediateCodeStruct
     ]
  end
  [inAST.mStandAloneFunctionDeclarationListAST functionSemanticAnalysis
    !receiverType:.void
    !context:inSemanticContext
    !?temporary:temporaries
    !?intermediateCode:outIntermediateCodeStruct
  ]
  [inAST.mTaskListAST semanticAnalysis
    !context:inSemanticContext
    !?temporary:temporaries
    !?intermediateCode:outIntermediateCodeStruct
  ]
  [inAST.mStandAloneSystemRoutineListAST systemRoutineSemanticAnalysis
    !receiverType:.void
    !context:inSemanticContext
    !?temporary:temporaries
    !?intermediateCode:outIntermediateCodeStruct
  ]
  [inAST.mGuardListAST guardSemanticAnalysis
    !receiverType:.void
    !context:inSemanticContext
    !?temporary:temporaries
    !?intermediateCode:outIntermediateCodeStruct
  ]
  [inAST.mExternProcListAST externProcedureSemanticAnalysis
    !context:inSemanticContext
    !?temporary:temporaries
    !?intermediateCode:outIntermediateCodeStruct
  ]
  [inAST.mISRDeclarationListAST isrSemanticAnalysis
    !context:inSemanticContext
    !?temporary:temporaries
    !?intermediateCode:outIntermediateCodeStruct
  ]
  for boot in inAST.mBootListAST do
    [boot bootSemanticAnalysis
      !context:inSemanticContext
      !?temporary:temporaries
      !?intermediateCode:outIntermediateCodeStruct
    ]
  end
  for init in inAST.mInitListAST do
    [init initSemanticAnalysis
      !context:inSemanticContext
      !?temporary:temporaries
      !?intermediateCode:outIntermediateCodeStruct
    ]
  end
#--- Generate panic clauses
  for panic in inAST.mPanicClauseListAST do
    [panic panicSemanticAnalysis
      !context:inSemanticContext
      !?temporary:temporaries
      !?intermediateCode:outIntermediateCodeStruct
    ]
  end
#--- Check required procedure are defined
  checkRequiredProcedures (
    !ast:inAST
    !context:inSemanticContext
    !endOfSourceFile:inEndOfSourceFile
  )
#--- Print procedure invocation graph
  if (@uint.errorCount == 0) && [option plm_options.writeRoutineInvocationGraphFile value] then
    let s = [temporaries.mSubprogramInvocationGraph graphviz]
    let filePath = [inSourceFile stringByDeletingPathExtension] + ".routineInvocation.dot"
    [s writeToFileWhenDifferentContents !filePath ?*]
  end
#--- Check procedure invocation graph
  if (@uint.errorCount == 0) && not [option plm_options.doNotDetectRecursiveCalls value] then
    let undefinedNodeKeyList = [temporaries.mSubprogramInvocationGraph undefinedNodeKeyList]
    if [undefinedNodeKeyList length] > 0 then
        var s = "subprogram invocation graph error, undefined nodes:"
        for (str) in undefinedNodeKeyList do
          s += "\n - " + str
        end
        error inEndOfSourceFile : s
    else
      [temporaries.mSubprogramInvocationGraph circularities
         ?let @lstringlist unused unsortedInformationList
         ?let @lstringlist unsortedLKeyList
      ]
      if [unsortedLKeyList length] > 0 then
        var s = "the following routines are recursive:"
        for (str) in unsortedLKeyList do
          s += "\n - " + str
        end
        error inEndOfSourceFile : s
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
