#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                       
#    S E M A N T I C    A N A L Y S I S                                                                                 
#                                                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func checkAssignmentCompatibility
  ?let @assignmentOperatorMap inAssignmentOperatorMap
  ?source:let @objectIR inSourceValue
  ?targetAnnotationType:let @omnibusType inOptionalTargetAnnotationType
  ?errorLocation:let @location inErrorLocation
  ?staticTypeAllowed:let @bool inStaticTypeAllowed
  -> @objectIR
{
  if [inOptionalTargetAnnotationType.kind isVoid] then
    result = inSourceValue
  elsif inStaticTypeAllowed then
    result = [inSourceValue withType !inOptionalTargetAnnotationType]
  else
    let key = assignmentOperatorKey (!inOptionalTargetAnnotationType !.nowhere ![inSourceValue type])
    [inAssignmentOperatorMap searchKey !key ?*]
    result = [inSourceValue withType !inOptionalTargetAnnotationType]
#    [!?ioInstructionGenerationList appendAssignmentIR
#      !?ioTemporaries
#      !inContext.mAssignmentOperatorMap
#      !?ioAllocaList
#      !targetType
#      !targetReference_llvmName
#      !expressionResult
#      !sliceWidthStr.location
#    ]
#setter @instructionListIR appendAssignmentIR
#    ?!@semanticTemporariesStruct ioTemporaries
#    ?let @assignmentOperatorMap inAssignmentOperatorMap
#    ?!@allocaList ioAllocaList
#    ?let @omnibusType inTargetType
#    ?let @string inTargetLLVMName
#    ?let @objectIR inSourcePossibleReference
#    ?let @location inErrorLocation



#    if inOptionalTargetAnnotationType.omnibusTypeDescriptionName == sourceType.omnibusTypeDescriptionName then
#      result = inSourceValue
#    elsif [sourceType.kind isCompileTimeInteger] && [inOptionalTargetAnnotationType.kind isInteger] then
#      [inSourceValue literalInteger ?1* ?value:let value]
#      [inOptionalTargetAnnotationType.kind integer ?min:let minTarget ?max:let maxTarget ?2*]
#      if (value < minTarget) || (maxTarget < value) then
#        error inErrorLocation : "literal integer too large" : result
#      else
#        result = [inSourceValue withType !inOptionalTargetAnnotationType]
#      end
#    else
#      error inErrorLocation
#      : "object of type " + inOptionalTargetAnnotationType.omnibusTypeDescriptionName
#        + " cannot be assigned from expression of type " + [inSourceValue omnibusTypeDescriptionName]
#      : result
#    end
  end

  if not inStaticTypeAllowed then
    if [result omnibusTypeDescriptionName] == ctIntegerTypeName () then
      error inErrorLocation : "the " + ctIntegerTypeName () + " compile time type is not allowed here"
    elsif [result omnibusTypeDescriptionName] == ctBoolTypeName () then
      result = [inSourceValue withType !boolType ()]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractDecoratedDeclaration semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @semanticTemporariesStruct {
  @uint mTemporaryIndex
  @panicRoutinePriorityMap mPanicSetupRoutinePriorityMap 
  @panicRoutinePriorityMap mPanicLoopRoutinePriorityMap 
  @staticListInvokedFunctionSetMap mStaticArrayMapForTemporaries
  @stringset mInitializedDriverSet
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

setter @semanticTemporariesStruct newTempLLVMVar !@string outTempLLVMVar {
  outTempLLVMVar = "%temp." + self.mTemporaryIndex
  self.mTemporaryIndex ++
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc getNewTempValue
  ?let @omnibusType inType
  ?!@semanticTemporariesStruct ioTemporaries
  !@objectIR outTempVariable
{
  if inType.kind == .void then
    outTempVariable = .void
  else
    [!?ioTemporaries newTempLLVMVar ?let llvmName]
    outTempVariable = .llvmValue {!type: inType !llvmName:llvmName}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc getNewTempReference
  ?let @omnibusType inType
  ?!@semanticTemporariesStruct ioTemporaries
  !@objectIR outTempVariable
{
  if inType.kind == .void then
    outTempVariable = .void
  else
    [!?ioTemporaries newTempLLVMVar ?let llvmName]
    outTempVariable = .reference {!type: inType !llvmName:llvmName}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc semanticAnalysis
  ?sourceFile:let @string unused inSourceFile
  ?ast:let @ast inAST
  ?allSourceFilePaths:let @stringset inSourceFileAbsolutePathSet
  ?decoratedDeclarationList:let @declarationDecorationList inDecoratedDeclarationList
  ?decoratedRoutineList: let @decoratedRegularRoutineList inDecoratedRoutineList
  ?routineListIR:let @routineListIR inRoutineListIR
  ?context:let @semanticContext inSemanticContext
  ?endOfSourceFile:let @location inEndOfSourceFile
  ?staticEntityMap:let @staticEntityMap inStaticEntityMap
  !intermediateCode:@intermediateCodeStruct outIntermediateCodeStruct
{
  outIntermediateCodeStruct = .default
  outIntermediateCodeStruct.mRoutineListIR = inRoutineListIR
  outIntermediateCodeStruct.mTargetParameters = inSemanticContext.mTargetParameters
  outIntermediateCodeStruct.mStaticEntityMap = inStaticEntityMap
  outIntermediateCodeStruct.mGlobalTaskVariableList = inSemanticContext.mGlobalTaskVariableList
#---
  @semanticTemporariesStruct temporaries = .default
  for (declaration) in inDecoratedDeclarationList do
    [declaration semanticAnalysis
      !context:inSemanticContext
      !?temporary:temporaries
      !?intermediateCode:outIntermediateCodeStruct
     ]
  end
#  log inDecoratedRoutineList
  [inDecoratedRoutineList routineSemanticAnalysis
    !context:inSemanticContext
    !?temporary:temporaries
    !?intermediateCode:outIntermediateCodeStruct
   ]
  [inAST.mExternFunctionListAST externProcedureSemanticAnalysis
    !context:inSemanticContext
    !?temporary:temporaries
    !?intermediateCode:outIntermediateCodeStruct
  ]
#--- Add panic routines
  appendPanicRoutines (
    !allSourceFilePaths:inSourceFileAbsolutePathSet
    !?intermediateCode:outIntermediateCodeStruct
  )
#--- Check required procedure are defined
  checkRequiredProcedures (
    !ast:inAST
    !context:inSemanticContext
    !endOfSourceFile:inEndOfSourceFile
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
