#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @foreverInstructionAST : @instructionAST {
  @instructionListAST mWhileInstructionList
  @location mEndOf_while_instruction
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $forever$
    <instructionList> ?let instructionList
    let endOfInstruction = @location.here
    $end$
    ioInstructionList += !@foreverInstructionAST.new {
      !instructionList
      !endOfInstruction
    }
  }
  
  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @foreverInstructionAST analyze
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Analyze instruction list
  [!?ioVariableMap openOverrideForRepeatBlock]
  @instructionListIR instructionGenerationList = {}
  [mWhileInstructionList analyzeBranchInstructionList
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !endOfInstructionList:mEndOf_while_instruction
    !optionalReceiverType:inReceiverType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:instructionGenerationList
  ]
  [!?ioVariableMap closeOverride !mEndOf_while_instruction]
#--- Code generation
  ioInstructionGenerationList += !@foreverInstructionGeneration.new {
    !instructionGenerationList
  }
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

class @foreverInstructionGeneration : @abstractInstructionIR {
  @instructionListIR mInstructionGenerationList
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @foreverInstructionGeneration instructionCode -> @string outCode {
  outCode = "while (1) {\n"
  outCode += [mInstructionGenerationList instructionListCode]
  outCode += "}\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @foreverInstructionGeneration enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities]
}

#----------------------------------------------------------------------------------------------------------------------*
