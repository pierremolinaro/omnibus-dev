#—————————————————————————————————————————————————————————————————————————————————————————————————
#   PREFIX OPERATOR MAP
#—————————————————————————————————————————————————————————————————————————————————————————————————

map @prefixOperatorMap {
  public var @omnibusType mReceiverType
  public var @omnibusType mResultType
  public var @prefixOperatorUsage mOperator
  insert insertKey error message "the '%K' infix operator is already declared in %L"
  search searchKey error message "there is no '%K' infix operator"
}

#·······················································································································

abstract class @prefixOperatorUsage { }

#·······················································································································

abstract method @prefixOperatorUsage generateCode
  ?let @objectIR inReceiverOperand
  ?let @location inOperatorLocation
  ?let @omnibusType inResultType
  ?noPanicCode: let @bool inDoNotGeneratePanicCode
  ?safeMode: let @bool inSafeMode
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@instructionListIR ioInstructionGenerationList
  !@objectIR outResultValue

#—————————————————————————————————————————————————————————————————————————————————————————————————

method @prefixOperatorMap generatePrefixOperatorCode
  ?let @objectIR inReceiverOperand
  ?let @prefixOperator inPrefixOperator
  ?let @location inOperatorLocation
  ?safeMode: let @bool inSafeMode
  ?noPanicCode: let @bool inDoNotGeneratePanicCode
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@instructionListIR ioInstructionGenerationList
  !@objectIR outResultValue
{
##--- Is operator allowed in safe mode ?
#  if inSafeMode then
#    switch inPrefixOperator 
#    case minusNoOvf, notOp, bitWiseComplement :
#    case minusOp :
#      error inOperatorLocation : "this operator is not allowed in safe mode"
#    end
#  end
##--- Do not generate panic code ?
#  var prefixOperator = inPrefixOperator
#  if inDoNotGeneratePanicCode then
#    switch inPrefixOperator 
#    case minusNoOvf, notOp, bitWiseComplement :
#    case minusOp :
#      prefixOperator = .minusNoOvf
#    end
#  end
#---
  let key = prefixOperatorMapKey (![inReceiverOperand type] !inPrefixOperator !inOperatorLocation)
  [self searchKey !key ?1* ?let resultType ?let operatorUsage]
  [operatorUsage generateCode
    !inReceiverOperand
    !inOperatorLocation
    !resultType
    !noPanicCode: inDoNotGeneratePanicCode
    !safeMode: inSafeMode
    !?ioTemporaries
    !?ioInstructionGenerationList
    ?outResultValue
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

