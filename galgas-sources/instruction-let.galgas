#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @letInstructionWithAssignmentAST : @instructionAST {
  @lstring mConstantName
  @lstring mOptionalTypeName
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $let$
    $identifier$ ?let varName
    @lstring optionalTypeName
    select
      optionalTypeName = ["" nowhere]
    or
      $\$type$ ?optionalTypeName
    end
    $=$
    <expression> ?let @expressionAST expression
    ioInstructionList += !@letInstructionWithAssignmentAST.new {
      !varName.location
      !varName
      !optionalTypeName
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @letInstructionWithAssignmentAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  if mOptionalTypeName.string != "" then
    let typeName = llvmRegularTypeMangledNameFromName (!mOptionalTypeName)
    [!?ioGraph noteNode !typeName]
  end
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @letInstructionWithAssignmentAST analyze
  ?self:let @PLMType inSelfType
  ?propertiesAreMutable:let @bool unused inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool unused inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  let @PLMType targetType = if mOptionalTypeName.string == ""
    then .void
    else [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mOptionalTypeName} type]
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:targetType
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:let @objectIR expressionResultPossibleReference
  ]
  [!?ioInstructionGenerationList appendLoadFromReference
    !?ioTemporaries
    !expressionResultPossibleReference
    !mConstantName
    ?let expressionResult
  ]  
#--- Declare local constant
  var result = checkAssignmentCompatibility (
    !source:expressionResult
    !targetAnnotationType:targetType
    !errorLocation:mConstantName.location
    !staticTypeAllowed:true
  )
  drop targetType
#---
  if not [[result type] instanciable] then
    error mConstantName : "$" + [result key] + " type is not instanciable" : result
  end
#--- Declare local constant
  let varPLMName = @lstring.new {!mConstantName.string + "." + ioTemporaries.mTemporaryIndex !mConstantName}
  ioTemporaries.mTemporaryIndex ++
  if [result key] != staticIntegerTypeName () then
    ioAllocaList += !varPLMName ![[result type] llvmTypeName]
    let localConstant = @objectIR.localVariableReference {!type:[result type] !plmName:varPLMName}
    [!?ioInstructionGenerationList appendStoreFromReference !localConstant !mConstantName !result]
  end
  [!?ioUniversalMap insertLocalConstant !mConstantName !expressionResult]
#  [!?ioVariableMap insertConstant
#    !lkey:mConstantName
#    !type:[result type]
#    !readAccessAllowed:true
#    !objectIR:expressionResult
#    !copyable:[[result type] copyable]
#    !canBeUsedAsInputParameter:true
#  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
