#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @letInstructionWithAssignmentAST : @instructionAST {
  @lstring mConstantName
  @lstring mOptionalTypeName
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    $let$
    $identifier$ ?let varName
    @lstring optionalTypeName
    select
      optionalTypeName = ["" nowhere]
    or
      <type_definition> !?ioAST ?optionalTypeName
    end
    $=$
    <expression> !?ioAST ?let @expressionAST expression
    ioInstructionList += !@letInstructionWithAssignmentAST.new {
      !varName.location
      !varName
      !optionalTypeName
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @letInstructionWithAssignmentAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  if mOptionalTypeName.string != "" then
    [!?ioGraph noteNode !mOptionalTypeName]
  end
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @letInstructionWithAssignmentAST instructionSemanticAnalysis
  ?self:let @PLMType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?safe:let @bool inIsSafe
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  let @PLMType targetType = if mOptionalTypeName.string == ""
    then voidType ()
    else [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mOptionalTypeName} type]
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:targetType
    !context:inContext
    !mode:inCurrentMode
    !safe: inIsSafe
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR expressionResult
  ]
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?expressionResult
  ]  
#--- Declare local constant
  var result = checkAssignmentCompatibility (
    !source:expressionResult
    !targetAnnotationType:targetType
    !errorLocation:mConstantName.location
    !staticTypeAllowed:true
  )
  drop targetType
#---
  if not [[result type] instanciable] then
    error mConstantName : [result plmTypeDescriptionName] + " type is not instanciable" : result
  end
#--- Declare local constant
  let plmName = @lstring.new {!mConstantName.string + "." + ioTemporaries.mTemporaryIndex !mConstantName}
  ioTemporaries.mTemporaryIndex ++
  if [result plmTypeDescriptionName] != staticIntegerTypeName () then
    ioAllocaList += !llvmNameForLocalVariable (!plmName) ![result type] !false
    [!?ioInstructionGenerationList appendStoreTemporaryReference
      ![result type]
      !llvmNameForLocalVariable (!plmName)
      !result
    ]
  end
  [!?ioUniversalMap insertLocalConstant !mConstantName !false ![result type] !plmName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
