#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @letInstructionWithAssignmentAST : @instructionAST {
  @lstring mVarName
  @lstring mOptionalTypeName
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $let$
    $identifier$ ?let varName
    @lstring optionalTypeName
    select
      optionalTypeName = ["" nowhere]
    or
      $typeName$ ?optionalTypeName
    end
    $=$
    <expression> ?let @expressionAST expression
    ioInstructionList += !varName.location !@letInstructionWithAssignmentAST.new {
      !varName
      !optionalTypeName
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @letInstructionWithAssignmentAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  if mOptionalTypeName.string != "" then
    let typeName = @lstring.new {!"$" + mOptionalTypeName !mOptionalTypeName.location}
    [!?ioGraph noteNode !typeName]
  end
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @letInstructionWithAssignmentAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?propertiesAreMutable:let @bool unused inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  let @unifiedTypeMap-proxy targetType = if mOptionalTypeName.string == ""
    then .null
    else .searchKey {!inContext.mTypeMap !mOptionalTypeName}
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:targetType
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:let @operandIR expressionResult
  ]
#--- Declare local constant
  let result = checkAssignmentCompatibility (
    !source:expressionResult
    !targetAnnotationType:targetType
    !errorLocation:mVarName.location
    !staticTypeAllowed:true
  )
  drop targetType, expressionResult
#---
  if not [result.mType instantiable] then
    error mVarName : "$" + [result.mType key] + " type is not instanciable"
  end
#--- Declare local constant
  let varLLVMName = mVarName.string + "." + ioTemporaries.mTemporaryIndex
  ioTemporaries.mTemporaryIndex ++
  let localConstant = @objectInMemoryIR.localValue {!type:result.mType !name:varLLVMName}
  [!?ioVariableMap insertConstant
    !lkey:mVarName
    !type:result.mType
    !readAccessAllowed:true
    !variableKind:localConstant
    !copyable:[result.mType copyable]
    !fieldMap:{}
    !canBeUsedAsInputParameter:true
  ]
#--- Generate code
  ioAllocaList += !varLLVMName !result.mType
  [!?ioInstructionGenerationList appendStoreInMemory !localConstant !result]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
