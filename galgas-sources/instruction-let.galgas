#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @letInstructionWithAssignmentAST : @instructionAST {
  @lstring mVarName
  @lstring mOptionalTypeName
  @expressionAST mSourceExpression
}

#----------------------------------------------------------------------------------------------------------------------*

#class @varInstructionAST : @instructionAST {
#  @lstring mVarName
#  @lstring mTypeName
#}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $let$
    $identifier$ ?let varName
    @lstring optionalTypeName
    select
      optionalTypeName = ["" nowhere]
    or
      $typeName$ ?optionalTypeName
    end
    $=$
    <expression> ?let @expressionAST expression
    ioInstructionList += !@letInstructionWithAssignmentAST.new {
      !varName
      !optionalTypeName
      !expression
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

#  rule <instruction> ?!@instructionListAST ioInstructionList {
#    $let$
#    $identifier$ ?let varName
#    $:$
#    $identifier$ ?let typeName
#    ioInstructionList += !@varInstructionAST.new {
#      !varName
#      !typeName
#    }
#  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @letInstructionWithAssignmentAST analyze
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  let @unifiedTypeMap-proxy targetType = if mOptionalTypeName.string == ""
    then .null
    else .searchKey {!inContext.mTypeMap !mOptionalTypeName}
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalReceiverType:inReceiverType
    !optionalTargetType:targetType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?expressionType:let inferredType
    ?result:let @variableKindIR resultValueName
  ]
#--- Declare local constant
  let targetConstant = @variableKindIR.localConstant {!name:mVarName}
  [!?ioVariableMap insertLocalConstant
    !mVarName
    !inferredType
    !true
    !mangledNameForLocalVariable (!name:mVarName.string)
    !targetConstant
    ![inferredType copiable]
    !{}
    !true
  ]
#--- Code generation
  ioInstructionGenerationList += !@letInstructionWithAssignmentIR.new {
    !inferredType
    !targetConstant
    !resultValueName
  }
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

class @letInstructionWithAssignmentIR : @abstractInstructionIR {
  @unifiedTypeMap-proxy mTargetType
  @variableKindIR mTargetConstantIR
  @variableKindIR mSourceIR
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @letInstructionWithAssignmentIR instructionCode -> @string outCode {
  outCode = "const " + mangledNameForType (!name:[mTargetType key]) + " "
          + [mTargetConstantIR mangledName]
          + " = "
          + [mSourceIR mangledName] + " ;\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @letInstructionWithAssignmentIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mTargetConstantIR enterAccessibleEntities !?ioAccessibleEntities]
  [mSourceIR enterAccessibleEntities !?ioAccessibleEntities]
}

#----------------------------------------------------------------------------------------------------------------------*
