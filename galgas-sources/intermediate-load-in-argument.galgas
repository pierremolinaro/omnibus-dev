
setter @instructionListIR appendLoadInArgument
  ?let @operandIR inTargetValue
  ?let @string inRegisterName
  ?let @unifiedTypeMap-proxy inTargetVarType
{
  self += !@loadInArgumentIR.new {!inTargetValue !inRegisterName !inTargetVarType}
}

#----------------------------------------------------------------------------------------------------------------------*

class @loadInArgumentIR : @abstractInstructionIR {
  @operandIR mTargetValue
  @string mVariableName
  @unifiedTypeMap-proxy mVariableType
}

#----------------------------------------------------------------------------------------------------------------------*

override method @loadInArgumentIR llvmInstructionCode ?!@string ioCode {
  let llvmType = [mVariableType llvmType]
  ioCode += "  " + mTargetValue + " = load "
  ioCode += llvmType + ", " + llvmType + "* %" + mangledNameForInArgument (!mVariableName) + "\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @loadInArgumentIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  ioAccessibleEntities.mGlobalVariableSet += !mVariableName
}


#----------------------------------------------------------------------------------------------------------------------*
