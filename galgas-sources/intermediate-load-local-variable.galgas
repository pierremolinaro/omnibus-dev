
setter @instructionListIR appendLoadLocalVariable
  ?let @valueIR inTargetValue
  ?let @string inRegisterName
  ?let @unifiedTypeMap-proxy inTargetVarType
{
  self += !@loadLocalVariableIR.new {!inTargetValue !inRegisterName !inTargetVarType}
}

#----------------------------------------------------------------------------------------------------------------------*

class @loadLocalVariableIR : @abstractInstructionIR {
  @valueIR mTargetValue
  @string mVariableName
  @unifiedTypeMap-proxy mVariableType
}

#----------------------------------------------------------------------------------------------------------------------*

override method @loadLocalVariableIR llvmInstructionCode
  ?!@string ioCode
  ?let @generationContext unused inGenerationContext
  ?!@stringset unused ioIntrinsicsDeclarationSet
{
  let llvmType = [mVariableType llvmTypeName]
  ioCode += "  " + mTargetValue + " = load "
  ioCode += llvmType + ", " + llvmType + "* %" + mangledNameForLocalVariable (!mVariableName) + "\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @loadLocalVariableIR enterAccessibleEntities ?!@accessibleEntities unused ioAccessibleEntities {
}


#----------------------------------------------------------------------------------------------------------------------*
