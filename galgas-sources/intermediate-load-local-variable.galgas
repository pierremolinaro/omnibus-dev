
setter @instructionListIR appendLoadLocalVariable
  ?let @operandIR inTargetValue
  ?let @string inVariableName
{
  self += !@loadLocalVariableIR.new {!inTargetValue !inVariableName}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @loadLocalVariableIR : @abstractInstructionIR {
  @operandIR mTargetValue
  @string mVariableName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @loadLocalVariableIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let llvmType = [mTargetValue.mType llvmTypeName]
  ioLLVMcode += "  " + [mTargetValue.mValue llvmName] + " = load "
  ioLLVMcode += llvmType + ", " + llvmType + "* %" + llvmNameForLocalVariable (!mVariableName) + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @loadLocalVariableIR enterAccessibleEntities ?!@accessibleEntities unused ioAccessibleEntities {
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
