
setter @instructionListIR appendShiftLeft
  ?let @valueIR inResult
  ?let @valueIR inSource
  ?let @uint inShiftAmount
{
  self += !@leftShiftIR.new {!inResult !inSource !inShiftAmount}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @leftShiftIR : @abstractInstructionIR {
  @valueIR mResult
  @valueIR mSource
  @uint mShiftAmount
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @leftShiftIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "  " + [mResult llvmName] + " = "
#  [[mSource.mType kind] integer ?min:* ?max:* ?unsigned:let sourceIsUnsigned ?bitCount:*]
#  ioLLVMcode += if sourceIsUnsigned then "zext" else "sext" end
  ioLLVMcode += "shl " + [mSource  llvmTypeName] + " " + [mSource llvmName] + ", " + mShiftAmount + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @leftShiftIR enterAccessibleEntities
  ?!@accessibleEntities unused ioAccessibleEntities
  ?!@uint unused ioMaxBranchOfOnInstructions
{
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
