
setter @instructionListIR appendLoadIndirectVolatileRegister
  ?let @objectIR inTargetValue
  ?let @string inLLVMName
{
  self += !@loadIndirectVolatileIR.new {!inTargetValue !inLLVMName}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @loadIndirectVolatileIR : @abstractInstructionIR {
  public var @objectIR mTargetValue
  public var @string mLLVMName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @loadIndirectVolatileIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let llvmType = [self.mTargetValue llvmTypeName]
  let ptr = "%registerPointer." + ioGenerationAdds.mUniqueIndex
  ioGenerationAdds.mUniqueIndex ++
  ioLLVMcode += "  " + ptr + " = inttoptr i32 " + self.mLLVMName + " to " + llvmType + "* ;\n"
  ioLLVMcode += "  " + [self.mTargetValue llvmName] + " = load volatile " + llvmType + ", " + llvmType
         + "* " + ptr + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
