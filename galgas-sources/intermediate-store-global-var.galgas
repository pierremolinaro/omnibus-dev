
setter @instructionListIR appendStoreGlobalVariable
  ?let @string inGlobalVarName
  ?let @unifiedTypeMap-proxy inTargetVarType
  ?let @operandIR inSourceValue
  ?volatile:let @bool inIsVolatile
{
  self += !@storeGlobalVariableIR.new {!inGlobalVarName !inTargetVarType !inSourceValue !inIsVolatile}
}

#----------------------------------------------------------------------------------------------------------------------*

class @storeGlobalVariableIR : @abstractInstructionIR {
  @string mGlobalVarName
  @unifiedTypeMap-proxy mTargetVarType
  @operandIR mSourceValue
  @bool mIsVolatile
}

#----------------------------------------------------------------------------------------------------------------------*

override method @storeGlobalVariableIR llvmInstructionCode
  ?!@string ioCode
  ?!@stringset unused ioIntrinsicsDeclarationSet
{
  let llvmType = [mTargetVarType llvmType]
  ioCode += "  store "
  if mIsVolatile then
    ioCode += "volatile "
  end
  ioCode += llvmType + " " + mSourceValue + ", " + llvmType + "* @" + mangledNameForGlobalVariable (!mGlobalVarName) + "\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @storeGlobalVariableIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  ioAccessibleEntities.mGlobalVariableSet += !mGlobalVarName
}

#----------------------------------------------------------------------------------------------------------------------*
