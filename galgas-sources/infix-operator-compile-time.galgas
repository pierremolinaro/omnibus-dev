#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @compileTimeInfixOperatorEnumeration %equatable {
 case equal          # ==
 case lessThan       # <

 case bitWiseAndOp      # &
 case bitWiseOrOp       # |
 case bitWiseXorOp      # ^

 case addOp             # +
 case subOp            # -
 case mulOp            # *
 case divOp             # /
 case modOp          # mod

 case divNoOvf        # &/
 case moduloNoOvf     # &%
 case leftShift       # <<
 case rightShift      # >>
}

#·······················································································································

getter @compileTimeInfixOperatorEnumeration string -> @string {
 switch self
 case equal     : result = "=="
 case lessThan : result = "<"
 case bitWiseAndOp : result = "&"
 case bitWiseOrOp : result = "|"
 case bitWiseXorOp : result = "^"
 case addOp     : result = "+"
 case subOp     : result = "-"
 case mulOp      : result = "*"
 case divOp     : result = "/"
 case divNoOvf  : result = "!&"
 case modOp    : result = "%"
 case moduloNoOvf: result = "!%"
 case leftShift  : result = "<<"
 case rightShift : result = ">>"
 end
}

#·······················································································································

getter @compileTimeInfixOperatorEnumeration omnibusInfixOperator -> @omnibusInfixOperator {
 switch self
 case equal     : result = .equal
 case lessThan : result = .lessThan
 case bitWiseAndOp : result = .bitWiseAndOp
 case bitWiseOrOp : result = .bitWiseOrOp
 case bitWiseXorOp : result = .bitWiseXorOp
 case addOp     : result = .addOp
 case subOp     : result = .subOp
 case mulOp     : result = .mulOp
 case divOp     : result = .divOp
 case divNoOvf  : result = .divOpNoOvf
 case modOp    : result = .modOp
 case moduloNoOvf: result = .modOpNoOvf
 case leftShift  : result = .leftShiftOp
 case rightShift : result = .rightShiftOp
 end
}

#·······················································································································

refclass @compileTimeInfixOperatorAST : @abstractDeclarationAST {
  public var @compileTimeInfixOperatorEnumeration mInfixOperator
  public var @location mInfixOperatorLocation
  public var @lstring mLeftOperandName
  public var @lstring mLeftTypeName
  public var @lstring mRightOperandName
  public var @lstring mRightTypeName
  public var @ctExpressionAST mExpression
  public var @lstring mResultTypeName
}

#·······················································································································

override getter @compileTimeInfixOperatorAST locationForErrorSignaling -> @location outLocation {
  outLocation = self.mInfixOperatorLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <compileTimeInfixOperator> !@compileTimeInfixOperatorEnumeration outOperator {
    select
      $==$
      outOperator = .equal
    or
      $<$
      outOperator = .lessThan
    or
      $&$
      outOperator = .bitWiseAndOp
    or
      $|$
      outOperator = .bitWiseOrOp
    or
      $^$
      outOperator = .bitWiseXorOp
    or
      $+$
      outOperator = .addOp
    or
      $-$
      outOperator = .subOp
    or
      $*$
      outOperator = .mulOp
    or
      $/$
      outOperator = .divOp
    or
      $!/$
      outOperator = .divNoOvf
    or
      $%$
      outOperator = .modOp
    or
      $!%$
      outOperator = .moduloNoOvf
    or
      $<<$
      outOperator = .leftShift
    or
      $>>$
      outOperator = .rightShift
    end
  }
  
  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $compiletime$
    $func$
    $($
    $identifier$ ?let leftArgument
    $\$type$ ?let leftType
    $)$
    let operationLocation = @location.here
    <compileTimeInfixOperator> ?let infixOperator
    $($
    $identifier$ ?let rightArgument
    $\$type$ ?let rightType
    $)$
    $->$
    $\$type$ ?let resultType
    ${$
    <compile_time_expression> ?let @ctExpressionAST expression
    $}$
    ioAST.mDeclarationListAST += !@compileTimeInfixOperatorAST.init {
      !infixOperator
      !operationLocation
      !leftArgument
      !leftType
      !rightArgument
      !rightType
      !expression
      !resultType
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @compileTimeInfixOperatorAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let nodeName = @lstring.init {![self.mInfixOperator string] + "." + self.mLeftTypeName + "." + self.mRightTypeName !self.mInfixOperatorLocation}
  [!?ioGraph addNode !nodeName !self]
  [!?ioGraph addEdge !nodeName !self.mLeftTypeName]
  [!?ioGraph addEdge !nodeName !self.mRightTypeName]
  [!?ioGraph addEdge !nodeName !self.mResultTypeName]
  [!?ioGraph addEdge !compileTimeDeclarationBarrier () !nodeName]
}

#·······················································································································

override getter @compileTimeInfixOperatorAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = self.mLeftTypeName.string + " " + self.mInfixOperator + " " + self.mRightTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @compileTimeInfixOperatorAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR unused ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
#--- Check types
  [!?ioContext.mTypeMap makeEntry !self.mLeftTypeName ?let leftTypeProxy]
  let leftType = [leftTypeProxy type]
  [leftType checkIsCompileTimeType !self.mLeftTypeName.location]
  [!?ioContext.mTypeMap makeEntry !self.mRightTypeName ?let rightTypeProxy]
  let rightType = [rightTypeProxy type]
  [rightType checkIsCompileTimeType !self.mRightTypeName.location]
  [!?ioContext.mTypeMap makeEntry !self.mResultTypeName ?let resultTypeProxy]
  let resultType = [resultTypeProxy type]
  [resultType checkIsCompileTimeType !self.mResultTypeName.location]
#--- Check native operator expression
  var @ctCheckMap ctCheckMap = §[]
  [!?ctCheckMap insertKey !self.mLeftOperandName]
  [!?ctCheckMap insertKey !self.mRightOperandName]
  [self.mExpression checkCompileTimeExpression !ctCheckMap]
#--- Enter in infix operator map  
  let key = infixOperatorMapKey (!leftType !self.mInfixOperator !self.mInfixOperatorLocation !rightType)
  let definition = @compileTimeInfixOperatorUsage.init {
    !self.mLeftOperandName
    !self.mRightOperandName
    !self.mExpression
  }
  [!?ioContext.mInfixOperatorMap insertKey !key !resultType !definition]
#--- Define '≤' operator ?
  if (self.mInfixOperator == .equal) || (self.mInfixOperator == .lessThan) then
    let equal_key = infixOperatorMapKey (!leftType !.equal !self.mInfixOperatorLocation !rightType)
    let lessThan_key = infixOperatorMapKey (!leftType !.lessThan !self.mInfixOperatorLocation !rightType)
  if [ioContext.mInfixOperatorMap hasKey !equal_key] & [ioContext.mInfixOperatorMap hasKey !lessThan_key] then
    [ioContext.mInfixOperatorMap searchKey !equal_key ?* ?let equalOperatorUsage]
    [ioContext.mInfixOperatorMap searchKey !lessThan_key ?* ?let lessThanOperatorUsage]
    if let eou = equalOperatorUsage as @compileTimeInfixOperatorUsage,
       let ltou = lessThanOperatorUsage as @compileTimeInfixOperatorUsage then
      let infEqual_definition = @compileTimeInfixInfEqualOperatorUsage.init {!eou !ltou}
      let infEqual_key = infixOperatorMapKey (!leftType !.infEqual !self.mInfixOperatorLocation !rightType)
      [!?ioContext.mInfixOperatorMap insertKey !infEqual_key !resultType !infEqual_definition] 
      end  
    end
  end
#--- Define '+%' operator ?
  if self.mInfixOperator == .addOp then
    let addOpNoOVF_key = infixOperatorMapKey (!leftType !.addOpNoOvf !self.mInfixOperatorLocation !rightType)
    [!?ioContext.mInfixOperatorMap insertKey !addOpNoOVF_key !resultType !definition] 
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  GENERATE CODE                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @compileTimeInfixOperatorUsage : @omnibusInfixOperatorUsage {
  public var @lstring mLeftOperandName
  public var @lstring mRightOperandName
  public var @ctExpressionAST mExpression
}

#·······················································································································

method @compileTimeInfixOperatorUsage eval
  ?let @objectIR inLeftOperand
  ?let @objectIR inRightOperand
  !@bigint outResult
{
  [inLeftOperand literalInteger ?1* ?value: let leftValue]
  [inRightOperand literalInteger ?1* ?value: let rightValue]
  var @ctMap varMap = §[]
  [!?varMap insertKey !self.mLeftOperandName !leftValue]
  [!?varMap insertKey !self.mRightOperandName !rightValue]
  [self.mExpression computeCompileTimeExpression !varMap ?result: outResult]
}

#·······················································································································

override method @compileTimeInfixOperatorUsage generateCode
  ?let @objectIR inLeftOperand
  ?let @location unused inOperatorLocation
  ?let @objectIR inRightOperand
  ?let @omnibusType inResultType
  ?!@semanticTemporariesStruct unused ioTemporaries
  ?!@allocaList unused ioAllocaList
  ?!@instructionListIR unused ioInstructionGenerationList
  !@objectIR outResultValue
{
  [self eval !inLeftOperand !inRightOperand ?let result]
  outResultValue = .literalInteger {!type: inResultType !value: result}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @compileTimeInfixInfEqualOperatorUsage : @omnibusInfixOperatorUsage {
  public var @compileTimeInfixOperatorUsage mEqualOperatorUsage
  public var @compileTimeInfixOperatorUsage mLessThanOperatorUsage
}

#·······················································································································

override method @compileTimeInfixInfEqualOperatorUsage generateCode
  ?let @objectIR inLeftOperand
  ?let @location unused inOperatorLocation
  ?let @objectIR inRightOperand
  ?let @omnibusType inResultType
  ?!@semanticTemporariesStruct unused ioTemporaries
  ?!@allocaList unused ioAllocaList
  ?!@instructionListIR unused ioInstructionGenerationList
  !@objectIR outResultValue
{
  [self.mEqualOperatorUsage eval !inLeftOperand !inRightOperand ?var result]
  if result == 0 then
    [self.mLessThanOperatorUsage eval !inLeftOperand !inRightOperand ?result]
  end
  outResultValue = .literalInteger {!type: inResultType !value: result}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
