#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @taskList {
  @lstring mTaskName
  @lbigint mPriority
  @lbigint mStackSize
  @taskVarListAST mVarList
  @location mEndOfTaskDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @taskVarListAST {
  @lstring mVarName
  @lstring mVarTypeName
  @expressionAST mVarInitExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $task$
    $identifier$ ?let taskName
    $priority$
    $integer$ ?let @lbigint priority
    $stackSize$
    $integer$ ?let @lbigint stackSize
    ${$
    @taskVarListAST taskVarList = {}
    repeat
    while
      $var$
      $identifier$ ?let varName
      $typeName$ ?let typeName
      $=$
      <expression> ?let initExpression
      taskVarList += !varName !typeName !initExpression
    end
    let endOfTask = @location.here
    $}$
    ioAST.mTaskList +=
      !taskName
      !priority
      !stackSize
      !taskVarList
      !endOfTask
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @taskList noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    for variable in mVarList do
      [variable.mVarInitExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
      if variable.mVarTypeName.string != "" then
        let typeName = @lstring.new {!"$" + variable.mVarTypeName !variable.mVarTypeName.location}
        [!?ioGraph noteNode !typeName]
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @taskVariableMap {
  @unifiedTypeMap-proxy mType
  @valueIR mInitialValue
  insert insertKey error message "the '%K' task variable is already declared in %L"
  search searchKey error message "there is no '%K' task variable"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @taskMap {
  @taskVariableMap mTaskVariableMap
  insert insertKey error message "the '%K' task is already declared in %L"
  search searchKey error message "there is no '%K' task"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @taskList enterInContext
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
{
  for task in self do
    @taskVariableMap taskVariableMap = {}
    for variable in task.mVarList do
      [variable enterInContext !?context:ioContext !?staticStringMap:ioGlobalLiteralStringMap !?taskVariableMap]
    end
    [!?ioContext.mTaskMap insertKey !task.mTaskName !taskVariableMap]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @taskVarListAST-element enterInContext
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!@taskVariableMap ioTaskVariableMap
{
#--- Get destination type
  @unifiedTypeMap-proxy variableAnnotationType
  if mVarTypeName.string == "" then
    variableAnnotationType = .null
  else
    variableAnnotationType = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mVarTypeName}
  end
#--- Analyze source expression
  @semanticTemporariesStruct temporaries = .default
  @instructionListIR instructionGenerationList = {}
  @variableMap variableMap = variableMapWithConstants (!context:ioContext)
  [mVarInitExpression analyzeExpression
     !routineNameForInvocationGraph:["compiler" nowhere]
     !optionalTargetType:variableAnnotationType
     !context:ioContext
     !modes:{}
     !allowException:true
     !?temporary:temporaries
     !?staticStringMap:ioGlobalLiteralStringMap
     !?variableMap:variableMap
     !?instructionListIR:instructionGenerationList
     ?result:let @operandIR expressionResult
  ]
  if ([instructionGenerationList length] > 0) || not [expressionResult.mValue isStatic] then
    error mVarName : "source expression cannot be statically computed"
  end
#--- Check variable type and expression type
  if variableAnnotationType == .null && [[expressionResult.mType kind] isStaticInteger] then
    error mVarName : "cannot infer type"
  end
  let result = checkAssignmentCompatibility (
    !source:expressionResult
    !targetAnnotationType:variableAnnotationType
    !errorLocation:mVarName.location
    !staticTypeAllowed:false
  )
#--- Enter variable in task variable map
  [!?ioTaskVariableMap insertKey
    !mVarName
    !result.mType
    !result.mValue
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @taskList semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  @stringset prioritySet = {}
  for task in self do
    [task semanticAnalysis
      !context:inContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    ]
    let priorityString = [task.mPriority.bigint string]
    if [prioritySet hasKey !priorityString] then
      error task.mPriority : "duplicate priority"
    end
    prioritySet += !priorityString
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @taskList-element semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#--- Check stack size is >= 64, and a multiple of 8
  let stackSize = mStackSize.bigint
  if (stackSize < 64G) || ((stackSize mod 8G) != 0G) then
    error mStackSize : "stack size should be a multiple of 8, and >= 64"
  end
#--- Analyze variable declaration
  let taskVariableMap = [inContext.mTaskMap mTaskVariableMapForKey !mTaskName.string]
#--- Generate task
  ioIntermediateCodeStruct.mTaskListIR +=
    !mTaskName.string
    !mPriority.bigint
    !mStackSize.bigint
    !taskVariableMap
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sortedlist @taskListIR {
  @string mTaskName
  @bigint mPriority
  @bigint mStackSize
  @taskVariableMap mTaskVariableMap
}{
  mPriority <
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @taskListIR generateCode ?!@string ioLLVMcode {
  ioLLVMcode += llvmTitleComment (!"Task declaration")
#--- Declare stacks and task variables
  for task in self do
    ioLLVMcode += stackNameForTask (!task.mTaskName) + " = global [" + (task.mStackSize / 4) + " x i32] zeroinitializer\n"
    for variable in task.mTaskVariableMap do
      ioLLVMcode += llvmNameForTaskVariable (!task.mTaskName !variable.lkey.string)
      ioLLVMcode += " = internal global "
      ioLLVMcode += [variable.mType llvmTypeName] + " "
      let initialString = [variable.mInitialValue llvmName]
      if initialString == "" then
        ioLLVMcode += "zeroinitializer"
      else
        ioLLVMcode += initialString
      end
      ioLLVMcode += "\n"
    end
    ioLLVMcode += "\n"
  end
  ioLLVMcode += llvmSeparatorLine ()
  ioLLVMcode += "\n"
#--- Start tasks
  ioLLVMcode += "define internal void @start.tasks () nounwind {\n"
  for task in self do (idx)
    ioLLVMcode += "  " + stackAddressForTask (!task.mTaskName)
    ioLLVMcode += " = getelementptr inbounds [" + (task.mStackSize / 4) + " x i32], "
    ioLLVMcode += "[" + (task.mStackSize / 4) + " x i32]* " + stackNameForTask (!task.mTaskName)
    ioLLVMcode += ", i32 0, i32 0\n"
    ioLLVMcode += "  call void @kernel_create_task ("
    ioLLVMcode += "i32 " + idx
    ioLLVMcode += ", i32* " + stackAddressForTask (!task.mTaskName)
    ioLLVMcode += ", i32 " + task.mStackSize
    ioLLVMcode += ", void ()* " + routineNameForTask (!task.mTaskName) + ")\n"
  end
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
#--- Task code
  for task in self do
    ioLLVMcode += llvmSeparatorLine ()
    ioLLVMcode += "\n"
    ioLLVMcode += "define internal void " + routineNameForTask (!task.mTaskName) + " () nounwind noreturn naked {\n"
    ioLLVMcode += "  call void @" + llvmNameForProcedure (!"setup") + " ()\n"
    ioLLVMcode += "  br label %loop\n"
    ioLLVMcode += "loop:\n"
    ioLLVMcode += "  call void @" + llvmNameForProcedure (!"loop") + " ()\n"
    ioLLVMcode += "  br label %loop\n"
    ioLLVMcode += "}\n\n"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

