#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @taskList {
  @lstring mTaskName
  @lbigint mPriority
  @lbigint mStackSize
  @structurePropertyListAST mVarList
  @functionDeclarationListAST mTaskProcList
  @taskInitListAST mTaskInitListAST
  @syncInstructionBranchListAST mGuardedCommandList
  @location mEndOfTaskDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @taskInitListAST {
  @lbigint mTaskInitPriority
  @instructionListAST mTaskInitInstructionList
  @location mEndOfTaskInitDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sortedlist @taskInitSortedListAST {
  @lbigint mTaskInitPriority
  @instructionListAST mTaskInitInstructionList
  @location mEndOfTaskInitDeclaration
  @bigint mPriority
}{
  mPriority <
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $task$
    $identifier$ ?let taskName
    $priority$
    $integer$ ?let @lbigint priority
    $stackSize$
    $integer$ ?let @lbigint stackSize
    ${$
    @structurePropertyListAST taskVarList = {}
    @functionDeclarationListAST taskProcList = {}
    @taskInitListAST taskInitListAST = {}
    @syncInstructionBranchListAST branchList = {}
    <taskBody> !?taskVarList !?taskProcList !?taskInitListAST !?branchList
    let endOfTask = @location.here
    $}$
    ioAST.mTaskListAST +=
      !taskName
      !priority
      !stackSize
      !taskVarList
      !taskProcList
      !taskInitListAST
      !branchList
      !endOfTask
  }

  #·····················································································································

  rule <taskBody> ?!@structurePropertyListAST taskVarList
                  ?!@functionDeclarationListAST taskProcList
                  ?!@taskInitListAST taskInitListAST
                  ?!@syncInstructionBranchListAST branchList
{
    repeat
    while
      <private_struct_property_declaration> !?taskVarList
    while
      $func$
      $identifier$ ?let procName
      <procedure_formal_arguments> ?formalArguments:let @routineFormalArgumentList formalArgumentList
      @lstring returnTypeName
      select
        returnTypeName = ["" here]
      or
        $->$
        $\$type$ ?returnTypeName
      end
      ${$
      <instructionList> ?let instructionList
      let endOfProc = @location.here
      $}$
      taskProcList += !.userMode !false !procName !{} !formalArgumentList !returnTypeName !instructionList !endOfProc
    while
      $setup$
      $integer$ ?let @lbigint priority
      ${$
      <instructionList> ?let instructionList
      let endOfInit = @location.here
      $}$
      taskInitListAST += !priority !instructionList !endOfInit
    while
      <guarded_command> ?let @guardedCommandAST guardedCommand
      ${$
      <instructionList> ?let instructionList
      let endOfInstructions = @location.here
      $}$
      branchList += !guardedCommand !instructionList !endOfInstructions
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @taskList noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    for variable in mVarList do
      if variable.mPropertyTypeName.string != "" then
        let typeName = llvmRegularTypeMangledNameFromName (!variable.mPropertyTypeName)
        [!?ioGraph noteNode !typeName]
      end
    end
    for procedure in mTaskProcList do
      [procedure.mFunctionInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
    end
    for guardedCommand in mGuardedCommandList do
      [guardedCommand.mInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @taskProcedureMap {
  insert insertKey error message "the '%K' proc is already declared in %L"
  search searchKey error message "there is no '%K' proc"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @taskMap {
  @taskProcedureMap mTaskProcedureMap
  insert insertKey error message "the '%K' task is already declared in %L"
  search searchKey error message "there is no '%K' task"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @taskList enterInContext
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
{
  for task in self do
  #--- task variables
    @propertyList propertyList = {}
    @propertyMap propertyMap = {}
    @sortedOperandIRList initialValueList = {}
    for property in task.mVarList do
      [property enterInContext
        !task.mTaskName
        !?context:ioContext
        !?staticStringMap:ioGlobalLiteralStringMap
        !?propertyList
        !?propertyMap
        !?initialValueList
        !?*
        !?*
      ]
    end
  #--- Enter task variable map as structure type in type map
    let taskType = @PLMType.structure {
      !typeName:task.mTaskName
      !propertyMap:propertyMap
      !propertyList:propertyList
      !flags:.none
      !guardMap:{}
    }
    [!?ioContext.mTypeMap insertType
      !lkey:task.mTaskName
      !type:taskType
      !index:[ioContext.mTypeMap count]
    ]
    ioContext.mGlobalTaskVariableList +=
      !task.mTaskName.string 
      !task.mTaskName.string
      !.llvmStructureConstant{!type:taskType !values:initialValueList}
  #--- Task procedures
    [task.mTaskProcList enterFunctionInContext !selfTypeName:"$" + task.mTaskName !?context:ioContext]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @taskList semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  @stringset prioritySet = {}
  for task in self do
    [task semanticAnalysis
      !context:inContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    ]
    let priorityString = [task.mPriority.bigint string]
    if [prioritySet hasKey !priorityString] then
      error task.mPriority : "duplicate priority"
    end
    prioritySet += !priorityString
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @taskList-element semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#------------------------------------------- Check stack size is >= 64, and a multiple of 8
  let stackSize = mStackSize.bigint
  if (stackSize < 64G) || ((stackSize mod 8G) != 0G) then
    error mStackSize : "stack size should be a multiple of 8, and >= 64"
  end
#------------------------------------------- Analyze task procedures
  let taskType = [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mTaskName} type]
  for procedure in mTaskProcList do
    routineSemanticAnalysis (
      !receiverType:taskType
      !.function {!executionMode:.userMode}
      !.userMode
      !procedure.mFunctionName
      !procedure.mFunctionFormalArgumentList
      !returnTypeName:procedure.mFunctionReturnTypeName
      !procedure.mFunctionInstructionList
      !procedure.mEndOfFunctionDeclaration
      !directAccessToPropertiesAllowed:true
      !propertiesAreMutable:true
      !warnIfUnused:true
      !globalFunction:false
      !context:inContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    )
  end
#------------------------------------------- Analyze task init routines
  @taskInitSortedListAST taskInitSortedListAST = {}
  for (priority instructionList endOfDeclaration) in mTaskInitListAST do
    taskInitSortedListAST += !priority !instructionList !endOfDeclaration !priority.bigint
  end
  @instructionListIR initInstructionListIR = {}
  @allocaList initAllocaList = {}
  for (taskInitPriority taskInitInstructionList endOfTaskInitDeclaration *) in taskInitSortedListAST do
    initSemanticAnalysis (
      !context:inContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
      !selfType:taskType
      !priority:taskInitPriority
      !mode:.userMode
      !instructionList:taskInitInstructionList
      !endOfDeclaration:endOfTaskInitDeclaration
      ?let partialAllocaList
      ?let @instructionListIR partialInstructionGenerationList
    )
    initInstructionListIR += partialInstructionGenerationList
    initAllocaList += partialAllocaList
  end
#------------------------------------------- Analyze task guarded command
#  Build a "task.loop" function that contains a sync instruction
  @instructionListAST taskListInstructionList = {}
  if [mGuardedCommandList length] > 0 then
    let syncInstruction = @syncInstructionAST.new {!mTaskName.location !mGuardedCommandList !mTaskName.location}
    taskListInstructionList += !syncInstruction
  end
  routineSemanticAnalysis (
    !receiverType:taskType
    !.function{!executionMode:.userMode}
    !.userMode
    !.new {!llvmNameForTaskLoopFunction () !mTaskName.location}
    !{} # No argument
    !returnTypeName:["" nowhere]
    !taskListInstructionList
    !mTaskName.location
    !directAccessToPropertiesAllowed:true
    !propertiesAreMutable:true
    !warnIfUnused:true
    !globalFunction:false
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
  )
#------------------------------------------- Task Name string constant index
  [!?ioIntermediateCodeStruct.mStaticStringMap findOrAddStaticString !mTaskName.string ?let taskNameStringIndex]
#------------------------------------------- Generate task
  [!?ioIntermediateCodeStruct.mTaskMapIR insertKey
    !mTaskName
    !taskType
    !mPriority.bigint
    !mStackSize.bigint
    !initAllocaList
    !initInstructionListIR
    !taskNameStringIndex
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @taskMapIR {
  @PLMType mTaskType
  @bigint mPriority
  @bigint mStackSize
  @allocaList mAllocaList
  @instructionListIR mInitInstructionListIR
  @uint mTaskNameStringIndex
  insert insertKey error message "** internal error **"
  search searchKey error message "** internal error **"
  remove removeKey error message "** internal error **"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sortedlist @taskSortedListIR {
  @string mTaskName
  @bigint mPriority
  @bigint mStackSize
  @allocaList mAllocaList
  @instructionListIR mInitInstructionListIR
  @uint mTaskNameStringIndex
}{
  mPriority <
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @taskMapIR generateCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
  ?!@2stringlist ioServiceList
{
#--- Declare task self terminate service
  ioLLVMcode += llvmTitleComment (!"Task self terminate service")
  let selfTerminateImplementationName = llvmNameForServiceImplementation (!llvmNameForTaskSelfTerminateService ())
  let selfTerminateCallName = llvmNameForServiceCall (!llvmNameForTaskSelfTerminateService ())
  ioServiceList += !selfTerminateCallName !selfTerminateImplementationName
  ioLLVMcode += "declare void @" + selfTerminateCallName + " () nounwind noreturn\n\n"
#--- Declare task variables
  ioLLVMcode += llvmTitleComment (!"Task variables")
  for (taskName taskTypeName initValueList) in inGenerationContext.mGlobalTaskVariableList do
    ioLLVMcode += "@" + llvmNameForTaskGlobalVar (!taskName)
    ioLLVMcode += " = internal global %"
    ioLLVMcode += ["$" + taskTypeName assemblerRepresentation] + " "
    let initialString = [initValueList llvmName]
    if initialString == "" then
      ioLLVMcode += "zeroinitializer"
    else
      ioLLVMcode += initialString
    end
    ioLLVMcode += "\n"
  end
  ioLLVMcode += "\n"
#--- Build ordered task list
  @taskSortedListIR orderedTaskList = {}
  for task in self do
    orderedTaskList +=
      !task.lkey.string
      !task.mPriority
      !task.mStackSize
      !task.mAllocaList
      !task.mInitInstructionListIR
      !task.mTaskNameStringIndex
  end
#--- Declare task stacks and main routine
  ioLLVMcode += llvmTitleComment (!"Create task extern routine")
  ioLLVMcode += "declare void @kernel_create_task (i32 %inTaskIndex, i8* %inTaskName, i32* %inStackBufferAddress, "
  ioLLVMcode += "i32 %inStackBufferSize, void ()* %inTaskRoutine) nounwind\n\n"
  for task in orderedTaskList do
    ioLLVMcode += llvmTitleComment (!"Task " + task.mTaskName)
    let assemblerTaskName = ["$" + task.mTaskName assemblerRepresentation]
    ioLLVMcode += stackNameForTask (!task.mTaskName) + " = global [" + (task.mStackSize / 4) + " x i32] zeroinitializer\n"
    ioLLVMcode += "\n"
    let effectiveParameter = "(%" + assemblerTaskName + " * @" + llvmNameForTaskGlobalVar (!task.mTaskName) + ")"
    let formalArgument = "(%" + assemblerTaskName + " * %self)"
    ioLLVMcode += llvmSeparatorLine ()
    ioLLVMcode += "\n"
    ioLLVMcode += "define internal void " + initNameForTaskType (!task.mTaskName) + " " + formalArgument + llvmAttributeFunction () + "{\n"
    for (variable LLVMTypeName) in task.mAllocaList do
      ioLLVMcode += "  " + variable + " = alloca " + LLVMTypeName + "\n"
    end
    [task.mInitInstructionListIR instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
    ioLLVMcode += "  ret void\n"
    ioLLVMcode += "}\n\n"
    ioLLVMcode += llvmSeparatorLine ()
    ioLLVMcode += "\n"
    ioLLVMcode += "define internal void " + mainRoutineNameForTask (!task.mTaskName) + " ()" + llvmAttributeFunction () + "noreturn {\n"
    ioLLVMcode += "  call void " + initNameForTaskType (!task.mTaskName) + " " + effectiveParameter + "\n"
    ioLLVMcode += "  call void @" + llvmNameForFunction (!"$" + task.mTaskName + "." + llvmNameForTaskLoopFunction () + "()") + " " + effectiveParameter + "\n"
    ioLLVMcode += "  call void @" + selfTerminateCallName + " ()\n"
    ioLLVMcode += "  unreachable\n"
    ioLLVMcode += "}\n\n"
  end
#--- Start tasks
  ioLLVMcode += llvmTitleComment (!"Start tasks")
  ioLLVMcode += "define internal void @start.tasks ()" + llvmAttributeFunction () + "{\n"
  for task in orderedTaskList do (idx)
    ioLLVMcode += "  " + stackAddressForTask (!task.mTaskName)
    ioLLVMcode += " = getelementptr inbounds [" + (task.mStackSize / 4) + " x i32], "
    ioLLVMcode += "[" + (task.mStackSize / 4) + " x i32]* " + stackNameForTask (!task.mTaskName)
    ioLLVMcode += ", i32 0, i32 0\n"
    ioLLVMcode += "  %task.name." + idx + " = load i8*, i8** " + literalStringName (!task.mTaskNameStringIndex) + "\n"
    ioLLVMcode += "  call void @kernel_create_task ("
    ioLLVMcode += "i32 " + idx
    ioLLVMcode += ", i8* %task.name." + idx
    ioLLVMcode += ", i32* " + stackAddressForTask (!task.mTaskName)
    ioLLVMcode += ", i32 " + task.mStackSize
    ioLLVMcode += ", void ()* " + mainRoutineNameForTask (!task.mTaskName) + ")\n"
  end
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

