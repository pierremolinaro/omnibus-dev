#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <assignment_operator> !@infixOperator outInfixOperator !@location outOperatorLocation{
    select
      $|=$
      outInfixOperator = .orOp
    or
      $&=$
      outInfixOperator = .andOp
    or
      $^=$
      outInfixOperator = .xorOp
    or
      $+=$
      outInfixOperator = .addOp
    or
      $+%=$
      outInfixOperator = .addOpNoOvf
    or
      $-=$
      outInfixOperator = .subOp
    or
      $-%=$
      outInfixOperator = .subOpNoOvf
    or
      $*=$
      outInfixOperator = .mulOp
    or
      $*%=$
      outInfixOperator = .mulOpNoOvf
    end
    outOperatorLocation = .here
  }

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList {
  #--- LValue
    <lvalue_without_self> ?let lvalueNoSelf
    let instructionLocation = @location.here
  #--- Assignment operator
    <assignment_operator> ?let infixOperator ?let operatorLocation
  #--- Right expression
    <expression> ?let @expressionAST rightExpression
  #--- Build source expression
    @primaryInExpressionAccessListAST accessList = {}
    for (access) in lvalueNoSelf.mAccessList do
      switch access
      case property (@lstring name) :
        accessList += !.property {!name:name}
      case arrayAccess (@expressionAST index @location endOfIndex) :
        accessList += !.arrayAccess {!index:index !endOfIndex:endOfIndex}
      end
    end
    let leftExpression = @primaryInExpressionAST.new {!.noSelf !lvalueNoSelf.mIdentifier !accessList}
  #--- Build source expression
    let expression = @infixOperatorExpressionAST.new {
      !leftExpression
      !operatorLocation
      !infixOperator
      !rightExpression
    }
  #--- Build assignment instruction
    ioInstructionList += !@varAssignmentNoSelfInstructionAST.new {
      !instructionLocation
      !lvalueNoSelf
      !expression
    }
  }

  #·····················································································································

#  rule <instruction> ?!@instructionListAST ioInstructionList {
#  #--- LValue
#    <lvalue_with_self> ?let lvalueWithSelf
#    let instructionLocation = @location.here
#  #--- Assignment operator
#    <assignment_operator> ?let infixOperator ?let operatorLocation
#  #--- Right expression
#    <expression> ?let @expressionAST rightExpression
#  #--- Build source expression
#    @primaryInExpressionAccessListAST accessList = {}
#    for (access) in lvalueWithSelf.mAccessList do
#      switch access
#      case property (@lstring name) :
#        accessList += !.property {!name:name}
#      case arrayAccess (@expressionAST index @location endOfIndex) :
#        accessList += !.arrayAccess {!index:index !endOfIndex:endOfIndex}
#      end
#    end
#    let leftExpression = @primaryInExpressionAST.new {!.selfAt{
#      !location:lvalueWithSelf.mSelfLocation}
#      !lvalueWithSelf.mIdentifier
#      !accessList
#    }
#  #--- Build source expression
#    let expression = @infixOperatorExpressionAST.new {
#      !leftExpression
#      !operatorLocation
#      !infixOperator
#      !rightExpression
#    }
#  #--- Build assignment instruction
#    ioInstructionList += !@varAssignmentSelfInstructionAST.new {
#      !instructionLocation
#      !lvalueWithSelf
#      !expression
#    }
#  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
