#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @operatorAssignmentKind {
  case bitWiseOrAssign
  case bitWiseAndAssign
  case bitWiseXorAssign
  case addAssign
  case addModuloAssign
  case subAssign
  case subModuloAssign
  case mulAssign
  case mulModuloAssign
  case divAssign
  case divZeroAssign
  case modAssign
  case modZeroAssign
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @varOperatorAssignInstructionAST : @instructionAST {
  @assignmentTargetAST mAssignmentTargetAST
  @operatorAssignmentKind mOperator
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <assignment_operator> !@operatorAssignmentKind outOp {
    select
      $|=$
      outOp = .bitWiseOrAssign
    or
      $&=$
      outOp = .bitWiseAndAssign
    or
      $^=$
      outOp = .bitWiseXorAssign
    or
      $+=$
      outOp = .addAssign
    or
      $+%=$
      outOp = .addModuloAssign
    or
      $-=$
      outOp = .subAssign
    or
      $-%=$
      outOp = .subModuloAssign
    or
      $*=$
      outOp = .mulAssign
    or
      $*%=$
      outOp = .mulModuloAssign
    end
  }

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    <assignment_target> ?let @assignmentTargetAST assignmentTargetAST
    let instructionLocation = @location.here
    <assignment_operator> ?let @operatorAssignmentKind operatorAssign
    <expression> ?let @expressionAST expression
    ioInstructionList += !instructionLocation !@varOperatorAssignInstructionAST.new {
      !assignmentTargetAST
      !operatorAssign
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varOperatorAssignInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  [mAssignmentTargetAST noteInstructionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @varOperatorAssignInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!namedObjectMap:@namedObjectMap ioNamedObjectMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#---
  [mAssignmentTargetAST analyzeAssignmentTarget
    !self: inSelfType
    !propertiesAreMutable: inRoutineCanMutateProperties
    !directAccessToPropertiesAllowed: inDirectAccessToPropertiesAllowed
    !routineNameForInvocationGraph: inCallerNameForInvocationGraph
    !context: inContext
    !modes: inModeSet
    !allowPanic: inAllowPanic
    !?temporary: ioTemporaries
    !?staticStringMap: ioGlobalLiteralStringMap
    !?variableMap: ioVariableMap
    !?namedObjectMap: ioNamedObjectMap
    !?alloca: ioAllocaList
    !?instructionListIR: ioInstructionGenerationList
    ?@objectIR targetObject
  ]
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:[targetObject type]
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?namedObjectMap: ioNamedObjectMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR sourceValue
  ]
#--- Write local variable
#  [!?ioVariableMap searchForReadWriteAccess
#    !lkey:mTargetVarName
#    ?1*
#    ?readAccessAllowed:let accessIsAllowed
#    ?variableKind:let targetVariableKind
#    ?copyable:let isCopyable                                                 
#    ?3*
#  ]
#  if not accessIsAllowed then
#    error mTargetVarName : "routine has no access right on the this variable"
#  end
#--- Check operator is available for type
  let noPanicGeneration = [option plm_options.noPanicGeneration value]
  let panicMode = [inModeSet hasKey !panicModeName ()]
  @infixOperatorMap operatorMap
  switch mOperator
  case bitWiseAndAssign :
    operatorMap = inContext.mAndOperatorMap
  case bitWiseOrAssign :
    operatorMap = inContext.mOrOperatorMap
  case bitWiseXorAssign :
    operatorMap = inContext.mXorOperatorMap
  case addAssign :
    if panicMode then
      error mAssignmentTargetAST.mIdentifier
       : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mAddNoOvfOperatorMap else inContext.mAddOperatorMap end
  case addModuloAssign :
    operatorMap = inContext.mAddNoOvfOperatorMap
  case subAssign :
    if panicMode then
      error mAssignmentTargetAST.mIdentifier
       : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mSubNoOvfOperatorMap else inContext.mSubOperatorMap end
  case subModuloAssign :
    operatorMap = inContext.mSubNoOvfOperatorMap
  case mulAssign :
    if panicMode then
      error mAssignmentTargetAST.mIdentifier
       : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mMulNoOvfOperatorMap else inContext.mMulOperatorMap end
  case mulModuloAssign :
    operatorMap = inContext.mMulNoOvfOperatorMap
  case divAssign :
    if panicMode then
      error mAssignmentTargetAST.mIdentifier
       : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mDivNoOvfOperatorMap else inContext.mDivOperatorMap end
  case divZeroAssign :
    operatorMap = inContext.mDivNoOvfOperatorMap
  case modAssign :
    if panicMode then
      error mAssignmentTargetAST.mIdentifier
       : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mModNoOvfOperatorMap else inContext.mModOperatorMap end
  case modZeroAssign :
    operatorMap = inContext.mModNoOvfOperatorMap
  end
  [operatorMap checkBinaryOperationWith
    !leftType:[targetObject type]
    !rightType:[sourceValue type]
    !operatorLocation:mAssignmentTargetAST.mIdentifier
    ?resultType:*
    ?op:let @infixOperatorDescription binaryOperator
  ]
#  if not isCopyable then
#    error mTargetVarName : "an $" + [targetType key] + " instance is not copyable"
#  end
#--- Code generation
  [!?ioInstructionGenerationList appendLoadFromReference
    !?ioTemporaries
    !targetObject
    !mAssignmentTargetAST.mIdentifier
    ?let variableValue
  ]
#  [targetVariableKind loadFromMemory
#    !?temporary:ioTemporaries
#    !?instructionListIR:ioInstructionGenerationList
#    ?resultingValue:@objectIR variableValue
#  ]
  [binaryOperator generateInfixOperatorCode
    !?ioTemporaries
    !?ioInstructionGenerationList
    !variableValue
    !mAssignmentTargetAST.mIdentifier
    !sourceValue
    ![targetObject type]
    ?let newResultingValue
  ]
  [!?ioInstructionGenerationList appendStoreFromReference
    !targetObject
    !mAssignmentTargetAST.mIdentifier
    !newResultingValue
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
