#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <assignment_operator> !@infixOperator outInfixOperator !@location outOperatorLocation{
    select
      $|=$
      outInfixOperator = .orOp
    or
      $&=$
      outInfixOperator = .andOp
    or
      $^=$
      outInfixOperator = .xorOp
    or
      $+=$
      outInfixOperator = .addOp
    or
      $+%=$
      outInfixOperator = .addOpNoOvf
    or
      $-=$
      outInfixOperator = .subOp
    or
      $-%=$
      outInfixOperator = .subOpNoOvf
    or
      $*=$
      outInfixOperator = .mulOp
    or
      $*%=$
      outInfixOperator = .mulOpNoOvf
    end
    outOperatorLocation = .here
  }

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList {
  #--- LValue
    <lvalue> ?let lvalue
    let instructionLocation = @location.here
  #--- Assignment operator
    <assignment_operator> ?let infixOperator ?let operatorLocation
  #--- Right expression
    <expression> ?let @expressionAST rightExpression
  #--- Build source expression
    @primaryInExpressionAccessListAST accessList = {}
    for (access) in lvalue.mAccessList do
      switch access
      case property (@lstring name) :
        accessList += !.property {!name:name}
      case arrayAccess (@expressionAST index @location endOfIndex) :
        accessList += !.arrayAccess {!index:index !endOfIndex:endOfIndex}
      end
    end
    @expressionAST leftExpression
    if lvalue.mIdentifier.string != "" then
      leftExpression = @primaryInExpressionAST.new {!.noSelf !lvalue.mIdentifier !accessList}
    elsif ([accessList length] > 0) && [[accessList mAccessAtIndex !0] isProperty] then
      [!?accessList popFirst ?let access]
      [access property ?name:let propertyName]
      leftExpression = @primaryInExpressionAST.new {!.selfAt {!location:lvalue.mIdentifier} !propertyName !accessList}
    else
      error instructionLocation : "invalid lvalue" : leftExpression
    end
  #--- Build source expression
    let expression = @infixOperatorExpressionAST.new {
      !leftExpression
      !operatorLocation
      !infixOperator
      !rightExpression
    }
  #--- Build assignment instruction
    ioInstructionList += !@assignmentInstructionAST.new {
      !instructionLocation
      !lvalue
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
