#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
#  AST                                                                                                                  
#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

enum @operatorAssignmentKind {
  case bitWiseOrAssign
  case bitWiseAndAssign
  case bitWiseXorAssign
  case addAssign
  case addModuloAssign
  case subAssign
  case subModuloAssign
  case mulAssign
  case mulModuloAssign
  case divAssign
  case divZeroAssign
  case modAssign
  case modZeroAssign
}

#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

class @varOperatorAssignInstructionAST : @instructionAST {
  @assignmentTargetAST mAssignmentTargetAST
  @operatorAssignmentKind mOperator
  @infixOperator mInfixOperator
  @location mInfixOperatorLocation
  @expressionAST mSourceExpression
  @location mEndOfSourceExpression
}

#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
#  SYNTAX                                                                                                               
#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

syntax extension plm_syntax {

  #Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·

  rule <assignment_operator> !@operatorAssignmentKind outOp !@infixOperator outInfixOperator !@location outOperatorLocation{
    select
      $|=$
      outOp = .bitWiseOrAssign
      outInfixOperator = .orOp
    or
      $&=$
      outOp = .bitWiseAndAssign
      outInfixOperator = .andOp
    or
      $^=$
      outOp = .bitWiseXorAssign
      outInfixOperator = .xorOp
    or
      $+=$
      outOp = .addAssign
      outInfixOperator = .addOp
    or
      $+%=$
      outOp = .addModuloAssign
      outInfixOperator = .addOpNoOvf
    or
      $-=$
      outOp = .subAssign
      outInfixOperator = .subOp
    or
      $-%=$
      outOp = .subModuloAssign
      outInfixOperator = .subOpNoOvf
    or
      $*=$
      outOp = .mulAssign
      outInfixOperator = .mulOp
    or
      $*%=$
      outOp = .mulModuloAssign
      outInfixOperator = .mulOpNoOvf
    end
    outOperatorLocation = .here
  }

  #Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·

  rule <instruction> ?!@instructionListAST ioInstructionList {
    <assignment_target_noself> ?let assignmentTargetAST
    let instructionLocation = @location.here
    <assignment_operator> ?let operatorAssign ?let infixOperator ?let operatorLocation
    <expression> ?let @expressionAST expression
    ioInstructionList += !@varOperatorAssignInstructionAST.new {
      !instructionLocation
      !assignmentTargetAST
      !operatorAssign
      !infixOperator
      !operatorLocation
      !expression
      !.here
    }
  }

  #Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·

  rule <instruction> ?!@instructionListAST ioInstructionList {
    <assignment_target_self> ?let assignmentTargetAST
    let instructionLocation = @location.here
    <assignment_operator> ?let operatorAssign ?let infixOperator ?let operatorLocation
    <expression> ?let @expressionAST expression
    ioInstructionList += !@varOperatorAssignInstructionAST.new {
      !instructionLocation
      !assignmentTargetAST
      !operatorAssign
      !infixOperator
      !operatorLocation
      !expression
      !.here
    }
  }

  #Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·

}

#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
#  NOTE TYPES                                                                                                           
#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

override method @varOperatorAssignInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  [mAssignmentTargetAST noteInstructionTypesInPrecedenceGraph !?ioGraph]
}

#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
#  SOLVE ENTITIES                                                                                                           
#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

override method @varOperatorAssignInstructionAST solveEntities
  ?context:let @semanticContext inSemanticContext
  ?!@instructionListSE ioInstructionListSE
{
  [mAssignmentTargetAST solveEntitiesForAssignmentOperatorInstruction
    !context:inSemanticContext
    !mInstructionLocation
    !mInfixOperator
    !mInfixOperatorLocation
    !mSourceExpression
    !?ioInstructionListSE
  ]
}

#Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·

abstract method @assignmentTargetAST solveEntitiesForAssignmentOperatorInstruction
  ?context:let @semanticContext inSemanticContext
  ?let @location inInstructionLocation
  ?let @infixOperator inInfixOperator
  ?let @location inInfixOperatorLocation
  ?let @expressionAST inSourceExpressionAST
  ?!@instructionListSE ioInstructionListSE

#Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·

override method @assignmentTargetNoSelfAST solveEntitiesForAssignmentOperatorInstruction
  ?context:let @semanticContext inSemanticContext
  ?let @location inInstructionLocation
  ?let @infixOperator inInfixOperator
  ?let @location inInfixOperatorLocation
  ?let @expressionAST inSourceExpressionAST
  ?!@instructionListSE ioInstructionListSE
{
  @accessInAssignmentListSE accessList = {}
  @primaryInExpressionAccessListSE primaryInExpressionAccessListSE = {}
  for (access) in mAccessList do
    switch access
    case property (name) :
      accessList += !.property {!name:name}
      primaryInExpressionAccessListSE += !.property {!name:name}
    case arrayAccess (indexAST endOfIndex) :
      [indexAST solveEntities !context:inSemanticContext ?let index]
      accessList += !.arrayAccess {!index:index !endOfIndex:endOfIndex}
      primaryInExpressionAccessListSE += !.arrayAccess {!index:index !endOfIndex:endOfIndex}
    end
  end
  [inSourceExpressionAST solveEntities !context:inSemanticContext ?let rightSourceExpression]
  if [inSemanticContext.mControlRegisterMap hasKey !mIdentifier] then
    let leftSourceExpression = @registerReadInExpressionSE.new {!mIdentifier !primaryInExpressionAccessListSE}
    let sourceExpression = @infixOperatorExpressionSE.new {
      !leftSourceExpression
      !inInfixOperatorLocation
      !inInfixOperator
      !rightSourceExpression
    }
    ioInstructionListSE += !@registerAssignmentInstructionSE.new {
      !inInstructionLocation
      !mIdentifier
      !accessList
      !sourceExpression
    }
  elsif [inSemanticContext.mGlobalVariableMap hasKey !mIdentifier] then
    let leftSourceExpression = @globalVariableAccessInExpressionSE.new {!mIdentifier !primaryInExpressionAccessListSE}
    let sourceExpression = @infixOperatorExpressionSE.new {
      !leftSourceExpression
      !inInfixOperatorLocation
      !inInfixOperator
      !rightSourceExpression
    }
    ioInstructionListSE += !@globalVariableAssignmentInstructionSE.new {
      !inInstructionLocation
      !mIdentifier
      !accessList
      !sourceExpression
    }
  elsif [inSemanticContext.mGlobalConstantMap hasKey !mIdentifier] then
    error mIdentifier : "a constant cannot be assigned"
  else # By default, access to local variable
    let leftSourceExpression = @localVariableAccessInExpressionSE.new {!mIdentifier !primaryInExpressionAccessListSE}
    let sourceExpression = @infixOperatorExpressionSE.new {
      !leftSourceExpression
      !inInfixOperatorLocation
      !inInfixOperator
      !rightSourceExpression
    }
    ioInstructionListSE += !@localVariableAssignmentInstructionSE.new {
      !inInstructionLocation
      !mIdentifier
      !accessList
      !sourceExpression
    }
  end
}

#Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·

override method @assignmentTargetSelfAST solveEntitiesForAssignmentOperatorInstruction
  ?context:let @semanticContext inSemanticContext
  ?let @location inInstructionLocation
  ?let @infixOperator inInfixOperator
  ?let @location inInfixOperatorLocation
  ?let @expressionAST inSourceExpressionAST
  ?!@instructionListSE ioInstructionListSE
{
  @primaryInExpressionAccessListSE primaryInExpressionAccessListSE = {}
  @accessInAssignmentListSE accessList = {}
  for (access) in mAccessList do
    switch access
    case property (name) :
      accessList += !.property {!name:name}
      primaryInExpressionAccessListSE += !.property {!name:name}
    case arrayAccess (indexAST endOfIndex) :
      [indexAST solveEntities !context:inSemanticContext ?let index]
      primaryInExpressionAccessListSE += !.arrayAccess {!index:index !endOfIndex:endOfIndex}
    end
  end
  [inSourceExpressionAST solveEntities !context:inSemanticContext ?let rightSourceExpression]
  let leftSourceExpression = @selfAccessInExpressionSE.new {!mIdentifier !mSelfLocation !primaryInExpressionAccessListSE}
  let sourceExpression = @infixOperatorExpressionSE.new {
    !leftSourceExpression
    !inInfixOperatorLocation
    !inInfixOperator
    !rightSourceExpression
  }
  ioInstructionListSE += !@selfPropertyAssignmentInstructionSE.new {
    !inInstructionLocation
    !mIdentifier
    !accessList
    !sourceExpression
  }
}


#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
#  SEMANTICS                                                                                                            
#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

override method @varOperatorAssignInstructionAST analyze
  ?self:let @PLMType inSelfType
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@unifiedSymbolMapEx ioVariableMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#---
  [mAssignmentTargetAST analyzeAssignmentTarget
    !self: inSelfType
    !targetAccessKind:.readWrite
    !propertiesAreMutable: inRoutineCanMutateProperties
    !directAccessToPropertiesAllowed: inDirectAccessToPropertiesAllowed
    !routineNameForInvocationGraph: inCallerNameForInvocationGraph
    !context: inContext
    !mode: inCurrentMode
    !?temporary: ioTemporaries
    !?staticStringMap: ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?variableMap:ioUniversalMap
    !?alloca: ioAllocaList
    !?instructionListIR: ioInstructionGenerationList
    ?@objectIR targetObject
    ?globalVariableReceiverName:let unused globalVariableReceiverName
  ]
  if [targetObject isPossibleFunction] then
    error [mAssignmentTargetAST mIdentifier] : "invalid assignment target" : targetObject
  end
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:[targetObject type]
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:let @objectIR sourcePossibleReference
  ]
  [!?ioInstructionGenerationList appendLoadFromReference
    !?ioTemporaries
    !sourcePossibleReference
    !mEndOfSourceExpression
    ?let sourceValue
  ]  
#--- Check operator is available for type
  let noPanicGeneration = [option plm_options.noPanicGeneration value]
  let panicMode = inCurrentMode == .panicMode
  @infixOperatorMap operatorMap
  switch mOperator
  case bitWiseAndAssign :
    operatorMap = inContext.mAndOperatorMap
  case bitWiseOrAssign :
    operatorMap = inContext.mOrOperatorMap
  case bitWiseXorAssign :
    operatorMap = inContext.mXorOperatorMap
  case addAssign :
    if panicMode then
      error [mAssignmentTargetAST mIdentifier]
       : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mAddNoOvfOperatorMap else inContext.mAddOperatorMap end
  case addModuloAssign :
    operatorMap = inContext.mAddNoOvfOperatorMap
  case subAssign :
    if panicMode then
      error [mAssignmentTargetAST mIdentifier]
       : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mSubNoOvfOperatorMap else inContext.mSubOperatorMap end
  case subModuloAssign :
    operatorMap = inContext.mSubNoOvfOperatorMap
  case mulAssign :
    if panicMode then
      error [mAssignmentTargetAST mIdentifier]
       : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mMulNoOvfOperatorMap else inContext.mMulOperatorMap end
  case mulModuloAssign :
    operatorMap = inContext.mMulNoOvfOperatorMap
  case divAssign :
    if panicMode then
      error [mAssignmentTargetAST mIdentifier]
       : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mDivNoOvfOperatorMap else inContext.mDivOperatorMap end
  case divZeroAssign :
    operatorMap = inContext.mDivNoOvfOperatorMap
  case modAssign :
    if panicMode then
      error [mAssignmentTargetAST mIdentifier]
       : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mModNoOvfOperatorMap else inContext.mModOperatorMap end
  case modZeroAssign :
    operatorMap = inContext.mModNoOvfOperatorMap
  end
  [operatorMap checkBinaryOperationWith
    !leftType:[targetObject type]
    !rightType:[sourceValue type]
    !operatorLocation:[mAssignmentTargetAST mIdentifier]
    ?resultType:*
    ?op:let @infixOperatorDescription binaryOperator
  ]
#--- Code generation
  [!?ioInstructionGenerationList appendLoadFromReference
    !?ioTemporaries
    !targetObject
    ![mAssignmentTargetAST mIdentifier]
    ?let variableValue
  ]
  [binaryOperator generateInfixOperatorCode
    !?ioTemporaries
    !?ioInstructionGenerationList
    !variableValue
    ![mAssignmentTargetAST mIdentifier]
    !sourceValue
    ![targetObject type]
    ?let newResultingValue
  ]
  [!?ioInstructionGenerationList appendStoreFromReference
    !targetObject
    ![mAssignmentTargetAST mIdentifier]
    !newResultingValue
  ]
}

#â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
