#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <assignment_combined_with_operator> !@infixOperator outInfixOperator !@location outOperatorLocation {
    select
      $|=$
      outInfixOperator = .orOp
    or
      $&=$
      outInfixOperator = .andOp
    or
      $^=$
      outInfixOperator = .xorOp
    or
      $+=$
      outInfixOperator = .addOp
    or
      $+%=$
      outInfixOperator = .addOpNoOvf
    or
      $-=$
      outInfixOperator = .subOp
    or
      $-%=$
      outInfixOperator = .subOpNoOvf
    or
      $*=$
      outInfixOperator = .mulOp
    or
      $*%=$
      outInfixOperator = .mulOpNoOvf
    or
      $<<=$
      outInfixOperator = .leftShiftOp
    or
      $>>=$
      outInfixOperator = .rightShiftOp
    end
    outOperatorLocation = .here
  }

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
  #--- LValue
    <lvalue> !?ioAST ?let lvalue
    let instructionLocation = @location.here
  #--- Assignment operator
    <assignment_combined_with_operator> ?let infixOperator ?let operatorLocation
  #--- Right expression
    <expression> !?ioAST ?let @expressionAST rightExpression
  #--- Build source expression
    @expressionAST leftExpression
    switch lvalue.mKind
    case register (@lstring registerName  @registerIndexAST index) :
      leftExpression = @registerInExpressionAST.new {!lvalue.mIdentifier !registerName !index !["" nowhere]}
    case regular (@accessInAssignmentListAST accessList) :
      @primaryInExpressionAccessListAST expressionAccessList = {}
      for (access) in accessList do
        switch access
        case property (@lstring name) :
          expressionAccessList += !.property {!name:name}
        case arrayAccess (@expressionAST index @location endOfIndex) :
          expressionAccessList += !.arrayAccess {!index:index !endOfIndex:endOfIndex}
        end
      end
      leftExpression = @primaryInExpressionAST.new {!lvalue.mIdentifier !expressionAccessList}
    end
    let expression = @infixOperatorExpressionAST.new {
      !leftExpression
      !operatorLocation
      !infixOperator
      !rightExpression
    }
  #--- Build assignment instruction
    ioInstructionList += !@assignmentInstructionAST.new {
      !instructionLocation
      !lvalue
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
