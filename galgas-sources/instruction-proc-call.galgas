#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @procEffectiveParameterPassingModeAST {
  case input (@lstring name)
  case output (@expressionAST exp @location endOfExp)
  case outputInput (@lstring name)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @procEffectiveParameterPassingModeAST passingModeForActualSelector ?@lstring inSelector -> @string outResult {
  switch self
  case input (*) : outResult = "?"
  case output (* *) : outResult = "!"
  case outputInput (*) : outResult = "!?"
  end
  if inSelector.string != "" then
    outResult += inSelector.string + ":"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @procEffectiveParameterListAST {
  @procEffectiveParameterPassingModeAST mEffectiveParameterKind
  @lstring mSelector
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @procCallInstructionAST : @instructionAST {
  @lstring mReceiverName
  @lstring mProcName
  @procEffectiveParameterListAST mEffectiveParameterList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    @lstring receiverName
    @lstring procName
    select
      $self$
      receiverName = .new {!"self" !.here}
      $.$
      $identifier$ ?procName
    or
      $identifier$ ?let x
      select
        procName = x
        receiverName = ["" nowhere]
      or
        $.$
        receiverName = x
        $identifier$ ?procName
      end
    end
    @procEffectiveParameterListAST effectiveParameterList = {}
    $($
    repeat
    while
      $!$ ?let selector
      <expression> ?let expression
      effectiveParameterList += !.output{!exp:expression !endOfExp:.here} !selector
    while
      $!?$ ?let selector
      $identifier$ ?let effectiveParameterName
      effectiveParameterList += !.outputInput{!name:effectiveParameterName} !selector
    while
      $?$ ?let selector
      select
        $identifier$ ?let effectiveParameterName
        effectiveParameterList += !.input{!name:effectiveParameterName} !selector
      or
        $self$
        effectiveParameterList += !.input{!name:.new {!"self" !.here}} !selector
      end
    end
    $)$
    ioInstructionList += !@procCallInstructionAST.new {
      !receiverName
      !procName
      !effectiveParameterList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @procCallInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in mEffectiveParameterList do
    switch mEffectiveParameterKind
    case input (*):
    case output (expression *) :
      [expression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    case outputInput (*) :
    end 
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @procEffectiveParameterList {
  @procEffectiveParameterPassingModeAST mEffectiveParameterPassingMode
  @lstring mSelector
  @unifiedTypeMap-proxy mParameterType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @procCallInstructionAST analyze
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Search proc in proc map
  @procCallEffectiveParameterListIR procCallEffectiveParameterListIR = {}
  @procedureSignature procSignature
  @modeMap procedureModeMap
  @unifiedTypeMap-proxy receiverType
  @lstring routineNameForInvocationGraph
  @bool isSection
  if mReceiverName.string != "" then
    [!?ioVariableMap searchForReadAccess
      !mReceiverName
      ?receiverType
      ?*
      ?@objectInMemoryIR variableKind
      ?4*
    ]
  #--- Load variable
    procCallEffectiveParameterListIR += !.outputInput !["" nowhere] ![variableKind address] 
    [[receiverType procedureMap] searchKey
      !mProcName
      ?*
      ?procedureModeMap
      ?procSignature
      ?*
    ]
    routineNameForInvocationGraph = procNameForInvocationGraph (!receiverType !mProcName)
    isSection = false
  elsif [inContext.mProcedureMap hasKey !mProcName.string] then
    [inContext.mProcedureMap searchKey
      !mProcName
      ?*
      ?procedureModeMap
      ?procSignature
      ?*
    ]
    receiverType = .null
    routineNameForInvocationGraph = procNameForInvocationGraph (!receiverType !mProcName)
    isSection = false
  elsif [inContext.mSectionMap hasKey !mProcName.string] then
    [inContext.mSectionMap searchKey
      !mProcName
      ?*
      ?procSignature
    ]
    procedureModeMap = {![userModeName () nowhere]}
    receiverType = .null
    routineNameForInvocationGraph = sectionNameForInvocationGraph (!receiverType !mProcName)
    isSection = true
  else
    error mProcName
      :"undefined proc or section"
      : isSection, receiverType, procedureModeMap, procSignature, routineNameForInvocationGraph
  end
#--- Enter in invocation graph
  [!?ioTemporaries.mSubprogramInvocationGraph addEdge
    !inRoutineNameForInvocationGraph
    !routineNameForInvocationGraph
  ]
#--- Check parameters
  @procEffectiveParameterList parameterList = {}
  for () formal_ in procSignature, () in mEffectiveParameterList do
    switch mEffectiveParameterKind 
    case input (@lstring name) :
      [!?ioVariableMap searchForWriteAccess
        !name
        ?let type
        ?let accessIsAllowed
        ?let unused parameterAccess
        ?let isCopiable
        ?*
        ?let canBeUsedAsInputParameter
        ?*
      ]
      if not accessIsAllowed then
        error name : "routine has no access right on the this variable"
      end
      if not canBeUsedAsInputParameter then
        error name : "this variable cannot be used as input parameter"
      end
      if not isCopiable then
        error name : "the '" + name + "' variable is not copiable"
      end
      parameterList += !mEffectiveParameterKind !mSelector !type
      procCallEffectiveParameterListIR +=
        !.input
        !mSelector
        !.new{!type !.llvmLocalObject {!name:llvmNameForLocalVariable (!name.string)}}
    case output (@expressionAST expression @location endOfExp) :
      [expression analyzeExpression
        !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
        !optionalTargetType:formal_mType
        !context:inContext
        !modes:inModeSet
        !allowException:inAllowExceptions
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?instructionListIR:ioInstructionGenerationList
        ?result:let @operandIR expressionResult
      ]
      let result = checkAssignmentCompatibility (
        !source:expressionResult
        !targetAnnotationType:formal_mType
        !errorLocation:endOfExp
        !staticTypeAllowed:false
      )
      parameterList += !mEffectiveParameterKind !mSelector !formal_mType
      procCallEffectiveParameterListIR += 
        !.output
        !mSelector
        !result
    case outputInput (@lstring name) :
      [!?ioVariableMap searchForReadWriteAccess
        !name
        ?let type
        ?let accessIsAllowed
        ?let unused parameterAccess
        ?2*
        ?let canBeUsedAsInputParameter
        ?*
      ]
      if not canBeUsedAsInputParameter then
        error name : "this variable cannot be used as output/input parameter"
      end
      if not accessIsAllowed then
        error name : "routine has no access right on the this variable"
      end
      parameterList += !mEffectiveParameterKind !mSelector !type
      procCallEffectiveParameterListIR +=
        !.outputInput
        !mSelector
        !.new {!type !.llvmLocalObject {!name:llvmNameForLocalVariable (!name.string)}}
    end
  end
#--- Check mode
  checkMode (
    !requiredModes:inModeSet
    !possibleModes:[procedureModeMap keySet]
    !error:mProcName.location
  )
  if [procSignature length] != [parameterList length] then
    error mProcName: "this proc requires " + [procSignature length] + " argument(s), this call names "
      + [procSignature length] + " argument(s)"
  else
    for () formal_ in procSignature, () actual_ in parameterList do
      if [formal_mType key] != [actual_mParameterType key] then
        error actual_mSelector : "the actual parameter type is '" + [actual_mParameterType key] +
           "', and is incompatible with the formal type '" + [formal_mType key] + "'"
      end
      let requiredPassingMode = [formal_mFormalArgumentPassingMode requiredActualPassingModeForSelector !formal_mSelector]
      let testedPassingMode = [actual_mEffectiveParameterPassingMode passingModeForActualSelector !actual_mSelector]
      if requiredPassingMode != testedPassingMode then
        error actual_mSelector : "the required selector is '" + requiredPassingMode + "'"
      end
    end  
  end
#--- Code generation
  ioInstructionGenerationList += !@procCallInstructionIR.new {
    !if receiverType == .null then "" else [receiverType key] + "." end + mProcName
    !isSection
    !procCallEffectiveParameterListIR
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @procEffectiveParameterPassingModeIR {
  case input
  case output
  case outputInput
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @procCallEffectiveParameterListIR {
  @procEffectiveParameterPassingModeIR mEffectiveParameterPassingMode
  @lstring mSelector
  @operandIR mParameter
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @procCallInstructionIR : @abstractInstructionIR {
  @string mProcName
  @bool mIsSection # true:section, false:proc
  @procCallEffectiveParameterListIR mParameters
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @procCallInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "  call void @"
  ioLLVMcode += if mIsSection then llvmNameForSectionCall (!mProcName) else llvmNameForProcedure (!mProcName) end
  ioLLVMcode += " ("
  for () in mParameters do
    switch mEffectiveParameterPassingMode
    case input:
      ioLLVMcode += [mParameter.mType llvmTypeName] + "* " + [mParameter.mValue llvmName]
    case output:
      ioLLVMcode += [mParameter.mType llvmTypeName] + " " + [mParameter.mValue llvmName]
    case outputInput:
      ioLLVMcode += [mParameter.mType llvmTypeName] + "* " + [mParameter.mValue llvmName]
    end
  between
    ioLLVMcode += ", "
  end
  ioLLVMcode += ")\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @procCallInstructionIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  if mIsSection then 
    ioAccessibleEntities.mSectionSet += !mProcName
  else
    ioAccessibleEntities.mProcedureSet += !mProcName
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
