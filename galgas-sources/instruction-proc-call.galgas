#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @effectiveParameterPassingModeAST {
  case input (@lstring name)
  case inputWithType (@bool constant @lstring typeName @lstring name)
  case output (@expressionAST exp @location endOfExp)
  case outputInput (@lstring name)
  case outputInputSelfVariable (@lstring name)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @effectiveParameterListAST {
  @effectiveParameterPassingModeAST mEffectiveParameterKind
  @lstring mSelector
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract class @abstractCallInstructionAST : @instructionAST {
  @effectiveParameterListAST mEffectiveParameterList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @standaloneRoutineCallInstructionAST : @abstractCallInstructionAST {
  @lstring mRoutineName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @selfRoutineCallInstructionAST : @abstractCallInstructionAST {
  @lstring mRoutineName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @remoteRoutineCallInstructionAST : @abstractCallInstructionAST {
  @lstring mReceiverName
  @lstring mRoutineName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @selfRemoteRoutineCallInstructionAST : @abstractCallInstructionAST {
  @lstring mPropertyName
  @lstring mMethodName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
     <routine_call> ?let @abstractCallInstructionAST call_instruction
     ioInstructionList += !call_instruction
  }

  #·····················································································································

  rule <routine_call> !@abstractCallInstructionAST outInstruction {
    $self$
    $.$
    $identifier$ ?let routineName
    <effective_parameters> ?let effectiveParameterList
    outInstruction = @selfRoutineCallInstructionAST.new {
      !effectiveParameterList
      !routineName
    }
  }

  #·····················································································································

  rule <routine_call> !@abstractCallInstructionAST outInstruction {
    $identifier$ ?let receiverName
    $.$
    $identifier$ ?let routineName
    <effective_parameters> ?let effectiveParameterList
    outInstruction = @remoteRoutineCallInstructionAST.new {
      !effectiveParameterList
      !receiverName
      !routineName
    }
  }

  #·····················································································································

  rule <routine_call> !@abstractCallInstructionAST outInstruction {
    $self$
    $.$
    $identifier$ ?let receiverName
    $.$
    $identifier$ ?let routineName
    <effective_parameters> ?let effectiveParameterList
    outInstruction = @selfRemoteRoutineCallInstructionAST.new {
      !effectiveParameterList
      !receiverName
      !routineName
    }
  }

  #·····················································································································

  rule <routine_call> !@abstractCallInstructionAST outInstruction {
    $identifier$ ?let standaloneRoutineName
    <effective_parameters> ?let effectiveParameterList
    outInstruction = @standaloneRoutineCallInstructionAST.new {
      !effectiveParameterList
      !standaloneRoutineName
    }
  }

  #·····················································································································

  rule <effective_parameters> !@effectiveParameterListAST outEffectiveParameterList {
    outEffectiveParameterList = {}
    $($
    repeat
    while
      $!$ ?let selector
      <expression> ?let expression
      outEffectiveParameterList += !.output{!exp:expression !endOfExp:.here} !selector
    while
      $!?$ ?let selector
      $identifier$ ?let effectiveParameterName
      outEffectiveParameterList += !.outputInput{!name:effectiveParameterName} !selector
    while
      $!?$ ?let selector
      $self$
      $.$
      $identifier$ ?let effectiveParameterName
      outEffectiveParameterList += !.outputInputSelfVariable{!name:effectiveParameterName} !selector
    while
      $?$ ?let selector
      $identifier$ ?let effectiveParameterName
      outEffectiveParameterList += !.input{!name:effectiveParameterName} !selector
    while
      $?$ ?let selector
      @bool constant
      select
        $var$
        constant = false
      or
        $let$
        constant = true
      end
      $identifier$ ?let effectiveParameterName
      @lstring typeName
      select
        typeName = ["" nowhere]
      or
        $typeName$ ?typeName
      end
      outEffectiveParameterList += !.inputWithType{!constant:constant !typeName:typeName !name:effectiveParameterName} !selector
    end
    $)$
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractCallInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in mEffectiveParameterList do
    switch mEffectiveParameterKind
    case input (*):
    case inputWithType (* @lstring typeName *) :
      if typeName.string != "" then
        [!?ioGraph noteNode !.new {!"$" + typeName !typeName.location}]
      end
    case output (expression *) : [expression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    case outputInput (*) :
    case outputInputSelfVariable (*) :
    end 
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @effectiveParameterPassingModeAST passingModeForActualSelector ?@lstring inSelector -> @string outResult {
  switch self
  case input (*) : outResult = "?"
  case inputWithType (* * *) : outResult = "?"
  case output (* *) : outResult = "!"
  case outputInput (*) : outResult = "!?"
  case outputInputSelfVariable (*) : outResult = "!?"
  end
  if inSelector.string != "" then
    outResult += inSelector.string + ":"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @procEffectiveParameterList {
  @effectiveParameterPassingModeAST mEffectiveParameterPassingMode
  @lstring mSelector
  @unifiedTypeMap-proxy mParameterType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfRoutineCallInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inRequiredModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  @procCallEffectiveParameterListIR effectiveParameterListIR = {}
  let routineMangledName = @lstring.new {!"$" + [inSelfType key] + "." + mRoutineName !mRoutineName.location}
  effectiveParameterListIR += !.outputInput !.new {!inSelfType !.selfObject}
  [inContext.mRoutineMapForContext searchKey
    !routineMangledName
    ?let unused mutating
    ?let modeMap
    ?let @procedureSignature formalSignature
    ?let @routineKind routineKind
    ?*
    ?let returnedType
  ]
#--- Enter in invocation graph
  @lstring routineNameForInvocationGraph
  switch routineKind
  case function :
    routineNameForInvocationGraph = procNameForInvocationGraph (!inSelfType !mRoutineName)
  case section :
    routineNameForInvocationGraph = sectionNameForInvocationGraph (!inSelfType !mRoutineName)
  case service :
    routineNameForInvocationGraph = serviceNameForInvocationGraph (!inSelfType !mRoutineName)
  case primitive :
    routineNameForInvocationGraph = primitiveNameForInvocationGraph (!inSelfType !mRoutineName)
  end
  [!?ioTemporaries.mSubprogramInvocationGraph addEdge !inCallerNameForInvocationGraph !routineNameForInvocationGraph]
#--- Check modes
  let routineKindIR = checkMode (
    !requiredModes:inRequiredModeSet
    !possibleModes:[modeMap keySet]
    !kind:routineKind
    !error:mRoutineName.location
  )
#--- Analyze effective parameters
  analyzeEffectiveParameters (
    !self:inSelfType
    !formal:formalSignature
    !effective:mEffectiveParameterList
    !errorLocation:mRoutineName.location
    !callerForInvocationGraph:inCallerNameForInvocationGraph
    !context:inContext
    !requiredModeSet:inRequiredModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    !?effectiveIR:effectiveParameterListIR
  )
  if returnedType != .null then
    error mRoutineName : "cannot be called in instruction: return value"
  end
#--- Code generation
  ioInstructionGenerationList += !@procCallInstructionIR.new {
    !"" # Receiver is self
    !routineMangledName.string
    !routineKindIR
    !effectiveParameterListIR
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @standaloneRoutineCallInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inRequiredModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  analyzeRoutineCall (
    !self:inSelfType
    !receiverName:.new{!"" !mRoutineName.location}
    !routineName:mRoutineName
    !effective:mEffectiveParameterList
    !callerForInvocationGraph:inCallerNameForInvocationGraph
    !context:inContext
    !requiredModeSet:inRequiredModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?effectiveIR:let @procCallEffectiveParameterListIR effectiveParameterListIR
    ?routineKind:let @routineKindIR routineKindIR
    ?routineMangledName:let @lstring routineMangledName
    ?returnType:let @unifiedTypeMap-proxy returnedType
  )
  if returnedType != .null then
    error mRoutineName : "cannot be called in instruction: return value"
  end
#--- Code generation
  ioInstructionGenerationList += !@procCallInstructionIR.new {
    !"" # No receiver
    !routineMangledName.string
    !routineKindIR
    !effectiveParameterListIR
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @remoteRoutineCallInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inRequiredModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  analyzeRoutineCall (
    !self:inSelfType
    !receiverName:mReceiverName
    !routineName:mRoutineName
    !effective:mEffectiveParameterList
    !callerForInvocationGraph:inCallerNameForInvocationGraph
    !context:inContext
    !requiredModeSet:inRequiredModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?effectiveIR:let @procCallEffectiveParameterListIR effectiveParameterListIR
    ?routineKind:let @routineKindIR routineKindIR
    ?routineMangledName:let @lstring routineMangledName
    ?returnType:let @unifiedTypeMap-proxy returnedType
  )
  if returnedType != .null then
    error mRoutineName : "cannot be called in instruction: return value"
  end
#--- Code generation
  ioInstructionGenerationList += !@procCallInstructionIR.new {
    !mReceiverName.string
    !routineMangledName.string
    !routineKindIR
    !effectiveParameterListIR
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfRemoteRoutineCallInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inRequiredModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  if inSelfType == .null then
    error mPropertyName : "'self' is not available in this context"
  else
    switch [inSelfType kind]
    case opaque (*) :
      error mPropertyName : "an opaque type does not handle field access" : ioInstructionGenerationList
    case boolean :
      error mPropertyName : "a boolean does not handle field access" : ioInstructionGenerationList
    case staticInteger :
      error mPropertyName : "an integer does not handle field access" : ioInstructionGenerationList
    case boolset :
      error mPropertyName : "a boolset does not handle field access" : ioInstructionGenerationList
    case literalString :
      error mPropertyName : "a literal string does not handle field access" : ioInstructionGenerationList
    case enumeration (*) :
      error mPropertyName : "an enumeration does not handle field access" : ioInstructionGenerationList
    case integer (* * * *) :
      error mPropertyName : "an integer does not handle field access" : ioInstructionGenerationList
    case structure (@propertyMap propertyMap *) :
      [propertyMap searchKey !mPropertyName ?let propertyType ?let idx]
      getLocalNameOfNewTempObjectInMemory (!propertyType !?ioTemporaries ?let propertyAddressLLVMvar)
      [!?ioInstructionGenerationList appendGetElementPtrFromSelf
        !propertyAddressLLVMvar
        !inSelfType
        !idx
        !mPropertyName.string
      ]        
      let routineMangledName = @lstring.new {!"$" + [propertyType key] + "." + mMethodName !mMethodName.location}
      @procCallEffectiveParameterListIR effectiveParameterListIR = {}
      effectiveParameterListIR += !.outputInput ![propertyAddressLLVMvar address] #--- add "load receiver" as first argument
      [inContext.mRoutineMapForContext searchKey
        !routineMangledName
        ?let unused mutating
        ?let modeMap
        ?let @procedureSignature formalSignature
        ?let routineKind
        ?*
        ?let returnedType
      ]
    #--- Enter in invocation graph
      @lstring routineNameForInvocationGraph
      switch routineKind
      case function :
        routineNameForInvocationGraph = procNameForInvocationGraph (!propertyType !mMethodName)
      case section :
        routineNameForInvocationGraph = sectionNameForInvocationGraph (!propertyType !mMethodName)
      case service :
        routineNameForInvocationGraph = serviceNameForInvocationGraph (!propertyType !mMethodName)
      case primitive :
        routineNameForInvocationGraph = primitiveNameForInvocationGraph (!propertyType !mMethodName)
      end
      [!?ioTemporaries.mSubprogramInvocationGraph addEdge !inCallerNameForInvocationGraph !routineNameForInvocationGraph]
    #--- Check modes
      let routineKindIR = checkMode (
        !requiredModes:inRequiredModeSet
        !possibleModes:[modeMap keySet]
        !kind:routineKind
        !error:mMethodName.location
      )
    #--- Analyze effective parameters
      analyzeEffectiveParameters (
        !self:inSelfType
        !formal:formalSignature
        !effective:mEffectiveParameterList
        !errorLocation:mMethodName.location
        !callerForInvocationGraph:inCallerNameForInvocationGraph
        !context:inContext
        !requiredModeSet:inRequiredModeSet
        !allowPanic:inAllowPanic
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?alloca:ioAllocaList
        !?instructionListIR:ioInstructionGenerationList
        !?effectiveIR:effectiveParameterListIR
      )
      if returnedType != .null then
        error mMethodName : "cannot be called in instruction: return value"
      end
    #--- Code generation
      ioInstructionGenerationList += !@procCallInstructionIR.new {
        !""
        !routineMangledName.string
        !routineKindIR
        !effectiveParameterListIR
      }
    end    
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeRoutineCall
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?receiverName:let @lstring inReceiverName
  ?routineName:let @lstring inRoutineName
  ?effective:let @effectiveParameterListAST inEffectiveParameterList
  ?callerForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?requiredModeSet:let @stringset inRequiredModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !effectiveIR:@procCallEffectiveParameterListIR outEffectiveParameterListIR
  !routineKind:@routineKindIR outRoutineKindIR
  !routineMangledName:@lstring outRoutineMangledName
  !returnType:@unifiedTypeMap-proxy outReturnedType
{
  outEffectiveParameterListIR = {}
  @unifiedTypeMap-proxy receiverType
  if inReceiverName.string != "" then
    [!?ioVariableMap searchForReadAccess
      !lkey:inReceiverName
      ?type:receiverType
      ?1*
      ?variableKind:@objectInMemoryIR variableKind
      ?4*
    ]
    outRoutineMangledName = .new {!"$" + [receiverType key] + "." + inRoutineName !inRoutineName.location}
    outEffectiveParameterListIR += !.outputInput ![variableKind address] #--- add "load self" as first argument
  else
    outRoutineMangledName = .new {!"." + inRoutineName !inRoutineName.location}
    receiverType = .null
  end
  [inContext.mRoutineMapForContext searchKey
    !outRoutineMangledName
    ?let unused mutating
    ?let modeMap
    ?let @procedureSignature formalSignature
    ?let @routineKind routineKind
    ?*
    ?outReturnedType
  ]
#--- Enter in invocation graph
  @lstring routineNameForInvocationGraph
  switch routineKind
  case function :
    routineNameForInvocationGraph = procNameForInvocationGraph (!receiverType !inRoutineName)
  case section :
    routineNameForInvocationGraph = sectionNameForInvocationGraph (!receiverType !inRoutineName)
  case service :
    routineNameForInvocationGraph = serviceNameForInvocationGraph (!receiverType !inRoutineName)
  case primitive :
    routineNameForInvocationGraph = primitiveNameForInvocationGraph (!receiverType !inRoutineName)
  end
  [!?ioTemporaries.mSubprogramInvocationGraph addEdge !inCallerNameForInvocationGraph !routineNameForInvocationGraph]
#--- Check modes
  outRoutineKindIR = checkMode (
    !requiredModes:inRequiredModeSet
    !possibleModes:[modeMap keySet]
    !kind:routineKind
    !error:inRoutineName.location
  )
#--- Analyze effective parameters
  analyzeEffectiveParameters (
    !self:inSelfType
    !formal:formalSignature
    !effective:inEffectiveParameterList
    !errorLocation:inRoutineName.location
    !callerForInvocationGraph:inCallerNameForInvocationGraph
    !context:inContext
    !requiredModeSet:inRequiredModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    !?effectiveIR:outEffectiveParameterListIR
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeEffectiveParameters
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?formal:let @procedureSignature inFormalSignature
  ?effective:let @effectiveParameterListAST inEffectiveParameterList
  ?errorLocation:let @location inErrorLocation
  ?callerForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?requiredModeSet:let @stringset inRequiredModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  ?!effectiveIR:@procCallEffectiveParameterListIR ioEffectiveParameterListIR
{
#--- Analyze effective parameters
  @procEffectiveParameterList parameterList = {}
  for () formal_ in inFormalSignature, () effective_ in inEffectiveParameterList do
    switch effective_mEffectiveParameterKind 
    case inputWithType (@bool constant @lstring typeName @lstring name) :
      let type = if typeName.string == "" then
        formal_mType
      else
        @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !typeName}
      end
      let varLLVMName = name.string + "." + ioTemporaries.mTemporaryIndex
      ioTemporaries.mTemporaryIndex ++
      let targetVar = @objectInMemoryIR.localValue {!type:type !name:varLLVMName}
      if constant then
        [!?ioVariableMap insertLocalConstant
          !lkey:name
          !type:type
          !readAccessAllowed:true
          !variableKind:targetVar
          !copyable:true
          !fieldMap:{}
          !canBeUsedAsInputParameter:true
          !isConstant:false
        ]
      else
        [!?ioVariableMap insertDefinedLocalVariable
          !lkey:name
          !type:type
          !readAccessAllowed:true
          !variableKind:targetVar
          !copyable:true
          !fieldMap:{}
          !canBeUsedAsInputParameter:true
          !isConstant:false
        ]
      end
      ioAllocaList += !varLLVMName !type
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector !type
      ioEffectiveParameterListIR +=
        !.input
        !.new{!type !.llvmLocalObject {!name:llvmNameForLocalVariable (!varLLVMName)}}
    case input (@lstring name) :
      [!?ioVariableMap searchForWriteAccess
        !lkey:name
        ?type:let type
        ?readAccessAllowed:let accessIsAllowed
        ?variableKind:let variableKind
        ?copyable:let isCopyable                                                 
        ?fieldMap:*
        ?canBeUsedAsInputParameter:let canBeUsedAsInputParameter
        ?isConstant:*
      ]
      if not accessIsAllowed then
        error name : "routine has no access right on the this variable"
      end
      if not canBeUsedAsInputParameter then
        error name : "this variable cannot be used as input parameter"
      end
      if not isCopyable then
        error name : "an $" + [type key] + " instance is not copyable"
      end
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector !type
      ioEffectiveParameterListIR +=
        !.input
#        !effective_mSelector.string
        !.new{!type !.llvmLocalObject {!name:llvmNameForLocalVariable (![variableKind llvmName])}}
    case output (@expressionAST expression @location endOfExp) :
      [expression analyzeExpression
        !self:inSelfType
        !inGuard:false
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !optionalTargetType:formal_mType
        !context:inContext
        !modes:inRequiredModeSet
        !allowPanic:inAllowPanic
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?alloca:ioAllocaList
        !?instructionListIR:ioInstructionGenerationList
        ?result:let @operandIR expressionResult
      ]
      let result = checkAssignmentCompatibility (
        !source:expressionResult
        !targetAnnotationType:formal_mType
        !errorLocation:endOfExp
        !staticTypeAllowed:false
      )
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector !formal_mType
      ioEffectiveParameterListIR += 
        !.output
#        !effective_mSelector.string
        !result
    case outputInput (@lstring name) :
     [!?ioVariableMap searchForReadWriteAccess
        !lkey:name
        ?type:let type
        ?readAccessAllowed:let accessIsAllowed
        ?variableKind:let variableKind
        ?2*
        ?canBeUsedAsInputParameter:let canBeUsedAsInputParameter
        ?isConstant:*
      ]
      if not canBeUsedAsInputParameter then
        error name : "this variable cannot be used as output/input parameter"
      end
      if not accessIsAllowed then
        error name : "routine has no access right on the this variable"
      end
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector !type
      ioEffectiveParameterListIR +=
        !.outputInput
#        !effective_mSelector.string
        !.new {!type !.llvmLocalObject {!name:llvmNameForLocalVariable (![variableKind llvmName])}}
    case outputInputSelfVariable (@lstring name) :
      if inSelfType == .null then
        error name : "'self' is not available in this context" :parameterList, ioEffectiveParameterListIR
      else
        switch [inSelfType kind]
        case opaque (*) :
          error name : "an opaque type does not handle field access" : parameterList, ioEffectiveParameterListIR
        case boolean :
          error name : "a boolean does not handle field access" : parameterList, ioEffectiveParameterListIR
        case staticInteger :
          error name : "an integer does not handle field access" : parameterList, ioEffectiveParameterListIR
        case boolset :
          error name : "a boolset does not handle field access" : parameterList, ioEffectiveParameterListIR
        case literalString :
          error name : "a literal string does not handle field access" : parameterList, ioEffectiveParameterListIR
        case enumeration (*) :
          error name : "an enumeration does not handle field access" : parameterList, ioEffectiveParameterListIR
        case integer (* * * *) :
          error name : "an integer does not handle field access" : parameterList, ioEffectiveParameterListIR
        case structure (@propertyMap propertyMap *) :
          [propertyMap searchKey !name ?let type ?let idx]
          getLocalNameOfNewTempObjectInMemory (!type !?ioTemporaries ?let fieldAddress)
          [!?ioInstructionGenerationList appendGetElementPtrFromSelf
            !fieldAddress
            !inSelfType
            !idx
            !name.string
          ]        
          parameterList += !effective_mEffectiveParameterKind !effective_mSelector !type
          ioEffectiveParameterListIR +=
            !.outputInput
#            !effective_mSelector.string
            !.new {!type !.llvmLocalObject {!name:llvmNameForLocalVariable (![fieldAddress name])}}
        end    
      end
    end
  end
#--- Check parameters
  if [inFormalSignature length] != [inEffectiveParameterList length] then
    error inErrorLocation: "this routine requires " + [inFormalSignature length] + " argument(s), this call names "
      + [inEffectiveParameterList length] + " argument(s)"
  else
    for () formal_ in inFormalSignature, () actual_ in parameterList do
      if [formal_mType key] != [actual_mParameterType key] then
        error actual_mSelector : "the actual parameter type is '" + [actual_mParameterType key] +
           "', and is incompatible with the formal type '" + [formal_mType key] + "'"
      end
      let requiredPassingMode = [formal_mFormalArgumentPassingMode requiredActualPassingModeForSelector !formal_mSelector]
      let testedPassingMode = [actual_mEffectiveParameterPassingMode passingModeForActualSelector !actual_mSelector]
      if requiredPassingMode != testedPassingMode then
        error actual_mSelector : "the required selector is '" + requiredPassingMode + "'"
      end
    end  
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @procEffectiveParameterPassingModeIR {
  case input
  case output
  case outputInput
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @procCallEffectiveParameterListIR {
  @procEffectiveParameterPassingModeIR mEffectiveParameterPassingMode
  @operandIR mParameter
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @routineKindIR {
  case function
  case primitiveInProcessorUserMode
  case sectionInProcessorUserMode
  case serviceInProcessorUserMode
  case primitiveInProcessorPrivilegedMode
  case sectionInProcessorPrivilegedMode
  case serviceInProcessorPrivilegedMode
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @procCallInstructionIR : @abstractInstructionIR {
  @string mGlobalVariableName # Receiver name, "" if not receiver
  @string mProcName
  @routineKindIR mKind
  @procCallEffectiveParameterListIR mParameters
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @procCallInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "  call void @"
  switch mKind 
  case function : ioLLVMcode += llvmNameForFunction (!mProcName)
  case serviceInProcessorUserMode : ioLLVMcode += llvmNameForServiceCall (!mProcName)
  case serviceInProcessorPrivilegedMode : ioLLVMcode += llvmNameForServiceImplementation (!mProcName)
  case sectionInProcessorUserMode : ioLLVMcode += llvmNameForSectionCall (!mProcName)
  case sectionInProcessorPrivilegedMode : ioLLVMcode += llvmNameForSectionImplementation (!mProcName)
  case primitiveInProcessorUserMode : ioLLVMcode += llvmNameForPrimitiveCall (!mProcName)
  case primitiveInProcessorPrivilegedMode : ioLLVMcode += llvmNameForPrimitiveImplementation (!mProcName)
  end
  ioLLVMcode += " ("
  for () in mParameters do
    switch mEffectiveParameterPassingMode
    case input:
      ioLLVMcode += [mParameter.mType llvmTypeName] + "* " + [mParameter.mValue llvmName]
    case output:
      ioLLVMcode += [mParameter.mType llvmTypeName] + " " + [mParameter.mValue llvmName]
    case outputInput:
      ioLLVMcode += [mParameter.mType llvmTypeName] + "* " + [mParameter.mValue llvmName]
    end
  between
    ioLLVMcode += ", "
  end
  ioLLVMcode += ")\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @procCallInstructionIR enterAccessibleEntities
  ?!@accessibleEntities ioAccessibleEntities
  ?!@uint unused ioMaxBranchOfOnInstructions
{
  ioAccessibleEntities.mRoutineSet += !mProcName
  if mGlobalVariableName != "" then
    ioAccessibleEntities.mGlobalVariableSet += !mGlobalVariableName
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
