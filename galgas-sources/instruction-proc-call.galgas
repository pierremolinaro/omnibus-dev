#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

enum @procEffectiveParameterPassingModeAST {
  case input (@lstring name)
  case output (@expressionAST exp)
  case outputInput (@lstring name)
}

#----------------------------------------------------------------------------------------------------------------------*

getter @procEffectiveParameterPassingModeAST passingModeForActualSelector ?@lstring inSelector -> @string outResult {
  switch self
  case input (*) : outResult = "?"
  case output (*) : outResult = "!"
  case outputInput (*) : outResult = "!?"
  end
  if inSelector.string != "" then
    outResult += inSelector.string + ":"
  end
}

#----------------------------------------------------------------------------------------------------------------------*

list @procEffectiveParameterListAST {
  @procEffectiveParameterPassingModeAST mEffectiveParameterKind
  @lstring mSelector
}

#----------------------------------------------------------------------------------------------------------------------*

class @procCallInstructionAST : @instructionAST {
  @lstring mProcRoutineName
  @procEffectiveParameterListAST mEffectiveParameterList
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $identifier$ ?let procRoutineName
    @procEffectiveParameterListAST effectiveParameterList = {}
    $($
    repeat
    while
      $!$ ?let selector
      <expression> ?let expression
      effectiveParameterList += !.output{!exp:expression} !selector
    while
      $!?$ ?let selector
      $identifier$ ?let effectiveParameterName
      effectiveParameterList += !.outputInput{!name:effectiveParameterName} !selector
    while
      $?$ ?let selector
      $identifier$ ?let effectiveParameterName
      effectiveParameterList += !.input{!name:effectiveParameterName} !selector
    end
    $)$
    ioInstructionList += !@procCallInstructionAST.new {
      !procRoutineName
      !effectiveParameterList
    }
  }

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

list @procEffectiveParameterList {
  @procEffectiveParameterPassingModeAST mEffectiveParameterPassingMode
  @lstring mSelector
  @unifiedTypeMap-proxy mParameterType
}

#----------------------------------------------------------------------------------------------------------------------*

override method @procCallInstructionAST analyze
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?mode:let @string inMode
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@uint ioTemporaryIndex
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Build proc mangled name
  @string procMangledName = mProcRoutineName.string
  for () in mEffectiveParameterList do
    procMangledName += " "
    switch mEffectiveParameterKind 
    case input (*) :
      procMangledName += "!" ;
    case output (*) :
      procMangledName += "?" ;
    case outputInput (*) :
      procMangledName += "?!" ;
    end
    procMangledName += mSelector.string
  end
#--- Search proc in proc map
  [inContext.mProcedureMap searchKey
    !.new {!procMangledName !mProcRoutineName.location}
    ?*
    ?let procedureMode
    ?let @procedureSignature procSignature
  ]
#--- Check parameters
  @procEffectiveParameterList parameterList = {}
  @procCallEffectiveParameterListIR procCallEffectiveParameterListIR = {}
  for () formal_ in procSignature, () in mEffectiveParameterList do
    switch mEffectiveParameterKind 
    case input (@lstring name) :
      [!?ioVariableMap searchForWriteAccess
        !name
        ?let type
        ?let acceptedModeSet
        ?let unused variableAccess
        ?let parameterAccess
        ?let isCopiable
      ]
    #--- Check mode
      if not [acceptedModeSet hasKey !inMode] then
        error name : "this variable cannot be used in $" + inMode + " mode"
      end
      if not isCopiable then
        error name : "the '" + name + "' variable is not copiable"
      end
      parameterList += !mEffectiveParameterKind !mSelector !type
      procCallEffectiveParameterListIR += !.input !mSelector !type !parameterAccess
    case output (@expressionAST expression) :
      [expression analyzeExpression
        !optionalReceiverType:inReceiverType
        !optionalTargetType:formal_mType
        !context:inContext
        !mode:inMode
        !allowException:inAllowExceptions
        !?temporary:ioTemporaryIndex
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?instructionListIR:ioInstructionGenerationList
        ?expressionType:let expressionType
        ?result:let @variableKindIR expressionResult
      ]
      parameterList += !mEffectiveParameterKind !mSelector !expressionType
      procCallEffectiveParameterListIR += !.output !mSelector !expressionType !expressionResult
    case outputInput (@lstring name) :
      [!?ioVariableMap searchForReadWriteAccess
        !name
        ?let type
        ?let acceptedModeSet
        ?let unused variableAccess
        ?let parameterAccess
        ?*
      ]
    #--- Check mode
      if not [acceptedModeSet hasKey !inMode] then
        error name : "this variable cannot be used in $" + inMode + " mode"
      end
      parameterList += !mEffectiveParameterKind !mSelector !type
      procCallEffectiveParameterListIR += !.outputInput !mSelector !type !parameterAccess
    end
  end
#--- Check mode
  if procedureMode.string != inMode then
    error mProcRoutineName : "this procedure cannot be used in $" + inMode + " mode"
  end
  if [procSignature length] != [parameterList length] then
    error mProcRoutineName: "this proc requires " + [procSignature length] + " argument(s), this call names "
      + [procSignature length] + " argument(s)"
  else
    for () formal_ in procSignature, () actual_ in parameterList do
      if [formal_mType key] != [actual_mParameterType key] then
        error actual_mSelector : "the actual parameter type is '" + [actual_mParameterType key] +
           "', and is incompatible with the formal type '" + [formal_mType key] + "'"
      end
      let requiredPassingMode = [formal_mFormalArgumentPassingMode requiredActualPassingModeForSelector !formal_mSelector]
      let testedPassingMode = [actual_mEffectiveParameterPassingMode passingModeForActualSelector !actual_mSelector]
      if requiredPassingMode != testedPassingMode then
        error actual_mSelector : "the required selector is '" + requiredPassingMode + "'"
      end
    end  
  end
#--- Code generation
  ioInstructionGenerationList += !@procCallInstructionIR.new {
    !mProcRoutineName.string
    !procCallEffectiveParameterListIR
  }
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

enum @procEffectiveParameterPassingModeIR {
  case input
  case output
  case outputInput
}

#----------------------------------------------------------------------------------------------------------------------*

list @procCallEffectiveParameterListIR {
  @procEffectiveParameterPassingModeIR mEffectiveParameterPassingMode
  @lstring mSelector
  @unifiedTypeMap-proxy mParameterType
  @variableKindIR mParameter
}

#----------------------------------------------------------------------------------------------------------------------*

class @procCallInstructionIR : @abstractInstructionIR {
  @string mProcName
  @procCallEffectiveParameterListIR mParameters
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @procCallInstructionIR instructionCode -> @string outCode {
  outCode = mangledNameForProcedure (!name:mProcName) + " ("
  for () in mParameters do
    switch mEffectiveParameterPassingMode
    case input:
      outCode += "&(" + [mParameter mangledName] + ")"
    case output:
      outCode += [mParameter mangledName]
    case outputInput:
      outCode += "&(" + [mParameter mangledName] + ")"
    end
  between
    outCode += ", "
  end
  outCode += ") ;\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @procCallInstructionIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  ioAccessibleEntities.mProcedureSet += !mProcName
  for () in mParameters do
    [mParameter enterAccessibleEntities !?ioAccessibleEntities]
  end
}

#----------------------------------------------------------------------------------------------------------------------*
