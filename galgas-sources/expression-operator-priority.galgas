#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract class @expressionAST {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <expression> ?!@ast ioAST !@expressionAST outExpression {
    <expression_logical_xor> !?ioAST ?outExpression
    repeat
    while
      $||$
      let operatorLocation = @location.here
      <expression_logical_xor> !?ioAST ?let rightExpression
    #--- x or y equivalent to not (not x and not y)
      let andExpression = @booleanShortCircuitAndOperatorExpressionAST.new {
        !@prefixOperatorExpressionAST.new {!operatorLocation !.notOp !outExpression}
        !operatorLocation
        !@prefixOperatorExpressionAST.new {!operatorLocation !.notOp !rightExpression}
      }
      outExpression = @prefixOperatorExpressionAST.new {
        !operatorLocation
        !.notOp
        !andExpression
      }
    end
  }

  #·····················································································································

  rule <expression_logical_xor> ?!@ast ioAST !@expressionAST outExpression {
    <expression_logical_and> !?ioAST ?outExpression
    repeat
    while
      $xor$
      let operatorLocation = @location.here
      <expression_logical_and> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.booleanXorOp
        !rightExpression
      }
    end
  }

  #·····················································································································

  rule <expression_logical_and> ?!@ast ioAST !@expressionAST outExpression {
    <expression_bitwise_or> !?ioAST ?outExpression
    repeat
    while
      $and$
      let operatorLocation = @location.here
      <expression_bitwise_or> !?ioAST ?let rightExpression
      outExpression = @booleanShortCircuitAndOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !rightExpression
      }
    end
  }

  #·····················································································································

  rule <expression_bitwise_or> ?!@ast ioAST !@expressionAST outExpression {
    <expression_bitwise_xor> !?ioAST ?outExpression
    repeat
    while
      $|$
      let operatorLocation = @location.here
      <expression_bitwise_xor> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.bitWiseOrOp
        !rightExpression
      }
    end
  }

  #·····················································································································

  rule <expression_bitwise_xor> ?!@ast ioAST !@expressionAST outExpression {
    <expression_bitwise_and> !?ioAST ?outExpression
    repeat
    while
      $^$
      let operatorLocation = @location.here
      <expression_bitwise_and> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.bitWiseXorOp
        !rightExpression
      }
    end
   }

  #·····················································································································

  rule <expression_bitwise_and> ?!@ast ioAST !@expressionAST outExpression {
    <expression_equality> !?ioAST ?outExpression
    repeat
    while
      $&$
      let operatorLocation = @location.here
      <expression_equality> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.bitWiseAndOp
        !rightExpression
      }
    end
  }

  #·····················································································································

  rule <expression_equality> ?!@ast ioAST !@expressionAST outExpression {
    <expression_comparison> !?ioAST ?outExpression
    select
    or
      $==$
      let operatorLocation = @location.here
      <expression_comparison> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.equal
        !rightExpression
      }
    or
      $≠$
      let operatorLocation = @location.here
      <expression_comparison> !?ioAST ?let rightExpression
      let expression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.equal
        !rightExpression
      }
      outExpression = @prefixOperatorExpressionAST.new {
        !operatorLocation
        !.notOp
        !expression
      }
    end
  }

  #·····················································································································

  rule <expression_comparison> ?!@ast ioAST !@expressionAST outExpression {
    <expression_shift> !?ioAST ?outExpression
    select
    or
      $≤$
      let operatorLocation = @location.here
      <expression_shift> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.infEqual
        !rightExpression
      }
    or
      $≥$
      let operatorLocation = @location.here
      <expression_shift> !?ioAST ?let rightExpression
      let expression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.lessThan
        !rightExpression
      }
      outExpression = @prefixOperatorExpressionAST.new {
        !operatorLocation
        !.notOp
        !expression
      }
    or
      $<$
      let operatorLocation = @location.here
      <expression_shift> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.lessThan
        !rightExpression
      }
    or
      $>$
      let operatorLocation = @location.here
      <expression_shift> !?ioAST ?let rightExpression
      let expression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.infEqual
        !rightExpression
      }
      outExpression = @prefixOperatorExpressionAST.new {
        !operatorLocation
        !.notOp
        !expression
      }
    end
  }

  #·····················································································································

  rule <expression_shift> ?!@ast ioAST !@expressionAST outExpression {
    <expression_addition> !?ioAST ?outExpression
    repeat
    while
      $<<$
      let operatorLocation = @location.here
      <expression_addition> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.leftShiftOp
        !rightExpression
      }
    while
      $>>$
      let operatorLocation = @location.here
      <expression_addition> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.rightShiftOp
        !rightExpression
      }
    end
  }

  #·····················································································································

  rule <expression_addition> ?!@ast ioAST !@expressionAST outExpression {
    <expression_product> !?ioAST ?outExpression
    repeat
    while
      $+$
      let operatorLocation = @location.here
      <expression_product> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.addOp
        !rightExpression
      }
    while
      $+%$
      let operatorLocation = @location.here
      <expression_product> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.addOpNoOvf
        !rightExpression
      }
    while
      $-$
      let operatorLocation = @location.here
      <expression_product> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.subOp
        !rightExpression
      }
    while
      $-%$
      let operatorLocation = @location.here
      <expression_product> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.subOpNoOvf
        !rightExpression
      }
    end
  }

  #·····················································································································

  rule <expression_product> ?!@ast ioAST !@expressionAST outExpression {
    <primary> !?ioAST ?outExpression
    repeat
    while
      $*$
      let operatorLocation = @location.here
      <primary> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.mulOp
        !rightExpression
      }
    while
      $*%$
      let operatorLocation = @location.here
      <primary> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.mulOpNoOvf
        !rightExpression
      }
    while
      $%$
      let operatorLocation = @location.here
      <primary> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.modOp
        !rightExpression
      }
    while
      $!%$
      let operatorLocation = @location.here
      <primary> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.modOpNoOvf
        !rightExpression
      }
    while
      $/$
      let operatorLocation = @location.here
      <primary> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.divOp
        !rightExpression
      }
    while
      $!/$
      let operatorLocation = @location.here
      <primary> !?ioAST ?let rightExpression
      outExpression = @omnibusInfixOperatorExpressionAST.new {
        !outExpression
        !operatorLocation
        !.divOpNoOvf
        !rightExpression
      }
    end
  }

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    $~$
    let operatorLocation = @location.here
    <primary> !?ioAST ?let expression
    outExpression = @prefixOperatorExpressionAST.new {
      !operatorLocation
      !.bitWiseComplement
      !expression
    }
  }

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    $not$
    let operatorLocation = @location.here
    <primary> !?ioAST ?let expression
    outExpression = @prefixOperatorExpressionAST.new {
      !operatorLocation
      !.notOp
      !expression
    }
  }

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    $-$
    let operatorLocation = @location.here
    <primary> !?ioAST ?let expression
    outExpression = @prefixOperatorExpressionAST.new {
      !operatorLocation
      !.minusOp
      !expression
    }
  }

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    $-%$
    let operatorLocation = @location.here
    <primary> !?ioAST ?let expression
    outExpression = @prefixOperatorExpressionAST.new {
      !operatorLocation
      !.minusNoOvf
      !expression
    }
  }

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    $($
    <expression> !?ioAST ?outExpression
    $)$
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @expressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @expressionAST analyzeExpression
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?optionalTargetType:let @omnibusType inTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
