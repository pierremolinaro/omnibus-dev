
setter @instructionListIR appendLoadVolatileRegister
  ?let @valueIR inTargetValue
  ?let @string inRegisterName
  ?let @unifiedTypeMap-proxy inTargetVarType
  ?let @bigint inAddress
{
  self += !@loadRegisterIR.new {!inTargetValue !inRegisterName !inTargetVarType !inAddress}
}

#----------------------------------------------------------------------------------------------------------------------*

class @loadRegisterIR : @abstractInstructionIR {
  @valueIR mTargetValue
  @string mRegisterName
  @unifiedTypeMap-proxy mRegisterType
  @bigint mRegisterAddress
}

#----------------------------------------------------------------------------------------------------------------------*

override method @loadRegisterIR llvmInstructionCode
  ?!@string ioCode
  ?let @generationContext unused inGenerationContext
  ?!@stringset unused ioIntrinsicsDeclarationSet
{
  let llvmType = [mRegisterType llvmTypeName]
  ioCode += "  " + mTargetValue + " = load volatile " + llvmType + ", " + llvmType
         + "* inttoptr (i32 " + mRegisterAddress + " to " + llvmType + "*) ; " + [mRegisterAddress hexString] + "\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @loadRegisterIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  ioAccessibleEntities.mAccessibleRegisterSet += !mRegisterName
}

#----------------------------------------------------------------------------------------------------------------------*
