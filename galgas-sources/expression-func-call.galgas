#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                 *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @functionCallEffectiveParameterList {
  @lstring mSelector
  @expressionAST mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @functionCallInExpressionAST : @expressionAST {
  @lstring mFunctionVarName
  @functionCallEffectiveParameterList mParameterList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                              *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  rule <primary> !@expressionAST outExpression {
    $identifier$ ?let functionName
    $($
    @functionCallEffectiveParameterList parameterList = {}
    repeat
    while
      $!$ ?let selector
      <expression> ?let expression
      parameterList += !selector !expression
    end
    $)$
    outExpression = @functionCallInExpressionAST.new {!functionName !parameterList}
  }

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                    *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @functionCallInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring unused inConstantName
  ?!@semanticTypePrecedenceGraph unused ioGraph
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                           *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @functionCallInExpressionAST analyzeExpression
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@operandIR outResult
{
  [inContext.mFunctionMap searchKey
    !mFunctionVarName
    ?let functionModeSet
    ?let formalParameterList
    ?let functionResultType
  ]
#--- Check mode
  checkMode (
    !requiredModes:inModeSet
    !possibleModes:[functionModeSet keySet]
    !error:mFunctionVarName.location
  )
#--- Enter in invocation graph
  [!?ioTemporaries.mSubprogramInvocationGraph addEdge
    !inRoutineNameForInvocationGraph
    !.new {!mangledNameForFunction (!name:mFunctionVarName.string) !mFunctionVarName.location}
  ]
#---
  @operandIRList argumentList = {}
  var s = mangledNameForFunction (!name:mFunctionVarName.string) + " ("
  if [formalParameterList length] != [mParameterList length] then
    error mFunctionVarName : "this function declares " + [formalParameterList length] 
      + " formal parameters, the call names " + [mParameterList length] + " effective arguments"
  else
    for formal in formalParameterList, actual in mParameterList
    do
      if actual.mSelector.string != formal.mFormalSelector.string then
        var s = "!"
        if formal.mFormalSelector.string != "" then
          s += formal.mFormalSelector.string + ":"
        end
        error actual.mSelector : "required selector: " + s
      end
      [actual.mExpression analyzeExpression
        !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
        !optionalTargetType:formal.mArgumentType
        !context:inContext
        !modes:inModeSet
        !allowException:inAllowExceptions
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioVariableMap
        !?instructionListIR:ioInstructionGenerationList
        ?result:@operandIR argumentIR
      ]
      if [argumentIR.mType key] == [formal.mArgumentType key] then
        argumentList += !argumentIR
      elsif [[argumentIR.mType kind] isLiteralInteger] && [[formal.mArgumentType kind] isInteger] then
        [argumentIR.mValue literalInteger ?value:let @bigint value]
        [[formal.mArgumentType kind] integer ?min:let @bigint min ?max:let @bigint max ?unsigned:* ?bitCount:*]
        if (min <= value) && (value <= max) then
          argumentList += !.new {!formal.mArgumentType !argumentIR.mValue}
        else
          error actual.mSelector: "the literal integer cannot fit in an $" + [formal.mArgumentType key]
        end
      else
        error actual.mSelector : "the actual parameter has the $" + [argumentIR.mType key]
         + ", but the formal argument has the $" + [formal.mArgumentType key] + " type"
      end
    between 
      s += ", "
    end
  end
  s += ")"
#--- New LLVM variable for function call result
  getNewTempVariable (!functionResultType !?ioTemporaries ?outResult)
#--- Generate code
  ioInstructionGenerationList += !@functionCallIR.new {
    !outResult
    !mFunctionVarName.string
    !argumentList
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @functionCallIR : @abstractInstructionIR {
  @operandIR mResult
  @string mFunctionName
  @operandIRList mArgumentList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @functionCallIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "  " + [mResult.mValue llvmName] + " = call " + [mResult.mType llvmTypeName]
  ioLLVMcode += " @" + mangledNameForFunction (!name:mFunctionName) + " ("
  for (argument) in mArgumentList
    do ioLLVMcode += [argument.mType llvmTypeName] + " " + [argument.mValue llvmName]
    between ioLLVMcode += ", "
  end
  ioLLVMcode += ")\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @functionCallIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  ioAccessibleEntities.mFunctionSet += !mFunctionName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
