#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @extensionDeclarationListAST {
  @lstring mTypeName
  @functionDeclarationListAST mProcedureDeclarationListAST
  @structurePropertyListAST mPropertyList
  @serviceDeclarationListAST mServiceListAST
  @sectionDeclarationListAST mSectionListAST
  @primitiveDeclarationListAST mPrimitiveListAST
  @guardDeclarationListAST mGuardListAST
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $extension$
    $\$type$ ?let typeName
    ${$
    @functionDeclarationListAST procedureDeclarationListAST = {}
    @structurePropertyListAST propertyList = {}
    @serviceDeclarationListAST serviceListAST = {}
    @sectionDeclarationListAST sectionListAST = {}
    @primitiveDeclarationListAST primitiveListAST = {}
    @guardDeclarationListAST guardListAST = {}
    repeat
    while
      <property_in_extension> !?propertyList
    while
      <function> !?procedureDeclarationListAST
    while
     <section> !?sectionListAST
    while
      <service> !?serviceListAST
    while
      <guard> !?guardListAST
    while
      <primitive> !?primitiveListAST
    while
      $;$
    end
    $}$
    ioAST.mExtensionDeclarationListAST +=
      !typeName
      !procedureDeclarationListAST
      !propertyList
      !serviceListAST
      !sectionListAST
      !primitiveListAST
      !guardListAST
  }

  #·····················································································································

  rule <property_in_extension> ?!@structurePropertyListAST ioPropertyList {
    @bool public
    select
      public = false
    or
      $public$
      public = true
    end
    $var$
    $identifier$ ?let fieldName
    $\$type$ ?let typeName
    $=$
    <expression> ?let initExpression
    ioPropertyList += !fieldName !public !typeName !.expression{!initExpression:initExpression}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractDeclaration addExtension
  ?!@extensionDeclarationListAST ioExtensionDeclarationListAST
  !@abstractDeclaration outNewDeclaration

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
