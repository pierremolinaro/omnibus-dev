#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @opaqueTypeDeclaration : @abstractDeclaration {
  @lstring mOpaqueTypeName
  @lstringlist mAttributeList
  @expressionAST mSizeExpression
  @location mSizeExpressionLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @opaqueTypeDeclaration location -> @location outLocation {
  outLocation = mOpaqueTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration_type> ?let @lstring inNewTypeName !@abstractDeclaration outDeclaration {
    $($
    $($
    <expression> ?let sizeExpression
    let sizeExpressionLocation = @location.here
    $)$
    $)$
    @lstringlist attributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      attributeList += !attribute
    end
    outDeclaration = @opaqueTypeDeclaration.new {!inNewTypeName !attributeList !sizeExpression !sizeExpressionLocation}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @opaqueTypeDeclaration addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  !@abstractDeclaration outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @opaqueTypeDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let typeName = @lstring.new {!"$" + mOpaqueTypeName !mOpaqueTypeName.location}
  [!?ioGraph addNode !typeName !self]
  [!?ioGraph addEdge !typeName !["$" + staticIntegerTypeName () nowhere]]
  [mSizeExpression addDependenceEdgeForStaticExpression !typeName !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @opaqueTypeDeclaration keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "opaqueType $" + mOpaqueTypeName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @opaqueTypeDeclaration enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
#---
  var copyable = false ;
  var instantiable = false ;
  for (attribute) in mAttributeList do
    if attribute.string == "instantiable" then
      if instantiable then
        error attribute : "duplicated attribute"
      else
        instantiable = true
      end
    elsif attribute.string == "copyable" then
      if copyable then
        error attribute : "duplicated attribute"
      else
        copyable = true
      end
    else
      error attribute : "only @copyable and @instantiable attributes are allowed here"
    end
  end
#--- Compute array size
  @instructionListIR initInstructionGenerationList = {}
  @allocaList allocaList = {}
  @semanticTemporariesStruct temporaries = .default
  variableMapWithConstants (
    !context:ioContext
    ?@variableMap variableMap
  )
  [mSizeExpression analyzeExpression
    !self:.null
    !directAccessToPropertiesAllowed:false
    !inGuard:false
    !routineNameForInvocationGraph:.new {!mOpaqueTypeName.string + " init" !mOpaqueTypeName.location}
    !optionalTargetType:.null
    !context:ioContext
    !modes:{}
    !allowPanic:false
    !?temporary:temporaries
    !?staticStringMap:*
    !?variableMap:variableMap
    !?alloca:allocaList
    !?instructionListIR:initInstructionGenerationList
    ?result:@objectIR sizeExpressionIR
  ]
  if (([allocaList length] + [initInstructionGenerationList length]) > 0) || not [sizeExpressionIR isLiteralInteger] then
    error mSizeExpressionLocation : "array size expression is not static"
  else
    [sizeExpressionIR literalInteger ?1* ?value:let bitSize]
    [!?ioContext.mTypeMap insertType
      !lkey:mOpaqueTypeName
      !llvmTypeName:"i" + bitSize
      !kind:.opaque {!bitCount:bitSize}
      !classConstantMap:{}
      !instantiable:instantiable
      !copyable:copyable
      !equatable:false
      !comparable:false
      !enumerationType:.null # Not enumerable
    ]
  #--- Constructor
    [!?ioContext.mConstructorMap insertKey
      !mOpaqueTypeName
      !.simple {!value:0G}
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @opaqueTypeDeclaration enterRoutinesInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext unused ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @opaqueTypeDeclaration semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

