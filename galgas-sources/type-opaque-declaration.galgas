#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @opaqueTypeDeclarationAST : @abstractDeclarationAST {
  @lstring mOpaqueTypeName
  @lstringlist mAttributeList
  @expressionAST mSizeExpression
  @location mSizeExpressionLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @opaqueTypeDeclarationAST location -> @location outLocation {
  outLocation = mOpaqueTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration_type> ?let @lstring inNewTypeName !@abstractDeclarationAST outDeclaration {
    $($
    $($
    <expression> ?let sizeExpression
    let sizeExpressionLocation = @location.here
    $)$
    $)$
    @lstringlist attributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      attributeList += !attribute
    end
    outDeclaration = @opaqueTypeDeclarationAST.new {!inNewTypeName !attributeList !sizeExpression !sizeExpressionLocation}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @opaqueTypeDeclarationAST addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  ?!@extendStaticArrayDeclarationAST unused ioExtendStaticArrayDeclarationAST
  !@abstractDeclarationAST outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @opaqueTypeDeclarationAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let typeName = llvmRegularTypeMangledNameFromName (!mOpaqueTypeName)
  [!?ioGraph addNode !typeName !self]
  [!?ioGraph addEdge !typeName !llvmRegularTypeMangledNameFromName (![staticIntegerTypeName () nowhere])]
  [mSizeExpression addDependenceEdgeForStaticExpression !typeName !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @opaqueTypeDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "opaqueType $" + mOpaqueTypeName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @opaqueTypeDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
#---
  @PLMTypeFlags flags = .none
  for (attribute) in mAttributeList do
    if attribute.string == "instantiable" then
      if [flags instanciable] then
        error attribute : "duplicated attribute"
      else
        flags = flags | @PLMTypeFlags.instanciable
      end
    elsif attribute.string == "copyable" then
      if [flags copyable] then
        error attribute : "duplicated attribute"
      else
        flags = flags | @PLMTypeFlags.copyable
      end
    else
      error attribute : "only @copyable and @instantiable attributes are allowed here"
    end
  end
#--- Compute array size
  @instructionListIR initInstructionGenerationList = {}
  @allocaList allocaList = {}
  @semanticTemporariesStruct temporaries = .default
  variableMapWithConstants (
    !context:ioContext
#    ?*
    ?@universalValuedObjectMapForContext universalMap
  )
  [mSizeExpression analyzeExpression
    !self:.void
    !inGuard:false
    !routineNameForInvocationGraph:.new {!mOpaqueTypeName.string + " init" !mOpaqueTypeName.location}
    !optionalTargetType:.void
    !context:ioContext
    !mode:.bootMode
    !?temporary:temporaries
    !?staticStringMap:*
    !?variableMap:universalMap
    !?alloca:allocaList
    !?instructionListIR:initInstructionGenerationList
    ?result:let @objectIR sizeExpressionIR
  ]
  if (([allocaList length] + [initInstructionGenerationList length]) > 0) || not [sizeExpressionIR isLiteralInteger] then
    error mSizeExpressionLocation : "array size expression is not static"
  else
    @constructorMapEX constructorMap = {}
    [!?constructorMap insertKey !mOpaqueTypeName !.simple {!value:0G}]
    [sizeExpressionIR literalInteger ?1* ?value:let bitSize]
    [!?ioContext.mTypeMap insertType
      !lkey:mOpaqueTypeName
      !type:.opaque {!bitCount:bitSize !flags:flags !plmTypeName:mOpaqueTypeName !constructorMap:constructorMap}
      !index:[ioContext.mTypeMap count]
    ]
  #--- Constructor
    [!?ioContext.mConstructorMapEX insertKey
      !mOpaqueTypeName
      !.simple {!value:0G}
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @opaqueTypeDeclarationAST semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

