
setter @instructionListIR appendEnterRegisterAddress
  ?!@semanticTemporariesStruct ioTemporaries
  !@string out_llvmName
  ?let @bigint inBaseAddress
  ?let @bigint inAddressOffset
  ?let @string inRegisterName
{
  [!?ioTemporaries newTempLLVMVar ?out_llvmName]
  self += !@enterRegisterAddressIR.new {!out_llvmName !inBaseAddress !inAddressOffset !inRegisterName}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @enterRegisterAddressIR : @abstractInstructionIR {
  public var @string mLLVMName
  public var @bigint mBaseAddress
  public var @bigint mAddressOffset
  public var @string mRegisterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enterRegisterAddressIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "  " + self.mLLVMName + " = add i32 " + self.mBaseAddress
             + ", " + self.mAddressOffset + " ; " + self.mRegisterName
             + " at " + [self.mBaseAddress hexString] + " = " + [self.mAddressOffset hexString] + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
