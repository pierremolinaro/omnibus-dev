#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

sortedlist @bootList {
  @location mBootLocation
  @instructionListAST mInstructionList
  @location mEndOfBootLocation
  @uint64 mPriority
  @location mPriorityLocation
}{
  mPriority <
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <declaration> ?!@ast ioAST {
    $boot$
    $integer$ ?let @luint64 priority
    ${$
    <instructionList> ?let instructionList
    let endOfInit = @location.here
    $}$
    ioAST.mBootList +=
      !priority.location
      !instructionList
      !endOfInit
      !priority.uint64
      !priority.location
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTIC ANALYSIS                                                                                                   *
#----------------------------------------------------------------------------------------------------------------------*

map @bootRoutinePriorityMap {
  insert insertKey error message "a boot routine with priority %K has been already declared"
}

#----------------------------------------------------------------------------------------------------------------------*

method @bootList-element bootSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  if not [inContext.mModeMap hasKey !bootModeName ()] then
    error mBootLocation : "the $" + bootModeName () + " mode should be defined in order to use boot routines"
  end
  [!?ioTemporaries.mBootRoutinePriorityMap insertKey !.new{![mPriority string] !mPriorityLocation}]
#--- Variable map
  @variableMap variableMap = initialVariableMap (!context:inContext !globalsAreConstant:false)
#--- Analyze instruction list
  @instructionListIR instructionGenerationList = {}
  [mInstructionList analyzeRoutineInstructionList
    !optionalReceiverType:.noReceiver
    !context:inContext
    !modes:{!bootModeName ()}
    !allowException:true
    !?temporary:ioTemporaries
    !?staticStringMap:ioIntermediateCodeStruct.mGlobalLiteralStringMap
    !?variableMap:variableMap
    !?generatedCode:instructionGenerationList
  ]
#---
  [variableMap checkAutomatonStates !mEndOfBootLocation]
#--- Code generation
  ioIntermediateCodeStruct.mBootList +=
    !mBootLocation
    !instructionGenerationList
    !mEndOfBootLocation
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

list @bootListIR {
  @location mInitLocation
  @instructionListIR mInstructionListIR
  @location mEndOfInitLocation
}

#----------------------------------------------------------------------------------------------------------------------*

