#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

abstract class @expressionAST {
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <expression> !@expressionAST outExpression {
    <conversion> ?outExpression
  }

  #--------------------------------------------------------------------------------------------------------------------*

  rule <primary> !@expressionAST outExpression {
    $($
    <expression> ?outExpression
    $)$
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

enum @receiverType {
  case noReceiver
  case receiver (@unifiedTypeMap-proxy type @string receiverValue)
  case mutatingReceiver (@unifiedTypeMap-proxy type @string receiverPointer)
}

#----------------------------------------------------------------------------------------------------------------------*

abstract method @expressionAST analyzeExpression
  ?optionalReceiverType:let @receiverType inReceiverType
  ?optionalTargetType:let @unifiedTypeMap-proxy inTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModes
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@uint ioTemporaryIndex
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !expressionType:@unifiedTypeMap-proxy outExpressionType
  !result:@variableKindIR outResultValueName

#----------------------------------------------------------------------------------------------------------------------*
