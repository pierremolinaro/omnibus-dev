#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @initAST : @abstractDeclarationAST {
  @lstring mDriverName # "" if no driver name
  @instructionListAST mInstructionList
  @location mEndOfInitLocation
  @lbigint mPriority
}

#·······················································································································

list @initListAST {
  @initAST mInit
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    <declaration_init> !?ioAST !["" here] ?let init
    ioAST.mDeclarationListAST += !init
  }
  
  #·····················································································································

  rule <declaration_init> ?!@ast ioAST ?let @lstring inDriverName !@initAST outInit {
    $init$
    $integer$ ?let @lbigint priority
    ${$
    <instructionList> !?ioAST ?let instructionList
    let endOfInit = @location.here
    $}$
    outInit = .new {!inDriverName !instructionList !endOfInit !priority}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @initAST noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
}

#·······················································································································

override method @initAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
 let nodeName = @lstring.new {!"init " + mDriverName + " " + mPriority.bigint !mPriority.location}
 [!?ioGraph addNode !nodeName !self]
}

#·······················································································································

override getter @initAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "init " + mDriverName + " " +  + mPriority.bigint 
}

#·······················································································································

override getter @initAST location -> @location outLocation {
  outLocation = mPriority.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @initAST addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  ?!@extendStaticArrayDeclarationAST unused ioExtendStaticArrayDeclarationAST
  !@abstractDeclarationAST outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @initRoutineMap {
  insert insertKey error message "the '%%%K' init routine is already declared"
  search searchKey error message "there is no '%%%K' init routine"
}

#·······················································································································

override method @initAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@subprogramInvocationGraph ioSubprogramInvocationGraph
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
  [!?ioContext.mInitRoutineMap insertKey !.new {![mPriority string] !mPriority.location}]
#----------------
  @lstring routineNameForInvocationGraph 
  if mDriverName.string == "" then
    routineNameForInvocationGraph = initNameForInvocationGraph (!"" !mPriority)
  else
    routineNameForInvocationGraph = initNameForInvocationGraph (!llvmDriverNameFromName (!mDriverName) !mPriority)
  end
  [!?ioSubprogramInvocationGraph addNode !routineNameForInvocationGraph !routineNameForInvocationGraph]
#---------------- Add decorated declaration
  ioDecoratedDeclarationList += !@decoratedInitRoutine.new {
    !mDriverName
    !mInstructionList
    !mEndOfInitLocation
    !mPriority
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @initRoutinePriorityMap {
  insert insertKey error message "an init routine with priority %K has been already declared"
}

#·······················································································································

class @decoratedInitRoutine : @abstractDecoratedDeclaration {
  @lstring mDriverName
  @instructionListAST mInstructionList
  @location mEndOfInitLocation
  @lbigint mPriority
}

#·······················································································································

override method @decoratedInitRoutine semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  let @PLMType selfType = if mDriverName.string == "" then
    voidType ()
  else
    [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !llvmDriverNameFromName (!mDriverName)} type]
  end
  initSemanticAnalysis (
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
    !selfType:selfType
    !priority:mPriority
    !mode:.initMode
    !instructionList:mInstructionList
    !endOfDeclaration:mEndOfInitLocation
    ?let @allocaList allocaList
    ?let @instructionListIR instructionGenerationList
  )
#--- Code generation
  ioIntermediateCodeStruct.mInitList +=
    !selfType
    !mDriverName
    !mPriority.bigint
    !allocaList
    !instructionGenerationList
}

#·······················································································································

proc initSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
  ?selfType:let @PLMType inSelfType
  ?priority:let @lbigint inPriority
  ?mode:let @mode inCurrentMode
  ?instructionList:let @instructionListAST inInstructionListAST
  ?endOfDeclaration:let @location inEndOfInitDeclaration
  !@allocaList outAllocaList
  !@instructionListIR outInstructionGenerationList
{
#--- Check init routine is unique
  let routineNameForInvocationGraph = initNameForInvocationGraph (!inSelfType.plmTypeName !inPriority)
  [!?ioTemporaries.mInitRoutinePriorityMap insertKey !routineNameForInvocationGraph]
#---
  if not [ioTemporaries.mSubprogramInvocationGraph isNodeDefined !routineNameForInvocationGraph.string] then
    [!?ioTemporaries.mSubprogramInvocationGraph addNode !routineNameForInvocationGraph !routineNameForInvocationGraph]
  end
#--- Variable map
  var universalMap = inContext.mValuedObjectMapForContext
#  initialVariableMap (
#    !context:inContext
##    !mode:inCurrentMode
##    !globalsAreConstant:false
##    !returnTypeName:["" nowhere]
#    ?@universalValuedObjectMapForContext universalMap
#  )
  [!?universalMap openOverrideForSelectBlock]
  [!?universalMap openBranch]
#--- Analyze instruction list
  outInstructionGenerationList = {}
  outAllocaList = {}
  [inInstructionListAST analyzeRoutineInstructionList
    !self:inSelfType
    !instructionAttributes:.mutating | .directPropertyAccess
    !routineNameForInvocationGraph:routineNameForInvocationGraph
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioIntermediateCodeStruct.mStaticStringMap
    !?variableMap:universalMap
    !?alloca:outAllocaList
    !?generatedCode:outInstructionGenerationList
  ]
#--- End of variableMap
  [universalMap checkLocalVariableFinalState]
  [!?universalMap closeBranch !inEndOfInitDeclaration]
  [!?universalMap closeOverride !inEndOfInitDeclaration]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sortedlist @initListIR {
  @PLMType mSelfType # .void if outside of a driver
  @string mDriverName # "" if outside of a driver
  @bigint mPriority
  @allocaList mAllocaList
  @instructionListIR mInstructionListIR
}{
  mPriority <
}

#·······················································································································

method @initListIR generateLLVMinitCode
  ?!@string ioLLVMcode
  ?let @routineMapIR unused inProcedureMapIR
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  ioLLVMcode += llvmTitleComment (!"Init")
  ioLLVMcode += "define internal void @init ()" + llvmAttributeFunction () + "{\n"
  for init in self do
    ioLLVMcode += "  call void @init." + init.mPriority + " ("
    if init.mSelfType.kind != .void then
      ioLLVMcode += [init.mSelfType llvmTypeName] + "* " + llvmNameForGlobalVariable (!init.mDriverName)
    end
    ioLLVMcode += ")\n"
  end
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
  for init in self do
    ioLLVMcode += llvmSeparatorLine () + "\n"
    ioLLVMcode += "define internal void @init." + init.mPriority + " ("
    if init.mSelfType.kind != .void then
      ioLLVMcode += [init.mSelfType llvmTypeName] + "* " + llvmNameForSelf ()
    end
    ioLLVMcode += ")" + llvmAttributeFunction () + "{\n"
    for (variable llvmTypeName) in init.mAllocaList do
      ioLLVMcode += "  " + variable + " = alloca " + llvmTypeName + "\n"
    end
    [init.mInstructionListIR instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
    ioLLVMcode += "  ret void\n"
    ioLLVMcode += "}\n\n"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
