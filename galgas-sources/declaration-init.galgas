#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sortedlist @initList {
  @location mInitLocation
  @lstring mSelfTypeName
  @string mGlobalVarName # "" if mSelfTypeName is empty
  @lstringlist mRequiredByProcList # Mangled name list
  @instructionListAST mInstructionList
  @location mEndOfInitLocation
  @lbigint mPriority
}{
  mPriority <
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    <declaration_init> !?ioAST.mInitListAST
  }
  
  #·····················································································································

  rule <declaration_init> ?!@initList ioInitList {
    $init$
    $integer$ ?let @lbigint priority
    ${$
    <instructionList> ?let instructionList
    let endOfInit = @location.here
    $}$
    ioInitList +=
      !priority.location
      !["" nowhere]
      !""
      !{}
      !instructionList
      !endOfInit
      !priority
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @initList noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    [mInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @initRoutineMap {
  insert insertKey error message "the '%%%K' init routine is already declared"
  search searchKey error message "there is no '%%%K' init routine"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @initList-element enterInContext
  ?!context:@semanticContext ioContext
{
  [!?ioContext.mInitRoutineMap insertKey !.new {![mPriority string] !mPriority.location}]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @initRoutinePriorityMap {
  insert insertKey error message "an init routine with priority %K has been already declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @initList-element initSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  let selfType = if mSelfTypeName.string == "" then
    @unifiedTypeMap-proxy.null
  else
    @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mSelfTypeName}
  end
  initSemanticAnalysis (
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
    !selfType:selfType
    !priority:mPriority
    !mode:.initMode
    !requiredBy:mRequiredByProcList
    !instructionList:mInstructionList
    !endOfDeclaration:mEndOfInitLocation
    ?let @allocaList allocaList
    ?let @instructionListIR instructionGenerationList
  )
#--- Code generation
  ioIntermediateCodeStruct.mInitList +=
    !selfType
    !mGlobalVarName
    !mRequiredByProcList
    !mPriority.bigint
    !allocaList
    !instructionGenerationList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc initSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
  ?selfType:let @unifiedTypeMap-proxy inSelfType
  ?priority:let @lbigint inPriority
  ?mode:let @mode inCurrentMode
  ?requiredBy:let @lstringlist inRequiredByProcList
  ?instructionList:let @instructionListAST inInstructionListAST
  ?endOfDeclaration:let @location inEndOfInitDeclaration
  !@allocaList outAllocaList
  !@instructionListIR outInstructionGenerationList
{
#--- Check init routine is unique
  let routineNameForInvocationGraph = initNameForInvocationGraph (!inSelfType !inPriority)
  [!?ioTemporaries.mInitRoutinePriorityMap insertKey !routineNameForInvocationGraph]
#---
  if not [ioTemporaries.mSubprogramInvocationGraph isNodeDefined !routineNameForInvocationGraph.string] then
    [!?ioTemporaries.mSubprogramInvocationGraph addNode
      !routineNameForInvocationGraph
      !routineNameForInvocationGraph
    ]
  end
  for (routineMangledName) in inRequiredByProcList do
    [!?ioTemporaries.mSubprogramInvocationGraph addEdge
      !routineMangledName
      !routineNameForInvocationGraph
    ]
  end
#--- Variable map
  initialVariableMap (
    !context:inContext
    !mode:.initMode
#    !userMode:false
#    !registerAccess:.readWriteAccess
    !globalsAreConstant:false
    !returnTypeName:["" nowhere]
    ?@variableMap variableMap
  )
#--- Analyze instruction list
  outInstructionGenerationList = {}
  outAllocaList = {}
  [inInstructionListAST analyzeRoutineInstructionList
    !self:inSelfType
    !directAccessToPropertiesAllowed:true
    !propertiesAreMutable:true
    !routineNameForInvocationGraph:routineNameForInvocationGraph
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioIntermediateCodeStruct.mStaticStringMap
    !?variableMap:variableMap
    !?alloca:outAllocaList
    !?generatedCode:outInstructionGenerationList
  ]
#--- End of variableMap
#  [variableMap deinitTopLevelVariables]
  [variableMap checkAutomatonStates !inEndOfInitDeclaration]
  drop variableMap
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @initListIR {
  @unifiedTypeMap-proxy mSelfType
  @string mGlobalVariable # "" if mSelfType is null
  @lstringlist mInitRequiredByProcList # List of mangled names
  @bigint mPriority
  @allocaList mAllocaList
  @instructionListIR mInstructionListIR
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @initListIR generateLLVMinitCode
  ?!@string ioLLVMcode
  ?let @routineMapIR inProcedureMapIR
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  ioLLVMcode += llvmTitleComment (!"Init")
  for init in self do
    @bool generate 
    if [init.mInitRequiredByProcList length] == 0 then
      generate = true
    else
      generate = false
      for (routineMangledName) in init.mInitRequiredByProcList while not generate do
        generate = [inProcedureMapIR hasKey !routineMangledName.string]
      end
    end
    if generate then
      ioLLVMcode += "define internal void @init." + init.mPriority + " ("
      if init.mSelfType != .null then
        ioLLVMcode += [init.mSelfType llvmTypeName] + " * %self"
      end
      ioLLVMcode += ")" + llvmAttributeFunction () + "{\n"
      for (variable type) in init.mAllocaList do
        ioLLVMcode += "  %" + llvmNameForLocalVariable (!variable) + " = alloca " + [type llvmTypeName] + "\n"
      end
      [init.mInstructionListIR instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
      ioLLVMcode += "  ret void\n"
      ioLLVMcode += "}\n\n"
      ioLLVMcode += llvmSeparatorLine () + "\n"
    end
  end
  ioLLVMcode += "define internal void @init ()" + llvmAttributeFunction () + "{\n"
  for init in self do
    @bool generate 
    if [init.mInitRequiredByProcList length] == 0 then
      generate = true
    else
      generate = false
      for (routineMangledName) in init.mInitRequiredByProcList while not generate do
        generate = [inProcedureMapIR hasKey !routineMangledName.string]
      end
    end
    if generate then
      ioLLVMcode += "  call void @init." + init.mPriority + " ("
      if init.mSelfType != .null then
        ioLLVMcode += [init.mSelfType llvmTypeName] + " * @" + llvmNameForGlobalVariable (!init.mGlobalVariable)
      end
      ioLLVMcode += ")\n"
    end
  end
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}