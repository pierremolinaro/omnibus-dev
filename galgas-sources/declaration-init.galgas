#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sortedlist @initList {
  @location mInitLocation
  @initRequiredByProcList mRequiredByProcList
  @instructionListAST mInstructionList
  @location mEndOfInitLocation
  @lbigint mPriority
}{
  mPriority <
}

list @initRequiredByProcList {
  @lstring mProcName
  @procFormalArgumentList mProcFormalArgumentList
}
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $init$
    $integer$ ?let @lbigint priority
    @initRequiredByProcList requiredByProcList = {}
    select
    or
      $requiredBy$
      repeat
        $identifier$ ?let procName
        <procedure_formal_arguments> ?formalArguments:let procFormalArgumentList
        requiredByProcList += !procName !procFormalArgumentList
      while
        $,$
      end
    end
    ${$
    <instructionList> ?let instructionList !?*
    let endOfInit = @location.here
    $}$
    ioAST.mInitList +=
      !priority.location
      !requiredByProcList
      !instructionList
      !endOfInit
      !priority
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @initList noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    [mInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @initRoutineMap {
  insert insertKey error message "the '%%%K' init routine is already declared"
  search searchKey error message "there is no '%%%K' init routine"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @initList-element enterInContext
  ?!context:@semanticContext ioContext
{
  [!?ioContext.mInitRoutineMap insertKey !.new {![mPriority string] !mPriority.location}]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @initRoutinePriorityMap {
  insert insertKey error message "an init routine with priority %K has been already declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @initList-element initSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  initSemanticAnalysis (
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
    !selfType:.null
    !priority:mPriority
    !modes:{!initModeName ()}
    !requiredBy:mRequiredByProcList
    !instructionList:mInstructionList
    !endOfDeclaration:mEndOfInitLocation
    ?let @instructionListIR instructionGenerationList
  )
#--- Code generation
  ioIntermediateCodeStruct.mInitList +=
    !mRequiredByProcList
    !mInitLocation
    !instructionGenerationList
    !mEndOfInitLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc initSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
  ?selfType:let @unifiedTypeMap-proxy inSelfType
  ?priority:let @lbigint inPriority
  ?modes:let @stringset inModeSet
  ?requiredBy:let @initRequiredByProcList inRequiredByProcList
  ?instructionList:let @instructionListAST inInstructionListAST
  ?endOfDeclaration:let @location inEndOfInitDeclaration
  !@instructionListIR outInstructionGenerationList
{
#--- Check init routine is unique
  let routineNameForInvocationGraph = initNameForInvocationGraph (!inSelfType !inPriority)
  [!?ioTemporaries.mInitRoutinePriorityMap insertKey !routineNameForInvocationGraph]
#---
  if not [ioTemporaries.mSubprogramInvocationGraph isNodeDefined !routineNameForInvocationGraph.string] then
    [!?ioTemporaries.mSubprogramInvocationGraph addNode
      !routineNameForInvocationGraph
      !routineNameForInvocationGraph
    ]
  end
  for (procName procFormalArgumentList) in inRequiredByProcList do
    [!?ioTemporaries.mSubprogramInvocationGraph addEdge
      !procNameForInvocationGraph (!inSelfType !procName)
      !routineNameForInvocationGraph
    ]
  end
#--- Check "requiredBy" routines are defined
  for (procName procFormalArgumentList) in inRequiredByProcList do
    let lkey = @lstring.new {!"." + procName !procName.location}
    [inContext.mRoutineMapForContext searchKey !lkey ?6*]
  end
#--- Variable map
  @variableMap variableMap = initialVariableMap (
    !routineNameForInvocation:routineNameForInvocationGraph.string
    !context:inContext
    !userMode:false
    !registerAccess:.readWriteAccess
    !globalsAreConstant:false
    !returnTypeName:["" nowhere]
  )
#--- Analyze instruction list
  outInstructionGenerationList = {}
  [inInstructionListAST analyzeRoutineInstructionList
    !self:inSelfType
    !routineNameForInvocationGraph:routineNameForInvocationGraph
    !context:inContext
    !modes:inModeSet
    !allowPanic:true
    !?temporary:ioTemporaries
    !?staticStringMap:ioIntermediateCodeStruct.mStaticStringMap
    !?variableMap:variableMap
    !?generatedCode:outInstructionGenerationList
  ]
#---
  [variableMap checkAutomatonStates !inEndOfInitDeclaration]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @initListIR {
  @initRequiredByProcList mInitRequiredByProcList
  @location mInitLocation
  @instructionListIR mInstructionListIR
  @location mEndOfInitLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @initListIR generateLLVMinitCode
  ?!@string ioLLVMcode
  ?let @routineMapIR inProcedureMapIR
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  ioLLVMcode += llvmTitleComment (!"Init")
  ioLLVMcode += "define internal void @init ()" + llvmAttributeFunction () + "{\n"
  for init in self do
    @bool generate 
    if [init.mInitRequiredByProcList length] == 0 then
      generate = true
    else
      generate = false
      for (procName *) in init.mInitRequiredByProcList while not generate do
        generate = [inProcedureMapIR hasKey !"." + procName.string]
      end
    end
    if generate then
      [init.mInstructionListIR instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
    end
  end
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}