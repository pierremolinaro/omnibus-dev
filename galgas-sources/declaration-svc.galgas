#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#·······················································································································

list @systemRoutineDeclarationListAST {
  @lstring mName
  @routineKind mRoutineKind
  @bool mPublic
  @lstringlist mAttributeList
  @routineFormalArgumentList mFormalArgumentList
  @lstring mReturnTypeName
  @instructionListAST mInstructionList
  @location mEndOfInstructionListLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <system_routine> ?!@systemRoutineDeclarationListAST ioSVCListAST {
    @bool public
    select
      public = false
    or
      $public$
      public = true
    end
    $system$
    @routineKind routineKind
    select
      $section$
      routineKind = .section
    or
      $safe$
      routineKind = .safe
    or
      $primitive$
      routineKind = .primitive
    or
      $service$
      routineKind = .service
    end
    $identifier$ ?let name
    @lstringlist attributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      attributeList += !attribute
    end
    <procedure_formal_arguments> ?formalArguments:let formalArgumentList
    @lstring returnTypeName
    select
      returnTypeName = ["" here]
    or
      $->$
      $\$type$ ?returnTypeName
    end
    ${$
    <instructionList> ?let instructionList
    $}$
    ioSVCListAST +=
      !name
      !routineKind
      !public
      !attributeList
      !formalArgumentList
      !returnTypeName
      !instructionList
      !.here
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES IN PRECEDENCE GRAPH                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @systemRoutineDeclarationListAST noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    for (* * formalArgumentTypeName *) in mFormalArgumentList do
      let typeName = llvmRegularTypeMangledNameFromName (!formalArgumentTypeName)
      [!?ioGraph noteNode !typeName]
    end
    [mInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @systemRoutineDeclarationListAST enterInContext
  ?receiverType:let @string inReceiverTypeName
  ?!context:@semanticContext ioContext
{
  for svc in self do
  #--- Routine mangled name
    let routineMangledName = routineMangledNameFromAST (
      !inReceiverTypeName 
      !svc.mName
      !svc.mFormalArgumentList
    )
  #--- Signature
    routineSignature (!?ioContext.mTypeMap !svc.mFormalArgumentList ?let signature)
  #--- Return type
    let returnType = if svc.mReturnTypeName.string == "" then
      @unifiedTypeMap-proxy.null
    else
      @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !svc.mReturnTypeName}
    end
  #--- Attributes
    var mutating = false
    for (attribute) in svc.mAttributeList do
      if attribute.string == mutatingAttribute () then
        mutating = true    
      end
    end
  #--- Enter in context
    [!?ioContext.mRoutineMapForContext insertKey
      !svc.mName
      ![svc.mFormalArgumentList routineSignature !svc.mName]
      !routineMangledName
      !.new {
        !svc.mPublic
        !false
        !svc.mRoutineKind
        !.userMode
        !signature
        !returnType
        !mutating # canMutateProperties
        !true # canAccessPropertiesInUserMode
      }
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @systemRoutineDeclarationListAST systemRoutineSemanticAnalysis
  ?receiverType:@unifiedTypeMap-proxy inReceiverType
  ?context:let @semanticContext inSemanticContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  for svc in self do
    var mutating = false
    var noUnusedWarning = false
    for (attribute) in svc.mAttributeList do
      if attribute.string == noUnusedWarningAttribute () then
        if noUnusedWarning then
          error attribute : "duplicated @" + noUnusedWarningAttribute () + " attribute" fixit { remove }
        end
        noUnusedWarning = true    
      elsif attribute.string == mutatingAttribute () then
        if mutating then
          error attribute : "duplicated @" + mutatingAttribute () + " attribute" fixit { remove }
        end
        mutating = true    
      else
        error attribute 
        : "unknown attribute; available attributes are @" + mutatingAttribute () + ", @" + mutatingAttribute ()
        fixit { remove }
      end
    end
    @mode mode
    switch svc.mRoutineKind
    case section : mode = .sectionMode
    case primitive : mode = .primitiveMode
    case service : mode = .serviceMode
    case safe : mode = .safeMode
    case function (*) : error svc.mEndOfInstructionListLocation : "INTERNAL ERROR" : mode
    end
    routineSemanticAnalysis (
      !receiverType:inReceiverType
      !svc.mRoutineKind
      !mode
      !svc.mName
      !svc.mFormalArgumentList
      !returnTypeName:svc.mReturnTypeName
      !svc.mInstructionList
      !svc.mEndOfInstructionListLocation
      !directAccessToPropertiesAllowed:true
      !propertiesAreMutable:mutating
      !warnIfUnused:not noUnusedWarning
      !globalFunction:true
      !context:inSemanticContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @routineMapIR svcCodeGeneration
  ?!@string ioLLVMcode
  ?!@2stringlist ioPrimitiveAndServiceList
  ?!@2stringlist ioSectionSafeList
{
  for svc in self do
    if not [svc.mKind isFunction] then
      let svcCallName = llvmNameForSVCCall (!svc.mRoutineNameForGeneration !svc.mKind)
      let svcImplementationName = llvmNameForSVCImplementation (!svc.mRoutineNameForGeneration !svc.mKind)
      switch svc.mKind
      case section, safe :
        ioSectionSafeList += !svcCallName !svcImplementationName
      case primitive, service :
        ioPrimitiveAndServiceList += !svcCallName !svcImplementationName
      case function (*) :
        error .nowhere : "INTERNAL ERROR"
      end
      ioLLVMcode += llvmTitleComment (!svcCallName)
      ioLLVMcode += "declare"
      if svc.mReturnType == .null then
        ioLLVMcode += " void"
      else
        ioLLVMcode += " " + [[svc.mReturnType kind] llvmTypeName]
      end
      ioLLVMcode += " @" + svcCallName + " ("
      var first = true
      if svc.mReceiverType != .null then
        ioLLVMcode += [[svc.mReceiverType kind] llvmTypeName] + " * %receiver"
        first = false
      end
      for () in svc.mFormalArgumentListForGeneration do
        if first then
          first = false
        else
          ioLLVMcode += ", "
        end
        switch mFormalArgumentKind
        case input :
          ioLLVMcode += [[mFormalArgumentType kind] llvmTypeName] + " %in." + mFormalArgumentName
        case output :
          ioLLVMcode += [[mFormalArgumentType kind] llvmTypeName] + " * %" + llvmNameForLocalVariable (!mFormalArgumentName)
       case inputOutput :
          ioLLVMcode += [[mFormalArgumentType kind] llvmTypeName] + " * %" + llvmNameForLocalVariable (!mFormalArgumentName)
        end
      end
      ioLLVMcode += ")" + llvmAttributeFunction () + "\n\n"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateSectionAndSafeDispatcher
  ?let @string inCurrentDirectory
  ?let @string inTargetName
  ?let @string inSectionInvocationScheme
  ?!@string ioAssemblerCode
  ?let @2stringlist inSectionAndSafeList
{
  for (callName implementationName) in inSectionAndSafeList do (idx)
    var s = getTargetTextFile (
      !currentDir:inCurrentDirectory
      !from:inTargetName + "/" + inSectionInvocationScheme + "-section-invocation.s"
    )
    s = [s stringByReplacingStringByString !"!USER_ROUTINE!" !callName]
    s = [s stringByReplacingStringByString !"!IMPLEMENTATION_ROUTINE!" !implementationName]
    s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
    ioAssemblerCode += s
  end
  ioAssemblerCode += getTargetTextFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName + "/" + inSectionInvocationScheme + "-section-dispatcher-header.s"
  )
  for (callName implementationName) in inSectionAndSafeList do (idx)
    var s = getTargetTextFile (
      !currentDir:inCurrentDirectory
      !from:inTargetName + "/" + inSectionInvocationScheme + "-section-dispatcher-entry.s"
    )
    s = [s stringByReplacingStringByString !"!USER_ROUTINE!" !callName]
    s = [s stringByReplacingStringByString !"!IMPLEMENTATION_ROUTINE!" !implementationName]
    s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
    ioAssemblerCode += s
  end
  ioAssemblerCode += "\n"
  ioAssemblerCode += getTargetTextFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName + "/" + inSectionInvocationScheme + "-section-dispatcher-code.s"
  )
  ioAssemblerCode += "@-------------------------------------------------------------"
  ioAssemblerCode += "---------------------------------------------------------*\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generatePrimitiveAndServiceDispatcher
  ?let @string inCurrentDirectory
  ?let @string inTargetName
  ?!@string ioAssemblerCode
  ?let @2stringlist inServiceList
{
  for (callName *) in inServiceList do (idx)
    var s = getTargetTextFile (!currentDir:inCurrentDirectory !from:inTargetName + "/service-entry.s")
    s = [s stringByReplacingStringByString !"!ENTRY!" !callName]
    s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
    ioAssemblerCode += s
  end
  ioAssemblerCode += getTargetTextFile (!currentDir:inCurrentDirectory !from:inTargetName + "/service-dispatcher-header.s")
  for (* implementationName) in inServiceList do (idx)
    var s = getTargetTextFile (!currentDir:inCurrentDirectory !from:inTargetName + "/service-dispatcher-entry.s")
    s = [s stringByReplacingStringByString !"!ENTRY!" !implementationName]
    s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
    ioAssemblerCode += s
  end
  ioAssemblerCode += "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
