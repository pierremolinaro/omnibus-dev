#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @systemRoutineDeclarationAST : @abstractDeclarationAST {
  @lstring mReceiverTypeName
  @lstring mSystemRoutineName
  @mode mMode
  @bool mPublic
  @lstringlist mAttributeList
  @routineFormalArgumentListAST mFormalArgumentList
  @lstring mReturnTypeName
  @instructionListAST mInstructionList
  @location mEndOfInstructionListLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <system_routine_declaration> ?!@ast ioAST  ?receiverTypeName: let @lstring inReceiverTypeName {
    @bool public
    select
      public = false
    or
      $public$
      public = true
    end
    $section$
    $identifier$ ?let name
    @mode mode
    select
      mode = .sectionMode
    or
      $safe$
      mode = .safeSectionMode
    end
    @lstringlist attributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      attributeList += !attribute
    end
    <procedure_formal_arguments> !?ioAST ?let formalArgumentList
    @lstring returnTypeName
    select
      returnTypeName = ["" here]
    or
      $->$
      <type_definition> !?ioAST ?returnTypeName
    end
    ${$
    <instructionList> !?ioAST ?let instructionList
    ioAST.mDeclarationListAST += !@systemRoutineDeclarationAST.new {
      !inReceiverTypeName
      !name
      !mode
      !public
      !attributeList
      !formalArgumentList
      !returnTypeName
      !instructionList
      !.here
    }
    $}$
  }

  #·····················································································································

  # A primitive or a service accepts only input arguments and does not return any value

  rule <system_routine_declaration> ?!@ast ioAST  ?receiverTypeName: let @lstring inReceiverTypeName {
    @bool public
    select
      public = false
    or
      $public$
      public = true
    end
    $primitive$
    $identifier$ ?let name
    @mode mode
    select
      mode = .primitiveMode
    or
      $safe$
      mode = .safePrimitiveMode
    end
    @lstringlist attributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      attributeList += !attribute
    end
    <procedure_input_formal_arguments> !?ioAST ?let formalArgumentList
    ${$
    <instructionList> !?ioAST ?let instructionList
    $}$
    ioAST.mDeclarationListAST += !@systemRoutineDeclarationAST.new {
      !inReceiverTypeName
      !name
      !mode
      !public
      !attributeList
      !formalArgumentList
      !["" here]
      !instructionList
      !.here
    }
  }

  #·····················································································································

  rule <system_routine_declaration> ?!@ast ioAST  ?receiverTypeName: let @lstring inReceiverTypeName {
    @bool public
    select
      public = false
    or
      $public$
      public = true
    end
    $service$
    $identifier$ ?let name
    @mode mode
    select
      mode = .serviceMode
    or
      $safe$
      mode = .safeServiceMode
    end
    @lstringlist attributeList = {}
    repeat
    while
      $@attribute$ ?let attribute
      attributeList += !attribute
    end
    <procedure_input_formal_arguments> !?ioAST ?let formalArgumentList
    ${$
    <instructionList> !?ioAST ?let instructionList
    $}$
    ioAST.mDeclarationListAST += !@systemRoutineDeclarationAST.new {
      !inReceiverTypeName
      !name
      !mode
      !public
      !attributeList
      !formalArgumentList
      !["" here]
      !instructionList
      !.here
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES IN PRECEDENCE GRAPH                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @systemRoutineDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  var s = ""
  if mReceiverTypeName.string != "" then
    s += mReceiverTypeName.string + "."
  end
  s += mSystemRoutineName.string + "("
  for (formalArgumentPassingMode selector * *) in mFormalArgumentList do
    s += [formalArgumentPassingMode formalPassingModeString] + selector + ":"
  end
  s += ")"
  let nodeKey = @lstring.new {!s !mSystemRoutineName.location}
  [!?ioGraph addNode !nodeKey !self]

  for (* * formalArgumentTypeName *) in mFormalArgumentList do
    [!?ioGraph noteNode !formalArgumentTypeName]
  end
  [mInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  if mReceiverTypeName.string != "" then
    [!?ioGraph noteNode !mReceiverTypeName]
    [!?ioGraph addEdge !nodeKey !mReceiverTypeName]
  end
  if mReturnTypeName.string != "" then
    [!?ioGraph noteNode !mReturnTypeName]
    [!?ioGraph addEdge !nodeKey !mReturnTypeName]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @systemRoutineDeclarationAST keyRepresentationForErrorSignaling -> @string {
  result = "system " + mReceiverTypeName + "." + mSystemRoutineName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @systemRoutineDeclarationAST locationForErrorSignaling -> @location {
  result = mSystemRoutineName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   UTILITIES                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func systemUserMangledNameFromAST ?let @string inReceiverLLVMBaseTypeName
                                          ?let @routineKind inKind
                                          ?let @lstring inGuardName
                                          ?let @routineFormalArgumentListAST inFormalArgumentList
-> @lstring {
  @string s
  switch inKind 
  case section :
    s = "section"
  case service :
    s = "service"
  case primitive :
    s = "primitive"
  case function :
    s = "???"
  end
  s += ".user."
  if inReceiverLLVMBaseTypeName != "" then
    s += inReceiverLLVMBaseTypeName + "."
  end
  s += inGuardName.string
  s += "("
  for (formalArgumentPassingMode selector formalArgumentTypeName *) in inFormalArgumentList do
    s += [formalArgumentPassingMode formalPassingModeString] + selector + ":"
  end
  s += ")"
  result = .new {!s !inGuardName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func systemImplementationMangledNameFromAST ?let @string inReceiverLLVMBaseTypeName
                                            ?let @routineKind inKind
                                            ?let @lstring inGuardName
                                            ?let @routineFormalArgumentListAST inFormalArgumentList -> @lstring
{
  @string s
  switch inKind 
  case section :
    s = "section"
  case service :
    s = "service"
  case primitive :
    s = "primitive"
  case function :
    s = "???"
  end
  s += ".implementation."
  if inReceiverLLVMBaseTypeName != "" then
    s += inReceiverLLVMBaseTypeName + "."
  end
  s += inGuardName.string
  s += "("
  for (formalArgumentPassingMode selector formalArgumentTypeName *) in inFormalArgumentList do
    s += [formalArgumentPassingMode formalPassingModeString] + selector + ":"
  end
  s += ")"
  result = .new {!s !inGuardName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @systemRoutineDeclarationAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
#---------------------------------------- Self type proxy
  [@unifiedTypeMap-proxy makeOptionalProxy !?ioContext.mTypeMap !mReceiverTypeName ?let selfTypeProxy]
#  log mReceiverTypeName
  let receiverLLVMBaseTypeName = if [selfTypeProxy isNull] then "" else [[selfTypeProxy type] llvmBaseTypeName] end
#--- Attributes
  @stringset attributeSet = {}
  for attribute in mAttributeList do
    attributeSet += !attribute.mValue.string
  end
#---
  @routineKind routineKind
  switch mMode
  case sectionMode, safeSectionMode :
    routineKind = .section
  case serviceMode, safeServiceMode :
    routineKind = .service
  case primitiveMode, safePrimitiveMode :
    routineKind = .primitive
  case userMode, safeUserMode, anyMode, anySafeMode, bootMode, guardMode, panicMode, safeGuardMode, startupMode :
    error mSystemRoutineName : "internal error" : routineKind
  end
#--- Routine mangled names
  let userRoutineMangledName = systemUserMangledNameFromAST (
    !receiverLLVMBaseTypeName
    !routineKind
    !mSystemRoutineName
    !mFormalArgumentList
  )
  let implementationRoutineMangledName = systemImplementationMangledNameFromAST (
    !receiverLLVMBaseTypeName
    !routineKind
    !mSystemRoutineName
    !mFormalArgumentList
  )
#--- Signature
  routineTypedSignature (!?ioContext.mTypeMap !mFormalArgumentList ?let signature)
#--- Return type
  [@unifiedTypeMap-proxy makeOptionalProxy !?ioContext.mTypeMap !mReturnTypeName ?let returnTypeProxy]
#--- Attributes
  var mutating = false
  var noUnusedWarning = false
  for (attribute) in mAttributeList do
    if attribute.string == noUnusedWarningAttribute () then
      if noUnusedWarning then
        error attribute : "duplicated @" + noUnusedWarningAttribute () + " attribute" fixit { remove }
      end
      noUnusedWarning = true    
    elsif attribute.string == mutatingAttribute () then
      if mutating then
        error attribute : "duplicated @" + mutatingAttribute () + " attribute" fixit { remove }
      end
      mutating = true    
    else
      error attribute 
      : "unknown attribute; available attributes are @" + mutatingAttribute () + ", @" + noUnusedWarningAttribute ()
      fixit { remove }
    end
  end
  let @routineAttributes attributes = .mutating
#--- Enter in routine map
  let @routineLLVMNameDict routineLLVMNameDict = [mMode routineLLVMDictionaryForSystemRoutine
    !userRoutineMangledName
    !implementationRoutineMangledName
  ]
  let routineMangledName = [signature mangledName !receiverTypeName: mReceiverTypeName !functionName: mSystemRoutineName]
  [!?ioContext.mRoutineMap insertKey
    !routineMangledName
    !mPublic
    !signature
    !returnTypeProxy
    !routineLLVMNameDict
    !true
    !mMode
  ]
#--- Prepare semantic analysis
  ioDecoratedRoutineList +=
    !receiverTypeName: mReceiverTypeName
    !mode: mMode
    !isRequired:false
    !routineKind: routineKind
    !warnIfUnused: not noUnusedWarning
    !exportedRoutine: true
    !routineAttributes: attributes
    !routineMangledLLVMName: implementationRoutineMangledName
    !formalArgumentList: mFormalArgumentList
    !warningOnUnusedArgs: noUnusedWarning
    !mInstructionList
    !mEndOfInstructionListLocation
    !returnTypeName: mReturnTypeName  # Empty string if no returned value
#--- 
  ioRoutineListIR += !@systemUserRoutineIR.new {
    !userRoutineMangledName
    !isRequired:false
    !warnsIfUnused:false
    !implementationRoutineMangledName
    !signature
    !selfTypeProxy
    !routineKind == .section # If false, service or primitive
    !returnTypeProxy
  }

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @sectionIRlist {
  @string mSectionCallName
  @string mSectionImplementationName
  @bool invocationFromAnyMode %selector
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @primitiveAndServiceIRlist {
  @string mCallName
  @string mImplementationName
  @bool mHasReturnValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmFunctionPrototype ?let @string inReturnTypeLLVMName
                           ?let @string inFunctionName
                           ?let @omnibusType inReceiverType
                           ?let @routineFormalArgumentListIR inFormalArgumentListForGeneration
                           -> @string {
  result = inReturnTypeLLVMName
  result += " @" + inFunctionName + " ("
  var first = true
  if inReceiverType.kind != .void then
    result += [inReceiverType llvmTypeName] + " * %receiver"
    first = false
  end
  for () in inFormalArgumentListForGeneration do
    if first then
      first = false
    else
      result += ", "
    end
    switch mFormalArgumentKind
    case input :
      result += [mFormalArgumentType llvmTypeName] + " %in." + mFormalArgumentName
    case output :
      result += [mFormalArgumentType llvmTypeName] + " * " + llvmNameForLocalVariable (!mFormalArgumentName)
   case inputOutput :
      result += [mFormalArgumentType llvmTypeName] + " * " + llvmNameForLocalVariable (!mFormalArgumentName)
    end
  end
  result += ")" + llvmAttributeFunction ()
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateSectionDispatcher
  ?let @string inCurrentDirectory
  ?let @string inTargetName
  ?targetParameters:let @targetParameters inTargetParameters
  ?!@string ioAssemblerCode
  ?let @sectionIRlist inSectionIRlist
{
  for section in inSectionIRlist do (idx)
    if section.invocationFromAnyMode then
      var s = getTargetTextFile (
        !currentDir:inCurrentDirectory
        !from:inTargetName + "/" + inTargetParameters.mSectionDispatcherInvocationFromAnyMode
      )
      s = [s stringByReplacingStringByString !"!USER_ROUTINE!" !section.mSectionCallName]
      s = [s stringByReplacingStringByString !"!IMPLEMENTATION_ROUTINE!" !section.mSectionImplementationName]
      s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
      ioAssemblerCode += s
    else
      var s = getTargetTextFile (
        !currentDir:inCurrentDirectory
        !from:inTargetName + "/" + inTargetParameters.mSectionDispatcherInvocationFromUserMode
      )
      s = [s stringByReplacingStringByString !"!USER_ROUTINE!" !section.mSectionCallName]
      s = [s stringByReplacingStringByString !"!IMPLEMENTATION_ROUTINE!" !section.mSectionImplementationName]
      s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
      ioAssemblerCode += s
    end
  end
  ioAssemblerCode += getTargetTextFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName + "/" + inTargetParameters.mSectionDispatcherHeader
  )
  for (callName implementationName invocationFromUserModeOnly) in inSectionIRlist do (idx)
    var s = getTargetTextFile (
      !currentDir:inCurrentDirectory
      !from:inTargetName + "/" + inTargetParameters.mSectionDispatcherEntry
    )
    s = [s stringByReplacingStringByString !"!USER_ROUTINE!" !callName]
    s = [s stringByReplacingStringByString !"!IMPLEMENTATION_ROUTINE!" !implementationName]
    s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
    ioAssemblerCode += s
  end
  ioAssemblerCode += "\n"
  ioAssemblerCode += getTargetTextFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName + "/" + inTargetParameters.mSectionHandler
  )
  ioAssemblerCode += "@-------------------------------------------------------------"
  ioAssemblerCode += "---------------------------------------------------------*\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generatePrimitiveAndServiceDispatcher
  ?let @string inCurrentDirectory
  ?let @string inTargetName
  ?!@string ioAssemblerCode
  ?let @primitiveAndServiceIRlist inServiceList
  ?targetParameters:let @targetParameters inTargetParameters
{
#--- Generate service handler
  ioAssemblerCode += getTargetTextFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName + "/" + inTargetParameters.mServiceHandler
  )
#---
  for service in inServiceList do (idx)
    if service.mHasReturnValue then
      var s = getTargetTextFile (
        !currentDir:inCurrentDirectory
        !from:inTargetName + "/" + inTargetParameters.mServiceEntryWithReturnValue
      )
      s = [s stringByReplacingStringByString !"!ENTRY!" !service.mCallName]
      s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
      ioAssemblerCode += s
    else
      var s = getTargetTextFile (
        !currentDir:inCurrentDirectory
        !from:inTargetName + "/" + inTargetParameters.mServiceEntryNoReturnedValue
      )
      s = [s stringByReplacingStringByString !"!ENTRY!" !service.mCallName]
      s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
      ioAssemblerCode += s
    end
  end
  ioAssemblerCode += getTargetTextFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName + "/" + inTargetParameters.mServiceDispatcherHeader
  )
  for service in inServiceList do (idx)
    var s = getTargetTextFile (
      !currentDir:inCurrentDirectory
      !from:inTargetName + "/" + inTargetParameters.mServiceDispatcherEntry
    )
    s = [s stringByReplacingStringByString !"!ENTRY!" !service.mImplementationName]
    s = [s stringByReplacingStringByString !"!IDX!" ![idx string]]
    ioAssemblerCode += s
  end
  ioAssemblerCode += "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYSTEM USER ROUTINE IR
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @systemUserRoutineIR : @abstractRoutineIR {
  @string mMangledImplementationName
  @routineTypedSignature mFormalArgumentList
  @unifiedTypeMap-proxy mReceiverTypeProxy
  @bool mIsSection # If false, service or primitive
  @unifiedTypeMap-proxy mReturnTypeProxy
}

#·······················································································································

override method @systemUserRoutineIR enterAccessibleEntities
   ?!@stringset ioInvokedRoutineSet
   ?!@uint unused ioMaxBranchOfOnInstructions
{
  ioInvokedRoutineSet += !mMangledImplementationName
}

#·······················································································································

override method @systemUserRoutineIR svcDeclarationGeneration
  ?!@primitiveAndServiceIRlist ioPrimitiveAndServiceList
  ?!@sectionIRlist ioSectionList
  ?!@generationAdds unused ioGenerationAdds
{
  let userMangledName = [mRoutineMangledName assemblerRepresentation]
  let implementationMangledName = [mMangledImplementationName assemblerRepresentation]
  if mIsSection then
    ioSectionList += !userMangledName !implementationMangledName !invocationFromAnyMode: false
  else
    ioPrimitiveAndServiceList += !userMangledName !implementationMangledName !false
  end
}

#·······················································································································

override method @systemUserRoutineIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "declare "
  if mReturnTypeProxy == .null then
    ioLLVMcode += "void"
  else
    ioLLVMcode += [[mReturnTypeProxy type] llvmTypeName]
  end
  ioLLVMcode += " @" + [mRoutineMangledName assemblerRepresentation] + " ("
  var first = true
  if mReceiverTypeProxy != .null then
    ioLLVMcode += [[mReceiverTypeProxy type] llvmTypeName] + "* %receiver"
    first = false
  end
  for () in mFormalArgumentList do
    if first then
      first = false
    else
      ioLLVMcode += ", "
    end
    switch mFormalArgumentPassingMode
    case input :
      ioLLVMcode += [[mTypeProxy type] llvmTypeName]
    case output :
      ioLLVMcode += [[mTypeProxy type] llvmTypeName] + "*"
   case inputOutput :
      ioLLVMcode += [[mTypeProxy type] llvmTypeName] + "*"
    end
  end
  ioLLVMcode += ")" + llvmAttributeFunction () + "\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
