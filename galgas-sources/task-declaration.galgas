#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @taskListAST {
  @lstring mTaskName
  @lstringlist mLowerPriorityTaskList
  @lbigint mStackSize
  @taskSetupListAST mTaskSetupListAST
  @taskSetupListAST mTaskActivateListAST
  @taskSetupListAST mTaskDeactivateListAST
  @syncInstructionBranchListAST mGuardedCommandList
  @location mEndOfTaskDeclaration
  @bool mAutoStart
}

#·······················································································································

list @taskSetupListAST {
  @lstring mName
  @lstringlist mDependanceList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $task$
    $identifier$ ?let taskName
    @lstringlist higherPriorityTaskList = {}
    select
    or
      $>$
      repeat
        $identifier$ ?let aTaskName
        higherPriorityTaskList += !aTaskName
      while
        $,$
      end
    end
    $@attribute$ ?let stackSizeAttribute
    if stackSizeAttribute.string != "stacksize" then
      error stackSizeAttribute : "this attribute should be @stacksize"
    end
    $integer$ ?let @lbigint stackSize
  #--- @autostart attribute
    var autoStart = false
    select
    or
      $@attribute$ ?let activateAttribute
      if activateAttribute.string != "autostart" then
        error activateAttribute : "this attribute should be @autostart"
      end
      autoStart = true
    end
    ${$
    @structurePropertyListAST taskVarList = {}
    @taskSetupListAST taskSetupList = {}
    @taskSetupListAST taskActivateList = {}
    @taskSetupListAST taskDeactivateList = {}
    @syncInstructionBranchListAST branchList = {}
    repeat
    while
      <private_struct_property_declaration> !?ioAST !?taskVarList
    while
      $func$
      $identifier$ ?let procName
      <procedure_formal_arguments> !?ioAST ?let @routineFormalArgumentListAST formalArgumentList
      @lstring returnTypeName
      select
        returnTypeName = ["" here]
      or
        $->$
        <type_definition> !?ioAST ?returnTypeName
      end
      ${$
      <instructionList> !?ioAST ?let instructionList
      ioAST.mDeclarationListAST += !@functionDeclarationAST.new {
        !.userMode
        !false
        !taskName
        !procName
        !{}
        !formalArgumentList
        !returnTypeName
        !instructionList
        !.here
      }
      $}$
    while
      <task_event> !?ioAST !taskName: taskName !?setup: taskSetupList !?activate: taskActivateList !?deactivate: taskDeactivateList
#      $event$
#      $@attribute$ ?let attribute
#      $identifier$ ?let name
#      @lstringlist dependenceList = {}
#      select
#      or
#        $>$
#        repeat
#          $identifier$ ?let dependenceName
#          dependenceList += !dependenceName
#        while
#          $,$
#        end
#      end
#      ${$
#      <instructionList> !?ioAST ?let instructionList
#      let endOfInit = @location.here
#      $}$
#      if attribute.string == "onSetup" then
#        taskSetupListAST += !name !dependenceList # !instructionList !endOfInit
#        ioAST.mDeclarationListAST += !@taskSetupDeclarationAST.new {
#          !taskName
#          !"task.setup."
#          !name
#          !dependenceList
#          !instructionList
#          !endOfInit
#        }
#      elsif attribute.string == "onStart" then
#        taskActivateListAST += !name !dependenceList # !instructionList !endOfInit
#        ioAST.mDeclarationListAST += !@taskSetupDeclarationAST.new {
#          !taskName
#          !"task.activate."
#          !name
#          !dependenceList
#          !instructionList
#          !endOfInit
#        }
#      elsif attribute.string == "onTermination" then
#        taskDeactivateListAST += !name !dependenceList # !instructionList !endOfInit
#        ioAST.mDeclarationListAST += !@taskSetupDeclarationAST.new {
#          !taskName
#          !"task.deactivate."
#          !name
#          !dependenceList
#          !instructionList
#          !endOfInit
#        }
#      else
#        error attribute : "attribute should be @onSetup, @onStart or @onTermination"
#      end
    while
      $event$
      <guarded_command> !?ioAST ?let @guardedCommandAST guardedCommand
      ${$
      <instructionList> !?ioAST ?let instructionList
      let endOfInstructions = @location.here
      $}$
      branchList += !guardedCommand !instructionList !endOfInstructions
    end
    let endOfTask = @location.here
    $}$
    ioAST.mTaskListAST +=
      !taskName
      !higherPriorityTaskList
      !stackSize
      !taskSetupList
      !taskActivateList
      !taskDeactivateList
      !branchList
      !endOfTask
      !autoStart
    ioAST.mDeclarationListAST += !@structureDeclarationAST.new {
      !taskName
      !taskName
      !taskName
      !{}
      !false # Generate assignment routine
      !taskVarList
      !{}
      !false
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @taskListAST noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    for guardedCommand in mGuardedCommandList do
      [guardedCommand.mInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @taskMap {
  @omnibusType mTaskType
  insert insertKey error message "the '%K' task is already declared in %L"
  search searchKey error message "there is no '%K' task"
}

#·······················································································································

method @taskListAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
#------------- Sort tasks following their relative priority
  @taskListAST taskList = self
  @taskListAST sortedTaskList = {}
  @stringset handledTaskSet = {}
  var continue = true
  loop ([taskList length]) while continue && ([taskList length] > 0) do
    continue = false
    @taskListAST candidateTaskList = {}
    var idx = 0
    for task in taskList do
      var allPrecedenceDefined = true
      for (precedenceName) in task.mLowerPriorityTaskList while allPrecedenceDefined do
        allPrecedenceDefined = [handledTaskSet hasKey !precedenceName.string]
      end
      if allPrecedenceDefined then
        candidateTaskList +=
          !task.mTaskName
          !task.mLowerPriorityTaskList
          !task.mStackSize
#          !task.mVarList
          !task.mTaskSetupListAST
          !task.mTaskActivateListAST
          !task.mTaskDeactivateListAST
          !task.mGuardedCommandList
          !task.mEndOfTaskDeclaration
          !task.mAutoStart
        continue = true
        [!?taskList removeAtIndex ?9* !idx]
      else
        idx = idx + 1
      end
    end
    if [option omnibus_options.taskStrictPriorityOrder value] && ([candidateTaskList length] > 1) then
      for task in candidateTaskList do
        error task.mTaskName : "this task does not respect a strict priority order"
      end
    end
    if [candidateTaskList length] > 0 then
      continue = true
      for task in candidateTaskList do
        handledTaskSet += !task.mTaskName.string
      end
      sortedTaskList += candidateTaskList
    end
  end
#--- Signal unsorted entries as error
  for (name 8*) in taskList do
    error name : "this task is out of priority order"
  end
#---
  @decoratedTaskList decoratedTaskList = {}
  for task in sortedTaskList do (taskIndex)
  #--- task variables
#    @propertyList propertyList = {}
#    @propertyGetterMap propertyGetterMap = {}
#    @propertySetterMap propertySetterMap = {}
#    @sortedOperandIRList initialValueList = {}
#    for property in task.mVarList do
#      [property enterPropertyInContext
#        !?context:ioContext
#        !?staticEntityMap:ioStaticEntityMap
#        !receiverTypeName: task.mTaskName
#        !receiverLLVMBaseTypeName: task.mTaskName
#        !?ioDecoratedRoutineList
#        !?propertyList
#        !?propertyGetterMap
#        !?propertySetterMap
#        !?initialValueList
#        !?*
#        !?*
#        !?*
#      ]
#    end
  #---- Add activate function
    [!?ioContext.mRoutineMap addFunctionWithoutArgument
      !omnibusTypeDescriptionName: task.mTaskName
      !llvmBaseTypeName: task.mTaskName
      !methodName:.new {!"activate" !task.mTaskName.location}
      !mode:.safeUserMode
      !resultTypeProxy:.null
      ?routineLLVMName:*
    ]
    let assemblerTaskName = [task.mTaskName assemblerRepresentation]
    let activateTaskCallName = llvmNameForServiceCall (!llvmNameForActivateTask ())
    ioRoutineListIR += !@taskActivateFunctionIR.new {
      !routineMangledNameFromAST (!task.mTaskName !["activate" nowhere] !{})
      !isRequired:false
      !warnsIfUnused:false
      !assemblerTaskName
      !activateTaskCallName
      !taskIndex
    }
  #------------------------------------------- Analyze task guarded command
  #  Build a "task.loop" function that contains a sync instruction
    @instructionListAST taskListInstructionList = {}
    if [task.mGuardedCommandList length] > 0 then
      let syncInstruction = @syncInstructionAST.new {!task.mTaskName.location !task.mGuardedCommandList !task.mTaskName.location}
      taskListInstructionList += !syncInstruction
    end
    let routineMangledName = routineMangledNameFromAST (!task.mTaskName ![llvmNameForTaskLoopFunction () nowhere] ! {})
    ioDecoratedRoutineList +=
      !receiverTypeName: task.mTaskName
      !mode:.userMode
      !isRequired:true
      !routineKind: .function
      !warnIfUnused: true
      !exportedRoutine: false
      !routineAttributes: .mutating
      !routineMangledLLVMName: routineMangledName
      !formalArgumentList: {}
      !warningOnUnusedArgs: true
      !taskListInstructionList
      !task.mTaskName.location
      !returnTypeName: ["" nowhere]
    [ioContext.mTypeMap searchKey !lkey:task.mTaskName ?type:let taskType]
    [!?ioContext.mValuedObjectMap insertTask !task.mTaskName !taskType]
    var initialValueList = @sortedOperandIRList {}
    for (* * initValue) in [taskType constructorMap] do
      [initValue structure ?sortedOperandList: initialValueList]
    end
    ioContext.mGlobalTaskVariableList +=
      !task.mTaskName.string 
      !task.mTaskName.string
      !.llvmStructureValue{!type:taskType !values:initialValueList}
  #---
    decoratedTaskList += 
      !task.mTaskName
      !task.mStackSize
      !task.mTaskSetupListAST
      !task.mTaskActivateListAST
      !task.mTaskDeactivateListAST
      !task.mEndOfTaskDeclaration
      !task.mAutoStart
  end
#---------------- Add decorated declaration
  ioDecoratedDeclarationList += !@decoratedTaskListDeclaration.new {!decoratedTaskList}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @decoratedTaskList {
  @lstring mTaskName
  @lbigint mStackSize
  @taskSetupListAST mTaskSetupListAST
  @taskSetupListAST mTaskActivateListAST
  @taskSetupListAST mTaskDeactivateListAST
  @location mEndOfTaskDeclaration
  @bool mAutoStart
}

#·······················································································································

class @decoratedTaskListDeclaration : @abstractDecoratedDeclaration {
  @decoratedTaskList mTaskList
}

#·······················································································································

override method @decoratedTaskListDeclaration semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  for task in mTaskList do (priority)
    [task taskSemanticAnalysis
      !context:inContext
      !priority:priority
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    ]
  end
}

#·······················································································································

private proc analyzeOrderedTaskRoutines
  ?let @taskSetupListAST inTaskRoutineLISTAST
  !@stringlist outSetupOrderedList
{
  outSetupOrderedList = {}
  if [inTaskRoutineLISTAST length] > 0 then
  #--- Check there is exactly one entry without any precedence
    @uint numberOfEntriesWithoutAnyPrecedence = 0
    for (* precedenceList) in inTaskRoutineLISTAST do
      if [precedenceList length] == 0 then
        numberOfEntriesWithoutAnyPrecedence += numberOfEntriesWithoutAnyPrecedence + 1
      end
    end
    if numberOfEntriesWithoutAnyPrecedence == 0 then
      for (name *) in inTaskRoutineLISTAST do
        error name : "Exactly one routine should have no precedence"
      end
    elsif numberOfEntriesWithoutAnyPrecedence > 1 then
      for (name precedenceList) in inTaskRoutineLISTAST do
        if [precedenceList length] == 0 then
          error name : "Exactly one routine should have no precedence"
        end
      end    
    end
  #--- Signal unsorted entries as error
    @taskSetupListAST taskSetupListAST = inTaskRoutineLISTAST
    @stringset precedenceSet = {}
    var continue = true
    loop ([inTaskRoutineLISTAST length]) while continue && ([taskSetupListAST length] > 0) do
      continue = false
      var idx = 0
      for (name precedenceList) in taskSetupListAST do
        var allPrecedenceDefined = true
        for (precedenceName) in precedenceList while allPrecedenceDefined do
          allPrecedenceDefined = [precedenceSet hasKey !precedenceName.string]
        end
        if allPrecedenceDefined then
          outSetupOrderedList += !name.string
          precedenceSet += !name.string
          continue = true
          [!?taskSetupListAST removeAtIndex ?2* !idx]
        else
          idx = idx + 1
        end
      end
    end
  #--- Signal unsorted entries as error
    for (name *) in taskSetupListAST do
      error name : "this routine is out of execution order"
    end
  end
}

#·······················································································································

method @decoratedTaskList-element taskSemanticAnalysis
  ?context:let @semanticContext inContext
  ?priority:let @uint inPriority
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  [inContext.mTypeMap searchKey !lkey:mTaskName ?type:let taskType]
#------------------------------------------- Check stack size is >= 64, and a multiple of 8
  let stackSize = mStackSize.bigint
  if (stackSize < 64G) || ((stackSize mod 8G) != 0G) then
    error mStackSize : "stack size should be a multiple of 8, and >= 64"
  end
#------------------------------------------- Analyze task setup routines
  analyzeOrderedTaskRoutines (
    !mTaskSetupListAST
    ?let setupOrderedList
  )
#------------------------------------------- Analyze task activate routines
  analyzeOrderedTaskRoutines (
    !mTaskActivateListAST
    ?let activateOrderedList
  )
#------------------------------------------- Analyze task deactivate routines
  analyzeOrderedTaskRoutines (
    !mTaskDeactivateListAST
    ?let deactivateOrderedList
  )
#------------------------------------------- Task Name string constant index
  [!?ioIntermediateCodeStruct.mStaticEntityMap findOrAddStaticString !mTaskName.string ?let taskNameStringIndex]
#------------------------------------------- Generate task
  [!?ioIntermediateCodeStruct.mTaskMapIR insertKey
    !mTaskName
    !taskType
    !inPriority
    !mStackSize.bigint
    !setupOrderedList
    !activateOrderedList
    !deactivateOrderedList
    !taskNameStringIndex
    !mAutoStart
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @taskMapIR {
  @omnibusType mTaskType
  @uint mPriority
  @bigint mStackSize
  @stringlist mSetupOrderedList
  @stringlist mActivateOrderedList
  @stringlist mDeactivateOrderedList
  @uint mTaskNameStringIndex
  @bool mActivate

  insert insertKey error message "** internal error **"
  search searchKey error message "** internal error **"
  remove removeKey error message "** internal error **"
}

#·······················································································································

sortedlist @taskSortedListIR {
  @string mTaskName
  @uint mPriority
  @bigint mStackSize
  @stringlist mSetupOrderedList
  @stringlist mActivateOrderedList
  @stringlist mDeactivateOrderedList
  @uint mTaskNameStringIndex
  @bool mActivate
}{
  mPriority >
}

#·······················································································································

list @globalTaskVariableList {
  @string mTaskName
  @string mTaskTypeName
  @objectIR mInitialValue
}

#·······················································································································

method @taskMapIR generateCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
  ?!@primitiveAndServiceIRlist ioServiceList
{
#---------- Declare "activate task" service
  ioLLVMcode += llvmTitleComment (!"Activate task service")
  let activateTaskImplementationName = llvmNameForServiceImplementation (!llvmNameForActivateTask ())
  let activateTaskCallName = llvmNameForServiceCall (!llvmNameForActivateTask ())
  ioServiceList += !activateTaskCallName !activateTaskImplementationName !false
  ioLLVMcode += "declare void @" + activateTaskCallName + " (i8 %inTaskIndex) nounwind\n\n"
#---------- Declare "wait for activation" service
  ioLLVMcode += llvmTitleComment (!"Wait for activation service")
  let waitForActivationImplementationName = llvmNameForServiceImplementation (!llvmNameForTaskWaitsForActivation ())
  let waitForActivationCallName = llvmNameForServiceCall (!llvmNameForTaskWaitsForActivation ())
  ioServiceList += !waitForActivationCallName !waitForActivationImplementationName !false
  ioLLVMcode += "declare void @" + waitForActivationCallName + " () nounwind\n\n"
#---------- Declare task variables
  ioLLVMcode += llvmTitleComment (!"Task variables")
  for (taskName taskTypeName initValueList) in inGenerationContext.mGlobalTaskVariableList do
    ioLLVMcode += llvmNameForGlobalVariable (!taskName)
    ioLLVMcode += " = internal global %"
    ioLLVMcode += [taskTypeName assemblerRepresentation]
    ioLLVMcode += " " + [initValueList llvmValue] + "\n"
  end
  ioLLVMcode += "\n"
#---------- Build ordered task list
  @taskSortedListIR orderedTaskList = {}
  for task in self do
    orderedTaskList +=
      !task.lkey.string
      !task.mPriority
      !task.mStackSize
      !task.mSetupOrderedList
      !task.mActivateOrderedList
      !task.mDeactivateOrderedList
      !task.mTaskNameStringIndex
      !task.mActivate
  end
#---------- Declare task stacks and main routine
  ioLLVMcode += llvmTitleComment (!"Create task extern routine")
  ioLLVMcode += "declare void @kernel_create_task (i32 %inTaskIndex, i8* %inTaskName, i32* %inStackBufferAddress, "
  ioLLVMcode += "i32 %inStackBufferSize, void ()* %inTaskRoutine) nounwind\n\n"
  for task in orderedTaskList do
    ioLLVMcode += llvmTitleComment (!"Task " + task.mTaskName)
    let assemblerTaskName = [task.mTaskName assemblerRepresentation]
    ioLLVMcode += stackNameForTask (!task.mTaskName) + " = global [" + (task.mStackSize / 4) + " x i32] zeroinitializer\n"
    ioLLVMcode += "\n"
    let effectiveParameter = "(%" + assemblerTaskName + "* " + llvmNameForGlobalVariable (!task.mTaskName) + ")"
    let formalArgument = " (%" + assemblerTaskName + "* " + llvmNameForSelf () + ")"
    ioLLVMcode += llvmSeparatorLine () + "\n"
  #---------- Setup
    ioLLVMcode += "define internal void " + setupNameForTaskType (!task.mTaskName) + formalArgument + llvmAttributeFunction () + "{\n"
    for (setupName) in task.mSetupOrderedList do
      let mangledName = "task.setup." + task.mTaskName + "." + setupName
      ioLLVMcode += "  call void @" + [mangledName assemblerRepresentation] + formalArgument + "\n"
    end
    ioLLVMcode += "  ret void\n"
    ioLLVMcode += "}\n\n"
    ioLLVMcode += llvmSeparatorLine ()
    ioLLVMcode += "\n"
  #---------- Activate
    ioLLVMcode += "define internal void @" + [activateNameForTaskType (!task.mTaskName) assemblerRepresentation]
    ioLLVMcode += formalArgument + llvmAttributeFunction () + "{\n"
    for (activateName) in task.mActivateOrderedList do
      let mangledName = "task.activate." + task.mTaskName + "." + activateName
      ioLLVMcode += "  call void @" + [mangledName assemblerRepresentation] + formalArgument + "\n"
    end
    ioLLVMcode += "  ret void\n"
    ioLLVMcode += "}\n\n"
    ioLLVMcode += llvmSeparatorLine ()
    ioLLVMcode += "\n"
  #---------- Deactivate
    ioLLVMcode += "define internal void " + deactivateNameForTaskType (!task.mTaskName) + formalArgument + llvmAttributeFunction () + "{\n"
    for (deactivateName) in task.mDeactivateOrderedList do
      let mangledName = "task.deactivate." + task.mTaskName + "." + deactivateName
      ioLLVMcode += "  call void @" + [mangledName assemblerRepresentation] + formalArgument + "\n"
    end
    ioLLVMcode += "  ret void\n"
    ioLLVMcode += "}\n\n"
    ioLLVMcode += llvmSeparatorLine ()
    ioLLVMcode += "\n"
  #---------- Task routine
    ioLLVMcode += "define internal void " + mainRoutineNameForTask (!task.mTaskName) + " ()" + llvmAttributeFunction () + "noreturn {\n"
    ioLLVMcode += "  call void " + setupNameForTaskType (!task.mTaskName) + " " + effectiveParameter + "\n"
    let taskLoopLabel = "loop." + [task.mTaskName assemblerRepresentation]
    ioLLVMcode += "  br label %" + taskLoopLabel + "\n\n"
    ioLLVMcode += taskLoopLabel + ":\n"
    if not task.mActivate then
      ioLLVMcode += "  call void @" + waitForActivationCallName + " ()\n"
    end
    ioLLVMcode += "  call void @" + [activateNameForTaskType (!task.mTaskName) assemblerRepresentation] + " " + effectiveParameter + "\n"
    ioLLVMcode += "  call void @func." + llvmNameForFunction (!task.mTaskName + "." + llvmNameForTaskLoopFunction () + "()") + " " + effectiveParameter + "\n"
    ioLLVMcode += "  call void " + deactivateNameForTaskType (!task.mTaskName) + " " + effectiveParameter + "\n"
    if task.mActivate then
      ioLLVMcode += "  call void @" + waitForActivationCallName + " ()\n"
    end
    ioLLVMcode += "  br label %" + taskLoopLabel + "\n"
    ioLLVMcode += "}\n\n"
  end
#------------------------------------- Start tasks
  ioLLVMcode += llvmTitleComment (!"Start tasks")
  ioLLVMcode += "define internal void @start.tasks ()" + llvmAttributeFunction () + "{\n"
  for task in orderedTaskList do (idx)
    ioLLVMcode += "  " + stackAddressForTask (!task.mTaskName)
    ioLLVMcode += " = getelementptr inbounds [" + (task.mStackSize / 4) + " x i32], "
    ioLLVMcode += "[" + (task.mStackSize / 4) + " x i32]* " + stackNameForTask (!task.mTaskName)
    ioLLVMcode += ", i32 0, i32 0\n"
    ioLLVMcode += "  %task.name." + idx + " = load i8*, i8** " + literalStringName (!task.mTaskNameStringIndex) + "\n"
    ioLLVMcode += "  call void @kernel_create_task ("
    ioLLVMcode += "i32 " + idx
    ioLLVMcode += ", i8* %task.name." + idx
    ioLLVMcode += ", i32* " + stackAddressForTask (!task.mTaskName)
    ioLLVMcode += ", i32 " + task.mStackSize
    ioLLVMcode += ", void ()* " + mainRoutineNameForTask (!task.mTaskName) + ")\n"
  end
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION: ACTIVATE FUNCTION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @taskActivateFunctionIR : @abstractRoutineIR {
  @string mAssemblerTaskName
  @string mActivateServiceInvocationName
  @uint mTaskIndex
}

#·······················································································································

override method @taskActivateFunctionIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "define internal void @" + [mRoutineMangledName assemblerRepresentation] + " "
  ioLLVMcode += "(%" + mAssemblerTaskName + "* " + llvmNameForSelf () + ")" + llvmAttributeFunction () + "{\n"
  ioLLVMcode += "  call void @" + mActivateServiceInvocationName + " (i8 " + mTaskIndex + ")\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
  ioLLVMcode += llvmSeparatorLine ()
  ioLLVMcode += "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
