#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @taskListAST {
  @lstring mTaskName
  @lbigint mPriority
  @lbigint mStackSize
  @structurePropertyListAST mVarList
  @functionDeclarationListAST mTaskFunctionList
  @taskSetupListAST mTaskSetupListAST
  @syncInstructionBranchListAST mGuardedCommandList
  @location mEndOfTaskDeclaration
}

#·······················································································································

list @taskSetupListAST {
  @lbigint mTaskSetupPriority
  @instructionListAST mTaskSetupInstructionList
  @location mEndOfTaskSetupDeclaration
}

#·······················································································································

sortedlist @taskSetupSortedListAST {
  @lbigint mTaskSetupPriority
  @instructionListAST mTaskSetupInstructionList
  @location mEndOfTaskSetupDeclaration
  @bigint mSetupPriority
}{
  mSetupPriority <
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $task$
    $identifier$ ?let taskName
    $priority$
    $integer$ ?let @lbigint priority
    $stackSize$
    $integer$ ?let @lbigint stackSize
    ${$
    @structurePropertyListAST taskVarList = {}
    @functionDeclarationListAST taskProcList = {}
    @taskSetupListAST taskInitListAST = {}
    @syncInstructionBranchListAST branchList = {}
    repeat
    while
      <private_struct_property_declaration> !?ioAST !?taskVarList
    while
      $func$
      $identifier$ ?let procName
      <procedure_formal_arguments> !?ioAST ?let @routineFormalArgumentListAST formalArgumentList
      @lstring returnTypeName
      select
        returnTypeName = ["" here]
      or
        $->$
        <type_definition> !?ioAST ?returnTypeName
      end
      ${$
      <instructionList> !?ioAST ?let instructionList
      taskProcList += !.userMode !false !procName !{} !formalArgumentList !returnTypeName !instructionList !.here
      $}$
    while
      $setup$
      $integer$ ?let @lbigint priority
      ${$
      <instructionList> !?ioAST ?let instructionList
      let endOfInit = @location.here
      $}$
      taskInitListAST += !priority !instructionList !endOfInit
    while
      <guarded_command> !?ioAST ?let @guardedCommandAST guardedCommand
      ${$
      <instructionList> !?ioAST ?let instructionList
      let endOfInstructions = @location.here
      $}$
      branchList += !guardedCommand !instructionList !endOfInstructions
    end
    let endOfTask = @location.here
    $}$
    ioAST.mTaskListAST +=
      !taskName
      !priority
      !stackSize
      !taskVarList
      !taskProcList
      !taskInitListAST
      !branchList
      !endOfTask
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @taskListAST noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for () in self do
    for variable in mVarList do
      if variable.mPropertyTypeName.string != "" then
        let typeName = llvmTypeNameFromPLMname (!variable.mPropertyTypeName)
        [!?ioGraph noteNode !typeName]
      end
    end
    for setup in mTaskSetupListAST do
      [setup.mTaskSetupInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
    end
    for function in mTaskFunctionList do
      [function.mFunctionInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
    end
    for guardedCommand in mGuardedCommandList do
      [guardedCommand.mInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @taskMap {
  @PLMType mTaskType
  insert insertKey error message "the '%K' task is already declared in %L"
  search searchKey error message "there is no '%K' task"
}

#·······················································································································

method @taskListAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@subprogramInvocationGraph unused ioSubprogramInvocationGraph
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
{
  @decoratedTaskList decoratedTaskList = {}
  for task in self do
  #--- task variables
    @propertyList propertyList = {}
    @propertyMap propertyMap = {}
    @sortedOperandIRList initialValueList = {}
    for property in task.mVarList do
      [property enterInContext
        !task.mTaskName
        !?context:ioContext
        !?staticStringMap:ioGlobalLiteralStringMap
        !?propertyList
        !?propertyMap
        !?initialValueList
        !?*
        !?*
        !?*
      ]
    end
  #---------------- Enter task functions in property map
    [task.mTaskFunctionList enterFunctionsInPropertyMap !?context:ioContext !?propertyMap]
  #---------------- Enter task variable map as structure type in type map
    let taskType = @PLMType.new {
      !propertyMap:propertyMap
      !classConstantMap:{}
      !constructorMap:{}
      !guardMap:{}
      !typeAttributes:.none
      !plmOriginalTypeName:task.mTaskName
      !kind:.structure {!propertyList:propertyList}
      !plmAliasedTypeName:task.mTaskName
    }
    [!?ioContext.mTypeMap insertType
      !lkey:task.mTaskName
      !type:taskType
      !index:[ioContext.mTypeMap count]
    ]
    [!?ioContext.mTaskMap insertKey !task.mTaskName !taskType]
    [!?ioContext.mValuedObjectMap insertTask !task.mTaskName !taskType]
    ioContext.mGlobalTaskVariableList +=
      !task.mTaskName.string 
      !task.mTaskName.string
      !.llvmStructureValue{!type:taskType !values:initialValueList}
  #--- Task functions
    [task.mTaskFunctionList enterFunctionInContext
      !selfTypeName:task.mTaskName
      !?context:ioContext
      !?ioDecoratedDeclarationList
    ]
  #---
    decoratedTaskList += 
      !task.mTaskName
      !task.mPriority
      !task.mStackSize
      !task.mVarList
      !task.mTaskFunctionList
      !task.mTaskSetupListAST
      !task.mGuardedCommandList
      !task.mEndOfTaskDeclaration
  end
#---------------- Add decorated declaration
  ioDecoratedDeclarationList += !@decoratedTaskListDeclaration.new {!decoratedTaskList}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @decoratedTaskList {
  @lstring mTaskName
  @lbigint mPriority
  @lbigint mStackSize
  @structurePropertyListAST mVarList
  @functionDeclarationListAST mTaskProcList
  @taskSetupListAST mTaskSetupListAST
  @syncInstructionBranchListAST mGuardedCommandList
  @location mEndOfTaskDeclaration
}

#·······················································································································

class @decoratedTaskListDeclaration : @abstractDecoratedDeclaration {
  @decoratedTaskList mTaskList
}

#·······················································································································

override method @decoratedTaskListDeclaration semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  @stringset prioritySet = {}
  for task in mTaskList do
    [task semanticAnalysis
      !context:inContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    ]
    let priorityString = [task.mPriority.bigint string]
    if [prioritySet hasKey !priorityString] then
      error task.mPriority : "duplicate priority"
    end
    prioritySet += !priorityString
  end
}

#·······················································································································

method @decoratedTaskList-element semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#------------------------------------------- Check stack size is >= 64, and a multiple of 8
  let stackSize = mStackSize.bigint
  if (stackSize < 64G) || ((stackSize mod 8G) != 0G) then
    error mStackSize : "stack size should be a multiple of 8, and >= 64"
  end
#------------------------------------------- Analyze task setup routines
  let taskType = [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mTaskName} type]
  @taskSetupSortedListAST taskInitSortedListAST = {}
  for (priority instructionList endOfDeclaration) in mTaskSetupListAST do
    taskInitSortedListAST += !priority !instructionList !endOfDeclaration !priority.bigint
  end
  @instructionListIR setupInstructionListIR = {}
  @allocaList setupAllocaList = {}
  for (taskInitPriority taskInitInstructionList endOfTaskInitDeclaration *) in taskInitSortedListAST do
    setupSemanticAnalysis (
      !context:inContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
      !selfType:taskType
      !priority:taskInitPriority
      !mode:.userMode
      !instructionList:taskInitInstructionList
      !endOfDeclaration:endOfTaskInitDeclaration
      ?let partialAllocaList
      ?let @instructionListIR partialInstructionGenerationList
    )
    setupInstructionListIR += partialInstructionGenerationList
    setupAllocaList += partialAllocaList
  end
#------------------------------------------- Analyze task guarded command
#  Build a "task.loop" function that contains a sync instruction
  @instructionListAST taskListInstructionList = {}
  if [mGuardedCommandList length] > 0 then
    let syncInstruction = @syncInstructionAST.new {!mTaskName.location !mGuardedCommandList !mTaskName.location}
    taskListInstructionList += !syncInstruction
  end
  routineSemanticAnalysis (
    !receiverType:taskType
    !.function{!executionMode:.userMode}
    !.userMode
    !.new {!llvmNameForTaskLoopFunction () !mTaskName.location}
    !{} # No argument
    !returnTypeName:["" nowhere]
    !taskListInstructionList
    !mTaskName.location
    !routineAttributes:.mutating | .directPropertyAccess | .panicAllowed
    !warnIfUnused:true
    !globalFunction:false
    !context:inContext
    !?temporary:ioTemporaries
    !?intermediateCode:ioIntermediateCodeStruct
  )
#------------------------------------------- Task Name string constant index
  [!?ioIntermediateCodeStruct.mStaticStringMap findOrAddStaticString !mTaskName.string ?let taskNameStringIndex]
#------------------------------------------- Generate task
  [!?ioIntermediateCodeStruct.mTaskMapIR insertKey
    !mTaskName
    !taskType
    !mPriority.bigint
    !mStackSize.bigint
    !setupAllocaList
    !setupInstructionListIR
#    !taskGuardListIR
    !taskNameStringIndex
  ]
}

#·······················································································································

private proc setupSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
  ?selfType:let @PLMType inSelfType
  ?priority:let @lbigint inPriority
  ?mode:let @mode inCurrentMode
  ?instructionList:let @instructionListAST inInstructionListAST
  ?endOfDeclaration:let @location inEndOfInitDeclaration
  !@allocaList outAllocaList
  !@instructionListIR outInstructionGenerationList
{
#--- Check init routine is unique
  let routineNameForInvocationGraph = setupNameForInvocationGraph (!inSelfType.plmOriginalTypeName !inPriority)
#---
  if not [ioTemporaries.mSubprogramInvocationGraph isNodeDefined !routineNameForInvocationGraph.string] then
    [!?ioTemporaries.mSubprogramInvocationGraph addNode !routineNameForInvocationGraph !routineNameForInvocationGraph]
  end
#--- Variable map
  var universalMap = inContext.mValuedObjectMap
  [!?universalMap openOverrideForSelectBlock]
  [!?universalMap openBranch]
#--- Analyze instruction list
  outInstructionGenerationList = {}
  outAllocaList = {}
  [inInstructionListAST analyzeRoutineInstructionList
    !self:inSelfType
    !routineAttributes:.mutating | .directPropertyAccess | .controlRegisterReadable
    !routineNameForInvocationGraph:routineNameForInvocationGraph
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioIntermediateCodeStruct.mStaticStringMap
    !?variableMap:universalMap
    !?alloca:outAllocaList
    !?generatedCode:outInstructionGenerationList
  ]
#--- End of variableMap
  [universalMap checkLocalVariableFinalState !?outInstructionGenerationList]
  [!?universalMap closeBranch !inEndOfInitDeclaration]
  [!?universalMap closeOverride !inEndOfInitDeclaration]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @taskMapIR {
  @PLMType mTaskType
  @bigint mPriority
  @bigint mStackSize
  @allocaList mAllocaList
  @instructionListIR mInitInstructionListIR
  @uint mTaskNameStringIndex
  insert insertKey error message "** internal error **"
  search searchKey error message "** internal error **"
  remove removeKey error message "** internal error **"
}

#·······················································································································

sortedlist @taskSortedListIR {
  @string mTaskName
  @bigint mPriority
  @bigint mStackSize
  @allocaList mAllocaList
  @instructionListIR mSetupInstructionListIR
  @uint mTaskNameStringIndex
}{
  mPriority <
}

#·······················································································································

method @taskMapIR generateCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
  ?!@primitiveAndServiceIRlist ioServiceList
{
#--- Declare task self terminate service
  ioLLVMcode += llvmTitleComment (!"Task self terminate service")
  let selfTerminateImplementationName = llvmNameForServiceImplementation (!llvmNameForTaskAutoBlockService ())
  let selfTerminateCallName = llvmNameForServiceCall (!llvmNameForTaskAutoBlockService ())
  ioServiceList += !selfTerminateCallName !selfTerminateImplementationName !false
  ioLLVMcode += "declare void @" + selfTerminateCallName + " () nounwind noreturn\n\n"
#--- Declare task variables
  ioLLVMcode += llvmTitleComment (!"Task variables")
  for (taskName taskTypeName initValueList) in inGenerationContext.mGlobalTaskVariableList do
    ioLLVMcode += llvmNameForGlobalVariable (!taskName)
    ioLLVMcode += " = internal global %"
    ioLLVMcode += [llvmTypeStringFromPLMname (!taskTypeName) assemblerRepresentation] + " "
    let initialString = [initValueList llvmName]
    if initialString == "" then
      ioLLVMcode += "zeroinitializer"
    else
      ioLLVMcode += initialString
    end
    ioLLVMcode += "\n"
  end
  ioLLVMcode += "\n"
#--- Build ordered task list
  @taskSortedListIR orderedTaskList = {}
  for task in self do
    orderedTaskList +=
      !task.lkey.string
      !task.mPriority
      !task.mStackSize
      !task.mAllocaList
      !task.mInitInstructionListIR
      !task.mTaskNameStringIndex
  end
#--- Declare task stacks and main routine
  ioLLVMcode += llvmTitleComment (!"Create task extern routine")
  ioLLVMcode += "declare void @kernel_create_task (i32 %inTaskIndex, i8* %inTaskName, i32* %inStackBufferAddress, "
  ioLLVMcode += "i32 %inStackBufferSize, void ()* %inTaskRoutine) nounwind\n\n"
  for task in orderedTaskList do
    ioLLVMcode += llvmTitleComment (!"Task " + task.mTaskName)
    let assemblerTaskName = [llvmTypeStringFromPLMname (!task.mTaskName) assemblerRepresentation]
    ioLLVMcode += stackNameForTask (!task.mTaskName) + " = global [" + (task.mStackSize / 4) + " x i32] zeroinitializer\n"
    ioLLVMcode += "\n"
    let effectiveParameter = "(%" + assemblerTaskName + "* " + llvmNameForGlobalVariable (!task.mTaskName) + ")"
    let formalArgument = "(%" + assemblerTaskName + "* " + llvmNameForSelf () + ")"
    ioLLVMcode += llvmSeparatorLine () + "\n"
  #--- Init
    ioLLVMcode += "define internal void " + initNameForTaskType (!task.mTaskName) + " " + formalArgument + llvmAttributeFunction () + "{\n"
    [task.mAllocaList generateAllocaList !?ioLLVMcode]
    [task.mSetupInstructionListIR instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
    ioLLVMcode += "  ret void\n"
    ioLLVMcode += "}\n\n"
    ioLLVMcode += llvmSeparatorLine ()
    ioLLVMcode += "\n"
    ioLLVMcode += "define internal void " + mainRoutineNameForTask (!task.mTaskName) + " ()" + llvmAttributeFunction () + "noreturn {\n"
    ioLLVMcode += "  call void " + initNameForTaskType (!task.mTaskName) + " " + effectiveParameter + "\n"
    ioLLVMcode += "  call void @" + llvmNameForFunction (!llvmTypeStringFromPLMname (!task.mTaskName) + "." + llvmNameForTaskLoopFunction () + "()") + " " + effectiveParameter + "\n"
    ioLLVMcode += "  call void @" + selfTerminateCallName + " ()\n"
    ioLLVMcode += "  unreachable\n"
    ioLLVMcode += "}\n\n"
  end
#--- Start tasks
  ioLLVMcode += llvmTitleComment (!"Start tasks")
  ioLLVMcode += "define internal void @start.tasks ()" + llvmAttributeFunction () + "{\n"
  for task in orderedTaskList do (idx)
    ioLLVMcode += "  " + stackAddressForTask (!task.mTaskName)
    ioLLVMcode += " = getelementptr inbounds [" + (task.mStackSize / 4) + " x i32], "
    ioLLVMcode += "[" + (task.mStackSize / 4) + " x i32]* " + stackNameForTask (!task.mTaskName)
    ioLLVMcode += ", i32 0, i32 0\n"
    ioLLVMcode += "  %task.name." + idx + " = load i8*, i8** " + literalStringName (!task.mTaskNameStringIndex) + "\n"
    ioLLVMcode += "  call void @kernel_create_task ("
    ioLLVMcode += "i32 " + idx
    ioLLVMcode += ", i8* %task.name." + idx
    ioLLVMcode += ", i32* " + stackAddressForTask (!task.mTaskName)
    ioLLVMcode += ", i32 " + task.mStackSize
    ioLLVMcode += ", void ()* " + mainRoutineNameForTask (!task.mTaskName) + ")\n"
  end
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
