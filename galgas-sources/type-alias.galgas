#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @typeAliasDeclarationAST : @abstractDeclarationAST {
  @lstring mAliasTypeName
  @lstring mOriginalTypeName
}

#·······················································································································

override getter @typeAliasDeclarationAST locationForErrorSignaling -> @location {
  result = mAliasTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $typealias$
    $\$type$ ?let newTypeName
    $=$
    <type_definition> !?ioAST ?let typeName
    ioAST.mDeclarationListAST += !@typeAliasDeclarationAST.new {!newTypeName !typeName}
  }

  #·····················································································································

  rule <type_definition> ?!@ast ioAST !@lstring outTypeName {
    select
      $[$
      <type_definition_enclosed_in_square_breackets> !?ioAST ?outTypeName
      $]$
    or
      $identifier$ ?outTypeName # Simple redéfinition de type
    end
  }
  
  #·····················································································································

#  rule <type_definition> ?!@ast ioAST !@lstring outTypeName { # §
#    $func$
#    <mode> ?let mode
#    @lstringlist attributeList = {}
#    repeat
#    while
#      $@attribute$ ?let attribute
#      attributeList += !attribute
#    end
#    <procedure_formal_arguments> !?ioAST ?let formalArgs
#    @lstring returnType
#    select
#      returnType = ["" here]
#    or
#      $->$
#      <type_definition>!?ioAST ?returnType
#    end
#    outTypeName = ["" here]
#  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeAliasDeclarationAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addNode !mAliasTypeName !self]
  [!?ioGraph addEdge !mAliasTypeName !mOriginalTypeName]
}

#·······················································································································

override getter @typeAliasDeclarationAST keyRepresentationForErrorSignaling -> @string {
  result = "typealias " + mAliasTypeName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeAliasDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR unused ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
#---------- Enter in type map
  [ioContext.mTypeMap searchKey !lkey:mOriginalTypeName ?type:var type]
#---------- Enter in type map
  [!?ioContext.mTypeMap insertType
    !lkey:mAliasTypeName
    !type:type
  ]
  [!?ioContext.mValuedObjectMap insertType
    !typeName: mAliasTypeName
    !type: type
    !typeMap: ioContext.mTypeMap
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
