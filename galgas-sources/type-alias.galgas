#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @typeAliasDeclaration : @abstractDeclaration {
  @lstring mNewTypeName
  @lstring mAliasedTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @typeAliasDeclaration location -> @location outLocation {
  outLocation = mNewTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $typealias$
    $typeName$ ?let newTypeName
    $:$
    $typeName$ ?let aliasedTypeName
    ioAST.mDeclarationList += !@typeAliasDeclaration.new {
      !newTypeName
      !aliasedTypeName
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeAliasDeclaration addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  !@abstractDeclaration outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeAliasDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addNode !mNewTypeName !self]
  [!?ioGraph addEdge !mNewTypeName !mAliasedTypeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @typeAliasDeclaration keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "typealias $" + mNewTypeName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeAliasDeclaration enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
#--- Enter in type map
  [ioContext.mTypeMap searchKey
    !lkey:mAliasedTypeName
    ?llvmTypeName:let llvmTypeMane
    ?kind:let kind
    ?typedConstantMap:let typedConstantMap
    ?procedureMap:let procedureMap
    ?functionMap:let functionMap
    ?copiable:let copiable
    ?equatable:let equatable
    ?comparable:let comparable
    ?enumerationType:let enumerationType
  ]
#--- Enter in type map
  [!?ioContext.mTypeMap insertKey
    !lkey:mNewTypeName
    !llvmTypeName:llvmTypeMane
    !kind:kind
    !typedConstantMap:typedConstantMap
    !procedureMap:procedureMap
    !functionMap:functionMap
    !copiable:copiable
    !equatable:equatable
    !comparable:comparable
    !enumerationType:enumerationType
  ]
#--- Enter infix operators
  let newNewInfixKey = combineTypeNamesForInfixOperator (!mNewTypeName.string !mNewTypeName.string)
  let aliasAliasInfixKey = combineTypeNamesForInfixOperator (!mAliasedTypeName.string !mAliasedTypeName.string)
  let newLiteralIntegerInfixKey = combineTypeNamesForInfixOperator (!mNewTypeName.string !literalIntegerTypeName ())
  let aliasLiteralIntegerInfixKey = combineTypeNamesForInfixOperator (!mAliasedTypeName.string !literalIntegerTypeName ())
  let literalIntegerNewInfixKey = combineTypeNamesForInfixOperator (!literalIntegerTypeName ()!mNewTypeName.string)
  let literalIntegerAliasInfixKey = combineTypeNamesForInfixOperator (!literalIntegerTypeName ()!mAliasedTypeName.string)
  enterAliasInfixOperator (
    !?ioContext.mEqualOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mNonEqualOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mStrictInfOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mInfEqualOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mStrictSupOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mSupEqualOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mAndOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mOrOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mXorOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mBooleanXorOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mAddOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mAddNoOvfOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mSubOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mSubNoOvfOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mMulOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mMulNoOvfOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mDivOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mDivNoOvfOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mModOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mModNoOvfOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mLeftShiftOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasInfixOperator (
    !?ioContext.mRightShiftOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
  )
  enterAliasPrefixOperator (!?ioContext.mUnaryMinusOperatorMap !mNewTypeName !mAliasedTypeName)
  enterAliasPrefixOperator (!?ioContext.mNotOperatorMap !mNewTypeName !mAliasedTypeName)
  enterAliasPrefixOperator (!?ioContext.mUnsignedComplementOperatorMap !mNewTypeName !mAliasedTypeName)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc enterAliasPrefixOperator
  ?!@prefixOperatorMap ioInfixOperatorMap
  ?let @lstring inNewTypeName
  ?let @lstring inAliasedTypeName
{
  if [ioInfixOperatorMap hasKey !inAliasedTypeName.string] then
    [ioInfixOperatorMap searchKey
      !inAliasedTypeName
      ?@unifiedTypeMap-proxy resultType
    ]
    [!?ioInfixOperatorMap insertKey
      !inNewTypeName
      !resultType
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc enterAliasInfixOperator
  ?!@infixOperatorMap ioInfixOperatorMap
  ?let @lstring inNewNewInfixKey
  ?let @lstring inAliasedAliasedInfixKey
  ?let @lstring inNewLiteralIntegerInfixKey
  ?let @lstring inAliasedLiteralIntegerInfixKey
  ?let @lstring inLiteralIntegerNewInfixKey
  ?let @lstring inLiteralIntegerAliasInfixKey
{
  if [ioInfixOperatorMap hasKey !inAliasedAliasedInfixKey.string] then
    [ioInfixOperatorMap searchKey
      !inAliasedAliasedInfixKey
      ?let @unifiedTypeMap-proxy resultType
      ?let @infixOperatorDescription operation
    ]
    [!?ioInfixOperatorMap insertKey
      !inNewNewInfixKey
      !resultType
      !operation
    ]
  end
  if [ioInfixOperatorMap hasKey !inAliasedLiteralIntegerInfixKey.string] then
    [ioInfixOperatorMap searchKey
      !inAliasedLiteralIntegerInfixKey
      ?let @unifiedTypeMap-proxy resultType
      ?let @infixOperatorDescription operation
    ]
    [!?ioInfixOperatorMap insertKey
      !inNewLiteralIntegerInfixKey
      !resultType
      !operation
    ]
  end
  if [ioInfixOperatorMap hasKey !inLiteralIntegerAliasInfixKey.string] then
    [ioInfixOperatorMap searchKey
      !inLiteralIntegerAliasInfixKey
      ?let @unifiedTypeMap-proxy resultType
      ?let @infixOperatorDescription operation
    ]
    [!?ioInfixOperatorMap insertKey
      !inLiteralIntegerNewInfixKey
      !resultType
      !operation
    ]
  end
}
  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  INIT ANALYSIS                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeAliasDeclaration initAnalysis
  ?!context:@semanticContext unused ioContext
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeAliasDeclaration semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
