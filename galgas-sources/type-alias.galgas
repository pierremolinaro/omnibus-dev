#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @typeAliasDeclaration : @abstractDeclarationAST {
  @lstring mNewTypeName
  @lstring mAliasedTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @typeAliasDeclaration location -> @location outLocation {
  outLocation = mNewTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

#  rule <declaration_type> ?!@ast unused ioAST ?let @lstring inNewTypeName !@abstractDeclarationAST outDeclaration {
#    $\$type$ ?let aliasedTypeName
#    outDeclaration = @typeAliasDeclaration.new {
#      !inNewTypeName
#      !aliasedTypeName
#    }
#  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeAliasDeclaration addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  ?!@extendStaticArrayDeclarationAST unused ioExtendStaticArrayDeclarationAST
  !@abstractDeclarationAST outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeAliasDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let newTypeName = llvmTypeNameFromPLMname (!mNewTypeName)
  let aliasedTypeName = llvmTypeNameFromPLMname (!mAliasedTypeName)
  [!?ioGraph addNode !newTypeName !self]
  [!?ioGraph addEdge !newTypeName !aliasedTypeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @typeAliasDeclaration keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "typealias $" + mNewTypeName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeAliasDeclaration enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@subprogramInvocationGraph unused ioSubprogramInvocationGraph
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
#--- Enter in type map
  [ioContext.mTypeMap searchKey !lkey:mAliasedTypeName ?type:var type ?1*]
#--- Set new type name
  type.plmTypeName = mNewTypeName.string
#--- Enter in type map
  [!?ioContext.mTypeMap insertType !lkey:mNewTypeName !type:type !index:[ioContext.mTypeMap count]
]
#--- Enter infix operators
  let newNewInfixKey = combineTypeNamesForInfixOperator (!mNewTypeName.string !mNewTypeName.string)
  let aliasAliasInfixKey = combineTypeNamesForInfixOperator (!mAliasedTypeName.string !mAliasedTypeName.string)
  let newLiteralIntegerInfixKey = combineTypeNamesForInfixOperator (!mNewTypeName.string !staticIntegerTypeName ())
  let aliasLiteralIntegerInfixKey = combineTypeNamesForInfixOperator (!mAliasedTypeName.string !staticIntegerTypeName ())
  let literalIntegerNewInfixKey = combineTypeNamesForInfixOperator (!staticIntegerTypeName ()!mNewTypeName.string)
  let literalIntegerAliasInfixKey = combineTypeNamesForInfixOperator (!staticIntegerTypeName ()!mAliasedTypeName.string)
  let newType = [@unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mNewTypeName} type]
  let oldType = [@unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mAliasedTypeName} type]
  enterAliasInfixOperator (
    !?ioContext.mEqualOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mNonEqualOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mStrictInfOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mInfEqualOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mStrictSupOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mSupEqualOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mAndOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mOrOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mXorOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mBooleanXorOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mAddOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mAddNoOvfOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mSubOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
     !newType
    !oldType
 )
  enterAliasInfixOperator (
    !?ioContext.mSubNoOvfOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mMulOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mMulNoOvfOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mDivOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mDivNoOvfOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mModOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mModNoOvfOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mLeftShiftOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasInfixOperator (
    !?ioContext.mRightShiftOperatorMap
    !newNewInfixKey
    !aliasAliasInfixKey
    !newLiteralIntegerInfixKey
    !aliasLiteralIntegerInfixKey
    !literalIntegerNewInfixKey
    !literalIntegerAliasInfixKey
    !newType
    !oldType
  )
  enterAliasPrefixOperator (!?ioContext.mUnaryMinusOperatorMap !mNewTypeName !mAliasedTypeName)
  enterAliasPrefixOperator (!?ioContext.mNotOperatorMap !mNewTypeName !mAliasedTypeName)
  enterAliasPrefixOperator (!?ioContext.mUnsignedComplementOperatorMap !mNewTypeName !mAliasedTypeName)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc enterAliasPrefixOperator
  ?!@prefixOperatorMap ioInfixOperatorMap
  ?let @lstring inNewTypeName
  ?let @lstring inAliasedTypeName
{
  if [ioInfixOperatorMap hasKey !inAliasedTypeName.string] then
    [ioInfixOperatorMap searchKey
      !inAliasedTypeName
#      ?@unifiedTypeMap-proxy resultType
    ]
    [!?ioInfixOperatorMap insertKey
      !inNewTypeName
#      !resultType
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc enterAliasInfixOperator
  ?!@infixOperatorMap ioInfixOperatorMap
  ?let @lstring inNewNewInfixKey
  ?let @lstring inAliasedAliasedInfixKey
  ?let @lstring inNewLiteralIntegerInfixKey
  ?let @lstring inAliasedLiteralIntegerInfixKey
  ?let @lstring inLiteralIntegerNewInfixKey
  ?let @lstring inLiteralIntegerAliasInfixKey
  ?let @PLMType inNewType
  ?let @PLMType inOldType
{
  if [ioInfixOperatorMap hasKey !inAliasedAliasedInfixKey.string] then
    [ioInfixOperatorMap searchKey
      !inAliasedAliasedInfixKey
      ?@PLMType resultType
      ?let @infixOperatorDescription operation
    ]
    if resultType == inOldType then
      resultType = inNewType
    end
    [!?ioInfixOperatorMap insertKey
      !inNewNewInfixKey
      !resultType
      !operation
    ]
  end
  if [ioInfixOperatorMap hasKey !inAliasedLiteralIntegerInfixKey.string] then
    [ioInfixOperatorMap searchKey
      !inAliasedLiteralIntegerInfixKey
      ?@PLMType resultType
      ?let @infixOperatorDescription operation
    ]
    if resultType == inOldType then
      resultType = inNewType
    end
    [!?ioInfixOperatorMap insertKey
      !inNewLiteralIntegerInfixKey
      !resultType
      !operation
    ]
  end
  if [ioInfixOperatorMap hasKey !inLiteralIntegerAliasInfixKey.string] then
    [ioInfixOperatorMap searchKey
      !inLiteralIntegerAliasInfixKey
      ?@PLMType resultType
      ?let @infixOperatorDescription operation
    ]
    if resultType == inOldType then
      resultType = inNewType
    end
    [!?ioInfixOperatorMap insertKey
      !inLiteralIntegerNewInfixKey
      !resultType
      !operation
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#override method @typeAliasDeclaration semanticAnalysis
#  ?context:let @semanticContext unused inContext
#  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
#  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
#{
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#override method @typeAliasDeclaration generateLLVMcode ?!@string unused ioLLVMcode {
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
