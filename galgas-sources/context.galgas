#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                       
#    S E M A N T I C    C O N T E X T                                                                      
#                                                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract class @abstractDecoratedDeclaration {
}

#·······················································································································

list @declarationDecorationList {
  @abstractDecoratedDeclaration mDeclaration
}

#·······················································································································

map @infixOperatorMap {
  @PLMType mResultType
  @infixOperatorDescription mOperation
  insert insertKey error message "** internal error **"
  search searchKey error message "** internal error **"
}

#·······················································································································

map @prefixOperatorMap {
  insert insertKey error message "** internal error **"
  search searchKey error message "prefix operation is not defined for %K type"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @staticEntityMap
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @staticEntityMap {
  @staticStringMap mStaticStringMap
  @globalStructuredConstantList mGlobalStructuredConstantList
}

#·······················································································································

list @globalStructuredConstantList {
  @PLMType mType
  @operandIRList mOperandIRList
}

#·······················································································································

map @staticStringMap {
  @uint mIndex
  insert insertKey error message "-- internal error --"
  search searchKey error message "-- internal error --"
}

#·······················································································································

setter @staticEntityMap findOrAddStaticString ?@string inString !@uint outIndex {
  if [mStaticStringMap hasKey !inString]  then
    [mStaticStringMap searchKey ![inString nowhere] ?outIndex]
  else
    outIndex = [mStaticStringMap count]
    [!?mStaticStringMap insertKey ![inString nowhere] !outIndex]
  end
}

#·······················································································································

map @globalConstantMap {
  @objectIR mValue
  insert insertKey error message "the '%K' constant is already declared in %L"
  search searchKey error message "there is no '%K' constant"
}

#·······················································································································

list @operandIRList {
  @objectIR mOperand
}

#·······················································································································

map @availableInterruptMap {
  @interruptionPanicCode mInterruptionPanicCode
  insert insertKey error message "interrupt '%K' is already defined"
  search searchKey error message "interrupt '%K' is not defined"
}

#·······················································································································

struct @semanticContext {
  @targetParameters mTargetParameters

  @PLMType mPanicCodeType
  @PLMType mPanicLineType
  @panicRoutinePriorityMap mPanicSetupRoutinePriorityMap 
  @panicRoutinePriorityMap mPanicLoopRoutinePriorityMap 

  @routineMapCTXT mRoutineMap
  
  @controlRegisterGroupMap mControlRegisterGroupMap
  @globalConstantMap mGlobalConstantMap
  @globalSyncInstanceMap mGlobalSyncInstanceMap
  @staticlistMap mStaticListMap

  @stringset mRequiredRoutineSet

#--- Types
  @unifiedTypeMap mTypeMap

#--- Interrupts
  @availableInterruptMap mAvailableInterruptMap

#--- Operators
  @infixOperatorMap mEqualOperatorMap           # ==
#  @infixOperatorMap mNonEqualOperatorMap        # !=
  @infixOperatorMap mStrictInfOperatorMap       # <
  @infixOperatorMap mInfEqualOperatorMap        # <=
#  @infixOperatorMap mStrictSupOperatorMap       # >
#  @infixOperatorMap mSupEqualOperatorMap        # >=
  @infixOperatorMap mAndOperatorMap             # &
  @infixOperatorMap mOrOperatorMap              # |
  @infixOperatorMap mXorOperatorMap             # ^
  @infixOperatorMap mBooleanXorOperatorMap      # xor
  @infixOperatorMap mAddOperatorMap             # +
  @infixOperatorMap mAddNoOvfOperatorMap        # &+
  @infixOperatorMap mSubOperatorMap             # -
  @infixOperatorMap mSubNoOvfOperatorMap        # &-
  @infixOperatorMap mMulOperatorMap             # *
  @infixOperatorMap mMulNoOvfOperatorMap        # &*
  @infixOperatorMap mDivOperatorMap             # /
  @infixOperatorMap mDivNoOvfOperatorMap        # &/
  @infixOperatorMap mModOperatorMap             # %
  @infixOperatorMap mModNoOvfOperatorMap        # &%
  @infixOperatorMap mLeftShiftOperatorMap       # <<
  @infixOperatorMap mRightShiftOperatorMap      # >>
  @prefixOperatorMap mUnaryMinusOperatorMap     # - and &-
  @prefixOperatorMap mNotOperatorMap            # not
  @prefixOperatorMap mUnsignedComplementOperatorMap # ~

#--- Tasks
  @taskMap mTaskMap
  @globalTaskVariableList mGlobalTaskVariableList

#--- Entity map
  @universalValuedObjectMap mValuedObjectMap
}

#·······················································································································

getter @semanticContext booleanType -> @PLMType {
  [mTypeMap searchKey !lkey:[boolTypeName () nowhere] ?type:result]
}

#·······················································································································

abstract method @abstractDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR ioUserLLVMTypeDefinitionListIR

#·······················································································································

proc buildSemanticContext
  ?sourceFile:let @lstring inSourceFile
  ?ast:let @ast inAST
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!staticlistValues:@staticListInitializationMap ioStaticListValueMap
  !context:@semanticContext outSemanticContext
  !@declarationDecorationList outDecoratedDeclarationList
  !@decoratedRegularRoutineList outDecoratedRoutineList
  !@routineListIR outRoutineListIR
  !@userLLVMTypeDefinitionListIR outUserLLVMTypeDefinitionListIR

{
  outSemanticContext = .default
  outDecoratedDeclarationList = {}
  outDecoratedRoutineList = {}
  outRoutineListIR = {}
  outUserLLVMTypeDefinitionListIR = {}
#--- Enter required routines
  for requiredProc in inAST.mRequiredFunctionListAST do
    let procedureMangledName = routineMangledNameFromAST (
      !""
      !requiredProc.mName
      !requiredProc.mFormalArgumentList
    )
    outSemanticContext.mRequiredRoutineSet += !procedureMangledName.string
  end 
#--- Enter standalone procedures, functions, sections, services, guards in context
  [inAST.mISRDeclarationListAST enterInContext
    !?outSemanticContext
    !?outDecoratedDeclarationList
    !?outDecoratedRoutineList
  ]
  @routineMapCTXT routineMapCTXT = {}
  [inAST.mStandAloneSystemRoutineListAST enterSystemRoutineInContext
    !receiverTypeName:["" nowhere] # Empty string if standalone
    !receiverLLVMBaseTypeName:""  # Empty string if standalone
    !?routineMap: routineMapCTXT
    !?context: outSemanticContext
    !?outDecoratedRoutineList
    !?outRoutineListIR
  ]
  outSemanticContext.mRoutineMap = routineMapCTXT
  [inAST.mExternFunctionListAST enterExternProcInContext
    !?context: outSemanticContext
  ]
  [inAST.mStandaloneFunctionDeclarationListAST enterStandaloneFunctionsInContext
    !?context:outSemanticContext
    !?outDecoratedRoutineList
  ]
#---
  var controlRegisterUserAccesMapAST = inAST.mControlRegisterUserAccesMapAST
  for (declaration) in inAST.mDeclarationListAST do
    [declaration enterInContext
      !procedureDeclarationList:inAST.mStandaloneFunctionDeclarationListAST
      !?context:outSemanticContext
      !?outDecoratedDeclarationList
      !?outDecoratedRoutineList
      !?outRoutineListIR
      !?staticlistValues:ioStaticListValueMap
      !?staticEntityMap:ioStaticEntityMap
      !?registerUserAccess:controlRegisterUserAccesMapAST
      !?userDefinedTypes: outUserLLVMTypeDefinitionListIR
    ]
  end
#--- Check all registers declared as @user are actually defined
  for (lkey) in controlRegisterUserAccesMapAST do
    error lkey : "this control register is not defined"
  end
#--- Build an HTML containing all global constants
  buildGlobalConstantMapHTMLFile (
    !outSemanticContext.mGlobalConstantMap
    !sourceFile:inSourceFile
  )
#--- Build an HTML containing all types
  buildTypeMapHTMLFile (
    !outSemanticContext.mTypeMap
    !outSemanticContext.mRoutineMap
    !sourceFile:inSourceFile
  )
#--- Enter control registers in context
  buildControlRegisterMapHTMLFile (
    !outSemanticContext.mControlRegisterGroupMap
    !sourceFile:inSourceFile
  )
#--- Enter tasks
  [inAST.mTaskListAST enterInContext
     !?context: outSemanticContext
     !?outDecoratedDeclarationList
     !?outDecoratedRoutineList
     !?outRoutineListIR
     !?staticEntityMap:ioStaticEntityMap
     !?userDefinedTypes: outUserLLVMTypeDefinitionListIR
   ]
}

#·······················································································································

func combineTypeNamesForInfixOperator ?let @string inLeftTypeName ?let @string inRightTypeName -> @lstring {
  result = ["{" + inLeftTypeName + ", " + inRightTypeName + "}" nowhere]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
