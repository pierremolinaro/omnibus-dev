#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                       
#    S E M A N T I C    C O N T E X T                                                                      
#                                                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @semanticContext {
  @targetParameters mTargetParameters

  @omnibusType mPanicCodeType
  @omnibusType mPanicLineType
  @panicRoutinePriorityMap mPanicSetupRoutinePriorityMap 
  @panicRoutinePriorityMap mPanicLoopRoutinePriorityMap 

  @routineMapForContext mRoutineMap
  @guardMapForContext mGuardMap
  
  @controlRegisterGroupMap mControlRegisterGroupMap
  @globalConstantMap mGlobalConstantMap
  @globalSyncInstanceMap mGlobalSyncInstanceMap
  @staticlistMap mStaticListMap

  @stringset mRequiredRoutineSet

#--- Types
  @unifiedTypeMap mTypeMap
  @typeConstantMap mTypeConstantMap
  @typeConstructorMap mTypeConstructorMap
  @typePropertySetterMap mTypePropertySetterMap
  @typePropertyGetterMap mTypePropertyGetterMap

#--- Interrupts
  @availableInterruptMap mAvailableInterruptMap

#--- Operator maps  
  @infixOperatorMap mInfixOperatorMap
  @prefixOperatorMap mPrefixOperatorMap
  @assignmentOperatorMap mAssignmentOperatorMap
  
  @implicitConversionToBooleanMap mImplicitConversionToBooleanMap

#--- Tasks
  @taskMap mTaskMap
  @globalTaskVariableList mGlobalTaskVariableList

#--- Entity map
  @universalValuedObjectMap mValuedObjectMap
}

#·······················································································································

abstract class @abstractDecoratedDeclaration {
}

#·······················································································································

list @declarationDecorationList {
  @abstractDecoratedDeclaration mDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  TYPE CONSTANT MAP                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @typeConstantMap {
  @constantMap mConstantMap
  insert insertKey error message "the $%K type is already declared"
  search searchKey error message "there is no $%K type"
}

#·······················································································································

map @constantMap {
  @bigint mIndex
  @lstring mClassTypeName
  insert insertKey error message "the '%K' constant is already declared"
  search searchKey error message "there is no '%K' constant"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  TYPE CONSTRUCTOR MAP                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @typeConstructorMap {
  @constructorMap mConstructorMap
  insert insertKey error message "the $%K type is already declared"
  search searchKey error message "there is no $%K type"
}

#·······················································································································

enum @constructorValue {
  case null
  case simple (@bigint value)
  case structure (@sortedOperandIRList sortedOperandList)
  case arrayValue (@omnibusType elementType @uint size)
}

#·······················································································································

list @constructorSignature {
  @string mSelector
  @omnibusType mType
  @uint mFieldIndex
}

#·······················································································································

map @constructorMap { # Key is (!selector!selector)
  @constructorSignature mSignature
  @constructorValue mInitValue
  insert insertKey error message "-- internal error --"
  search searchKey error message "constructor is not defined"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# PROPERTY GETTER MAP
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @typePropertyGetterMap {
  @propertyGetterMap mGetterMap
  insert insertKey error message "the $%K type is already declared"
  search searchKey error message "there is no $%K type"
  insert or replace
}

#·······················································································································

setter @typePropertyGetterMap insertProperty ?omnibusTypeName: let @lstring inTypeName
                                             ?let @lstring inGetterName
                                             ?let @bool inIsPublic
                                             ?let @propertyGetterKind inAccess {
  if [self hasKey !inTypeName.string] then
    [self searchKey !inTypeName ?var getterMap]
    [!?getterMap insertKey !inGetterName !inIsPublic !inAccess]
    [!?self insertOrReplace !inTypeName !getterMap]
  else
    @propertyGetterMap getterMap = {}
    [!?getterMap insertKey !inGetterName !inIsPublic !inAccess]
    [!?self insertKey !inTypeName !getterMap]
  end
}

#·······················································································································

getter @typePropertyGetterMap propertyMap ?let @omnibusType inType-> @propertyGetterMap {
  let omnibusTypeName = inType.omnibusTypeDescriptionName
  if [self hasKey !omnibusTypeName] then
    [self searchKey ![omnibusTypeName nowhere] ?result]
  else
    result = {}
  end
}

#·······················································································································

setter @typePropertyGetterMap addComputedPropertyGetter
  ?omnibusTypeName: let @lstring inTypeName
  ?llvmBaseTypeName:let @string inLLVMBaseTypeName
  ?propertyName:let @lstring inPropertyName
  ?mode:let @mode inMode
  ?public:let @bool inPublic
  ?resultTypeProxy:let @unifiedTypeMap-proxy inResultTypeProxy
  !routineLLVMName:@lstring outRoutineLLVMName
{
  @propertyGetterMap getterMap
  if [self hasKey !inTypeName.string] then
    [self searchKey !inTypeName ?getterMap]
  else
    getterMap = {}
  end
  outRoutineLLVMName = .new {!getterLLVMName (!inLLVMBaseTypeName !inPropertyName) !inPropertyName}
  let modeDictionary = [inMode routineLLVMDictionaryForFunction !outRoutineLLVMName]
  [!?getterMap insertKey
    !inPropertyName
    !inPublic
    !.computedProperty {!typeProxy:inResultTypeProxy !modeDictionary:modeDictionary}
  ]
  [!?self insertOrReplace !inTypeName !getterMap]
}

#·······················································································································

enum @propertyGetterKind {
  case storedProperty (@omnibusType type @uint index)
  case computedProperty (@unifiedTypeMap-proxy typeProxy @routineLLVMNameDict modeDictionary)
  case constantProperty (@objectIR value)
}

#·······················································································································

map @propertyGetterMap {
  @bool mIsPublic
  @propertyGetterKind mAccess
  insert insertKey error message "the '%K' property is already declared"
  search searchKey error message "there is no '%K' property"
}

#·······················································································································

setter @propertyGetterMap addComputedPropertyGetterEx
  ?llvmBaseTypeName:let @string inLLVMBaseTypeName
  ?propertyName:let @lstring inPropertyName
  ?mode:let @mode inMode
  ?public:let @bool inPublic
  ?resultTypeProxy:let @unifiedTypeMap-proxy inResultTypeProxy
  !routineLLVMName:@lstring outRoutineLLVMName
{
  outRoutineLLVMName = .new {!getterLLVMName (!inLLVMBaseTypeName !inPropertyName) !inPropertyName}
  let modeDictionary = [inMode routineLLVMDictionaryForFunction !outRoutineLLVMName]
  [!?self insertKey
    !inPropertyName
    !inPublic
    !.computedProperty {!typeProxy:inResultTypeProxy !modeDictionary:modeDictionary}
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# PROPERTY SETTER MAP
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @typePropertySetterMap {
  @propertySetterMap mSetterMap
  insert insertKey error message "the $%K type is already declared"
  search searchKey error message "there is no $%K type"
  insert or replace
}

#·······················································································································

setter @typePropertySetterMap insertProperty ?let @lstring inTypeName
                                             ?let @lstring inSetterName
                                             ?let @bool inIsPublic
                                             ?let @propertySetterKind inAccess {
  if [self hasKey !inTypeName.string] then
    [self searchKey !inTypeName ?var setterMap]
    [!?setterMap insertKey !inSetterName !inIsPublic !inAccess]
    [!?self insertOrReplace !inTypeName !setterMap]
  else
    @propertySetterMap setterMap = {}
    [!?setterMap insertKey !inSetterName !inIsPublic !inAccess]
    [!?self insertKey !inTypeName !setterMap]
  end
}

#·······················································································································

map @propertySetterMap {
  @bool mIsPublic
  @propertySetterKind mAccess
  insert insertKey error message "the '%K' property is already declared"
  search searchKey error message "there is no '%K' property"
}

#·······················································································································

enum @propertySetterKind {
  case storedProperty (@omnibusType type @uint index)
  case computedProperty (@unifiedTypeMap-proxy typeProxy
                         @routineLLVMNameDict getterModeDictionary
                         @routineLLVMNameDict setterModeDictionary)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @staticEntityMap
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @staticEntityMap {
  @staticStringMap mStaticStringMap
  @globalStructuredConstantList mGlobalStructuredConstantList
}

#·······················································································································

list @globalStructuredConstantList {
  @omnibusType mType
  @operandIRList mOperandIRList
}

#·······················································································································

map @staticStringMap {
  @uint mIndex
  insert insertKey error message "-- internal error --"
  search searchKey error message "-- internal error --"
}

#·······················································································································

setter @staticEntityMap findOrAddStaticString ?@string inString !@uint outIndex {
  if [mStaticStringMap hasKey !inString]  then
    [mStaticStringMap searchKey ![inString nowhere] ?outIndex]
  else
    outIndex = [mStaticStringMap count]
    [!?mStaticStringMap insertKey ![inString nowhere] !outIndex]
  end
}

#·······················································································································

map @globalConstantMap {
  @objectIR mValue
  insert insertKey error message "the '%K' constant is already declared in %L"
  search searchKey error message "there is no '%K' constant"
}

#·······················································································································

list @operandIRList {
  @objectIR mOperand
}

#·······················································································································

map @availableInterruptMap {
  @interruptionPanicCode mInterruptionPanicCode
  insert insertKey error message "interrupt '%K' is already defined"
  search searchKey error message "interrupt '%K' is not defined"
}

#·······················································································································

getter @semanticContext booleanType ?let @location unused inErrorLocation -> @omnibusType {
  [mTypeMap searchKey !lkey:[boolTypeName () nowhere] ?type:result]
}

#·······················································································································

abstract method @abstractDeclarationAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR ioUserLLVMTypeDefinitionListIR

#·······················································································································

proc buildSemanticContext
  ?sourceFile:let @lstring inSourceFile
  ?ast:let @ast inAST
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!staticlistValues:@staticListInitializationMap ioStaticListValueMap
  !context:@semanticContext outSemanticContext
  !@declarationDecorationList outDecoratedDeclarationList
  !@decoratedRegularRoutineList outDecoratedRoutineList
  !@routineListIR outRoutineListIR
  !@userLLVMTypeDefinitionListIR outUserLLVMTypeDefinitionListIR
{
  outSemanticContext = .default
  outDecoratedDeclarationList = {}
  outDecoratedRoutineList = {}
  outRoutineListIR = {}
  outUserLLVMTypeDefinitionListIR = {}
#--- Enter required routines
  for requiredProc in inAST.mRequiredFunctionListAST do
    let procedureMangledName = routineMangledNameFromAST (
      !""
      !requiredProc.mName
      !requiredProc.mFormalArgumentList
    )
    outSemanticContext.mRequiredRoutineSet += !procedureMangledName.string
  end 
  [inAST.mExternFunctionListAST enterExternProcInContext
    !?context: outSemanticContext
  ]
#---
  var controlRegisterUserAccesMapAST = inAST.mControlRegisterUserAccesMapAST
  for (declaration) in inAST.mDeclarationListAST do
    [declaration enterInContext
      !?context:outSemanticContext
      !?outDecoratedDeclarationList
      !?outDecoratedRoutineList
      !?outRoutineListIR
      !?staticlistValues:ioStaticListValueMap
      !?staticEntityMap:ioStaticEntityMap
      !?registerUserAccess:controlRegisterUserAccesMapAST
      !?userDefinedTypes: outUserLLVMTypeDefinitionListIR
    ]
  end
#--- Check all registers declared as @user are actually defined
  for (lkey) in controlRegisterUserAccesMapAST do
    error lkey : "this control register is not defined"
  end
#--- Build an HTML containing all global constants
  buildGlobalConstantMapHTMLFile (
    !outSemanticContext.mGlobalConstantMap
    !sourceFile:inSourceFile
  )
#--- Build an HTML containing all types
  buildTypeMapHTMLFile (
    !outSemanticContext.mTypeMap
    !outSemanticContext.mRoutineMap
    !outSemanticContext.mInfixOperatorMap
    !outSemanticContext.mPrefixOperatorMap
    !outSemanticContext.mAssignmentOperatorMap
    !sourceFile:inSourceFile
  )
#--- Enter control registers in context
  buildControlRegisterMapHTMLFile (
    !outSemanticContext.mControlRegisterGroupMap
    !sourceFile:inSourceFile
  )
#--- Enter tasks
  [inAST.mTaskListAST enterInContext
     !?context: outSemanticContext
     !?outDecoratedDeclarationList
     !?outDecoratedRoutineList
     !?outRoutineListIR
     !?staticEntityMap:ioStaticEntityMap
     !?userDefinedTypes: outUserLLVMTypeDefinitionListIR
   ]
}

#·······················································································································

#func combineTypeNamesForInfixOperator ?let @string inLeftTypeName ?let @string inRightTypeName -> @lstring {
#  result = [inLeftTypeName + "," + inRightTypeName nowhere]
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
