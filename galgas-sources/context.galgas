#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                       
#    B U I L D    S E M A N T I C    C O N T E X T                                                                      
#                                                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @typeKind {
  case boolean
  case boolset
  case literalString
  case enumeration (@enumConstantMap constantMap)
  case structure (@propertyMap propertyMap @propertyList propertyList)
  case integer (@bigint min @bigint max @bool unsigned @uint bitCount)
  case staticInteger
  case opaque (@bigint bitCount)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @infixOperatorMap {
  @unifiedTypeMap-proxy mResultType
  @infixOperatorDescription mOperation
  insert insertKey error message "** internal error **"
  search searchKey error message "** internal error **"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @prefixOperatorMap {
  insert insertKey error message "** internal error **"
  search searchKey error message "prefix operation is not defined for $%K type"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @staticStringMap
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @staticStringMap {
  @uint mIndex
  insert insertKey error message "-- internal error --"
  search searchKey error message "-- internal error --"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

setter @staticStringMap findOrAddStaticString ?@string inString !@uint outIndex {
  if [self hasKey !inString]  then
    [self searchKey ![inString nowhere] ?outIndex]
  else
    outIndex = [self count]
    [!?self insertKey ![inString nowhere] !outIndex]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @globalConstantMap {
  @operandIR mValue
  insert insertKey error message "the '%K' constant is already declared in %L"
  search searchKey error message "there is no '%K' constant"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @allowedGuardMap {
  insert insertKey error message "the '%K' guard is already declared in %L"
  search searchKey error message "there is no '%K' guard"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @globalVariableMap %selectors {
  @unifiedTypeMap-proxy type
  @stringset executionModeSet
  @allowedRoutineMap allowedRoutineMap
  @allowedGuardMap allowedGuardMap
  @valueIR initialValue
  @bool isConstant
  insert insertKey error message "the '%K' global variable is already declared in %L"
  search searchKey error message "there is no '%K' global variable"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @modeMap {
  insert insertKey error message "the '%%%K' mode is already declared"
  search searchKey error message "there is no '%%%K' mode"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func checkMode
  ?requiredModes:let @stringset inRequiredModes
  ?possibleModes:let @stringset inPossibleModes
  ?kind:@routineKind inRoutineKind
  ?error:let @location inErrorLocation
  -> @routineKindIR outResult
{
  if (inPossibleModes & inRequiredModes) != inRequiredModes  then
    let missingModes = inRequiredModes - inPossibleModes
    var s = "cannot be accessed in mode"
    s += if [missingModes count] > 1 then "s" else "" end
    s += ": "
    for (m) in missingModes
    do  s += "`" + m
    between s += ", "
    end
    error inErrorLocation : s
  end
  var requiredModeListString = ""
  for (m) in inRequiredModes do
    requiredModeListString += " `" + m
  end
  let runInProcessorUserMode = [inRequiredModes hasKey !userModeName ()]
  let runInProcessorPrivilegedMode = [inRequiredModes hasKey !isrModeName ()] || [inRequiredModes hasKey !kernelModeName ()]
  switch inRoutineKind
  case function :
    outResult = .function
  case section :
    if runInProcessorUserMode && runInProcessorPrivilegedMode then
      error inErrorLocation : "a section cannot be called in" + requiredModeListString + " mode(s)" : outResult
    elsif runInProcessorUserMode then
      outResult = .sectionInProcessorUserMode
    elsif runInProcessorPrivilegedMode then
      outResult = .sectionInProcessorPrivilegedMode
    else
      error inErrorLocation : "a section cannot be called in" + requiredModeListString + " mode(s)" : outResult
    end
  case service :
    if runInProcessorUserMode && runInProcessorPrivilegedMode then
      error inErrorLocation : "a service cannot be called in" + requiredModeListString + " mode(s)" : outResult
    elsif runInProcessorUserMode then
      outResult = .serviceInProcessorUserMode
    elsif runInProcessorPrivilegedMode then
      outResult = .serviceInProcessorPrivilegedMode
    else
      error inErrorLocation : "a service cannot be called in" + requiredModeListString + " mode(s)" : outResult
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sharedmap @unifiedTypeMap %selectors {
  @string llvmTypeName # For Example: i23, %$toto
  @typeKind kind
  @typedConstantMap typedConstantMap
  @bool instantiable
  @bool copyable
  @bool equatable
  @bool comparable
  @unifiedTypeMap-proxy enumerationType # .null if type is not enumerable

  insert insertKey error message "the '%K' type is already declared in %L"
  search searchKey error message "there is no '%K' type"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @typedConstantMap {
  @valueIR mValue
  insert insertKey error message "the '%K' constructor is already declared in %L"
  search searchKey error message "there is no '%K' constructor"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @typeList {
  @unifiedTypeMap-proxy mActualType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @operandIRList {
  @operandIR mOperand
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @constructorValue {
  case simple (@bigint value)
  case structure (@constructorSignature constructorSignature @sortedOperandIRList sortedOperandList)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @constructorMap {
  @constructorValue mInitValue
  insert insertKey error message "-- internal error --"
  search searchKey error message "-- internal error --"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @globalTaskVariableList {
  @string mTaskName
  @string mTaskTypeName
  @valueIR mInitialValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @semanticContext {
  @uint mPointerSize # in bit count
  @unifiedTypeMap-proxy mBooleanType
  @unifiedTypeMap-proxy mLiteralIntegerType
  @unifiedTypeMap-proxy mPanicCodeType
  @unifiedTypeMap-proxy mPanicLineType
  @unifiedTypeMap mTypeMap
  @routineMapForContext mRoutineMapForContext
  @guardMapForContext mGuardMapForContext
  @initRoutineMap mInitRoutineMap
  @panicRoutinePriorityMap mPanicSetupRoutinePriorityMap 
  @panicRoutinePriorityMap mPanicLoopRoutinePriorityMap 
  @controlRegisterMap mControlRegisterMap
  @globalConstantMap mGlobalConstantMap
  @globalVariableMap mGlobalVariableMap
  @constructorMap mConstructorMap
  @modeMap mModeMap
  @infixOperatorMap mEqualOperatorMap           # ==
  @infixOperatorMap mNonEqualOperatorMap        # !=
  @infixOperatorMap mStrictInfOperatorMap       # <
  @infixOperatorMap mInfEqualOperatorMap        # <=
  @infixOperatorMap mStrictSupOperatorMap       # >
  @infixOperatorMap mSupEqualOperatorMap        # >=
  @infixOperatorMap mAndOperatorMap             # &
  @infixOperatorMap mOrOperatorMap              # |
  @infixOperatorMap mXorOperatorMap             # ^
  @infixOperatorMap mBooleanXorOperatorMap      # xor
  @infixOperatorMap mAddOperatorMap             # +
  @infixOperatorMap mAddNoOvfOperatorMap        # &+
  @infixOperatorMap mSubOperatorMap             # -
  @infixOperatorMap mSubNoOvfOperatorMap        # &-
  @infixOperatorMap mMulOperatorMap             # *
  @infixOperatorMap mMulNoOvfOperatorMap        # &*
  @infixOperatorMap mDivOperatorMap             # /
  @infixOperatorMap mDivNoOvfOperatorMap        # &/
  @infixOperatorMap mModOperatorMap             # %
  @infixOperatorMap mModNoOvfOperatorMap        # &%
  @infixOperatorMap mLeftShiftOperatorMap       # <<
  @infixOperatorMap mRightShiftOperatorMap      # >>
  @prefixOperatorMap mUnaryMinusOperatorMap     # - and &-
  @prefixOperatorMap mNotOperatorMap            # not
  @prefixOperatorMap mUnsignedComplementOperatorMap # ~
#--- Tasks
  @taskMap mTaskMap
  @globalTaskVariableList mGlobalTaskVariableList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractDeclaration enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap

abstract method @abstractDeclaration enterRoutinesInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc buildSemanticContext
  ?orderedDeclarationList:let @declarationListAST inDeclarationListAST
  ?sourceFile:let @lstring inSourceFile
  ?ast:let @ast inAST
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  !context:@semanticContext outSemanticContext
{
  outSemanticContext = .default
#--- Add predefined modes
#  [!?outSemanticContext.mModeMap insertKey ![guardModeName () nowhere]]
  [!?outSemanticContext.mModeMap insertKey ![bootModeName () nowhere]]
  [!?outSemanticContext.mModeMap insertKey ![initModeName () nowhere]]
  [!?outSemanticContext.mModeMap insertKey ![panicModeName () nowhere]]
  [!?outSemanticContext.mModeMap insertKey ![sectionModeName () nowhere]]
  [!?outSemanticContext.mModeMap insertKey ![kernelModeName () nowhere]]
  [!?outSemanticContext.mModeMap insertKey ![isrModeName () nowhere]]
  [!?outSemanticContext.mModeMap insertKey ![userModeName () nowhere]]
#--- Enter init routines
  for initRoutine in inAST.mInitList do
    [initRoutine enterInContext !?context:outSemanticContext]
  end
#--- Enter panic routines
  for panicRoutine in inAST.mPanicClauses do
    [panicRoutine enterInContext !?context:outSemanticContext]
  end
#---
  for (declaration) in inDeclarationListAST do
    [declaration enterInContext
      !procedureDeclarationList:inAST.mProcedureListAST
      !?context:outSemanticContext
      !?staticStringMap:ioGlobalLiteralStringMap
    ]
  end
#--- Solve panic types
  if [inAST.mPanicTypes length] != 1 then
    error ["" nowhere]
    : "exactly one panic type declaration should be provided (found:" + [inAST.mPanicTypes length] + ")"
    for () in inAST.mPanicTypes do
      error mPanicCodeTypeName:"panic type declaration is here"
    end
  else
    [inAST.mPanicTypes first ?let @lstring panicCodeTypeName ?let @lstring panicLineTypeName]
    outSemanticContext.mPanicCodeType = .searchKey {
      !outSemanticContext.mTypeMap
      !panicCodeTypeName
    }
    outSemanticContext.mPanicLineType = .searchKey {
      !outSemanticContext.mTypeMap
      !panicLineTypeName
    }
  end
#--- Build an HTML containing all glogal constants
  buildGlobalConstantMapHTMLFile (
    !outSemanticContext.mGlobalConstantMap
    !sourceFile:inSourceFile
  )

#--- Enter control registers in context
  enterControlRegistersInContext (
   !inAST.mControlRegisterDeclarationListAST
   !?context: outSemanticContext
  )
  buildControlRegisterMapHTMLFile (
    !outSemanticContext.mControlRegisterMap
    !sourceFile:inSourceFile
  )
#--- Enter procedures, functions, sections, services, guards in context
  [inAST.mProcedureListAST enterInContext !selfTypeName:"" !?context: outSemanticContext]
  [inAST.mExternProcList enterExternProcInContext !?context: outSemanticContext]
  [inAST.mSectionListAST enterInContext !receiverType:"" !?context: outSemanticContext]
  [inAST.mServiceListAST enterInContext !receiverType:"" !?context: outSemanticContext]
  [inAST.mGuardListAST enterInContext !receiverType:"" !?context: outSemanticContext]
#--- Enter tasks
  [inAST.mTaskList enterInContext !?context: outSemanticContext !?staticStringMap:ioGlobalLiteralStringMap]
#---
  for (declaration) in inDeclarationListAST do
    [declaration enterRoutinesInContext
      !procedureDeclarationList:inAST.mProcedureListAST
      !?context:outSemanticContext
      !?staticStringMap:ioGlobalLiteralStringMap
    ]
  end
#--- Check required procs mode
  if @uint.errorCount == 0 then
    for requiredProc in inAST.mRequiredProcList do
      for (mode) in requiredProc.mProcedureModeList do
        [outSemanticContext.mModeMap searchKey !mode]
      end
    end
  end
#--- Check global var declaration
  if @uint.errorCount == 0 then
    for globalVar in inAST.mGlobalVarDeclarationList do
      [globalVar enterInContext
        !?context:outSemanticContext
        !?staticStringMap:ioGlobalLiteralStringMap
      ]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func solveInferredType
  ?targetType:let @unifiedTypeMap-proxy inTargetType
  ?sourceType:let @unifiedTypeMap-proxy inSourceType
  ?errorLocation:let @location inErrorLocation
  -> @unifiedTypeMap-proxy outType
{
  if inSourceType == .null then
    if inTargetType == .null then
      error inErrorLocation : "Cannot infer type" : outType
    else
      outType = inTargetType
    end
  else
    outType = inSourceType
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func combineTypeNamesForInfixOperator ?let @string inLeftTypeName ?let @string inRightTypeName -> @lstring outResult {
  outResult = ["{" + inLeftTypeName + ", " + inRightTypeName + "}" nowhere]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
