#—————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                       
#    S E M A N T I C    C O N T E X T                                                                      
#                                                                                                                       
#—————————————————————————————————————————————————————————————————————————————————————————————————

struct @semanticContext {
  public var @targetParameters mTargetParameters = @{
    !.here
    !@[]
    !["" nowhere]
    !["" nowhere]
    !0
    !false
    ! @{!0 !.nowhere}
    ! @{!0 !.nowhere}
    !["" nowhere]
    ! @{!0 !.nowhere}
    ! @{!0 !.nowhere}
    ! @{!0 !.nowhere}
    ! @{!0 !.nowhere}
    ! @{!0 !.nowhere}
    !["" nowhere]
    ! @{!0 !.nowhere}
    !["" nowhere]
    !["" nowhere]
    !["" nowhere]
    !["" nowhere]
    !@[]
    !@[]
    !@[]
    !["" nowhere]
    !["" nowhere]
    !["" nowhere]
    ! @{!0 !.nowhere}
    !["" nowhere]
    !["" nowhere]
    !["" nowhere]
    !["" nowhere]
  }

  public var @omnibusType mPanicCodeType = @{
    !subscript: .noSubscript
    !attributes: @()
    !omnibusTypeDescriptionName: "<<unknown>>"
    !kind:.void
    !llvmBaseTypeName: "<<unknown>>"
  }
  public var @omnibusType mPanicLineType = @{
    !subscript: .noSubscript
    !attributes: @()
    !omnibusTypeDescriptionName: "<<unknown>>"
    !kind:.void
    !llvmBaseTypeName: "<<unknown>>"
  }
  public var @panicRoutinePriorityMap mPanicSetupRoutinePriorityMap = @[]
  public var @panicRoutinePriorityMap mPanicLoopRoutinePriorityMap = @[]

  public var @routineMapForContext mRoutineMap = @[]
  public var @guardMapForContext mGuardMap = @[]
  
  public var @controlRegisterGroupMap mControlRegisterGroupMap = @[]
  public var @globalConstantMap mGlobalConstantMap = @[]
  public var @globalSyncInstanceMap mGlobalSyncInstanceMap = @[]
  public var @staticlistMap mStaticListMap = @[]

  public var @stringset mRequiredRoutineSet = @[]

#--- Types
  public var @unifiedTypeMap mTypeMap = @[]
  public var @typeConstantMap mTypeConstantMap = @[]
  public var @typeConstructorMap mTypeConstructorMap = @[]
  private var @typePropertySetterMap mTypePropertySetterMap = @[]
  private var @typePropertyGetterMap mTypePropertyGetterMap = @[]

#--- Interrupts
  public var @availableInterruptMap mAvailableInterruptMap = @[]

#--- Operator maps  
  public var @infixOperatorMap mInfixOperatorMap = @[]
  public var @prefixOperatorMap mPrefixOperatorMap = @[]
  public var @assignmentOperatorMap mAssignmentOperatorMap = @[]
  
  public var @implicitConversionToBooleanMap mImplicitConversionToBooleanMap = @[]

#--- Tasks
  public var @taskMap mTaskMap = @[]
  public var @globalTaskVariableList mGlobalTaskVariableList = @[]

#--- Entity map
  public var @universalValuedObjectMap mValuedObjectMap = @()
}

#·······················································································································

abstract class @abstractDecoratedDeclaration {
}

#·······················································································································

list @declarationDecorationList {
  public var @abstractDecoratedDeclaration mDeclaration
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  TYPE CONSTANT MAP                                                                                                                  
#—————————————————————————————————————————————————————————————————————————————————————————————————

map @typeConstantMap {
  public var @constantMap mConstantMap
  insert insertKey error message "the $%K type is already declared"
  search searchKey error message "there is no $%K type"
}

#·······················································································································

map @constantMap {
  public var @bigint mIndex
  public var @lstring mClassTypeName
  insert insertKey error message "the '%K' constant is already declared"
  search searchKey error message "there is no '%K' constant"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  TYPE CONSTRUCTOR MAP                                                                                                                  
#—————————————————————————————————————————————————————————————————————————————————————————————————

map @typeConstructorMap {
  public var @constructorMap mConstructorMap
  insert insertKey error message "the $%K type is already declared"
  search searchKey error message "there is no $%K type"
}

#·······················································································································

enum @constructorValue {
  case null
  case simple (@bigint value)
  case structure (@sortedOperandIRList sortedOperandList)
  case arrayValue (@omnibusType elementType @uint size)
}

#·······················································································································

list @constructorSignature {
  public var @string mSelector
  public var @omnibusType mType
  public var @uint mFieldIndex
}

#·······················································································································

map @constructorMap { # Key is (!selector!selector)
  public var @constructorSignature mSignature
  public var @constructorValue mInitValue
  insert insertKey error message "-- internal error --"
  search searchKey error message "constructor is not defined"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
# PROPERTY GETTER MAP
#—————————————————————————————————————————————————————————————————————————————————————————————————

map @typePropertyGetterMap {
  public var @propertyGetterMap mGetterMap
  insert insertKey error message "the $%K type is already declared"
  search searchKey error message "there is no $%K type"
  insert or replace
}

#·······················································································································

setter @semanticContext insertGetter ?omnibusTypeName: let @lstring inTypeName
                                     ?let @lstring inGetterName
                                     ?let @propertyVisibility inVisibility
                                     ?let @propertyGetterKind inAccess {
  with inTypeName.string in !?self.mTypePropertyGetterMap do
    [!?mGetterMap insertKey !inGetterName !inVisibility !inAccess]
  else
    var @propertyGetterMap getterMap = @[]
    [!?getterMap insertKey !inGetterName !inVisibility !inAccess]
    [!?self.mTypePropertyGetterMap insertKey !inTypeName !getterMap]
  end
}

#·······················································································································

getter @semanticContext propertyGetterMap ?let @omnibusType inType-> @propertyGetterMap {
  with inType.omnibusTypeDescriptionName in self.mTypePropertyGetterMap do
    result = mGetterMap
  else
    result = @[]
  end
}

#·······················································································································

setter @semanticContext addComputedPropertyGetter
  ?omnibusTypeName: let @lstring inTypeName
  ?llvmBaseTypeName:let @string inLLVMBaseTypeName
  ?propertyName:let @lstring inPropertyName
  ?mode:let @mode inMode
  ?visibility:let @propertyVisibility inVisibility
  ?resultTypeProxy:let @unifiedTypeMapEntry inResultTypeProxy
  !routineLLVMName:@lstring outRoutineLLVMName
{
  var @propertyGetterMap getterMap
  if [self.mTypePropertyGetterMap hasKey !inTypeName.string] then
    [self.mTypePropertyGetterMap searchKey !inTypeName ?getterMap]
  else
    getterMap = @[]
  end
  outRoutineLLVMName = @{!getterLLVMName (!inLLVMBaseTypeName !inPropertyName) !inPropertyName}
  let modeDictionary = [inMode routineLLVMDictionaryForFunction !outRoutineLLVMName]
  [!?getterMap insertKey
    !inPropertyName
    !inVisibility
    !.computedProperty {!typeProxy:inResultTypeProxy !modeDictionary:modeDictionary}
  ]
  [!?self.mTypePropertyGetterMap insertOrReplace !inTypeName !getterMap]
}

#·······················································································································

enum @propertyGetterKind {
  case storedProperty (@omnibusType type @uint index)
  case computedProperty (@unifiedTypeMapEntry typeProxy @routineLLVMNameDict modeDictionary)
  case constantProperty (@objectIR value)
}

#·······················································································································

enum @propertyVisibility %equatable {
  case isPublic
  case isPrivate
}

#·······················································································································

map @propertyGetterMap {
  public var @propertyVisibility mVisibility
  public var @propertyGetterKind mAccess
  insert insertKey error message "the '%K' property is already declared"
  search searchKey error message "there is no '%K' property"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
# PROPERTY SETTER MAP
#—————————————————————————————————————————————————————————————————————————————————————————————————

map @typePropertySetterMap {
  public var @propertySetterMap mSetterMap
  insert insertKey error message "the $%K type is already declared"
  search searchKey error message "there is no $%K type"
  insert or replace
}

#·······················································································································

setter @semanticContext insertPropertySetter ?let @lstring inTypeName
                                             ?let @lstring inSetterName
                                             ?let @propertyVisibility inVisibility
                                             ?let @propertySetterKind inAccess {
  with inTypeName.string in !?self.mTypePropertySetterMap do
    [!?mSetterMap insertKey !inSetterName !inVisibility !inAccess]
  else
    var @propertySetterMap setterMap = @[]
    [!?setterMap insertKey !inSetterName !inVisibility !inAccess]
    [!?self.mTypePropertySetterMap insertKey !inTypeName !setterMap]
  end
}

#·······················································································································

getter @semanticContext propertySetterMap ?let @omnibusType inType-> @propertySetterMap {
  with inType.omnibusTypeDescriptionName in self.mTypePropertySetterMap do
    result = mSetterMap
  else
    result = @[]
  end
}

#·······················································································································

map @propertySetterMap {
  public var @propertyVisibility mVisibility
  public var @propertySetterKind mAccess
  insert insertKey error message "the '%K' property is already declared"
  search searchKey error message "there is no '%K' property"
}

#·······················································································································

enum @propertySetterKind {
  case storedProperty (@omnibusType type @uint index)
  case computedProperty (@unifiedTypeMapEntry typeProxy
                         @routineLLVMNameDict getterModeDictionary
                         @routineLLVMNameDict setterModeDictionary)
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! @staticEntityMap
#—————————————————————————————————————————————————————————————————————————————————————————————————

struct @staticEntityMap {
  public var @staticStringMap mStaticStringMap = @[]
  public var @globalStructuredConstantList mGlobalStructuredConstantList = @[]
}

#·······················································································································

list @globalStructuredConstantList {
  public var @omnibusType mType
  public var @operandIRList mOperandIRList
}

#·······················································································································

map @staticStringMap {
  public var @uint mIndex
  insert insertKey error message "-- internal error --"
  search searchKey error message "-- internal error --"
}

#·······················································································································

setter @staticEntityMap findOrAddStaticString ?@string inString !@uint outIndex {
  if [self.mStaticStringMap hasKey !inString]  then
    [self.mStaticStringMap searchKey ![inString nowhere] ?outIndex]
  else
    outIndex = [self.mStaticStringMap count]
    [!?self.mStaticStringMap insertKey ![inString nowhere] !outIndex]
  end
}

#·······················································································································

map @globalConstantMap {
  public var @objectIR mValue
  insert insertKey error message "the '%K' constant is already declared in %L"
  search searchKey error message "there is no '%K' constant"
}

#·······················································································································

list @operandIRList %equatable {
  public var @objectIR mOperand
}

#·······················································································································

map @availableInterruptMap {
  public var @interruptionPanicCode mInterruptionPanicCode
  insert insertKey error message "interrupt '%K' is already defined"
  search searchKey error message "interrupt '%K' is not defined"
}

#·······················································································································

getter @semanticContext booleanType ?let @location unused inErrorLocation -> @omnibusType {
  [self.mTypeMap searchType !lkey:[boolTypeName () nowhere] ?type:result]
}

#·······················································································································

abstract method @abstractDeclarationAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR ioUserLLVMTypeDefinitionListIR

#·······················································································································

proc buildSemanticContext
  ?sourceFile:let @lstring inSourceFile
  ?ast:let @ast inAST
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!staticlistValues:@staticListInitializationMap ioStaticListValueMap
  !context:@semanticContext outSemanticContext
  !@declarationDecorationList outDecoratedDeclarationList
  !@decoratedRegularRoutineList outDecoratedRoutineList
  !@routineListIR outRoutineListIR
  !@userLLVMTypeDefinitionListIR outUserLLVMTypeDefinitionListIR
{
  outSemanticContext = @()
  outDecoratedDeclarationList = @[]
  outDecoratedRoutineList = @[]
  outRoutineListIR = @[]
  outUserLLVMTypeDefinitionListIR = @[]
#--- Enter required routines
  for requiredProc in inAST.mRequiredFunctionListAST do
    let procedureMangledName = routineMangledNameFromAST (
      !""
      !requiredProc.mName
      !requiredProc.mFormalArgumentList
    )
    outSemanticContext.mRequiredRoutineSet += !procedureMangledName.string
  end 
  [inAST.mExternFunctionListAST enterExternProcInContext
    !?context: outSemanticContext
  ]
#---
  var controlRegisterUserAccesMapAST = inAST.mControlRegisterUserAccesMapAST
  for (declaration) in inAST.mDeclarationListAST do
    [declaration enterInContext
      !?context:outSemanticContext
      !?outDecoratedDeclarationList
      !?outDecoratedRoutineList
      !?outRoutineListIR
      !?staticlistValues:ioStaticListValueMap
      !?staticEntityMap:ioStaticEntityMap
      !?registerUserAccess:controlRegisterUserAccesMapAST
      !?userDefinedTypes: outUserLLVMTypeDefinitionListIR
    ]
  end
#--- Check all registers declared as @user are actually defined
  for (lkey) in controlRegisterUserAccesMapAST do
    error lkey : "this control register is not defined"
  end
#--- Build an HTML containing all global constants
  buildGlobalConstantMapHTMLFile (
    !outSemanticContext.mGlobalConstantMap
    !sourceFile:inSourceFile
  )
#--- Build an HTML containing all types
  buildTypeMapHTMLFile (
    !outSemanticContext.mTypeMap
    !outSemanticContext.mRoutineMap
    !outSemanticContext.mInfixOperatorMap
    !outSemanticContext.mPrefixOperatorMap
    !outSemanticContext.mAssignmentOperatorMap
    !sourceFile:inSourceFile
  )
#--- Enter control registers in context
  buildControlRegisterMapHTMLFile (
    !outSemanticContext.mControlRegisterGroupMap
    !sourceFile:inSourceFile
  )
#--- Enter tasks
  [inAST.mTaskListAST enterInContext
     !?context: outSemanticContext
     !?outDecoratedDeclarationList
     !?outDecoratedRoutineList
     !?outRoutineListIR
     !?staticEntityMap:ioStaticEntityMap
     !?userDefinedTypes: outUserLLVMTypeDefinitionListIR
   ]
}

#·······················································································································

#func combineTypeNamesForInfixOperator ?let @string inLeftTypeName ?let @string inRightTypeName -> @lstring {
#  result = [inLeftTypeName + "," + inRightTypeName nowhere]
#}

#—————————————————————————————————————————————————————————————————————————————————————————————————
