#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                       
#    S E M A N T I C    C O N T E X T                                                                      
#                                                                                                                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract class @abstractDecoratedDeclaration {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @declarationDecorationList {
  @abstractDecoratedDeclaration mDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @infixOperatorMap {
  @PLMType mResultType
  @infixOperatorDescription mOperation
  insert insertKey error message "** internal error **"
  search searchKey error message "** internal error **"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @prefixOperatorMap {
  insert insertKey error message "** internal error **"
  search searchKey error message "prefix operation is not defined for $%K type"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @staticStringMap
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @staticStringMap {
  @uint mIndex
  insert insertKey error message "-- internal error --"
  search searchKey error message "-- internal error --"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

setter @staticStringMap findOrAddStaticString ?@string inString !@uint outIndex {
  if [self hasKey !inString]  then
    [self searchKey ![inString nowhere] ?outIndex]
  else
    outIndex = [self count]
    [!?self insertKey ![inString nowhere] !outIndex]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @globalConstantMap {
  @objectIR mValue
  insert insertKey error message "the '%K' constant is already declared in %L"
  search searchKey error message "there is no '%K' constant"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @operandIRList {
  @objectIR mOperand
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @availableInterruptMap {
  @interruptionPanicCode mInterruptionPanicCode
  insert insertKey error message "interrupt '%K' is already defined"
  search searchKey error message "interrupt '%K' is not defined"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @globalTaskVariableList {
  @string mTaskName
  @string mTaskTypeName
  @objectIR mInitialValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @semanticContext {
  @targetParameters mTargetParameters
  @uint mPointerSize # in bit count

  @unifiedTypeMap-proxy mPanicCodeType
  @unifiedTypeMap-proxy mPanicLineType
  @unifiedTypeMap mTypeMap
  @routineMapForContext mRoutineMapForContext
  @guardMapForContext mGuardMapForContext
  @initRoutineMap mInitRoutineMap
  @panicRoutinePriorityMap mPanicSetupRoutinePriorityMap 
  @panicRoutinePriorityMap mPanicLoopRoutinePriorityMap 
  @controlRegisterMap mControlRegisterMap
  @globalConstantMap mGlobalConstantMap
#  @globalVariableMap mGlobalVariableMap
  @moduleMap mModuleMap
  @staticlistMap mStaticListMap
#--- Interrupts
  @stringset mDefinedInterruptSet
  @availableInterruptMap mAvailableInterruptMap
#--- Operators
  @infixOperatorMap mEqualOperatorMap           # ==
  @infixOperatorMap mNonEqualOperatorMap        # !=
  @infixOperatorMap mStrictInfOperatorMap       # <
  @infixOperatorMap mInfEqualOperatorMap        # <=
  @infixOperatorMap mStrictSupOperatorMap       # >
  @infixOperatorMap mSupEqualOperatorMap        # >=
  @infixOperatorMap mAndOperatorMap             # &
  @infixOperatorMap mOrOperatorMap              # |
  @infixOperatorMap mXorOperatorMap             # ^
  @infixOperatorMap mBooleanXorOperatorMap      # xor
  @infixOperatorMap mAddOperatorMap             # +
  @infixOperatorMap mAddNoOvfOperatorMap        # &+
  @infixOperatorMap mSubOperatorMap             # -
  @infixOperatorMap mSubNoOvfOperatorMap        # &-
  @infixOperatorMap mMulOperatorMap             # *
  @infixOperatorMap mMulNoOvfOperatorMap        # &*
  @infixOperatorMap mDivOperatorMap             # /
  @infixOperatorMap mDivNoOvfOperatorMap        # &/
  @infixOperatorMap mModOperatorMap             # %
  @infixOperatorMap mModNoOvfOperatorMap        # &%
  @infixOperatorMap mLeftShiftOperatorMap       # <<
  @infixOperatorMap mRightShiftOperatorMap      # >>
  @prefixOperatorMap mUnaryMinusOperatorMap     # - and &-
  @prefixOperatorMap mNotOperatorMap            # not
  @prefixOperatorMap mUnsignedComplementOperatorMap # ~
#--- Tasks
  @taskMap mTaskMap
  @globalTaskVariableList mGlobalTaskVariableList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@subprogramInvocationGraph ioSubprogramInvocationGraph
  ?!staticlistValues:@staticListInitializationMap ioStaticListValueMap
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc buildSemanticContext
  ?sourceFile:let @lstring inSourceFile
  ?ast:let @ast inAST
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!staticlistValues:@staticListInitializationMap ioStaticListValueMap
  !context:@semanticContext outSemanticContext
  !@subprogramInvocationGraph outSubprogramInvocationGraph
  !@declarationDecorationList outDecoratedDeclarationList
{
  outSemanticContext = .default
  outDecoratedDeclarationList = {}
#--- Enter panic routines
#  for panicRoutine in inAST.mPanicClauseListAST do
#    [panicRoutine enterInContext !?context:outSemanticContext]
#  end
#--- Enter standalone procedures, functions, sections, services, guards in context
  [inAST.mISRDeclarationListAST enterInContext !?outSemanticContext !?outDecoratedDeclarationList]
  [inAST.mStandAloneFunctionDeclarationListAST enterFunctionInContext
     !selfTypeName:"" 
     !?context:outSemanticContext
     !?outDecoratedDeclarationList
   ]
  [inAST.mExternProcListAST enterExternProcInContext !?context: outSemanticContext]
  [inAST.mStandAloneSystemRoutineListAST enterSystemRoutineInContext !receiverType:"" !?context: outSemanticContext]
#  [inAST.mGuardListAST enterInContext !receiverType:"" !?context: outSemanticContext]
#---
  outSubprogramInvocationGraph = .emptyGraph
  for (declaration) in inAST.mDeclarationListAST do
    [declaration enterInContext
      !procedureDeclarationList:inAST.mStandAloneFunctionDeclarationListAST
      !?context:outSemanticContext
      !?outDecoratedDeclarationList
      !?outSubprogramInvocationGraph
      !?staticlistValues:ioStaticListValueMap
      !?staticStringMap:ioGlobalLiteralStringMap
    ]
  end
#--- Build an HTML containing all global constants
  buildGlobalConstantMapHTMLFile (
    !outSemanticContext.mGlobalConstantMap
    !sourceFile:inSourceFile
  )
#--- Build an HTML containing all types
  buildTypeMapHTMLFile (
    !outSemanticContext.mTypeMap
    !sourceFile:inSourceFile
  )
#--- Enter control registers in context
  buildControlRegisterMapHTMLFile (
    !outSemanticContext.mControlRegisterMap
    !sourceFile:inSourceFile
  )
#--- Enter tasks
  [inAST.mTaskListAST enterInContext
     !?context: outSemanticContext
     !?outDecoratedDeclarationList
     !?outSubprogramInvocationGraph
     !?staticStringMap:ioGlobalLiteralStringMap
   ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func combineTypeNamesForInfixOperator ?let @string inLeftTypeName ?let @string inRightTypeName -> @lstring {
  result = ["{" + inLeftTypeName + ", " + inRightTypeName + "}" nowhere]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
