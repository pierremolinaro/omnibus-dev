#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @incrementationInstructionAST : @instructionAST {
  @lstring mVarName
}

#----------------------------------------------------------------------------------------------------------------------*

class @decrementationInstructionAST : @instructionAST {
  @lstring mVarName
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $identifier$ ?let varName
    $++$
    ioInstructionList += !@incrementationInstructionAST.new {
      !varName
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $identifier$ ?let varName
    $--$
    ioInstructionList += !@decrementationInstructionAST.new {
      !varName
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @incrementationInstructionAST analyze
  ?optionalReceiverType:let @receiverType unused inReceiverType
  ?context:let @semanticContext inContext
  ?mode:let @string inMode
  ?!temporary:@uint unused ioTemporaryIndex
  ?!staticStringMap:@globalLiteralStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Get target type
  [!?ioVariableMap searchForReadWriteAccess
    !mVarName
    ?let type
    ?let acceptedModeSet
    ?let @string unused variableCName
    ?let variable
    ?*
  ]
#--- Check mode
  if not [acceptedModeSet hasKey !inMode] then
    error mVarName : "this variable cannot be used in $" + inMode + " mode"
  end
#--- Check type handle ++ operator
  if not [inContext.mTypeNameSetForIncDec hasKey ![type key]] then
    error mVarName : [type key] + " type does handle ++ operator"
  end
#--- Code generation
  ioInstructionGenerationList += !@incrementInstructionIR.new {
   !variable
 }
}

#----------------------------------------------------------------------------------------------------------------------*

override method @decrementationInstructionAST analyze
  ?optionalReceiverType:let @receiverType unused inReceiverType
  ?context:let @semanticContext inContext
  ?mode:let @string inMode
  ?!temporary:@uint unused ioTemporaryIndex
  ?!staticStringMap:@globalLiteralStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Get target type
  [!?ioVariableMap searchForReadWriteAccess
    !mVarName
    ?let type
    ?let acceptedModeSet
    ?let @string unused variableCName
    ?let variable
    ?*
  ]
#--- Check mode
  if not [acceptedModeSet hasKey !inMode] then
    error mVarName : "this variable cannot be used in $" + inMode + " mode"
  end
#--- Check type handle ++ operator
  if not [inContext.mTypeNameSetForIncDec hasKey ![type key]] then
    error mVarName : [type key] + " type does handle -- operator"
  end
#--- Code generation
  ioInstructionGenerationList += !@decrementInstructionIR.new {
   !variable
 }
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

class @incrementInstructionIR : @abstractInstructionIR {
  @variableKindIR mVariable
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @incrementInstructionIR instructionCode -> @string outCode {
  outCode = [mVariable mangledName] + " ++ ;\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @incrementInstructionIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mVariable enterAccessibleEntities !?ioAccessibleEntities]
}

#----------------------------------------------------------------------------------------------------------------------*

class @decrementInstructionIR : @abstractInstructionIR {
  @variableKindIR mVariable
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @decrementInstructionIR instructionCode -> @string outCode {
  outCode = [mVariable mangledName] + " -- ;\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @decrementInstructionIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mVariable enterAccessibleEntities !?ioAccessibleEntities]
}

#----------------------------------------------------------------------------------------------------------------------*
