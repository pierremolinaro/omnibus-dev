#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                 *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @incDecKind {
  case incWithOverflowCheck
  case decWithOverflowCheck
  case incNoOverflowCheck
  case decNoOverflowCheck
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @incDecInstructionAST : @instructionAST {
  @incDecKind mKind
  @lstring mVarName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                              *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $identifier$ ?let varName
    $++$
    ioInstructionList += !@incDecInstructionAST.new {
      !.incWithOverflowCheck
      !varName
    }
  }

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList?!@labelMap unused ioLabelMap {
    $identifier$ ?let varName
    $--$
    ioInstructionList += !@incDecInstructionAST.new {
      !.decWithOverflowCheck
      !varName
    }
  }

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList?!@labelMap unused ioLabelMap {
    $identifier$ ?let varName
    $++%$
    ioInstructionList += !@incDecInstructionAST.new {
      !.incNoOverflowCheck
      !varName
    }
  }

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList?!@labelMap unused ioLabelMap {
    $identifier$ ?let varName
    $--%$
    ioInstructionList += !@incDecInstructionAST.new {
      !.decNoOverflowCheck
      !varName
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                           *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @incDecInstructionAST analyze
  ?routineNameForInvocationGraph:let @lstring unused inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType unused inReceiverType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool unused inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Get target type
  [!?ioVariableMap searchForReadWriteAccess
    !mVarName
    ?let type
    ?let accessIsAllowed
    ?let @objectInMemoryIR variable
    ?3*
    ?let isConstant
  ]
  if isConstant then
    error mVarName : "a constant cannot be modified"
  end
  if not accessIsAllowed then
    error mVarName : "routine has no access right on the this variable"
  end
#--- Check type inc / dec operator, exception allowed ?
  var comment = [variable mangledName] + " "
  @llvmBinaryOperation llvmOperator
  switch mKind
  case incNoOverflowCheck :
    comment += "&++"
    if [inContext.mIncOperatorMap hasKey ![type key]] then
      [inContext.mIncOperatorMap searchKey ![[type key] nowhere] ?* ?llvmOperator]
    else
      error mVarName: "type $" + [type key] + " does not support the &++ operator" : llvmOperator
    end
  case incWithOverflowCheck :
    comment += "++"
    if [inContext.mIncOperatorMap hasKey ![type key]] then
      [inContext.mIncOperatorMap searchKey ![[type key] nowhere] ?let ovfOp ?let noOvfOp]
      if [option plm_options.noPanicGeneration value] then
        llvmOperator = noOvfOp
      else
        llvmOperator = ovfOp
      end
    else
      error mVarName: "type $" + [type key] + " does not support the ++ operator" : llvmOperator
    end
    if [inModeSet hasKey !panicModeName ()] then
      error mVarName : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
    end
  case  decNoOverflowCheck :
    comment += "&--"
    if [inContext.mDecOperatorMap hasKey ![type key]] then
      [inContext.mDecOperatorMap searchKey ![[type key] nowhere] ?* ?llvmOperator]
    else
      error mVarName: "type $" + [type key] + " does not support the &-- operator" : llvmOperator
    end
  case decWithOverflowCheck :
    comment += "--"
    if [inContext.mDecOperatorMap hasKey ![type key]] then
      [inContext.mDecOperatorMap searchKey ![[type key] nowhere] ?let ovfOp ?let noOvfOp]
      if [option plm_options.noPanicGeneration value] then
        llvmOperator = noOvfOp
      else
        llvmOperator = ovfOp
      end
    else
      error mVarName: "type $" + [type key] + " does not support the -- operator" : llvmOperator
    end
    if [inModeSet hasKey !panicModeName ()] then
      error mVarName : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
    end
  end
#--- Generate comment
  [!?ioInstructionGenerationList appendComment !comment]
#--- Load variable
  [variable loadFromMemory
    !?temporary:ioTemporaries
    !?instructionListIR:ioInstructionGenerationList
    ?resultingValue:let @operandIR variableValue
  ]
#--- Increment / decrement variable
  getNewTempVariable (!type!?ioTemporaries ?let resultValue)
  [!?ioInstructionGenerationList appendBinaryOperation
    !resultValue.mValue
    !resultValue.mType
    !mVarName.location
    !variableValue.mValue
    !llvmOperator
    !.literalInteger {!value:1G}
  ]
#--- Store variable
  [variable storeInMemory
    !value:resultValue
    !?instructionListIR:ioInstructionGenerationList
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
