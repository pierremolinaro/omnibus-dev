#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @literalBooleanInExpressionAST : @expressionAST {
  @bool mValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <primary> ?!@ast unused ioAST !@expressionAST outExpression {
    $yes$
    outExpression = @literalBooleanInExpressionAST.new {!true}
  }

  #·····················································································································

  rule <primary> ?!@ast unused ioAST !@expressionAST outExpression {
    $no$
    outExpression = @literalBooleanInExpressionAST.new {!false}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalBooleanInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addEdge !inConstantName ![ctBoolTypeName () nowhere]]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalBooleanInExpressionAST noteExpressionTypesInPrecedenceGraph
     ?!@semanticTypePrecedenceGraph unused ioGraph
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalBooleanInExpressionAST analyzeExpression
  ?self:let @omnibusType unused inSelfType
  ?routineAttributes:let @routineAttributes unused inRoutineAttributes
  ?optionalTargetType:let @omnibusType unused inOptionalTargetType
  ?context:let @semanticContext unused inContext
  ?mode:let @mode unused inMode
  ?!temporary:@semanticTemporariesStruct unused ioTemporaryIndex
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap unused ioUniversalMap
  ?!alloca:@allocaList unused ioAllocaList
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
  !result:@objectIR outResult
{
#  outResult = .literalInteger {!type:[inContext booleanType !.nowhere] !value:if mValue then 1G else 0G end}
  outResult = .literalInteger {!type: compileTimeBoolType () !value: if self.mValue then 1G else 0G end}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
