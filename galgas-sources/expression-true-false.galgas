#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @literalBooleanInExpressionAST : @expressionAST {
  @bool mValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <primary> !@expressionAST outExpression {
    $true$
    outExpression = @literalBooleanInExpressionAST.new {!true}
  }

  #·····················································································································

  rule <primary> !@expressionAST outExpression {
    $false$
    outExpression = @literalBooleanInExpressionAST.new {!false}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalBooleanInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addEdge !inConstantName !["$" + boolTypeName () nowhere]]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalBooleanInExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [!?ioGraph noteNode !["$" + boolTypeName () nowhere]]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalBooleanInExpressionAST analyzeExpression
  ?self:let @unifiedTypeMap-proxy unused inSelfType
  ?directAccessToPropertiesAllowed:let @bool unused inDirectAccessToPropertiesAllowed
  ?inGuard:let @bool unused inGuard
  ?routineNameForInvocationGraph:let @lstring unused inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset unused inModeSet
  ?allowPanic:let @bool unused inAllowPanic
  ?!temporary:@semanticTemporariesStruct unused ioTemporaryIndex
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap unused ioVariableMap
  ?!localVariableMap:@localVariableMap unused ioLocalVariableMap
  ?!namedObjectMap:@namedObjectMap unused ioNamedObjectMap
  ?!alloca:@allocaList unused ioAllocaList
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
  !result:@objectIR outResult
{
  outResult = .literalInteger {!type: inContext.mBooleanType !value:if mValue then 1G else 0G end}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
