#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                 *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @assertInstructionAST : @instructionAST {
  @location mAssertInstructionLocation
  @expressionAST mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                              *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList  ?!@labelMap unused ioLabelMap{
    $assert$
    let loc = @location.here
    <expression> ?let @expressionAST expression
    ioInstructionList += !@assertInstructionAST.new {
      !loc
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                           *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assertInstructionAST analyze
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  if [inModeSet hasKey !panicModeName ()] then
    error mAssertInstructionLocation : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
  end
#--- Analyze expression
  @instructionListIR instructionGenerationList = {}
  [mExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalTargetType:.null
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:instructionGenerationList
    ?result:@operandIR expressionValue
  ]
#--- Check inferred type
  if not [[expressionValue.mType kind] isBoolean] then
    error mAssertInstructionLocation : "expression is not boolean"
  end
#--- Check expression is not static
  if [expressionValue.mValue isStatic] then
    error mAssertInstructionLocation : "expression is static: use check directive"
  end
#--- Code generation
  if not [option plm_options.noPanicGeneration value] then
    ioInstructionGenerationList += !@assertInstructionIR.new {
      !mAssertInstructionLocation
      !instructionGenerationList
      !expressionValue
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                     *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @assertInstructionIR : @abstractInstructionIR {
  @location mAssertInstructionLocation
  @instructionListIR mInstructionList
  @operandIR mExpressionValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assertInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  [mInstructionList instructionListLLVMCode !?ioLLVMcode !inGenerationContext!?ioGenerationAdds]
  ioLLVMcode += "if (!" + mExpressionValue.mValue + ") {\n"
  ioLLVMcode += "  raise_exception (20"
     + ", " + [[[mAssertInstructionLocation file] lastPathComponent] utf8Representation]
     + ", " + [mAssertInstructionLocation line] + ") ;\n"
  ioLLVMcode += "}\n" 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assertInstructionIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mInstructionList enterAccessibleEntities !?ioAccessibleEntities]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
