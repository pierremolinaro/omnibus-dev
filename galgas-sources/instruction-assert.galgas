#—————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#—————————————————————————————————————————————————————————————————————————————————————————————————

class @assertInstructionAST : @instructionAST {
  public var @expressionAST mExpression
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    $assert$
    let loc = @location.here
    <expression> !?ioAST ?let @expressionAST expression
    ioInstructionList += !@assertInstructionAST.init {
      !loc
      !expression
    }
  }

  #·····················································································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @assertInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [self.mExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @assertInstructionAST instructionSemanticAnalysis
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  if inMode == .panicMode then
    error self.mInstructionLocation : "operations that can generate panic are not allowed in " + panicModeName () + " mode"
  end
#--- Analyze expression
  var @instructionListIR instructionGenerationList = §[]
  [self.mExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:voidType ()
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:instructionGenerationList
    ?result:let @objectIR expressionValue
  ]
#--- Check inferred type
  if not [[expressionValue type].kind isBoolean] then
    error self.mInstructionLocation : "expression is not boolean"
  end
#--- Check expression is not static
  if [expressionValue isStatic] then
    error self.mInstructionLocation : "expression is static: use check directive"
  end
#--- Code generation
  if not [option omnibus_options.noPanicGeneration value] then
    ioInstructionGenerationList += !@assertInstructionIR.init {
      !self.mInstructionLocation
      !instructionGenerationList
      !expressionValue
    }
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#—————————————————————————————————————————————————————————————————————————————————————————————————

class @assertInstructionIR : @abstractInstructionIR {
  public var @location mAssertInstructionLocation
  public var @instructionListIR mInstructionList
  public var @objectIR mExpressionValue
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @assertInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  [self.mInstructionList instructionListLLVMCode !?ioLLVMcode !inGenerationContext!?ioGenerationAdds]
  let labelAssertOk = "assert.ok." + ioGenerationAdds.mUniqueIndex
  let labelAssertEr = "assert.not.ok." + ioGenerationAdds.mUniqueIndex
  ioGenerationAdds.mUniqueIndex += 1
  ioLLVMcode += "  br i1 " + [self.mExpressionValue llvmName] + ", label %" + labelAssertOk + ", label %" + labelAssertEr + "\n\n"
  ioLLVMcode += labelAssertEr + ":\n"
  ioLLVMcode += "  call void @" + [panicRoutineNameForLocationFile (!self.mAssertInstructionLocation) assemblerRepresentation] + " ("
  ioLLVMcode += [inGenerationContext.mPanicLineLLVMType llvmTypeName] + " " + [self.mAssertInstructionLocation endLine] + ", "
  ioLLVMcode += [inGenerationContext.mPanicCodeLLVMType llvmTypeName] + " " + panicCodeForAssertViolation () + ")\n"
  ioLLVMcode += "  unreachable\n\n"
  ioLLVMcode += labelAssertOk + ":\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @assertInstructionIR enterAccessibleEntities
  ?!@stringset ioInvokedRoutineSet
  ?!@uint ioMaxBranchOfOnInstructions
{
  [self.mInstructionList enterAccessibleEntities !?ioInvokedRoutineSet !?ioMaxBranchOfOnInstructions]
  ioInvokedRoutineSet += !panicRoutineNameForLocationFile (!self.mAssertInstructionLocation)
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
