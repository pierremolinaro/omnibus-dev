#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @assertInstructionAST : @instructionAST {
  @expressionAST mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    $assert$
    let loc = @location.here
    <expression> !?ioAST ?let @expressionAST expression
    ioInstructionList += !@assertInstructionAST.new {
      !loc
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assertInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assertInstructionAST instructionSemanticAnalysis
  ?self:let @PLMType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  if inCurrentMode == .panicMode then
    error mInstructionLocation : "operations that can generate panic are not allowed in " + panicModeName () + " mode"
  end
#--- Analyze expression
  @instructionListIR instructionGenerationList = {}
  [mExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:voidType ()
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:instructionGenerationList
    ?result:let @objectIR expressionValue
  ]
#--- Check inferred type
  if not [[expressionValue type].kind isBoolean] then
    error mInstructionLocation : "expression is not boolean"
  end
#--- Check expression is not static
  if [expressionValue isStatic] then
    error mInstructionLocation : "expression is static: use check directive"
  end
#--- Code generation
  if not [option plm_options.noPanicGeneration value] then
    ioInstructionGenerationList += !@assertInstructionIR.new {
      !mInstructionLocation
      !instructionGenerationList
      !expressionValue
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @assertInstructionIR : @abstractInstructionIR {
  @location mAssertInstructionLocation
  @instructionListIR mInstructionList
  @objectIR mExpressionValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assertInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  [mInstructionList instructionListLLVMCode !?ioLLVMcode !inGenerationContext!?ioGenerationAdds]
  [!?ioGenerationAdds.mStaticStringMap findOrAddStaticString 
    ![[[mAssertInstructionLocation file] lastPathComponent] stringByDeletingPathExtension]
    ?let staticStringIndex
  ]
  let labelAssertOk = "assert.ok." + ioGenerationAdds.mUniqueIndex
  let labelAssertEr = "assert.not.ok." + ioGenerationAdds.mUniqueIndex
  ioGenerationAdds.mUniqueIndex ++
  ioLLVMcode += "  br i1 " + [mExpressionValue llvmName] + ", label %" + labelAssertOk + ", label %" + labelAssertEr + "\n\n"
  ioLLVMcode += labelAssertEr + ":\n"
  ioLLVMcode += "  call void @raise.panic." + staticStringIndex + " ("
  ioLLVMcode += [inGenerationContext.mPanicLineLLVMType llvmTypeName] + " " + [mAssertInstructionLocation line] + ", "
  ioLLVMcode += [inGenerationContext.mPanicCodeLLVMType llvmTypeName] + " " + panicCodeForAssertViolation () + ")\n"
  ioLLVMcode += "  unreachable\n\n"
  ioLLVMcode += labelAssertOk + ":\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assertInstructionIR enterAccessibleEntities
  ?!@accessibleEntities ioAccessibleEntities
  ?!@uint ioMaxBranchOfOnInstructions
{
  [mInstructionList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
