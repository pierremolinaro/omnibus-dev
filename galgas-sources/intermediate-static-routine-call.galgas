#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @staticRoutineCallIR : @abstractInstructionIR {
  @string mGlobalVariableName
  @objectIR mResult
  @lstring mFunctionMangledName
  @lstring mFunctionNameForGeneration
  @calleeKindIR mKind
  @procCallEffectiveParameterListIR mArgumentList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#override method @staticRoutineCallIR llvmInstructionCode
#  ?!@string ioLLVMcode
#  ?let @generationContext unused inGenerationContext
#  ?!@generationAdds unused ioGenerationAdds
#{
#  ioLLVMcode += "  "
#  if [mResult type] == .null then
#    ioLLVMcode += "call void"
#  else
#    ioLLVMcode += [mResult llvmName] + " = call " + [mResult llvmTypeName]
#  end
#  ioLLVMcode += " @"
#  switch mKind 
#  case function :
#    ioLLVMcode += llvmNameForFunction (!mFunctionNameForGeneration.string)
#  case serviceFromProcessorUserMode :
#    ioLLVMcode += llvmNameForServiceCall (!mFunctionNameForGeneration.string)
#  case serviceFromProcessorPrivilegedMode :
#    ioLLVMcode += llvmNameForServiceImplementation (!mFunctionNameForGeneration.string)
#  case sectionFromProcessorUserMode :
#    ioLLVMcode += llvmNameForSectionCall (!mFunctionNameForGeneration.string)
#  case sectionFromProcessorPrivilegedMode :
#    ioLLVMcode += llvmNameForSectionImplementation (!mFunctionNameForGeneration.string)
#  case primitiveFromProcessorUserMode :
#    ioLLVMcode += llvmNameForPrimitiveCall (!mFunctionNameForGeneration.string)
#  case primitiveFromProcessorPrivilegedMode :
#    ioLLVMcode += llvmNameForPrimitiveImplementation (!mFunctionNameForGeneration.string)
#  case safeFromProcessorUserMode :
#    ioLLVMcode += llvmNameForSafeCall (!mFunctionNameForGeneration.string)
#  case safeFromProcessorPrivilegedMode :
#    ioLLVMcode += llvmNameForSafeImplementation (!mFunctionNameForGeneration.string)
#  end
#  ioLLVMcode += " ("
#  for () in mArgumentList do
#    switch mEffectiveParameterPassingMode
#    case input:
#      ioLLVMcode += [mParameter llvmTypeName] + " * " + [mParameter llvmName]
#    case output:
#      ioLLVMcode += [mParameter llvmTypeName] + " " + [mParameter llvmName]
#    case outputInput:
#      ioLLVMcode += [mParameter llvmTypeName] + " * " + [mParameter llvmName]
#    end
#  between
#    ioLLVMcode += ", "
#  end
#  ioLLVMcode += ")\n"
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#override method @staticRoutineCallIR enterAccessibleEntities
#  ?!@accessibleEntities ioAccessibleEntities
#  ?!@uint unused ioMaxBranchOfOnInstructions
# {
#  if mGlobalVariableName != "" then
#    ioAccessibleEntities.mGlobalVariableSet += !mGlobalVariableName
#  end
#  ioAccessibleEntities.mRoutineSet += !mFunctionMangledName.string
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
