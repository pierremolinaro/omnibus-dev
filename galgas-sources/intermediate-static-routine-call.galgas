#—————————————————————————————————————————————————————————————————————————————————————————————————

class @standaloneRoutineCallIR : @abstractInstructionIR {
  public var @objectIR mResult
  public var @lstring mFunctionMangledName
  public var @string mFunctionNameForGeneration
  public var @procCallEffectiveParameterListIR mArgumentList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @standaloneRoutineCallIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "  "
  if self.mResult == .void then
    ioLLVMcode += "call void"
  else
    ioLLVMcode += [self.mResult llvmName] + " = call " + [self.mResult llvmTypeName]
  end
  ioLLVMcode += " @" + [self.mFunctionNameForGeneration assemblerRepresentation] + " ("
  for (mEffectiveParameterPassingMode mParameter) in self.mArgumentList do
    switch mEffectiveParameterPassingMode
    case input:
      ioLLVMcode += [mParameter llvmTypeName] + "* " + [mParameter llvmName]
    case output:
      ioLLVMcode += [mParameter llvmTypeName] + " " + [mParameter llvmName]
    case outputInput:
      ioLLVMcode += [mParameter llvmTypeName] + "* " + [mParameter llvmName]
    end
  between
    ioLLVMcode += ", "
  end
  ioLLVMcode += ")\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @standaloneRoutineCallIR enterAccessibleEntities
  ?!@stringset ioInvokedRoutineSet
  ?!@uint unused ioMaxBranchOfOnInstructions
 {
  ioInvokedRoutineSet ++= self.mFunctionNameForGeneration
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
