#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @standaloneRoutineCallIR : @abstractInstructionIR {
  @string mGlobalVariableName
  @objectIR mResult
  @lstring mFunctionMangledName
  @string mFunctionNameForGeneration
  @calleeKindIR mKind
  @procCallEffectiveParameterListIR mArgumentList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @standaloneRoutineCallIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "  "
  if mResult == .void then
    ioLLVMcode += "call void"
  else
    ioLLVMcode += [mResult llvmName] + " = call " + [mResult llvmTypeName]
  end
  ioLLVMcode += " @"
  switch mKind 
  case function :
    ioLLVMcode += llvmNameForFunction (!mFunctionNameForGeneration)
  case serviceFromProcessorUserMode :
    ioLLVMcode += llvmNameForServiceCall (!mFunctionNameForGeneration)
  case serviceFromProcessorPrivilegedMode :
    ioLLVMcode += llvmNameForServiceImplementation (!mFunctionNameForGeneration)
  case sectionFromProcessorUserMode :
    ioLLVMcode += llvmNameForSectionCall (!mFunctionNameForGeneration)
  case sectionFromProcessorPrivilegedMode :
    ioLLVMcode += llvmNameForSectionImplementation (!mFunctionNameForGeneration)
  case primitiveFromProcessorUserMode :
    ioLLVMcode += llvmNameForPrimitiveCall (!mFunctionNameForGeneration)
  case primitiveFromProcessorPrivilegedMode :
    ioLLVMcode += llvmNameForPrimitiveImplementation (!mFunctionNameForGeneration)
  end
  ioLLVMcode += " ("
  for () in mArgumentList do
    switch mEffectiveParameterPassingMode
    case input:
      ioLLVMcode += [mParameter llvmTypeName] + "* " + [mParameter llvmName]
    case output:
      ioLLVMcode += [mParameter llvmTypeName] + " " + [mParameter llvmName]
    case outputInput:
      ioLLVMcode += [mParameter llvmTypeName] + "* " + [mParameter llvmName]
    end
  between
    ioLLVMcode += ", "
  end
  ioLLVMcode += ")\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @standaloneRoutineCallIR enterAccessibleEntities
  ?!@stringset ioInvokedRoutineSet
  ?!@uint unused ioMaxBranchOfOnInstructions
 {
#  if mGlobalVariableName != "" then
#    ioAccessibleEntities.mGlobalVariableSet += !mGlobalVariableName
#  end
  ioInvokedRoutineSet += !mFunctionNameForGeneration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
