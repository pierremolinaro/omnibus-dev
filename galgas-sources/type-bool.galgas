#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @booleanDeclaration : @abstractDeclaration {
  @lstring mBooleanTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @booleanDeclaration location -> @location outLocation {
  outLocation = mBooleanTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclaration addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  !@abstractDeclaration outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let boolTypeName = llvmRegularTypeMangledNameFromName (!mBooleanTypeName)
  [!?ioGraph addNode !boolTypeName !self]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @booleanDeclaration keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "bool " + llvmRegularTypeMangledNameFromName (!mBooleanTypeName)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclaration enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticlistValues:@staticlistValues_listMap unused ioStaticListValueMap
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
#--- Enter in type map
  [!?ioContext.mTypeMap insertType !lkey:mBooleanTypeName !type:.boolean]
#--- Enter boolean operators
  enterBooleanOperators (
    !boolTypeName:mBooleanTypeName
    !?context:ioContext
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclaration enterRoutinesInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext unused ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc enterBooleanOperators
  ?boolTypeName:@lstring inBooleanTypeName
  ?!context:@semanticContext ioContext
{
  let selfType = [@unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !inBooleanTypeName} type]
  let boolBoolOp = combineTypeNamesForInfixOperator (!inBooleanTypeName.string !inBooleanTypeName.string)
  [!?ioContext.mEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_eq}
  ]
  [!?ioContext.mNonEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ne}
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ult}
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ule}
  ]
  [!?ioContext.mStrictSupOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ugt}
  ]
  [!?ioContext.mSupEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_uge}
  ]
  [!?ioContext.mBooleanXorOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.xor}
  ]
  [!?ioContext.mOrOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.ior}
  ]
  [!?ioContext.mAndOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.and}
  ]
  [!?ioContext.mNotOperatorMap insertKey
    !inBooleanTypeName
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclaration semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————



