#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @booleanDeclarationAST : @abstractDeclarationAST {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @booleanDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = .nowhere
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclarationAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addNode ![boolTypeName () nowhere] !self]
  [!?ioGraph noteNode !["$uint1" nowhere]]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @booleanDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "$bool"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once boolTypeName -> @string {
  result = "$bool"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!globalVariables:@globalVariableIRList unused ioGlobalVariableIRList
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
#---------- Self type proxy
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !.new {!"uint1" ![boolTypeName () nowhere]} ?let uint1TypeProxy]
#---------- routine map
   @routineMapCTXT routineMap = {}
#--- Add uint1 accessor
  [!?routineMap addFunctionWithoutArgument
    !llvmBaseTypeName:boolTypeName ()
    !methodName:["uint1" nowhere]
    !mode:.anySafeMode
    !resultTypeProxy:uint1TypeProxy
    ?routineLLVMName:*
  ]
#---------- Define boolean type composition
  let booleanType = @PLMType.new {
    !propertyMap:{}
    !routineMap: routineMap
    !classConstantMap:{}
    !constructorMap:{}
    !guardMap:{}
    !subscript:.noSubscript
    !assignmentSources: {!boolTypeName ()}
    !attributes:.instanciable | .equatable | .copyable
    !plmTypeDescriptionName:boolTypeName ()
    !kind:.boolean
    !llvmBaseTypeName:boolTypeName ()
  }
#---------- Enter in type map
  [!?ioContext.mTypeMap insertType
    !lkey:[boolTypeName () nowhere]
    !type:booleanType
    !generate:true
  ]
#---------- Enter boolean operators
  let selfType = [@unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap ![boolTypeName () nowhere]} type]
  let boolBoolOp = combineTypeNamesForInfixOperator (!boolTypeName () !boolTypeName ())
  [!?ioContext.mEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_eq}
  ]
  [!?ioContext.mNonEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ne}
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ult}
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ule}
  ]
  [!?ioContext.mStrictSupOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ugt}
  ]
  [!?ioContext.mSupEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_uge}
  ]
  [!?ioContext.mBooleanXorOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.xor}
  ]
  [!?ioContext.mOrOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.ior}
  ]
  [!?ioContext.mAndOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.and}
  ]
  [!?ioContext.mNotOperatorMap insertKey
    ![boolTypeName () nowhere]
  ]
#---------- Enter boolean assignment function
  ioRoutineListIR += !@basicIntegerAssignFunctionIR.new {
    ![assignmentPrefix () + boolTypeName () + "." + boolTypeName () nowhere]
    !isRequired:false
    !warnsIfUnused:false
    !"i1"
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION: INTEGER ASSIGN FROM SAME TYPE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @basicIntegerAssignFunctionIR : @abstractRoutineIR {
  @string mLLVMTypeName
}

#·······················································································································

override method @basicIntegerAssignFunctionIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "define internal void @" +[mRoutineMangledName assemblerRepresentation]
  ioLLVMcode += " (" + mLLVMTypeName + "* %target, " + mLLVMTypeName + "* %source) alwaysinline {\n"
  ioLLVMcode += "  %value = load " + mLLVMTypeName + ", " + mLLVMTypeName + "* %source\n"
  ioLLVMcode += "  store " + mLLVMTypeName + " %value, " + mLLVMTypeName + "* %target\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

