#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @booleanDeclaration : @abstractDeclaration {
  @lstring mBooleanTypeName
  @lstringlist mAttributeList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @booleanDeclaration location -> @location outLocation {
  outLocation = mBooleanTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclaration addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  !@abstractDeclaration outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let boolTypeName = @lstring.new {!"$" + mBooleanTypeName !mBooleanTypeName.location}
  [!?ioGraph addNode !boolTypeName !self]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @booleanDeclaration keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "bool $" + mBooleanTypeName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclaration enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
#---
  var copiable = true
  for (s) in mAttributeList do
    if s.string == "unique" then
      if not copiable then
        error s : "duplicated attribute"
      end
      copiable = false
    end
  end
#--- Enter in type map
  [!?ioContext.mTypeMap insertKey
    !lkey:mBooleanTypeName
    !llvmTypeName:"i1"
    !kind:.boolean
    !typedConstantMap:{}
    !functionMap:{}
    !instanciable:true
    !copiable:copiable
    !equatable:true
    !comparable:true
    !enumerationType:.null # Not enumerable
  ]
#--- Enter boolean type
  if ioContext.mBooleanType != .null then
    error mBooleanTypeName : "Boolean type already defined"
  end
  let boolType = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mBooleanTypeName}
  ioContext.mBooleanType = boolType
#--- Enter boolean operators
  enterBooleanOperators (
    !boolTypeName:mBooleanTypeName
    !?context:ioContext
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc enterBooleanOperators
  ?boolTypeName:@lstring inBooleanTypeName
  ?!context:@semanticContext ioContext
{
  let selfTypeProxy = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !inBooleanTypeName}
  let boolBoolOp = combineTypeNamesForInfixOperator (!inBooleanTypeName.string !inBooleanTypeName.string)
  [!?ioContext.mEqualOperatorMap insertKey
    !boolBoolOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!.icmp_eq}
  ]
  [!?ioContext.mNonEqualOperatorMap insertKey
    !boolBoolOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!.icmp_ne}
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !boolBoolOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!.icmp_ult}
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !boolBoolOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!.icmp_ule}
  ]
  [!?ioContext.mStrictSupOperatorMap insertKey
    !boolBoolOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!.icmp_ugt}
  ]
  [!?ioContext.mSupEqualOperatorMap insertKey
    !boolBoolOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!.icmp_uge}
  ]
  [!?ioContext.mBooleanXorOperatorMap insertKey
    !boolBoolOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!.xor}
  ]
  [!?ioContext.mNotOperatorMap insertKey
    !inBooleanTypeName
#    !selfTypeProxy
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclaration semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————



