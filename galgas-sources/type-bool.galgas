#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once boolTypeName -> @string {
  result = "bool"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @boolTypeAST : @abstractDeclarationAST {
}

#·······················································································································

override getter @boolTypeAST locationForErrorSignaling -> @location outLocation {
  outLocation = .nowhere
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @boolTypeAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let nodeName = [boolTypeName () nowhere]
  [!?ioGraph addNode !nodeName !self]
  [!?ioGraph addEdge !nodeName ![ctBoolTypeName () nowhere]]
}

#·······················································································································

override getter @boolTypeAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = boolTypeName ()
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @boolTypeAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
  let boolTypeName = [boolTypeName () nowhere]
  let boolType = boolType ()
  let ctBoolType = compileTimeBoolType ()
 #--- Enter type
  [!?ioContext.mTypeMap insertType !lkey: boolTypeName !type: boolType]
 #--- Enter not prefix operator
  var key = prefixOperatorMapKey (!boolType !.notOp !.nowhere)
  [!?ioContext.mPrefixOperatorMap insertKey !key !boolType !boolType !@boolNotOperator.new]
 #--- Enter | infix operator
  key = infixOperatorMapKey (!boolType !.bitWiseOrOp !.nowhere !boolType)
  [!?ioContext.mInfixOperatorMap insertKey !key !boolType !@inlineInfixOperatorUsage.new {!"or"}]
  key = infixOperatorMapKey (!ctBoolType !.bitWiseOrOp !.nowhere !boolType)
  [!?ioContext.mInfixOperatorMap insertKey !key !boolType !@inlineInfixOperatorUsage.new {!"or"}]
  key = infixOperatorMapKey (!boolType !.bitWiseOrOp !.nowhere !ctBoolType)
  [!?ioContext.mInfixOperatorMap insertKey !key !boolType !@inlineInfixOperatorUsage.new {!"or"}]
 #--- Enter ^ infix operator
  key = infixOperatorMapKey (!boolType !.bitWiseXorOp !.nowhere !boolType)
  [!?ioContext.mInfixOperatorMap insertKey !key !boolType !@inlineInfixOperatorUsage.new {!"xor"}]
  key = infixOperatorMapKey (!ctBoolType !.bitWiseXorOp !.nowhere !boolType)
  [!?ioContext.mInfixOperatorMap insertKey !key !boolType !@inlineInfixOperatorUsage.new {!"xor"}]
  key = infixOperatorMapKey (!boolType !.bitWiseXorOp !.nowhere !ctBoolType)
  [!?ioContext.mInfixOperatorMap insertKey !key !boolType !@inlineInfixOperatorUsage.new {!"xor"}]
 #--- Enter == infix operator
  key = infixOperatorMapKey (!boolType !.equal !.nowhere !boolType)
  [!?ioContext.mInfixOperatorMap insertKey !key !boolType !@inlineInfixOperatorUsage.new {!"icmp eq"}]
  key = infixOperatorMapKey (!ctBoolType !.equal !.nowhere !boolType)
  [!?ioContext.mInfixOperatorMap insertKey !key !boolType !@inlineInfixOperatorUsage.new {!"icmp eq"}]
  key = infixOperatorMapKey (!boolType !.equal !.nowhere !ctBoolType)
  [!?ioContext.mInfixOperatorMap insertKey !key !boolType !@inlineInfixOperatorUsage.new {!"icmp eq"}]
#--- Implicit conversion to i1 for test expressions
  key = @lstring.new {![boolType omnibusTypeDescriptionName] !.nowhere}
  [!?ioContext.mImplicitConversionToBooleanMap insertKey !key !@boolImplicitConverterToBoolean.new]
#--- Enter assignment operator
  key = assignmentOperatorKey (!boolType !.nowhere !boolType)
  [!?ioContext.mAssignmentOperatorMap insertKey !key !@simpleCopyAssignmentOperatorUsage.new]
  key = assignmentOperatorKey (!boolType !.nowhere !ctBoolType)
  [!?ioContext.mAssignmentOperatorMap insertKey !key !@simpleCopyAssignmentOperatorUsage.new]
#--- Copy from reference is used by dynamic arraies  
  let functionName = assignmentOperatorFuncName (!boolType !boolType)
  ioRoutineListIR += !@simpleAssignmentCopyRoutineIR.new {
    ![functionName nowhere]
    !isRequired: false
    !warnsIfUnused: false
    !boolType
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  IMPLICIT CONVERSION TO i1
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @boolImplicitConverterToBoolean : @abstractImplicitConverterToBoolean {
}

#·······················································································································

override method @boolImplicitConverterToBoolean generateConvertToBooleanCode
  ?let @objectIR inReceiverOperand
  ?let @location unused inErrorLocation
  ?!@semanticTemporariesStruct unused ioTemporaries
  ?!@instructionListIR unused ioInstructionGenerationList
  ?!alloca:@allocaList unused ioAllocaList
  !@implicitBooleanConversionResult outResult
{
  outResult = .llvmVariable {!name: [inReceiverOperand llvmName]}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  COMPILE TIME PREFIX OPERATOR
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @boolNotOperator : @prefixOperatorUsage {
}

#·······················································································································

override method @boolNotOperator generateCode
  ?let @objectIR inReceiverOperand
  ?let @location unused inOperatorLocation
  ?let @omnibusType inResultType
  ?noPanicCode: let @bool unused inDoNotGeneratePanicCode
  ?safeMode: let @bool unused inSafeMode
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@instructionListIR ioInstructionGenerationList
  !@objectIR outResultValue
{
  var receiverOperand = inReceiverOperand
  [!?ioInstructionGenerationList appendLoadWhenReference !?ioTemporaries !?receiverOperand]
  getNewTempValue (!inResultType !?ioTemporaries ?outResultValue)
  let s = [outResultValue llvmName] + " = xor i1 1, " + [receiverOperand llvmName]
  [!?ioInstructionGenerationList appendInstructionAsFreeString !s !{}]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

