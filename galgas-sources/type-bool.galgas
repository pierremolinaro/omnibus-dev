#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @booleanDeclarationAST : @abstractDeclarationAST {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @booleanDeclarationAST location -> @location outLocation {
  outLocation = .nowhere
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclarationAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addNode ![boolTypeName () nowhere] !self]
  [!?ioGraph noteNode !["$uint1" nowhere]]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @booleanDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "$bool"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once boolTypeName -> @string {
  result = "$bool"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@subprogramInvocationGraph ioSubprogramInvocationGraph
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!globalVariables:@globalVariableIRList unused ioGlobalVariableIRList
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
{
#---------- Property map
  @propertyMap propertyMap = {}
#  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap ![boolTypeName () nowhere] ?let boolTypeProxy]
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !.new {!"uint1" ![boolTypeName () nowhere]} ?let uint1TypeProxy]
#--- Add uint1 accessor
  [!?propertyMap addFunctionWithoutArgument
    !?ioSubprogramInvocationGraph
    !llvmBaseTypeName:boolTypeName ()
    !methodName:"uint1"
    !safe:true
    !resultTypeProxy:uint1TypeProxy
    !canMutateProperties:false
  ]
#---------- Define boolean type composition
  let booleanType = @PLMType.new {
    !propertyMap:propertyMap
    !classConstantMap:{}
    !constructorMap:{}
    !guardMap:{}
    !attributes:.instanciable | .equatable | .copyable
    !plmTypeDescriptionName:boolTypeName ()
    !kind:.boolean
    !llvmBaseTypeName:boolTypeName ()
  }
#---------- Enter in type map
  [!?ioContext.mTypeMap insertType !lkey:[boolTypeName () nowhere] !type:booleanType !index:[ioContext.mTypeMap count]]
#---------- Enter boolean operators
  enterBooleanOperators (!?context:ioContext)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc enterBooleanOperators
  ?!context:@semanticContext ioContext
{
  let selfType = [@unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap ![boolTypeName () nowhere]} type]
  let boolBoolOp = combineTypeNamesForInfixOperator (!boolTypeName () !boolTypeName ())
  [!?ioContext.mEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_eq}
  ]
  [!?ioContext.mNonEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ne}
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ult}
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ule}
  ]
  [!?ioContext.mStrictSupOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ugt}
  ]
  [!?ioContext.mSupEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_uge}
  ]
  [!?ioContext.mBooleanXorOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.xor}
  ]
  [!?ioContext.mOrOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.ior}
  ]
  [!?ioContext.mAndOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.and}
  ]
  [!?ioContext.mNotOperatorMap insertKey
    ![boolTypeName () nowhere]
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateBoolTypeLLVMCode ?!@string ioLLVMcode {
  ioLLVMcode += llvmTitleComment (!"GENERATED FUNCTIONS FOR $bool TYPE")
  let routineMangledName = routineMangledNameFromAST (
    !boolTypeName ()
    !["$uint1" nowhere]
    !{}
  )
  let functionName = llvmNameForFunction (!routineMangledName)
  ioLLVMcode += "define internal i1 @" + functionName + " (i1* %inValue) {\n"
  ioLLVMcode += "  %value = load i1, i1* %inValue\n"
  ioLLVMcode += "  ret i1 %value\n"
  ioLLVMcode += "}\n\n"
  ioLLVMcode += llvmSeparatorLine () + "\n"
  ioLLVMcode += "define internal void @plm.assign." + boolTypeName () + "." + boolTypeName () + " (i1* %target, i1*%source) {\n"
  ioLLVMcode += "  %value = load i1, i1* %source\n"
  ioLLVMcode += "  store i1 %value, i1* %target\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

