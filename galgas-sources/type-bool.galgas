#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @booleanDeclarationAST : @abstractDeclarationAST {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @booleanDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = .nowhere
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [!?ioGraph addNode ![boolTypeName () nowhere] !self]
  [!?ioGraph noteNode !["uint1" nowhere]]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @booleanDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = boolTypeName ()
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once boolTypeName -> @string {
  result = "bool"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanDeclarationAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR unused ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
#---------- Self type proxy
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !.new {!"uint1" ![boolTypeName () nowhere]} ?let uint1TypeProxy]
#--- Add uint1 accessor
  [!?ioContext.mRoutineMap addFunctionWithoutArgument
    !omnibusTypeDescriptionName: boolTypeName ()
    !llvmBaseTypeName:boolTypeName ()
    !methodName:["uint1" nowhere]
    !mode:.anySafeMode
    !resultTypeProxy:uint1TypeProxy
    ?routineLLVMName:*
  ]
#---------- Define boolean type composition
  let booleanType = @omnibusType.new {
    !propertyGetterMap:{}
    !propertySetterMap: {}
    !classConstantMap:{}
    !constructorMap:{}
    !subscript:.noSubscript
    !attributes:.instanciable | .equatable | .copyable
    !omnibusTypeDescriptionName:boolTypeName ()
    !kind:.boolean
    !llvmBaseTypeName: boolTypeName ()
  }
#---------- Enter in type map
  [!?ioContext.mTypeMap insertType
    !lkey:[boolTypeName () nowhere]
    !type:booleanType
  ]
#---------- Enter boolean operators
  let selfType = [@unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap ![boolTypeName () nowhere]} type]
  let boolBoolOp = combineTypeNamesForInfixOperator (!boolTypeName () !boolTypeName ())
  [!?ioContext.mEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_eq}
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ult}
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ule}
  ]
  [!?ioContext.mBooleanXorOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.xor}
  ]
  [!?ioContext.mOrOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.ior}
  ]
  [!?ioContext.mAndOperatorMap insertKey
    !boolBoolOp
    !selfType
    !@infixObjectObjectOperatorDescription.new {!.and}
  ]
  [!?ioContext.mNotOperatorMap insertKey
    ![boolTypeName () nowhere]
  ]
#---------- Enter boolean assignment function
#  let assignmentFunctionLLVMName = assignmentPrefix () + boolTypeName () + "." + boolTypeName ()
#  ioRoutineListIR += !@basicIntegerAssignFunctionIR.new {
#    ![assignmentFunctionLLVMName nowhere]
#    !isRequired:false
#    !warnsIfUnused:false
#    !"i1"
#  }


#  let key = @lstring.new {
#    ![selfType omnibusTypeDescriptionName] + " = " + [selfType omnibusTypeDescriptionName]
#    !["" nowhere]
#  }
#  let llvmAssignmentInstruction = @llvmGenerationInstruction.new {
#    !{!.string {!string: "call void @" + [assignmentFunctionLLVMName assemblerRepresentation] + "(i1* TGT, i1* SRC)"}
#    }
#  }
#  [!?ioContext.mAssignmentOperatorMap insertKey
#    !key 
#    !selfType
#    !{}
#    !selfType
#    !{}
#    !@ctTrueExpressionAST.new
#    !{!llvmAssignmentInstruction}
#  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION: INTEGER ASSIGN FROM SAME TYPE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#class @basicIntegerAssignFunctionIR : @abstractRoutineIR {
#  @string mLLVMTypeName
#}

#·······················································································································

#override method @basicIntegerAssignFunctionIR llvmCodeGeneration 
#  ?!@string ioLLVMcode
#  ?let @generationContext unused inGenerationContext
#  ?!@generationAdds unused ioGenerationAdds
#{
#  ioLLVMcode += "define internal void @" +[mRoutineMangledName assemblerRepresentation]
#  ioLLVMcode += " (" + mLLVMTypeName + "* %target, " + mLLVMTypeName + "* %source) alwaysinline {\n"
#  ioLLVMcode += "  %value = load " + mLLVMTypeName + ", " + mLLVMTypeName + "* %source\n"
#  ioLLVMcode += "  store " + mLLVMTypeName + " %value, " + mLLVMTypeName + "* %target\n"
#  ioLLVMcode += "  ret void\n"
#  ioLLVMcode += "}\n\n"
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

