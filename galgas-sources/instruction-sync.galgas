#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @guardedCommandAST {
  case boolean (@bool isWhileCommand # if false, it is an "until" command
                @expressionAST expression
                @location endOfExpression)

  case boolAndSync (@bool isWhileCommand # if false, it is an "until" command
                    @expressionAST expression
                    @bool warnsOnStaticExpression
                    @location endOfExpression
                    @lbool usesSelf
                    @lstringlist nameList
                    @effectiveArgumentListAST effectiveParameterListAST)
}

#·······················································································································

list @syncInstructionBranchListAST {
  @guardedCommandAST mGuardedCommand
  @instructionListAST mInstructionList
  @location mEndOfBranch
}

#·······················································································································

class @syncInstructionAST : @instructionAST {
  @syncInstructionBranchListAST mBranchList
  @location mEndOf_on_instruction
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <guarded_command> ?!@ast ioAST !@guardedCommandAST outGuardedCommand {
    $on$
    @expressionAST expression
    @location endOfExp
    @bool warnsOnStaticExpression
    select
      $($
      <expression> !?ioAST ?expression
      endOfExp = .here
      $)$
      warnsOnStaticExpression = true
    or
      expression = @literalBooleanInExpressionAST.new {!true}
      endOfExp = .here
      warnsOnStaticExpression = false
    end
    @lbool usesSelf
    select
      usesSelf = .new {!false !.here}
    or
      $self$
      usesSelf = .new {!true !.here}
      $.$
    end
    @lstringlist nameList = {}
    repeat
      $identifier$ ?var name
      nameList += !name
    while
      $.$
    end
    <effective_parameters> !?ioAST ?let effectiveParameterList ?*
    @bool isWhileCommand
    select
      $exit$
      isWhileCommand = false
    or
      isWhileCommand = true
    end
    outGuardedCommand = .boolAndSync {
      !isWhileCommand:isWhileCommand
      !expression:expression
      !warnsOnStaticExpression:warnsOnStaticExpression
      !endOfExpression:endOfExp
      !usesSelf:usesSelf
      !nameList:nameList
      !effectiveParameterListAST:effectiveParameterList
    }
  }
  
  #·····················································································································

  rule <guarded_command> ?!@ast ioAST !@guardedCommandAST outGuardedCommand {
    $on$
    $($
    <expression> !?ioAST ?let expression
    let endOfExp = @location.here
    $)$
    @bool isWhileCommand
    select
      $exit$
      isWhileCommand = false
    or
      isWhileCommand = true
    end
    outGuardedCommand = .boolean {
      !isWhileCommand:isWhileCommand
      !expression:expression
      !endOfExpression:endOfExp
    }
  }
  
  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    $sync$
    let startLocation = @location.here
    ${$
    @syncInstructionBranchListAST onInstructionBranchList = {}
    repeat
      <guarded_command> !?ioAST ?let @guardedCommandAST guardedCommand
      $:$
      <instructionList> !?ioAST ?let instructionList
      onInstructionBranchList += !guardedCommand !instructionList !.here
    while
    end
    ioInstructionList += !@syncInstructionAST.new {!startLocation !onInstructionBranchList !.here}
    $}$
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @syncInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for (* instructionList *) in mBranchList do
    [instructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @syncInstructionAST analyze
  ?self:let @PLMType inSelfType
  ?instructionAttributes:let @instructionAttributes inInstructionAttributes
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalValuedObjectMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  @syncInstructionBranchListIR onInstructionBranchListIR = {}
  for (guardedCommand instructionList endOfBranch) in mBranchList do
    [!?ioUniversalMap openOverrideForSelectBlock]
  #--- Guard
    @guardedCommandIR guardedCommandIR
    switch guardedCommand
    case boolean (isContinue expression endOfExpression) :
      @instructionListIR guardInstructionGenerationList = {}
      [expression analyzeExpression
        !self:inSelfType
        !contextFlags:.guard
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !optionalTargetType:voidType ()
        !context:inContext
        !mode:inCurrentMode
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !?instructionListIR:guardInstructionGenerationList
        ?result:let @objectIR sourceOperand
      ]
      if [sourceOperand plmTypeName] != boolTypeName () then
        error endOfExpression : "guarded expression should be boolean"
      elsif [sourceOperand isStatic] then
        warning endOfExpression : "guarded expression is static"
      end
      [!?guardInstructionGenerationList appendLoadWhenReference
        !?ioTemporaries
        !sourceOperand
        ?let sourceValue
      ]
      guardedCommandIR = .booleanGuard {
        !isWhileCommand:isContinue
        !instructionGenerationList:guardInstructionGenerationList
        !result:sourceValue
      }
    case boolAndSync (isContinue exp warnsOnStaticExpression endOfExp usesSelf nameList parameterList) :
      @instructionListIR boolExpInstructionGenerationList = {}
    #--- Analyze guard boolean expression
      [exp analyzeExpression
        !self:inSelfType
        !contextFlags:.guard
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !optionalTargetType:voidType ()
        !context:inContext
        !mode:inCurrentMode
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !?instructionListIR:boolExpInstructionGenerationList
        ?result:let @objectIR boolExpressionResult
      ]
      if [boolExpressionResult plmTypeName] != boolTypeName () then
        error endOfExp : "guarded expression should be boolean"
      elsif warnsOnStaticExpression && [boolExpressionResult isStatic] then
        warning endOfExp : "guarded expression is static"
      end
      [!?boolExpInstructionGenerationList appendLoadWhenReference
        !?ioTemporaries
        !boolExpressionResult
        ?let boolExpressionValue
      ]
    #--- Analyze synchronization
      @instructionListIR guardInstructionGenerationList = {}
      @procCallEffectiveParameterListIR guardEffectiveParameterListIR
      @lstring guardMangledName
      if usesSelf.bool then # self.p1.p2. … (…)
        if [inSelfType.kind isVoid] then
          error usesSelf : "'self' is not available in this context" : guardEffectiveParameterListIR, guardMangledName
        else
          var propertyList = nameList
          [!?propertyList popLast ?let guardName]
          @objectIR currentObject = .reference {!type:inSelfType !llvmName:llvmNameForSelf ()}
          for (propertyName) in propertyList do
            handlePropertyAccessInExpression (
              !?currentObject
              !propertyName
              !?temporary:ioTemporaries
              !?instructionListIR:ioInstructionGenerationList
            )
          end
          analyzeGuardCall (
            !self:inSelfType
            !receiver:currentObject
            !guardName:guardName
            !effective:parameterList
            !callerForInvocationGraph:inCallerNameForInvocationGraph
            !context:inContext
            !requiredMode:inCurrentMode
            !?temporary:ioTemporaries
            !?staticStringMap:ioGlobalLiteralStringMap
            !?variableMap:ioUniversalMap
            !?alloca:ioAllocaList
            !?instructionListIR:guardInstructionGenerationList
            ?effectiveIR:guardEffectiveParameterListIR
            ?guardMangledName: guardMangledName
          )
        end
      elsif [nameList length] == 1 then # Standalone guard: g (…)
        analyzeStandaloneGuardCall (
          !self:inSelfType
          !guardName:[nameList mValueAtIndex !0]
          !effective:parameterList
          !callerForInvocationGraph:inCallerNameForInvocationGraph
          !context:inContext
          !requiredMode:inCurrentMode
          !?temporary:ioTemporaries
          !?staticStringMap:ioGlobalLiteralStringMap
          !?variableMap:ioUniversalMap
          !?alloca:ioAllocaList
          !?instructionListIR:guardInstructionGenerationList
          ?effectiveIR:guardEffectiveParameterListIR
          ?guardMangledName: guardMangledName
        )
      else # Global variable method, or driver method: g.h. … (…)
        var propertyList = nameList
        [!?propertyList popFirst ?let globalReceiverName]
        [!?propertyList popLast ?let guardName]
        [ioUniversalMap searchValuedObject !globalReceiverName ?var currentObjectIR]
        for (propertyName) in propertyList do
          handlePropertyAccessInExpression (
            !?currentObjectIR
            !propertyName
            !?temporary:ioTemporaries
            !?instructionListIR:ioInstructionGenerationList
          )
        end
        analyzeGuardCall (
          !self:inSelfType
          !receiver:currentObjectIR
          !guardName:guardName
          !effective:parameterList
          !callerForInvocationGraph:inCallerNameForInvocationGraph
          !context:inContext
          !requiredMode:inCurrentMode
          !?temporary:ioTemporaries
          !?staticStringMap:ioGlobalLiteralStringMap
          !?variableMap:ioUniversalMap
          !?alloca:ioAllocaList
          !?instructionListIR:guardInstructionGenerationList
          ?effectiveIR:guardEffectiveParameterListIR
          ?guardMangledName: guardMangledName
        )
      end
      guardedCommandIR = .boolAndSync {
        !isWhileCommand:isContinue
        !boolExpInstructionGenerationList:boolExpInstructionGenerationList
        !boolExpResult:boolExpressionValue
        !guardMangledName:guardMangledName.string
        !guardInstructionGenerationList:guardInstructionGenerationList
        !effectiveParameterListIR:guardEffectiveParameterListIR
      }
    end
  #--- Instruction list
    @instructionListIR branchInstructionGenerationList = {}
    [instructionList analyzeBranchInstructionList
      !self:inSelfType
      !instructionAttributes:inInstructionAttributes
      !routineNameForInvocationGraph:inCallerNameForInvocationGraph
      !endOfInstructionList:endOfBranch
      !context:inContext
      !mode:inCurrentMode
      !?temporary:ioTemporaries
      !?staticStringMap:ioGlobalLiteralStringMap
      !?variableMap:ioUniversalMap
      !?alloca:ioAllocaList
      !?instructionListIR:branchInstructionGenerationList
    ]
    [!?ioUniversalMap closeOverride !endOfBranch]
  #---
    onInstructionBranchListIR +=
      !guardedCommandIR
      !branchInstructionGenerationList
  end
#--- Code generation
  ioInstructionGenerationList += !@syncInstructionIR.new {!mInstructionLocation !onInstructionBranchListIR}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeGuardCall
  ?self:let @PLMType inSelfType
  ?receiver:let @objectIR inReceiver
  ?guardName:let @lstring inGuardName
  ?effective:let @effectiveArgumentListAST inEffectiveParameterList
  ?callerForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?requiredMode:let @mode inRequiredMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalValuedObjectMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !effectiveIR:@procCallEffectiveParameterListIR outEffectiveParameterListIR
  !guardMangledName:@lstring outGuardMangledName
{
  let guardMap = [[inReceiver type] guardMap]
  let guardMangledName = routineMangledNameFromCall (!"" !inGuardName !inEffectiveParameterList)
  [guardMap searchKey !guardMangledName ?let isPublic ?let @routineTypedSignature formalSignature]
#--- Check accessibility
  if not isPublic then
    error inGuardName : "this guard is not public": outGuardMangledName, outEffectiveParameterListIR
  else  
    outGuardMangledName = routineMangledNameFromCall (
      !llvmTypeStringFromPLMname (![inReceiver type].plmTypeName)
      !inGuardName
      !inEffectiveParameterList
    )
  #--- Enter in invocation graph
    [!?ioTemporaries.mSubprogramInvocationGraph addEdge !inCallerNameForInvocationGraph !outGuardMangledName]
  #--- Analyze effective parameters
    outEffectiveParameterListIR = {!.outputInput !inReceiver}
    analyzeEffectiveParameters (
      !self:inSelfType
      !formal:formalSignature
      !effective:inEffectiveParameterList
      !errorLocation:inGuardName.location
      !callerForInvocationGraph:inCallerNameForInvocationGraph
      !context:inContext
      !requiredMode:inRequiredMode
      !?temporary:ioTemporaries
      !?staticStringMap:ioGlobalLiteralStringMap
      !?variableMap:ioUniversalMap
      !?alloca:ioAllocaList
      !?instructionListIR:ioInstructionGenerationList
      !?effectiveIR:outEffectiveParameterListIR
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeStandaloneGuardCall
  ?self:let @PLMType inSelfType
  ?guardName:let @lstring inGuardName
  ?effective:let @effectiveArgumentListAST inEffectiveParameterList
  ?callerForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?requiredMode:let @mode inRequiredMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalValuedObjectMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !effectiveIR:@procCallEffectiveParameterListIR outEffectiveParameterListIR
  !guardMangledName:@lstring outGuardMangledName
{
  outGuardMangledName = routineMangledNameFromCall (
    !""
    !inGuardName
    !inEffectiveParameterList
  )
  [inContext.mGuardMapForContext searchKey
    !outGuardMangledName
    ?let isPublic
    ?let @routineTypedSignature formalSignature
  ]
#--- Check accessibility
  if not isPublic then
    let @string declarationFile = [[inContext.mGuardMapForContext locationForKey !outGuardMangledName.string] file]
    let invocationFile = [inGuardName.location file]
    if invocationFile != declarationFile then
      error inGuardName : "this guard is not public"
    end
  end  
#--- Enter in invocation graph
  [!?ioTemporaries.mSubprogramInvocationGraph addEdge !inCallerNameForInvocationGraph !outGuardMangledName]
#--- Analyze effective parameters
  outEffectiveParameterListIR = {}
  analyzeEffectiveParameters (
    !self:inSelfType
    !formal:formalSignature
    !effective:inEffectiveParameterList
    !errorLocation:inGuardName.location
    !callerForInvocationGraph:inCallerNameForInvocationGraph
    !context:inContext
    !requiredMode:inRequiredMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    !?effectiveIR:outEffectiveParameterListIR
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @guardedCommandIR {
  case booleanGuard (@bool isWhileCommand # if false, it is an "until" command
                     @instructionListIR instructionGenerationList
                     @objectIR result)

  case boolAndSync (@bool isWhileCommand # if false, it is an "until" command
                    @instructionListIR boolExpInstructionGenerationList
                    @objectIR boolExpResult
                    @string guardMangledName
#                    @string globalVarName # "" if not global var
                    @instructionListIR guardInstructionGenerationList
                    @procCallEffectiveParameterListIR effectiveParameterListIR)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @syncInstructionBranchListIR {
  @guardedCommandIR mGuardedCommand
  @instructionListIR mInstructionGenerationList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @syncInstructionIR : @abstractInstructionIR {
  @location mSelectInstructionLocation
  @syncInstructionBranchListIR mOnInstructionBranchListIR
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @syncInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  ioGenerationAdds.mUsesGuards = true
  let startLabel = "select." + ioGenerationAdds.mUniqueIndex
  ioGenerationAdds.mUniqueIndex ++
#---
  ioLLVMcode += "  br label %" + startLabel + ".start\n\n"
  let startLabelName = startLabel + ".start" 
  ioLLVMcode += startLabelName + ":\n"
  let exitLabelName = startLabel + ".exit"
  let selectLabelName = startLabel + ".select"
  let errorLabelName = startLabel + ".error"
  var currentStartBranchLabel = startLabelName
  for branch in mOnInstructionBranchListIR do (idx)
    let acceptanceVarName = "%" + startLabel + ".accept." + idx
    @bool isWhileGuardedCommand
    switch branch.mGuardedCommand
    case booleanGuard (isWhileCommand instructionGenerationList @objectIR result) :
      isWhileGuardedCommand = isWhileCommand
      [instructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
      let acceptedLabelName = startLabel + "." + idx + ".true"
      let rejectedLabelName = startLabel + "." + idx + ".false"
      ioLLVMcode += "  br i1 " + [result llvmName] + ", label %" + acceptedLabelName + ", label %" + rejectedLabelName + "\n\n"
      ioLLVMcode += acceptedLabelName + ":\n"
      ioLLVMcode += "  call void @noteGuardHasBeenAccepted ()\n"
      ioLLVMcode += "  br label %" + rejectedLabelName + "\n\n"
      ioLLVMcode += rejectedLabelName + ":\n"
      ioLLVMcode += "  " + acceptanceVarName + " = or i1 " + [result llvmName] + ", 0 ; assignment\n"
    case boolAndSync (isWhileCommand expInstructionList expResult guardMangledName guardInstructionList effectiveParameterList) :
      isWhileGuardedCommand = isWhileCommand
      [expInstructionList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
      let testOkLabelName = startLabel + "." + idx + ".boolexp.true"
      let testExitLabelName = startLabel + "." + idx + ".test.exit"
      ioLLVMcode += "  br i1 " + [expResult llvmName] + ", label %" + testOkLabelName + ", label %" + testExitLabelName + "\n\n"
      ioLLVMcode += testOkLabelName + ":\n"
      [guardInstructionList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
      let guardAcceptationLabelName = startLabel + "." + idx + ".guard.acceptation"
      ioLLVMcode += "  %" + guardAcceptationLabelName + " = call i1 @" + llvmNameForGuardCall (!guardMangledName)
      ioLLVMcode += " ("
      for () in effectiveParameterList do
        switch mEffectiveParameterPassingMode
        case input:
          ioLLVMcode += [mParameter llvmTypeName] + " * " + [mParameter llvmName]
        case output:
          ioLLVMcode += [mParameter llvmTypeName] + " " + [mParameter llvmName]
        case outputInput:
          ioLLVMcode += [mParameter llvmTypeName] + " * " + [mParameter llvmName]
        end
      between
        ioLLVMcode += ", "
      end
      ioLLVMcode += ")\n"
      ioLLVMcode += "  br label %" + testExitLabelName + "\n\n"
      ioLLVMcode += testExitLabelName + ":\n"
      ioLLVMcode += "  " + acceptanceVarName + " = phi i1 "
      ioLLVMcode += "[%" + guardAcceptationLabelName + ", %" + testOkLabelName + "], "
      ioLLVMcode += "[false, %" + currentStartBranchLabel + "]\n"
    end
    let acceptedLabelName = startLabel + ".accepted." + idx
    let rejectedLabelName = startLabel + ".rejected." + idx
    ioLLVMcode += "  br i1 " + acceptanceVarName + ", label %" + acceptedLabelName + ", label %" + rejectedLabelName + "\n\n"
    ioLLVMcode += acceptedLabelName + ":\n"
    [branch.mInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
    ioLLVMcode += "  br label %" + if isWhileGuardedCommand then startLabelName else exitLabelName end + "\n\n"
    ioLLVMcode += rejectedLabelName + ":\n"
    currentStartBranchLabel = rejectedLabelName
  end
  ioLLVMcode += "  %" + selectLabelName + " = call i1 @" + llvmNameForServiceCall (!waitForGuardChangeFunctionName ()) + " ()\n"
  ioLLVMcode += "  br i1 %" + selectLabelName + ", label %" + startLabelName + ", label %" + errorLabelName + "\n\n"
  ioLLVMcode += errorLabelName + ":\n" # Error, all guards are closed
  if [option plm_options.noPanicGeneration value] then
    ioLLVMcode += "  br label %" + exitLabelName + "\n\n" # No panic generation, pass instruction
  else
    [!?ioGenerationAdds.mStaticStringMap findOrAddStaticString
      ![[[mSelectInstructionLocation file] lastPathComponent] stringByDeletingPathExtension]
      ?let staticStringIndex
    ]
    ioLLVMcode += "  call void @raise.panic." + staticStringIndex + " ("
    ioLLVMcode += inGenerationContext.mPanicLineLLVMType + " " + [mSelectInstructionLocation line] + ", "
    ioLLVMcode += inGenerationContext.mPanicCodeLLVMType + " " + panicCodeForClosedSync () + ")\n"
    ioLLVMcode += "  unreachable\n\n"
  end
  ioLLVMcode += exitLabelName + ":\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @syncInstructionIR enterAccessibleEntities
  ?!@accessibleEntities ioAccessibleEntities
  ?!@uint ioMaxBranchOfOnInstructions
{
  let branchCount = [mOnInstructionBranchListIR length]
  if ioMaxBranchOfOnInstructions < branchCount then
    ioMaxBranchOfOnInstructions = branchCount
  end
  for branch in mOnInstructionBranchListIR do
    [branch.mInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
    switch branch.mGuardedCommand
    case booleanGuard (* instructionGenerationList *) :
      [instructionGenerationList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
    case boolAndSync (* instructionGenerationList * guardMangledName guardInstructionGenerationList *) :
      [instructionGenerationList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
      [guardInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
      ioAccessibleEntities.mGuardSet += !guardMangledName
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
