#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                 *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @infixOperator {
  case equal
  case nonEqual
  case strictInf
  case strictSup
  case infEqual
  case supEqual
  case andOp
  case orOp
  case xorOp
  case booleanXorOp
  case addOp
  case addOpNoOvf
  case subOp
  case subOpNoOvf
  case mulOp
  case mulOpNoOvf
  case divOp
  case divOpNoOvf
  case modOp
  case modOpNoOvf
  case leftShiftOp
  case rightShiftOp
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @infixOperatorExpressionAST : @expressionAST {
  @expressionAST mLeftExpression
  @location mOperatorLocation
  @infixOperator mOp
  @expressionAST mRightExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @booleanShortCircuitAndOperatorExpressionAST : @expressionAST {
  @expressionAST mLeftExpression
  @location mOperatorLocation
  @expressionAST mRightExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                    *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @infixOperatorExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@constantPrecedenceGraph ioGraph
{
  [mLeftExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
  [mRightExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanShortCircuitAndOperatorExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@constantPrecedenceGraph ioGraph
{
  [mLeftExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
  [mRightExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                           *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @infixOperatorMap checkBinaryOperationWith
  ?leftType:let @unifiedTypeMap-proxy inLeftType
  ?rightType:let @unifiedTypeMap-proxy inRightType
  ?operatorLocation:let @location inOperatorLocation
  !resultType: @unifiedTypeMap-proxy outResultType
  !op:@infixOperatorDescription outOperation
{
  let lkey = combineTypeNamesForInfixOperator (![inLeftType key] ![inRightType key])
  if [self hasKey !lkey.string] then
    [self searchKey !lkey ?outResultType ?outOperation]
  else
    error inOperatorLocation
      : "infix operation between $" + [inLeftType key] + " and $" + [inRightType key] + " is not defined"
      : outResultType, outOperation
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @infixOperatorExpressionAST analyzeExpression
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@operandIR outResult
{
#------------------- Analyze left expression
  [mLeftExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?result:let @operandIR leftOperand
  ]
#------------------- Analyze right expression
  [mRightExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalTargetType:leftOperand.mType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?result:let @operandIR rightOperand
  ]
#------------------- Get operator map
  let operatorMap = getInfixOperatorMap (!mOp !context:inContext !modes:inModeSet !mOperatorLocation)
#------------------- Check operand types
  [operatorMap checkBinaryOperationWith
    !leftType:leftOperand.mType
    !rightType:rightOperand.mType
    !operatorLocation:mOperatorLocation
    ?resultType:let resultType
    ?op:let @infixOperatorDescription binaryOperator
  ]
#------------------- Generate code
  [binaryOperator generateInfixOperatorCode
    !?ioTemporaries
    !?ioInstructionGenerationList
    !leftOperand
    !mOperatorLocation
    !rightOperand
    !resultType
    ?outResult
  ]

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func getInfixOperatorMap
  ?let @infixOperator inOp
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?let @location inOperatorLocation
  -> @infixOperatorMap outOperatorMap
{
  switch inOp 
  case equal :
    outOperatorMap = inContext.mEqualOperatorMap
  case nonEqual :
    outOperatorMap = inContext.mNonEqualOperatorMap
  case strictInf :
    outOperatorMap = inContext.mStrictInfOperatorMap
  case infEqual :
    outOperatorMap = inContext.mInfEqualOperatorMap
  case strictSup :
    outOperatorMap = inContext.mStrictSupOperatorMap
  case supEqual :
    outOperatorMap = inContext.mSupEqualOperatorMap
  case andOp :
    outOperatorMap = inContext.mAndOperatorMap
  case orOp :
    outOperatorMap = inContext.mOrOperatorMap
  case xorOp :
    outOperatorMap = inContext.mXorOperatorMap
  case booleanXorOp :
    outOperatorMap = inContext.mBooleanXorOperatorMap
  case addOp :
    if [inModeSet hasKey !panicModeName ()] then
      error inOperatorLocation : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
    end
    if [option plm_options.noPanicGeneration value] then
      outOperatorMap = inContext.mAddNoOvfOperatorMap
    else
      outOperatorMap = inContext.mAddOperatorMap
    end
  case addOpNoOvf :
    outOperatorMap = inContext.mAddNoOvfOperatorMap
  case subOp :
    if [inModeSet hasKey !panicModeName ()] then
      error inOperatorLocation : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
    end
    if [option plm_options.noPanicGeneration value] then
      outOperatorMap = inContext.mSubNoOvfOperatorMap
    else
      outOperatorMap = inContext.mSubOperatorMap
    end
  case subOpNoOvf :
    outOperatorMap = inContext.mSubOperatorMap
  case mulOp :
    if [inModeSet hasKey !panicModeName ()] then
      error inOperatorLocation : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
    end
    if [option plm_options.noPanicGeneration value] then
      outOperatorMap = inContext.mMulNoOvfOperatorMap
    else
      outOperatorMap = inContext.mMulOperatorMap
    end
  case mulOpNoOvf :
    outOperatorMap = inContext.mMulNoOvfOperatorMap
  case divOp :
    if [inModeSet hasKey !panicModeName ()] then
      error inOperatorLocation : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
    end
    if [option plm_options.noPanicGeneration value] then
      outOperatorMap = inContext.mDivNoOvfOperatorMap
    else
      outOperatorMap = inContext.mDivOperatorMap
    end
  case divOpNoOvf :
    outOperatorMap = inContext.mDivNoOvfOperatorMap
  case modOp :
    if [inModeSet hasKey !panicModeName ()] then
      error inOperatorLocation : "operations that can generate exceptions are not allowed in `" + panicModeName () + " mode"
    end
    if [option plm_options.noPanicGeneration value] then
      outOperatorMap = inContext.mModNoOvfOperatorMap
    else
      outOperatorMap = inContext.mModOperatorMap
    end
  case modOpNoOvf :
    outOperatorMap = inContext.mModNoOvfOperatorMap
  case leftShiftOp :
    outOperatorMap = inContext.mLeftShiftOperatorMap
  case rightShiftOp :
    outOperatorMap = inContext.mRightShiftOperatorMap
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @booleanShortCircuitAndOperatorExpressionAST analyzeExpression
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@operandIR outResult
{
#--- Analyze left expression
  @instructionListIR leftInstructionGenerationList = {}
  [mLeftExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalTargetType:inOptionalTargetType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:leftInstructionGenerationList
    ?result:let @operandIR leftOperand
  ]
#--- Analyze right expression
  @instructionListIR rightInstructionGenerationList = {}
  [mRightExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalTargetType:leftOperand.mType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:rightInstructionGenerationList
    ?result:let @operandIR rightOperand
  ]
#--- Check left type is boolean
  if [leftOperand.mType kind] != .boolean then
    error mOperatorLocation : "left operand should be boolean"
  end
#--- Check right type is boolean
  if [rightOperand.mType kind] != .boolean then
    error mOperatorLocation : "left operand should be boolean"
  end
#--- Result type : bool 
  getNewTempVariable (!inContext.mBooleanType !?ioTemporaries ?outResult)
#--- Generate code
  [!?ioInstructionGenerationList appendShortCircuitAndOperation
    !outResult
    !leftOperand
    !leftInstructionGenerationList
    !rightOperand
    !rightInstructionGenerationList
    !mOperatorLocation
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract class @infixOperatorDescription {
  @llvmBinaryOperation mOperator
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @infixOperatorDescription generateInfixOperatorCode
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@instructionListIR ioInstructionGenerationList
  ?let @operandIR inLeftOperand
  ?let @location inOperatorLocation
  ?let @operandIR inRightOperand
  ?let @unifiedTypeMap-proxy inResultType
  !@operandIR outResultValue

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @infixOperatorDescription performStaticOperation
  ?let @bigint inLeft
  ?let @bigint inRight
  -> @bigint outResult
{
  switch mOperator
  case addNoOVF : outResult = inLeft + inRight
  case subNoOVF : outResult = inLeft - inRight
  case mulNoOVF : outResult = inLeft * inRight
  case udivNoOVF : outResult = inLeft / inRight
  case sdivNoOVF : outResult = inLeft / inRight
  case uremNoOVF : outResult = inLeft mod inRight
  case sremNoOVF : outResult = inLeft mod inRight

  case uaddOVF : outResult = inLeft + inRight
  case saddOVF : outResult = inLeft + inRight
  case usubOVF : outResult = inLeft - inRight
  case ssubOVF : outResult = inLeft - inRight
  case umulOVF : outResult = inLeft * inRight
  case smulOVF : outResult = inLeft * inRight
  case udivOVF : outResult = inLeft / inRight
  case sdivOVF : outResult = inLeft / inRight
  case uremOVF : outResult = inLeft mod inRight
  case sremOVF : outResult = inLeft mod inRight

  case and : outResult = inLeft & inRight
  case ior : outResult = inLeft | inRight
  case xor : outResult = inLeft ^ inRight
  case shl : outResult = inLeft << [inRight uint]
  case ashr : outResult = inLeft >> [inRight uint]
  case lshr : outResult = inLeft >> [inRight uint]
  
  case icmp_eq : outResult = [inLeft == inRight bigint]
  case icmp_ne : outResult = [inLeft != inRight bigint]
  case icmp_ult : outResult = [inLeft < inRight bigint]
  case icmp_ule : outResult = [inLeft <= inRight bigint]
  case icmp_ugt : outResult = [inLeft > inRight bigint]
  case icmp_uge : outResult = [inLeft >= inRight bigint]
  case icmp_slt : outResult = [inLeft < inRight bigint]
  case icmp_sle : outResult = [inLeft <= inRight bigint]
  case icmp_sgt : outResult = [inLeft > inRight bigint]
  case icmp_sge : outResult = [inLeft >= inRight bigint]


  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
