#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @llvmInfixOperatorAST : @abstractDeclarationAST {
  @omnibusInfixOperator mInfixOperator
  @location mInfixOperatorLocation
  @lstring mLeftOperandName
  @lstring mLeftTypeName
  @genericFormalParameterList mLeftGenericFormalParameterList
  @lstring mRightOperandName
  @lstring mRightTypeName
  @genericFormalParameterList mRightGenericFormalParameterList
 # @ctExpressionAST mWhereExpression
  @lstring mResultTypeName
  @genericFormalParameterList mResultGenericFormalParameterList # À modifier
  @llvmGenerationInstructionList mInstructionList
}

#·······················································································································

override getter @llvmInfixOperatorAST locationForErrorSignaling -> @location outLocation {
  outLocation = self.mInfixOperatorLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc appendInfixOperatorDeclaration
     ?let @omnibusInfixOperator inInfixOperator
     ?let @string inLLVMOperation
     ?let @string inTypeName
     ?let @string inResultOmnibusTypeName
     ?!@semanticTypePrecedenceGraph ioPrecedenceGraph
{
#--- Operator type --- type
  @llvmGenerationInstructionList llvmInstructionList = {}
  @llvmGenerationInstructionElementList instructionElements = {}
  instructionElements += !.symbol {!name: ["result" nowhere]}
  instructionElements += !.string {!string: " = " + inLLVMOperation + " "}
  instructionElements += !.type {!name: ["LEFT" nowhere]}
  instructionElements += !.string {!string: " "}
  instructionElements += !.symbol {!name: ["LEFT" nowhere]}
  instructionElements += !.string {!string: ", "}
  instructionElements += !.symbol {!name: ["RIGHT" nowhere]}
  llvmInstructionList += !@llvmGenerationInstruction.new {!{instructionElements}}
  @abstractDeclarationAST declaration = @llvmInfixOperatorAST.new {
    !inInfixOperator
    !.nowhere
    !["LEFT" nowhere]
    ![inTypeName nowhere]
    !{}
    !["RIGHT" nowhere]
    ![inTypeName nowhere]
    !{}
    ![inResultOmnibusTypeName nowhere]
    !{}
    !llvmInstructionList
  }
  [declaration enterInPrecedenceGraph !?ioPrecedenceGraph]
#--- Operator type --- ctInt
  llvmInstructionList = {}
  instructionElements = {}
  instructionElements += !.symbol {!name: ["result" nowhere]}
  instructionElements += !.string {!string: " = " + inLLVMOperation + " "}
  instructionElements += !.type {!name: ["LEFT" nowhere]}
  instructionElements += !.string {!string: " "}
  instructionElements += !.symbol {!name: ["LEFT" nowhere]}
  instructionElements += !.string {!string: ", "}
  instructionElements += !.symbol {!name: ["RIGHT" nowhere]}
  llvmInstructionList += !@llvmGenerationInstruction.new {!{instructionElements}}
  declaration = @llvmInfixOperatorAST.new {
    !inInfixOperator
    !.nowhere
    !["LEFT" nowhere]
    ![inTypeName nowhere]
    !{}
    !["RIGHT" nowhere]
    ![ctIntegerTypeName () nowhere]
    !{}
    ![inResultOmnibusTypeName nowhere]
    !{}
    !llvmInstructionList
  }
  [declaration enterInPrecedenceGraph !?ioPrecedenceGraph]
#--- Operator ctInt --- type
  llvmInstructionList = {}
  instructionElements = {}
  instructionElements += !.symbol {!name: ["result" nowhere]}
  instructionElements += !.string {!string: " = " + inLLVMOperation + " "}
  instructionElements += !.type {!name: ["RIGHT" nowhere]}
  instructionElements += !.string {!string: " "}
  instructionElements += !.symbol {!name: ["LEFT" nowhere]}
  instructionElements += !.string {!string: ", "}
  instructionElements += !.symbol {!name: ["RIGHT" nowhere]}
  llvmInstructionList += !@llvmGenerationInstruction.new {!{instructionElements}}
  declaration = @llvmInfixOperatorAST.new {
    !inInfixOperator
    !.nowhere
    !["LEFT" nowhere]
    ![ctIntegerTypeName () nowhere]
    !{}
    !["RIGHT" nowhere]
    ![inTypeName nowhere]
    !{}
    ![inResultOmnibusTypeName nowhere]
    !{}
    !llvmInstructionList
  }
  [declaration enterInPrecedenceGraph !?ioPrecedenceGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

 #·····················································································································

  rule <declaration> ?!@ast ioAST {
    <llvm_function_header> ?let leftVariableName ?let leftTypeName ?let leftGenericFormalParameterList
    let operationLocation = @location.here
    <compileTimeInfixOperator> ?let infixOperator
    $($
    $identifier$ ?let rightVariableName
    $\$type$ ?let rightType
    <generic_formal_arguments> ?let rightGenericFormalParameterList
    $)$
    $->$
    $\$type$ ?let resultType
    <generic_formal_arguments> ?let resultGenericFormalParameterList
    ${$
    <llvm_instruction_list> ?let instructionList
    $}$
    ioAST.mDeclarationListAST += !@llvmInfixOperatorAST.new {
      !infixOperator
      !operationLocation
      !leftVariableName
      !leftTypeName
      !leftGenericFormalParameterList
      !rightVariableName
      !rightType
      !rightGenericFormalParameterList
      !resultType
      !resultGenericFormalParameterList
      !instructionList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @llvmInfixOperatorAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let nodeName = @lstring.new {![self.mInfixOperator string] + "." + self.mLeftTypeName + "." + self.mRightTypeName !self.mInfixOperatorLocation}
  [!?ioGraph addNode !nodeName !self]
  [!?ioGraph addEdge !nodeName !self.mLeftTypeName]
  [!?ioGraph addEdge !nodeName !self.mRightTypeName]
  [!?ioGraph addEdge !nodeName !self.mResultTypeName]
}

#·······················································································································

override getter @llvmInfixOperatorAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = self.mLeftTypeName.string + " " + self.mInfixOperator + " " + self.mRightTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @llvmInfixOperatorAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
#--- Check types
  [@unifiedTypeMap-entry makeEntry !?ioContext.mTypeMap !self.mLeftTypeName ?let leftTypeProxy]
  let leftType = [leftTypeProxy type]
  [@unifiedTypeMap-entry makeEntry !?ioContext.mTypeMap !self.mRightTypeName ?let rightTypeProxy]
  let rightType = [rightTypeProxy type]
  [@unifiedTypeMap-entry makeEntry !?ioContext.mTypeMap !self.mResultTypeName ?let resultTypeProxy]
  let resultType = [resultTypeProxy type]
  if [leftType isCompileTimeType] & [rightType isCompileTimeType] then
    error self.mInfixOperatorLocation : "one of the two argument types should not be a compile time type"
  end
  [resultType checkIsNotCompileTimeType !self.mResultTypeName.location]
#--- Enter in infix operator map  
  let key = infixOperatorMapKey (!leftType !self.mInfixOperator !self.mInfixOperatorLocation !rightType)
#--- Generate function
  if not [leftType isCompileTimeType] & not [rightType isCompileTimeType] then
    let definition = @llvmInfixOperatorUsage.new {
      !infixOperatorFunctionName (!leftType !self.mInfixOperator !rightType)
      !self.mLeftOperandName
      !self.mRightOperandName
      !self.mInstructionList
    }
    [!?ioContext.mInfixOperatorMap insertKey !key !resultType !definition]
    @assignmentGenerationVarMap varMap = {}
    [!?varMap insertKey !self.mLeftOperandName !"%" + self.mLeftOperandName]
    [!?varMap insertKey !self.mRightOperandName !"%" + self.mRightOperandName]
    @assignmentGenerationVarMap typeMap = {}
    if not [leftType isCompileTimeType] then
      [!?typeMap insertKey !self.mLeftOperandName ![leftType llvmTypeName]]
    end
    if not [rightType isCompileTimeType] then
      [!?typeMap insertKey !self.mRightOperandName ![rightType llvmTypeName]]
    end
    [!?typeMap insertKey !["result" nowhere] ![resultType llvmTypeName]]
    @llvmGenerationInstructionList instructionList = {}
    instructionList += !@llvmVarInstruction.new {!["result" nowhere]}
    instructionList += self.mInstructionList
    [!?instructionList appendReturn !["result" nowhere] !["result" nowhere]]
    @stringlist generatedInstructions = {}
    @allocaList allocaList = {}
    @uint temporaryIndex = 0
    [instructionList generateIRCode !varMap !typeMap !?generatedInstructions !?temporaryIndex !?allocaList]
    let routine = @infixOperatorRoutineIR.new {
      !.new {!infixOperatorFunctionName (!leftType !self.mInfixOperator !rightType) !self.mInfixOperatorLocation}
      !isRequired: true
      !warnsIfUnused: false
      !leftType
      !self.mLeftOperandName.string
      !rightType
      !self.mRightOperandName.string
      !resultType
      !generatedInstructions
      !allocaList
    }
    ioRoutineListIR += !routine
  else # One argument is a compile time type
    let definition = @llvmInlineInfixOperatorUsage.new {
      !self.mLeftOperandName
      !self.mRightOperandName
      !self.mInstructionList
    }
    [!?ioContext.mInfixOperatorMap insertKey !key !resultType !definition]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   INFIX OPERATOR USAGE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @llvmInfixOperatorUsage : @omnibusInfixOperatorUsage {
  @string mInfixMangledFunctionName
  @lstring mLeftOperandName
  @lstring mRightOperandName
  @llvmGenerationInstructionList mInstructionList
}

#·······················································································································

override method @llvmInfixOperatorUsage generateCode
  ?let @objectIR inLeftOperand
  ?let @location inOperatorLocation
  ?let @objectIR inRightOperand
  ?let @omnibusType inResultType
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@allocaList unused ioAllocaList
  ?!@instructionListIR ioInstructionGenerationList
  !@objectIR outResultValue
{
#--- If reference, load it
  var leftOperand = inLeftOperand
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?leftOperand
  ]  
  var rightOperand = inRightOperand
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?rightOperand
  ]  
#--- New LLVM variable for result
  getNewTempValue (!inResultType !?ioTemporaries ?outResultValue)
  @procCallEffectiveParameterListIR argumentList = {}
  argumentList += !.output !leftOperand
  argumentList += !.output !rightOperand
  ioInstructionGenerationList += !@standaloneRoutineCallIR.new {
    !outResultValue
    !.new {!self.mInfixMangledFunctionName !inOperatorLocation}
    !self.mInfixMangledFunctionName
    !argumentList
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @llvmInlineInfixOperatorUsage : @omnibusInfixOperatorUsage {
  @lstring mLeftOperandName
  @lstring mRightOperandName
  @llvmGenerationInstructionList mInstructionList
}

#·······················································································································

override method @llvmInlineInfixOperatorUsage generateCode
  ?let @objectIR inLeftOperand
  ?let @location unused inOperatorLocation
  ?let @objectIR inRightOperand
  ?let @omnibusType inResultType
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@allocaList ioAllocaList
  ?!@instructionListIR ioInstructionGenerationList
  !@objectIR outResultValue
{
#--- If reference, load it
  var leftOperand = inLeftOperand
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?leftOperand
  ]  
  var rightOperand = inRightOperand
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?rightOperand
  ]  
#--- New LLVM variable for result
  getNewTempValue (!inResultType !?ioTemporaries ?outResultValue)
  @assignmentGenerationVarMap varMap = {}
  [!?varMap insertKey !self.mLeftOperandName ![leftOperand llvmName]]
  [!?varMap insertKey !self.mRightOperandName ![rightOperand llvmName]]
  [!?varMap insertKey !["result" nowhere] ![outResultValue llvmName]]
  @assignmentGenerationVarMap typeMap = {}
  if not [[leftOperand type] isCompileTimeType] then
    [!?typeMap insertKey !self.mLeftOperandName ![[leftOperand type] llvmTypeName]]
  end
  if not [[rightOperand type] isCompileTimeType] then
    [!?typeMap insertKey !self.mRightOperandName ![[rightOperand type] llvmTypeName]]
  end
  @stringlist generatedInstructions = {}
  [self.mInstructionList generateIRCode !varMap !typeMap !?generatedInstructions !?ioTemporaries.mTemporaryIndex !?ioAllocaList]
  for (str) in generatedInstructions do
    [!?ioInstructionGenerationList appendInstructionAsFreeString !str !{}]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @infixOperatorRoutineIR : @abstractRoutineIR {
  @omnibusType mTargetType
  @string mTargetVarName
  @omnibusType mSourceType
  @string mSourceVarName
  @omnibusType mResultType
  @stringlist mGeneratedInstructions
  @allocaList mAllocaList
}

#·······················································································································

override method @infixOperatorRoutineIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "define internal " + [self.mResultType llvmTypeName] + " @" + [self.mRoutineMangledName assemblerRepresentation]
  ioLLVMcode += " (" + [self.mTargetType llvmTypeName] + " %" + self.mTargetVarName
             + ", " + [self.mSourceType llvmTypeName] + " %" + self.mSourceVarName + ") nounwind {\n"
  [self.mAllocaList generateAllocaList !?ioLLVMcode]
  for (instruction) in self.mGeneratedInstructions do
    ioLLVMcode += "  " + instruction + "\n"
  end
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

