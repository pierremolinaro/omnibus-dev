#—————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @truncateExpressionAST : @expressionAST {
  public var @expressionAST mExpression
  public var @lstring mTypeName
  public var @location mEndOfExpression
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    $truncate$
    let @lstring typeName
    select
      typeName = ["" here]
    or
      <type_definition> !?ioAST ?typeName
    end
    $($
    <expression> !?ioAST ?outExpression
    let endOfExpression = @location.here
    $)$
    outExpression = @truncateExpressionAST.init {
      !outExpression
      !typeName
      !endOfExpression
    }
  }

  #·····················································································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @truncateExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [self.mExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
  if self.mTypeName.string != "" then
    [!?ioGraph noteNode !self.mTypeName]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @truncateExpressionAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [self.mExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  if self.mTypeName.string != "" then
    [!?ioGraph noteNode !self.mTypeName]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! @truncateExpressionAST
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @truncateExpressionAST analyzeExpression
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?optionalTargetType:let @omnibusType inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- Analyze expression
  [self.mExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:voidType ()
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR expressionResult
  ]
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?expressionResult
  ]  
#--- Analyze type
  let @omnibusType resultType = if self.mTypeName.string == ""
    then inOptionalTargetType
    else [[inContext.mTypeMap searchKey !self.mTypeName] type]
  end
#--- Check types
  if not [resultType.kind isInteger] then
    error self.mTypeName : "this type is not an integer type" : outResult
  elsif not [[expressionResult type].kind isInteger] then
    error self.mEndOfExpression : "expression type is not an integer type" : outResult
  else
    [[expressionResult type].kind extractInteger ?min:let minSource ?max:let maxSource ?1* ?bitCount:let expSize]
    [resultType.kind extractInteger ?min:let minTarget ?max:let maxTarget ?unsigned:* ?bitCount:let resultSize]
    let alwaysPossible = (minTarget <= minSource) && (maxTarget >= maxSource)
    if alwaysPossible then
      error self.mTypeName:"useless explicit conversion"
    end
    if resultSize < expSize then
      getNewTempValue (!resultType !?ioTemporaries ?outResult)
      ioInstructionGenerationList += !@truncateInstructionIR.init {
        !outResult
        !expressionResult
      }
    else
      outResult = [expressionResult withType !resultType]
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! @truncateInstructionIR
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @truncateInstructionIR : @abstractInstructionIR {
  public var @objectIR mTarget
  public var @objectIR mOperand
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @truncateInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let operandType = [self.mOperand llvmTypeName]
  ioLLVMcode += "  " + [self.mTarget llvmName] + " = trunc " + operandType + " " + [self.mOperand llvmName]
     + " to " + [self.mTarget llvmTypeName] + "\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
