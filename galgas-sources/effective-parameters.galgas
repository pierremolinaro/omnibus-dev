#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @effectiveArgumentPassingModeAST {
  case input (@lstring name)
  case inputWithType (@bool constant @lstring typeName @lstring name)
  case output (@expressionAST exp @location endOfExp)
  case outputInput (@lstring name)
  case outputInputSelfVariable (@lstring name)
}

#·······················································································································

getter @effectiveArgumentPassingModeAST matchingFormalArgument -> @string {
  switch self 
  case input (*) : result = "!"
  case inputWithType (* * *) : result = "!"
  case output (* *) : result = "?"
  case outputInput (*) : result = "?!"
  case outputInputSelfVariable (*) : result = "?!"
  end
}

#·······················································································································

list @effectiveArgumentListAST {
  @effectiveArgumentPassingModeAST mEffectiveParameterKind
  @lstring mSelector
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX                                                                                                               
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <effective_parameters> !@effectiveArgumentListAST outEffectiveParameterList !@location outEndOfArgs {
    outEffectiveParameterList = {}
    $($
    repeat
    while
      $!$ ?let selector
      <expression> ?let expression
      outEffectiveParameterList += !.output{!exp:expression !endOfExp:.here} !selector
    while
      $!?$ ?let selector
      $identifier$ ?let effectiveParameterName
      outEffectiveParameterList += !.outputInput{!name:effectiveParameterName} !selector
    while
      $!?$ ?let selector
      $self$
      $.$
      $identifier$ ?let effectiveParameterName
      outEffectiveParameterList += !.outputInputSelfVariable{!name:effectiveParameterName} !selector
    while
      $?$ ?let selector
      $identifier$ ?let effectiveParameterName
      outEffectiveParameterList += !.input{!name:effectiveParameterName} !selector
    while
      $?$ ?let selector
      @bool constant
      select
        $var$
        constant = false
      or
        $let$
        constant = true
      end
      $identifier$ ?let effectiveParameterName
      @lstring typeName
      select
        typeName = ["" nowhere]
      or
        $\$type$ ?typeName
      end
      outEffectiveParameterList += 
        !.inputWithType{!constant:constant !typeName:typeName !name:effectiveParameterName}
        !selector
    end
    outEndOfArgs = .here
    $)$
  }

  #·····················································································································

}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS                                                                                                            
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeEffectiveParameters
  ?self:let @PLMType inSelfType
  ?formal:let @routineTypedSignature inFormalSignature
  ?effective:let @effectiveArgumentListAST inEffectiveParameterList
  ?errorLocation:let @location inErrorLocation
  ?callerForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?requiredMode:let @mode inRequiredMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  ?!effectiveIR:@procCallEffectiveParameterListIR ioEffectiveParameterListIR
{
#--- Analyze effective parameters
  @procEffectiveParameterList parameterList = {}
  for () formal_ in inFormalSignature, () effective_ in inEffectiveParameterList do
    switch effective_mEffectiveParameterKind 
    case inputWithType (@bool constant @lstring typeName @lstring name) :
      let type = if typeName.string == "" then
        [formal_mTypeProxy type]
      else
        [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !typeName} type]
      end
      if constant then
        [!?ioUniversalMap insertLocalConstant !name !type !name]
      else
        [!?ioUniversalMap insertLocalVariable !name !type !name !.hasUnreadValue !false]
      end
      ioAllocaList += !name ![type llvmTypeName]
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector !type
      ioEffectiveParameterListIR +=
        !.input
        !.llvmTemporaryValue {!type:type !llvmName:.new {!llvmNameForLocalVariable (!name) !name}}
    case input (@lstring name) :
      [!?ioUniversalMap searchValuedObjectForWriteAccess !name ?let objectIR]
#      if not accessIsAllowed then
#        error name : "routine has no access right on the this variable"
#      end
#      if not canBeUsedAsInputParameter then
#        error name : "this variable cannot be used as input parameter"
#      end
#      if not isCopyable then
#        error name : "an $" + [type key] + " instance is not copyable"
#      end
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector ![objectIR type]
      ioEffectiveParameterListIR +=
        !.input
        !.llvmTemporaryValue {
          !type:[objectIR type]
          !llvmName:.new {!llvmNameForLocalVariable (![objectIR name])
          ![objectIR location]}
        }
    case output (@expressionAST expression @location endOfExp) :
      [expression analyzeExpression
        !self:inSelfType
        !inGuard:false
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !optionalTargetType:[formal_mTypeProxy type]
        !context:inContext
        !mode:inRequiredMode
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !?instructionListIR:ioInstructionGenerationList
        ?result:let @objectIR expressionResult
      ]
      [!?ioInstructionGenerationList appendLoadFromReference
        !?ioTemporaries
        !expressionResult
        !endOfExp
        ?let expressionValue
      ]  
      let result = checkAssignmentCompatibility (
        !source:expressionValue
        !targetAnnotationType:[formal_mTypeProxy type]
        !errorLocation:endOfExp
        !staticTypeAllowed:false
      )
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector ![formal_mTypeProxy type]
      ioEffectiveParameterListIR += !.output !result
    case outputInput (@lstring name) :
      [!?ioUniversalMap searchValuedObjectForReadWriteAccess !name ?let objectIR]
#      if not canBeUsedAsInputParameter then
#        error name : "this variable cannot be used as output/input parameter"
#      end
#      if not accessIsAllowed then
#        error name : "routine has no access right on the this variable"
#      end
      parameterList += !effective_mEffectiveParameterKind !effective_mSelector ![objectIR type]
      let argumentIR = @objectIR.llvmTemporaryValue {
        !type:[objectIR type]
        !llvmName:.new {![objectIR llvmName] ![objectIR location]}
      }
      ioEffectiveParameterListIR += !.outputInput !argumentIR
    case outputInputSelfVariable (@lstring name) :
      switch inSelfType
      case void :
        error name : "'self' is not available in this context" :parameterList, ioEffectiveParameterListIR
      case opaque (* * *) :
        error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
      case arrayType (* * * * * *) :
        error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
      case boolean :
        error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
      case staticInteger :
        error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
       case literalString :
        error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
      case enumeration (* *) :
        error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
      case function (* * *) :
        error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
      case pointer (*) :
        error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
      case integer (* * * * *) :
        error name : "a structure type is required here" : parameterList, ioEffectiveParameterListIR
      case structure (* propertyMap * * *) :
        [propertyMap searchKey !name ?* ?let propertyObject ?2*]
        getNewTempVariable (![propertyObject type] !name !?ioTemporaries ?let fieldObjectReference)
        [!?ioInstructionGenerationList appendPropertyReferenceFromSelf
          !fieldObjectReference
          !inSelfType
          !name
        ]        
        parameterList += !effective_mEffectiveParameterKind !effective_mSelector ![propertyObject type]
        ioEffectiveParameterListIR +=
          !.outputInput
          !fieldObjectReference
      end    
    end
  end
#--- Check parameters
  if [inFormalSignature length] != [inEffectiveParameterList length] then
    error inErrorLocation: "this routine requires " + [inFormalSignature length] + " argument(s), this call names "
      + [inEffectiveParameterList length] + " argument(s)"
  else
    for () formal_ in inFormalSignature, () actual_ in parameterList do
      if [formal_mTypeProxy key] != [actual_mParameterType key] then
        error actual_mSelector : "the actual parameter type is '" + [actual_mParameterType key] +
           "', and is incompatible with the formal type '" + [formal_mTypeProxy key] + "'"
      end
      let requiredPassingMode = [formal_mFormalArgumentPassingMode requiredActualPassingModeForSelector !formal_mSelector]
      let testedPassingMode = [actual_mEffectiveParameterPassingMode passingModeForActualSelector !actual_mSelector]
      if requiredPassingMode != testedPassingMode then
        error actual_mSelector : "the required selector is '" + requiredPassingMode + "'"
      end
    end  
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
