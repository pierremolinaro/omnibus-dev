lexique plm_lexique {

@string tokenString
@bigint bigInteger

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   Identifiers and keywords                                                                                           *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#! Identifiers and keywords

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

style keywordsStyle -> "Keywords"

$identifier$ ! tokenString error message "an identifier"

list keyWordList style keywordsStyle error message "the '%K' keyword" {
  "and",
  "assert",
  "at",
  "boolset",
  "boot",
  "case",
  "check",
  "convert",
  "do",
  "else",
  "elsif",
  "end",
  "enum",
  "extend",
  "false",
  "for",
  "func",
  "if",
  "import",
  "in",
  "init",
  "let",
  "mutating",
  "mode",
  "not",
  "or",
  "panic",
  "pointerSize",
  "proc",
  "register",
  "required",
  "requiredBy",
  "self",
  "signedIntegerType",
  "struct",
  "target",
  "then",
  "true",
  "truncate",
  "unsignedIntegerType",
  "var",
  "while",
  "xor"
}

rule 'a'->'z' | 'A'->'Z' {
  repeat
    enterCharacterIntoString (!?tokenString !*)
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end
  send search tokenString in keyWordList default $identifier$
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   Attributes                                                                                                         *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#! Attributes

style attributeStyle -> "Attributes"

$attribute$ ! tokenString  style attributeStyle error message "an attribute @..."

message attributeError : "in an attribute name, a letter, a digit or a dot should follow the '@' character"

rule '@' {
  select
  case 'a'->'z' | 'A'->'Z' | '0'->'9' :
    repeat
      enterCharacterIntoString (!?tokenString !*)
    while 'a'->'z' | 'A'->'Z'| '0'->'9' | '.' :
    end
  default
    error attributeError
  end
  send $attribute$ 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   Type Name                                                                                                          *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#! Type

style typeStyle -> "Types"

$typeName$ ! tokenString  style typeStyle error message "a type $..."

message typeError : "in a type name, a letter or a digit should follow the '$' character"

rule '$' {
  select
  case 'a'->'z' | 'A'->'Z' | '0'->'9' :
    repeat
      enterCharacterIntoString (!?tokenString !*)
    while 'a'->'z' | 'A'->'Z'| '0'->'9' :
    end
  default
    error typeError
  end
  send $typeName$ 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   Mode Name                                                                                                          *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#! Mode

style modeStyle -> "Modes"

$modeName$ ! tokenString  style modeStyle error message "a mode `..."

message modeError : "in a mode name, a letter or a digit should follow the '`' character"

rule '`' {
  select
  case 'a'->'z' | 'A'->'Z' | '0'->'9' :
    repeat
      enterCharacterIntoString (!?tokenString !*)
    while 'a'->'z' | 'A'->'Z'| '0'->'9' :
    end
  default
    error modeError
  end
  send $modeName$ 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   Literal integers                                                                                                   *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#! Hex integers

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

rule "0x" {
  repeat
  while '0'->'9' :
    enterCharacterIntoString (!?tokenString !* )
  while 'a'->'f' :
    enterCharacterIntoString (!?tokenString !* )
  while 'A'->'F' :
    enterCharacterIntoString (!?tokenString !* )
  while '_' :
  end
  convertHexStringIntoBigInt (!tokenString !?bigInteger error internalError )
  send $integer$
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#! Literal decimal integers

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

style integerStyle -> "Integer Constants"
$integer$ !bigInteger style integerStyle error message "a literal integer"

message internalError : "internal error"

rule '0'->'9' {
  enterCharacterIntoString (!?tokenString !*)
  repeat
  while '0'->'9' :
    enterCharacterIntoString (!?tokenString !*)
  while '_' :
  end
  convertDecimalStringIntoBigInt (!tokenString !?bigInteger error internalError)
  send $integer$
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   Literal character strings                                                                                          *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#! Literal character strings

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

style stringStyle -> "Literal Strings"
$literal_string$ ! tokenString style stringStyle %nonAtomicSelection error message "a literal character string \"...\""


message incorrectStringEnd : "string does not end with '\"'"

rule '"' {
  repeat
   while ' ' | '!' | '#'-> '\uFFFD' :
    enterCharacterIntoString (!?tokenString !*)
  end
  select
  case '"' :
    send $literal_string$
  default
    error incorrectStringEnd
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   Comment                                                                                                            *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#! Comment

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

style commentStyle -> "Comments"
$comment$ style commentStyle %nonAtomicSelection error message "a comment"
rule "//" {
  repeat
  while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
  end
  drop $comment$
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   Delimiters                                                                                                         *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#! Delimiters

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

style delimitersStyle -> "Delimiters"
list delimitorsList style delimitersStyle error message "the '%K' delimitor" {
  ":", ".",  ",", ";", "{", "}", "=", "(", ")",
  "==", "!=", "<", "<=", ">", ">=", "[", "]", "<<", ">>",
  "~",
  "->", "::",
  "|", "|=",
  "&", "&=",
  "^", "^=",
  "+", "+%", "+=", "+%=",
  "-", "-%", "-=", "-%=",
  "*", "*%", "*=", "*%=",
  "/", "!/", "/=", "!/=",
  "%", "!%",  "%=", "!%="
}

rule list delimitorsList

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#   S E L E C T O R S                                                                                                  *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#! Selectors

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

style selectorStyle -> "Selectors"

$?$ !tokenString  style selectorStyle error message "the '?' or '?selector:' delimitor"
$?!$ !tokenString  style selectorStyle error message "the '?!' or '?!selector:' delimitor"
$!$ !tokenString  style selectorStyle error message "the '!' or '!selector:' delimitor"
$!?$ !tokenString  style selectorStyle error message "the '!?' or '!?selector:' delimitor"

rule '?' {
  tag onlyInterrogationMark
  select
  case '!' :
    tag onlyExclamationInterrogationMark
    select
    case 'a' -> 'z' | 'A' ->'Z' :
      repeat
        enterCharacterIntoString ( !?tokenString !* )
      while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
      end
      select
      case ':' :
        send $?!$
      default
        resetString ( !?tokenString )
        rewind onlyExclamationInterrogationMark send $?!$
      end
    default
      send $?!$
    end
  case 'a' -> 'z' | 'A' ->'Z' :
    repeat
      enterCharacterIntoString ( !?tokenString !* )
    while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
    end
    select
    case ':' :
      send $?$
    default
      resetString ( !?tokenString )
      rewind onlyInterrogationMark send $?$
    end
  default
    send $?$
  end
}

rule '!' {
  tag onlyExclamationMark
  select
  case '?' :
    tag onlyInterrogationExclamationMark
    select
    case 'a' -> 'z' | 'A' ->'Z' :
      repeat
        enterCharacterIntoString ( !?tokenString !* )
      while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
      end
      select
      case ':' :
        send $!?$
      default
        resetString ( !?tokenString )
        rewind onlyInterrogationExclamationMark send $!?$
      end
    default
      send $!?$
    end
  case 'a' -> 'z' | 'A' ->'Z' :
    repeat
      enterCharacterIntoString ( !?tokenString !* )
    while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
    end
    select
    case ':' :
      send $!$
    default
      resetString ( !?tokenString )
      rewind onlyExclamationMark send $!$
    end
  default
    send $!$
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   Separators                                                                                                         *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#! Separators

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

rule '\u0001' -> ' ' {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

}

