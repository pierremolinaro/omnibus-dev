lexique omnibus_lexique {

  @string tokenString
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  #! Identifiers and keywords
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
  style keywordsStyle -> "Keywords"
  
  $identifier$ ! tokenString error message "an identifier"
  
  list keyWordList style keywordsStyle error message "the '%K' keyword" {
    "addressof",
    "and",
    "assert",
    "boot",
    "case",
    "check",
    "convert",
    "compiletime",
    "driver",
    "else",
    "enum",
    "event",
    "exit",
    "extend",
    "extern",
    "for",
    "func",
    "guard",
    "if",
    "import",
    "in",
    "interrupt",
    "let",
    "no",
    "not",
    "opaque",
    "option",
    "or",
    "panic",
    "primitive",
    "public",
    "registers",
    "required",
    "safe",
    "section",
    "self",
    "service",
    "sizeof",
    "startup",
    "struct",
    "staticArray",
    "switch",
    "sync",
    "target",
    "task",
    "truncate",
    "typealias",
    "var",
    "user",
    "while",
    "xor",
    "yes"
  }
  
  rule isUnicodeLetter {
    repeat
      enterCharacterIntoString (!?tokenString !*)
    while isUnicodeLetter | '_' | '0'->'9' :
    end
    send search tokenString in keyWordList default $identifier$
  }
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  #! Attributes
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
  style attributeStyle -> "Attributes"
  
  $@attribute$ ! tokenString  style attributeStyle error message "an attribute @..."
  
  message attributeError : "in an attribute name, a letter, a digit or a dot should follow the '@' character"
  
  rule '@' {
    select
    case isUnicodeLetter | '0'->'9' :
      repeat
        enterCharacterIntoString (!?tokenString !*)
      while isUnicodeLetter | '0'->'9' | '.' :
      end
    default
      error attributeError
    end
    send $@attribute$ 
  }
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  #! Literal integer
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
  style integerStyle -> "Integer Constants"
  @bigint bigInteger
  $integer$ !bigInteger style integerStyle error message "a literal integer"
  
  message internalError : "internal error"
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
  message binaryDigitError : "0b should be followed by a binary digit"
  
  rule "0b" {
    repeat
    while '_' :
    end
    select
    case '0'->'1' :
      enterBinaryDigitIntoBigInt (!* !?bigInteger error internalError)
      repeat
      while '0'->'1' :
        enterBinaryDigitIntoBigInt (!* !?bigInteger error internalError)
      while '_' :
      end
      send $integer$
    default
      error binaryDigitError
    end
  }
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
  message hexDigitError : "0x should be followed by a hexadecimal digit"
  
  rule "0x" {
    repeat
    while '_' :
    end
    select
    case '0'->'9' | 'a'->'f' | 'A'->'F' :
      enterHexDigitIntoBigInt (!* !?bigInteger error internalError)
      repeat
      while '0'->'9' | 'a'->'f' | 'A'->'F' :
        enterHexDigitIntoBigInt (!* !?bigInteger error internalError)
      while '_' :
      end
      send $integer$
    default
      error hexDigitError
    end
  }
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
  rule '0'->'9' {
    enterDecimalDigitIntoBigInt (!* !?bigInteger error internalError)
    repeat
    while '0'->'9' :
      enterDecimalDigitIntoBigInt (!* !?bigInteger error internalError)
    while '_' :
    end
    send $integer$
  }
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  #! Literal character strings
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
  style stringStyle -> "Literal Strings"
  $"string"$ ! tokenString style stringStyle %nonAtomicSelection error message "a literal character string \"...\""
  
  message incorrectStringEnd : "string does not end with '\"'"
  
  rule '"' {
    repeat
    while "\\\"" :
      enterCharacterIntoString (!?tokenString !'"')
    while ' ' | '!' | '#'-> '\uFFFD' :
      enterCharacterIntoString (!?tokenString !*)
    end
    select
    case '"' :
      send $"string"$
    default
      error incorrectStringEnd
    end
  }
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  #! Comment
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
  style commentStyle -> "Comments"
  $comment$ style commentStyle %nonAtomicSelection error message "a comment"
  $commentMark$  style commentStyle %nonAtomicSelection error message "a comment"
  rule "//!" {
    repeat
    while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
    end
    drop $commentMark$
  }
  rule "//" {
    repeat
    while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
    end
    drop $comment$
  }
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  #! Delimiters
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
  style delimitersStyle -> "Delimiters"
  list delimitorsList style delimitersStyle error message "the '%K' delimitor" {
    ":", ".",  ",", "{", "}", "=", "(", ")", "_",
    "==", "≠", "<", "≤", ">", "≥",
    "[", "]", "]!", "<<", ">>",
    "~",
    "->", "..<", "...",
    "|", "|=",
    "&", "&=",
    "^", "^=",
    "+", "+%", "+=", "+%=",
    "-", "-%", "-=", "-%=",
    "*", "*%", "*=", "*%=",
    "/", "!/", "/=", "!/=",
    "%", "!%",  "%=", "!%=",
    "<<=", ">>="
  }
  
  rule list delimitorsList
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  #! Selectors
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
  style selectorStyle -> "Selectors"
  
  $?selector:$ !tokenString  style selectorStyle error message "the '?' or '?selector:' delimitor"
  $?!selector:$ !tokenString  style selectorStyle error message "the '?!' or '?!selector:' delimitor"
  $!selector:$ !tokenString  style selectorStyle error message "the '!' or '!selector:' delimitor"
  $!?selector:$ !tokenString  style selectorStyle error message "the '!?' or '!?selector:' delimitor"
  
  rule '?' {
    tag onlyInterrogationMark
    select
    case '!' :
      tag onlyExclamationInterrogationMark
      select
      case 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' :
        repeat
          enterCharacterIntoString (!?tokenString !* )
        while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
        end
        select
        case ':' :
          send $?!selector:$
        default
          resetString (!?tokenString )
          rewind onlyExclamationInterrogationMark send $?!selector:$
        end
      default
        send $?!selector:$
      end
    case 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' :
      repeat
        enterCharacterIntoString (!?tokenString !* )
      while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
      end
      select
      case ':' :
        send $?selector:$
      default
        resetString (!?tokenString )
        rewind onlyInterrogationMark send $?selector:$
      end
    default
      send $?selector:$
    end
  }
  
  rule '!' {
    tag onlyExclamationMark
    select
    case '?' :
      tag onlyInterrogationExclamationMark
      select
      case 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' :
        repeat
          enterCharacterIntoString (!?tokenString !* )
        while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
        end
        select
        case ':' :
          send $!?selector:$
        default
          resetString (!?tokenString )
          rewind onlyInterrogationExclamationMark send $!?selector:$
        end
      default
        send $!?selector:$
      end
    case 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' :
      repeat
        enterCharacterIntoString (!?tokenString !* )
      while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
      end
      select
      case ':' :
        send $!selector:$
      default
        resetString (!?tokenString )
        rewind onlyExclamationMark send $!selector:$
      end
    default
      send $!selector:$
    end
  }
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  #! Type Name                                                                                                           
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
  style typeStyle -> "Types"
  
  $\$type$ ! tokenString  style typeStyle error message "a type $..."
  
  message typeError : "in a type name, a letter or a digit should follow the '$' character"
  
  rule '$' {
    select
    case isUnicodeLetter :
      repeat
        enterCharacterIntoString (!?tokenString !*)
      while isUnicodeLetter | '0' -> '9' | '_' :
      end
    default
      error typeError
    end
    send $\$type$ 
  }
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  #! Group Name                                                                                                           
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
  style groupStyle -> "Control Register Groups"
  
  $©group$ ! tokenString  style groupStyle error message "a control register group ©..."
  
  message groupError : "in a register group name, a letter or a digit should follow the '©' character"
  
  rule '©' {
    select
    case isUnicodeLetter :
      repeat
        enterCharacterIntoString (!?tokenString !*)
      while isUnicodeLetter | '0' -> '9' | '_' :
      end
    default
      error groupError
    end
    send $©group$ 
  }
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  #! Separators
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
  rule '\u0001' -> ' ' {
  }
  
  #—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

}

