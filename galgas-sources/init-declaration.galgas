#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

sortedlist @initList {
  @location mInitLocation
  @instructionListAST mInstructionList
  @location mEndOfInitLocation
  @uint64 mPriority
  @location mPriorityLocation
}{
  mPriority <
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <declaration> ?!@ast ioAST {
    $init$
    $integer$ ?let @luint64 priority
    ${$
    <instructionList> ?let instructionList
    let endOfInit = @location.here
    $}$
    ioAST.mInitList +=
      !priority.location
      !instructionList
      !endOfInit
      !priority.uint64
      !priority.location
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTIC ANALYSIS                                                                                                   *
#----------------------------------------------------------------------------------------------------------------------*

map @initRoutinePriorityMap {
  insert insertKey error message "an init routine with priority %K has been already declared"
}

#----------------------------------------------------------------------------------------------------------------------*

method @initList-element initSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  if not [inContext.mModeMap hasKey !"init"] then
    error mInitLocation : "the $init mode should be defined in order to use init routines"
  end
  [!?ioTemporaries.mInitRoutinePriorityMap insertKey !.new{![mPriority string] !mPriorityLocation}]
#---
  let routineNameForInvocationGraph = @lstring.new  {!"init " + mPriority !mPriorityLocation}
  if not [ioTemporaries.mSubprogramInvocationGraph isNodeDefined !routineNameForInvocationGraph.string] then
    [!?ioTemporaries.mSubprogramInvocationGraph addNode
      !routineNameForInvocationGraph
      !routineNameForInvocationGraph
    ]
  end
#--- Variable map
  @variableMap variableMap = initialVariableMap (!context:inContext !globalsAreConstant:false)
#--- Analyze instruction list
  @instructionListIR instructionGenerationList = {}
  [mInstructionList analyzeRoutineInstructionList
    !routineNameForInvocationGraph:routineNameForInvocationGraph
    !optionalReceiverType:.noReceiver
    !context:inContext
    !modes:{!"init"}
    !allowException:true
    !?temporary:ioTemporaries
    !?staticStringMap:ioIntermediateCodeStruct.mGlobalLiteralStringMap
    !?variableMap:variableMap
    !?generatedCode:instructionGenerationList
  ]
#---
  [variableMap checkAutomatonStates !mEndOfInitLocation]
#--- Code generation
  ioIntermediateCodeStruct.mInitList +=
    !mInitLocation
    !instructionGenerationList
    !mEndOfInitLocation
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

list @initListIR {
  @location mInitLocation
  @instructionListIR mInstructionListIR
  @location mEndOfInitLocation
}

#----------------------------------------------------------------------------------------------------------------------*

