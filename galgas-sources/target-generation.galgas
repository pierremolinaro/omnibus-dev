#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension plm_specific_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <declaration> ?!@ast ioAST {
    $target$
    $literal_string$ ?let targetName
    ioAST.mTargetList += !targetName
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#    TARGET GENERATION                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

filewrapper targetTemplates in "../embedded-sources/targets" {
  "py", "ld", "c", "s", "plm", "plm-target", "ll"
}{
}{
}

#----------------------------------------------------------------------------------------------------------------------*

proc generateTarget
  ?currentDir:let @string inCurrentDirectory
  ?productDirectory:let @string inProductDirectory
  ?targetName:let @lstring inTargetName
{
#--- Copy make.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:"make.py"
    !to:inProductDirectory + "/sources/make.py"
  )
#--- Copy plm.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:"plm.py"
    !to:inProductDirectory + "/sources/plm.py"
  )
#--- Copy linker.ld
  copyTextFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/linker.ld"
    !to:inProductDirectory + "/sources/linker.ld"
  )
#--- Copy build.py
  var optimizationOption = "disable-opt"
  var optimizationOptionCount = 0
  if [option plm_options.optimization1 value] then
    optimizationOption = "O1"
    optimizationOptionCount ++
  end
  if [option plm_options.optimization2 value] then
    optimizationOption = "O2"
    optimizationOptionCount ++
  end
  if [option plm_options.optimization3 value] then
    optimizationOption = "O3"
    optimizationOptionCount ++
  end
  if [option plm_options.optimizationS value] then
    optimizationOption = "Os"
    optimizationOptionCount ++
  end
  if [option plm_options.optimizationZ value] then
    optimizationOption = "Oz"
    optimizationOptionCount ++
  end
  if optimizationOptionCount > 1 then
    warning .nowhere : "several optimization options: --" + optimizationOption + " is used"
  end 
  copyExecutableFileWithSubstitution (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/build.py"
    !to:inProductDirectory + "/build.py"
    !substitute:"<<OPTIMIZATION_OPTION>>"
    !with:optimizationOption
  )
#--- Copy build-verbose.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/build-verbose.py"
    !to:inProductDirectory + "/build-verbose.py"
  )
#--- Copy clean.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/clean.py"
    !to:inProductDirectory + "/clean.py"
  )
#--- Copy objsize.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/objsize.py"
    !to:inProductDirectory + "/objsize.py"
  )
#--- Copy objdump.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/objdump.py"
    !to:inProductDirectory + "/objdump.py"
  )
#--- Copy run.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/run.py"
    !to:inProductDirectory + "/run.py"
  )
}

#----------------------------------------------------------------------------------------------------------------------*

private proc copyExecutableFile
  ?currentDir:let @string inCurrentDirectory
  ?from:let @string inSourceFileNamePath
  ?to:let @string inDestinationAbsoluteFilePath
{
  if [option plm_options.useDirAsTargetDir value] == "" then # From embedded file
    let fw = [filewrapper targetTemplates]
    let s = [fw textFileContentsAtPath !inSourceFileNamePath]
    [s writeToExecutableFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
  else
    let targetDefinitionDir = [[option plm_options.useDirAsTargetDir value] absolutePathFromPath !inCurrentDirectory]
    let s = @string.stringWithContentsOfFile {!targetDefinitionDir + "/" + inSourceFileNamePath}
    [s writeToExecutableFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

private proc copyExecutableFileWithSubstitution
  ?currentDir:let @string inCurrentDirectory
  ?from:let @string inSourceFileNamePath
  ?to:let @string inDestinationAbsoluteFilePath
  ?substitute:let @string inSubstitutionString
  ?with:let @string inReplacementString
{
  if [option plm_options.useDirAsTargetDir value] == "" then # From embedded file
    let fw = [filewrapper targetTemplates]
    let s = [fw textFileContentsAtPath !inSourceFileNamePath]
    let s2 = [s stringByReplacingStringByString !inSubstitutionString !inReplacementString]
    [s2 writeToExecutableFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
  else
    let targetDefinitionDir = [[option plm_options.useDirAsTargetDir value] absolutePathFromPath !inCurrentDirectory]
    let s = @string.stringWithContentsOfFile {!targetDefinitionDir + "/" + inSourceFileNamePath}
    let s2 = [s stringByReplacingStringByString !inSubstitutionString !inReplacementString]
    [s2 writeToExecutableFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

private proc copyTextFile
  ?currentDir:let @string inCurrentDirectory
  ?from:let @string inSourceFileNamePath
  ?to:let @string inDestinationAbsoluteFilePath
{
  if [option plm_options.useDirAsTargetDir value] == "" then # From embedded file
    let fw = [filewrapper targetTemplates]
    let s = [fw textFileContentsAtPath !inSourceFileNamePath]
    [s writeToFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
  else
    let targetDefinitionDir = [[option plm_options.useDirAsTargetDir value] absolutePathFromPath !inCurrentDirectory]
    let s = @string.stringWithContentsOfFile {!targetDefinitionDir + "/" + inSourceFileNamePath}
    [s writeToFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

func getTargetTextFile
  ?currentDir:let @string inCurrentDirectory
  ?from:let @string inTargetFile
  -> @string outContents
{
  if [option plm_options.useDirAsTargetDir value] == "" then # From embedded file
    let fw = [filewrapper targetTemplates]
    outContents = [fw textFileContentsAtPath !inTargetFile]
  else
    let targetDefinitionDir = [[option plm_options.useDirAsTargetDir value] absolutePathFromPath !inCurrentDirectory]
    outContents = @string.stringWithContentsOfFile {!targetDefinitionDir + "/" + inTargetFile}
  end
}

#----------------------------------------------------------------------------------------------------------------------*

