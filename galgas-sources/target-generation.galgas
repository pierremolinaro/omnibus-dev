#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension plm_specific_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <declaration> ?!@ast ioAST {
    $target$
    $literal_string$ ?let targetName
    ioAST.mTargetList += !targetName
    if [targetName.string pathExtension] != "plms" then
      error targetName : "the pah extension should be .plms"
    end
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#    TARGET GENERATION                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

filewrapper targetTemplates in "../embedded-sources" {
  "py", "ld", "mke", "h", "c", "s", "plm", "plms"
}{
}{
}

#----------------------------------------------------------------------------------------------------------------------*

proc generateTargets
  ?targetDirectory:let @string inTargetDirectory
  ?targetName:let @lstring inTargetName
  !filesToInclude:@stringlist outFilesToInclude
{
  outFilesToInclude = {}
  @filewrapper fw = [filewrapper targetTemplates]
  let targetPath = "/targets/" + [inTargetName.string stringByDeletingPathExtension]
  if [fw directoryExistsAtPath !targetPath] then
    for (path) in [fw textFilesAtPath !targetPath] do
      let s = [fw textFileContentsAtPath !targetPath + "/" + path]
      if [path pathExtension] == "py" then
        [s writeToExecutableFileWhenDifferentContents !inTargetDirectory + "/" + path ?*]      else
        [s writeToFileWhenDifferentContents !inTargetDirectory + "/" + path ?*]
      end
    end
    let sourcePath = targetPath + "/sources"
    for (file) in [fw textFilesAtPath !sourcePath] do
      if file == "linker-script.ld" then
        let s = [fw textFileContentsAtPath !sourcePath + "/" + file]
        [s writeToFileWhenDifferentContents !inTargetDirectory + "/sources/" + file ?*]
      elsif file == "target.c" then
        let s = [fw textFileContentsAtPath !sourcePath + "/" + file]
        [s writeToFileWhenDifferentContents !inTargetDirectory + "/sources/" + file ?*]
        outFilesToInclude += !file
      elsif (file == "target-exception.c") && not [option plm_options.noExceptionGeneration value] then
        let s = [fw textFileContentsAtPath !sourcePath + "/" + file]
        [s writeToFileWhenDifferentContents !inTargetDirectory + "/sources/" + file ?*]
        outFilesToInclude += !file
      end
    end
  else
    var s = "cannot find this target; available targets:"
    for (dir) in [fw directoriesAtPath !""] do
      s += "\n - " + dir
    end
    error inTargetName : s
  end
}

#----------------------------------------------------------------------------------------------------------------------*

