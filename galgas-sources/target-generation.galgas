#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $target$
    $"string"$ ?let targetName
    ioAST.mTargetListAST += !targetName
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    TARGET LIST OPTION                                                                                                 
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

before {
  let @filewrapper fw = [filewrapper targetTemplates]
  if [option plm_options.listEmbeddedTargets value] then
    let embeddedFiles = [fw allTextFilePathes]
    message "Embedded targets:\n"
    for (f) in embeddedFiles do
      if [f pathExtension] == "plm-target" then
        message "  " + [[f lastPathComponent] stringByDeletingPathExtension] + '\n'
      end
    end
  end
  let path = [option plm_options.extractEmbeddedTargets value]
  if path != "" then
    let embeddedFiles = [fw allTextFilePathes]
    for (f) in embeddedFiles do
      let filePath = path + f
        message "  " + filePath + '\n'
        let dir = [filePath stringByDeletingLastPathComponent]
        [dir makeDirectory]
        let text = [fw textFileContentsAtPath !f]
        [text writeToFileWhenDifferentContents !filePath ?*]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    TARGET GENERATION                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

filewrapper targetTemplates in "../embedded-sources/targets" {
  "py", "ld", "c", "s", "plm", "plm-target", "ll"
}{
}{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateTarget
  ?currentDir:let @string inCurrentDirectory
  ?productDirectory:let @string inProductDirectory
  ?targetName:let @lstring inTargetName
  ?targetParameters:let @targetParameters inTargetParameters
{
#--- Copy makefile.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:"makefile.py"
    !to:inProductDirectory + "/sources/makefile.py"
  )
#--- Copy plm.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:"toolpath.py"
    !to:inProductDirectory + "/sources/toolpath.py"
  )
#--- Copy check-stacks.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:"check-stacks.py"
    !to:inProductDirectory + "/sources/check-stacks.py"
  )
#--- Copy plm.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:"plm.py"
    !to:inProductDirectory + "/sources/plm.py"
  )
#--- Copy linker.ld
  copyFileWithSubstitutions (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/linker.ld"
    !to:inProductDirectory + "/sources/linker.ld"
    !{!"!SYSTEMSTACKSIZE!" ![inTargetParameters.mSystemStackSize.bigint string]}
  )
#--- Copy build.py
  var opt_optimizationOption = "disable-opt"
  var llc_optimizationOption = "O0"
  var optimizationOptionCount = 0
  if [option plm_options.optimization1 value] then
    opt_optimizationOption = "O1"
    llc_optimizationOption = "O1"
    optimizationOptionCount ++
  end
  if [option plm_options.optimization2 value] then
    opt_optimizationOption = "O2"
    llc_optimizationOption = "O2"
    optimizationOptionCount ++
  end
  if [option plm_options.optimizationS value] then
    opt_optimizationOption = "Os"
    llc_optimizationOption = "O2"
    optimizationOptionCount ++
  end
  if [option plm_options.optimizationZ value] then
    opt_optimizationOption = "Oz"
    llc_optimizationOption = "O2"
    optimizationOptionCount ++
  end
  if [option plm_options.optimizationZ3 value] then
    opt_optimizationOption = "O3"
    llc_optimizationOption = "O3"
    optimizationOptionCount ++
  end
  if optimizationOptionCount > 1 then
    warning .nowhere : "several optimization options: --" + opt_optimizationOption + " is used"
  end 
  copyExecutableFileWithSubstitutions (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/build.py"
    !to:inProductDirectory + "/build.py"
    !{!"<<OPT_OPTIMIZATION_OPTION>>" !opt_optimizationOption, !"<<LLC_OPTIMIZATION_OPTION>>" !llc_optimizationOption}
  )
#--- Copy build-verbose.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/build-verbose.py"
    !to:inProductDirectory + "/build-verbose.py"
  )
#--- Copy clean.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/clean.py"
    !to:inProductDirectory + "/clean.py"
  )
#--- Copy objsize.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/objsize.py"
    !to:inProductDirectory + "/objsize.py"
  )
#--- Copy objdump.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/objdump.py"
    !to:inProductDirectory + "/objdump.py"
  )
#--- Copy run.py
  copyExecutableFile (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/run.py"
    !to:inProductDirectory + "/run.py"
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc copyExecutableFile
  ?currentDir:let @string inCurrentDirectory
  ?from:let @string inSourceFileNamePath
  ?to:let @string inDestinationAbsoluteFilePath
{
  if [option plm_options.useDirAsTargetDir value] == "" then # From embedded file
    let fw = [filewrapper targetTemplates]
    let s = [fw textFileContentsAtPath !inSourceFileNamePath]
    [s writeToExecutableFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
  else
    let targetDefinitionDir = [[option plm_options.useDirAsTargetDir value] absolutePathFromPath !inCurrentDirectory]
    let s = @string.stringWithContentsOfFile {!targetDefinitionDir + "/" + inSourceFileNamePath}
    [s writeToExecutableFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc copyExecutableFileWithSubstitutions
  ?currentDir:let @string inCurrentDirectory
  ?from:let @string inSourceFileNamePath
  ?to:let @string inDestinationAbsoluteFilePath
  ?let @2stringlist inSubstitutions
{
  @string s
  if [option plm_options.useDirAsTargetDir value] == "" then # From embedded file
    let fw = [filewrapper targetTemplates]
    s = [fw textFileContentsAtPath !inSourceFileNamePath]
  else
    let targetDefinitionDir = [[option plm_options.useDirAsTargetDir value] absolutePathFromPath !inCurrentDirectory]
    s = @string.stringWithContentsOfFile {!targetDefinitionDir + "/" + inSourceFileNamePath}
  end
  for (templateString replacementString) in inSubstitutions do
    s = [s stringByReplacingStringByString !templateString !replacementString]
  end
  [s writeToExecutableFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc copyFileWithSubstitutions
  ?currentDir:let @string inCurrentDirectory
  ?from:let @string inSourceFileNamePath
  ?to:let @string inDestinationAbsoluteFilePath
  ?let @2stringlist inSubstitutions
{
  @string s
  if [option plm_options.useDirAsTargetDir value] == "" then # From embedded file
    let fw = [filewrapper targetTemplates]
    s = [fw textFileContentsAtPath !inSourceFileNamePath]
  else
    let targetDefinitionDir = [[option plm_options.useDirAsTargetDir value] absolutePathFromPath !inCurrentDirectory]
    s = @string.stringWithContentsOfFile {!targetDefinitionDir + "/" + inSourceFileNamePath}
  end
  for (templateString replacementString) in inSubstitutions do
    s = [s stringByReplacingStringByString !templateString !replacementString]
  end
  [s writeToFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func getTargetTextFile
  ?currentDir:let @string inCurrentDirectory
  ?from:let @string inTargetFile
  -> @string outContents
{
  if [option plm_options.useDirAsTargetDir value] == "" then # From embedded file
    let fw = [filewrapper targetTemplates]
    outContents = [fw textFileContentsAtPath !inTargetFile]
  else
    let targetDefinitionDir = [[option plm_options.useDirAsTargetDir value] absolutePathFromPath !inCurrentDirectory]
    outContents = @string.stringWithContentsOfFile {!targetDefinitionDir + "/" + inTargetFile}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

