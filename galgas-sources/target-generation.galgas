#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $target$
    $"string"$ ?let targetName
    ioAST.mTargetListAST += !targetName
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    TARGET LIST OPTION                                                                                                 
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

before {
#--- List targets
  let @filewrapper fw = [filewrapper targetTemplates]
  if [option plm_options.listTargets value] then
    let targetDirectoryOption = [option plm_options.useDirAsTargetDir value]
    if targetDirectoryOption == "" then
      let embeddedFiles = [fw allTextFilePathes]
      message "Embedded targets:\n"
      for (f) in embeddedFiles do
        if [f lastPathComponent] == "+config.plm-target" then
          let targetName = [[f stringByDeletingLastPathComponent] subStringFromIndex !1]
          message "  " + targetName + '\n'
        end
      end
    else
      let targetDirectory = [targetDirectoryOption absolutePathFromPath !.stringWithCurrentDirectory]
      message "Targets in '" + targetDirectory + "' directory\n"
      let allConfigFiles = [targetDirectory regularFilesWithExtensions !true !{!"plm-target"}]
      for (f) in allConfigFiles do
        if [f lastPathComponent] == "+config.plm-target" then
          message "  " + [f stringByDeletingLastPathComponent] + '\n'
        end
      end
    end
  end
#--- Extract embedded targets
  let path = [option plm_options.extractEmbeddedTargets value]
  if path != "" then
    let embeddedFiles = [fw allTextFilePathes]
    for (f) in embeddedFiles do
      let filePath = path + f
      message "  " + filePath + '\n'
      let dir = [filePath stringByDeletingLastPathComponent]
      [dir makeDirectory]
      let text = [fw textFileContentsAtPath !f]
      [text writeToFileWhenDifferentContents !filePath ?*]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    TARGET GENERATION                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

filewrapper targetTemplates in "../embedded-sources/targets" {
  "py", "ld", "cpp", "s", "plm", "plm-target", "ll", "txt"
}{
}{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateTarget
  ?currentDir:let @string inCurrentDirectory
  ?productDirectory:let @string inProductDirectory
  ?targetName:let @lstring inTargetName
  ?targetParameters:let @targetParameters inTargetParameters
{
#--- Copy python utility scripts
  for (relativePath destinationFile) in inTargetParameters.mPython_utilityToolList do
    copyExecutableFile (
      !currentDir:inCurrentDirectory
      !from:inTargetName.string + "/" + relativePath
      !to:inProductDirectory + "/" + destinationFile
    )
  end
#--- Copy linker.ld
  copyFileWithSubstitutions (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/" + inTargetParameters.mLinkerScript
    !to:inProductDirectory + "/sources/linker.ld"
    !{!"!SYSTEMSTACKSIZE!" ![inTargetParameters.mSystemStackSize.bigint string]}
  )
#--- Copy build.py
  var opt_optimizationOption = "disable-opt"
  var llc_optimizationOption = "O0"
  var optimizationOptionCount = 0
  if [option plm_options.optimization1 value] then
    opt_optimizationOption = "O1"
    llc_optimizationOption = "O1"
    optimizationOptionCount ++
  end
  if [option plm_options.optimization2 value] then
    opt_optimizationOption = "O2"
    llc_optimizationOption = "O2"
    optimizationOptionCount ++
  end
  if [option plm_options.optimizationS value] then
    opt_optimizationOption = "Os"
    llc_optimizationOption = "O2"
    optimizationOptionCount ++
  end
  if [option plm_options.optimizationZ value] then
    opt_optimizationOption = "Oz"
    llc_optimizationOption = "O2"
    optimizationOptionCount ++
  end
  if [option plm_options.optimizationZ3 value] then
    opt_optimizationOption = "O3"
    llc_optimizationOption = "O3"
    optimizationOptionCount ++
  end
  if optimizationOptionCount > 1 then
    warning .nowhere : "several optimization options: --" + opt_optimizationOption + " is used"
  end 
  copyExecutableFileWithSubstitutions (
    !currentDir:inCurrentDirectory
    !from:inTargetName.string + "/" + inTargetParameters.mPython_build
    !to:inProductDirectory + "/build.py"
    !{!"<<OPT_OPTIMIZATION_OPTION>>" !opt_optimizationOption, !"<<LLC_OPTIMIZATION_OPTION>>" !llc_optimizationOption}
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc copyExecutableFile
  ?currentDir:let @string inCurrentDirectory
  ?from:let @string inSourceFileNamePath
  ?to:let @string inDestinationAbsoluteFilePath
{
  if [option plm_options.useDirAsTargetDir value] == "" then # From embedded file
    let fw = [filewrapper targetTemplates]
    let s = [fw textFileContentsAtPath !inSourceFileNamePath]
    [s writeToExecutableFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
  else
    let targetDefinitionDir = [[option plm_options.useDirAsTargetDir value] absolutePathFromPath !inCurrentDirectory]
    let s = @string.stringWithContentsOfFile {!targetDefinitionDir + "/" + inSourceFileNamePath}
    [s writeToExecutableFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc copyExecutableFileWithSubstitutions
  ?currentDir:let @string inCurrentDirectory
  ?from:let @string inSourceFileNamePath
  ?to:let @string inDestinationAbsoluteFilePath
  ?let @2stringlist inSubstitutions
{
  @string s
  if [option plm_options.useDirAsTargetDir value] == "" then # From embedded file
    let fw = [filewrapper targetTemplates]
    s = [fw textFileContentsAtPath !inSourceFileNamePath]
  else
    let targetDefinitionDir = [[option plm_options.useDirAsTargetDir value] absolutePathFromPath !inCurrentDirectory]
    s = @string.stringWithContentsOfFile {!targetDefinitionDir + "/" + inSourceFileNamePath}
  end
  for (templateString replacementString) in inSubstitutions do
    s = [s stringByReplacingStringByString !templateString !replacementString]
  end
  [s writeToExecutableFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc copyFileWithSubstitutions
  ?currentDir:let @string inCurrentDirectory
  ?from:let @string inSourceFileNamePath
  ?to:let @string inDestinationAbsoluteFilePath
  ?let @2stringlist inSubstitutions
{
  @string s
  if [option plm_options.useDirAsTargetDir value] == "" then # From embedded file
    let fw = [filewrapper targetTemplates]
    s = [fw textFileContentsAtPath !inSourceFileNamePath]
  else
    let targetDefinitionDir = [[option plm_options.useDirAsTargetDir value] absolutePathFromPath !inCurrentDirectory]
    s = @string.stringWithContentsOfFile {!targetDefinitionDir + "/" + inSourceFileNamePath}
  end
  for (templateString replacementString) in inSubstitutions do
    s = [s stringByReplacingStringByString !templateString !replacementString]
  end
  [s writeToFileWhenDifferentContents !inDestinationAbsoluteFilePath ?*]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func getTargetTextFile
  ?currentDir:let @string inCurrentDirectory
  ?from:let @string inTargetFile
  -> @string outContents
{
  if [option plm_options.useDirAsTargetDir value] == "" then # From embedded file
    let fw = [filewrapper targetTemplates]
    outContents = [fw textFileContentsAtPath !inTargetFile]
  else
    let targetDefinitionDir = [[option plm_options.useDirAsTargetDir value] absolutePathFromPath !inCurrentDirectory]
    outContents = @string.stringWithContentsOfFile {!targetDefinitionDir + "/" + inTargetFile}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

