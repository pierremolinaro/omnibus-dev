#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @newIntegerRepresentationDeclaration : @abstractDeclaration {
  @lstring mBaseTypeName
  @lstring mCType
  @luint64 mSize
  @bool mIsSigned
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @newIntegerRepresentationDeclaration location -> @location outLocation {
  outLocation = mBaseTypeName.location
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension plm_target_specific_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <declaration> ?!@ast ioAST {
    $newSignedRepresentation$
    $attribute$ ?let newAttributeName
    $literal_string$ ?let cType
    $integer$ ?let size
    ioAST.mDeclarationList += !@newIntegerRepresentationDeclaration.new {
      !newAttributeName
      !cType
      !size
      !true
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

  rule <declaration> ?!@ast ioAST {
    $newUnsignedRepresentation$
    $attribute$ ?let newAttributeName
    $literal_string$ ?let cType
    $integer$ ?let size
    ioAST.mDeclarationList += !@newIntegerRepresentationDeclaration.new {
      !newAttributeName
      !cType
      !size
      !false
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @newIntegerRepresentationDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addNode !.new {!"basetype " + mBaseTypeName !mBaseTypeName.location} !self]
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @newIntegerRepresentationDeclaration keyRepresentation -> @string outRepresentation {
  outRepresentation = "bool " + mBaseTypeName 
}

#----------------------------------------------------------------------------------------------------------------------*
#  ENTER IN CONTEXT                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @newIntegerRepresentationDeclaration enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@globalLiteralStringMap unused ioGlobalLiteralStringMap
{
#--- Check size
  if (mSize.uint64 != 8L) && (mSize.uint64 != 16L) && (mSize.uint64 != 32L) && (mSize.uint64 != 64L) then
    error mSize : "Only 8, 16, 32 or 64 are accepted here"
  end
#---
  [!?ioContext.mTargetBaseTypeMap insertKey
    !mBaseTypeName
    !mCType.string
    ![mSize.uint64 uint]
    !mIsSigned
  ]
}


#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTIC ANALYSIS                                                                                                   *
#----------------------------------------------------------------------------------------------------------------------*

override method @newIntegerRepresentationDeclaration semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#----------------------------------------------------------------------------------------------------------------------*
