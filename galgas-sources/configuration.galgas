#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @interruptionPanicCode {
  case noPanicCode
  case panicCode (@lbigint value)
}

#·······················································································································

list @interruptionConfigurationList {
  @lstring mInterruptName
  @interruptionPanicCode mInterruptionPanicCode
}

#·······················································································································

struct @targetParameters {
  @2lstringlist mPython_utilityToolList
  @lstring mPython_build
#  @lstring mPython_build_verbose
#  @lstring mPython_clean
#  @lstring mPython_objdump
#  @lstring mPython_objsize
#  @lstring mPython_run
  @lstring mTargetPanic_LL_filePath
  @lstring mLinkerScript
  @lbigint mPointerSize
  @lbigint mSystemStackSize
  @lbigint mStackedUserRegisterOnInterruptByteSize
  @lbigint mServicePushedRegisterByteSize
  @lbigint mSectionPushedRegisterByteSize
  @lstring mSectionInvocationScheme
  @lstringlist m_C_definitionFiles
  @lstringlist m_S_definitionFiles
  @lstringlist m_LL_definitionFiles
}

#·······················································································································

class @configurationDeclarationAST : @abstractDeclaration {
  @lstring mPanicCodeTypeName
  @lstring mPanicLineTypeName
  @lstring mUnsignedIntegerTypeName
  @targetParameters mTargetParameters
  @interruptionConfigurationList mInterruptionConfigurationList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_target_specific_syntax {

  #·····················································································································

  rule <configuration_start_symbol>
    ?!@ast ioAst
    !importClauseList:@lstringlist outImportedFileList
    !endOfSourceFile:@location outEndOfSourceFile
  {
    <configuration> !?ioAst
    outImportedFileList = {}
    $:$
    select
    or
      repeat
        $"string"$ ?let relativeFilePath
        outImportedFileList += !relativeFilePath
      while
        $,$
      end
    end
    outEndOfSourceFile = .here
  }

   #·····················································································································

  rule <configuration> ?!@ast ioAST {
    $:$
    @2lstringlist python_utilityToolList = {}
    select
    or
      repeat
        $"string"$ ?let relativePath
        $->$
        $"string"$ ?let destinationFile
        python_utilityToolList += !relativePath !destinationFile
      while
        $,$
      end
    end
    $:$
    $"string"$ ?let python_build
#    $:$
#    $"string"$ ?let python_build_verbose
#    $:$
#    $"string"$ ?let python_clean
#    $:$
#    $"string"$ ?let python_objdump
#    $:$
#    $"string"$ ?let python_objsize
#    $:$
#    $"string"$ ?let python_run
    $:$
    $"string"$ ?let linkerScript
    $:$
    $\$type$ ?let panicCodeTypeName 
    $,$
    $\$type$ ?let panicLineTypeName
    $,$
    $"string"$ ?let targetPanic_LL_filePath
    $:$
    $\$type$ ?let unsignedIntegerTypeName
    $:$
    $integer$ ?let pointerSize
    $:$
    $integer$ ?let systemStackSize
    $:$
    $integer$ ?let stackedUserRegisterOnInterruptByteSize
    $:$
    $integer$ ?let servicePushedRegisterByteSize
    $:$
    $"string"$ ?let sectionImplementationName
    $,$
    $integer$ ?let sectionPushedRegisterByteSize
    $:$
    @lstringlist C_definitionFiles = {}
    repeat
      $"string"$ ?let fileRelativePath
      C_definitionFiles += !fileRelativePath
    while
      $,$
    end
    $:$
    @lstringlist S_definitionFiles = {}
    repeat
      $"string"$ ?let fileRelativePath
      S_definitionFiles += !fileRelativePath
    while
      $,$
    end
    $:$
    @lstringlist LL_definitionFiles = {}
    repeat
      $"string"$ ?let fileRelativePath
      LL_definitionFiles += !fileRelativePath
    while
      $,$
    end
    let parameters = @targetParameters.new {
      !python_utilityToolList
      !python_build
#      !python_build_verbose
#      !python_clean
#      !python_objdump
#      !python_objsize
#      !python_run
      !targetPanic_LL_filePath
      !linkerScript
      !pointerSize
      !systemStackSize
      !stackedUserRegisterOnInterruptByteSize
      !servicePushedRegisterByteSize
      !sectionPushedRegisterByteSize
      !sectionImplementationName
      !C_definitionFiles
      !S_definitionFiles
      !LL_definitionFiles
    }
    <interruptConfigList> ?let interruptionConfigurationList
    ioAST.mDeclarationListAST += !@configurationDeclarationAST.new {
      !panicCodeTypeName
      !panicLineTypeName
      !unsignedIntegerTypeName
      !parameters
      !interruptionConfigurationList
    }
  }

 #·····················································································································

  rule <interruptConfigList> !@interruptionConfigurationList interruptionConfigurationList {
    $:$
    interruptionConfigurationList = {}
    select
    or
      repeat
        $identifier$ ?let interruptName
        @interruptionPanicCode interruptionPanicCode
        select
          interruptionPanicCode = .noPanicCode
        or
          $->$
          $integer$ ?let panicCode
          interruptionPanicCode = .panicCode {!value:panicCode}
        end
        interruptionConfigurationList += !interruptName !interruptionPanicCode
      while
        $,$
      end
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @configurationDeclarationAST addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  !@abstractDeclaration outNewDeclaration
{
  outNewDeclaration = self
}
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @configurationDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  let rootNode =  @lstring.new {!"config" !mPanicCodeTypeName.location}
  [!?ioGraph addNode !rootNode !self]
  let panicCodeTypeName = llvmRegularTypeMangledNameFromName (!mPanicCodeTypeName)
  [!?ioGraph addEdge !rootNode !panicCodeTypeName]
  let panicLineTypeName = llvmRegularTypeMangledNameFromName (!mPanicLineTypeName)
  [!?ioGraph addEdge !rootNode !panicLineTypeName]
  let unsignedIntegerTypeName =llvmRegularTypeMangledNameFromName (!mUnsignedIntegerTypeName)
  [!?ioGraph addEdge !rootNode !unsignedIntegerTypeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @configurationDeclarationAST location -> @location outLocation {
  outLocation = mPanicCodeTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @configurationDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "config" 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @configurationDeclarationAST enterRoutinesInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext unused ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# Duplicate configuration is detected in noteTypesInPrecedenceGraph

override method @configurationDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticlistValues:@staticlistValues_listMap unused ioStaticListValueMap
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
  @stringset panicCodeSet = {}
  if ioContext.mPointerSize != 0 then
    error mTargetParameters.mPointerSize : "duplicate configuration"
  elsif mTargetParameters.mPointerSize.bigint == 0G then
    error mTargetParameters.mPointerSize : "zero size pointer not allowed"
  else
    ioContext.mPointerSize = [mTargetParameters.mPointerSize.bigint uint]
  end
  ioContext.mTargetParameters = mTargetParameters
  ioContext.mPanicCodeType = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mPanicCodeTypeName}
  ioContext.mPanicLineType = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mPanicLineTypeName}
  ioContext.mUnsignedIntegerType = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mUnsignedIntegerTypeName}
  ioContext.mSectionInvocationScheme = mTargetParameters.mSectionInvocationScheme.string
  for (name panicCode) in mInterruptionConfigurationList do
    [!?ioContext.mAvailableInterruptMap insertKey !name !panicCode]
    switch panicCode
    case noPanicCode :
    case panicCode (value) :
      let s = [value.bigint string]
      if [panicCodeSet hasKey !s] then
        error value : "duplicate panic code"
      end
      panicCodeSet += !s
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @configurationDeclarationAST semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
