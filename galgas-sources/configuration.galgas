#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @interruptionPanicCode {
  case noPanicCode
  case panicCode (@lbigint value)
}

#·······················································································································

list @interruptionConfigurationList {
  @lstring mInterruptName
  @interruptionPanicCode mInterruptionPanicCode
}

#·······················································································································

struct @targetParameters {
  @lbigint mSystemStackSize
  @lbigint mStackedUserRegisterOnInterruptByteSize
  @lbigint mServicePushedRegisterByteSize
  @lbigint mSectionPushedRegisterByteSize
}

#·······················································································································

class @configurationDeclarationAST : @abstractDeclaration {
  @lbigint mPointerSize
  @lstring mPanicCodeTypeName
  @lstring mPanicLineTypeName
  @targetParameters mTargetParameters
  @interruptionConfigurationList mInterruptionConfigurationList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_target_specific_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $configuration$
    $integer$ ?let pointerSize
    $:$
    $typeName$ ?let panicCodeTypeName 
    $:$
    $typeName$ ?let panicLineTypeName
    $:$
    $integer$ ?let systemStackSize
    $:$
    $integer$ ?let stackedUserRegisterOnInterruptByteSize
    $:$
    $integer$ ?let servicePushedRegisterByteSize
    $:$
    $integer$ ?let sectionPushedRegisterByteSize
    ${$
    let parameters = @targetParameters.new {
      !systemStackSize
      !stackedUserRegisterOnInterruptByteSize
      !servicePushedRegisterByteSize
      !sectionPushedRegisterByteSize
    }
    @interruptionConfigurationList interruptionConfigurationList = {}
    repeat
    while
      $identifier$ ?let interruptName
      @interruptionPanicCode interruptionPanicCode
      select
        interruptionPanicCode = .noPanicCode
      or
        $:$
        $integer$ ?let panicCode
        interruptionPanicCode = .panicCode {!value:panicCode}
      end
      interruptionConfigurationList += !interruptName !interruptionPanicCode
    end
    $}$
    ioAST.mDeclarationList += !@configurationDeclarationAST.new {
      !pointerSize
      !panicCodeTypeName
      !panicLineTypeName
      !parameters
      !interruptionConfigurationList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @configurationDeclarationAST addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  !@abstractDeclaration outNewDeclaration
{
  outNewDeclaration = self
}
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @configurationDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  let rootNode =  @lstring.new {!"config" !mPanicCodeTypeName.location}
  [!?ioGraph addNode !rootNode !self]
  let panicCodeTypeName = @lstring.new {!"$" + mPanicCodeTypeName !mPanicCodeTypeName.location}
  [!?ioGraph addEdge !rootNode !panicCodeTypeName]
  let panicLineTypeName = @lstring.new {!"$" + mPanicLineTypeName !mPanicLineTypeName.location}
  [!?ioGraph addEdge !rootNode !panicLineTypeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @configurationDeclarationAST location -> @location outLocation {
  outLocation = mPanicCodeTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @configurationDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "config" 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @configurationDeclarationAST enterRoutinesInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext unused ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# Duplicate configuration is detected in noteTypesInPrecedenceGraph

override method @configurationDeclarationAST enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
  @stringset panicCodeSet = {}
  if ioContext.mPointerSize != 0 then
    error mPointerSize : "duplicate configuration"
  elsif mPointerSize.bigint == 0G then
    error mPointerSize : "zero size pointer not allowed"
  else
    ioContext.mPointerSize = [mPointerSize.bigint uint]
  end
  ioContext.mTargetParameters = mTargetParameters
  ioContext.mPanicCodeType = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mPanicCodeTypeName}
  ioContext.mPanicLineType = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mPanicLineTypeName}
  for (name panicCode) in mInterruptionConfigurationList do
    [!?ioContext.mAvailableInterruptMap insertKey !name !panicCode]
    switch panicCode
    case noPanicCode :
    case panicCode (value) :
      let s = [value.bigint string]
      if [panicCodeSet hasKey !s] then
        error value : "duplicate panic code"
      end
      panicCodeSet += !s
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @configurationDeclarationAST semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
