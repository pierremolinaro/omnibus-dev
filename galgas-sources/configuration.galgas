#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @interruptionPanicCode {
  case noCode
  case code (@lbigint value)
}

#·······················································································································

list @interruptionConfigurationList {
  @lstring mInterruptName
  @interruptionPanicCode mInterruptionPanicCode
}

#·······················································································································

struct @targetParameters {
  @location mConfigurationLocation
  
  @2lstringlist mPython_utilityToolList
  @lstring mPython_build

  @lstring mLinkerScript
  
  @uint mPointerSize

  @bool mHandleDynamicArray
 
  @lbigint mSystemStackSize
  @lbigint mStackedUserRegisterOnInterruptByteSize

  @lstring mNopInstructionStringInLLVM

  @lbigint mBitbandRegisterBaseAddress
  @lbigint mBitbandRegisterEndAddress
  @lbigint mBitbandRegisterRelocationAddress
  @lbigint mBitbandRegisterOffsetMultiplier
  @lbigint mBitbandRegisterBitMultiplier
  
  @lstring mSectionHandler
  @lbigint mSectionPushedRegisterByteSize 
  @lstring mSectionDispatcherHeader
  @lstring mSectionDispatcherEntry
  @lstring mSectionDispatcherInvocationFromAnyMode
  @lstring mSectionDispatcherInvocationFromUserMode

  @lstringlist m_C_definitionFiles
  @lstringlist m_S_definitionFiles
  @lstringlist m_LL_definitionFiles
  
  @lstring mXtrInterruptHandler
  @lstring mUndefinedInterruptHandler
  
  @lstring mServiceHandler
  @lbigint mServicePushedRegisterByteSize
  @lstring mServiceDispatcherEntry
  @lstring mServiceDispatcherHeader
  @lstring mServiceEntryNoReturnedValue
  @lstring mServiceEntryWithReturnValue
}

#·······················································································································

class @configurationDeclarationAST : @abstractDeclarationAST {
  @lstring mPanicCodeTypeName
  @lstring mPanicLineTypeName
  @targetParameters mTargetParameters
  @interruptionConfigurationList mInterruptionConfigurationList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_target_specific_syntax {

  #·····················································································································

  rule <configuration_key> ?let @string inKey {
    $identifier$ ?let key
    if key.string != inKey then
      error key : "invalid key (found '" + key + "', required '" + inKey + "'" fixit { replace inKey }
    end
    $:$
  }

  #·····················································································································

  rule <python_utility_tool_list> !@2lstringlist outPythonUtilityToolList {
    <configuration_key> !"PYTHON_UTILITIES"
    outPythonUtilityToolList = {}
    repeat
      while
      $"string"$ ?let relativePath
      $->$
      $"string"$ ?let destinationFile
      outPythonUtilityToolList += !relativePath !destinationFile
    end
  }

  #·····················································································································

  rule <configuration_start_symbol>
    ?!@ast ioAST
    !importClauseList:@lstringlist outImportedFileList
    !endOfSourceFile:@location outEndOfSourceFile
  {
    let loc = @location.here
    <python_utility_tool_list> ?let python_utilityToolList
    <configuration_key> !"PYTHON_BUILD"
    $"string"$ ?let python_build
    <configuration_key> !"LINKER_SCRIPT"
    $"string"$ ?let linkerScript
    <configuration_key> !"PANIC_CODE_TYPE_NAME"
    $\$type$ ?let panicCodeTypeName 
    <configuration_key> !"PANIC_LINE_TYPE_NAME"
    $\$type$ ?let panicLineTypeName
    <configuration_key> !"POINTER_BIT_COUNT"
    $integer$ ?let pointerSize
    <configuration_key> !"DYNAMIC_ARRAY"
    @bool handleDynamicArray
    select
      $yes$
      handleDynamicArray = true
    or
      $no$
      handleDynamicArray = false
    end
    <configuration_key> !"SYSTEM_STACK_SIZE"
    $integer$ ?let systemStackSize
    <configuration_key> !"NOP"
    $"string"$ ?let nopInstructionStringInLLVM
    <configuration_key> !"BIT_BAND"
    @lbigint bitbandRegisterBaseAddress
    @lbigint bitbandRegisterEndAddress
    @lbigint bitbandRegisterRelocationAddress
    @lbigint bitbandRegisterOffsetMultiplier
    @lbigint bitbandRegisterBitMultiplier
    select
      $no$
      bitbandRegisterBaseAddress = .new {!0G !.here}
      bitbandRegisterEndAddress = .new {!0G !.here}
      bitbandRegisterRelocationAddress = .new {!0G !.here}
      bitbandRegisterOffsetMultiplier = .new {!0G !.here}
      bitbandRegisterBitMultiplier= .new {!0G !.here}
    or
      $integer$ ?bitbandRegisterBaseAddress
      $integer$ ?bitbandRegisterEndAddress
      $integer$ ?bitbandRegisterRelocationAddress
      $integer$ ?bitbandRegisterOffsetMultiplier
      $integer$ ?bitbandRegisterBitMultiplier
    end
    <configuration_key> !"SERVICE_HANDLER"
    $"string"$ ?let serviceHandler
    <configuration_key> !"SERVICE_SYSTEM_STACK_SIZE"
    $integer$ ?let servicePushedRegisterByteSize
    <configuration_key> !"SERVICE_DISPATCHER_HEADER"
    $"string"$ ?let serviceDispatcherHeader
    <configuration_key> !"SERVICE_DISPATCHER_ENTRY"
    $"string"$ ?let serviceDispatcherEntry
    <configuration_key> !"SERVICE_ENTRY_NO_RETURNED_VALUE"
    $"string"$ ?let serviceEntryNoReturnedValue
    <configuration_key> !"SERVICE_ENTRY_WITH_RETURNED_VALUE"
    $"string"$ ?let serviceEntryReturnValue
    <configuration_key> !"SECTION_HANDLER"
    $"string"$ ?let sectionHandler
    <configuration_key> !"SECTION_SYSTEM_STACK_SIZE"
    $integer$ ?let sectionPushedRegisterByteSize
    <configuration_key> !"SECTION_DISPATCHER_HEADER"
    $"string"$ ?let sectionDispatcherHeader
    <configuration_key> !"SECTION_DISPATCHER_ENTRY"
    $"string"$ ?let sectionDispatcherEntry
    <configuration_key> !"SECTION_ENTRY_FROM_ANY_MODE"
    $"string"$ ?let sectionDispatcherInvocationFromAnyMode
    <configuration_key> !"SECTION_ENTRY_FROM_USER_MODE"
    $"string"$ ?let sectionDispatcherInvocationFromUserMode
    <configuration_key> !"INTERRUPT_HANDLER"
    $"string"$ ?let xtrInterruptHandler
    <configuration_key> !"INTERRUPT_USER_STACK_SIZE"
    $integer$ ?let stackedUserRegisterOnInterruptByteSize
    <configuration_key> !"UNUSED_INTERRUPT"
    $"string"$ ?let undefinedInterruptHandler
    <configuration_key> !"CPP_FILES"
    @lstringlist C_definitionFiles = {}
    repeat
    while
      $"string"$ ?let fileRelativePath
      C_definitionFiles += !fileRelativePath
    end
    <configuration_key> !"S_FILES"
    @lstringlist S_definitionFiles = {}
    repeat
    while
      $"string"$ ?let fileRelativePath
      S_definitionFiles += !fileRelativePath
    end
    <configuration_key> !"LL_FILES"
    @lstringlist LL_definitionFiles = {}
    repeat
    while
      $"string"$ ?let fileRelativePath
      LL_definitionFiles += !fileRelativePath
    end
    outImportedFileList = {}
    <configuration_key> !"PLM_FILES"
    repeat
    while
      $"string"$ ?let relativeFilePath
      outImportedFileList += !relativeFilePath
    end
    <interruptConfigList> ?let interruptionConfigurationList ?let interruptConstantList
    @uint ptrSize
    if pointerSize.bigint == 0G then
      error pointerSize : "zero size pointer is invalid" : ptrSize
    else
      ptrSize = [pointerSize.bigint uint]
    end
    let parameters = @targetParameters.new {
      !loc
      !python_utilityToolList
      !python_build
      !linkerScript
      !ptrSize
      !handleDynamicArray
      !systemStackSize
      !stackedUserRegisterOnInterruptByteSize
      !nopInstructionStringInLLVM
      !bitbandRegisterBaseAddress
      !bitbandRegisterEndAddress
      !bitbandRegisterRelocationAddress
      !bitbandRegisterOffsetMultiplier
      !bitbandRegisterBitMultiplier
      !sectionHandler
      !sectionPushedRegisterByteSize
      !sectionDispatcherHeader
      !sectionDispatcherEntry
      !sectionDispatcherInvocationFromAnyMode
      !sectionDispatcherInvocationFromUserMode
      !C_definitionFiles
      !S_definitionFiles
      !LL_definitionFiles
      !xtrInterruptHandler
      !undefinedInterruptHandler
      !serviceHandler
      !servicePushedRegisterByteSize
      !serviceDispatcherEntry
      !serviceDispatcherHeader
      !serviceEntryNoReturnedValue
      !serviceEntryReturnValue
    }
   ioAST.mDeclarationListAST += !@configurationDeclarationAST.new {
      !panicCodeTypeName
      !panicLineTypeName
      !parameters
      !interruptionConfigurationList
    }
    outEndOfSourceFile = .here
    ioAST.mDeclarationListAST += !@enumerationDeclarationAST.new {
      !.new {!isrSlotTypeName () !xtrInterruptHandler.location}
      !interruptConstantList
    }
  }

 #·····················································································································

  rule <interruptConfigList>
    !@interruptionConfigurationList interruptionConfigurationList
    !@enumerationConstantList outEnumerationConstantList
  {
    interruptionConfigurationList = {}
    outEnumerationConstantList = {}
    <configuration_key> !"INTERRUPTS"
    repeat
    while
      $identifier$ ?let interruptName
      @interruptionPanicCode interruptionPanicCode
      select
        interruptionPanicCode = .noCode
      or
        $->$
        $integer$ ?let panicCode
        interruptionPanicCode = .code {!value:panicCode}
        outEnumerationConstantList += !interruptName !panicCode
      end
      interruptionConfigurationList += !interruptName !interruptionPanicCode
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once configurationNodeNameForPrecedenceGraph -> @string {
  result = "config"
}

#·······················································································································

func %once isrSlotTypeName -> @string {
  result = "isrSlot"
}

#·······················································································································

override method @configurationDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  let rootNode =  @lstring.new {!configurationNodeNameForPrecedenceGraph () !mPanicCodeTypeName.location}
  [!?ioGraph addNode !rootNode !self]
  let panicCodeTypeName = llvmTypeNameFromPLMname (!mPanicCodeTypeName)
  [!?ioGraph addEdge !rootNode !panicCodeTypeName]
  let panicLineTypeName = llvmTypeNameFromPLMname (!mPanicLineTypeName)
  [!?ioGraph addEdge !rootNode !panicLineTypeName]
}

#·······················································································································

override getter @configurationDeclarationAST location -> @location outLocation {
  outLocation = mPanicCodeTypeName.location
}

#·······················································································································

override getter @configurationDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = configurationNodeNameForPrecedenceGraph ()
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# Duplicate configuration is detected in noteTypesInPrecedenceGraph

override method @configurationDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@subprogramInvocationGraph unused ioSubprogramInvocationGraph
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!globalVariables:@globalVariableIRList unused ioGlobalVariableIRList
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
{
  if ioContext.mTargetParameters.mPointerSize != 0 then
    error mTargetParameters.mConfigurationLocation : "duplicate configuration"
  end
  ioContext.mTargetParameters = mTargetParameters
#--- Panic code type
  ioContext.mPanicCodeType = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mPanicCodeTypeName}
  if [[ioContext.mPanicCodeType type].kind isInteger] then
    [[ioContext.mPanicCodeType type].kind integer ?2* ?unsigned:let unsigned ?1*]
    if not unsigned then
      error mPanicCodeTypeName : "this type should be an unsigned integer type"
    end
  else
    error mPanicCodeTypeName : "this type should be an unsigned integer type"
  end
#--- Panic line type
  ioContext.mPanicLineType = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !mPanicLineTypeName}
  if [[ioContext.mPanicLineType type].kind isInteger] then
    [[ioContext.mPanicLineType type].kind integer ?2* ?unsigned:let unsigned ?1*]
    if not unsigned then
      error mPanicLineTypeName : "this type should be an unsigned integer type"
    end
  else
    error mPanicLineTypeName : "this type should be an unsigned integer type"
  end
#--------------------------------- Interrupt panic codes
  @stringset panicCodeSet = {}
  for (name panicCode) in mInterruptionConfigurationList do
    [!?ioContext.mAvailableInterruptMap insertKey !name !panicCode]
    switch panicCode
    case noCode :
    case code (value) :
      let s = [value.bigint string]
      if [panicCodeSet hasKey !s] then
        error value : "duplicate interrupt code"
      end
      panicCodeSet += !s
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
