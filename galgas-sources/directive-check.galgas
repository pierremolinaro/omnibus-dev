#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @checkInstructionAST : @instructionAST {
  @location mCheckInstructionLocation
  @expressionAST mExpression
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $check$
    let loc = @location.here
    <expression> ?let @expressionAST expression
    ioInstructionList += !@checkInstructionAST.new {
      !loc
      !expression
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @checkInstructionAST analyze
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
{
#--- Analyze expression
  @instructionListIR instructionGenerationList = {}
  [mExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalReceiverType:inReceiverType
    !optionalTargetType:.null
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:instructionGenerationList
    ?type:let expressionType
    ?result:@operandIR expressionValueName
  ]
#--- Check inferred type
  if not [[expressionType kind] isBoolean] then
    error mCheckInstructionLocation : "expression is not boolean"
  end
#--- Check expression is static, and true
  if not [expressionValueName isStatic] then
    error mCheckInstructionLocation : "expression is not static: use assert instruction"
  else
    [expressionValueName literalInteger ?value:@bigint value]
    if value != 1G then
      error mCheckInstructionLocation : "check expression value is false"
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*
